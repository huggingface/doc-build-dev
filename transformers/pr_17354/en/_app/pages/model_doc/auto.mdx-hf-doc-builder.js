import{S as rRt,i as tRt,s as aRt,e as a,k as l,w as F,t as o,M as nRt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as sRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Yzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function lRt(y){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,N6,bf,De,We,_i,Ln,q6,yn,xn,j6,ui,$n,D6,bi,vf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),N6=o(")."),bf=l(),De=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),q6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),j6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),D6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sk=s(p);m=r(sk,"NewModelConfig"),sk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var lk=s(gi);uf=r(lk,"model_type"),lk.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var ik=s(hi);pi=r(ik,'"new-model"'),ik.forEach(t),N6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var Aa=s(_i);Ln=r(Aa,"NewModel"),Aa.forEach(t),q6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var dk=s(yn);xn=r(dk,"PreTrainedModel"),dk.forEach(t),j6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),D6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var ck=s(bi);vf=r(ck,"NewModelConfig"),ck.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,tt),e(g,hi),e(hi,pi),e(g,N6),b(Qe,bf,Ae),b(Qe,De,Ae),e(De,We),e(De,_i),e(_i,Ln),e(De,q6),e(De,yn),e(yn,xn),e(De,j6),e(De,ui),e(ui,$n),e(De,D6),e(De,bi),e(bi,vf),e(De,wa)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(De)}}}function iRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function fRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function gRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(y){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,N6,bf,De,We,_i,Ln,q6,yn,xn,j6,ui,$n,D6,bi,vf,wa,Qe,Ae,sk,vi,lk,ik,Eo,Aa,dk,Ff,ck,mVe,oje,Fi,Tf,Ioe,G6,gVe,Noe,hVe,rje,kn,pVe,qoe,_Ve,uVe,joe,bVe,vVe,tje,O6,aje,fk,FVe,nje,Mf,sje,Ti,Ef,Doe,V6,TVe,Goe,MVe,lje,Co,X6,EVe,z6,CVe,mk,wVe,AVe,LVe,W6,yVe,Ooe,xVe,$Ve,kVe,Er,Q6,SVe,Voe,RVe,PVe,Mi,BVe,Xoe,IVe,NVe,zoe,qVe,jVe,DVe,A,Cf,Woe,GVe,OVe,gk,VVe,XVe,zVe,wf,Qoe,WVe,QVe,hk,HVe,UVe,JVe,Af,Hoe,YVe,KVe,pk,ZVe,eXe,oXe,Lf,Uoe,rXe,tXe,_k,aXe,nXe,sXe,yf,Joe,lXe,iXe,uk,dXe,cXe,fXe,xf,Yoe,mXe,gXe,bk,hXe,pXe,_Xe,$f,Koe,uXe,bXe,vk,vXe,FXe,TXe,kf,Zoe,MXe,EXe,Fk,CXe,wXe,AXe,Sf,ere,LXe,yXe,Tk,xXe,$Xe,kXe,Rf,ore,SXe,RXe,Mk,PXe,BXe,IXe,Pf,rre,NXe,qXe,Ek,jXe,DXe,GXe,Bf,tre,OXe,VXe,Ck,XXe,zXe,WXe,If,are,QXe,HXe,wk,UXe,JXe,YXe,Nf,nre,KXe,ZXe,Ak,eze,oze,rze,qf,sre,tze,aze,Lk,nze,sze,lze,jf,lre,ize,dze,yk,cze,fze,mze,Df,ire,gze,hze,xk,pze,_ze,uze,Gf,dre,bze,vze,$k,Fze,Tze,Mze,Of,cre,Eze,Cze,kk,wze,Aze,Lze,Vf,fre,yze,xze,Sk,$ze,kze,Sze,Xf,mre,Rze,Pze,Rk,Bze,Ize,Nze,zf,gre,qze,jze,Pk,Dze,Gze,Oze,Wf,hre,Vze,Xze,Bk,zze,Wze,Qze,Qf,pre,Hze,Uze,Ik,Jze,Yze,Kze,Hf,_re,Zze,eWe,Nk,oWe,rWe,tWe,Uf,ure,aWe,nWe,qk,sWe,lWe,iWe,Jf,bre,dWe,cWe,jk,fWe,mWe,gWe,Yf,vre,hWe,pWe,Dk,_We,uWe,bWe,Kf,Fre,vWe,FWe,Gk,TWe,MWe,EWe,Zf,Tre,CWe,wWe,Ok,AWe,LWe,yWe,em,Mre,xWe,$We,Vk,kWe,SWe,RWe,om,Ere,PWe,BWe,Xk,IWe,NWe,qWe,rm,Cre,jWe,DWe,zk,GWe,OWe,VWe,tm,wre,XWe,zWe,Wk,WWe,QWe,HWe,am,Are,UWe,JWe,Qk,YWe,KWe,ZWe,nm,Lre,eQe,oQe,Hk,rQe,tQe,aQe,sm,yre,nQe,sQe,Uk,lQe,iQe,dQe,lm,xre,cQe,fQe,Jk,mQe,gQe,hQe,im,$re,pQe,_Qe,Yk,uQe,bQe,vQe,dm,kre,FQe,TQe,Kk,MQe,EQe,CQe,cm,Sre,wQe,AQe,Zk,LQe,yQe,xQe,fm,Rre,$Qe,kQe,eS,SQe,RQe,PQe,mm,Pre,BQe,IQe,oS,NQe,qQe,jQe,gm,Bre,DQe,GQe,rS,OQe,VQe,XQe,hm,Ire,zQe,WQe,tS,QQe,HQe,UQe,pm,Nre,JQe,YQe,aS,KQe,ZQe,eHe,_m,qre,oHe,rHe,nS,tHe,aHe,nHe,um,jre,sHe,lHe,sS,iHe,dHe,cHe,bm,Dre,fHe,mHe,lS,gHe,hHe,pHe,vm,Gre,_He,uHe,iS,bHe,vHe,FHe,Fm,Ore,THe,MHe,dS,EHe,CHe,wHe,Tm,Vre,AHe,LHe,cS,yHe,xHe,$He,Mm,Xre,kHe,SHe,fS,RHe,PHe,BHe,Em,zre,IHe,NHe,mS,qHe,jHe,DHe,Cm,Wre,GHe,OHe,gS,VHe,XHe,zHe,wm,Qre,WHe,QHe,hS,HHe,UHe,JHe,Am,Hre,YHe,KHe,pS,ZHe,eUe,oUe,Lm,Ure,rUe,tUe,_S,aUe,nUe,sUe,ym,Jre,lUe,iUe,uS,dUe,cUe,fUe,xm,Yre,mUe,gUe,bS,hUe,pUe,_Ue,$m,Kre,uUe,bUe,vS,vUe,FUe,TUe,km,Zre,MUe,EUe,FS,CUe,wUe,AUe,Sm,ete,LUe,yUe,TS,xUe,$Ue,kUe,Rm,ote,SUe,RUe,MS,PUe,BUe,IUe,Pm,rte,NUe,qUe,ES,jUe,DUe,GUe,Bm,tte,OUe,VUe,CS,XUe,zUe,WUe,Im,ate,QUe,HUe,wS,UUe,JUe,YUe,Nm,nte,KUe,ZUe,AS,eJe,oJe,rJe,qm,ste,tJe,aJe,LS,nJe,sJe,lJe,jm,lte,iJe,dJe,yS,cJe,fJe,mJe,Dm,ite,gJe,hJe,xS,pJe,_Je,uJe,Gm,dte,bJe,vJe,$S,FJe,TJe,MJe,Om,cte,EJe,CJe,kS,wJe,AJe,LJe,Vm,fte,yJe,xJe,SS,$Je,kJe,SJe,Xm,mte,RJe,PJe,RS,BJe,IJe,NJe,zm,gte,qJe,jJe,PS,DJe,GJe,OJe,Wm,hte,VJe,XJe,BS,zJe,WJe,QJe,Qm,pte,HJe,UJe,IS,JJe,YJe,KJe,Hm,_te,ZJe,eYe,NS,oYe,rYe,tYe,Um,ute,aYe,nYe,qS,sYe,lYe,iYe,Jm,bte,dYe,cYe,jS,fYe,mYe,gYe,Ym,vte,hYe,pYe,DS,_Ye,uYe,bYe,Km,Fte,vYe,FYe,GS,TYe,MYe,EYe,Zm,Tte,CYe,wYe,OS,AYe,LYe,yYe,eg,Mte,xYe,$Ye,VS,kYe,SYe,RYe,og,Ete,PYe,BYe,XS,IYe,NYe,qYe,rg,Cte,jYe,DYe,zS,GYe,OYe,VYe,tg,wte,XYe,zYe,WS,WYe,QYe,HYe,ag,Ate,UYe,JYe,QS,YYe,KYe,ZYe,ng,Lte,eKe,oKe,HS,rKe,tKe,aKe,sg,yte,nKe,sKe,US,lKe,iKe,dKe,lg,xte,cKe,fKe,JS,mKe,gKe,hKe,ig,$te,pKe,_Ke,YS,uKe,bKe,vKe,dg,kte,FKe,TKe,KS,MKe,EKe,CKe,cg,Ste,wKe,AKe,ZS,LKe,yKe,xKe,fg,Rte,$Ke,kKe,eR,SKe,RKe,PKe,mg,Pte,BKe,IKe,oR,NKe,qKe,jKe,gg,Bte,DKe,GKe,rR,OKe,VKe,XKe,hg,Ite,zKe,WKe,tR,QKe,HKe,UKe,pg,Nte,JKe,YKe,aR,KKe,ZKe,eZe,_g,qte,oZe,rZe,nR,tZe,aZe,nZe,ug,jte,sZe,lZe,sR,iZe,dZe,cZe,bg,Dte,fZe,mZe,lR,gZe,hZe,pZe,vg,Gte,_Ze,uZe,iR,bZe,vZe,FZe,Fg,Ote,TZe,MZe,dR,EZe,CZe,wZe,Tg,Vte,AZe,LZe,cR,yZe,xZe,$Ze,Mg,Xte,kZe,SZe,fR,RZe,PZe,BZe,Eg,zte,IZe,NZe,mR,qZe,jZe,DZe,Cg,Wte,GZe,OZe,gR,VZe,XZe,zZe,wg,Qte,WZe,QZe,hR,HZe,UZe,JZe,Ag,Hte,YZe,KZe,pR,ZZe,eeo,oeo,Lg,reo,yg,H6,teo,Ute,aeo,ije,Ei,xg,Jte,U6,neo,Yte,seo,dje,wo,J6,leo,Y6,ieo,_R,deo,ceo,feo,K6,meo,Kte,geo,heo,peo,Cr,Z6,_eo,Zte,ueo,beo,La,veo,eae,Feo,Teo,oae,Meo,Eeo,rae,Ceo,weo,Aeo,k,Sn,tae,Leo,yeo,uR,xeo,$eo,bR,keo,Seo,Reo,Rn,aae,Peo,Beo,vR,Ieo,Neo,FR,qeo,jeo,Deo,Pn,nae,Geo,Oeo,TR,Veo,Xeo,MR,zeo,Weo,Qeo,$g,sae,Heo,Ueo,ER,Jeo,Yeo,Keo,Bn,lae,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,kg,iae,soo,loo,AR,ioo,doo,coo,Sg,dae,foo,moo,LR,goo,hoo,poo,Rg,cae,_oo,uoo,yR,boo,voo,Foo,In,fae,Too,Moo,xR,Eoo,Coo,$R,woo,Aoo,Loo,Nn,mae,yoo,xoo,kR,$oo,koo,SR,Soo,Roo,Poo,qn,gae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Pg,hae,Ooo,Voo,BR,Xoo,zoo,Woo,Bg,pae,Qoo,Hoo,IR,Uoo,Joo,Yoo,jn,_ae,Koo,Zoo,NR,ero,oro,qR,rro,tro,aro,Ig,uae,nro,sro,jR,lro,iro,dro,Dn,bae,cro,fro,DR,mro,gro,GR,hro,pro,_ro,Gn,vae,uro,bro,OR,vro,Fro,VR,Tro,Mro,Ero,On,Fae,Cro,wro,XR,Aro,Lro,zR,yro,xro,$ro,Ng,Tae,kro,Sro,WR,Rro,Pro,Bro,Vn,Mae,Iro,Nro,QR,qro,jro,HR,Dro,Gro,Oro,Xn,Eae,Vro,Xro,UR,zro,Wro,JR,Qro,Hro,Uro,zn,Cae,Jro,Yro,YR,Kro,Zro,KR,eto,oto,rto,Wn,wae,tto,ato,ZR,nto,sto,eP,lto,ito,dto,Qn,Aae,cto,fto,oP,mto,gto,rP,hto,pto,_to,Hn,Lae,uto,bto,tP,vto,Fto,aP,Tto,Mto,Eto,qg,yae,Cto,wto,nP,Ato,Lto,yto,Un,xae,xto,$to,sP,kto,Sto,lP,Rto,Pto,Bto,jg,$ae,Ito,Nto,iP,qto,jto,Dto,Jn,kae,Gto,Oto,dP,Vto,Xto,cP,zto,Wto,Qto,Yn,Sae,Hto,Uto,fP,Jto,Yto,mP,Kto,Zto,eao,Kn,Rae,oao,rao,gP,tao,aao,hP,nao,sao,lao,Dg,Pae,iao,dao,pP,cao,fao,mao,Zn,Bae,gao,hao,_P,pao,_ao,uP,uao,bao,vao,es,Iae,Fao,Tao,bP,Mao,Eao,vP,Cao,wao,Aao,Gg,Nae,Lao,yao,FP,xao,$ao,kao,os,qae,Sao,Rao,TP,Pao,Bao,MP,Iao,Nao,qao,rs,jae,jao,Dao,EP,Gao,Oao,CP,Vao,Xao,zao,ts,Dae,Wao,Qao,wP,Hao,Uao,AP,Jao,Yao,Kao,as,Gae,Zao,eno,LP,ono,rno,yP,tno,ano,nno,ns,Oae,sno,lno,xP,ino,dno,$P,cno,fno,mno,ss,Vae,gno,hno,kP,pno,_no,SP,uno,bno,vno,ls,Xae,Fno,Tno,RP,Mno,Eno,PP,Cno,wno,Ano,Og,zae,Lno,yno,BP,xno,$no,kno,is,Wae,Sno,Rno,IP,Pno,Bno,NP,Ino,Nno,qno,Vg,Qae,jno,Dno,qP,Gno,Ono,Vno,Xg,Hae,Xno,zno,jP,Wno,Qno,Hno,ds,Uae,Uno,Jno,DP,Yno,Kno,GP,Zno,eso,oso,cs,Jae,rso,tso,OP,aso,nso,VP,sso,lso,iso,fs,Yae,dso,cso,XP,fso,mso,zP,gso,hso,pso,zg,Kae,_so,uso,WP,bso,vso,Fso,ms,Zae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,Lso,gs,ene,yso,xso,UP,$so,kso,JP,Sso,Rso,Pso,hs,one,Bso,Iso,YP,Nso,qso,KP,jso,Dso,Gso,ps,rne,Oso,Vso,ZP,Xso,zso,eB,Wso,Qso,Hso,_s,tne,Uso,Jso,oB,Yso,Kso,rB,Zso,elo,olo,Wg,ane,rlo,tlo,tB,alo,nlo,slo,us,nne,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Qg,sne,hlo,plo,sB,_lo,ulo,blo,Hg,lne,vlo,Flo,lB,Tlo,Mlo,Elo,Ug,ine,Clo,wlo,iB,Alo,Llo,ylo,Jg,dne,xlo,$lo,dB,klo,Slo,Rlo,bs,cne,Plo,Blo,cB,Ilo,Nlo,fB,qlo,jlo,Dlo,Yg,fne,Glo,Olo,mB,Vlo,Xlo,zlo,vs,mne,Wlo,Qlo,gB,Hlo,Ulo,hB,Jlo,Ylo,Klo,Fs,gne,Zlo,eio,pB,oio,rio,_B,tio,aio,nio,Ts,hne,sio,lio,uB,iio,dio,bB,cio,fio,mio,Ms,pne,gio,hio,vB,pio,_io,FB,uio,bio,vio,Es,_ne,Fio,Tio,TB,Mio,Eio,MB,Cio,wio,Aio,Cs,une,Lio,yio,EB,xio,$io,CB,kio,Sio,Rio,Kg,bne,Pio,Bio,wB,Iio,Nio,qio,Zg,vne,jio,Dio,AB,Gio,Oio,Vio,ws,Fne,Xio,zio,LB,Wio,Qio,yB,Hio,Uio,Jio,As,Tne,Yio,Kio,xB,Zio,edo,$B,odo,rdo,tdo,Ls,Mne,ado,ndo,kB,sdo,ldo,SB,ido,ddo,cdo,eh,Ene,fdo,mdo,RB,gdo,hdo,pdo,oh,Cne,_do,udo,PB,bdo,vdo,Fdo,rh,wne,Tdo,Mdo,BB,Edo,Cdo,wdo,ys,Ane,Ado,Ldo,IB,ydo,xdo,NB,$do,kdo,Sdo,th,Lne,Rdo,Pdo,qB,Bdo,Ido,Ndo,ah,yne,qdo,jdo,jB,Ddo,Gdo,Odo,nh,xne,Vdo,Xdo,DB,zdo,Wdo,Qdo,xs,$ne,Hdo,Udo,GB,Jdo,Ydo,OB,Kdo,Zdo,eco,sh,kne,oco,rco,VB,tco,aco,nco,lh,Sne,sco,lco,XB,ico,dco,cco,$s,Rne,fco,mco,zB,gco,hco,WB,pco,_co,uco,ks,Pne,bco,vco,QB,Fco,Tco,HB,Mco,Eco,Cco,Ss,Bne,wco,Aco,UB,Lco,yco,JB,xco,$co,kco,Rs,Ine,Sco,Rco,YB,Pco,Bco,KB,Ico,Nco,qco,ih,jco,dh,eL,Dco,Nne,Gco,cje,Ci,ch,qne,oL,Oco,jne,Vco,fje,Ao,rL,Xco,tL,zco,ZB,Wco,Qco,Hco,aL,Uco,Dne,Jco,Yco,Kco,He,nL,Zco,Gne,efo,ofo,ya,rfo,One,tfo,afo,Vne,nfo,sfo,Xne,lfo,ifo,dfo,Y,fh,zne,cfo,ffo,eI,mfo,gfo,hfo,mh,Wne,pfo,_fo,oI,ufo,bfo,vfo,gh,Qne,Ffo,Tfo,rI,Mfo,Efo,Cfo,hh,Hne,wfo,Afo,tI,Lfo,yfo,xfo,ph,Une,$fo,kfo,aI,Sfo,Rfo,Pfo,_h,Jne,Bfo,Ifo,nI,Nfo,qfo,jfo,uh,Yne,Dfo,Gfo,sI,Ofo,Vfo,Xfo,bh,Kne,zfo,Wfo,lI,Qfo,Hfo,Ufo,vh,Zne,Jfo,Yfo,iI,Kfo,Zfo,emo,Fh,ese,omo,rmo,dI,tmo,amo,nmo,Th,ose,smo,lmo,cI,imo,dmo,cmo,Mh,rse,fmo,mmo,fI,gmo,hmo,pmo,Eh,tse,_mo,umo,mI,bmo,vmo,Fmo,Ch,ase,Tmo,Mmo,gI,Emo,Cmo,wmo,wh,nse,Amo,Lmo,hI,ymo,xmo,$mo,Ah,sse,kmo,Smo,pI,Rmo,Pmo,Bmo,Lh,lse,Imo,Nmo,_I,qmo,jmo,Dmo,yh,ise,Gmo,Omo,uI,Vmo,Xmo,zmo,xh,dse,Wmo,Qmo,bI,Hmo,Umo,Jmo,$h,cse,Ymo,Kmo,vI,Zmo,ego,ogo,kh,fse,rgo,tgo,FI,ago,ngo,sgo,Sh,mse,lgo,igo,TI,dgo,cgo,fgo,Rh,gse,mgo,ggo,MI,hgo,pgo,_go,Ph,hse,ugo,bgo,EI,vgo,Fgo,Tgo,Bh,pse,Mgo,Ego,CI,Cgo,wgo,Ago,Ih,_se,Lgo,ygo,wI,xgo,$go,kgo,Nh,use,Sgo,Rgo,AI,Pgo,Bgo,Igo,qh,bse,Ngo,qgo,LI,jgo,Dgo,Ggo,jh,vse,Ogo,Vgo,yI,Xgo,zgo,Wgo,Dh,Fse,Qgo,Hgo,xI,Ugo,Jgo,Ygo,Gh,Tse,Kgo,Zgo,$I,eho,oho,rho,Oh,tho,Vh,aho,Xh,sL,nho,Mse,sho,mje,wi,zh,Ese,lL,lho,Cse,iho,gje,Lo,iL,dho,dL,cho,kI,fho,mho,gho,cL,hho,wse,pho,_ho,uho,Ue,fL,bho,Ase,vho,Fho,Ai,Tho,Lse,Mho,Eho,yse,Cho,who,Aho,he,Wh,xse,Lho,yho,SI,xho,$ho,kho,Qh,$se,Sho,Rho,kse,Pho,Bho,Iho,Hh,Sse,Nho,qho,RI,jho,Dho,Gho,Uh,Rse,Oho,Vho,PI,Xho,zho,Who,Jh,Pse,Qho,Hho,BI,Uho,Jho,Yho,Yh,Bse,Kho,Zho,II,epo,opo,rpo,Kh,Ise,tpo,apo,NI,npo,spo,lpo,Zh,Nse,ipo,dpo,qI,cpo,fpo,mpo,ep,qse,gpo,hpo,jI,ppo,_po,upo,op,jse,bpo,vpo,DI,Fpo,Tpo,Mpo,rp,Dse,Epo,Cpo,GI,wpo,Apo,Lpo,tp,Gse,ypo,xpo,OI,$po,kpo,Spo,ap,Ose,Rpo,Ppo,VI,Bpo,Ipo,Npo,np,Vse,qpo,jpo,XI,Dpo,Gpo,Opo,sp,Xse,Vpo,Xpo,zI,zpo,Wpo,Qpo,lp,zse,Hpo,Upo,WI,Jpo,Ypo,Kpo,ip,Wse,Zpo,e_o,QI,o_o,r_o,t_o,dp,a_o,cp,n_o,fp,mL,s_o,Qse,l_o,hje,Li,mp,Hse,gL,i_o,Use,d_o,pje,yo,hL,c_o,yi,f_o,HI,m_o,g_o,UI,h_o,p_o,__o,pL,u_o,Jse,b_o,v_o,F_o,at,_L,T_o,Yse,M_o,E_o,xi,C_o,Kse,w_o,A_o,JI,L_o,y_o,x_o,gp,$_o,Je,uL,k_o,Zse,S_o,R_o,xa,P_o,ele,B_o,I_o,ole,N_o,q_o,rle,j_o,D_o,G_o,x,hp,tle,O_o,V_o,YI,X_o,z_o,W_o,pp,ale,Q_o,H_o,KI,U_o,J_o,Y_o,_p,nle,K_o,Z_o,ZI,euo,ouo,ruo,up,sle,tuo,auo,eN,nuo,suo,luo,bp,lle,iuo,duo,oN,cuo,fuo,muo,vp,ile,guo,huo,rN,puo,_uo,uuo,Fp,dle,buo,vuo,tN,Fuo,Tuo,Muo,Tp,cle,Euo,Cuo,aN,wuo,Auo,Luo,Mp,fle,yuo,xuo,nN,$uo,kuo,Suo,Ep,mle,Ruo,Puo,sN,Buo,Iuo,Nuo,Cp,gle,quo,juo,lN,Duo,Guo,Ouo,wp,hle,Vuo,Xuo,iN,zuo,Wuo,Quo,Ap,ple,Huo,Uuo,dN,Juo,Yuo,Kuo,Lp,_le,Zuo,e1o,cN,o1o,r1o,t1o,yp,ule,a1o,n1o,fN,s1o,l1o,i1o,xp,ble,d1o,c1o,mN,f1o,m1o,g1o,$p,vle,h1o,p1o,gN,_1o,u1o,b1o,kp,Fle,v1o,F1o,hN,T1o,M1o,E1o,Sp,Tle,C1o,w1o,pN,A1o,L1o,y1o,Rp,Mle,x1o,$1o,_N,k1o,S1o,R1o,Pp,Ele,P1o,B1o,uN,I1o,N1o,q1o,Bp,Cle,j1o,D1o,bN,G1o,O1o,V1o,Ip,wle,X1o,z1o,vN,W1o,Q1o,H1o,Np,Ale,U1o,J1o,FN,Y1o,K1o,Z1o,qp,Lle,ebo,obo,TN,rbo,tbo,abo,jp,yle,nbo,sbo,MN,lbo,ibo,dbo,Dp,xle,cbo,fbo,EN,mbo,gbo,hbo,Gp,$le,pbo,_bo,CN,ubo,bbo,vbo,Op,kle,Fbo,Tbo,wN,Mbo,Ebo,Cbo,Vp,Sle,wbo,Abo,AN,Lbo,ybo,xbo,Xp,Rle,$bo,kbo,LN,Sbo,Rbo,Pbo,zp,Ple,Bbo,Ibo,yN,Nbo,qbo,jbo,Ps,Ble,Dbo,Gbo,xN,Obo,Vbo,$N,Xbo,zbo,Wbo,Wp,Ile,Qbo,Hbo,kN,Ubo,Jbo,Ybo,Qp,Nle,Kbo,Zbo,SN,e2o,o2o,r2o,Hp,qle,t2o,a2o,RN,n2o,s2o,l2o,Up,jle,i2o,d2o,PN,c2o,f2o,m2o,Jp,Dle,g2o,h2o,BN,p2o,_2o,u2o,Yp,Gle,b2o,v2o,IN,F2o,T2o,M2o,Kp,Ole,E2o,C2o,NN,w2o,A2o,L2o,Zp,Vle,y2o,x2o,qN,$2o,k2o,S2o,e_,Xle,R2o,P2o,jN,B2o,I2o,N2o,o_,zle,q2o,j2o,DN,D2o,G2o,O2o,r_,Wle,V2o,X2o,GN,z2o,W2o,Q2o,t_,Qle,H2o,U2o,ON,J2o,Y2o,K2o,a_,Hle,Z2o,e4o,VN,o4o,r4o,t4o,n_,Ule,a4o,n4o,XN,s4o,l4o,i4o,s_,Jle,d4o,c4o,zN,f4o,m4o,g4o,l_,Yle,h4o,p4o,WN,_4o,u4o,b4o,i_,Kle,v4o,F4o,QN,T4o,M4o,E4o,d_,Zle,C4o,w4o,HN,A4o,L4o,y4o,c_,eie,x4o,$4o,UN,k4o,S4o,R4o,f_,oie,P4o,B4o,JN,I4o,N4o,q4o,m_,rie,j4o,D4o,YN,G4o,O4o,V4o,g_,tie,X4o,z4o,KN,W4o,Q4o,H4o,h_,aie,U4o,J4o,ZN,Y4o,K4o,Z4o,p_,nie,evo,ovo,eq,rvo,tvo,avo,__,sie,nvo,svo,oq,lvo,ivo,dvo,u_,lie,cvo,fvo,rq,mvo,gvo,hvo,b_,iie,pvo,_vo,tq,uvo,bvo,vvo,v_,die,Fvo,Tvo,aq,Mvo,Evo,Cvo,F_,cie,wvo,Avo,nq,Lvo,yvo,xvo,T_,fie,$vo,kvo,sq,Svo,Rvo,Pvo,M_,mie,Bvo,Ivo,lq,Nvo,qvo,jvo,E_,gie,Dvo,Gvo,iq,Ovo,Vvo,Xvo,C_,hie,zvo,Wvo,dq,Qvo,Hvo,Uvo,w_,pie,Jvo,Yvo,cq,Kvo,Zvo,e5o,A_,_ie,o5o,r5o,fq,t5o,a5o,n5o,L_,uie,s5o,l5o,mq,i5o,d5o,c5o,y_,bie,f5o,m5o,gq,g5o,h5o,p5o,x_,vie,_5o,u5o,hq,b5o,v5o,F5o,$_,Fie,T5o,M5o,pq,E5o,C5o,w5o,k_,Tie,A5o,L5o,_q,y5o,x5o,$5o,S_,Mie,k5o,S5o,uq,R5o,P5o,B5o,R_,Eie,I5o,N5o,bq,q5o,j5o,D5o,P_,Cie,G5o,O5o,vq,V5o,X5o,z5o,B_,wie,W5o,Q5o,Fq,H5o,U5o,J5o,I_,Aie,Y5o,K5o,Tq,Z5o,e3o,o3o,N_,Lie,r3o,t3o,Mq,a3o,n3o,s3o,q_,yie,l3o,i3o,Eq,d3o,c3o,f3o,j_,xie,m3o,g3o,Cq,h3o,p3o,_3o,D_,$ie,u3o,b3o,wq,v3o,F3o,T3o,G_,kie,M3o,E3o,Aq,C3o,w3o,A3o,O_,Sie,L3o,y3o,Lq,x3o,$3o,k3o,V_,Rie,S3o,R3o,yq,P3o,B3o,I3o,X_,Pie,N3o,q3o,xq,j3o,D3o,G3o,z_,Bie,O3o,V3o,$q,X3o,z3o,W3o,W_,Iie,Q3o,H3o,kq,U3o,J3o,Y3o,Q_,Nie,K3o,Z3o,Sq,eFo,oFo,rFo,H_,qie,tFo,aFo,Rq,nFo,sFo,lFo,U_,jie,iFo,dFo,Pq,cFo,fFo,mFo,J_,Die,gFo,hFo,Bq,pFo,_Fo,uFo,Y_,Gie,bFo,vFo,Iq,FFo,TFo,MFo,K_,Oie,EFo,CFo,Nq,wFo,AFo,LFo,Z_,Vie,yFo,xFo,qq,$Fo,kFo,SFo,eu,Xie,RFo,PFo,jq,BFo,IFo,NFo,ou,zie,qFo,jFo,Dq,DFo,GFo,OFo,ru,Wie,VFo,XFo,Gq,zFo,WFo,QFo,tu,Qie,HFo,UFo,Oq,JFo,YFo,KFo,au,Hie,ZFo,eTo,Vq,oTo,rTo,tTo,nu,Uie,aTo,nTo,Xq,sTo,lTo,iTo,su,Jie,dTo,cTo,zq,fTo,mTo,gTo,lu,Yie,hTo,pTo,Wq,_To,uTo,bTo,iu,Kie,vTo,FTo,Qq,TTo,MTo,ETo,du,CTo,Zie,wTo,ATo,ede,LTo,yTo,cu,_je,$i,fu,ode,bL,xTo,rde,$To,uje,xo,vL,kTo,ki,STo,Hq,RTo,PTo,Uq,BTo,ITo,NTo,FL,qTo,tde,jTo,DTo,GTo,nt,TL,OTo,ade,VTo,XTo,Si,zTo,nde,WTo,QTo,Jq,HTo,UTo,JTo,mu,YTo,Ye,ML,KTo,sde,ZTo,e7o,$a,o7o,lde,r7o,t7o,ide,a7o,n7o,dde,s7o,l7o,i7o,G,gu,cde,d7o,c7o,Yq,f7o,m7o,g7o,hu,fde,h7o,p7o,Kq,_7o,u7o,b7o,pu,mde,v7o,F7o,Zq,T7o,M7o,E7o,_u,gde,C7o,w7o,ej,A7o,L7o,y7o,uu,hde,x7o,$7o,oj,k7o,S7o,R7o,bu,pde,P7o,B7o,rj,I7o,N7o,q7o,vu,_de,j7o,D7o,tj,G7o,O7o,V7o,Fu,ude,X7o,z7o,aj,W7o,Q7o,H7o,Tu,bde,U7o,J7o,nj,Y7o,K7o,Z7o,Mu,vde,eMo,oMo,sj,rMo,tMo,aMo,Eu,Fde,nMo,sMo,lj,lMo,iMo,dMo,Cu,Tde,cMo,fMo,ij,mMo,gMo,hMo,wu,Mde,pMo,_Mo,dj,uMo,bMo,vMo,Au,Ede,FMo,TMo,cj,MMo,EMo,CMo,Lu,Cde,wMo,AMo,fj,LMo,yMo,xMo,yu,wde,$Mo,kMo,mj,SMo,RMo,PMo,xu,Ade,BMo,IMo,gj,NMo,qMo,jMo,$u,Lde,DMo,GMo,hj,OMo,VMo,XMo,ku,yde,zMo,WMo,pj,QMo,HMo,UMo,Su,xde,JMo,YMo,_j,KMo,ZMo,eEo,Ru,$de,oEo,rEo,uj,tEo,aEo,nEo,Pu,kde,sEo,lEo,bj,iEo,dEo,cEo,Bu,Sde,fEo,mEo,vj,gEo,hEo,pEo,Iu,Rde,_Eo,uEo,Fj,bEo,vEo,FEo,Nu,Pde,TEo,MEo,Tj,EEo,CEo,wEo,qu,Bde,AEo,LEo,Mj,yEo,xEo,$Eo,ju,Ide,kEo,SEo,Ej,REo,PEo,BEo,Du,Nde,IEo,NEo,Cj,qEo,jEo,DEo,Gu,qde,GEo,OEo,wj,VEo,XEo,zEo,Ou,jde,WEo,QEo,Aj,HEo,UEo,JEo,Vu,Dde,YEo,KEo,Lj,ZEo,eCo,oCo,Xu,Gde,rCo,tCo,yj,aCo,nCo,sCo,zu,Ode,lCo,iCo,xj,dCo,cCo,fCo,Wu,Vde,mCo,gCo,$j,hCo,pCo,_Co,Qu,Xde,uCo,bCo,kj,vCo,FCo,TCo,Hu,zde,MCo,ECo,Sj,CCo,wCo,ACo,Uu,Wde,LCo,yCo,Rj,xCo,$Co,kCo,Ju,Qde,SCo,RCo,Pj,PCo,BCo,ICo,Yu,Hde,NCo,qCo,Bj,jCo,DCo,GCo,Ku,Ude,OCo,VCo,Ij,XCo,zCo,WCo,Zu,Jde,QCo,HCo,Nj,UCo,JCo,YCo,e1,Yde,KCo,ZCo,qj,e0o,o0o,r0o,o1,t0o,Kde,a0o,n0o,Zde,s0o,l0o,r1,bje,Ri,t1,ece,EL,i0o,oce,d0o,vje,$o,CL,c0o,Pi,f0o,jj,m0o,g0o,Dj,h0o,p0o,_0o,wL,u0o,rce,b0o,v0o,F0o,st,AL,T0o,tce,M0o,E0o,Bi,C0o,ace,w0o,A0o,Gj,L0o,y0o,x0o,a1,$0o,Ke,LL,k0o,nce,S0o,R0o,ka,P0o,sce,B0o,I0o,lce,N0o,q0o,ice,j0o,D0o,G0o,z,n1,dce,O0o,V0o,Oj,X0o,z0o,W0o,s1,cce,Q0o,H0o,Vj,U0o,J0o,Y0o,l1,fce,K0o,Z0o,Xj,ewo,owo,rwo,i1,mce,two,awo,zj,nwo,swo,lwo,d1,gce,iwo,dwo,Wj,cwo,fwo,mwo,c1,hce,gwo,hwo,Qj,pwo,_wo,uwo,f1,pce,bwo,vwo,Hj,Fwo,Two,Mwo,m1,_ce,Ewo,Cwo,Uj,wwo,Awo,Lwo,g1,uce,ywo,xwo,Jj,$wo,kwo,Swo,h1,bce,Rwo,Pwo,Yj,Bwo,Iwo,Nwo,p1,vce,qwo,jwo,Kj,Dwo,Gwo,Owo,_1,Fce,Vwo,Xwo,Zj,zwo,Wwo,Qwo,u1,Tce,Hwo,Uwo,eD,Jwo,Ywo,Kwo,b1,Mce,Zwo,eAo,oD,oAo,rAo,tAo,v1,Ece,aAo,nAo,rD,sAo,lAo,iAo,F1,Cce,dAo,cAo,tD,fAo,mAo,gAo,T1,wce,hAo,pAo,aD,_Ao,uAo,bAo,M1,Ace,vAo,FAo,nD,TAo,MAo,EAo,E1,Lce,CAo,wAo,sD,AAo,LAo,yAo,C1,yce,xAo,$Ao,lD,kAo,SAo,RAo,w1,xce,PAo,BAo,iD,IAo,NAo,qAo,A1,$ce,jAo,DAo,dD,GAo,OAo,VAo,L1,kce,XAo,zAo,cD,WAo,QAo,HAo,y1,Sce,UAo,JAo,fD,YAo,KAo,ZAo,x1,Rce,e6o,o6o,mD,r6o,t6o,a6o,$1,Pce,n6o,s6o,gD,l6o,i6o,d6o,k1,Bce,c6o,f6o,hD,m6o,g6o,h6o,S1,Ice,p6o,_6o,pD,u6o,b6o,v6o,R1,Nce,F6o,T6o,_D,M6o,E6o,C6o,P1,qce,w6o,A6o,uD,L6o,y6o,x6o,B1,jce,$6o,k6o,bD,S6o,R6o,P6o,I1,Dce,B6o,I6o,vD,N6o,q6o,j6o,N1,Gce,D6o,G6o,FD,O6o,V6o,X6o,q1,Oce,z6o,W6o,TD,Q6o,H6o,U6o,j1,Vce,J6o,Y6o,MD,K6o,Z6o,eLo,D1,Xce,oLo,rLo,ED,tLo,aLo,nLo,G1,zce,sLo,lLo,CD,iLo,dLo,cLo,O1,fLo,Wce,mLo,gLo,Qce,hLo,pLo,V1,Fje,Ii,X1,Hce,yL,_Lo,Uce,uLo,Tje,ko,xL,bLo,Ni,vLo,wD,FLo,TLo,AD,MLo,ELo,CLo,$L,wLo,Jce,ALo,LLo,yLo,lt,kL,xLo,Yce,$Lo,kLo,qi,SLo,Kce,RLo,PLo,LD,BLo,ILo,NLo,z1,qLo,Ze,SL,jLo,Zce,DLo,GLo,Sa,OLo,efe,VLo,XLo,ofe,zLo,WLo,rfe,QLo,HLo,ULo,W,W1,tfe,JLo,YLo,yD,KLo,ZLo,eyo,Q1,afe,oyo,ryo,xD,tyo,ayo,nyo,H1,nfe,syo,lyo,$D,iyo,dyo,cyo,U1,sfe,fyo,myo,kD,gyo,hyo,pyo,J1,lfe,_yo,uyo,SD,byo,vyo,Fyo,Y1,ife,Tyo,Myo,RD,Eyo,Cyo,wyo,K1,dfe,Ayo,Lyo,PD,yyo,xyo,$yo,Z1,cfe,kyo,Syo,BD,Ryo,Pyo,Byo,eb,ffe,Iyo,Nyo,ID,qyo,jyo,Dyo,ob,mfe,Gyo,Oyo,ND,Vyo,Xyo,zyo,rb,gfe,Wyo,Qyo,qD,Hyo,Uyo,Jyo,tb,hfe,Yyo,Kyo,jD,Zyo,e8o,o8o,ab,pfe,r8o,t8o,DD,a8o,n8o,s8o,nb,_fe,l8o,i8o,GD,d8o,c8o,f8o,sb,ufe,m8o,g8o,OD,h8o,p8o,_8o,lb,bfe,u8o,b8o,VD,v8o,F8o,T8o,ib,vfe,M8o,E8o,XD,C8o,w8o,A8o,db,Ffe,L8o,y8o,zD,x8o,$8o,k8o,cb,Tfe,S8o,R8o,WD,P8o,B8o,I8o,fb,Mfe,N8o,q8o,QD,j8o,D8o,G8o,mb,Efe,O8o,V8o,HD,X8o,z8o,W8o,gb,Cfe,Q8o,H8o,UD,U8o,J8o,Y8o,hb,wfe,K8o,Z8o,JD,e9o,o9o,r9o,pb,Afe,t9o,a9o,YD,n9o,s9o,l9o,_b,Lfe,i9o,d9o,KD,c9o,f9o,m9o,ub,yfe,g9o,h9o,ZD,p9o,_9o,u9o,bb,xfe,b9o,v9o,eG,F9o,T9o,M9o,vb,$fe,E9o,C9o,oG,w9o,A9o,L9o,Fb,kfe,y9o,x9o,rG,$9o,k9o,S9o,Tb,Sfe,R9o,P9o,tG,B9o,I9o,N9o,Mb,Rfe,q9o,j9o,aG,D9o,G9o,O9o,Eb,Pfe,V9o,X9o,Bfe,z9o,W9o,Q9o,Cb,Ife,H9o,U9o,nG,J9o,Y9o,K9o,wb,Nfe,Z9o,exo,sG,oxo,rxo,txo,Ab,qfe,axo,nxo,lG,sxo,lxo,ixo,Lb,jfe,dxo,cxo,iG,fxo,mxo,gxo,yb,hxo,Dfe,pxo,_xo,Gfe,uxo,bxo,xb,Mje,ji,$b,Ofe,RL,vxo,Vfe,Fxo,Eje,So,PL,Txo,Di,Mxo,dG,Exo,Cxo,cG,wxo,Axo,Lxo,BL,yxo,Xfe,xxo,$xo,kxo,it,IL,Sxo,zfe,Rxo,Pxo,Gi,Bxo,Wfe,Ixo,Nxo,fG,qxo,jxo,Dxo,kb,Gxo,eo,NL,Oxo,Qfe,Vxo,Xxo,Ra,zxo,Hfe,Wxo,Qxo,Ufe,Hxo,Uxo,Jfe,Jxo,Yxo,Kxo,_e,Sb,Yfe,Zxo,e$o,mG,o$o,r$o,t$o,Rb,Kfe,a$o,n$o,gG,s$o,l$o,i$o,Pb,Zfe,d$o,c$o,hG,f$o,m$o,g$o,Bb,eme,h$o,p$o,pG,_$o,u$o,b$o,Ib,ome,v$o,F$o,_G,T$o,M$o,E$o,Nb,rme,C$o,w$o,uG,A$o,L$o,y$o,qb,tme,x$o,$$o,bG,k$o,S$o,R$o,jb,ame,P$o,B$o,vG,I$o,N$o,q$o,Db,nme,j$o,D$o,FG,G$o,O$o,V$o,Gb,sme,X$o,z$o,TG,W$o,Q$o,H$o,Ob,lme,U$o,J$o,MG,Y$o,K$o,Z$o,Vb,ime,eko,oko,EG,rko,tko,ako,Xb,dme,nko,sko,CG,lko,iko,dko,zb,cme,cko,fko,wG,mko,gko,hko,Wb,fme,pko,_ko,AG,uko,bko,vko,Qb,mme,Fko,Tko,LG,Mko,Eko,Cko,Hb,wko,gme,Ako,Lko,hme,yko,xko,Ub,Cje,Oi,Jb,pme,qL,$ko,_me,kko,wje,Ro,jL,Sko,Vi,Rko,yG,Pko,Bko,xG,Iko,Nko,qko,DL,jko,ume,Dko,Gko,Oko,dt,GL,Vko,bme,Xko,zko,Xi,Wko,vme,Qko,Hko,$G,Uko,Jko,Yko,Yb,Kko,oo,OL,Zko,Fme,eSo,oSo,Pa,rSo,Tme,tSo,aSo,Mme,nSo,sSo,Eme,lSo,iSo,dSo,N,Kb,Cme,cSo,fSo,kG,mSo,gSo,hSo,Zb,wme,pSo,_So,SG,uSo,bSo,vSo,e2,Ame,FSo,TSo,RG,MSo,ESo,CSo,o2,Lme,wSo,ASo,PG,LSo,ySo,xSo,r2,yme,$So,kSo,BG,SSo,RSo,PSo,t2,xme,BSo,ISo,IG,NSo,qSo,jSo,a2,$me,DSo,GSo,NG,OSo,VSo,XSo,n2,kme,zSo,WSo,qG,QSo,HSo,USo,s2,Sme,JSo,YSo,jG,KSo,ZSo,eRo,l2,Rme,oRo,rRo,DG,tRo,aRo,nRo,i2,Pme,sRo,lRo,GG,iRo,dRo,cRo,d2,Bme,fRo,mRo,OG,gRo,hRo,pRo,c2,Ime,_Ro,uRo,VG,bRo,vRo,FRo,f2,Nme,TRo,MRo,XG,ERo,CRo,wRo,m2,qme,ARo,LRo,zG,yRo,xRo,$Ro,g2,jme,kRo,SRo,WG,RRo,PRo,BRo,h2,Dme,IRo,NRo,QG,qRo,jRo,DRo,p2,Gme,GRo,ORo,HG,VRo,XRo,zRo,_2,Ome,WRo,QRo,UG,HRo,URo,JRo,u2,Vme,YRo,KRo,JG,ZRo,ePo,oPo,b2,Xme,rPo,tPo,YG,aPo,nPo,sPo,v2,zme,lPo,iPo,KG,dPo,cPo,fPo,F2,Wme,mPo,gPo,ZG,hPo,pPo,_Po,T2,Qme,uPo,bPo,eO,vPo,FPo,TPo,M2,Hme,MPo,EPo,oO,CPo,wPo,APo,E2,Ume,LPo,yPo,rO,xPo,$Po,kPo,C2,Jme,SPo,RPo,tO,PPo,BPo,IPo,w2,Yme,NPo,qPo,aO,jPo,DPo,GPo,A2,Kme,OPo,VPo,nO,XPo,zPo,WPo,L2,Zme,QPo,HPo,sO,UPo,JPo,YPo,y2,ege,KPo,ZPo,lO,eBo,oBo,rBo,x2,oge,tBo,aBo,iO,nBo,sBo,lBo,$2,rge,iBo,dBo,dO,cBo,fBo,mBo,k2,tge,gBo,hBo,cO,pBo,_Bo,uBo,S2,age,bBo,vBo,fO,FBo,TBo,MBo,R2,nge,EBo,CBo,mO,wBo,ABo,LBo,P2,sge,yBo,xBo,gO,$Bo,kBo,SBo,B2,lge,RBo,PBo,hO,BBo,IBo,NBo,I2,ige,qBo,jBo,pO,DBo,GBo,OBo,N2,dge,VBo,XBo,_O,zBo,WBo,QBo,q2,cge,HBo,UBo,uO,JBo,YBo,KBo,j2,fge,ZBo,eIo,bO,oIo,rIo,tIo,D2,mge,aIo,nIo,vO,sIo,lIo,iIo,G2,gge,dIo,cIo,FO,fIo,mIo,gIo,O2,hge,hIo,pIo,TO,_Io,uIo,bIo,V2,pge,vIo,FIo,MO,TIo,MIo,EIo,X2,_ge,CIo,wIo,EO,AIo,LIo,yIo,z2,xIo,uge,$Io,kIo,bge,SIo,RIo,W2,Aje,zi,Q2,vge,VL,PIo,Fge,BIo,Lje,Po,XL,IIo,Wi,NIo,CO,qIo,jIo,wO,DIo,GIo,OIo,zL,VIo,Tge,XIo,zIo,WIo,ct,WL,QIo,Mge,HIo,UIo,Qi,JIo,Ege,YIo,KIo,AO,ZIo,eNo,oNo,H2,rNo,ro,QL,tNo,Cge,aNo,nNo,Ba,sNo,wge,lNo,iNo,Age,dNo,cNo,Lge,fNo,mNo,gNo,Z,U2,yge,hNo,pNo,LO,_No,uNo,bNo,J2,xge,vNo,FNo,yO,TNo,MNo,ENo,Y2,$ge,CNo,wNo,xO,ANo,LNo,yNo,K2,kge,xNo,$No,$O,kNo,SNo,RNo,Z2,Sge,PNo,BNo,kO,INo,NNo,qNo,e4,Rge,jNo,DNo,SO,GNo,ONo,VNo,o4,Pge,XNo,zNo,RO,WNo,QNo,HNo,r4,Bge,UNo,JNo,PO,YNo,KNo,ZNo,t4,Ige,eqo,oqo,BO,rqo,tqo,aqo,a4,Nge,nqo,sqo,IO,lqo,iqo,dqo,n4,qge,cqo,fqo,NO,mqo,gqo,hqo,s4,jge,pqo,_qo,qO,uqo,bqo,vqo,l4,Dge,Fqo,Tqo,jO,Mqo,Eqo,Cqo,i4,Gge,wqo,Aqo,DO,Lqo,yqo,xqo,d4,Oge,$qo,kqo,GO,Sqo,Rqo,Pqo,c4,Vge,Bqo,Iqo,OO,Nqo,qqo,jqo,f4,Xge,Dqo,Gqo,VO,Oqo,Vqo,Xqo,m4,zge,zqo,Wqo,XO,Qqo,Hqo,Uqo,g4,Wge,Jqo,Yqo,zO,Kqo,Zqo,ejo,h4,Qge,ojo,rjo,WO,tjo,ajo,njo,p4,Hge,sjo,ljo,QO,ijo,djo,cjo,_4,Uge,fjo,mjo,HO,gjo,hjo,pjo,u4,Jge,_jo,ujo,UO,bjo,vjo,Fjo,b4,Yge,Tjo,Mjo,JO,Ejo,Cjo,wjo,v4,Kge,Ajo,Ljo,YO,yjo,xjo,$jo,F4,Zge,kjo,Sjo,KO,Rjo,Pjo,Bjo,T4,ehe,Ijo,Njo,ZO,qjo,jjo,Djo,M4,ohe,Gjo,Ojo,eV,Vjo,Xjo,zjo,E4,rhe,Wjo,Qjo,oV,Hjo,Ujo,Jjo,C4,Yjo,the,Kjo,Zjo,ahe,eDo,oDo,w4,yje,Hi,A4,nhe,HL,rDo,she,tDo,xje,Bo,UL,aDo,Ui,nDo,rV,sDo,lDo,tV,iDo,dDo,cDo,JL,fDo,lhe,mDo,gDo,hDo,ft,YL,pDo,ihe,_Do,uDo,Ji,bDo,dhe,vDo,FDo,aV,TDo,MDo,EDo,L4,CDo,to,KL,wDo,che,ADo,LDo,Ia,yDo,fhe,xDo,$Do,mhe,kDo,SDo,ghe,RDo,PDo,BDo,Yr,y4,hhe,IDo,NDo,nV,qDo,jDo,DDo,x4,phe,GDo,ODo,sV,VDo,XDo,zDo,$4,_he,WDo,QDo,lV,HDo,UDo,JDo,k4,uhe,YDo,KDo,iV,ZDo,eGo,oGo,S4,bhe,rGo,tGo,dV,aGo,nGo,sGo,R4,lGo,vhe,iGo,dGo,Fhe,cGo,fGo,P4,$je,Yi,B4,The,ZL,mGo,Mhe,gGo,kje,Io,ey,hGo,Ki,pGo,cV,_Go,uGo,fV,bGo,vGo,FGo,oy,TGo,Ehe,MGo,EGo,CGo,mt,ry,wGo,Che,AGo,LGo,Zi,yGo,whe,xGo,$Go,mV,kGo,SGo,RGo,I4,PGo,ao,ty,BGo,Ahe,IGo,NGo,Na,qGo,Lhe,jGo,DGo,yhe,GGo,OGo,xhe,VGo,XGo,zGo,U,N4,$he,WGo,QGo,gV,HGo,UGo,JGo,q4,khe,YGo,KGo,hV,ZGo,eOo,oOo,j4,She,rOo,tOo,pV,aOo,nOo,sOo,D4,Rhe,lOo,iOo,_V,dOo,cOo,fOo,G4,Phe,mOo,gOo,uV,hOo,pOo,_Oo,O4,Bhe,uOo,bOo,bV,vOo,FOo,TOo,V4,Ihe,MOo,EOo,vV,COo,wOo,AOo,X4,Nhe,LOo,yOo,FV,xOo,$Oo,kOo,z4,qhe,SOo,ROo,TV,POo,BOo,IOo,W4,jhe,NOo,qOo,MV,jOo,DOo,GOo,Q4,Dhe,OOo,VOo,EV,XOo,zOo,WOo,H4,Ghe,QOo,HOo,CV,UOo,JOo,YOo,U4,Ohe,KOo,ZOo,wV,eVo,oVo,rVo,J4,Vhe,tVo,aVo,AV,nVo,sVo,lVo,Y4,Xhe,iVo,dVo,LV,cVo,fVo,mVo,K4,zhe,gVo,hVo,yV,pVo,_Vo,uVo,Z4,Whe,bVo,vVo,xV,FVo,TVo,MVo,ev,Qhe,EVo,CVo,$V,wVo,AVo,LVo,ov,Hhe,yVo,xVo,kV,$Vo,kVo,SVo,rv,Uhe,RVo,PVo,SV,BVo,IVo,NVo,tv,Jhe,qVo,jVo,RV,DVo,GVo,OVo,av,Yhe,VVo,XVo,PV,zVo,WVo,QVo,nv,Khe,HVo,UVo,BV,JVo,YVo,KVo,sv,Zhe,ZVo,eXo,IV,oXo,rXo,tXo,lv,epe,aXo,nXo,NV,sXo,lXo,iXo,iv,ope,dXo,cXo,qV,fXo,mXo,gXo,dv,rpe,hXo,pXo,jV,_Xo,uXo,bXo,cv,tpe,vXo,FXo,DV,TXo,MXo,EXo,fv,ape,CXo,wXo,GV,AXo,LXo,yXo,mv,npe,xXo,$Xo,OV,kXo,SXo,RXo,gv,spe,PXo,BXo,VV,IXo,NXo,qXo,hv,lpe,jXo,DXo,XV,GXo,OXo,VXo,pv,ipe,XXo,zXo,zV,WXo,QXo,HXo,_v,dpe,UXo,JXo,WV,YXo,KXo,ZXo,uv,ezo,cpe,ozo,rzo,fpe,tzo,azo,bv,Sje,ed,vv,mpe,ay,nzo,gpe,szo,Rje,No,ny,lzo,od,izo,QV,dzo,czo,HV,fzo,mzo,gzo,sy,hzo,hpe,pzo,_zo,uzo,gt,ly,bzo,ppe,vzo,Fzo,rd,Tzo,_pe,Mzo,Ezo,UV,Czo,wzo,Azo,Fv,Lzo,no,iy,yzo,upe,xzo,$zo,qa,kzo,bpe,Szo,Rzo,vpe,Pzo,Bzo,Fpe,Izo,Nzo,qzo,V,Tv,Tpe,jzo,Dzo,JV,Gzo,Ozo,Vzo,Mv,Mpe,Xzo,zzo,YV,Wzo,Qzo,Hzo,Ev,Epe,Uzo,Jzo,KV,Yzo,Kzo,Zzo,Cv,Cpe,eWo,oWo,ZV,rWo,tWo,aWo,wv,wpe,nWo,sWo,eX,lWo,iWo,dWo,Av,Ape,cWo,fWo,oX,mWo,gWo,hWo,Lv,Lpe,pWo,_Wo,rX,uWo,bWo,vWo,yv,ype,FWo,TWo,tX,MWo,EWo,CWo,xv,xpe,wWo,AWo,aX,LWo,yWo,xWo,$v,$pe,$Wo,kWo,nX,SWo,RWo,PWo,kv,kpe,BWo,IWo,sX,NWo,qWo,jWo,Sv,Spe,DWo,GWo,lX,OWo,VWo,XWo,Rv,Rpe,zWo,WWo,iX,QWo,HWo,UWo,Pv,Ppe,JWo,YWo,dX,KWo,ZWo,eQo,Bv,Bpe,oQo,rQo,cX,tQo,aQo,nQo,Iv,Ipe,sQo,lQo,fX,iQo,dQo,cQo,Nv,Npe,fQo,mQo,mX,gQo,hQo,pQo,qv,qpe,_Qo,uQo,gX,bQo,vQo,FQo,jv,jpe,TQo,MQo,hX,EQo,CQo,wQo,Dv,Dpe,AQo,LQo,pX,yQo,xQo,$Qo,Gv,Gpe,kQo,SQo,_X,RQo,PQo,BQo,Ov,Ope,IQo,NQo,uX,qQo,jQo,DQo,Vv,Vpe,GQo,OQo,bX,VQo,XQo,zQo,Xv,Xpe,WQo,QQo,vX,HQo,UQo,JQo,zv,zpe,YQo,KQo,FX,ZQo,eHo,oHo,Wv,Wpe,rHo,tHo,TX,aHo,nHo,sHo,Qv,Qpe,lHo,iHo,MX,dHo,cHo,fHo,Hv,Hpe,mHo,gHo,EX,hHo,pHo,_Ho,Uv,Upe,uHo,bHo,CX,vHo,FHo,THo,Jv,Jpe,MHo,EHo,wX,CHo,wHo,AHo,Yv,Ype,LHo,yHo,AX,xHo,$Ho,kHo,Kv,Kpe,SHo,RHo,LX,PHo,BHo,IHo,Zv,Zpe,NHo,qHo,yX,jHo,DHo,GHo,e5,e_e,OHo,VHo,xX,XHo,zHo,WHo,o5,o_e,QHo,HHo,$X,UHo,JHo,YHo,r5,r_e,KHo,ZHo,kX,eUo,oUo,rUo,t5,t_e,tUo,aUo,SX,nUo,sUo,lUo,a5,a_e,iUo,dUo,RX,cUo,fUo,mUo,n5,n_e,gUo,hUo,PX,pUo,_Uo,uUo,s5,s_e,bUo,vUo,BX,FUo,TUo,MUo,l5,EUo,l_e,CUo,wUo,i_e,AUo,LUo,i5,Pje,td,d5,d_e,dy,yUo,c_e,xUo,Bje,qo,cy,$Uo,ad,kUo,IX,SUo,RUo,NX,PUo,BUo,IUo,fy,NUo,f_e,qUo,jUo,DUo,ht,my,GUo,m_e,OUo,VUo,nd,XUo,g_e,zUo,WUo,qX,QUo,HUo,UUo,c5,JUo,so,gy,YUo,h_e,KUo,ZUo,ja,eJo,p_e,oJo,rJo,__e,tJo,aJo,u_e,nJo,sJo,lJo,b_e,f5,v_e,iJo,dJo,jX,cJo,fJo,mJo,m5,gJo,F_e,hJo,pJo,T_e,_Jo,uJo,g5,Ije,sd,h5,M_e,hy,bJo,E_e,vJo,Nje,jo,py,FJo,ld,TJo,DX,MJo,EJo,GX,CJo,wJo,AJo,_y,LJo,C_e,yJo,xJo,$Jo,pt,uy,kJo,w_e,SJo,RJo,id,PJo,A_e,BJo,IJo,OX,NJo,qJo,jJo,p5,DJo,lo,by,GJo,L_e,OJo,VJo,Da,XJo,y_e,zJo,WJo,x_e,QJo,HJo,$_e,UJo,JJo,YJo,ue,_5,k_e,KJo,ZJo,VX,eYo,oYo,rYo,u5,S_e,tYo,aYo,XX,nYo,sYo,lYo,b5,R_e,iYo,dYo,zX,cYo,fYo,mYo,v5,P_e,gYo,hYo,WX,pYo,_Yo,uYo,Bs,B_e,bYo,vYo,QX,FYo,TYo,HX,MYo,EYo,CYo,F5,I_e,wYo,AYo,UX,LYo,yYo,xYo,Is,N_e,$Yo,kYo,JX,SYo,RYo,YX,PYo,BYo,IYo,T5,q_e,NYo,qYo,KX,jYo,DYo,GYo,_t,j_e,OYo,VYo,ZX,XYo,zYo,ez,WYo,QYo,oz,HYo,UYo,JYo,M5,D_e,YYo,KYo,rz,ZYo,eKo,oKo,E5,G_e,rKo,tKo,tz,aKo,nKo,sKo,C5,O_e,lKo,iKo,az,dKo,cKo,fKo,w5,V_e,mKo,gKo,nz,hKo,pKo,_Ko,A5,X_e,uKo,bKo,sz,vKo,FKo,TKo,L5,z_e,MKo,EKo,lz,CKo,wKo,AKo,y5,W_e,LKo,yKo,iz,xKo,$Ko,kKo,x5,SKo,Q_e,RKo,PKo,H_e,BKo,IKo,$5,qje,dd,k5,U_e,vy,NKo,J_e,qKo,jje,Do,Fy,jKo,cd,DKo,dz,GKo,OKo,cz,VKo,XKo,zKo,Ty,WKo,Y_e,QKo,HKo,UKo,ut,My,JKo,K_e,YKo,KKo,fd,ZKo,Z_e,eZo,oZo,fz,rZo,tZo,aZo,S5,nZo,io,Ey,sZo,eue,lZo,iZo,Ga,dZo,oue,cZo,fZo,rue,mZo,gZo,tue,hZo,pZo,_Zo,aue,R5,nue,uZo,bZo,mz,vZo,FZo,TZo,P5,MZo,sue,EZo,CZo,lue,wZo,AZo,B5,Dje,md,I5,iue,Cy,LZo,due,yZo,Gje,Go,wy,xZo,gd,$Zo,gz,kZo,SZo,hz,RZo,PZo,BZo,Ay,IZo,cue,NZo,qZo,jZo,bt,Ly,DZo,fue,GZo,OZo,hd,VZo,mue,XZo,zZo,pz,WZo,QZo,HZo,N5,UZo,co,yy,JZo,gue,YZo,KZo,Oa,ZZo,hue,eer,oer,pue,rer,ter,_ue,aer,ner,ser,Se,q5,uue,ler,ier,_z,der,cer,fer,j5,bue,mer,ger,uz,her,per,_er,D5,vue,uer,ber,bz,ver,Fer,Ter,G5,Fue,Mer,Eer,vz,Cer,wer,Aer,O5,Tue,Ler,yer,Fz,xer,$er,ker,V5,Mue,Ser,Rer,Tz,Per,Ber,Ier,X5,Eue,Ner,qer,Mz,jer,Der,Ger,z5,Cue,Oer,Ver,Ez,Xer,zer,Wer,W5,wue,Qer,Her,Cz,Uer,Jer,Yer,Q5,Ker,Aue,Zer,eor,Lue,oor,ror,H5,Oje,pd,U5,yue,xy,tor,xue,aor,Vje,Oo,$y,nor,_d,sor,wz,lor,ior,Az,dor,cor,mor,ky,gor,$ue,hor,por,_or,vt,Sy,uor,kue,bor,vor,ud,For,Sue,Tor,Mor,Lz,Eor,Cor,wor,J5,Aor,fo,Ry,Lor,Rue,yor,xor,Va,$or,Pue,kor,Sor,Bue,Ror,Por,Iue,Bor,Ior,Nor,Kr,Y5,Nue,qor,jor,yz,Dor,Gor,Oor,K5,que,Vor,Xor,xz,zor,Wor,Qor,Z5,jue,Hor,Uor,$z,Jor,Yor,Kor,e3,Due,Zor,err,kz,orr,rrr,trr,o3,Gue,arr,nrr,Sz,srr,lrr,irr,r3,drr,Oue,crr,frr,Vue,mrr,grr,t3,Xje,bd,a3,Xue,Py,hrr,zue,prr,zje,Vo,By,_rr,vd,urr,Rz,brr,vrr,Pz,Frr,Trr,Mrr,Iy,Err,Wue,Crr,wrr,Arr,Ft,Ny,Lrr,Que,yrr,xrr,Fd,$rr,Hue,krr,Srr,Bz,Rrr,Prr,Brr,n3,Irr,mo,qy,Nrr,Uue,qrr,jrr,Xa,Drr,Jue,Grr,Orr,Yue,Vrr,Xrr,Kue,zrr,Wrr,Qrr,Re,s3,Zue,Hrr,Urr,Iz,Jrr,Yrr,Krr,l3,e1e,Zrr,etr,Nz,otr,rtr,ttr,i3,o1e,atr,ntr,qz,str,ltr,itr,d3,r1e,dtr,ctr,jz,ftr,mtr,gtr,c3,t1e,htr,ptr,Dz,_tr,utr,btr,f3,a1e,vtr,Ftr,Gz,Ttr,Mtr,Etr,m3,n1e,Ctr,wtr,Oz,Atr,Ltr,ytr,g3,s1e,xtr,$tr,Vz,ktr,Str,Rtr,h3,l1e,Ptr,Btr,Xz,Itr,Ntr,qtr,p3,jtr,i1e,Dtr,Gtr,d1e,Otr,Vtr,_3,Wje,Td,u3,c1e,jy,Xtr,f1e,ztr,Qje,Xo,Dy,Wtr,Md,Qtr,zz,Htr,Utr,Wz,Jtr,Ytr,Ktr,Gy,Ztr,m1e,ear,oar,rar,Tt,Oy,tar,g1e,aar,nar,Ed,sar,h1e,lar,iar,Qz,dar,car,far,b3,mar,go,Vy,gar,p1e,har,par,za,_ar,_1e,uar,bar,u1e,Far,Tar,b1e,Mar,Ear,Car,Xy,v3,v1e,war,Aar,Hz,Lar,yar,xar,F3,F1e,$ar,kar,Uz,Sar,Rar,Par,T3,Bar,T1e,Iar,Nar,M1e,qar,jar,M3,Hje,Cd,E3,E1e,zy,Dar,C1e,Gar,Uje,zo,Wy,Oar,wd,Var,Jz,Xar,zar,Yz,War,Qar,Har,Qy,Uar,w1e,Jar,Yar,Kar,Mt,Hy,Zar,A1e,enr,onr,Ad,rnr,L1e,tnr,anr,Kz,nnr,snr,lnr,C3,inr,ho,Uy,dnr,y1e,cnr,fnr,Wa,mnr,x1e,gnr,hnr,$1e,pnr,_nr,k1e,unr,bnr,vnr,Zr,w3,S1e,Fnr,Tnr,Zz,Mnr,Enr,Cnr,A3,R1e,wnr,Anr,eW,Lnr,ynr,xnr,L3,P1e,$nr,knr,oW,Snr,Rnr,Pnr,y3,B1e,Bnr,Inr,rW,Nnr,qnr,jnr,x3,I1e,Dnr,Gnr,tW,Onr,Vnr,Xnr,$3,znr,N1e,Wnr,Qnr,q1e,Hnr,Unr,k3,Jje,Ld,S3,j1e,Jy,Jnr,D1e,Ynr,Yje,Wo,Yy,Knr,yd,Znr,aW,esr,osr,nW,rsr,tsr,asr,Ky,nsr,G1e,ssr,lsr,isr,Et,Zy,dsr,O1e,csr,fsr,xd,msr,V1e,gsr,hsr,sW,psr,_sr,usr,R3,bsr,po,e8,vsr,X1e,Fsr,Tsr,Qa,Msr,z1e,Esr,Csr,W1e,wsr,Asr,Q1e,Lsr,ysr,xsr,$d,P3,H1e,$sr,ksr,lW,Ssr,Rsr,Psr,B3,U1e,Bsr,Isr,iW,Nsr,qsr,jsr,I3,J1e,Dsr,Gsr,dW,Osr,Vsr,Xsr,N3,zsr,Y1e,Wsr,Qsr,K1e,Hsr,Usr,q3,Kje,kd,j3,Z1e,o8,Jsr,ebe,Ysr,Zje,Qo,r8,Ksr,Sd,Zsr,cW,elr,olr,fW,rlr,tlr,alr,t8,nlr,obe,slr,llr,ilr,Ct,a8,dlr,rbe,clr,flr,Rd,mlr,tbe,glr,hlr,mW,plr,_lr,ulr,D3,blr,_o,n8,vlr,abe,Flr,Tlr,Ha,Mlr,nbe,Elr,Clr,sbe,wlr,Alr,lbe,Llr,ylr,xlr,s8,G3,ibe,$lr,klr,gW,Slr,Rlr,Plr,O3,dbe,Blr,Ilr,hW,Nlr,qlr,jlr,V3,Dlr,cbe,Glr,Olr,fbe,Vlr,Xlr,X3,eDe,Pd,z3,mbe,l8,zlr,gbe,Wlr,oDe,Ho,i8,Qlr,Bd,Hlr,pW,Ulr,Jlr,_W,Ylr,Klr,Zlr,d8,eir,hbe,oir,rir,tir,wt,c8,air,pbe,nir,sir,Id,lir,_be,iir,dir,uW,cir,fir,mir,W3,gir,uo,f8,hir,ube,pir,_ir,Ua,uir,bbe,bir,vir,vbe,Fir,Tir,Fbe,Mir,Eir,Cir,Tbe,Q3,Mbe,wir,Air,bW,Lir,yir,xir,H3,$ir,Ebe,kir,Sir,Cbe,Rir,Pir,U3,rDe,Nd,J3,wbe,m8,Bir,Abe,Iir,tDe,Uo,g8,Nir,qd,qir,vW,jir,Dir,FW,Gir,Oir,Vir,h8,Xir,Lbe,zir,Wir,Qir,At,p8,Hir,ybe,Uir,Jir,jd,Yir,xbe,Kir,Zir,TW,edr,odr,rdr,Y3,tdr,bo,_8,adr,$be,ndr,sdr,Ja,ldr,kbe,idr,ddr,Sbe,cdr,fdr,Rbe,mdr,gdr,hdr,et,K3,Pbe,pdr,_dr,MW,udr,bdr,vdr,Z3,Bbe,Fdr,Tdr,EW,Mdr,Edr,Cdr,eF,Ibe,wdr,Adr,CW,Ldr,ydr,xdr,oF,Nbe,$dr,kdr,wW,Sdr,Rdr,Pdr,rF,qbe,Bdr,Idr,AW,Ndr,qdr,jdr,tF,Ddr,jbe,Gdr,Odr,Dbe,Vdr,Xdr,aF,aDe,Dd,nF,Gbe,u8,zdr,Obe,Wdr,nDe,Jo,b8,Qdr,Gd,Hdr,LW,Udr,Jdr,yW,Ydr,Kdr,Zdr,v8,ecr,Vbe,ocr,rcr,tcr,Lt,F8,acr,Xbe,ncr,scr,Od,lcr,zbe,icr,dcr,xW,ccr,fcr,mcr,sF,gcr,vo,T8,hcr,Wbe,pcr,_cr,Ya,ucr,Qbe,bcr,vcr,Hbe,Fcr,Tcr,Ube,Mcr,Ecr,Ccr,Jbe,lF,Ybe,wcr,Acr,$W,Lcr,ycr,xcr,iF,$cr,Kbe,kcr,Scr,Zbe,Rcr,Pcr,dF,sDe,Vd,cF,e2e,M8,Bcr,o2e,Icr,lDe,Yo,E8,Ncr,Xd,qcr,kW,jcr,Dcr,SW,Gcr,Ocr,Vcr,C8,Xcr,r2e,zcr,Wcr,Qcr,yt,w8,Hcr,t2e,Ucr,Jcr,zd,Ycr,a2e,Kcr,Zcr,RW,efr,ofr,rfr,fF,tfr,wr,A8,afr,n2e,nfr,sfr,Ka,lfr,s2e,ifr,dfr,l2e,cfr,ffr,i2e,mfr,gfr,hfr,q,mF,d2e,pfr,_fr,PW,ufr,bfr,vfr,gF,c2e,Ffr,Tfr,BW,Mfr,Efr,Cfr,hF,f2e,wfr,Afr,IW,Lfr,yfr,xfr,pF,m2e,$fr,kfr,NW,Sfr,Rfr,Pfr,_F,g2e,Bfr,Ifr,qW,Nfr,qfr,jfr,uF,h2e,Dfr,Gfr,jW,Ofr,Vfr,Xfr,bF,p2e,zfr,Wfr,DW,Qfr,Hfr,Ufr,vF,_2e,Jfr,Yfr,GW,Kfr,Zfr,emr,FF,u2e,omr,rmr,OW,tmr,amr,nmr,TF,b2e,smr,lmr,VW,imr,dmr,cmr,MF,v2e,fmr,mmr,XW,gmr,hmr,pmr,EF,F2e,_mr,umr,zW,bmr,vmr,Fmr,CF,T2e,Tmr,Mmr,WW,Emr,Cmr,wmr,wF,M2e,Amr,Lmr,QW,ymr,xmr,$mr,AF,E2e,kmr,Smr,HW,Rmr,Pmr,Bmr,LF,C2e,Imr,Nmr,UW,qmr,jmr,Dmr,yF,w2e,Gmr,Omr,JW,Vmr,Xmr,zmr,Ns,A2e,Wmr,Qmr,YW,Hmr,Umr,KW,Jmr,Ymr,Kmr,xF,L2e,Zmr,egr,ZW,ogr,rgr,tgr,$F,y2e,agr,ngr,eQ,sgr,lgr,igr,kF,x2e,dgr,cgr,oQ,fgr,mgr,ggr,SF,$2e,hgr,pgr,rQ,_gr,ugr,bgr,RF,k2e,vgr,Fgr,tQ,Tgr,Mgr,Egr,PF,S2e,Cgr,wgr,aQ,Agr,Lgr,ygr,BF,R2e,xgr,$gr,nQ,kgr,Sgr,Rgr,IF,P2e,Pgr,Bgr,sQ,Igr,Ngr,qgr,NF,B2e,jgr,Dgr,lQ,Ggr,Ogr,Vgr,qF,I2e,Xgr,zgr,iQ,Wgr,Qgr,Hgr,jF,N2e,Ugr,Jgr,dQ,Ygr,Kgr,Zgr,DF,q2e,ehr,ohr,cQ,rhr,thr,ahr,GF,j2e,nhr,shr,fQ,lhr,ihr,dhr,OF,D2e,chr,fhr,mQ,mhr,ghr,hhr,VF,G2e,phr,_hr,gQ,uhr,bhr,vhr,XF,O2e,Fhr,Thr,hQ,Mhr,Ehr,Chr,zF,V2e,whr,Ahr,pQ,Lhr,yhr,xhr,WF,X2e,$hr,khr,_Q,Shr,Rhr,Phr,QF,z2e,Bhr,Ihr,uQ,Nhr,qhr,jhr,HF,W2e,Dhr,Ghr,bQ,Ohr,Vhr,Xhr,UF,Q2e,zhr,Whr,vQ,Qhr,Hhr,Uhr,JF,H2e,Jhr,Yhr,FQ,Khr,Zhr,epr,YF,U2e,opr,rpr,TQ,tpr,apr,npr,KF,J2e,spr,lpr,MQ,ipr,dpr,cpr,ZF,Y2e,fpr,mpr,EQ,gpr,hpr,ppr,eT,K2e,_pr,upr,CQ,bpr,vpr,Fpr,oT,Z2e,Tpr,Mpr,wQ,Epr,Cpr,wpr,rT,e4e,Apr,Lpr,AQ,ypr,xpr,$pr,tT,o4e,kpr,Spr,LQ,Rpr,Ppr,Bpr,aT,iDe,Wd,nT,r4e,L8,Ipr,t4e,Npr,dDe,Ko,y8,qpr,Qd,jpr,yQ,Dpr,Gpr,xQ,Opr,Vpr,Xpr,x8,zpr,a4e,Wpr,Qpr,Hpr,xt,$8,Upr,n4e,Jpr,Ypr,Hd,Kpr,s4e,Zpr,e_r,$Q,o_r,r_r,t_r,sT,a_r,Ar,k8,n_r,l4e,s_r,l_r,Za,i_r,i4e,d_r,c_r,d4e,f_r,m_r,c4e,g_r,h_r,p_r,se,lT,f4e,__r,u_r,kQ,b_r,v_r,F_r,iT,m4e,T_r,M_r,SQ,E_r,C_r,w_r,dT,g4e,A_r,L_r,RQ,y_r,x_r,$_r,cT,h4e,k_r,S_r,PQ,R_r,P_r,B_r,fT,p4e,I_r,N_r,BQ,q_r,j_r,D_r,mT,_4e,G_r,O_r,IQ,V_r,X_r,z_r,gT,u4e,W_r,Q_r,NQ,H_r,U_r,J_r,hT,b4e,Y_r,K_r,qQ,Z_r,eur,our,pT,v4e,rur,tur,jQ,aur,nur,sur,_T,F4e,lur,iur,DQ,dur,cur,fur,uT,T4e,mur,gur,GQ,hur,pur,_ur,bT,M4e,uur,bur,OQ,vur,Fur,Tur,vT,E4e,Mur,Eur,VQ,Cur,wur,Aur,FT,C4e,Lur,yur,XQ,xur,$ur,kur,TT,w4e,Sur,Rur,zQ,Pur,Bur,Iur,MT,A4e,Nur,qur,WQ,jur,Dur,Gur,ET,L4e,Our,Vur,QQ,Xur,zur,Wur,CT,y4e,Qur,Hur,HQ,Uur,Jur,Yur,wT,x4e,Kur,Zur,UQ,e1r,o1r,r1r,AT,$4e,t1r,a1r,JQ,n1r,s1r,l1r,LT,k4e,i1r,d1r,YQ,c1r,f1r,m1r,yT,S4e,g1r,h1r,KQ,p1r,_1r,u1r,xT,R4e,b1r,v1r,ZQ,F1r,T1r,M1r,$T,cDe,Ud,kT,P4e,S8,E1r,B4e,C1r,fDe,Zo,R8,w1r,Jd,A1r,eH,L1r,y1r,oH,x1r,$1r,k1r,P8,S1r,I4e,R1r,P1r,B1r,$t,B8,I1r,N4e,N1r,q1r,Yd,j1r,q4e,D1r,G1r,rH,O1r,V1r,X1r,ST,z1r,Lr,I8,W1r,j4e,Q1r,H1r,en,U1r,D4e,J1r,Y1r,G4e,K1r,Z1r,O4e,ebr,obr,rbr,Me,RT,V4e,tbr,abr,tH,nbr,sbr,lbr,PT,X4e,ibr,dbr,aH,cbr,fbr,mbr,BT,z4e,gbr,hbr,nH,pbr,_br,ubr,IT,W4e,bbr,vbr,sH,Fbr,Tbr,Mbr,NT,Q4e,Ebr,Cbr,lH,wbr,Abr,Lbr,qT,H4e,ybr,xbr,iH,$br,kbr,Sbr,jT,U4e,Rbr,Pbr,dH,Bbr,Ibr,Nbr,DT,J4e,qbr,jbr,cH,Dbr,Gbr,Obr,GT,Y4e,Vbr,Xbr,fH,zbr,Wbr,Qbr,OT,K4e,Hbr,Ubr,mH,Jbr,Ybr,Kbr,VT,Z4e,Zbr,e2r,gH,o2r,r2r,t2r,XT,eve,a2r,n2r,hH,s2r,l2r,i2r,zT,ove,d2r,c2r,pH,f2r,m2r,g2r,WT,mDe,Kd,QT,rve,N8,h2r,tve,p2r,gDe,er,q8,_2r,Zd,u2r,_H,b2r,v2r,uH,F2r,T2r,M2r,j8,E2r,ave,C2r,w2r,A2r,kt,D8,L2r,nve,y2r,x2r,ec,$2r,sve,k2r,S2r,bH,R2r,P2r,B2r,HT,I2r,yr,G8,N2r,lve,q2r,j2r,on,D2r,ive,G2r,O2r,dve,V2r,X2r,cve,z2r,W2r,Q2r,rn,UT,fve,H2r,U2r,vH,J2r,Y2r,K2r,JT,mve,Z2r,e4r,FH,o4r,r4r,t4r,YT,gve,a4r,n4r,TH,s4r,l4r,i4r,KT,hve,d4r,c4r,MH,f4r,m4r,g4r,ZT,hDe,oc,e7,pve,O8,h4r,_ve,p4r,pDe,or,V8,_4r,rc,u4r,EH,b4r,v4r,CH,F4r,T4r,M4r,X8,E4r,uve,C4r,w4r,A4r,St,z8,L4r,bve,y4r,x4r,tc,$4r,vve,k4r,S4r,wH,R4r,P4r,B4r,o7,I4r,xr,W8,N4r,Fve,q4r,j4r,tn,D4r,Tve,G4r,O4r,Mve,V4r,X4r,Eve,z4r,W4r,Q4r,ie,r7,Cve,H4r,U4r,AH,J4r,Y4r,K4r,t7,wve,Z4r,evr,LH,ovr,rvr,tvr,a7,Ave,avr,nvr,yH,svr,lvr,ivr,n7,Lve,dvr,cvr,xH,fvr,mvr,gvr,s7,yve,hvr,pvr,$H,_vr,uvr,bvr,l7,xve,vvr,Fvr,kH,Tvr,Mvr,Evr,i7,$ve,Cvr,wvr,SH,Avr,Lvr,yvr,d7,kve,xvr,$vr,RH,kvr,Svr,Rvr,c7,Sve,Pvr,Bvr,PH,Ivr,Nvr,qvr,f7,Rve,jvr,Dvr,BH,Gvr,Ovr,Vvr,m7,Pve,Xvr,zvr,IH,Wvr,Qvr,Hvr,g7,Bve,Uvr,Jvr,NH,Yvr,Kvr,Zvr,h7,Ive,e5r,o5r,qH,r5r,t5r,a5r,p7,Nve,n5r,s5r,jH,l5r,i5r,d5r,_7,qve,c5r,f5r,DH,m5r,g5r,h5r,u7,jve,p5r,_5r,GH,u5r,b5r,v5r,b7,Dve,F5r,T5r,OH,M5r,E5r,C5r,v7,Gve,w5r,A5r,VH,L5r,y5r,x5r,F7,Ove,$5r,k5r,XH,S5r,R5r,P5r,T7,Vve,B5r,I5r,zH,N5r,q5r,j5r,M7,_De,ac,E7,Xve,Q8,D5r,zve,G5r,uDe,rr,H8,O5r,nc,V5r,WH,X5r,z5r,QH,W5r,Q5r,H5r,U8,U5r,Wve,J5r,Y5r,K5r,Rt,J8,Z5r,Qve,e3r,o3r,sc,r3r,Hve,t3r,a3r,HH,n3r,s3r,l3r,C7,i3r,$r,Y8,d3r,Uve,c3r,f3r,an,m3r,Jve,g3r,h3r,Yve,p3r,_3r,Kve,u3r,b3r,v3r,Le,w7,Zve,F3r,T3r,UH,M3r,E3r,C3r,A7,e5e,w3r,A3r,JH,L3r,y3r,x3r,L7,o5e,$3r,k3r,YH,S3r,R3r,P3r,y7,r5e,B3r,I3r,KH,N3r,q3r,j3r,x7,t5e,D3r,G3r,ZH,O3r,V3r,X3r,$7,a5e,z3r,W3r,eU,Q3r,H3r,U3r,k7,n5e,J3r,Y3r,oU,K3r,Z3r,eFr,S7,s5e,oFr,rFr,rU,tFr,aFr,nFr,R7,l5e,sFr,lFr,tU,iFr,dFr,cFr,P7,i5e,fFr,mFr,aU,gFr,hFr,pFr,B7,bDe,lc,I7,d5e,K8,_Fr,c5e,uFr,vDe,tr,Z8,bFr,ic,vFr,nU,FFr,TFr,sU,MFr,EFr,CFr,e9,wFr,f5e,AFr,LFr,yFr,Pt,o9,xFr,m5e,$Fr,kFr,dc,SFr,g5e,RFr,PFr,lU,BFr,IFr,NFr,N7,qFr,kr,r9,jFr,h5e,DFr,GFr,nn,OFr,p5e,VFr,XFr,_5e,zFr,WFr,u5e,QFr,HFr,UFr,oe,q7,b5e,JFr,YFr,iU,KFr,ZFr,eTr,j7,v5e,oTr,rTr,dU,tTr,aTr,nTr,D7,F5e,sTr,lTr,cU,iTr,dTr,cTr,G7,T5e,fTr,mTr,fU,gTr,hTr,pTr,O7,M5e,_Tr,uTr,mU,bTr,vTr,FTr,V7,E5e,TTr,MTr,gU,ETr,CTr,wTr,X7,C5e,ATr,LTr,hU,yTr,xTr,$Tr,z7,w5e,kTr,STr,pU,RTr,PTr,BTr,W7,A5e,ITr,NTr,_U,qTr,jTr,DTr,Q7,L5e,GTr,OTr,uU,VTr,XTr,zTr,H7,y5e,WTr,QTr,bU,HTr,UTr,JTr,U7,x5e,YTr,KTr,vU,ZTr,e7r,o7r,J7,$5e,r7r,t7r,FU,a7r,n7r,s7r,Y7,k5e,l7r,i7r,TU,d7r,c7r,f7r,K7,S5e,m7r,g7r,MU,h7r,p7r,_7r,Z7,R5e,u7r,b7r,EU,v7r,F7r,T7r,eM,P5e,M7r,E7r,CU,C7r,w7r,A7r,oM,B5e,L7r,y7r,wU,x7r,$7r,k7r,rM,I5e,S7r,R7r,AU,P7r,B7r,I7r,tM,N5e,N7r,q7r,LU,j7r,D7r,G7r,aM,q5e,O7r,V7r,yU,X7r,z7r,W7r,nM,j5e,Q7r,H7r,xU,U7r,J7r,Y7r,sM,D5e,K7r,Z7r,$U,eMr,oMr,rMr,lM,G5e,tMr,aMr,kU,nMr,sMr,lMr,iM,O5e,iMr,dMr,SU,cMr,fMr,mMr,dM,V5e,gMr,hMr,RU,pMr,_Mr,uMr,cM,FDe,cc,fM,X5e,t9,bMr,z5e,vMr,TDe,ar,a9,FMr,fc,TMr,PU,MMr,EMr,BU,CMr,wMr,AMr,n9,LMr,W5e,yMr,xMr,$Mr,Bt,s9,kMr,Q5e,SMr,RMr,mc,PMr,H5e,BMr,IMr,IU,NMr,qMr,jMr,mM,DMr,Sr,l9,GMr,U5e,OMr,VMr,sn,XMr,J5e,zMr,WMr,Y5e,QMr,HMr,K5e,UMr,JMr,YMr,pe,gM,Z5e,KMr,ZMr,NU,eEr,oEr,rEr,hM,e3e,tEr,aEr,qU,nEr,sEr,lEr,pM,o3e,iEr,dEr,jU,cEr,fEr,mEr,_M,r3e,gEr,hEr,DU,pEr,_Er,uEr,uM,t3e,bEr,vEr,GU,FEr,TEr,MEr,bM,a3e,EEr,CEr,OU,wEr,AEr,LEr,vM,n3e,yEr,xEr,VU,$Er,kEr,SEr,FM,s3e,REr,PEr,XU,BEr,IEr,NEr,TM,l3e,qEr,jEr,zU,DEr,GEr,OEr,MM,i3e,VEr,XEr,WU,zEr,WEr,QEr,EM,d3e,HEr,UEr,QU,JEr,YEr,KEr,CM,c3e,ZEr,eCr,HU,oCr,rCr,tCr,wM,f3e,aCr,nCr,UU,sCr,lCr,iCr,AM,m3e,dCr,cCr,JU,fCr,mCr,gCr,LM,g3e,hCr,pCr,YU,_Cr,uCr,bCr,yM,h3e,vCr,FCr,KU,TCr,MCr,ECr,xM,p3e,CCr,wCr,ZU,ACr,LCr,yCr,$M,MDe,gc,kM,_3e,i9,xCr,u3e,$Cr,EDe,nr,d9,kCr,hc,SCr,eJ,RCr,PCr,oJ,BCr,ICr,NCr,c9,qCr,b3e,jCr,DCr,GCr,It,f9,OCr,v3e,VCr,XCr,pc,zCr,F3e,WCr,QCr,rJ,HCr,UCr,JCr,SM,YCr,Rr,m9,KCr,T3e,ZCr,e0r,ln,o0r,M3e,r0r,t0r,E3e,a0r,n0r,C3e,s0r,l0r,i0r,g9,RM,w3e,d0r,c0r,tJ,f0r,m0r,g0r,PM,A3e,h0r,p0r,aJ,_0r,u0r,b0r,BM,CDe,_c,IM,L3e,h9,v0r,y3e,F0r,wDe,sr,p9,T0r,uc,M0r,nJ,E0r,C0r,sJ,w0r,A0r,L0r,_9,y0r,x3e,x0r,$0r,k0r,Nt,u9,S0r,$3e,R0r,P0r,bc,B0r,k3e,I0r,N0r,lJ,q0r,j0r,D0r,NM,G0r,Pr,b9,O0r,S3e,V0r,X0r,dn,z0r,R3e,W0r,Q0r,P3e,H0r,U0r,B3e,J0r,Y0r,K0r,I3e,qM,N3e,Z0r,ewr,iJ,owr,rwr,twr,jM,ADe,vc,DM,q3e,v9,awr,j3e,nwr,LDe,lr,F9,swr,Fc,lwr,dJ,iwr,dwr,cJ,cwr,fwr,mwr,T9,gwr,D3e,hwr,pwr,_wr,qt,M9,uwr,G3e,bwr,vwr,Tc,Fwr,O3e,Twr,Mwr,fJ,Ewr,Cwr,wwr,GM,Awr,Br,E9,Lwr,V3e,ywr,xwr,cn,$wr,X3e,kwr,Swr,z3e,Rwr,Pwr,W3e,Bwr,Iwr,Nwr,de,OM,Q3e,qwr,jwr,mJ,Dwr,Gwr,Owr,VM,H3e,Vwr,Xwr,gJ,zwr,Wwr,Qwr,XM,U3e,Hwr,Uwr,hJ,Jwr,Ywr,Kwr,zM,J3e,Zwr,eAr,pJ,oAr,rAr,tAr,WM,Y3e,aAr,nAr,_J,sAr,lAr,iAr,QM,K3e,dAr,cAr,uJ,fAr,mAr,gAr,HM,Z3e,hAr,pAr,bJ,_Ar,uAr,bAr,UM,eFe,vAr,FAr,vJ,TAr,MAr,EAr,JM,oFe,CAr,wAr,FJ,AAr,LAr,yAr,YM,rFe,xAr,$Ar,TJ,kAr,SAr,RAr,KM,tFe,PAr,BAr,MJ,IAr,NAr,qAr,ZM,aFe,jAr,DAr,EJ,GAr,OAr,VAr,eE,nFe,XAr,zAr,CJ,WAr,QAr,HAr,oE,sFe,UAr,JAr,wJ,YAr,KAr,ZAr,rE,lFe,e6r,o6r,AJ,r6r,t6r,a6r,tE,iFe,n6r,s6r,LJ,l6r,i6r,d6r,aE,dFe,c6r,f6r,yJ,m6r,g6r,h6r,nE,cFe,p6r,_6r,xJ,u6r,b6r,v6r,sE,fFe,F6r,T6r,$J,M6r,E6r,C6r,lE,mFe,w6r,A6r,kJ,L6r,y6r,x6r,iE,yDe,Mc,dE,gFe,C9,$6r,hFe,k6r,xDe,ir,w9,S6r,Ec,R6r,SJ,P6r,B6r,RJ,I6r,N6r,q6r,A9,j6r,pFe,D6r,G6r,O6r,jt,L9,V6r,_Fe,X6r,z6r,Cc,W6r,uFe,Q6r,H6r,PJ,U6r,J6r,Y6r,cE,K6r,Ir,y9,Z6r,bFe,eLr,oLr,fn,rLr,vFe,tLr,aLr,FFe,nLr,sLr,TFe,lLr,iLr,dLr,ce,fE,MFe,cLr,fLr,BJ,mLr,gLr,hLr,mE,EFe,pLr,_Lr,IJ,uLr,bLr,vLr,gE,CFe,FLr,TLr,NJ,MLr,ELr,CLr,hE,wFe,wLr,ALr,qJ,LLr,yLr,xLr,pE,AFe,$Lr,kLr,jJ,SLr,RLr,PLr,_E,LFe,BLr,ILr,DJ,NLr,qLr,jLr,uE,yFe,DLr,GLr,GJ,OLr,VLr,XLr,bE,xFe,zLr,WLr,OJ,QLr,HLr,ULr,vE,$Fe,JLr,YLr,VJ,KLr,ZLr,eyr,FE,kFe,oyr,ryr,XJ,tyr,ayr,nyr,TE,SFe,syr,lyr,zJ,iyr,dyr,cyr,ME,RFe,fyr,myr,WJ,gyr,hyr,pyr,EE,PFe,_yr,uyr,QJ,byr,vyr,Fyr,CE,BFe,Tyr,Myr,HJ,Eyr,Cyr,wyr,wE,IFe,Ayr,Lyr,UJ,yyr,xyr,$yr,AE,NFe,kyr,Syr,JJ,Ryr,Pyr,Byr,LE,qFe,Iyr,Nyr,YJ,qyr,jyr,Dyr,yE,jFe,Gyr,Oyr,KJ,Vyr,Xyr,zyr,xE,DFe,Wyr,Qyr,ZJ,Hyr,Uyr,Jyr,$E,GFe,Yyr,Kyr,eY,Zyr,e8r,o8r,kE,$De,wc,SE,OFe,x9,r8r,VFe,t8r,kDe,dr,$9,a8r,Ac,n8r,oY,s8r,l8r,rY,i8r,d8r,c8r,k9,f8r,XFe,m8r,g8r,h8r,Dt,S9,p8r,zFe,_8r,u8r,Lc,b8r,WFe,v8r,F8r,tY,T8r,M8r,E8r,RE,C8r,Nr,R9,w8r,QFe,A8r,L8r,mn,y8r,HFe,x8r,$8r,UFe,k8r,S8r,JFe,R8r,P8r,B8r,YFe,PE,KFe,I8r,N8r,aY,q8r,j8r,D8r,BE,SDe,yc,IE,ZFe,P9,G8r,eTe,O8r,RDe,cr,B9,V8r,xc,X8r,nY,z8r,W8r,sY,Q8r,H8r,U8r,I9,J8r,oTe,Y8r,K8r,Z8r,Gt,N9,e9r,rTe,o9r,r9r,$c,t9r,tTe,a9r,n9r,lY,s9r,l9r,i9r,NE,d9r,qr,q9,c9r,aTe,f9r,m9r,gn,g9r,nTe,h9r,p9r,sTe,_9r,u9r,lTe,b9r,v9r,F9r,iTe,qE,dTe,T9r,M9r,iY,E9r,C9r,w9r,jE,PDe,kc,DE,cTe,j9,A9r,fTe,L9r,BDe,fr,D9,y9r,Sc,x9r,dY,$9r,k9r,cY,S9r,R9r,P9r,G9,B9r,mTe,I9r,N9r,q9r,Ot,O9,j9r,gTe,D9r,G9r,Rc,O9r,hTe,V9r,X9r,fY,z9r,W9r,Q9r,GE,H9r,jr,V9,U9r,pTe,J9r,Y9r,hn,K9r,_Te,Z9r,exr,uTe,oxr,rxr,bTe,txr,axr,nxr,re,OE,vTe,sxr,lxr,mY,ixr,dxr,cxr,VE,FTe,fxr,mxr,gY,gxr,hxr,pxr,XE,TTe,_xr,uxr,hY,bxr,vxr,Fxr,zE,MTe,Txr,Mxr,pY,Exr,Cxr,wxr,WE,ETe,Axr,Lxr,_Y,yxr,xxr,$xr,QE,CTe,kxr,Sxr,uY,Rxr,Pxr,Bxr,HE,wTe,Ixr,Nxr,bY,qxr,jxr,Dxr,UE,ATe,Gxr,Oxr,vY,Vxr,Xxr,zxr,JE,LTe,Wxr,Qxr,FY,Hxr,Uxr,Jxr,YE,yTe,Yxr,Kxr,TY,Zxr,e$r,o$r,KE,xTe,r$r,t$r,MY,a$r,n$r,s$r,ZE,$Te,l$r,i$r,EY,d$r,c$r,f$r,eC,kTe,m$r,g$r,CY,h$r,p$r,_$r,oC,STe,u$r,b$r,wY,v$r,F$r,T$r,rC,RTe,M$r,E$r,AY,C$r,w$r,A$r,tC,PTe,L$r,y$r,LY,x$r,$$r,k$r,aC,BTe,S$r,R$r,yY,P$r,B$r,I$r,nC,ITe,N$r,q$r,xY,j$r,D$r,G$r,sC,NTe,O$r,V$r,$Y,X$r,z$r,W$r,lC,qTe,Q$r,H$r,kY,U$r,J$r,Y$r,iC,jTe,K$r,Z$r,SY,ekr,okr,rkr,dC,DTe,tkr,akr,RY,nkr,skr,lkr,cC,GTe,ikr,dkr,PY,ckr,fkr,mkr,fC,OTe,gkr,hkr,BY,pkr,_kr,ukr,mC,VTe,bkr,vkr,IY,Fkr,Tkr,Mkr,gC,XTe,Ekr,Ckr,NY,wkr,Akr,Lkr,hC,IDe,Pc,pC,zTe,X9,ykr,WTe,xkr,NDe,mr,z9,$kr,Bc,kkr,qY,Skr,Rkr,jY,Pkr,Bkr,Ikr,W9,Nkr,QTe,qkr,jkr,Dkr,Vt,Q9,Gkr,HTe,Okr,Vkr,Ic,Xkr,UTe,zkr,Wkr,DY,Qkr,Hkr,Ukr,_C,Jkr,Dr,H9,Ykr,JTe,Kkr,Zkr,pn,eSr,YTe,oSr,rSr,KTe,tSr,aSr,ZTe,nSr,sSr,lSr,ye,uC,e7e,iSr,dSr,GY,cSr,fSr,mSr,bC,o7e,gSr,hSr,OY,pSr,_Sr,uSr,vC,r7e,bSr,vSr,VY,FSr,TSr,MSr,FC,t7e,ESr,CSr,XY,wSr,ASr,LSr,TC,a7e,ySr,xSr,zY,$Sr,kSr,SSr,MC,n7e,RSr,PSr,WY,BSr,ISr,NSr,EC,s7e,qSr,jSr,QY,DSr,GSr,OSr,CC,l7e,VSr,XSr,HY,zSr,WSr,QSr,wC,i7e,HSr,USr,UY,JSr,YSr,KSr,AC,d7e,ZSr,eRr,JY,oRr,rRr,tRr,LC,qDe,Nc,yC,c7e,U9,aRr,f7e,nRr,jDe,gr,J9,sRr,qc,lRr,YY,iRr,dRr,KY,cRr,fRr,mRr,Y9,gRr,m7e,hRr,pRr,_Rr,Xt,K9,uRr,g7e,bRr,vRr,jc,FRr,h7e,TRr,MRr,ZY,ERr,CRr,wRr,xC,ARr,Gr,Z9,LRr,p7e,yRr,xRr,_n,$Rr,_7e,kRr,SRr,u7e,RRr,PRr,b7e,BRr,IRr,NRr,Ee,$C,v7e,qRr,jRr,eK,DRr,GRr,ORr,kC,F7e,VRr,XRr,oK,zRr,WRr,QRr,SC,T7e,HRr,URr,rK,JRr,YRr,KRr,RC,M7e,ZRr,ePr,tK,oPr,rPr,tPr,PC,E7e,aPr,nPr,aK,sPr,lPr,iPr,BC,C7e,dPr,cPr,nK,fPr,mPr,gPr,IC,w7e,hPr,pPr,sK,_Pr,uPr,bPr,NC,A7e,vPr,FPr,lK,TPr,MPr,EPr,qC,L7e,CPr,wPr,iK,APr,LPr,yPr,jC,y7e,xPr,$Pr,dK,kPr,SPr,RPr,DC,x7e,PPr,BPr,cK,IPr,NPr,qPr,GC,$7e,jPr,DPr,fK,GPr,OPr,VPr,OC,DDe,Dc,VC,k7e,ex,XPr,S7e,zPr,GDe,hr,ox,WPr,Gc,QPr,mK,HPr,UPr,gK,JPr,YPr,KPr,rx,ZPr,R7e,eBr,oBr,rBr,zt,tx,tBr,P7e,aBr,nBr,Oc,sBr,B7e,lBr,iBr,hK,dBr,cBr,fBr,XC,mBr,Or,ax,gBr,I7e,hBr,pBr,un,_Br,N7e,uBr,bBr,q7e,vBr,FBr,j7e,TBr,MBr,EBr,xe,zC,D7e,CBr,wBr,pK,ABr,LBr,yBr,WC,G7e,xBr,$Br,_K,kBr,SBr,RBr,QC,O7e,PBr,BBr,uK,IBr,NBr,qBr,HC,V7e,jBr,DBr,bK,GBr,OBr,VBr,UC,X7e,XBr,zBr,vK,WBr,QBr,HBr,JC,z7e,UBr,JBr,FK,YBr,KBr,ZBr,YC,W7e,eIr,oIr,TK,rIr,tIr,aIr,KC,Q7e,nIr,sIr,MK,lIr,iIr,dIr,ZC,H7e,cIr,fIr,EK,mIr,gIr,hIr,e0,U7e,pIr,_Ir,CK,uIr,bIr,vIr,o0,ODe,Vc,r0,J7e,nx,FIr,Y7e,TIr,VDe,pr,sx,MIr,Xc,EIr,wK,CIr,wIr,AK,AIr,LIr,yIr,lx,xIr,K7e,$Ir,kIr,SIr,Wt,ix,RIr,Z7e,PIr,BIr,zc,IIr,eMe,NIr,qIr,LK,jIr,DIr,GIr,t0,OIr,Vr,dx,VIr,oMe,XIr,zIr,bn,WIr,rMe,QIr,HIr,tMe,UIr,JIr,aMe,YIr,KIr,ZIr,Pe,a0,nMe,eNr,oNr,yK,rNr,tNr,aNr,n0,sMe,nNr,sNr,xK,lNr,iNr,dNr,s0,lMe,cNr,fNr,$K,mNr,gNr,hNr,l0,iMe,pNr,_Nr,kK,uNr,bNr,vNr,i0,dMe,FNr,TNr,SK,MNr,ENr,CNr,d0,cMe,wNr,ANr,RK,LNr,yNr,xNr,c0,fMe,$Nr,kNr,PK,SNr,RNr,PNr,f0,mMe,BNr,INr,BK,NNr,qNr,jNr,m0,gMe,DNr,GNr,IK,ONr,VNr,XNr,g0,XDe,Wc,h0,hMe,cx,zNr,pMe,WNr,zDe,_r,fx,QNr,Qc,HNr,NK,UNr,JNr,qK,YNr,KNr,ZNr,mx,eqr,_Me,oqr,rqr,tqr,Qt,gx,aqr,uMe,nqr,sqr,Hc,lqr,bMe,iqr,dqr,jK,cqr,fqr,mqr,p0,gqr,Xr,hx,hqr,vMe,pqr,_qr,vn,uqr,FMe,bqr,vqr,TMe,Fqr,Tqr,MMe,Mqr,Eqr,Cqr,$e,_0,EMe,wqr,Aqr,DK,Lqr,yqr,xqr,u0,CMe,$qr,kqr,GK,Sqr,Rqr,Pqr,b0,wMe,Bqr,Iqr,OK,Nqr,qqr,jqr,v0,AMe,Dqr,Gqr,VK,Oqr,Vqr,Xqr,F0,LMe,zqr,Wqr,XK,Qqr,Hqr,Uqr,T0,yMe,Jqr,Yqr,zK,Kqr,Zqr,ejr,M0,xMe,ojr,rjr,WK,tjr,ajr,njr,E0,$Me,sjr,ljr,QK,ijr,djr,cjr,C0,kMe,fjr,mjr,HK,gjr,hjr,pjr,w0,SMe,_jr,ujr,UK,bjr,vjr,Fjr,A0,WDe,Uc,L0,RMe,px,Tjr,PMe,Mjr,QDe,ur,_x,Ejr,Jc,Cjr,JK,wjr,Ajr,YK,Ljr,yjr,xjr,ux,$jr,BMe,kjr,Sjr,Rjr,Ht,bx,Pjr,IMe,Bjr,Ijr,Yc,Njr,NMe,qjr,jjr,KK,Djr,Gjr,Ojr,y0,Vjr,zr,vx,Xjr,qMe,zjr,Wjr,Fn,Qjr,jMe,Hjr,Ujr,DMe,Jjr,Yjr,GMe,Kjr,Zjr,eDr,ke,x0,OMe,oDr,rDr,ZK,tDr,aDr,nDr,$0,VMe,sDr,lDr,eZ,iDr,dDr,cDr,k0,XMe,fDr,mDr,oZ,gDr,hDr,pDr,S0,zMe,_Dr,uDr,rZ,bDr,vDr,FDr,R0,WMe,TDr,MDr,tZ,EDr,CDr,wDr,P0,QMe,ADr,LDr,aZ,yDr,xDr,$Dr,B0,HMe,kDr,SDr,nZ,RDr,PDr,BDr,I0,UMe,IDr,NDr,sZ,qDr,jDr,DDr,N0,JMe,GDr,ODr,lZ,VDr,XDr,zDr,q0,YMe,WDr,QDr,iZ,HDr,UDr,JDr,j0,HDe,Kc,D0,KMe,Fx,YDr,ZMe,KDr,UDe,br,Tx,ZDr,Zc,eGr,dZ,oGr,rGr,cZ,tGr,aGr,nGr,Mx,sGr,eEe,lGr,iGr,dGr,Ut,Ex,cGr,oEe,fGr,mGr,ef,gGr,rEe,hGr,pGr,fZ,_Gr,uGr,bGr,G0,vGr,Wr,Cx,FGr,tEe,TGr,MGr,Tn,EGr,aEe,CGr,wGr,nEe,AGr,LGr,sEe,yGr,xGr,$Gr,Ge,O0,lEe,kGr,SGr,mZ,RGr,PGr,BGr,V0,iEe,IGr,NGr,gZ,qGr,jGr,DGr,X0,dEe,GGr,OGr,hZ,VGr,XGr,zGr,z0,cEe,WGr,QGr,pZ,HGr,UGr,JGr,W0,fEe,YGr,KGr,_Z,ZGr,eOr,oOr,Q0,mEe,rOr,tOr,uZ,aOr,nOr,sOr,H0,gEe,lOr,iOr,bZ,dOr,cOr,fOr,U0,hEe,mOr,gOr,vZ,hOr,pOr,_Or,J0,JDe,of,Y0,pEe,wx,uOr,_Ee,bOr,YDe,vr,Ax,vOr,rf,FOr,FZ,TOr,MOr,TZ,EOr,COr,wOr,Lx,AOr,uEe,LOr,yOr,xOr,Jt,yx,$Or,bEe,kOr,SOr,tf,ROr,vEe,POr,BOr,MZ,IOr,NOr,qOr,K0,jOr,Qr,xx,DOr,FEe,GOr,OOr,Mn,VOr,TEe,XOr,zOr,MEe,WOr,QOr,EEe,HOr,UOr,JOr,Oe,Z0,CEe,YOr,KOr,EZ,ZOr,eVr,oVr,ew,wEe,rVr,tVr,CZ,aVr,nVr,sVr,ow,AEe,lVr,iVr,wZ,dVr,cVr,fVr,rw,LEe,mVr,gVr,AZ,hVr,pVr,_Vr,tw,yEe,uVr,bVr,LZ,vVr,FVr,TVr,aw,xEe,MVr,EVr,yZ,CVr,wVr,AVr,nw,$Ee,LVr,yVr,xZ,xVr,$Vr,kVr,sw,kEe,SVr,RVr,$Z,PVr,BVr,IVr,lw,KDe,af,iw,SEe,$x,NVr,REe,qVr,ZDe,Fr,kx,jVr,nf,DVr,kZ,GVr,OVr,SZ,VVr,XVr,zVr,Sx,WVr,PEe,QVr,HVr,UVr,Yt,Rx,JVr,BEe,YVr,KVr,sf,ZVr,IEe,eXr,oXr,RZ,rXr,tXr,aXr,dw,nXr,Hr,Px,sXr,NEe,lXr,iXr,En,dXr,qEe,cXr,fXr,jEe,mXr,gXr,DEe,hXr,pXr,_Xr,GEe,cw,OEe,uXr,bXr,PZ,vXr,FXr,TXr,fw,eGe,lf,mw,VEe,Bx,MXr,XEe,EXr,oGe,Tr,Ix,CXr,df,wXr,BZ,AXr,LXr,IZ,yXr,xXr,$Xr,Nx,kXr,zEe,SXr,RXr,PXr,Kt,qx,BXr,WEe,IXr,NXr,cf,qXr,QEe,jXr,DXr,NZ,GXr,OXr,VXr,gw,XXr,Ur,jx,zXr,HEe,WXr,QXr,Cn,HXr,UEe,UXr,JXr,JEe,YXr,KXr,YEe,ZXr,ezr,ozr,Dx,hw,KEe,rzr,tzr,qZ,azr,nzr,szr,pw,ZEe,lzr,izr,jZ,dzr,czr,fzr,_w,rGe,ff,uw,eCe,Gx,mzr,oCe,gzr,tGe,Mr,Ox,hzr,mf,pzr,DZ,_zr,uzr,GZ,bzr,vzr,Fzr,Vx,Tzr,rCe,Mzr,Ezr,Czr,Zt,Xx,wzr,tCe,Azr,Lzr,gf,yzr,aCe,xzr,$zr,OZ,kzr,Szr,Rzr,bw,Pzr,Jr,zx,Bzr,nCe,Izr,Nzr,wn,qzr,sCe,jzr,Dzr,lCe,Gzr,Ozr,iCe,Vzr,Xzr,zzr,dCe,vw,cCe,Wzr,Qzr,VZ,Hzr,Uzr,Jzr,Fw,aGe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),G6=new te({}),O6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new Yzr({props:{warning:!0,$$slots:{default:[lRt]},$$scope:{ctx:y}}}),V6=new te({}),X6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L590"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L613"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:y}}}),H6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L736"}}),U6=new te({}),J6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L390"}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L404"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:y}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L603"}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Oh=new Yzr({props:{$$slots:{default:[cRt]},$$scope:{ctx:y}}}),Vh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:y}}}),sL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),dp=new Yzr({props:{$$slots:{default:[mRt]},$$scope:{ctx:y}}}),cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:y}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L742"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),gp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:y}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),cu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:y}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L749"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),mu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:y}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:y}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L764"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:y}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:y}}}),yL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L771"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:y}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L778"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:y}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Ub=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:y}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L787"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:y}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),W2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:y}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L821"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),H2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:y}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:y}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L828"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:y}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:y}}}),ZL=new te({}),ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L814"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:y}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:y}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L796"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:y}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:y}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L803"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:y}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:y}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L837"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:y}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:y}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L876"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:y}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:y}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L883"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:y}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L906"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:y}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:y}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L890"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:y}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:y}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L897"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WRt]},$$scope:{ctx:y}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QRt]},$$scope:{ctx:y}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L915"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[HRt]},$$scope:{ctx:y}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[URt]},$$scope:{ctx:y}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L922"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[JRt]},$$scope:{ctx:y}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[YRt]},$$scope:{ctx:y}}}),o8=new te({}),r8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L869"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[KRt]},$$scope:{ctx:y}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:y}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L844"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ePt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:y}}}),m8=new te({}),g8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L851"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[rPt]},$$scope:{ctx:y}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:y}}}),u8=new te({}),b8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L860"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:y}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:y}}}),L8=new te({}),y8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:y}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:y}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:y}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:y}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:y}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:y}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:y}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:y}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:y}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:y}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:y}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:y}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:y}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:y}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:y}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:y}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:y}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:y}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:y}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:y}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:y}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:y}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:y}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:y}}}),P9=new te({}),B9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:y}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:y}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:y}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:y}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:y}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:y}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:y}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:y}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:y}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:y}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:y}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:y}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:y}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:y}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:y}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:y}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:y}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:y}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:y}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:y}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:y}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:y}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:y}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:y}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:y}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),tt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),N6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),q6=o("AutoConfig"),yn=o(", "),xn=a("a"),j6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),D6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),sk=o("will create a model that is an instance of "),vi=a("a"),lk=o("BertModel"),ik=o("."),Eo=l(),Aa=a("p"),dk=o("There is one class of "),Ff=a("code"),ck=o("AutoModel"),mVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),oje=l(),Fi=a("h2"),Tf=a("a"),Ioe=a("span"),F(G6.$$.fragment),gVe=l(),Noe=a("span"),hVe=o("Extending the Auto Classes"),rje=l(),kn=a("p"),pVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=a("code"),_Ve=o("NewModel"),uVe=o(", make sure you have a "),joe=a("code"),bVe=o("NewModelConfig"),vVe=o(` then you can add those to the auto
classes like this:`),tje=l(),F(O6.$$.fragment),aje=l(),fk=a("p"),FVe=o("You will then be able to use the auto classes like you would usually do!"),nje=l(),F(Mf.$$.fragment),sje=l(),Ti=a("h2"),Ef=a("a"),Doe=a("span"),F(V6.$$.fragment),TVe=l(),Goe=a("span"),MVe=o("AutoConfig"),lje=l(),Co=a("div"),F(X6.$$.fragment),EVe=l(),z6=a("p"),CVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=a("a"),wVe=o("from_pretrained()"),AVe=o(" class method."),LVe=l(),W6=a("p"),yVe=o("This class cannot be instantiated directly using "),Ooe=a("code"),xVe=o("__init__()"),$Ve=o(" (throws an error)."),kVe=l(),Er=a("div"),F(Q6.$$.fragment),SVe=l(),Voe=a("p"),RVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PVe=l(),Mi=a("p"),BVe=o("The configuration class to instantiate is selected based on the "),Xoe=a("code"),IVe=o("model_type"),NVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=a("code"),qVe=o("pretrained_model_name_or_path"),jVe=o(":"),DVe=l(),A=a("ul"),Cf=a("li"),Woe=a("strong"),GVe=o("albert"),OVe=o(" \u2014 "),gk=a("a"),VVe=o("AlbertConfig"),XVe=o(" (ALBERT model)"),zVe=l(),wf=a("li"),Qoe=a("strong"),WVe=o("bart"),QVe=o(" \u2014 "),hk=a("a"),HVe=o("BartConfig"),UVe=o(" (BART model)"),JVe=l(),Af=a("li"),Hoe=a("strong"),YVe=o("beit"),KVe=o(" \u2014 "),pk=a("a"),ZVe=o("BeitConfig"),eXe=o(" (BEiT model)"),oXe=l(),Lf=a("li"),Uoe=a("strong"),rXe=o("bert"),tXe=o(" \u2014 "),_k=a("a"),aXe=o("BertConfig"),nXe=o(" (BERT model)"),sXe=l(),yf=a("li"),Joe=a("strong"),lXe=o("bert-generation"),iXe=o(" \u2014 "),uk=a("a"),dXe=o("BertGenerationConfig"),cXe=o(" (Bert Generation model)"),fXe=l(),xf=a("li"),Yoe=a("strong"),mXe=o("big_bird"),gXe=o(" \u2014 "),bk=a("a"),hXe=o("BigBirdConfig"),pXe=o(" (BigBird model)"),_Xe=l(),$f=a("li"),Koe=a("strong"),uXe=o("bigbird_pegasus"),bXe=o(" \u2014 "),vk=a("a"),vXe=o("BigBirdPegasusConfig"),FXe=o(" (BigBird-Pegasus model)"),TXe=l(),kf=a("li"),Zoe=a("strong"),MXe=o("blenderbot"),EXe=o(" \u2014 "),Fk=a("a"),CXe=o("BlenderbotConfig"),wXe=o(" (Blenderbot model)"),AXe=l(),Sf=a("li"),ere=a("strong"),LXe=o("blenderbot-small"),yXe=o(" \u2014 "),Tk=a("a"),xXe=o("BlenderbotSmallConfig"),$Xe=o(" (BlenderbotSmall model)"),kXe=l(),Rf=a("li"),ore=a("strong"),SXe=o("camembert"),RXe=o(" \u2014 "),Mk=a("a"),PXe=o("CamembertConfig"),BXe=o(" (CamemBERT model)"),IXe=l(),Pf=a("li"),rre=a("strong"),NXe=o("canine"),qXe=o(" \u2014 "),Ek=a("a"),jXe=o("CanineConfig"),DXe=o(" (CANINE model)"),GXe=l(),Bf=a("li"),tre=a("strong"),OXe=o("clip"),VXe=o(" \u2014 "),Ck=a("a"),XXe=o("CLIPConfig"),zXe=o(" (CLIP model)"),WXe=l(),If=a("li"),are=a("strong"),QXe=o("convbert"),HXe=o(" \u2014 "),wk=a("a"),UXe=o("ConvBertConfig"),JXe=o(" (ConvBERT model)"),YXe=l(),Nf=a("li"),nre=a("strong"),KXe=o("convnext"),ZXe=o(" \u2014 "),Ak=a("a"),eze=o("ConvNextConfig"),oze=o(" (ConvNeXT model)"),rze=l(),qf=a("li"),sre=a("strong"),tze=o("ctrl"),aze=o(" \u2014 "),Lk=a("a"),nze=o("CTRLConfig"),sze=o(" (CTRL model)"),lze=l(),jf=a("li"),lre=a("strong"),ize=o("cvt"),dze=o(" \u2014 "),yk=a("a"),cze=o("CvtConfig"),fze=o(" (CvT model)"),mze=l(),Df=a("li"),ire=a("strong"),gze=o("data2vec-audio"),hze=o(" \u2014 "),xk=a("a"),pze=o("Data2VecAudioConfig"),_ze=o(" (Data2VecAudio model)"),uze=l(),Gf=a("li"),dre=a("strong"),bze=o("data2vec-text"),vze=o(" \u2014 "),$k=a("a"),Fze=o("Data2VecTextConfig"),Tze=o(" (Data2VecText model)"),Mze=l(),Of=a("li"),cre=a("strong"),Eze=o("data2vec-vision"),Cze=o(" \u2014 "),kk=a("a"),wze=o("Data2VecVisionConfig"),Aze=o(" (Data2VecVision model)"),Lze=l(),Vf=a("li"),fre=a("strong"),yze=o("deberta"),xze=o(" \u2014 "),Sk=a("a"),$ze=o("DebertaConfig"),kze=o(" (DeBERTa model)"),Sze=l(),Xf=a("li"),mre=a("strong"),Rze=o("deberta-v2"),Pze=o(" \u2014 "),Rk=a("a"),Bze=o("DebertaV2Config"),Ize=o(" (DeBERTa-v2 model)"),Nze=l(),zf=a("li"),gre=a("strong"),qze=o("decision_transformer"),jze=o(" \u2014 "),Pk=a("a"),Dze=o("DecisionTransformerConfig"),Gze=o(" (Decision Transformer model)"),Oze=l(),Wf=a("li"),hre=a("strong"),Vze=o("deit"),Xze=o(" \u2014 "),Bk=a("a"),zze=o("DeiTConfig"),Wze=o(" (DeiT model)"),Qze=l(),Qf=a("li"),pre=a("strong"),Hze=o("detr"),Uze=o(" \u2014 "),Ik=a("a"),Jze=o("DetrConfig"),Yze=o(" (DETR model)"),Kze=l(),Hf=a("li"),_re=a("strong"),Zze=o("distilbert"),eWe=o(" \u2014 "),Nk=a("a"),oWe=o("DistilBertConfig"),rWe=o(" (DistilBERT model)"),tWe=l(),Uf=a("li"),ure=a("strong"),aWe=o("dpr"),nWe=o(" \u2014 "),qk=a("a"),sWe=o("DPRConfig"),lWe=o(" (DPR model)"),iWe=l(),Jf=a("li"),bre=a("strong"),dWe=o("dpt"),cWe=o(" \u2014 "),jk=a("a"),fWe=o("DPTConfig"),mWe=o(" (DPT model)"),gWe=l(),Yf=a("li"),vre=a("strong"),hWe=o("electra"),pWe=o(" \u2014 "),Dk=a("a"),_We=o("ElectraConfig"),uWe=o(" (ELECTRA model)"),bWe=l(),Kf=a("li"),Fre=a("strong"),vWe=o("encoder-decoder"),FWe=o(" \u2014 "),Gk=a("a"),TWe=o("EncoderDecoderConfig"),MWe=o(" (Encoder decoder model)"),EWe=l(),Zf=a("li"),Tre=a("strong"),CWe=o("flaubert"),wWe=o(" \u2014 "),Ok=a("a"),AWe=o("FlaubertConfig"),LWe=o(" (FlauBERT model)"),yWe=l(),em=a("li"),Mre=a("strong"),xWe=o("flava"),$We=o(" \u2014 "),Vk=a("a"),kWe=o("FlavaConfig"),SWe=o(" (FLAVA model)"),RWe=l(),om=a("li"),Ere=a("strong"),PWe=o("fnet"),BWe=o(" \u2014 "),Xk=a("a"),IWe=o("FNetConfig"),NWe=o(" (FNet model)"),qWe=l(),rm=a("li"),Cre=a("strong"),jWe=o("fsmt"),DWe=o(" \u2014 "),zk=a("a"),GWe=o("FSMTConfig"),OWe=o(" (FairSeq Machine-Translation model)"),VWe=l(),tm=a("li"),wre=a("strong"),XWe=o("funnel"),zWe=o(" \u2014 "),Wk=a("a"),WWe=o("FunnelConfig"),QWe=o(" (Funnel Transformer model)"),HWe=l(),am=a("li"),Are=a("strong"),UWe=o("glpn"),JWe=o(" \u2014 "),Qk=a("a"),YWe=o("GLPNConfig"),KWe=o(" (GLPN model)"),ZWe=l(),nm=a("li"),Lre=a("strong"),eQe=o("gpt2"),oQe=o(" \u2014 "),Hk=a("a"),rQe=o("GPT2Config"),tQe=o(" (OpenAI GPT-2 model)"),aQe=l(),sm=a("li"),yre=a("strong"),nQe=o("gpt_neo"),sQe=o(" \u2014 "),Uk=a("a"),lQe=o("GPTNeoConfig"),iQe=o(" (GPT Neo model)"),dQe=l(),lm=a("li"),xre=a("strong"),cQe=o("gpt_neox"),fQe=o(" \u2014 "),Jk=a("a"),mQe=o("GPTNeoXConfig"),gQe=o(" (GPT NeoX model)"),hQe=l(),im=a("li"),$re=a("strong"),pQe=o("gptj"),_Qe=o(" \u2014 "),Yk=a("a"),uQe=o("GPTJConfig"),bQe=o(" (GPT-J model)"),vQe=l(),dm=a("li"),kre=a("strong"),FQe=o("hubert"),TQe=o(" \u2014 "),Kk=a("a"),MQe=o("HubertConfig"),EQe=o(" (Hubert model)"),CQe=l(),cm=a("li"),Sre=a("strong"),wQe=o("ibert"),AQe=o(" \u2014 "),Zk=a("a"),LQe=o("IBertConfig"),yQe=o(" (I-BERT model)"),xQe=l(),fm=a("li"),Rre=a("strong"),$Qe=o("imagegpt"),kQe=o(" \u2014 "),eS=a("a"),SQe=o("ImageGPTConfig"),RQe=o(" (ImageGPT model)"),PQe=l(),mm=a("li"),Pre=a("strong"),BQe=o("layoutlm"),IQe=o(" \u2014 "),oS=a("a"),NQe=o("LayoutLMConfig"),qQe=o(" (LayoutLM model)"),jQe=l(),gm=a("li"),Bre=a("strong"),DQe=o("layoutlmv2"),GQe=o(" \u2014 "),rS=a("a"),OQe=o("LayoutLMv2Config"),VQe=o(" (LayoutLMv2 model)"),XQe=l(),hm=a("li"),Ire=a("strong"),zQe=o("layoutlmv3"),WQe=o(" \u2014 "),tS=a("a"),QQe=o("LayoutLMv3Config"),HQe=o(" (LayoutLMv3 model)"),UQe=l(),pm=a("li"),Nre=a("strong"),JQe=o("led"),YQe=o(" \u2014 "),aS=a("a"),KQe=o("LEDConfig"),ZQe=o(" (LED model)"),eHe=l(),_m=a("li"),qre=a("strong"),oHe=o("levit"),rHe=o(" \u2014 "),nS=a("a"),tHe=o("LevitConfig"),aHe=o(" (LeViT model)"),nHe=l(),um=a("li"),jre=a("strong"),sHe=o("longformer"),lHe=o(" \u2014 "),sS=a("a"),iHe=o("LongformerConfig"),dHe=o(" (Longformer model)"),cHe=l(),bm=a("li"),Dre=a("strong"),fHe=o("luke"),mHe=o(" \u2014 "),lS=a("a"),gHe=o("LukeConfig"),hHe=o(" (LUKE model)"),pHe=l(),vm=a("li"),Gre=a("strong"),_He=o("lxmert"),uHe=o(" \u2014 "),iS=a("a"),bHe=o("LxmertConfig"),vHe=o(" (LXMERT model)"),FHe=l(),Fm=a("li"),Ore=a("strong"),THe=o("m2m_100"),MHe=o(" \u2014 "),dS=a("a"),EHe=o("M2M100Config"),CHe=o(" (M2M100 model)"),wHe=l(),Tm=a("li"),Vre=a("strong"),AHe=o("marian"),LHe=o(" \u2014 "),cS=a("a"),yHe=o("MarianConfig"),xHe=o(" (Marian model)"),$He=l(),Mm=a("li"),Xre=a("strong"),kHe=o("maskformer"),SHe=o(" \u2014 "),fS=a("a"),RHe=o("MaskFormerConfig"),PHe=o(" (MaskFormer model)"),BHe=l(),Em=a("li"),zre=a("strong"),IHe=o("mbart"),NHe=o(" \u2014 "),mS=a("a"),qHe=o("MBartConfig"),jHe=o(" (mBART model)"),DHe=l(),Cm=a("li"),Wre=a("strong"),GHe=o("megatron-bert"),OHe=o(" \u2014 "),gS=a("a"),VHe=o("MegatronBertConfig"),XHe=o(" (Megatron-BERT model)"),zHe=l(),wm=a("li"),Qre=a("strong"),WHe=o("mobilebert"),QHe=o(" \u2014 "),hS=a("a"),HHe=o("MobileBertConfig"),UHe=o(" (MobileBERT model)"),JHe=l(),Am=a("li"),Hre=a("strong"),YHe=o("mobilevit"),KHe=o(" \u2014 "),pS=a("a"),ZHe=o("MobileViTConfig"),eUe=o(" (MobileViT model)"),oUe=l(),Lm=a("li"),Ure=a("strong"),rUe=o("mpnet"),tUe=o(" \u2014 "),_S=a("a"),aUe=o("MPNetConfig"),nUe=o(" (MPNet model)"),sUe=l(),ym=a("li"),Jre=a("strong"),lUe=o("mt5"),iUe=o(" \u2014 "),uS=a("a"),dUe=o("MT5Config"),cUe=o(" (MT5 model)"),fUe=l(),xm=a("li"),Yre=a("strong"),mUe=o("nystromformer"),gUe=o(" \u2014 "),bS=a("a"),hUe=o("NystromformerConfig"),pUe=o(" (Nystr\xF6mformer model)"),_Ue=l(),$m=a("li"),Kre=a("strong"),uUe=o("openai-gpt"),bUe=o(" \u2014 "),vS=a("a"),vUe=o("OpenAIGPTConfig"),FUe=o(" (OpenAI GPT model)"),TUe=l(),km=a("li"),Zre=a("strong"),MUe=o("opt"),EUe=o(" \u2014 "),FS=a("a"),CUe=o("OPTConfig"),wUe=o(" (OPT model)"),AUe=l(),Sm=a("li"),ete=a("strong"),LUe=o("pegasus"),yUe=o(" \u2014 "),TS=a("a"),xUe=o("PegasusConfig"),$Ue=o(" (Pegasus model)"),kUe=l(),Rm=a("li"),ote=a("strong"),SUe=o("perceiver"),RUe=o(" \u2014 "),MS=a("a"),PUe=o("PerceiverConfig"),BUe=o(" (Perceiver model)"),IUe=l(),Pm=a("li"),rte=a("strong"),NUe=o("plbart"),qUe=o(" \u2014 "),ES=a("a"),jUe=o("PLBartConfig"),DUe=o(" (PLBart model)"),GUe=l(),Bm=a("li"),tte=a("strong"),OUe=o("poolformer"),VUe=o(" \u2014 "),CS=a("a"),XUe=o("PoolFormerConfig"),zUe=o(" (PoolFormer model)"),WUe=l(),Im=a("li"),ate=a("strong"),QUe=o("prophetnet"),HUe=o(" \u2014 "),wS=a("a"),UUe=o("ProphetNetConfig"),JUe=o(" (ProphetNet model)"),YUe=l(),Nm=a("li"),nte=a("strong"),KUe=o("qdqbert"),ZUe=o(" \u2014 "),AS=a("a"),eJe=o("QDQBertConfig"),oJe=o(" (QDQBert model)"),rJe=l(),qm=a("li"),ste=a("strong"),tJe=o("rag"),aJe=o(" \u2014 "),LS=a("a"),nJe=o("RagConfig"),sJe=o(" (RAG model)"),lJe=l(),jm=a("li"),lte=a("strong"),iJe=o("realm"),dJe=o(" \u2014 "),yS=a("a"),cJe=o("RealmConfig"),fJe=o(" (REALM model)"),mJe=l(),Dm=a("li"),ite=a("strong"),gJe=o("reformer"),hJe=o(" \u2014 "),xS=a("a"),pJe=o("ReformerConfig"),_Je=o(" (Reformer model)"),uJe=l(),Gm=a("li"),dte=a("strong"),bJe=o("regnet"),vJe=o(" \u2014 "),$S=a("a"),FJe=o("RegNetConfig"),TJe=o(" (RegNet model)"),MJe=l(),Om=a("li"),cte=a("strong"),EJe=o("rembert"),CJe=o(" \u2014 "),kS=a("a"),wJe=o("RemBertConfig"),AJe=o(" (RemBERT model)"),LJe=l(),Vm=a("li"),fte=a("strong"),yJe=o("resnet"),xJe=o(" \u2014 "),SS=a("a"),$Je=o("ResNetConfig"),kJe=o(" (ResNet model)"),SJe=l(),Xm=a("li"),mte=a("strong"),RJe=o("retribert"),PJe=o(" \u2014 "),RS=a("a"),BJe=o("RetriBertConfig"),IJe=o(" (RetriBERT model)"),NJe=l(),zm=a("li"),gte=a("strong"),qJe=o("roberta"),jJe=o(" \u2014 "),PS=a("a"),DJe=o("RobertaConfig"),GJe=o(" (RoBERTa model)"),OJe=l(),Wm=a("li"),hte=a("strong"),VJe=o("roformer"),XJe=o(" \u2014 "),BS=a("a"),zJe=o("RoFormerConfig"),WJe=o(" (RoFormer model)"),QJe=l(),Qm=a("li"),pte=a("strong"),HJe=o("segformer"),UJe=o(" \u2014 "),IS=a("a"),JJe=o("SegformerConfig"),YJe=o(" (SegFormer model)"),KJe=l(),Hm=a("li"),_te=a("strong"),ZJe=o("sew"),eYe=o(" \u2014 "),NS=a("a"),oYe=o("SEWConfig"),rYe=o(" (SEW model)"),tYe=l(),Um=a("li"),ute=a("strong"),aYe=o("sew-d"),nYe=o(" \u2014 "),qS=a("a"),sYe=o("SEWDConfig"),lYe=o(" (SEW-D model)"),iYe=l(),Jm=a("li"),bte=a("strong"),dYe=o("speech-encoder-decoder"),cYe=o(" \u2014 "),jS=a("a"),fYe=o("SpeechEncoderDecoderConfig"),mYe=o(" (Speech Encoder decoder model)"),gYe=l(),Ym=a("li"),vte=a("strong"),hYe=o("speech_to_text"),pYe=o(" \u2014 "),DS=a("a"),_Ye=o("Speech2TextConfig"),uYe=o(" (Speech2Text model)"),bYe=l(),Km=a("li"),Fte=a("strong"),vYe=o("speech_to_text_2"),FYe=o(" \u2014 "),GS=a("a"),TYe=o("Speech2Text2Config"),MYe=o(" (Speech2Text2 model)"),EYe=l(),Zm=a("li"),Tte=a("strong"),CYe=o("splinter"),wYe=o(" \u2014 "),OS=a("a"),AYe=o("SplinterConfig"),LYe=o(" (Splinter model)"),yYe=l(),eg=a("li"),Mte=a("strong"),xYe=o("squeezebert"),$Ye=o(" \u2014 "),VS=a("a"),kYe=o("SqueezeBertConfig"),SYe=o(" (SqueezeBERT model)"),RYe=l(),og=a("li"),Ete=a("strong"),PYe=o("swin"),BYe=o(" \u2014 "),XS=a("a"),IYe=o("SwinConfig"),NYe=o(" (Swin Transformer model)"),qYe=l(),rg=a("li"),Cte=a("strong"),jYe=o("t5"),DYe=o(" \u2014 "),zS=a("a"),GYe=o("T5Config"),OYe=o(" (T5 model)"),VYe=l(),tg=a("li"),wte=a("strong"),XYe=o("tapas"),zYe=o(" \u2014 "),WS=a("a"),WYe=o("TapasConfig"),QYe=o(" (TAPAS model)"),HYe=l(),ag=a("li"),Ate=a("strong"),UYe=o("trajectory_transformer"),JYe=o(" \u2014 "),QS=a("a"),YYe=o("TrajectoryTransformerConfig"),KYe=o(" (Trajectory Transformer model)"),ZYe=l(),ng=a("li"),Lte=a("strong"),eKe=o("transfo-xl"),oKe=o(" \u2014 "),HS=a("a"),rKe=o("TransfoXLConfig"),tKe=o(" (Transformer-XL model)"),aKe=l(),sg=a("li"),yte=a("strong"),nKe=o("trocr"),sKe=o(" \u2014 "),US=a("a"),lKe=o("TrOCRConfig"),iKe=o(" (TrOCR model)"),dKe=l(),lg=a("li"),xte=a("strong"),cKe=o("unispeech"),fKe=o(" \u2014 "),JS=a("a"),mKe=o("UniSpeechConfig"),gKe=o(" (UniSpeech model)"),hKe=l(),ig=a("li"),$te=a("strong"),pKe=o("unispeech-sat"),_Ke=o(" \u2014 "),YS=a("a"),uKe=o("UniSpeechSatConfig"),bKe=o(" (UniSpeechSat model)"),vKe=l(),dg=a("li"),kte=a("strong"),FKe=o("van"),TKe=o(" \u2014 "),KS=a("a"),MKe=o("VanConfig"),EKe=o(" (VAN model)"),CKe=l(),cg=a("li"),Ste=a("strong"),wKe=o("vilt"),AKe=o(" \u2014 "),ZS=a("a"),LKe=o("ViltConfig"),yKe=o(" (ViLT model)"),xKe=l(),fg=a("li"),Rte=a("strong"),$Ke=o("vision-encoder-decoder"),kKe=o(" \u2014 "),eR=a("a"),SKe=o("VisionEncoderDecoderConfig"),RKe=o(" (Vision Encoder decoder model)"),PKe=l(),mg=a("li"),Pte=a("strong"),BKe=o("vision-text-dual-encoder"),IKe=o(" \u2014 "),oR=a("a"),NKe=o("VisionTextDualEncoderConfig"),qKe=o(" (VisionTextDualEncoder model)"),jKe=l(),gg=a("li"),Bte=a("strong"),DKe=o("visual_bert"),GKe=o(" \u2014 "),rR=a("a"),OKe=o("VisualBertConfig"),VKe=o(" (VisualBERT model)"),XKe=l(),hg=a("li"),Ite=a("strong"),zKe=o("vit"),WKe=o(" \u2014 "),tR=a("a"),QKe=o("ViTConfig"),HKe=o(" (ViT model)"),UKe=l(),pg=a("li"),Nte=a("strong"),JKe=o("vit_mae"),YKe=o(" \u2014 "),aR=a("a"),KKe=o("ViTMAEConfig"),ZKe=o(" (ViTMAE model)"),eZe=l(),_g=a("li"),qte=a("strong"),oZe=o("wav2vec2"),rZe=o(" \u2014 "),nR=a("a"),tZe=o("Wav2Vec2Config"),aZe=o(" (Wav2Vec2 model)"),nZe=l(),ug=a("li"),jte=a("strong"),sZe=o("wav2vec2-conformer"),lZe=o(" \u2014 "),sR=a("a"),iZe=o("Wav2Vec2ConformerConfig"),dZe=o(" (Wav2Vec2-Conformer model)"),cZe=l(),bg=a("li"),Dte=a("strong"),fZe=o("wavlm"),mZe=o(" \u2014 "),lR=a("a"),gZe=o("WavLMConfig"),hZe=o(" (WavLM model)"),pZe=l(),vg=a("li"),Gte=a("strong"),_Ze=o("xglm"),uZe=o(" \u2014 "),iR=a("a"),bZe=o("XGLMConfig"),vZe=o(" (XGLM model)"),FZe=l(),Fg=a("li"),Ote=a("strong"),TZe=o("xlm"),MZe=o(" \u2014 "),dR=a("a"),EZe=o("XLMConfig"),CZe=o(" (XLM model)"),wZe=l(),Tg=a("li"),Vte=a("strong"),AZe=o("xlm-prophetnet"),LZe=o(" \u2014 "),cR=a("a"),yZe=o("XLMProphetNetConfig"),xZe=o(" (XLM-ProphetNet model)"),$Ze=l(),Mg=a("li"),Xte=a("strong"),kZe=o("xlm-roberta"),SZe=o(" \u2014 "),fR=a("a"),RZe=o("XLMRobertaConfig"),PZe=o(" (XLM-RoBERTa model)"),BZe=l(),Eg=a("li"),zte=a("strong"),IZe=o("xlm-roberta-xl"),NZe=o(" \u2014 "),mR=a("a"),qZe=o("XLMRobertaXLConfig"),jZe=o(" (XLM-RoBERTa-XL model)"),DZe=l(),Cg=a("li"),Wte=a("strong"),GZe=o("xlnet"),OZe=o(" \u2014 "),gR=a("a"),VZe=o("XLNetConfig"),XZe=o(" (XLNet model)"),zZe=l(),wg=a("li"),Qte=a("strong"),WZe=o("yolos"),QZe=o(" \u2014 "),hR=a("a"),HZe=o("YolosConfig"),UZe=o(" (YOLOS model)"),JZe=l(),Ag=a("li"),Hte=a("strong"),YZe=o("yoso"),KZe=o(" \u2014 "),pR=a("a"),ZZe=o("YosoConfig"),eeo=o(" (YOSO model)"),oeo=l(),F(Lg.$$.fragment),reo=l(),yg=a("div"),F(H6.$$.fragment),teo=l(),Ute=a("p"),aeo=o("Register a new configuration for this class."),ije=l(),Ei=a("h2"),xg=a("a"),Jte=a("span"),F(U6.$$.fragment),neo=l(),Yte=a("span"),seo=o("AutoTokenizer"),dje=l(),wo=a("div"),F(J6.$$.fragment),leo=l(),Y6=a("p"),ieo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=a("a"),deo=o("AutoTokenizer.from_pretrained()"),ceo=o(" class method."),feo=l(),K6=a("p"),meo=o("This class cannot be instantiated directly using "),Kte=a("code"),geo=o("__init__()"),heo=o(" (throws an error)."),peo=l(),Cr=a("div"),F(Z6.$$.fragment),_eo=l(),Zte=a("p"),ueo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),beo=l(),La=a("p"),veo=o("The tokenizer class to instantiate is selected based on the "),eae=a("code"),Feo=o("model_type"),Teo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),Meo=o("pretrained_model_name_or_path"),Eeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),Ceo=o("pretrained_model_name_or_path"),weo=o(":"),Aeo=l(),k=a("ul"),Sn=a("li"),tae=a("strong"),Leo=o("albert"),yeo=o(" \u2014 "),uR=a("a"),xeo=o("AlbertTokenizer"),$eo=o(" or "),bR=a("a"),keo=o("AlbertTokenizerFast"),Seo=o(" (ALBERT model)"),Reo=l(),Rn=a("li"),aae=a("strong"),Peo=o("bart"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("BartTokenizer"),Neo=o(" or "),FR=a("a"),qeo=o("BartTokenizerFast"),jeo=o(" (BART model)"),Deo=l(),Pn=a("li"),nae=a("strong"),Geo=o("barthez"),Oeo=o(" \u2014 "),TR=a("a"),Veo=o("BarthezTokenizer"),Xeo=o(" or "),MR=a("a"),zeo=o("BarthezTokenizerFast"),Weo=o(" (BARThez model)"),Qeo=l(),$g=a("li"),sae=a("strong"),Heo=o("bartpho"),Ueo=o(" \u2014 "),ER=a("a"),Jeo=o("BartphoTokenizer"),Yeo=o(" (BARTpho model)"),Keo=l(),Bn=a("li"),lae=a("strong"),Zeo=o("bert"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("BertTokenizer"),roo=o(" or "),wR=a("a"),too=o("BertTokenizerFast"),aoo=o(" (BERT model)"),noo=l(),kg=a("li"),iae=a("strong"),soo=o("bert-generation"),loo=o(" \u2014 "),AR=a("a"),ioo=o("BertGenerationTokenizer"),doo=o(" (Bert Generation model)"),coo=l(),Sg=a("li"),dae=a("strong"),foo=o("bert-japanese"),moo=o(" \u2014 "),LR=a("a"),goo=o("BertJapaneseTokenizer"),hoo=o(" (BertJapanese model)"),poo=l(),Rg=a("li"),cae=a("strong"),_oo=o("bertweet"),uoo=o(" \u2014 "),yR=a("a"),boo=o("BertweetTokenizer"),voo=o(" (BERTweet model)"),Foo=l(),In=a("li"),fae=a("strong"),Too=o("big_bird"),Moo=o(" \u2014 "),xR=a("a"),Eoo=o("BigBirdTokenizer"),Coo=o(" or "),$R=a("a"),woo=o("BigBirdTokenizerFast"),Aoo=o(" (BigBird model)"),Loo=l(),Nn=a("li"),mae=a("strong"),yoo=o("bigbird_pegasus"),xoo=o(" \u2014 "),kR=a("a"),$oo=o("PegasusTokenizer"),koo=o(" or "),SR=a("a"),Soo=o("PegasusTokenizerFast"),Roo=o(" (BigBird-Pegasus model)"),Poo=l(),qn=a("li"),gae=a("strong"),Boo=o("blenderbot"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("BlenderbotTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("BlenderbotTokenizerFast"),Doo=o(" (Blenderbot model)"),Goo=l(),Pg=a("li"),hae=a("strong"),Ooo=o("blenderbot-small"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("BlenderbotSmallTokenizer"),zoo=o(" (BlenderbotSmall model)"),Woo=l(),Bg=a("li"),pae=a("strong"),Qoo=o("byt5"),Hoo=o(" \u2014 "),IR=a("a"),Uoo=o("ByT5Tokenizer"),Joo=o(" (ByT5 model)"),Yoo=l(),jn=a("li"),_ae=a("strong"),Koo=o("camembert"),Zoo=o(" \u2014 "),NR=a("a"),ero=o("CamembertTokenizer"),oro=o(" or "),qR=a("a"),rro=o("CamembertTokenizerFast"),tro=o(" (CamemBERT model)"),aro=l(),Ig=a("li"),uae=a("strong"),nro=o("canine"),sro=o(" \u2014 "),jR=a("a"),lro=o("CanineTokenizer"),iro=o(" (CANINE model)"),dro=l(),Dn=a("li"),bae=a("strong"),cro=o("clip"),fro=o(" \u2014 "),DR=a("a"),mro=o("CLIPTokenizer"),gro=o(" or "),GR=a("a"),hro=o("CLIPTokenizerFast"),pro=o(" (CLIP model)"),_ro=l(),Gn=a("li"),vae=a("strong"),uro=o("convbert"),bro=o(" \u2014 "),OR=a("a"),vro=o("ConvBertTokenizer"),Fro=o(" or "),VR=a("a"),Tro=o("ConvBertTokenizerFast"),Mro=o(" (ConvBERT model)"),Ero=l(),On=a("li"),Fae=a("strong"),Cro=o("cpm"),wro=o(" \u2014 "),XR=a("a"),Aro=o("CpmTokenizer"),Lro=o(" or "),zR=a("a"),yro=o("CpmTokenizerFast"),xro=o(" (CPM model)"),$ro=l(),Ng=a("li"),Tae=a("strong"),kro=o("ctrl"),Sro=o(" \u2014 "),WR=a("a"),Rro=o("CTRLTokenizer"),Pro=o(" (CTRL model)"),Bro=l(),Vn=a("li"),Mae=a("strong"),Iro=o("data2vec-text"),Nro=o(" \u2014 "),QR=a("a"),qro=o("RobertaTokenizer"),jro=o(" or "),HR=a("a"),Dro=o("RobertaTokenizerFast"),Gro=o(" (Data2VecText model)"),Oro=l(),Xn=a("li"),Eae=a("strong"),Vro=o("deberta"),Xro=o(" \u2014 "),UR=a("a"),zro=o("DebertaTokenizer"),Wro=o(" or "),JR=a("a"),Qro=o("DebertaTokenizerFast"),Hro=o(" (DeBERTa model)"),Uro=l(),zn=a("li"),Cae=a("strong"),Jro=o("deberta-v2"),Yro=o(" \u2014 "),YR=a("a"),Kro=o("DebertaV2Tokenizer"),Zro=o(" or "),KR=a("a"),eto=o("DebertaV2TokenizerFast"),oto=o(" (DeBERTa-v2 model)"),rto=l(),Wn=a("li"),wae=a("strong"),tto=o("distilbert"),ato=o(" \u2014 "),ZR=a("a"),nto=o("DistilBertTokenizer"),sto=o(" or "),eP=a("a"),lto=o("DistilBertTokenizerFast"),ito=o(" (DistilBERT model)"),dto=l(),Qn=a("li"),Aae=a("strong"),cto=o("dpr"),fto=o(" \u2014 "),oP=a("a"),mto=o("DPRQuestionEncoderTokenizer"),gto=o(" or "),rP=a("a"),hto=o("DPRQuestionEncoderTokenizerFast"),pto=o(" (DPR model)"),_to=l(),Hn=a("li"),Lae=a("strong"),uto=o("electra"),bto=o(" \u2014 "),tP=a("a"),vto=o("ElectraTokenizer"),Fto=o(" or "),aP=a("a"),Tto=o("ElectraTokenizerFast"),Mto=o(" (ELECTRA model)"),Eto=l(),qg=a("li"),yae=a("strong"),Cto=o("flaubert"),wto=o(" \u2014 "),nP=a("a"),Ato=o("FlaubertTokenizer"),Lto=o(" (FlauBERT model)"),yto=l(),Un=a("li"),xae=a("strong"),xto=o("fnet"),$to=o(" \u2014 "),sP=a("a"),kto=o("FNetTokenizer"),Sto=o(" or "),lP=a("a"),Rto=o("FNetTokenizerFast"),Pto=o(" (FNet model)"),Bto=l(),jg=a("li"),$ae=a("strong"),Ito=o("fsmt"),Nto=o(" \u2014 "),iP=a("a"),qto=o("FSMTTokenizer"),jto=o(" (FairSeq Machine-Translation model)"),Dto=l(),Jn=a("li"),kae=a("strong"),Gto=o("funnel"),Oto=o(" \u2014 "),dP=a("a"),Vto=o("FunnelTokenizer"),Xto=o(" or "),cP=a("a"),zto=o("FunnelTokenizerFast"),Wto=o(" (Funnel Transformer model)"),Qto=l(),Yn=a("li"),Sae=a("strong"),Hto=o("gpt2"),Uto=o(" \u2014 "),fP=a("a"),Jto=o("GPT2Tokenizer"),Yto=o(" or "),mP=a("a"),Kto=o("GPT2TokenizerFast"),Zto=o(" (OpenAI GPT-2 model)"),eao=l(),Kn=a("li"),Rae=a("strong"),oao=o("gpt_neo"),rao=o(" \u2014 "),gP=a("a"),tao=o("GPT2Tokenizer"),aao=o(" or "),hP=a("a"),nao=o("GPT2TokenizerFast"),sao=o(" (GPT Neo model)"),lao=l(),Dg=a("li"),Pae=a("strong"),iao=o("gpt_neox"),dao=o(" \u2014 "),pP=a("a"),cao=o("GPTNeoXTokenizerFast"),fao=o(" (GPT NeoX model)"),mao=l(),Zn=a("li"),Bae=a("strong"),gao=o("gptj"),hao=o(" \u2014 "),_P=a("a"),pao=o("GPT2Tokenizer"),_ao=o(" or "),uP=a("a"),uao=o("GPT2TokenizerFast"),bao=o(" (GPT-J model)"),vao=l(),es=a("li"),Iae=a("strong"),Fao=o("herbert"),Tao=o(" \u2014 "),bP=a("a"),Mao=o("HerbertTokenizer"),Eao=o(" or "),vP=a("a"),Cao=o("HerbertTokenizerFast"),wao=o(" (HerBERT model)"),Aao=l(),Gg=a("li"),Nae=a("strong"),Lao=o("hubert"),yao=o(" \u2014 "),FP=a("a"),xao=o("Wav2Vec2CTCTokenizer"),$ao=o(" (Hubert model)"),kao=l(),os=a("li"),qae=a("strong"),Sao=o("ibert"),Rao=o(" \u2014 "),TP=a("a"),Pao=o("RobertaTokenizer"),Bao=o(" or "),MP=a("a"),Iao=o("RobertaTokenizerFast"),Nao=o(" (I-BERT model)"),qao=l(),rs=a("li"),jae=a("strong"),jao=o("layoutlm"),Dao=o(" \u2014 "),EP=a("a"),Gao=o("LayoutLMTokenizer"),Oao=o(" or "),CP=a("a"),Vao=o("LayoutLMTokenizerFast"),Xao=o(" (LayoutLM model)"),zao=l(),ts=a("li"),Dae=a("strong"),Wao=o("layoutlmv2"),Qao=o(" \u2014 "),wP=a("a"),Hao=o("LayoutLMv2Tokenizer"),Uao=o(" or "),AP=a("a"),Jao=o("LayoutLMv2TokenizerFast"),Yao=o(" (LayoutLMv2 model)"),Kao=l(),as=a("li"),Gae=a("strong"),Zao=o("layoutlmv3"),eno=o(" \u2014 "),LP=a("a"),ono=o("LayoutLMv3Tokenizer"),rno=o(" or "),yP=a("a"),tno=o("LayoutLMv3TokenizerFast"),ano=o(" (LayoutLMv3 model)"),nno=l(),ns=a("li"),Oae=a("strong"),sno=o("layoutxlm"),lno=o(" \u2014 "),xP=a("a"),ino=o("LayoutXLMTokenizer"),dno=o(" or "),$P=a("a"),cno=o("LayoutXLMTokenizerFast"),fno=o(" (LayoutXLM model)"),mno=l(),ss=a("li"),Vae=a("strong"),gno=o("led"),hno=o(" \u2014 "),kP=a("a"),pno=o("LEDTokenizer"),_no=o(" or "),SP=a("a"),uno=o("LEDTokenizerFast"),bno=o(" (LED model)"),vno=l(),ls=a("li"),Xae=a("strong"),Fno=o("longformer"),Tno=o(" \u2014 "),RP=a("a"),Mno=o("LongformerTokenizer"),Eno=o(" or "),PP=a("a"),Cno=o("LongformerTokenizerFast"),wno=o(" (Longformer model)"),Ano=l(),Og=a("li"),zae=a("strong"),Lno=o("luke"),yno=o(" \u2014 "),BP=a("a"),xno=o("LukeTokenizer"),$no=o(" (LUKE model)"),kno=l(),is=a("li"),Wae=a("strong"),Sno=o("lxmert"),Rno=o(" \u2014 "),IP=a("a"),Pno=o("LxmertTokenizer"),Bno=o(" or "),NP=a("a"),Ino=o("LxmertTokenizerFast"),Nno=o(" (LXMERT model)"),qno=l(),Vg=a("li"),Qae=a("strong"),jno=o("m2m_100"),Dno=o(" \u2014 "),qP=a("a"),Gno=o("M2M100Tokenizer"),Ono=o(" (M2M100 model)"),Vno=l(),Xg=a("li"),Hae=a("strong"),Xno=o("marian"),zno=o(" \u2014 "),jP=a("a"),Wno=o("MarianTokenizer"),Qno=o(" (Marian model)"),Hno=l(),ds=a("li"),Uae=a("strong"),Uno=o("mbart"),Jno=o(" \u2014 "),DP=a("a"),Yno=o("MBartTokenizer"),Kno=o(" or "),GP=a("a"),Zno=o("MBartTokenizerFast"),eso=o(" (mBART model)"),oso=l(),cs=a("li"),Jae=a("strong"),rso=o("mbart50"),tso=o(" \u2014 "),OP=a("a"),aso=o("MBart50Tokenizer"),nso=o(" or "),VP=a("a"),sso=o("MBart50TokenizerFast"),lso=o(" (mBART-50 model)"),iso=l(),fs=a("li"),Yae=a("strong"),dso=o("megatron-bert"),cso=o(" \u2014 "),XP=a("a"),fso=o("BertTokenizer"),mso=o(" or "),zP=a("a"),gso=o("BertTokenizerFast"),hso=o(" (Megatron-BERT model)"),pso=l(),zg=a("li"),Kae=a("strong"),_so=o("mluke"),uso=o(" \u2014 "),WP=a("a"),bso=o("MLukeTokenizer"),vso=o(" (mLUKE model)"),Fso=l(),ms=a("li"),Zae=a("strong"),Tso=o("mobilebert"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("MobileBertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("MobileBertTokenizerFast"),Aso=o(" (MobileBERT model)"),Lso=l(),gs=a("li"),ene=a("strong"),yso=o("mpnet"),xso=o(" \u2014 "),UP=a("a"),$so=o("MPNetTokenizer"),kso=o(" or "),JP=a("a"),Sso=o("MPNetTokenizerFast"),Rso=o(" (MPNet model)"),Pso=l(),hs=a("li"),one=a("strong"),Bso=o("mt5"),Iso=o(" \u2014 "),YP=a("a"),Nso=o("MT5Tokenizer"),qso=o(" or "),KP=a("a"),jso=o("MT5TokenizerFast"),Dso=o(" (MT5 model)"),Gso=l(),ps=a("li"),rne=a("strong"),Oso=o("nystromformer"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("AlbertTokenizer"),zso=o(" or "),eB=a("a"),Wso=o("AlbertTokenizerFast"),Qso=o(" (Nystr\xF6mformer model)"),Hso=l(),_s=a("li"),tne=a("strong"),Uso=o("openai-gpt"),Jso=o(" \u2014 "),oB=a("a"),Yso=o("OpenAIGPTTokenizer"),Kso=o(" or "),rB=a("a"),Zso=o("OpenAIGPTTokenizerFast"),elo=o(" (OpenAI GPT model)"),olo=l(),Wg=a("li"),ane=a("strong"),rlo=o("opt"),tlo=o(" \u2014 "),tB=a("a"),alo=o("GPT2Tokenizer"),nlo=o(" (OPT model)"),slo=l(),us=a("li"),nne=a("strong"),llo=o("pegasus"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("PegasusTokenizer"),clo=o(" or "),nB=a("a"),flo=o("PegasusTokenizerFast"),mlo=o(" (Pegasus model)"),glo=l(),Qg=a("li"),sne=a("strong"),hlo=o("perceiver"),plo=o(" \u2014 "),sB=a("a"),_lo=o("PerceiverTokenizer"),ulo=o(" (Perceiver model)"),blo=l(),Hg=a("li"),lne=a("strong"),vlo=o("phobert"),Flo=o(" \u2014 "),lB=a("a"),Tlo=o("PhobertTokenizer"),Mlo=o(" (PhoBERT model)"),Elo=l(),Ug=a("li"),ine=a("strong"),Clo=o("plbart"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("PLBartTokenizer"),Llo=o(" (PLBart model)"),ylo=l(),Jg=a("li"),dne=a("strong"),xlo=o("prophetnet"),$lo=o(" \u2014 "),dB=a("a"),klo=o("ProphetNetTokenizer"),Slo=o(" (ProphetNet model)"),Rlo=l(),bs=a("li"),cne=a("strong"),Plo=o("qdqbert"),Blo=o(" \u2014 "),cB=a("a"),Ilo=o("BertTokenizer"),Nlo=o(" or "),fB=a("a"),qlo=o("BertTokenizerFast"),jlo=o(" (QDQBert model)"),Dlo=l(),Yg=a("li"),fne=a("strong"),Glo=o("rag"),Olo=o(" \u2014 "),mB=a("a"),Vlo=o("RagTokenizer"),Xlo=o(" (RAG model)"),zlo=l(),vs=a("li"),mne=a("strong"),Wlo=o("realm"),Qlo=o(" \u2014 "),gB=a("a"),Hlo=o("RealmTokenizer"),Ulo=o(" or "),hB=a("a"),Jlo=o("RealmTokenizerFast"),Ylo=o(" (REALM model)"),Klo=l(),Fs=a("li"),gne=a("strong"),Zlo=o("reformer"),eio=o(" \u2014 "),pB=a("a"),oio=o("ReformerTokenizer"),rio=o(" or "),_B=a("a"),tio=o("ReformerTokenizerFast"),aio=o(" (Reformer model)"),nio=l(),Ts=a("li"),hne=a("strong"),sio=o("rembert"),lio=o(" \u2014 "),uB=a("a"),iio=o("RemBertTokenizer"),dio=o(" or "),bB=a("a"),cio=o("RemBertTokenizerFast"),fio=o(" (RemBERT model)"),mio=l(),Ms=a("li"),pne=a("strong"),gio=o("retribert"),hio=o(" \u2014 "),vB=a("a"),pio=o("RetriBertTokenizer"),_io=o(" or "),FB=a("a"),uio=o("RetriBertTokenizerFast"),bio=o(" (RetriBERT model)"),vio=l(),Es=a("li"),_ne=a("strong"),Fio=o("roberta"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("RobertaTokenizer"),Eio=o(" or "),MB=a("a"),Cio=o("RobertaTokenizerFast"),wio=o(" (RoBERTa model)"),Aio=l(),Cs=a("li"),une=a("strong"),Lio=o("roformer"),yio=o(" \u2014 "),EB=a("a"),xio=o("RoFormerTokenizer"),$io=o(" or "),CB=a("a"),kio=o("RoFormerTokenizerFast"),Sio=o(" (RoFormer model)"),Rio=l(),Kg=a("li"),bne=a("strong"),Pio=o("speech_to_text"),Bio=o(" \u2014 "),wB=a("a"),Iio=o("Speech2TextTokenizer"),Nio=o(" (Speech2Text model)"),qio=l(),Zg=a("li"),vne=a("strong"),jio=o("speech_to_text_2"),Dio=o(" \u2014 "),AB=a("a"),Gio=o("Speech2Text2Tokenizer"),Oio=o(" (Speech2Text2 model)"),Vio=l(),ws=a("li"),Fne=a("strong"),Xio=o("splinter"),zio=o(" \u2014 "),LB=a("a"),Wio=o("SplinterTokenizer"),Qio=o(" or "),yB=a("a"),Hio=o("SplinterTokenizerFast"),Uio=o(" (Splinter model)"),Jio=l(),As=a("li"),Tne=a("strong"),Yio=o("squeezebert"),Kio=o(" \u2014 "),xB=a("a"),Zio=o("SqueezeBertTokenizer"),edo=o(" or "),$B=a("a"),odo=o("SqueezeBertTokenizerFast"),rdo=o(" (SqueezeBERT model)"),tdo=l(),Ls=a("li"),Mne=a("strong"),ado=o("t5"),ndo=o(" \u2014 "),kB=a("a"),sdo=o("T5Tokenizer"),ldo=o(" or "),SB=a("a"),ido=o("T5TokenizerFast"),ddo=o(" (T5 model)"),cdo=l(),eh=a("li"),Ene=a("strong"),fdo=o("tapas"),mdo=o(" \u2014 "),RB=a("a"),gdo=o("TapasTokenizer"),hdo=o(" (TAPAS model)"),pdo=l(),oh=a("li"),Cne=a("strong"),_do=o("tapex"),udo=o(" \u2014 "),PB=a("a"),bdo=o("TapexTokenizer"),vdo=o(" (TAPEX model)"),Fdo=l(),rh=a("li"),wne=a("strong"),Tdo=o("transfo-xl"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("TransfoXLTokenizer"),Cdo=o(" (Transformer-XL model)"),wdo=l(),ys=a("li"),Ane=a("strong"),Ado=o("visual_bert"),Ldo=o(" \u2014 "),IB=a("a"),ydo=o("BertTokenizer"),xdo=o(" or "),NB=a("a"),$do=o("BertTokenizerFast"),kdo=o(" (VisualBERT model)"),Sdo=l(),th=a("li"),Lne=a("strong"),Rdo=o("wav2vec2"),Pdo=o(" \u2014 "),qB=a("a"),Bdo=o("Wav2Vec2CTCTokenizer"),Ido=o(" (Wav2Vec2 model)"),Ndo=l(),ah=a("li"),yne=a("strong"),qdo=o("wav2vec2-conformer"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("Wav2Vec2CTCTokenizer"),Gdo=o(" (Wav2Vec2-Conformer model)"),Odo=l(),nh=a("li"),xne=a("strong"),Vdo=o("wav2vec2_phoneme"),Xdo=o(" \u2014 "),DB=a("a"),zdo=o("Wav2Vec2PhonemeCTCTokenizer"),Wdo=o(" (Wav2Vec2Phoneme model)"),Qdo=l(),xs=a("li"),$ne=a("strong"),Hdo=o("xglm"),Udo=o(" \u2014 "),GB=a("a"),Jdo=o("XGLMTokenizer"),Ydo=o(" or "),OB=a("a"),Kdo=o("XGLMTokenizerFast"),Zdo=o(" (XGLM model)"),eco=l(),sh=a("li"),kne=a("strong"),oco=o("xlm"),rco=o(" \u2014 "),VB=a("a"),tco=o("XLMTokenizer"),aco=o(" (XLM model)"),nco=l(),lh=a("li"),Sne=a("strong"),sco=o("xlm-prophetnet"),lco=o(" \u2014 "),XB=a("a"),ico=o("XLMProphetNetTokenizer"),dco=o(" (XLM-ProphetNet model)"),cco=l(),$s=a("li"),Rne=a("strong"),fco=o("xlm-roberta"),mco=o(" \u2014 "),zB=a("a"),gco=o("XLMRobertaTokenizer"),hco=o(" or "),WB=a("a"),pco=o("XLMRobertaTokenizerFast"),_co=o(" (XLM-RoBERTa model)"),uco=l(),ks=a("li"),Pne=a("strong"),bco=o("xlm-roberta-xl"),vco=o(" \u2014 "),QB=a("a"),Fco=o("RobertaTokenizer"),Tco=o(" or "),HB=a("a"),Mco=o("RobertaTokenizerFast"),Eco=o(" (XLM-RoBERTa-XL model)"),Cco=l(),Ss=a("li"),Bne=a("strong"),wco=o("xlnet"),Aco=o(" \u2014 "),UB=a("a"),Lco=o("XLNetTokenizer"),yco=o(" or "),JB=a("a"),xco=o("XLNetTokenizerFast"),$co=o(" (XLNet model)"),kco=l(),Rs=a("li"),Ine=a("strong"),Sco=o("yoso"),Rco=o(" \u2014 "),YB=a("a"),Pco=o("AlbertTokenizer"),Bco=o(" or "),KB=a("a"),Ico=o("AlbertTokenizerFast"),Nco=o(" (YOSO model)"),qco=l(),F(ih.$$.fragment),jco=l(),dh=a("div"),F(eL.$$.fragment),Dco=l(),Nne=a("p"),Gco=o("Register a new tokenizer in this mapping."),cje=l(),Ci=a("h2"),ch=a("a"),qne=a("span"),F(oL.$$.fragment),Oco=l(),jne=a("span"),Vco=o("AutoFeatureExtractor"),fje=l(),Ao=a("div"),F(rL.$$.fragment),Xco=l(),tL=a("p"),zco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZB=a("a"),Wco=o("AutoFeatureExtractor.from_pretrained()"),Qco=o(" class method."),Hco=l(),aL=a("p"),Uco=o("This class cannot be instantiated directly using "),Dne=a("code"),Jco=o("__init__()"),Yco=o(" (throws an error)."),Kco=l(),He=a("div"),F(nL.$$.fragment),Zco=l(),Gne=a("p"),efo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ofo=l(),ya=a("p"),rfo=o("The feature extractor class to instantiate is selected based on the "),One=a("code"),tfo=o("model_type"),afo=o(` property of the config object
(either passed as an argument or loaded from `),Vne=a("code"),nfo=o("pretrained_model_name_or_path"),sfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xne=a("code"),lfo=o("pretrained_model_name_or_path"),ifo=o(":"),dfo=l(),Y=a("ul"),fh=a("li"),zne=a("strong"),cfo=o("beit"),ffo=o(" \u2014 "),eI=a("a"),mfo=o("BeitFeatureExtractor"),gfo=o(" (BEiT model)"),hfo=l(),mh=a("li"),Wne=a("strong"),pfo=o("clip"),_fo=o(" \u2014 "),oI=a("a"),ufo=o("CLIPFeatureExtractor"),bfo=o(" (CLIP model)"),vfo=l(),gh=a("li"),Qne=a("strong"),Ffo=o("convnext"),Tfo=o(" \u2014 "),rI=a("a"),Mfo=o("ConvNextFeatureExtractor"),Efo=o(" (ConvNeXT model)"),Cfo=l(),hh=a("li"),Hne=a("strong"),wfo=o("cvt"),Afo=o(" \u2014 "),tI=a("a"),Lfo=o("ConvNextFeatureExtractor"),yfo=o(" (CvT model)"),xfo=l(),ph=a("li"),Une=a("strong"),$fo=o("data2vec-audio"),kfo=o(" \u2014 "),aI=a("a"),Sfo=o("Wav2Vec2FeatureExtractor"),Rfo=o(" (Data2VecAudio model)"),Pfo=l(),_h=a("li"),Jne=a("strong"),Bfo=o("data2vec-vision"),Ifo=o(" \u2014 "),nI=a("a"),Nfo=o("BeitFeatureExtractor"),qfo=o(" (Data2VecVision model)"),jfo=l(),uh=a("li"),Yne=a("strong"),Dfo=o("deit"),Gfo=o(" \u2014 "),sI=a("a"),Ofo=o("DeiTFeatureExtractor"),Vfo=o(" (DeiT model)"),Xfo=l(),bh=a("li"),Kne=a("strong"),zfo=o("detr"),Wfo=o(" \u2014 "),lI=a("a"),Qfo=o("DetrFeatureExtractor"),Hfo=o(" (DETR model)"),Ufo=l(),vh=a("li"),Zne=a("strong"),Jfo=o("dpt"),Yfo=o(" \u2014 "),iI=a("a"),Kfo=o("DPTFeatureExtractor"),Zfo=o(" (DPT model)"),emo=l(),Fh=a("li"),ese=a("strong"),omo=o("flava"),rmo=o(" \u2014 "),dI=a("a"),tmo=o("FlavaFeatureExtractor"),amo=o(" (FLAVA model)"),nmo=l(),Th=a("li"),ose=a("strong"),smo=o("glpn"),lmo=o(" \u2014 "),cI=a("a"),imo=o("GLPNFeatureExtractor"),dmo=o(" (GLPN model)"),cmo=l(),Mh=a("li"),rse=a("strong"),fmo=o("hubert"),mmo=o(" \u2014 "),fI=a("a"),gmo=o("Wav2Vec2FeatureExtractor"),hmo=o(" (Hubert model)"),pmo=l(),Eh=a("li"),tse=a("strong"),_mo=o("imagegpt"),umo=o(" \u2014 "),mI=a("a"),bmo=o("ImageGPTFeatureExtractor"),vmo=o(" (ImageGPT model)"),Fmo=l(),Ch=a("li"),ase=a("strong"),Tmo=o("layoutlmv2"),Mmo=o(" \u2014 "),gI=a("a"),Emo=o("LayoutLMv2FeatureExtractor"),Cmo=o(" (LayoutLMv2 model)"),wmo=l(),wh=a("li"),nse=a("strong"),Amo=o("layoutlmv3"),Lmo=o(" \u2014 "),hI=a("a"),ymo=o("LayoutLMv3FeatureExtractor"),xmo=o(" (LayoutLMv3 model)"),$mo=l(),Ah=a("li"),sse=a("strong"),kmo=o("levit"),Smo=o(" \u2014 "),pI=a("a"),Rmo=o("LevitFeatureExtractor"),Pmo=o(" (LeViT model)"),Bmo=l(),Lh=a("li"),lse=a("strong"),Imo=o("maskformer"),Nmo=o(" \u2014 "),_I=a("a"),qmo=o("MaskFormerFeatureExtractor"),jmo=o(" (MaskFormer model)"),Dmo=l(),yh=a("li"),ise=a("strong"),Gmo=o("mobilevit"),Omo=o(" \u2014 "),uI=a("a"),Vmo=o("MobileViTFeatureExtractor"),Xmo=o(" (MobileViT model)"),zmo=l(),xh=a("li"),dse=a("strong"),Wmo=o("perceiver"),Qmo=o(" \u2014 "),bI=a("a"),Hmo=o("PerceiverFeatureExtractor"),Umo=o(" (Perceiver model)"),Jmo=l(),$h=a("li"),cse=a("strong"),Ymo=o("poolformer"),Kmo=o(" \u2014 "),vI=a("a"),Zmo=o("PoolFormerFeatureExtractor"),ego=o(" (PoolFormer model)"),ogo=l(),kh=a("li"),fse=a("strong"),rgo=o("regnet"),tgo=o(" \u2014 "),FI=a("a"),ago=o("ConvNextFeatureExtractor"),ngo=o(" (RegNet model)"),sgo=l(),Sh=a("li"),mse=a("strong"),lgo=o("resnet"),igo=o(" \u2014 "),TI=a("a"),dgo=o("ConvNextFeatureExtractor"),cgo=o(" (ResNet model)"),fgo=l(),Rh=a("li"),gse=a("strong"),mgo=o("segformer"),ggo=o(" \u2014 "),MI=a("a"),hgo=o("SegformerFeatureExtractor"),pgo=o(" (SegFormer model)"),_go=l(),Ph=a("li"),hse=a("strong"),ugo=o("speech_to_text"),bgo=o(" \u2014 "),EI=a("a"),vgo=o("Speech2TextFeatureExtractor"),Fgo=o(" (Speech2Text model)"),Tgo=l(),Bh=a("li"),pse=a("strong"),Mgo=o("swin"),Ego=o(" \u2014 "),CI=a("a"),Cgo=o("ViTFeatureExtractor"),wgo=o(" (Swin Transformer model)"),Ago=l(),Ih=a("li"),_se=a("strong"),Lgo=o("van"),ygo=o(" \u2014 "),wI=a("a"),xgo=o("ConvNextFeatureExtractor"),$go=o(" (VAN model)"),kgo=l(),Nh=a("li"),use=a("strong"),Sgo=o("vit"),Rgo=o(" \u2014 "),AI=a("a"),Pgo=o("ViTFeatureExtractor"),Bgo=o(" (ViT model)"),Igo=l(),qh=a("li"),bse=a("strong"),Ngo=o("vit_mae"),qgo=o(" \u2014 "),LI=a("a"),jgo=o("ViTFeatureExtractor"),Dgo=o(" (ViTMAE model)"),Ggo=l(),jh=a("li"),vse=a("strong"),Ogo=o("wav2vec2"),Vgo=o(" \u2014 "),yI=a("a"),Xgo=o("Wav2Vec2FeatureExtractor"),zgo=o(" (Wav2Vec2 model)"),Wgo=l(),Dh=a("li"),Fse=a("strong"),Qgo=o("wav2vec2-conformer"),Hgo=o(" \u2014 "),xI=a("a"),Ugo=o("Wav2Vec2FeatureExtractor"),Jgo=o(" (Wav2Vec2-Conformer model)"),Ygo=l(),Gh=a("li"),Tse=a("strong"),Kgo=o("yolos"),Zgo=o(" \u2014 "),$I=a("a"),eho=o("YolosFeatureExtractor"),oho=o(" (YOLOS model)"),rho=l(),F(Oh.$$.fragment),tho=l(),F(Vh.$$.fragment),aho=l(),Xh=a("div"),F(sL.$$.fragment),nho=l(),Mse=a("p"),sho=o("Register a new feature extractor for this class."),mje=l(),wi=a("h2"),zh=a("a"),Ese=a("span"),F(lL.$$.fragment),lho=l(),Cse=a("span"),iho=o("AutoProcessor"),gje=l(),Lo=a("div"),F(iL.$$.fragment),dho=l(),dL=a("p"),cho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kI=a("a"),fho=o("AutoProcessor.from_pretrained()"),mho=o(" class method."),gho=l(),cL=a("p"),hho=o("This class cannot be instantiated directly using "),wse=a("code"),pho=o("__init__()"),_ho=o(" (throws an error)."),uho=l(),Ue=a("div"),F(fL.$$.fragment),bho=l(),Ase=a("p"),vho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fho=l(),Ai=a("p"),Tho=o("The processor class to instantiate is selected based on the "),Lse=a("code"),Mho=o("model_type"),Eho=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),Cho=o("pretrained_model_name_or_path"),who=o(" if possible):"),Aho=l(),he=a("ul"),Wh=a("li"),xse=a("strong"),Lho=o("clip"),yho=o(" \u2014 "),SI=a("a"),xho=o("CLIPProcessor"),$ho=o(" (CLIP model)"),kho=l(),Qh=a("li"),$se=a("strong"),Sho=o("flava"),Rho=o(" \u2014 "),kse=a("code"),Pho=o("FLAVAProcessor"),Bho=o(" (FLAVA model)"),Iho=l(),Hh=a("li"),Sse=a("strong"),Nho=o("layoutlmv2"),qho=o(" \u2014 "),RI=a("a"),jho=o("LayoutLMv2Processor"),Dho=o(" (LayoutLMv2 model)"),Gho=l(),Uh=a("li"),Rse=a("strong"),Oho=o("layoutlmv3"),Vho=o(" \u2014 "),PI=a("a"),Xho=o("LayoutLMv3Processor"),zho=o(" (LayoutLMv3 model)"),Who=l(),Jh=a("li"),Pse=a("strong"),Qho=o("layoutxlm"),Hho=o(" \u2014 "),BI=a("a"),Uho=o("LayoutXLMProcessor"),Jho=o(" (LayoutXLM model)"),Yho=l(),Yh=a("li"),Bse=a("strong"),Kho=o("sew"),Zho=o(" \u2014 "),II=a("a"),epo=o("Wav2Vec2Processor"),opo=o(" (SEW model)"),rpo=l(),Kh=a("li"),Ise=a("strong"),tpo=o("sew-d"),apo=o(" \u2014 "),NI=a("a"),npo=o("Wav2Vec2Processor"),spo=o(" (SEW-D model)"),lpo=l(),Zh=a("li"),Nse=a("strong"),ipo=o("speech_to_text"),dpo=o(" \u2014 "),qI=a("a"),cpo=o("Speech2TextProcessor"),fpo=o(" (Speech2Text model)"),mpo=l(),ep=a("li"),qse=a("strong"),gpo=o("speech_to_text_2"),hpo=o(" \u2014 "),jI=a("a"),ppo=o("Speech2Text2Processor"),_po=o(" (Speech2Text2 model)"),upo=l(),op=a("li"),jse=a("strong"),bpo=o("trocr"),vpo=o(" \u2014 "),DI=a("a"),Fpo=o("TrOCRProcessor"),Tpo=o(" (TrOCR model)"),Mpo=l(),rp=a("li"),Dse=a("strong"),Epo=o("unispeech"),Cpo=o(" \u2014 "),GI=a("a"),wpo=o("Wav2Vec2Processor"),Apo=o(" (UniSpeech model)"),Lpo=l(),tp=a("li"),Gse=a("strong"),ypo=o("unispeech-sat"),xpo=o(" \u2014 "),OI=a("a"),$po=o("Wav2Vec2Processor"),kpo=o(" (UniSpeechSat model)"),Spo=l(),ap=a("li"),Ose=a("strong"),Rpo=o("vilt"),Ppo=o(" \u2014 "),VI=a("a"),Bpo=o("ViltProcessor"),Ipo=o(" (ViLT model)"),Npo=l(),np=a("li"),Vse=a("strong"),qpo=o("vision-text-dual-encoder"),jpo=o(" \u2014 "),XI=a("a"),Dpo=o("VisionTextDualEncoderProcessor"),Gpo=o(" (VisionTextDualEncoder model)"),Opo=l(),sp=a("li"),Xse=a("strong"),Vpo=o("wav2vec2"),Xpo=o(" \u2014 "),zI=a("a"),zpo=o("Wav2Vec2Processor"),Wpo=o(" (Wav2Vec2 model)"),Qpo=l(),lp=a("li"),zse=a("strong"),Hpo=o("wav2vec2-conformer"),Upo=o(" \u2014 "),WI=a("a"),Jpo=o("Wav2Vec2Processor"),Ypo=o(" (Wav2Vec2-Conformer model)"),Kpo=l(),ip=a("li"),Wse=a("strong"),Zpo=o("wavlm"),e_o=o(" \u2014 "),QI=a("a"),o_o=o("Wav2Vec2Processor"),r_o=o(" (WavLM model)"),t_o=l(),F(dp.$$.fragment),a_o=l(),F(cp.$$.fragment),n_o=l(),fp=a("div"),F(mL.$$.fragment),s_o=l(),Qse=a("p"),l_o=o("Register a new processor for this class."),hje=l(),Li=a("h2"),mp=a("a"),Hse=a("span"),F(gL.$$.fragment),i_o=l(),Use=a("span"),d_o=o("AutoModel"),pje=l(),yo=a("div"),F(hL.$$.fragment),c_o=l(),yi=a("p"),f_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HI=a("a"),m_o=o("from_pretrained()"),g_o=o(" class method or the "),UI=a("a"),h_o=o("from_config()"),p_o=o(` class
method.`),__o=l(),pL=a("p"),u_o=o("This class cannot be instantiated directly using "),Jse=a("code"),b_o=o("__init__()"),v_o=o(" (throws an error)."),F_o=l(),at=a("div"),F(_L.$$.fragment),T_o=l(),Yse=a("p"),M_o=o("Instantiates one of the base model classes of the library from a configuration."),E_o=l(),xi=a("p"),C_o=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),w_o=o("not"),A_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=a("a"),L_o=o("from_pretrained()"),y_o=o(" to load the model weights."),x_o=l(),F(gp.$$.fragment),$_o=l(),Je=a("div"),F(uL.$$.fragment),k_o=l(),Zse=a("p"),S_o=o("Instantiate one of the base model classes of the library from a pretrained model."),R_o=l(),xa=a("p"),P_o=o("The model class to instantiate is selected based on the "),ele=a("code"),B_o=o("model_type"),I_o=o(` property of the config object (either
passed as an argument or loaded from `),ole=a("code"),N_o=o("pretrained_model_name_or_path"),q_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=a("code"),j_o=o("pretrained_model_name_or_path"),D_o=o(":"),G_o=l(),x=a("ul"),hp=a("li"),tle=a("strong"),O_o=o("albert"),V_o=o(" \u2014 "),YI=a("a"),X_o=o("AlbertModel"),z_o=o(" (ALBERT model)"),W_o=l(),pp=a("li"),ale=a("strong"),Q_o=o("bart"),H_o=o(" \u2014 "),KI=a("a"),U_o=o("BartModel"),J_o=o(" (BART model)"),Y_o=l(),_p=a("li"),nle=a("strong"),K_o=o("beit"),Z_o=o(" \u2014 "),ZI=a("a"),euo=o("BeitModel"),ouo=o(" (BEiT model)"),ruo=l(),up=a("li"),sle=a("strong"),tuo=o("bert"),auo=o(" \u2014 "),eN=a("a"),nuo=o("BertModel"),suo=o(" (BERT model)"),luo=l(),bp=a("li"),lle=a("strong"),iuo=o("bert-generation"),duo=o(" \u2014 "),oN=a("a"),cuo=o("BertGenerationEncoder"),fuo=o(" (Bert Generation model)"),muo=l(),vp=a("li"),ile=a("strong"),guo=o("big_bird"),huo=o(" \u2014 "),rN=a("a"),puo=o("BigBirdModel"),_uo=o(" (BigBird model)"),uuo=l(),Fp=a("li"),dle=a("strong"),buo=o("bigbird_pegasus"),vuo=o(" \u2014 "),tN=a("a"),Fuo=o("BigBirdPegasusModel"),Tuo=o(" (BigBird-Pegasus model)"),Muo=l(),Tp=a("li"),cle=a("strong"),Euo=o("blenderbot"),Cuo=o(" \u2014 "),aN=a("a"),wuo=o("BlenderbotModel"),Auo=o(" (Blenderbot model)"),Luo=l(),Mp=a("li"),fle=a("strong"),yuo=o("blenderbot-small"),xuo=o(" \u2014 "),nN=a("a"),$uo=o("BlenderbotSmallModel"),kuo=o(" (BlenderbotSmall model)"),Suo=l(),Ep=a("li"),mle=a("strong"),Ruo=o("camembert"),Puo=o(" \u2014 "),sN=a("a"),Buo=o("CamembertModel"),Iuo=o(" (CamemBERT model)"),Nuo=l(),Cp=a("li"),gle=a("strong"),quo=o("canine"),juo=o(" \u2014 "),lN=a("a"),Duo=o("CanineModel"),Guo=o(" (CANINE model)"),Ouo=l(),wp=a("li"),hle=a("strong"),Vuo=o("clip"),Xuo=o(" \u2014 "),iN=a("a"),zuo=o("CLIPModel"),Wuo=o(" (CLIP model)"),Quo=l(),Ap=a("li"),ple=a("strong"),Huo=o("convbert"),Uuo=o(" \u2014 "),dN=a("a"),Juo=o("ConvBertModel"),Yuo=o(" (ConvBERT model)"),Kuo=l(),Lp=a("li"),_le=a("strong"),Zuo=o("convnext"),e1o=o(" \u2014 "),cN=a("a"),o1o=o("ConvNextModel"),r1o=o(" (ConvNeXT model)"),t1o=l(),yp=a("li"),ule=a("strong"),a1o=o("ctrl"),n1o=o(" \u2014 "),fN=a("a"),s1o=o("CTRLModel"),l1o=o(" (CTRL model)"),i1o=l(),xp=a("li"),ble=a("strong"),d1o=o("cvt"),c1o=o(" \u2014 "),mN=a("a"),f1o=o("CvtModel"),m1o=o(" (CvT model)"),g1o=l(),$p=a("li"),vle=a("strong"),h1o=o("data2vec-audio"),p1o=o(" \u2014 "),gN=a("a"),_1o=o("Data2VecAudioModel"),u1o=o(" (Data2VecAudio model)"),b1o=l(),kp=a("li"),Fle=a("strong"),v1o=o("data2vec-text"),F1o=o(" \u2014 "),hN=a("a"),T1o=o("Data2VecTextModel"),M1o=o(" (Data2VecText model)"),E1o=l(),Sp=a("li"),Tle=a("strong"),C1o=o("data2vec-vision"),w1o=o(" \u2014 "),pN=a("a"),A1o=o("Data2VecVisionModel"),L1o=o(" (Data2VecVision model)"),y1o=l(),Rp=a("li"),Mle=a("strong"),x1o=o("deberta"),$1o=o(" \u2014 "),_N=a("a"),k1o=o("DebertaModel"),S1o=o(" (DeBERTa model)"),R1o=l(),Pp=a("li"),Ele=a("strong"),P1o=o("deberta-v2"),B1o=o(" \u2014 "),uN=a("a"),I1o=o("DebertaV2Model"),N1o=o(" (DeBERTa-v2 model)"),q1o=l(),Bp=a("li"),Cle=a("strong"),j1o=o("decision_transformer"),D1o=o(" \u2014 "),bN=a("a"),G1o=o("DecisionTransformerModel"),O1o=o(" (Decision Transformer model)"),V1o=l(),Ip=a("li"),wle=a("strong"),X1o=o("deit"),z1o=o(" \u2014 "),vN=a("a"),W1o=o("DeiTModel"),Q1o=o(" (DeiT model)"),H1o=l(),Np=a("li"),Ale=a("strong"),U1o=o("detr"),J1o=o(" \u2014 "),FN=a("a"),Y1o=o("DetrModel"),K1o=o(" (DETR model)"),Z1o=l(),qp=a("li"),Lle=a("strong"),ebo=o("distilbert"),obo=o(" \u2014 "),TN=a("a"),rbo=o("DistilBertModel"),tbo=o(" (DistilBERT model)"),abo=l(),jp=a("li"),yle=a("strong"),nbo=o("dpr"),sbo=o(" \u2014 "),MN=a("a"),lbo=o("DPRQuestionEncoder"),ibo=o(" (DPR model)"),dbo=l(),Dp=a("li"),xle=a("strong"),cbo=o("dpt"),fbo=o(" \u2014 "),EN=a("a"),mbo=o("DPTModel"),gbo=o(" (DPT model)"),hbo=l(),Gp=a("li"),$le=a("strong"),pbo=o("electra"),_bo=o(" \u2014 "),CN=a("a"),ubo=o("ElectraModel"),bbo=o(" (ELECTRA model)"),vbo=l(),Op=a("li"),kle=a("strong"),Fbo=o("flaubert"),Tbo=o(" \u2014 "),wN=a("a"),Mbo=o("FlaubertModel"),Ebo=o(" (FlauBERT model)"),Cbo=l(),Vp=a("li"),Sle=a("strong"),wbo=o("flava"),Abo=o(" \u2014 "),AN=a("a"),Lbo=o("FlavaModel"),ybo=o(" (FLAVA model)"),xbo=l(),Xp=a("li"),Rle=a("strong"),$bo=o("fnet"),kbo=o(" \u2014 "),LN=a("a"),Sbo=o("FNetModel"),Rbo=o(" (FNet model)"),Pbo=l(),zp=a("li"),Ple=a("strong"),Bbo=o("fsmt"),Ibo=o(" \u2014 "),yN=a("a"),Nbo=o("FSMTModel"),qbo=o(" (FairSeq Machine-Translation model)"),jbo=l(),Ps=a("li"),Ble=a("strong"),Dbo=o("funnel"),Gbo=o(" \u2014 "),xN=a("a"),Obo=o("FunnelModel"),Vbo=o(" or "),$N=a("a"),Xbo=o("FunnelBaseModel"),zbo=o(" (Funnel Transformer model)"),Wbo=l(),Wp=a("li"),Ile=a("strong"),Qbo=o("glpn"),Hbo=o(" \u2014 "),kN=a("a"),Ubo=o("GLPNModel"),Jbo=o(" (GLPN model)"),Ybo=l(),Qp=a("li"),Nle=a("strong"),Kbo=o("gpt2"),Zbo=o(" \u2014 "),SN=a("a"),e2o=o("GPT2Model"),o2o=o(" (OpenAI GPT-2 model)"),r2o=l(),Hp=a("li"),qle=a("strong"),t2o=o("gpt_neo"),a2o=o(" \u2014 "),RN=a("a"),n2o=o("GPTNeoModel"),s2o=o(" (GPT Neo model)"),l2o=l(),Up=a("li"),jle=a("strong"),i2o=o("gpt_neox"),d2o=o(" \u2014 "),PN=a("a"),c2o=o("GPTNeoXModel"),f2o=o(" (GPT NeoX model)"),m2o=l(),Jp=a("li"),Dle=a("strong"),g2o=o("gptj"),h2o=o(" \u2014 "),BN=a("a"),p2o=o("GPTJModel"),_2o=o(" (GPT-J model)"),u2o=l(),Yp=a("li"),Gle=a("strong"),b2o=o("hubert"),v2o=o(" \u2014 "),IN=a("a"),F2o=o("HubertModel"),T2o=o(" (Hubert model)"),M2o=l(),Kp=a("li"),Ole=a("strong"),E2o=o("ibert"),C2o=o(" \u2014 "),NN=a("a"),w2o=o("IBertModel"),A2o=o(" (I-BERT model)"),L2o=l(),Zp=a("li"),Vle=a("strong"),y2o=o("imagegpt"),x2o=o(" \u2014 "),qN=a("a"),$2o=o("ImageGPTModel"),k2o=o(" (ImageGPT model)"),S2o=l(),e_=a("li"),Xle=a("strong"),R2o=o("layoutlm"),P2o=o(" \u2014 "),jN=a("a"),B2o=o("LayoutLMModel"),I2o=o(" (LayoutLM model)"),N2o=l(),o_=a("li"),zle=a("strong"),q2o=o("layoutlmv2"),j2o=o(" \u2014 "),DN=a("a"),D2o=o("LayoutLMv2Model"),G2o=o(" (LayoutLMv2 model)"),O2o=l(),r_=a("li"),Wle=a("strong"),V2o=o("layoutlmv3"),X2o=o(" \u2014 "),GN=a("a"),z2o=o("LayoutLMv3Model"),W2o=o(" (LayoutLMv3 model)"),Q2o=l(),t_=a("li"),Qle=a("strong"),H2o=o("led"),U2o=o(" \u2014 "),ON=a("a"),J2o=o("LEDModel"),Y2o=o(" (LED model)"),K2o=l(),a_=a("li"),Hle=a("strong"),Z2o=o("levit"),e4o=o(" \u2014 "),VN=a("a"),o4o=o("LevitModel"),r4o=o(" (LeViT model)"),t4o=l(),n_=a("li"),Ule=a("strong"),a4o=o("longformer"),n4o=o(" \u2014 "),XN=a("a"),s4o=o("LongformerModel"),l4o=o(" (Longformer model)"),i4o=l(),s_=a("li"),Jle=a("strong"),d4o=o("luke"),c4o=o(" \u2014 "),zN=a("a"),f4o=o("LukeModel"),m4o=o(" (LUKE model)"),g4o=l(),l_=a("li"),Yle=a("strong"),h4o=o("lxmert"),p4o=o(" \u2014 "),WN=a("a"),_4o=o("LxmertModel"),u4o=o(" (LXMERT model)"),b4o=l(),i_=a("li"),Kle=a("strong"),v4o=o("m2m_100"),F4o=o(" \u2014 "),QN=a("a"),T4o=o("M2M100Model"),M4o=o(" (M2M100 model)"),E4o=l(),d_=a("li"),Zle=a("strong"),C4o=o("marian"),w4o=o(" \u2014 "),HN=a("a"),A4o=o("MarianModel"),L4o=o(" (Marian model)"),y4o=l(),c_=a("li"),eie=a("strong"),x4o=o("maskformer"),$4o=o(" \u2014 "),UN=a("a"),k4o=o("MaskFormerModel"),S4o=o(" (MaskFormer model)"),R4o=l(),f_=a("li"),oie=a("strong"),P4o=o("mbart"),B4o=o(" \u2014 "),JN=a("a"),I4o=o("MBartModel"),N4o=o(" (mBART model)"),q4o=l(),m_=a("li"),rie=a("strong"),j4o=o("megatron-bert"),D4o=o(" \u2014 "),YN=a("a"),G4o=o("MegatronBertModel"),O4o=o(" (Megatron-BERT model)"),V4o=l(),g_=a("li"),tie=a("strong"),X4o=o("mobilebert"),z4o=o(" \u2014 "),KN=a("a"),W4o=o("MobileBertModel"),Q4o=o(" (MobileBERT model)"),H4o=l(),h_=a("li"),aie=a("strong"),U4o=o("mobilevit"),J4o=o(" \u2014 "),ZN=a("a"),Y4o=o("MobileViTModel"),K4o=o(" (MobileViT model)"),Z4o=l(),p_=a("li"),nie=a("strong"),evo=o("mpnet"),ovo=o(" \u2014 "),eq=a("a"),rvo=o("MPNetModel"),tvo=o(" (MPNet model)"),avo=l(),__=a("li"),sie=a("strong"),nvo=o("mt5"),svo=o(" \u2014 "),oq=a("a"),lvo=o("MT5Model"),ivo=o(" (MT5 model)"),dvo=l(),u_=a("li"),lie=a("strong"),cvo=o("nystromformer"),fvo=o(" \u2014 "),rq=a("a"),mvo=o("NystromformerModel"),gvo=o(" (Nystr\xF6mformer model)"),hvo=l(),b_=a("li"),iie=a("strong"),pvo=o("openai-gpt"),_vo=o(" \u2014 "),tq=a("a"),uvo=o("OpenAIGPTModel"),bvo=o(" (OpenAI GPT model)"),vvo=l(),v_=a("li"),die=a("strong"),Fvo=o("opt"),Tvo=o(" \u2014 "),aq=a("a"),Mvo=o("OPTModel"),Evo=o(" (OPT model)"),Cvo=l(),F_=a("li"),cie=a("strong"),wvo=o("pegasus"),Avo=o(" \u2014 "),nq=a("a"),Lvo=o("PegasusModel"),yvo=o(" (Pegasus model)"),xvo=l(),T_=a("li"),fie=a("strong"),$vo=o("perceiver"),kvo=o(" \u2014 "),sq=a("a"),Svo=o("PerceiverModel"),Rvo=o(" (Perceiver model)"),Pvo=l(),M_=a("li"),mie=a("strong"),Bvo=o("plbart"),Ivo=o(" \u2014 "),lq=a("a"),Nvo=o("PLBartModel"),qvo=o(" (PLBart model)"),jvo=l(),E_=a("li"),gie=a("strong"),Dvo=o("poolformer"),Gvo=o(" \u2014 "),iq=a("a"),Ovo=o("PoolFormerModel"),Vvo=o(" (PoolFormer model)"),Xvo=l(),C_=a("li"),hie=a("strong"),zvo=o("prophetnet"),Wvo=o(" \u2014 "),dq=a("a"),Qvo=o("ProphetNetModel"),Hvo=o(" (ProphetNet model)"),Uvo=l(),w_=a("li"),pie=a("strong"),Jvo=o("qdqbert"),Yvo=o(" \u2014 "),cq=a("a"),Kvo=o("QDQBertModel"),Zvo=o(" (QDQBert model)"),e5o=l(),A_=a("li"),_ie=a("strong"),o5o=o("reformer"),r5o=o(" \u2014 "),fq=a("a"),t5o=o("ReformerModel"),a5o=o(" (Reformer model)"),n5o=l(),L_=a("li"),uie=a("strong"),s5o=o("regnet"),l5o=o(" \u2014 "),mq=a("a"),i5o=o("RegNetModel"),d5o=o(" (RegNet model)"),c5o=l(),y_=a("li"),bie=a("strong"),f5o=o("rembert"),m5o=o(" \u2014 "),gq=a("a"),g5o=o("RemBertModel"),h5o=o(" (RemBERT model)"),p5o=l(),x_=a("li"),vie=a("strong"),_5o=o("resnet"),u5o=o(" \u2014 "),hq=a("a"),b5o=o("ResNetModel"),v5o=o(" (ResNet model)"),F5o=l(),$_=a("li"),Fie=a("strong"),T5o=o("retribert"),M5o=o(" \u2014 "),pq=a("a"),E5o=o("RetriBertModel"),C5o=o(" (RetriBERT model)"),w5o=l(),k_=a("li"),Tie=a("strong"),A5o=o("roberta"),L5o=o(" \u2014 "),_q=a("a"),y5o=o("RobertaModel"),x5o=o(" (RoBERTa model)"),$5o=l(),S_=a("li"),Mie=a("strong"),k5o=o("roformer"),S5o=o(" \u2014 "),uq=a("a"),R5o=o("RoFormerModel"),P5o=o(" (RoFormer model)"),B5o=l(),R_=a("li"),Eie=a("strong"),I5o=o("segformer"),N5o=o(" \u2014 "),bq=a("a"),q5o=o("SegformerModel"),j5o=o(" (SegFormer model)"),D5o=l(),P_=a("li"),Cie=a("strong"),G5o=o("sew"),O5o=o(" \u2014 "),vq=a("a"),V5o=o("SEWModel"),X5o=o(" (SEW model)"),z5o=l(),B_=a("li"),wie=a("strong"),W5o=o("sew-d"),Q5o=o(" \u2014 "),Fq=a("a"),H5o=o("SEWDModel"),U5o=o(" (SEW-D model)"),J5o=l(),I_=a("li"),Aie=a("strong"),Y5o=o("speech_to_text"),K5o=o(" \u2014 "),Tq=a("a"),Z5o=o("Speech2TextModel"),e3o=o(" (Speech2Text model)"),o3o=l(),N_=a("li"),Lie=a("strong"),r3o=o("splinter"),t3o=o(" \u2014 "),Mq=a("a"),a3o=o("SplinterModel"),n3o=o(" (Splinter model)"),s3o=l(),q_=a("li"),yie=a("strong"),l3o=o("squeezebert"),i3o=o(" \u2014 "),Eq=a("a"),d3o=o("SqueezeBertModel"),c3o=o(" (SqueezeBERT model)"),f3o=l(),j_=a("li"),xie=a("strong"),m3o=o("swin"),g3o=o(" \u2014 "),Cq=a("a"),h3o=o("SwinModel"),p3o=o(" (Swin Transformer model)"),_3o=l(),D_=a("li"),$ie=a("strong"),u3o=o("t5"),b3o=o(" \u2014 "),wq=a("a"),v3o=o("T5Model"),F3o=o(" (T5 model)"),T3o=l(),G_=a("li"),kie=a("strong"),M3o=o("tapas"),E3o=o(" \u2014 "),Aq=a("a"),C3o=o("TapasModel"),w3o=o(" (TAPAS model)"),A3o=l(),O_=a("li"),Sie=a("strong"),L3o=o("trajectory_transformer"),y3o=o(" \u2014 "),Lq=a("a"),x3o=o("TrajectoryTransformerModel"),$3o=o(" (Trajectory Transformer model)"),k3o=l(),V_=a("li"),Rie=a("strong"),S3o=o("transfo-xl"),R3o=o(" \u2014 "),yq=a("a"),P3o=o("TransfoXLModel"),B3o=o(" (Transformer-XL model)"),I3o=l(),X_=a("li"),Pie=a("strong"),N3o=o("unispeech"),q3o=o(" \u2014 "),xq=a("a"),j3o=o("UniSpeechModel"),D3o=o(" (UniSpeech model)"),G3o=l(),z_=a("li"),Bie=a("strong"),O3o=o("unispeech-sat"),V3o=o(" \u2014 "),$q=a("a"),X3o=o("UniSpeechSatModel"),z3o=o(" (UniSpeechSat model)"),W3o=l(),W_=a("li"),Iie=a("strong"),Q3o=o("van"),H3o=o(" \u2014 "),kq=a("a"),U3o=o("VanModel"),J3o=o(" (VAN model)"),Y3o=l(),Q_=a("li"),Nie=a("strong"),K3o=o("vilt"),Z3o=o(" \u2014 "),Sq=a("a"),eFo=o("ViltModel"),oFo=o(" (ViLT model)"),rFo=l(),H_=a("li"),qie=a("strong"),tFo=o("vision-text-dual-encoder"),aFo=o(" \u2014 "),Rq=a("a"),nFo=o("VisionTextDualEncoderModel"),sFo=o(" (VisionTextDualEncoder model)"),lFo=l(),U_=a("li"),jie=a("strong"),iFo=o("visual_bert"),dFo=o(" \u2014 "),Pq=a("a"),cFo=o("VisualBertModel"),fFo=o(" (VisualBERT model)"),mFo=l(),J_=a("li"),Die=a("strong"),gFo=o("vit"),hFo=o(" \u2014 "),Bq=a("a"),pFo=o("ViTModel"),_Fo=o(" (ViT model)"),uFo=l(),Y_=a("li"),Gie=a("strong"),bFo=o("vit_mae"),vFo=o(" \u2014 "),Iq=a("a"),FFo=o("ViTMAEModel"),TFo=o(" (ViTMAE model)"),MFo=l(),K_=a("li"),Oie=a("strong"),EFo=o("wav2vec2"),CFo=o(" \u2014 "),Nq=a("a"),wFo=o("Wav2Vec2Model"),AFo=o(" (Wav2Vec2 model)"),LFo=l(),Z_=a("li"),Vie=a("strong"),yFo=o("wav2vec2-conformer"),xFo=o(" \u2014 "),qq=a("a"),$Fo=o("Wav2Vec2ConformerModel"),kFo=o(" (Wav2Vec2-Conformer model)"),SFo=l(),eu=a("li"),Xie=a("strong"),RFo=o("wavlm"),PFo=o(" \u2014 "),jq=a("a"),BFo=o("WavLMModel"),IFo=o(" (WavLM model)"),NFo=l(),ou=a("li"),zie=a("strong"),qFo=o("xglm"),jFo=o(" \u2014 "),Dq=a("a"),DFo=o("XGLMModel"),GFo=o(" (XGLM model)"),OFo=l(),ru=a("li"),Wie=a("strong"),VFo=o("xlm"),XFo=o(" \u2014 "),Gq=a("a"),zFo=o("XLMModel"),WFo=o(" (XLM model)"),QFo=l(),tu=a("li"),Qie=a("strong"),HFo=o("xlm-prophetnet"),UFo=o(" \u2014 "),Oq=a("a"),JFo=o("XLMProphetNetModel"),YFo=o(" (XLM-ProphetNet model)"),KFo=l(),au=a("li"),Hie=a("strong"),ZFo=o("xlm-roberta"),eTo=o(" \u2014 "),Vq=a("a"),oTo=o("XLMRobertaModel"),rTo=o(" (XLM-RoBERTa model)"),tTo=l(),nu=a("li"),Uie=a("strong"),aTo=o("xlm-roberta-xl"),nTo=o(" \u2014 "),Xq=a("a"),sTo=o("XLMRobertaXLModel"),lTo=o(" (XLM-RoBERTa-XL model)"),iTo=l(),su=a("li"),Jie=a("strong"),dTo=o("xlnet"),cTo=o(" \u2014 "),zq=a("a"),fTo=o("XLNetModel"),mTo=o(" (XLNet model)"),gTo=l(),lu=a("li"),Yie=a("strong"),hTo=o("yolos"),pTo=o(" \u2014 "),Wq=a("a"),_To=o("YolosModel"),uTo=o(" (YOLOS model)"),bTo=l(),iu=a("li"),Kie=a("strong"),vTo=o("yoso"),FTo=o(" \u2014 "),Qq=a("a"),TTo=o("YosoModel"),MTo=o(" (YOSO model)"),ETo=l(),du=a("p"),CTo=o("The model is set in evaluation mode by default using "),Zie=a("code"),wTo=o("model.eval()"),ATo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),LTo=o("model.train()"),yTo=l(),F(cu.$$.fragment),_je=l(),$i=a("h2"),fu=a("a"),ode=a("span"),F(bL.$$.fragment),xTo=l(),rde=a("span"),$To=o("AutoModelForPreTraining"),uje=l(),xo=a("div"),F(vL.$$.fragment),kTo=l(),ki=a("p"),STo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hq=a("a"),RTo=o("from_pretrained()"),PTo=o(" class method or the "),Uq=a("a"),BTo=o("from_config()"),ITo=o(` class
method.`),NTo=l(),FL=a("p"),qTo=o("This class cannot be instantiated directly using "),tde=a("code"),jTo=o("__init__()"),DTo=o(" (throws an error)."),GTo=l(),nt=a("div"),F(TL.$$.fragment),OTo=l(),ade=a("p"),VTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XTo=l(),Si=a("p"),zTo=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),WTo=o("not"),QTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),HTo=o("from_pretrained()"),UTo=o(" to load the model weights."),JTo=l(),F(mu.$$.fragment),YTo=l(),Ye=a("div"),F(ML.$$.fragment),KTo=l(),sde=a("p"),ZTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e7o=l(),$a=a("p"),o7o=o("The model class to instantiate is selected based on the "),lde=a("code"),r7o=o("model_type"),t7o=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),a7o=o("pretrained_model_name_or_path"),n7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),s7o=o("pretrained_model_name_or_path"),l7o=o(":"),i7o=l(),G=a("ul"),gu=a("li"),cde=a("strong"),d7o=o("albert"),c7o=o(" \u2014 "),Yq=a("a"),f7o=o("AlbertForPreTraining"),m7o=o(" (ALBERT model)"),g7o=l(),hu=a("li"),fde=a("strong"),h7o=o("bart"),p7o=o(" \u2014 "),Kq=a("a"),_7o=o("BartForConditionalGeneration"),u7o=o(" (BART model)"),b7o=l(),pu=a("li"),mde=a("strong"),v7o=o("bert"),F7o=o(" \u2014 "),Zq=a("a"),T7o=o("BertForPreTraining"),M7o=o(" (BERT model)"),E7o=l(),_u=a("li"),gde=a("strong"),C7o=o("big_bird"),w7o=o(" \u2014 "),ej=a("a"),A7o=o("BigBirdForPreTraining"),L7o=o(" (BigBird model)"),y7o=l(),uu=a("li"),hde=a("strong"),x7o=o("camembert"),$7o=o(" \u2014 "),oj=a("a"),k7o=o("CamembertForMaskedLM"),S7o=o(" (CamemBERT model)"),R7o=l(),bu=a("li"),pde=a("strong"),P7o=o("ctrl"),B7o=o(" \u2014 "),rj=a("a"),I7o=o("CTRLLMHeadModel"),N7o=o(" (CTRL model)"),q7o=l(),vu=a("li"),_de=a("strong"),j7o=o("data2vec-text"),D7o=o(" \u2014 "),tj=a("a"),G7o=o("Data2VecTextForMaskedLM"),O7o=o(" (Data2VecText model)"),V7o=l(),Fu=a("li"),ude=a("strong"),X7o=o("deberta"),z7o=o(" \u2014 "),aj=a("a"),W7o=o("DebertaForMaskedLM"),Q7o=o(" (DeBERTa model)"),H7o=l(),Tu=a("li"),bde=a("strong"),U7o=o("deberta-v2"),J7o=o(" \u2014 "),nj=a("a"),Y7o=o("DebertaV2ForMaskedLM"),K7o=o(" (DeBERTa-v2 model)"),Z7o=l(),Mu=a("li"),vde=a("strong"),eMo=o("distilbert"),oMo=o(" \u2014 "),sj=a("a"),rMo=o("DistilBertForMaskedLM"),tMo=o(" (DistilBERT model)"),aMo=l(),Eu=a("li"),Fde=a("strong"),nMo=o("electra"),sMo=o(" \u2014 "),lj=a("a"),lMo=o("ElectraForPreTraining"),iMo=o(" (ELECTRA model)"),dMo=l(),Cu=a("li"),Tde=a("strong"),cMo=o("flaubert"),fMo=o(" \u2014 "),ij=a("a"),mMo=o("FlaubertWithLMHeadModel"),gMo=o(" (FlauBERT model)"),hMo=l(),wu=a("li"),Mde=a("strong"),pMo=o("flava"),_Mo=o(" \u2014 "),dj=a("a"),uMo=o("FlavaForPreTraining"),bMo=o(" (FLAVA model)"),vMo=l(),Au=a("li"),Ede=a("strong"),FMo=o("fnet"),TMo=o(" \u2014 "),cj=a("a"),MMo=o("FNetForPreTraining"),EMo=o(" (FNet model)"),CMo=l(),Lu=a("li"),Cde=a("strong"),wMo=o("fsmt"),AMo=o(" \u2014 "),fj=a("a"),LMo=o("FSMTForConditionalGeneration"),yMo=o(" (FairSeq Machine-Translation model)"),xMo=l(),yu=a("li"),wde=a("strong"),$Mo=o("funnel"),kMo=o(" \u2014 "),mj=a("a"),SMo=o("FunnelForPreTraining"),RMo=o(" (Funnel Transformer model)"),PMo=l(),xu=a("li"),Ade=a("strong"),BMo=o("gpt2"),IMo=o(" \u2014 "),gj=a("a"),NMo=o("GPT2LMHeadModel"),qMo=o(" (OpenAI GPT-2 model)"),jMo=l(),$u=a("li"),Lde=a("strong"),DMo=o("ibert"),GMo=o(" \u2014 "),hj=a("a"),OMo=o("IBertForMaskedLM"),VMo=o(" (I-BERT model)"),XMo=l(),ku=a("li"),yde=a("strong"),zMo=o("layoutlm"),WMo=o(" \u2014 "),pj=a("a"),QMo=o("LayoutLMForMaskedLM"),HMo=o(" (LayoutLM model)"),UMo=l(),Su=a("li"),xde=a("strong"),JMo=o("longformer"),YMo=o(" \u2014 "),_j=a("a"),KMo=o("LongformerForMaskedLM"),ZMo=o(" (Longformer model)"),eEo=l(),Ru=a("li"),$de=a("strong"),oEo=o("lxmert"),rEo=o(" \u2014 "),uj=a("a"),tEo=o("LxmertForPreTraining"),aEo=o(" (LXMERT model)"),nEo=l(),Pu=a("li"),kde=a("strong"),sEo=o("megatron-bert"),lEo=o(" \u2014 "),bj=a("a"),iEo=o("MegatronBertForPreTraining"),dEo=o(" (Megatron-BERT model)"),cEo=l(),Bu=a("li"),Sde=a("strong"),fEo=o("mobilebert"),mEo=o(" \u2014 "),vj=a("a"),gEo=o("MobileBertForPreTraining"),hEo=o(" (MobileBERT model)"),pEo=l(),Iu=a("li"),Rde=a("strong"),_Eo=o("mpnet"),uEo=o(" \u2014 "),Fj=a("a"),bEo=o("MPNetForMaskedLM"),vEo=o(" (MPNet model)"),FEo=l(),Nu=a("li"),Pde=a("strong"),TEo=o("openai-gpt"),MEo=o(" \u2014 "),Tj=a("a"),EEo=o("OpenAIGPTLMHeadModel"),CEo=o(" (OpenAI GPT model)"),wEo=l(),qu=a("li"),Bde=a("strong"),AEo=o("retribert"),LEo=o(" \u2014 "),Mj=a("a"),yEo=o("RetriBertModel"),xEo=o(" (RetriBERT model)"),$Eo=l(),ju=a("li"),Ide=a("strong"),kEo=o("roberta"),SEo=o(" \u2014 "),Ej=a("a"),REo=o("RobertaForMaskedLM"),PEo=o(" (RoBERTa model)"),BEo=l(),Du=a("li"),Nde=a("strong"),IEo=o("splinter"),NEo=o(" \u2014 "),Cj=a("a"),qEo=o("SplinterForPreTraining"),jEo=o(" (Splinter model)"),DEo=l(),Gu=a("li"),qde=a("strong"),GEo=o("squeezebert"),OEo=o(" \u2014 "),wj=a("a"),VEo=o("SqueezeBertForMaskedLM"),XEo=o(" (SqueezeBERT model)"),zEo=l(),Ou=a("li"),jde=a("strong"),WEo=o("t5"),QEo=o(" \u2014 "),Aj=a("a"),HEo=o("T5ForConditionalGeneration"),UEo=o(" (T5 model)"),JEo=l(),Vu=a("li"),Dde=a("strong"),YEo=o("tapas"),KEo=o(" \u2014 "),Lj=a("a"),ZEo=o("TapasForMaskedLM"),eCo=o(" (TAPAS model)"),oCo=l(),Xu=a("li"),Gde=a("strong"),rCo=o("transfo-xl"),tCo=o(" \u2014 "),yj=a("a"),aCo=o("TransfoXLLMHeadModel"),nCo=o(" (Transformer-XL model)"),sCo=l(),zu=a("li"),Ode=a("strong"),lCo=o("unispeech"),iCo=o(" \u2014 "),xj=a("a"),dCo=o("UniSpeechForPreTraining"),cCo=o(" (UniSpeech model)"),fCo=l(),Wu=a("li"),Vde=a("strong"),mCo=o("unispeech-sat"),gCo=o(" \u2014 "),$j=a("a"),hCo=o("UniSpeechSatForPreTraining"),pCo=o(" (UniSpeechSat model)"),_Co=l(),Qu=a("li"),Xde=a("strong"),uCo=o("visual_bert"),bCo=o(" \u2014 "),kj=a("a"),vCo=o("VisualBertForPreTraining"),FCo=o(" (VisualBERT model)"),TCo=l(),Hu=a("li"),zde=a("strong"),MCo=o("vit_mae"),ECo=o(" \u2014 "),Sj=a("a"),CCo=o("ViTMAEForPreTraining"),wCo=o(" (ViTMAE model)"),ACo=l(),Uu=a("li"),Wde=a("strong"),LCo=o("wav2vec2"),yCo=o(" \u2014 "),Rj=a("a"),xCo=o("Wav2Vec2ForPreTraining"),$Co=o(" (Wav2Vec2 model)"),kCo=l(),Ju=a("li"),Qde=a("strong"),SCo=o("wav2vec2-conformer"),RCo=o(" \u2014 "),Pj=a("a"),PCo=o("Wav2Vec2ConformerForPreTraining"),BCo=o(" (Wav2Vec2-Conformer model)"),ICo=l(),Yu=a("li"),Hde=a("strong"),NCo=o("xlm"),qCo=o(" \u2014 "),Bj=a("a"),jCo=o("XLMWithLMHeadModel"),DCo=o(" (XLM model)"),GCo=l(),Ku=a("li"),Ude=a("strong"),OCo=o("xlm-roberta"),VCo=o(" \u2014 "),Ij=a("a"),XCo=o("XLMRobertaForMaskedLM"),zCo=o(" (XLM-RoBERTa model)"),WCo=l(),Zu=a("li"),Jde=a("strong"),QCo=o("xlm-roberta-xl"),HCo=o(" \u2014 "),Nj=a("a"),UCo=o("XLMRobertaXLForMaskedLM"),JCo=o(" (XLM-RoBERTa-XL model)"),YCo=l(),e1=a("li"),Yde=a("strong"),KCo=o("xlnet"),ZCo=o(" \u2014 "),qj=a("a"),e0o=o("XLNetLMHeadModel"),o0o=o(" (XLNet model)"),r0o=l(),o1=a("p"),t0o=o("The model is set in evaluation mode by default using "),Kde=a("code"),a0o=o("model.eval()"),n0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),s0o=o("model.train()"),l0o=l(),F(r1.$$.fragment),bje=l(),Ri=a("h2"),t1=a("a"),ece=a("span"),F(EL.$$.fragment),i0o=l(),oce=a("span"),d0o=o("AutoModelForCausalLM"),vje=l(),$o=a("div"),F(CL.$$.fragment),c0o=l(),Pi=a("p"),f0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jj=a("a"),m0o=o("from_pretrained()"),g0o=o(" class method or the "),Dj=a("a"),h0o=o("from_config()"),p0o=o(` class
method.`),_0o=l(),wL=a("p"),u0o=o("This class cannot be instantiated directly using "),rce=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),F0o=l(),st=a("div"),F(AL.$$.fragment),T0o=l(),tce=a("p"),M0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E0o=l(),Bi=a("p"),C0o=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),w0o=o("not"),A0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=a("a"),L0o=o("from_pretrained()"),y0o=o(" to load the model weights."),x0o=l(),F(a1.$$.fragment),$0o=l(),Ke=a("div"),F(LL.$$.fragment),k0o=l(),nce=a("p"),S0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R0o=l(),ka=a("p"),P0o=o("The model class to instantiate is selected based on the "),sce=a("code"),B0o=o("model_type"),I0o=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),N0o=o("pretrained_model_name_or_path"),q0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),j0o=o("pretrained_model_name_or_path"),D0o=o(":"),G0o=l(),z=a("ul"),n1=a("li"),dce=a("strong"),O0o=o("bart"),V0o=o(" \u2014 "),Oj=a("a"),X0o=o("BartForCausalLM"),z0o=o(" (BART model)"),W0o=l(),s1=a("li"),cce=a("strong"),Q0o=o("bert"),H0o=o(" \u2014 "),Vj=a("a"),U0o=o("BertLMHeadModel"),J0o=o(" (BERT model)"),Y0o=l(),l1=a("li"),fce=a("strong"),K0o=o("bert-generation"),Z0o=o(" \u2014 "),Xj=a("a"),ewo=o("BertGenerationDecoder"),owo=o(" (Bert Generation model)"),rwo=l(),i1=a("li"),mce=a("strong"),two=o("big_bird"),awo=o(" \u2014 "),zj=a("a"),nwo=o("BigBirdForCausalLM"),swo=o(" (BigBird model)"),lwo=l(),d1=a("li"),gce=a("strong"),iwo=o("bigbird_pegasus"),dwo=o(" \u2014 "),Wj=a("a"),cwo=o("BigBirdPegasusForCausalLM"),fwo=o(" (BigBird-Pegasus model)"),mwo=l(),c1=a("li"),hce=a("strong"),gwo=o("blenderbot"),hwo=o(" \u2014 "),Qj=a("a"),pwo=o("BlenderbotForCausalLM"),_wo=o(" (Blenderbot model)"),uwo=l(),f1=a("li"),pce=a("strong"),bwo=o("blenderbot-small"),vwo=o(" \u2014 "),Hj=a("a"),Fwo=o("BlenderbotSmallForCausalLM"),Two=o(" (BlenderbotSmall model)"),Mwo=l(),m1=a("li"),_ce=a("strong"),Ewo=o("camembert"),Cwo=o(" \u2014 "),Uj=a("a"),wwo=o("CamembertForCausalLM"),Awo=o(" (CamemBERT model)"),Lwo=l(),g1=a("li"),uce=a("strong"),ywo=o("ctrl"),xwo=o(" \u2014 "),Jj=a("a"),$wo=o("CTRLLMHeadModel"),kwo=o(" (CTRL model)"),Swo=l(),h1=a("li"),bce=a("strong"),Rwo=o("data2vec-text"),Pwo=o(" \u2014 "),Yj=a("a"),Bwo=o("Data2VecTextForCausalLM"),Iwo=o(" (Data2VecText model)"),Nwo=l(),p1=a("li"),vce=a("strong"),qwo=o("electra"),jwo=o(" \u2014 "),Kj=a("a"),Dwo=o("ElectraForCausalLM"),Gwo=o(" (ELECTRA model)"),Owo=l(),_1=a("li"),Fce=a("strong"),Vwo=o("gpt2"),Xwo=o(" \u2014 "),Zj=a("a"),zwo=o("GPT2LMHeadModel"),Wwo=o(" (OpenAI GPT-2 model)"),Qwo=l(),u1=a("li"),Tce=a("strong"),Hwo=o("gpt_neo"),Uwo=o(" \u2014 "),eD=a("a"),Jwo=o("GPTNeoForCausalLM"),Ywo=o(" (GPT Neo model)"),Kwo=l(),b1=a("li"),Mce=a("strong"),Zwo=o("gpt_neox"),eAo=o(" \u2014 "),oD=a("a"),oAo=o("GPTNeoXForCausalLM"),rAo=o(" (GPT NeoX model)"),tAo=l(),v1=a("li"),Ece=a("strong"),aAo=o("gptj"),nAo=o(" \u2014 "),rD=a("a"),sAo=o("GPTJForCausalLM"),lAo=o(" (GPT-J model)"),iAo=l(),F1=a("li"),Cce=a("strong"),dAo=o("marian"),cAo=o(" \u2014 "),tD=a("a"),fAo=o("MarianForCausalLM"),mAo=o(" (Marian model)"),gAo=l(),T1=a("li"),wce=a("strong"),hAo=o("mbart"),pAo=o(" \u2014 "),aD=a("a"),_Ao=o("MBartForCausalLM"),uAo=o(" (mBART model)"),bAo=l(),M1=a("li"),Ace=a("strong"),vAo=o("megatron-bert"),FAo=o(" \u2014 "),nD=a("a"),TAo=o("MegatronBertForCausalLM"),MAo=o(" (Megatron-BERT model)"),EAo=l(),E1=a("li"),Lce=a("strong"),CAo=o("openai-gpt"),wAo=o(" \u2014 "),sD=a("a"),AAo=o("OpenAIGPTLMHeadModel"),LAo=o(" (OpenAI GPT model)"),yAo=l(),C1=a("li"),yce=a("strong"),xAo=o("opt"),$Ao=o(" \u2014 "),lD=a("a"),kAo=o("OPTForCausalLM"),SAo=o(" (OPT model)"),RAo=l(),w1=a("li"),xce=a("strong"),PAo=o("pegasus"),BAo=o(" \u2014 "),iD=a("a"),IAo=o("PegasusForCausalLM"),NAo=o(" (Pegasus model)"),qAo=l(),A1=a("li"),$ce=a("strong"),jAo=o("plbart"),DAo=o(" \u2014 "),dD=a("a"),GAo=o("PLBartForCausalLM"),OAo=o(" (PLBart model)"),VAo=l(),L1=a("li"),kce=a("strong"),XAo=o("prophetnet"),zAo=o(" \u2014 "),cD=a("a"),WAo=o("ProphetNetForCausalLM"),QAo=o(" (ProphetNet model)"),HAo=l(),y1=a("li"),Sce=a("strong"),UAo=o("qdqbert"),JAo=o(" \u2014 "),fD=a("a"),YAo=o("QDQBertLMHeadModel"),KAo=o(" (QDQBert model)"),ZAo=l(),x1=a("li"),Rce=a("strong"),e6o=o("reformer"),o6o=o(" \u2014 "),mD=a("a"),r6o=o("ReformerModelWithLMHead"),t6o=o(" (Reformer model)"),a6o=l(),$1=a("li"),Pce=a("strong"),n6o=o("rembert"),s6o=o(" \u2014 "),gD=a("a"),l6o=o("RemBertForCausalLM"),i6o=o(" (RemBERT model)"),d6o=l(),k1=a("li"),Bce=a("strong"),c6o=o("roberta"),f6o=o(" \u2014 "),hD=a("a"),m6o=o("RobertaForCausalLM"),g6o=o(" (RoBERTa model)"),h6o=l(),S1=a("li"),Ice=a("strong"),p6o=o("roformer"),_6o=o(" \u2014 "),pD=a("a"),u6o=o("RoFormerForCausalLM"),b6o=o(" (RoFormer model)"),v6o=l(),R1=a("li"),Nce=a("strong"),F6o=o("speech_to_text_2"),T6o=o(" \u2014 "),_D=a("a"),M6o=o("Speech2Text2ForCausalLM"),E6o=o(" (Speech2Text2 model)"),C6o=l(),P1=a("li"),qce=a("strong"),w6o=o("transfo-xl"),A6o=o(" \u2014 "),uD=a("a"),L6o=o("TransfoXLLMHeadModel"),y6o=o(" (Transformer-XL model)"),x6o=l(),B1=a("li"),jce=a("strong"),$6o=o("trocr"),k6o=o(" \u2014 "),bD=a("a"),S6o=o("TrOCRForCausalLM"),R6o=o(" (TrOCR model)"),P6o=l(),I1=a("li"),Dce=a("strong"),B6o=o("xglm"),I6o=o(" \u2014 "),vD=a("a"),N6o=o("XGLMForCausalLM"),q6o=o(" (XGLM model)"),j6o=l(),N1=a("li"),Gce=a("strong"),D6o=o("xlm"),G6o=o(" \u2014 "),FD=a("a"),O6o=o("XLMWithLMHeadModel"),V6o=o(" (XLM model)"),X6o=l(),q1=a("li"),Oce=a("strong"),z6o=o("xlm-prophetnet"),W6o=o(" \u2014 "),TD=a("a"),Q6o=o("XLMProphetNetForCausalLM"),H6o=o(" (XLM-ProphetNet model)"),U6o=l(),j1=a("li"),Vce=a("strong"),J6o=o("xlm-roberta"),Y6o=o(" \u2014 "),MD=a("a"),K6o=o("XLMRobertaForCausalLM"),Z6o=o(" (XLM-RoBERTa model)"),eLo=l(),D1=a("li"),Xce=a("strong"),oLo=o("xlm-roberta-xl"),rLo=o(" \u2014 "),ED=a("a"),tLo=o("XLMRobertaXLForCausalLM"),aLo=o(" (XLM-RoBERTa-XL model)"),nLo=l(),G1=a("li"),zce=a("strong"),sLo=o("xlnet"),lLo=o(" \u2014 "),CD=a("a"),iLo=o("XLNetLMHeadModel"),dLo=o(" (XLNet model)"),cLo=l(),O1=a("p"),fLo=o("The model is set in evaluation mode by default using "),Wce=a("code"),mLo=o("model.eval()"),gLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),hLo=o("model.train()"),pLo=l(),F(V1.$$.fragment),Fje=l(),Ii=a("h2"),X1=a("a"),Hce=a("span"),F(yL.$$.fragment),_Lo=l(),Uce=a("span"),uLo=o("AutoModelForMaskedLM"),Tje=l(),ko=a("div"),F(xL.$$.fragment),bLo=l(),Ni=a("p"),vLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wD=a("a"),FLo=o("from_pretrained()"),TLo=o(" class method or the "),AD=a("a"),MLo=o("from_config()"),ELo=o(` class
method.`),CLo=l(),$L=a("p"),wLo=o("This class cannot be instantiated directly using "),Jce=a("code"),ALo=o("__init__()"),LLo=o(" (throws an error)."),yLo=l(),lt=a("div"),F(kL.$$.fragment),xLo=l(),Yce=a("p"),$Lo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kLo=l(),qi=a("p"),SLo=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),RLo=o("not"),PLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=a("a"),BLo=o("from_pretrained()"),ILo=o(" to load the model weights."),NLo=l(),F(z1.$$.fragment),qLo=l(),Ze=a("div"),F(SL.$$.fragment),jLo=l(),Zce=a("p"),DLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GLo=l(),Sa=a("p"),OLo=o("The model class to instantiate is selected based on the "),efe=a("code"),VLo=o("model_type"),XLo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),zLo=o("pretrained_model_name_or_path"),WLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),QLo=o("pretrained_model_name_or_path"),HLo=o(":"),ULo=l(),W=a("ul"),W1=a("li"),tfe=a("strong"),JLo=o("albert"),YLo=o(" \u2014 "),yD=a("a"),KLo=o("AlbertForMaskedLM"),ZLo=o(" (ALBERT model)"),eyo=l(),Q1=a("li"),afe=a("strong"),oyo=o("bart"),ryo=o(" \u2014 "),xD=a("a"),tyo=o("BartForConditionalGeneration"),ayo=o(" (BART model)"),nyo=l(),H1=a("li"),nfe=a("strong"),syo=o("bert"),lyo=o(" \u2014 "),$D=a("a"),iyo=o("BertForMaskedLM"),dyo=o(" (BERT model)"),cyo=l(),U1=a("li"),sfe=a("strong"),fyo=o("big_bird"),myo=o(" \u2014 "),kD=a("a"),gyo=o("BigBirdForMaskedLM"),hyo=o(" (BigBird model)"),pyo=l(),J1=a("li"),lfe=a("strong"),_yo=o("camembert"),uyo=o(" \u2014 "),SD=a("a"),byo=o("CamembertForMaskedLM"),vyo=o(" (CamemBERT model)"),Fyo=l(),Y1=a("li"),ife=a("strong"),Tyo=o("convbert"),Myo=o(" \u2014 "),RD=a("a"),Eyo=o("ConvBertForMaskedLM"),Cyo=o(" (ConvBERT model)"),wyo=l(),K1=a("li"),dfe=a("strong"),Ayo=o("data2vec-text"),Lyo=o(" \u2014 "),PD=a("a"),yyo=o("Data2VecTextForMaskedLM"),xyo=o(" (Data2VecText model)"),$yo=l(),Z1=a("li"),cfe=a("strong"),kyo=o("deberta"),Syo=o(" \u2014 "),BD=a("a"),Ryo=o("DebertaForMaskedLM"),Pyo=o(" (DeBERTa model)"),Byo=l(),eb=a("li"),ffe=a("strong"),Iyo=o("deberta-v2"),Nyo=o(" \u2014 "),ID=a("a"),qyo=o("DebertaV2ForMaskedLM"),jyo=o(" (DeBERTa-v2 model)"),Dyo=l(),ob=a("li"),mfe=a("strong"),Gyo=o("distilbert"),Oyo=o(" \u2014 "),ND=a("a"),Vyo=o("DistilBertForMaskedLM"),Xyo=o(" (DistilBERT model)"),zyo=l(),rb=a("li"),gfe=a("strong"),Wyo=o("electra"),Qyo=o(" \u2014 "),qD=a("a"),Hyo=o("ElectraForMaskedLM"),Uyo=o(" (ELECTRA model)"),Jyo=l(),tb=a("li"),hfe=a("strong"),Yyo=o("flaubert"),Kyo=o(" \u2014 "),jD=a("a"),Zyo=o("FlaubertWithLMHeadModel"),e8o=o(" (FlauBERT model)"),o8o=l(),ab=a("li"),pfe=a("strong"),r8o=o("fnet"),t8o=o(" \u2014 "),DD=a("a"),a8o=o("FNetForMaskedLM"),n8o=o(" (FNet model)"),s8o=l(),nb=a("li"),_fe=a("strong"),l8o=o("funnel"),i8o=o(" \u2014 "),GD=a("a"),d8o=o("FunnelForMaskedLM"),c8o=o(" (Funnel Transformer model)"),f8o=l(),sb=a("li"),ufe=a("strong"),m8o=o("ibert"),g8o=o(" \u2014 "),OD=a("a"),h8o=o("IBertForMaskedLM"),p8o=o(" (I-BERT model)"),_8o=l(),lb=a("li"),bfe=a("strong"),u8o=o("layoutlm"),b8o=o(" \u2014 "),VD=a("a"),v8o=o("LayoutLMForMaskedLM"),F8o=o(" (LayoutLM model)"),T8o=l(),ib=a("li"),vfe=a("strong"),M8o=o("longformer"),E8o=o(" \u2014 "),XD=a("a"),C8o=o("LongformerForMaskedLM"),w8o=o(" (Longformer model)"),A8o=l(),db=a("li"),Ffe=a("strong"),L8o=o("luke"),y8o=o(" \u2014 "),zD=a("a"),x8o=o("LukeForMaskedLM"),$8o=o(" (LUKE model)"),k8o=l(),cb=a("li"),Tfe=a("strong"),S8o=o("mbart"),R8o=o(" \u2014 "),WD=a("a"),P8o=o("MBartForConditionalGeneration"),B8o=o(" (mBART model)"),I8o=l(),fb=a("li"),Mfe=a("strong"),N8o=o("megatron-bert"),q8o=o(" \u2014 "),QD=a("a"),j8o=o("MegatronBertForMaskedLM"),D8o=o(" (Megatron-BERT model)"),G8o=l(),mb=a("li"),Efe=a("strong"),O8o=o("mobilebert"),V8o=o(" \u2014 "),HD=a("a"),X8o=o("MobileBertForMaskedLM"),z8o=o(" (MobileBERT model)"),W8o=l(),gb=a("li"),Cfe=a("strong"),Q8o=o("mpnet"),H8o=o(" \u2014 "),UD=a("a"),U8o=o("MPNetForMaskedLM"),J8o=o(" (MPNet model)"),Y8o=l(),hb=a("li"),wfe=a("strong"),K8o=o("nystromformer"),Z8o=o(" \u2014 "),JD=a("a"),e9o=o("NystromformerForMaskedLM"),o9o=o(" (Nystr\xF6mformer model)"),r9o=l(),pb=a("li"),Afe=a("strong"),t9o=o("perceiver"),a9o=o(" \u2014 "),YD=a("a"),n9o=o("PerceiverForMaskedLM"),s9o=o(" (Perceiver model)"),l9o=l(),_b=a("li"),Lfe=a("strong"),i9o=o("qdqbert"),d9o=o(" \u2014 "),KD=a("a"),c9o=o("QDQBertForMaskedLM"),f9o=o(" (QDQBert model)"),m9o=l(),ub=a("li"),yfe=a("strong"),g9o=o("reformer"),h9o=o(" \u2014 "),ZD=a("a"),p9o=o("ReformerForMaskedLM"),_9o=o(" (Reformer model)"),u9o=l(),bb=a("li"),xfe=a("strong"),b9o=o("rembert"),v9o=o(" \u2014 "),eG=a("a"),F9o=o("RemBertForMaskedLM"),T9o=o(" (RemBERT model)"),M9o=l(),vb=a("li"),$fe=a("strong"),E9o=o("roberta"),C9o=o(" \u2014 "),oG=a("a"),w9o=o("RobertaForMaskedLM"),A9o=o(" (RoBERTa model)"),L9o=l(),Fb=a("li"),kfe=a("strong"),y9o=o("roformer"),x9o=o(" \u2014 "),rG=a("a"),$9o=o("RoFormerForMaskedLM"),k9o=o(" (RoFormer model)"),S9o=l(),Tb=a("li"),Sfe=a("strong"),R9o=o("squeezebert"),P9o=o(" \u2014 "),tG=a("a"),B9o=o("SqueezeBertForMaskedLM"),I9o=o(" (SqueezeBERT model)"),N9o=l(),Mb=a("li"),Rfe=a("strong"),q9o=o("tapas"),j9o=o(" \u2014 "),aG=a("a"),D9o=o("TapasForMaskedLM"),G9o=o(" (TAPAS model)"),O9o=l(),Eb=a("li"),Pfe=a("strong"),V9o=o("wav2vec2"),X9o=o(" \u2014 "),Bfe=a("code"),z9o=o("Wav2Vec2ForMaskedLM"),W9o=o(" (Wav2Vec2 model)"),Q9o=l(),Cb=a("li"),Ife=a("strong"),H9o=o("xlm"),U9o=o(" \u2014 "),nG=a("a"),J9o=o("XLMWithLMHeadModel"),Y9o=o(" (XLM model)"),K9o=l(),wb=a("li"),Nfe=a("strong"),Z9o=o("xlm-roberta"),exo=o(" \u2014 "),sG=a("a"),oxo=o("XLMRobertaForMaskedLM"),rxo=o(" (XLM-RoBERTa model)"),txo=l(),Ab=a("li"),qfe=a("strong"),axo=o("xlm-roberta-xl"),nxo=o(" \u2014 "),lG=a("a"),sxo=o("XLMRobertaXLForMaskedLM"),lxo=o(" (XLM-RoBERTa-XL model)"),ixo=l(),Lb=a("li"),jfe=a("strong"),dxo=o("yoso"),cxo=o(" \u2014 "),iG=a("a"),fxo=o("YosoForMaskedLM"),mxo=o(" (YOSO model)"),gxo=l(),yb=a("p"),hxo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),pxo=o("model.eval()"),_xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),uxo=o("model.train()"),bxo=l(),F(xb.$$.fragment),Mje=l(),ji=a("h2"),$b=a("a"),Ofe=a("span"),F(RL.$$.fragment),vxo=l(),Vfe=a("span"),Fxo=o("AutoModelForSeq2SeqLM"),Eje=l(),So=a("div"),F(PL.$$.fragment),Txo=l(),Di=a("p"),Mxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dG=a("a"),Exo=o("from_pretrained()"),Cxo=o(" class method or the "),cG=a("a"),wxo=o("from_config()"),Axo=o(` class
method.`),Lxo=l(),BL=a("p"),yxo=o("This class cannot be instantiated directly using "),Xfe=a("code"),xxo=o("__init__()"),$xo=o(" (throws an error)."),kxo=l(),it=a("div"),F(IL.$$.fragment),Sxo=l(),zfe=a("p"),Rxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pxo=l(),Gi=a("p"),Bxo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),Ixo=o("not"),Nxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),qxo=o("from_pretrained()"),jxo=o(" to load the model weights."),Dxo=l(),F(kb.$$.fragment),Gxo=l(),eo=a("div"),F(NL.$$.fragment),Oxo=l(),Qfe=a("p"),Vxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xxo=l(),Ra=a("p"),zxo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),Wxo=o("model_type"),Qxo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),Hxo=o("pretrained_model_name_or_path"),Uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),Jxo=o("pretrained_model_name_or_path"),Yxo=o(":"),Kxo=l(),_e=a("ul"),Sb=a("li"),Yfe=a("strong"),Zxo=o("bart"),e$o=o(" \u2014 "),mG=a("a"),o$o=o("BartForConditionalGeneration"),r$o=o(" (BART model)"),t$o=l(),Rb=a("li"),Kfe=a("strong"),a$o=o("bigbird_pegasus"),n$o=o(" \u2014 "),gG=a("a"),s$o=o("BigBirdPegasusForConditionalGeneration"),l$o=o(" (BigBird-Pegasus model)"),i$o=l(),Pb=a("li"),Zfe=a("strong"),d$o=o("blenderbot"),c$o=o(" \u2014 "),hG=a("a"),f$o=o("BlenderbotForConditionalGeneration"),m$o=o(" (Blenderbot model)"),g$o=l(),Bb=a("li"),eme=a("strong"),h$o=o("blenderbot-small"),p$o=o(" \u2014 "),pG=a("a"),_$o=o("BlenderbotSmallForConditionalGeneration"),u$o=o(" (BlenderbotSmall model)"),b$o=l(),Ib=a("li"),ome=a("strong"),v$o=o("encoder-decoder"),F$o=o(" \u2014 "),_G=a("a"),T$o=o("EncoderDecoderModel"),M$o=o(" (Encoder decoder model)"),E$o=l(),Nb=a("li"),rme=a("strong"),C$o=o("fsmt"),w$o=o(" \u2014 "),uG=a("a"),A$o=o("FSMTForConditionalGeneration"),L$o=o(" (FairSeq Machine-Translation model)"),y$o=l(),qb=a("li"),tme=a("strong"),x$o=o("led"),$$o=o(" \u2014 "),bG=a("a"),k$o=o("LEDForConditionalGeneration"),S$o=o(" (LED model)"),R$o=l(),jb=a("li"),ame=a("strong"),P$o=o("m2m_100"),B$o=o(" \u2014 "),vG=a("a"),I$o=o("M2M100ForConditionalGeneration"),N$o=o(" (M2M100 model)"),q$o=l(),Db=a("li"),nme=a("strong"),j$o=o("marian"),D$o=o(" \u2014 "),FG=a("a"),G$o=o("MarianMTModel"),O$o=o(" (Marian model)"),V$o=l(),Gb=a("li"),sme=a("strong"),X$o=o("mbart"),z$o=o(" \u2014 "),TG=a("a"),W$o=o("MBartForConditionalGeneration"),Q$o=o(" (mBART model)"),H$o=l(),Ob=a("li"),lme=a("strong"),U$o=o("mt5"),J$o=o(" \u2014 "),MG=a("a"),Y$o=o("MT5ForConditionalGeneration"),K$o=o(" (MT5 model)"),Z$o=l(),Vb=a("li"),ime=a("strong"),eko=o("pegasus"),oko=o(" \u2014 "),EG=a("a"),rko=o("PegasusForConditionalGeneration"),tko=o(" (Pegasus model)"),ako=l(),Xb=a("li"),dme=a("strong"),nko=o("plbart"),sko=o(" \u2014 "),CG=a("a"),lko=o("PLBartForConditionalGeneration"),iko=o(" (PLBart model)"),dko=l(),zb=a("li"),cme=a("strong"),cko=o("prophetnet"),fko=o(" \u2014 "),wG=a("a"),mko=o("ProphetNetForConditionalGeneration"),gko=o(" (ProphetNet model)"),hko=l(),Wb=a("li"),fme=a("strong"),pko=o("t5"),_ko=o(" \u2014 "),AG=a("a"),uko=o("T5ForConditionalGeneration"),bko=o(" (T5 model)"),vko=l(),Qb=a("li"),mme=a("strong"),Fko=o("xlm-prophetnet"),Tko=o(" \u2014 "),LG=a("a"),Mko=o("XLMProphetNetForConditionalGeneration"),Eko=o(" (XLM-ProphetNet model)"),Cko=l(),Hb=a("p"),wko=o("The model is set in evaluation mode by default using "),gme=a("code"),Ako=o("model.eval()"),Lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=a("code"),yko=o("model.train()"),xko=l(),F(Ub.$$.fragment),Cje=l(),Oi=a("h2"),Jb=a("a"),pme=a("span"),F(qL.$$.fragment),$ko=l(),_me=a("span"),kko=o("AutoModelForSequenceClassification"),wje=l(),Ro=a("div"),F(jL.$$.fragment),Sko=l(),Vi=a("p"),Rko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yG=a("a"),Pko=o("from_pretrained()"),Bko=o(" class method or the "),xG=a("a"),Iko=o("from_config()"),Nko=o(` class
method.`),qko=l(),DL=a("p"),jko=o("This class cannot be instantiated directly using "),ume=a("code"),Dko=o("__init__()"),Gko=o(" (throws an error)."),Oko=l(),dt=a("div"),F(GL.$$.fragment),Vko=l(),bme=a("p"),Xko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zko=l(),Xi=a("p"),Wko=o(`Note:
Loading a model from its configuration file does `),vme=a("strong"),Qko=o("not"),Hko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),Uko=o("from_pretrained()"),Jko=o(" to load the model weights."),Yko=l(),F(Yb.$$.fragment),Kko=l(),oo=a("div"),F(OL.$$.fragment),Zko=l(),Fme=a("p"),eSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oSo=l(),Pa=a("p"),rSo=o("The model class to instantiate is selected based on the "),Tme=a("code"),tSo=o("model_type"),aSo=o(` property of the config object (either
passed as an argument or loaded from `),Mme=a("code"),nSo=o("pretrained_model_name_or_path"),sSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=a("code"),lSo=o("pretrained_model_name_or_path"),iSo=o(":"),dSo=l(),N=a("ul"),Kb=a("li"),Cme=a("strong"),cSo=o("albert"),fSo=o(" \u2014 "),kG=a("a"),mSo=o("AlbertForSequenceClassification"),gSo=o(" (ALBERT model)"),hSo=l(),Zb=a("li"),wme=a("strong"),pSo=o("bart"),_So=o(" \u2014 "),SG=a("a"),uSo=o("BartForSequenceClassification"),bSo=o(" (BART model)"),vSo=l(),e2=a("li"),Ame=a("strong"),FSo=o("bert"),TSo=o(" \u2014 "),RG=a("a"),MSo=o("BertForSequenceClassification"),ESo=o(" (BERT model)"),CSo=l(),o2=a("li"),Lme=a("strong"),wSo=o("big_bird"),ASo=o(" \u2014 "),PG=a("a"),LSo=o("BigBirdForSequenceClassification"),ySo=o(" (BigBird model)"),xSo=l(),r2=a("li"),yme=a("strong"),$So=o("bigbird_pegasus"),kSo=o(" \u2014 "),BG=a("a"),SSo=o("BigBirdPegasusForSequenceClassification"),RSo=o(" (BigBird-Pegasus model)"),PSo=l(),t2=a("li"),xme=a("strong"),BSo=o("camembert"),ISo=o(" \u2014 "),IG=a("a"),NSo=o("CamembertForSequenceClassification"),qSo=o(" (CamemBERT model)"),jSo=l(),a2=a("li"),$me=a("strong"),DSo=o("canine"),GSo=o(" \u2014 "),NG=a("a"),OSo=o("CanineForSequenceClassification"),VSo=o(" (CANINE model)"),XSo=l(),n2=a("li"),kme=a("strong"),zSo=o("convbert"),WSo=o(" \u2014 "),qG=a("a"),QSo=o("ConvBertForSequenceClassification"),HSo=o(" (ConvBERT model)"),USo=l(),s2=a("li"),Sme=a("strong"),JSo=o("ctrl"),YSo=o(" \u2014 "),jG=a("a"),KSo=o("CTRLForSequenceClassification"),ZSo=o(" (CTRL model)"),eRo=l(),l2=a("li"),Rme=a("strong"),oRo=o("data2vec-text"),rRo=o(" \u2014 "),DG=a("a"),tRo=o("Data2VecTextForSequenceClassification"),aRo=o(" (Data2VecText model)"),nRo=l(),i2=a("li"),Pme=a("strong"),sRo=o("deberta"),lRo=o(" \u2014 "),GG=a("a"),iRo=o("DebertaForSequenceClassification"),dRo=o(" (DeBERTa model)"),cRo=l(),d2=a("li"),Bme=a("strong"),fRo=o("deberta-v2"),mRo=o(" \u2014 "),OG=a("a"),gRo=o("DebertaV2ForSequenceClassification"),hRo=o(" (DeBERTa-v2 model)"),pRo=l(),c2=a("li"),Ime=a("strong"),_Ro=o("distilbert"),uRo=o(" \u2014 "),VG=a("a"),bRo=o("DistilBertForSequenceClassification"),vRo=o(" (DistilBERT model)"),FRo=l(),f2=a("li"),Nme=a("strong"),TRo=o("electra"),MRo=o(" \u2014 "),XG=a("a"),ERo=o("ElectraForSequenceClassification"),CRo=o(" (ELECTRA model)"),wRo=l(),m2=a("li"),qme=a("strong"),ARo=o("flaubert"),LRo=o(" \u2014 "),zG=a("a"),yRo=o("FlaubertForSequenceClassification"),xRo=o(" (FlauBERT model)"),$Ro=l(),g2=a("li"),jme=a("strong"),kRo=o("fnet"),SRo=o(" \u2014 "),WG=a("a"),RRo=o("FNetForSequenceClassification"),PRo=o(" (FNet model)"),BRo=l(),h2=a("li"),Dme=a("strong"),IRo=o("funnel"),NRo=o(" \u2014 "),QG=a("a"),qRo=o("FunnelForSequenceClassification"),jRo=o(" (Funnel Transformer model)"),DRo=l(),p2=a("li"),Gme=a("strong"),GRo=o("gpt2"),ORo=o(" \u2014 "),HG=a("a"),VRo=o("GPT2ForSequenceClassification"),XRo=o(" (OpenAI GPT-2 model)"),zRo=l(),_2=a("li"),Ome=a("strong"),WRo=o("gpt_neo"),QRo=o(" \u2014 "),UG=a("a"),HRo=o("GPTNeoForSequenceClassification"),URo=o(" (GPT Neo model)"),JRo=l(),u2=a("li"),Vme=a("strong"),YRo=o("gptj"),KRo=o(" \u2014 "),JG=a("a"),ZRo=o("GPTJForSequenceClassification"),ePo=o(" (GPT-J model)"),oPo=l(),b2=a("li"),Xme=a("strong"),rPo=o("ibert"),tPo=o(" \u2014 "),YG=a("a"),aPo=o("IBertForSequenceClassification"),nPo=o(" (I-BERT model)"),sPo=l(),v2=a("li"),zme=a("strong"),lPo=o("layoutlm"),iPo=o(" \u2014 "),KG=a("a"),dPo=o("LayoutLMForSequenceClassification"),cPo=o(" (LayoutLM model)"),fPo=l(),F2=a("li"),Wme=a("strong"),mPo=o("layoutlmv2"),gPo=o(" \u2014 "),ZG=a("a"),hPo=o("LayoutLMv2ForSequenceClassification"),pPo=o(" (LayoutLMv2 model)"),_Po=l(),T2=a("li"),Qme=a("strong"),uPo=o("layoutlmv3"),bPo=o(" \u2014 "),eO=a("a"),vPo=o("LayoutLMv3ForSequenceClassification"),FPo=o(" (LayoutLMv3 model)"),TPo=l(),M2=a("li"),Hme=a("strong"),MPo=o("led"),EPo=o(" \u2014 "),oO=a("a"),CPo=o("LEDForSequenceClassification"),wPo=o(" (LED model)"),APo=l(),E2=a("li"),Ume=a("strong"),LPo=o("longformer"),yPo=o(" \u2014 "),rO=a("a"),xPo=o("LongformerForSequenceClassification"),$Po=o(" (Longformer model)"),kPo=l(),C2=a("li"),Jme=a("strong"),SPo=o("mbart"),RPo=o(" \u2014 "),tO=a("a"),PPo=o("MBartForSequenceClassification"),BPo=o(" (mBART model)"),IPo=l(),w2=a("li"),Yme=a("strong"),NPo=o("megatron-bert"),qPo=o(" \u2014 "),aO=a("a"),jPo=o("MegatronBertForSequenceClassification"),DPo=o(" (Megatron-BERT model)"),GPo=l(),A2=a("li"),Kme=a("strong"),OPo=o("mobilebert"),VPo=o(" \u2014 "),nO=a("a"),XPo=o("MobileBertForSequenceClassification"),zPo=o(" (MobileBERT model)"),WPo=l(),L2=a("li"),Zme=a("strong"),QPo=o("mpnet"),HPo=o(" \u2014 "),sO=a("a"),UPo=o("MPNetForSequenceClassification"),JPo=o(" (MPNet model)"),YPo=l(),y2=a("li"),ege=a("strong"),KPo=o("nystromformer"),ZPo=o(" \u2014 "),lO=a("a"),eBo=o("NystromformerForSequenceClassification"),oBo=o(" (Nystr\xF6mformer model)"),rBo=l(),x2=a("li"),oge=a("strong"),tBo=o("openai-gpt"),aBo=o(" \u2014 "),iO=a("a"),nBo=o("OpenAIGPTForSequenceClassification"),sBo=o(" (OpenAI GPT model)"),lBo=l(),$2=a("li"),rge=a("strong"),iBo=o("perceiver"),dBo=o(" \u2014 "),dO=a("a"),cBo=o("PerceiverForSequenceClassification"),fBo=o(" (Perceiver model)"),mBo=l(),k2=a("li"),tge=a("strong"),gBo=o("plbart"),hBo=o(" \u2014 "),cO=a("a"),pBo=o("PLBartForSequenceClassification"),_Bo=o(" (PLBart model)"),uBo=l(),S2=a("li"),age=a("strong"),bBo=o("qdqbert"),vBo=o(" \u2014 "),fO=a("a"),FBo=o("QDQBertForSequenceClassification"),TBo=o(" (QDQBert model)"),MBo=l(),R2=a("li"),nge=a("strong"),EBo=o("reformer"),CBo=o(" \u2014 "),mO=a("a"),wBo=o("ReformerForSequenceClassification"),ABo=o(" (Reformer model)"),LBo=l(),P2=a("li"),sge=a("strong"),yBo=o("rembert"),xBo=o(" \u2014 "),gO=a("a"),$Bo=o("RemBertForSequenceClassification"),kBo=o(" (RemBERT model)"),SBo=l(),B2=a("li"),lge=a("strong"),RBo=o("roberta"),PBo=o(" \u2014 "),hO=a("a"),BBo=o("RobertaForSequenceClassification"),IBo=o(" (RoBERTa model)"),NBo=l(),I2=a("li"),ige=a("strong"),qBo=o("roformer"),jBo=o(" \u2014 "),pO=a("a"),DBo=o("RoFormerForSequenceClassification"),GBo=o(" (RoFormer model)"),OBo=l(),N2=a("li"),dge=a("strong"),VBo=o("squeezebert"),XBo=o(" \u2014 "),_O=a("a"),zBo=o("SqueezeBertForSequenceClassification"),WBo=o(" (SqueezeBERT model)"),QBo=l(),q2=a("li"),cge=a("strong"),HBo=o("tapas"),UBo=o(" \u2014 "),uO=a("a"),JBo=o("TapasForSequenceClassification"),YBo=o(" (TAPAS model)"),KBo=l(),j2=a("li"),fge=a("strong"),ZBo=o("transfo-xl"),eIo=o(" \u2014 "),bO=a("a"),oIo=o("TransfoXLForSequenceClassification"),rIo=o(" (Transformer-XL model)"),tIo=l(),D2=a("li"),mge=a("strong"),aIo=o("xlm"),nIo=o(" \u2014 "),vO=a("a"),sIo=o("XLMForSequenceClassification"),lIo=o(" (XLM model)"),iIo=l(),G2=a("li"),gge=a("strong"),dIo=o("xlm-roberta"),cIo=o(" \u2014 "),FO=a("a"),fIo=o("XLMRobertaForSequenceClassification"),mIo=o(" (XLM-RoBERTa model)"),gIo=l(),O2=a("li"),hge=a("strong"),hIo=o("xlm-roberta-xl"),pIo=o(" \u2014 "),TO=a("a"),_Io=o("XLMRobertaXLForSequenceClassification"),uIo=o(" (XLM-RoBERTa-XL model)"),bIo=l(),V2=a("li"),pge=a("strong"),vIo=o("xlnet"),FIo=o(" \u2014 "),MO=a("a"),TIo=o("XLNetForSequenceClassification"),MIo=o(" (XLNet model)"),EIo=l(),X2=a("li"),_ge=a("strong"),CIo=o("yoso"),wIo=o(" \u2014 "),EO=a("a"),AIo=o("YosoForSequenceClassification"),LIo=o(" (YOSO model)"),yIo=l(),z2=a("p"),xIo=o("The model is set in evaluation mode by default using "),uge=a("code"),$Io=o("model.eval()"),kIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),SIo=o("model.train()"),RIo=l(),F(W2.$$.fragment),Aje=l(),zi=a("h2"),Q2=a("a"),vge=a("span"),F(VL.$$.fragment),PIo=l(),Fge=a("span"),BIo=o("AutoModelForMultipleChoice"),Lje=l(),Po=a("div"),F(XL.$$.fragment),IIo=l(),Wi=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CO=a("a"),qIo=o("from_pretrained()"),jIo=o(" class method or the "),wO=a("a"),DIo=o("from_config()"),GIo=o(` class
method.`),OIo=l(),zL=a("p"),VIo=o("This class cannot be instantiated directly using "),Tge=a("code"),XIo=o("__init__()"),zIo=o(" (throws an error)."),WIo=l(),ct=a("div"),F(WL.$$.fragment),QIo=l(),Mge=a("p"),HIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UIo=l(),Qi=a("p"),JIo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),YIo=o("not"),KIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),ZIo=o("from_pretrained()"),eNo=o(" to load the model weights."),oNo=l(),F(H2.$$.fragment),rNo=l(),ro=a("div"),F(QL.$$.fragment),tNo=l(),Cge=a("p"),aNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nNo=l(),Ba=a("p"),sNo=o("The model class to instantiate is selected based on the "),wge=a("code"),lNo=o("model_type"),iNo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),dNo=o("pretrained_model_name_or_path"),cNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(":"),gNo=l(),Z=a("ul"),U2=a("li"),yge=a("strong"),hNo=o("albert"),pNo=o(" \u2014 "),LO=a("a"),_No=o("AlbertForMultipleChoice"),uNo=o(" (ALBERT model)"),bNo=l(),J2=a("li"),xge=a("strong"),vNo=o("bert"),FNo=o(" \u2014 "),yO=a("a"),TNo=o("BertForMultipleChoice"),MNo=o(" (BERT model)"),ENo=l(),Y2=a("li"),$ge=a("strong"),CNo=o("big_bird"),wNo=o(" \u2014 "),xO=a("a"),ANo=o("BigBirdForMultipleChoice"),LNo=o(" (BigBird model)"),yNo=l(),K2=a("li"),kge=a("strong"),xNo=o("camembert"),$No=o(" \u2014 "),$O=a("a"),kNo=o("CamembertForMultipleChoice"),SNo=o(" (CamemBERT model)"),RNo=l(),Z2=a("li"),Sge=a("strong"),PNo=o("canine"),BNo=o(" \u2014 "),kO=a("a"),INo=o("CanineForMultipleChoice"),NNo=o(" (CANINE model)"),qNo=l(),e4=a("li"),Rge=a("strong"),jNo=o("convbert"),DNo=o(" \u2014 "),SO=a("a"),GNo=o("ConvBertForMultipleChoice"),ONo=o(" (ConvBERT model)"),VNo=l(),o4=a("li"),Pge=a("strong"),XNo=o("data2vec-text"),zNo=o(" \u2014 "),RO=a("a"),WNo=o("Data2VecTextForMultipleChoice"),QNo=o(" (Data2VecText model)"),HNo=l(),r4=a("li"),Bge=a("strong"),UNo=o("deberta-v2"),JNo=o(" \u2014 "),PO=a("a"),YNo=o("DebertaV2ForMultipleChoice"),KNo=o(" (DeBERTa-v2 model)"),ZNo=l(),t4=a("li"),Ige=a("strong"),eqo=o("distilbert"),oqo=o(" \u2014 "),BO=a("a"),rqo=o("DistilBertForMultipleChoice"),tqo=o(" (DistilBERT model)"),aqo=l(),a4=a("li"),Nge=a("strong"),nqo=o("electra"),sqo=o(" \u2014 "),IO=a("a"),lqo=o("ElectraForMultipleChoice"),iqo=o(" (ELECTRA model)"),dqo=l(),n4=a("li"),qge=a("strong"),cqo=o("flaubert"),fqo=o(" \u2014 "),NO=a("a"),mqo=o("FlaubertForMultipleChoice"),gqo=o(" (FlauBERT model)"),hqo=l(),s4=a("li"),jge=a("strong"),pqo=o("fnet"),_qo=o(" \u2014 "),qO=a("a"),uqo=o("FNetForMultipleChoice"),bqo=o(" (FNet model)"),vqo=l(),l4=a("li"),Dge=a("strong"),Fqo=o("funnel"),Tqo=o(" \u2014 "),jO=a("a"),Mqo=o("FunnelForMultipleChoice"),Eqo=o(" (Funnel Transformer model)"),Cqo=l(),i4=a("li"),Gge=a("strong"),wqo=o("ibert"),Aqo=o(" \u2014 "),DO=a("a"),Lqo=o("IBertForMultipleChoice"),yqo=o(" (I-BERT model)"),xqo=l(),d4=a("li"),Oge=a("strong"),$qo=o("longformer"),kqo=o(" \u2014 "),GO=a("a"),Sqo=o("LongformerForMultipleChoice"),Rqo=o(" (Longformer model)"),Pqo=l(),c4=a("li"),Vge=a("strong"),Bqo=o("megatron-bert"),Iqo=o(" \u2014 "),OO=a("a"),Nqo=o("MegatronBertForMultipleChoice"),qqo=o(" (Megatron-BERT model)"),jqo=l(),f4=a("li"),Xge=a("strong"),Dqo=o("mobilebert"),Gqo=o(" \u2014 "),VO=a("a"),Oqo=o("MobileBertForMultipleChoice"),Vqo=o(" (MobileBERT model)"),Xqo=l(),m4=a("li"),zge=a("strong"),zqo=o("mpnet"),Wqo=o(" \u2014 "),XO=a("a"),Qqo=o("MPNetForMultipleChoice"),Hqo=o(" (MPNet model)"),Uqo=l(),g4=a("li"),Wge=a("strong"),Jqo=o("nystromformer"),Yqo=o(" \u2014 "),zO=a("a"),Kqo=o("NystromformerForMultipleChoice"),Zqo=o(" (Nystr\xF6mformer model)"),ejo=l(),h4=a("li"),Qge=a("strong"),ojo=o("qdqbert"),rjo=o(" \u2014 "),WO=a("a"),tjo=o("QDQBertForMultipleChoice"),ajo=o(" (QDQBert model)"),njo=l(),p4=a("li"),Hge=a("strong"),sjo=o("rembert"),ljo=o(" \u2014 "),QO=a("a"),ijo=o("RemBertForMultipleChoice"),djo=o(" (RemBERT model)"),cjo=l(),_4=a("li"),Uge=a("strong"),fjo=o("roberta"),mjo=o(" \u2014 "),HO=a("a"),gjo=o("RobertaForMultipleChoice"),hjo=o(" (RoBERTa model)"),pjo=l(),u4=a("li"),Jge=a("strong"),_jo=o("roformer"),ujo=o(" \u2014 "),UO=a("a"),bjo=o("RoFormerForMultipleChoice"),vjo=o(" (RoFormer model)"),Fjo=l(),b4=a("li"),Yge=a("strong"),Tjo=o("squeezebert"),Mjo=o(" \u2014 "),JO=a("a"),Ejo=o("SqueezeBertForMultipleChoice"),Cjo=o(" (SqueezeBERT model)"),wjo=l(),v4=a("li"),Kge=a("strong"),Ajo=o("xlm"),Ljo=o(" \u2014 "),YO=a("a"),yjo=o("XLMForMultipleChoice"),xjo=o(" (XLM model)"),$jo=l(),F4=a("li"),Zge=a("strong"),kjo=o("xlm-roberta"),Sjo=o(" \u2014 "),KO=a("a"),Rjo=o("XLMRobertaForMultipleChoice"),Pjo=o(" (XLM-RoBERTa model)"),Bjo=l(),T4=a("li"),ehe=a("strong"),Ijo=o("xlm-roberta-xl"),Njo=o(" \u2014 "),ZO=a("a"),qjo=o("XLMRobertaXLForMultipleChoice"),jjo=o(" (XLM-RoBERTa-XL model)"),Djo=l(),M4=a("li"),ohe=a("strong"),Gjo=o("xlnet"),Ojo=o(" \u2014 "),eV=a("a"),Vjo=o("XLNetForMultipleChoice"),Xjo=o(" (XLNet model)"),zjo=l(),E4=a("li"),rhe=a("strong"),Wjo=o("yoso"),Qjo=o(" \u2014 "),oV=a("a"),Hjo=o("YosoForMultipleChoice"),Ujo=o(" (YOSO model)"),Jjo=l(),C4=a("p"),Yjo=o("The model is set in evaluation mode by default using "),the=a("code"),Kjo=o("model.eval()"),Zjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),eDo=o("model.train()"),oDo=l(),F(w4.$$.fragment),yje=l(),Hi=a("h2"),A4=a("a"),nhe=a("span"),F(HL.$$.fragment),rDo=l(),she=a("span"),tDo=o("AutoModelForNextSentencePrediction"),xje=l(),Bo=a("div"),F(UL.$$.fragment),aDo=l(),Ui=a("p"),nDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rV=a("a"),sDo=o("from_pretrained()"),lDo=o(" class method or the "),tV=a("a"),iDo=o("from_config()"),dDo=o(` class
method.`),cDo=l(),JL=a("p"),fDo=o("This class cannot be instantiated directly using "),lhe=a("code"),mDo=o("__init__()"),gDo=o(" (throws an error)."),hDo=l(),ft=a("div"),F(YL.$$.fragment),pDo=l(),ihe=a("p"),_Do=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uDo=l(),Ji=a("p"),bDo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),vDo=o("not"),FDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),TDo=o("from_pretrained()"),MDo=o(" to load the model weights."),EDo=l(),F(L4.$$.fragment),CDo=l(),to=a("div"),F(KL.$$.fragment),wDo=l(),che=a("p"),ADo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LDo=l(),Ia=a("p"),yDo=o("The model class to instantiate is selected based on the "),fhe=a("code"),xDo=o("model_type"),$Do=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),kDo=o("pretrained_model_name_or_path"),SDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),RDo=o("pretrained_model_name_or_path"),PDo=o(":"),BDo=l(),Yr=a("ul"),y4=a("li"),hhe=a("strong"),IDo=o("bert"),NDo=o(" \u2014 "),nV=a("a"),qDo=o("BertForNextSentencePrediction"),jDo=o(" (BERT model)"),DDo=l(),x4=a("li"),phe=a("strong"),GDo=o("fnet"),ODo=o(" \u2014 "),sV=a("a"),VDo=o("FNetForNextSentencePrediction"),XDo=o(" (FNet model)"),zDo=l(),$4=a("li"),_he=a("strong"),WDo=o("megatron-bert"),QDo=o(" \u2014 "),lV=a("a"),HDo=o("MegatronBertForNextSentencePrediction"),UDo=o(" (Megatron-BERT model)"),JDo=l(),k4=a("li"),uhe=a("strong"),YDo=o("mobilebert"),KDo=o(" \u2014 "),iV=a("a"),ZDo=o("MobileBertForNextSentencePrediction"),eGo=o(" (MobileBERT model)"),oGo=l(),S4=a("li"),bhe=a("strong"),rGo=o("qdqbert"),tGo=o(" \u2014 "),dV=a("a"),aGo=o("QDQBertForNextSentencePrediction"),nGo=o(" (QDQBert model)"),sGo=l(),R4=a("p"),lGo=o("The model is set in evaluation mode by default using "),vhe=a("code"),iGo=o("model.eval()"),dGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),cGo=o("model.train()"),fGo=l(),F(P4.$$.fragment),$je=l(),Yi=a("h2"),B4=a("a"),The=a("span"),F(ZL.$$.fragment),mGo=l(),Mhe=a("span"),gGo=o("AutoModelForTokenClassification"),kje=l(),Io=a("div"),F(ey.$$.fragment),hGo=l(),Ki=a("p"),pGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cV=a("a"),_Go=o("from_pretrained()"),uGo=o(" class method or the "),fV=a("a"),bGo=o("from_config()"),vGo=o(` class
method.`),FGo=l(),oy=a("p"),TGo=o("This class cannot be instantiated directly using "),Ehe=a("code"),MGo=o("__init__()"),EGo=o(" (throws an error)."),CGo=l(),mt=a("div"),F(ry.$$.fragment),wGo=l(),Che=a("p"),AGo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LGo=l(),Zi=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),xGo=o("not"),$Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),kGo=o("from_pretrained()"),SGo=o(" to load the model weights."),RGo=l(),F(I4.$$.fragment),PGo=l(),ao=a("div"),F(ty.$$.fragment),BGo=l(),Ahe=a("p"),IGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NGo=l(),Na=a("p"),qGo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),jGo=o("model_type"),DGo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),GGo=o("pretrained_model_name_or_path"),OGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),VGo=o("pretrained_model_name_or_path"),XGo=o(":"),zGo=l(),U=a("ul"),N4=a("li"),$he=a("strong"),WGo=o("albert"),QGo=o(" \u2014 "),gV=a("a"),HGo=o("AlbertForTokenClassification"),UGo=o(" (ALBERT model)"),JGo=l(),q4=a("li"),khe=a("strong"),YGo=o("bert"),KGo=o(" \u2014 "),hV=a("a"),ZGo=o("BertForTokenClassification"),eOo=o(" (BERT model)"),oOo=l(),j4=a("li"),She=a("strong"),rOo=o("big_bird"),tOo=o(" \u2014 "),pV=a("a"),aOo=o("BigBirdForTokenClassification"),nOo=o(" (BigBird model)"),sOo=l(),D4=a("li"),Rhe=a("strong"),lOo=o("camembert"),iOo=o(" \u2014 "),_V=a("a"),dOo=o("CamembertForTokenClassification"),cOo=o(" (CamemBERT model)"),fOo=l(),G4=a("li"),Phe=a("strong"),mOo=o("canine"),gOo=o(" \u2014 "),uV=a("a"),hOo=o("CanineForTokenClassification"),pOo=o(" (CANINE model)"),_Oo=l(),O4=a("li"),Bhe=a("strong"),uOo=o("convbert"),bOo=o(" \u2014 "),bV=a("a"),vOo=o("ConvBertForTokenClassification"),FOo=o(" (ConvBERT model)"),TOo=l(),V4=a("li"),Ihe=a("strong"),MOo=o("data2vec-text"),EOo=o(" \u2014 "),vV=a("a"),COo=o("Data2VecTextForTokenClassification"),wOo=o(" (Data2VecText model)"),AOo=l(),X4=a("li"),Nhe=a("strong"),LOo=o("deberta"),yOo=o(" \u2014 "),FV=a("a"),xOo=o("DebertaForTokenClassification"),$Oo=o(" (DeBERTa model)"),kOo=l(),z4=a("li"),qhe=a("strong"),SOo=o("deberta-v2"),ROo=o(" \u2014 "),TV=a("a"),POo=o("DebertaV2ForTokenClassification"),BOo=o(" (DeBERTa-v2 model)"),IOo=l(),W4=a("li"),jhe=a("strong"),NOo=o("distilbert"),qOo=o(" \u2014 "),MV=a("a"),jOo=o("DistilBertForTokenClassification"),DOo=o(" (DistilBERT model)"),GOo=l(),Q4=a("li"),Dhe=a("strong"),OOo=o("electra"),VOo=o(" \u2014 "),EV=a("a"),XOo=o("ElectraForTokenClassification"),zOo=o(" (ELECTRA model)"),WOo=l(),H4=a("li"),Ghe=a("strong"),QOo=o("flaubert"),HOo=o(" \u2014 "),CV=a("a"),UOo=o("FlaubertForTokenClassification"),JOo=o(" (FlauBERT model)"),YOo=l(),U4=a("li"),Ohe=a("strong"),KOo=o("fnet"),ZOo=o(" \u2014 "),wV=a("a"),eVo=o("FNetForTokenClassification"),oVo=o(" (FNet model)"),rVo=l(),J4=a("li"),Vhe=a("strong"),tVo=o("funnel"),aVo=o(" \u2014 "),AV=a("a"),nVo=o("FunnelForTokenClassification"),sVo=o(" (Funnel Transformer model)"),lVo=l(),Y4=a("li"),Xhe=a("strong"),iVo=o("gpt2"),dVo=o(" \u2014 "),LV=a("a"),cVo=o("GPT2ForTokenClassification"),fVo=o(" (OpenAI GPT-2 model)"),mVo=l(),K4=a("li"),zhe=a("strong"),gVo=o("ibert"),hVo=o(" \u2014 "),yV=a("a"),pVo=o("IBertForTokenClassification"),_Vo=o(" (I-BERT model)"),uVo=l(),Z4=a("li"),Whe=a("strong"),bVo=o("layoutlm"),vVo=o(" \u2014 "),xV=a("a"),FVo=o("LayoutLMForTokenClassification"),TVo=o(" (LayoutLM model)"),MVo=l(),ev=a("li"),Qhe=a("strong"),EVo=o("layoutlmv2"),CVo=o(" \u2014 "),$V=a("a"),wVo=o("LayoutLMv2ForTokenClassification"),AVo=o(" (LayoutLMv2 model)"),LVo=l(),ov=a("li"),Hhe=a("strong"),yVo=o("layoutlmv3"),xVo=o(" \u2014 "),kV=a("a"),$Vo=o("LayoutLMv3ForTokenClassification"),kVo=o(" (LayoutLMv3 model)"),SVo=l(),rv=a("li"),Uhe=a("strong"),RVo=o("longformer"),PVo=o(" \u2014 "),SV=a("a"),BVo=o("LongformerForTokenClassification"),IVo=o(" (Longformer model)"),NVo=l(),tv=a("li"),Jhe=a("strong"),qVo=o("megatron-bert"),jVo=o(" \u2014 "),RV=a("a"),DVo=o("MegatronBertForTokenClassification"),GVo=o(" (Megatron-BERT model)"),OVo=l(),av=a("li"),Yhe=a("strong"),VVo=o("mobilebert"),XVo=o(" \u2014 "),PV=a("a"),zVo=o("MobileBertForTokenClassification"),WVo=o(" (MobileBERT model)"),QVo=l(),nv=a("li"),Khe=a("strong"),HVo=o("mpnet"),UVo=o(" \u2014 "),BV=a("a"),JVo=o("MPNetForTokenClassification"),YVo=o(" (MPNet model)"),KVo=l(),sv=a("li"),Zhe=a("strong"),ZVo=o("nystromformer"),eXo=o(" \u2014 "),IV=a("a"),oXo=o("NystromformerForTokenClassification"),rXo=o(" (Nystr\xF6mformer model)"),tXo=l(),lv=a("li"),epe=a("strong"),aXo=o("qdqbert"),nXo=o(" \u2014 "),NV=a("a"),sXo=o("QDQBertForTokenClassification"),lXo=o(" (QDQBert model)"),iXo=l(),iv=a("li"),ope=a("strong"),dXo=o("rembert"),cXo=o(" \u2014 "),qV=a("a"),fXo=o("RemBertForTokenClassification"),mXo=o(" (RemBERT model)"),gXo=l(),dv=a("li"),rpe=a("strong"),hXo=o("roberta"),pXo=o(" \u2014 "),jV=a("a"),_Xo=o("RobertaForTokenClassification"),uXo=o(" (RoBERTa model)"),bXo=l(),cv=a("li"),tpe=a("strong"),vXo=o("roformer"),FXo=o(" \u2014 "),DV=a("a"),TXo=o("RoFormerForTokenClassification"),MXo=o(" (RoFormer model)"),EXo=l(),fv=a("li"),ape=a("strong"),CXo=o("squeezebert"),wXo=o(" \u2014 "),GV=a("a"),AXo=o("SqueezeBertForTokenClassification"),LXo=o(" (SqueezeBERT model)"),yXo=l(),mv=a("li"),npe=a("strong"),xXo=o("xlm"),$Xo=o(" \u2014 "),OV=a("a"),kXo=o("XLMForTokenClassification"),SXo=o(" (XLM model)"),RXo=l(),gv=a("li"),spe=a("strong"),PXo=o("xlm-roberta"),BXo=o(" \u2014 "),VV=a("a"),IXo=o("XLMRobertaForTokenClassification"),NXo=o(" (XLM-RoBERTa model)"),qXo=l(),hv=a("li"),lpe=a("strong"),jXo=o("xlm-roberta-xl"),DXo=o(" \u2014 "),XV=a("a"),GXo=o("XLMRobertaXLForTokenClassification"),OXo=o(" (XLM-RoBERTa-XL model)"),VXo=l(),pv=a("li"),ipe=a("strong"),XXo=o("xlnet"),zXo=o(" \u2014 "),zV=a("a"),WXo=o("XLNetForTokenClassification"),QXo=o(" (XLNet model)"),HXo=l(),_v=a("li"),dpe=a("strong"),UXo=o("yoso"),JXo=o(" \u2014 "),WV=a("a"),YXo=o("YosoForTokenClassification"),KXo=o(" (YOSO model)"),ZXo=l(),uv=a("p"),ezo=o("The model is set in evaluation mode by default using "),cpe=a("code"),ozo=o("model.eval()"),rzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),tzo=o("model.train()"),azo=l(),F(bv.$$.fragment),Sje=l(),ed=a("h2"),vv=a("a"),mpe=a("span"),F(ay.$$.fragment),nzo=l(),gpe=a("span"),szo=o("AutoModelForQuestionAnswering"),Rje=l(),No=a("div"),F(ny.$$.fragment),lzo=l(),od=a("p"),izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QV=a("a"),dzo=o("from_pretrained()"),czo=o(" class method or the "),HV=a("a"),fzo=o("from_config()"),mzo=o(` class
method.`),gzo=l(),sy=a("p"),hzo=o("This class cannot be instantiated directly using "),hpe=a("code"),pzo=o("__init__()"),_zo=o(" (throws an error)."),uzo=l(),gt=a("div"),F(ly.$$.fragment),bzo=l(),ppe=a("p"),vzo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fzo=l(),rd=a("p"),Tzo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Czo=o("from_pretrained()"),wzo=o(" to load the model weights."),Azo=l(),F(Fv.$$.fragment),Lzo=l(),no=a("div"),F(iy.$$.fragment),yzo=l(),upe=a("p"),xzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$zo=l(),qa=a("p"),kzo=o("The model class to instantiate is selected based on the "),bpe=a("code"),Szo=o("model_type"),Rzo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Pzo=o("pretrained_model_name_or_path"),Bzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),Izo=o("pretrained_model_name_or_path"),Nzo=o(":"),qzo=l(),V=a("ul"),Tv=a("li"),Tpe=a("strong"),jzo=o("albert"),Dzo=o(" \u2014 "),JV=a("a"),Gzo=o("AlbertForQuestionAnswering"),Ozo=o(" (ALBERT model)"),Vzo=l(),Mv=a("li"),Mpe=a("strong"),Xzo=o("bart"),zzo=o(" \u2014 "),YV=a("a"),Wzo=o("BartForQuestionAnswering"),Qzo=o(" (BART model)"),Hzo=l(),Ev=a("li"),Epe=a("strong"),Uzo=o("bert"),Jzo=o(" \u2014 "),KV=a("a"),Yzo=o("BertForQuestionAnswering"),Kzo=o(" (BERT model)"),Zzo=l(),Cv=a("li"),Cpe=a("strong"),eWo=o("big_bird"),oWo=o(" \u2014 "),ZV=a("a"),rWo=o("BigBirdForQuestionAnswering"),tWo=o(" (BigBird model)"),aWo=l(),wv=a("li"),wpe=a("strong"),nWo=o("bigbird_pegasus"),sWo=o(" \u2014 "),eX=a("a"),lWo=o("BigBirdPegasusForQuestionAnswering"),iWo=o(" (BigBird-Pegasus model)"),dWo=l(),Av=a("li"),Ape=a("strong"),cWo=o("camembert"),fWo=o(" \u2014 "),oX=a("a"),mWo=o("CamembertForQuestionAnswering"),gWo=o(" (CamemBERT model)"),hWo=l(),Lv=a("li"),Lpe=a("strong"),pWo=o("canine"),_Wo=o(" \u2014 "),rX=a("a"),uWo=o("CanineForQuestionAnswering"),bWo=o(" (CANINE model)"),vWo=l(),yv=a("li"),ype=a("strong"),FWo=o("convbert"),TWo=o(" \u2014 "),tX=a("a"),MWo=o("ConvBertForQuestionAnswering"),EWo=o(" (ConvBERT model)"),CWo=l(),xv=a("li"),xpe=a("strong"),wWo=o("data2vec-text"),AWo=o(" \u2014 "),aX=a("a"),LWo=o("Data2VecTextForQuestionAnswering"),yWo=o(" (Data2VecText model)"),xWo=l(),$v=a("li"),$pe=a("strong"),$Wo=o("deberta"),kWo=o(" \u2014 "),nX=a("a"),SWo=o("DebertaForQuestionAnswering"),RWo=o(" (DeBERTa model)"),PWo=l(),kv=a("li"),kpe=a("strong"),BWo=o("deberta-v2"),IWo=o(" \u2014 "),sX=a("a"),NWo=o("DebertaV2ForQuestionAnswering"),qWo=o(" (DeBERTa-v2 model)"),jWo=l(),Sv=a("li"),Spe=a("strong"),DWo=o("distilbert"),GWo=o(" \u2014 "),lX=a("a"),OWo=o("DistilBertForQuestionAnswering"),VWo=o(" (DistilBERT model)"),XWo=l(),Rv=a("li"),Rpe=a("strong"),zWo=o("electra"),WWo=o(" \u2014 "),iX=a("a"),QWo=o("ElectraForQuestionAnswering"),HWo=o(" (ELECTRA model)"),UWo=l(),Pv=a("li"),Ppe=a("strong"),JWo=o("flaubert"),YWo=o(" \u2014 "),dX=a("a"),KWo=o("FlaubertForQuestionAnsweringSimple"),ZWo=o(" (FlauBERT model)"),eQo=l(),Bv=a("li"),Bpe=a("strong"),oQo=o("fnet"),rQo=o(" \u2014 "),cX=a("a"),tQo=o("FNetForQuestionAnswering"),aQo=o(" (FNet model)"),nQo=l(),Iv=a("li"),Ipe=a("strong"),sQo=o("funnel"),lQo=o(" \u2014 "),fX=a("a"),iQo=o("FunnelForQuestionAnswering"),dQo=o(" (Funnel Transformer model)"),cQo=l(),Nv=a("li"),Npe=a("strong"),fQo=o("gptj"),mQo=o(" \u2014 "),mX=a("a"),gQo=o("GPTJForQuestionAnswering"),hQo=o(" (GPT-J model)"),pQo=l(),qv=a("li"),qpe=a("strong"),_Qo=o("ibert"),uQo=o(" \u2014 "),gX=a("a"),bQo=o("IBertForQuestionAnswering"),vQo=o(" (I-BERT model)"),FQo=l(),jv=a("li"),jpe=a("strong"),TQo=o("layoutlmv2"),MQo=o(" \u2014 "),hX=a("a"),EQo=o("LayoutLMv2ForQuestionAnswering"),CQo=o(" (LayoutLMv2 model)"),wQo=l(),Dv=a("li"),Dpe=a("strong"),AQo=o("layoutlmv3"),LQo=o(" \u2014 "),pX=a("a"),yQo=o("LayoutLMv3ForQuestionAnswering"),xQo=o(" (LayoutLMv3 model)"),$Qo=l(),Gv=a("li"),Gpe=a("strong"),kQo=o("led"),SQo=o(" \u2014 "),_X=a("a"),RQo=o("LEDForQuestionAnswering"),PQo=o(" (LED model)"),BQo=l(),Ov=a("li"),Ope=a("strong"),IQo=o("longformer"),NQo=o(" \u2014 "),uX=a("a"),qQo=o("LongformerForQuestionAnswering"),jQo=o(" (Longformer model)"),DQo=l(),Vv=a("li"),Vpe=a("strong"),GQo=o("lxmert"),OQo=o(" \u2014 "),bX=a("a"),VQo=o("LxmertForQuestionAnswering"),XQo=o(" (LXMERT model)"),zQo=l(),Xv=a("li"),Xpe=a("strong"),WQo=o("mbart"),QQo=o(" \u2014 "),vX=a("a"),HQo=o("MBartForQuestionAnswering"),UQo=o(" (mBART model)"),JQo=l(),zv=a("li"),zpe=a("strong"),YQo=o("megatron-bert"),KQo=o(" \u2014 "),FX=a("a"),ZQo=o("MegatronBertForQuestionAnswering"),eHo=o(" (Megatron-BERT model)"),oHo=l(),Wv=a("li"),Wpe=a("strong"),rHo=o("mobilebert"),tHo=o(" \u2014 "),TX=a("a"),aHo=o("MobileBertForQuestionAnswering"),nHo=o(" (MobileBERT model)"),sHo=l(),Qv=a("li"),Qpe=a("strong"),lHo=o("mpnet"),iHo=o(" \u2014 "),MX=a("a"),dHo=o("MPNetForQuestionAnswering"),cHo=o(" (MPNet model)"),fHo=l(),Hv=a("li"),Hpe=a("strong"),mHo=o("nystromformer"),gHo=o(" \u2014 "),EX=a("a"),hHo=o("NystromformerForQuestionAnswering"),pHo=o(" (Nystr\xF6mformer model)"),_Ho=l(),Uv=a("li"),Upe=a("strong"),uHo=o("qdqbert"),bHo=o(" \u2014 "),CX=a("a"),vHo=o("QDQBertForQuestionAnswering"),FHo=o(" (QDQBert model)"),THo=l(),Jv=a("li"),Jpe=a("strong"),MHo=o("reformer"),EHo=o(" \u2014 "),wX=a("a"),CHo=o("ReformerForQuestionAnswering"),wHo=o(" (Reformer model)"),AHo=l(),Yv=a("li"),Ype=a("strong"),LHo=o("rembert"),yHo=o(" \u2014 "),AX=a("a"),xHo=o("RemBertForQuestionAnswering"),$Ho=o(" (RemBERT model)"),kHo=l(),Kv=a("li"),Kpe=a("strong"),SHo=o("roberta"),RHo=o(" \u2014 "),LX=a("a"),PHo=o("RobertaForQuestionAnswering"),BHo=o(" (RoBERTa model)"),IHo=l(),Zv=a("li"),Zpe=a("strong"),NHo=o("roformer"),qHo=o(" \u2014 "),yX=a("a"),jHo=o("RoFormerForQuestionAnswering"),DHo=o(" (RoFormer model)"),GHo=l(),e5=a("li"),e_e=a("strong"),OHo=o("splinter"),VHo=o(" \u2014 "),xX=a("a"),XHo=o("SplinterForQuestionAnswering"),zHo=o(" (Splinter model)"),WHo=l(),o5=a("li"),o_e=a("strong"),QHo=o("squeezebert"),HHo=o(" \u2014 "),$X=a("a"),UHo=o("SqueezeBertForQuestionAnswering"),JHo=o(" (SqueezeBERT model)"),YHo=l(),r5=a("li"),r_e=a("strong"),KHo=o("xlm"),ZHo=o(" \u2014 "),kX=a("a"),eUo=o("XLMForQuestionAnsweringSimple"),oUo=o(" (XLM model)"),rUo=l(),t5=a("li"),t_e=a("strong"),tUo=o("xlm-roberta"),aUo=o(" \u2014 "),SX=a("a"),nUo=o("XLMRobertaForQuestionAnswering"),sUo=o(" (XLM-RoBERTa model)"),lUo=l(),a5=a("li"),a_e=a("strong"),iUo=o("xlm-roberta-xl"),dUo=o(" \u2014 "),RX=a("a"),cUo=o("XLMRobertaXLForQuestionAnswering"),fUo=o(" (XLM-RoBERTa-XL model)"),mUo=l(),n5=a("li"),n_e=a("strong"),gUo=o("xlnet"),hUo=o(" \u2014 "),PX=a("a"),pUo=o("XLNetForQuestionAnsweringSimple"),_Uo=o(" (XLNet model)"),uUo=l(),s5=a("li"),s_e=a("strong"),bUo=o("yoso"),vUo=o(" \u2014 "),BX=a("a"),FUo=o("YosoForQuestionAnswering"),TUo=o(" (YOSO model)"),MUo=l(),l5=a("p"),EUo=o("The model is set in evaluation mode by default using "),l_e=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),AUo=o("model.train()"),LUo=l(),F(i5.$$.fragment),Pje=l(),td=a("h2"),d5=a("a"),d_e=a("span"),F(dy.$$.fragment),yUo=l(),c_e=a("span"),xUo=o("AutoModelForTableQuestionAnswering"),Bje=l(),qo=a("div"),F(cy.$$.fragment),$Uo=l(),ad=a("p"),kUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IX=a("a"),SUo=o("from_pretrained()"),RUo=o(" class method or the "),NX=a("a"),PUo=o("from_config()"),BUo=o(` class
method.`),IUo=l(),fy=a("p"),NUo=o("This class cannot be instantiated directly using "),f_e=a("code"),qUo=o("__init__()"),jUo=o(" (throws an error)."),DUo=l(),ht=a("div"),F(my.$$.fragment),GUo=l(),m_e=a("p"),OUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VUo=l(),nd=a("p"),XUo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),zUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),QUo=o("from_pretrained()"),HUo=o(" to load the model weights."),UUo=l(),F(c5.$$.fragment),JUo=l(),so=a("div"),F(gy.$$.fragment),YUo=l(),h_e=a("p"),KUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZUo=l(),ja=a("p"),eJo=o("The model class to instantiate is selected based on the "),p_e=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),b_e=a("ul"),f5=a("li"),v_e=a("strong"),iJo=o("tapas"),dJo=o(" \u2014 "),jX=a("a"),cJo=o("TapasForQuestionAnswering"),fJo=o(" (TAPAS model)"),mJo=l(),m5=a("p"),gJo=o("The model is set in evaluation mode by default using "),F_e=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),_Jo=o("model.train()"),uJo=l(),F(g5.$$.fragment),Ije=l(),sd=a("h2"),h5=a("a"),M_e=a("span"),F(hy.$$.fragment),bJo=l(),E_e=a("span"),vJo=o("AutoModelForImageClassification"),Nje=l(),jo=a("div"),F(py.$$.fragment),FJo=l(),ld=a("p"),TJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DX=a("a"),MJo=o("from_pretrained()"),EJo=o(" class method or the "),GX=a("a"),CJo=o("from_config()"),wJo=o(` class
method.`),AJo=l(),_y=a("p"),LJo=o("This class cannot be instantiated directly using "),C_e=a("code"),yJo=o("__init__()"),xJo=o(" (throws an error)."),$Jo=l(),pt=a("div"),F(uy.$$.fragment),kJo=l(),w_e=a("p"),SJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RJo=l(),id=a("p"),PJo=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),BJo=o("not"),IJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),NJo=o("from_pretrained()"),qJo=o(" to load the model weights."),jJo=l(),F(p5.$$.fragment),DJo=l(),lo=a("div"),F(by.$$.fragment),GJo=l(),L_e=a("p"),OJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VJo=l(),Da=a("p"),XJo=o("The model class to instantiate is selected based on the "),y_e=a("code"),zJo=o("model_type"),WJo=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),QJo=o("pretrained_model_name_or_path"),HJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(":"),YJo=l(),ue=a("ul"),_5=a("li"),k_e=a("strong"),KJo=o("beit"),ZJo=o(" \u2014 "),VX=a("a"),eYo=o("BeitForImageClassification"),oYo=o(" (BEiT model)"),rYo=l(),u5=a("li"),S_e=a("strong"),tYo=o("convnext"),aYo=o(" \u2014 "),XX=a("a"),nYo=o("ConvNextForImageClassification"),sYo=o(" (ConvNeXT model)"),lYo=l(),b5=a("li"),R_e=a("strong"),iYo=o("cvt"),dYo=o(" \u2014 "),zX=a("a"),cYo=o("CvtForImageClassification"),fYo=o(" (CvT model)"),mYo=l(),v5=a("li"),P_e=a("strong"),gYo=o("data2vec-vision"),hYo=o(" \u2014 "),WX=a("a"),pYo=o("Data2VecVisionForImageClassification"),_Yo=o(" (Data2VecVision model)"),uYo=l(),Bs=a("li"),B_e=a("strong"),bYo=o("deit"),vYo=o(" \u2014 "),QX=a("a"),FYo=o("DeiTForImageClassification"),TYo=o(" or "),HX=a("a"),MYo=o("DeiTForImageClassificationWithTeacher"),EYo=o(" (DeiT model)"),CYo=l(),F5=a("li"),I_e=a("strong"),wYo=o("imagegpt"),AYo=o(" \u2014 "),UX=a("a"),LYo=o("ImageGPTForImageClassification"),yYo=o(" (ImageGPT model)"),xYo=l(),Is=a("li"),N_e=a("strong"),$Yo=o("levit"),kYo=o(" \u2014 "),JX=a("a"),SYo=o("LevitForImageClassification"),RYo=o(" or "),YX=a("a"),PYo=o("LevitForImageClassificationWithTeacher"),BYo=o(" (LeViT model)"),IYo=l(),T5=a("li"),q_e=a("strong"),NYo=o("mobilevit"),qYo=o(" \u2014 "),KX=a("a"),jYo=o("MobileViTForImageClassification"),DYo=o(" (MobileViT model)"),GYo=l(),_t=a("li"),j_e=a("strong"),OYo=o("perceiver"),VYo=o(" \u2014 "),ZX=a("a"),XYo=o("PerceiverForImageClassificationLearned"),zYo=o(" or "),ez=a("a"),WYo=o("PerceiverForImageClassificationFourier"),QYo=o(" or "),oz=a("a"),HYo=o("PerceiverForImageClassificationConvProcessing"),UYo=o(" (Perceiver model)"),JYo=l(),M5=a("li"),D_e=a("strong"),YYo=o("poolformer"),KYo=o(" \u2014 "),rz=a("a"),ZYo=o("PoolFormerForImageClassification"),eKo=o(" (PoolFormer model)"),oKo=l(),E5=a("li"),G_e=a("strong"),rKo=o("regnet"),tKo=o(" \u2014 "),tz=a("a"),aKo=o("RegNetForImageClassification"),nKo=o(" (RegNet model)"),sKo=l(),C5=a("li"),O_e=a("strong"),lKo=o("resnet"),iKo=o(" \u2014 "),az=a("a"),dKo=o("ResNetForImageClassification"),cKo=o(" (ResNet model)"),fKo=l(),w5=a("li"),V_e=a("strong"),mKo=o("segformer"),gKo=o(" \u2014 "),nz=a("a"),hKo=o("SegformerForImageClassification"),pKo=o(" (SegFormer model)"),_Ko=l(),A5=a("li"),X_e=a("strong"),uKo=o("swin"),bKo=o(" \u2014 "),sz=a("a"),vKo=o("SwinForImageClassification"),FKo=o(" (Swin Transformer model)"),TKo=l(),L5=a("li"),z_e=a("strong"),MKo=o("van"),EKo=o(" \u2014 "),lz=a("a"),CKo=o("VanForImageClassification"),wKo=o(" (VAN model)"),AKo=l(),y5=a("li"),W_e=a("strong"),LKo=o("vit"),yKo=o(" \u2014 "),iz=a("a"),xKo=o("ViTForImageClassification"),$Ko=o(" (ViT model)"),kKo=l(),x5=a("p"),SKo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),RKo=o("model.eval()"),PKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),BKo=o("model.train()"),IKo=l(),F($5.$$.fragment),qje=l(),dd=a("h2"),k5=a("a"),U_e=a("span"),F(vy.$$.fragment),NKo=l(),J_e=a("span"),qKo=o("AutoModelForVision2Seq"),jje=l(),Do=a("div"),F(Fy.$$.fragment),jKo=l(),cd=a("p"),DKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dz=a("a"),GKo=o("from_pretrained()"),OKo=o(" class method or the "),cz=a("a"),VKo=o("from_config()"),XKo=o(` class
method.`),zKo=l(),Ty=a("p"),WKo=o("This class cannot be instantiated directly using "),Y_e=a("code"),QKo=o("__init__()"),HKo=o(" (throws an error)."),UKo=l(),ut=a("div"),F(My.$$.fragment),JKo=l(),K_e=a("p"),YKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KKo=l(),fd=a("p"),ZKo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),eZo=o("not"),oZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),rZo=o("from_pretrained()"),tZo=o(" to load the model weights."),aZo=l(),F(S5.$$.fragment),nZo=l(),io=a("div"),F(Ey.$$.fragment),sZo=l(),eue=a("p"),lZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iZo=l(),Ga=a("p"),dZo=o("The model class to instantiate is selected based on the "),oue=a("code"),cZo=o("model_type"),fZo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),mZo=o("pretrained_model_name_or_path"),gZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),hZo=o("pretrained_model_name_or_path"),pZo=o(":"),_Zo=l(),aue=a("ul"),R5=a("li"),nue=a("strong"),uZo=o("vision-encoder-decoder"),bZo=o(" \u2014 "),mz=a("a"),vZo=o("VisionEncoderDecoderModel"),FZo=o(" (Vision Encoder decoder model)"),TZo=l(),P5=a("p"),MZo=o("The model is set in evaluation mode by default using "),sue=a("code"),EZo=o("model.eval()"),CZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),wZo=o("model.train()"),AZo=l(),F(B5.$$.fragment),Dje=l(),md=a("h2"),I5=a("a"),iue=a("span"),F(Cy.$$.fragment),LZo=l(),due=a("span"),yZo=o("AutoModelForAudioClassification"),Gje=l(),Go=a("div"),F(wy.$$.fragment),xZo=l(),gd=a("p"),$Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gz=a("a"),kZo=o("from_pretrained()"),SZo=o(" class method or the "),hz=a("a"),RZo=o("from_config()"),PZo=o(` class
method.`),BZo=l(),Ay=a("p"),IZo=o("This class cannot be instantiated directly using "),cue=a("code"),NZo=o("__init__()"),qZo=o(" (throws an error)."),jZo=l(),bt=a("div"),F(Ly.$$.fragment),DZo=l(),fue=a("p"),GZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),OZo=l(),hd=a("p"),VZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),XZo=o("not"),zZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),WZo=o("from_pretrained()"),QZo=o(" to load the model weights."),HZo=l(),F(N5.$$.fragment),UZo=l(),co=a("div"),F(yy.$$.fragment),JZo=l(),gue=a("p"),YZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),KZo=l(),Oa=a("p"),ZZo=o("The model class to instantiate is selected based on the "),hue=a("code"),eer=o("model_type"),oer=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(":"),ser=l(),Se=a("ul"),q5=a("li"),uue=a("strong"),ler=o("data2vec-audio"),ier=o(" \u2014 "),_z=a("a"),der=o("Data2VecAudioForSequenceClassification"),cer=o(" (Data2VecAudio model)"),fer=l(),j5=a("li"),bue=a("strong"),mer=o("hubert"),ger=o(" \u2014 "),uz=a("a"),her=o("HubertForSequenceClassification"),per=o(" (Hubert model)"),_er=l(),D5=a("li"),vue=a("strong"),uer=o("sew"),ber=o(" \u2014 "),bz=a("a"),ver=o("SEWForSequenceClassification"),Fer=o(" (SEW model)"),Ter=l(),G5=a("li"),Fue=a("strong"),Mer=o("sew-d"),Eer=o(" \u2014 "),vz=a("a"),Cer=o("SEWDForSequenceClassification"),wer=o(" (SEW-D model)"),Aer=l(),O5=a("li"),Tue=a("strong"),Ler=o("unispeech"),yer=o(" \u2014 "),Fz=a("a"),xer=o("UniSpeechForSequenceClassification"),$er=o(" (UniSpeech model)"),ker=l(),V5=a("li"),Mue=a("strong"),Ser=o("unispeech-sat"),Rer=o(" \u2014 "),Tz=a("a"),Per=o("UniSpeechSatForSequenceClassification"),Ber=o(" (UniSpeechSat model)"),Ier=l(),X5=a("li"),Eue=a("strong"),Ner=o("wav2vec2"),qer=o(" \u2014 "),Mz=a("a"),jer=o("Wav2Vec2ForSequenceClassification"),Der=o(" (Wav2Vec2 model)"),Ger=l(),z5=a("li"),Cue=a("strong"),Oer=o("wav2vec2-conformer"),Ver=o(" \u2014 "),Ez=a("a"),Xer=o("Wav2Vec2ConformerForSequenceClassification"),zer=o(" (Wav2Vec2-Conformer model)"),Wer=l(),W5=a("li"),wue=a("strong"),Qer=o("wavlm"),Her=o(" \u2014 "),Cz=a("a"),Uer=o("WavLMForSequenceClassification"),Jer=o(" (WavLM model)"),Yer=l(),Q5=a("p"),Ker=o("The model is set in evaluation mode by default using "),Aue=a("code"),Zer=o("model.eval()"),eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),oor=o("model.train()"),ror=l(),F(H5.$$.fragment),Oje=l(),pd=a("h2"),U5=a("a"),yue=a("span"),F(xy.$$.fragment),tor=l(),xue=a("span"),aor=o("AutoModelForAudioFrameClassification"),Vje=l(),Oo=a("div"),F($y.$$.fragment),nor=l(),_d=a("p"),sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wz=a("a"),lor=o("from_pretrained()"),ior=o(" class method or the "),Az=a("a"),dor=o("from_config()"),cor=o(` class
method.`),mor=l(),ky=a("p"),gor=o("This class cannot be instantiated directly using "),$ue=a("code"),hor=o("__init__()"),por=o(" (throws an error)."),_or=l(),vt=a("div"),F(Sy.$$.fragment),uor=l(),kue=a("p"),bor=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vor=l(),ud=a("p"),For=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Tor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Eor=o("from_pretrained()"),Cor=o(" to load the model weights."),wor=l(),F(J5.$$.fragment),Aor=l(),fo=a("div"),F(Ry.$$.fragment),Lor=l(),Rue=a("p"),yor=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xor=l(),Va=a("p"),$or=o("The model class to instantiate is selected based on the "),Pue=a("code"),kor=o("model_type"),Sor=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Ror=o("pretrained_model_name_or_path"),Por=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Bor=o("pretrained_model_name_or_path"),Ior=o(":"),Nor=l(),Kr=a("ul"),Y5=a("li"),Nue=a("strong"),qor=o("data2vec-audio"),jor=o(" \u2014 "),yz=a("a"),Dor=o("Data2VecAudioForAudioFrameClassification"),Gor=o(" (Data2VecAudio model)"),Oor=l(),K5=a("li"),que=a("strong"),Vor=o("unispeech-sat"),Xor=o(" \u2014 "),xz=a("a"),zor=o("UniSpeechSatForAudioFrameClassification"),Wor=o(" (UniSpeechSat model)"),Qor=l(),Z5=a("li"),jue=a("strong"),Hor=o("wav2vec2"),Uor=o(" \u2014 "),$z=a("a"),Jor=o("Wav2Vec2ForAudioFrameClassification"),Yor=o(" (Wav2Vec2 model)"),Kor=l(),e3=a("li"),Due=a("strong"),Zor=o("wav2vec2-conformer"),err=o(" \u2014 "),kz=a("a"),orr=o("Wav2Vec2ConformerForAudioFrameClassification"),rrr=o(" (Wav2Vec2-Conformer model)"),trr=l(),o3=a("li"),Gue=a("strong"),arr=o("wavlm"),nrr=o(" \u2014 "),Sz=a("a"),srr=o("WavLMForAudioFrameClassification"),lrr=o(" (WavLM model)"),irr=l(),r3=a("p"),drr=o("The model is set in evaluation mode by default using "),Oue=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),mrr=o("model.train()"),grr=l(),F(t3.$$.fragment),Xje=l(),bd=a("h2"),a3=a("a"),Xue=a("span"),F(Py.$$.fragment),hrr=l(),zue=a("span"),prr=o("AutoModelForCTC"),zje=l(),Vo=a("div"),F(By.$$.fragment),_rr=l(),vd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Rz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),Pz=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),Iy=a("p"),Err=o("This class cannot be instantiated directly using "),Wue=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Ft=a("div"),F(Ny.$$.fragment),Lrr=l(),Que=a("p"),yrr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xrr=l(),Fd=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(n3.$$.fragment),Irr=l(),mo=a("div"),F(qy.$$.fragment),Nrr=l(),Uue=a("p"),qrr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jrr=l(),Xa=a("p"),Drr=o("The model class to instantiate is selected based on the "),Jue=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),Re=a("ul"),s3=a("li"),Zue=a("strong"),Hrr=o("data2vec-audio"),Urr=o(" \u2014 "),Iz=a("a"),Jrr=o("Data2VecAudioForCTC"),Yrr=o(" (Data2VecAudio model)"),Krr=l(),l3=a("li"),e1e=a("strong"),Zrr=o("hubert"),etr=o(" \u2014 "),Nz=a("a"),otr=o("HubertForCTC"),rtr=o(" (Hubert model)"),ttr=l(),i3=a("li"),o1e=a("strong"),atr=o("sew"),ntr=o(" \u2014 "),qz=a("a"),str=o("SEWForCTC"),ltr=o(" (SEW model)"),itr=l(),d3=a("li"),r1e=a("strong"),dtr=o("sew-d"),ctr=o(" \u2014 "),jz=a("a"),ftr=o("SEWDForCTC"),mtr=o(" (SEW-D model)"),gtr=l(),c3=a("li"),t1e=a("strong"),htr=o("unispeech"),ptr=o(" \u2014 "),Dz=a("a"),_tr=o("UniSpeechForCTC"),utr=o(" (UniSpeech model)"),btr=l(),f3=a("li"),a1e=a("strong"),vtr=o("unispeech-sat"),Ftr=o(" \u2014 "),Gz=a("a"),Ttr=o("UniSpeechSatForCTC"),Mtr=o(" (UniSpeechSat model)"),Etr=l(),m3=a("li"),n1e=a("strong"),Ctr=o("wav2vec2"),wtr=o(" \u2014 "),Oz=a("a"),Atr=o("Wav2Vec2ForCTC"),Ltr=o(" (Wav2Vec2 model)"),ytr=l(),g3=a("li"),s1e=a("strong"),xtr=o("wav2vec2-conformer"),$tr=o(" \u2014 "),Vz=a("a"),ktr=o("Wav2Vec2ConformerForCTC"),Str=o(" (Wav2Vec2-Conformer model)"),Rtr=l(),h3=a("li"),l1e=a("strong"),Ptr=o("wavlm"),Btr=o(" \u2014 "),Xz=a("a"),Itr=o("WavLMForCTC"),Ntr=o(" (WavLM model)"),qtr=l(),p3=a("p"),jtr=o("The model is set in evaluation mode by default using "),i1e=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=a("code"),Otr=o("model.train()"),Vtr=l(),F(_3.$$.fragment),Wje=l(),Td=a("h2"),u3=a("a"),c1e=a("span"),F(jy.$$.fragment),Xtr=l(),f1e=a("span"),ztr=o("AutoModelForSpeechSeq2Seq"),Qje=l(),Xo=a("div"),F(Dy.$$.fragment),Wtr=l(),Md=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zz=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),Wz=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),Gy=a("p"),Ztr=o("This class cannot be instantiated directly using "),m1e=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),Tt=a("div"),F(Oy.$$.fragment),tar=l(),g1e=a("p"),aar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nar=l(),Ed=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),far=l(),F(b3.$$.fragment),mar=l(),go=a("div"),F(Vy.$$.fragment),gar=l(),p1e=a("p"),har=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),par=l(),za=a("p"),_ar=o("The model class to instantiate is selected based on the "),_1e=a("code"),uar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),Xy=a("ul"),v3=a("li"),v1e=a("strong"),war=o("speech-encoder-decoder"),Aar=o(" \u2014 "),Hz=a("a"),Lar=o("SpeechEncoderDecoderModel"),yar=o(" (Speech Encoder decoder model)"),xar=l(),F3=a("li"),F1e=a("strong"),$ar=o("speech_to_text"),kar=o(" \u2014 "),Uz=a("a"),Sar=o("Speech2TextForConditionalGeneration"),Rar=o(" (Speech2Text model)"),Par=l(),T3=a("p"),Bar=o("The model is set in evaluation mode by default using "),T1e=a("code"),Iar=o("model.eval()"),Nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=a("code"),qar=o("model.train()"),jar=l(),F(M3.$$.fragment),Hje=l(),Cd=a("h2"),E3=a("a"),E1e=a("span"),F(zy.$$.fragment),Dar=l(),C1e=a("span"),Gar=o("AutoModelForAudioXVector"),Uje=l(),zo=a("div"),F(Wy.$$.fragment),Oar=l(),wd=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jz=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),Yz=a("a"),War=o("from_config()"),Qar=o(` class
method.`),Har=l(),Qy=a("p"),Uar=o("This class cannot be instantiated directly using "),w1e=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),Mt=a("div"),F(Hy.$$.fragment),Zar=l(),A1e=a("p"),enr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),onr=l(),Ad=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),F(C3.$$.fragment),inr=l(),ho=a("div"),F(Uy.$$.fragment),dnr=l(),y1e=a("p"),cnr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fnr=l(),Wa=a("p"),mnr=o("The model class to instantiate is selected based on the "),x1e=a("code"),gnr=o("model_type"),hnr=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(":"),vnr=l(),Zr=a("ul"),w3=a("li"),S1e=a("strong"),Fnr=o("data2vec-audio"),Tnr=o(" \u2014 "),Zz=a("a"),Mnr=o("Data2VecAudioForXVector"),Enr=o(" (Data2VecAudio model)"),Cnr=l(),A3=a("li"),R1e=a("strong"),wnr=o("unispeech-sat"),Anr=o(" \u2014 "),eW=a("a"),Lnr=o("UniSpeechSatForXVector"),ynr=o(" (UniSpeechSat model)"),xnr=l(),L3=a("li"),P1e=a("strong"),$nr=o("wav2vec2"),knr=o(" \u2014 "),oW=a("a"),Snr=o("Wav2Vec2ForXVector"),Rnr=o(" (Wav2Vec2 model)"),Pnr=l(),y3=a("li"),B1e=a("strong"),Bnr=o("wav2vec2-conformer"),Inr=o(" \u2014 "),rW=a("a"),Nnr=o("Wav2Vec2ConformerForXVector"),qnr=o(" (Wav2Vec2-Conformer model)"),jnr=l(),x3=a("li"),I1e=a("strong"),Dnr=o("wavlm"),Gnr=o(" \u2014 "),tW=a("a"),Onr=o("WavLMForXVector"),Vnr=o(" (WavLM model)"),Xnr=l(),$3=a("p"),znr=o("The model is set in evaluation mode by default using "),N1e=a("code"),Wnr=o("model.eval()"),Qnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),Hnr=o("model.train()"),Unr=l(),F(k3.$$.fragment),Jje=l(),Ld=a("h2"),S3=a("a"),j1e=a("span"),F(Jy.$$.fragment),Jnr=l(),D1e=a("span"),Ynr=o("AutoModelForMaskedImageModeling"),Yje=l(),Wo=a("div"),F(Yy.$$.fragment),Knr=l(),yd=a("p"),Znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aW=a("a"),esr=o("from_pretrained()"),osr=o(" class method or the "),nW=a("a"),rsr=o("from_config()"),tsr=o(` class
method.`),asr=l(),Ky=a("p"),nsr=o("This class cannot be instantiated directly using "),G1e=a("code"),ssr=o("__init__()"),lsr=o(" (throws an error)."),isr=l(),Et=a("div"),F(Zy.$$.fragment),dsr=l(),O1e=a("p"),csr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fsr=l(),xd=a("p"),msr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),gsr=o("not"),hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),psr=o("from_pretrained()"),_sr=o(" to load the model weights."),usr=l(),F(R3.$$.fragment),bsr=l(),po=a("div"),F(e8.$$.fragment),vsr=l(),X1e=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tsr=l(),Qa=a("p"),Msr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Esr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(":"),xsr=l(),$d=a("ul"),P3=a("li"),H1e=a("strong"),$sr=o("deit"),ksr=o(" \u2014 "),lW=a("a"),Ssr=o("DeiTForMaskedImageModeling"),Rsr=o(" (DeiT model)"),Psr=l(),B3=a("li"),U1e=a("strong"),Bsr=o("swin"),Isr=o(" \u2014 "),iW=a("a"),Nsr=o("SwinForMaskedImageModeling"),qsr=o(" (Swin Transformer model)"),jsr=l(),I3=a("li"),J1e=a("strong"),Dsr=o("vit"),Gsr=o(" \u2014 "),dW=a("a"),Osr=o("ViTForMaskedImageModeling"),Vsr=o(" (ViT model)"),Xsr=l(),N3=a("p"),zsr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Wsr=o("model.eval()"),Qsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Hsr=o("model.train()"),Usr=l(),F(q3.$$.fragment),Kje=l(),kd=a("h2"),j3=a("a"),Z1e=a("span"),F(o8.$$.fragment),Jsr=l(),ebe=a("span"),Ysr=o("AutoModelForObjectDetection"),Zje=l(),Qo=a("div"),F(r8.$$.fragment),Ksr=l(),Sd=a("p"),Zsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cW=a("a"),elr=o("from_pretrained()"),olr=o(" class method or the "),fW=a("a"),rlr=o("from_config()"),tlr=o(` class
method.`),alr=l(),t8=a("p"),nlr=o("This class cannot be instantiated directly using "),obe=a("code"),slr=o("__init__()"),llr=o(" (throws an error)."),ilr=l(),Ct=a("div"),F(a8.$$.fragment),dlr=l(),rbe=a("p"),clr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),flr=l(),Rd=a("p"),mlr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),glr=o("not"),hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),plr=o("from_pretrained()"),_lr=o(" to load the model weights."),ulr=l(),F(D3.$$.fragment),blr=l(),_o=a("div"),F(n8.$$.fragment),vlr=l(),abe=a("p"),Flr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Tlr=l(),Ha=a("p"),Mlr=o("The model class to instantiate is selected based on the "),nbe=a("code"),Elr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),Llr=o("pretrained_model_name_or_path"),ylr=o(":"),xlr=l(),s8=a("ul"),G3=a("li"),ibe=a("strong"),$lr=o("detr"),klr=o(" \u2014 "),gW=a("a"),Slr=o("DetrForObjectDetection"),Rlr=o(" (DETR model)"),Plr=l(),O3=a("li"),dbe=a("strong"),Blr=o("yolos"),Ilr=o(" \u2014 "),hW=a("a"),Nlr=o("YolosForObjectDetection"),qlr=o(" (YOLOS model)"),jlr=l(),V3=a("p"),Dlr=o("The model is set in evaluation mode by default using "),cbe=a("code"),Glr=o("model.eval()"),Olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),Vlr=o("model.train()"),Xlr=l(),F(X3.$$.fragment),eDe=l(),Pd=a("h2"),z3=a("a"),mbe=a("span"),F(l8.$$.fragment),zlr=l(),gbe=a("span"),Wlr=o("AutoModelForImageSegmentation"),oDe=l(),Ho=a("div"),F(i8.$$.fragment),Qlr=l(),Bd=a("p"),Hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" class method or the "),_W=a("a"),Ylr=o("from_config()"),Klr=o(` class
method.`),Zlr=l(),d8=a("p"),eir=o("This class cannot be instantiated directly using "),hbe=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),wt=a("div"),F(c8.$$.fragment),air=l(),pbe=a("p"),nir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sir=l(),Id=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),cir=o("from_pretrained()"),fir=o(" to load the model weights."),mir=l(),F(W3.$$.fragment),gir=l(),uo=a("div"),F(f8.$$.fragment),hir=l(),ube=a("p"),pir=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_ir=l(),Ua=a("p"),uir=o("The model class to instantiate is selected based on the "),bbe=a("code"),bir=o("model_type"),vir=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(":"),Cir=l(),Tbe=a("ul"),Q3=a("li"),Mbe=a("strong"),wir=o("detr"),Air=o(" \u2014 "),bW=a("a"),Lir=o("DetrForSegmentation"),yir=o(" (DETR model)"),xir=l(),H3=a("p"),$ir=o("The model is set in evaluation mode by default using "),Ebe=a("code"),kir=o("model.eval()"),Sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),Rir=o("model.train()"),Pir=l(),F(U3.$$.fragment),rDe=l(),Nd=a("h2"),J3=a("a"),wbe=a("span"),F(m8.$$.fragment),Bir=l(),Abe=a("span"),Iir=o("AutoModelForSemanticSegmentation"),tDe=l(),Uo=a("div"),F(g8.$$.fragment),Nir=l(),qd=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vW=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),FW=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),h8=a("p"),Xir=o("This class cannot be instantiated directly using "),Lbe=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),At=a("div"),F(p8.$$.fragment),Hir=l(),ybe=a("p"),Uir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jir=l(),jd=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(Y3.$$.fragment),tdr=l(),bo=a("div"),F(_8.$$.fragment),adr=l(),$be=a("p"),ndr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sdr=l(),Ja=a("p"),ldr=o("The model class to instantiate is selected based on the "),kbe=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),et=a("ul"),K3=a("li"),Pbe=a("strong"),pdr=o("beit"),_dr=o(" \u2014 "),MW=a("a"),udr=o("BeitForSemanticSegmentation"),bdr=o(" (BEiT model)"),vdr=l(),Z3=a("li"),Bbe=a("strong"),Fdr=o("data2vec-vision"),Tdr=o(" \u2014 "),EW=a("a"),Mdr=o("Data2VecVisionForSemanticSegmentation"),Edr=o(" (Data2VecVision model)"),Cdr=l(),eF=a("li"),Ibe=a("strong"),wdr=o("dpt"),Adr=o(" \u2014 "),CW=a("a"),Ldr=o("DPTForSemanticSegmentation"),ydr=o(" (DPT model)"),xdr=l(),oF=a("li"),Nbe=a("strong"),$dr=o("mobilevit"),kdr=o(" \u2014 "),wW=a("a"),Sdr=o("MobileViTForSemanticSegmentation"),Rdr=o(" (MobileViT model)"),Pdr=l(),rF=a("li"),qbe=a("strong"),Bdr=o("segformer"),Idr=o(" \u2014 "),AW=a("a"),Ndr=o("SegformerForSemanticSegmentation"),qdr=o(" (SegFormer model)"),jdr=l(),tF=a("p"),Ddr=o("The model is set in evaluation mode by default using "),jbe=a("code"),Gdr=o("model.eval()"),Odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),Vdr=o("model.train()"),Xdr=l(),F(aF.$$.fragment),aDe=l(),Dd=a("h2"),nF=a("a"),Gbe=a("span"),F(u8.$$.fragment),zdr=l(),Obe=a("span"),Wdr=o("AutoModelForInstanceSegmentation"),nDe=l(),Jo=a("div"),F(b8.$$.fragment),Qdr=l(),Gd=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),yW=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),v8=a("p"),ecr=o("This class cannot be instantiated directly using "),Vbe=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),Lt=a("div"),F(F8.$$.fragment),acr=l(),Xbe=a("p"),ncr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),scr=l(),Od=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),F(sF.$$.fragment),gcr=l(),vo=a("div"),F(T8.$$.fragment),hcr=l(),Wbe=a("p"),pcr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_cr=l(),Ya=a("p"),ucr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),bcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(":"),Ccr=l(),Jbe=a("ul"),lF=a("li"),Ybe=a("strong"),wcr=o("maskformer"),Acr=o(" \u2014 "),$W=a("a"),Lcr=o("MaskFormerForInstanceSegmentation"),ycr=o(" (MaskFormer model)"),xcr=l(),iF=a("p"),$cr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),kcr=o("model.eval()"),Scr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),Rcr=o("model.train()"),Pcr=l(),F(dF.$$.fragment),sDe=l(),Vd=a("h2"),cF=a("a"),e2e=a("span"),F(M8.$$.fragment),Bcr=l(),o2e=a("span"),Icr=o("TFAutoModel"),lDe=l(),Yo=a("div"),F(E8.$$.fragment),Ncr=l(),Xd=a("p"),qcr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=a("a"),jcr=o("from_pretrained()"),Dcr=o(" class method or the "),SW=a("a"),Gcr=o("from_config()"),Ocr=o(` class
method.`),Vcr=l(),C8=a("p"),Xcr=o("This class cannot be instantiated directly using "),r2e=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),yt=a("div"),F(w8.$$.fragment),Hcr=l(),t2e=a("p"),Ucr=o("Instantiates one of the base model classes of the library from a configuration."),Jcr=l(),zd=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),efr=o("from_pretrained()"),ofr=o(" to load the model weights."),rfr=l(),F(fF.$$.fragment),tfr=l(),wr=a("div"),F(A8.$$.fragment),afr=l(),n2e=a("p"),nfr=o("Instantiate one of the base model classes of the library from a pretrained model."),sfr=l(),Ka=a("p"),lfr=o("The model class to instantiate is selected based on the "),s2e=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),cfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),q=a("ul"),mF=a("li"),d2e=a("strong"),pfr=o("albert"),_fr=o(" \u2014 "),PW=a("a"),ufr=o("TFAlbertModel"),bfr=o(" (ALBERT model)"),vfr=l(),gF=a("li"),c2e=a("strong"),Ffr=o("bart"),Tfr=o(" \u2014 "),BW=a("a"),Mfr=o("TFBartModel"),Efr=o(" (BART model)"),Cfr=l(),hF=a("li"),f2e=a("strong"),wfr=o("bert"),Afr=o(" \u2014 "),IW=a("a"),Lfr=o("TFBertModel"),yfr=o(" (BERT model)"),xfr=l(),pF=a("li"),m2e=a("strong"),$fr=o("blenderbot"),kfr=o(" \u2014 "),NW=a("a"),Sfr=o("TFBlenderbotModel"),Rfr=o(" (Blenderbot model)"),Pfr=l(),_F=a("li"),g2e=a("strong"),Bfr=o("blenderbot-small"),Ifr=o(" \u2014 "),qW=a("a"),Nfr=o("TFBlenderbotSmallModel"),qfr=o(" (BlenderbotSmall model)"),jfr=l(),uF=a("li"),h2e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),jW=a("a"),Ofr=o("TFCamembertModel"),Vfr=o(" (CamemBERT model)"),Xfr=l(),bF=a("li"),p2e=a("strong"),zfr=o("clip"),Wfr=o(" \u2014 "),DW=a("a"),Qfr=o("TFCLIPModel"),Hfr=o(" (CLIP model)"),Ufr=l(),vF=a("li"),_2e=a("strong"),Jfr=o("convbert"),Yfr=o(" \u2014 "),GW=a("a"),Kfr=o("TFConvBertModel"),Zfr=o(" (ConvBERT model)"),emr=l(),FF=a("li"),u2e=a("strong"),omr=o("convnext"),rmr=o(" \u2014 "),OW=a("a"),tmr=o("TFConvNextModel"),amr=o(" (ConvNeXT model)"),nmr=l(),TF=a("li"),b2e=a("strong"),smr=o("ctrl"),lmr=o(" \u2014 "),VW=a("a"),imr=o("TFCTRLModel"),dmr=o(" (CTRL model)"),cmr=l(),MF=a("li"),v2e=a("strong"),fmr=o("data2vec-vision"),mmr=o(" \u2014 "),XW=a("a"),gmr=o("TFData2VecVisionModel"),hmr=o(" (Data2VecVision model)"),pmr=l(),EF=a("li"),F2e=a("strong"),_mr=o("deberta"),umr=o(" \u2014 "),zW=a("a"),bmr=o("TFDebertaModel"),vmr=o(" (DeBERTa model)"),Fmr=l(),CF=a("li"),T2e=a("strong"),Tmr=o("deberta-v2"),Mmr=o(" \u2014 "),WW=a("a"),Emr=o("TFDebertaV2Model"),Cmr=o(" (DeBERTa-v2 model)"),wmr=l(),wF=a("li"),M2e=a("strong"),Amr=o("distilbert"),Lmr=o(" \u2014 "),QW=a("a"),ymr=o("TFDistilBertModel"),xmr=o(" (DistilBERT model)"),$mr=l(),AF=a("li"),E2e=a("strong"),kmr=o("dpr"),Smr=o(" \u2014 "),HW=a("a"),Rmr=o("TFDPRQuestionEncoder"),Pmr=o(" (DPR model)"),Bmr=l(),LF=a("li"),C2e=a("strong"),Imr=o("electra"),Nmr=o(" \u2014 "),UW=a("a"),qmr=o("TFElectraModel"),jmr=o(" (ELECTRA model)"),Dmr=l(),yF=a("li"),w2e=a("strong"),Gmr=o("flaubert"),Omr=o(" \u2014 "),JW=a("a"),Vmr=o("TFFlaubertModel"),Xmr=o(" (FlauBERT model)"),zmr=l(),Ns=a("li"),A2e=a("strong"),Wmr=o("funnel"),Qmr=o(" \u2014 "),YW=a("a"),Hmr=o("TFFunnelModel"),Umr=o(" or "),KW=a("a"),Jmr=o("TFFunnelBaseModel"),Ymr=o(" (Funnel Transformer model)"),Kmr=l(),xF=a("li"),L2e=a("strong"),Zmr=o("gpt2"),egr=o(" \u2014 "),ZW=a("a"),ogr=o("TFGPT2Model"),rgr=o(" (OpenAI GPT-2 model)"),tgr=l(),$F=a("li"),y2e=a("strong"),agr=o("gptj"),ngr=o(" \u2014 "),eQ=a("a"),sgr=o("TFGPTJModel"),lgr=o(" (GPT-J model)"),igr=l(),kF=a("li"),x2e=a("strong"),dgr=o("hubert"),cgr=o(" \u2014 "),oQ=a("a"),fgr=o("TFHubertModel"),mgr=o(" (Hubert model)"),ggr=l(),SF=a("li"),$2e=a("strong"),hgr=o("layoutlm"),pgr=o(" \u2014 "),rQ=a("a"),_gr=o("TFLayoutLMModel"),ugr=o(" (LayoutLM model)"),bgr=l(),RF=a("li"),k2e=a("strong"),vgr=o("led"),Fgr=o(" \u2014 "),tQ=a("a"),Tgr=o("TFLEDModel"),Mgr=o(" (LED model)"),Egr=l(),PF=a("li"),S2e=a("strong"),Cgr=o("longformer"),wgr=o(" \u2014 "),aQ=a("a"),Agr=o("TFLongformerModel"),Lgr=o(" (Longformer model)"),ygr=l(),BF=a("li"),R2e=a("strong"),xgr=o("lxmert"),$gr=o(" \u2014 "),nQ=a("a"),kgr=o("TFLxmertModel"),Sgr=o(" (LXMERT model)"),Rgr=l(),IF=a("li"),P2e=a("strong"),Pgr=o("marian"),Bgr=o(" \u2014 "),sQ=a("a"),Igr=o("TFMarianModel"),Ngr=o(" (Marian model)"),qgr=l(),NF=a("li"),B2e=a("strong"),jgr=o("mbart"),Dgr=o(" \u2014 "),lQ=a("a"),Ggr=o("TFMBartModel"),Ogr=o(" (mBART model)"),Vgr=l(),qF=a("li"),I2e=a("strong"),Xgr=o("mobilebert"),zgr=o(" \u2014 "),iQ=a("a"),Wgr=o("TFMobileBertModel"),Qgr=o(" (MobileBERT model)"),Hgr=l(),jF=a("li"),N2e=a("strong"),Ugr=o("mpnet"),Jgr=o(" \u2014 "),dQ=a("a"),Ygr=o("TFMPNetModel"),Kgr=o(" (MPNet model)"),Zgr=l(),DF=a("li"),q2e=a("strong"),ehr=o("mt5"),ohr=o(" \u2014 "),cQ=a("a"),rhr=o("TFMT5Model"),thr=o(" (MT5 model)"),ahr=l(),GF=a("li"),j2e=a("strong"),nhr=o("openai-gpt"),shr=o(" \u2014 "),fQ=a("a"),lhr=o("TFOpenAIGPTModel"),ihr=o(" (OpenAI GPT model)"),dhr=l(),OF=a("li"),D2e=a("strong"),chr=o("opt"),fhr=o(" \u2014 "),mQ=a("a"),mhr=o("TFOPTModel"),ghr=o(" (OPT model)"),hhr=l(),VF=a("li"),G2e=a("strong"),phr=o("pegasus"),_hr=o(" \u2014 "),gQ=a("a"),uhr=o("TFPegasusModel"),bhr=o(" (Pegasus model)"),vhr=l(),XF=a("li"),O2e=a("strong"),Fhr=o("rembert"),Thr=o(" \u2014 "),hQ=a("a"),Mhr=o("TFRemBertModel"),Ehr=o(" (RemBERT model)"),Chr=l(),zF=a("li"),V2e=a("strong"),whr=o("roberta"),Ahr=o(" \u2014 "),pQ=a("a"),Lhr=o("TFRobertaModel"),yhr=o(" (RoBERTa model)"),xhr=l(),WF=a("li"),X2e=a("strong"),$hr=o("roformer"),khr=o(" \u2014 "),_Q=a("a"),Shr=o("TFRoFormerModel"),Rhr=o(" (RoFormer model)"),Phr=l(),QF=a("li"),z2e=a("strong"),Bhr=o("speech_to_text"),Ihr=o(" \u2014 "),uQ=a("a"),Nhr=o("TFSpeech2TextModel"),qhr=o(" (Speech2Text model)"),jhr=l(),HF=a("li"),W2e=a("strong"),Dhr=o("swin"),Ghr=o(" \u2014 "),bQ=a("a"),Ohr=o("TFSwinModel"),Vhr=o(" (Swin Transformer model)"),Xhr=l(),UF=a("li"),Q2e=a("strong"),zhr=o("t5"),Whr=o(" \u2014 "),vQ=a("a"),Qhr=o("TFT5Model"),Hhr=o(" (T5 model)"),Uhr=l(),JF=a("li"),H2e=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),FQ=a("a"),Khr=o("TFTapasModel"),Zhr=o(" (TAPAS model)"),epr=l(),YF=a("li"),U2e=a("strong"),opr=o("transfo-xl"),rpr=o(" \u2014 "),TQ=a("a"),tpr=o("TFTransfoXLModel"),apr=o(" (Transformer-XL model)"),npr=l(),KF=a("li"),J2e=a("strong"),spr=o("vit"),lpr=o(" \u2014 "),MQ=a("a"),ipr=o("TFViTModel"),dpr=o(" (ViT model)"),cpr=l(),ZF=a("li"),Y2e=a("strong"),fpr=o("vit_mae"),mpr=o(" \u2014 "),EQ=a("a"),gpr=o("TFViTMAEModel"),hpr=o(" (ViTMAE model)"),ppr=l(),eT=a("li"),K2e=a("strong"),_pr=o("wav2vec2"),upr=o(" \u2014 "),CQ=a("a"),bpr=o("TFWav2Vec2Model"),vpr=o(" (Wav2Vec2 model)"),Fpr=l(),oT=a("li"),Z2e=a("strong"),Tpr=o("xlm"),Mpr=o(" \u2014 "),wQ=a("a"),Epr=o("TFXLMModel"),Cpr=o(" (XLM model)"),wpr=l(),rT=a("li"),e4e=a("strong"),Apr=o("xlm-roberta"),Lpr=o(" \u2014 "),AQ=a("a"),ypr=o("TFXLMRobertaModel"),xpr=o(" (XLM-RoBERTa model)"),$pr=l(),tT=a("li"),o4e=a("strong"),kpr=o("xlnet"),Spr=o(" \u2014 "),LQ=a("a"),Rpr=o("TFXLNetModel"),Ppr=o(" (XLNet model)"),Bpr=l(),F(aT.$$.fragment),iDe=l(),Wd=a("h2"),nT=a("a"),r4e=a("span"),F(L8.$$.fragment),Ipr=l(),t4e=a("span"),Npr=o("TFAutoModelForPreTraining"),dDe=l(),Ko=a("div"),F(y8.$$.fragment),qpr=l(),Qd=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),xQ=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),x8=a("p"),zpr=o("This class cannot be instantiated directly using "),a4e=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),xt=a("div"),F($8.$$.fragment),Upr=l(),n4e=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ypr=l(),Hd=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),o_r=o("from_pretrained()"),r_r=o(" to load the model weights."),t_r=l(),F(sT.$$.fragment),a_r=l(),Ar=a("div"),F(k8.$$.fragment),n_r=l(),l4e=a("p"),s_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l_r=l(),Za=a("p"),i_r=o("The model class to instantiate is selected based on the "),i4e=a("code"),d_r=o("model_type"),c_r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(":"),p_r=l(),se=a("ul"),lT=a("li"),f4e=a("strong"),__r=o("albert"),u_r=o(" \u2014 "),kQ=a("a"),b_r=o("TFAlbertForPreTraining"),v_r=o(" (ALBERT model)"),F_r=l(),iT=a("li"),m4e=a("strong"),T_r=o("bart"),M_r=o(" \u2014 "),SQ=a("a"),E_r=o("TFBartForConditionalGeneration"),C_r=o(" (BART model)"),w_r=l(),dT=a("li"),g4e=a("strong"),A_r=o("bert"),L_r=o(" \u2014 "),RQ=a("a"),y_r=o("TFBertForPreTraining"),x_r=o(" (BERT model)"),$_r=l(),cT=a("li"),h4e=a("strong"),k_r=o("camembert"),S_r=o(" \u2014 "),PQ=a("a"),R_r=o("TFCamembertForMaskedLM"),P_r=o(" (CamemBERT model)"),B_r=l(),fT=a("li"),p4e=a("strong"),I_r=o("ctrl"),N_r=o(" \u2014 "),BQ=a("a"),q_r=o("TFCTRLLMHeadModel"),j_r=o(" (CTRL model)"),D_r=l(),mT=a("li"),_4e=a("strong"),G_r=o("distilbert"),O_r=o(" \u2014 "),IQ=a("a"),V_r=o("TFDistilBertForMaskedLM"),X_r=o(" (DistilBERT model)"),z_r=l(),gT=a("li"),u4e=a("strong"),W_r=o("electra"),Q_r=o(" \u2014 "),NQ=a("a"),H_r=o("TFElectraForPreTraining"),U_r=o(" (ELECTRA model)"),J_r=l(),hT=a("li"),b4e=a("strong"),Y_r=o("flaubert"),K_r=o(" \u2014 "),qQ=a("a"),Z_r=o("TFFlaubertWithLMHeadModel"),eur=o(" (FlauBERT model)"),our=l(),pT=a("li"),v4e=a("strong"),rur=o("funnel"),tur=o(" \u2014 "),jQ=a("a"),aur=o("TFFunnelForPreTraining"),nur=o(" (Funnel Transformer model)"),sur=l(),_T=a("li"),F4e=a("strong"),lur=o("gpt2"),iur=o(" \u2014 "),DQ=a("a"),dur=o("TFGPT2LMHeadModel"),cur=o(" (OpenAI GPT-2 model)"),fur=l(),uT=a("li"),T4e=a("strong"),mur=o("layoutlm"),gur=o(" \u2014 "),GQ=a("a"),hur=o("TFLayoutLMForMaskedLM"),pur=o(" (LayoutLM model)"),_ur=l(),bT=a("li"),M4e=a("strong"),uur=o("lxmert"),bur=o(" \u2014 "),OQ=a("a"),vur=o("TFLxmertForPreTraining"),Fur=o(" (LXMERT model)"),Tur=l(),vT=a("li"),E4e=a("strong"),Mur=o("mobilebert"),Eur=o(" \u2014 "),VQ=a("a"),Cur=o("TFMobileBertForPreTraining"),wur=o(" (MobileBERT model)"),Aur=l(),FT=a("li"),C4e=a("strong"),Lur=o("mpnet"),yur=o(" \u2014 "),XQ=a("a"),xur=o("TFMPNetForMaskedLM"),$ur=o(" (MPNet model)"),kur=l(),TT=a("li"),w4e=a("strong"),Sur=o("openai-gpt"),Rur=o(" \u2014 "),zQ=a("a"),Pur=o("TFOpenAIGPTLMHeadModel"),Bur=o(" (OpenAI GPT model)"),Iur=l(),MT=a("li"),A4e=a("strong"),Nur=o("roberta"),qur=o(" \u2014 "),WQ=a("a"),jur=o("TFRobertaForMaskedLM"),Dur=o(" (RoBERTa model)"),Gur=l(),ET=a("li"),L4e=a("strong"),Our=o("t5"),Vur=o(" \u2014 "),QQ=a("a"),Xur=o("TFT5ForConditionalGeneration"),zur=o(" (T5 model)"),Wur=l(),CT=a("li"),y4e=a("strong"),Qur=o("tapas"),Hur=o(" \u2014 "),HQ=a("a"),Uur=o("TFTapasForMaskedLM"),Jur=o(" (TAPAS model)"),Yur=l(),wT=a("li"),x4e=a("strong"),Kur=o("transfo-xl"),Zur=o(" \u2014 "),UQ=a("a"),e1r=o("TFTransfoXLLMHeadModel"),o1r=o(" (Transformer-XL model)"),r1r=l(),AT=a("li"),$4e=a("strong"),t1r=o("vit_mae"),a1r=o(" \u2014 "),JQ=a("a"),n1r=o("TFViTMAEForPreTraining"),s1r=o(" (ViTMAE model)"),l1r=l(),LT=a("li"),k4e=a("strong"),i1r=o("xlm"),d1r=o(" \u2014 "),YQ=a("a"),c1r=o("TFXLMWithLMHeadModel"),f1r=o(" (XLM model)"),m1r=l(),yT=a("li"),S4e=a("strong"),g1r=o("xlm-roberta"),h1r=o(" \u2014 "),KQ=a("a"),p1r=o("TFXLMRobertaForMaskedLM"),_1r=o(" (XLM-RoBERTa model)"),u1r=l(),xT=a("li"),R4e=a("strong"),b1r=o("xlnet"),v1r=o(" \u2014 "),ZQ=a("a"),F1r=o("TFXLNetLMHeadModel"),T1r=o(" (XLNet model)"),M1r=l(),F($T.$$.fragment),cDe=l(),Ud=a("h2"),kT=a("a"),P4e=a("span"),F(S8.$$.fragment),E1r=l(),B4e=a("span"),C1r=o("TFAutoModelForCausalLM"),fDe=l(),Zo=a("div"),F(R8.$$.fragment),w1r=l(),Jd=a("p"),A1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=a("a"),L1r=o("from_pretrained()"),y1r=o(" class method or the "),oH=a("a"),x1r=o("from_config()"),$1r=o(` class
method.`),k1r=l(),P8=a("p"),S1r=o("This class cannot be instantiated directly using "),I4e=a("code"),R1r=o("__init__()"),P1r=o(" (throws an error)."),B1r=l(),$t=a("div"),F(B8.$$.fragment),I1r=l(),N4e=a("p"),N1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q1r=l(),Yd=a("p"),j1r=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),D1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),O1r=o("from_pretrained()"),V1r=o(" to load the model weights."),X1r=l(),F(ST.$$.fragment),z1r=l(),Lr=a("div"),F(I8.$$.fragment),W1r=l(),j4e=a("p"),Q1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H1r=l(),en=a("p"),U1r=o("The model class to instantiate is selected based on the "),D4e=a("code"),J1r=o("model_type"),Y1r=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),ebr=o("pretrained_model_name_or_path"),obr=o(":"),rbr=l(),Me=a("ul"),RT=a("li"),V4e=a("strong"),tbr=o("bert"),abr=o(" \u2014 "),tH=a("a"),nbr=o("TFBertLMHeadModel"),sbr=o(" (BERT model)"),lbr=l(),PT=a("li"),X4e=a("strong"),ibr=o("camembert"),dbr=o(" \u2014 "),aH=a("a"),cbr=o("TFCamembertForCausalLM"),fbr=o(" (CamemBERT model)"),mbr=l(),BT=a("li"),z4e=a("strong"),gbr=o("ctrl"),hbr=o(" \u2014 "),nH=a("a"),pbr=o("TFCTRLLMHeadModel"),_br=o(" (CTRL model)"),ubr=l(),IT=a("li"),W4e=a("strong"),bbr=o("gpt2"),vbr=o(" \u2014 "),sH=a("a"),Fbr=o("TFGPT2LMHeadModel"),Tbr=o(" (OpenAI GPT-2 model)"),Mbr=l(),NT=a("li"),Q4e=a("strong"),Ebr=o("gptj"),Cbr=o(" \u2014 "),lH=a("a"),wbr=o("TFGPTJForCausalLM"),Abr=o(" (GPT-J model)"),Lbr=l(),qT=a("li"),H4e=a("strong"),ybr=o("openai-gpt"),xbr=o(" \u2014 "),iH=a("a"),$br=o("TFOpenAIGPTLMHeadModel"),kbr=o(" (OpenAI GPT model)"),Sbr=l(),jT=a("li"),U4e=a("strong"),Rbr=o("opt"),Pbr=o(" \u2014 "),dH=a("a"),Bbr=o("TFOPTForCausalLM"),Ibr=o(" (OPT model)"),Nbr=l(),DT=a("li"),J4e=a("strong"),qbr=o("rembert"),jbr=o(" \u2014 "),cH=a("a"),Dbr=o("TFRemBertForCausalLM"),Gbr=o(" (RemBERT model)"),Obr=l(),GT=a("li"),Y4e=a("strong"),Vbr=o("roberta"),Xbr=o(" \u2014 "),fH=a("a"),zbr=o("TFRobertaForCausalLM"),Wbr=o(" (RoBERTa model)"),Qbr=l(),OT=a("li"),K4e=a("strong"),Hbr=o("roformer"),Ubr=o(" \u2014 "),mH=a("a"),Jbr=o("TFRoFormerForCausalLM"),Ybr=o(" (RoFormer model)"),Kbr=l(),VT=a("li"),Z4e=a("strong"),Zbr=o("transfo-xl"),e2r=o(" \u2014 "),gH=a("a"),o2r=o("TFTransfoXLLMHeadModel"),r2r=o(" (Transformer-XL model)"),t2r=l(),XT=a("li"),eve=a("strong"),a2r=o("xlm"),n2r=o(" \u2014 "),hH=a("a"),s2r=o("TFXLMWithLMHeadModel"),l2r=o(" (XLM model)"),i2r=l(),zT=a("li"),ove=a("strong"),d2r=o("xlnet"),c2r=o(" \u2014 "),pH=a("a"),f2r=o("TFXLNetLMHeadModel"),m2r=o(" (XLNet model)"),g2r=l(),F(WT.$$.fragment),mDe=l(),Kd=a("h2"),QT=a("a"),rve=a("span"),F(N8.$$.fragment),h2r=l(),tve=a("span"),p2r=o("TFAutoModelForImageClassification"),gDe=l(),er=a("div"),F(q8.$$.fragment),_2r=l(),Zd=a("p"),u2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=a("a"),b2r=o("from_pretrained()"),v2r=o(" class method or the "),uH=a("a"),F2r=o("from_config()"),T2r=o(` class
method.`),M2r=l(),j8=a("p"),E2r=o("This class cannot be instantiated directly using "),ave=a("code"),C2r=o("__init__()"),w2r=o(" (throws an error)."),A2r=l(),kt=a("div"),F(D8.$$.fragment),L2r=l(),nve=a("p"),y2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x2r=l(),ec=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),k2r=o("not"),S2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),R2r=o("from_pretrained()"),P2r=o(" to load the model weights."),B2r=l(),F(HT.$$.fragment),I2r=l(),yr=a("div"),F(G8.$$.fragment),N2r=l(),lve=a("p"),q2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j2r=l(),on=a("p"),D2r=o("The model class to instantiate is selected based on the "),ive=a("code"),G2r=o("model_type"),O2r=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(":"),Q2r=l(),rn=a("ul"),UT=a("li"),fve=a("strong"),H2r=o("convnext"),U2r=o(" \u2014 "),vH=a("a"),J2r=o("TFConvNextForImageClassification"),Y2r=o(" (ConvNeXT model)"),K2r=l(),JT=a("li"),mve=a("strong"),Z2r=o("data2vec-vision"),e4r=o(" \u2014 "),FH=a("a"),o4r=o("TFData2VecVisionForImageClassification"),r4r=o(" (Data2VecVision model)"),t4r=l(),YT=a("li"),gve=a("strong"),a4r=o("swin"),n4r=o(" \u2014 "),TH=a("a"),s4r=o("TFSwinForImageClassification"),l4r=o(" (Swin Transformer model)"),i4r=l(),KT=a("li"),hve=a("strong"),d4r=o("vit"),c4r=o(" \u2014 "),MH=a("a"),f4r=o("TFViTForImageClassification"),m4r=o(" (ViT model)"),g4r=l(),F(ZT.$$.fragment),hDe=l(),oc=a("h2"),e7=a("a"),pve=a("span"),F(O8.$$.fragment),h4r=l(),_ve=a("span"),p4r=o("TFAutoModelForMaskedLM"),pDe=l(),or=a("div"),F(V8.$$.fragment),_4r=l(),rc=a("p"),u4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=a("a"),b4r=o("from_pretrained()"),v4r=o(" class method or the "),CH=a("a"),F4r=o("from_config()"),T4r=o(` class
method.`),M4r=l(),X8=a("p"),E4r=o("This class cannot be instantiated directly using "),uve=a("code"),C4r=o("__init__()"),w4r=o(" (throws an error)."),A4r=l(),St=a("div"),F(z8.$$.fragment),L4r=l(),bve=a("p"),y4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x4r=l(),tc=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),k4r=o("not"),S4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),R4r=o("from_pretrained()"),P4r=o(" to load the model weights."),B4r=l(),F(o7.$$.fragment),I4r=l(),xr=a("div"),F(W8.$$.fragment),N4r=l(),Fve=a("p"),q4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j4r=l(),tn=a("p"),D4r=o("The model class to instantiate is selected based on the "),Tve=a("code"),G4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),z4r=o("pretrained_model_name_or_path"),W4r=o(":"),Q4r=l(),ie=a("ul"),r7=a("li"),Cve=a("strong"),H4r=o("albert"),U4r=o(" \u2014 "),AH=a("a"),J4r=o("TFAlbertForMaskedLM"),Y4r=o(" (ALBERT model)"),K4r=l(),t7=a("li"),wve=a("strong"),Z4r=o("bert"),evr=o(" \u2014 "),LH=a("a"),ovr=o("TFBertForMaskedLM"),rvr=o(" (BERT model)"),tvr=l(),a7=a("li"),Ave=a("strong"),avr=o("camembert"),nvr=o(" \u2014 "),yH=a("a"),svr=o("TFCamembertForMaskedLM"),lvr=o(" (CamemBERT model)"),ivr=l(),n7=a("li"),Lve=a("strong"),dvr=o("convbert"),cvr=o(" \u2014 "),xH=a("a"),fvr=o("TFConvBertForMaskedLM"),mvr=o(" (ConvBERT model)"),gvr=l(),s7=a("li"),yve=a("strong"),hvr=o("deberta"),pvr=o(" \u2014 "),$H=a("a"),_vr=o("TFDebertaForMaskedLM"),uvr=o(" (DeBERTa model)"),bvr=l(),l7=a("li"),xve=a("strong"),vvr=o("deberta-v2"),Fvr=o(" \u2014 "),kH=a("a"),Tvr=o("TFDebertaV2ForMaskedLM"),Mvr=o(" (DeBERTa-v2 model)"),Evr=l(),i7=a("li"),$ve=a("strong"),Cvr=o("distilbert"),wvr=o(" \u2014 "),SH=a("a"),Avr=o("TFDistilBertForMaskedLM"),Lvr=o(" (DistilBERT model)"),yvr=l(),d7=a("li"),kve=a("strong"),xvr=o("electra"),$vr=o(" \u2014 "),RH=a("a"),kvr=o("TFElectraForMaskedLM"),Svr=o(" (ELECTRA model)"),Rvr=l(),c7=a("li"),Sve=a("strong"),Pvr=o("flaubert"),Bvr=o(" \u2014 "),PH=a("a"),Ivr=o("TFFlaubertWithLMHeadModel"),Nvr=o(" (FlauBERT model)"),qvr=l(),f7=a("li"),Rve=a("strong"),jvr=o("funnel"),Dvr=o(" \u2014 "),BH=a("a"),Gvr=o("TFFunnelForMaskedLM"),Ovr=o(" (Funnel Transformer model)"),Vvr=l(),m7=a("li"),Pve=a("strong"),Xvr=o("layoutlm"),zvr=o(" \u2014 "),IH=a("a"),Wvr=o("TFLayoutLMForMaskedLM"),Qvr=o(" (LayoutLM model)"),Hvr=l(),g7=a("li"),Bve=a("strong"),Uvr=o("longformer"),Jvr=o(" \u2014 "),NH=a("a"),Yvr=o("TFLongformerForMaskedLM"),Kvr=o(" (Longformer model)"),Zvr=l(),h7=a("li"),Ive=a("strong"),e5r=o("mobilebert"),o5r=o(" \u2014 "),qH=a("a"),r5r=o("TFMobileBertForMaskedLM"),t5r=o(" (MobileBERT model)"),a5r=l(),p7=a("li"),Nve=a("strong"),n5r=o("mpnet"),s5r=o(" \u2014 "),jH=a("a"),l5r=o("TFMPNetForMaskedLM"),i5r=o(" (MPNet model)"),d5r=l(),_7=a("li"),qve=a("strong"),c5r=o("rembert"),f5r=o(" \u2014 "),DH=a("a"),m5r=o("TFRemBertForMaskedLM"),g5r=o(" (RemBERT model)"),h5r=l(),u7=a("li"),jve=a("strong"),p5r=o("roberta"),_5r=o(" \u2014 "),GH=a("a"),u5r=o("TFRobertaForMaskedLM"),b5r=o(" (RoBERTa model)"),v5r=l(),b7=a("li"),Dve=a("strong"),F5r=o("roformer"),T5r=o(" \u2014 "),OH=a("a"),M5r=o("TFRoFormerForMaskedLM"),E5r=o(" (RoFormer model)"),C5r=l(),v7=a("li"),Gve=a("strong"),w5r=o("tapas"),A5r=o(" \u2014 "),VH=a("a"),L5r=o("TFTapasForMaskedLM"),y5r=o(" (TAPAS model)"),x5r=l(),F7=a("li"),Ove=a("strong"),$5r=o("xlm"),k5r=o(" \u2014 "),XH=a("a"),S5r=o("TFXLMWithLMHeadModel"),R5r=o(" (XLM model)"),P5r=l(),T7=a("li"),Vve=a("strong"),B5r=o("xlm-roberta"),I5r=o(" \u2014 "),zH=a("a"),N5r=o("TFXLMRobertaForMaskedLM"),q5r=o(" (XLM-RoBERTa model)"),j5r=l(),F(M7.$$.fragment),_De=l(),ac=a("h2"),E7=a("a"),Xve=a("span"),F(Q8.$$.fragment),D5r=l(),zve=a("span"),G5r=o("TFAutoModelForSeq2SeqLM"),uDe=l(),rr=a("div"),F(H8.$$.fragment),O5r=l(),nc=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),QH=a("a"),W5r=o("from_config()"),Q5r=o(` class
method.`),H5r=l(),U8=a("p"),U5r=o("This class cannot be instantiated directly using "),Wve=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),Rt=a("div"),F(J8.$$.fragment),Z5r=l(),Qve=a("p"),e3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),o3r=l(),sc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(C7.$$.fragment),i3r=l(),$r=a("div"),F(Y8.$$.fragment),d3r=l(),Uve=a("p"),c3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f3r=l(),an=a("p"),m3r=o("The model class to instantiate is selected based on the "),Jve=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),Le=a("ul"),w7=a("li"),Zve=a("strong"),F3r=o("bart"),T3r=o(" \u2014 "),UH=a("a"),M3r=o("TFBartForConditionalGeneration"),E3r=o(" (BART model)"),C3r=l(),A7=a("li"),e5e=a("strong"),w3r=o("blenderbot"),A3r=o(" \u2014 "),JH=a("a"),L3r=o("TFBlenderbotForConditionalGeneration"),y3r=o(" (Blenderbot model)"),x3r=l(),L7=a("li"),o5e=a("strong"),$3r=o("blenderbot-small"),k3r=o(" \u2014 "),YH=a("a"),S3r=o("TFBlenderbotSmallForConditionalGeneration"),R3r=o(" (BlenderbotSmall model)"),P3r=l(),y7=a("li"),r5e=a("strong"),B3r=o("encoder-decoder"),I3r=o(" \u2014 "),KH=a("a"),N3r=o("TFEncoderDecoderModel"),q3r=o(" (Encoder decoder model)"),j3r=l(),x7=a("li"),t5e=a("strong"),D3r=o("led"),G3r=o(" \u2014 "),ZH=a("a"),O3r=o("TFLEDForConditionalGeneration"),V3r=o(" (LED model)"),X3r=l(),$7=a("li"),a5e=a("strong"),z3r=o("marian"),W3r=o(" \u2014 "),eU=a("a"),Q3r=o("TFMarianMTModel"),H3r=o(" (Marian model)"),U3r=l(),k7=a("li"),n5e=a("strong"),J3r=o("mbart"),Y3r=o(" \u2014 "),oU=a("a"),K3r=o("TFMBartForConditionalGeneration"),Z3r=o(" (mBART model)"),eFr=l(),S7=a("li"),s5e=a("strong"),oFr=o("mt5"),rFr=o(" \u2014 "),rU=a("a"),tFr=o("TFMT5ForConditionalGeneration"),aFr=o(" (MT5 model)"),nFr=l(),R7=a("li"),l5e=a("strong"),sFr=o("pegasus"),lFr=o(" \u2014 "),tU=a("a"),iFr=o("TFPegasusForConditionalGeneration"),dFr=o(" (Pegasus model)"),cFr=l(),P7=a("li"),i5e=a("strong"),fFr=o("t5"),mFr=o(" \u2014 "),aU=a("a"),gFr=o("TFT5ForConditionalGeneration"),hFr=o(" (T5 model)"),pFr=l(),F(B7.$$.fragment),bDe=l(),lc=a("h2"),I7=a("a"),d5e=a("span"),F(K8.$$.fragment),_Fr=l(),c5e=a("span"),uFr=o("TFAutoModelForSequenceClassification"),vDe=l(),tr=a("div"),F(Z8.$$.fragment),bFr=l(),ic=a("p"),vFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=a("a"),FFr=o("from_pretrained()"),TFr=o(" class method or the "),sU=a("a"),MFr=o("from_config()"),EFr=o(` class
method.`),CFr=l(),e9=a("p"),wFr=o("This class cannot be instantiated directly using "),f5e=a("code"),AFr=o("__init__()"),LFr=o(" (throws an error)."),yFr=l(),Pt=a("div"),F(o9.$$.fragment),xFr=l(),m5e=a("p"),$Fr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kFr=l(),dc=a("p"),SFr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),RFr=o("not"),PFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),BFr=o("from_pretrained()"),IFr=o(" to load the model weights."),NFr=l(),F(N7.$$.fragment),qFr=l(),kr=a("div"),F(r9.$$.fragment),jFr=l(),h5e=a("p"),DFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GFr=l(),nn=a("p"),OFr=o("The model class to instantiate is selected based on the "),p5e=a("code"),VFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),zFr=o("pretrained_model_name_or_path"),WFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),QFr=o("pretrained_model_name_or_path"),HFr=o(":"),UFr=l(),oe=a("ul"),q7=a("li"),b5e=a("strong"),JFr=o("albert"),YFr=o(" \u2014 "),iU=a("a"),KFr=o("TFAlbertForSequenceClassification"),ZFr=o(" (ALBERT model)"),eTr=l(),j7=a("li"),v5e=a("strong"),oTr=o("bert"),rTr=o(" \u2014 "),dU=a("a"),tTr=o("TFBertForSequenceClassification"),aTr=o(" (BERT model)"),nTr=l(),D7=a("li"),F5e=a("strong"),sTr=o("camembert"),lTr=o(" \u2014 "),cU=a("a"),iTr=o("TFCamembertForSequenceClassification"),dTr=o(" (CamemBERT model)"),cTr=l(),G7=a("li"),T5e=a("strong"),fTr=o("convbert"),mTr=o(" \u2014 "),fU=a("a"),gTr=o("TFConvBertForSequenceClassification"),hTr=o(" (ConvBERT model)"),pTr=l(),O7=a("li"),M5e=a("strong"),_Tr=o("ctrl"),uTr=o(" \u2014 "),mU=a("a"),bTr=o("TFCTRLForSequenceClassification"),vTr=o(" (CTRL model)"),FTr=l(),V7=a("li"),E5e=a("strong"),TTr=o("deberta"),MTr=o(" \u2014 "),gU=a("a"),ETr=o("TFDebertaForSequenceClassification"),CTr=o(" (DeBERTa model)"),wTr=l(),X7=a("li"),C5e=a("strong"),ATr=o("deberta-v2"),LTr=o(" \u2014 "),hU=a("a"),yTr=o("TFDebertaV2ForSequenceClassification"),xTr=o(" (DeBERTa-v2 model)"),$Tr=l(),z7=a("li"),w5e=a("strong"),kTr=o("distilbert"),STr=o(" \u2014 "),pU=a("a"),RTr=o("TFDistilBertForSequenceClassification"),PTr=o(" (DistilBERT model)"),BTr=l(),W7=a("li"),A5e=a("strong"),ITr=o("electra"),NTr=o(" \u2014 "),_U=a("a"),qTr=o("TFElectraForSequenceClassification"),jTr=o(" (ELECTRA model)"),DTr=l(),Q7=a("li"),L5e=a("strong"),GTr=o("flaubert"),OTr=o(" \u2014 "),uU=a("a"),VTr=o("TFFlaubertForSequenceClassification"),XTr=o(" (FlauBERT model)"),zTr=l(),H7=a("li"),y5e=a("strong"),WTr=o("funnel"),QTr=o(" \u2014 "),bU=a("a"),HTr=o("TFFunnelForSequenceClassification"),UTr=o(" (Funnel Transformer model)"),JTr=l(),U7=a("li"),x5e=a("strong"),YTr=o("gpt2"),KTr=o(" \u2014 "),vU=a("a"),ZTr=o("TFGPT2ForSequenceClassification"),e7r=o(" (OpenAI GPT-2 model)"),o7r=l(),J7=a("li"),$5e=a("strong"),r7r=o("gptj"),t7r=o(" \u2014 "),FU=a("a"),a7r=o("TFGPTJForSequenceClassification"),n7r=o(" (GPT-J model)"),s7r=l(),Y7=a("li"),k5e=a("strong"),l7r=o("layoutlm"),i7r=o(" \u2014 "),TU=a("a"),d7r=o("TFLayoutLMForSequenceClassification"),c7r=o(" (LayoutLM model)"),f7r=l(),K7=a("li"),S5e=a("strong"),m7r=o("longformer"),g7r=o(" \u2014 "),MU=a("a"),h7r=o("TFLongformerForSequenceClassification"),p7r=o(" (Longformer model)"),_7r=l(),Z7=a("li"),R5e=a("strong"),u7r=o("mobilebert"),b7r=o(" \u2014 "),EU=a("a"),v7r=o("TFMobileBertForSequenceClassification"),F7r=o(" (MobileBERT model)"),T7r=l(),eM=a("li"),P5e=a("strong"),M7r=o("mpnet"),E7r=o(" \u2014 "),CU=a("a"),C7r=o("TFMPNetForSequenceClassification"),w7r=o(" (MPNet model)"),A7r=l(),oM=a("li"),B5e=a("strong"),L7r=o("openai-gpt"),y7r=o(" \u2014 "),wU=a("a"),x7r=o("TFOpenAIGPTForSequenceClassification"),$7r=o(" (OpenAI GPT model)"),k7r=l(),rM=a("li"),I5e=a("strong"),S7r=o("rembert"),R7r=o(" \u2014 "),AU=a("a"),P7r=o("TFRemBertForSequenceClassification"),B7r=o(" (RemBERT model)"),I7r=l(),tM=a("li"),N5e=a("strong"),N7r=o("roberta"),q7r=o(" \u2014 "),LU=a("a"),j7r=o("TFRobertaForSequenceClassification"),D7r=o(" (RoBERTa model)"),G7r=l(),aM=a("li"),q5e=a("strong"),O7r=o("roformer"),V7r=o(" \u2014 "),yU=a("a"),X7r=o("TFRoFormerForSequenceClassification"),z7r=o(" (RoFormer model)"),W7r=l(),nM=a("li"),j5e=a("strong"),Q7r=o("tapas"),H7r=o(" \u2014 "),xU=a("a"),U7r=o("TFTapasForSequenceClassification"),J7r=o(" (TAPAS model)"),Y7r=l(),sM=a("li"),D5e=a("strong"),K7r=o("transfo-xl"),Z7r=o(" \u2014 "),$U=a("a"),eMr=o("TFTransfoXLForSequenceClassification"),oMr=o(" (Transformer-XL model)"),rMr=l(),lM=a("li"),G5e=a("strong"),tMr=o("xlm"),aMr=o(" \u2014 "),kU=a("a"),nMr=o("TFXLMForSequenceClassification"),sMr=o(" (XLM model)"),lMr=l(),iM=a("li"),O5e=a("strong"),iMr=o("xlm-roberta"),dMr=o(" \u2014 "),SU=a("a"),cMr=o("TFXLMRobertaForSequenceClassification"),fMr=o(" (XLM-RoBERTa model)"),mMr=l(),dM=a("li"),V5e=a("strong"),gMr=o("xlnet"),hMr=o(" \u2014 "),RU=a("a"),pMr=o("TFXLNetForSequenceClassification"),_Mr=o(" (XLNet model)"),uMr=l(),F(cM.$$.fragment),FDe=l(),cc=a("h2"),fM=a("a"),X5e=a("span"),F(t9.$$.fragment),bMr=l(),z5e=a("span"),vMr=o("TFAutoModelForMultipleChoice"),TDe=l(),ar=a("div"),F(a9.$$.fragment),FMr=l(),fc=a("p"),TMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=a("a"),MMr=o("from_pretrained()"),EMr=o(" class method or the "),BU=a("a"),CMr=o("from_config()"),wMr=o(` class
method.`),AMr=l(),n9=a("p"),LMr=o("This class cannot be instantiated directly using "),W5e=a("code"),yMr=o("__init__()"),xMr=o(" (throws an error)."),$Mr=l(),Bt=a("div"),F(s9.$$.fragment),kMr=l(),Q5e=a("p"),SMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RMr=l(),mc=a("p"),PMr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),BMr=o("not"),IMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),NMr=o("from_pretrained()"),qMr=o(" to load the model weights."),jMr=l(),F(mM.$$.fragment),DMr=l(),Sr=a("div"),F(l9.$$.fragment),GMr=l(),U5e=a("p"),OMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VMr=l(),sn=a("p"),XMr=o("The model class to instantiate is selected based on the "),J5e=a("code"),zMr=o("model_type"),WMr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),QMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(":"),YMr=l(),pe=a("ul"),gM=a("li"),Z5e=a("strong"),KMr=o("albert"),ZMr=o(" \u2014 "),NU=a("a"),eEr=o("TFAlbertForMultipleChoice"),oEr=o(" (ALBERT model)"),rEr=l(),hM=a("li"),e3e=a("strong"),tEr=o("bert"),aEr=o(" \u2014 "),qU=a("a"),nEr=o("TFBertForMultipleChoice"),sEr=o(" (BERT model)"),lEr=l(),pM=a("li"),o3e=a("strong"),iEr=o("camembert"),dEr=o(" \u2014 "),jU=a("a"),cEr=o("TFCamembertForMultipleChoice"),fEr=o(" (CamemBERT model)"),mEr=l(),_M=a("li"),r3e=a("strong"),gEr=o("convbert"),hEr=o(" \u2014 "),DU=a("a"),pEr=o("TFConvBertForMultipleChoice"),_Er=o(" (ConvBERT model)"),uEr=l(),uM=a("li"),t3e=a("strong"),bEr=o("distilbert"),vEr=o(" \u2014 "),GU=a("a"),FEr=o("TFDistilBertForMultipleChoice"),TEr=o(" (DistilBERT model)"),MEr=l(),bM=a("li"),a3e=a("strong"),EEr=o("electra"),CEr=o(" \u2014 "),OU=a("a"),wEr=o("TFElectraForMultipleChoice"),AEr=o(" (ELECTRA model)"),LEr=l(),vM=a("li"),n3e=a("strong"),yEr=o("flaubert"),xEr=o(" \u2014 "),VU=a("a"),$Er=o("TFFlaubertForMultipleChoice"),kEr=o(" (FlauBERT model)"),SEr=l(),FM=a("li"),s3e=a("strong"),REr=o("funnel"),PEr=o(" \u2014 "),XU=a("a"),BEr=o("TFFunnelForMultipleChoice"),IEr=o(" (Funnel Transformer model)"),NEr=l(),TM=a("li"),l3e=a("strong"),qEr=o("longformer"),jEr=o(" \u2014 "),zU=a("a"),DEr=o("TFLongformerForMultipleChoice"),GEr=o(" (Longformer model)"),OEr=l(),MM=a("li"),i3e=a("strong"),VEr=o("mobilebert"),XEr=o(" \u2014 "),WU=a("a"),zEr=o("TFMobileBertForMultipleChoice"),WEr=o(" (MobileBERT model)"),QEr=l(),EM=a("li"),d3e=a("strong"),HEr=o("mpnet"),UEr=o(" \u2014 "),QU=a("a"),JEr=o("TFMPNetForMultipleChoice"),YEr=o(" (MPNet model)"),KEr=l(),CM=a("li"),c3e=a("strong"),ZEr=o("rembert"),eCr=o(" \u2014 "),HU=a("a"),oCr=o("TFRemBertForMultipleChoice"),rCr=o(" (RemBERT model)"),tCr=l(),wM=a("li"),f3e=a("strong"),aCr=o("roberta"),nCr=o(" \u2014 "),UU=a("a"),sCr=o("TFRobertaForMultipleChoice"),lCr=o(" (RoBERTa model)"),iCr=l(),AM=a("li"),m3e=a("strong"),dCr=o("roformer"),cCr=o(" \u2014 "),JU=a("a"),fCr=o("TFRoFormerForMultipleChoice"),mCr=o(" (RoFormer model)"),gCr=l(),LM=a("li"),g3e=a("strong"),hCr=o("xlm"),pCr=o(" \u2014 "),YU=a("a"),_Cr=o("TFXLMForMultipleChoice"),uCr=o(" (XLM model)"),bCr=l(),yM=a("li"),h3e=a("strong"),vCr=o("xlm-roberta"),FCr=o(" \u2014 "),KU=a("a"),TCr=o("TFXLMRobertaForMultipleChoice"),MCr=o(" (XLM-RoBERTa model)"),ECr=l(),xM=a("li"),p3e=a("strong"),CCr=o("xlnet"),wCr=o(" \u2014 "),ZU=a("a"),ACr=o("TFXLNetForMultipleChoice"),LCr=o(" (XLNet model)"),yCr=l(),F($M.$$.fragment),MDe=l(),gc=a("h2"),kM=a("a"),_3e=a("span"),F(i9.$$.fragment),xCr=l(),u3e=a("span"),$Cr=o("TFAutoModelForNextSentencePrediction"),EDe=l(),nr=a("div"),F(d9.$$.fragment),kCr=l(),hc=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),RCr=o("from_pretrained()"),PCr=o(" class method or the "),oJ=a("a"),BCr=o("from_config()"),ICr=o(` class
method.`),NCr=l(),c9=a("p"),qCr=o("This class cannot be instantiated directly using "),b3e=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),It=a("div"),F(f9.$$.fragment),OCr=l(),v3e=a("p"),VCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XCr=l(),pc=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),HCr=o("from_pretrained()"),UCr=o(" to load the model weights."),JCr=l(),F(SM.$$.fragment),YCr=l(),Rr=a("div"),F(m9.$$.fragment),KCr=l(),T3e=a("p"),ZCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e0r=l(),ln=a("p"),o0r=o("The model class to instantiate is selected based on the "),M3e=a("code"),r0r=o("model_type"),t0r=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(":"),i0r=l(),g9=a("ul"),RM=a("li"),w3e=a("strong"),d0r=o("bert"),c0r=o(" \u2014 "),tJ=a("a"),f0r=o("TFBertForNextSentencePrediction"),m0r=o(" (BERT model)"),g0r=l(),PM=a("li"),A3e=a("strong"),h0r=o("mobilebert"),p0r=o(" \u2014 "),aJ=a("a"),_0r=o("TFMobileBertForNextSentencePrediction"),u0r=o(" (MobileBERT model)"),b0r=l(),F(BM.$$.fragment),CDe=l(),_c=a("h2"),IM=a("a"),L3e=a("span"),F(h9.$$.fragment),v0r=l(),y3e=a("span"),F0r=o("TFAutoModelForTableQuestionAnswering"),wDe=l(),sr=a("div"),F(p9.$$.fragment),T0r=l(),uc=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),sJ=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),L0r=l(),_9=a("p"),y0r=o("This class cannot be instantiated directly using "),x3e=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),Nt=a("div"),F(u9.$$.fragment),S0r=l(),$3e=a("p"),R0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P0r=l(),bc=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),I0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),q0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(NM.$$.fragment),G0r=l(),Pr=a("div"),F(b9.$$.fragment),O0r=l(),S3e=a("p"),V0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X0r=l(),dn=a("p"),z0r=o("The model class to instantiate is selected based on the "),R3e=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),I3e=a("ul"),qM=a("li"),N3e=a("strong"),Z0r=o("tapas"),ewr=o(" \u2014 "),iJ=a("a"),owr=o("TFTapasForQuestionAnswering"),rwr=o(" (TAPAS model)"),twr=l(),F(jM.$$.fragment),ADe=l(),vc=a("h2"),DM=a("a"),q3e=a("span"),F(v9.$$.fragment),awr=l(),j3e=a("span"),nwr=o("TFAutoModelForTokenClassification"),LDe=l(),lr=a("div"),F(F9.$$.fragment),swr=l(),Fc=a("p"),lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=a("a"),iwr=o("from_pretrained()"),dwr=o(" class method or the "),cJ=a("a"),cwr=o("from_config()"),fwr=o(` class
method.`),mwr=l(),T9=a("p"),gwr=o("This class cannot be instantiated directly using "),D3e=a("code"),hwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),qt=a("div"),F(M9.$$.fragment),uwr=l(),G3e=a("p"),bwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vwr=l(),Tc=a("p"),Fwr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),Twr=o("not"),Mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" to load the model weights."),wwr=l(),F(GM.$$.fragment),Awr=l(),Br=a("div"),F(E9.$$.fragment),Lwr=l(),V3e=a("p"),ywr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xwr=l(),cn=a("p"),$wr=o("The model class to instantiate is selected based on the "),X3e=a("code"),kwr=o("model_type"),Swr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),Rwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(":"),Nwr=l(),de=a("ul"),OM=a("li"),Q3e=a("strong"),qwr=o("albert"),jwr=o(" \u2014 "),mJ=a("a"),Dwr=o("TFAlbertForTokenClassification"),Gwr=o(" (ALBERT model)"),Owr=l(),VM=a("li"),H3e=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),gJ=a("a"),zwr=o("TFBertForTokenClassification"),Wwr=o(" (BERT model)"),Qwr=l(),XM=a("li"),U3e=a("strong"),Hwr=o("camembert"),Uwr=o(" \u2014 "),hJ=a("a"),Jwr=o("TFCamembertForTokenClassification"),Ywr=o(" (CamemBERT model)"),Kwr=l(),zM=a("li"),J3e=a("strong"),Zwr=o("convbert"),eAr=o(" \u2014 "),pJ=a("a"),oAr=o("TFConvBertForTokenClassification"),rAr=o(" (ConvBERT model)"),tAr=l(),WM=a("li"),Y3e=a("strong"),aAr=o("deberta"),nAr=o(" \u2014 "),_J=a("a"),sAr=o("TFDebertaForTokenClassification"),lAr=o(" (DeBERTa model)"),iAr=l(),QM=a("li"),K3e=a("strong"),dAr=o("deberta-v2"),cAr=o(" \u2014 "),uJ=a("a"),fAr=o("TFDebertaV2ForTokenClassification"),mAr=o(" (DeBERTa-v2 model)"),gAr=l(),HM=a("li"),Z3e=a("strong"),hAr=o("distilbert"),pAr=o(" \u2014 "),bJ=a("a"),_Ar=o("TFDistilBertForTokenClassification"),uAr=o(" (DistilBERT model)"),bAr=l(),UM=a("li"),eFe=a("strong"),vAr=o("electra"),FAr=o(" \u2014 "),vJ=a("a"),TAr=o("TFElectraForTokenClassification"),MAr=o(" (ELECTRA model)"),EAr=l(),JM=a("li"),oFe=a("strong"),CAr=o("flaubert"),wAr=o(" \u2014 "),FJ=a("a"),AAr=o("TFFlaubertForTokenClassification"),LAr=o(" (FlauBERT model)"),yAr=l(),YM=a("li"),rFe=a("strong"),xAr=o("funnel"),$Ar=o(" \u2014 "),TJ=a("a"),kAr=o("TFFunnelForTokenClassification"),SAr=o(" (Funnel Transformer model)"),RAr=l(),KM=a("li"),tFe=a("strong"),PAr=o("layoutlm"),BAr=o(" \u2014 "),MJ=a("a"),IAr=o("TFLayoutLMForTokenClassification"),NAr=o(" (LayoutLM model)"),qAr=l(),ZM=a("li"),aFe=a("strong"),jAr=o("longformer"),DAr=o(" \u2014 "),EJ=a("a"),GAr=o("TFLongformerForTokenClassification"),OAr=o(" (Longformer model)"),VAr=l(),eE=a("li"),nFe=a("strong"),XAr=o("mobilebert"),zAr=o(" \u2014 "),CJ=a("a"),WAr=o("TFMobileBertForTokenClassification"),QAr=o(" (MobileBERT model)"),HAr=l(),oE=a("li"),sFe=a("strong"),UAr=o("mpnet"),JAr=o(" \u2014 "),wJ=a("a"),YAr=o("TFMPNetForTokenClassification"),KAr=o(" (MPNet model)"),ZAr=l(),rE=a("li"),lFe=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),AJ=a("a"),r6r=o("TFRemBertForTokenClassification"),t6r=o(" (RemBERT model)"),a6r=l(),tE=a("li"),iFe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),LJ=a("a"),l6r=o("TFRobertaForTokenClassification"),i6r=o(" (RoBERTa model)"),d6r=l(),aE=a("li"),dFe=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),yJ=a("a"),m6r=o("TFRoFormerForTokenClassification"),g6r=o(" (RoFormer model)"),h6r=l(),nE=a("li"),cFe=a("strong"),p6r=o("xlm"),_6r=o(" \u2014 "),xJ=a("a"),u6r=o("TFXLMForTokenClassification"),b6r=o(" (XLM model)"),v6r=l(),sE=a("li"),fFe=a("strong"),F6r=o("xlm-roberta"),T6r=o(" \u2014 "),$J=a("a"),M6r=o("TFXLMRobertaForTokenClassification"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),lE=a("li"),mFe=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),kJ=a("a"),L6r=o("TFXLNetForTokenClassification"),y6r=o(" (XLNet model)"),x6r=l(),F(iE.$$.fragment),yDe=l(),Mc=a("h2"),dE=a("a"),gFe=a("span"),F(C9.$$.fragment),$6r=l(),hFe=a("span"),k6r=o("TFAutoModelForQuestionAnswering"),xDe=l(),ir=a("div"),F(w9.$$.fragment),S6r=l(),Ec=a("p"),R6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=a("a"),P6r=o("from_pretrained()"),B6r=o(" class method or the "),RJ=a("a"),I6r=o("from_config()"),N6r=o(` class
method.`),q6r=l(),A9=a("p"),j6r=o("This class cannot be instantiated directly using "),pFe=a("code"),D6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),jt=a("div"),F(L9.$$.fragment),V6r=l(),_Fe=a("p"),X6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z6r=l(),Cc=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Q6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" to load the model weights."),Y6r=l(),F(cE.$$.fragment),K6r=l(),Ir=a("div"),F(y9.$$.fragment),Z6r=l(),bFe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oLr=l(),fn=a("p"),rLr=o("The model class to instantiate is selected based on the "),vFe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),ce=a("ul"),fE=a("li"),MFe=a("strong"),cLr=o("albert"),fLr=o(" \u2014 "),BJ=a("a"),mLr=o("TFAlbertForQuestionAnswering"),gLr=o(" (ALBERT model)"),hLr=l(),mE=a("li"),EFe=a("strong"),pLr=o("bert"),_Lr=o(" \u2014 "),IJ=a("a"),uLr=o("TFBertForQuestionAnswering"),bLr=o(" (BERT model)"),vLr=l(),gE=a("li"),CFe=a("strong"),FLr=o("camembert"),TLr=o(" \u2014 "),NJ=a("a"),MLr=o("TFCamembertForQuestionAnswering"),ELr=o(" (CamemBERT model)"),CLr=l(),hE=a("li"),wFe=a("strong"),wLr=o("convbert"),ALr=o(" \u2014 "),qJ=a("a"),LLr=o("TFConvBertForQuestionAnswering"),yLr=o(" (ConvBERT model)"),xLr=l(),pE=a("li"),AFe=a("strong"),$Lr=o("deberta"),kLr=o(" \u2014 "),jJ=a("a"),SLr=o("TFDebertaForQuestionAnswering"),RLr=o(" (DeBERTa model)"),PLr=l(),_E=a("li"),LFe=a("strong"),BLr=o("deberta-v2"),ILr=o(" \u2014 "),DJ=a("a"),NLr=o("TFDebertaV2ForQuestionAnswering"),qLr=o(" (DeBERTa-v2 model)"),jLr=l(),uE=a("li"),yFe=a("strong"),DLr=o("distilbert"),GLr=o(" \u2014 "),GJ=a("a"),OLr=o("TFDistilBertForQuestionAnswering"),VLr=o(" (DistilBERT model)"),XLr=l(),bE=a("li"),xFe=a("strong"),zLr=o("electra"),WLr=o(" \u2014 "),OJ=a("a"),QLr=o("TFElectraForQuestionAnswering"),HLr=o(" (ELECTRA model)"),ULr=l(),vE=a("li"),$Fe=a("strong"),JLr=o("flaubert"),YLr=o(" \u2014 "),VJ=a("a"),KLr=o("TFFlaubertForQuestionAnsweringSimple"),ZLr=o(" (FlauBERT model)"),eyr=l(),FE=a("li"),kFe=a("strong"),oyr=o("funnel"),ryr=o(" \u2014 "),XJ=a("a"),tyr=o("TFFunnelForQuestionAnswering"),ayr=o(" (Funnel Transformer model)"),nyr=l(),TE=a("li"),SFe=a("strong"),syr=o("gptj"),lyr=o(" \u2014 "),zJ=a("a"),iyr=o("TFGPTJForQuestionAnswering"),dyr=o(" (GPT-J model)"),cyr=l(),ME=a("li"),RFe=a("strong"),fyr=o("longformer"),myr=o(" \u2014 "),WJ=a("a"),gyr=o("TFLongformerForQuestionAnswering"),hyr=o(" (Longformer model)"),pyr=l(),EE=a("li"),PFe=a("strong"),_yr=o("mobilebert"),uyr=o(" \u2014 "),QJ=a("a"),byr=o("TFMobileBertForQuestionAnswering"),vyr=o(" (MobileBERT model)"),Fyr=l(),CE=a("li"),BFe=a("strong"),Tyr=o("mpnet"),Myr=o(" \u2014 "),HJ=a("a"),Eyr=o("TFMPNetForQuestionAnswering"),Cyr=o(" (MPNet model)"),wyr=l(),wE=a("li"),IFe=a("strong"),Ayr=o("rembert"),Lyr=o(" \u2014 "),UJ=a("a"),yyr=o("TFRemBertForQuestionAnswering"),xyr=o(" (RemBERT model)"),$yr=l(),AE=a("li"),NFe=a("strong"),kyr=o("roberta"),Syr=o(" \u2014 "),JJ=a("a"),Ryr=o("TFRobertaForQuestionAnswering"),Pyr=o(" (RoBERTa model)"),Byr=l(),LE=a("li"),qFe=a("strong"),Iyr=o("roformer"),Nyr=o(" \u2014 "),YJ=a("a"),qyr=o("TFRoFormerForQuestionAnswering"),jyr=o(" (RoFormer model)"),Dyr=l(),yE=a("li"),jFe=a("strong"),Gyr=o("xlm"),Oyr=o(" \u2014 "),KJ=a("a"),Vyr=o("TFXLMForQuestionAnsweringSimple"),Xyr=o(" (XLM model)"),zyr=l(),xE=a("li"),DFe=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),ZJ=a("a"),Hyr=o("TFXLMRobertaForQuestionAnswering"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),$E=a("li"),GFe=a("strong"),Yyr=o("xlnet"),Kyr=o(" \u2014 "),eY=a("a"),Zyr=o("TFXLNetForQuestionAnsweringSimple"),e8r=o(" (XLNet model)"),o8r=l(),F(kE.$$.fragment),$De=l(),wc=a("h2"),SE=a("a"),OFe=a("span"),F(x9.$$.fragment),r8r=l(),VFe=a("span"),t8r=o("TFAutoModelForVision2Seq"),kDe=l(),dr=a("div"),F($9.$$.fragment),a8r=l(),Ac=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),rY=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),k9=a("p"),f8r=o("This class cannot be instantiated directly using "),XFe=a("code"),m8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),Dt=a("div"),F(S9.$$.fragment),p8r=l(),zFe=a("p"),_8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u8r=l(),Lc=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(RE.$$.fragment),C8r=l(),Nr=a("div"),F(R9.$$.fragment),w8r=l(),QFe=a("p"),A8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L8r=l(),mn=a("p"),y8r=o("The model class to instantiate is selected based on the "),HFe=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),R8r=o("pretrained_model_name_or_path"),P8r=o(":"),B8r=l(),YFe=a("ul"),PE=a("li"),KFe=a("strong"),I8r=o("vision-encoder-decoder"),N8r=o(" \u2014 "),aY=a("a"),q8r=o("TFVisionEncoderDecoderModel"),j8r=o(" (Vision Encoder decoder model)"),D8r=l(),F(BE.$$.fragment),SDe=l(),yc=a("h2"),IE=a("a"),ZFe=a("span"),F(P9.$$.fragment),G8r=l(),eTe=a("span"),O8r=o("TFAutoModelForSpeechSeq2Seq"),RDe=l(),cr=a("div"),F(B9.$$.fragment),V8r=l(),xc=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),sY=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),I9=a("p"),J8r=o("This class cannot be instantiated directly using "),oTe=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),Gt=a("div"),F(N9.$$.fragment),e9r=l(),rTe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),r9r=l(),$c=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),F(NE.$$.fragment),d9r=l(),qr=a("div"),F(q9.$$.fragment),c9r=l(),aTe=a("p"),f9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m9r=l(),gn=a("p"),g9r=o("The model class to instantiate is selected based on the "),nTe=a("code"),h9r=o("model_type"),p9r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),_9r=o("pretrained_model_name_or_path"),u9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(":"),F9r=l(),iTe=a("ul"),qE=a("li"),dTe=a("strong"),T9r=o("speech_to_text"),M9r=o(" \u2014 "),iY=a("a"),E9r=o("TFSpeech2TextForConditionalGeneration"),C9r=o(" (Speech2Text model)"),w9r=l(),F(jE.$$.fragment),PDe=l(),kc=a("h2"),DE=a("a"),cTe=a("span"),F(j9.$$.fragment),A9r=l(),fTe=a("span"),L9r=o("FlaxAutoModel"),BDe=l(),fr=a("div"),F(D9.$$.fragment),y9r=l(),Sc=a("p"),x9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=a("a"),$9r=o("from_pretrained()"),k9r=o(" class method or the "),cY=a("a"),S9r=o("from_config()"),R9r=o(` class
method.`),P9r=l(),G9=a("p"),B9r=o("This class cannot be instantiated directly using "),mTe=a("code"),I9r=o("__init__()"),N9r=o(" (throws an error)."),q9r=l(),Ot=a("div"),F(O9.$$.fragment),j9r=l(),gTe=a("p"),D9r=o("Instantiates one of the base model classes of the library from a configuration."),G9r=l(),Rc=a("p"),O9r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),V9r=o("not"),X9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),z9r=o("from_pretrained()"),W9r=o(" to load the model weights."),Q9r=l(),F(GE.$$.fragment),H9r=l(),jr=a("div"),F(V9.$$.fragment),U9r=l(),pTe=a("p"),J9r=o("Instantiate one of the base model classes of the library from a pretrained model."),Y9r=l(),hn=a("p"),K9r=o("The model class to instantiate is selected based on the "),_Te=a("code"),Z9r=o("model_type"),exr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),oxr=o("pretrained_model_name_or_path"),rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(":"),nxr=l(),re=a("ul"),OE=a("li"),vTe=a("strong"),sxr=o("albert"),lxr=o(" \u2014 "),mY=a("a"),ixr=o("FlaxAlbertModel"),dxr=o(" (ALBERT model)"),cxr=l(),VE=a("li"),FTe=a("strong"),fxr=o("bart"),mxr=o(" \u2014 "),gY=a("a"),gxr=o("FlaxBartModel"),hxr=o(" (BART model)"),pxr=l(),XE=a("li"),TTe=a("strong"),_xr=o("beit"),uxr=o(" \u2014 "),hY=a("a"),bxr=o("FlaxBeitModel"),vxr=o(" (BEiT model)"),Fxr=l(),zE=a("li"),MTe=a("strong"),Txr=o("bert"),Mxr=o(" \u2014 "),pY=a("a"),Exr=o("FlaxBertModel"),Cxr=o(" (BERT model)"),wxr=l(),WE=a("li"),ETe=a("strong"),Axr=o("big_bird"),Lxr=o(" \u2014 "),_Y=a("a"),yxr=o("FlaxBigBirdModel"),xxr=o(" (BigBird model)"),$xr=l(),QE=a("li"),CTe=a("strong"),kxr=o("blenderbot"),Sxr=o(" \u2014 "),uY=a("a"),Rxr=o("FlaxBlenderbotModel"),Pxr=o(" (Blenderbot model)"),Bxr=l(),HE=a("li"),wTe=a("strong"),Ixr=o("blenderbot-small"),Nxr=o(" \u2014 "),bY=a("a"),qxr=o("FlaxBlenderbotSmallModel"),jxr=o(" (BlenderbotSmall model)"),Dxr=l(),UE=a("li"),ATe=a("strong"),Gxr=o("clip"),Oxr=o(" \u2014 "),vY=a("a"),Vxr=o("FlaxCLIPModel"),Xxr=o(" (CLIP model)"),zxr=l(),JE=a("li"),LTe=a("strong"),Wxr=o("distilbert"),Qxr=o(" \u2014 "),FY=a("a"),Hxr=o("FlaxDistilBertModel"),Uxr=o(" (DistilBERT model)"),Jxr=l(),YE=a("li"),yTe=a("strong"),Yxr=o("electra"),Kxr=o(" \u2014 "),TY=a("a"),Zxr=o("FlaxElectraModel"),e$r=o(" (ELECTRA model)"),o$r=l(),KE=a("li"),xTe=a("strong"),r$r=o("gpt2"),t$r=o(" \u2014 "),MY=a("a"),a$r=o("FlaxGPT2Model"),n$r=o(" (OpenAI GPT-2 model)"),s$r=l(),ZE=a("li"),$Te=a("strong"),l$r=o("gpt_neo"),i$r=o(" \u2014 "),EY=a("a"),d$r=o("FlaxGPTNeoModel"),c$r=o(" (GPT Neo model)"),f$r=l(),eC=a("li"),kTe=a("strong"),m$r=o("gptj"),g$r=o(" \u2014 "),CY=a("a"),h$r=o("FlaxGPTJModel"),p$r=o(" (GPT-J model)"),_$r=l(),oC=a("li"),STe=a("strong"),u$r=o("marian"),b$r=o(" \u2014 "),wY=a("a"),v$r=o("FlaxMarianModel"),F$r=o(" (Marian model)"),T$r=l(),rC=a("li"),RTe=a("strong"),M$r=o("mbart"),E$r=o(" \u2014 "),AY=a("a"),C$r=o("FlaxMBartModel"),w$r=o(" (mBART model)"),A$r=l(),tC=a("li"),PTe=a("strong"),L$r=o("mt5"),y$r=o(" \u2014 "),LY=a("a"),x$r=o("FlaxMT5Model"),$$r=o(" (MT5 model)"),k$r=l(),aC=a("li"),BTe=a("strong"),S$r=o("opt"),R$r=o(" \u2014 "),yY=a("a"),P$r=o("FlaxOPTModel"),B$r=o(" (OPT model)"),I$r=l(),nC=a("li"),ITe=a("strong"),N$r=o("pegasus"),q$r=o(" \u2014 "),xY=a("a"),j$r=o("FlaxPegasusModel"),D$r=o(" (Pegasus model)"),G$r=l(),sC=a("li"),NTe=a("strong"),O$r=o("roberta"),V$r=o(" \u2014 "),$Y=a("a"),X$r=o("FlaxRobertaModel"),z$r=o(" (RoBERTa model)"),W$r=l(),lC=a("li"),qTe=a("strong"),Q$r=o("roformer"),H$r=o(" \u2014 "),kY=a("a"),U$r=o("FlaxRoFormerModel"),J$r=o(" (RoFormer model)"),Y$r=l(),iC=a("li"),jTe=a("strong"),K$r=o("t5"),Z$r=o(" \u2014 "),SY=a("a"),ekr=o("FlaxT5Model"),okr=o(" (T5 model)"),rkr=l(),dC=a("li"),DTe=a("strong"),tkr=o("vision-text-dual-encoder"),akr=o(" \u2014 "),RY=a("a"),nkr=o("FlaxVisionTextDualEncoderModel"),skr=o(" (VisionTextDualEncoder model)"),lkr=l(),cC=a("li"),GTe=a("strong"),ikr=o("vit"),dkr=o(" \u2014 "),PY=a("a"),ckr=o("FlaxViTModel"),fkr=o(" (ViT model)"),mkr=l(),fC=a("li"),OTe=a("strong"),gkr=o("wav2vec2"),hkr=o(" \u2014 "),BY=a("a"),pkr=o("FlaxWav2Vec2Model"),_kr=o(" (Wav2Vec2 model)"),ukr=l(),mC=a("li"),VTe=a("strong"),bkr=o("xglm"),vkr=o(" \u2014 "),IY=a("a"),Fkr=o("FlaxXGLMModel"),Tkr=o(" (XGLM model)"),Mkr=l(),gC=a("li"),XTe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),NY=a("a"),wkr=o("FlaxXLMRobertaModel"),Akr=o(" (XLM-RoBERTa model)"),Lkr=l(),F(hC.$$.fragment),IDe=l(),Pc=a("h2"),pC=a("a"),zTe=a("span"),F(X9.$$.fragment),ykr=l(),WTe=a("span"),xkr=o("FlaxAutoModelForCausalLM"),NDe=l(),mr=a("div"),F(z9.$$.fragment),$kr=l(),Bc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),jY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),W9=a("p"),Nkr=o("This class cannot be instantiated directly using "),QTe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(Q9.$$.fragment),Gkr=l(),HTe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vkr=l(),Ic=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(_C.$$.fragment),Jkr=l(),Dr=a("div"),F(H9.$$.fragment),Ykr=l(),JTe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zkr=l(),pn=a("p"),eSr=o("The model class to instantiate is selected based on the "),YTe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),ye=a("ul"),uC=a("li"),e7e=a("strong"),iSr=o("bart"),dSr=o(" \u2014 "),GY=a("a"),cSr=o("FlaxBartForCausalLM"),fSr=o(" (BART model)"),mSr=l(),bC=a("li"),o7e=a("strong"),gSr=o("bert"),hSr=o(" \u2014 "),OY=a("a"),pSr=o("FlaxBertForCausalLM"),_Sr=o(" (BERT model)"),uSr=l(),vC=a("li"),r7e=a("strong"),bSr=o("big_bird"),vSr=o(" \u2014 "),VY=a("a"),FSr=o("FlaxBigBirdForCausalLM"),TSr=o(" (BigBird model)"),MSr=l(),FC=a("li"),t7e=a("strong"),ESr=o("electra"),CSr=o(" \u2014 "),XY=a("a"),wSr=o("FlaxElectraForCausalLM"),ASr=o(" (ELECTRA model)"),LSr=l(),TC=a("li"),a7e=a("strong"),ySr=o("gpt2"),xSr=o(" \u2014 "),zY=a("a"),$Sr=o("FlaxGPT2LMHeadModel"),kSr=o(" (OpenAI GPT-2 model)"),SSr=l(),MC=a("li"),n7e=a("strong"),RSr=o("gpt_neo"),PSr=o(" \u2014 "),WY=a("a"),BSr=o("FlaxGPTNeoForCausalLM"),ISr=o(" (GPT Neo model)"),NSr=l(),EC=a("li"),s7e=a("strong"),qSr=o("gptj"),jSr=o(" \u2014 "),QY=a("a"),DSr=o("FlaxGPTJForCausalLM"),GSr=o(" (GPT-J model)"),OSr=l(),CC=a("li"),l7e=a("strong"),VSr=o("opt"),XSr=o(" \u2014 "),HY=a("a"),zSr=o("FlaxOPTForCausalLM"),WSr=o(" (OPT model)"),QSr=l(),wC=a("li"),i7e=a("strong"),HSr=o("roberta"),USr=o(" \u2014 "),UY=a("a"),JSr=o("FlaxRobertaForCausalLM"),YSr=o(" (RoBERTa model)"),KSr=l(),AC=a("li"),d7e=a("strong"),ZSr=o("xglm"),eRr=o(" \u2014 "),JY=a("a"),oRr=o("FlaxXGLMForCausalLM"),rRr=o(" (XGLM model)"),tRr=l(),F(LC.$$.fragment),qDe=l(),Nc=a("h2"),yC=a("a"),c7e=a("span"),F(U9.$$.fragment),aRr=l(),f7e=a("span"),nRr=o("FlaxAutoModelForPreTraining"),jDe=l(),gr=a("div"),F(J9.$$.fragment),sRr=l(),qc=a("p"),lRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=a("a"),iRr=o("from_pretrained()"),dRr=o(" class method or the "),KY=a("a"),cRr=o("from_config()"),fRr=o(` class
method.`),mRr=l(),Y9=a("p"),gRr=o("This class cannot be instantiated directly using "),m7e=a("code"),hRr=o("__init__()"),pRr=o(" (throws an error)."),_Rr=l(),Xt=a("div"),F(K9.$$.fragment),uRr=l(),g7e=a("p"),bRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vRr=l(),jc=a("p"),FRr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),TRr=o("not"),MRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),ERr=o("from_pretrained()"),CRr=o(" to load the model weights."),wRr=l(),F(xC.$$.fragment),ARr=l(),Gr=a("div"),F(Z9.$$.fragment),LRr=l(),p7e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xRr=l(),_n=a("p"),$Rr=o("The model class to instantiate is selected based on the "),_7e=a("code"),kRr=o("model_type"),SRr=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),RRr=o("pretrained_model_name_or_path"),PRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),BRr=o("pretrained_model_name_or_path"),IRr=o(":"),NRr=l(),Ee=a("ul"),$C=a("li"),v7e=a("strong"),qRr=o("albert"),jRr=o(" \u2014 "),eK=a("a"),DRr=o("FlaxAlbertForPreTraining"),GRr=o(" (ALBERT model)"),ORr=l(),kC=a("li"),F7e=a("strong"),VRr=o("bart"),XRr=o(" \u2014 "),oK=a("a"),zRr=o("FlaxBartForConditionalGeneration"),WRr=o(" (BART model)"),QRr=l(),SC=a("li"),T7e=a("strong"),HRr=o("bert"),URr=o(" \u2014 "),rK=a("a"),JRr=o("FlaxBertForPreTraining"),YRr=o(" (BERT model)"),KRr=l(),RC=a("li"),M7e=a("strong"),ZRr=o("big_bird"),ePr=o(" \u2014 "),tK=a("a"),oPr=o("FlaxBigBirdForPreTraining"),rPr=o(" (BigBird model)"),tPr=l(),PC=a("li"),E7e=a("strong"),aPr=o("electra"),nPr=o(" \u2014 "),aK=a("a"),sPr=o("FlaxElectraForPreTraining"),lPr=o(" (ELECTRA model)"),iPr=l(),BC=a("li"),C7e=a("strong"),dPr=o("mbart"),cPr=o(" \u2014 "),nK=a("a"),fPr=o("FlaxMBartForConditionalGeneration"),mPr=o(" (mBART model)"),gPr=l(),IC=a("li"),w7e=a("strong"),hPr=o("mt5"),pPr=o(" \u2014 "),sK=a("a"),_Pr=o("FlaxMT5ForConditionalGeneration"),uPr=o(" (MT5 model)"),bPr=l(),NC=a("li"),A7e=a("strong"),vPr=o("roberta"),FPr=o(" \u2014 "),lK=a("a"),TPr=o("FlaxRobertaForMaskedLM"),MPr=o(" (RoBERTa model)"),EPr=l(),qC=a("li"),L7e=a("strong"),CPr=o("roformer"),wPr=o(" \u2014 "),iK=a("a"),APr=o("FlaxRoFormerForMaskedLM"),LPr=o(" (RoFormer model)"),yPr=l(),jC=a("li"),y7e=a("strong"),xPr=o("t5"),$Pr=o(" \u2014 "),dK=a("a"),kPr=o("FlaxT5ForConditionalGeneration"),SPr=o(" (T5 model)"),RPr=l(),DC=a("li"),x7e=a("strong"),PPr=o("wav2vec2"),BPr=o(" \u2014 "),cK=a("a"),IPr=o("FlaxWav2Vec2ForPreTraining"),NPr=o(" (Wav2Vec2 model)"),qPr=l(),GC=a("li"),$7e=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),fK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(OC.$$.fragment),DDe=l(),Dc=a("h2"),VC=a("a"),k7e=a("span"),F(ex.$$.fragment),XPr=l(),S7e=a("span"),zPr=o("FlaxAutoModelForMaskedLM"),GDe=l(),hr=a("div"),F(ox.$$.fragment),WPr=l(),Gc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),gK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),rx=a("p"),ZPr=o("This class cannot be instantiated directly using "),R7e=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),zt=a("div"),F(tx.$$.fragment),tBr=l(),P7e=a("p"),aBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nBr=l(),Oc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(XC.$$.fragment),mBr=l(),Or=a("div"),F(ax.$$.fragment),gBr=l(),I7e=a("p"),hBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pBr=l(),un=a("p"),_Br=o("The model class to instantiate is selected based on the "),N7e=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),xe=a("ul"),zC=a("li"),D7e=a("strong"),CBr=o("albert"),wBr=o(" \u2014 "),pK=a("a"),ABr=o("FlaxAlbertForMaskedLM"),LBr=o(" (ALBERT model)"),yBr=l(),WC=a("li"),G7e=a("strong"),xBr=o("bart"),$Br=o(" \u2014 "),_K=a("a"),kBr=o("FlaxBartForConditionalGeneration"),SBr=o(" (BART model)"),RBr=l(),QC=a("li"),O7e=a("strong"),PBr=o("bert"),BBr=o(" \u2014 "),uK=a("a"),IBr=o("FlaxBertForMaskedLM"),NBr=o(" (BERT model)"),qBr=l(),HC=a("li"),V7e=a("strong"),jBr=o("big_bird"),DBr=o(" \u2014 "),bK=a("a"),GBr=o("FlaxBigBirdForMaskedLM"),OBr=o(" (BigBird model)"),VBr=l(),UC=a("li"),X7e=a("strong"),XBr=o("distilbert"),zBr=o(" \u2014 "),vK=a("a"),WBr=o("FlaxDistilBertForMaskedLM"),QBr=o(" (DistilBERT model)"),HBr=l(),JC=a("li"),z7e=a("strong"),UBr=o("electra"),JBr=o(" \u2014 "),FK=a("a"),YBr=o("FlaxElectraForMaskedLM"),KBr=o(" (ELECTRA model)"),ZBr=l(),YC=a("li"),W7e=a("strong"),eIr=o("mbart"),oIr=o(" \u2014 "),TK=a("a"),rIr=o("FlaxMBartForConditionalGeneration"),tIr=o(" (mBART model)"),aIr=l(),KC=a("li"),Q7e=a("strong"),nIr=o("roberta"),sIr=o(" \u2014 "),MK=a("a"),lIr=o("FlaxRobertaForMaskedLM"),iIr=o(" (RoBERTa model)"),dIr=l(),ZC=a("li"),H7e=a("strong"),cIr=o("roformer"),fIr=o(" \u2014 "),EK=a("a"),mIr=o("FlaxRoFormerForMaskedLM"),gIr=o(" (RoFormer model)"),hIr=l(),e0=a("li"),U7e=a("strong"),pIr=o("xlm-roberta"),_Ir=o(" \u2014 "),CK=a("a"),uIr=o("FlaxXLMRobertaForMaskedLM"),bIr=o(" (XLM-RoBERTa model)"),vIr=l(),F(o0.$$.fragment),ODe=l(),Vc=a("h2"),r0=a("a"),J7e=a("span"),F(nx.$$.fragment),FIr=l(),Y7e=a("span"),TIr=o("FlaxAutoModelForSeq2SeqLM"),VDe=l(),pr=a("div"),F(sx.$$.fragment),MIr=l(),Xc=a("p"),EIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=a("a"),CIr=o("from_pretrained()"),wIr=o(" class method or the "),AK=a("a"),AIr=o("from_config()"),LIr=o(` class
method.`),yIr=l(),lx=a("p"),xIr=o("This class cannot be instantiated directly using "),K7e=a("code"),$Ir=o("__init__()"),kIr=o(" (throws an error)."),SIr=l(),Wt=a("div"),F(ix.$$.fragment),RIr=l(),Z7e=a("p"),PIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BIr=l(),zc=a("p"),IIr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),NIr=o("not"),qIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),jIr=o("from_pretrained()"),DIr=o(" to load the model weights."),GIr=l(),F(t0.$$.fragment),OIr=l(),Vr=a("div"),F(dx.$$.fragment),VIr=l(),oMe=a("p"),XIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zIr=l(),bn=a("p"),WIr=o("The model class to instantiate is selected based on the "),rMe=a("code"),QIr=o("model_type"),HIr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(":"),ZIr=l(),Pe=a("ul"),a0=a("li"),nMe=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),yK=a("a"),rNr=o("FlaxBartForConditionalGeneration"),tNr=o(" (BART model)"),aNr=l(),n0=a("li"),sMe=a("strong"),nNr=o("blenderbot"),sNr=o(" \u2014 "),xK=a("a"),lNr=o("FlaxBlenderbotForConditionalGeneration"),iNr=o(" (Blenderbot model)"),dNr=l(),s0=a("li"),lMe=a("strong"),cNr=o("blenderbot-small"),fNr=o(" \u2014 "),$K=a("a"),mNr=o("FlaxBlenderbotSmallForConditionalGeneration"),gNr=o(" (BlenderbotSmall model)"),hNr=l(),l0=a("li"),iMe=a("strong"),pNr=o("encoder-decoder"),_Nr=o(" \u2014 "),kK=a("a"),uNr=o("FlaxEncoderDecoderModel"),bNr=o(" (Encoder decoder model)"),vNr=l(),i0=a("li"),dMe=a("strong"),FNr=o("marian"),TNr=o(" \u2014 "),SK=a("a"),MNr=o("FlaxMarianMTModel"),ENr=o(" (Marian model)"),CNr=l(),d0=a("li"),cMe=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),RK=a("a"),LNr=o("FlaxMBartForConditionalGeneration"),yNr=o(" (mBART model)"),xNr=l(),c0=a("li"),fMe=a("strong"),$Nr=o("mt5"),kNr=o(" \u2014 "),PK=a("a"),SNr=o("FlaxMT5ForConditionalGeneration"),RNr=o(" (MT5 model)"),PNr=l(),f0=a("li"),mMe=a("strong"),BNr=o("pegasus"),INr=o(" \u2014 "),BK=a("a"),NNr=o("FlaxPegasusForConditionalGeneration"),qNr=o(" (Pegasus model)"),jNr=l(),m0=a("li"),gMe=a("strong"),DNr=o("t5"),GNr=o(" \u2014 "),IK=a("a"),ONr=o("FlaxT5ForConditionalGeneration"),VNr=o(" (T5 model)"),XNr=l(),F(g0.$$.fragment),XDe=l(),Wc=a("h2"),h0=a("a"),hMe=a("span"),F(cx.$$.fragment),zNr=l(),pMe=a("span"),WNr=o("FlaxAutoModelForSequenceClassification"),zDe=l(),_r=a("div"),F(fx.$$.fragment),QNr=l(),Qc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),qK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),mx=a("p"),eqr=o("This class cannot be instantiated directly using "),_Me=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(gx.$$.fragment),aqr=l(),uMe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sqr=l(),Hc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(p0.$$.fragment),gqr=l(),Xr=a("div"),F(hx.$$.fragment),hqr=l(),vMe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_qr=l(),vn=a("p"),uqr=o("The model class to instantiate is selected based on the "),FMe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),$e=a("ul"),_0=a("li"),EMe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),DK=a("a"),Lqr=o("FlaxAlbertForSequenceClassification"),yqr=o(" (ALBERT model)"),xqr=l(),u0=a("li"),CMe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),GK=a("a"),Sqr=o("FlaxBartForSequenceClassification"),Rqr=o(" (BART model)"),Pqr=l(),b0=a("li"),wMe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),OK=a("a"),Nqr=o("FlaxBertForSequenceClassification"),qqr=o(" (BERT model)"),jqr=l(),v0=a("li"),AMe=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),VK=a("a"),Oqr=o("FlaxBigBirdForSequenceClassification"),Vqr=o(" (BigBird model)"),Xqr=l(),F0=a("li"),LMe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),XK=a("a"),Qqr=o("FlaxDistilBertForSequenceClassification"),Hqr=o(" (DistilBERT model)"),Uqr=l(),T0=a("li"),yMe=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),zK=a("a"),Kqr=o("FlaxElectraForSequenceClassification"),Zqr=o(" (ELECTRA model)"),ejr=l(),M0=a("li"),xMe=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),WK=a("a"),tjr=o("FlaxMBartForSequenceClassification"),ajr=o(" (mBART model)"),njr=l(),E0=a("li"),$Me=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),QK=a("a"),ijr=o("FlaxRobertaForSequenceClassification"),djr=o(" (RoBERTa model)"),cjr=l(),C0=a("li"),kMe=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),HK=a("a"),gjr=o("FlaxRoFormerForSequenceClassification"),hjr=o(" (RoFormer model)"),pjr=l(),w0=a("li"),SMe=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),UK=a("a"),bjr=o("FlaxXLMRobertaForSequenceClassification"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(A0.$$.fragment),WDe=l(),Uc=a("h2"),L0=a("a"),RMe=a("span"),F(px.$$.fragment),Tjr=l(),PMe=a("span"),Mjr=o("FlaxAutoModelForQuestionAnswering"),QDe=l(),ur=a("div"),F(_x.$$.fragment),Ejr=l(),Jc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),YK=a("a"),Ljr=o("from_config()"),yjr=o(` class
method.`),xjr=l(),ux=a("p"),$jr=o("This class cannot be instantiated directly using "),BMe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ht=a("div"),F(bx.$$.fragment),Pjr=l(),IMe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ijr=l(),Yc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(y0.$$.fragment),Vjr=l(),zr=a("div"),F(vx.$$.fragment),Xjr=l(),qMe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wjr=l(),Fn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),jMe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),ke=a("ul"),x0=a("li"),OMe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),ZK=a("a"),tDr=o("FlaxAlbertForQuestionAnswering"),aDr=o(" (ALBERT model)"),nDr=l(),$0=a("li"),VMe=a("strong"),sDr=o("bart"),lDr=o(" \u2014 "),eZ=a("a"),iDr=o("FlaxBartForQuestionAnswering"),dDr=o(" (BART model)"),cDr=l(),k0=a("li"),XMe=a("strong"),fDr=o("bert"),mDr=o(" \u2014 "),oZ=a("a"),gDr=o("FlaxBertForQuestionAnswering"),hDr=o(" (BERT model)"),pDr=l(),S0=a("li"),zMe=a("strong"),_Dr=o("big_bird"),uDr=o(" \u2014 "),rZ=a("a"),bDr=o("FlaxBigBirdForQuestionAnswering"),vDr=o(" (BigBird model)"),FDr=l(),R0=a("li"),WMe=a("strong"),TDr=o("distilbert"),MDr=o(" \u2014 "),tZ=a("a"),EDr=o("FlaxDistilBertForQuestionAnswering"),CDr=o(" (DistilBERT model)"),wDr=l(),P0=a("li"),QMe=a("strong"),ADr=o("electra"),LDr=o(" \u2014 "),aZ=a("a"),yDr=o("FlaxElectraForQuestionAnswering"),xDr=o(" (ELECTRA model)"),$Dr=l(),B0=a("li"),HMe=a("strong"),kDr=o("mbart"),SDr=o(" \u2014 "),nZ=a("a"),RDr=o("FlaxMBartForQuestionAnswering"),PDr=o(" (mBART model)"),BDr=l(),I0=a("li"),UMe=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),sZ=a("a"),qDr=o("FlaxRobertaForQuestionAnswering"),jDr=o(" (RoBERTa model)"),DDr=l(),N0=a("li"),JMe=a("strong"),GDr=o("roformer"),ODr=o(" \u2014 "),lZ=a("a"),VDr=o("FlaxRoFormerForQuestionAnswering"),XDr=o(" (RoFormer model)"),zDr=l(),q0=a("li"),YMe=a("strong"),WDr=o("xlm-roberta"),QDr=o(" \u2014 "),iZ=a("a"),HDr=o("FlaxXLMRobertaForQuestionAnswering"),UDr=o(" (XLM-RoBERTa model)"),JDr=l(),F(j0.$$.fragment),HDe=l(),Kc=a("h2"),D0=a("a"),KMe=a("span"),F(Fx.$$.fragment),YDr=l(),ZMe=a("span"),KDr=o("FlaxAutoModelForTokenClassification"),UDe=l(),br=a("div"),F(Tx.$$.fragment),ZDr=l(),Zc=a("p"),eGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=a("a"),oGr=o("from_pretrained()"),rGr=o(" class method or the "),cZ=a("a"),tGr=o("from_config()"),aGr=o(` class
method.`),nGr=l(),Mx=a("p"),sGr=o("This class cannot be instantiated directly using "),eEe=a("code"),lGr=o("__init__()"),iGr=o(" (throws an error)."),dGr=l(),Ut=a("div"),F(Ex.$$.fragment),cGr=l(),oEe=a("p"),fGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mGr=l(),ef=a("p"),gGr=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),hGr=o("not"),pGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),_Gr=o("from_pretrained()"),uGr=o(" to load the model weights."),bGr=l(),F(G0.$$.fragment),vGr=l(),Wr=a("div"),F(Cx.$$.fragment),FGr=l(),tEe=a("p"),TGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MGr=l(),Tn=a("p"),EGr=o("The model class to instantiate is selected based on the "),aEe=a("code"),CGr=o("model_type"),wGr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),AGr=o("pretrained_model_name_or_path"),LGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),yGr=o("pretrained_model_name_or_path"),xGr=o(":"),$Gr=l(),Ge=a("ul"),O0=a("li"),lEe=a("strong"),kGr=o("albert"),SGr=o(" \u2014 "),mZ=a("a"),RGr=o("FlaxAlbertForTokenClassification"),PGr=o(" (ALBERT model)"),BGr=l(),V0=a("li"),iEe=a("strong"),IGr=o("bert"),NGr=o(" \u2014 "),gZ=a("a"),qGr=o("FlaxBertForTokenClassification"),jGr=o(" (BERT model)"),DGr=l(),X0=a("li"),dEe=a("strong"),GGr=o("big_bird"),OGr=o(" \u2014 "),hZ=a("a"),VGr=o("FlaxBigBirdForTokenClassification"),XGr=o(" (BigBird model)"),zGr=l(),z0=a("li"),cEe=a("strong"),WGr=o("distilbert"),QGr=o(" \u2014 "),pZ=a("a"),HGr=o("FlaxDistilBertForTokenClassification"),UGr=o(" (DistilBERT model)"),JGr=l(),W0=a("li"),fEe=a("strong"),YGr=o("electra"),KGr=o(" \u2014 "),_Z=a("a"),ZGr=o("FlaxElectraForTokenClassification"),eOr=o(" (ELECTRA model)"),oOr=l(),Q0=a("li"),mEe=a("strong"),rOr=o("roberta"),tOr=o(" \u2014 "),uZ=a("a"),aOr=o("FlaxRobertaForTokenClassification"),nOr=o(" (RoBERTa model)"),sOr=l(),H0=a("li"),gEe=a("strong"),lOr=o("roformer"),iOr=o(" \u2014 "),bZ=a("a"),dOr=o("FlaxRoFormerForTokenClassification"),cOr=o(" (RoFormer model)"),fOr=l(),U0=a("li"),hEe=a("strong"),mOr=o("xlm-roberta"),gOr=o(" \u2014 "),vZ=a("a"),hOr=o("FlaxXLMRobertaForTokenClassification"),pOr=o(" (XLM-RoBERTa model)"),_Or=l(),F(J0.$$.fragment),JDe=l(),of=a("h2"),Y0=a("a"),pEe=a("span"),F(wx.$$.fragment),uOr=l(),_Ee=a("span"),bOr=o("FlaxAutoModelForMultipleChoice"),YDe=l(),vr=a("div"),F(Ax.$$.fragment),vOr=l(),rf=a("p"),FOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=a("a"),TOr=o("from_pretrained()"),MOr=o(" class method or the "),TZ=a("a"),EOr=o("from_config()"),COr=o(` class
method.`),wOr=l(),Lx=a("p"),AOr=o("This class cannot be instantiated directly using "),uEe=a("code"),LOr=o("__init__()"),yOr=o(" (throws an error)."),xOr=l(),Jt=a("div"),F(yx.$$.fragment),$Or=l(),bEe=a("p"),kOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SOr=l(),tf=a("p"),ROr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),POr=o("not"),BOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),IOr=o("from_pretrained()"),NOr=o(" to load the model weights."),qOr=l(),F(K0.$$.fragment),jOr=l(),Qr=a("div"),F(xx.$$.fragment),DOr=l(),FEe=a("p"),GOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OOr=l(),Mn=a("p"),VOr=o("The model class to instantiate is selected based on the "),TEe=a("code"),XOr=o("model_type"),zOr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),WOr=o("pretrained_model_name_or_path"),QOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(":"),JOr=l(),Oe=a("ul"),Z0=a("li"),CEe=a("strong"),YOr=o("albert"),KOr=o(" \u2014 "),EZ=a("a"),ZOr=o("FlaxAlbertForMultipleChoice"),eVr=o(" (ALBERT model)"),oVr=l(),ew=a("li"),wEe=a("strong"),rVr=o("bert"),tVr=o(" \u2014 "),CZ=a("a"),aVr=o("FlaxBertForMultipleChoice"),nVr=o(" (BERT model)"),sVr=l(),ow=a("li"),AEe=a("strong"),lVr=o("big_bird"),iVr=o(" \u2014 "),wZ=a("a"),dVr=o("FlaxBigBirdForMultipleChoice"),cVr=o(" (BigBird model)"),fVr=l(),rw=a("li"),LEe=a("strong"),mVr=o("distilbert"),gVr=o(" \u2014 "),AZ=a("a"),hVr=o("FlaxDistilBertForMultipleChoice"),pVr=o(" (DistilBERT model)"),_Vr=l(),tw=a("li"),yEe=a("strong"),uVr=o("electra"),bVr=o(" \u2014 "),LZ=a("a"),vVr=o("FlaxElectraForMultipleChoice"),FVr=o(" (ELECTRA model)"),TVr=l(),aw=a("li"),xEe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),yZ=a("a"),CVr=o("FlaxRobertaForMultipleChoice"),wVr=o(" (RoBERTa model)"),AVr=l(),nw=a("li"),$Ee=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),xZ=a("a"),xVr=o("FlaxRoFormerForMultipleChoice"),$Vr=o(" (RoFormer model)"),kVr=l(),sw=a("li"),kEe=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),$Z=a("a"),PVr=o("FlaxXLMRobertaForMultipleChoice"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(lw.$$.fragment),KDe=l(),af=a("h2"),iw=a("a"),SEe=a("span"),F($x.$$.fragment),NVr=l(),REe=a("span"),qVr=o("FlaxAutoModelForNextSentencePrediction"),ZDe=l(),Fr=a("div"),F(kx.$$.fragment),jVr=l(),nf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),SZ=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),Sx=a("p"),WVr=o("This class cannot be instantiated directly using "),PEe=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Yt=a("div"),F(Rx.$$.fragment),JVr=l(),BEe=a("p"),YVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KVr=l(),sf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(dw.$$.fragment),nXr=l(),Hr=a("div"),F(Px.$$.fragment),sXr=l(),NEe=a("p"),lXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iXr=l(),En=a("p"),dXr=o("The model class to instantiate is selected based on the "),qEe=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),_Xr=l(),GEe=a("ul"),cw=a("li"),OEe=a("strong"),uXr=o("bert"),bXr=o(" \u2014 "),PZ=a("a"),vXr=o("FlaxBertForNextSentencePrediction"),FXr=o(" (BERT model)"),TXr=l(),F(fw.$$.fragment),eGe=l(),lf=a("h2"),mw=a("a"),VEe=a("span"),F(Bx.$$.fragment),MXr=l(),XEe=a("span"),EXr=o("FlaxAutoModelForImageClassification"),oGe=l(),Tr=a("div"),F(Ix.$$.fragment),CXr=l(),df=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),IZ=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),Nx=a("p"),kXr=o("This class cannot be instantiated directly using "),zEe=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Kt=a("div"),F(qx.$$.fragment),BXr=l(),WEe=a("p"),IXr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NXr=l(),cf=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(gw.$$.fragment),XXr=l(),Ur=a("div"),F(jx.$$.fragment),zXr=l(),HEe=a("p"),WXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QXr=l(),Cn=a("p"),HXr=o("The model class to instantiate is selected based on the "),UEe=a("code"),UXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),YXr=o("pretrained_model_name_or_path"),KXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),ZXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),Dx=a("ul"),hw=a("li"),KEe=a("strong"),rzr=o("beit"),tzr=o(" \u2014 "),qZ=a("a"),azr=o("FlaxBeitForImageClassification"),nzr=o(" (BEiT model)"),szr=l(),pw=a("li"),ZEe=a("strong"),lzr=o("vit"),izr=o(" \u2014 "),jZ=a("a"),dzr=o("FlaxViTForImageClassification"),czr=o(" (ViT model)"),fzr=l(),F(_w.$$.fragment),rGe=l(),ff=a("h2"),uw=a("a"),eCe=a("span"),F(Gx.$$.fragment),mzr=l(),oCe=a("span"),gzr=o("FlaxAutoModelForVision2Seq"),tGe=l(),Mr=a("div"),F(Ox.$$.fragment),hzr=l(),mf=a("p"),pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),_zr=o("from_pretrained()"),uzr=o(" class method or the "),GZ=a("a"),bzr=o("from_config()"),vzr=o(` class
method.`),Fzr=l(),Vx=a("p"),Tzr=o("This class cannot be instantiated directly using "),rCe=a("code"),Mzr=o("__init__()"),Ezr=o(" (throws an error)."),Czr=l(),Zt=a("div"),F(Xx.$$.fragment),wzr=l(),tCe=a("p"),Azr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lzr=l(),gf=a("p"),yzr=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),xzr=o("not"),$zr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),kzr=o("from_pretrained()"),Szr=o(" to load the model weights."),Rzr=l(),F(bw.$$.fragment),Pzr=l(),Jr=a("div"),F(zx.$$.fragment),Bzr=l(),nCe=a("p"),Izr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nzr=l(),wn=a("p"),qzr=o("The model class to instantiate is selected based on the "),sCe=a("code"),jzr=o("model_type"),Dzr=o(` property of the config object (either
passed as an argument or loaded from `),lCe=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=a("code"),Vzr=o("pretrained_model_name_or_path"),Xzr=o(":"),zzr=l(),dCe=a("ul"),vw=a("li"),cCe=a("strong"),Wzr=o("vision-encoder-decoder"),Qzr=o(" \u2014 "),VZ=a("a"),Hzr=o("FlaxVisionEncoderDecoderModel"),Uzr=o(" (Vision Encoder decoder model)"),Jzr=l(),F(Fw.$$.fragment),this.h()},l(f){const u=nRt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Wx=s(p);m=n(Wx,"A",{id:!0,class:!0,href:!0});var fCe=s(m);_=n(fCe,"SPAN",{});var mCe=s(_);T(d.$$.fragment,mCe),mCe.forEach(t),fCe.forEach(t),h=i(Wx),Mo=n(Wx,"SPAN",{});var gCe=s(Mo);gi=r(gCe,"Auto Classes"),gCe.forEach(t),Wx.forEach(t),uf=i(f),tt=n(f,"P",{});var Qx=s(tt);hi=r(Qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Qx,"CODE",{});var hCe=s(pi);N6=r(hCe,"from_pretrained()"),hCe.forEach(t),bf=r(Qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Qx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var pCe=s(Ln);q6=r(pCe,"AutoConfig"),pCe.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var _Ce=s(xn);j6=r(_Ce,"AutoModel"),_Ce.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var uCe=s($n);D6=r(uCe,"AutoTokenizer"),uCe.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Hx=s(Ae);sk=r(Hx,"will create a model that is an instance of "),vi=n(Hx,"A",{href:!0});var bCe=s(vi);lk=r(bCe,"BertModel"),bCe.forEach(t),ik=r(Hx,"."),Hx.forEach(t),Eo=i(f),Aa=n(f,"P",{});var Ux=s(Aa);dk=r(Ux,"There is one class of "),Ff=n(Ux,"CODE",{});var vCe=s(Ff);ck=r(vCe,"AutoModel"),vCe.forEach(t),mVe=r(Ux," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ux.forEach(t),oje=i(f),Fi=n(f,"H2",{class:!0});var Jx=s(Fi);Tf=n(Jx,"A",{id:!0,class:!0,href:!0});var FCe=s(Tf);Ioe=n(FCe,"SPAN",{});var TCe=s(Ioe);T(G6.$$.fragment,TCe),TCe.forEach(t),FCe.forEach(t),gVe=i(Jx),Noe=n(Jx,"SPAN",{});var MCe=s(Noe);hVe=r(MCe,"Extending the Auto Classes"),MCe.forEach(t),Jx.forEach(t),rje=i(f),kn=n(f,"P",{});var hf=s(kn);pVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=n(hf,"CODE",{});var ECe=s(qoe);_Ve=r(ECe,"NewModel"),ECe.forEach(t),uVe=r(hf,", make sure you have a "),joe=n(hf,"CODE",{});var CCe=s(joe);bVe=r(CCe,"NewModelConfig"),CCe.forEach(t),vVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),tje=i(f),T(O6.$$.fragment,f),aje=i(f),fk=n(f,"P",{});var wCe=s(fk);FVe=r(wCe,"You will then be able to use the auto classes like you would usually do!"),wCe.forEach(t),nje=i(f),T(Mf.$$.fragment,f),sje=i(f),Ti=n(f,"H2",{class:!0});var Yx=s(Ti);Ef=n(Yx,"A",{id:!0,class:!0,href:!0});var ACe=s(Ef);Doe=n(ACe,"SPAN",{});var LCe=s(Doe);T(V6.$$.fragment,LCe),LCe.forEach(t),ACe.forEach(t),TVe=i(Yx),Goe=n(Yx,"SPAN",{});var yCe=s(Goe);MVe=r(yCe,"AutoConfig"),yCe.forEach(t),Yx.forEach(t),lje=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(X6.$$.fragment,ot),EVe=i(ot),z6=n(ot,"P",{});var Kx=s(z6);CVe=r(Kx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=n(Kx,"A",{href:!0});var xCe=s(mk);wVe=r(xCe,"from_pretrained()"),xCe.forEach(t),AVe=r(Kx," class method."),Kx.forEach(t),LVe=i(ot),W6=n(ot,"P",{});var Zx=s(W6);yVe=r(Zx,"This class cannot be instantiated directly using "),Ooe=n(Zx,"CODE",{});var $Ce=s(Ooe);xVe=r($Ce,"__init__()"),$Ce.forEach(t),$Ve=r(Zx," (throws an error)."),Zx.forEach(t),kVe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(Q6.$$.fragment,rt),SVe=i(rt),Voe=n(rt,"P",{});var kCe=s(Voe);RVe=r(kCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),kCe.forEach(t),PVe=i(rt),Mi=n(rt,"P",{});var pf=s(Mi);BVe=r(pf,"The configuration class to instantiate is selected based on the "),Xoe=n(pf,"CODE",{});var SCe=s(Xoe);IVe=r(SCe,"model_type"),SCe.forEach(t),NVe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=n(pf,"CODE",{});var RCe=s(zoe);qVe=r(RCe,"pretrained_model_name_or_path"),RCe.forEach(t),jVe=r(pf,":"),pf.forEach(t),DVe=i(rt),A=n(rt,"UL",{});var L=s(A);Cf=n(L,"LI",{});var Tw=s(Cf);Woe=n(Tw,"STRONG",{});var PCe=s(Woe);GVe=r(PCe,"albert"),PCe.forEach(t),OVe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var BCe=s(gk);VVe=r(BCe,"AlbertConfig"),BCe.forEach(t),XVe=r(Tw," (ALBERT model)"),Tw.forEach(t),zVe=i(L),wf=n(L,"LI",{});var Mw=s(wf);Qoe=n(Mw,"STRONG",{});var ICe=s(Qoe);WVe=r(ICe,"bart"),ICe.forEach(t),QVe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var NCe=s(hk);HVe=r(NCe,"BartConfig"),NCe.forEach(t),UVe=r(Mw," (BART model)"),Mw.forEach(t),JVe=i(L),Af=n(L,"LI",{});var Ew=s(Af);Hoe=n(Ew,"STRONG",{});var qCe=s(Hoe);YVe=r(qCe,"beit"),qCe.forEach(t),KVe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var jCe=s(pk);ZVe=r(jCe,"BeitConfig"),jCe.forEach(t),eXe=r(Ew," (BEiT model)"),Ew.forEach(t),oXe=i(L),Lf=n(L,"LI",{});var Cw=s(Lf);Uoe=n(Cw,"STRONG",{});var DCe=s(Uoe);rXe=r(DCe,"bert"),DCe.forEach(t),tXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var GCe=s(_k);aXe=r(GCe,"BertConfig"),GCe.forEach(t),nXe=r(Cw," (BERT model)"),Cw.forEach(t),sXe=i(L),yf=n(L,"LI",{});var ww=s(yf);Joe=n(ww,"STRONG",{});var OCe=s(Joe);lXe=r(OCe,"bert-generation"),OCe.forEach(t),iXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var VCe=s(uk);dXe=r(VCe,"BertGenerationConfig"),VCe.forEach(t),cXe=r(ww," (Bert Generation model)"),ww.forEach(t),fXe=i(L),xf=n(L,"LI",{});var Aw=s(xf);Yoe=n(Aw,"STRONG",{});var XCe=s(Yoe);mXe=r(XCe,"big_bird"),XCe.forEach(t),gXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var zCe=s(bk);hXe=r(zCe,"BigBirdConfig"),zCe.forEach(t),pXe=r(Aw," (BigBird model)"),Aw.forEach(t),_Xe=i(L),$f=n(L,"LI",{});var Lw=s($f);Koe=n(Lw,"STRONG",{});var WCe=s(Koe);uXe=r(WCe,"bigbird_pegasus"),WCe.forEach(t),bXe=r(Lw," \u2014 "),vk=n(Lw,"A",{href:!0});var QCe=s(vk);vXe=r(QCe,"BigBirdPegasusConfig"),QCe.forEach(t),FXe=r(Lw," (BigBird-Pegasus model)"),Lw.forEach(t),TXe=i(L),kf=n(L,"LI",{});var yw=s(kf);Zoe=n(yw,"STRONG",{});var HCe=s(Zoe);MXe=r(HCe,"blenderbot"),HCe.forEach(t),EXe=r(yw," \u2014 "),Fk=n(yw,"A",{href:!0});var UCe=s(Fk);CXe=r(UCe,"BlenderbotConfig"),UCe.forEach(t),wXe=r(yw," (Blenderbot model)"),yw.forEach(t),AXe=i(L),Sf=n(L,"LI",{});var xw=s(Sf);ere=n(xw,"STRONG",{});var JCe=s(ere);LXe=r(JCe,"blenderbot-small"),JCe.forEach(t),yXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var YCe=s(Tk);xXe=r(YCe,"BlenderbotSmallConfig"),YCe.forEach(t),$Xe=r(xw," (BlenderbotSmall model)"),xw.forEach(t),kXe=i(L),Rf=n(L,"LI",{});var $w=s(Rf);ore=n($w,"STRONG",{});var KCe=s(ore);SXe=r(KCe,"camembert"),KCe.forEach(t),RXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var ZCe=s(Mk);PXe=r(ZCe,"CamembertConfig"),ZCe.forEach(t),BXe=r($w," (CamemBERT model)"),$w.forEach(t),IXe=i(L),Pf=n(L,"LI",{});var kw=s(Pf);rre=n(kw,"STRONG",{});var e0e=s(rre);NXe=r(e0e,"canine"),e0e.forEach(t),qXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var o0e=s(Ek);jXe=r(o0e,"CanineConfig"),o0e.forEach(t),DXe=r(kw," (CANINE model)"),kw.forEach(t),GXe=i(L),Bf=n(L,"LI",{});var Sw=s(Bf);tre=n(Sw,"STRONG",{});var r0e=s(tre);OXe=r(r0e,"clip"),r0e.forEach(t),VXe=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var t0e=s(Ck);XXe=r(t0e,"CLIPConfig"),t0e.forEach(t),zXe=r(Sw," (CLIP model)"),Sw.forEach(t),WXe=i(L),If=n(L,"LI",{});var Rw=s(If);are=n(Rw,"STRONG",{});var a0e=s(are);QXe=r(a0e,"convbert"),a0e.forEach(t),HXe=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var n0e=s(wk);UXe=r(n0e,"ConvBertConfig"),n0e.forEach(t),JXe=r(Rw," (ConvBERT model)"),Rw.forEach(t),YXe=i(L),Nf=n(L,"LI",{});var Pw=s(Nf);nre=n(Pw,"STRONG",{});var s0e=s(nre);KXe=r(s0e,"convnext"),s0e.forEach(t),ZXe=r(Pw," \u2014 "),Ak=n(Pw,"A",{href:!0});var l0e=s(Ak);eze=r(l0e,"ConvNextConfig"),l0e.forEach(t),oze=r(Pw," (ConvNeXT model)"),Pw.forEach(t),rze=i(L),qf=n(L,"LI",{});var Bw=s(qf);sre=n(Bw,"STRONG",{});var i0e=s(sre);tze=r(i0e,"ctrl"),i0e.forEach(t),aze=r(Bw," \u2014 "),Lk=n(Bw,"A",{href:!0});var d0e=s(Lk);nze=r(d0e,"CTRLConfig"),d0e.forEach(t),sze=r(Bw," (CTRL model)"),Bw.forEach(t),lze=i(L),jf=n(L,"LI",{});var Iw=s(jf);lre=n(Iw,"STRONG",{});var c0e=s(lre);ize=r(c0e,"cvt"),c0e.forEach(t),dze=r(Iw," \u2014 "),yk=n(Iw,"A",{href:!0});var f0e=s(yk);cze=r(f0e,"CvtConfig"),f0e.forEach(t),fze=r(Iw," (CvT model)"),Iw.forEach(t),mze=i(L),Df=n(L,"LI",{});var Nw=s(Df);ire=n(Nw,"STRONG",{});var m0e=s(ire);gze=r(m0e,"data2vec-audio"),m0e.forEach(t),hze=r(Nw," \u2014 "),xk=n(Nw,"A",{href:!0});var g0e=s(xk);pze=r(g0e,"Data2VecAudioConfig"),g0e.forEach(t),_ze=r(Nw," (Data2VecAudio model)"),Nw.forEach(t),uze=i(L),Gf=n(L,"LI",{});var qw=s(Gf);dre=n(qw,"STRONG",{});var h0e=s(dre);bze=r(h0e,"data2vec-text"),h0e.forEach(t),vze=r(qw," \u2014 "),$k=n(qw,"A",{href:!0});var p0e=s($k);Fze=r(p0e,"Data2VecTextConfig"),p0e.forEach(t),Tze=r(qw," (Data2VecText model)"),qw.forEach(t),Mze=i(L),Of=n(L,"LI",{});var jw=s(Of);cre=n(jw,"STRONG",{});var _0e=s(cre);Eze=r(_0e,"data2vec-vision"),_0e.forEach(t),Cze=r(jw," \u2014 "),kk=n(jw,"A",{href:!0});var u0e=s(kk);wze=r(u0e,"Data2VecVisionConfig"),u0e.forEach(t),Aze=r(jw," (Data2VecVision model)"),jw.forEach(t),Lze=i(L),Vf=n(L,"LI",{});var Dw=s(Vf);fre=n(Dw,"STRONG",{});var b0e=s(fre);yze=r(b0e,"deberta"),b0e.forEach(t),xze=r(Dw," \u2014 "),Sk=n(Dw,"A",{href:!0});var v0e=s(Sk);$ze=r(v0e,"DebertaConfig"),v0e.forEach(t),kze=r(Dw," (DeBERTa model)"),Dw.forEach(t),Sze=i(L),Xf=n(L,"LI",{});var Gw=s(Xf);mre=n(Gw,"STRONG",{});var F0e=s(mre);Rze=r(F0e,"deberta-v2"),F0e.forEach(t),Pze=r(Gw," \u2014 "),Rk=n(Gw,"A",{href:!0});var T0e=s(Rk);Bze=r(T0e,"DebertaV2Config"),T0e.forEach(t),Ize=r(Gw," (DeBERTa-v2 model)"),Gw.forEach(t),Nze=i(L),zf=n(L,"LI",{});var Ow=s(zf);gre=n(Ow,"STRONG",{});var M0e=s(gre);qze=r(M0e,"decision_transformer"),M0e.forEach(t),jze=r(Ow," \u2014 "),Pk=n(Ow,"A",{href:!0});var E0e=s(Pk);Dze=r(E0e,"DecisionTransformerConfig"),E0e.forEach(t),Gze=r(Ow," (Decision Transformer model)"),Ow.forEach(t),Oze=i(L),Wf=n(L,"LI",{});var Vw=s(Wf);hre=n(Vw,"STRONG",{});var C0e=s(hre);Vze=r(C0e,"deit"),C0e.forEach(t),Xze=r(Vw," \u2014 "),Bk=n(Vw,"A",{href:!0});var Kzr=s(Bk);zze=r(Kzr,"DeiTConfig"),Kzr.forEach(t),Wze=r(Vw," (DeiT model)"),Vw.forEach(t),Qze=i(L),Qf=n(L,"LI",{});var w0e=s(Qf);pre=n(w0e,"STRONG",{});var Zzr=s(pre);Hze=r(Zzr,"detr"),Zzr.forEach(t),Uze=r(w0e," \u2014 "),Ik=n(w0e,"A",{href:!0});var eWr=s(Ik);Jze=r(eWr,"DetrConfig"),eWr.forEach(t),Yze=r(w0e," (DETR model)"),w0e.forEach(t),Kze=i(L),Hf=n(L,"LI",{});var A0e=s(Hf);_re=n(A0e,"STRONG",{});var oWr=s(_re);Zze=r(oWr,"distilbert"),oWr.forEach(t),eWe=r(A0e," \u2014 "),Nk=n(A0e,"A",{href:!0});var rWr=s(Nk);oWe=r(rWr,"DistilBertConfig"),rWr.forEach(t),rWe=r(A0e," (DistilBERT model)"),A0e.forEach(t),tWe=i(L),Uf=n(L,"LI",{});var L0e=s(Uf);ure=n(L0e,"STRONG",{});var tWr=s(ure);aWe=r(tWr,"dpr"),tWr.forEach(t),nWe=r(L0e," \u2014 "),qk=n(L0e,"A",{href:!0});var aWr=s(qk);sWe=r(aWr,"DPRConfig"),aWr.forEach(t),lWe=r(L0e," (DPR model)"),L0e.forEach(t),iWe=i(L),Jf=n(L,"LI",{});var y0e=s(Jf);bre=n(y0e,"STRONG",{});var nWr=s(bre);dWe=r(nWr,"dpt"),nWr.forEach(t),cWe=r(y0e," \u2014 "),jk=n(y0e,"A",{href:!0});var sWr=s(jk);fWe=r(sWr,"DPTConfig"),sWr.forEach(t),mWe=r(y0e," (DPT model)"),y0e.forEach(t),gWe=i(L),Yf=n(L,"LI",{});var x0e=s(Yf);vre=n(x0e,"STRONG",{});var lWr=s(vre);hWe=r(lWr,"electra"),lWr.forEach(t),pWe=r(x0e," \u2014 "),Dk=n(x0e,"A",{href:!0});var iWr=s(Dk);_We=r(iWr,"ElectraConfig"),iWr.forEach(t),uWe=r(x0e," (ELECTRA model)"),x0e.forEach(t),bWe=i(L),Kf=n(L,"LI",{});var $0e=s(Kf);Fre=n($0e,"STRONG",{});var dWr=s(Fre);vWe=r(dWr,"encoder-decoder"),dWr.forEach(t),FWe=r($0e," \u2014 "),Gk=n($0e,"A",{href:!0});var cWr=s(Gk);TWe=r(cWr,"EncoderDecoderConfig"),cWr.forEach(t),MWe=r($0e," (Encoder decoder model)"),$0e.forEach(t),EWe=i(L),Zf=n(L,"LI",{});var k0e=s(Zf);Tre=n(k0e,"STRONG",{});var fWr=s(Tre);CWe=r(fWr,"flaubert"),fWr.forEach(t),wWe=r(k0e," \u2014 "),Ok=n(k0e,"A",{href:!0});var mWr=s(Ok);AWe=r(mWr,"FlaubertConfig"),mWr.forEach(t),LWe=r(k0e," (FlauBERT model)"),k0e.forEach(t),yWe=i(L),em=n(L,"LI",{});var S0e=s(em);Mre=n(S0e,"STRONG",{});var gWr=s(Mre);xWe=r(gWr,"flava"),gWr.forEach(t),$We=r(S0e," \u2014 "),Vk=n(S0e,"A",{href:!0});var hWr=s(Vk);kWe=r(hWr,"FlavaConfig"),hWr.forEach(t),SWe=r(S0e," (FLAVA model)"),S0e.forEach(t),RWe=i(L),om=n(L,"LI",{});var R0e=s(om);Ere=n(R0e,"STRONG",{});var pWr=s(Ere);PWe=r(pWr,"fnet"),pWr.forEach(t),BWe=r(R0e," \u2014 "),Xk=n(R0e,"A",{href:!0});var _Wr=s(Xk);IWe=r(_Wr,"FNetConfig"),_Wr.forEach(t),NWe=r(R0e," (FNet model)"),R0e.forEach(t),qWe=i(L),rm=n(L,"LI",{});var P0e=s(rm);Cre=n(P0e,"STRONG",{});var uWr=s(Cre);jWe=r(uWr,"fsmt"),uWr.forEach(t),DWe=r(P0e," \u2014 "),zk=n(P0e,"A",{href:!0});var bWr=s(zk);GWe=r(bWr,"FSMTConfig"),bWr.forEach(t),OWe=r(P0e," (FairSeq Machine-Translation model)"),P0e.forEach(t),VWe=i(L),tm=n(L,"LI",{});var B0e=s(tm);wre=n(B0e,"STRONG",{});var vWr=s(wre);XWe=r(vWr,"funnel"),vWr.forEach(t),zWe=r(B0e," \u2014 "),Wk=n(B0e,"A",{href:!0});var FWr=s(Wk);WWe=r(FWr,"FunnelConfig"),FWr.forEach(t),QWe=r(B0e," (Funnel Transformer model)"),B0e.forEach(t),HWe=i(L),am=n(L,"LI",{});var I0e=s(am);Are=n(I0e,"STRONG",{});var TWr=s(Are);UWe=r(TWr,"glpn"),TWr.forEach(t),JWe=r(I0e," \u2014 "),Qk=n(I0e,"A",{href:!0});var MWr=s(Qk);YWe=r(MWr,"GLPNConfig"),MWr.forEach(t),KWe=r(I0e," (GLPN model)"),I0e.forEach(t),ZWe=i(L),nm=n(L,"LI",{});var N0e=s(nm);Lre=n(N0e,"STRONG",{});var EWr=s(Lre);eQe=r(EWr,"gpt2"),EWr.forEach(t),oQe=r(N0e," \u2014 "),Hk=n(N0e,"A",{href:!0});var CWr=s(Hk);rQe=r(CWr,"GPT2Config"),CWr.forEach(t),tQe=r(N0e," (OpenAI GPT-2 model)"),N0e.forEach(t),aQe=i(L),sm=n(L,"LI",{});var q0e=s(sm);yre=n(q0e,"STRONG",{});var wWr=s(yre);nQe=r(wWr,"gpt_neo"),wWr.forEach(t),sQe=r(q0e," \u2014 "),Uk=n(q0e,"A",{href:!0});var AWr=s(Uk);lQe=r(AWr,"GPTNeoConfig"),AWr.forEach(t),iQe=r(q0e," (GPT Neo model)"),q0e.forEach(t),dQe=i(L),lm=n(L,"LI",{});var j0e=s(lm);xre=n(j0e,"STRONG",{});var LWr=s(xre);cQe=r(LWr,"gpt_neox"),LWr.forEach(t),fQe=r(j0e," \u2014 "),Jk=n(j0e,"A",{href:!0});var yWr=s(Jk);mQe=r(yWr,"GPTNeoXConfig"),yWr.forEach(t),gQe=r(j0e," (GPT NeoX model)"),j0e.forEach(t),hQe=i(L),im=n(L,"LI",{});var D0e=s(im);$re=n(D0e,"STRONG",{});var xWr=s($re);pQe=r(xWr,"gptj"),xWr.forEach(t),_Qe=r(D0e," \u2014 "),Yk=n(D0e,"A",{href:!0});var $Wr=s(Yk);uQe=r($Wr,"GPTJConfig"),$Wr.forEach(t),bQe=r(D0e," (GPT-J model)"),D0e.forEach(t),vQe=i(L),dm=n(L,"LI",{});var G0e=s(dm);kre=n(G0e,"STRONG",{});var kWr=s(kre);FQe=r(kWr,"hubert"),kWr.forEach(t),TQe=r(G0e," \u2014 "),Kk=n(G0e,"A",{href:!0});var SWr=s(Kk);MQe=r(SWr,"HubertConfig"),SWr.forEach(t),EQe=r(G0e," (Hubert model)"),G0e.forEach(t),CQe=i(L),cm=n(L,"LI",{});var O0e=s(cm);Sre=n(O0e,"STRONG",{});var RWr=s(Sre);wQe=r(RWr,"ibert"),RWr.forEach(t),AQe=r(O0e," \u2014 "),Zk=n(O0e,"A",{href:!0});var PWr=s(Zk);LQe=r(PWr,"IBertConfig"),PWr.forEach(t),yQe=r(O0e," (I-BERT model)"),O0e.forEach(t),xQe=i(L),fm=n(L,"LI",{});var V0e=s(fm);Rre=n(V0e,"STRONG",{});var BWr=s(Rre);$Qe=r(BWr,"imagegpt"),BWr.forEach(t),kQe=r(V0e," \u2014 "),eS=n(V0e,"A",{href:!0});var IWr=s(eS);SQe=r(IWr,"ImageGPTConfig"),IWr.forEach(t),RQe=r(V0e," (ImageGPT model)"),V0e.forEach(t),PQe=i(L),mm=n(L,"LI",{});var X0e=s(mm);Pre=n(X0e,"STRONG",{});var NWr=s(Pre);BQe=r(NWr,"layoutlm"),NWr.forEach(t),IQe=r(X0e," \u2014 "),oS=n(X0e,"A",{href:!0});var qWr=s(oS);NQe=r(qWr,"LayoutLMConfig"),qWr.forEach(t),qQe=r(X0e," (LayoutLM model)"),X0e.forEach(t),jQe=i(L),gm=n(L,"LI",{});var z0e=s(gm);Bre=n(z0e,"STRONG",{});var jWr=s(Bre);DQe=r(jWr,"layoutlmv2"),jWr.forEach(t),GQe=r(z0e," \u2014 "),rS=n(z0e,"A",{href:!0});var DWr=s(rS);OQe=r(DWr,"LayoutLMv2Config"),DWr.forEach(t),VQe=r(z0e," (LayoutLMv2 model)"),z0e.forEach(t),XQe=i(L),hm=n(L,"LI",{});var W0e=s(hm);Ire=n(W0e,"STRONG",{});var GWr=s(Ire);zQe=r(GWr,"layoutlmv3"),GWr.forEach(t),WQe=r(W0e," \u2014 "),tS=n(W0e,"A",{href:!0});var OWr=s(tS);QQe=r(OWr,"LayoutLMv3Config"),OWr.forEach(t),HQe=r(W0e," (LayoutLMv3 model)"),W0e.forEach(t),UQe=i(L),pm=n(L,"LI",{});var Q0e=s(pm);Nre=n(Q0e,"STRONG",{});var VWr=s(Nre);JQe=r(VWr,"led"),VWr.forEach(t),YQe=r(Q0e," \u2014 "),aS=n(Q0e,"A",{href:!0});var XWr=s(aS);KQe=r(XWr,"LEDConfig"),XWr.forEach(t),ZQe=r(Q0e," (LED model)"),Q0e.forEach(t),eHe=i(L),_m=n(L,"LI",{});var H0e=s(_m);qre=n(H0e,"STRONG",{});var zWr=s(qre);oHe=r(zWr,"levit"),zWr.forEach(t),rHe=r(H0e," \u2014 "),nS=n(H0e,"A",{href:!0});var WWr=s(nS);tHe=r(WWr,"LevitConfig"),WWr.forEach(t),aHe=r(H0e," (LeViT model)"),H0e.forEach(t),nHe=i(L),um=n(L,"LI",{});var U0e=s(um);jre=n(U0e,"STRONG",{});var QWr=s(jre);sHe=r(QWr,"longformer"),QWr.forEach(t),lHe=r(U0e," \u2014 "),sS=n(U0e,"A",{href:!0});var HWr=s(sS);iHe=r(HWr,"LongformerConfig"),HWr.forEach(t),dHe=r(U0e," (Longformer model)"),U0e.forEach(t),cHe=i(L),bm=n(L,"LI",{});var J0e=s(bm);Dre=n(J0e,"STRONG",{});var UWr=s(Dre);fHe=r(UWr,"luke"),UWr.forEach(t),mHe=r(J0e," \u2014 "),lS=n(J0e,"A",{href:!0});var JWr=s(lS);gHe=r(JWr,"LukeConfig"),JWr.forEach(t),hHe=r(J0e," (LUKE model)"),J0e.forEach(t),pHe=i(L),vm=n(L,"LI",{});var Y0e=s(vm);Gre=n(Y0e,"STRONG",{});var YWr=s(Gre);_He=r(YWr,"lxmert"),YWr.forEach(t),uHe=r(Y0e," \u2014 "),iS=n(Y0e,"A",{href:!0});var KWr=s(iS);bHe=r(KWr,"LxmertConfig"),KWr.forEach(t),vHe=r(Y0e," (LXMERT model)"),Y0e.forEach(t),FHe=i(L),Fm=n(L,"LI",{});var K0e=s(Fm);Ore=n(K0e,"STRONG",{});var ZWr=s(Ore);THe=r(ZWr,"m2m_100"),ZWr.forEach(t),MHe=r(K0e," \u2014 "),dS=n(K0e,"A",{href:!0});var eQr=s(dS);EHe=r(eQr,"M2M100Config"),eQr.forEach(t),CHe=r(K0e," (M2M100 model)"),K0e.forEach(t),wHe=i(L),Tm=n(L,"LI",{});var Z0e=s(Tm);Vre=n(Z0e,"STRONG",{});var oQr=s(Vre);AHe=r(oQr,"marian"),oQr.forEach(t),LHe=r(Z0e," \u2014 "),cS=n(Z0e,"A",{href:!0});var rQr=s(cS);yHe=r(rQr,"MarianConfig"),rQr.forEach(t),xHe=r(Z0e," (Marian model)"),Z0e.forEach(t),$He=i(L),Mm=n(L,"LI",{});var ewe=s(Mm);Xre=n(ewe,"STRONG",{});var tQr=s(Xre);kHe=r(tQr,"maskformer"),tQr.forEach(t),SHe=r(ewe," \u2014 "),fS=n(ewe,"A",{href:!0});var aQr=s(fS);RHe=r(aQr,"MaskFormerConfig"),aQr.forEach(t),PHe=r(ewe," (MaskFormer model)"),ewe.forEach(t),BHe=i(L),Em=n(L,"LI",{});var owe=s(Em);zre=n(owe,"STRONG",{});var nQr=s(zre);IHe=r(nQr,"mbart"),nQr.forEach(t),NHe=r(owe," \u2014 "),mS=n(owe,"A",{href:!0});var sQr=s(mS);qHe=r(sQr,"MBartConfig"),sQr.forEach(t),jHe=r(owe," (mBART model)"),owe.forEach(t),DHe=i(L),Cm=n(L,"LI",{});var rwe=s(Cm);Wre=n(rwe,"STRONG",{});var lQr=s(Wre);GHe=r(lQr,"megatron-bert"),lQr.forEach(t),OHe=r(rwe," \u2014 "),gS=n(rwe,"A",{href:!0});var iQr=s(gS);VHe=r(iQr,"MegatronBertConfig"),iQr.forEach(t),XHe=r(rwe," (Megatron-BERT model)"),rwe.forEach(t),zHe=i(L),wm=n(L,"LI",{});var twe=s(wm);Qre=n(twe,"STRONG",{});var dQr=s(Qre);WHe=r(dQr,"mobilebert"),dQr.forEach(t),QHe=r(twe," \u2014 "),hS=n(twe,"A",{href:!0});var cQr=s(hS);HHe=r(cQr,"MobileBertConfig"),cQr.forEach(t),UHe=r(twe," (MobileBERT model)"),twe.forEach(t),JHe=i(L),Am=n(L,"LI",{});var awe=s(Am);Hre=n(awe,"STRONG",{});var fQr=s(Hre);YHe=r(fQr,"mobilevit"),fQr.forEach(t),KHe=r(awe," \u2014 "),pS=n(awe,"A",{href:!0});var mQr=s(pS);ZHe=r(mQr,"MobileViTConfig"),mQr.forEach(t),eUe=r(awe," (MobileViT model)"),awe.forEach(t),oUe=i(L),Lm=n(L,"LI",{});var nwe=s(Lm);Ure=n(nwe,"STRONG",{});var gQr=s(Ure);rUe=r(gQr,"mpnet"),gQr.forEach(t),tUe=r(nwe," \u2014 "),_S=n(nwe,"A",{href:!0});var hQr=s(_S);aUe=r(hQr,"MPNetConfig"),hQr.forEach(t),nUe=r(nwe," (MPNet model)"),nwe.forEach(t),sUe=i(L),ym=n(L,"LI",{});var swe=s(ym);Jre=n(swe,"STRONG",{});var pQr=s(Jre);lUe=r(pQr,"mt5"),pQr.forEach(t),iUe=r(swe," \u2014 "),uS=n(swe,"A",{href:!0});var _Qr=s(uS);dUe=r(_Qr,"MT5Config"),_Qr.forEach(t),cUe=r(swe," (MT5 model)"),swe.forEach(t),fUe=i(L),xm=n(L,"LI",{});var lwe=s(xm);Yre=n(lwe,"STRONG",{});var uQr=s(Yre);mUe=r(uQr,"nystromformer"),uQr.forEach(t),gUe=r(lwe," \u2014 "),bS=n(lwe,"A",{href:!0});var bQr=s(bS);hUe=r(bQr,"NystromformerConfig"),bQr.forEach(t),pUe=r(lwe," (Nystr\xF6mformer model)"),lwe.forEach(t),_Ue=i(L),$m=n(L,"LI",{});var iwe=s($m);Kre=n(iwe,"STRONG",{});var vQr=s(Kre);uUe=r(vQr,"openai-gpt"),vQr.forEach(t),bUe=r(iwe," \u2014 "),vS=n(iwe,"A",{href:!0});var FQr=s(vS);vUe=r(FQr,"OpenAIGPTConfig"),FQr.forEach(t),FUe=r(iwe," (OpenAI GPT model)"),iwe.forEach(t),TUe=i(L),km=n(L,"LI",{});var dwe=s(km);Zre=n(dwe,"STRONG",{});var TQr=s(Zre);MUe=r(TQr,"opt"),TQr.forEach(t),EUe=r(dwe," \u2014 "),FS=n(dwe,"A",{href:!0});var MQr=s(FS);CUe=r(MQr,"OPTConfig"),MQr.forEach(t),wUe=r(dwe," (OPT model)"),dwe.forEach(t),AUe=i(L),Sm=n(L,"LI",{});var cwe=s(Sm);ete=n(cwe,"STRONG",{});var EQr=s(ete);LUe=r(EQr,"pegasus"),EQr.forEach(t),yUe=r(cwe," \u2014 "),TS=n(cwe,"A",{href:!0});var CQr=s(TS);xUe=r(CQr,"PegasusConfig"),CQr.forEach(t),$Ue=r(cwe," (Pegasus model)"),cwe.forEach(t),kUe=i(L),Rm=n(L,"LI",{});var fwe=s(Rm);ote=n(fwe,"STRONG",{});var wQr=s(ote);SUe=r(wQr,"perceiver"),wQr.forEach(t),RUe=r(fwe," \u2014 "),MS=n(fwe,"A",{href:!0});var AQr=s(MS);PUe=r(AQr,"PerceiverConfig"),AQr.forEach(t),BUe=r(fwe," (Perceiver model)"),fwe.forEach(t),IUe=i(L),Pm=n(L,"LI",{});var mwe=s(Pm);rte=n(mwe,"STRONG",{});var LQr=s(rte);NUe=r(LQr,"plbart"),LQr.forEach(t),qUe=r(mwe," \u2014 "),ES=n(mwe,"A",{href:!0});var yQr=s(ES);jUe=r(yQr,"PLBartConfig"),yQr.forEach(t),DUe=r(mwe," (PLBart model)"),mwe.forEach(t),GUe=i(L),Bm=n(L,"LI",{});var gwe=s(Bm);tte=n(gwe,"STRONG",{});var xQr=s(tte);OUe=r(xQr,"poolformer"),xQr.forEach(t),VUe=r(gwe," \u2014 "),CS=n(gwe,"A",{href:!0});var $Qr=s(CS);XUe=r($Qr,"PoolFormerConfig"),$Qr.forEach(t),zUe=r(gwe," (PoolFormer model)"),gwe.forEach(t),WUe=i(L),Im=n(L,"LI",{});var hwe=s(Im);ate=n(hwe,"STRONG",{});var kQr=s(ate);QUe=r(kQr,"prophetnet"),kQr.forEach(t),HUe=r(hwe," \u2014 "),wS=n(hwe,"A",{href:!0});var SQr=s(wS);UUe=r(SQr,"ProphetNetConfig"),SQr.forEach(t),JUe=r(hwe," (ProphetNet model)"),hwe.forEach(t),YUe=i(L),Nm=n(L,"LI",{});var pwe=s(Nm);nte=n(pwe,"STRONG",{});var RQr=s(nte);KUe=r(RQr,"qdqbert"),RQr.forEach(t),ZUe=r(pwe," \u2014 "),AS=n(pwe,"A",{href:!0});var PQr=s(AS);eJe=r(PQr,"QDQBertConfig"),PQr.forEach(t),oJe=r(pwe," (QDQBert model)"),pwe.forEach(t),rJe=i(L),qm=n(L,"LI",{});var _we=s(qm);ste=n(_we,"STRONG",{});var BQr=s(ste);tJe=r(BQr,"rag"),BQr.forEach(t),aJe=r(_we," \u2014 "),LS=n(_we,"A",{href:!0});var IQr=s(LS);nJe=r(IQr,"RagConfig"),IQr.forEach(t),sJe=r(_we," (RAG model)"),_we.forEach(t),lJe=i(L),jm=n(L,"LI",{});var uwe=s(jm);lte=n(uwe,"STRONG",{});var NQr=s(lte);iJe=r(NQr,"realm"),NQr.forEach(t),dJe=r(uwe," \u2014 "),yS=n(uwe,"A",{href:!0});var qQr=s(yS);cJe=r(qQr,"RealmConfig"),qQr.forEach(t),fJe=r(uwe," (REALM model)"),uwe.forEach(t),mJe=i(L),Dm=n(L,"LI",{});var bwe=s(Dm);ite=n(bwe,"STRONG",{});var jQr=s(ite);gJe=r(jQr,"reformer"),jQr.forEach(t),hJe=r(bwe," \u2014 "),xS=n(bwe,"A",{href:!0});var DQr=s(xS);pJe=r(DQr,"ReformerConfig"),DQr.forEach(t),_Je=r(bwe," (Reformer model)"),bwe.forEach(t),uJe=i(L),Gm=n(L,"LI",{});var vwe=s(Gm);dte=n(vwe,"STRONG",{});var GQr=s(dte);bJe=r(GQr,"regnet"),GQr.forEach(t),vJe=r(vwe," \u2014 "),$S=n(vwe,"A",{href:!0});var OQr=s($S);FJe=r(OQr,"RegNetConfig"),OQr.forEach(t),TJe=r(vwe," (RegNet model)"),vwe.forEach(t),MJe=i(L),Om=n(L,"LI",{});var Fwe=s(Om);cte=n(Fwe,"STRONG",{});var VQr=s(cte);EJe=r(VQr,"rembert"),VQr.forEach(t),CJe=r(Fwe," \u2014 "),kS=n(Fwe,"A",{href:!0});var XQr=s(kS);wJe=r(XQr,"RemBertConfig"),XQr.forEach(t),AJe=r(Fwe," (RemBERT model)"),Fwe.forEach(t),LJe=i(L),Vm=n(L,"LI",{});var Twe=s(Vm);fte=n(Twe,"STRONG",{});var zQr=s(fte);yJe=r(zQr,"resnet"),zQr.forEach(t),xJe=r(Twe," \u2014 "),SS=n(Twe,"A",{href:!0});var WQr=s(SS);$Je=r(WQr,"ResNetConfig"),WQr.forEach(t),kJe=r(Twe," (ResNet model)"),Twe.forEach(t),SJe=i(L),Xm=n(L,"LI",{});var Mwe=s(Xm);mte=n(Mwe,"STRONG",{});var QQr=s(mte);RJe=r(QQr,"retribert"),QQr.forEach(t),PJe=r(Mwe," \u2014 "),RS=n(Mwe,"A",{href:!0});var HQr=s(RS);BJe=r(HQr,"RetriBertConfig"),HQr.forEach(t),IJe=r(Mwe," (RetriBERT model)"),Mwe.forEach(t),NJe=i(L),zm=n(L,"LI",{});var Ewe=s(zm);gte=n(Ewe,"STRONG",{});var UQr=s(gte);qJe=r(UQr,"roberta"),UQr.forEach(t),jJe=r(Ewe," \u2014 "),PS=n(Ewe,"A",{href:!0});var JQr=s(PS);DJe=r(JQr,"RobertaConfig"),JQr.forEach(t),GJe=r(Ewe," (RoBERTa model)"),Ewe.forEach(t),OJe=i(L),Wm=n(L,"LI",{});var Cwe=s(Wm);hte=n(Cwe,"STRONG",{});var YQr=s(hte);VJe=r(YQr,"roformer"),YQr.forEach(t),XJe=r(Cwe," \u2014 "),BS=n(Cwe,"A",{href:!0});var KQr=s(BS);zJe=r(KQr,"RoFormerConfig"),KQr.forEach(t),WJe=r(Cwe," (RoFormer model)"),Cwe.forEach(t),QJe=i(L),Qm=n(L,"LI",{});var wwe=s(Qm);pte=n(wwe,"STRONG",{});var ZQr=s(pte);HJe=r(ZQr,"segformer"),ZQr.forEach(t),UJe=r(wwe," \u2014 "),IS=n(wwe,"A",{href:!0});var eHr=s(IS);JJe=r(eHr,"SegformerConfig"),eHr.forEach(t),YJe=r(wwe," (SegFormer model)"),wwe.forEach(t),KJe=i(L),Hm=n(L,"LI",{});var Awe=s(Hm);_te=n(Awe,"STRONG",{});var oHr=s(_te);ZJe=r(oHr,"sew"),oHr.forEach(t),eYe=r(Awe," \u2014 "),NS=n(Awe,"A",{href:!0});var rHr=s(NS);oYe=r(rHr,"SEWConfig"),rHr.forEach(t),rYe=r(Awe," (SEW model)"),Awe.forEach(t),tYe=i(L),Um=n(L,"LI",{});var Lwe=s(Um);ute=n(Lwe,"STRONG",{});var tHr=s(ute);aYe=r(tHr,"sew-d"),tHr.forEach(t),nYe=r(Lwe," \u2014 "),qS=n(Lwe,"A",{href:!0});var aHr=s(qS);sYe=r(aHr,"SEWDConfig"),aHr.forEach(t),lYe=r(Lwe," (SEW-D model)"),Lwe.forEach(t),iYe=i(L),Jm=n(L,"LI",{});var ywe=s(Jm);bte=n(ywe,"STRONG",{});var nHr=s(bte);dYe=r(nHr,"speech-encoder-decoder"),nHr.forEach(t),cYe=r(ywe," \u2014 "),jS=n(ywe,"A",{href:!0});var sHr=s(jS);fYe=r(sHr,"SpeechEncoderDecoderConfig"),sHr.forEach(t),mYe=r(ywe," (Speech Encoder decoder model)"),ywe.forEach(t),gYe=i(L),Ym=n(L,"LI",{});var xwe=s(Ym);vte=n(xwe,"STRONG",{});var lHr=s(vte);hYe=r(lHr,"speech_to_text"),lHr.forEach(t),pYe=r(xwe," \u2014 "),DS=n(xwe,"A",{href:!0});var iHr=s(DS);_Ye=r(iHr,"Speech2TextConfig"),iHr.forEach(t),uYe=r(xwe," (Speech2Text model)"),xwe.forEach(t),bYe=i(L),Km=n(L,"LI",{});var $we=s(Km);Fte=n($we,"STRONG",{});var dHr=s(Fte);vYe=r(dHr,"speech_to_text_2"),dHr.forEach(t),FYe=r($we," \u2014 "),GS=n($we,"A",{href:!0});var cHr=s(GS);TYe=r(cHr,"Speech2Text2Config"),cHr.forEach(t),MYe=r($we," (Speech2Text2 model)"),$we.forEach(t),EYe=i(L),Zm=n(L,"LI",{});var kwe=s(Zm);Tte=n(kwe,"STRONG",{});var fHr=s(Tte);CYe=r(fHr,"splinter"),fHr.forEach(t),wYe=r(kwe," \u2014 "),OS=n(kwe,"A",{href:!0});var mHr=s(OS);AYe=r(mHr,"SplinterConfig"),mHr.forEach(t),LYe=r(kwe," (Splinter model)"),kwe.forEach(t),yYe=i(L),eg=n(L,"LI",{});var Swe=s(eg);Mte=n(Swe,"STRONG",{});var gHr=s(Mte);xYe=r(gHr,"squeezebert"),gHr.forEach(t),$Ye=r(Swe," \u2014 "),VS=n(Swe,"A",{href:!0});var hHr=s(VS);kYe=r(hHr,"SqueezeBertConfig"),hHr.forEach(t),SYe=r(Swe," (SqueezeBERT model)"),Swe.forEach(t),RYe=i(L),og=n(L,"LI",{});var Rwe=s(og);Ete=n(Rwe,"STRONG",{});var pHr=s(Ete);PYe=r(pHr,"swin"),pHr.forEach(t),BYe=r(Rwe," \u2014 "),XS=n(Rwe,"A",{href:!0});var _Hr=s(XS);IYe=r(_Hr,"SwinConfig"),_Hr.forEach(t),NYe=r(Rwe," (Swin Transformer model)"),Rwe.forEach(t),qYe=i(L),rg=n(L,"LI",{});var Pwe=s(rg);Cte=n(Pwe,"STRONG",{});var uHr=s(Cte);jYe=r(uHr,"t5"),uHr.forEach(t),DYe=r(Pwe," \u2014 "),zS=n(Pwe,"A",{href:!0});var bHr=s(zS);GYe=r(bHr,"T5Config"),bHr.forEach(t),OYe=r(Pwe," (T5 model)"),Pwe.forEach(t),VYe=i(L),tg=n(L,"LI",{});var Bwe=s(tg);wte=n(Bwe,"STRONG",{});var vHr=s(wte);XYe=r(vHr,"tapas"),vHr.forEach(t),zYe=r(Bwe," \u2014 "),WS=n(Bwe,"A",{href:!0});var FHr=s(WS);WYe=r(FHr,"TapasConfig"),FHr.forEach(t),QYe=r(Bwe," (TAPAS model)"),Bwe.forEach(t),HYe=i(L),ag=n(L,"LI",{});var Iwe=s(ag);Ate=n(Iwe,"STRONG",{});var THr=s(Ate);UYe=r(THr,"trajectory_transformer"),THr.forEach(t),JYe=r(Iwe," \u2014 "),QS=n(Iwe,"A",{href:!0});var MHr=s(QS);YYe=r(MHr,"TrajectoryTransformerConfig"),MHr.forEach(t),KYe=r(Iwe," (Trajectory Transformer model)"),Iwe.forEach(t),ZYe=i(L),ng=n(L,"LI",{});var Nwe=s(ng);Lte=n(Nwe,"STRONG",{});var EHr=s(Lte);eKe=r(EHr,"transfo-xl"),EHr.forEach(t),oKe=r(Nwe," \u2014 "),HS=n(Nwe,"A",{href:!0});var CHr=s(HS);rKe=r(CHr,"TransfoXLConfig"),CHr.forEach(t),tKe=r(Nwe," (Transformer-XL model)"),Nwe.forEach(t),aKe=i(L),sg=n(L,"LI",{});var qwe=s(sg);yte=n(qwe,"STRONG",{});var wHr=s(yte);nKe=r(wHr,"trocr"),wHr.forEach(t),sKe=r(qwe," \u2014 "),US=n(qwe,"A",{href:!0});var AHr=s(US);lKe=r(AHr,"TrOCRConfig"),AHr.forEach(t),iKe=r(qwe," (TrOCR model)"),qwe.forEach(t),dKe=i(L),lg=n(L,"LI",{});var jwe=s(lg);xte=n(jwe,"STRONG",{});var LHr=s(xte);cKe=r(LHr,"unispeech"),LHr.forEach(t),fKe=r(jwe," \u2014 "),JS=n(jwe,"A",{href:!0});var yHr=s(JS);mKe=r(yHr,"UniSpeechConfig"),yHr.forEach(t),gKe=r(jwe," (UniSpeech model)"),jwe.forEach(t),hKe=i(L),ig=n(L,"LI",{});var Dwe=s(ig);$te=n(Dwe,"STRONG",{});var xHr=s($te);pKe=r(xHr,"unispeech-sat"),xHr.forEach(t),_Ke=r(Dwe," \u2014 "),YS=n(Dwe,"A",{href:!0});var $Hr=s(YS);uKe=r($Hr,"UniSpeechSatConfig"),$Hr.forEach(t),bKe=r(Dwe," (UniSpeechSat model)"),Dwe.forEach(t),vKe=i(L),dg=n(L,"LI",{});var Gwe=s(dg);kte=n(Gwe,"STRONG",{});var kHr=s(kte);FKe=r(kHr,"van"),kHr.forEach(t),TKe=r(Gwe," \u2014 "),KS=n(Gwe,"A",{href:!0});var SHr=s(KS);MKe=r(SHr,"VanConfig"),SHr.forEach(t),EKe=r(Gwe," (VAN model)"),Gwe.forEach(t),CKe=i(L),cg=n(L,"LI",{});var Owe=s(cg);Ste=n(Owe,"STRONG",{});var RHr=s(Ste);wKe=r(RHr,"vilt"),RHr.forEach(t),AKe=r(Owe," \u2014 "),ZS=n(Owe,"A",{href:!0});var PHr=s(ZS);LKe=r(PHr,"ViltConfig"),PHr.forEach(t),yKe=r(Owe," (ViLT model)"),Owe.forEach(t),xKe=i(L),fg=n(L,"LI",{});var Vwe=s(fg);Rte=n(Vwe,"STRONG",{});var BHr=s(Rte);$Ke=r(BHr,"vision-encoder-decoder"),BHr.forEach(t),kKe=r(Vwe," \u2014 "),eR=n(Vwe,"A",{href:!0});var IHr=s(eR);SKe=r(IHr,"VisionEncoderDecoderConfig"),IHr.forEach(t),RKe=r(Vwe," (Vision Encoder decoder model)"),Vwe.forEach(t),PKe=i(L),mg=n(L,"LI",{});var Xwe=s(mg);Pte=n(Xwe,"STRONG",{});var NHr=s(Pte);BKe=r(NHr,"vision-text-dual-encoder"),NHr.forEach(t),IKe=r(Xwe," \u2014 "),oR=n(Xwe,"A",{href:!0});var qHr=s(oR);NKe=r(qHr,"VisionTextDualEncoderConfig"),qHr.forEach(t),qKe=r(Xwe," (VisionTextDualEncoder model)"),Xwe.forEach(t),jKe=i(L),gg=n(L,"LI",{});var zwe=s(gg);Bte=n(zwe,"STRONG",{});var jHr=s(Bte);DKe=r(jHr,"visual_bert"),jHr.forEach(t),GKe=r(zwe," \u2014 "),rR=n(zwe,"A",{href:!0});var DHr=s(rR);OKe=r(DHr,"VisualBertConfig"),DHr.forEach(t),VKe=r(zwe," (VisualBERT model)"),zwe.forEach(t),XKe=i(L),hg=n(L,"LI",{});var Wwe=s(hg);Ite=n(Wwe,"STRONG",{});var GHr=s(Ite);zKe=r(GHr,"vit"),GHr.forEach(t),WKe=r(Wwe," \u2014 "),tR=n(Wwe,"A",{href:!0});var OHr=s(tR);QKe=r(OHr,"ViTConfig"),OHr.forEach(t),HKe=r(Wwe," (ViT model)"),Wwe.forEach(t),UKe=i(L),pg=n(L,"LI",{});var Qwe=s(pg);Nte=n(Qwe,"STRONG",{});var VHr=s(Nte);JKe=r(VHr,"vit_mae"),VHr.forEach(t),YKe=r(Qwe," \u2014 "),aR=n(Qwe,"A",{href:!0});var XHr=s(aR);KKe=r(XHr,"ViTMAEConfig"),XHr.forEach(t),ZKe=r(Qwe," (ViTMAE model)"),Qwe.forEach(t),eZe=i(L),_g=n(L,"LI",{});var Hwe=s(_g);qte=n(Hwe,"STRONG",{});var zHr=s(qte);oZe=r(zHr,"wav2vec2"),zHr.forEach(t),rZe=r(Hwe," \u2014 "),nR=n(Hwe,"A",{href:!0});var WHr=s(nR);tZe=r(WHr,"Wav2Vec2Config"),WHr.forEach(t),aZe=r(Hwe," (Wav2Vec2 model)"),Hwe.forEach(t),nZe=i(L),ug=n(L,"LI",{});var Uwe=s(ug);jte=n(Uwe,"STRONG",{});var QHr=s(jte);sZe=r(QHr,"wav2vec2-conformer"),QHr.forEach(t),lZe=r(Uwe," \u2014 "),sR=n(Uwe,"A",{href:!0});var HHr=s(sR);iZe=r(HHr,"Wav2Vec2ConformerConfig"),HHr.forEach(t),dZe=r(Uwe," (Wav2Vec2-Conformer model)"),Uwe.forEach(t),cZe=i(L),bg=n(L,"LI",{});var Jwe=s(bg);Dte=n(Jwe,"STRONG",{});var UHr=s(Dte);fZe=r(UHr,"wavlm"),UHr.forEach(t),mZe=r(Jwe," \u2014 "),lR=n(Jwe,"A",{href:!0});var JHr=s(lR);gZe=r(JHr,"WavLMConfig"),JHr.forEach(t),hZe=r(Jwe," (WavLM model)"),Jwe.forEach(t),pZe=i(L),vg=n(L,"LI",{});var Ywe=s(vg);Gte=n(Ywe,"STRONG",{});var YHr=s(Gte);_Ze=r(YHr,"xglm"),YHr.forEach(t),uZe=r(Ywe," \u2014 "),iR=n(Ywe,"A",{href:!0});var KHr=s(iR);bZe=r(KHr,"XGLMConfig"),KHr.forEach(t),vZe=r(Ywe," (XGLM model)"),Ywe.forEach(t),FZe=i(L),Fg=n(L,"LI",{});var Kwe=s(Fg);Ote=n(Kwe,"STRONG",{});var ZHr=s(Ote);TZe=r(ZHr,"xlm"),ZHr.forEach(t),MZe=r(Kwe," \u2014 "),dR=n(Kwe,"A",{href:!0});var eUr=s(dR);EZe=r(eUr,"XLMConfig"),eUr.forEach(t),CZe=r(Kwe," (XLM model)"),Kwe.forEach(t),wZe=i(L),Tg=n(L,"LI",{});var Zwe=s(Tg);Vte=n(Zwe,"STRONG",{});var oUr=s(Vte);AZe=r(oUr,"xlm-prophetnet"),oUr.forEach(t),LZe=r(Zwe," \u2014 "),cR=n(Zwe,"A",{href:!0});var rUr=s(cR);yZe=r(rUr,"XLMProphetNetConfig"),rUr.forEach(t),xZe=r(Zwe," (XLM-ProphetNet model)"),Zwe.forEach(t),$Ze=i(L),Mg=n(L,"LI",{});var eAe=s(Mg);Xte=n(eAe,"STRONG",{});var tUr=s(Xte);kZe=r(tUr,"xlm-roberta"),tUr.forEach(t),SZe=r(eAe," \u2014 "),fR=n(eAe,"A",{href:!0});var aUr=s(fR);RZe=r(aUr,"XLMRobertaConfig"),aUr.forEach(t),PZe=r(eAe," (XLM-RoBERTa model)"),eAe.forEach(t),BZe=i(L),Eg=n(L,"LI",{});var oAe=s(Eg);zte=n(oAe,"STRONG",{});var nUr=s(zte);IZe=r(nUr,"xlm-roberta-xl"),nUr.forEach(t),NZe=r(oAe," \u2014 "),mR=n(oAe,"A",{href:!0});var sUr=s(mR);qZe=r(sUr,"XLMRobertaXLConfig"),sUr.forEach(t),jZe=r(oAe," (XLM-RoBERTa-XL model)"),oAe.forEach(t),DZe=i(L),Cg=n(L,"LI",{});var rAe=s(Cg);Wte=n(rAe,"STRONG",{});var lUr=s(Wte);GZe=r(lUr,"xlnet"),lUr.forEach(t),OZe=r(rAe," \u2014 "),gR=n(rAe,"A",{href:!0});var iUr=s(gR);VZe=r(iUr,"XLNetConfig"),iUr.forEach(t),XZe=r(rAe," (XLNet model)"),rAe.forEach(t),zZe=i(L),wg=n(L,"LI",{});var tAe=s(wg);Qte=n(tAe,"STRONG",{});var dUr=s(Qte);WZe=r(dUr,"yolos"),dUr.forEach(t),QZe=r(tAe," \u2014 "),hR=n(tAe,"A",{href:!0});var cUr=s(hR);HZe=r(cUr,"YolosConfig"),cUr.forEach(t),UZe=r(tAe," (YOLOS model)"),tAe.forEach(t),JZe=i(L),Ag=n(L,"LI",{});var aAe=s(Ag);Hte=n(aAe,"STRONG",{});var fUr=s(Hte);YZe=r(fUr,"yoso"),fUr.forEach(t),KZe=r(aAe," \u2014 "),pR=n(aAe,"A",{href:!0});var mUr=s(pR);ZZe=r(mUr,"YosoConfig"),mUr.forEach(t),eeo=r(aAe," (YOSO model)"),aAe.forEach(t),L.forEach(t),oeo=i(rt),T(Lg.$$.fragment,rt),rt.forEach(t),reo=i(ot),yg=n(ot,"DIV",{class:!0});var nGe=s(yg);T(H6.$$.fragment,nGe),teo=i(nGe),Ute=n(nGe,"P",{});var gUr=s(Ute);aeo=r(gUr,"Register a new configuration for this class."),gUr.forEach(t),nGe.forEach(t),ot.forEach(t),ije=i(f),Ei=n(f,"H2",{class:!0});var sGe=s(Ei);xg=n(sGe,"A",{id:!0,class:!0,href:!0});var hUr=s(xg);Jte=n(hUr,"SPAN",{});var pUr=s(Jte);T(U6.$$.fragment,pUr),pUr.forEach(t),hUr.forEach(t),neo=i(sGe),Yte=n(sGe,"SPAN",{});var _Ur=s(Yte);seo=r(_Ur,"AutoTokenizer"),_Ur.forEach(t),sGe.forEach(t),dje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(J6.$$.fragment,qs),leo=i(qs),Y6=n(qs,"P",{});var lGe=s(Y6);ieo=r(lGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=n(lGe,"A",{href:!0});var uUr=s(_R);deo=r(uUr,"AutoTokenizer.from_pretrained()"),uUr.forEach(t),ceo=r(lGe," class method."),lGe.forEach(t),feo=i(qs),K6=n(qs,"P",{});var iGe=s(K6);meo=r(iGe,"This class cannot be instantiated directly using "),Kte=n(iGe,"CODE",{});var bUr=s(Kte);geo=r(bUr,"__init__()"),bUr.forEach(t),heo=r(iGe," (throws an error)."),iGe.forEach(t),peo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(Z6.$$.fragment,js),_eo=i(js),Zte=n(js,"P",{});var vUr=s(Zte);ueo=r(vUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vUr.forEach(t),beo=i(js),La=n(js,"P",{});var Xw=s(La);veo=r(Xw,"The tokenizer class to instantiate is selected based on the "),eae=n(Xw,"CODE",{});var FUr=s(eae);Feo=r(FUr,"model_type"),FUr.forEach(t),Teo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),oae=n(Xw,"CODE",{});var TUr=s(oae);Meo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),Eeo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(Xw,"CODE",{});var MUr=s(rae);Ceo=r(MUr,"pretrained_model_name_or_path"),MUr.forEach(t),weo=r(Xw,":"),Xw.forEach(t),Aeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var e$=s(Sn);tae=n(e$,"STRONG",{});var EUr=s(tae);Leo=r(EUr,"albert"),EUr.forEach(t),yeo=r(e$," \u2014 "),uR=n(e$,"A",{href:!0});var CUr=s(uR);xeo=r(CUr,"AlbertTokenizer"),CUr.forEach(t),$eo=r(e$," or "),bR=n(e$,"A",{href:!0});var wUr=s(bR);keo=r(wUr,"AlbertTokenizerFast"),wUr.forEach(t),Seo=r(e$," (ALBERT model)"),e$.forEach(t),Reo=i(S),Rn=n(S,"LI",{});var o$=s(Rn);aae=n(o$,"STRONG",{});var AUr=s(aae);Peo=r(AUr,"bart"),AUr.forEach(t),Beo=r(o$," \u2014 "),vR=n(o$,"A",{href:!0});var LUr=s(vR);Ieo=r(LUr,"BartTokenizer"),LUr.forEach(t),Neo=r(o$," or "),FR=n(o$,"A",{href:!0});var yUr=s(FR);qeo=r(yUr,"BartTokenizerFast"),yUr.forEach(t),jeo=r(o$," (BART model)"),o$.forEach(t),Deo=i(S),Pn=n(S,"LI",{});var r$=s(Pn);nae=n(r$,"STRONG",{});var xUr=s(nae);Geo=r(xUr,"barthez"),xUr.forEach(t),Oeo=r(r$," \u2014 "),TR=n(r$,"A",{href:!0});var $Ur=s(TR);Veo=r($Ur,"BarthezTokenizer"),$Ur.forEach(t),Xeo=r(r$," or "),MR=n(r$,"A",{href:!0});var kUr=s(MR);zeo=r(kUr,"BarthezTokenizerFast"),kUr.forEach(t),Weo=r(r$," (BARThez model)"),r$.forEach(t),Qeo=i(S),$g=n(S,"LI",{});var nAe=s($g);sae=n(nAe,"STRONG",{});var SUr=s(sae);Heo=r(SUr,"bartpho"),SUr.forEach(t),Ueo=r(nAe," \u2014 "),ER=n(nAe,"A",{href:!0});var RUr=s(ER);Jeo=r(RUr,"BartphoTokenizer"),RUr.forEach(t),Yeo=r(nAe," (BARTpho model)"),nAe.forEach(t),Keo=i(S),Bn=n(S,"LI",{});var t$=s(Bn);lae=n(t$,"STRONG",{});var PUr=s(lae);Zeo=r(PUr,"bert"),PUr.forEach(t),eoo=r(t$," \u2014 "),CR=n(t$,"A",{href:!0});var BUr=s(CR);ooo=r(BUr,"BertTokenizer"),BUr.forEach(t),roo=r(t$," or "),wR=n(t$,"A",{href:!0});var IUr=s(wR);too=r(IUr,"BertTokenizerFast"),IUr.forEach(t),aoo=r(t$," (BERT model)"),t$.forEach(t),noo=i(S),kg=n(S,"LI",{});var sAe=s(kg);iae=n(sAe,"STRONG",{});var NUr=s(iae);soo=r(NUr,"bert-generation"),NUr.forEach(t),loo=r(sAe," \u2014 "),AR=n(sAe,"A",{href:!0});var qUr=s(AR);ioo=r(qUr,"BertGenerationTokenizer"),qUr.forEach(t),doo=r(sAe," (Bert Generation model)"),sAe.forEach(t),coo=i(S),Sg=n(S,"LI",{});var lAe=s(Sg);dae=n(lAe,"STRONG",{});var jUr=s(dae);foo=r(jUr,"bert-japanese"),jUr.forEach(t),moo=r(lAe," \u2014 "),LR=n(lAe,"A",{href:!0});var DUr=s(LR);goo=r(DUr,"BertJapaneseTokenizer"),DUr.forEach(t),hoo=r(lAe," (BertJapanese model)"),lAe.forEach(t),poo=i(S),Rg=n(S,"LI",{});var iAe=s(Rg);cae=n(iAe,"STRONG",{});var GUr=s(cae);_oo=r(GUr,"bertweet"),GUr.forEach(t),uoo=r(iAe," \u2014 "),yR=n(iAe,"A",{href:!0});var OUr=s(yR);boo=r(OUr,"BertweetTokenizer"),OUr.forEach(t),voo=r(iAe," (BERTweet model)"),iAe.forEach(t),Foo=i(S),In=n(S,"LI",{});var a$=s(In);fae=n(a$,"STRONG",{});var VUr=s(fae);Too=r(VUr,"big_bird"),VUr.forEach(t),Moo=r(a$," \u2014 "),xR=n(a$,"A",{href:!0});var XUr=s(xR);Eoo=r(XUr,"BigBirdTokenizer"),XUr.forEach(t),Coo=r(a$," or "),$R=n(a$,"A",{href:!0});var zUr=s($R);woo=r(zUr,"BigBirdTokenizerFast"),zUr.forEach(t),Aoo=r(a$," (BigBird model)"),a$.forEach(t),Loo=i(S),Nn=n(S,"LI",{});var n$=s(Nn);mae=n(n$,"STRONG",{});var WUr=s(mae);yoo=r(WUr,"bigbird_pegasus"),WUr.forEach(t),xoo=r(n$," \u2014 "),kR=n(n$,"A",{href:!0});var QUr=s(kR);$oo=r(QUr,"PegasusTokenizer"),QUr.forEach(t),koo=r(n$," or "),SR=n(n$,"A",{href:!0});var HUr=s(SR);Soo=r(HUr,"PegasusTokenizerFast"),HUr.forEach(t),Roo=r(n$," (BigBird-Pegasus model)"),n$.forEach(t),Poo=i(S),qn=n(S,"LI",{});var s$=s(qn);gae=n(s$,"STRONG",{});var UUr=s(gae);Boo=r(UUr,"blenderbot"),UUr.forEach(t),Ioo=r(s$," \u2014 "),RR=n(s$,"A",{href:!0});var JUr=s(RR);Noo=r(JUr,"BlenderbotTokenizer"),JUr.forEach(t),qoo=r(s$," or "),PR=n(s$,"A",{href:!0});var YUr=s(PR);joo=r(YUr,"BlenderbotTokenizerFast"),YUr.forEach(t),Doo=r(s$," (Blenderbot model)"),s$.forEach(t),Goo=i(S),Pg=n(S,"LI",{});var dAe=s(Pg);hae=n(dAe,"STRONG",{});var KUr=s(hae);Ooo=r(KUr,"blenderbot-small"),KUr.forEach(t),Voo=r(dAe," \u2014 "),BR=n(dAe,"A",{href:!0});var ZUr=s(BR);Xoo=r(ZUr,"BlenderbotSmallTokenizer"),ZUr.forEach(t),zoo=r(dAe," (BlenderbotSmall model)"),dAe.forEach(t),Woo=i(S),Bg=n(S,"LI",{});var cAe=s(Bg);pae=n(cAe,"STRONG",{});var eJr=s(pae);Qoo=r(eJr,"byt5"),eJr.forEach(t),Hoo=r(cAe," \u2014 "),IR=n(cAe,"A",{href:!0});var oJr=s(IR);Uoo=r(oJr,"ByT5Tokenizer"),oJr.forEach(t),Joo=r(cAe," (ByT5 model)"),cAe.forEach(t),Yoo=i(S),jn=n(S,"LI",{});var l$=s(jn);_ae=n(l$,"STRONG",{});var rJr=s(_ae);Koo=r(rJr,"camembert"),rJr.forEach(t),Zoo=r(l$," \u2014 "),NR=n(l$,"A",{href:!0});var tJr=s(NR);ero=r(tJr,"CamembertTokenizer"),tJr.forEach(t),oro=r(l$," or "),qR=n(l$,"A",{href:!0});var aJr=s(qR);rro=r(aJr,"CamembertTokenizerFast"),aJr.forEach(t),tro=r(l$," (CamemBERT model)"),l$.forEach(t),aro=i(S),Ig=n(S,"LI",{});var fAe=s(Ig);uae=n(fAe,"STRONG",{});var nJr=s(uae);nro=r(nJr,"canine"),nJr.forEach(t),sro=r(fAe," \u2014 "),jR=n(fAe,"A",{href:!0});var sJr=s(jR);lro=r(sJr,"CanineTokenizer"),sJr.forEach(t),iro=r(fAe," (CANINE model)"),fAe.forEach(t),dro=i(S),Dn=n(S,"LI",{});var i$=s(Dn);bae=n(i$,"STRONG",{});var lJr=s(bae);cro=r(lJr,"clip"),lJr.forEach(t),fro=r(i$," \u2014 "),DR=n(i$,"A",{href:!0});var iJr=s(DR);mro=r(iJr,"CLIPTokenizer"),iJr.forEach(t),gro=r(i$," or "),GR=n(i$,"A",{href:!0});var dJr=s(GR);hro=r(dJr,"CLIPTokenizerFast"),dJr.forEach(t),pro=r(i$," (CLIP model)"),i$.forEach(t),_ro=i(S),Gn=n(S,"LI",{});var d$=s(Gn);vae=n(d$,"STRONG",{});var cJr=s(vae);uro=r(cJr,"convbert"),cJr.forEach(t),bro=r(d$," \u2014 "),OR=n(d$,"A",{href:!0});var fJr=s(OR);vro=r(fJr,"ConvBertTokenizer"),fJr.forEach(t),Fro=r(d$," or "),VR=n(d$,"A",{href:!0});var mJr=s(VR);Tro=r(mJr,"ConvBertTokenizerFast"),mJr.forEach(t),Mro=r(d$," (ConvBERT model)"),d$.forEach(t),Ero=i(S),On=n(S,"LI",{});var c$=s(On);Fae=n(c$,"STRONG",{});var gJr=s(Fae);Cro=r(gJr,"cpm"),gJr.forEach(t),wro=r(c$," \u2014 "),XR=n(c$,"A",{href:!0});var hJr=s(XR);Aro=r(hJr,"CpmTokenizer"),hJr.forEach(t),Lro=r(c$," or "),zR=n(c$,"A",{href:!0});var pJr=s(zR);yro=r(pJr,"CpmTokenizerFast"),pJr.forEach(t),xro=r(c$," (CPM model)"),c$.forEach(t),$ro=i(S),Ng=n(S,"LI",{});var mAe=s(Ng);Tae=n(mAe,"STRONG",{});var _Jr=s(Tae);kro=r(_Jr,"ctrl"),_Jr.forEach(t),Sro=r(mAe," \u2014 "),WR=n(mAe,"A",{href:!0});var uJr=s(WR);Rro=r(uJr,"CTRLTokenizer"),uJr.forEach(t),Pro=r(mAe," (CTRL model)"),mAe.forEach(t),Bro=i(S),Vn=n(S,"LI",{});var f$=s(Vn);Mae=n(f$,"STRONG",{});var bJr=s(Mae);Iro=r(bJr,"data2vec-text"),bJr.forEach(t),Nro=r(f$," \u2014 "),QR=n(f$,"A",{href:!0});var vJr=s(QR);qro=r(vJr,"RobertaTokenizer"),vJr.forEach(t),jro=r(f$," or "),HR=n(f$,"A",{href:!0});var FJr=s(HR);Dro=r(FJr,"RobertaTokenizerFast"),FJr.forEach(t),Gro=r(f$," (Data2VecText model)"),f$.forEach(t),Oro=i(S),Xn=n(S,"LI",{});var m$=s(Xn);Eae=n(m$,"STRONG",{});var TJr=s(Eae);Vro=r(TJr,"deberta"),TJr.forEach(t),Xro=r(m$," \u2014 "),UR=n(m$,"A",{href:!0});var MJr=s(UR);zro=r(MJr,"DebertaTokenizer"),MJr.forEach(t),Wro=r(m$," or "),JR=n(m$,"A",{href:!0});var EJr=s(JR);Qro=r(EJr,"DebertaTokenizerFast"),EJr.forEach(t),Hro=r(m$," (DeBERTa model)"),m$.forEach(t),Uro=i(S),zn=n(S,"LI",{});var g$=s(zn);Cae=n(g$,"STRONG",{});var CJr=s(Cae);Jro=r(CJr,"deberta-v2"),CJr.forEach(t),Yro=r(g$," \u2014 "),YR=n(g$,"A",{href:!0});var wJr=s(YR);Kro=r(wJr,"DebertaV2Tokenizer"),wJr.forEach(t),Zro=r(g$," or "),KR=n(g$,"A",{href:!0});var AJr=s(KR);eto=r(AJr,"DebertaV2TokenizerFast"),AJr.forEach(t),oto=r(g$," (DeBERTa-v2 model)"),g$.forEach(t),rto=i(S),Wn=n(S,"LI",{});var h$=s(Wn);wae=n(h$,"STRONG",{});var LJr=s(wae);tto=r(LJr,"distilbert"),LJr.forEach(t),ato=r(h$," \u2014 "),ZR=n(h$,"A",{href:!0});var yJr=s(ZR);nto=r(yJr,"DistilBertTokenizer"),yJr.forEach(t),sto=r(h$," or "),eP=n(h$,"A",{href:!0});var xJr=s(eP);lto=r(xJr,"DistilBertTokenizerFast"),xJr.forEach(t),ito=r(h$," (DistilBERT model)"),h$.forEach(t),dto=i(S),Qn=n(S,"LI",{});var p$=s(Qn);Aae=n(p$,"STRONG",{});var $Jr=s(Aae);cto=r($Jr,"dpr"),$Jr.forEach(t),fto=r(p$," \u2014 "),oP=n(p$,"A",{href:!0});var kJr=s(oP);mto=r(kJr,"DPRQuestionEncoderTokenizer"),kJr.forEach(t),gto=r(p$," or "),rP=n(p$,"A",{href:!0});var SJr=s(rP);hto=r(SJr,"DPRQuestionEncoderTokenizerFast"),SJr.forEach(t),pto=r(p$," (DPR model)"),p$.forEach(t),_to=i(S),Hn=n(S,"LI",{});var _$=s(Hn);Lae=n(_$,"STRONG",{});var RJr=s(Lae);uto=r(RJr,"electra"),RJr.forEach(t),bto=r(_$," \u2014 "),tP=n(_$,"A",{href:!0});var PJr=s(tP);vto=r(PJr,"ElectraTokenizer"),PJr.forEach(t),Fto=r(_$," or "),aP=n(_$,"A",{href:!0});var BJr=s(aP);Tto=r(BJr,"ElectraTokenizerFast"),BJr.forEach(t),Mto=r(_$," (ELECTRA model)"),_$.forEach(t),Eto=i(S),qg=n(S,"LI",{});var gAe=s(qg);yae=n(gAe,"STRONG",{});var IJr=s(yae);Cto=r(IJr,"flaubert"),IJr.forEach(t),wto=r(gAe," \u2014 "),nP=n(gAe,"A",{href:!0});var NJr=s(nP);Ato=r(NJr,"FlaubertTokenizer"),NJr.forEach(t),Lto=r(gAe," (FlauBERT model)"),gAe.forEach(t),yto=i(S),Un=n(S,"LI",{});var u$=s(Un);xae=n(u$,"STRONG",{});var qJr=s(xae);xto=r(qJr,"fnet"),qJr.forEach(t),$to=r(u$," \u2014 "),sP=n(u$,"A",{href:!0});var jJr=s(sP);kto=r(jJr,"FNetTokenizer"),jJr.forEach(t),Sto=r(u$," or "),lP=n(u$,"A",{href:!0});var DJr=s(lP);Rto=r(DJr,"FNetTokenizerFast"),DJr.forEach(t),Pto=r(u$," (FNet model)"),u$.forEach(t),Bto=i(S),jg=n(S,"LI",{});var hAe=s(jg);$ae=n(hAe,"STRONG",{});var GJr=s($ae);Ito=r(GJr,"fsmt"),GJr.forEach(t),Nto=r(hAe," \u2014 "),iP=n(hAe,"A",{href:!0});var OJr=s(iP);qto=r(OJr,"FSMTTokenizer"),OJr.forEach(t),jto=r(hAe," (FairSeq Machine-Translation model)"),hAe.forEach(t),Dto=i(S),Jn=n(S,"LI",{});var b$=s(Jn);kae=n(b$,"STRONG",{});var VJr=s(kae);Gto=r(VJr,"funnel"),VJr.forEach(t),Oto=r(b$," \u2014 "),dP=n(b$,"A",{href:!0});var XJr=s(dP);Vto=r(XJr,"FunnelTokenizer"),XJr.forEach(t),Xto=r(b$," or "),cP=n(b$,"A",{href:!0});var zJr=s(cP);zto=r(zJr,"FunnelTokenizerFast"),zJr.forEach(t),Wto=r(b$," (Funnel Transformer model)"),b$.forEach(t),Qto=i(S),Yn=n(S,"LI",{});var v$=s(Yn);Sae=n(v$,"STRONG",{});var WJr=s(Sae);Hto=r(WJr,"gpt2"),WJr.forEach(t),Uto=r(v$," \u2014 "),fP=n(v$,"A",{href:!0});var QJr=s(fP);Jto=r(QJr,"GPT2Tokenizer"),QJr.forEach(t),Yto=r(v$," or "),mP=n(v$,"A",{href:!0});var HJr=s(mP);Kto=r(HJr,"GPT2TokenizerFast"),HJr.forEach(t),Zto=r(v$," (OpenAI GPT-2 model)"),v$.forEach(t),eao=i(S),Kn=n(S,"LI",{});var F$=s(Kn);Rae=n(F$,"STRONG",{});var UJr=s(Rae);oao=r(UJr,"gpt_neo"),UJr.forEach(t),rao=r(F$," \u2014 "),gP=n(F$,"A",{href:!0});var JJr=s(gP);tao=r(JJr,"GPT2Tokenizer"),JJr.forEach(t),aao=r(F$," or "),hP=n(F$,"A",{href:!0});var YJr=s(hP);nao=r(YJr,"GPT2TokenizerFast"),YJr.forEach(t),sao=r(F$," (GPT Neo model)"),F$.forEach(t),lao=i(S),Dg=n(S,"LI",{});var pAe=s(Dg);Pae=n(pAe,"STRONG",{});var KJr=s(Pae);iao=r(KJr,"gpt_neox"),KJr.forEach(t),dao=r(pAe," \u2014 "),pP=n(pAe,"A",{href:!0});var ZJr=s(pP);cao=r(ZJr,"GPTNeoXTokenizerFast"),ZJr.forEach(t),fao=r(pAe," (GPT NeoX model)"),pAe.forEach(t),mao=i(S),Zn=n(S,"LI",{});var T$=s(Zn);Bae=n(T$,"STRONG",{});var eYr=s(Bae);gao=r(eYr,"gptj"),eYr.forEach(t),hao=r(T$," \u2014 "),_P=n(T$,"A",{href:!0});var oYr=s(_P);pao=r(oYr,"GPT2Tokenizer"),oYr.forEach(t),_ao=r(T$," or "),uP=n(T$,"A",{href:!0});var rYr=s(uP);uao=r(rYr,"GPT2TokenizerFast"),rYr.forEach(t),bao=r(T$," (GPT-J model)"),T$.forEach(t),vao=i(S),es=n(S,"LI",{});var M$=s(es);Iae=n(M$,"STRONG",{});var tYr=s(Iae);Fao=r(tYr,"herbert"),tYr.forEach(t),Tao=r(M$," \u2014 "),bP=n(M$,"A",{href:!0});var aYr=s(bP);Mao=r(aYr,"HerbertTokenizer"),aYr.forEach(t),Eao=r(M$," or "),vP=n(M$,"A",{href:!0});var nYr=s(vP);Cao=r(nYr,"HerbertTokenizerFast"),nYr.forEach(t),wao=r(M$," (HerBERT model)"),M$.forEach(t),Aao=i(S),Gg=n(S,"LI",{});var _Ae=s(Gg);Nae=n(_Ae,"STRONG",{});var sYr=s(Nae);Lao=r(sYr,"hubert"),sYr.forEach(t),yao=r(_Ae," \u2014 "),FP=n(_Ae,"A",{href:!0});var lYr=s(FP);xao=r(lYr,"Wav2Vec2CTCTokenizer"),lYr.forEach(t),$ao=r(_Ae," (Hubert model)"),_Ae.forEach(t),kao=i(S),os=n(S,"LI",{});var E$=s(os);qae=n(E$,"STRONG",{});var iYr=s(qae);Sao=r(iYr,"ibert"),iYr.forEach(t),Rao=r(E$," \u2014 "),TP=n(E$,"A",{href:!0});var dYr=s(TP);Pao=r(dYr,"RobertaTokenizer"),dYr.forEach(t),Bao=r(E$," or "),MP=n(E$,"A",{href:!0});var cYr=s(MP);Iao=r(cYr,"RobertaTokenizerFast"),cYr.forEach(t),Nao=r(E$," (I-BERT model)"),E$.forEach(t),qao=i(S),rs=n(S,"LI",{});var C$=s(rs);jae=n(C$,"STRONG",{});var fYr=s(jae);jao=r(fYr,"layoutlm"),fYr.forEach(t),Dao=r(C$," \u2014 "),EP=n(C$,"A",{href:!0});var mYr=s(EP);Gao=r(mYr,"LayoutLMTokenizer"),mYr.forEach(t),Oao=r(C$," or "),CP=n(C$,"A",{href:!0});var gYr=s(CP);Vao=r(gYr,"LayoutLMTokenizerFast"),gYr.forEach(t),Xao=r(C$," (LayoutLM model)"),C$.forEach(t),zao=i(S),ts=n(S,"LI",{});var w$=s(ts);Dae=n(w$,"STRONG",{});var hYr=s(Dae);Wao=r(hYr,"layoutlmv2"),hYr.forEach(t),Qao=r(w$," \u2014 "),wP=n(w$,"A",{href:!0});var pYr=s(wP);Hao=r(pYr,"LayoutLMv2Tokenizer"),pYr.forEach(t),Uao=r(w$," or "),AP=n(w$,"A",{href:!0});var _Yr=s(AP);Jao=r(_Yr,"LayoutLMv2TokenizerFast"),_Yr.forEach(t),Yao=r(w$," (LayoutLMv2 model)"),w$.forEach(t),Kao=i(S),as=n(S,"LI",{});var A$=s(as);Gae=n(A$,"STRONG",{});var uYr=s(Gae);Zao=r(uYr,"layoutlmv3"),uYr.forEach(t),eno=r(A$," \u2014 "),LP=n(A$,"A",{href:!0});var bYr=s(LP);ono=r(bYr,"LayoutLMv3Tokenizer"),bYr.forEach(t),rno=r(A$," or "),yP=n(A$,"A",{href:!0});var vYr=s(yP);tno=r(vYr,"LayoutLMv3TokenizerFast"),vYr.forEach(t),ano=r(A$," (LayoutLMv3 model)"),A$.forEach(t),nno=i(S),ns=n(S,"LI",{});var L$=s(ns);Oae=n(L$,"STRONG",{});var FYr=s(Oae);sno=r(FYr,"layoutxlm"),FYr.forEach(t),lno=r(L$," \u2014 "),xP=n(L$,"A",{href:!0});var TYr=s(xP);ino=r(TYr,"LayoutXLMTokenizer"),TYr.forEach(t),dno=r(L$," or "),$P=n(L$,"A",{href:!0});var MYr=s($P);cno=r(MYr,"LayoutXLMTokenizerFast"),MYr.forEach(t),fno=r(L$," (LayoutXLM model)"),L$.forEach(t),mno=i(S),ss=n(S,"LI",{});var y$=s(ss);Vae=n(y$,"STRONG",{});var EYr=s(Vae);gno=r(EYr,"led"),EYr.forEach(t),hno=r(y$," \u2014 "),kP=n(y$,"A",{href:!0});var CYr=s(kP);pno=r(CYr,"LEDTokenizer"),CYr.forEach(t),_no=r(y$," or "),SP=n(y$,"A",{href:!0});var wYr=s(SP);uno=r(wYr,"LEDTokenizerFast"),wYr.forEach(t),bno=r(y$," (LED model)"),y$.forEach(t),vno=i(S),ls=n(S,"LI",{});var x$=s(ls);Xae=n(x$,"STRONG",{});var AYr=s(Xae);Fno=r(AYr,"longformer"),AYr.forEach(t),Tno=r(x$," \u2014 "),RP=n(x$,"A",{href:!0});var LYr=s(RP);Mno=r(LYr,"LongformerTokenizer"),LYr.forEach(t),Eno=r(x$," or "),PP=n(x$,"A",{href:!0});var yYr=s(PP);Cno=r(yYr,"LongformerTokenizerFast"),yYr.forEach(t),wno=r(x$," (Longformer model)"),x$.forEach(t),Ano=i(S),Og=n(S,"LI",{});var uAe=s(Og);zae=n(uAe,"STRONG",{});var xYr=s(zae);Lno=r(xYr,"luke"),xYr.forEach(t),yno=r(uAe," \u2014 "),BP=n(uAe,"A",{href:!0});var $Yr=s(BP);xno=r($Yr,"LukeTokenizer"),$Yr.forEach(t),$no=r(uAe," (LUKE model)"),uAe.forEach(t),kno=i(S),is=n(S,"LI",{});var $$=s(is);Wae=n($$,"STRONG",{});var kYr=s(Wae);Sno=r(kYr,"lxmert"),kYr.forEach(t),Rno=r($$," \u2014 "),IP=n($$,"A",{href:!0});var SYr=s(IP);Pno=r(SYr,"LxmertTokenizer"),SYr.forEach(t),Bno=r($$," or "),NP=n($$,"A",{href:!0});var RYr=s(NP);Ino=r(RYr,"LxmertTokenizerFast"),RYr.forEach(t),Nno=r($$," (LXMERT model)"),$$.forEach(t),qno=i(S),Vg=n(S,"LI",{});var bAe=s(Vg);Qae=n(bAe,"STRONG",{});var PYr=s(Qae);jno=r(PYr,"m2m_100"),PYr.forEach(t),Dno=r(bAe," \u2014 "),qP=n(bAe,"A",{href:!0});var BYr=s(qP);Gno=r(BYr,"M2M100Tokenizer"),BYr.forEach(t),Ono=r(bAe," (M2M100 model)"),bAe.forEach(t),Vno=i(S),Xg=n(S,"LI",{});var vAe=s(Xg);Hae=n(vAe,"STRONG",{});var IYr=s(Hae);Xno=r(IYr,"marian"),IYr.forEach(t),zno=r(vAe," \u2014 "),jP=n(vAe,"A",{href:!0});var NYr=s(jP);Wno=r(NYr,"MarianTokenizer"),NYr.forEach(t),Qno=r(vAe," (Marian model)"),vAe.forEach(t),Hno=i(S),ds=n(S,"LI",{});var k$=s(ds);Uae=n(k$,"STRONG",{});var qYr=s(Uae);Uno=r(qYr,"mbart"),qYr.forEach(t),Jno=r(k$," \u2014 "),DP=n(k$,"A",{href:!0});var jYr=s(DP);Yno=r(jYr,"MBartTokenizer"),jYr.forEach(t),Kno=r(k$," or "),GP=n(k$,"A",{href:!0});var DYr=s(GP);Zno=r(DYr,"MBartTokenizerFast"),DYr.forEach(t),eso=r(k$," (mBART model)"),k$.forEach(t),oso=i(S),cs=n(S,"LI",{});var S$=s(cs);Jae=n(S$,"STRONG",{});var GYr=s(Jae);rso=r(GYr,"mbart50"),GYr.forEach(t),tso=r(S$," \u2014 "),OP=n(S$,"A",{href:!0});var OYr=s(OP);aso=r(OYr,"MBart50Tokenizer"),OYr.forEach(t),nso=r(S$," or "),VP=n(S$,"A",{href:!0});var VYr=s(VP);sso=r(VYr,"MBart50TokenizerFast"),VYr.forEach(t),lso=r(S$," (mBART-50 model)"),S$.forEach(t),iso=i(S),fs=n(S,"LI",{});var R$=s(fs);Yae=n(R$,"STRONG",{});var XYr=s(Yae);dso=r(XYr,"megatron-bert"),XYr.forEach(t),cso=r(R$," \u2014 "),XP=n(R$,"A",{href:!0});var zYr=s(XP);fso=r(zYr,"BertTokenizer"),zYr.forEach(t),mso=r(R$," or "),zP=n(R$,"A",{href:!0});var WYr=s(zP);gso=r(WYr,"BertTokenizerFast"),WYr.forEach(t),hso=r(R$," (Megatron-BERT model)"),R$.forEach(t),pso=i(S),zg=n(S,"LI",{});var FAe=s(zg);Kae=n(FAe,"STRONG",{});var QYr=s(Kae);_so=r(QYr,"mluke"),QYr.forEach(t),uso=r(FAe," \u2014 "),WP=n(FAe,"A",{href:!0});var HYr=s(WP);bso=r(HYr,"MLukeTokenizer"),HYr.forEach(t),vso=r(FAe," (mLUKE model)"),FAe.forEach(t),Fso=i(S),ms=n(S,"LI",{});var P$=s(ms);Zae=n(P$,"STRONG",{});var UYr=s(Zae);Tso=r(UYr,"mobilebert"),UYr.forEach(t),Mso=r(P$," \u2014 "),QP=n(P$,"A",{href:!0});var JYr=s(QP);Eso=r(JYr,"MobileBertTokenizer"),JYr.forEach(t),Cso=r(P$," or "),HP=n(P$,"A",{href:!0});var YYr=s(HP);wso=r(YYr,"MobileBertTokenizerFast"),YYr.forEach(t),Aso=r(P$," (MobileBERT model)"),P$.forEach(t),Lso=i(S),gs=n(S,"LI",{});var B$=s(gs);ene=n(B$,"STRONG",{});var KYr=s(ene);yso=r(KYr,"mpnet"),KYr.forEach(t),xso=r(B$," \u2014 "),UP=n(B$,"A",{href:!0});var ZYr=s(UP);$so=r(ZYr,"MPNetTokenizer"),ZYr.forEach(t),kso=r(B$," or "),JP=n(B$,"A",{href:!0});var eKr=s(JP);Sso=r(eKr,"MPNetTokenizerFast"),eKr.forEach(t),Rso=r(B$," (MPNet model)"),B$.forEach(t),Pso=i(S),hs=n(S,"LI",{});var I$=s(hs);one=n(I$,"STRONG",{});var oKr=s(one);Bso=r(oKr,"mt5"),oKr.forEach(t),Iso=r(I$," \u2014 "),YP=n(I$,"A",{href:!0});var rKr=s(YP);Nso=r(rKr,"MT5Tokenizer"),rKr.forEach(t),qso=r(I$," or "),KP=n(I$,"A",{href:!0});var tKr=s(KP);jso=r(tKr,"MT5TokenizerFast"),tKr.forEach(t),Dso=r(I$," (MT5 model)"),I$.forEach(t),Gso=i(S),ps=n(S,"LI",{});var N$=s(ps);rne=n(N$,"STRONG",{});var aKr=s(rne);Oso=r(aKr,"nystromformer"),aKr.forEach(t),Vso=r(N$," \u2014 "),ZP=n(N$,"A",{href:!0});var nKr=s(ZP);Xso=r(nKr,"AlbertTokenizer"),nKr.forEach(t),zso=r(N$," or "),eB=n(N$,"A",{href:!0});var sKr=s(eB);Wso=r(sKr,"AlbertTokenizerFast"),sKr.forEach(t),Qso=r(N$," (Nystr\xF6mformer model)"),N$.forEach(t),Hso=i(S),_s=n(S,"LI",{});var q$=s(_s);tne=n(q$,"STRONG",{});var lKr=s(tne);Uso=r(lKr,"openai-gpt"),lKr.forEach(t),Jso=r(q$," \u2014 "),oB=n(q$,"A",{href:!0});var iKr=s(oB);Yso=r(iKr,"OpenAIGPTTokenizer"),iKr.forEach(t),Kso=r(q$," or "),rB=n(q$,"A",{href:!0});var dKr=s(rB);Zso=r(dKr,"OpenAIGPTTokenizerFast"),dKr.forEach(t),elo=r(q$," (OpenAI GPT model)"),q$.forEach(t),olo=i(S),Wg=n(S,"LI",{});var TAe=s(Wg);ane=n(TAe,"STRONG",{});var cKr=s(ane);rlo=r(cKr,"opt"),cKr.forEach(t),tlo=r(TAe," \u2014 "),tB=n(TAe,"A",{href:!0});var fKr=s(tB);alo=r(fKr,"GPT2Tokenizer"),fKr.forEach(t),nlo=r(TAe," (OPT model)"),TAe.forEach(t),slo=i(S),us=n(S,"LI",{});var j$=s(us);nne=n(j$,"STRONG",{});var mKr=s(nne);llo=r(mKr,"pegasus"),mKr.forEach(t),ilo=r(j$," \u2014 "),aB=n(j$,"A",{href:!0});var gKr=s(aB);dlo=r(gKr,"PegasusTokenizer"),gKr.forEach(t),clo=r(j$," or "),nB=n(j$,"A",{href:!0});var hKr=s(nB);flo=r(hKr,"PegasusTokenizerFast"),hKr.forEach(t),mlo=r(j$," (Pegasus model)"),j$.forEach(t),glo=i(S),Qg=n(S,"LI",{});var MAe=s(Qg);sne=n(MAe,"STRONG",{});var pKr=s(sne);hlo=r(pKr,"perceiver"),pKr.forEach(t),plo=r(MAe," \u2014 "),sB=n(MAe,"A",{href:!0});var _Kr=s(sB);_lo=r(_Kr,"PerceiverTokenizer"),_Kr.forEach(t),ulo=r(MAe," (Perceiver model)"),MAe.forEach(t),blo=i(S),Hg=n(S,"LI",{});var EAe=s(Hg);lne=n(EAe,"STRONG",{});var uKr=s(lne);vlo=r(uKr,"phobert"),uKr.forEach(t),Flo=r(EAe," \u2014 "),lB=n(EAe,"A",{href:!0});var bKr=s(lB);Tlo=r(bKr,"PhobertTokenizer"),bKr.forEach(t),Mlo=r(EAe," (PhoBERT model)"),EAe.forEach(t),Elo=i(S),Ug=n(S,"LI",{});var CAe=s(Ug);ine=n(CAe,"STRONG",{});var vKr=s(ine);Clo=r(vKr,"plbart"),vKr.forEach(t),wlo=r(CAe," \u2014 "),iB=n(CAe,"A",{href:!0});var FKr=s(iB);Alo=r(FKr,"PLBartTokenizer"),FKr.forEach(t),Llo=r(CAe," (PLBart model)"),CAe.forEach(t),ylo=i(S),Jg=n(S,"LI",{});var wAe=s(Jg);dne=n(wAe,"STRONG",{});var TKr=s(dne);xlo=r(TKr,"prophetnet"),TKr.forEach(t),$lo=r(wAe," \u2014 "),dB=n(wAe,"A",{href:!0});var MKr=s(dB);klo=r(MKr,"ProphetNetTokenizer"),MKr.forEach(t),Slo=r(wAe," (ProphetNet model)"),wAe.forEach(t),Rlo=i(S),bs=n(S,"LI",{});var D$=s(bs);cne=n(D$,"STRONG",{});var EKr=s(cne);Plo=r(EKr,"qdqbert"),EKr.forEach(t),Blo=r(D$," \u2014 "),cB=n(D$,"A",{href:!0});var CKr=s(cB);Ilo=r(CKr,"BertTokenizer"),CKr.forEach(t),Nlo=r(D$," or "),fB=n(D$,"A",{href:!0});var wKr=s(fB);qlo=r(wKr,"BertTokenizerFast"),wKr.forEach(t),jlo=r(D$," (QDQBert model)"),D$.forEach(t),Dlo=i(S),Yg=n(S,"LI",{});var AAe=s(Yg);fne=n(AAe,"STRONG",{});var AKr=s(fne);Glo=r(AKr,"rag"),AKr.forEach(t),Olo=r(AAe," \u2014 "),mB=n(AAe,"A",{href:!0});var LKr=s(mB);Vlo=r(LKr,"RagTokenizer"),LKr.forEach(t),Xlo=r(AAe," (RAG model)"),AAe.forEach(t),zlo=i(S),vs=n(S,"LI",{});var G$=s(vs);mne=n(G$,"STRONG",{});var yKr=s(mne);Wlo=r(yKr,"realm"),yKr.forEach(t),Qlo=r(G$," \u2014 "),gB=n(G$,"A",{href:!0});var xKr=s(gB);Hlo=r(xKr,"RealmTokenizer"),xKr.forEach(t),Ulo=r(G$," or "),hB=n(G$,"A",{href:!0});var $Kr=s(hB);Jlo=r($Kr,"RealmTokenizerFast"),$Kr.forEach(t),Ylo=r(G$," (REALM model)"),G$.forEach(t),Klo=i(S),Fs=n(S,"LI",{});var O$=s(Fs);gne=n(O$,"STRONG",{});var kKr=s(gne);Zlo=r(kKr,"reformer"),kKr.forEach(t),eio=r(O$," \u2014 "),pB=n(O$,"A",{href:!0});var SKr=s(pB);oio=r(SKr,"ReformerTokenizer"),SKr.forEach(t),rio=r(O$," or "),_B=n(O$,"A",{href:!0});var RKr=s(_B);tio=r(RKr,"ReformerTokenizerFast"),RKr.forEach(t),aio=r(O$," (Reformer model)"),O$.forEach(t),nio=i(S),Ts=n(S,"LI",{});var V$=s(Ts);hne=n(V$,"STRONG",{});var PKr=s(hne);sio=r(PKr,"rembert"),PKr.forEach(t),lio=r(V$," \u2014 "),uB=n(V$,"A",{href:!0});var BKr=s(uB);iio=r(BKr,"RemBertTokenizer"),BKr.forEach(t),dio=r(V$," or "),bB=n(V$,"A",{href:!0});var IKr=s(bB);cio=r(IKr,"RemBertTokenizerFast"),IKr.forEach(t),fio=r(V$," (RemBERT model)"),V$.forEach(t),mio=i(S),Ms=n(S,"LI",{});var X$=s(Ms);pne=n(X$,"STRONG",{});var NKr=s(pne);gio=r(NKr,"retribert"),NKr.forEach(t),hio=r(X$," \u2014 "),vB=n(X$,"A",{href:!0});var qKr=s(vB);pio=r(qKr,"RetriBertTokenizer"),qKr.forEach(t),_io=r(X$," or "),FB=n(X$,"A",{href:!0});var jKr=s(FB);uio=r(jKr,"RetriBertTokenizerFast"),jKr.forEach(t),bio=r(X$," (RetriBERT model)"),X$.forEach(t),vio=i(S),Es=n(S,"LI",{});var z$=s(Es);_ne=n(z$,"STRONG",{});var DKr=s(_ne);Fio=r(DKr,"roberta"),DKr.forEach(t),Tio=r(z$," \u2014 "),TB=n(z$,"A",{href:!0});var GKr=s(TB);Mio=r(GKr,"RobertaTokenizer"),GKr.forEach(t),Eio=r(z$," or "),MB=n(z$,"A",{href:!0});var OKr=s(MB);Cio=r(OKr,"RobertaTokenizerFast"),OKr.forEach(t),wio=r(z$," (RoBERTa model)"),z$.forEach(t),Aio=i(S),Cs=n(S,"LI",{});var W$=s(Cs);une=n(W$,"STRONG",{});var VKr=s(une);Lio=r(VKr,"roformer"),VKr.forEach(t),yio=r(W$," \u2014 "),EB=n(W$,"A",{href:!0});var XKr=s(EB);xio=r(XKr,"RoFormerTokenizer"),XKr.forEach(t),$io=r(W$," or "),CB=n(W$,"A",{href:!0});var zKr=s(CB);kio=r(zKr,"RoFormerTokenizerFast"),zKr.forEach(t),Sio=r(W$," (RoFormer model)"),W$.forEach(t),Rio=i(S),Kg=n(S,"LI",{});var LAe=s(Kg);bne=n(LAe,"STRONG",{});var WKr=s(bne);Pio=r(WKr,"speech_to_text"),WKr.forEach(t),Bio=r(LAe," \u2014 "),wB=n(LAe,"A",{href:!0});var QKr=s(wB);Iio=r(QKr,"Speech2TextTokenizer"),QKr.forEach(t),Nio=r(LAe," (Speech2Text model)"),LAe.forEach(t),qio=i(S),Zg=n(S,"LI",{});var yAe=s(Zg);vne=n(yAe,"STRONG",{});var HKr=s(vne);jio=r(HKr,"speech_to_text_2"),HKr.forEach(t),Dio=r(yAe," \u2014 "),AB=n(yAe,"A",{href:!0});var UKr=s(AB);Gio=r(UKr,"Speech2Text2Tokenizer"),UKr.forEach(t),Oio=r(yAe," (Speech2Text2 model)"),yAe.forEach(t),Vio=i(S),ws=n(S,"LI",{});var Q$=s(ws);Fne=n(Q$,"STRONG",{});var JKr=s(Fne);Xio=r(JKr,"splinter"),JKr.forEach(t),zio=r(Q$," \u2014 "),LB=n(Q$,"A",{href:!0});var YKr=s(LB);Wio=r(YKr,"SplinterTokenizer"),YKr.forEach(t),Qio=r(Q$," or "),yB=n(Q$,"A",{href:!0});var KKr=s(yB);Hio=r(KKr,"SplinterTokenizerFast"),KKr.forEach(t),Uio=r(Q$," (Splinter model)"),Q$.forEach(t),Jio=i(S),As=n(S,"LI",{});var H$=s(As);Tne=n(H$,"STRONG",{});var ZKr=s(Tne);Yio=r(ZKr,"squeezebert"),ZKr.forEach(t),Kio=r(H$," \u2014 "),xB=n(H$,"A",{href:!0});var eZr=s(xB);Zio=r(eZr,"SqueezeBertTokenizer"),eZr.forEach(t),edo=r(H$," or "),$B=n(H$,"A",{href:!0});var oZr=s($B);odo=r(oZr,"SqueezeBertTokenizerFast"),oZr.forEach(t),rdo=r(H$," (SqueezeBERT model)"),H$.forEach(t),tdo=i(S),Ls=n(S,"LI",{});var U$=s(Ls);Mne=n(U$,"STRONG",{});var rZr=s(Mne);ado=r(rZr,"t5"),rZr.forEach(t),ndo=r(U$," \u2014 "),kB=n(U$,"A",{href:!0});var tZr=s(kB);sdo=r(tZr,"T5Tokenizer"),tZr.forEach(t),ldo=r(U$," or "),SB=n(U$,"A",{href:!0});var aZr=s(SB);ido=r(aZr,"T5TokenizerFast"),aZr.forEach(t),ddo=r(U$," (T5 model)"),U$.forEach(t),cdo=i(S),eh=n(S,"LI",{});var xAe=s(eh);Ene=n(xAe,"STRONG",{});var nZr=s(Ene);fdo=r(nZr,"tapas"),nZr.forEach(t),mdo=r(xAe," \u2014 "),RB=n(xAe,"A",{href:!0});var sZr=s(RB);gdo=r(sZr,"TapasTokenizer"),sZr.forEach(t),hdo=r(xAe," (TAPAS model)"),xAe.forEach(t),pdo=i(S),oh=n(S,"LI",{});var $Ae=s(oh);Cne=n($Ae,"STRONG",{});var lZr=s(Cne);_do=r(lZr,"tapex"),lZr.forEach(t),udo=r($Ae," \u2014 "),PB=n($Ae,"A",{href:!0});var iZr=s(PB);bdo=r(iZr,"TapexTokenizer"),iZr.forEach(t),vdo=r($Ae," (TAPEX model)"),$Ae.forEach(t),Fdo=i(S),rh=n(S,"LI",{});var kAe=s(rh);wne=n(kAe,"STRONG",{});var dZr=s(wne);Tdo=r(dZr,"transfo-xl"),dZr.forEach(t),Mdo=r(kAe," \u2014 "),BB=n(kAe,"A",{href:!0});var cZr=s(BB);Edo=r(cZr,"TransfoXLTokenizer"),cZr.forEach(t),Cdo=r(kAe," (Transformer-XL model)"),kAe.forEach(t),wdo=i(S),ys=n(S,"LI",{});var J$=s(ys);Ane=n(J$,"STRONG",{});var fZr=s(Ane);Ado=r(fZr,"visual_bert"),fZr.forEach(t),Ldo=r(J$," \u2014 "),IB=n(J$,"A",{href:!0});var mZr=s(IB);ydo=r(mZr,"BertTokenizer"),mZr.forEach(t),xdo=r(J$," or "),NB=n(J$,"A",{href:!0});var gZr=s(NB);$do=r(gZr,"BertTokenizerFast"),gZr.forEach(t),kdo=r(J$," (VisualBERT model)"),J$.forEach(t),Sdo=i(S),th=n(S,"LI",{});var SAe=s(th);Lne=n(SAe,"STRONG",{});var hZr=s(Lne);Rdo=r(hZr,"wav2vec2"),hZr.forEach(t),Pdo=r(SAe," \u2014 "),qB=n(SAe,"A",{href:!0});var pZr=s(qB);Bdo=r(pZr,"Wav2Vec2CTCTokenizer"),pZr.forEach(t),Ido=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),Ndo=i(S),ah=n(S,"LI",{});var RAe=s(ah);yne=n(RAe,"STRONG",{});var _Zr=s(yne);qdo=r(_Zr,"wav2vec2-conformer"),_Zr.forEach(t),jdo=r(RAe," \u2014 "),jB=n(RAe,"A",{href:!0});var uZr=s(jB);Ddo=r(uZr,"Wav2Vec2CTCTokenizer"),uZr.forEach(t),Gdo=r(RAe," (Wav2Vec2-Conformer model)"),RAe.forEach(t),Odo=i(S),nh=n(S,"LI",{});var PAe=s(nh);xne=n(PAe,"STRONG",{});var bZr=s(xne);Vdo=r(bZr,"wav2vec2_phoneme"),bZr.forEach(t),Xdo=r(PAe," \u2014 "),DB=n(PAe,"A",{href:!0});var vZr=s(DB);zdo=r(vZr,"Wav2Vec2PhonemeCTCTokenizer"),vZr.forEach(t),Wdo=r(PAe," (Wav2Vec2Phoneme model)"),PAe.forEach(t),Qdo=i(S),xs=n(S,"LI",{});var Y$=s(xs);$ne=n(Y$,"STRONG",{});var FZr=s($ne);Hdo=r(FZr,"xglm"),FZr.forEach(t),Udo=r(Y$," \u2014 "),GB=n(Y$,"A",{href:!0});var TZr=s(GB);Jdo=r(TZr,"XGLMTokenizer"),TZr.forEach(t),Ydo=r(Y$," or "),OB=n(Y$,"A",{href:!0});var MZr=s(OB);Kdo=r(MZr,"XGLMTokenizerFast"),MZr.forEach(t),Zdo=r(Y$," (XGLM model)"),Y$.forEach(t),eco=i(S),sh=n(S,"LI",{});var BAe=s(sh);kne=n(BAe,"STRONG",{});var EZr=s(kne);oco=r(EZr,"xlm"),EZr.forEach(t),rco=r(BAe," \u2014 "),VB=n(BAe,"A",{href:!0});var CZr=s(VB);tco=r(CZr,"XLMTokenizer"),CZr.forEach(t),aco=r(BAe," (XLM model)"),BAe.forEach(t),nco=i(S),lh=n(S,"LI",{});var IAe=s(lh);Sne=n(IAe,"STRONG",{});var wZr=s(Sne);sco=r(wZr,"xlm-prophetnet"),wZr.forEach(t),lco=r(IAe," \u2014 "),XB=n(IAe,"A",{href:!0});var AZr=s(XB);ico=r(AZr,"XLMProphetNetTokenizer"),AZr.forEach(t),dco=r(IAe," (XLM-ProphetNet model)"),IAe.forEach(t),cco=i(S),$s=n(S,"LI",{});var K$=s($s);Rne=n(K$,"STRONG",{});var LZr=s(Rne);fco=r(LZr,"xlm-roberta"),LZr.forEach(t),mco=r(K$," \u2014 "),zB=n(K$,"A",{href:!0});var yZr=s(zB);gco=r(yZr,"XLMRobertaTokenizer"),yZr.forEach(t),hco=r(K$," or "),WB=n(K$,"A",{href:!0});var xZr=s(WB);pco=r(xZr,"XLMRobertaTokenizerFast"),xZr.forEach(t),_co=r(K$," (XLM-RoBERTa model)"),K$.forEach(t),uco=i(S),ks=n(S,"LI",{});var Z$=s(ks);Pne=n(Z$,"STRONG",{});var $Zr=s(Pne);bco=r($Zr,"xlm-roberta-xl"),$Zr.forEach(t),vco=r(Z$," \u2014 "),QB=n(Z$,"A",{href:!0});var kZr=s(QB);Fco=r(kZr,"RobertaTokenizer"),kZr.forEach(t),Tco=r(Z$," or "),HB=n(Z$,"A",{href:!0});var SZr=s(HB);Mco=r(SZr,"RobertaTokenizerFast"),SZr.forEach(t),Eco=r(Z$," (XLM-RoBERTa-XL model)"),Z$.forEach(t),Cco=i(S),Ss=n(S,"LI",{});var ek=s(Ss);Bne=n(ek,"STRONG",{});var RZr=s(Bne);wco=r(RZr,"xlnet"),RZr.forEach(t),Aco=r(ek," \u2014 "),UB=n(ek,"A",{href:!0});var PZr=s(UB);Lco=r(PZr,"XLNetTokenizer"),PZr.forEach(t),yco=r(ek," or "),JB=n(ek,"A",{href:!0});var BZr=s(JB);xco=r(BZr,"XLNetTokenizerFast"),BZr.forEach(t),$co=r(ek," (XLNet model)"),ek.forEach(t),kco=i(S),Rs=n(S,"LI",{});var ok=s(Rs);Ine=n(ok,"STRONG",{});var IZr=s(Ine);Sco=r(IZr,"yoso"),IZr.forEach(t),Rco=r(ok," \u2014 "),YB=n(ok,"A",{href:!0});var NZr=s(YB);Pco=r(NZr,"AlbertTokenizer"),NZr.forEach(t),Bco=r(ok," or "),KB=n(ok,"A",{href:!0});var qZr=s(KB);Ico=r(qZr,"AlbertTokenizerFast"),qZr.forEach(t),Nco=r(ok," (YOSO model)"),ok.forEach(t),S.forEach(t),qco=i(js),T(ih.$$.fragment,js),js.forEach(t),jco=i(qs),dh=n(qs,"DIV",{class:!0});var dGe=s(dh);T(eL.$$.fragment,dGe),Dco=i(dGe),Nne=n(dGe,"P",{});var jZr=s(Nne);Gco=r(jZr,"Register a new tokenizer in this mapping."),jZr.forEach(t),dGe.forEach(t),qs.forEach(t),cje=i(f),Ci=n(f,"H2",{class:!0});var cGe=s(Ci);ch=n(cGe,"A",{id:!0,class:!0,href:!0});var DZr=s(ch);qne=n(DZr,"SPAN",{});var GZr=s(qne);T(oL.$$.fragment,GZr),GZr.forEach(t),DZr.forEach(t),Oco=i(cGe),jne=n(cGe,"SPAN",{});var OZr=s(jne);Vco=r(OZr,"AutoFeatureExtractor"),OZr.forEach(t),cGe.forEach(t),fje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(rL.$$.fragment,Ds),Xco=i(Ds),tL=n(Ds,"P",{});var fGe=s(tL);zco=r(fGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZB=n(fGe,"A",{href:!0});var VZr=s(ZB);Wco=r(VZr,"AutoFeatureExtractor.from_pretrained()"),VZr.forEach(t),Qco=r(fGe," class method."),fGe.forEach(t),Hco=i(Ds),aL=n(Ds,"P",{});var mGe=s(aL);Uco=r(mGe,"This class cannot be instantiated directly using "),Dne=n(mGe,"CODE",{});var XZr=s(Dne);Jco=r(XZr,"__init__()"),XZr.forEach(t),Yco=r(mGe," (throws an error)."),mGe.forEach(t),Kco=i(Ds),He=n(Ds,"DIV",{class:!0});var ea=s(He);T(nL.$$.fragment,ea),Zco=i(ea),Gne=n(ea,"P",{});var zZr=s(Gne);efo=r(zZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zZr.forEach(t),ofo=i(ea),ya=n(ea,"P",{});var zw=s(ya);rfo=r(zw,"The feature extractor class to instantiate is selected based on the "),One=n(zw,"CODE",{});var WZr=s(One);tfo=r(WZr,"model_type"),WZr.forEach(t),afo=r(zw,` property of the config object
(either passed as an argument or loaded from `),Vne=n(zw,"CODE",{});var QZr=s(Vne);nfo=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),sfo=r(zw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xne=n(zw,"CODE",{});var HZr=s(Xne);lfo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),ifo=r(zw,":"),zw.forEach(t),dfo=i(ea),Y=n(ea,"UL",{});var K=s(Y);fh=n(K,"LI",{});var NAe=s(fh);zne=n(NAe,"STRONG",{});var UZr=s(zne);cfo=r(UZr,"beit"),UZr.forEach(t),ffo=r(NAe," \u2014 "),eI=n(NAe,"A",{href:!0});var JZr=s(eI);mfo=r(JZr,"BeitFeatureExtractor"),JZr.forEach(t),gfo=r(NAe," (BEiT model)"),NAe.forEach(t),hfo=i(K),mh=n(K,"LI",{});var qAe=s(mh);Wne=n(qAe,"STRONG",{});var YZr=s(Wne);pfo=r(YZr,"clip"),YZr.forEach(t),_fo=r(qAe," \u2014 "),oI=n(qAe,"A",{href:!0});var KZr=s(oI);ufo=r(KZr,"CLIPFeatureExtractor"),KZr.forEach(t),bfo=r(qAe," (CLIP model)"),qAe.forEach(t),vfo=i(K),gh=n(K,"LI",{});var jAe=s(gh);Qne=n(jAe,"STRONG",{});var ZZr=s(Qne);Ffo=r(ZZr,"convnext"),ZZr.forEach(t),Tfo=r(jAe," \u2014 "),rI=n(jAe,"A",{href:!0});var eet=s(rI);Mfo=r(eet,"ConvNextFeatureExtractor"),eet.forEach(t),Efo=r(jAe," (ConvNeXT model)"),jAe.forEach(t),Cfo=i(K),hh=n(K,"LI",{});var DAe=s(hh);Hne=n(DAe,"STRONG",{});var oet=s(Hne);wfo=r(oet,"cvt"),oet.forEach(t),Afo=r(DAe," \u2014 "),tI=n(DAe,"A",{href:!0});var ret=s(tI);Lfo=r(ret,"ConvNextFeatureExtractor"),ret.forEach(t),yfo=r(DAe," (CvT model)"),DAe.forEach(t),xfo=i(K),ph=n(K,"LI",{});var GAe=s(ph);Une=n(GAe,"STRONG",{});var tet=s(Une);$fo=r(tet,"data2vec-audio"),tet.forEach(t),kfo=r(GAe," \u2014 "),aI=n(GAe,"A",{href:!0});var aet=s(aI);Sfo=r(aet,"Wav2Vec2FeatureExtractor"),aet.forEach(t),Rfo=r(GAe," (Data2VecAudio model)"),GAe.forEach(t),Pfo=i(K),_h=n(K,"LI",{});var OAe=s(_h);Jne=n(OAe,"STRONG",{});var net=s(Jne);Bfo=r(net,"data2vec-vision"),net.forEach(t),Ifo=r(OAe," \u2014 "),nI=n(OAe,"A",{href:!0});var set=s(nI);Nfo=r(set,"BeitFeatureExtractor"),set.forEach(t),qfo=r(OAe," (Data2VecVision model)"),OAe.forEach(t),jfo=i(K),uh=n(K,"LI",{});var VAe=s(uh);Yne=n(VAe,"STRONG",{});var iet=s(Yne);Dfo=r(iet,"deit"),iet.forEach(t),Gfo=r(VAe," \u2014 "),sI=n(VAe,"A",{href:!0});var det=s(sI);Ofo=r(det,"DeiTFeatureExtractor"),det.forEach(t),Vfo=r(VAe," (DeiT model)"),VAe.forEach(t),Xfo=i(K),bh=n(K,"LI",{});var XAe=s(bh);Kne=n(XAe,"STRONG",{});var cet=s(Kne);zfo=r(cet,"detr"),cet.forEach(t),Wfo=r(XAe," \u2014 "),lI=n(XAe,"A",{href:!0});var fet=s(lI);Qfo=r(fet,"DetrFeatureExtractor"),fet.forEach(t),Hfo=r(XAe," (DETR model)"),XAe.forEach(t),Ufo=i(K),vh=n(K,"LI",{});var zAe=s(vh);Zne=n(zAe,"STRONG",{});var met=s(Zne);Jfo=r(met,"dpt"),met.forEach(t),Yfo=r(zAe," \u2014 "),iI=n(zAe,"A",{href:!0});var get=s(iI);Kfo=r(get,"DPTFeatureExtractor"),get.forEach(t),Zfo=r(zAe," (DPT model)"),zAe.forEach(t),emo=i(K),Fh=n(K,"LI",{});var WAe=s(Fh);ese=n(WAe,"STRONG",{});var het=s(ese);omo=r(het,"flava"),het.forEach(t),rmo=r(WAe," \u2014 "),dI=n(WAe,"A",{href:!0});var pet=s(dI);tmo=r(pet,"FlavaFeatureExtractor"),pet.forEach(t),amo=r(WAe," (FLAVA model)"),WAe.forEach(t),nmo=i(K),Th=n(K,"LI",{});var QAe=s(Th);ose=n(QAe,"STRONG",{});var _et=s(ose);smo=r(_et,"glpn"),_et.forEach(t),lmo=r(QAe," \u2014 "),cI=n(QAe,"A",{href:!0});var uet=s(cI);imo=r(uet,"GLPNFeatureExtractor"),uet.forEach(t),dmo=r(QAe," (GLPN model)"),QAe.forEach(t),cmo=i(K),Mh=n(K,"LI",{});var HAe=s(Mh);rse=n(HAe,"STRONG",{});var bet=s(rse);fmo=r(bet,"hubert"),bet.forEach(t),mmo=r(HAe," \u2014 "),fI=n(HAe,"A",{href:!0});var vet=s(fI);gmo=r(vet,"Wav2Vec2FeatureExtractor"),vet.forEach(t),hmo=r(HAe," (Hubert model)"),HAe.forEach(t),pmo=i(K),Eh=n(K,"LI",{});var UAe=s(Eh);tse=n(UAe,"STRONG",{});var Fet=s(tse);_mo=r(Fet,"imagegpt"),Fet.forEach(t),umo=r(UAe," \u2014 "),mI=n(UAe,"A",{href:!0});var Tet=s(mI);bmo=r(Tet,"ImageGPTFeatureExtractor"),Tet.forEach(t),vmo=r(UAe," (ImageGPT model)"),UAe.forEach(t),Fmo=i(K),Ch=n(K,"LI",{});var JAe=s(Ch);ase=n(JAe,"STRONG",{});var Met=s(ase);Tmo=r(Met,"layoutlmv2"),Met.forEach(t),Mmo=r(JAe," \u2014 "),gI=n(JAe,"A",{href:!0});var Eet=s(gI);Emo=r(Eet,"LayoutLMv2FeatureExtractor"),Eet.forEach(t),Cmo=r(JAe," (LayoutLMv2 model)"),JAe.forEach(t),wmo=i(K),wh=n(K,"LI",{});var YAe=s(wh);nse=n(YAe,"STRONG",{});var Cet=s(nse);Amo=r(Cet,"layoutlmv3"),Cet.forEach(t),Lmo=r(YAe," \u2014 "),hI=n(YAe,"A",{href:!0});var wet=s(hI);ymo=r(wet,"LayoutLMv3FeatureExtractor"),wet.forEach(t),xmo=r(YAe," (LayoutLMv3 model)"),YAe.forEach(t),$mo=i(K),Ah=n(K,"LI",{});var KAe=s(Ah);sse=n(KAe,"STRONG",{});var Aet=s(sse);kmo=r(Aet,"levit"),Aet.forEach(t),Smo=r(KAe," \u2014 "),pI=n(KAe,"A",{href:!0});var Let=s(pI);Rmo=r(Let,"LevitFeatureExtractor"),Let.forEach(t),Pmo=r(KAe," (LeViT model)"),KAe.forEach(t),Bmo=i(K),Lh=n(K,"LI",{});var ZAe=s(Lh);lse=n(ZAe,"STRONG",{});var yet=s(lse);Imo=r(yet,"maskformer"),yet.forEach(t),Nmo=r(ZAe," \u2014 "),_I=n(ZAe,"A",{href:!0});var xet=s(_I);qmo=r(xet,"MaskFormerFeatureExtractor"),xet.forEach(t),jmo=r(ZAe," (MaskFormer model)"),ZAe.forEach(t),Dmo=i(K),yh=n(K,"LI",{});var e6e=s(yh);ise=n(e6e,"STRONG",{});var $et=s(ise);Gmo=r($et,"mobilevit"),$et.forEach(t),Omo=r(e6e," \u2014 "),uI=n(e6e,"A",{href:!0});var ket=s(uI);Vmo=r(ket,"MobileViTFeatureExtractor"),ket.forEach(t),Xmo=r(e6e," (MobileViT model)"),e6e.forEach(t),zmo=i(K),xh=n(K,"LI",{});var o6e=s(xh);dse=n(o6e,"STRONG",{});var Set=s(dse);Wmo=r(Set,"perceiver"),Set.forEach(t),Qmo=r(o6e," \u2014 "),bI=n(o6e,"A",{href:!0});var Ret=s(bI);Hmo=r(Ret,"PerceiverFeatureExtractor"),Ret.forEach(t),Umo=r(o6e," (Perceiver model)"),o6e.forEach(t),Jmo=i(K),$h=n(K,"LI",{});var r6e=s($h);cse=n(r6e,"STRONG",{});var Pet=s(cse);Ymo=r(Pet,"poolformer"),Pet.forEach(t),Kmo=r(r6e," \u2014 "),vI=n(r6e,"A",{href:!0});var Bet=s(vI);Zmo=r(Bet,"PoolFormerFeatureExtractor"),Bet.forEach(t),ego=r(r6e," (PoolFormer model)"),r6e.forEach(t),ogo=i(K),kh=n(K,"LI",{});var t6e=s(kh);fse=n(t6e,"STRONG",{});var Iet=s(fse);rgo=r(Iet,"regnet"),Iet.forEach(t),tgo=r(t6e," \u2014 "),FI=n(t6e,"A",{href:!0});var Net=s(FI);ago=r(Net,"ConvNextFeatureExtractor"),Net.forEach(t),ngo=r(t6e," (RegNet model)"),t6e.forEach(t),sgo=i(K),Sh=n(K,"LI",{});var a6e=s(Sh);mse=n(a6e,"STRONG",{});var qet=s(mse);lgo=r(qet,"resnet"),qet.forEach(t),igo=r(a6e," \u2014 "),TI=n(a6e,"A",{href:!0});var jet=s(TI);dgo=r(jet,"ConvNextFeatureExtractor"),jet.forEach(t),cgo=r(a6e," (ResNet model)"),a6e.forEach(t),fgo=i(K),Rh=n(K,"LI",{});var n6e=s(Rh);gse=n(n6e,"STRONG",{});var Det=s(gse);mgo=r(Det,"segformer"),Det.forEach(t),ggo=r(n6e," \u2014 "),MI=n(n6e,"A",{href:!0});var Get=s(MI);hgo=r(Get,"SegformerFeatureExtractor"),Get.forEach(t),pgo=r(n6e," (SegFormer model)"),n6e.forEach(t),_go=i(K),Ph=n(K,"LI",{});var s6e=s(Ph);hse=n(s6e,"STRONG",{});var Oet=s(hse);ugo=r(Oet,"speech_to_text"),Oet.forEach(t),bgo=r(s6e," \u2014 "),EI=n(s6e,"A",{href:!0});var Vet=s(EI);vgo=r(Vet,"Speech2TextFeatureExtractor"),Vet.forEach(t),Fgo=r(s6e," (Speech2Text model)"),s6e.forEach(t),Tgo=i(K),Bh=n(K,"LI",{});var l6e=s(Bh);pse=n(l6e,"STRONG",{});var Xet=s(pse);Mgo=r(Xet,"swin"),Xet.forEach(t),Ego=r(l6e," \u2014 "),CI=n(l6e,"A",{href:!0});var zet=s(CI);Cgo=r(zet,"ViTFeatureExtractor"),zet.forEach(t),wgo=r(l6e," (Swin Transformer model)"),l6e.forEach(t),Ago=i(K),Ih=n(K,"LI",{});var i6e=s(Ih);_se=n(i6e,"STRONG",{});var Wet=s(_se);Lgo=r(Wet,"van"),Wet.forEach(t),ygo=r(i6e," \u2014 "),wI=n(i6e,"A",{href:!0});var Qet=s(wI);xgo=r(Qet,"ConvNextFeatureExtractor"),Qet.forEach(t),$go=r(i6e," (VAN model)"),i6e.forEach(t),kgo=i(K),Nh=n(K,"LI",{});var d6e=s(Nh);use=n(d6e,"STRONG",{});var Het=s(use);Sgo=r(Het,"vit"),Het.forEach(t),Rgo=r(d6e," \u2014 "),AI=n(d6e,"A",{href:!0});var Uet=s(AI);Pgo=r(Uet,"ViTFeatureExtractor"),Uet.forEach(t),Bgo=r(d6e," (ViT model)"),d6e.forEach(t),Igo=i(K),qh=n(K,"LI",{});var c6e=s(qh);bse=n(c6e,"STRONG",{});var Jet=s(bse);Ngo=r(Jet,"vit_mae"),Jet.forEach(t),qgo=r(c6e," \u2014 "),LI=n(c6e,"A",{href:!0});var Yet=s(LI);jgo=r(Yet,"ViTFeatureExtractor"),Yet.forEach(t),Dgo=r(c6e," (ViTMAE model)"),c6e.forEach(t),Ggo=i(K),jh=n(K,"LI",{});var f6e=s(jh);vse=n(f6e,"STRONG",{});var Ket=s(vse);Ogo=r(Ket,"wav2vec2"),Ket.forEach(t),Vgo=r(f6e," \u2014 "),yI=n(f6e,"A",{href:!0});var Zet=s(yI);Xgo=r(Zet,"Wav2Vec2FeatureExtractor"),Zet.forEach(t),zgo=r(f6e," (Wav2Vec2 model)"),f6e.forEach(t),Wgo=i(K),Dh=n(K,"LI",{});var m6e=s(Dh);Fse=n(m6e,"STRONG",{});var eot=s(Fse);Qgo=r(eot,"wav2vec2-conformer"),eot.forEach(t),Hgo=r(m6e," \u2014 "),xI=n(m6e,"A",{href:!0});var oot=s(xI);Ugo=r(oot,"Wav2Vec2FeatureExtractor"),oot.forEach(t),Jgo=r(m6e," (Wav2Vec2-Conformer model)"),m6e.forEach(t),Ygo=i(K),Gh=n(K,"LI",{});var g6e=s(Gh);Tse=n(g6e,"STRONG",{});var rot=s(Tse);Kgo=r(rot,"yolos"),rot.forEach(t),Zgo=r(g6e," \u2014 "),$I=n(g6e,"A",{href:!0});var tot=s($I);eho=r(tot,"YolosFeatureExtractor"),tot.forEach(t),oho=r(g6e," (YOLOS model)"),g6e.forEach(t),K.forEach(t),rho=i(ea),T(Oh.$$.fragment,ea),tho=i(ea),T(Vh.$$.fragment,ea),ea.forEach(t),aho=i(Ds),Xh=n(Ds,"DIV",{class:!0});var gGe=s(Xh);T(sL.$$.fragment,gGe),nho=i(gGe),Mse=n(gGe,"P",{});var aot=s(Mse);sho=r(aot,"Register a new feature extractor for this class."),aot.forEach(t),gGe.forEach(t),Ds.forEach(t),mje=i(f),wi=n(f,"H2",{class:!0});var hGe=s(wi);zh=n(hGe,"A",{id:!0,class:!0,href:!0});var not=s(zh);Ese=n(not,"SPAN",{});var sot=s(Ese);T(lL.$$.fragment,sot),sot.forEach(t),not.forEach(t),lho=i(hGe),Cse=n(hGe,"SPAN",{});var lot=s(Cse);iho=r(lot,"AutoProcessor"),lot.forEach(t),hGe.forEach(t),gje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(iL.$$.fragment,Gs),dho=i(Gs),dL=n(Gs,"P",{});var pGe=s(dL);cho=r(pGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kI=n(pGe,"A",{href:!0});var iot=s(kI);fho=r(iot,"AutoProcessor.from_pretrained()"),iot.forEach(t),mho=r(pGe," class method."),pGe.forEach(t),gho=i(Gs),cL=n(Gs,"P",{});var _Ge=s(cL);hho=r(_Ge,"This class cannot be instantiated directly using "),wse=n(_Ge,"CODE",{});var dot=s(wse);pho=r(dot,"__init__()"),dot.forEach(t),_ho=r(_Ge," (throws an error)."),_Ge.forEach(t),uho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var oa=s(Ue);T(fL.$$.fragment,oa),bho=i(oa),Ase=n(oa,"P",{});var cot=s(Ase);vho=r(cot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cot.forEach(t),Fho=i(oa),Ai=n(oa,"P",{});var XZ=s(Ai);Tho=r(XZ,"The processor class to instantiate is selected based on the "),Lse=n(XZ,"CODE",{});var fot=s(Lse);Mho=r(fot,"model_type"),fot.forEach(t),Eho=r(XZ,` property of the config object (either
passed as an argument or loaded from `),yse=n(XZ,"CODE",{});var mot=s(yse);Cho=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),who=r(XZ," if possible):"),XZ.forEach(t),Aho=i(oa),he=n(oa,"UL",{});var be=s(he);Wh=n(be,"LI",{});var h6e=s(Wh);xse=n(h6e,"STRONG",{});var got=s(xse);Lho=r(got,"clip"),got.forEach(t),yho=r(h6e," \u2014 "),SI=n(h6e,"A",{href:!0});var hot=s(SI);xho=r(hot,"CLIPProcessor"),hot.forEach(t),$ho=r(h6e," (CLIP model)"),h6e.forEach(t),kho=i(be),Qh=n(be,"LI",{});var p6e=s(Qh);$se=n(p6e,"STRONG",{});var pot=s($se);Sho=r(pot,"flava"),pot.forEach(t),Rho=r(p6e," \u2014 "),kse=n(p6e,"CODE",{});var _ot=s(kse);Pho=r(_ot,"FLAVAProcessor"),_ot.forEach(t),Bho=r(p6e," (FLAVA model)"),p6e.forEach(t),Iho=i(be),Hh=n(be,"LI",{});var _6e=s(Hh);Sse=n(_6e,"STRONG",{});var uot=s(Sse);Nho=r(uot,"layoutlmv2"),uot.forEach(t),qho=r(_6e," \u2014 "),RI=n(_6e,"A",{href:!0});var bot=s(RI);jho=r(bot,"LayoutLMv2Processor"),bot.forEach(t),Dho=r(_6e," (LayoutLMv2 model)"),_6e.forEach(t),Gho=i(be),Uh=n(be,"LI",{});var u6e=s(Uh);Rse=n(u6e,"STRONG",{});var vot=s(Rse);Oho=r(vot,"layoutlmv3"),vot.forEach(t),Vho=r(u6e," \u2014 "),PI=n(u6e,"A",{href:!0});var Fot=s(PI);Xho=r(Fot,"LayoutLMv3Processor"),Fot.forEach(t),zho=r(u6e," (LayoutLMv3 model)"),u6e.forEach(t),Who=i(be),Jh=n(be,"LI",{});var b6e=s(Jh);Pse=n(b6e,"STRONG",{});var Tot=s(Pse);Qho=r(Tot,"layoutxlm"),Tot.forEach(t),Hho=r(b6e," \u2014 "),BI=n(b6e,"A",{href:!0});var Mot=s(BI);Uho=r(Mot,"LayoutXLMProcessor"),Mot.forEach(t),Jho=r(b6e," (LayoutXLM model)"),b6e.forEach(t),Yho=i(be),Yh=n(be,"LI",{});var v6e=s(Yh);Bse=n(v6e,"STRONG",{});var Eot=s(Bse);Kho=r(Eot,"sew"),Eot.forEach(t),Zho=r(v6e," \u2014 "),II=n(v6e,"A",{href:!0});var Cot=s(II);epo=r(Cot,"Wav2Vec2Processor"),Cot.forEach(t),opo=r(v6e," (SEW model)"),v6e.forEach(t),rpo=i(be),Kh=n(be,"LI",{});var F6e=s(Kh);Ise=n(F6e,"STRONG",{});var wot=s(Ise);tpo=r(wot,"sew-d"),wot.forEach(t),apo=r(F6e," \u2014 "),NI=n(F6e,"A",{href:!0});var Aot=s(NI);npo=r(Aot,"Wav2Vec2Processor"),Aot.forEach(t),spo=r(F6e," (SEW-D model)"),F6e.forEach(t),lpo=i(be),Zh=n(be,"LI",{});var T6e=s(Zh);Nse=n(T6e,"STRONG",{});var Lot=s(Nse);ipo=r(Lot,"speech_to_text"),Lot.forEach(t),dpo=r(T6e," \u2014 "),qI=n(T6e,"A",{href:!0});var yot=s(qI);cpo=r(yot,"Speech2TextProcessor"),yot.forEach(t),fpo=r(T6e," (Speech2Text model)"),T6e.forEach(t),mpo=i(be),ep=n(be,"LI",{});var M6e=s(ep);qse=n(M6e,"STRONG",{});var xot=s(qse);gpo=r(xot,"speech_to_text_2"),xot.forEach(t),hpo=r(M6e," \u2014 "),jI=n(M6e,"A",{href:!0});var $ot=s(jI);ppo=r($ot,"Speech2Text2Processor"),$ot.forEach(t),_po=r(M6e," (Speech2Text2 model)"),M6e.forEach(t),upo=i(be),op=n(be,"LI",{});var E6e=s(op);jse=n(E6e,"STRONG",{});var kot=s(jse);bpo=r(kot,"trocr"),kot.forEach(t),vpo=r(E6e," \u2014 "),DI=n(E6e,"A",{href:!0});var Sot=s(DI);Fpo=r(Sot,"TrOCRProcessor"),Sot.forEach(t),Tpo=r(E6e," (TrOCR model)"),E6e.forEach(t),Mpo=i(be),rp=n(be,"LI",{});var C6e=s(rp);Dse=n(C6e,"STRONG",{});var Rot=s(Dse);Epo=r(Rot,"unispeech"),Rot.forEach(t),Cpo=r(C6e," \u2014 "),GI=n(C6e,"A",{href:!0});var Pot=s(GI);wpo=r(Pot,"Wav2Vec2Processor"),Pot.forEach(t),Apo=r(C6e," (UniSpeech model)"),C6e.forEach(t),Lpo=i(be),tp=n(be,"LI",{});var w6e=s(tp);Gse=n(w6e,"STRONG",{});var Bot=s(Gse);ypo=r(Bot,"unispeech-sat"),Bot.forEach(t),xpo=r(w6e," \u2014 "),OI=n(w6e,"A",{href:!0});var Iot=s(OI);$po=r(Iot,"Wav2Vec2Processor"),Iot.forEach(t),kpo=r(w6e," (UniSpeechSat model)"),w6e.forEach(t),Spo=i(be),ap=n(be,"LI",{});var A6e=s(ap);Ose=n(A6e,"STRONG",{});var Not=s(Ose);Rpo=r(Not,"vilt"),Not.forEach(t),Ppo=r(A6e," \u2014 "),VI=n(A6e,"A",{href:!0});var qot=s(VI);Bpo=r(qot,"ViltProcessor"),qot.forEach(t),Ipo=r(A6e," (ViLT model)"),A6e.forEach(t),Npo=i(be),np=n(be,"LI",{});var L6e=s(np);Vse=n(L6e,"STRONG",{});var jot=s(Vse);qpo=r(jot,"vision-text-dual-encoder"),jot.forEach(t),jpo=r(L6e," \u2014 "),XI=n(L6e,"A",{href:!0});var Dot=s(XI);Dpo=r(Dot,"VisionTextDualEncoderProcessor"),Dot.forEach(t),Gpo=r(L6e," (VisionTextDualEncoder model)"),L6e.forEach(t),Opo=i(be),sp=n(be,"LI",{});var y6e=s(sp);Xse=n(y6e,"STRONG",{});var Got=s(Xse);Vpo=r(Got,"wav2vec2"),Got.forEach(t),Xpo=r(y6e," \u2014 "),zI=n(y6e,"A",{href:!0});var Oot=s(zI);zpo=r(Oot,"Wav2Vec2Processor"),Oot.forEach(t),Wpo=r(y6e," (Wav2Vec2 model)"),y6e.forEach(t),Qpo=i(be),lp=n(be,"LI",{});var x6e=s(lp);zse=n(x6e,"STRONG",{});var Vot=s(zse);Hpo=r(Vot,"wav2vec2-conformer"),Vot.forEach(t),Upo=r(x6e," \u2014 "),WI=n(x6e,"A",{href:!0});var Xot=s(WI);Jpo=r(Xot,"Wav2Vec2Processor"),Xot.forEach(t),Ypo=r(x6e," (Wav2Vec2-Conformer model)"),x6e.forEach(t),Kpo=i(be),ip=n(be,"LI",{});var $6e=s(ip);Wse=n($6e,"STRONG",{});var zot=s(Wse);Zpo=r(zot,"wavlm"),zot.forEach(t),e_o=r($6e," \u2014 "),QI=n($6e,"A",{href:!0});var Wot=s(QI);o_o=r(Wot,"Wav2Vec2Processor"),Wot.forEach(t),r_o=r($6e," (WavLM model)"),$6e.forEach(t),be.forEach(t),t_o=i(oa),T(dp.$$.fragment,oa),a_o=i(oa),T(cp.$$.fragment,oa),oa.forEach(t),n_o=i(Gs),fp=n(Gs,"DIV",{class:!0});var uGe=s(fp);T(mL.$$.fragment,uGe),s_o=i(uGe),Qse=n(uGe,"P",{});var Qot=s(Qse);l_o=r(Qot,"Register a new processor for this class."),Qot.forEach(t),uGe.forEach(t),Gs.forEach(t),hje=i(f),Li=n(f,"H2",{class:!0});var bGe=s(Li);mp=n(bGe,"A",{id:!0,class:!0,href:!0});var Hot=s(mp);Hse=n(Hot,"SPAN",{});var Uot=s(Hse);T(gL.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),i_o=i(bGe),Use=n(bGe,"SPAN",{});var Jot=s(Use);d_o=r(Jot,"AutoModel"),Jot.forEach(t),bGe.forEach(t),pje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(hL.$$.fragment,Os),c_o=i(Os),yi=n(Os,"P",{});var zZ=s(yi);f_o=r(zZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HI=n(zZ,"A",{href:!0});var Yot=s(HI);m_o=r(Yot,"from_pretrained()"),Yot.forEach(t),g_o=r(zZ," class method or the "),UI=n(zZ,"A",{href:!0});var Kot=s(UI);h_o=r(Kot,"from_config()"),Kot.forEach(t),p_o=r(zZ,` class
method.`),zZ.forEach(t),__o=i(Os),pL=n(Os,"P",{});var vGe=s(pL);u_o=r(vGe,"This class cannot be instantiated directly using "),Jse=n(vGe,"CODE",{});var Zot=s(Jse);b_o=r(Zot,"__init__()"),Zot.forEach(t),v_o=r(vGe," (throws an error)."),vGe.forEach(t),F_o=i(Os),at=n(Os,"DIV",{class:!0});var Ww=s(at);T(_L.$$.fragment,Ww),T_o=i(Ww),Yse=n(Ww,"P",{});var ert=s(Yse);M_o=r(ert,"Instantiates one of the base model classes of the library from a configuration."),ert.forEach(t),E_o=i(Ww),xi=n(Ww,"P",{});var WZ=s(xi);C_o=r(WZ,`Note:
Loading a model from its configuration file does `),Kse=n(WZ,"STRONG",{});var ort=s(Kse);w_o=r(ort,"not"),ort.forEach(t),A_o=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=n(WZ,"A",{href:!0});var rrt=s(JI);L_o=r(rrt,"from_pretrained()"),rrt.forEach(t),y_o=r(WZ," to load the model weights."),WZ.forEach(t),x_o=i(Ww),T(gp.$$.fragment,Ww),Ww.forEach(t),$_o=i(Os),Je=n(Os,"DIV",{class:!0});var ra=s(Je);T(uL.$$.fragment,ra),k_o=i(ra),Zse=n(ra,"P",{});var trt=s(Zse);S_o=r(trt,"Instantiate one of the base model classes of the library from a pretrained model."),trt.forEach(t),R_o=i(ra),xa=n(ra,"P",{});var Qw=s(xa);P_o=r(Qw,"The model class to instantiate is selected based on the "),ele=n(Qw,"CODE",{});var art=s(ele);B_o=r(art,"model_type"),art.forEach(t),I_o=r(Qw,` property of the config object (either
passed as an argument or loaded from `),ole=n(Qw,"CODE",{});var nrt=s(ole);N_o=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),q_o=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=n(Qw,"CODE",{});var srt=s(rle);j_o=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),D_o=r(Qw,":"),Qw.forEach(t),G_o=i(ra),x=n(ra,"UL",{});var $=s(x);hp=n($,"LI",{});var k6e=s(hp);tle=n(k6e,"STRONG",{});var lrt=s(tle);O_o=r(lrt,"albert"),lrt.forEach(t),V_o=r(k6e," \u2014 "),YI=n(k6e,"A",{href:!0});var irt=s(YI);X_o=r(irt,"AlbertModel"),irt.forEach(t),z_o=r(k6e," (ALBERT model)"),k6e.forEach(t),W_o=i($),pp=n($,"LI",{});var S6e=s(pp);ale=n(S6e,"STRONG",{});var drt=s(ale);Q_o=r(drt,"bart"),drt.forEach(t),H_o=r(S6e," \u2014 "),KI=n(S6e,"A",{href:!0});var crt=s(KI);U_o=r(crt,"BartModel"),crt.forEach(t),J_o=r(S6e," (BART model)"),S6e.forEach(t),Y_o=i($),_p=n($,"LI",{});var R6e=s(_p);nle=n(R6e,"STRONG",{});var frt=s(nle);K_o=r(frt,"beit"),frt.forEach(t),Z_o=r(R6e," \u2014 "),ZI=n(R6e,"A",{href:!0});var mrt=s(ZI);euo=r(mrt,"BeitModel"),mrt.forEach(t),ouo=r(R6e," (BEiT model)"),R6e.forEach(t),ruo=i($),up=n($,"LI",{});var P6e=s(up);sle=n(P6e,"STRONG",{});var grt=s(sle);tuo=r(grt,"bert"),grt.forEach(t),auo=r(P6e," \u2014 "),eN=n(P6e,"A",{href:!0});var hrt=s(eN);nuo=r(hrt,"BertModel"),hrt.forEach(t),suo=r(P6e," (BERT model)"),P6e.forEach(t),luo=i($),bp=n($,"LI",{});var B6e=s(bp);lle=n(B6e,"STRONG",{});var prt=s(lle);iuo=r(prt,"bert-generation"),prt.forEach(t),duo=r(B6e," \u2014 "),oN=n(B6e,"A",{href:!0});var _rt=s(oN);cuo=r(_rt,"BertGenerationEncoder"),_rt.forEach(t),fuo=r(B6e," (Bert Generation model)"),B6e.forEach(t),muo=i($),vp=n($,"LI",{});var I6e=s(vp);ile=n(I6e,"STRONG",{});var urt=s(ile);guo=r(urt,"big_bird"),urt.forEach(t),huo=r(I6e," \u2014 "),rN=n(I6e,"A",{href:!0});var brt=s(rN);puo=r(brt,"BigBirdModel"),brt.forEach(t),_uo=r(I6e," (BigBird model)"),I6e.forEach(t),uuo=i($),Fp=n($,"LI",{});var N6e=s(Fp);dle=n(N6e,"STRONG",{});var vrt=s(dle);buo=r(vrt,"bigbird_pegasus"),vrt.forEach(t),vuo=r(N6e," \u2014 "),tN=n(N6e,"A",{href:!0});var Frt=s(tN);Fuo=r(Frt,"BigBirdPegasusModel"),Frt.forEach(t),Tuo=r(N6e," (BigBird-Pegasus model)"),N6e.forEach(t),Muo=i($),Tp=n($,"LI",{});var q6e=s(Tp);cle=n(q6e,"STRONG",{});var Trt=s(cle);Euo=r(Trt,"blenderbot"),Trt.forEach(t),Cuo=r(q6e," \u2014 "),aN=n(q6e,"A",{href:!0});var Mrt=s(aN);wuo=r(Mrt,"BlenderbotModel"),Mrt.forEach(t),Auo=r(q6e," (Blenderbot model)"),q6e.forEach(t),Luo=i($),Mp=n($,"LI",{});var j6e=s(Mp);fle=n(j6e,"STRONG",{});var Ert=s(fle);yuo=r(Ert,"blenderbot-small"),Ert.forEach(t),xuo=r(j6e," \u2014 "),nN=n(j6e,"A",{href:!0});var Crt=s(nN);$uo=r(Crt,"BlenderbotSmallModel"),Crt.forEach(t),kuo=r(j6e," (BlenderbotSmall model)"),j6e.forEach(t),Suo=i($),Ep=n($,"LI",{});var D6e=s(Ep);mle=n(D6e,"STRONG",{});var wrt=s(mle);Ruo=r(wrt,"camembert"),wrt.forEach(t),Puo=r(D6e," \u2014 "),sN=n(D6e,"A",{href:!0});var Art=s(sN);Buo=r(Art,"CamembertModel"),Art.forEach(t),Iuo=r(D6e," (CamemBERT model)"),D6e.forEach(t),Nuo=i($),Cp=n($,"LI",{});var G6e=s(Cp);gle=n(G6e,"STRONG",{});var Lrt=s(gle);quo=r(Lrt,"canine"),Lrt.forEach(t),juo=r(G6e," \u2014 "),lN=n(G6e,"A",{href:!0});var yrt=s(lN);Duo=r(yrt,"CanineModel"),yrt.forEach(t),Guo=r(G6e," (CANINE model)"),G6e.forEach(t),Ouo=i($),wp=n($,"LI",{});var O6e=s(wp);hle=n(O6e,"STRONG",{});var xrt=s(hle);Vuo=r(xrt,"clip"),xrt.forEach(t),Xuo=r(O6e," \u2014 "),iN=n(O6e,"A",{href:!0});var $rt=s(iN);zuo=r($rt,"CLIPModel"),$rt.forEach(t),Wuo=r(O6e," (CLIP model)"),O6e.forEach(t),Quo=i($),Ap=n($,"LI",{});var V6e=s(Ap);ple=n(V6e,"STRONG",{});var krt=s(ple);Huo=r(krt,"convbert"),krt.forEach(t),Uuo=r(V6e," \u2014 "),dN=n(V6e,"A",{href:!0});var Srt=s(dN);Juo=r(Srt,"ConvBertModel"),Srt.forEach(t),Yuo=r(V6e," (ConvBERT model)"),V6e.forEach(t),Kuo=i($),Lp=n($,"LI",{});var X6e=s(Lp);_le=n(X6e,"STRONG",{});var Rrt=s(_le);Zuo=r(Rrt,"convnext"),Rrt.forEach(t),e1o=r(X6e," \u2014 "),cN=n(X6e,"A",{href:!0});var Prt=s(cN);o1o=r(Prt,"ConvNextModel"),Prt.forEach(t),r1o=r(X6e," (ConvNeXT model)"),X6e.forEach(t),t1o=i($),yp=n($,"LI",{});var z6e=s(yp);ule=n(z6e,"STRONG",{});var Brt=s(ule);a1o=r(Brt,"ctrl"),Brt.forEach(t),n1o=r(z6e," \u2014 "),fN=n(z6e,"A",{href:!0});var Irt=s(fN);s1o=r(Irt,"CTRLModel"),Irt.forEach(t),l1o=r(z6e," (CTRL model)"),z6e.forEach(t),i1o=i($),xp=n($,"LI",{});var W6e=s(xp);ble=n(W6e,"STRONG",{});var Nrt=s(ble);d1o=r(Nrt,"cvt"),Nrt.forEach(t),c1o=r(W6e," \u2014 "),mN=n(W6e,"A",{href:!0});var qrt=s(mN);f1o=r(qrt,"CvtModel"),qrt.forEach(t),m1o=r(W6e," (CvT model)"),W6e.forEach(t),g1o=i($),$p=n($,"LI",{});var Q6e=s($p);vle=n(Q6e,"STRONG",{});var jrt=s(vle);h1o=r(jrt,"data2vec-audio"),jrt.forEach(t),p1o=r(Q6e," \u2014 "),gN=n(Q6e,"A",{href:!0});var Drt=s(gN);_1o=r(Drt,"Data2VecAudioModel"),Drt.forEach(t),u1o=r(Q6e," (Data2VecAudio model)"),Q6e.forEach(t),b1o=i($),kp=n($,"LI",{});var H6e=s(kp);Fle=n(H6e,"STRONG",{});var Grt=s(Fle);v1o=r(Grt,"data2vec-text"),Grt.forEach(t),F1o=r(H6e," \u2014 "),hN=n(H6e,"A",{href:!0});var Ort=s(hN);T1o=r(Ort,"Data2VecTextModel"),Ort.forEach(t),M1o=r(H6e," (Data2VecText model)"),H6e.forEach(t),E1o=i($),Sp=n($,"LI",{});var U6e=s(Sp);Tle=n(U6e,"STRONG",{});var Vrt=s(Tle);C1o=r(Vrt,"data2vec-vision"),Vrt.forEach(t),w1o=r(U6e," \u2014 "),pN=n(U6e,"A",{href:!0});var Xrt=s(pN);A1o=r(Xrt,"Data2VecVisionModel"),Xrt.forEach(t),L1o=r(U6e," (Data2VecVision model)"),U6e.forEach(t),y1o=i($),Rp=n($,"LI",{});var J6e=s(Rp);Mle=n(J6e,"STRONG",{});var zrt=s(Mle);x1o=r(zrt,"deberta"),zrt.forEach(t),$1o=r(J6e," \u2014 "),_N=n(J6e,"A",{href:!0});var Wrt=s(_N);k1o=r(Wrt,"DebertaModel"),Wrt.forEach(t),S1o=r(J6e," (DeBERTa model)"),J6e.forEach(t),R1o=i($),Pp=n($,"LI",{});var Y6e=s(Pp);Ele=n(Y6e,"STRONG",{});var Qrt=s(Ele);P1o=r(Qrt,"deberta-v2"),Qrt.forEach(t),B1o=r(Y6e," \u2014 "),uN=n(Y6e,"A",{href:!0});var Hrt=s(uN);I1o=r(Hrt,"DebertaV2Model"),Hrt.forEach(t),N1o=r(Y6e," (DeBERTa-v2 model)"),Y6e.forEach(t),q1o=i($),Bp=n($,"LI",{});var K6e=s(Bp);Cle=n(K6e,"STRONG",{});var Urt=s(Cle);j1o=r(Urt,"decision_transformer"),Urt.forEach(t),D1o=r(K6e," \u2014 "),bN=n(K6e,"A",{href:!0});var Jrt=s(bN);G1o=r(Jrt,"DecisionTransformerModel"),Jrt.forEach(t),O1o=r(K6e," (Decision Transformer model)"),K6e.forEach(t),V1o=i($),Ip=n($,"LI",{});var Z6e=s(Ip);wle=n(Z6e,"STRONG",{});var Yrt=s(wle);X1o=r(Yrt,"deit"),Yrt.forEach(t),z1o=r(Z6e," \u2014 "),vN=n(Z6e,"A",{href:!0});var Krt=s(vN);W1o=r(Krt,"DeiTModel"),Krt.forEach(t),Q1o=r(Z6e," (DeiT model)"),Z6e.forEach(t),H1o=i($),Np=n($,"LI",{});var eLe=s(Np);Ale=n(eLe,"STRONG",{});var Zrt=s(Ale);U1o=r(Zrt,"detr"),Zrt.forEach(t),J1o=r(eLe," \u2014 "),FN=n(eLe,"A",{href:!0});var ett=s(FN);Y1o=r(ett,"DetrModel"),ett.forEach(t),K1o=r(eLe," (DETR model)"),eLe.forEach(t),Z1o=i($),qp=n($,"LI",{});var oLe=s(qp);Lle=n(oLe,"STRONG",{});var ott=s(Lle);ebo=r(ott,"distilbert"),ott.forEach(t),obo=r(oLe," \u2014 "),TN=n(oLe,"A",{href:!0});var rtt=s(TN);rbo=r(rtt,"DistilBertModel"),rtt.forEach(t),tbo=r(oLe," (DistilBERT model)"),oLe.forEach(t),abo=i($),jp=n($,"LI",{});var rLe=s(jp);yle=n(rLe,"STRONG",{});var ttt=s(yle);nbo=r(ttt,"dpr"),ttt.forEach(t),sbo=r(rLe," \u2014 "),MN=n(rLe,"A",{href:!0});var att=s(MN);lbo=r(att,"DPRQuestionEncoder"),att.forEach(t),ibo=r(rLe," (DPR model)"),rLe.forEach(t),dbo=i($),Dp=n($,"LI",{});var tLe=s(Dp);xle=n(tLe,"STRONG",{});var ntt=s(xle);cbo=r(ntt,"dpt"),ntt.forEach(t),fbo=r(tLe," \u2014 "),EN=n(tLe,"A",{href:!0});var stt=s(EN);mbo=r(stt,"DPTModel"),stt.forEach(t),gbo=r(tLe," (DPT model)"),tLe.forEach(t),hbo=i($),Gp=n($,"LI",{});var aLe=s(Gp);$le=n(aLe,"STRONG",{});var ltt=s($le);pbo=r(ltt,"electra"),ltt.forEach(t),_bo=r(aLe," \u2014 "),CN=n(aLe,"A",{href:!0});var itt=s(CN);ubo=r(itt,"ElectraModel"),itt.forEach(t),bbo=r(aLe," (ELECTRA model)"),aLe.forEach(t),vbo=i($),Op=n($,"LI",{});var nLe=s(Op);kle=n(nLe,"STRONG",{});var dtt=s(kle);Fbo=r(dtt,"flaubert"),dtt.forEach(t),Tbo=r(nLe," \u2014 "),wN=n(nLe,"A",{href:!0});var ctt=s(wN);Mbo=r(ctt,"FlaubertModel"),ctt.forEach(t),Ebo=r(nLe," (FlauBERT model)"),nLe.forEach(t),Cbo=i($),Vp=n($,"LI",{});var sLe=s(Vp);Sle=n(sLe,"STRONG",{});var ftt=s(Sle);wbo=r(ftt,"flava"),ftt.forEach(t),Abo=r(sLe," \u2014 "),AN=n(sLe,"A",{href:!0});var mtt=s(AN);Lbo=r(mtt,"FlavaModel"),mtt.forEach(t),ybo=r(sLe," (FLAVA model)"),sLe.forEach(t),xbo=i($),Xp=n($,"LI",{});var lLe=s(Xp);Rle=n(lLe,"STRONG",{});var gtt=s(Rle);$bo=r(gtt,"fnet"),gtt.forEach(t),kbo=r(lLe," \u2014 "),LN=n(lLe,"A",{href:!0});var htt=s(LN);Sbo=r(htt,"FNetModel"),htt.forEach(t),Rbo=r(lLe," (FNet model)"),lLe.forEach(t),Pbo=i($),zp=n($,"LI",{});var iLe=s(zp);Ple=n(iLe,"STRONG",{});var ptt=s(Ple);Bbo=r(ptt,"fsmt"),ptt.forEach(t),Ibo=r(iLe," \u2014 "),yN=n(iLe,"A",{href:!0});var _tt=s(yN);Nbo=r(_tt,"FSMTModel"),_tt.forEach(t),qbo=r(iLe," (FairSeq Machine-Translation model)"),iLe.forEach(t),jbo=i($),Ps=n($,"LI",{});var rk=s(Ps);Ble=n(rk,"STRONG",{});var utt=s(Ble);Dbo=r(utt,"funnel"),utt.forEach(t),Gbo=r(rk," \u2014 "),xN=n(rk,"A",{href:!0});var btt=s(xN);Obo=r(btt,"FunnelModel"),btt.forEach(t),Vbo=r(rk," or "),$N=n(rk,"A",{href:!0});var vtt=s($N);Xbo=r(vtt,"FunnelBaseModel"),vtt.forEach(t),zbo=r(rk," (Funnel Transformer model)"),rk.forEach(t),Wbo=i($),Wp=n($,"LI",{});var dLe=s(Wp);Ile=n(dLe,"STRONG",{});var Ftt=s(Ile);Qbo=r(Ftt,"glpn"),Ftt.forEach(t),Hbo=r(dLe," \u2014 "),kN=n(dLe,"A",{href:!0});var Ttt=s(kN);Ubo=r(Ttt,"GLPNModel"),Ttt.forEach(t),Jbo=r(dLe," (GLPN model)"),dLe.forEach(t),Ybo=i($),Qp=n($,"LI",{});var cLe=s(Qp);Nle=n(cLe,"STRONG",{});var Mtt=s(Nle);Kbo=r(Mtt,"gpt2"),Mtt.forEach(t),Zbo=r(cLe," \u2014 "),SN=n(cLe,"A",{href:!0});var Ett=s(SN);e2o=r(Ett,"GPT2Model"),Ett.forEach(t),o2o=r(cLe," (OpenAI GPT-2 model)"),cLe.forEach(t),r2o=i($),Hp=n($,"LI",{});var fLe=s(Hp);qle=n(fLe,"STRONG",{});var Ctt=s(qle);t2o=r(Ctt,"gpt_neo"),Ctt.forEach(t),a2o=r(fLe," \u2014 "),RN=n(fLe,"A",{href:!0});var wtt=s(RN);n2o=r(wtt,"GPTNeoModel"),wtt.forEach(t),s2o=r(fLe," (GPT Neo model)"),fLe.forEach(t),l2o=i($),Up=n($,"LI",{});var mLe=s(Up);jle=n(mLe,"STRONG",{});var Att=s(jle);i2o=r(Att,"gpt_neox"),Att.forEach(t),d2o=r(mLe," \u2014 "),PN=n(mLe,"A",{href:!0});var Ltt=s(PN);c2o=r(Ltt,"GPTNeoXModel"),Ltt.forEach(t),f2o=r(mLe," (GPT NeoX model)"),mLe.forEach(t),m2o=i($),Jp=n($,"LI",{});var gLe=s(Jp);Dle=n(gLe,"STRONG",{});var ytt=s(Dle);g2o=r(ytt,"gptj"),ytt.forEach(t),h2o=r(gLe," \u2014 "),BN=n(gLe,"A",{href:!0});var xtt=s(BN);p2o=r(xtt,"GPTJModel"),xtt.forEach(t),_2o=r(gLe," (GPT-J model)"),gLe.forEach(t),u2o=i($),Yp=n($,"LI",{});var hLe=s(Yp);Gle=n(hLe,"STRONG",{});var $tt=s(Gle);b2o=r($tt,"hubert"),$tt.forEach(t),v2o=r(hLe," \u2014 "),IN=n(hLe,"A",{href:!0});var ktt=s(IN);F2o=r(ktt,"HubertModel"),ktt.forEach(t),T2o=r(hLe," (Hubert model)"),hLe.forEach(t),M2o=i($),Kp=n($,"LI",{});var pLe=s(Kp);Ole=n(pLe,"STRONG",{});var Stt=s(Ole);E2o=r(Stt,"ibert"),Stt.forEach(t),C2o=r(pLe," \u2014 "),NN=n(pLe,"A",{href:!0});var Rtt=s(NN);w2o=r(Rtt,"IBertModel"),Rtt.forEach(t),A2o=r(pLe," (I-BERT model)"),pLe.forEach(t),L2o=i($),Zp=n($,"LI",{});var _Le=s(Zp);Vle=n(_Le,"STRONG",{});var Ptt=s(Vle);y2o=r(Ptt,"imagegpt"),Ptt.forEach(t),x2o=r(_Le," \u2014 "),qN=n(_Le,"A",{href:!0});var Btt=s(qN);$2o=r(Btt,"ImageGPTModel"),Btt.forEach(t),k2o=r(_Le," (ImageGPT model)"),_Le.forEach(t),S2o=i($),e_=n($,"LI",{});var uLe=s(e_);Xle=n(uLe,"STRONG",{});var Itt=s(Xle);R2o=r(Itt,"layoutlm"),Itt.forEach(t),P2o=r(uLe," \u2014 "),jN=n(uLe,"A",{href:!0});var Ntt=s(jN);B2o=r(Ntt,"LayoutLMModel"),Ntt.forEach(t),I2o=r(uLe," (LayoutLM model)"),uLe.forEach(t),N2o=i($),o_=n($,"LI",{});var bLe=s(o_);zle=n(bLe,"STRONG",{});var qtt=s(zle);q2o=r(qtt,"layoutlmv2"),qtt.forEach(t),j2o=r(bLe," \u2014 "),DN=n(bLe,"A",{href:!0});var jtt=s(DN);D2o=r(jtt,"LayoutLMv2Model"),jtt.forEach(t),G2o=r(bLe," (LayoutLMv2 model)"),bLe.forEach(t),O2o=i($),r_=n($,"LI",{});var vLe=s(r_);Wle=n(vLe,"STRONG",{});var Dtt=s(Wle);V2o=r(Dtt,"layoutlmv3"),Dtt.forEach(t),X2o=r(vLe," \u2014 "),GN=n(vLe,"A",{href:!0});var Gtt=s(GN);z2o=r(Gtt,"LayoutLMv3Model"),Gtt.forEach(t),W2o=r(vLe," (LayoutLMv3 model)"),vLe.forEach(t),Q2o=i($),t_=n($,"LI",{});var FLe=s(t_);Qle=n(FLe,"STRONG",{});var Ott=s(Qle);H2o=r(Ott,"led"),Ott.forEach(t),U2o=r(FLe," \u2014 "),ON=n(FLe,"A",{href:!0});var Vtt=s(ON);J2o=r(Vtt,"LEDModel"),Vtt.forEach(t),Y2o=r(FLe," (LED model)"),FLe.forEach(t),K2o=i($),a_=n($,"LI",{});var TLe=s(a_);Hle=n(TLe,"STRONG",{});var Xtt=s(Hle);Z2o=r(Xtt,"levit"),Xtt.forEach(t),e4o=r(TLe," \u2014 "),VN=n(TLe,"A",{href:!0});var ztt=s(VN);o4o=r(ztt,"LevitModel"),ztt.forEach(t),r4o=r(TLe," (LeViT model)"),TLe.forEach(t),t4o=i($),n_=n($,"LI",{});var MLe=s(n_);Ule=n(MLe,"STRONG",{});var Wtt=s(Ule);a4o=r(Wtt,"longformer"),Wtt.forEach(t),n4o=r(MLe," \u2014 "),XN=n(MLe,"A",{href:!0});var Qtt=s(XN);s4o=r(Qtt,"LongformerModel"),Qtt.forEach(t),l4o=r(MLe," (Longformer model)"),MLe.forEach(t),i4o=i($),s_=n($,"LI",{});var ELe=s(s_);Jle=n(ELe,"STRONG",{});var Htt=s(Jle);d4o=r(Htt,"luke"),Htt.forEach(t),c4o=r(ELe," \u2014 "),zN=n(ELe,"A",{href:!0});var Utt=s(zN);f4o=r(Utt,"LukeModel"),Utt.forEach(t),m4o=r(ELe," (LUKE model)"),ELe.forEach(t),g4o=i($),l_=n($,"LI",{});var CLe=s(l_);Yle=n(CLe,"STRONG",{});var Jtt=s(Yle);h4o=r(Jtt,"lxmert"),Jtt.forEach(t),p4o=r(CLe," \u2014 "),WN=n(CLe,"A",{href:!0});var Ytt=s(WN);_4o=r(Ytt,"LxmertModel"),Ytt.forEach(t),u4o=r(CLe," (LXMERT model)"),CLe.forEach(t),b4o=i($),i_=n($,"LI",{});var wLe=s(i_);Kle=n(wLe,"STRONG",{});var Ktt=s(Kle);v4o=r(Ktt,"m2m_100"),Ktt.forEach(t),F4o=r(wLe," \u2014 "),QN=n(wLe,"A",{href:!0});var Ztt=s(QN);T4o=r(Ztt,"M2M100Model"),Ztt.forEach(t),M4o=r(wLe," (M2M100 model)"),wLe.forEach(t),E4o=i($),d_=n($,"LI",{});var ALe=s(d_);Zle=n(ALe,"STRONG",{});var eat=s(Zle);C4o=r(eat,"marian"),eat.forEach(t),w4o=r(ALe," \u2014 "),HN=n(ALe,"A",{href:!0});var oat=s(HN);A4o=r(oat,"MarianModel"),oat.forEach(t),L4o=r(ALe," (Marian model)"),ALe.forEach(t),y4o=i($),c_=n($,"LI",{});var LLe=s(c_);eie=n(LLe,"STRONG",{});var rat=s(eie);x4o=r(rat,"maskformer"),rat.forEach(t),$4o=r(LLe," \u2014 "),UN=n(LLe,"A",{href:!0});var tat=s(UN);k4o=r(tat,"MaskFormerModel"),tat.forEach(t),S4o=r(LLe," (MaskFormer model)"),LLe.forEach(t),R4o=i($),f_=n($,"LI",{});var yLe=s(f_);oie=n(yLe,"STRONG",{});var aat=s(oie);P4o=r(aat,"mbart"),aat.forEach(t),B4o=r(yLe," \u2014 "),JN=n(yLe,"A",{href:!0});var nat=s(JN);I4o=r(nat,"MBartModel"),nat.forEach(t),N4o=r(yLe," (mBART model)"),yLe.forEach(t),q4o=i($),m_=n($,"LI",{});var xLe=s(m_);rie=n(xLe,"STRONG",{});var sat=s(rie);j4o=r(sat,"megatron-bert"),sat.forEach(t),D4o=r(xLe," \u2014 "),YN=n(xLe,"A",{href:!0});var lat=s(YN);G4o=r(lat,"MegatronBertModel"),lat.forEach(t),O4o=r(xLe," (Megatron-BERT model)"),xLe.forEach(t),V4o=i($),g_=n($,"LI",{});var $Le=s(g_);tie=n($Le,"STRONG",{});var iat=s(tie);X4o=r(iat,"mobilebert"),iat.forEach(t),z4o=r($Le," \u2014 "),KN=n($Le,"A",{href:!0});var dat=s(KN);W4o=r(dat,"MobileBertModel"),dat.forEach(t),Q4o=r($Le," (MobileBERT model)"),$Le.forEach(t),H4o=i($),h_=n($,"LI",{});var kLe=s(h_);aie=n(kLe,"STRONG",{});var cat=s(aie);U4o=r(cat,"mobilevit"),cat.forEach(t),J4o=r(kLe," \u2014 "),ZN=n(kLe,"A",{href:!0});var fat=s(ZN);Y4o=r(fat,"MobileViTModel"),fat.forEach(t),K4o=r(kLe," (MobileViT model)"),kLe.forEach(t),Z4o=i($),p_=n($,"LI",{});var SLe=s(p_);nie=n(SLe,"STRONG",{});var mat=s(nie);evo=r(mat,"mpnet"),mat.forEach(t),ovo=r(SLe," \u2014 "),eq=n(SLe,"A",{href:!0});var gat=s(eq);rvo=r(gat,"MPNetModel"),gat.forEach(t),tvo=r(SLe," (MPNet model)"),SLe.forEach(t),avo=i($),__=n($,"LI",{});var RLe=s(__);sie=n(RLe,"STRONG",{});var hat=s(sie);nvo=r(hat,"mt5"),hat.forEach(t),svo=r(RLe," \u2014 "),oq=n(RLe,"A",{href:!0});var pat=s(oq);lvo=r(pat,"MT5Model"),pat.forEach(t),ivo=r(RLe," (MT5 model)"),RLe.forEach(t),dvo=i($),u_=n($,"LI",{});var PLe=s(u_);lie=n(PLe,"STRONG",{});var _at=s(lie);cvo=r(_at,"nystromformer"),_at.forEach(t),fvo=r(PLe," \u2014 "),rq=n(PLe,"A",{href:!0});var uat=s(rq);mvo=r(uat,"NystromformerModel"),uat.forEach(t),gvo=r(PLe," (Nystr\xF6mformer model)"),PLe.forEach(t),hvo=i($),b_=n($,"LI",{});var BLe=s(b_);iie=n(BLe,"STRONG",{});var bat=s(iie);pvo=r(bat,"openai-gpt"),bat.forEach(t),_vo=r(BLe," \u2014 "),tq=n(BLe,"A",{href:!0});var vat=s(tq);uvo=r(vat,"OpenAIGPTModel"),vat.forEach(t),bvo=r(BLe," (OpenAI GPT model)"),BLe.forEach(t),vvo=i($),v_=n($,"LI",{});var ILe=s(v_);die=n(ILe,"STRONG",{});var Fat=s(die);Fvo=r(Fat,"opt"),Fat.forEach(t),Tvo=r(ILe," \u2014 "),aq=n(ILe,"A",{href:!0});var Tat=s(aq);Mvo=r(Tat,"OPTModel"),Tat.forEach(t),Evo=r(ILe," (OPT model)"),ILe.forEach(t),Cvo=i($),F_=n($,"LI",{});var NLe=s(F_);cie=n(NLe,"STRONG",{});var Mat=s(cie);wvo=r(Mat,"pegasus"),Mat.forEach(t),Avo=r(NLe," \u2014 "),nq=n(NLe,"A",{href:!0});var Eat=s(nq);Lvo=r(Eat,"PegasusModel"),Eat.forEach(t),yvo=r(NLe," (Pegasus model)"),NLe.forEach(t),xvo=i($),T_=n($,"LI",{});var qLe=s(T_);fie=n(qLe,"STRONG",{});var Cat=s(fie);$vo=r(Cat,"perceiver"),Cat.forEach(t),kvo=r(qLe," \u2014 "),sq=n(qLe,"A",{href:!0});var wat=s(sq);Svo=r(wat,"PerceiverModel"),wat.forEach(t),Rvo=r(qLe," (Perceiver model)"),qLe.forEach(t),Pvo=i($),M_=n($,"LI",{});var jLe=s(M_);mie=n(jLe,"STRONG",{});var Aat=s(mie);Bvo=r(Aat,"plbart"),Aat.forEach(t),Ivo=r(jLe," \u2014 "),lq=n(jLe,"A",{href:!0});var Lat=s(lq);Nvo=r(Lat,"PLBartModel"),Lat.forEach(t),qvo=r(jLe," (PLBart model)"),jLe.forEach(t),jvo=i($),E_=n($,"LI",{});var DLe=s(E_);gie=n(DLe,"STRONG",{});var yat=s(gie);Dvo=r(yat,"poolformer"),yat.forEach(t),Gvo=r(DLe," \u2014 "),iq=n(DLe,"A",{href:!0});var xat=s(iq);Ovo=r(xat,"PoolFormerModel"),xat.forEach(t),Vvo=r(DLe," (PoolFormer model)"),DLe.forEach(t),Xvo=i($),C_=n($,"LI",{});var GLe=s(C_);hie=n(GLe,"STRONG",{});var $at=s(hie);zvo=r($at,"prophetnet"),$at.forEach(t),Wvo=r(GLe," \u2014 "),dq=n(GLe,"A",{href:!0});var kat=s(dq);Qvo=r(kat,"ProphetNetModel"),kat.forEach(t),Hvo=r(GLe," (ProphetNet model)"),GLe.forEach(t),Uvo=i($),w_=n($,"LI",{});var OLe=s(w_);pie=n(OLe,"STRONG",{});var Sat=s(pie);Jvo=r(Sat,"qdqbert"),Sat.forEach(t),Yvo=r(OLe," \u2014 "),cq=n(OLe,"A",{href:!0});var Rat=s(cq);Kvo=r(Rat,"QDQBertModel"),Rat.forEach(t),Zvo=r(OLe," (QDQBert model)"),OLe.forEach(t),e5o=i($),A_=n($,"LI",{});var VLe=s(A_);_ie=n(VLe,"STRONG",{});var Pat=s(_ie);o5o=r(Pat,"reformer"),Pat.forEach(t),r5o=r(VLe," \u2014 "),fq=n(VLe,"A",{href:!0});var Bat=s(fq);t5o=r(Bat,"ReformerModel"),Bat.forEach(t),a5o=r(VLe," (Reformer model)"),VLe.forEach(t),n5o=i($),L_=n($,"LI",{});var XLe=s(L_);uie=n(XLe,"STRONG",{});var Iat=s(uie);s5o=r(Iat,"regnet"),Iat.forEach(t),l5o=r(XLe," \u2014 "),mq=n(XLe,"A",{href:!0});var Nat=s(mq);i5o=r(Nat,"RegNetModel"),Nat.forEach(t),d5o=r(XLe," (RegNet model)"),XLe.forEach(t),c5o=i($),y_=n($,"LI",{});var zLe=s(y_);bie=n(zLe,"STRONG",{});var qat=s(bie);f5o=r(qat,"rembert"),qat.forEach(t),m5o=r(zLe," \u2014 "),gq=n(zLe,"A",{href:!0});var jat=s(gq);g5o=r(jat,"RemBertModel"),jat.forEach(t),h5o=r(zLe," (RemBERT model)"),zLe.forEach(t),p5o=i($),x_=n($,"LI",{});var WLe=s(x_);vie=n(WLe,"STRONG",{});var Dat=s(vie);_5o=r(Dat,"resnet"),Dat.forEach(t),u5o=r(WLe," \u2014 "),hq=n(WLe,"A",{href:!0});var Gat=s(hq);b5o=r(Gat,"ResNetModel"),Gat.forEach(t),v5o=r(WLe," (ResNet model)"),WLe.forEach(t),F5o=i($),$_=n($,"LI",{});var QLe=s($_);Fie=n(QLe,"STRONG",{});var Oat=s(Fie);T5o=r(Oat,"retribert"),Oat.forEach(t),M5o=r(QLe," \u2014 "),pq=n(QLe,"A",{href:!0});var Vat=s(pq);E5o=r(Vat,"RetriBertModel"),Vat.forEach(t),C5o=r(QLe," (RetriBERT model)"),QLe.forEach(t),w5o=i($),k_=n($,"LI",{});var HLe=s(k_);Tie=n(HLe,"STRONG",{});var Xat=s(Tie);A5o=r(Xat,"roberta"),Xat.forEach(t),L5o=r(HLe," \u2014 "),_q=n(HLe,"A",{href:!0});var zat=s(_q);y5o=r(zat,"RobertaModel"),zat.forEach(t),x5o=r(HLe," (RoBERTa model)"),HLe.forEach(t),$5o=i($),S_=n($,"LI",{});var ULe=s(S_);Mie=n(ULe,"STRONG",{});var Wat=s(Mie);k5o=r(Wat,"roformer"),Wat.forEach(t),S5o=r(ULe," \u2014 "),uq=n(ULe,"A",{href:!0});var Qat=s(uq);R5o=r(Qat,"RoFormerModel"),Qat.forEach(t),P5o=r(ULe," (RoFormer model)"),ULe.forEach(t),B5o=i($),R_=n($,"LI",{});var JLe=s(R_);Eie=n(JLe,"STRONG",{});var Hat=s(Eie);I5o=r(Hat,"segformer"),Hat.forEach(t),N5o=r(JLe," \u2014 "),bq=n(JLe,"A",{href:!0});var Uat=s(bq);q5o=r(Uat,"SegformerModel"),Uat.forEach(t),j5o=r(JLe," (SegFormer model)"),JLe.forEach(t),D5o=i($),P_=n($,"LI",{});var YLe=s(P_);Cie=n(YLe,"STRONG",{});var Jat=s(Cie);G5o=r(Jat,"sew"),Jat.forEach(t),O5o=r(YLe," \u2014 "),vq=n(YLe,"A",{href:!0});var Yat=s(vq);V5o=r(Yat,"SEWModel"),Yat.forEach(t),X5o=r(YLe," (SEW model)"),YLe.forEach(t),z5o=i($),B_=n($,"LI",{});var KLe=s(B_);wie=n(KLe,"STRONG",{});var Kat=s(wie);W5o=r(Kat,"sew-d"),Kat.forEach(t),Q5o=r(KLe," \u2014 "),Fq=n(KLe,"A",{href:!0});var Zat=s(Fq);H5o=r(Zat,"SEWDModel"),Zat.forEach(t),U5o=r(KLe," (SEW-D model)"),KLe.forEach(t),J5o=i($),I_=n($,"LI",{});var ZLe=s(I_);Aie=n(ZLe,"STRONG",{});var ent=s(Aie);Y5o=r(ent,"speech_to_text"),ent.forEach(t),K5o=r(ZLe," \u2014 "),Tq=n(ZLe,"A",{href:!0});var ont=s(Tq);Z5o=r(ont,"Speech2TextModel"),ont.forEach(t),e3o=r(ZLe," (Speech2Text model)"),ZLe.forEach(t),o3o=i($),N_=n($,"LI",{});var eye=s(N_);Lie=n(eye,"STRONG",{});var rnt=s(Lie);r3o=r(rnt,"splinter"),rnt.forEach(t),t3o=r(eye," \u2014 "),Mq=n(eye,"A",{href:!0});var tnt=s(Mq);a3o=r(tnt,"SplinterModel"),tnt.forEach(t),n3o=r(eye," (Splinter model)"),eye.forEach(t),s3o=i($),q_=n($,"LI",{});var oye=s(q_);yie=n(oye,"STRONG",{});var ant=s(yie);l3o=r(ant,"squeezebert"),ant.forEach(t),i3o=r(oye," \u2014 "),Eq=n(oye,"A",{href:!0});var nnt=s(Eq);d3o=r(nnt,"SqueezeBertModel"),nnt.forEach(t),c3o=r(oye," (SqueezeBERT model)"),oye.forEach(t),f3o=i($),j_=n($,"LI",{});var rye=s(j_);xie=n(rye,"STRONG",{});var snt=s(xie);m3o=r(snt,"swin"),snt.forEach(t),g3o=r(rye," \u2014 "),Cq=n(rye,"A",{href:!0});var lnt=s(Cq);h3o=r(lnt,"SwinModel"),lnt.forEach(t),p3o=r(rye," (Swin Transformer model)"),rye.forEach(t),_3o=i($),D_=n($,"LI",{});var tye=s(D_);$ie=n(tye,"STRONG",{});var int=s($ie);u3o=r(int,"t5"),int.forEach(t),b3o=r(tye," \u2014 "),wq=n(tye,"A",{href:!0});var dnt=s(wq);v3o=r(dnt,"T5Model"),dnt.forEach(t),F3o=r(tye," (T5 model)"),tye.forEach(t),T3o=i($),G_=n($,"LI",{});var aye=s(G_);kie=n(aye,"STRONG",{});var cnt=s(kie);M3o=r(cnt,"tapas"),cnt.forEach(t),E3o=r(aye," \u2014 "),Aq=n(aye,"A",{href:!0});var fnt=s(Aq);C3o=r(fnt,"TapasModel"),fnt.forEach(t),w3o=r(aye," (TAPAS model)"),aye.forEach(t),A3o=i($),O_=n($,"LI",{});var nye=s(O_);Sie=n(nye,"STRONG",{});var mnt=s(Sie);L3o=r(mnt,"trajectory_transformer"),mnt.forEach(t),y3o=r(nye," \u2014 "),Lq=n(nye,"A",{href:!0});var gnt=s(Lq);x3o=r(gnt,"TrajectoryTransformerModel"),gnt.forEach(t),$3o=r(nye," (Trajectory Transformer model)"),nye.forEach(t),k3o=i($),V_=n($,"LI",{});var sye=s(V_);Rie=n(sye,"STRONG",{});var hnt=s(Rie);S3o=r(hnt,"transfo-xl"),hnt.forEach(t),R3o=r(sye," \u2014 "),yq=n(sye,"A",{href:!0});var pnt=s(yq);P3o=r(pnt,"TransfoXLModel"),pnt.forEach(t),B3o=r(sye," (Transformer-XL model)"),sye.forEach(t),I3o=i($),X_=n($,"LI",{});var lye=s(X_);Pie=n(lye,"STRONG",{});var _nt=s(Pie);N3o=r(_nt,"unispeech"),_nt.forEach(t),q3o=r(lye," \u2014 "),xq=n(lye,"A",{href:!0});var unt=s(xq);j3o=r(unt,"UniSpeechModel"),unt.forEach(t),D3o=r(lye," (UniSpeech model)"),lye.forEach(t),G3o=i($),z_=n($,"LI",{});var iye=s(z_);Bie=n(iye,"STRONG",{});var bnt=s(Bie);O3o=r(bnt,"unispeech-sat"),bnt.forEach(t),V3o=r(iye," \u2014 "),$q=n(iye,"A",{href:!0});var vnt=s($q);X3o=r(vnt,"UniSpeechSatModel"),vnt.forEach(t),z3o=r(iye," (UniSpeechSat model)"),iye.forEach(t),W3o=i($),W_=n($,"LI",{});var dye=s(W_);Iie=n(dye,"STRONG",{});var Fnt=s(Iie);Q3o=r(Fnt,"van"),Fnt.forEach(t),H3o=r(dye," \u2014 "),kq=n(dye,"A",{href:!0});var Tnt=s(kq);U3o=r(Tnt,"VanModel"),Tnt.forEach(t),J3o=r(dye," (VAN model)"),dye.forEach(t),Y3o=i($),Q_=n($,"LI",{});var cye=s(Q_);Nie=n(cye,"STRONG",{});var Mnt=s(Nie);K3o=r(Mnt,"vilt"),Mnt.forEach(t),Z3o=r(cye," \u2014 "),Sq=n(cye,"A",{href:!0});var Ent=s(Sq);eFo=r(Ent,"ViltModel"),Ent.forEach(t),oFo=r(cye," (ViLT model)"),cye.forEach(t),rFo=i($),H_=n($,"LI",{});var fye=s(H_);qie=n(fye,"STRONG",{});var Cnt=s(qie);tFo=r(Cnt,"vision-text-dual-encoder"),Cnt.forEach(t),aFo=r(fye," \u2014 "),Rq=n(fye,"A",{href:!0});var wnt=s(Rq);nFo=r(wnt,"VisionTextDualEncoderModel"),wnt.forEach(t),sFo=r(fye," (VisionTextDualEncoder model)"),fye.forEach(t),lFo=i($),U_=n($,"LI",{});var mye=s(U_);jie=n(mye,"STRONG",{});var Ant=s(jie);iFo=r(Ant,"visual_bert"),Ant.forEach(t),dFo=r(mye," \u2014 "),Pq=n(mye,"A",{href:!0});var Lnt=s(Pq);cFo=r(Lnt,"VisualBertModel"),Lnt.forEach(t),fFo=r(mye," (VisualBERT model)"),mye.forEach(t),mFo=i($),J_=n($,"LI",{});var gye=s(J_);Die=n(gye,"STRONG",{});var ynt=s(Die);gFo=r(ynt,"vit"),ynt.forEach(t),hFo=r(gye," \u2014 "),Bq=n(gye,"A",{href:!0});var xnt=s(Bq);pFo=r(xnt,"ViTModel"),xnt.forEach(t),_Fo=r(gye," (ViT model)"),gye.forEach(t),uFo=i($),Y_=n($,"LI",{});var hye=s(Y_);Gie=n(hye,"STRONG",{});var $nt=s(Gie);bFo=r($nt,"vit_mae"),$nt.forEach(t),vFo=r(hye," \u2014 "),Iq=n(hye,"A",{href:!0});var knt=s(Iq);FFo=r(knt,"ViTMAEModel"),knt.forEach(t),TFo=r(hye," (ViTMAE model)"),hye.forEach(t),MFo=i($),K_=n($,"LI",{});var pye=s(K_);Oie=n(pye,"STRONG",{});var Snt=s(Oie);EFo=r(Snt,"wav2vec2"),Snt.forEach(t),CFo=r(pye," \u2014 "),Nq=n(pye,"A",{href:!0});var Rnt=s(Nq);wFo=r(Rnt,"Wav2Vec2Model"),Rnt.forEach(t),AFo=r(pye," (Wav2Vec2 model)"),pye.forEach(t),LFo=i($),Z_=n($,"LI",{});var _ye=s(Z_);Vie=n(_ye,"STRONG",{});var Pnt=s(Vie);yFo=r(Pnt,"wav2vec2-conformer"),Pnt.forEach(t),xFo=r(_ye," \u2014 "),qq=n(_ye,"A",{href:!0});var Bnt=s(qq);$Fo=r(Bnt,"Wav2Vec2ConformerModel"),Bnt.forEach(t),kFo=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),SFo=i($),eu=n($,"LI",{});var uye=s(eu);Xie=n(uye,"STRONG",{});var Int=s(Xie);RFo=r(Int,"wavlm"),Int.forEach(t),PFo=r(uye," \u2014 "),jq=n(uye,"A",{href:!0});var Nnt=s(jq);BFo=r(Nnt,"WavLMModel"),Nnt.forEach(t),IFo=r(uye," (WavLM model)"),uye.forEach(t),NFo=i($),ou=n($,"LI",{});var bye=s(ou);zie=n(bye,"STRONG",{});var qnt=s(zie);qFo=r(qnt,"xglm"),qnt.forEach(t),jFo=r(bye," \u2014 "),Dq=n(bye,"A",{href:!0});var jnt=s(Dq);DFo=r(jnt,"XGLMModel"),jnt.forEach(t),GFo=r(bye," (XGLM model)"),bye.forEach(t),OFo=i($),ru=n($,"LI",{});var vye=s(ru);Wie=n(vye,"STRONG",{});var Dnt=s(Wie);VFo=r(Dnt,"xlm"),Dnt.forEach(t),XFo=r(vye," \u2014 "),Gq=n(vye,"A",{href:!0});var Gnt=s(Gq);zFo=r(Gnt,"XLMModel"),Gnt.forEach(t),WFo=r(vye," (XLM model)"),vye.forEach(t),QFo=i($),tu=n($,"LI",{});var Fye=s(tu);Qie=n(Fye,"STRONG",{});var Ont=s(Qie);HFo=r(Ont,"xlm-prophetnet"),Ont.forEach(t),UFo=r(Fye," \u2014 "),Oq=n(Fye,"A",{href:!0});var Vnt=s(Oq);JFo=r(Vnt,"XLMProphetNetModel"),Vnt.forEach(t),YFo=r(Fye," (XLM-ProphetNet model)"),Fye.forEach(t),KFo=i($),au=n($,"LI",{});var Tye=s(au);Hie=n(Tye,"STRONG",{});var Xnt=s(Hie);ZFo=r(Xnt,"xlm-roberta"),Xnt.forEach(t),eTo=r(Tye," \u2014 "),Vq=n(Tye,"A",{href:!0});var znt=s(Vq);oTo=r(znt,"XLMRobertaModel"),znt.forEach(t),rTo=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),tTo=i($),nu=n($,"LI",{});var Mye=s(nu);Uie=n(Mye,"STRONG",{});var Wnt=s(Uie);aTo=r(Wnt,"xlm-roberta-xl"),Wnt.forEach(t),nTo=r(Mye," \u2014 "),Xq=n(Mye,"A",{href:!0});var Qnt=s(Xq);sTo=r(Qnt,"XLMRobertaXLModel"),Qnt.forEach(t),lTo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),iTo=i($),su=n($,"LI",{});var Eye=s(su);Jie=n(Eye,"STRONG",{});var Hnt=s(Jie);dTo=r(Hnt,"xlnet"),Hnt.forEach(t),cTo=r(Eye," \u2014 "),zq=n(Eye,"A",{href:!0});var Unt=s(zq);fTo=r(Unt,"XLNetModel"),Unt.forEach(t),mTo=r(Eye," (XLNet model)"),Eye.forEach(t),gTo=i($),lu=n($,"LI",{});var Cye=s(lu);Yie=n(Cye,"STRONG",{});var Jnt=s(Yie);hTo=r(Jnt,"yolos"),Jnt.forEach(t),pTo=r(Cye," \u2014 "),Wq=n(Cye,"A",{href:!0});var Ynt=s(Wq);_To=r(Ynt,"YolosModel"),Ynt.forEach(t),uTo=r(Cye," (YOLOS model)"),Cye.forEach(t),bTo=i($),iu=n($,"LI",{});var wye=s(iu);Kie=n(wye,"STRONG",{});var Knt=s(Kie);vTo=r(Knt,"yoso"),Knt.forEach(t),FTo=r(wye," \u2014 "),Qq=n(wye,"A",{href:!0});var Znt=s(Qq);TTo=r(Znt,"YosoModel"),Znt.forEach(t),MTo=r(wye," (YOSO model)"),wye.forEach(t),$.forEach(t),ETo=i(ra),du=n(ra,"P",{});var Aye=s(du);CTo=r(Aye,"The model is set in evaluation mode by default using "),Zie=n(Aye,"CODE",{});var est=s(Zie);wTo=r(est,"model.eval()"),est.forEach(t),ATo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n(Aye,"CODE",{});var ost=s(ede);LTo=r(ost,"model.train()"),ost.forEach(t),Aye.forEach(t),yTo=i(ra),T(cu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),_je=i(f),$i=n(f,"H2",{class:!0});var FGe=s($i);fu=n(FGe,"A",{id:!0,class:!0,href:!0});var rst=s(fu);ode=n(rst,"SPAN",{});var tst=s(ode);T(bL.$$.fragment,tst),tst.forEach(t),rst.forEach(t),xTo=i(FGe),rde=n(FGe,"SPAN",{});var ast=s(rde);$To=r(ast,"AutoModelForPreTraining"),ast.forEach(t),FGe.forEach(t),uje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(vL.$$.fragment,Vs),kTo=i(Vs),ki=n(Vs,"P",{});var QZ=s(ki);STo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hq=n(QZ,"A",{href:!0});var nst=s(Hq);RTo=r(nst,"from_pretrained()"),nst.forEach(t),PTo=r(QZ," class method or the "),Uq=n(QZ,"A",{href:!0});var sst=s(Uq);BTo=r(sst,"from_config()"),sst.forEach(t),ITo=r(QZ,` class
method.`),QZ.forEach(t),NTo=i(Vs),FL=n(Vs,"P",{});var TGe=s(FL);qTo=r(TGe,"This class cannot be instantiated directly using "),tde=n(TGe,"CODE",{});var lst=s(tde);jTo=r(lst,"__init__()"),lst.forEach(t),DTo=r(TGe," (throws an error)."),TGe.forEach(t),GTo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Hw=s(nt);T(TL.$$.fragment,Hw),OTo=i(Hw),ade=n(Hw,"P",{});var ist=s(ade);VTo=r(ist,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ist.forEach(t),XTo=i(Hw),Si=n(Hw,"P",{});var HZ=s(Si);zTo=r(HZ,`Note:
Loading a model from its configuration file does `),nde=n(HZ,"STRONG",{});var dst=s(nde);WTo=r(dst,"not"),dst.forEach(t),QTo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n(HZ,"A",{href:!0});var cst=s(Jq);HTo=r(cst,"from_pretrained()"),cst.forEach(t),UTo=r(HZ," to load the model weights."),HZ.forEach(t),JTo=i(Hw),T(mu.$$.fragment,Hw),Hw.forEach(t),YTo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ta=s(Ye);T(ML.$$.fragment,ta),KTo=i(ta),sde=n(ta,"P",{});var fst=s(sde);ZTo=r(fst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fst.forEach(t),e7o=i(ta),$a=n(ta,"P",{});var Uw=s($a);o7o=r(Uw,"The model class to instantiate is selected based on the "),lde=n(Uw,"CODE",{});var mst=s(lde);r7o=r(mst,"model_type"),mst.forEach(t),t7o=r(Uw,` property of the config object (either
passed as an argument or loaded from `),ide=n(Uw,"CODE",{});var gst=s(ide);a7o=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),n7o=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(Uw,"CODE",{});var hst=s(dde);s7o=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),l7o=r(Uw,":"),Uw.forEach(t),i7o=i(ta),G=n(ta,"UL",{});var O=s(G);gu=n(O,"LI",{});var Lye=s(gu);cde=n(Lye,"STRONG",{});var pst=s(cde);d7o=r(pst,"albert"),pst.forEach(t),c7o=r(Lye," \u2014 "),Yq=n(Lye,"A",{href:!0});var _st=s(Yq);f7o=r(_st,"AlbertForPreTraining"),_st.forEach(t),m7o=r(Lye," (ALBERT model)"),Lye.forEach(t),g7o=i(O),hu=n(O,"LI",{});var yye=s(hu);fde=n(yye,"STRONG",{});var ust=s(fde);h7o=r(ust,"bart"),ust.forEach(t),p7o=r(yye," \u2014 "),Kq=n(yye,"A",{href:!0});var bst=s(Kq);_7o=r(bst,"BartForConditionalGeneration"),bst.forEach(t),u7o=r(yye," (BART model)"),yye.forEach(t),b7o=i(O),pu=n(O,"LI",{});var xye=s(pu);mde=n(xye,"STRONG",{});var vst=s(mde);v7o=r(vst,"bert"),vst.forEach(t),F7o=r(xye," \u2014 "),Zq=n(xye,"A",{href:!0});var Fst=s(Zq);T7o=r(Fst,"BertForPreTraining"),Fst.forEach(t),M7o=r(xye," (BERT model)"),xye.forEach(t),E7o=i(O),_u=n(O,"LI",{});var $ye=s(_u);gde=n($ye,"STRONG",{});var Tst=s(gde);C7o=r(Tst,"big_bird"),Tst.forEach(t),w7o=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var Mst=s(ej);A7o=r(Mst,"BigBirdForPreTraining"),Mst.forEach(t),L7o=r($ye," (BigBird model)"),$ye.forEach(t),y7o=i(O),uu=n(O,"LI",{});var kye=s(uu);hde=n(kye,"STRONG",{});var Est=s(hde);x7o=r(Est,"camembert"),Est.forEach(t),$7o=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var Cst=s(oj);k7o=r(Cst,"CamembertForMaskedLM"),Cst.forEach(t),S7o=r(kye," (CamemBERT model)"),kye.forEach(t),R7o=i(O),bu=n(O,"LI",{});var Sye=s(bu);pde=n(Sye,"STRONG",{});var wst=s(pde);P7o=r(wst,"ctrl"),wst.forEach(t),B7o=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var Ast=s(rj);I7o=r(Ast,"CTRLLMHeadModel"),Ast.forEach(t),N7o=r(Sye," (CTRL model)"),Sye.forEach(t),q7o=i(O),vu=n(O,"LI",{});var Rye=s(vu);_de=n(Rye,"STRONG",{});var Lst=s(_de);j7o=r(Lst,"data2vec-text"),Lst.forEach(t),D7o=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var yst=s(tj);G7o=r(yst,"Data2VecTextForMaskedLM"),yst.forEach(t),O7o=r(Rye," (Data2VecText model)"),Rye.forEach(t),V7o=i(O),Fu=n(O,"LI",{});var Pye=s(Fu);ude=n(Pye,"STRONG",{});var xst=s(ude);X7o=r(xst,"deberta"),xst.forEach(t),z7o=r(Pye," \u2014 "),aj=n(Pye,"A",{href:!0});var $st=s(aj);W7o=r($st,"DebertaForMaskedLM"),$st.forEach(t),Q7o=r(Pye," (DeBERTa model)"),Pye.forEach(t),H7o=i(O),Tu=n(O,"LI",{});var Bye=s(Tu);bde=n(Bye,"STRONG",{});var kst=s(bde);U7o=r(kst,"deberta-v2"),kst.forEach(t),J7o=r(Bye," \u2014 "),nj=n(Bye,"A",{href:!0});var Sst=s(nj);Y7o=r(Sst,"DebertaV2ForMaskedLM"),Sst.forEach(t),K7o=r(Bye," (DeBERTa-v2 model)"),Bye.forEach(t),Z7o=i(O),Mu=n(O,"LI",{});var Iye=s(Mu);vde=n(Iye,"STRONG",{});var Rst=s(vde);eMo=r(Rst,"distilbert"),Rst.forEach(t),oMo=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var Pst=s(sj);rMo=r(Pst,"DistilBertForMaskedLM"),Pst.forEach(t),tMo=r(Iye," (DistilBERT model)"),Iye.forEach(t),aMo=i(O),Eu=n(O,"LI",{});var Nye=s(Eu);Fde=n(Nye,"STRONG",{});var Bst=s(Fde);nMo=r(Bst,"electra"),Bst.forEach(t),sMo=r(Nye," \u2014 "),lj=n(Nye,"A",{href:!0});var Ist=s(lj);lMo=r(Ist,"ElectraForPreTraining"),Ist.forEach(t),iMo=r(Nye," (ELECTRA model)"),Nye.forEach(t),dMo=i(O),Cu=n(O,"LI",{});var qye=s(Cu);Tde=n(qye,"STRONG",{});var Nst=s(Tde);cMo=r(Nst,"flaubert"),Nst.forEach(t),fMo=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var qst=s(ij);mMo=r(qst,"FlaubertWithLMHeadModel"),qst.forEach(t),gMo=r(qye," (FlauBERT model)"),qye.forEach(t),hMo=i(O),wu=n(O,"LI",{});var jye=s(wu);Mde=n(jye,"STRONG",{});var jst=s(Mde);pMo=r(jst,"flava"),jst.forEach(t),_Mo=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var Dst=s(dj);uMo=r(Dst,"FlavaForPreTraining"),Dst.forEach(t),bMo=r(jye," (FLAVA model)"),jye.forEach(t),vMo=i(O),Au=n(O,"LI",{});var Dye=s(Au);Ede=n(Dye,"STRONG",{});var Gst=s(Ede);FMo=r(Gst,"fnet"),Gst.forEach(t),TMo=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var Ost=s(cj);MMo=r(Ost,"FNetForPreTraining"),Ost.forEach(t),EMo=r(Dye," (FNet model)"),Dye.forEach(t),CMo=i(O),Lu=n(O,"LI",{});var Gye=s(Lu);Cde=n(Gye,"STRONG",{});var Vst=s(Cde);wMo=r(Vst,"fsmt"),Vst.forEach(t),AMo=r(Gye," \u2014 "),fj=n(Gye,"A",{href:!0});var Xst=s(fj);LMo=r(Xst,"FSMTForConditionalGeneration"),Xst.forEach(t),yMo=r(Gye," (FairSeq Machine-Translation model)"),Gye.forEach(t),xMo=i(O),yu=n(O,"LI",{});var Oye=s(yu);wde=n(Oye,"STRONG",{});var zst=s(wde);$Mo=r(zst,"funnel"),zst.forEach(t),kMo=r(Oye," \u2014 "),mj=n(Oye,"A",{href:!0});var Wst=s(mj);SMo=r(Wst,"FunnelForPreTraining"),Wst.forEach(t),RMo=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),PMo=i(O),xu=n(O,"LI",{});var Vye=s(xu);Ade=n(Vye,"STRONG",{});var Qst=s(Ade);BMo=r(Qst,"gpt2"),Qst.forEach(t),IMo=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var Hst=s(gj);NMo=r(Hst,"GPT2LMHeadModel"),Hst.forEach(t),qMo=r(Vye," (OpenAI GPT-2 model)"),Vye.forEach(t),jMo=i(O),$u=n(O,"LI",{});var Xye=s($u);Lde=n(Xye,"STRONG",{});var Ust=s(Lde);DMo=r(Ust,"ibert"),Ust.forEach(t),GMo=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var Jst=s(hj);OMo=r(Jst,"IBertForMaskedLM"),Jst.forEach(t),VMo=r(Xye," (I-BERT model)"),Xye.forEach(t),XMo=i(O),ku=n(O,"LI",{});var zye=s(ku);yde=n(zye,"STRONG",{});var Yst=s(yde);zMo=r(Yst,"layoutlm"),Yst.forEach(t),WMo=r(zye," \u2014 "),pj=n(zye,"A",{href:!0});var Kst=s(pj);QMo=r(Kst,"LayoutLMForMaskedLM"),Kst.forEach(t),HMo=r(zye," (LayoutLM model)"),zye.forEach(t),UMo=i(O),Su=n(O,"LI",{});var Wye=s(Su);xde=n(Wye,"STRONG",{});var Zst=s(xde);JMo=r(Zst,"longformer"),Zst.forEach(t),YMo=r(Wye," \u2014 "),_j=n(Wye,"A",{href:!0});var elt=s(_j);KMo=r(elt,"LongformerForMaskedLM"),elt.forEach(t),ZMo=r(Wye," (Longformer model)"),Wye.forEach(t),eEo=i(O),Ru=n(O,"LI",{});var Qye=s(Ru);$de=n(Qye,"STRONG",{});var olt=s($de);oEo=r(olt,"lxmert"),olt.forEach(t),rEo=r(Qye," \u2014 "),uj=n(Qye,"A",{href:!0});var rlt=s(uj);tEo=r(rlt,"LxmertForPreTraining"),rlt.forEach(t),aEo=r(Qye," (LXMERT model)"),Qye.forEach(t),nEo=i(O),Pu=n(O,"LI",{});var Hye=s(Pu);kde=n(Hye,"STRONG",{});var tlt=s(kde);sEo=r(tlt,"megatron-bert"),tlt.forEach(t),lEo=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var alt=s(bj);iEo=r(alt,"MegatronBertForPreTraining"),alt.forEach(t),dEo=r(Hye," (Megatron-BERT model)"),Hye.forEach(t),cEo=i(O),Bu=n(O,"LI",{});var Uye=s(Bu);Sde=n(Uye,"STRONG",{});var nlt=s(Sde);fEo=r(nlt,"mobilebert"),nlt.forEach(t),mEo=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var slt=s(vj);gEo=r(slt,"MobileBertForPreTraining"),slt.forEach(t),hEo=r(Uye," (MobileBERT model)"),Uye.forEach(t),pEo=i(O),Iu=n(O,"LI",{});var Jye=s(Iu);Rde=n(Jye,"STRONG",{});var llt=s(Rde);_Eo=r(llt,"mpnet"),llt.forEach(t),uEo=r(Jye," \u2014 "),Fj=n(Jye,"A",{href:!0});var ilt=s(Fj);bEo=r(ilt,"MPNetForMaskedLM"),ilt.forEach(t),vEo=r(Jye," (MPNet model)"),Jye.forEach(t),FEo=i(O),Nu=n(O,"LI",{});var Yye=s(Nu);Pde=n(Yye,"STRONG",{});var dlt=s(Pde);TEo=r(dlt,"openai-gpt"),dlt.forEach(t),MEo=r(Yye," \u2014 "),Tj=n(Yye,"A",{href:!0});var clt=s(Tj);EEo=r(clt,"OpenAIGPTLMHeadModel"),clt.forEach(t),CEo=r(Yye," (OpenAI GPT model)"),Yye.forEach(t),wEo=i(O),qu=n(O,"LI",{});var Kye=s(qu);Bde=n(Kye,"STRONG",{});var flt=s(Bde);AEo=r(flt,"retribert"),flt.forEach(t),LEo=r(Kye," \u2014 "),Mj=n(Kye,"A",{href:!0});var mlt=s(Mj);yEo=r(mlt,"RetriBertModel"),mlt.forEach(t),xEo=r(Kye," (RetriBERT model)"),Kye.forEach(t),$Eo=i(O),ju=n(O,"LI",{});var Zye=s(ju);Ide=n(Zye,"STRONG",{});var glt=s(Ide);kEo=r(glt,"roberta"),glt.forEach(t),SEo=r(Zye," \u2014 "),Ej=n(Zye,"A",{href:!0});var hlt=s(Ej);REo=r(hlt,"RobertaForMaskedLM"),hlt.forEach(t),PEo=r(Zye," (RoBERTa model)"),Zye.forEach(t),BEo=i(O),Du=n(O,"LI",{});var e8e=s(Du);Nde=n(e8e,"STRONG",{});var plt=s(Nde);IEo=r(plt,"splinter"),plt.forEach(t),NEo=r(e8e," \u2014 "),Cj=n(e8e,"A",{href:!0});var _lt=s(Cj);qEo=r(_lt,"SplinterForPreTraining"),_lt.forEach(t),jEo=r(e8e," (Splinter model)"),e8e.forEach(t),DEo=i(O),Gu=n(O,"LI",{});var o8e=s(Gu);qde=n(o8e,"STRONG",{});var ult=s(qde);GEo=r(ult,"squeezebert"),ult.forEach(t),OEo=r(o8e," \u2014 "),wj=n(o8e,"A",{href:!0});var blt=s(wj);VEo=r(blt,"SqueezeBertForMaskedLM"),blt.forEach(t),XEo=r(o8e," (SqueezeBERT model)"),o8e.forEach(t),zEo=i(O),Ou=n(O,"LI",{});var r8e=s(Ou);jde=n(r8e,"STRONG",{});var vlt=s(jde);WEo=r(vlt,"t5"),vlt.forEach(t),QEo=r(r8e," \u2014 "),Aj=n(r8e,"A",{href:!0});var Flt=s(Aj);HEo=r(Flt,"T5ForConditionalGeneration"),Flt.forEach(t),UEo=r(r8e," (T5 model)"),r8e.forEach(t),JEo=i(O),Vu=n(O,"LI",{});var t8e=s(Vu);Dde=n(t8e,"STRONG",{});var Tlt=s(Dde);YEo=r(Tlt,"tapas"),Tlt.forEach(t),KEo=r(t8e," \u2014 "),Lj=n(t8e,"A",{href:!0});var Mlt=s(Lj);ZEo=r(Mlt,"TapasForMaskedLM"),Mlt.forEach(t),eCo=r(t8e," (TAPAS model)"),t8e.forEach(t),oCo=i(O),Xu=n(O,"LI",{});var a8e=s(Xu);Gde=n(a8e,"STRONG",{});var Elt=s(Gde);rCo=r(Elt,"transfo-xl"),Elt.forEach(t),tCo=r(a8e," \u2014 "),yj=n(a8e,"A",{href:!0});var Clt=s(yj);aCo=r(Clt,"TransfoXLLMHeadModel"),Clt.forEach(t),nCo=r(a8e," (Transformer-XL model)"),a8e.forEach(t),sCo=i(O),zu=n(O,"LI",{});var n8e=s(zu);Ode=n(n8e,"STRONG",{});var wlt=s(Ode);lCo=r(wlt,"unispeech"),wlt.forEach(t),iCo=r(n8e," \u2014 "),xj=n(n8e,"A",{href:!0});var Alt=s(xj);dCo=r(Alt,"UniSpeechForPreTraining"),Alt.forEach(t),cCo=r(n8e," (UniSpeech model)"),n8e.forEach(t),fCo=i(O),Wu=n(O,"LI",{});var s8e=s(Wu);Vde=n(s8e,"STRONG",{});var Llt=s(Vde);mCo=r(Llt,"unispeech-sat"),Llt.forEach(t),gCo=r(s8e," \u2014 "),$j=n(s8e,"A",{href:!0});var ylt=s($j);hCo=r(ylt,"UniSpeechSatForPreTraining"),ylt.forEach(t),pCo=r(s8e," (UniSpeechSat model)"),s8e.forEach(t),_Co=i(O),Qu=n(O,"LI",{});var l8e=s(Qu);Xde=n(l8e,"STRONG",{});var xlt=s(Xde);uCo=r(xlt,"visual_bert"),xlt.forEach(t),bCo=r(l8e," \u2014 "),kj=n(l8e,"A",{href:!0});var $lt=s(kj);vCo=r($lt,"VisualBertForPreTraining"),$lt.forEach(t),FCo=r(l8e," (VisualBERT model)"),l8e.forEach(t),TCo=i(O),Hu=n(O,"LI",{});var i8e=s(Hu);zde=n(i8e,"STRONG",{});var klt=s(zde);MCo=r(klt,"vit_mae"),klt.forEach(t),ECo=r(i8e," \u2014 "),Sj=n(i8e,"A",{href:!0});var Slt=s(Sj);CCo=r(Slt,"ViTMAEForPreTraining"),Slt.forEach(t),wCo=r(i8e," (ViTMAE model)"),i8e.forEach(t),ACo=i(O),Uu=n(O,"LI",{});var d8e=s(Uu);Wde=n(d8e,"STRONG",{});var Rlt=s(Wde);LCo=r(Rlt,"wav2vec2"),Rlt.forEach(t),yCo=r(d8e," \u2014 "),Rj=n(d8e,"A",{href:!0});var Plt=s(Rj);xCo=r(Plt,"Wav2Vec2ForPreTraining"),Plt.forEach(t),$Co=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),kCo=i(O),Ju=n(O,"LI",{});var c8e=s(Ju);Qde=n(c8e,"STRONG",{});var Blt=s(Qde);SCo=r(Blt,"wav2vec2-conformer"),Blt.forEach(t),RCo=r(c8e," \u2014 "),Pj=n(c8e,"A",{href:!0});var Ilt=s(Pj);PCo=r(Ilt,"Wav2Vec2ConformerForPreTraining"),Ilt.forEach(t),BCo=r(c8e," (Wav2Vec2-Conformer model)"),c8e.forEach(t),ICo=i(O),Yu=n(O,"LI",{});var f8e=s(Yu);Hde=n(f8e,"STRONG",{});var Nlt=s(Hde);NCo=r(Nlt,"xlm"),Nlt.forEach(t),qCo=r(f8e," \u2014 "),Bj=n(f8e,"A",{href:!0});var qlt=s(Bj);jCo=r(qlt,"XLMWithLMHeadModel"),qlt.forEach(t),DCo=r(f8e," (XLM model)"),f8e.forEach(t),GCo=i(O),Ku=n(O,"LI",{});var m8e=s(Ku);Ude=n(m8e,"STRONG",{});var jlt=s(Ude);OCo=r(jlt,"xlm-roberta"),jlt.forEach(t),VCo=r(m8e," \u2014 "),Ij=n(m8e,"A",{href:!0});var Dlt=s(Ij);XCo=r(Dlt,"XLMRobertaForMaskedLM"),Dlt.forEach(t),zCo=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),WCo=i(O),Zu=n(O,"LI",{});var g8e=s(Zu);Jde=n(g8e,"STRONG",{});var Glt=s(Jde);QCo=r(Glt,"xlm-roberta-xl"),Glt.forEach(t),HCo=r(g8e," \u2014 "),Nj=n(g8e,"A",{href:!0});var Olt=s(Nj);UCo=r(Olt,"XLMRobertaXLForMaskedLM"),Olt.forEach(t),JCo=r(g8e," (XLM-RoBERTa-XL model)"),g8e.forEach(t),YCo=i(O),e1=n(O,"LI",{});var h8e=s(e1);Yde=n(h8e,"STRONG",{});var Vlt=s(Yde);KCo=r(Vlt,"xlnet"),Vlt.forEach(t),ZCo=r(h8e," \u2014 "),qj=n(h8e,"A",{href:!0});var Xlt=s(qj);e0o=r(Xlt,"XLNetLMHeadModel"),Xlt.forEach(t),o0o=r(h8e," (XLNet model)"),h8e.forEach(t),O.forEach(t),r0o=i(ta),o1=n(ta,"P",{});var p8e=s(o1);t0o=r(p8e,"The model is set in evaluation mode by default using "),Kde=n(p8e,"CODE",{});var zlt=s(Kde);a0o=r(zlt,"model.eval()"),zlt.forEach(t),n0o=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(p8e,"CODE",{});var Wlt=s(Zde);s0o=r(Wlt,"model.train()"),Wlt.forEach(t),p8e.forEach(t),l0o=i(ta),T(r1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),bje=i(f),Ri=n(f,"H2",{class:!0});var MGe=s(Ri);t1=n(MGe,"A",{id:!0,class:!0,href:!0});var Qlt=s(t1);ece=n(Qlt,"SPAN",{});var Hlt=s(ece);T(EL.$$.fragment,Hlt),Hlt.forEach(t),Qlt.forEach(t),i0o=i(MGe),oce=n(MGe,"SPAN",{});var Ult=s(oce);d0o=r(Ult,"AutoModelForCausalLM"),Ult.forEach(t),MGe.forEach(t),vje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(CL.$$.fragment,Xs),c0o=i(Xs),Pi=n(Xs,"P",{});var UZ=s(Pi);f0o=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jj=n(UZ,"A",{href:!0});var Jlt=s(jj);m0o=r(Jlt,"from_pretrained()"),Jlt.forEach(t),g0o=r(UZ," class method or the "),Dj=n(UZ,"A",{href:!0});var Ylt=s(Dj);h0o=r(Ylt,"from_config()"),Ylt.forEach(t),p0o=r(UZ,` class
method.`),UZ.forEach(t),_0o=i(Xs),wL=n(Xs,"P",{});var EGe=s(wL);u0o=r(EGe,"This class cannot be instantiated directly using "),rce=n(EGe,"CODE",{});var Klt=s(rce);b0o=r(Klt,"__init__()"),Klt.forEach(t),v0o=r(EGe," (throws an error)."),EGe.forEach(t),F0o=i(Xs),st=n(Xs,"DIV",{class:!0});var Jw=s(st);T(AL.$$.fragment,Jw),T0o=i(Jw),tce=n(Jw,"P",{});var Zlt=s(tce);M0o=r(Zlt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zlt.forEach(t),E0o=i(Jw),Bi=n(Jw,"P",{});var JZ=s(Bi);C0o=r(JZ,`Note:
Loading a model from its configuration file does `),ace=n(JZ,"STRONG",{});var eit=s(ace);w0o=r(eit,"not"),eit.forEach(t),A0o=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=n(JZ,"A",{href:!0});var oit=s(Gj);L0o=r(oit,"from_pretrained()"),oit.forEach(t),y0o=r(JZ," to load the model weights."),JZ.forEach(t),x0o=i(Jw),T(a1.$$.fragment,Jw),Jw.forEach(t),$0o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var aa=s(Ke);T(LL.$$.fragment,aa),k0o=i(aa),nce=n(aa,"P",{});var rit=s(nce);S0o=r(rit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rit.forEach(t),R0o=i(aa),ka=n(aa,"P",{});var Yw=s(ka);P0o=r(Yw,"The model class to instantiate is selected based on the "),sce=n(Yw,"CODE",{});var tit=s(sce);B0o=r(tit,"model_type"),tit.forEach(t),I0o=r(Yw,` property of the config object (either
passed as an argument or loaded from `),lce=n(Yw,"CODE",{});var ait=s(lce);N0o=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),q0o=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(Yw,"CODE",{});var nit=s(ice);j0o=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),D0o=r(Yw,":"),Yw.forEach(t),G0o=i(aa),z=n(aa,"UL",{});var Q=s(z);n1=n(Q,"LI",{});var _8e=s(n1);dce=n(_8e,"STRONG",{});var sit=s(dce);O0o=r(sit,"bart"),sit.forEach(t),V0o=r(_8e," \u2014 "),Oj=n(_8e,"A",{href:!0});var lit=s(Oj);X0o=r(lit,"BartForCausalLM"),lit.forEach(t),z0o=r(_8e," (BART model)"),_8e.forEach(t),W0o=i(Q),s1=n(Q,"LI",{});var u8e=s(s1);cce=n(u8e,"STRONG",{});var iit=s(cce);Q0o=r(iit,"bert"),iit.forEach(t),H0o=r(u8e," \u2014 "),Vj=n(u8e,"A",{href:!0});var dit=s(Vj);U0o=r(dit,"BertLMHeadModel"),dit.forEach(t),J0o=r(u8e," (BERT model)"),u8e.forEach(t),Y0o=i(Q),l1=n(Q,"LI",{});var b8e=s(l1);fce=n(b8e,"STRONG",{});var cit=s(fce);K0o=r(cit,"bert-generation"),cit.forEach(t),Z0o=r(b8e," \u2014 "),Xj=n(b8e,"A",{href:!0});var fit=s(Xj);ewo=r(fit,"BertGenerationDecoder"),fit.forEach(t),owo=r(b8e," (Bert Generation model)"),b8e.forEach(t),rwo=i(Q),i1=n(Q,"LI",{});var v8e=s(i1);mce=n(v8e,"STRONG",{});var mit=s(mce);two=r(mit,"big_bird"),mit.forEach(t),awo=r(v8e," \u2014 "),zj=n(v8e,"A",{href:!0});var git=s(zj);nwo=r(git,"BigBirdForCausalLM"),git.forEach(t),swo=r(v8e," (BigBird model)"),v8e.forEach(t),lwo=i(Q),d1=n(Q,"LI",{});var F8e=s(d1);gce=n(F8e,"STRONG",{});var hit=s(gce);iwo=r(hit,"bigbird_pegasus"),hit.forEach(t),dwo=r(F8e," \u2014 "),Wj=n(F8e,"A",{href:!0});var pit=s(Wj);cwo=r(pit,"BigBirdPegasusForCausalLM"),pit.forEach(t),fwo=r(F8e," (BigBird-Pegasus model)"),F8e.forEach(t),mwo=i(Q),c1=n(Q,"LI",{});var T8e=s(c1);hce=n(T8e,"STRONG",{});var _it=s(hce);gwo=r(_it,"blenderbot"),_it.forEach(t),hwo=r(T8e," \u2014 "),Qj=n(T8e,"A",{href:!0});var uit=s(Qj);pwo=r(uit,"BlenderbotForCausalLM"),uit.forEach(t),_wo=r(T8e," (Blenderbot model)"),T8e.forEach(t),uwo=i(Q),f1=n(Q,"LI",{});var M8e=s(f1);pce=n(M8e,"STRONG",{});var bit=s(pce);bwo=r(bit,"blenderbot-small"),bit.forEach(t),vwo=r(M8e," \u2014 "),Hj=n(M8e,"A",{href:!0});var vit=s(Hj);Fwo=r(vit,"BlenderbotSmallForCausalLM"),vit.forEach(t),Two=r(M8e," (BlenderbotSmall model)"),M8e.forEach(t),Mwo=i(Q),m1=n(Q,"LI",{});var E8e=s(m1);_ce=n(E8e,"STRONG",{});var Fit=s(_ce);Ewo=r(Fit,"camembert"),Fit.forEach(t),Cwo=r(E8e," \u2014 "),Uj=n(E8e,"A",{href:!0});var Tit=s(Uj);wwo=r(Tit,"CamembertForCausalLM"),Tit.forEach(t),Awo=r(E8e," (CamemBERT model)"),E8e.forEach(t),Lwo=i(Q),g1=n(Q,"LI",{});var C8e=s(g1);uce=n(C8e,"STRONG",{});var Mit=s(uce);ywo=r(Mit,"ctrl"),Mit.forEach(t),xwo=r(C8e," \u2014 "),Jj=n(C8e,"A",{href:!0});var Eit=s(Jj);$wo=r(Eit,"CTRLLMHeadModel"),Eit.forEach(t),kwo=r(C8e," (CTRL model)"),C8e.forEach(t),Swo=i(Q),h1=n(Q,"LI",{});var w8e=s(h1);bce=n(w8e,"STRONG",{});var Cit=s(bce);Rwo=r(Cit,"data2vec-text"),Cit.forEach(t),Pwo=r(w8e," \u2014 "),Yj=n(w8e,"A",{href:!0});var wit=s(Yj);Bwo=r(wit,"Data2VecTextForCausalLM"),wit.forEach(t),Iwo=r(w8e," (Data2VecText model)"),w8e.forEach(t),Nwo=i(Q),p1=n(Q,"LI",{});var A8e=s(p1);vce=n(A8e,"STRONG",{});var Ait=s(vce);qwo=r(Ait,"electra"),Ait.forEach(t),jwo=r(A8e," \u2014 "),Kj=n(A8e,"A",{href:!0});var Lit=s(Kj);Dwo=r(Lit,"ElectraForCausalLM"),Lit.forEach(t),Gwo=r(A8e," (ELECTRA model)"),A8e.forEach(t),Owo=i(Q),_1=n(Q,"LI",{});var L8e=s(_1);Fce=n(L8e,"STRONG",{});var yit=s(Fce);Vwo=r(yit,"gpt2"),yit.forEach(t),Xwo=r(L8e," \u2014 "),Zj=n(L8e,"A",{href:!0});var xit=s(Zj);zwo=r(xit,"GPT2LMHeadModel"),xit.forEach(t),Wwo=r(L8e," (OpenAI GPT-2 model)"),L8e.forEach(t),Qwo=i(Q),u1=n(Q,"LI",{});var y8e=s(u1);Tce=n(y8e,"STRONG",{});var $it=s(Tce);Hwo=r($it,"gpt_neo"),$it.forEach(t),Uwo=r(y8e," \u2014 "),eD=n(y8e,"A",{href:!0});var kit=s(eD);Jwo=r(kit,"GPTNeoForCausalLM"),kit.forEach(t),Ywo=r(y8e," (GPT Neo model)"),y8e.forEach(t),Kwo=i(Q),b1=n(Q,"LI",{});var x8e=s(b1);Mce=n(x8e,"STRONG",{});var Sit=s(Mce);Zwo=r(Sit,"gpt_neox"),Sit.forEach(t),eAo=r(x8e," \u2014 "),oD=n(x8e,"A",{href:!0});var Rit=s(oD);oAo=r(Rit,"GPTNeoXForCausalLM"),Rit.forEach(t),rAo=r(x8e," (GPT NeoX model)"),x8e.forEach(t),tAo=i(Q),v1=n(Q,"LI",{});var $8e=s(v1);Ece=n($8e,"STRONG",{});var Pit=s(Ece);aAo=r(Pit,"gptj"),Pit.forEach(t),nAo=r($8e," \u2014 "),rD=n($8e,"A",{href:!0});var Bit=s(rD);sAo=r(Bit,"GPTJForCausalLM"),Bit.forEach(t),lAo=r($8e," (GPT-J model)"),$8e.forEach(t),iAo=i(Q),F1=n(Q,"LI",{});var k8e=s(F1);Cce=n(k8e,"STRONG",{});var Iit=s(Cce);dAo=r(Iit,"marian"),Iit.forEach(t),cAo=r(k8e," \u2014 "),tD=n(k8e,"A",{href:!0});var Nit=s(tD);fAo=r(Nit,"MarianForCausalLM"),Nit.forEach(t),mAo=r(k8e," (Marian model)"),k8e.forEach(t),gAo=i(Q),T1=n(Q,"LI",{});var S8e=s(T1);wce=n(S8e,"STRONG",{});var qit=s(wce);hAo=r(qit,"mbart"),qit.forEach(t),pAo=r(S8e," \u2014 "),aD=n(S8e,"A",{href:!0});var jit=s(aD);_Ao=r(jit,"MBartForCausalLM"),jit.forEach(t),uAo=r(S8e," (mBART model)"),S8e.forEach(t),bAo=i(Q),M1=n(Q,"LI",{});var R8e=s(M1);Ace=n(R8e,"STRONG",{});var Dit=s(Ace);vAo=r(Dit,"megatron-bert"),Dit.forEach(t),FAo=r(R8e," \u2014 "),nD=n(R8e,"A",{href:!0});var Git=s(nD);TAo=r(Git,"MegatronBertForCausalLM"),Git.forEach(t),MAo=r(R8e," (Megatron-BERT model)"),R8e.forEach(t),EAo=i(Q),E1=n(Q,"LI",{});var P8e=s(E1);Lce=n(P8e,"STRONG",{});var Oit=s(Lce);CAo=r(Oit,"openai-gpt"),Oit.forEach(t),wAo=r(P8e," \u2014 "),sD=n(P8e,"A",{href:!0});var Vit=s(sD);AAo=r(Vit,"OpenAIGPTLMHeadModel"),Vit.forEach(t),LAo=r(P8e," (OpenAI GPT model)"),P8e.forEach(t),yAo=i(Q),C1=n(Q,"LI",{});var B8e=s(C1);yce=n(B8e,"STRONG",{});var Xit=s(yce);xAo=r(Xit,"opt"),Xit.forEach(t),$Ao=r(B8e," \u2014 "),lD=n(B8e,"A",{href:!0});var zit=s(lD);kAo=r(zit,"OPTForCausalLM"),zit.forEach(t),SAo=r(B8e," (OPT model)"),B8e.forEach(t),RAo=i(Q),w1=n(Q,"LI",{});var I8e=s(w1);xce=n(I8e,"STRONG",{});var Wit=s(xce);PAo=r(Wit,"pegasus"),Wit.forEach(t),BAo=r(I8e," \u2014 "),iD=n(I8e,"A",{href:!0});var Qit=s(iD);IAo=r(Qit,"PegasusForCausalLM"),Qit.forEach(t),NAo=r(I8e," (Pegasus model)"),I8e.forEach(t),qAo=i(Q),A1=n(Q,"LI",{});var N8e=s(A1);$ce=n(N8e,"STRONG",{});var Hit=s($ce);jAo=r(Hit,"plbart"),Hit.forEach(t),DAo=r(N8e," \u2014 "),dD=n(N8e,"A",{href:!0});var Uit=s(dD);GAo=r(Uit,"PLBartForCausalLM"),Uit.forEach(t),OAo=r(N8e," (PLBart model)"),N8e.forEach(t),VAo=i(Q),L1=n(Q,"LI",{});var q8e=s(L1);kce=n(q8e,"STRONG",{});var Jit=s(kce);XAo=r(Jit,"prophetnet"),Jit.forEach(t),zAo=r(q8e," \u2014 "),cD=n(q8e,"A",{href:!0});var Yit=s(cD);WAo=r(Yit,"ProphetNetForCausalLM"),Yit.forEach(t),QAo=r(q8e," (ProphetNet model)"),q8e.forEach(t),HAo=i(Q),y1=n(Q,"LI",{});var j8e=s(y1);Sce=n(j8e,"STRONG",{});var Kit=s(Sce);UAo=r(Kit,"qdqbert"),Kit.forEach(t),JAo=r(j8e," \u2014 "),fD=n(j8e,"A",{href:!0});var Zit=s(fD);YAo=r(Zit,"QDQBertLMHeadModel"),Zit.forEach(t),KAo=r(j8e," (QDQBert model)"),j8e.forEach(t),ZAo=i(Q),x1=n(Q,"LI",{});var D8e=s(x1);Rce=n(D8e,"STRONG",{});var edt=s(Rce);e6o=r(edt,"reformer"),edt.forEach(t),o6o=r(D8e," \u2014 "),mD=n(D8e,"A",{href:!0});var odt=s(mD);r6o=r(odt,"ReformerModelWithLMHead"),odt.forEach(t),t6o=r(D8e," (Reformer model)"),D8e.forEach(t),a6o=i(Q),$1=n(Q,"LI",{});var G8e=s($1);Pce=n(G8e,"STRONG",{});var rdt=s(Pce);n6o=r(rdt,"rembert"),rdt.forEach(t),s6o=r(G8e," \u2014 "),gD=n(G8e,"A",{href:!0});var tdt=s(gD);l6o=r(tdt,"RemBertForCausalLM"),tdt.forEach(t),i6o=r(G8e," (RemBERT model)"),G8e.forEach(t),d6o=i(Q),k1=n(Q,"LI",{});var O8e=s(k1);Bce=n(O8e,"STRONG",{});var adt=s(Bce);c6o=r(adt,"roberta"),adt.forEach(t),f6o=r(O8e," \u2014 "),hD=n(O8e,"A",{href:!0});var ndt=s(hD);m6o=r(ndt,"RobertaForCausalLM"),ndt.forEach(t),g6o=r(O8e," (RoBERTa model)"),O8e.forEach(t),h6o=i(Q),S1=n(Q,"LI",{});var V8e=s(S1);Ice=n(V8e,"STRONG",{});var sdt=s(Ice);p6o=r(sdt,"roformer"),sdt.forEach(t),_6o=r(V8e," \u2014 "),pD=n(V8e,"A",{href:!0});var ldt=s(pD);u6o=r(ldt,"RoFormerForCausalLM"),ldt.forEach(t),b6o=r(V8e," (RoFormer model)"),V8e.forEach(t),v6o=i(Q),R1=n(Q,"LI",{});var X8e=s(R1);Nce=n(X8e,"STRONG",{});var idt=s(Nce);F6o=r(idt,"speech_to_text_2"),idt.forEach(t),T6o=r(X8e," \u2014 "),_D=n(X8e,"A",{href:!0});var ddt=s(_D);M6o=r(ddt,"Speech2Text2ForCausalLM"),ddt.forEach(t),E6o=r(X8e," (Speech2Text2 model)"),X8e.forEach(t),C6o=i(Q),P1=n(Q,"LI",{});var z8e=s(P1);qce=n(z8e,"STRONG",{});var cdt=s(qce);w6o=r(cdt,"transfo-xl"),cdt.forEach(t),A6o=r(z8e," \u2014 "),uD=n(z8e,"A",{href:!0});var fdt=s(uD);L6o=r(fdt,"TransfoXLLMHeadModel"),fdt.forEach(t),y6o=r(z8e," (Transformer-XL model)"),z8e.forEach(t),x6o=i(Q),B1=n(Q,"LI",{});var W8e=s(B1);jce=n(W8e,"STRONG",{});var mdt=s(jce);$6o=r(mdt,"trocr"),mdt.forEach(t),k6o=r(W8e," \u2014 "),bD=n(W8e,"A",{href:!0});var gdt=s(bD);S6o=r(gdt,"TrOCRForCausalLM"),gdt.forEach(t),R6o=r(W8e," (TrOCR model)"),W8e.forEach(t),P6o=i(Q),I1=n(Q,"LI",{});var Q8e=s(I1);Dce=n(Q8e,"STRONG",{});var hdt=s(Dce);B6o=r(hdt,"xglm"),hdt.forEach(t),I6o=r(Q8e," \u2014 "),vD=n(Q8e,"A",{href:!0});var pdt=s(vD);N6o=r(pdt,"XGLMForCausalLM"),pdt.forEach(t),q6o=r(Q8e," (XGLM model)"),Q8e.forEach(t),j6o=i(Q),N1=n(Q,"LI",{});var H8e=s(N1);Gce=n(H8e,"STRONG",{});var _dt=s(Gce);D6o=r(_dt,"xlm"),_dt.forEach(t),G6o=r(H8e," \u2014 "),FD=n(H8e,"A",{href:!0});var udt=s(FD);O6o=r(udt,"XLMWithLMHeadModel"),udt.forEach(t),V6o=r(H8e," (XLM model)"),H8e.forEach(t),X6o=i(Q),q1=n(Q,"LI",{});var U8e=s(q1);Oce=n(U8e,"STRONG",{});var bdt=s(Oce);z6o=r(bdt,"xlm-prophetnet"),bdt.forEach(t),W6o=r(U8e," \u2014 "),TD=n(U8e,"A",{href:!0});var vdt=s(TD);Q6o=r(vdt,"XLMProphetNetForCausalLM"),vdt.forEach(t),H6o=r(U8e," (XLM-ProphetNet model)"),U8e.forEach(t),U6o=i(Q),j1=n(Q,"LI",{});var J8e=s(j1);Vce=n(J8e,"STRONG",{});var Fdt=s(Vce);J6o=r(Fdt,"xlm-roberta"),Fdt.forEach(t),Y6o=r(J8e," \u2014 "),MD=n(J8e,"A",{href:!0});var Tdt=s(MD);K6o=r(Tdt,"XLMRobertaForCausalLM"),Tdt.forEach(t),Z6o=r(J8e," (XLM-RoBERTa model)"),J8e.forEach(t),eLo=i(Q),D1=n(Q,"LI",{});var Y8e=s(D1);Xce=n(Y8e,"STRONG",{});var Mdt=s(Xce);oLo=r(Mdt,"xlm-roberta-xl"),Mdt.forEach(t),rLo=r(Y8e," \u2014 "),ED=n(Y8e,"A",{href:!0});var Edt=s(ED);tLo=r(Edt,"XLMRobertaXLForCausalLM"),Edt.forEach(t),aLo=r(Y8e," (XLM-RoBERTa-XL model)"),Y8e.forEach(t),nLo=i(Q),G1=n(Q,"LI",{});var K8e=s(G1);zce=n(K8e,"STRONG",{});var Cdt=s(zce);sLo=r(Cdt,"xlnet"),Cdt.forEach(t),lLo=r(K8e," \u2014 "),CD=n(K8e,"A",{href:!0});var wdt=s(CD);iLo=r(wdt,"XLNetLMHeadModel"),wdt.forEach(t),dLo=r(K8e," (XLNet model)"),K8e.forEach(t),Q.forEach(t),cLo=i(aa),O1=n(aa,"P",{});var Z8e=s(O1);fLo=r(Z8e,"The model is set in evaluation mode by default using "),Wce=n(Z8e,"CODE",{});var Adt=s(Wce);mLo=r(Adt,"model.eval()"),Adt.forEach(t),gLo=r(Z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Z8e,"CODE",{});var Ldt=s(Qce);hLo=r(Ldt,"model.train()"),Ldt.forEach(t),Z8e.forEach(t),pLo=i(aa),T(V1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Fje=i(f),Ii=n(f,"H2",{class:!0});var CGe=s(Ii);X1=n(CGe,"A",{id:!0,class:!0,href:!0});var ydt=s(X1);Hce=n(ydt,"SPAN",{});var xdt=s(Hce);T(yL.$$.fragment,xdt),xdt.forEach(t),ydt.forEach(t),_Lo=i(CGe),Uce=n(CGe,"SPAN",{});var $dt=s(Uce);uLo=r($dt,"AutoModelForMaskedLM"),$dt.forEach(t),CGe.forEach(t),Tje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(xL.$$.fragment,zs),bLo=i(zs),Ni=n(zs,"P",{});var YZ=s(Ni);vLo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wD=n(YZ,"A",{href:!0});var kdt=s(wD);FLo=r(kdt,"from_pretrained()"),kdt.forEach(t),TLo=r(YZ," class method or the "),AD=n(YZ,"A",{href:!0});var Sdt=s(AD);MLo=r(Sdt,"from_config()"),Sdt.forEach(t),ELo=r(YZ,` class
method.`),YZ.forEach(t),CLo=i(zs),$L=n(zs,"P",{});var wGe=s($L);wLo=r(wGe,"This class cannot be instantiated directly using "),Jce=n(wGe,"CODE",{});var Rdt=s(Jce);ALo=r(Rdt,"__init__()"),Rdt.forEach(t),LLo=r(wGe," (throws an error)."),wGe.forEach(t),yLo=i(zs),lt=n(zs,"DIV",{class:!0});var Kw=s(lt);T(kL.$$.fragment,Kw),xLo=i(Kw),Yce=n(Kw,"P",{});var Pdt=s(Yce);$Lo=r(Pdt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pdt.forEach(t),kLo=i(Kw),qi=n(Kw,"P",{});var KZ=s(qi);SLo=r(KZ,`Note:
Loading a model from its configuration file does `),Kce=n(KZ,"STRONG",{});var Bdt=s(Kce);RLo=r(Bdt,"not"),Bdt.forEach(t),PLo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=n(KZ,"A",{href:!0});var Idt=s(LD);BLo=r(Idt,"from_pretrained()"),Idt.forEach(t),ILo=r(KZ," to load the model weights."),KZ.forEach(t),NLo=i(Kw),T(z1.$$.fragment,Kw),Kw.forEach(t),qLo=i(zs),Ze=n(zs,"DIV",{class:!0});var na=s(Ze);T(SL.$$.fragment,na),jLo=i(na),Zce=n(na,"P",{});var Ndt=s(Zce);DLo=r(Ndt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ndt.forEach(t),GLo=i(na),Sa=n(na,"P",{});var Zw=s(Sa);OLo=r(Zw,"The model class to instantiate is selected based on the "),efe=n(Zw,"CODE",{});var qdt=s(efe);VLo=r(qdt,"model_type"),qdt.forEach(t),XLo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),ofe=n(Zw,"CODE",{});var jdt=s(ofe);zLo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),WLo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(Zw,"CODE",{});var Ddt=s(rfe);QLo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),HLo=r(Zw,":"),Zw.forEach(t),ULo=i(na),W=n(na,"UL",{});var H=s(W);W1=n(H,"LI",{});var e9e=s(W1);tfe=n(e9e,"STRONG",{});var Gdt=s(tfe);JLo=r(Gdt,"albert"),Gdt.forEach(t),YLo=r(e9e," \u2014 "),yD=n(e9e,"A",{href:!0});var Odt=s(yD);KLo=r(Odt,"AlbertForMaskedLM"),Odt.forEach(t),ZLo=r(e9e," (ALBERT model)"),e9e.forEach(t),eyo=i(H),Q1=n(H,"LI",{});var o9e=s(Q1);afe=n(o9e,"STRONG",{});var Vdt=s(afe);oyo=r(Vdt,"bart"),Vdt.forEach(t),ryo=r(o9e," \u2014 "),xD=n(o9e,"A",{href:!0});var Xdt=s(xD);tyo=r(Xdt,"BartForConditionalGeneration"),Xdt.forEach(t),ayo=r(o9e," (BART model)"),o9e.forEach(t),nyo=i(H),H1=n(H,"LI",{});var r9e=s(H1);nfe=n(r9e,"STRONG",{});var zdt=s(nfe);syo=r(zdt,"bert"),zdt.forEach(t),lyo=r(r9e," \u2014 "),$D=n(r9e,"A",{href:!0});var Wdt=s($D);iyo=r(Wdt,"BertForMaskedLM"),Wdt.forEach(t),dyo=r(r9e," (BERT model)"),r9e.forEach(t),cyo=i(H),U1=n(H,"LI",{});var t9e=s(U1);sfe=n(t9e,"STRONG",{});var Qdt=s(sfe);fyo=r(Qdt,"big_bird"),Qdt.forEach(t),myo=r(t9e," \u2014 "),kD=n(t9e,"A",{href:!0});var Hdt=s(kD);gyo=r(Hdt,"BigBirdForMaskedLM"),Hdt.forEach(t),hyo=r(t9e," (BigBird model)"),t9e.forEach(t),pyo=i(H),J1=n(H,"LI",{});var a9e=s(J1);lfe=n(a9e,"STRONG",{});var Udt=s(lfe);_yo=r(Udt,"camembert"),Udt.forEach(t),uyo=r(a9e," \u2014 "),SD=n(a9e,"A",{href:!0});var Jdt=s(SD);byo=r(Jdt,"CamembertForMaskedLM"),Jdt.forEach(t),vyo=r(a9e," (CamemBERT model)"),a9e.forEach(t),Fyo=i(H),Y1=n(H,"LI",{});var n9e=s(Y1);ife=n(n9e,"STRONG",{});var Ydt=s(ife);Tyo=r(Ydt,"convbert"),Ydt.forEach(t),Myo=r(n9e," \u2014 "),RD=n(n9e,"A",{href:!0});var Kdt=s(RD);Eyo=r(Kdt,"ConvBertForMaskedLM"),Kdt.forEach(t),Cyo=r(n9e," (ConvBERT model)"),n9e.forEach(t),wyo=i(H),K1=n(H,"LI",{});var s9e=s(K1);dfe=n(s9e,"STRONG",{});var Zdt=s(dfe);Ayo=r(Zdt,"data2vec-text"),Zdt.forEach(t),Lyo=r(s9e," \u2014 "),PD=n(s9e,"A",{href:!0});var ect=s(PD);yyo=r(ect,"Data2VecTextForMaskedLM"),ect.forEach(t),xyo=r(s9e," (Data2VecText model)"),s9e.forEach(t),$yo=i(H),Z1=n(H,"LI",{});var l9e=s(Z1);cfe=n(l9e,"STRONG",{});var oct=s(cfe);kyo=r(oct,"deberta"),oct.forEach(t),Syo=r(l9e," \u2014 "),BD=n(l9e,"A",{href:!0});var rct=s(BD);Ryo=r(rct,"DebertaForMaskedLM"),rct.forEach(t),Pyo=r(l9e," (DeBERTa model)"),l9e.forEach(t),Byo=i(H),eb=n(H,"LI",{});var i9e=s(eb);ffe=n(i9e,"STRONG",{});var tct=s(ffe);Iyo=r(tct,"deberta-v2"),tct.forEach(t),Nyo=r(i9e," \u2014 "),ID=n(i9e,"A",{href:!0});var act=s(ID);qyo=r(act,"DebertaV2ForMaskedLM"),act.forEach(t),jyo=r(i9e," (DeBERTa-v2 model)"),i9e.forEach(t),Dyo=i(H),ob=n(H,"LI",{});var d9e=s(ob);mfe=n(d9e,"STRONG",{});var nct=s(mfe);Gyo=r(nct,"distilbert"),nct.forEach(t),Oyo=r(d9e," \u2014 "),ND=n(d9e,"A",{href:!0});var sct=s(ND);Vyo=r(sct,"DistilBertForMaskedLM"),sct.forEach(t),Xyo=r(d9e," (DistilBERT model)"),d9e.forEach(t),zyo=i(H),rb=n(H,"LI",{});var c9e=s(rb);gfe=n(c9e,"STRONG",{});var lct=s(gfe);Wyo=r(lct,"electra"),lct.forEach(t),Qyo=r(c9e," \u2014 "),qD=n(c9e,"A",{href:!0});var ict=s(qD);Hyo=r(ict,"ElectraForMaskedLM"),ict.forEach(t),Uyo=r(c9e," (ELECTRA model)"),c9e.forEach(t),Jyo=i(H),tb=n(H,"LI",{});var f9e=s(tb);hfe=n(f9e,"STRONG",{});var dct=s(hfe);Yyo=r(dct,"flaubert"),dct.forEach(t),Kyo=r(f9e," \u2014 "),jD=n(f9e,"A",{href:!0});var cct=s(jD);Zyo=r(cct,"FlaubertWithLMHeadModel"),cct.forEach(t),e8o=r(f9e," (FlauBERT model)"),f9e.forEach(t),o8o=i(H),ab=n(H,"LI",{});var m9e=s(ab);pfe=n(m9e,"STRONG",{});var fct=s(pfe);r8o=r(fct,"fnet"),fct.forEach(t),t8o=r(m9e," \u2014 "),DD=n(m9e,"A",{href:!0});var mct=s(DD);a8o=r(mct,"FNetForMaskedLM"),mct.forEach(t),n8o=r(m9e," (FNet model)"),m9e.forEach(t),s8o=i(H),nb=n(H,"LI",{});var g9e=s(nb);_fe=n(g9e,"STRONG",{});var gct=s(_fe);l8o=r(gct,"funnel"),gct.forEach(t),i8o=r(g9e," \u2014 "),GD=n(g9e,"A",{href:!0});var hct=s(GD);d8o=r(hct,"FunnelForMaskedLM"),hct.forEach(t),c8o=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),f8o=i(H),sb=n(H,"LI",{});var h9e=s(sb);ufe=n(h9e,"STRONG",{});var pct=s(ufe);m8o=r(pct,"ibert"),pct.forEach(t),g8o=r(h9e," \u2014 "),OD=n(h9e,"A",{href:!0});var _ct=s(OD);h8o=r(_ct,"IBertForMaskedLM"),_ct.forEach(t),p8o=r(h9e," (I-BERT model)"),h9e.forEach(t),_8o=i(H),lb=n(H,"LI",{});var p9e=s(lb);bfe=n(p9e,"STRONG",{});var uct=s(bfe);u8o=r(uct,"layoutlm"),uct.forEach(t),b8o=r(p9e," \u2014 "),VD=n(p9e,"A",{href:!0});var bct=s(VD);v8o=r(bct,"LayoutLMForMaskedLM"),bct.forEach(t),F8o=r(p9e," (LayoutLM model)"),p9e.forEach(t),T8o=i(H),ib=n(H,"LI",{});var _9e=s(ib);vfe=n(_9e,"STRONG",{});var vct=s(vfe);M8o=r(vct,"longformer"),vct.forEach(t),E8o=r(_9e," \u2014 "),XD=n(_9e,"A",{href:!0});var Fct=s(XD);C8o=r(Fct,"LongformerForMaskedLM"),Fct.forEach(t),w8o=r(_9e," (Longformer model)"),_9e.forEach(t),A8o=i(H),db=n(H,"LI",{});var u9e=s(db);Ffe=n(u9e,"STRONG",{});var Tct=s(Ffe);L8o=r(Tct,"luke"),Tct.forEach(t),y8o=r(u9e," \u2014 "),zD=n(u9e,"A",{href:!0});var Mct=s(zD);x8o=r(Mct,"LukeForMaskedLM"),Mct.forEach(t),$8o=r(u9e," (LUKE model)"),u9e.forEach(t),k8o=i(H),cb=n(H,"LI",{});var b9e=s(cb);Tfe=n(b9e,"STRONG",{});var Ect=s(Tfe);S8o=r(Ect,"mbart"),Ect.forEach(t),R8o=r(b9e," \u2014 "),WD=n(b9e,"A",{href:!0});var Cct=s(WD);P8o=r(Cct,"MBartForConditionalGeneration"),Cct.forEach(t),B8o=r(b9e," (mBART model)"),b9e.forEach(t),I8o=i(H),fb=n(H,"LI",{});var v9e=s(fb);Mfe=n(v9e,"STRONG",{});var wct=s(Mfe);N8o=r(wct,"megatron-bert"),wct.forEach(t),q8o=r(v9e," \u2014 "),QD=n(v9e,"A",{href:!0});var Act=s(QD);j8o=r(Act,"MegatronBertForMaskedLM"),Act.forEach(t),D8o=r(v9e," (Megatron-BERT model)"),v9e.forEach(t),G8o=i(H),mb=n(H,"LI",{});var F9e=s(mb);Efe=n(F9e,"STRONG",{});var Lct=s(Efe);O8o=r(Lct,"mobilebert"),Lct.forEach(t),V8o=r(F9e," \u2014 "),HD=n(F9e,"A",{href:!0});var yct=s(HD);X8o=r(yct,"MobileBertForMaskedLM"),yct.forEach(t),z8o=r(F9e," (MobileBERT model)"),F9e.forEach(t),W8o=i(H),gb=n(H,"LI",{});var T9e=s(gb);Cfe=n(T9e,"STRONG",{});var xct=s(Cfe);Q8o=r(xct,"mpnet"),xct.forEach(t),H8o=r(T9e," \u2014 "),UD=n(T9e,"A",{href:!0});var $ct=s(UD);U8o=r($ct,"MPNetForMaskedLM"),$ct.forEach(t),J8o=r(T9e," (MPNet model)"),T9e.forEach(t),Y8o=i(H),hb=n(H,"LI",{});var M9e=s(hb);wfe=n(M9e,"STRONG",{});var kct=s(wfe);K8o=r(kct,"nystromformer"),kct.forEach(t),Z8o=r(M9e," \u2014 "),JD=n(M9e,"A",{href:!0});var Sct=s(JD);e9o=r(Sct,"NystromformerForMaskedLM"),Sct.forEach(t),o9o=r(M9e," (Nystr\xF6mformer model)"),M9e.forEach(t),r9o=i(H),pb=n(H,"LI",{});var E9e=s(pb);Afe=n(E9e,"STRONG",{});var Rct=s(Afe);t9o=r(Rct,"perceiver"),Rct.forEach(t),a9o=r(E9e," \u2014 "),YD=n(E9e,"A",{href:!0});var Pct=s(YD);n9o=r(Pct,"PerceiverForMaskedLM"),Pct.forEach(t),s9o=r(E9e," (Perceiver model)"),E9e.forEach(t),l9o=i(H),_b=n(H,"LI",{});var C9e=s(_b);Lfe=n(C9e,"STRONG",{});var Bct=s(Lfe);i9o=r(Bct,"qdqbert"),Bct.forEach(t),d9o=r(C9e," \u2014 "),KD=n(C9e,"A",{href:!0});var Ict=s(KD);c9o=r(Ict,"QDQBertForMaskedLM"),Ict.forEach(t),f9o=r(C9e," (QDQBert model)"),C9e.forEach(t),m9o=i(H),ub=n(H,"LI",{});var w9e=s(ub);yfe=n(w9e,"STRONG",{});var Nct=s(yfe);g9o=r(Nct,"reformer"),Nct.forEach(t),h9o=r(w9e," \u2014 "),ZD=n(w9e,"A",{href:!0});var qct=s(ZD);p9o=r(qct,"ReformerForMaskedLM"),qct.forEach(t),_9o=r(w9e," (Reformer model)"),w9e.forEach(t),u9o=i(H),bb=n(H,"LI",{});var A9e=s(bb);xfe=n(A9e,"STRONG",{});var jct=s(xfe);b9o=r(jct,"rembert"),jct.forEach(t),v9o=r(A9e," \u2014 "),eG=n(A9e,"A",{href:!0});var Dct=s(eG);F9o=r(Dct,"RemBertForMaskedLM"),Dct.forEach(t),T9o=r(A9e," (RemBERT model)"),A9e.forEach(t),M9o=i(H),vb=n(H,"LI",{});var L9e=s(vb);$fe=n(L9e,"STRONG",{});var Gct=s($fe);E9o=r(Gct,"roberta"),Gct.forEach(t),C9o=r(L9e," \u2014 "),oG=n(L9e,"A",{href:!0});var Oct=s(oG);w9o=r(Oct,"RobertaForMaskedLM"),Oct.forEach(t),A9o=r(L9e," (RoBERTa model)"),L9e.forEach(t),L9o=i(H),Fb=n(H,"LI",{});var y9e=s(Fb);kfe=n(y9e,"STRONG",{});var Vct=s(kfe);y9o=r(Vct,"roformer"),Vct.forEach(t),x9o=r(y9e," \u2014 "),rG=n(y9e,"A",{href:!0});var Xct=s(rG);$9o=r(Xct,"RoFormerForMaskedLM"),Xct.forEach(t),k9o=r(y9e," (RoFormer model)"),y9e.forEach(t),S9o=i(H),Tb=n(H,"LI",{});var x9e=s(Tb);Sfe=n(x9e,"STRONG",{});var zct=s(Sfe);R9o=r(zct,"squeezebert"),zct.forEach(t),P9o=r(x9e," \u2014 "),tG=n(x9e,"A",{href:!0});var Wct=s(tG);B9o=r(Wct,"SqueezeBertForMaskedLM"),Wct.forEach(t),I9o=r(x9e," (SqueezeBERT model)"),x9e.forEach(t),N9o=i(H),Mb=n(H,"LI",{});var $9e=s(Mb);Rfe=n($9e,"STRONG",{});var Qct=s(Rfe);q9o=r(Qct,"tapas"),Qct.forEach(t),j9o=r($9e," \u2014 "),aG=n($9e,"A",{href:!0});var Hct=s(aG);D9o=r(Hct,"TapasForMaskedLM"),Hct.forEach(t),G9o=r($9e," (TAPAS model)"),$9e.forEach(t),O9o=i(H),Eb=n(H,"LI",{});var k9e=s(Eb);Pfe=n(k9e,"STRONG",{});var Uct=s(Pfe);V9o=r(Uct,"wav2vec2"),Uct.forEach(t),X9o=r(k9e," \u2014 "),Bfe=n(k9e,"CODE",{});var Jct=s(Bfe);z9o=r(Jct,"Wav2Vec2ForMaskedLM"),Jct.forEach(t),W9o=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),Q9o=i(H),Cb=n(H,"LI",{});var S9e=s(Cb);Ife=n(S9e,"STRONG",{});var Yct=s(Ife);H9o=r(Yct,"xlm"),Yct.forEach(t),U9o=r(S9e," \u2014 "),nG=n(S9e,"A",{href:!0});var Kct=s(nG);J9o=r(Kct,"XLMWithLMHeadModel"),Kct.forEach(t),Y9o=r(S9e," (XLM model)"),S9e.forEach(t),K9o=i(H),wb=n(H,"LI",{});var R9e=s(wb);Nfe=n(R9e,"STRONG",{});var Zct=s(Nfe);Z9o=r(Zct,"xlm-roberta"),Zct.forEach(t),exo=r(R9e," \u2014 "),sG=n(R9e,"A",{href:!0});var eft=s(sG);oxo=r(eft,"XLMRobertaForMaskedLM"),eft.forEach(t),rxo=r(R9e," (XLM-RoBERTa model)"),R9e.forEach(t),txo=i(H),Ab=n(H,"LI",{});var P9e=s(Ab);qfe=n(P9e,"STRONG",{});var oft=s(qfe);axo=r(oft,"xlm-roberta-xl"),oft.forEach(t),nxo=r(P9e," \u2014 "),lG=n(P9e,"A",{href:!0});var rft=s(lG);sxo=r(rft,"XLMRobertaXLForMaskedLM"),rft.forEach(t),lxo=r(P9e," (XLM-RoBERTa-XL model)"),P9e.forEach(t),ixo=i(H),Lb=n(H,"LI",{});var B9e=s(Lb);jfe=n(B9e,"STRONG",{});var tft=s(jfe);dxo=r(tft,"yoso"),tft.forEach(t),cxo=r(B9e," \u2014 "),iG=n(B9e,"A",{href:!0});var aft=s(iG);fxo=r(aft,"YosoForMaskedLM"),aft.forEach(t),mxo=r(B9e," (YOSO model)"),B9e.forEach(t),H.forEach(t),gxo=i(na),yb=n(na,"P",{});var I9e=s(yb);hxo=r(I9e,"The model is set in evaluation mode by default using "),Dfe=n(I9e,"CODE",{});var nft=s(Dfe);pxo=r(nft,"model.eval()"),nft.forEach(t),_xo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(I9e,"CODE",{});var sft=s(Gfe);uxo=r(sft,"model.train()"),sft.forEach(t),I9e.forEach(t),bxo=i(na),T(xb.$$.fragment,na),na.forEach(t),zs.forEach(t),Mje=i(f),ji=n(f,"H2",{class:!0});var AGe=s(ji);$b=n(AGe,"A",{id:!0,class:!0,href:!0});var lft=s($b);Ofe=n(lft,"SPAN",{});var ift=s(Ofe);T(RL.$$.fragment,ift),ift.forEach(t),lft.forEach(t),vxo=i(AGe),Vfe=n(AGe,"SPAN",{});var dft=s(Vfe);Fxo=r(dft,"AutoModelForSeq2SeqLM"),dft.forEach(t),AGe.forEach(t),Eje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(PL.$$.fragment,Ws),Txo=i(Ws),Di=n(Ws,"P",{});var ZZ=s(Di);Mxo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dG=n(ZZ,"A",{href:!0});var cft=s(dG);Exo=r(cft,"from_pretrained()"),cft.forEach(t),Cxo=r(ZZ," class method or the "),cG=n(ZZ,"A",{href:!0});var fft=s(cG);wxo=r(fft,"from_config()"),fft.forEach(t),Axo=r(ZZ,` class
method.`),ZZ.forEach(t),Lxo=i(Ws),BL=n(Ws,"P",{});var LGe=s(BL);yxo=r(LGe,"This class cannot be instantiated directly using "),Xfe=n(LGe,"CODE",{});var mft=s(Xfe);xxo=r(mft,"__init__()"),mft.forEach(t),$xo=r(LGe," (throws an error)."),LGe.forEach(t),kxo=i(Ws),it=n(Ws,"DIV",{class:!0});var eA=s(it);T(IL.$$.fragment,eA),Sxo=i(eA),zfe=n(eA,"P",{});var gft=s(zfe);Rxo=r(gft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gft.forEach(t),Pxo=i(eA),Gi=n(eA,"P",{});var eee=s(Gi);Bxo=r(eee,`Note:
Loading a model from its configuration file does `),Wfe=n(eee,"STRONG",{});var hft=s(Wfe);Ixo=r(hft,"not"),hft.forEach(t),Nxo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(eee,"A",{href:!0});var pft=s(fG);qxo=r(pft,"from_pretrained()"),pft.forEach(t),jxo=r(eee," to load the model weights."),eee.forEach(t),Dxo=i(eA),T(kb.$$.fragment,eA),eA.forEach(t),Gxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var sa=s(eo);T(NL.$$.fragment,sa),Oxo=i(sa),Qfe=n(sa,"P",{});var _ft=s(Qfe);Vxo=r(_ft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_ft.forEach(t),Xxo=i(sa),Ra=n(sa,"P",{});var oA=s(Ra);zxo=r(oA,"The model class to instantiate is selected based on the "),Hfe=n(oA,"CODE",{});var uft=s(Hfe);Wxo=r(uft,"model_type"),uft.forEach(t),Qxo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(oA,"CODE",{});var bft=s(Ufe);Hxo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),Uxo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(oA,"CODE",{});var vft=s(Jfe);Jxo=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),Yxo=r(oA,":"),oA.forEach(t),Kxo=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);Sb=n(Fe,"LI",{});var N9e=s(Sb);Yfe=n(N9e,"STRONG",{});var Fft=s(Yfe);Zxo=r(Fft,"bart"),Fft.forEach(t),e$o=r(N9e," \u2014 "),mG=n(N9e,"A",{href:!0});var Tft=s(mG);o$o=r(Tft,"BartForConditionalGeneration"),Tft.forEach(t),r$o=r(N9e," (BART model)"),N9e.forEach(t),t$o=i(Fe),Rb=n(Fe,"LI",{});var q9e=s(Rb);Kfe=n(q9e,"STRONG",{});var Mft=s(Kfe);a$o=r(Mft,"bigbird_pegasus"),Mft.forEach(t),n$o=r(q9e," \u2014 "),gG=n(q9e,"A",{href:!0});var Eft=s(gG);s$o=r(Eft,"BigBirdPegasusForConditionalGeneration"),Eft.forEach(t),l$o=r(q9e," (BigBird-Pegasus model)"),q9e.forEach(t),i$o=i(Fe),Pb=n(Fe,"LI",{});var j9e=s(Pb);Zfe=n(j9e,"STRONG",{});var Cft=s(Zfe);d$o=r(Cft,"blenderbot"),Cft.forEach(t),c$o=r(j9e," \u2014 "),hG=n(j9e,"A",{href:!0});var wft=s(hG);f$o=r(wft,"BlenderbotForConditionalGeneration"),wft.forEach(t),m$o=r(j9e," (Blenderbot model)"),j9e.forEach(t),g$o=i(Fe),Bb=n(Fe,"LI",{});var D9e=s(Bb);eme=n(D9e,"STRONG",{});var Aft=s(eme);h$o=r(Aft,"blenderbot-small"),Aft.forEach(t),p$o=r(D9e," \u2014 "),pG=n(D9e,"A",{href:!0});var Lft=s(pG);_$o=r(Lft,"BlenderbotSmallForConditionalGeneration"),Lft.forEach(t),u$o=r(D9e," (BlenderbotSmall model)"),D9e.forEach(t),b$o=i(Fe),Ib=n(Fe,"LI",{});var G9e=s(Ib);ome=n(G9e,"STRONG",{});var yft=s(ome);v$o=r(yft,"encoder-decoder"),yft.forEach(t),F$o=r(G9e," \u2014 "),_G=n(G9e,"A",{href:!0});var xft=s(_G);T$o=r(xft,"EncoderDecoderModel"),xft.forEach(t),M$o=r(G9e," (Encoder decoder model)"),G9e.forEach(t),E$o=i(Fe),Nb=n(Fe,"LI",{});var O9e=s(Nb);rme=n(O9e,"STRONG",{});var $ft=s(rme);C$o=r($ft,"fsmt"),$ft.forEach(t),w$o=r(O9e," \u2014 "),uG=n(O9e,"A",{href:!0});var kft=s(uG);A$o=r(kft,"FSMTForConditionalGeneration"),kft.forEach(t),L$o=r(O9e," (FairSeq Machine-Translation model)"),O9e.forEach(t),y$o=i(Fe),qb=n(Fe,"LI",{});var V9e=s(qb);tme=n(V9e,"STRONG",{});var Sft=s(tme);x$o=r(Sft,"led"),Sft.forEach(t),$$o=r(V9e," \u2014 "),bG=n(V9e,"A",{href:!0});var Rft=s(bG);k$o=r(Rft,"LEDForConditionalGeneration"),Rft.forEach(t),S$o=r(V9e," (LED model)"),V9e.forEach(t),R$o=i(Fe),jb=n(Fe,"LI",{});var X9e=s(jb);ame=n(X9e,"STRONG",{});var Pft=s(ame);P$o=r(Pft,"m2m_100"),Pft.forEach(t),B$o=r(X9e," \u2014 "),vG=n(X9e,"A",{href:!0});var Bft=s(vG);I$o=r(Bft,"M2M100ForConditionalGeneration"),Bft.forEach(t),N$o=r(X9e," (M2M100 model)"),X9e.forEach(t),q$o=i(Fe),Db=n(Fe,"LI",{});var z9e=s(Db);nme=n(z9e,"STRONG",{});var Ift=s(nme);j$o=r(Ift,"marian"),Ift.forEach(t),D$o=r(z9e," \u2014 "),FG=n(z9e,"A",{href:!0});var Nft=s(FG);G$o=r(Nft,"MarianMTModel"),Nft.forEach(t),O$o=r(z9e," (Marian model)"),z9e.forEach(t),V$o=i(Fe),Gb=n(Fe,"LI",{});var W9e=s(Gb);sme=n(W9e,"STRONG",{});var qft=s(sme);X$o=r(qft,"mbart"),qft.forEach(t),z$o=r(W9e," \u2014 "),TG=n(W9e,"A",{href:!0});var jft=s(TG);W$o=r(jft,"MBartForConditionalGeneration"),jft.forEach(t),Q$o=r(W9e," (mBART model)"),W9e.forEach(t),H$o=i(Fe),Ob=n(Fe,"LI",{});var Q9e=s(Ob);lme=n(Q9e,"STRONG",{});var Dft=s(lme);U$o=r(Dft,"mt5"),Dft.forEach(t),J$o=r(Q9e," \u2014 "),MG=n(Q9e,"A",{href:!0});var Gft=s(MG);Y$o=r(Gft,"MT5ForConditionalGeneration"),Gft.forEach(t),K$o=r(Q9e," (MT5 model)"),Q9e.forEach(t),Z$o=i(Fe),Vb=n(Fe,"LI",{});var H9e=s(Vb);ime=n(H9e,"STRONG",{});var Oft=s(ime);eko=r(Oft,"pegasus"),Oft.forEach(t),oko=r(H9e," \u2014 "),EG=n(H9e,"A",{href:!0});var Vft=s(EG);rko=r(Vft,"PegasusForConditionalGeneration"),Vft.forEach(t),tko=r(H9e," (Pegasus model)"),H9e.forEach(t),ako=i(Fe),Xb=n(Fe,"LI",{});var U9e=s(Xb);dme=n(U9e,"STRONG",{});var Xft=s(dme);nko=r(Xft,"plbart"),Xft.forEach(t),sko=r(U9e," \u2014 "),CG=n(U9e,"A",{href:!0});var zft=s(CG);lko=r(zft,"PLBartForConditionalGeneration"),zft.forEach(t),iko=r(U9e," (PLBart model)"),U9e.forEach(t),dko=i(Fe),zb=n(Fe,"LI",{});var J9e=s(zb);cme=n(J9e,"STRONG",{});var Wft=s(cme);cko=r(Wft,"prophetnet"),Wft.forEach(t),fko=r(J9e," \u2014 "),wG=n(J9e,"A",{href:!0});var Qft=s(wG);mko=r(Qft,"ProphetNetForConditionalGeneration"),Qft.forEach(t),gko=r(J9e," (ProphetNet model)"),J9e.forEach(t),hko=i(Fe),Wb=n(Fe,"LI",{});var Y9e=s(Wb);fme=n(Y9e,"STRONG",{});var Hft=s(fme);pko=r(Hft,"t5"),Hft.forEach(t),_ko=r(Y9e," \u2014 "),AG=n(Y9e,"A",{href:!0});var Uft=s(AG);uko=r(Uft,"T5ForConditionalGeneration"),Uft.forEach(t),bko=r(Y9e," (T5 model)"),Y9e.forEach(t),vko=i(Fe),Qb=n(Fe,"LI",{});var K9e=s(Qb);mme=n(K9e,"STRONG",{});var Jft=s(mme);Fko=r(Jft,"xlm-prophetnet"),Jft.forEach(t),Tko=r(K9e," \u2014 "),LG=n(K9e,"A",{href:!0});var Yft=s(LG);Mko=r(Yft,"XLMProphetNetForConditionalGeneration"),Yft.forEach(t),Eko=r(K9e," (XLM-ProphetNet model)"),K9e.forEach(t),Fe.forEach(t),Cko=i(sa),Hb=n(sa,"P",{});var Z9e=s(Hb);wko=r(Z9e,"The model is set in evaluation mode by default using "),gme=n(Z9e,"CODE",{});var Kft=s(gme);Ako=r(Kft,"model.eval()"),Kft.forEach(t),Lko=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=n(Z9e,"CODE",{});var Zft=s(hme);yko=r(Zft,"model.train()"),Zft.forEach(t),Z9e.forEach(t),xko=i(sa),T(Ub.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Cje=i(f),Oi=n(f,"H2",{class:!0});var yGe=s(Oi);Jb=n(yGe,"A",{id:!0,class:!0,href:!0});var emt=s(Jb);pme=n(emt,"SPAN",{});var omt=s(pme);T(qL.$$.fragment,omt),omt.forEach(t),emt.forEach(t),$ko=i(yGe),_me=n(yGe,"SPAN",{});var rmt=s(_me);kko=r(rmt,"AutoModelForSequenceClassification"),rmt.forEach(t),yGe.forEach(t),wje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(jL.$$.fragment,Qs),Sko=i(Qs),Vi=n(Qs,"P",{});var oee=s(Vi);Rko=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yG=n(oee,"A",{href:!0});var tmt=s(yG);Pko=r(tmt,"from_pretrained()"),tmt.forEach(t),Bko=r(oee," class method or the "),xG=n(oee,"A",{href:!0});var amt=s(xG);Iko=r(amt,"from_config()"),amt.forEach(t),Nko=r(oee,` class
method.`),oee.forEach(t),qko=i(Qs),DL=n(Qs,"P",{});var xGe=s(DL);jko=r(xGe,"This class cannot be instantiated directly using "),ume=n(xGe,"CODE",{});var nmt=s(ume);Dko=r(nmt,"__init__()"),nmt.forEach(t),Gko=r(xGe," (throws an error)."),xGe.forEach(t),Oko=i(Qs),dt=n(Qs,"DIV",{class:!0});var rA=s(dt);T(GL.$$.fragment,rA),Vko=i(rA),bme=n(rA,"P",{});var smt=s(bme);Xko=r(smt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),smt.forEach(t),zko=i(rA),Xi=n(rA,"P",{});var ree=s(Xi);Wko=r(ree,`Note:
Loading a model from its configuration file does `),vme=n(ree,"STRONG",{});var lmt=s(vme);Qko=r(lmt,"not"),lmt.forEach(t),Hko=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(ree,"A",{href:!0});var imt=s($G);Uko=r(imt,"from_pretrained()"),imt.forEach(t),Jko=r(ree," to load the model weights."),ree.forEach(t),Yko=i(rA),T(Yb.$$.fragment,rA),rA.forEach(t),Kko=i(Qs),oo=n(Qs,"DIV",{class:!0});var la=s(oo);T(OL.$$.fragment,la),Zko=i(la),Fme=n(la,"P",{});var dmt=s(Fme);eSo=r(dmt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dmt.forEach(t),oSo=i(la),Pa=n(la,"P",{});var tA=s(Pa);rSo=r(tA,"The model class to instantiate is selected based on the "),Tme=n(tA,"CODE",{});var cmt=s(Tme);tSo=r(cmt,"model_type"),cmt.forEach(t),aSo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Mme=n(tA,"CODE",{});var fmt=s(Mme);nSo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),sSo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=n(tA,"CODE",{});var mmt=s(Eme);lSo=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),iSo=r(tA,":"),tA.forEach(t),dSo=i(la),N=n(la,"UL",{});var j=s(N);Kb=n(j,"LI",{});var exe=s(Kb);Cme=n(exe,"STRONG",{});var gmt=s(Cme);cSo=r(gmt,"albert"),gmt.forEach(t),fSo=r(exe," \u2014 "),kG=n(exe,"A",{href:!0});var hmt=s(kG);mSo=r(hmt,"AlbertForSequenceClassification"),hmt.forEach(t),gSo=r(exe," (ALBERT model)"),exe.forEach(t),hSo=i(j),Zb=n(j,"LI",{});var oxe=s(Zb);wme=n(oxe,"STRONG",{});var pmt=s(wme);pSo=r(pmt,"bart"),pmt.forEach(t),_So=r(oxe," \u2014 "),SG=n(oxe,"A",{href:!0});var _mt=s(SG);uSo=r(_mt,"BartForSequenceClassification"),_mt.forEach(t),bSo=r(oxe," (BART model)"),oxe.forEach(t),vSo=i(j),e2=n(j,"LI",{});var rxe=s(e2);Ame=n(rxe,"STRONG",{});var umt=s(Ame);FSo=r(umt,"bert"),umt.forEach(t),TSo=r(rxe," \u2014 "),RG=n(rxe,"A",{href:!0});var bmt=s(RG);MSo=r(bmt,"BertForSequenceClassification"),bmt.forEach(t),ESo=r(rxe," (BERT model)"),rxe.forEach(t),CSo=i(j),o2=n(j,"LI",{});var txe=s(o2);Lme=n(txe,"STRONG",{});var vmt=s(Lme);wSo=r(vmt,"big_bird"),vmt.forEach(t),ASo=r(txe," \u2014 "),PG=n(txe,"A",{href:!0});var Fmt=s(PG);LSo=r(Fmt,"BigBirdForSequenceClassification"),Fmt.forEach(t),ySo=r(txe," (BigBird model)"),txe.forEach(t),xSo=i(j),r2=n(j,"LI",{});var axe=s(r2);yme=n(axe,"STRONG",{});var Tmt=s(yme);$So=r(Tmt,"bigbird_pegasus"),Tmt.forEach(t),kSo=r(axe," \u2014 "),BG=n(axe,"A",{href:!0});var Mmt=s(BG);SSo=r(Mmt,"BigBirdPegasusForSequenceClassification"),Mmt.forEach(t),RSo=r(axe," (BigBird-Pegasus model)"),axe.forEach(t),PSo=i(j),t2=n(j,"LI",{});var nxe=s(t2);xme=n(nxe,"STRONG",{});var Emt=s(xme);BSo=r(Emt,"camembert"),Emt.forEach(t),ISo=r(nxe," \u2014 "),IG=n(nxe,"A",{href:!0});var Cmt=s(IG);NSo=r(Cmt,"CamembertForSequenceClassification"),Cmt.forEach(t),qSo=r(nxe," (CamemBERT model)"),nxe.forEach(t),jSo=i(j),a2=n(j,"LI",{});var sxe=s(a2);$me=n(sxe,"STRONG",{});var wmt=s($me);DSo=r(wmt,"canine"),wmt.forEach(t),GSo=r(sxe," \u2014 "),NG=n(sxe,"A",{href:!0});var Amt=s(NG);OSo=r(Amt,"CanineForSequenceClassification"),Amt.forEach(t),VSo=r(sxe," (CANINE model)"),sxe.forEach(t),XSo=i(j),n2=n(j,"LI",{});var lxe=s(n2);kme=n(lxe,"STRONG",{});var Lmt=s(kme);zSo=r(Lmt,"convbert"),Lmt.forEach(t),WSo=r(lxe," \u2014 "),qG=n(lxe,"A",{href:!0});var ymt=s(qG);QSo=r(ymt,"ConvBertForSequenceClassification"),ymt.forEach(t),HSo=r(lxe," (ConvBERT model)"),lxe.forEach(t),USo=i(j),s2=n(j,"LI",{});var ixe=s(s2);Sme=n(ixe,"STRONG",{});var xmt=s(Sme);JSo=r(xmt,"ctrl"),xmt.forEach(t),YSo=r(ixe," \u2014 "),jG=n(ixe,"A",{href:!0});var $mt=s(jG);KSo=r($mt,"CTRLForSequenceClassification"),$mt.forEach(t),ZSo=r(ixe," (CTRL model)"),ixe.forEach(t),eRo=i(j),l2=n(j,"LI",{});var dxe=s(l2);Rme=n(dxe,"STRONG",{});var kmt=s(Rme);oRo=r(kmt,"data2vec-text"),kmt.forEach(t),rRo=r(dxe," \u2014 "),DG=n(dxe,"A",{href:!0});var Smt=s(DG);tRo=r(Smt,"Data2VecTextForSequenceClassification"),Smt.forEach(t),aRo=r(dxe," (Data2VecText model)"),dxe.forEach(t),nRo=i(j),i2=n(j,"LI",{});var cxe=s(i2);Pme=n(cxe,"STRONG",{});var Rmt=s(Pme);sRo=r(Rmt,"deberta"),Rmt.forEach(t),lRo=r(cxe," \u2014 "),GG=n(cxe,"A",{href:!0});var Pmt=s(GG);iRo=r(Pmt,"DebertaForSequenceClassification"),Pmt.forEach(t),dRo=r(cxe," (DeBERTa model)"),cxe.forEach(t),cRo=i(j),d2=n(j,"LI",{});var fxe=s(d2);Bme=n(fxe,"STRONG",{});var Bmt=s(Bme);fRo=r(Bmt,"deberta-v2"),Bmt.forEach(t),mRo=r(fxe," \u2014 "),OG=n(fxe,"A",{href:!0});var Imt=s(OG);gRo=r(Imt,"DebertaV2ForSequenceClassification"),Imt.forEach(t),hRo=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),pRo=i(j),c2=n(j,"LI",{});var mxe=s(c2);Ime=n(mxe,"STRONG",{});var Nmt=s(Ime);_Ro=r(Nmt,"distilbert"),Nmt.forEach(t),uRo=r(mxe," \u2014 "),VG=n(mxe,"A",{href:!0});var qmt=s(VG);bRo=r(qmt,"DistilBertForSequenceClassification"),qmt.forEach(t),vRo=r(mxe," (DistilBERT model)"),mxe.forEach(t),FRo=i(j),f2=n(j,"LI",{});var gxe=s(f2);Nme=n(gxe,"STRONG",{});var jmt=s(Nme);TRo=r(jmt,"electra"),jmt.forEach(t),MRo=r(gxe," \u2014 "),XG=n(gxe,"A",{href:!0});var Dmt=s(XG);ERo=r(Dmt,"ElectraForSequenceClassification"),Dmt.forEach(t),CRo=r(gxe," (ELECTRA model)"),gxe.forEach(t),wRo=i(j),m2=n(j,"LI",{});var hxe=s(m2);qme=n(hxe,"STRONG",{});var Gmt=s(qme);ARo=r(Gmt,"flaubert"),Gmt.forEach(t),LRo=r(hxe," \u2014 "),zG=n(hxe,"A",{href:!0});var Omt=s(zG);yRo=r(Omt,"FlaubertForSequenceClassification"),Omt.forEach(t),xRo=r(hxe," (FlauBERT model)"),hxe.forEach(t),$Ro=i(j),g2=n(j,"LI",{});var pxe=s(g2);jme=n(pxe,"STRONG",{});var Vmt=s(jme);kRo=r(Vmt,"fnet"),Vmt.forEach(t),SRo=r(pxe," \u2014 "),WG=n(pxe,"A",{href:!0});var Xmt=s(WG);RRo=r(Xmt,"FNetForSequenceClassification"),Xmt.forEach(t),PRo=r(pxe," (FNet model)"),pxe.forEach(t),BRo=i(j),h2=n(j,"LI",{});var _xe=s(h2);Dme=n(_xe,"STRONG",{});var zmt=s(Dme);IRo=r(zmt,"funnel"),zmt.forEach(t),NRo=r(_xe," \u2014 "),QG=n(_xe,"A",{href:!0});var Wmt=s(QG);qRo=r(Wmt,"FunnelForSequenceClassification"),Wmt.forEach(t),jRo=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),DRo=i(j),p2=n(j,"LI",{});var uxe=s(p2);Gme=n(uxe,"STRONG",{});var Qmt=s(Gme);GRo=r(Qmt,"gpt2"),Qmt.forEach(t),ORo=r(uxe," \u2014 "),HG=n(uxe,"A",{href:!0});var Hmt=s(HG);VRo=r(Hmt,"GPT2ForSequenceClassification"),Hmt.forEach(t),XRo=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),zRo=i(j),_2=n(j,"LI",{});var bxe=s(_2);Ome=n(bxe,"STRONG",{});var Umt=s(Ome);WRo=r(Umt,"gpt_neo"),Umt.forEach(t),QRo=r(bxe," \u2014 "),UG=n(bxe,"A",{href:!0});var Jmt=s(UG);HRo=r(Jmt,"GPTNeoForSequenceClassification"),Jmt.forEach(t),URo=r(bxe," (GPT Neo model)"),bxe.forEach(t),JRo=i(j),u2=n(j,"LI",{});var vxe=s(u2);Vme=n(vxe,"STRONG",{});var Ymt=s(Vme);YRo=r(Ymt,"gptj"),Ymt.forEach(t),KRo=r(vxe," \u2014 "),JG=n(vxe,"A",{href:!0});var Kmt=s(JG);ZRo=r(Kmt,"GPTJForSequenceClassification"),Kmt.forEach(t),ePo=r(vxe," (GPT-J model)"),vxe.forEach(t),oPo=i(j),b2=n(j,"LI",{});var Fxe=s(b2);Xme=n(Fxe,"STRONG",{});var Zmt=s(Xme);rPo=r(Zmt,"ibert"),Zmt.forEach(t),tPo=r(Fxe," \u2014 "),YG=n(Fxe,"A",{href:!0});var egt=s(YG);aPo=r(egt,"IBertForSequenceClassification"),egt.forEach(t),nPo=r(Fxe," (I-BERT model)"),Fxe.forEach(t),sPo=i(j),v2=n(j,"LI",{});var Txe=s(v2);zme=n(Txe,"STRONG",{});var ogt=s(zme);lPo=r(ogt,"layoutlm"),ogt.forEach(t),iPo=r(Txe," \u2014 "),KG=n(Txe,"A",{href:!0});var rgt=s(KG);dPo=r(rgt,"LayoutLMForSequenceClassification"),rgt.forEach(t),cPo=r(Txe," (LayoutLM model)"),Txe.forEach(t),fPo=i(j),F2=n(j,"LI",{});var Mxe=s(F2);Wme=n(Mxe,"STRONG",{});var tgt=s(Wme);mPo=r(tgt,"layoutlmv2"),tgt.forEach(t),gPo=r(Mxe," \u2014 "),ZG=n(Mxe,"A",{href:!0});var agt=s(ZG);hPo=r(agt,"LayoutLMv2ForSequenceClassification"),agt.forEach(t),pPo=r(Mxe," (LayoutLMv2 model)"),Mxe.forEach(t),_Po=i(j),T2=n(j,"LI",{});var Exe=s(T2);Qme=n(Exe,"STRONG",{});var ngt=s(Qme);uPo=r(ngt,"layoutlmv3"),ngt.forEach(t),bPo=r(Exe," \u2014 "),eO=n(Exe,"A",{href:!0});var sgt=s(eO);vPo=r(sgt,"LayoutLMv3ForSequenceClassification"),sgt.forEach(t),FPo=r(Exe," (LayoutLMv3 model)"),Exe.forEach(t),TPo=i(j),M2=n(j,"LI",{});var Cxe=s(M2);Hme=n(Cxe,"STRONG",{});var lgt=s(Hme);MPo=r(lgt,"led"),lgt.forEach(t),EPo=r(Cxe," \u2014 "),oO=n(Cxe,"A",{href:!0});var igt=s(oO);CPo=r(igt,"LEDForSequenceClassification"),igt.forEach(t),wPo=r(Cxe," (LED model)"),Cxe.forEach(t),APo=i(j),E2=n(j,"LI",{});var wxe=s(E2);Ume=n(wxe,"STRONG",{});var dgt=s(Ume);LPo=r(dgt,"longformer"),dgt.forEach(t),yPo=r(wxe," \u2014 "),rO=n(wxe,"A",{href:!0});var cgt=s(rO);xPo=r(cgt,"LongformerForSequenceClassification"),cgt.forEach(t),$Po=r(wxe," (Longformer model)"),wxe.forEach(t),kPo=i(j),C2=n(j,"LI",{});var Axe=s(C2);Jme=n(Axe,"STRONG",{});var fgt=s(Jme);SPo=r(fgt,"mbart"),fgt.forEach(t),RPo=r(Axe," \u2014 "),tO=n(Axe,"A",{href:!0});var mgt=s(tO);PPo=r(mgt,"MBartForSequenceClassification"),mgt.forEach(t),BPo=r(Axe," (mBART model)"),Axe.forEach(t),IPo=i(j),w2=n(j,"LI",{});var Lxe=s(w2);Yme=n(Lxe,"STRONG",{});var ggt=s(Yme);NPo=r(ggt,"megatron-bert"),ggt.forEach(t),qPo=r(Lxe," \u2014 "),aO=n(Lxe,"A",{href:!0});var hgt=s(aO);jPo=r(hgt,"MegatronBertForSequenceClassification"),hgt.forEach(t),DPo=r(Lxe," (Megatron-BERT model)"),Lxe.forEach(t),GPo=i(j),A2=n(j,"LI",{});var yxe=s(A2);Kme=n(yxe,"STRONG",{});var pgt=s(Kme);OPo=r(pgt,"mobilebert"),pgt.forEach(t),VPo=r(yxe," \u2014 "),nO=n(yxe,"A",{href:!0});var _gt=s(nO);XPo=r(_gt,"MobileBertForSequenceClassification"),_gt.forEach(t),zPo=r(yxe," (MobileBERT model)"),yxe.forEach(t),WPo=i(j),L2=n(j,"LI",{});var xxe=s(L2);Zme=n(xxe,"STRONG",{});var ugt=s(Zme);QPo=r(ugt,"mpnet"),ugt.forEach(t),HPo=r(xxe," \u2014 "),sO=n(xxe,"A",{href:!0});var bgt=s(sO);UPo=r(bgt,"MPNetForSequenceClassification"),bgt.forEach(t),JPo=r(xxe," (MPNet model)"),xxe.forEach(t),YPo=i(j),y2=n(j,"LI",{});var $xe=s(y2);ege=n($xe,"STRONG",{});var vgt=s(ege);KPo=r(vgt,"nystromformer"),vgt.forEach(t),ZPo=r($xe," \u2014 "),lO=n($xe,"A",{href:!0});var Fgt=s(lO);eBo=r(Fgt,"NystromformerForSequenceClassification"),Fgt.forEach(t),oBo=r($xe," (Nystr\xF6mformer model)"),$xe.forEach(t),rBo=i(j),x2=n(j,"LI",{});var kxe=s(x2);oge=n(kxe,"STRONG",{});var Tgt=s(oge);tBo=r(Tgt,"openai-gpt"),Tgt.forEach(t),aBo=r(kxe," \u2014 "),iO=n(kxe,"A",{href:!0});var Mgt=s(iO);nBo=r(Mgt,"OpenAIGPTForSequenceClassification"),Mgt.forEach(t),sBo=r(kxe," (OpenAI GPT model)"),kxe.forEach(t),lBo=i(j),$2=n(j,"LI",{});var Sxe=s($2);rge=n(Sxe,"STRONG",{});var Egt=s(rge);iBo=r(Egt,"perceiver"),Egt.forEach(t),dBo=r(Sxe," \u2014 "),dO=n(Sxe,"A",{href:!0});var Cgt=s(dO);cBo=r(Cgt,"PerceiverForSequenceClassification"),Cgt.forEach(t),fBo=r(Sxe," (Perceiver model)"),Sxe.forEach(t),mBo=i(j),k2=n(j,"LI",{});var Rxe=s(k2);tge=n(Rxe,"STRONG",{});var wgt=s(tge);gBo=r(wgt,"plbart"),wgt.forEach(t),hBo=r(Rxe," \u2014 "),cO=n(Rxe,"A",{href:!0});var Agt=s(cO);pBo=r(Agt,"PLBartForSequenceClassification"),Agt.forEach(t),_Bo=r(Rxe," (PLBart model)"),Rxe.forEach(t),uBo=i(j),S2=n(j,"LI",{});var Pxe=s(S2);age=n(Pxe,"STRONG",{});var Lgt=s(age);bBo=r(Lgt,"qdqbert"),Lgt.forEach(t),vBo=r(Pxe," \u2014 "),fO=n(Pxe,"A",{href:!0});var ygt=s(fO);FBo=r(ygt,"QDQBertForSequenceClassification"),ygt.forEach(t),TBo=r(Pxe," (QDQBert model)"),Pxe.forEach(t),MBo=i(j),R2=n(j,"LI",{});var Bxe=s(R2);nge=n(Bxe,"STRONG",{});var xgt=s(nge);EBo=r(xgt,"reformer"),xgt.forEach(t),CBo=r(Bxe," \u2014 "),mO=n(Bxe,"A",{href:!0});var $gt=s(mO);wBo=r($gt,"ReformerForSequenceClassification"),$gt.forEach(t),ABo=r(Bxe," (Reformer model)"),Bxe.forEach(t),LBo=i(j),P2=n(j,"LI",{});var Ixe=s(P2);sge=n(Ixe,"STRONG",{});var kgt=s(sge);yBo=r(kgt,"rembert"),kgt.forEach(t),xBo=r(Ixe," \u2014 "),gO=n(Ixe,"A",{href:!0});var Sgt=s(gO);$Bo=r(Sgt,"RemBertForSequenceClassification"),Sgt.forEach(t),kBo=r(Ixe," (RemBERT model)"),Ixe.forEach(t),SBo=i(j),B2=n(j,"LI",{});var Nxe=s(B2);lge=n(Nxe,"STRONG",{});var Rgt=s(lge);RBo=r(Rgt,"roberta"),Rgt.forEach(t),PBo=r(Nxe," \u2014 "),hO=n(Nxe,"A",{href:!0});var Pgt=s(hO);BBo=r(Pgt,"RobertaForSequenceClassification"),Pgt.forEach(t),IBo=r(Nxe," (RoBERTa model)"),Nxe.forEach(t),NBo=i(j),I2=n(j,"LI",{});var qxe=s(I2);ige=n(qxe,"STRONG",{});var Bgt=s(ige);qBo=r(Bgt,"roformer"),Bgt.forEach(t),jBo=r(qxe," \u2014 "),pO=n(qxe,"A",{href:!0});var Igt=s(pO);DBo=r(Igt,"RoFormerForSequenceClassification"),Igt.forEach(t),GBo=r(qxe," (RoFormer model)"),qxe.forEach(t),OBo=i(j),N2=n(j,"LI",{});var jxe=s(N2);dge=n(jxe,"STRONG",{});var Ngt=s(dge);VBo=r(Ngt,"squeezebert"),Ngt.forEach(t),XBo=r(jxe," \u2014 "),_O=n(jxe,"A",{href:!0});var qgt=s(_O);zBo=r(qgt,"SqueezeBertForSequenceClassification"),qgt.forEach(t),WBo=r(jxe," (SqueezeBERT model)"),jxe.forEach(t),QBo=i(j),q2=n(j,"LI",{});var Dxe=s(q2);cge=n(Dxe,"STRONG",{});var jgt=s(cge);HBo=r(jgt,"tapas"),jgt.forEach(t),UBo=r(Dxe," \u2014 "),uO=n(Dxe,"A",{href:!0});var Dgt=s(uO);JBo=r(Dgt,"TapasForSequenceClassification"),Dgt.forEach(t),YBo=r(Dxe," (TAPAS model)"),Dxe.forEach(t),KBo=i(j),j2=n(j,"LI",{});var Gxe=s(j2);fge=n(Gxe,"STRONG",{});var Ggt=s(fge);ZBo=r(Ggt,"transfo-xl"),Ggt.forEach(t),eIo=r(Gxe," \u2014 "),bO=n(Gxe,"A",{href:!0});var Ogt=s(bO);oIo=r(Ogt,"TransfoXLForSequenceClassification"),Ogt.forEach(t),rIo=r(Gxe," (Transformer-XL model)"),Gxe.forEach(t),tIo=i(j),D2=n(j,"LI",{});var Oxe=s(D2);mge=n(Oxe,"STRONG",{});var Vgt=s(mge);aIo=r(Vgt,"xlm"),Vgt.forEach(t),nIo=r(Oxe," \u2014 "),vO=n(Oxe,"A",{href:!0});var Xgt=s(vO);sIo=r(Xgt,"XLMForSequenceClassification"),Xgt.forEach(t),lIo=r(Oxe," (XLM model)"),Oxe.forEach(t),iIo=i(j),G2=n(j,"LI",{});var Vxe=s(G2);gge=n(Vxe,"STRONG",{});var zgt=s(gge);dIo=r(zgt,"xlm-roberta"),zgt.forEach(t),cIo=r(Vxe," \u2014 "),FO=n(Vxe,"A",{href:!0});var Wgt=s(FO);fIo=r(Wgt,"XLMRobertaForSequenceClassification"),Wgt.forEach(t),mIo=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),gIo=i(j),O2=n(j,"LI",{});var Xxe=s(O2);hge=n(Xxe,"STRONG",{});var Qgt=s(hge);hIo=r(Qgt,"xlm-roberta-xl"),Qgt.forEach(t),pIo=r(Xxe," \u2014 "),TO=n(Xxe,"A",{href:!0});var Hgt=s(TO);_Io=r(Hgt,"XLMRobertaXLForSequenceClassification"),Hgt.forEach(t),uIo=r(Xxe," (XLM-RoBERTa-XL model)"),Xxe.forEach(t),bIo=i(j),V2=n(j,"LI",{});var zxe=s(V2);pge=n(zxe,"STRONG",{});var Ugt=s(pge);vIo=r(Ugt,"xlnet"),Ugt.forEach(t),FIo=r(zxe," \u2014 "),MO=n(zxe,"A",{href:!0});var Jgt=s(MO);TIo=r(Jgt,"XLNetForSequenceClassification"),Jgt.forEach(t),MIo=r(zxe," (XLNet model)"),zxe.forEach(t),EIo=i(j),X2=n(j,"LI",{});var Wxe=s(X2);_ge=n(Wxe,"STRONG",{});var Ygt=s(_ge);CIo=r(Ygt,"yoso"),Ygt.forEach(t),wIo=r(Wxe," \u2014 "),EO=n(Wxe,"A",{href:!0});var Kgt=s(EO);AIo=r(Kgt,"YosoForSequenceClassification"),Kgt.forEach(t),LIo=r(Wxe," (YOSO model)"),Wxe.forEach(t),j.forEach(t),yIo=i(la),z2=n(la,"P",{});var Qxe=s(z2);xIo=r(Qxe,"The model is set in evaluation mode by default using "),uge=n(Qxe,"CODE",{});var Zgt=s(uge);$Io=r(Zgt,"model.eval()"),Zgt.forEach(t),kIo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Qxe,"CODE",{});var eht=s(bge);SIo=r(eht,"model.train()"),eht.forEach(t),Qxe.forEach(t),RIo=i(la),T(W2.$$.fragment,la),la.forEach(t),Qs.forEach(t),Aje=i(f),zi=n(f,"H2",{class:!0});var $Ge=s(zi);Q2=n($Ge,"A",{id:!0,class:!0,href:!0});var oht=s(Q2);vge=n(oht,"SPAN",{});var rht=s(vge);T(VL.$$.fragment,rht),rht.forEach(t),oht.forEach(t),PIo=i($Ge),Fge=n($Ge,"SPAN",{});var tht=s(Fge);BIo=r(tht,"AutoModelForMultipleChoice"),tht.forEach(t),$Ge.forEach(t),Lje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(XL.$$.fragment,Hs),IIo=i(Hs),Wi=n(Hs,"P",{});var tee=s(Wi);NIo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CO=n(tee,"A",{href:!0});var aht=s(CO);qIo=r(aht,"from_pretrained()"),aht.forEach(t),jIo=r(tee," class method or the "),wO=n(tee,"A",{href:!0});var nht=s(wO);DIo=r(nht,"from_config()"),nht.forEach(t),GIo=r(tee,` class
method.`),tee.forEach(t),OIo=i(Hs),zL=n(Hs,"P",{});var kGe=s(zL);VIo=r(kGe,"This class cannot be instantiated directly using "),Tge=n(kGe,"CODE",{});var sht=s(Tge);XIo=r(sht,"__init__()"),sht.forEach(t),zIo=r(kGe," (throws an error)."),kGe.forEach(t),WIo=i(Hs),ct=n(Hs,"DIV",{class:!0});var aA=s(ct);T(WL.$$.fragment,aA),QIo=i(aA),Mge=n(aA,"P",{});var lht=s(Mge);HIo=r(lht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lht.forEach(t),UIo=i(aA),Qi=n(aA,"P",{});var aee=s(Qi);JIo=r(aee,`Note:
Loading a model from its configuration file does `),Ege=n(aee,"STRONG",{});var iht=s(Ege);YIo=r(iht,"not"),iht.forEach(t),KIo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(aee,"A",{href:!0});var dht=s(AO);ZIo=r(dht,"from_pretrained()"),dht.forEach(t),eNo=r(aee," to load the model weights."),aee.forEach(t),oNo=i(aA),T(H2.$$.fragment,aA),aA.forEach(t),rNo=i(Hs),ro=n(Hs,"DIV",{class:!0});var ia=s(ro);T(QL.$$.fragment,ia),tNo=i(ia),Cge=n(ia,"P",{});var cht=s(Cge);aNo=r(cht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cht.forEach(t),nNo=i(ia),Ba=n(ia,"P",{});var nA=s(Ba);sNo=r(nA,"The model class to instantiate is selected based on the "),wge=n(nA,"CODE",{});var fht=s(wge);lNo=r(fht,"model_type"),fht.forEach(t),iNo=r(nA,` property of the config object (either
passed as an argument or loaded from `),Age=n(nA,"CODE",{});var mht=s(Age);dNo=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),cNo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(nA,"CODE",{});var ght=s(Lge);fNo=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),mNo=r(nA,":"),nA.forEach(t),gNo=i(ia),Z=n(ia,"UL",{});var ee=s(Z);U2=n(ee,"LI",{});var Hxe=s(U2);yge=n(Hxe,"STRONG",{});var hht=s(yge);hNo=r(hht,"albert"),hht.forEach(t),pNo=r(Hxe," \u2014 "),LO=n(Hxe,"A",{href:!0});var pht=s(LO);_No=r(pht,"AlbertForMultipleChoice"),pht.forEach(t),uNo=r(Hxe," (ALBERT model)"),Hxe.forEach(t),bNo=i(ee),J2=n(ee,"LI",{});var Uxe=s(J2);xge=n(Uxe,"STRONG",{});var _ht=s(xge);vNo=r(_ht,"bert"),_ht.forEach(t),FNo=r(Uxe," \u2014 "),yO=n(Uxe,"A",{href:!0});var uht=s(yO);TNo=r(uht,"BertForMultipleChoice"),uht.forEach(t),MNo=r(Uxe," (BERT model)"),Uxe.forEach(t),ENo=i(ee),Y2=n(ee,"LI",{});var Jxe=s(Y2);$ge=n(Jxe,"STRONG",{});var bht=s($ge);CNo=r(bht,"big_bird"),bht.forEach(t),wNo=r(Jxe," \u2014 "),xO=n(Jxe,"A",{href:!0});var vht=s(xO);ANo=r(vht,"BigBirdForMultipleChoice"),vht.forEach(t),LNo=r(Jxe," (BigBird model)"),Jxe.forEach(t),yNo=i(ee),K2=n(ee,"LI",{});var Yxe=s(K2);kge=n(Yxe,"STRONG",{});var Fht=s(kge);xNo=r(Fht,"camembert"),Fht.forEach(t),$No=r(Yxe," \u2014 "),$O=n(Yxe,"A",{href:!0});var Tht=s($O);kNo=r(Tht,"CamembertForMultipleChoice"),Tht.forEach(t),SNo=r(Yxe," (CamemBERT model)"),Yxe.forEach(t),RNo=i(ee),Z2=n(ee,"LI",{});var Kxe=s(Z2);Sge=n(Kxe,"STRONG",{});var Mht=s(Sge);PNo=r(Mht,"canine"),Mht.forEach(t),BNo=r(Kxe," \u2014 "),kO=n(Kxe,"A",{href:!0});var Eht=s(kO);INo=r(Eht,"CanineForMultipleChoice"),Eht.forEach(t),NNo=r(Kxe," (CANINE model)"),Kxe.forEach(t),qNo=i(ee),e4=n(ee,"LI",{});var Zxe=s(e4);Rge=n(Zxe,"STRONG",{});var Cht=s(Rge);jNo=r(Cht,"convbert"),Cht.forEach(t),DNo=r(Zxe," \u2014 "),SO=n(Zxe,"A",{href:!0});var wht=s(SO);GNo=r(wht,"ConvBertForMultipleChoice"),wht.forEach(t),ONo=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),VNo=i(ee),o4=n(ee,"LI",{});var e$e=s(o4);Pge=n(e$e,"STRONG",{});var Aht=s(Pge);XNo=r(Aht,"data2vec-text"),Aht.forEach(t),zNo=r(e$e," \u2014 "),RO=n(e$e,"A",{href:!0});var Lht=s(RO);WNo=r(Lht,"Data2VecTextForMultipleChoice"),Lht.forEach(t),QNo=r(e$e," (Data2VecText model)"),e$e.forEach(t),HNo=i(ee),r4=n(ee,"LI",{});var o$e=s(r4);Bge=n(o$e,"STRONG",{});var yht=s(Bge);UNo=r(yht,"deberta-v2"),yht.forEach(t),JNo=r(o$e," \u2014 "),PO=n(o$e,"A",{href:!0});var xht=s(PO);YNo=r(xht,"DebertaV2ForMultipleChoice"),xht.forEach(t),KNo=r(o$e," (DeBERTa-v2 model)"),o$e.forEach(t),ZNo=i(ee),t4=n(ee,"LI",{});var r$e=s(t4);Ige=n(r$e,"STRONG",{});var $ht=s(Ige);eqo=r($ht,"distilbert"),$ht.forEach(t),oqo=r(r$e," \u2014 "),BO=n(r$e,"A",{href:!0});var kht=s(BO);rqo=r(kht,"DistilBertForMultipleChoice"),kht.forEach(t),tqo=r(r$e," (DistilBERT model)"),r$e.forEach(t),aqo=i(ee),a4=n(ee,"LI",{});var t$e=s(a4);Nge=n(t$e,"STRONG",{});var Sht=s(Nge);nqo=r(Sht,"electra"),Sht.forEach(t),sqo=r(t$e," \u2014 "),IO=n(t$e,"A",{href:!0});var Rht=s(IO);lqo=r(Rht,"ElectraForMultipleChoice"),Rht.forEach(t),iqo=r(t$e," (ELECTRA model)"),t$e.forEach(t),dqo=i(ee),n4=n(ee,"LI",{});var a$e=s(n4);qge=n(a$e,"STRONG",{});var Pht=s(qge);cqo=r(Pht,"flaubert"),Pht.forEach(t),fqo=r(a$e," \u2014 "),NO=n(a$e,"A",{href:!0});var Bht=s(NO);mqo=r(Bht,"FlaubertForMultipleChoice"),Bht.forEach(t),gqo=r(a$e," (FlauBERT model)"),a$e.forEach(t),hqo=i(ee),s4=n(ee,"LI",{});var n$e=s(s4);jge=n(n$e,"STRONG",{});var Iht=s(jge);pqo=r(Iht,"fnet"),Iht.forEach(t),_qo=r(n$e," \u2014 "),qO=n(n$e,"A",{href:!0});var Nht=s(qO);uqo=r(Nht,"FNetForMultipleChoice"),Nht.forEach(t),bqo=r(n$e," (FNet model)"),n$e.forEach(t),vqo=i(ee),l4=n(ee,"LI",{});var s$e=s(l4);Dge=n(s$e,"STRONG",{});var qht=s(Dge);Fqo=r(qht,"funnel"),qht.forEach(t),Tqo=r(s$e," \u2014 "),jO=n(s$e,"A",{href:!0});var jht=s(jO);Mqo=r(jht,"FunnelForMultipleChoice"),jht.forEach(t),Eqo=r(s$e," (Funnel Transformer model)"),s$e.forEach(t),Cqo=i(ee),i4=n(ee,"LI",{});var l$e=s(i4);Gge=n(l$e,"STRONG",{});var Dht=s(Gge);wqo=r(Dht,"ibert"),Dht.forEach(t),Aqo=r(l$e," \u2014 "),DO=n(l$e,"A",{href:!0});var Ght=s(DO);Lqo=r(Ght,"IBertForMultipleChoice"),Ght.forEach(t),yqo=r(l$e," (I-BERT model)"),l$e.forEach(t),xqo=i(ee),d4=n(ee,"LI",{});var i$e=s(d4);Oge=n(i$e,"STRONG",{});var Oht=s(Oge);$qo=r(Oht,"longformer"),Oht.forEach(t),kqo=r(i$e," \u2014 "),GO=n(i$e,"A",{href:!0});var Vht=s(GO);Sqo=r(Vht,"LongformerForMultipleChoice"),Vht.forEach(t),Rqo=r(i$e," (Longformer model)"),i$e.forEach(t),Pqo=i(ee),c4=n(ee,"LI",{});var d$e=s(c4);Vge=n(d$e,"STRONG",{});var Xht=s(Vge);Bqo=r(Xht,"megatron-bert"),Xht.forEach(t),Iqo=r(d$e," \u2014 "),OO=n(d$e,"A",{href:!0});var zht=s(OO);Nqo=r(zht,"MegatronBertForMultipleChoice"),zht.forEach(t),qqo=r(d$e," (Megatron-BERT model)"),d$e.forEach(t),jqo=i(ee),f4=n(ee,"LI",{});var c$e=s(f4);Xge=n(c$e,"STRONG",{});var Wht=s(Xge);Dqo=r(Wht,"mobilebert"),Wht.forEach(t),Gqo=r(c$e," \u2014 "),VO=n(c$e,"A",{href:!0});var Qht=s(VO);Oqo=r(Qht,"MobileBertForMultipleChoice"),Qht.forEach(t),Vqo=r(c$e," (MobileBERT model)"),c$e.forEach(t),Xqo=i(ee),m4=n(ee,"LI",{});var f$e=s(m4);zge=n(f$e,"STRONG",{});var Hht=s(zge);zqo=r(Hht,"mpnet"),Hht.forEach(t),Wqo=r(f$e," \u2014 "),XO=n(f$e,"A",{href:!0});var Uht=s(XO);Qqo=r(Uht,"MPNetForMultipleChoice"),Uht.forEach(t),Hqo=r(f$e," (MPNet model)"),f$e.forEach(t),Uqo=i(ee),g4=n(ee,"LI",{});var m$e=s(g4);Wge=n(m$e,"STRONG",{});var Jht=s(Wge);Jqo=r(Jht,"nystromformer"),Jht.forEach(t),Yqo=r(m$e," \u2014 "),zO=n(m$e,"A",{href:!0});var Yht=s(zO);Kqo=r(Yht,"NystromformerForMultipleChoice"),Yht.forEach(t),Zqo=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),ejo=i(ee),h4=n(ee,"LI",{});var g$e=s(h4);Qge=n(g$e,"STRONG",{});var Kht=s(Qge);ojo=r(Kht,"qdqbert"),Kht.forEach(t),rjo=r(g$e," \u2014 "),WO=n(g$e,"A",{href:!0});var Zht=s(WO);tjo=r(Zht,"QDQBertForMultipleChoice"),Zht.forEach(t),ajo=r(g$e," (QDQBert model)"),g$e.forEach(t),njo=i(ee),p4=n(ee,"LI",{});var h$e=s(p4);Hge=n(h$e,"STRONG",{});var ept=s(Hge);sjo=r(ept,"rembert"),ept.forEach(t),ljo=r(h$e," \u2014 "),QO=n(h$e,"A",{href:!0});var opt=s(QO);ijo=r(opt,"RemBertForMultipleChoice"),opt.forEach(t),djo=r(h$e," (RemBERT model)"),h$e.forEach(t),cjo=i(ee),_4=n(ee,"LI",{});var p$e=s(_4);Uge=n(p$e,"STRONG",{});var rpt=s(Uge);fjo=r(rpt,"roberta"),rpt.forEach(t),mjo=r(p$e," \u2014 "),HO=n(p$e,"A",{href:!0});var tpt=s(HO);gjo=r(tpt,"RobertaForMultipleChoice"),tpt.forEach(t),hjo=r(p$e," (RoBERTa model)"),p$e.forEach(t),pjo=i(ee),u4=n(ee,"LI",{});var _$e=s(u4);Jge=n(_$e,"STRONG",{});var apt=s(Jge);_jo=r(apt,"roformer"),apt.forEach(t),ujo=r(_$e," \u2014 "),UO=n(_$e,"A",{href:!0});var npt=s(UO);bjo=r(npt,"RoFormerForMultipleChoice"),npt.forEach(t),vjo=r(_$e," (RoFormer model)"),_$e.forEach(t),Fjo=i(ee),b4=n(ee,"LI",{});var u$e=s(b4);Yge=n(u$e,"STRONG",{});var spt=s(Yge);Tjo=r(spt,"squeezebert"),spt.forEach(t),Mjo=r(u$e," \u2014 "),JO=n(u$e,"A",{href:!0});var lpt=s(JO);Ejo=r(lpt,"SqueezeBertForMultipleChoice"),lpt.forEach(t),Cjo=r(u$e," (SqueezeBERT model)"),u$e.forEach(t),wjo=i(ee),v4=n(ee,"LI",{});var b$e=s(v4);Kge=n(b$e,"STRONG",{});var ipt=s(Kge);Ajo=r(ipt,"xlm"),ipt.forEach(t),Ljo=r(b$e," \u2014 "),YO=n(b$e,"A",{href:!0});var dpt=s(YO);yjo=r(dpt,"XLMForMultipleChoice"),dpt.forEach(t),xjo=r(b$e," (XLM model)"),b$e.forEach(t),$jo=i(ee),F4=n(ee,"LI",{});var v$e=s(F4);Zge=n(v$e,"STRONG",{});var cpt=s(Zge);kjo=r(cpt,"xlm-roberta"),cpt.forEach(t),Sjo=r(v$e," \u2014 "),KO=n(v$e,"A",{href:!0});var fpt=s(KO);Rjo=r(fpt,"XLMRobertaForMultipleChoice"),fpt.forEach(t),Pjo=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),Bjo=i(ee),T4=n(ee,"LI",{});var F$e=s(T4);ehe=n(F$e,"STRONG",{});var mpt=s(ehe);Ijo=r(mpt,"xlm-roberta-xl"),mpt.forEach(t),Njo=r(F$e," \u2014 "),ZO=n(F$e,"A",{href:!0});var gpt=s(ZO);qjo=r(gpt,"XLMRobertaXLForMultipleChoice"),gpt.forEach(t),jjo=r(F$e," (XLM-RoBERTa-XL model)"),F$e.forEach(t),Djo=i(ee),M4=n(ee,"LI",{});var T$e=s(M4);ohe=n(T$e,"STRONG",{});var hpt=s(ohe);Gjo=r(hpt,"xlnet"),hpt.forEach(t),Ojo=r(T$e," \u2014 "),eV=n(T$e,"A",{href:!0});var ppt=s(eV);Vjo=r(ppt,"XLNetForMultipleChoice"),ppt.forEach(t),Xjo=r(T$e," (XLNet model)"),T$e.forEach(t),zjo=i(ee),E4=n(ee,"LI",{});var M$e=s(E4);rhe=n(M$e,"STRONG",{});var _pt=s(rhe);Wjo=r(_pt,"yoso"),_pt.forEach(t),Qjo=r(M$e," \u2014 "),oV=n(M$e,"A",{href:!0});var upt=s(oV);Hjo=r(upt,"YosoForMultipleChoice"),upt.forEach(t),Ujo=r(M$e," (YOSO model)"),M$e.forEach(t),ee.forEach(t),Jjo=i(ia),C4=n(ia,"P",{});var E$e=s(C4);Yjo=r(E$e,"The model is set in evaluation mode by default using "),the=n(E$e,"CODE",{});var bpt=s(the);Kjo=r(bpt,"model.eval()"),bpt.forEach(t),Zjo=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(E$e,"CODE",{});var vpt=s(ahe);eDo=r(vpt,"model.train()"),vpt.forEach(t),E$e.forEach(t),oDo=i(ia),T(w4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),yje=i(f),Hi=n(f,"H2",{class:!0});var SGe=s(Hi);A4=n(SGe,"A",{id:!0,class:!0,href:!0});var Fpt=s(A4);nhe=n(Fpt,"SPAN",{});var Tpt=s(nhe);T(HL.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),rDo=i(SGe),she=n(SGe,"SPAN",{});var Mpt=s(she);tDo=r(Mpt,"AutoModelForNextSentencePrediction"),Mpt.forEach(t),SGe.forEach(t),xje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(UL.$$.fragment,Us),aDo=i(Us),Ui=n(Us,"P",{});var nee=s(Ui);nDo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rV=n(nee,"A",{href:!0});var Ept=s(rV);sDo=r(Ept,"from_pretrained()"),Ept.forEach(t),lDo=r(nee," class method or the "),tV=n(nee,"A",{href:!0});var Cpt=s(tV);iDo=r(Cpt,"from_config()"),Cpt.forEach(t),dDo=r(nee,` class
method.`),nee.forEach(t),cDo=i(Us),JL=n(Us,"P",{});var RGe=s(JL);fDo=r(RGe,"This class cannot be instantiated directly using "),lhe=n(RGe,"CODE",{});var wpt=s(lhe);mDo=r(wpt,"__init__()"),wpt.forEach(t),gDo=r(RGe," (throws an error)."),RGe.forEach(t),hDo=i(Us),ft=n(Us,"DIV",{class:!0});var sA=s(ft);T(YL.$$.fragment,sA),pDo=i(sA),ihe=n(sA,"P",{});var Apt=s(ihe);_Do=r(Apt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Apt.forEach(t),uDo=i(sA),Ji=n(sA,"P",{});var see=s(Ji);bDo=r(see,`Note:
Loading a model from its configuration file does `),dhe=n(see,"STRONG",{});var Lpt=s(dhe);vDo=r(Lpt,"not"),Lpt.forEach(t),FDo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(see,"A",{href:!0});var ypt=s(aV);TDo=r(ypt,"from_pretrained()"),ypt.forEach(t),MDo=r(see," to load the model weights."),see.forEach(t),EDo=i(sA),T(L4.$$.fragment,sA),sA.forEach(t),CDo=i(Us),to=n(Us,"DIV",{class:!0});var da=s(to);T(KL.$$.fragment,da),wDo=i(da),che=n(da,"P",{});var xpt=s(che);ADo=r(xpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xpt.forEach(t),LDo=i(da),Ia=n(da,"P",{});var lA=s(Ia);yDo=r(lA,"The model class to instantiate is selected based on the "),fhe=n(lA,"CODE",{});var $pt=s(fhe);xDo=r($pt,"model_type"),$pt.forEach(t),$Do=r(lA,` property of the config object (either
passed as an argument or loaded from `),mhe=n(lA,"CODE",{});var kpt=s(mhe);kDo=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),SDo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(lA,"CODE",{});var Spt=s(ghe);RDo=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),PDo=r(lA,":"),lA.forEach(t),BDo=i(da),Yr=n(da,"UL",{});var Js=s(Yr);y4=n(Js,"LI",{});var C$e=s(y4);hhe=n(C$e,"STRONG",{});var Rpt=s(hhe);IDo=r(Rpt,"bert"),Rpt.forEach(t),NDo=r(C$e," \u2014 "),nV=n(C$e,"A",{href:!0});var Ppt=s(nV);qDo=r(Ppt,"BertForNextSentencePrediction"),Ppt.forEach(t),jDo=r(C$e," (BERT model)"),C$e.forEach(t),DDo=i(Js),x4=n(Js,"LI",{});var w$e=s(x4);phe=n(w$e,"STRONG",{});var Bpt=s(phe);GDo=r(Bpt,"fnet"),Bpt.forEach(t),ODo=r(w$e," \u2014 "),sV=n(w$e,"A",{href:!0});var Ipt=s(sV);VDo=r(Ipt,"FNetForNextSentencePrediction"),Ipt.forEach(t),XDo=r(w$e," (FNet model)"),w$e.forEach(t),zDo=i(Js),$4=n(Js,"LI",{});var A$e=s($4);_he=n(A$e,"STRONG",{});var Npt=s(_he);WDo=r(Npt,"megatron-bert"),Npt.forEach(t),QDo=r(A$e," \u2014 "),lV=n(A$e,"A",{href:!0});var qpt=s(lV);HDo=r(qpt,"MegatronBertForNextSentencePrediction"),qpt.forEach(t),UDo=r(A$e," (Megatron-BERT model)"),A$e.forEach(t),JDo=i(Js),k4=n(Js,"LI",{});var L$e=s(k4);uhe=n(L$e,"STRONG",{});var jpt=s(uhe);YDo=r(jpt,"mobilebert"),jpt.forEach(t),KDo=r(L$e," \u2014 "),iV=n(L$e,"A",{href:!0});var Dpt=s(iV);ZDo=r(Dpt,"MobileBertForNextSentencePrediction"),Dpt.forEach(t),eGo=r(L$e," (MobileBERT model)"),L$e.forEach(t),oGo=i(Js),S4=n(Js,"LI",{});var y$e=s(S4);bhe=n(y$e,"STRONG",{});var Gpt=s(bhe);rGo=r(Gpt,"qdqbert"),Gpt.forEach(t),tGo=r(y$e," \u2014 "),dV=n(y$e,"A",{href:!0});var Opt=s(dV);aGo=r(Opt,"QDQBertForNextSentencePrediction"),Opt.forEach(t),nGo=r(y$e," (QDQBert model)"),y$e.forEach(t),Js.forEach(t),sGo=i(da),R4=n(da,"P",{});var x$e=s(R4);lGo=r(x$e,"The model is set in evaluation mode by default using "),vhe=n(x$e,"CODE",{});var Vpt=s(vhe);iGo=r(Vpt,"model.eval()"),Vpt.forEach(t),dGo=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(x$e,"CODE",{});var Xpt=s(Fhe);cGo=r(Xpt,"model.train()"),Xpt.forEach(t),x$e.forEach(t),fGo=i(da),T(P4.$$.fragment,da),da.forEach(t),Us.forEach(t),$je=i(f),Yi=n(f,"H2",{class:!0});var PGe=s(Yi);B4=n(PGe,"A",{id:!0,class:!0,href:!0});var zpt=s(B4);The=n(zpt,"SPAN",{});var Wpt=s(The);T(ZL.$$.fragment,Wpt),Wpt.forEach(t),zpt.forEach(t),mGo=i(PGe),Mhe=n(PGe,"SPAN",{});var Qpt=s(Mhe);gGo=r(Qpt,"AutoModelForTokenClassification"),Qpt.forEach(t),PGe.forEach(t),kje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(ey.$$.fragment,Ys),hGo=i(Ys),Ki=n(Ys,"P",{});var lee=s(Ki);pGo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cV=n(lee,"A",{href:!0});var Hpt=s(cV);_Go=r(Hpt,"from_pretrained()"),Hpt.forEach(t),uGo=r(lee," class method or the "),fV=n(lee,"A",{href:!0});var Upt=s(fV);bGo=r(Upt,"from_config()"),Upt.forEach(t),vGo=r(lee,` class
method.`),lee.forEach(t),FGo=i(Ys),oy=n(Ys,"P",{});var BGe=s(oy);TGo=r(BGe,"This class cannot be instantiated directly using "),Ehe=n(BGe,"CODE",{});var Jpt=s(Ehe);MGo=r(Jpt,"__init__()"),Jpt.forEach(t),EGo=r(BGe," (throws an error)."),BGe.forEach(t),CGo=i(Ys),mt=n(Ys,"DIV",{class:!0});var iA=s(mt);T(ry.$$.fragment,iA),wGo=i(iA),Che=n(iA,"P",{});var Ypt=s(Che);AGo=r(Ypt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ypt.forEach(t),LGo=i(iA),Zi=n(iA,"P",{});var iee=s(Zi);yGo=r(iee,`Note:
Loading a model from its configuration file does `),whe=n(iee,"STRONG",{});var Kpt=s(whe);xGo=r(Kpt,"not"),Kpt.forEach(t),$Go=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(iee,"A",{href:!0});var Zpt=s(mV);kGo=r(Zpt,"from_pretrained()"),Zpt.forEach(t),SGo=r(iee," to load the model weights."),iee.forEach(t),RGo=i(iA),T(I4.$$.fragment,iA),iA.forEach(t),PGo=i(Ys),ao=n(Ys,"DIV",{class:!0});var ca=s(ao);T(ty.$$.fragment,ca),BGo=i(ca),Ahe=n(ca,"P",{});var e_t=s(Ahe);IGo=r(e_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e_t.forEach(t),NGo=i(ca),Na=n(ca,"P",{});var dA=s(Na);qGo=r(dA,"The model class to instantiate is selected based on the "),Lhe=n(dA,"CODE",{});var o_t=s(Lhe);jGo=r(o_t,"model_type"),o_t.forEach(t),DGo=r(dA,` property of the config object (either
passed as an argument or loaded from `),yhe=n(dA,"CODE",{});var r_t=s(yhe);GGo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),OGo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(dA,"CODE",{});var t_t=s(xhe);VGo=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),XGo=r(dA,":"),dA.forEach(t),zGo=i(ca),U=n(ca,"UL",{});var J=s(U);N4=n(J,"LI",{});var $$e=s(N4);$he=n($$e,"STRONG",{});var a_t=s($he);WGo=r(a_t,"albert"),a_t.forEach(t),QGo=r($$e," \u2014 "),gV=n($$e,"A",{href:!0});var n_t=s(gV);HGo=r(n_t,"AlbertForTokenClassification"),n_t.forEach(t),UGo=r($$e," (ALBERT model)"),$$e.forEach(t),JGo=i(J),q4=n(J,"LI",{});var k$e=s(q4);khe=n(k$e,"STRONG",{});var s_t=s(khe);YGo=r(s_t,"bert"),s_t.forEach(t),KGo=r(k$e," \u2014 "),hV=n(k$e,"A",{href:!0});var l_t=s(hV);ZGo=r(l_t,"BertForTokenClassification"),l_t.forEach(t),eOo=r(k$e," (BERT model)"),k$e.forEach(t),oOo=i(J),j4=n(J,"LI",{});var S$e=s(j4);She=n(S$e,"STRONG",{});var i_t=s(She);rOo=r(i_t,"big_bird"),i_t.forEach(t),tOo=r(S$e," \u2014 "),pV=n(S$e,"A",{href:!0});var d_t=s(pV);aOo=r(d_t,"BigBirdForTokenClassification"),d_t.forEach(t),nOo=r(S$e," (BigBird model)"),S$e.forEach(t),sOo=i(J),D4=n(J,"LI",{});var R$e=s(D4);Rhe=n(R$e,"STRONG",{});var c_t=s(Rhe);lOo=r(c_t,"camembert"),c_t.forEach(t),iOo=r(R$e," \u2014 "),_V=n(R$e,"A",{href:!0});var f_t=s(_V);dOo=r(f_t,"CamembertForTokenClassification"),f_t.forEach(t),cOo=r(R$e," (CamemBERT model)"),R$e.forEach(t),fOo=i(J),G4=n(J,"LI",{});var P$e=s(G4);Phe=n(P$e,"STRONG",{});var m_t=s(Phe);mOo=r(m_t,"canine"),m_t.forEach(t),gOo=r(P$e," \u2014 "),uV=n(P$e,"A",{href:!0});var g_t=s(uV);hOo=r(g_t,"CanineForTokenClassification"),g_t.forEach(t),pOo=r(P$e," (CANINE model)"),P$e.forEach(t),_Oo=i(J),O4=n(J,"LI",{});var B$e=s(O4);Bhe=n(B$e,"STRONG",{});var h_t=s(Bhe);uOo=r(h_t,"convbert"),h_t.forEach(t),bOo=r(B$e," \u2014 "),bV=n(B$e,"A",{href:!0});var p_t=s(bV);vOo=r(p_t,"ConvBertForTokenClassification"),p_t.forEach(t),FOo=r(B$e," (ConvBERT model)"),B$e.forEach(t),TOo=i(J),V4=n(J,"LI",{});var I$e=s(V4);Ihe=n(I$e,"STRONG",{});var __t=s(Ihe);MOo=r(__t,"data2vec-text"),__t.forEach(t),EOo=r(I$e," \u2014 "),vV=n(I$e,"A",{href:!0});var u_t=s(vV);COo=r(u_t,"Data2VecTextForTokenClassification"),u_t.forEach(t),wOo=r(I$e," (Data2VecText model)"),I$e.forEach(t),AOo=i(J),X4=n(J,"LI",{});var N$e=s(X4);Nhe=n(N$e,"STRONG",{});var b_t=s(Nhe);LOo=r(b_t,"deberta"),b_t.forEach(t),yOo=r(N$e," \u2014 "),FV=n(N$e,"A",{href:!0});var v_t=s(FV);xOo=r(v_t,"DebertaForTokenClassification"),v_t.forEach(t),$Oo=r(N$e," (DeBERTa model)"),N$e.forEach(t),kOo=i(J),z4=n(J,"LI",{});var q$e=s(z4);qhe=n(q$e,"STRONG",{});var F_t=s(qhe);SOo=r(F_t,"deberta-v2"),F_t.forEach(t),ROo=r(q$e," \u2014 "),TV=n(q$e,"A",{href:!0});var T_t=s(TV);POo=r(T_t,"DebertaV2ForTokenClassification"),T_t.forEach(t),BOo=r(q$e," (DeBERTa-v2 model)"),q$e.forEach(t),IOo=i(J),W4=n(J,"LI",{});var j$e=s(W4);jhe=n(j$e,"STRONG",{});var M_t=s(jhe);NOo=r(M_t,"distilbert"),M_t.forEach(t),qOo=r(j$e," \u2014 "),MV=n(j$e,"A",{href:!0});var E_t=s(MV);jOo=r(E_t,"DistilBertForTokenClassification"),E_t.forEach(t),DOo=r(j$e," (DistilBERT model)"),j$e.forEach(t),GOo=i(J),Q4=n(J,"LI",{});var D$e=s(Q4);Dhe=n(D$e,"STRONG",{});var C_t=s(Dhe);OOo=r(C_t,"electra"),C_t.forEach(t),VOo=r(D$e," \u2014 "),EV=n(D$e,"A",{href:!0});var w_t=s(EV);XOo=r(w_t,"ElectraForTokenClassification"),w_t.forEach(t),zOo=r(D$e," (ELECTRA model)"),D$e.forEach(t),WOo=i(J),H4=n(J,"LI",{});var G$e=s(H4);Ghe=n(G$e,"STRONG",{});var A_t=s(Ghe);QOo=r(A_t,"flaubert"),A_t.forEach(t),HOo=r(G$e," \u2014 "),CV=n(G$e,"A",{href:!0});var L_t=s(CV);UOo=r(L_t,"FlaubertForTokenClassification"),L_t.forEach(t),JOo=r(G$e," (FlauBERT model)"),G$e.forEach(t),YOo=i(J),U4=n(J,"LI",{});var O$e=s(U4);Ohe=n(O$e,"STRONG",{});var y_t=s(Ohe);KOo=r(y_t,"fnet"),y_t.forEach(t),ZOo=r(O$e," \u2014 "),wV=n(O$e,"A",{href:!0});var x_t=s(wV);eVo=r(x_t,"FNetForTokenClassification"),x_t.forEach(t),oVo=r(O$e," (FNet model)"),O$e.forEach(t),rVo=i(J),J4=n(J,"LI",{});var V$e=s(J4);Vhe=n(V$e,"STRONG",{});var $_t=s(Vhe);tVo=r($_t,"funnel"),$_t.forEach(t),aVo=r(V$e," \u2014 "),AV=n(V$e,"A",{href:!0});var k_t=s(AV);nVo=r(k_t,"FunnelForTokenClassification"),k_t.forEach(t),sVo=r(V$e," (Funnel Transformer model)"),V$e.forEach(t),lVo=i(J),Y4=n(J,"LI",{});var X$e=s(Y4);Xhe=n(X$e,"STRONG",{});var S_t=s(Xhe);iVo=r(S_t,"gpt2"),S_t.forEach(t),dVo=r(X$e," \u2014 "),LV=n(X$e,"A",{href:!0});var R_t=s(LV);cVo=r(R_t,"GPT2ForTokenClassification"),R_t.forEach(t),fVo=r(X$e," (OpenAI GPT-2 model)"),X$e.forEach(t),mVo=i(J),K4=n(J,"LI",{});var z$e=s(K4);zhe=n(z$e,"STRONG",{});var P_t=s(zhe);gVo=r(P_t,"ibert"),P_t.forEach(t),hVo=r(z$e," \u2014 "),yV=n(z$e,"A",{href:!0});var B_t=s(yV);pVo=r(B_t,"IBertForTokenClassification"),B_t.forEach(t),_Vo=r(z$e," (I-BERT model)"),z$e.forEach(t),uVo=i(J),Z4=n(J,"LI",{});var W$e=s(Z4);Whe=n(W$e,"STRONG",{});var I_t=s(Whe);bVo=r(I_t,"layoutlm"),I_t.forEach(t),vVo=r(W$e," \u2014 "),xV=n(W$e,"A",{href:!0});var N_t=s(xV);FVo=r(N_t,"LayoutLMForTokenClassification"),N_t.forEach(t),TVo=r(W$e," (LayoutLM model)"),W$e.forEach(t),MVo=i(J),ev=n(J,"LI",{});var Q$e=s(ev);Qhe=n(Q$e,"STRONG",{});var q_t=s(Qhe);EVo=r(q_t,"layoutlmv2"),q_t.forEach(t),CVo=r(Q$e," \u2014 "),$V=n(Q$e,"A",{href:!0});var j_t=s($V);wVo=r(j_t,"LayoutLMv2ForTokenClassification"),j_t.forEach(t),AVo=r(Q$e," (LayoutLMv2 model)"),Q$e.forEach(t),LVo=i(J),ov=n(J,"LI",{});var H$e=s(ov);Hhe=n(H$e,"STRONG",{});var D_t=s(Hhe);yVo=r(D_t,"layoutlmv3"),D_t.forEach(t),xVo=r(H$e," \u2014 "),kV=n(H$e,"A",{href:!0});var G_t=s(kV);$Vo=r(G_t,"LayoutLMv3ForTokenClassification"),G_t.forEach(t),kVo=r(H$e," (LayoutLMv3 model)"),H$e.forEach(t),SVo=i(J),rv=n(J,"LI",{});var U$e=s(rv);Uhe=n(U$e,"STRONG",{});var O_t=s(Uhe);RVo=r(O_t,"longformer"),O_t.forEach(t),PVo=r(U$e," \u2014 "),SV=n(U$e,"A",{href:!0});var V_t=s(SV);BVo=r(V_t,"LongformerForTokenClassification"),V_t.forEach(t),IVo=r(U$e," (Longformer model)"),U$e.forEach(t),NVo=i(J),tv=n(J,"LI",{});var J$e=s(tv);Jhe=n(J$e,"STRONG",{});var X_t=s(Jhe);qVo=r(X_t,"megatron-bert"),X_t.forEach(t),jVo=r(J$e," \u2014 "),RV=n(J$e,"A",{href:!0});var z_t=s(RV);DVo=r(z_t,"MegatronBertForTokenClassification"),z_t.forEach(t),GVo=r(J$e," (Megatron-BERT model)"),J$e.forEach(t),OVo=i(J),av=n(J,"LI",{});var Y$e=s(av);Yhe=n(Y$e,"STRONG",{});var W_t=s(Yhe);VVo=r(W_t,"mobilebert"),W_t.forEach(t),XVo=r(Y$e," \u2014 "),PV=n(Y$e,"A",{href:!0});var Q_t=s(PV);zVo=r(Q_t,"MobileBertForTokenClassification"),Q_t.forEach(t),WVo=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),QVo=i(J),nv=n(J,"LI",{});var K$e=s(nv);Khe=n(K$e,"STRONG",{});var H_t=s(Khe);HVo=r(H_t,"mpnet"),H_t.forEach(t),UVo=r(K$e," \u2014 "),BV=n(K$e,"A",{href:!0});var U_t=s(BV);JVo=r(U_t,"MPNetForTokenClassification"),U_t.forEach(t),YVo=r(K$e," (MPNet model)"),K$e.forEach(t),KVo=i(J),sv=n(J,"LI",{});var Z$e=s(sv);Zhe=n(Z$e,"STRONG",{});var J_t=s(Zhe);ZVo=r(J_t,"nystromformer"),J_t.forEach(t),eXo=r(Z$e," \u2014 "),IV=n(Z$e,"A",{href:!0});var Y_t=s(IV);oXo=r(Y_t,"NystromformerForTokenClassification"),Y_t.forEach(t),rXo=r(Z$e," (Nystr\xF6mformer model)"),Z$e.forEach(t),tXo=i(J),lv=n(J,"LI",{});var eke=s(lv);epe=n(eke,"STRONG",{});var K_t=s(epe);aXo=r(K_t,"qdqbert"),K_t.forEach(t),nXo=r(eke," \u2014 "),NV=n(eke,"A",{href:!0});var Z_t=s(NV);sXo=r(Z_t,"QDQBertForTokenClassification"),Z_t.forEach(t),lXo=r(eke," (QDQBert model)"),eke.forEach(t),iXo=i(J),iv=n(J,"LI",{});var oke=s(iv);ope=n(oke,"STRONG",{});var eut=s(ope);dXo=r(eut,"rembert"),eut.forEach(t),cXo=r(oke," \u2014 "),qV=n(oke,"A",{href:!0});var out=s(qV);fXo=r(out,"RemBertForTokenClassification"),out.forEach(t),mXo=r(oke," (RemBERT model)"),oke.forEach(t),gXo=i(J),dv=n(J,"LI",{});var rke=s(dv);rpe=n(rke,"STRONG",{});var rut=s(rpe);hXo=r(rut,"roberta"),rut.forEach(t),pXo=r(rke," \u2014 "),jV=n(rke,"A",{href:!0});var tut=s(jV);_Xo=r(tut,"RobertaForTokenClassification"),tut.forEach(t),uXo=r(rke," (RoBERTa model)"),rke.forEach(t),bXo=i(J),cv=n(J,"LI",{});var tke=s(cv);tpe=n(tke,"STRONG",{});var aut=s(tpe);vXo=r(aut,"roformer"),aut.forEach(t),FXo=r(tke," \u2014 "),DV=n(tke,"A",{href:!0});var nut=s(DV);TXo=r(nut,"RoFormerForTokenClassification"),nut.forEach(t),MXo=r(tke," (RoFormer model)"),tke.forEach(t),EXo=i(J),fv=n(J,"LI",{});var ake=s(fv);ape=n(ake,"STRONG",{});var sut=s(ape);CXo=r(sut,"squeezebert"),sut.forEach(t),wXo=r(ake," \u2014 "),GV=n(ake,"A",{href:!0});var lut=s(GV);AXo=r(lut,"SqueezeBertForTokenClassification"),lut.forEach(t),LXo=r(ake," (SqueezeBERT model)"),ake.forEach(t),yXo=i(J),mv=n(J,"LI",{});var nke=s(mv);npe=n(nke,"STRONG",{});var iut=s(npe);xXo=r(iut,"xlm"),iut.forEach(t),$Xo=r(nke," \u2014 "),OV=n(nke,"A",{href:!0});var dut=s(OV);kXo=r(dut,"XLMForTokenClassification"),dut.forEach(t),SXo=r(nke," (XLM model)"),nke.forEach(t),RXo=i(J),gv=n(J,"LI",{});var ske=s(gv);spe=n(ske,"STRONG",{});var cut=s(spe);PXo=r(cut,"xlm-roberta"),cut.forEach(t),BXo=r(ske," \u2014 "),VV=n(ske,"A",{href:!0});var fut=s(VV);IXo=r(fut,"XLMRobertaForTokenClassification"),fut.forEach(t),NXo=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),qXo=i(J),hv=n(J,"LI",{});var lke=s(hv);lpe=n(lke,"STRONG",{});var mut=s(lpe);jXo=r(mut,"xlm-roberta-xl"),mut.forEach(t),DXo=r(lke," \u2014 "),XV=n(lke,"A",{href:!0});var gut=s(XV);GXo=r(gut,"XLMRobertaXLForTokenClassification"),gut.forEach(t),OXo=r(lke," (XLM-RoBERTa-XL model)"),lke.forEach(t),VXo=i(J),pv=n(J,"LI",{});var ike=s(pv);ipe=n(ike,"STRONG",{});var hut=s(ipe);XXo=r(hut,"xlnet"),hut.forEach(t),zXo=r(ike," \u2014 "),zV=n(ike,"A",{href:!0});var put=s(zV);WXo=r(put,"XLNetForTokenClassification"),put.forEach(t),QXo=r(ike," (XLNet model)"),ike.forEach(t),HXo=i(J),_v=n(J,"LI",{});var dke=s(_v);dpe=n(dke,"STRONG",{});var _ut=s(dpe);UXo=r(_ut,"yoso"),_ut.forEach(t),JXo=r(dke," \u2014 "),WV=n(dke,"A",{href:!0});var uut=s(WV);YXo=r(uut,"YosoForTokenClassification"),uut.forEach(t),KXo=r(dke," (YOSO model)"),dke.forEach(t),J.forEach(t),ZXo=i(ca),uv=n(ca,"P",{});var cke=s(uv);ezo=r(cke,"The model is set in evaluation mode by default using "),cpe=n(cke,"CODE",{});var but=s(cpe);ozo=r(but,"model.eval()"),but.forEach(t),rzo=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(cke,"CODE",{});var vut=s(fpe);tzo=r(vut,"model.train()"),vut.forEach(t),cke.forEach(t),azo=i(ca),T(bv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Sje=i(f),ed=n(f,"H2",{class:!0});var IGe=s(ed);vv=n(IGe,"A",{id:!0,class:!0,href:!0});var Fut=s(vv);mpe=n(Fut,"SPAN",{});var Tut=s(mpe);T(ay.$$.fragment,Tut),Tut.forEach(t),Fut.forEach(t),nzo=i(IGe),gpe=n(IGe,"SPAN",{});var Mut=s(gpe);szo=r(Mut,"AutoModelForQuestionAnswering"),Mut.forEach(t),IGe.forEach(t),Rje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(ny.$$.fragment,Ks),lzo=i(Ks),od=n(Ks,"P",{});var dee=s(od);izo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QV=n(dee,"A",{href:!0});var Eut=s(QV);dzo=r(Eut,"from_pretrained()"),Eut.forEach(t),czo=r(dee," class method or the "),HV=n(dee,"A",{href:!0});var Cut=s(HV);fzo=r(Cut,"from_config()"),Cut.forEach(t),mzo=r(dee,` class
method.`),dee.forEach(t),gzo=i(Ks),sy=n(Ks,"P",{});var NGe=s(sy);hzo=r(NGe,"This class cannot be instantiated directly using "),hpe=n(NGe,"CODE",{});var wut=s(hpe);pzo=r(wut,"__init__()"),wut.forEach(t),_zo=r(NGe," (throws an error)."),NGe.forEach(t),uzo=i(Ks),gt=n(Ks,"DIV",{class:!0});var cA=s(gt);T(ly.$$.fragment,cA),bzo=i(cA),ppe=n(cA,"P",{});var Aut=s(ppe);vzo=r(Aut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Aut.forEach(t),Fzo=i(cA),rd=n(cA,"P",{});var cee=s(rd);Tzo=r(cee,`Note:
Loading a model from its configuration file does `),_pe=n(cee,"STRONG",{});var Lut=s(_pe);Mzo=r(Lut,"not"),Lut.forEach(t),Ezo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(cee,"A",{href:!0});var yut=s(UV);Czo=r(yut,"from_pretrained()"),yut.forEach(t),wzo=r(cee," to load the model weights."),cee.forEach(t),Azo=i(cA),T(Fv.$$.fragment,cA),cA.forEach(t),Lzo=i(Ks),no=n(Ks,"DIV",{class:!0});var fa=s(no);T(iy.$$.fragment,fa),yzo=i(fa),upe=n(fa,"P",{});var xut=s(upe);xzo=r(xut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xut.forEach(t),$zo=i(fa),qa=n(fa,"P",{});var fA=s(qa);kzo=r(fA,"The model class to instantiate is selected based on the "),bpe=n(fA,"CODE",{});var $ut=s(bpe);Szo=r($ut,"model_type"),$ut.forEach(t),Rzo=r(fA,` property of the config object (either
passed as an argument or loaded from `),vpe=n(fA,"CODE",{});var kut=s(vpe);Pzo=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),Bzo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(fA,"CODE",{});var Sut=s(Fpe);Izo=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),Nzo=r(fA,":"),fA.forEach(t),qzo=i(fa),V=n(fa,"UL",{});var X=s(V);Tv=n(X,"LI",{});var fke=s(Tv);Tpe=n(fke,"STRONG",{});var Rut=s(Tpe);jzo=r(Rut,"albert"),Rut.forEach(t),Dzo=r(fke," \u2014 "),JV=n(fke,"A",{href:!0});var Put=s(JV);Gzo=r(Put,"AlbertForQuestionAnswering"),Put.forEach(t),Ozo=r(fke," (ALBERT model)"),fke.forEach(t),Vzo=i(X),Mv=n(X,"LI",{});var mke=s(Mv);Mpe=n(mke,"STRONG",{});var But=s(Mpe);Xzo=r(But,"bart"),But.forEach(t),zzo=r(mke," \u2014 "),YV=n(mke,"A",{href:!0});var Iut=s(YV);Wzo=r(Iut,"BartForQuestionAnswering"),Iut.forEach(t),Qzo=r(mke," (BART model)"),mke.forEach(t),Hzo=i(X),Ev=n(X,"LI",{});var gke=s(Ev);Epe=n(gke,"STRONG",{});var Nut=s(Epe);Uzo=r(Nut,"bert"),Nut.forEach(t),Jzo=r(gke," \u2014 "),KV=n(gke,"A",{href:!0});var qut=s(KV);Yzo=r(qut,"BertForQuestionAnswering"),qut.forEach(t),Kzo=r(gke," (BERT model)"),gke.forEach(t),Zzo=i(X),Cv=n(X,"LI",{});var hke=s(Cv);Cpe=n(hke,"STRONG",{});var jut=s(Cpe);eWo=r(jut,"big_bird"),jut.forEach(t),oWo=r(hke," \u2014 "),ZV=n(hke,"A",{href:!0});var Dut=s(ZV);rWo=r(Dut,"BigBirdForQuestionAnswering"),Dut.forEach(t),tWo=r(hke," (BigBird model)"),hke.forEach(t),aWo=i(X),wv=n(X,"LI",{});var pke=s(wv);wpe=n(pke,"STRONG",{});var Gut=s(wpe);nWo=r(Gut,"bigbird_pegasus"),Gut.forEach(t),sWo=r(pke," \u2014 "),eX=n(pke,"A",{href:!0});var Out=s(eX);lWo=r(Out,"BigBirdPegasusForQuestionAnswering"),Out.forEach(t),iWo=r(pke," (BigBird-Pegasus model)"),pke.forEach(t),dWo=i(X),Av=n(X,"LI",{});var _ke=s(Av);Ape=n(_ke,"STRONG",{});var Vut=s(Ape);cWo=r(Vut,"camembert"),Vut.forEach(t),fWo=r(_ke," \u2014 "),oX=n(_ke,"A",{href:!0});var Xut=s(oX);mWo=r(Xut,"CamembertForQuestionAnswering"),Xut.forEach(t),gWo=r(_ke," (CamemBERT model)"),_ke.forEach(t),hWo=i(X),Lv=n(X,"LI",{});var uke=s(Lv);Lpe=n(uke,"STRONG",{});var zut=s(Lpe);pWo=r(zut,"canine"),zut.forEach(t),_Wo=r(uke," \u2014 "),rX=n(uke,"A",{href:!0});var Wut=s(rX);uWo=r(Wut,"CanineForQuestionAnswering"),Wut.forEach(t),bWo=r(uke," (CANINE model)"),uke.forEach(t),vWo=i(X),yv=n(X,"LI",{});var bke=s(yv);ype=n(bke,"STRONG",{});var Qut=s(ype);FWo=r(Qut,"convbert"),Qut.forEach(t),TWo=r(bke," \u2014 "),tX=n(bke,"A",{href:!0});var Hut=s(tX);MWo=r(Hut,"ConvBertForQuestionAnswering"),Hut.forEach(t),EWo=r(bke," (ConvBERT model)"),bke.forEach(t),CWo=i(X),xv=n(X,"LI",{});var vke=s(xv);xpe=n(vke,"STRONG",{});var Uut=s(xpe);wWo=r(Uut,"data2vec-text"),Uut.forEach(t),AWo=r(vke," \u2014 "),aX=n(vke,"A",{href:!0});var Jut=s(aX);LWo=r(Jut,"Data2VecTextForQuestionAnswering"),Jut.forEach(t),yWo=r(vke," (Data2VecText model)"),vke.forEach(t),xWo=i(X),$v=n(X,"LI",{});var Fke=s($v);$pe=n(Fke,"STRONG",{});var Yut=s($pe);$Wo=r(Yut,"deberta"),Yut.forEach(t),kWo=r(Fke," \u2014 "),nX=n(Fke,"A",{href:!0});var Kut=s(nX);SWo=r(Kut,"DebertaForQuestionAnswering"),Kut.forEach(t),RWo=r(Fke," (DeBERTa model)"),Fke.forEach(t),PWo=i(X),kv=n(X,"LI",{});var Tke=s(kv);kpe=n(Tke,"STRONG",{});var Zut=s(kpe);BWo=r(Zut,"deberta-v2"),Zut.forEach(t),IWo=r(Tke," \u2014 "),sX=n(Tke,"A",{href:!0});var e1t=s(sX);NWo=r(e1t,"DebertaV2ForQuestionAnswering"),e1t.forEach(t),qWo=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),jWo=i(X),Sv=n(X,"LI",{});var Mke=s(Sv);Spe=n(Mke,"STRONG",{});var o1t=s(Spe);DWo=r(o1t,"distilbert"),o1t.forEach(t),GWo=r(Mke," \u2014 "),lX=n(Mke,"A",{href:!0});var r1t=s(lX);OWo=r(r1t,"DistilBertForQuestionAnswering"),r1t.forEach(t),VWo=r(Mke," (DistilBERT model)"),Mke.forEach(t),XWo=i(X),Rv=n(X,"LI",{});var Eke=s(Rv);Rpe=n(Eke,"STRONG",{});var t1t=s(Rpe);zWo=r(t1t,"electra"),t1t.forEach(t),WWo=r(Eke," \u2014 "),iX=n(Eke,"A",{href:!0});var a1t=s(iX);QWo=r(a1t,"ElectraForQuestionAnswering"),a1t.forEach(t),HWo=r(Eke," (ELECTRA model)"),Eke.forEach(t),UWo=i(X),Pv=n(X,"LI",{});var Cke=s(Pv);Ppe=n(Cke,"STRONG",{});var n1t=s(Ppe);JWo=r(n1t,"flaubert"),n1t.forEach(t),YWo=r(Cke," \u2014 "),dX=n(Cke,"A",{href:!0});var s1t=s(dX);KWo=r(s1t,"FlaubertForQuestionAnsweringSimple"),s1t.forEach(t),ZWo=r(Cke," (FlauBERT model)"),Cke.forEach(t),eQo=i(X),Bv=n(X,"LI",{});var wke=s(Bv);Bpe=n(wke,"STRONG",{});var l1t=s(Bpe);oQo=r(l1t,"fnet"),l1t.forEach(t),rQo=r(wke," \u2014 "),cX=n(wke,"A",{href:!0});var i1t=s(cX);tQo=r(i1t,"FNetForQuestionAnswering"),i1t.forEach(t),aQo=r(wke," (FNet model)"),wke.forEach(t),nQo=i(X),Iv=n(X,"LI",{});var Ake=s(Iv);Ipe=n(Ake,"STRONG",{});var d1t=s(Ipe);sQo=r(d1t,"funnel"),d1t.forEach(t),lQo=r(Ake," \u2014 "),fX=n(Ake,"A",{href:!0});var c1t=s(fX);iQo=r(c1t,"FunnelForQuestionAnswering"),c1t.forEach(t),dQo=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),cQo=i(X),Nv=n(X,"LI",{});var Lke=s(Nv);Npe=n(Lke,"STRONG",{});var f1t=s(Npe);fQo=r(f1t,"gptj"),f1t.forEach(t),mQo=r(Lke," \u2014 "),mX=n(Lke,"A",{href:!0});var m1t=s(mX);gQo=r(m1t,"GPTJForQuestionAnswering"),m1t.forEach(t),hQo=r(Lke," (GPT-J model)"),Lke.forEach(t),pQo=i(X),qv=n(X,"LI",{});var yke=s(qv);qpe=n(yke,"STRONG",{});var g1t=s(qpe);_Qo=r(g1t,"ibert"),g1t.forEach(t),uQo=r(yke," \u2014 "),gX=n(yke,"A",{href:!0});var h1t=s(gX);bQo=r(h1t,"IBertForQuestionAnswering"),h1t.forEach(t),vQo=r(yke," (I-BERT model)"),yke.forEach(t),FQo=i(X),jv=n(X,"LI",{});var xke=s(jv);jpe=n(xke,"STRONG",{});var p1t=s(jpe);TQo=r(p1t,"layoutlmv2"),p1t.forEach(t),MQo=r(xke," \u2014 "),hX=n(xke,"A",{href:!0});var _1t=s(hX);EQo=r(_1t,"LayoutLMv2ForQuestionAnswering"),_1t.forEach(t),CQo=r(xke," (LayoutLMv2 model)"),xke.forEach(t),wQo=i(X),Dv=n(X,"LI",{});var $ke=s(Dv);Dpe=n($ke,"STRONG",{});var u1t=s(Dpe);AQo=r(u1t,"layoutlmv3"),u1t.forEach(t),LQo=r($ke," \u2014 "),pX=n($ke,"A",{href:!0});var b1t=s(pX);yQo=r(b1t,"LayoutLMv3ForQuestionAnswering"),b1t.forEach(t),xQo=r($ke," (LayoutLMv3 model)"),$ke.forEach(t),$Qo=i(X),Gv=n(X,"LI",{});var kke=s(Gv);Gpe=n(kke,"STRONG",{});var v1t=s(Gpe);kQo=r(v1t,"led"),v1t.forEach(t),SQo=r(kke," \u2014 "),_X=n(kke,"A",{href:!0});var F1t=s(_X);RQo=r(F1t,"LEDForQuestionAnswering"),F1t.forEach(t),PQo=r(kke," (LED model)"),kke.forEach(t),BQo=i(X),Ov=n(X,"LI",{});var Ske=s(Ov);Ope=n(Ske,"STRONG",{});var T1t=s(Ope);IQo=r(T1t,"longformer"),T1t.forEach(t),NQo=r(Ske," \u2014 "),uX=n(Ske,"A",{href:!0});var M1t=s(uX);qQo=r(M1t,"LongformerForQuestionAnswering"),M1t.forEach(t),jQo=r(Ske," (Longformer model)"),Ske.forEach(t),DQo=i(X),Vv=n(X,"LI",{});var Rke=s(Vv);Vpe=n(Rke,"STRONG",{});var E1t=s(Vpe);GQo=r(E1t,"lxmert"),E1t.forEach(t),OQo=r(Rke," \u2014 "),bX=n(Rke,"A",{href:!0});var C1t=s(bX);VQo=r(C1t,"LxmertForQuestionAnswering"),C1t.forEach(t),XQo=r(Rke," (LXMERT model)"),Rke.forEach(t),zQo=i(X),Xv=n(X,"LI",{});var Pke=s(Xv);Xpe=n(Pke,"STRONG",{});var w1t=s(Xpe);WQo=r(w1t,"mbart"),w1t.forEach(t),QQo=r(Pke," \u2014 "),vX=n(Pke,"A",{href:!0});var A1t=s(vX);HQo=r(A1t,"MBartForQuestionAnswering"),A1t.forEach(t),UQo=r(Pke," (mBART model)"),Pke.forEach(t),JQo=i(X),zv=n(X,"LI",{});var Bke=s(zv);zpe=n(Bke,"STRONG",{});var L1t=s(zpe);YQo=r(L1t,"megatron-bert"),L1t.forEach(t),KQo=r(Bke," \u2014 "),FX=n(Bke,"A",{href:!0});var y1t=s(FX);ZQo=r(y1t,"MegatronBertForQuestionAnswering"),y1t.forEach(t),eHo=r(Bke," (Megatron-BERT model)"),Bke.forEach(t),oHo=i(X),Wv=n(X,"LI",{});var Ike=s(Wv);Wpe=n(Ike,"STRONG",{});var x1t=s(Wpe);rHo=r(x1t,"mobilebert"),x1t.forEach(t),tHo=r(Ike," \u2014 "),TX=n(Ike,"A",{href:!0});var $1t=s(TX);aHo=r($1t,"MobileBertForQuestionAnswering"),$1t.forEach(t),nHo=r(Ike," (MobileBERT model)"),Ike.forEach(t),sHo=i(X),Qv=n(X,"LI",{});var Nke=s(Qv);Qpe=n(Nke,"STRONG",{});var k1t=s(Qpe);lHo=r(k1t,"mpnet"),k1t.forEach(t),iHo=r(Nke," \u2014 "),MX=n(Nke,"A",{href:!0});var S1t=s(MX);dHo=r(S1t,"MPNetForQuestionAnswering"),S1t.forEach(t),cHo=r(Nke," (MPNet model)"),Nke.forEach(t),fHo=i(X),Hv=n(X,"LI",{});var qke=s(Hv);Hpe=n(qke,"STRONG",{});var R1t=s(Hpe);mHo=r(R1t,"nystromformer"),R1t.forEach(t),gHo=r(qke," \u2014 "),EX=n(qke,"A",{href:!0});var P1t=s(EX);hHo=r(P1t,"NystromformerForQuestionAnswering"),P1t.forEach(t),pHo=r(qke," (Nystr\xF6mformer model)"),qke.forEach(t),_Ho=i(X),Uv=n(X,"LI",{});var jke=s(Uv);Upe=n(jke,"STRONG",{});var B1t=s(Upe);uHo=r(B1t,"qdqbert"),B1t.forEach(t),bHo=r(jke," \u2014 "),CX=n(jke,"A",{href:!0});var I1t=s(CX);vHo=r(I1t,"QDQBertForQuestionAnswering"),I1t.forEach(t),FHo=r(jke," (QDQBert model)"),jke.forEach(t),THo=i(X),Jv=n(X,"LI",{});var Dke=s(Jv);Jpe=n(Dke,"STRONG",{});var N1t=s(Jpe);MHo=r(N1t,"reformer"),N1t.forEach(t),EHo=r(Dke," \u2014 "),wX=n(Dke,"A",{href:!0});var q1t=s(wX);CHo=r(q1t,"ReformerForQuestionAnswering"),q1t.forEach(t),wHo=r(Dke," (Reformer model)"),Dke.forEach(t),AHo=i(X),Yv=n(X,"LI",{});var Gke=s(Yv);Ype=n(Gke,"STRONG",{});var j1t=s(Ype);LHo=r(j1t,"rembert"),j1t.forEach(t),yHo=r(Gke," \u2014 "),AX=n(Gke,"A",{href:!0});var D1t=s(AX);xHo=r(D1t,"RemBertForQuestionAnswering"),D1t.forEach(t),$Ho=r(Gke," (RemBERT model)"),Gke.forEach(t),kHo=i(X),Kv=n(X,"LI",{});var Oke=s(Kv);Kpe=n(Oke,"STRONG",{});var G1t=s(Kpe);SHo=r(G1t,"roberta"),G1t.forEach(t),RHo=r(Oke," \u2014 "),LX=n(Oke,"A",{href:!0});var O1t=s(LX);PHo=r(O1t,"RobertaForQuestionAnswering"),O1t.forEach(t),BHo=r(Oke," (RoBERTa model)"),Oke.forEach(t),IHo=i(X),Zv=n(X,"LI",{});var Vke=s(Zv);Zpe=n(Vke,"STRONG",{});var V1t=s(Zpe);NHo=r(V1t,"roformer"),V1t.forEach(t),qHo=r(Vke," \u2014 "),yX=n(Vke,"A",{href:!0});var X1t=s(yX);jHo=r(X1t,"RoFormerForQuestionAnswering"),X1t.forEach(t),DHo=r(Vke," (RoFormer model)"),Vke.forEach(t),GHo=i(X),e5=n(X,"LI",{});var Xke=s(e5);e_e=n(Xke,"STRONG",{});var z1t=s(e_e);OHo=r(z1t,"splinter"),z1t.forEach(t),VHo=r(Xke," \u2014 "),xX=n(Xke,"A",{href:!0});var W1t=s(xX);XHo=r(W1t,"SplinterForQuestionAnswering"),W1t.forEach(t),zHo=r(Xke," (Splinter model)"),Xke.forEach(t),WHo=i(X),o5=n(X,"LI",{});var zke=s(o5);o_e=n(zke,"STRONG",{});var Q1t=s(o_e);QHo=r(Q1t,"squeezebert"),Q1t.forEach(t),HHo=r(zke," \u2014 "),$X=n(zke,"A",{href:!0});var H1t=s($X);UHo=r(H1t,"SqueezeBertForQuestionAnswering"),H1t.forEach(t),JHo=r(zke," (SqueezeBERT model)"),zke.forEach(t),YHo=i(X),r5=n(X,"LI",{});var Wke=s(r5);r_e=n(Wke,"STRONG",{});var U1t=s(r_e);KHo=r(U1t,"xlm"),U1t.forEach(t),ZHo=r(Wke," \u2014 "),kX=n(Wke,"A",{href:!0});var J1t=s(kX);eUo=r(J1t,"XLMForQuestionAnsweringSimple"),J1t.forEach(t),oUo=r(Wke," (XLM model)"),Wke.forEach(t),rUo=i(X),t5=n(X,"LI",{});var Qke=s(t5);t_e=n(Qke,"STRONG",{});var Y1t=s(t_e);tUo=r(Y1t,"xlm-roberta"),Y1t.forEach(t),aUo=r(Qke," \u2014 "),SX=n(Qke,"A",{href:!0});var K1t=s(SX);nUo=r(K1t,"XLMRobertaForQuestionAnswering"),K1t.forEach(t),sUo=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),lUo=i(X),a5=n(X,"LI",{});var Hke=s(a5);a_e=n(Hke,"STRONG",{});var Z1t=s(a_e);iUo=r(Z1t,"xlm-roberta-xl"),Z1t.forEach(t),dUo=r(Hke," \u2014 "),RX=n(Hke,"A",{href:!0});var ebt=s(RX);cUo=r(ebt,"XLMRobertaXLForQuestionAnswering"),ebt.forEach(t),fUo=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),mUo=i(X),n5=n(X,"LI",{});var Uke=s(n5);n_e=n(Uke,"STRONG",{});var obt=s(n_e);gUo=r(obt,"xlnet"),obt.forEach(t),hUo=r(Uke," \u2014 "),PX=n(Uke,"A",{href:!0});var rbt=s(PX);pUo=r(rbt,"XLNetForQuestionAnsweringSimple"),rbt.forEach(t),_Uo=r(Uke," (XLNet model)"),Uke.forEach(t),uUo=i(X),s5=n(X,"LI",{});var Jke=s(s5);s_e=n(Jke,"STRONG",{});var tbt=s(s_e);bUo=r(tbt,"yoso"),tbt.forEach(t),vUo=r(Jke," \u2014 "),BX=n(Jke,"A",{href:!0});var abt=s(BX);FUo=r(abt,"YosoForQuestionAnswering"),abt.forEach(t),TUo=r(Jke," (YOSO model)"),Jke.forEach(t),X.forEach(t),MUo=i(fa),l5=n(fa,"P",{});var Yke=s(l5);EUo=r(Yke,"The model is set in evaluation mode by default using "),l_e=n(Yke,"CODE",{});var nbt=s(l_e);CUo=r(nbt,"model.eval()"),nbt.forEach(t),wUo=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(Yke,"CODE",{});var sbt=s(i_e);AUo=r(sbt,"model.train()"),sbt.forEach(t),Yke.forEach(t),LUo=i(fa),T(i5.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Pje=i(f),td=n(f,"H2",{class:!0});var qGe=s(td);d5=n(qGe,"A",{id:!0,class:!0,href:!0});var lbt=s(d5);d_e=n(lbt,"SPAN",{});var ibt=s(d_e);T(dy.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),yUo=i(qGe),c_e=n(qGe,"SPAN",{});var dbt=s(c_e);xUo=r(dbt,"AutoModelForTableQuestionAnswering"),dbt.forEach(t),qGe.forEach(t),Bje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(cy.$$.fragment,Zs),$Uo=i(Zs),ad=n(Zs,"P",{});var fee=s(ad);kUo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IX=n(fee,"A",{href:!0});var cbt=s(IX);SUo=r(cbt,"from_pretrained()"),cbt.forEach(t),RUo=r(fee," class method or the "),NX=n(fee,"A",{href:!0});var fbt=s(NX);PUo=r(fbt,"from_config()"),fbt.forEach(t),BUo=r(fee,` class
method.`),fee.forEach(t),IUo=i(Zs),fy=n(Zs,"P",{});var jGe=s(fy);NUo=r(jGe,"This class cannot be instantiated directly using "),f_e=n(jGe,"CODE",{});var mbt=s(f_e);qUo=r(mbt,"__init__()"),mbt.forEach(t),jUo=r(jGe," (throws an error)."),jGe.forEach(t),DUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var mA=s(ht);T(my.$$.fragment,mA),GUo=i(mA),m_e=n(mA,"P",{});var gbt=s(m_e);OUo=r(gbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gbt.forEach(t),VUo=i(mA),nd=n(mA,"P",{});var mee=s(nd);XUo=r(mee,`Note:
Loading a model from its configuration file does `),g_e=n(mee,"STRONG",{});var hbt=s(g_e);zUo=r(hbt,"not"),hbt.forEach(t),WUo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(mee,"A",{href:!0});var pbt=s(qX);QUo=r(pbt,"from_pretrained()"),pbt.forEach(t),HUo=r(mee," to load the model weights."),mee.forEach(t),UUo=i(mA),T(c5.$$.fragment,mA),mA.forEach(t),JUo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(gy.$$.fragment,ma),YUo=i(ma),h_e=n(ma,"P",{});var _bt=s(h_e);KUo=r(_bt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_bt.forEach(t),ZUo=i(ma),ja=n(ma,"P",{});var gA=s(ja);eJo=r(gA,"The model class to instantiate is selected based on the "),p_e=n(gA,"CODE",{});var ubt=s(p_e);oJo=r(ubt,"model_type"),ubt.forEach(t),rJo=r(gA,` property of the config object (either
passed as an argument or loaded from `),__e=n(gA,"CODE",{});var bbt=s(__e);tJo=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),aJo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(gA,"CODE",{});var vbt=s(u_e);nJo=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),sJo=r(gA,":"),gA.forEach(t),lJo=i(ma),b_e=n(ma,"UL",{});var Fbt=s(b_e);f5=n(Fbt,"LI",{});var Kke=s(f5);v_e=n(Kke,"STRONG",{});var Tbt=s(v_e);iJo=r(Tbt,"tapas"),Tbt.forEach(t),dJo=r(Kke," \u2014 "),jX=n(Kke,"A",{href:!0});var Mbt=s(jX);cJo=r(Mbt,"TapasForQuestionAnswering"),Mbt.forEach(t),fJo=r(Kke," (TAPAS model)"),Kke.forEach(t),Fbt.forEach(t),mJo=i(ma),m5=n(ma,"P",{});var Zke=s(m5);gJo=r(Zke,"The model is set in evaluation mode by default using "),F_e=n(Zke,"CODE",{});var Ebt=s(F_e);hJo=r(Ebt,"model.eval()"),Ebt.forEach(t),pJo=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(Zke,"CODE",{});var Cbt=s(T_e);_Jo=r(Cbt,"model.train()"),Cbt.forEach(t),Zke.forEach(t),uJo=i(ma),T(g5.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Ije=i(f),sd=n(f,"H2",{class:!0});var DGe=s(sd);h5=n(DGe,"A",{id:!0,class:!0,href:!0});var wbt=s(h5);M_e=n(wbt,"SPAN",{});var Abt=s(M_e);T(hy.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),bJo=i(DGe),E_e=n(DGe,"SPAN",{});var Lbt=s(E_e);vJo=r(Lbt,"AutoModelForImageClassification"),Lbt.forEach(t),DGe.forEach(t),Nje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(py.$$.fragment,el),FJo=i(el),ld=n(el,"P",{});var gee=s(ld);TJo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DX=n(gee,"A",{href:!0});var ybt=s(DX);MJo=r(ybt,"from_pretrained()"),ybt.forEach(t),EJo=r(gee," class method or the "),GX=n(gee,"A",{href:!0});var xbt=s(GX);CJo=r(xbt,"from_config()"),xbt.forEach(t),wJo=r(gee,` class
method.`),gee.forEach(t),AJo=i(el),_y=n(el,"P",{});var GGe=s(_y);LJo=r(GGe,"This class cannot be instantiated directly using "),C_e=n(GGe,"CODE",{});var $bt=s(C_e);yJo=r($bt,"__init__()"),$bt.forEach(t),xJo=r(GGe," (throws an error)."),GGe.forEach(t),$Jo=i(el),pt=n(el,"DIV",{class:!0});var hA=s(pt);T(uy.$$.fragment,hA),kJo=i(hA),w_e=n(hA,"P",{});var kbt=s(w_e);SJo=r(kbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kbt.forEach(t),RJo=i(hA),id=n(hA,"P",{});var hee=s(id);PJo=r(hee,`Note:
Loading a model from its configuration file does `),A_e=n(hee,"STRONG",{});var Sbt=s(A_e);BJo=r(Sbt,"not"),Sbt.forEach(t),IJo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(hee,"A",{href:!0});var Rbt=s(OX);NJo=r(Rbt,"from_pretrained()"),Rbt.forEach(t),qJo=r(hee," to load the model weights."),hee.forEach(t),jJo=i(hA),T(p5.$$.fragment,hA),hA.forEach(t),DJo=i(el),lo=n(el,"DIV",{class:!0});var ga=s(lo);T(by.$$.fragment,ga),GJo=i(ga),L_e=n(ga,"P",{});var Pbt=s(L_e);OJo=r(Pbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pbt.forEach(t),VJo=i(ga),Da=n(ga,"P",{});var pA=s(Da);XJo=r(pA,"The model class to instantiate is selected based on the "),y_e=n(pA,"CODE",{});var Bbt=s(y_e);zJo=r(Bbt,"model_type"),Bbt.forEach(t),WJo=r(pA,` property of the config object (either
passed as an argument or loaded from `),x_e=n(pA,"CODE",{});var Ibt=s(x_e);QJo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),HJo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(pA,"CODE",{});var Nbt=s($_e);UJo=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),JJo=r(pA,":"),pA.forEach(t),YJo=i(ga),ue=n(ga,"UL",{});var Te=s(ue);_5=n(Te,"LI",{});var eSe=s(_5);k_e=n(eSe,"STRONG",{});var qbt=s(k_e);KJo=r(qbt,"beit"),qbt.forEach(t),ZJo=r(eSe," \u2014 "),VX=n(eSe,"A",{href:!0});var jbt=s(VX);eYo=r(jbt,"BeitForImageClassification"),jbt.forEach(t),oYo=r(eSe," (BEiT model)"),eSe.forEach(t),rYo=i(Te),u5=n(Te,"LI",{});var oSe=s(u5);S_e=n(oSe,"STRONG",{});var Dbt=s(S_e);tYo=r(Dbt,"convnext"),Dbt.forEach(t),aYo=r(oSe," \u2014 "),XX=n(oSe,"A",{href:!0});var Gbt=s(XX);nYo=r(Gbt,"ConvNextForImageClassification"),Gbt.forEach(t),sYo=r(oSe," (ConvNeXT model)"),oSe.forEach(t),lYo=i(Te),b5=n(Te,"LI",{});var rSe=s(b5);R_e=n(rSe,"STRONG",{});var Obt=s(R_e);iYo=r(Obt,"cvt"),Obt.forEach(t),dYo=r(rSe," \u2014 "),zX=n(rSe,"A",{href:!0});var Vbt=s(zX);cYo=r(Vbt,"CvtForImageClassification"),Vbt.forEach(t),fYo=r(rSe," (CvT model)"),rSe.forEach(t),mYo=i(Te),v5=n(Te,"LI",{});var tSe=s(v5);P_e=n(tSe,"STRONG",{});var Xbt=s(P_e);gYo=r(Xbt,"data2vec-vision"),Xbt.forEach(t),hYo=r(tSe," \u2014 "),WX=n(tSe,"A",{href:!0});var zbt=s(WX);pYo=r(zbt,"Data2VecVisionForImageClassification"),zbt.forEach(t),_Yo=r(tSe," (Data2VecVision model)"),tSe.forEach(t),uYo=i(Te),Bs=n(Te,"LI",{});var tk=s(Bs);B_e=n(tk,"STRONG",{});var Wbt=s(B_e);bYo=r(Wbt,"deit"),Wbt.forEach(t),vYo=r(tk," \u2014 "),QX=n(tk,"A",{href:!0});var Qbt=s(QX);FYo=r(Qbt,"DeiTForImageClassification"),Qbt.forEach(t),TYo=r(tk," or "),HX=n(tk,"A",{href:!0});var Hbt=s(HX);MYo=r(Hbt,"DeiTForImageClassificationWithTeacher"),Hbt.forEach(t),EYo=r(tk," (DeiT model)"),tk.forEach(t),CYo=i(Te),F5=n(Te,"LI",{});var aSe=s(F5);I_e=n(aSe,"STRONG",{});var Ubt=s(I_e);wYo=r(Ubt,"imagegpt"),Ubt.forEach(t),AYo=r(aSe," \u2014 "),UX=n(aSe,"A",{href:!0});var Jbt=s(UX);LYo=r(Jbt,"ImageGPTForImageClassification"),Jbt.forEach(t),yYo=r(aSe," (ImageGPT model)"),aSe.forEach(t),xYo=i(Te),Is=n(Te,"LI",{});var ak=s(Is);N_e=n(ak,"STRONG",{});var Ybt=s(N_e);$Yo=r(Ybt,"levit"),Ybt.forEach(t),kYo=r(ak," \u2014 "),JX=n(ak,"A",{href:!0});var Kbt=s(JX);SYo=r(Kbt,"LevitForImageClassification"),Kbt.forEach(t),RYo=r(ak," or "),YX=n(ak,"A",{href:!0});var Zbt=s(YX);PYo=r(Zbt,"LevitForImageClassificationWithTeacher"),Zbt.forEach(t),BYo=r(ak," (LeViT model)"),ak.forEach(t),IYo=i(Te),T5=n(Te,"LI",{});var nSe=s(T5);q_e=n(nSe,"STRONG",{});var e2t=s(q_e);NYo=r(e2t,"mobilevit"),e2t.forEach(t),qYo=r(nSe," \u2014 "),KX=n(nSe,"A",{href:!0});var o2t=s(KX);jYo=r(o2t,"MobileViTForImageClassification"),o2t.forEach(t),DYo=r(nSe," (MobileViT model)"),nSe.forEach(t),GYo=i(Te),_t=n(Te,"LI",{});var _f=s(_t);j_e=n(_f,"STRONG",{});var r2t=s(j_e);OYo=r(r2t,"perceiver"),r2t.forEach(t),VYo=r(_f," \u2014 "),ZX=n(_f,"A",{href:!0});var t2t=s(ZX);XYo=r(t2t,"PerceiverForImageClassificationLearned"),t2t.forEach(t),zYo=r(_f," or "),ez=n(_f,"A",{href:!0});var a2t=s(ez);WYo=r(a2t,"PerceiverForImageClassificationFourier"),a2t.forEach(t),QYo=r(_f," or "),oz=n(_f,"A",{href:!0});var n2t=s(oz);HYo=r(n2t,"PerceiverForImageClassificationConvProcessing"),n2t.forEach(t),UYo=r(_f," (Perceiver model)"),_f.forEach(t),JYo=i(Te),M5=n(Te,"LI",{});var sSe=s(M5);D_e=n(sSe,"STRONG",{});var s2t=s(D_e);YYo=r(s2t,"poolformer"),s2t.forEach(t),KYo=r(sSe," \u2014 "),rz=n(sSe,"A",{href:!0});var l2t=s(rz);ZYo=r(l2t,"PoolFormerForImageClassification"),l2t.forEach(t),eKo=r(sSe," (PoolFormer model)"),sSe.forEach(t),oKo=i(Te),E5=n(Te,"LI",{});var lSe=s(E5);G_e=n(lSe,"STRONG",{});var i2t=s(G_e);rKo=r(i2t,"regnet"),i2t.forEach(t),tKo=r(lSe," \u2014 "),tz=n(lSe,"A",{href:!0});var d2t=s(tz);aKo=r(d2t,"RegNetForImageClassification"),d2t.forEach(t),nKo=r(lSe," (RegNet model)"),lSe.forEach(t),sKo=i(Te),C5=n(Te,"LI",{});var iSe=s(C5);O_e=n(iSe,"STRONG",{});var c2t=s(O_e);lKo=r(c2t,"resnet"),c2t.forEach(t),iKo=r(iSe," \u2014 "),az=n(iSe,"A",{href:!0});var f2t=s(az);dKo=r(f2t,"ResNetForImageClassification"),f2t.forEach(t),cKo=r(iSe," (ResNet model)"),iSe.forEach(t),fKo=i(Te),w5=n(Te,"LI",{});var dSe=s(w5);V_e=n(dSe,"STRONG",{});var m2t=s(V_e);mKo=r(m2t,"segformer"),m2t.forEach(t),gKo=r(dSe," \u2014 "),nz=n(dSe,"A",{href:!0});var g2t=s(nz);hKo=r(g2t,"SegformerForImageClassification"),g2t.forEach(t),pKo=r(dSe," (SegFormer model)"),dSe.forEach(t),_Ko=i(Te),A5=n(Te,"LI",{});var cSe=s(A5);X_e=n(cSe,"STRONG",{});var h2t=s(X_e);uKo=r(h2t,"swin"),h2t.forEach(t),bKo=r(cSe," \u2014 "),sz=n(cSe,"A",{href:!0});var p2t=s(sz);vKo=r(p2t,"SwinForImageClassification"),p2t.forEach(t),FKo=r(cSe," (Swin Transformer model)"),cSe.forEach(t),TKo=i(Te),L5=n(Te,"LI",{});var fSe=s(L5);z_e=n(fSe,"STRONG",{});var _2t=s(z_e);MKo=r(_2t,"van"),_2t.forEach(t),EKo=r(fSe," \u2014 "),lz=n(fSe,"A",{href:!0});var u2t=s(lz);CKo=r(u2t,"VanForImageClassification"),u2t.forEach(t),wKo=r(fSe," (VAN model)"),fSe.forEach(t),AKo=i(Te),y5=n(Te,"LI",{});var mSe=s(y5);W_e=n(mSe,"STRONG",{});var b2t=s(W_e);LKo=r(b2t,"vit"),b2t.forEach(t),yKo=r(mSe," \u2014 "),iz=n(mSe,"A",{href:!0});var v2t=s(iz);xKo=r(v2t,"ViTForImageClassification"),v2t.forEach(t),$Ko=r(mSe," (ViT model)"),mSe.forEach(t),Te.forEach(t),kKo=i(ga),x5=n(ga,"P",{});var gSe=s(x5);SKo=r(gSe,"The model is set in evaluation mode by default using "),Q_e=n(gSe,"CODE",{});var F2t=s(Q_e);RKo=r(F2t,"model.eval()"),F2t.forEach(t),PKo=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(gSe,"CODE",{});var T2t=s(H_e);BKo=r(T2t,"model.train()"),T2t.forEach(t),gSe.forEach(t),IKo=i(ga),T($5.$$.fragment,ga),ga.forEach(t),el.forEach(t),qje=i(f),dd=n(f,"H2",{class:!0});var OGe=s(dd);k5=n(OGe,"A",{id:!0,class:!0,href:!0});var M2t=s(k5);U_e=n(M2t,"SPAN",{});var E2t=s(U_e);T(vy.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),NKo=i(OGe),J_e=n(OGe,"SPAN",{});var C2t=s(J_e);qKo=r(C2t,"AutoModelForVision2Seq"),C2t.forEach(t),OGe.forEach(t),jje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(Fy.$$.fragment,ol),jKo=i(ol),cd=n(ol,"P",{});var pee=s(cd);DKo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dz=n(pee,"A",{href:!0});var w2t=s(dz);GKo=r(w2t,"from_pretrained()"),w2t.forEach(t),OKo=r(pee," class method or the "),cz=n(pee,"A",{href:!0});var A2t=s(cz);VKo=r(A2t,"from_config()"),A2t.forEach(t),XKo=r(pee,` class
method.`),pee.forEach(t),zKo=i(ol),Ty=n(ol,"P",{});var VGe=s(Ty);WKo=r(VGe,"This class cannot be instantiated directly using "),Y_e=n(VGe,"CODE",{});var L2t=s(Y_e);QKo=r(L2t,"__init__()"),L2t.forEach(t),HKo=r(VGe," (throws an error)."),VGe.forEach(t),UKo=i(ol),ut=n(ol,"DIV",{class:!0});var _A=s(ut);T(My.$$.fragment,_A),JKo=i(_A),K_e=n(_A,"P",{});var y2t=s(K_e);YKo=r(y2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y2t.forEach(t),KKo=i(_A),fd=n(_A,"P",{});var _ee=s(fd);ZKo=r(_ee,`Note:
Loading a model from its configuration file does `),Z_e=n(_ee,"STRONG",{});var x2t=s(Z_e);eZo=r(x2t,"not"),x2t.forEach(t),oZo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(_ee,"A",{href:!0});var $2t=s(fz);rZo=r($2t,"from_pretrained()"),$2t.forEach(t),tZo=r(_ee," to load the model weights."),_ee.forEach(t),aZo=i(_A),T(S5.$$.fragment,_A),_A.forEach(t),nZo=i(ol),io=n(ol,"DIV",{class:!0});var ha=s(io);T(Ey.$$.fragment,ha),sZo=i(ha),eue=n(ha,"P",{});var k2t=s(eue);lZo=r(k2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k2t.forEach(t),iZo=i(ha),Ga=n(ha,"P",{});var uA=s(Ga);dZo=r(uA,"The model class to instantiate is selected based on the "),oue=n(uA,"CODE",{});var S2t=s(oue);cZo=r(S2t,"model_type"),S2t.forEach(t),fZo=r(uA,` property of the config object (either
passed as an argument or loaded from `),rue=n(uA,"CODE",{});var R2t=s(rue);mZo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),gZo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(uA,"CODE",{});var P2t=s(tue);hZo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),pZo=r(uA,":"),uA.forEach(t),_Zo=i(ha),aue=n(ha,"UL",{});var B2t=s(aue);R5=n(B2t,"LI",{});var hSe=s(R5);nue=n(hSe,"STRONG",{});var I2t=s(nue);uZo=r(I2t,"vision-encoder-decoder"),I2t.forEach(t),bZo=r(hSe," \u2014 "),mz=n(hSe,"A",{href:!0});var N2t=s(mz);vZo=r(N2t,"VisionEncoderDecoderModel"),N2t.forEach(t),FZo=r(hSe," (Vision Encoder decoder model)"),hSe.forEach(t),B2t.forEach(t),TZo=i(ha),P5=n(ha,"P",{});var pSe=s(P5);MZo=r(pSe,"The model is set in evaluation mode by default using "),sue=n(pSe,"CODE",{});var q2t=s(sue);EZo=r(q2t,"model.eval()"),q2t.forEach(t),CZo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(pSe,"CODE",{});var j2t=s(lue);wZo=r(j2t,"model.train()"),j2t.forEach(t),pSe.forEach(t),AZo=i(ha),T(B5.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Dje=i(f),md=n(f,"H2",{class:!0});var XGe=s(md);I5=n(XGe,"A",{id:!0,class:!0,href:!0});var D2t=s(I5);iue=n(D2t,"SPAN",{});var G2t=s(iue);T(Cy.$$.fragment,G2t),G2t.forEach(t),D2t.forEach(t),LZo=i(XGe),due=n(XGe,"SPAN",{});var O2t=s(due);yZo=r(O2t,"AutoModelForAudioClassification"),O2t.forEach(t),XGe.forEach(t),Gje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(wy.$$.fragment,rl),xZo=i(rl),gd=n(rl,"P",{});var uee=s(gd);$Zo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gz=n(uee,"A",{href:!0});var V2t=s(gz);kZo=r(V2t,"from_pretrained()"),V2t.forEach(t),SZo=r(uee," class method or the "),hz=n(uee,"A",{href:!0});var X2t=s(hz);RZo=r(X2t,"from_config()"),X2t.forEach(t),PZo=r(uee,` class
method.`),uee.forEach(t),BZo=i(rl),Ay=n(rl,"P",{});var zGe=s(Ay);IZo=r(zGe,"This class cannot be instantiated directly using "),cue=n(zGe,"CODE",{});var z2t=s(cue);NZo=r(z2t,"__init__()"),z2t.forEach(t),qZo=r(zGe," (throws an error)."),zGe.forEach(t),jZo=i(rl),bt=n(rl,"DIV",{class:!0});var bA=s(bt);T(Ly.$$.fragment,bA),DZo=i(bA),fue=n(bA,"P",{});var W2t=s(fue);GZo=r(W2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),W2t.forEach(t),OZo=i(bA),hd=n(bA,"P",{});var bee=s(hd);VZo=r(bee,`Note:
Loading a model from its configuration file does `),mue=n(bee,"STRONG",{});var Q2t=s(mue);XZo=r(Q2t,"not"),Q2t.forEach(t),zZo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(bee,"A",{href:!0});var H2t=s(pz);WZo=r(H2t,"from_pretrained()"),H2t.forEach(t),QZo=r(bee," to load the model weights."),bee.forEach(t),HZo=i(bA),T(N5.$$.fragment,bA),bA.forEach(t),UZo=i(rl),co=n(rl,"DIV",{class:!0});var pa=s(co);T(yy.$$.fragment,pa),JZo=i(pa),gue=n(pa,"P",{});var U2t=s(gue);YZo=r(U2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),U2t.forEach(t),KZo=i(pa),Oa=n(pa,"P",{});var vA=s(Oa);ZZo=r(vA,"The model class to instantiate is selected based on the "),hue=n(vA,"CODE",{});var J2t=s(hue);eer=r(J2t,"model_type"),J2t.forEach(t),oer=r(vA,` property of the config object (either
passed as an argument or loaded from `),pue=n(vA,"CODE",{});var Y2t=s(pue);rer=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),ter=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(vA,"CODE",{});var K2t=s(_ue);aer=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),ner=r(vA,":"),vA.forEach(t),ser=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);q5=n(Ve,"LI",{});var _Se=s(q5);uue=n(_Se,"STRONG",{});var Z2t=s(uue);ler=r(Z2t,"data2vec-audio"),Z2t.forEach(t),ier=r(_Se," \u2014 "),_z=n(_Se,"A",{href:!0});var e4t=s(_z);der=r(e4t,"Data2VecAudioForSequenceClassification"),e4t.forEach(t),cer=r(_Se," (Data2VecAudio model)"),_Se.forEach(t),fer=i(Ve),j5=n(Ve,"LI",{});var uSe=s(j5);bue=n(uSe,"STRONG",{});var o4t=s(bue);mer=r(o4t,"hubert"),o4t.forEach(t),ger=r(uSe," \u2014 "),uz=n(uSe,"A",{href:!0});var r4t=s(uz);her=r(r4t,"HubertForSequenceClassification"),r4t.forEach(t),per=r(uSe," (Hubert model)"),uSe.forEach(t),_er=i(Ve),D5=n(Ve,"LI",{});var bSe=s(D5);vue=n(bSe,"STRONG",{});var t4t=s(vue);uer=r(t4t,"sew"),t4t.forEach(t),ber=r(bSe," \u2014 "),bz=n(bSe,"A",{href:!0});var a4t=s(bz);ver=r(a4t,"SEWForSequenceClassification"),a4t.forEach(t),Fer=r(bSe," (SEW model)"),bSe.forEach(t),Ter=i(Ve),G5=n(Ve,"LI",{});var vSe=s(G5);Fue=n(vSe,"STRONG",{});var n4t=s(Fue);Mer=r(n4t,"sew-d"),n4t.forEach(t),Eer=r(vSe," \u2014 "),vz=n(vSe,"A",{href:!0});var s4t=s(vz);Cer=r(s4t,"SEWDForSequenceClassification"),s4t.forEach(t),wer=r(vSe," (SEW-D model)"),vSe.forEach(t),Aer=i(Ve),O5=n(Ve,"LI",{});var FSe=s(O5);Tue=n(FSe,"STRONG",{});var l4t=s(Tue);Ler=r(l4t,"unispeech"),l4t.forEach(t),yer=r(FSe," \u2014 "),Fz=n(FSe,"A",{href:!0});var i4t=s(Fz);xer=r(i4t,"UniSpeechForSequenceClassification"),i4t.forEach(t),$er=r(FSe," (UniSpeech model)"),FSe.forEach(t),ker=i(Ve),V5=n(Ve,"LI",{});var TSe=s(V5);Mue=n(TSe,"STRONG",{});var d4t=s(Mue);Ser=r(d4t,"unispeech-sat"),d4t.forEach(t),Rer=r(TSe," \u2014 "),Tz=n(TSe,"A",{href:!0});var c4t=s(Tz);Per=r(c4t,"UniSpeechSatForSequenceClassification"),c4t.forEach(t),Ber=r(TSe," (UniSpeechSat model)"),TSe.forEach(t),Ier=i(Ve),X5=n(Ve,"LI",{});var MSe=s(X5);Eue=n(MSe,"STRONG",{});var f4t=s(Eue);Ner=r(f4t,"wav2vec2"),f4t.forEach(t),qer=r(MSe," \u2014 "),Mz=n(MSe,"A",{href:!0});var m4t=s(Mz);jer=r(m4t,"Wav2Vec2ForSequenceClassification"),m4t.forEach(t),Der=r(MSe," (Wav2Vec2 model)"),MSe.forEach(t),Ger=i(Ve),z5=n(Ve,"LI",{});var ESe=s(z5);Cue=n(ESe,"STRONG",{});var g4t=s(Cue);Oer=r(g4t,"wav2vec2-conformer"),g4t.forEach(t),Ver=r(ESe," \u2014 "),Ez=n(ESe,"A",{href:!0});var h4t=s(Ez);Xer=r(h4t,"Wav2Vec2ConformerForSequenceClassification"),h4t.forEach(t),zer=r(ESe," (Wav2Vec2-Conformer model)"),ESe.forEach(t),Wer=i(Ve),W5=n(Ve,"LI",{});var CSe=s(W5);wue=n(CSe,"STRONG",{});var p4t=s(wue);Qer=r(p4t,"wavlm"),p4t.forEach(t),Her=r(CSe," \u2014 "),Cz=n(CSe,"A",{href:!0});var _4t=s(Cz);Uer=r(_4t,"WavLMForSequenceClassification"),_4t.forEach(t),Jer=r(CSe," (WavLM model)"),CSe.forEach(t),Ve.forEach(t),Yer=i(pa),Q5=n(pa,"P",{});var wSe=s(Q5);Ker=r(wSe,"The model is set in evaluation mode by default using "),Aue=n(wSe,"CODE",{});var u4t=s(Aue);Zer=r(u4t,"model.eval()"),u4t.forEach(t),eor=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(wSe,"CODE",{});var b4t=s(Lue);oor=r(b4t,"model.train()"),b4t.forEach(t),wSe.forEach(t),ror=i(pa),T(H5.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Oje=i(f),pd=n(f,"H2",{class:!0});var WGe=s(pd);U5=n(WGe,"A",{id:!0,class:!0,href:!0});var v4t=s(U5);yue=n(v4t,"SPAN",{});var F4t=s(yue);T(xy.$$.fragment,F4t),F4t.forEach(t),v4t.forEach(t),tor=i(WGe),xue=n(WGe,"SPAN",{});var T4t=s(xue);aor=r(T4t,"AutoModelForAudioFrameClassification"),T4t.forEach(t),WGe.forEach(t),Vje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T($y.$$.fragment,tl),nor=i(tl),_d=n(tl,"P",{});var vee=s(_d);sor=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wz=n(vee,"A",{href:!0});var M4t=s(wz);lor=r(M4t,"from_pretrained()"),M4t.forEach(t),ior=r(vee," class method or the "),Az=n(vee,"A",{href:!0});var E4t=s(Az);dor=r(E4t,"from_config()"),E4t.forEach(t),cor=r(vee,` class
method.`),vee.forEach(t),mor=i(tl),ky=n(tl,"P",{});var QGe=s(ky);gor=r(QGe,"This class cannot be instantiated directly using "),$ue=n(QGe,"CODE",{});var C4t=s($ue);hor=r(C4t,"__init__()"),C4t.forEach(t),por=r(QGe," (throws an error)."),QGe.forEach(t),_or=i(tl),vt=n(tl,"DIV",{class:!0});var FA=s(vt);T(Sy.$$.fragment,FA),uor=i(FA),kue=n(FA,"P",{});var w4t=s(kue);bor=r(w4t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),w4t.forEach(t),vor=i(FA),ud=n(FA,"P",{});var Fee=s(ud);For=r(Fee,`Note:
Loading a model from its configuration file does `),Sue=n(Fee,"STRONG",{});var A4t=s(Sue);Tor=r(A4t,"not"),A4t.forEach(t),Mor=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(Fee,"A",{href:!0});var L4t=s(Lz);Eor=r(L4t,"from_pretrained()"),L4t.forEach(t),Cor=r(Fee," to load the model weights."),Fee.forEach(t),wor=i(FA),T(J5.$$.fragment,FA),FA.forEach(t),Aor=i(tl),fo=n(tl,"DIV",{class:!0});var _a=s(fo);T(Ry.$$.fragment,_a),Lor=i(_a),Rue=n(_a,"P",{});var y4t=s(Rue);yor=r(y4t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),y4t.forEach(t),xor=i(_a),Va=n(_a,"P",{});var TA=s(Va);$or=r(TA,"The model class to instantiate is selected based on the "),Pue=n(TA,"CODE",{});var x4t=s(Pue);kor=r(x4t,"model_type"),x4t.forEach(t),Sor=r(TA,` property of the config object (either
passed as an argument or loaded from `),Bue=n(TA,"CODE",{});var $4t=s(Bue);Ror=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),Por=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(TA,"CODE",{});var k4t=s(Iue);Bor=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),Ior=r(TA,":"),TA.forEach(t),Nor=i(_a),Kr=n(_a,"UL",{});var al=s(Kr);Y5=n(al,"LI",{});var ASe=s(Y5);Nue=n(ASe,"STRONG",{});var S4t=s(Nue);qor=r(S4t,"data2vec-audio"),S4t.forEach(t),jor=r(ASe," \u2014 "),yz=n(ASe,"A",{href:!0});var R4t=s(yz);Dor=r(R4t,"Data2VecAudioForAudioFrameClassification"),R4t.forEach(t),Gor=r(ASe," (Data2VecAudio model)"),ASe.forEach(t),Oor=i(al),K5=n(al,"LI",{});var LSe=s(K5);que=n(LSe,"STRONG",{});var P4t=s(que);Vor=r(P4t,"unispeech-sat"),P4t.forEach(t),Xor=r(LSe," \u2014 "),xz=n(LSe,"A",{href:!0});var B4t=s(xz);zor=r(B4t,"UniSpeechSatForAudioFrameClassification"),B4t.forEach(t),Wor=r(LSe," (UniSpeechSat model)"),LSe.forEach(t),Qor=i(al),Z5=n(al,"LI",{});var ySe=s(Z5);jue=n(ySe,"STRONG",{});var I4t=s(jue);Hor=r(I4t,"wav2vec2"),I4t.forEach(t),Uor=r(ySe," \u2014 "),$z=n(ySe,"A",{href:!0});var N4t=s($z);Jor=r(N4t,"Wav2Vec2ForAudioFrameClassification"),N4t.forEach(t),Yor=r(ySe," (Wav2Vec2 model)"),ySe.forEach(t),Kor=i(al),e3=n(al,"LI",{});var xSe=s(e3);Due=n(xSe,"STRONG",{});var q4t=s(Due);Zor=r(q4t,"wav2vec2-conformer"),q4t.forEach(t),err=r(xSe," \u2014 "),kz=n(xSe,"A",{href:!0});var j4t=s(kz);orr=r(j4t,"Wav2Vec2ConformerForAudioFrameClassification"),j4t.forEach(t),rrr=r(xSe," (Wav2Vec2-Conformer model)"),xSe.forEach(t),trr=i(al),o3=n(al,"LI",{});var $Se=s(o3);Gue=n($Se,"STRONG",{});var D4t=s(Gue);arr=r(D4t,"wavlm"),D4t.forEach(t),nrr=r($Se," \u2014 "),Sz=n($Se,"A",{href:!0});var G4t=s(Sz);srr=r(G4t,"WavLMForAudioFrameClassification"),G4t.forEach(t),lrr=r($Se," (WavLM model)"),$Se.forEach(t),al.forEach(t),irr=i(_a),r3=n(_a,"P",{});var kSe=s(r3);drr=r(kSe,"The model is set in evaluation mode by default using "),Oue=n(kSe,"CODE",{});var O4t=s(Oue);crr=r(O4t,"model.eval()"),O4t.forEach(t),frr=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(kSe,"CODE",{});var V4t=s(Vue);mrr=r(V4t,"model.train()"),V4t.forEach(t),kSe.forEach(t),grr=i(_a),T(t3.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Xje=i(f),bd=n(f,"H2",{class:!0});var HGe=s(bd);a3=n(HGe,"A",{id:!0,class:!0,href:!0});var X4t=s(a3);Xue=n(X4t,"SPAN",{});var z4t=s(Xue);T(Py.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),hrr=i(HGe),zue=n(HGe,"SPAN",{});var W4t=s(zue);prr=r(W4t,"AutoModelForCTC"),W4t.forEach(t),HGe.forEach(t),zje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(By.$$.fragment,nl),_rr=i(nl),vd=n(nl,"P",{});var Tee=s(vd);urr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Rz=n(Tee,"A",{href:!0});var Q4t=s(Rz);brr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),vrr=r(Tee," class method or the "),Pz=n(Tee,"A",{href:!0});var H4t=s(Pz);Frr=r(H4t,"from_config()"),H4t.forEach(t),Trr=r(Tee,` class
method.`),Tee.forEach(t),Mrr=i(nl),Iy=n(nl,"P",{});var UGe=s(Iy);Err=r(UGe,"This class cannot be instantiated directly using "),Wue=n(UGe,"CODE",{});var U4t=s(Wue);Crr=r(U4t,"__init__()"),U4t.forEach(t),wrr=r(UGe," (throws an error)."),UGe.forEach(t),Arr=i(nl),Ft=n(nl,"DIV",{class:!0});var MA=s(Ft);T(Ny.$$.fragment,MA),Lrr=i(MA),Que=n(MA,"P",{});var J4t=s(Que);yrr=r(J4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),J4t.forEach(t),xrr=i(MA),Fd=n(MA,"P",{});var Mee=s(Fd);$rr=r(Mee,`Note:
Loading a model from its configuration file does `),Hue=n(Mee,"STRONG",{});var Y4t=s(Hue);krr=r(Y4t,"not"),Y4t.forEach(t),Srr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(Mee,"A",{href:!0});var K4t=s(Bz);Rrr=r(K4t,"from_pretrained()"),K4t.forEach(t),Prr=r(Mee," to load the model weights."),Mee.forEach(t),Brr=i(MA),T(n3.$$.fragment,MA),MA.forEach(t),Irr=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(qy.$$.fragment,ua),Nrr=i(ua),Uue=n(ua,"P",{});var Z4t=s(Uue);qrr=r(Z4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Z4t.forEach(t),jrr=i(ua),Xa=n(ua,"P",{});var EA=s(Xa);Drr=r(EA,"The model class to instantiate is selected based on the "),Jue=n(EA,"CODE",{});var evt=s(Jue);Grr=r(evt,"model_type"),evt.forEach(t),Orr=r(EA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(EA,"CODE",{});var ovt=s(Yue);Vrr=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Xrr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(EA,"CODE",{});var rvt=s(Kue);zrr=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),Wrr=r(EA,":"),EA.forEach(t),Qrr=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);s3=n(Xe,"LI",{});var SSe=s(s3);Zue=n(SSe,"STRONG",{});var tvt=s(Zue);Hrr=r(tvt,"data2vec-audio"),tvt.forEach(t),Urr=r(SSe," \u2014 "),Iz=n(SSe,"A",{href:!0});var avt=s(Iz);Jrr=r(avt,"Data2VecAudioForCTC"),avt.forEach(t),Yrr=r(SSe," (Data2VecAudio model)"),SSe.forEach(t),Krr=i(Xe),l3=n(Xe,"LI",{});var RSe=s(l3);e1e=n(RSe,"STRONG",{});var nvt=s(e1e);Zrr=r(nvt,"hubert"),nvt.forEach(t),etr=r(RSe," \u2014 "),Nz=n(RSe,"A",{href:!0});var svt=s(Nz);otr=r(svt,"HubertForCTC"),svt.forEach(t),rtr=r(RSe," (Hubert model)"),RSe.forEach(t),ttr=i(Xe),i3=n(Xe,"LI",{});var PSe=s(i3);o1e=n(PSe,"STRONG",{});var lvt=s(o1e);atr=r(lvt,"sew"),lvt.forEach(t),ntr=r(PSe," \u2014 "),qz=n(PSe,"A",{href:!0});var ivt=s(qz);str=r(ivt,"SEWForCTC"),ivt.forEach(t),ltr=r(PSe," (SEW model)"),PSe.forEach(t),itr=i(Xe),d3=n(Xe,"LI",{});var BSe=s(d3);r1e=n(BSe,"STRONG",{});var dvt=s(r1e);dtr=r(dvt,"sew-d"),dvt.forEach(t),ctr=r(BSe," \u2014 "),jz=n(BSe,"A",{href:!0});var cvt=s(jz);ftr=r(cvt,"SEWDForCTC"),cvt.forEach(t),mtr=r(BSe," (SEW-D model)"),BSe.forEach(t),gtr=i(Xe),c3=n(Xe,"LI",{});var ISe=s(c3);t1e=n(ISe,"STRONG",{});var fvt=s(t1e);htr=r(fvt,"unispeech"),fvt.forEach(t),ptr=r(ISe," \u2014 "),Dz=n(ISe,"A",{href:!0});var mvt=s(Dz);_tr=r(mvt,"UniSpeechForCTC"),mvt.forEach(t),utr=r(ISe," (UniSpeech model)"),ISe.forEach(t),btr=i(Xe),f3=n(Xe,"LI",{});var NSe=s(f3);a1e=n(NSe,"STRONG",{});var gvt=s(a1e);vtr=r(gvt,"unispeech-sat"),gvt.forEach(t),Ftr=r(NSe," \u2014 "),Gz=n(NSe,"A",{href:!0});var hvt=s(Gz);Ttr=r(hvt,"UniSpeechSatForCTC"),hvt.forEach(t),Mtr=r(NSe," (UniSpeechSat model)"),NSe.forEach(t),Etr=i(Xe),m3=n(Xe,"LI",{});var qSe=s(m3);n1e=n(qSe,"STRONG",{});var pvt=s(n1e);Ctr=r(pvt,"wav2vec2"),pvt.forEach(t),wtr=r(qSe," \u2014 "),Oz=n(qSe,"A",{href:!0});var _vt=s(Oz);Atr=r(_vt,"Wav2Vec2ForCTC"),_vt.forEach(t),Ltr=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),ytr=i(Xe),g3=n(Xe,"LI",{});var jSe=s(g3);s1e=n(jSe,"STRONG",{});var uvt=s(s1e);xtr=r(uvt,"wav2vec2-conformer"),uvt.forEach(t),$tr=r(jSe," \u2014 "),Vz=n(jSe,"A",{href:!0});var bvt=s(Vz);ktr=r(bvt,"Wav2Vec2ConformerForCTC"),bvt.forEach(t),Str=r(jSe," (Wav2Vec2-Conformer model)"),jSe.forEach(t),Rtr=i(Xe),h3=n(Xe,"LI",{});var DSe=s(h3);l1e=n(DSe,"STRONG",{});var vvt=s(l1e);Ptr=r(vvt,"wavlm"),vvt.forEach(t),Btr=r(DSe," \u2014 "),Xz=n(DSe,"A",{href:!0});var Fvt=s(Xz);Itr=r(Fvt,"WavLMForCTC"),Fvt.forEach(t),Ntr=r(DSe," (WavLM model)"),DSe.forEach(t),Xe.forEach(t),qtr=i(ua),p3=n(ua,"P",{});var GSe=s(p3);jtr=r(GSe,"The model is set in evaluation mode by default using "),i1e=n(GSe,"CODE",{});var Tvt=s(i1e);Dtr=r(Tvt,"model.eval()"),Tvt.forEach(t),Gtr=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=n(GSe,"CODE",{});var Mvt=s(d1e);Otr=r(Mvt,"model.train()"),Mvt.forEach(t),GSe.forEach(t),Vtr=i(ua),T(_3.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Wje=i(f),Td=n(f,"H2",{class:!0});var JGe=s(Td);u3=n(JGe,"A",{id:!0,class:!0,href:!0});var Evt=s(u3);c1e=n(Evt,"SPAN",{});var Cvt=s(c1e);T(jy.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),Xtr=i(JGe),f1e=n(JGe,"SPAN",{});var wvt=s(f1e);ztr=r(wvt,"AutoModelForSpeechSeq2Seq"),wvt.forEach(t),JGe.forEach(t),Qje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Dy.$$.fragment,sl),Wtr=i(sl),Md=n(sl,"P",{});var Eee=s(Md);Qtr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zz=n(Eee,"A",{href:!0});var Avt=s(zz);Htr=r(Avt,"from_pretrained()"),Avt.forEach(t),Utr=r(Eee," class method or the "),Wz=n(Eee,"A",{href:!0});var Lvt=s(Wz);Jtr=r(Lvt,"from_config()"),Lvt.forEach(t),Ytr=r(Eee,` class
method.`),Eee.forEach(t),Ktr=i(sl),Gy=n(sl,"P",{});var YGe=s(Gy);Ztr=r(YGe,"This class cannot be instantiated directly using "),m1e=n(YGe,"CODE",{});var yvt=s(m1e);ear=r(yvt,"__init__()"),yvt.forEach(t),oar=r(YGe," (throws an error)."),YGe.forEach(t),rar=i(sl),Tt=n(sl,"DIV",{class:!0});var CA=s(Tt);T(Oy.$$.fragment,CA),tar=i(CA),g1e=n(CA,"P",{});var xvt=s(g1e);aar=r(xvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xvt.forEach(t),nar=i(CA),Ed=n(CA,"P",{});var Cee=s(Ed);sar=r(Cee,`Note:
Loading a model from its configuration file does `),h1e=n(Cee,"STRONG",{});var $vt=s(h1e);lar=r($vt,"not"),$vt.forEach(t),iar=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(Cee,"A",{href:!0});var kvt=s(Qz);dar=r(kvt,"from_pretrained()"),kvt.forEach(t),car=r(Cee," to load the model weights."),Cee.forEach(t),far=i(CA),T(b3.$$.fragment,CA),CA.forEach(t),mar=i(sl),go=n(sl,"DIV",{class:!0});var ba=s(go);T(Vy.$$.fragment,ba),gar=i(ba),p1e=n(ba,"P",{});var Svt=s(p1e);har=r(Svt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Svt.forEach(t),par=i(ba),za=n(ba,"P",{});var wA=s(za);_ar=r(wA,"The model class to instantiate is selected based on the "),_1e=n(wA,"CODE",{});var Rvt=s(_1e);uar=r(Rvt,"model_type"),Rvt.forEach(t),bar=r(wA,` property of the config object (either
passed as an argument or loaded from `),u1e=n(wA,"CODE",{});var Pvt=s(u1e);Far=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),Tar=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(wA,"CODE",{});var Bvt=s(b1e);Mar=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Ear=r(wA,":"),wA.forEach(t),Car=i(ba),Xy=n(ba,"UL",{});var KGe=s(Xy);v3=n(KGe,"LI",{});var OSe=s(v3);v1e=n(OSe,"STRONG",{});var Ivt=s(v1e);war=r(Ivt,"speech-encoder-decoder"),Ivt.forEach(t),Aar=r(OSe," \u2014 "),Hz=n(OSe,"A",{href:!0});var Nvt=s(Hz);Lar=r(Nvt,"SpeechEncoderDecoderModel"),Nvt.forEach(t),yar=r(OSe," (Speech Encoder decoder model)"),OSe.forEach(t),xar=i(KGe),F3=n(KGe,"LI",{});var VSe=s(F3);F1e=n(VSe,"STRONG",{});var qvt=s(F1e);$ar=r(qvt,"speech_to_text"),qvt.forEach(t),kar=r(VSe," \u2014 "),Uz=n(VSe,"A",{href:!0});var jvt=s(Uz);Sar=r(jvt,"Speech2TextForConditionalGeneration"),jvt.forEach(t),Rar=r(VSe," (Speech2Text model)"),VSe.forEach(t),KGe.forEach(t),Par=i(ba),T3=n(ba,"P",{});var XSe=s(T3);Bar=r(XSe,"The model is set in evaluation mode by default using "),T1e=n(XSe,"CODE",{});var Dvt=s(T1e);Iar=r(Dvt,"model.eval()"),Dvt.forEach(t),Nar=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=n(XSe,"CODE",{});var Gvt=s(M1e);qar=r(Gvt,"model.train()"),Gvt.forEach(t),XSe.forEach(t),jar=i(ba),T(M3.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Hje=i(f),Cd=n(f,"H2",{class:!0});var ZGe=s(Cd);E3=n(ZGe,"A",{id:!0,class:!0,href:!0});var Ovt=s(E3);E1e=n(Ovt,"SPAN",{});var Vvt=s(E1e);T(zy.$$.fragment,Vvt),Vvt.forEach(t),Ovt.forEach(t),Dar=i(ZGe),C1e=n(ZGe,"SPAN",{});var Xvt=s(C1e);Gar=r(Xvt,"AutoModelForAudioXVector"),Xvt.forEach(t),ZGe.forEach(t),Uje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Wy.$$.fragment,ll),Oar=i(ll),wd=n(ll,"P",{});var wee=s(wd);Var=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jz=n(wee,"A",{href:!0});var zvt=s(Jz);Xar=r(zvt,"from_pretrained()"),zvt.forEach(t),zar=r(wee," class method or the "),Yz=n(wee,"A",{href:!0});var Wvt=s(Yz);War=r(Wvt,"from_config()"),Wvt.forEach(t),Qar=r(wee,` class
method.`),wee.forEach(t),Har=i(ll),Qy=n(ll,"P",{});var eOe=s(Qy);Uar=r(eOe,"This class cannot be instantiated directly using "),w1e=n(eOe,"CODE",{});var Qvt=s(w1e);Jar=r(Qvt,"__init__()"),Qvt.forEach(t),Yar=r(eOe," (throws an error)."),eOe.forEach(t),Kar=i(ll),Mt=n(ll,"DIV",{class:!0});var AA=s(Mt);T(Hy.$$.fragment,AA),Zar=i(AA),A1e=n(AA,"P",{});var Hvt=s(A1e);enr=r(Hvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hvt.forEach(t),onr=i(AA),Ad=n(AA,"P",{});var Aee=s(Ad);rnr=r(Aee,`Note:
Loading a model from its configuration file does `),L1e=n(Aee,"STRONG",{});var Uvt=s(L1e);tnr=r(Uvt,"not"),Uvt.forEach(t),anr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(Aee,"A",{href:!0});var Jvt=s(Kz);nnr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),snr=r(Aee," to load the model weights."),Aee.forEach(t),lnr=i(AA),T(C3.$$.fragment,AA),AA.forEach(t),inr=i(ll),ho=n(ll,"DIV",{class:!0});var va=s(ho);T(Uy.$$.fragment,va),dnr=i(va),y1e=n(va,"P",{});var Yvt=s(y1e);cnr=r(Yvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Yvt.forEach(t),fnr=i(va),Wa=n(va,"P",{});var LA=s(Wa);mnr=r(LA,"The model class to instantiate is selected based on the "),x1e=n(LA,"CODE",{});var Kvt=s(x1e);gnr=r(Kvt,"model_type"),Kvt.forEach(t),hnr=r(LA,` property of the config object (either
passed as an argument or loaded from `),$1e=n(LA,"CODE",{});var Zvt=s($1e);pnr=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),_nr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(LA,"CODE",{});var e5t=s(k1e);unr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),bnr=r(LA,":"),LA.forEach(t),vnr=i(va),Zr=n(va,"UL",{});var il=s(Zr);w3=n(il,"LI",{});var zSe=s(w3);S1e=n(zSe,"STRONG",{});var o5t=s(S1e);Fnr=r(o5t,"data2vec-audio"),o5t.forEach(t),Tnr=r(zSe," \u2014 "),Zz=n(zSe,"A",{href:!0});var r5t=s(Zz);Mnr=r(r5t,"Data2VecAudioForXVector"),r5t.forEach(t),Enr=r(zSe," (Data2VecAudio model)"),zSe.forEach(t),Cnr=i(il),A3=n(il,"LI",{});var WSe=s(A3);R1e=n(WSe,"STRONG",{});var t5t=s(R1e);wnr=r(t5t,"unispeech-sat"),t5t.forEach(t),Anr=r(WSe," \u2014 "),eW=n(WSe,"A",{href:!0});var a5t=s(eW);Lnr=r(a5t,"UniSpeechSatForXVector"),a5t.forEach(t),ynr=r(WSe," (UniSpeechSat model)"),WSe.forEach(t),xnr=i(il),L3=n(il,"LI",{});var QSe=s(L3);P1e=n(QSe,"STRONG",{});var n5t=s(P1e);$nr=r(n5t,"wav2vec2"),n5t.forEach(t),knr=r(QSe," \u2014 "),oW=n(QSe,"A",{href:!0});var s5t=s(oW);Snr=r(s5t,"Wav2Vec2ForXVector"),s5t.forEach(t),Rnr=r(QSe," (Wav2Vec2 model)"),QSe.forEach(t),Pnr=i(il),y3=n(il,"LI",{});var HSe=s(y3);B1e=n(HSe,"STRONG",{});var l5t=s(B1e);Bnr=r(l5t,"wav2vec2-conformer"),l5t.forEach(t),Inr=r(HSe," \u2014 "),rW=n(HSe,"A",{href:!0});var i5t=s(rW);Nnr=r(i5t,"Wav2Vec2ConformerForXVector"),i5t.forEach(t),qnr=r(HSe," (Wav2Vec2-Conformer model)"),HSe.forEach(t),jnr=i(il),x3=n(il,"LI",{});var USe=s(x3);I1e=n(USe,"STRONG",{});var d5t=s(I1e);Dnr=r(d5t,"wavlm"),d5t.forEach(t),Gnr=r(USe," \u2014 "),tW=n(USe,"A",{href:!0});var c5t=s(tW);Onr=r(c5t,"WavLMForXVector"),c5t.forEach(t),Vnr=r(USe," (WavLM model)"),USe.forEach(t),il.forEach(t),Xnr=i(va),$3=n(va,"P",{});var JSe=s($3);znr=r(JSe,"The model is set in evaluation mode by default using "),N1e=n(JSe,"CODE",{});var f5t=s(N1e);Wnr=r(f5t,"model.eval()"),f5t.forEach(t),Qnr=r(JSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(JSe,"CODE",{});var m5t=s(q1e);Hnr=r(m5t,"model.train()"),m5t.forEach(t),JSe.forEach(t),Unr=i(va),T(k3.$$.fragment,va),va.forEach(t),ll.forEach(t),Jje=i(f),Ld=n(f,"H2",{class:!0});var oOe=s(Ld);S3=n(oOe,"A",{id:!0,class:!0,href:!0});var g5t=s(S3);j1e=n(g5t,"SPAN",{});var h5t=s(j1e);T(Jy.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),Jnr=i(oOe),D1e=n(oOe,"SPAN",{});var p5t=s(D1e);Ynr=r(p5t,"AutoModelForMaskedImageModeling"),p5t.forEach(t),oOe.forEach(t),Yje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(Yy.$$.fragment,dl),Knr=i(dl),yd=n(dl,"P",{});var Lee=s(yd);Znr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aW=n(Lee,"A",{href:!0});var _5t=s(aW);esr=r(_5t,"from_pretrained()"),_5t.forEach(t),osr=r(Lee," class method or the "),nW=n(Lee,"A",{href:!0});var u5t=s(nW);rsr=r(u5t,"from_config()"),u5t.forEach(t),tsr=r(Lee,` class
method.`),Lee.forEach(t),asr=i(dl),Ky=n(dl,"P",{});var rOe=s(Ky);nsr=r(rOe,"This class cannot be instantiated directly using "),G1e=n(rOe,"CODE",{});var b5t=s(G1e);ssr=r(b5t,"__init__()"),b5t.forEach(t),lsr=r(rOe," (throws an error)."),rOe.forEach(t),isr=i(dl),Et=n(dl,"DIV",{class:!0});var yA=s(Et);T(Zy.$$.fragment,yA),dsr=i(yA),O1e=n(yA,"P",{});var v5t=s(O1e);csr=r(v5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),v5t.forEach(t),fsr=i(yA),xd=n(yA,"P",{});var yee=s(xd);msr=r(yee,`Note:
Loading a model from its configuration file does `),V1e=n(yee,"STRONG",{});var F5t=s(V1e);gsr=r(F5t,"not"),F5t.forEach(t),hsr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(yee,"A",{href:!0});var T5t=s(sW);psr=r(T5t,"from_pretrained()"),T5t.forEach(t),_sr=r(yee," to load the model weights."),yee.forEach(t),usr=i(yA),T(R3.$$.fragment,yA),yA.forEach(t),bsr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(e8.$$.fragment,Fa),vsr=i(Fa),X1e=n(Fa,"P",{});var M5t=s(X1e);Fsr=r(M5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),M5t.forEach(t),Tsr=i(Fa),Qa=n(Fa,"P",{});var xA=s(Qa);Msr=r(xA,"The model class to instantiate is selected based on the "),z1e=n(xA,"CODE",{});var E5t=s(z1e);Esr=r(E5t,"model_type"),E5t.forEach(t),Csr=r(xA,` property of the config object (either
passed as an argument or loaded from `),W1e=n(xA,"CODE",{});var C5t=s(W1e);wsr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),Asr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(xA,"CODE",{});var w5t=s(Q1e);Lsr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),ysr=r(xA,":"),xA.forEach(t),xsr=i(Fa),$d=n(Fa,"UL",{});var xee=s($d);P3=n(xee,"LI",{});var YSe=s(P3);H1e=n(YSe,"STRONG",{});var A5t=s(H1e);$sr=r(A5t,"deit"),A5t.forEach(t),ksr=r(YSe," \u2014 "),lW=n(YSe,"A",{href:!0});var L5t=s(lW);Ssr=r(L5t,"DeiTForMaskedImageModeling"),L5t.forEach(t),Rsr=r(YSe," (DeiT model)"),YSe.forEach(t),Psr=i(xee),B3=n(xee,"LI",{});var KSe=s(B3);U1e=n(KSe,"STRONG",{});var y5t=s(U1e);Bsr=r(y5t,"swin"),y5t.forEach(t),Isr=r(KSe," \u2014 "),iW=n(KSe,"A",{href:!0});var x5t=s(iW);Nsr=r(x5t,"SwinForMaskedImageModeling"),x5t.forEach(t),qsr=r(KSe," (Swin Transformer model)"),KSe.forEach(t),jsr=i(xee),I3=n(xee,"LI",{});var ZSe=s(I3);J1e=n(ZSe,"STRONG",{});var $5t=s(J1e);Dsr=r($5t,"vit"),$5t.forEach(t),Gsr=r(ZSe," \u2014 "),dW=n(ZSe,"A",{href:!0});var k5t=s(dW);Osr=r(k5t,"ViTForMaskedImageModeling"),k5t.forEach(t),Vsr=r(ZSe," (ViT model)"),ZSe.forEach(t),xee.forEach(t),Xsr=i(Fa),N3=n(Fa,"P",{});var eRe=s(N3);zsr=r(eRe,"The model is set in evaluation mode by default using "),Y1e=n(eRe,"CODE",{});var S5t=s(Y1e);Wsr=r(S5t,"model.eval()"),S5t.forEach(t),Qsr=r(eRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(eRe,"CODE",{});var R5t=s(K1e);Hsr=r(R5t,"model.train()"),R5t.forEach(t),eRe.forEach(t),Usr=i(Fa),T(q3.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Kje=i(f),kd=n(f,"H2",{class:!0});var tOe=s(kd);j3=n(tOe,"A",{id:!0,class:!0,href:!0});var P5t=s(j3);Z1e=n(P5t,"SPAN",{});var B5t=s(Z1e);T(o8.$$.fragment,B5t),B5t.forEach(t),P5t.forEach(t),Jsr=i(tOe),ebe=n(tOe,"SPAN",{});var I5t=s(ebe);Ysr=r(I5t,"AutoModelForObjectDetection"),I5t.forEach(t),tOe.forEach(t),Zje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(r8.$$.fragment,cl),Ksr=i(cl),Sd=n(cl,"P",{});var $ee=s(Sd);Zsr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cW=n($ee,"A",{href:!0});var N5t=s(cW);elr=r(N5t,"from_pretrained()"),N5t.forEach(t),olr=r($ee," class method or the "),fW=n($ee,"A",{href:!0});var q5t=s(fW);rlr=r(q5t,"from_config()"),q5t.forEach(t),tlr=r($ee,` class
method.`),$ee.forEach(t),alr=i(cl),t8=n(cl,"P",{});var aOe=s(t8);nlr=r(aOe,"This class cannot be instantiated directly using "),obe=n(aOe,"CODE",{});var j5t=s(obe);slr=r(j5t,"__init__()"),j5t.forEach(t),llr=r(aOe," (throws an error)."),aOe.forEach(t),ilr=i(cl),Ct=n(cl,"DIV",{class:!0});var $A=s(Ct);T(a8.$$.fragment,$A),dlr=i($A),rbe=n($A,"P",{});var D5t=s(rbe);clr=r(D5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),D5t.forEach(t),flr=i($A),Rd=n($A,"P",{});var kee=s(Rd);mlr=r(kee,`Note:
Loading a model from its configuration file does `),tbe=n(kee,"STRONG",{});var G5t=s(tbe);glr=r(G5t,"not"),G5t.forEach(t),hlr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(kee,"A",{href:!0});var O5t=s(mW);plr=r(O5t,"from_pretrained()"),O5t.forEach(t),_lr=r(kee," to load the model weights."),kee.forEach(t),ulr=i($A),T(D3.$$.fragment,$A),$A.forEach(t),blr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(n8.$$.fragment,Ta),vlr=i(Ta),abe=n(Ta,"P",{});var V5t=s(abe);Flr=r(V5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),V5t.forEach(t),Tlr=i(Ta),Ha=n(Ta,"P",{});var kA=s(Ha);Mlr=r(kA,"The model class to instantiate is selected based on the "),nbe=n(kA,"CODE",{});var X5t=s(nbe);Elr=r(X5t,"model_type"),X5t.forEach(t),Clr=r(kA,` property of the config object (either
passed as an argument or loaded from `),sbe=n(kA,"CODE",{});var z5t=s(sbe);wlr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),Alr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(kA,"CODE",{});var W5t=s(lbe);Llr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),ylr=r(kA,":"),kA.forEach(t),xlr=i(Ta),s8=n(Ta,"UL",{});var nOe=s(s8);G3=n(nOe,"LI",{});var oRe=s(G3);ibe=n(oRe,"STRONG",{});var Q5t=s(ibe);$lr=r(Q5t,"detr"),Q5t.forEach(t),klr=r(oRe," \u2014 "),gW=n(oRe,"A",{href:!0});var H5t=s(gW);Slr=r(H5t,"DetrForObjectDetection"),H5t.forEach(t),Rlr=r(oRe," (DETR model)"),oRe.forEach(t),Plr=i(nOe),O3=n(nOe,"LI",{});var rRe=s(O3);dbe=n(rRe,"STRONG",{});var U5t=s(dbe);Blr=r(U5t,"yolos"),U5t.forEach(t),Ilr=r(rRe," \u2014 "),hW=n(rRe,"A",{href:!0});var J5t=s(hW);Nlr=r(J5t,"YolosForObjectDetection"),J5t.forEach(t),qlr=r(rRe," (YOLOS model)"),rRe.forEach(t),nOe.forEach(t),jlr=i(Ta),V3=n(Ta,"P",{});var tRe=s(V3);Dlr=r(tRe,"The model is set in evaluation mode by default using "),cbe=n(tRe,"CODE",{});var Y5t=s(cbe);Glr=r(Y5t,"model.eval()"),Y5t.forEach(t),Olr=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(tRe,"CODE",{});var K5t=s(fbe);Vlr=r(K5t,"model.train()"),K5t.forEach(t),tRe.forEach(t),Xlr=i(Ta),T(X3.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),eDe=i(f),Pd=n(f,"H2",{class:!0});var sOe=s(Pd);z3=n(sOe,"A",{id:!0,class:!0,href:!0});var Z5t=s(z3);mbe=n(Z5t,"SPAN",{});var e3t=s(mbe);T(l8.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),zlr=i(sOe),gbe=n(sOe,"SPAN",{});var o3t=s(gbe);Wlr=r(o3t,"AutoModelForImageSegmentation"),o3t.forEach(t),sOe.forEach(t),oDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(i8.$$.fragment,fl),Qlr=i(fl),Bd=n(fl,"P",{});var See=s(Bd);Hlr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pW=n(See,"A",{href:!0});var r3t=s(pW);Ulr=r(r3t,"from_pretrained()"),r3t.forEach(t),Jlr=r(See," class method or the "),_W=n(See,"A",{href:!0});var t3t=s(_W);Ylr=r(t3t,"from_config()"),t3t.forEach(t),Klr=r(See,` class
method.`),See.forEach(t),Zlr=i(fl),d8=n(fl,"P",{});var lOe=s(d8);eir=r(lOe,"This class cannot be instantiated directly using "),hbe=n(lOe,"CODE",{});var a3t=s(hbe);oir=r(a3t,"__init__()"),a3t.forEach(t),rir=r(lOe," (throws an error)."),lOe.forEach(t),tir=i(fl),wt=n(fl,"DIV",{class:!0});var SA=s(wt);T(c8.$$.fragment,SA),air=i(SA),pbe=n(SA,"P",{});var n3t=s(pbe);nir=r(n3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),n3t.forEach(t),sir=i(SA),Id=n(SA,"P",{});var Ree=s(Id);lir=r(Ree,`Note:
Loading a model from its configuration file does `),_be=n(Ree,"STRONG",{});var s3t=s(_be);iir=r(s3t,"not"),s3t.forEach(t),dir=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Ree,"A",{href:!0});var l3t=s(uW);cir=r(l3t,"from_pretrained()"),l3t.forEach(t),fir=r(Ree," to load the model weights."),Ree.forEach(t),mir=i(SA),T(W3.$$.fragment,SA),SA.forEach(t),gir=i(fl),uo=n(fl,"DIV",{class:!0});var Ma=s(uo);T(f8.$$.fragment,Ma),hir=i(Ma),ube=n(Ma,"P",{});var i3t=s(ube);pir=r(i3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),i3t.forEach(t),_ir=i(Ma),Ua=n(Ma,"P",{});var RA=s(Ua);uir=r(RA,"The model class to instantiate is selected based on the "),bbe=n(RA,"CODE",{});var d3t=s(bbe);bir=r(d3t,"model_type"),d3t.forEach(t),vir=r(RA,` property of the config object (either
passed as an argument or loaded from `),vbe=n(RA,"CODE",{});var c3t=s(vbe);Fir=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),Tir=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(RA,"CODE",{});var f3t=s(Fbe);Mir=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),Eir=r(RA,":"),RA.forEach(t),Cir=i(Ma),Tbe=n(Ma,"UL",{});var m3t=s(Tbe);Q3=n(m3t,"LI",{});var aRe=s(Q3);Mbe=n(aRe,"STRONG",{});var g3t=s(Mbe);wir=r(g3t,"detr"),g3t.forEach(t),Air=r(aRe," \u2014 "),bW=n(aRe,"A",{href:!0});var h3t=s(bW);Lir=r(h3t,"DetrForSegmentation"),h3t.forEach(t),yir=r(aRe," (DETR model)"),aRe.forEach(t),m3t.forEach(t),xir=i(Ma),H3=n(Ma,"P",{});var nRe=s(H3);$ir=r(nRe,"The model is set in evaluation mode by default using "),Ebe=n(nRe,"CODE",{});var p3t=s(Ebe);kir=r(p3t,"model.eval()"),p3t.forEach(t),Sir=r(nRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(nRe,"CODE",{});var _3t=s(Cbe);Rir=r(_3t,"model.train()"),_3t.forEach(t),nRe.forEach(t),Pir=i(Ma),T(U3.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),rDe=i(f),Nd=n(f,"H2",{class:!0});var iOe=s(Nd);J3=n(iOe,"A",{id:!0,class:!0,href:!0});var u3t=s(J3);wbe=n(u3t,"SPAN",{});var b3t=s(wbe);T(m8.$$.fragment,b3t),b3t.forEach(t),u3t.forEach(t),Bir=i(iOe),Abe=n(iOe,"SPAN",{});var v3t=s(Abe);Iir=r(v3t,"AutoModelForSemanticSegmentation"),v3t.forEach(t),iOe.forEach(t),tDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(g8.$$.fragment,ml),Nir=i(ml),qd=n(ml,"P",{});var Pee=s(qd);qir=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vW=n(Pee,"A",{href:!0});var F3t=s(vW);jir=r(F3t,"from_pretrained()"),F3t.forEach(t),Dir=r(Pee," class method or the "),FW=n(Pee,"A",{href:!0});var T3t=s(FW);Gir=r(T3t,"from_config()"),T3t.forEach(t),Oir=r(Pee,` class
method.`),Pee.forEach(t),Vir=i(ml),h8=n(ml,"P",{});var dOe=s(h8);Xir=r(dOe,"This class cannot be instantiated directly using "),Lbe=n(dOe,"CODE",{});var M3t=s(Lbe);zir=r(M3t,"__init__()"),M3t.forEach(t),Wir=r(dOe," (throws an error)."),dOe.forEach(t),Qir=i(ml),At=n(ml,"DIV",{class:!0});var PA=s(At);T(p8.$$.fragment,PA),Hir=i(PA),ybe=n(PA,"P",{});var E3t=s(ybe);Uir=r(E3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),E3t.forEach(t),Jir=i(PA),jd=n(PA,"P",{});var Bee=s(jd);Yir=r(Bee,`Note:
Loading a model from its configuration file does `),xbe=n(Bee,"STRONG",{});var C3t=s(xbe);Kir=r(C3t,"not"),C3t.forEach(t),Zir=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Bee,"A",{href:!0});var w3t=s(TW);edr=r(w3t,"from_pretrained()"),w3t.forEach(t),odr=r(Bee," to load the model weights."),Bee.forEach(t),rdr=i(PA),T(Y3.$$.fragment,PA),PA.forEach(t),tdr=i(ml),bo=n(ml,"DIV",{class:!0});var Ea=s(bo);T(_8.$$.fragment,Ea),adr=i(Ea),$be=n(Ea,"P",{});var A3t=s($be);ndr=r(A3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),A3t.forEach(t),sdr=i(Ea),Ja=n(Ea,"P",{});var BA=s(Ja);ldr=r(BA,"The model class to instantiate is selected based on the "),kbe=n(BA,"CODE",{});var L3t=s(kbe);idr=r(L3t,"model_type"),L3t.forEach(t),ddr=r(BA,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(BA,"CODE",{});var y3t=s(Sbe);cdr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),fdr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(BA,"CODE",{});var x3t=s(Rbe);mdr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),gdr=r(BA,":"),BA.forEach(t),hdr=i(Ea),et=n(Ea,"UL",{});var gl=s(et);K3=n(gl,"LI",{});var sRe=s(K3);Pbe=n(sRe,"STRONG",{});var $3t=s(Pbe);pdr=r($3t,"beit"),$3t.forEach(t),_dr=r(sRe," \u2014 "),MW=n(sRe,"A",{href:!0});var k3t=s(MW);udr=r(k3t,"BeitForSemanticSegmentation"),k3t.forEach(t),bdr=r(sRe," (BEiT model)"),sRe.forEach(t),vdr=i(gl),Z3=n(gl,"LI",{});var lRe=s(Z3);Bbe=n(lRe,"STRONG",{});var S3t=s(Bbe);Fdr=r(S3t,"data2vec-vision"),S3t.forEach(t),Tdr=r(lRe," \u2014 "),EW=n(lRe,"A",{href:!0});var R3t=s(EW);Mdr=r(R3t,"Data2VecVisionForSemanticSegmentation"),R3t.forEach(t),Edr=r(lRe," (Data2VecVision model)"),lRe.forEach(t),Cdr=i(gl),eF=n(gl,"LI",{});var iRe=s(eF);Ibe=n(iRe,"STRONG",{});var P3t=s(Ibe);wdr=r(P3t,"dpt"),P3t.forEach(t),Adr=r(iRe," \u2014 "),CW=n(iRe,"A",{href:!0});var B3t=s(CW);Ldr=r(B3t,"DPTForSemanticSegmentation"),B3t.forEach(t),ydr=r(iRe," (DPT model)"),iRe.forEach(t),xdr=i(gl),oF=n(gl,"LI",{});var dRe=s(oF);Nbe=n(dRe,"STRONG",{});var I3t=s(Nbe);$dr=r(I3t,"mobilevit"),I3t.forEach(t),kdr=r(dRe," \u2014 "),wW=n(dRe,"A",{href:!0});var N3t=s(wW);Sdr=r(N3t,"MobileViTForSemanticSegmentation"),N3t.forEach(t),Rdr=r(dRe," (MobileViT model)"),dRe.forEach(t),Pdr=i(gl),rF=n(gl,"LI",{});var cRe=s(rF);qbe=n(cRe,"STRONG",{});var q3t=s(qbe);Bdr=r(q3t,"segformer"),q3t.forEach(t),Idr=r(cRe," \u2014 "),AW=n(cRe,"A",{href:!0});var j3t=s(AW);Ndr=r(j3t,"SegformerForSemanticSegmentation"),j3t.forEach(t),qdr=r(cRe," (SegFormer model)"),cRe.forEach(t),gl.forEach(t),jdr=i(Ea),tF=n(Ea,"P",{});var fRe=s(tF);Ddr=r(fRe,"The model is set in evaluation mode by default using "),jbe=n(fRe,"CODE",{});var D3t=s(jbe);Gdr=r(D3t,"model.eval()"),D3t.forEach(t),Odr=r(fRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(fRe,"CODE",{});var G3t=s(Dbe);Vdr=r(G3t,"model.train()"),G3t.forEach(t),fRe.forEach(t),Xdr=i(Ea),T(aF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),aDe=i(f),Dd=n(f,"H2",{class:!0});var cOe=s(Dd);nF=n(cOe,"A",{id:!0,class:!0,href:!0});var O3t=s(nF);Gbe=n(O3t,"SPAN",{});var V3t=s(Gbe);T(u8.$$.fragment,V3t),V3t.forEach(t),O3t.forEach(t),zdr=i(cOe),Obe=n(cOe,"SPAN",{});var X3t=s(Obe);Wdr=r(X3t,"AutoModelForInstanceSegmentation"),X3t.forEach(t),cOe.forEach(t),nDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(b8.$$.fragment,hl),Qdr=i(hl),Gd=n(hl,"P",{});var Iee=s(Gd);Hdr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=n(Iee,"A",{href:!0});var z3t=s(LW);Udr=r(z3t,"from_pretrained()"),z3t.forEach(t),Jdr=r(Iee," class method or the "),yW=n(Iee,"A",{href:!0});var W3t=s(yW);Ydr=r(W3t,"from_config()"),W3t.forEach(t),Kdr=r(Iee,` class
method.`),Iee.forEach(t),Zdr=i(hl),v8=n(hl,"P",{});var fOe=s(v8);ecr=r(fOe,"This class cannot be instantiated directly using "),Vbe=n(fOe,"CODE",{});var Q3t=s(Vbe);ocr=r(Q3t,"__init__()"),Q3t.forEach(t),rcr=r(fOe," (throws an error)."),fOe.forEach(t),tcr=i(hl),Lt=n(hl,"DIV",{class:!0});var IA=s(Lt);T(F8.$$.fragment,IA),acr=i(IA),Xbe=n(IA,"P",{});var H3t=s(Xbe);ncr=r(H3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),H3t.forEach(t),scr=i(IA),Od=n(IA,"P",{});var Nee=s(Od);lcr=r(Nee,`Note:
Loading a model from its configuration file does `),zbe=n(Nee,"STRONG",{});var U3t=s(zbe);icr=r(U3t,"not"),U3t.forEach(t),dcr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(Nee,"A",{href:!0});var J3t=s(xW);ccr=r(J3t,"from_pretrained()"),J3t.forEach(t),fcr=r(Nee," to load the model weights."),Nee.forEach(t),mcr=i(IA),T(sF.$$.fragment,IA),IA.forEach(t),gcr=i(hl),vo=n(hl,"DIV",{class:!0});var Ca=s(vo);T(T8.$$.fragment,Ca),hcr=i(Ca),Wbe=n(Ca,"P",{});var Y3t=s(Wbe);pcr=r(Y3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Y3t.forEach(t),_cr=i(Ca),Ya=n(Ca,"P",{});var NA=s(Ya);ucr=r(NA,"The model class to instantiate is selected based on the "),Qbe=n(NA,"CODE",{});var K3t=s(Qbe);bcr=r(K3t,"model_type"),K3t.forEach(t),vcr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(NA,"CODE",{});var Z3t=s(Hbe);Fcr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),Tcr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(NA,"CODE",{});var eFt=s(Ube);Mcr=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),Ecr=r(NA,":"),NA.forEach(t),Ccr=i(Ca),Jbe=n(Ca,"UL",{});var oFt=s(Jbe);lF=n(oFt,"LI",{});var mRe=s(lF);Ybe=n(mRe,"STRONG",{});var rFt=s(Ybe);wcr=r(rFt,"maskformer"),rFt.forEach(t),Acr=r(mRe," \u2014 "),$W=n(mRe,"A",{href:!0});var tFt=s($W);Lcr=r(tFt,"MaskFormerForInstanceSegmentation"),tFt.forEach(t),ycr=r(mRe," (MaskFormer model)"),mRe.forEach(t),oFt.forEach(t),xcr=i(Ca),iF=n(Ca,"P",{});var gRe=s(iF);$cr=r(gRe,"The model is set in evaluation mode by default using "),Kbe=n(gRe,"CODE",{});var aFt=s(Kbe);kcr=r(aFt,"model.eval()"),aFt.forEach(t),Scr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(gRe,"CODE",{});var nFt=s(Zbe);Rcr=r(nFt,"model.train()"),nFt.forEach(t),gRe.forEach(t),Pcr=i(Ca),T(dF.$$.fragment,Ca),Ca.forEach(t),hl.forEach(t),sDe=i(f),Vd=n(f,"H2",{class:!0});var mOe=s(Vd);cF=n(mOe,"A",{id:!0,class:!0,href:!0});var sFt=s(cF);e2e=n(sFt,"SPAN",{});var lFt=s(e2e);T(M8.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),Bcr=i(mOe),o2e=n(mOe,"SPAN",{});var iFt=s(o2e);Icr=r(iFt,"TFAutoModel"),iFt.forEach(t),mOe.forEach(t),lDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(E8.$$.fragment,pl),Ncr=i(pl),Xd=n(pl,"P",{});var qee=s(Xd);qcr=r(qee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=n(qee,"A",{href:!0});var dFt=s(kW);jcr=r(dFt,"from_pretrained()"),dFt.forEach(t),Dcr=r(qee," class method or the "),SW=n(qee,"A",{href:!0});var cFt=s(SW);Gcr=r(cFt,"from_config()"),cFt.forEach(t),Ocr=r(qee,` class
method.`),qee.forEach(t),Vcr=i(pl),C8=n(pl,"P",{});var gOe=s(C8);Xcr=r(gOe,"This class cannot be instantiated directly using "),r2e=n(gOe,"CODE",{});var fFt=s(r2e);zcr=r(fFt,"__init__()"),fFt.forEach(t),Wcr=r(gOe," (throws an error)."),gOe.forEach(t),Qcr=i(pl),yt=n(pl,"DIV",{class:!0});var qA=s(yt);T(w8.$$.fragment,qA),Hcr=i(qA),t2e=n(qA,"P",{});var mFt=s(t2e);Ucr=r(mFt,"Instantiates one of the base model classes of the library from a configuration."),mFt.forEach(t),Jcr=i(qA),zd=n(qA,"P",{});var jee=s(zd);Ycr=r(jee,`Note:
Loading a model from its configuration file does `),a2e=n(jee,"STRONG",{});var gFt=s(a2e);Kcr=r(gFt,"not"),gFt.forEach(t),Zcr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(jee,"A",{href:!0});var hFt=s(RW);efr=r(hFt,"from_pretrained()"),hFt.forEach(t),ofr=r(jee," to load the model weights."),jee.forEach(t),rfr=i(qA),T(fF.$$.fragment,qA),qA.forEach(t),tfr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(A8.$$.fragment,_l),afr=i(_l),n2e=n(_l,"P",{});var pFt=s(n2e);nfr=r(pFt,"Instantiate one of the base model classes of the library from a pretrained model."),pFt.forEach(t),sfr=i(_l),Ka=n(_l,"P",{});var jA=s(Ka);lfr=r(jA,"The model class to instantiate is selected based on the "),s2e=n(jA,"CODE",{});var _Ft=s(s2e);ifr=r(_Ft,"model_type"),_Ft.forEach(t),dfr=r(jA,` property of the config object (either
passed as an argument or loaded from `),l2e=n(jA,"CODE",{});var uFt=s(l2e);cfr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),ffr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(jA,"CODE",{});var bFt=s(i2e);mfr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),gfr=r(jA,":"),jA.forEach(t),hfr=i(_l),q=n(_l,"UL",{});var D=s(q);mF=n(D,"LI",{});var hRe=s(mF);d2e=n(hRe,"STRONG",{});var vFt=s(d2e);pfr=r(vFt,"albert"),vFt.forEach(t),_fr=r(hRe," \u2014 "),PW=n(hRe,"A",{href:!0});var FFt=s(PW);ufr=r(FFt,"TFAlbertModel"),FFt.forEach(t),bfr=r(hRe," (ALBERT model)"),hRe.forEach(t),vfr=i(D),gF=n(D,"LI",{});var pRe=s(gF);c2e=n(pRe,"STRONG",{});var TFt=s(c2e);Ffr=r(TFt,"bart"),TFt.forEach(t),Tfr=r(pRe," \u2014 "),BW=n(pRe,"A",{href:!0});var MFt=s(BW);Mfr=r(MFt,"TFBartModel"),MFt.forEach(t),Efr=r(pRe," (BART model)"),pRe.forEach(t),Cfr=i(D),hF=n(D,"LI",{});var _Re=s(hF);f2e=n(_Re,"STRONG",{});var EFt=s(f2e);wfr=r(EFt,"bert"),EFt.forEach(t),Afr=r(_Re," \u2014 "),IW=n(_Re,"A",{href:!0});var CFt=s(IW);Lfr=r(CFt,"TFBertModel"),CFt.forEach(t),yfr=r(_Re," (BERT model)"),_Re.forEach(t),xfr=i(D),pF=n(D,"LI",{});var uRe=s(pF);m2e=n(uRe,"STRONG",{});var wFt=s(m2e);$fr=r(wFt,"blenderbot"),wFt.forEach(t),kfr=r(uRe," \u2014 "),NW=n(uRe,"A",{href:!0});var AFt=s(NW);Sfr=r(AFt,"TFBlenderbotModel"),AFt.forEach(t),Rfr=r(uRe," (Blenderbot model)"),uRe.forEach(t),Pfr=i(D),_F=n(D,"LI",{});var bRe=s(_F);g2e=n(bRe,"STRONG",{});var LFt=s(g2e);Bfr=r(LFt,"blenderbot-small"),LFt.forEach(t),Ifr=r(bRe," \u2014 "),qW=n(bRe,"A",{href:!0});var yFt=s(qW);Nfr=r(yFt,"TFBlenderbotSmallModel"),yFt.forEach(t),qfr=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),jfr=i(D),uF=n(D,"LI",{});var vRe=s(uF);h2e=n(vRe,"STRONG",{});var xFt=s(h2e);Dfr=r(xFt,"camembert"),xFt.forEach(t),Gfr=r(vRe," \u2014 "),jW=n(vRe,"A",{href:!0});var $Ft=s(jW);Ofr=r($Ft,"TFCamembertModel"),$Ft.forEach(t),Vfr=r(vRe," (CamemBERT model)"),vRe.forEach(t),Xfr=i(D),bF=n(D,"LI",{});var FRe=s(bF);p2e=n(FRe,"STRONG",{});var kFt=s(p2e);zfr=r(kFt,"clip"),kFt.forEach(t),Wfr=r(FRe," \u2014 "),DW=n(FRe,"A",{href:!0});var SFt=s(DW);Qfr=r(SFt,"TFCLIPModel"),SFt.forEach(t),Hfr=r(FRe," (CLIP model)"),FRe.forEach(t),Ufr=i(D),vF=n(D,"LI",{});var TRe=s(vF);_2e=n(TRe,"STRONG",{});var RFt=s(_2e);Jfr=r(RFt,"convbert"),RFt.forEach(t),Yfr=r(TRe," \u2014 "),GW=n(TRe,"A",{href:!0});var PFt=s(GW);Kfr=r(PFt,"TFConvBertModel"),PFt.forEach(t),Zfr=r(TRe," (ConvBERT model)"),TRe.forEach(t),emr=i(D),FF=n(D,"LI",{});var MRe=s(FF);u2e=n(MRe,"STRONG",{});var BFt=s(u2e);omr=r(BFt,"convnext"),BFt.forEach(t),rmr=r(MRe," \u2014 "),OW=n(MRe,"A",{href:!0});var IFt=s(OW);tmr=r(IFt,"TFConvNextModel"),IFt.forEach(t),amr=r(MRe," (ConvNeXT model)"),MRe.forEach(t),nmr=i(D),TF=n(D,"LI",{});var ERe=s(TF);b2e=n(ERe,"STRONG",{});var NFt=s(b2e);smr=r(NFt,"ctrl"),NFt.forEach(t),lmr=r(ERe," \u2014 "),VW=n(ERe,"A",{href:!0});var qFt=s(VW);imr=r(qFt,"TFCTRLModel"),qFt.forEach(t),dmr=r(ERe," (CTRL model)"),ERe.forEach(t),cmr=i(D),MF=n(D,"LI",{});var CRe=s(MF);v2e=n(CRe,"STRONG",{});var jFt=s(v2e);fmr=r(jFt,"data2vec-vision"),jFt.forEach(t),mmr=r(CRe," \u2014 "),XW=n(CRe,"A",{href:!0});var DFt=s(XW);gmr=r(DFt,"TFData2VecVisionModel"),DFt.forEach(t),hmr=r(CRe," (Data2VecVision model)"),CRe.forEach(t),pmr=i(D),EF=n(D,"LI",{});var wRe=s(EF);F2e=n(wRe,"STRONG",{});var GFt=s(F2e);_mr=r(GFt,"deberta"),GFt.forEach(t),umr=r(wRe," \u2014 "),zW=n(wRe,"A",{href:!0});var OFt=s(zW);bmr=r(OFt,"TFDebertaModel"),OFt.forEach(t),vmr=r(wRe," (DeBERTa model)"),wRe.forEach(t),Fmr=i(D),CF=n(D,"LI",{});var ARe=s(CF);T2e=n(ARe,"STRONG",{});var VFt=s(T2e);Tmr=r(VFt,"deberta-v2"),VFt.forEach(t),Mmr=r(ARe," \u2014 "),WW=n(ARe,"A",{href:!0});var XFt=s(WW);Emr=r(XFt,"TFDebertaV2Model"),XFt.forEach(t),Cmr=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),wmr=i(D),wF=n(D,"LI",{});var LRe=s(wF);M2e=n(LRe,"STRONG",{});var zFt=s(M2e);Amr=r(zFt,"distilbert"),zFt.forEach(t),Lmr=r(LRe," \u2014 "),QW=n(LRe,"A",{href:!0});var WFt=s(QW);ymr=r(WFt,"TFDistilBertModel"),WFt.forEach(t),xmr=r(LRe," (DistilBERT model)"),LRe.forEach(t),$mr=i(D),AF=n(D,"LI",{});var yRe=s(AF);E2e=n(yRe,"STRONG",{});var QFt=s(E2e);kmr=r(QFt,"dpr"),QFt.forEach(t),Smr=r(yRe," \u2014 "),HW=n(yRe,"A",{href:!0});var HFt=s(HW);Rmr=r(HFt,"TFDPRQuestionEncoder"),HFt.forEach(t),Pmr=r(yRe," (DPR model)"),yRe.forEach(t),Bmr=i(D),LF=n(D,"LI",{});var xRe=s(LF);C2e=n(xRe,"STRONG",{});var UFt=s(C2e);Imr=r(UFt,"electra"),UFt.forEach(t),Nmr=r(xRe," \u2014 "),UW=n(xRe,"A",{href:!0});var JFt=s(UW);qmr=r(JFt,"TFElectraModel"),JFt.forEach(t),jmr=r(xRe," (ELECTRA model)"),xRe.forEach(t),Dmr=i(D),yF=n(D,"LI",{});var $Re=s(yF);w2e=n($Re,"STRONG",{});var YFt=s(w2e);Gmr=r(YFt,"flaubert"),YFt.forEach(t),Omr=r($Re," \u2014 "),JW=n($Re,"A",{href:!0});var KFt=s(JW);Vmr=r(KFt,"TFFlaubertModel"),KFt.forEach(t),Xmr=r($Re," (FlauBERT model)"),$Re.forEach(t),zmr=i(D),Ns=n(D,"LI",{});var nk=s(Ns);A2e=n(nk,"STRONG",{});var ZFt=s(A2e);Wmr=r(ZFt,"funnel"),ZFt.forEach(t),Qmr=r(nk," \u2014 "),YW=n(nk,"A",{href:!0});var eTt=s(YW);Hmr=r(eTt,"TFFunnelModel"),eTt.forEach(t),Umr=r(nk," or "),KW=n(nk,"A",{href:!0});var oTt=s(KW);Jmr=r(oTt,"TFFunnelBaseModel"),oTt.forEach(t),Ymr=r(nk," (Funnel Transformer model)"),nk.forEach(t),Kmr=i(D),xF=n(D,"LI",{});var kRe=s(xF);L2e=n(kRe,"STRONG",{});var rTt=s(L2e);Zmr=r(rTt,"gpt2"),rTt.forEach(t),egr=r(kRe," \u2014 "),ZW=n(kRe,"A",{href:!0});var tTt=s(ZW);ogr=r(tTt,"TFGPT2Model"),tTt.forEach(t),rgr=r(kRe," (OpenAI GPT-2 model)"),kRe.forEach(t),tgr=i(D),$F=n(D,"LI",{});var SRe=s($F);y2e=n(SRe,"STRONG",{});var aTt=s(y2e);agr=r(aTt,"gptj"),aTt.forEach(t),ngr=r(SRe," \u2014 "),eQ=n(SRe,"A",{href:!0});var nTt=s(eQ);sgr=r(nTt,"TFGPTJModel"),nTt.forEach(t),lgr=r(SRe," (GPT-J model)"),SRe.forEach(t),igr=i(D),kF=n(D,"LI",{});var RRe=s(kF);x2e=n(RRe,"STRONG",{});var sTt=s(x2e);dgr=r(sTt,"hubert"),sTt.forEach(t),cgr=r(RRe," \u2014 "),oQ=n(RRe,"A",{href:!0});var lTt=s(oQ);fgr=r(lTt,"TFHubertModel"),lTt.forEach(t),mgr=r(RRe," (Hubert model)"),RRe.forEach(t),ggr=i(D),SF=n(D,"LI",{});var PRe=s(SF);$2e=n(PRe,"STRONG",{});var iTt=s($2e);hgr=r(iTt,"layoutlm"),iTt.forEach(t),pgr=r(PRe," \u2014 "),rQ=n(PRe,"A",{href:!0});var dTt=s(rQ);_gr=r(dTt,"TFLayoutLMModel"),dTt.forEach(t),ugr=r(PRe," (LayoutLM model)"),PRe.forEach(t),bgr=i(D),RF=n(D,"LI",{});var BRe=s(RF);k2e=n(BRe,"STRONG",{});var cTt=s(k2e);vgr=r(cTt,"led"),cTt.forEach(t),Fgr=r(BRe," \u2014 "),tQ=n(BRe,"A",{href:!0});var fTt=s(tQ);Tgr=r(fTt,"TFLEDModel"),fTt.forEach(t),Mgr=r(BRe," (LED model)"),BRe.forEach(t),Egr=i(D),PF=n(D,"LI",{});var IRe=s(PF);S2e=n(IRe,"STRONG",{});var mTt=s(S2e);Cgr=r(mTt,"longformer"),mTt.forEach(t),wgr=r(IRe," \u2014 "),aQ=n(IRe,"A",{href:!0});var gTt=s(aQ);Agr=r(gTt,"TFLongformerModel"),gTt.forEach(t),Lgr=r(IRe," (Longformer model)"),IRe.forEach(t),ygr=i(D),BF=n(D,"LI",{});var NRe=s(BF);R2e=n(NRe,"STRONG",{});var hTt=s(R2e);xgr=r(hTt,"lxmert"),hTt.forEach(t),$gr=r(NRe," \u2014 "),nQ=n(NRe,"A",{href:!0});var pTt=s(nQ);kgr=r(pTt,"TFLxmertModel"),pTt.forEach(t),Sgr=r(NRe," (LXMERT model)"),NRe.forEach(t),Rgr=i(D),IF=n(D,"LI",{});var qRe=s(IF);P2e=n(qRe,"STRONG",{});var _Tt=s(P2e);Pgr=r(_Tt,"marian"),_Tt.forEach(t),Bgr=r(qRe," \u2014 "),sQ=n(qRe,"A",{href:!0});var uTt=s(sQ);Igr=r(uTt,"TFMarianModel"),uTt.forEach(t),Ngr=r(qRe," (Marian model)"),qRe.forEach(t),qgr=i(D),NF=n(D,"LI",{});var jRe=s(NF);B2e=n(jRe,"STRONG",{});var bTt=s(B2e);jgr=r(bTt,"mbart"),bTt.forEach(t),Dgr=r(jRe," \u2014 "),lQ=n(jRe,"A",{href:!0});var vTt=s(lQ);Ggr=r(vTt,"TFMBartModel"),vTt.forEach(t),Ogr=r(jRe," (mBART model)"),jRe.forEach(t),Vgr=i(D),qF=n(D,"LI",{});var DRe=s(qF);I2e=n(DRe,"STRONG",{});var FTt=s(I2e);Xgr=r(FTt,"mobilebert"),FTt.forEach(t),zgr=r(DRe," \u2014 "),iQ=n(DRe,"A",{href:!0});var TTt=s(iQ);Wgr=r(TTt,"TFMobileBertModel"),TTt.forEach(t),Qgr=r(DRe," (MobileBERT model)"),DRe.forEach(t),Hgr=i(D),jF=n(D,"LI",{});var GRe=s(jF);N2e=n(GRe,"STRONG",{});var MTt=s(N2e);Ugr=r(MTt,"mpnet"),MTt.forEach(t),Jgr=r(GRe," \u2014 "),dQ=n(GRe,"A",{href:!0});var ETt=s(dQ);Ygr=r(ETt,"TFMPNetModel"),ETt.forEach(t),Kgr=r(GRe," (MPNet model)"),GRe.forEach(t),Zgr=i(D),DF=n(D,"LI",{});var ORe=s(DF);q2e=n(ORe,"STRONG",{});var CTt=s(q2e);ehr=r(CTt,"mt5"),CTt.forEach(t),ohr=r(ORe," \u2014 "),cQ=n(ORe,"A",{href:!0});var wTt=s(cQ);rhr=r(wTt,"TFMT5Model"),wTt.forEach(t),thr=r(ORe," (MT5 model)"),ORe.forEach(t),ahr=i(D),GF=n(D,"LI",{});var VRe=s(GF);j2e=n(VRe,"STRONG",{});var ATt=s(j2e);nhr=r(ATt,"openai-gpt"),ATt.forEach(t),shr=r(VRe," \u2014 "),fQ=n(VRe,"A",{href:!0});var LTt=s(fQ);lhr=r(LTt,"TFOpenAIGPTModel"),LTt.forEach(t),ihr=r(VRe," (OpenAI GPT model)"),VRe.forEach(t),dhr=i(D),OF=n(D,"LI",{});var XRe=s(OF);D2e=n(XRe,"STRONG",{});var yTt=s(D2e);chr=r(yTt,"opt"),yTt.forEach(t),fhr=r(XRe," \u2014 "),mQ=n(XRe,"A",{href:!0});var xTt=s(mQ);mhr=r(xTt,"TFOPTModel"),xTt.forEach(t),ghr=r(XRe," (OPT model)"),XRe.forEach(t),hhr=i(D),VF=n(D,"LI",{});var zRe=s(VF);G2e=n(zRe,"STRONG",{});var $Tt=s(G2e);phr=r($Tt,"pegasus"),$Tt.forEach(t),_hr=r(zRe," \u2014 "),gQ=n(zRe,"A",{href:!0});var kTt=s(gQ);uhr=r(kTt,"TFPegasusModel"),kTt.forEach(t),bhr=r(zRe," (Pegasus model)"),zRe.forEach(t),vhr=i(D),XF=n(D,"LI",{});var WRe=s(XF);O2e=n(WRe,"STRONG",{});var STt=s(O2e);Fhr=r(STt,"rembert"),STt.forEach(t),Thr=r(WRe," \u2014 "),hQ=n(WRe,"A",{href:!0});var RTt=s(hQ);Mhr=r(RTt,"TFRemBertModel"),RTt.forEach(t),Ehr=r(WRe," (RemBERT model)"),WRe.forEach(t),Chr=i(D),zF=n(D,"LI",{});var QRe=s(zF);V2e=n(QRe,"STRONG",{});var PTt=s(V2e);whr=r(PTt,"roberta"),PTt.forEach(t),Ahr=r(QRe," \u2014 "),pQ=n(QRe,"A",{href:!0});var BTt=s(pQ);Lhr=r(BTt,"TFRobertaModel"),BTt.forEach(t),yhr=r(QRe," (RoBERTa model)"),QRe.forEach(t),xhr=i(D),WF=n(D,"LI",{});var HRe=s(WF);X2e=n(HRe,"STRONG",{});var ITt=s(X2e);$hr=r(ITt,"roformer"),ITt.forEach(t),khr=r(HRe," \u2014 "),_Q=n(HRe,"A",{href:!0});var NTt=s(_Q);Shr=r(NTt,"TFRoFormerModel"),NTt.forEach(t),Rhr=r(HRe," (RoFormer model)"),HRe.forEach(t),Phr=i(D),QF=n(D,"LI",{});var URe=s(QF);z2e=n(URe,"STRONG",{});var qTt=s(z2e);Bhr=r(qTt,"speech_to_text"),qTt.forEach(t),Ihr=r(URe," \u2014 "),uQ=n(URe,"A",{href:!0});var jTt=s(uQ);Nhr=r(jTt,"TFSpeech2TextModel"),jTt.forEach(t),qhr=r(URe," (Speech2Text model)"),URe.forEach(t),jhr=i(D),HF=n(D,"LI",{});var JRe=s(HF);W2e=n(JRe,"STRONG",{});var DTt=s(W2e);Dhr=r(DTt,"swin"),DTt.forEach(t),Ghr=r(JRe," \u2014 "),bQ=n(JRe,"A",{href:!0});var GTt=s(bQ);Ohr=r(GTt,"TFSwinModel"),GTt.forEach(t),Vhr=r(JRe," (Swin Transformer model)"),JRe.forEach(t),Xhr=i(D),UF=n(D,"LI",{});var YRe=s(UF);Q2e=n(YRe,"STRONG",{});var OTt=s(Q2e);zhr=r(OTt,"t5"),OTt.forEach(t),Whr=r(YRe," \u2014 "),vQ=n(YRe,"A",{href:!0});var VTt=s(vQ);Qhr=r(VTt,"TFT5Model"),VTt.forEach(t),Hhr=r(YRe," (T5 model)"),YRe.forEach(t),Uhr=i(D),JF=n(D,"LI",{});var KRe=s(JF);H2e=n(KRe,"STRONG",{});var XTt=s(H2e);Jhr=r(XTt,"tapas"),XTt.forEach(t),Yhr=r(KRe," \u2014 "),FQ=n(KRe,"A",{href:!0});var zTt=s(FQ);Khr=r(zTt,"TFTapasModel"),zTt.forEach(t),Zhr=r(KRe," (TAPAS model)"),KRe.forEach(t),epr=i(D),YF=n(D,"LI",{});var ZRe=s(YF);U2e=n(ZRe,"STRONG",{});var WTt=s(U2e);opr=r(WTt,"transfo-xl"),WTt.forEach(t),rpr=r(ZRe," \u2014 "),TQ=n(ZRe,"A",{href:!0});var QTt=s(TQ);tpr=r(QTt,"TFTransfoXLModel"),QTt.forEach(t),apr=r(ZRe," (Transformer-XL model)"),ZRe.forEach(t),npr=i(D),KF=n(D,"LI",{});var ePe=s(KF);J2e=n(ePe,"STRONG",{});var HTt=s(J2e);spr=r(HTt,"vit"),HTt.forEach(t),lpr=r(ePe," \u2014 "),MQ=n(ePe,"A",{href:!0});var UTt=s(MQ);ipr=r(UTt,"TFViTModel"),UTt.forEach(t),dpr=r(ePe," (ViT model)"),ePe.forEach(t),cpr=i(D),ZF=n(D,"LI",{});var oPe=s(ZF);Y2e=n(oPe,"STRONG",{});var JTt=s(Y2e);fpr=r(JTt,"vit_mae"),JTt.forEach(t),mpr=r(oPe," \u2014 "),EQ=n(oPe,"A",{href:!0});var YTt=s(EQ);gpr=r(YTt,"TFViTMAEModel"),YTt.forEach(t),hpr=r(oPe," (ViTMAE model)"),oPe.forEach(t),ppr=i(D),eT=n(D,"LI",{});var rPe=s(eT);K2e=n(rPe,"STRONG",{});var KTt=s(K2e);_pr=r(KTt,"wav2vec2"),KTt.forEach(t),upr=r(rPe," \u2014 "),CQ=n(rPe,"A",{href:!0});var ZTt=s(CQ);bpr=r(ZTt,"TFWav2Vec2Model"),ZTt.forEach(t),vpr=r(rPe," (Wav2Vec2 model)"),rPe.forEach(t),Fpr=i(D),oT=n(D,"LI",{});var tPe=s(oT);Z2e=n(tPe,"STRONG",{});var e7t=s(Z2e);Tpr=r(e7t,"xlm"),e7t.forEach(t),Mpr=r(tPe," \u2014 "),wQ=n(tPe,"A",{href:!0});var o7t=s(wQ);Epr=r(o7t,"TFXLMModel"),o7t.forEach(t),Cpr=r(tPe," (XLM model)"),tPe.forEach(t),wpr=i(D),rT=n(D,"LI",{});var aPe=s(rT);e4e=n(aPe,"STRONG",{});var r7t=s(e4e);Apr=r(r7t,"xlm-roberta"),r7t.forEach(t),Lpr=r(aPe," \u2014 "),AQ=n(aPe,"A",{href:!0});var t7t=s(AQ);ypr=r(t7t,"TFXLMRobertaModel"),t7t.forEach(t),xpr=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),$pr=i(D),tT=n(D,"LI",{});var nPe=s(tT);o4e=n(nPe,"STRONG",{});var a7t=s(o4e);kpr=r(a7t,"xlnet"),a7t.forEach(t),Spr=r(nPe," \u2014 "),LQ=n(nPe,"A",{href:!0});var n7t=s(LQ);Rpr=r(n7t,"TFXLNetModel"),n7t.forEach(t),Ppr=r(nPe," (XLNet model)"),nPe.forEach(t),D.forEach(t),Bpr=i(_l),T(aT.$$.fragment,_l),_l.forEach(t),pl.forEach(t),iDe=i(f),Wd=n(f,"H2",{class:!0});var hOe=s(Wd);nT=n(hOe,"A",{id:!0,class:!0,href:!0});var s7t=s(nT);r4e=n(s7t,"SPAN",{});var l7t=s(r4e);T(L8.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),Ipr=i(hOe),t4e=n(hOe,"SPAN",{});var i7t=s(t4e);Npr=r(i7t,"TFAutoModelForPreTraining"),i7t.forEach(t),hOe.forEach(t),dDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(y8.$$.fragment,ul),qpr=i(ul),Qd=n(ul,"P",{});var Dee=s(Qd);jpr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=n(Dee,"A",{href:!0});var d7t=s(yQ);Dpr=r(d7t,"from_pretrained()"),d7t.forEach(t),Gpr=r(Dee," class method or the "),xQ=n(Dee,"A",{href:!0});var c7t=s(xQ);Opr=r(c7t,"from_config()"),c7t.forEach(t),Vpr=r(Dee,` class
method.`),Dee.forEach(t),Xpr=i(ul),x8=n(ul,"P",{});var pOe=s(x8);zpr=r(pOe,"This class cannot be instantiated directly using "),a4e=n(pOe,"CODE",{});var f7t=s(a4e);Wpr=r(f7t,"__init__()"),f7t.forEach(t),Qpr=r(pOe," (throws an error)."),pOe.forEach(t),Hpr=i(ul),xt=n(ul,"DIV",{class:!0});var DA=s(xt);T($8.$$.fragment,DA),Upr=i(DA),n4e=n(DA,"P",{});var m7t=s(n4e);Jpr=r(m7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m7t.forEach(t),Ypr=i(DA),Hd=n(DA,"P",{});var Gee=s(Hd);Kpr=r(Gee,`Note:
Loading a model from its configuration file does `),s4e=n(Gee,"STRONG",{});var g7t=s(s4e);Zpr=r(g7t,"not"),g7t.forEach(t),e_r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(Gee,"A",{href:!0});var h7t=s($Q);o_r=r(h7t,"from_pretrained()"),h7t.forEach(t),r_r=r(Gee," to load the model weights."),Gee.forEach(t),t_r=i(DA),T(sT.$$.fragment,DA),DA.forEach(t),a_r=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(k8.$$.fragment,bl),n_r=i(bl),l4e=n(bl,"P",{});var p7t=s(l4e);s_r=r(p7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p7t.forEach(t),l_r=i(bl),Za=n(bl,"P",{});var GA=s(Za);i_r=r(GA,"The model class to instantiate is selected based on the "),i4e=n(GA,"CODE",{});var _7t=s(i4e);d_r=r(_7t,"model_type"),_7t.forEach(t),c_r=r(GA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(GA,"CODE",{});var u7t=s(d4e);f_r=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),m_r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(GA,"CODE",{});var b7t=s(c4e);g_r=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),h_r=r(GA,":"),GA.forEach(t),p_r=i(bl),se=n(bl,"UL",{});var le=s(se);lT=n(le,"LI",{});var sPe=s(lT);f4e=n(sPe,"STRONG",{});var v7t=s(f4e);__r=r(v7t,"albert"),v7t.forEach(t),u_r=r(sPe," \u2014 "),kQ=n(sPe,"A",{href:!0});var F7t=s(kQ);b_r=r(F7t,"TFAlbertForPreTraining"),F7t.forEach(t),v_r=r(sPe," (ALBERT model)"),sPe.forEach(t),F_r=i(le),iT=n(le,"LI",{});var lPe=s(iT);m4e=n(lPe,"STRONG",{});var T7t=s(m4e);T_r=r(T7t,"bart"),T7t.forEach(t),M_r=r(lPe," \u2014 "),SQ=n(lPe,"A",{href:!0});var M7t=s(SQ);E_r=r(M7t,"TFBartForConditionalGeneration"),M7t.forEach(t),C_r=r(lPe," (BART model)"),lPe.forEach(t),w_r=i(le),dT=n(le,"LI",{});var iPe=s(dT);g4e=n(iPe,"STRONG",{});var E7t=s(g4e);A_r=r(E7t,"bert"),E7t.forEach(t),L_r=r(iPe," \u2014 "),RQ=n(iPe,"A",{href:!0});var C7t=s(RQ);y_r=r(C7t,"TFBertForPreTraining"),C7t.forEach(t),x_r=r(iPe," (BERT model)"),iPe.forEach(t),$_r=i(le),cT=n(le,"LI",{});var dPe=s(cT);h4e=n(dPe,"STRONG",{});var w7t=s(h4e);k_r=r(w7t,"camembert"),w7t.forEach(t),S_r=r(dPe," \u2014 "),PQ=n(dPe,"A",{href:!0});var A7t=s(PQ);R_r=r(A7t,"TFCamembertForMaskedLM"),A7t.forEach(t),P_r=r(dPe," (CamemBERT model)"),dPe.forEach(t),B_r=i(le),fT=n(le,"LI",{});var cPe=s(fT);p4e=n(cPe,"STRONG",{});var L7t=s(p4e);I_r=r(L7t,"ctrl"),L7t.forEach(t),N_r=r(cPe," \u2014 "),BQ=n(cPe,"A",{href:!0});var y7t=s(BQ);q_r=r(y7t,"TFCTRLLMHeadModel"),y7t.forEach(t),j_r=r(cPe," (CTRL model)"),cPe.forEach(t),D_r=i(le),mT=n(le,"LI",{});var fPe=s(mT);_4e=n(fPe,"STRONG",{});var x7t=s(_4e);G_r=r(x7t,"distilbert"),x7t.forEach(t),O_r=r(fPe," \u2014 "),IQ=n(fPe,"A",{href:!0});var $7t=s(IQ);V_r=r($7t,"TFDistilBertForMaskedLM"),$7t.forEach(t),X_r=r(fPe," (DistilBERT model)"),fPe.forEach(t),z_r=i(le),gT=n(le,"LI",{});var mPe=s(gT);u4e=n(mPe,"STRONG",{});var k7t=s(u4e);W_r=r(k7t,"electra"),k7t.forEach(t),Q_r=r(mPe," \u2014 "),NQ=n(mPe,"A",{href:!0});var S7t=s(NQ);H_r=r(S7t,"TFElectraForPreTraining"),S7t.forEach(t),U_r=r(mPe," (ELECTRA model)"),mPe.forEach(t),J_r=i(le),hT=n(le,"LI",{});var gPe=s(hT);b4e=n(gPe,"STRONG",{});var R7t=s(b4e);Y_r=r(R7t,"flaubert"),R7t.forEach(t),K_r=r(gPe," \u2014 "),qQ=n(gPe,"A",{href:!0});var P7t=s(qQ);Z_r=r(P7t,"TFFlaubertWithLMHeadModel"),P7t.forEach(t),eur=r(gPe," (FlauBERT model)"),gPe.forEach(t),our=i(le),pT=n(le,"LI",{});var hPe=s(pT);v4e=n(hPe,"STRONG",{});var B7t=s(v4e);rur=r(B7t,"funnel"),B7t.forEach(t),tur=r(hPe," \u2014 "),jQ=n(hPe,"A",{href:!0});var I7t=s(jQ);aur=r(I7t,"TFFunnelForPreTraining"),I7t.forEach(t),nur=r(hPe," (Funnel Transformer model)"),hPe.forEach(t),sur=i(le),_T=n(le,"LI",{});var pPe=s(_T);F4e=n(pPe,"STRONG",{});var N7t=s(F4e);lur=r(N7t,"gpt2"),N7t.forEach(t),iur=r(pPe," \u2014 "),DQ=n(pPe,"A",{href:!0});var q7t=s(DQ);dur=r(q7t,"TFGPT2LMHeadModel"),q7t.forEach(t),cur=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),fur=i(le),uT=n(le,"LI",{});var _Pe=s(uT);T4e=n(_Pe,"STRONG",{});var j7t=s(T4e);mur=r(j7t,"layoutlm"),j7t.forEach(t),gur=r(_Pe," \u2014 "),GQ=n(_Pe,"A",{href:!0});var D7t=s(GQ);hur=r(D7t,"TFLayoutLMForMaskedLM"),D7t.forEach(t),pur=r(_Pe," (LayoutLM model)"),_Pe.forEach(t),_ur=i(le),bT=n(le,"LI",{});var uPe=s(bT);M4e=n(uPe,"STRONG",{});var G7t=s(M4e);uur=r(G7t,"lxmert"),G7t.forEach(t),bur=r(uPe," \u2014 "),OQ=n(uPe,"A",{href:!0});var O7t=s(OQ);vur=r(O7t,"TFLxmertForPreTraining"),O7t.forEach(t),Fur=r(uPe," (LXMERT model)"),uPe.forEach(t),Tur=i(le),vT=n(le,"LI",{});var bPe=s(vT);E4e=n(bPe,"STRONG",{});var V7t=s(E4e);Mur=r(V7t,"mobilebert"),V7t.forEach(t),Eur=r(bPe," \u2014 "),VQ=n(bPe,"A",{href:!0});var X7t=s(VQ);Cur=r(X7t,"TFMobileBertForPreTraining"),X7t.forEach(t),wur=r(bPe," (MobileBERT model)"),bPe.forEach(t),Aur=i(le),FT=n(le,"LI",{});var vPe=s(FT);C4e=n(vPe,"STRONG",{});var z7t=s(C4e);Lur=r(z7t,"mpnet"),z7t.forEach(t),yur=r(vPe," \u2014 "),XQ=n(vPe,"A",{href:!0});var W7t=s(XQ);xur=r(W7t,"TFMPNetForMaskedLM"),W7t.forEach(t),$ur=r(vPe," (MPNet model)"),vPe.forEach(t),kur=i(le),TT=n(le,"LI",{});var FPe=s(TT);w4e=n(FPe,"STRONG",{});var Q7t=s(w4e);Sur=r(Q7t,"openai-gpt"),Q7t.forEach(t),Rur=r(FPe," \u2014 "),zQ=n(FPe,"A",{href:!0});var H7t=s(zQ);Pur=r(H7t,"TFOpenAIGPTLMHeadModel"),H7t.forEach(t),Bur=r(FPe," (OpenAI GPT model)"),FPe.forEach(t),Iur=i(le),MT=n(le,"LI",{});var TPe=s(MT);A4e=n(TPe,"STRONG",{});var U7t=s(A4e);Nur=r(U7t,"roberta"),U7t.forEach(t),qur=r(TPe," \u2014 "),WQ=n(TPe,"A",{href:!0});var J7t=s(WQ);jur=r(J7t,"TFRobertaForMaskedLM"),J7t.forEach(t),Dur=r(TPe," (RoBERTa model)"),TPe.forEach(t),Gur=i(le),ET=n(le,"LI",{});var MPe=s(ET);L4e=n(MPe,"STRONG",{});var Y7t=s(L4e);Our=r(Y7t,"t5"),Y7t.forEach(t),Vur=r(MPe," \u2014 "),QQ=n(MPe,"A",{href:!0});var K7t=s(QQ);Xur=r(K7t,"TFT5ForConditionalGeneration"),K7t.forEach(t),zur=r(MPe," (T5 model)"),MPe.forEach(t),Wur=i(le),CT=n(le,"LI",{});var EPe=s(CT);y4e=n(EPe,"STRONG",{});var Z7t=s(y4e);Qur=r(Z7t,"tapas"),Z7t.forEach(t),Hur=r(EPe," \u2014 "),HQ=n(EPe,"A",{href:!0});var eMt=s(HQ);Uur=r(eMt,"TFTapasForMaskedLM"),eMt.forEach(t),Jur=r(EPe," (TAPAS model)"),EPe.forEach(t),Yur=i(le),wT=n(le,"LI",{});var CPe=s(wT);x4e=n(CPe,"STRONG",{});var oMt=s(x4e);Kur=r(oMt,"transfo-xl"),oMt.forEach(t),Zur=r(CPe," \u2014 "),UQ=n(CPe,"A",{href:!0});var rMt=s(UQ);e1r=r(rMt,"TFTransfoXLLMHeadModel"),rMt.forEach(t),o1r=r(CPe," (Transformer-XL model)"),CPe.forEach(t),r1r=i(le),AT=n(le,"LI",{});var wPe=s(AT);$4e=n(wPe,"STRONG",{});var tMt=s($4e);t1r=r(tMt,"vit_mae"),tMt.forEach(t),a1r=r(wPe," \u2014 "),JQ=n(wPe,"A",{href:!0});var aMt=s(JQ);n1r=r(aMt,"TFViTMAEForPreTraining"),aMt.forEach(t),s1r=r(wPe," (ViTMAE model)"),wPe.forEach(t),l1r=i(le),LT=n(le,"LI",{});var APe=s(LT);k4e=n(APe,"STRONG",{});var nMt=s(k4e);i1r=r(nMt,"xlm"),nMt.forEach(t),d1r=r(APe," \u2014 "),YQ=n(APe,"A",{href:!0});var sMt=s(YQ);c1r=r(sMt,"TFXLMWithLMHeadModel"),sMt.forEach(t),f1r=r(APe," (XLM model)"),APe.forEach(t),m1r=i(le),yT=n(le,"LI",{});var LPe=s(yT);S4e=n(LPe,"STRONG",{});var lMt=s(S4e);g1r=r(lMt,"xlm-roberta"),lMt.forEach(t),h1r=r(LPe," \u2014 "),KQ=n(LPe,"A",{href:!0});var iMt=s(KQ);p1r=r(iMt,"TFXLMRobertaForMaskedLM"),iMt.forEach(t),_1r=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),u1r=i(le),xT=n(le,"LI",{});var yPe=s(xT);R4e=n(yPe,"STRONG",{});var dMt=s(R4e);b1r=r(dMt,"xlnet"),dMt.forEach(t),v1r=r(yPe," \u2014 "),ZQ=n(yPe,"A",{href:!0});var cMt=s(ZQ);F1r=r(cMt,"TFXLNetLMHeadModel"),cMt.forEach(t),T1r=r(yPe," (XLNet model)"),yPe.forEach(t),le.forEach(t),M1r=i(bl),T($T.$$.fragment,bl),bl.forEach(t),ul.forEach(t),cDe=i(f),Ud=n(f,"H2",{class:!0});var _Oe=s(Ud);kT=n(_Oe,"A",{id:!0,class:!0,href:!0});var fMt=s(kT);P4e=n(fMt,"SPAN",{});var mMt=s(P4e);T(S8.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),E1r=i(_Oe),B4e=n(_Oe,"SPAN",{});var gMt=s(B4e);C1r=r(gMt,"TFAutoModelForCausalLM"),gMt.forEach(t),_Oe.forEach(t),fDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(R8.$$.fragment,vl),w1r=i(vl),Jd=n(vl,"P",{});var Oee=s(Jd);A1r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=n(Oee,"A",{href:!0});var hMt=s(eH);L1r=r(hMt,"from_pretrained()"),hMt.forEach(t),y1r=r(Oee," class method or the "),oH=n(Oee,"A",{href:!0});var pMt=s(oH);x1r=r(pMt,"from_config()"),pMt.forEach(t),$1r=r(Oee,` class
method.`),Oee.forEach(t),k1r=i(vl),P8=n(vl,"P",{});var uOe=s(P8);S1r=r(uOe,"This class cannot be instantiated directly using "),I4e=n(uOe,"CODE",{});var _Mt=s(I4e);R1r=r(_Mt,"__init__()"),_Mt.forEach(t),P1r=r(uOe," (throws an error)."),uOe.forEach(t),B1r=i(vl),$t=n(vl,"DIV",{class:!0});var OA=s($t);T(B8.$$.fragment,OA),I1r=i(OA),N4e=n(OA,"P",{});var uMt=s(N4e);N1r=r(uMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uMt.forEach(t),q1r=i(OA),Yd=n(OA,"P",{});var Vee=s(Yd);j1r=r(Vee,`Note:
Loading a model from its configuration file does `),q4e=n(Vee,"STRONG",{});var bMt=s(q4e);D1r=r(bMt,"not"),bMt.forEach(t),G1r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(Vee,"A",{href:!0});var vMt=s(rH);O1r=r(vMt,"from_pretrained()"),vMt.forEach(t),V1r=r(Vee," to load the model weights."),Vee.forEach(t),X1r=i(OA),T(ST.$$.fragment,OA),OA.forEach(t),z1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(I8.$$.fragment,Fl),W1r=i(Fl),j4e=n(Fl,"P",{});var FMt=s(j4e);Q1r=r(FMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FMt.forEach(t),H1r=i(Fl),en=n(Fl,"P",{});var VA=s(en);U1r=r(VA,"The model class to instantiate is selected based on the "),D4e=n(VA,"CODE",{});var TMt=s(D4e);J1r=r(TMt,"model_type"),TMt.forEach(t),Y1r=r(VA,` property of the config object (either
passed as an argument or loaded from `),G4e=n(VA,"CODE",{});var MMt=s(G4e);K1r=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),Z1r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(VA,"CODE",{});var EMt=s(O4e);ebr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),obr=r(VA,":"),VA.forEach(t),rbr=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);RT=n(Ce,"LI",{});var xPe=s(RT);V4e=n(xPe,"STRONG",{});var CMt=s(V4e);tbr=r(CMt,"bert"),CMt.forEach(t),abr=r(xPe," \u2014 "),tH=n(xPe,"A",{href:!0});var wMt=s(tH);nbr=r(wMt,"TFBertLMHeadModel"),wMt.forEach(t),sbr=r(xPe," (BERT model)"),xPe.forEach(t),lbr=i(Ce),PT=n(Ce,"LI",{});var $Pe=s(PT);X4e=n($Pe,"STRONG",{});var AMt=s(X4e);ibr=r(AMt,"camembert"),AMt.forEach(t),dbr=r($Pe," \u2014 "),aH=n($Pe,"A",{href:!0});var LMt=s(aH);cbr=r(LMt,"TFCamembertForCausalLM"),LMt.forEach(t),fbr=r($Pe," (CamemBERT model)"),$Pe.forEach(t),mbr=i(Ce),BT=n(Ce,"LI",{});var kPe=s(BT);z4e=n(kPe,"STRONG",{});var yMt=s(z4e);gbr=r(yMt,"ctrl"),yMt.forEach(t),hbr=r(kPe," \u2014 "),nH=n(kPe,"A",{href:!0});var xMt=s(nH);pbr=r(xMt,"TFCTRLLMHeadModel"),xMt.forEach(t),_br=r(kPe," (CTRL model)"),kPe.forEach(t),ubr=i(Ce),IT=n(Ce,"LI",{});var SPe=s(IT);W4e=n(SPe,"STRONG",{});var $Mt=s(W4e);bbr=r($Mt,"gpt2"),$Mt.forEach(t),vbr=r(SPe," \u2014 "),sH=n(SPe,"A",{href:!0});var kMt=s(sH);Fbr=r(kMt,"TFGPT2LMHeadModel"),kMt.forEach(t),Tbr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),Mbr=i(Ce),NT=n(Ce,"LI",{});var RPe=s(NT);Q4e=n(RPe,"STRONG",{});var SMt=s(Q4e);Ebr=r(SMt,"gptj"),SMt.forEach(t),Cbr=r(RPe," \u2014 "),lH=n(RPe,"A",{href:!0});var RMt=s(lH);wbr=r(RMt,"TFGPTJForCausalLM"),RMt.forEach(t),Abr=r(RPe," (GPT-J model)"),RPe.forEach(t),Lbr=i(Ce),qT=n(Ce,"LI",{});var PPe=s(qT);H4e=n(PPe,"STRONG",{});var PMt=s(H4e);ybr=r(PMt,"openai-gpt"),PMt.forEach(t),xbr=r(PPe," \u2014 "),iH=n(PPe,"A",{href:!0});var BMt=s(iH);$br=r(BMt,"TFOpenAIGPTLMHeadModel"),BMt.forEach(t),kbr=r(PPe," (OpenAI GPT model)"),PPe.forEach(t),Sbr=i(Ce),jT=n(Ce,"LI",{});var BPe=s(jT);U4e=n(BPe,"STRONG",{});var IMt=s(U4e);Rbr=r(IMt,"opt"),IMt.forEach(t),Pbr=r(BPe," \u2014 "),dH=n(BPe,"A",{href:!0});var NMt=s(dH);Bbr=r(NMt,"TFOPTForCausalLM"),NMt.forEach(t),Ibr=r(BPe," (OPT model)"),BPe.forEach(t),Nbr=i(Ce),DT=n(Ce,"LI",{});var IPe=s(DT);J4e=n(IPe,"STRONG",{});var qMt=s(J4e);qbr=r(qMt,"rembert"),qMt.forEach(t),jbr=r(IPe," \u2014 "),cH=n(IPe,"A",{href:!0});var jMt=s(cH);Dbr=r(jMt,"TFRemBertForCausalLM"),jMt.forEach(t),Gbr=r(IPe," (RemBERT model)"),IPe.forEach(t),Obr=i(Ce),GT=n(Ce,"LI",{});var NPe=s(GT);Y4e=n(NPe,"STRONG",{});var DMt=s(Y4e);Vbr=r(DMt,"roberta"),DMt.forEach(t),Xbr=r(NPe," \u2014 "),fH=n(NPe,"A",{href:!0});var GMt=s(fH);zbr=r(GMt,"TFRobertaForCausalLM"),GMt.forEach(t),Wbr=r(NPe," (RoBERTa model)"),NPe.forEach(t),Qbr=i(Ce),OT=n(Ce,"LI",{});var qPe=s(OT);K4e=n(qPe,"STRONG",{});var OMt=s(K4e);Hbr=r(OMt,"roformer"),OMt.forEach(t),Ubr=r(qPe," \u2014 "),mH=n(qPe,"A",{href:!0});var VMt=s(mH);Jbr=r(VMt,"TFRoFormerForCausalLM"),VMt.forEach(t),Ybr=r(qPe," (RoFormer model)"),qPe.forEach(t),Kbr=i(Ce),VT=n(Ce,"LI",{});var jPe=s(VT);Z4e=n(jPe,"STRONG",{});var XMt=s(Z4e);Zbr=r(XMt,"transfo-xl"),XMt.forEach(t),e2r=r(jPe," \u2014 "),gH=n(jPe,"A",{href:!0});var zMt=s(gH);o2r=r(zMt,"TFTransfoXLLMHeadModel"),zMt.forEach(t),r2r=r(jPe," (Transformer-XL model)"),jPe.forEach(t),t2r=i(Ce),XT=n(Ce,"LI",{});var DPe=s(XT);eve=n(DPe,"STRONG",{});var WMt=s(eve);a2r=r(WMt,"xlm"),WMt.forEach(t),n2r=r(DPe," \u2014 "),hH=n(DPe,"A",{href:!0});var QMt=s(hH);s2r=r(QMt,"TFXLMWithLMHeadModel"),QMt.forEach(t),l2r=r(DPe," (XLM model)"),DPe.forEach(t),i2r=i(Ce),zT=n(Ce,"LI",{});var GPe=s(zT);ove=n(GPe,"STRONG",{});var HMt=s(ove);d2r=r(HMt,"xlnet"),HMt.forEach(t),c2r=r(GPe," \u2014 "),pH=n(GPe,"A",{href:!0});var UMt=s(pH);f2r=r(UMt,"TFXLNetLMHeadModel"),UMt.forEach(t),m2r=r(GPe," (XLNet model)"),GPe.forEach(t),Ce.forEach(t),g2r=i(Fl),T(WT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),mDe=i(f),Kd=n(f,"H2",{class:!0});var bOe=s(Kd);QT=n(bOe,"A",{id:!0,class:!0,href:!0});var JMt=s(QT);rve=n(JMt,"SPAN",{});var YMt=s(rve);T(N8.$$.fragment,YMt),YMt.forEach(t),JMt.forEach(t),h2r=i(bOe),tve=n(bOe,"SPAN",{});var KMt=s(tve);p2r=r(KMt,"TFAutoModelForImageClassification"),KMt.forEach(t),bOe.forEach(t),gDe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(q8.$$.fragment,Tl),_2r=i(Tl),Zd=n(Tl,"P",{});var Xee=s(Zd);u2r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=n(Xee,"A",{href:!0});var ZMt=s(_H);b2r=r(ZMt,"from_pretrained()"),ZMt.forEach(t),v2r=r(Xee," class method or the "),uH=n(Xee,"A",{href:!0});var eEt=s(uH);F2r=r(eEt,"from_config()"),eEt.forEach(t),T2r=r(Xee,` class
method.`),Xee.forEach(t),M2r=i(Tl),j8=n(Tl,"P",{});var vOe=s(j8);E2r=r(vOe,"This class cannot be instantiated directly using "),ave=n(vOe,"CODE",{});var oEt=s(ave);C2r=r(oEt,"__init__()"),oEt.forEach(t),w2r=r(vOe," (throws an error)."),vOe.forEach(t),A2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var XA=s(kt);T(D8.$$.fragment,XA),L2r=i(XA),nve=n(XA,"P",{});var rEt=s(nve);y2r=r(rEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rEt.forEach(t),x2r=i(XA),ec=n(XA,"P",{});var zee=s(ec);$2r=r(zee,`Note:
Loading a model from its configuration file does `),sve=n(zee,"STRONG",{});var tEt=s(sve);k2r=r(tEt,"not"),tEt.forEach(t),S2r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(zee,"A",{href:!0});var aEt=s(bH);R2r=r(aEt,"from_pretrained()"),aEt.forEach(t),P2r=r(zee," to load the model weights."),zee.forEach(t),B2r=i(XA),T(HT.$$.fragment,XA),XA.forEach(t),I2r=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(G8.$$.fragment,Ml),N2r=i(Ml),lve=n(Ml,"P",{});var nEt=s(lve);q2r=r(nEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nEt.forEach(t),j2r=i(Ml),on=n(Ml,"P",{});var zA=s(on);D2r=r(zA,"The model class to instantiate is selected based on the "),ive=n(zA,"CODE",{});var sEt=s(ive);G2r=r(sEt,"model_type"),sEt.forEach(t),O2r=r(zA,` property of the config object (either
passed as an argument or loaded from `),dve=n(zA,"CODE",{});var lEt=s(dve);V2r=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),X2r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(zA,"CODE",{});var iEt=s(cve);z2r=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),W2r=r(zA,":"),zA.forEach(t),Q2r=i(Ml),rn=n(Ml,"UL",{});var WA=s(rn);UT=n(WA,"LI",{});var OPe=s(UT);fve=n(OPe,"STRONG",{});var dEt=s(fve);H2r=r(dEt,"convnext"),dEt.forEach(t),U2r=r(OPe," \u2014 "),vH=n(OPe,"A",{href:!0});var cEt=s(vH);J2r=r(cEt,"TFConvNextForImageClassification"),cEt.forEach(t),Y2r=r(OPe," (ConvNeXT model)"),OPe.forEach(t),K2r=i(WA),JT=n(WA,"LI",{});var VPe=s(JT);mve=n(VPe,"STRONG",{});var fEt=s(mve);Z2r=r(fEt,"data2vec-vision"),fEt.forEach(t),e4r=r(VPe," \u2014 "),FH=n(VPe,"A",{href:!0});var mEt=s(FH);o4r=r(mEt,"TFData2VecVisionForImageClassification"),mEt.forEach(t),r4r=r(VPe," (Data2VecVision model)"),VPe.forEach(t),t4r=i(WA),YT=n(WA,"LI",{});var XPe=s(YT);gve=n(XPe,"STRONG",{});var gEt=s(gve);a4r=r(gEt,"swin"),gEt.forEach(t),n4r=r(XPe," \u2014 "),TH=n(XPe,"A",{href:!0});var hEt=s(TH);s4r=r(hEt,"TFSwinForImageClassification"),hEt.forEach(t),l4r=r(XPe," (Swin Transformer model)"),XPe.forEach(t),i4r=i(WA),KT=n(WA,"LI",{});var zPe=s(KT);hve=n(zPe,"STRONG",{});var pEt=s(hve);d4r=r(pEt,"vit"),pEt.forEach(t),c4r=r(zPe," \u2014 "),MH=n(zPe,"A",{href:!0});var _Et=s(MH);f4r=r(_Et,"TFViTForImageClassification"),_Et.forEach(t),m4r=r(zPe," (ViT model)"),zPe.forEach(t),WA.forEach(t),g4r=i(Ml),T(ZT.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),hDe=i(f),oc=n(f,"H2",{class:!0});var FOe=s(oc);e7=n(FOe,"A",{id:!0,class:!0,href:!0});var uEt=s(e7);pve=n(uEt,"SPAN",{});var bEt=s(pve);T(O8.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),h4r=i(FOe),_ve=n(FOe,"SPAN",{});var vEt=s(_ve);p4r=r(vEt,"TFAutoModelForMaskedLM"),vEt.forEach(t),FOe.forEach(t),pDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(V8.$$.fragment,El),_4r=i(El),rc=n(El,"P",{});var Wee=s(rc);u4r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=n(Wee,"A",{href:!0});var FEt=s(EH);b4r=r(FEt,"from_pretrained()"),FEt.forEach(t),v4r=r(Wee," class method or the "),CH=n(Wee,"A",{href:!0});var TEt=s(CH);F4r=r(TEt,"from_config()"),TEt.forEach(t),T4r=r(Wee,` class
method.`),Wee.forEach(t),M4r=i(El),X8=n(El,"P",{});var TOe=s(X8);E4r=r(TOe,"This class cannot be instantiated directly using "),uve=n(TOe,"CODE",{});var MEt=s(uve);C4r=r(MEt,"__init__()"),MEt.forEach(t),w4r=r(TOe," (throws an error)."),TOe.forEach(t),A4r=i(El),St=n(El,"DIV",{class:!0});var QA=s(St);T(z8.$$.fragment,QA),L4r=i(QA),bve=n(QA,"P",{});var EEt=s(bve);y4r=r(EEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EEt.forEach(t),x4r=i(QA),tc=n(QA,"P",{});var Qee=s(tc);$4r=r(Qee,`Note:
Loading a model from its configuration file does `),vve=n(Qee,"STRONG",{});var CEt=s(vve);k4r=r(CEt,"not"),CEt.forEach(t),S4r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(Qee,"A",{href:!0});var wEt=s(wH);R4r=r(wEt,"from_pretrained()"),wEt.forEach(t),P4r=r(Qee," to load the model weights."),Qee.forEach(t),B4r=i(QA),T(o7.$$.fragment,QA),QA.forEach(t),I4r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(W8.$$.fragment,Cl),N4r=i(Cl),Fve=n(Cl,"P",{});var AEt=s(Fve);q4r=r(AEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AEt.forEach(t),j4r=i(Cl),tn=n(Cl,"P",{});var HA=s(tn);D4r=r(HA,"The model class to instantiate is selected based on the "),Tve=n(HA,"CODE",{});var LEt=s(Tve);G4r=r(LEt,"model_type"),LEt.forEach(t),O4r=r(HA,` property of the config object (either
passed as an argument or loaded from `),Mve=n(HA,"CODE",{});var yEt=s(Mve);V4r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),X4r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(HA,"CODE",{});var xEt=s(Eve);z4r=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),W4r=r(HA,":"),HA.forEach(t),Q4r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);r7=n(fe,"LI",{});var WPe=s(r7);Cve=n(WPe,"STRONG",{});var $Et=s(Cve);H4r=r($Et,"albert"),$Et.forEach(t),U4r=r(WPe," \u2014 "),AH=n(WPe,"A",{href:!0});var kEt=s(AH);J4r=r(kEt,"TFAlbertForMaskedLM"),kEt.forEach(t),Y4r=r(WPe," (ALBERT model)"),WPe.forEach(t),K4r=i(fe),t7=n(fe,"LI",{});var QPe=s(t7);wve=n(QPe,"STRONG",{});var SEt=s(wve);Z4r=r(SEt,"bert"),SEt.forEach(t),evr=r(QPe," \u2014 "),LH=n(QPe,"A",{href:!0});var REt=s(LH);ovr=r(REt,"TFBertForMaskedLM"),REt.forEach(t),rvr=r(QPe," (BERT model)"),QPe.forEach(t),tvr=i(fe),a7=n(fe,"LI",{});var HPe=s(a7);Ave=n(HPe,"STRONG",{});var PEt=s(Ave);avr=r(PEt,"camembert"),PEt.forEach(t),nvr=r(HPe," \u2014 "),yH=n(HPe,"A",{href:!0});var BEt=s(yH);svr=r(BEt,"TFCamembertForMaskedLM"),BEt.forEach(t),lvr=r(HPe," (CamemBERT model)"),HPe.forEach(t),ivr=i(fe),n7=n(fe,"LI",{});var UPe=s(n7);Lve=n(UPe,"STRONG",{});var IEt=s(Lve);dvr=r(IEt,"convbert"),IEt.forEach(t),cvr=r(UPe," \u2014 "),xH=n(UPe,"A",{href:!0});var NEt=s(xH);fvr=r(NEt,"TFConvBertForMaskedLM"),NEt.forEach(t),mvr=r(UPe," (ConvBERT model)"),UPe.forEach(t),gvr=i(fe),s7=n(fe,"LI",{});var JPe=s(s7);yve=n(JPe,"STRONG",{});var qEt=s(yve);hvr=r(qEt,"deberta"),qEt.forEach(t),pvr=r(JPe," \u2014 "),$H=n(JPe,"A",{href:!0});var jEt=s($H);_vr=r(jEt,"TFDebertaForMaskedLM"),jEt.forEach(t),uvr=r(JPe," (DeBERTa model)"),JPe.forEach(t),bvr=i(fe),l7=n(fe,"LI",{});var YPe=s(l7);xve=n(YPe,"STRONG",{});var DEt=s(xve);vvr=r(DEt,"deberta-v2"),DEt.forEach(t),Fvr=r(YPe," \u2014 "),kH=n(YPe,"A",{href:!0});var GEt=s(kH);Tvr=r(GEt,"TFDebertaV2ForMaskedLM"),GEt.forEach(t),Mvr=r(YPe," (DeBERTa-v2 model)"),YPe.forEach(t),Evr=i(fe),i7=n(fe,"LI",{});var KPe=s(i7);$ve=n(KPe,"STRONG",{});var OEt=s($ve);Cvr=r(OEt,"distilbert"),OEt.forEach(t),wvr=r(KPe," \u2014 "),SH=n(KPe,"A",{href:!0});var VEt=s(SH);Avr=r(VEt,"TFDistilBertForMaskedLM"),VEt.forEach(t),Lvr=r(KPe," (DistilBERT model)"),KPe.forEach(t),yvr=i(fe),d7=n(fe,"LI",{});var ZPe=s(d7);kve=n(ZPe,"STRONG",{});var XEt=s(kve);xvr=r(XEt,"electra"),XEt.forEach(t),$vr=r(ZPe," \u2014 "),RH=n(ZPe,"A",{href:!0});var zEt=s(RH);kvr=r(zEt,"TFElectraForMaskedLM"),zEt.forEach(t),Svr=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),Rvr=i(fe),c7=n(fe,"LI",{});var eBe=s(c7);Sve=n(eBe,"STRONG",{});var WEt=s(Sve);Pvr=r(WEt,"flaubert"),WEt.forEach(t),Bvr=r(eBe," \u2014 "),PH=n(eBe,"A",{href:!0});var QEt=s(PH);Ivr=r(QEt,"TFFlaubertWithLMHeadModel"),QEt.forEach(t),Nvr=r(eBe," (FlauBERT model)"),eBe.forEach(t),qvr=i(fe),f7=n(fe,"LI",{});var oBe=s(f7);Rve=n(oBe,"STRONG",{});var HEt=s(Rve);jvr=r(HEt,"funnel"),HEt.forEach(t),Dvr=r(oBe," \u2014 "),BH=n(oBe,"A",{href:!0});var UEt=s(BH);Gvr=r(UEt,"TFFunnelForMaskedLM"),UEt.forEach(t),Ovr=r(oBe," (Funnel Transformer model)"),oBe.forEach(t),Vvr=i(fe),m7=n(fe,"LI",{});var rBe=s(m7);Pve=n(rBe,"STRONG",{});var JEt=s(Pve);Xvr=r(JEt,"layoutlm"),JEt.forEach(t),zvr=r(rBe," \u2014 "),IH=n(rBe,"A",{href:!0});var YEt=s(IH);Wvr=r(YEt,"TFLayoutLMForMaskedLM"),YEt.forEach(t),Qvr=r(rBe," (LayoutLM model)"),rBe.forEach(t),Hvr=i(fe),g7=n(fe,"LI",{});var tBe=s(g7);Bve=n(tBe,"STRONG",{});var KEt=s(Bve);Uvr=r(KEt,"longformer"),KEt.forEach(t),Jvr=r(tBe," \u2014 "),NH=n(tBe,"A",{href:!0});var ZEt=s(NH);Yvr=r(ZEt,"TFLongformerForMaskedLM"),ZEt.forEach(t),Kvr=r(tBe," (Longformer model)"),tBe.forEach(t),Zvr=i(fe),h7=n(fe,"LI",{});var aBe=s(h7);Ive=n(aBe,"STRONG",{});var eCt=s(Ive);e5r=r(eCt,"mobilebert"),eCt.forEach(t),o5r=r(aBe," \u2014 "),qH=n(aBe,"A",{href:!0});var oCt=s(qH);r5r=r(oCt,"TFMobileBertForMaskedLM"),oCt.forEach(t),t5r=r(aBe," (MobileBERT model)"),aBe.forEach(t),a5r=i(fe),p7=n(fe,"LI",{});var nBe=s(p7);Nve=n(nBe,"STRONG",{});var rCt=s(Nve);n5r=r(rCt,"mpnet"),rCt.forEach(t),s5r=r(nBe," \u2014 "),jH=n(nBe,"A",{href:!0});var tCt=s(jH);l5r=r(tCt,"TFMPNetForMaskedLM"),tCt.forEach(t),i5r=r(nBe," (MPNet model)"),nBe.forEach(t),d5r=i(fe),_7=n(fe,"LI",{});var sBe=s(_7);qve=n(sBe,"STRONG",{});var aCt=s(qve);c5r=r(aCt,"rembert"),aCt.forEach(t),f5r=r(sBe," \u2014 "),DH=n(sBe,"A",{href:!0});var nCt=s(DH);m5r=r(nCt,"TFRemBertForMaskedLM"),nCt.forEach(t),g5r=r(sBe," (RemBERT model)"),sBe.forEach(t),h5r=i(fe),u7=n(fe,"LI",{});var lBe=s(u7);jve=n(lBe,"STRONG",{});var sCt=s(jve);p5r=r(sCt,"roberta"),sCt.forEach(t),_5r=r(lBe," \u2014 "),GH=n(lBe,"A",{href:!0});var lCt=s(GH);u5r=r(lCt,"TFRobertaForMaskedLM"),lCt.forEach(t),b5r=r(lBe," (RoBERTa model)"),lBe.forEach(t),v5r=i(fe),b7=n(fe,"LI",{});var iBe=s(b7);Dve=n(iBe,"STRONG",{});var iCt=s(Dve);F5r=r(iCt,"roformer"),iCt.forEach(t),T5r=r(iBe," \u2014 "),OH=n(iBe,"A",{href:!0});var dCt=s(OH);M5r=r(dCt,"TFRoFormerForMaskedLM"),dCt.forEach(t),E5r=r(iBe," (RoFormer model)"),iBe.forEach(t),C5r=i(fe),v7=n(fe,"LI",{});var dBe=s(v7);Gve=n(dBe,"STRONG",{});var cCt=s(Gve);w5r=r(cCt,"tapas"),cCt.forEach(t),A5r=r(dBe," \u2014 "),VH=n(dBe,"A",{href:!0});var fCt=s(VH);L5r=r(fCt,"TFTapasForMaskedLM"),fCt.forEach(t),y5r=r(dBe," (TAPAS model)"),dBe.forEach(t),x5r=i(fe),F7=n(fe,"LI",{});var cBe=s(F7);Ove=n(cBe,"STRONG",{});var mCt=s(Ove);$5r=r(mCt,"xlm"),mCt.forEach(t),k5r=r(cBe," \u2014 "),XH=n(cBe,"A",{href:!0});var gCt=s(XH);S5r=r(gCt,"TFXLMWithLMHeadModel"),gCt.forEach(t),R5r=r(cBe," (XLM model)"),cBe.forEach(t),P5r=i(fe),T7=n(fe,"LI",{});var fBe=s(T7);Vve=n(fBe,"STRONG",{});var hCt=s(Vve);B5r=r(hCt,"xlm-roberta"),hCt.forEach(t),I5r=r(fBe," \u2014 "),zH=n(fBe,"A",{href:!0});var pCt=s(zH);N5r=r(pCt,"TFXLMRobertaForMaskedLM"),pCt.forEach(t),q5r=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),fe.forEach(t),j5r=i(Cl),T(M7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),_De=i(f),ac=n(f,"H2",{class:!0});var MOe=s(ac);E7=n(MOe,"A",{id:!0,class:!0,href:!0});var _Ct=s(E7);Xve=n(_Ct,"SPAN",{});var uCt=s(Xve);T(Q8.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),D5r=i(MOe),zve=n(MOe,"SPAN",{});var bCt=s(zve);G5r=r(bCt,"TFAutoModelForSeq2SeqLM"),bCt.forEach(t),MOe.forEach(t),uDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(H8.$$.fragment,wl),O5r=i(wl),nc=n(wl,"P",{});var Hee=s(nc);V5r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=n(Hee,"A",{href:!0});var vCt=s(WH);X5r=r(vCt,"from_pretrained()"),vCt.forEach(t),z5r=r(Hee," class method or the "),QH=n(Hee,"A",{href:!0});var FCt=s(QH);W5r=r(FCt,"from_config()"),FCt.forEach(t),Q5r=r(Hee,` class
method.`),Hee.forEach(t),H5r=i(wl),U8=n(wl,"P",{});var EOe=s(U8);U5r=r(EOe,"This class cannot be instantiated directly using "),Wve=n(EOe,"CODE",{});var TCt=s(Wve);J5r=r(TCt,"__init__()"),TCt.forEach(t),Y5r=r(EOe," (throws an error)."),EOe.forEach(t),K5r=i(wl),Rt=n(wl,"DIV",{class:!0});var UA=s(Rt);T(J8.$$.fragment,UA),Z5r=i(UA),Qve=n(UA,"P",{});var MCt=s(Qve);e3r=r(MCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MCt.forEach(t),o3r=i(UA),sc=n(UA,"P",{});var Uee=s(sc);r3r=r(Uee,`Note:
Loading a model from its configuration file does `),Hve=n(Uee,"STRONG",{});var ECt=s(Hve);t3r=r(ECt,"not"),ECt.forEach(t),a3r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(Uee,"A",{href:!0});var CCt=s(HH);n3r=r(CCt,"from_pretrained()"),CCt.forEach(t),s3r=r(Uee," to load the model weights."),Uee.forEach(t),l3r=i(UA),T(C7.$$.fragment,UA),UA.forEach(t),i3r=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(Y8.$$.fragment,Al),d3r=i(Al),Uve=n(Al,"P",{});var wCt=s(Uve);c3r=r(wCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wCt.forEach(t),f3r=i(Al),an=n(Al,"P",{});var JA=s(an);m3r=r(JA,"The model class to instantiate is selected based on the "),Jve=n(JA,"CODE",{});var ACt=s(Jve);g3r=r(ACt,"model_type"),ACt.forEach(t),h3r=r(JA,` property of the config object (either
passed as an argument or loaded from `),Yve=n(JA,"CODE",{});var LCt=s(Yve);p3r=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),_3r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(JA,"CODE",{});var yCt=s(Kve);u3r=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),b3r=r(JA,":"),JA.forEach(t),v3r=i(Al),Le=n(Al,"UL",{});var Be=s(Le);w7=n(Be,"LI",{});var mBe=s(w7);Zve=n(mBe,"STRONG",{});var xCt=s(Zve);F3r=r(xCt,"bart"),xCt.forEach(t),T3r=r(mBe," \u2014 "),UH=n(mBe,"A",{href:!0});var $Ct=s(UH);M3r=r($Ct,"TFBartForConditionalGeneration"),$Ct.forEach(t),E3r=r(mBe," (BART model)"),mBe.forEach(t),C3r=i(Be),A7=n(Be,"LI",{});var gBe=s(A7);e5e=n(gBe,"STRONG",{});var kCt=s(e5e);w3r=r(kCt,"blenderbot"),kCt.forEach(t),A3r=r(gBe," \u2014 "),JH=n(gBe,"A",{href:!0});var SCt=s(JH);L3r=r(SCt,"TFBlenderbotForConditionalGeneration"),SCt.forEach(t),y3r=r(gBe," (Blenderbot model)"),gBe.forEach(t),x3r=i(Be),L7=n(Be,"LI",{});var hBe=s(L7);o5e=n(hBe,"STRONG",{});var RCt=s(o5e);$3r=r(RCt,"blenderbot-small"),RCt.forEach(t),k3r=r(hBe," \u2014 "),YH=n(hBe,"A",{href:!0});var PCt=s(YH);S3r=r(PCt,"TFBlenderbotSmallForConditionalGeneration"),PCt.forEach(t),R3r=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),P3r=i(Be),y7=n(Be,"LI",{});var pBe=s(y7);r5e=n(pBe,"STRONG",{});var BCt=s(r5e);B3r=r(BCt,"encoder-decoder"),BCt.forEach(t),I3r=r(pBe," \u2014 "),KH=n(pBe,"A",{href:!0});var ICt=s(KH);N3r=r(ICt,"TFEncoderDecoderModel"),ICt.forEach(t),q3r=r(pBe," (Encoder decoder model)"),pBe.forEach(t),j3r=i(Be),x7=n(Be,"LI",{});var _Be=s(x7);t5e=n(_Be,"STRONG",{});var NCt=s(t5e);D3r=r(NCt,"led"),NCt.forEach(t),G3r=r(_Be," \u2014 "),ZH=n(_Be,"A",{href:!0});var qCt=s(ZH);O3r=r(qCt,"TFLEDForConditionalGeneration"),qCt.forEach(t),V3r=r(_Be," (LED model)"),_Be.forEach(t),X3r=i(Be),$7=n(Be,"LI",{});var uBe=s($7);a5e=n(uBe,"STRONG",{});var jCt=s(a5e);z3r=r(jCt,"marian"),jCt.forEach(t),W3r=r(uBe," \u2014 "),eU=n(uBe,"A",{href:!0});var DCt=s(eU);Q3r=r(DCt,"TFMarianMTModel"),DCt.forEach(t),H3r=r(uBe," (Marian model)"),uBe.forEach(t),U3r=i(Be),k7=n(Be,"LI",{});var bBe=s(k7);n5e=n(bBe,"STRONG",{});var GCt=s(n5e);J3r=r(GCt,"mbart"),GCt.forEach(t),Y3r=r(bBe," \u2014 "),oU=n(bBe,"A",{href:!0});var OCt=s(oU);K3r=r(OCt,"TFMBartForConditionalGeneration"),OCt.forEach(t),Z3r=r(bBe," (mBART model)"),bBe.forEach(t),eFr=i(Be),S7=n(Be,"LI",{});var vBe=s(S7);s5e=n(vBe,"STRONG",{});var VCt=s(s5e);oFr=r(VCt,"mt5"),VCt.forEach(t),rFr=r(vBe," \u2014 "),rU=n(vBe,"A",{href:!0});var XCt=s(rU);tFr=r(XCt,"TFMT5ForConditionalGeneration"),XCt.forEach(t),aFr=r(vBe," (MT5 model)"),vBe.forEach(t),nFr=i(Be),R7=n(Be,"LI",{});var FBe=s(R7);l5e=n(FBe,"STRONG",{});var zCt=s(l5e);sFr=r(zCt,"pegasus"),zCt.forEach(t),lFr=r(FBe," \u2014 "),tU=n(FBe,"A",{href:!0});var WCt=s(tU);iFr=r(WCt,"TFPegasusForConditionalGeneration"),WCt.forEach(t),dFr=r(FBe," (Pegasus model)"),FBe.forEach(t),cFr=i(Be),P7=n(Be,"LI",{});var TBe=s(P7);i5e=n(TBe,"STRONG",{});var QCt=s(i5e);fFr=r(QCt,"t5"),QCt.forEach(t),mFr=r(TBe," \u2014 "),aU=n(TBe,"A",{href:!0});var HCt=s(aU);gFr=r(HCt,"TFT5ForConditionalGeneration"),HCt.forEach(t),hFr=r(TBe," (T5 model)"),TBe.forEach(t),Be.forEach(t),pFr=i(Al),T(B7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),bDe=i(f),lc=n(f,"H2",{class:!0});var COe=s(lc);I7=n(COe,"A",{id:!0,class:!0,href:!0});var UCt=s(I7);d5e=n(UCt,"SPAN",{});var JCt=s(d5e);T(K8.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),_Fr=i(COe),c5e=n(COe,"SPAN",{});var YCt=s(c5e);uFr=r(YCt,"TFAutoModelForSequenceClassification"),YCt.forEach(t),COe.forEach(t),vDe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(Z8.$$.fragment,Ll),bFr=i(Ll),ic=n(Ll,"P",{});var Jee=s(ic);vFr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=n(Jee,"A",{href:!0});var KCt=s(nU);FFr=r(KCt,"from_pretrained()"),KCt.forEach(t),TFr=r(Jee," class method or the "),sU=n(Jee,"A",{href:!0});var ZCt=s(sU);MFr=r(ZCt,"from_config()"),ZCt.forEach(t),EFr=r(Jee,` class
method.`),Jee.forEach(t),CFr=i(Ll),e9=n(Ll,"P",{});var wOe=s(e9);wFr=r(wOe,"This class cannot be instantiated directly using "),f5e=n(wOe,"CODE",{});var e0t=s(f5e);AFr=r(e0t,"__init__()"),e0t.forEach(t),LFr=r(wOe," (throws an error)."),wOe.forEach(t),yFr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var YA=s(Pt);T(o9.$$.fragment,YA),xFr=i(YA),m5e=n(YA,"P",{});var o0t=s(m5e);$Fr=r(o0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o0t.forEach(t),kFr=i(YA),dc=n(YA,"P",{});var Yee=s(dc);SFr=r(Yee,`Note:
Loading a model from its configuration file does `),g5e=n(Yee,"STRONG",{});var r0t=s(g5e);RFr=r(r0t,"not"),r0t.forEach(t),PFr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Yee,"A",{href:!0});var t0t=s(lU);BFr=r(t0t,"from_pretrained()"),t0t.forEach(t),IFr=r(Yee," to load the model weights."),Yee.forEach(t),NFr=i(YA),T(N7.$$.fragment,YA),YA.forEach(t),qFr=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(r9.$$.fragment,yl),jFr=i(yl),h5e=n(yl,"P",{});var a0t=s(h5e);DFr=r(a0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a0t.forEach(t),GFr=i(yl),nn=n(yl,"P",{});var KA=s(nn);OFr=r(KA,"The model class to instantiate is selected based on the "),p5e=n(KA,"CODE",{});var n0t=s(p5e);VFr=r(n0t,"model_type"),n0t.forEach(t),XFr=r(KA,` property of the config object (either
passed as an argument or loaded from `),_5e=n(KA,"CODE",{});var s0t=s(_5e);zFr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),WFr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(KA,"CODE",{});var l0t=s(u5e);QFr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),HFr=r(KA,":"),KA.forEach(t),UFr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);q7=n(ae,"LI",{});var MBe=s(q7);b5e=n(MBe,"STRONG",{});var i0t=s(b5e);JFr=r(i0t,"albert"),i0t.forEach(t),YFr=r(MBe," \u2014 "),iU=n(MBe,"A",{href:!0});var d0t=s(iU);KFr=r(d0t,"TFAlbertForSequenceClassification"),d0t.forEach(t),ZFr=r(MBe," (ALBERT model)"),MBe.forEach(t),eTr=i(ae),j7=n(ae,"LI",{});var EBe=s(j7);v5e=n(EBe,"STRONG",{});var c0t=s(v5e);oTr=r(c0t,"bert"),c0t.forEach(t),rTr=r(EBe," \u2014 "),dU=n(EBe,"A",{href:!0});var f0t=s(dU);tTr=r(f0t,"TFBertForSequenceClassification"),f0t.forEach(t),aTr=r(EBe," (BERT model)"),EBe.forEach(t),nTr=i(ae),D7=n(ae,"LI",{});var CBe=s(D7);F5e=n(CBe,"STRONG",{});var m0t=s(F5e);sTr=r(m0t,"camembert"),m0t.forEach(t),lTr=r(CBe," \u2014 "),cU=n(CBe,"A",{href:!0});var g0t=s(cU);iTr=r(g0t,"TFCamembertForSequenceClassification"),g0t.forEach(t),dTr=r(CBe," (CamemBERT model)"),CBe.forEach(t),cTr=i(ae),G7=n(ae,"LI",{});var wBe=s(G7);T5e=n(wBe,"STRONG",{});var h0t=s(T5e);fTr=r(h0t,"convbert"),h0t.forEach(t),mTr=r(wBe," \u2014 "),fU=n(wBe,"A",{href:!0});var p0t=s(fU);gTr=r(p0t,"TFConvBertForSequenceClassification"),p0t.forEach(t),hTr=r(wBe," (ConvBERT model)"),wBe.forEach(t),pTr=i(ae),O7=n(ae,"LI",{});var ABe=s(O7);M5e=n(ABe,"STRONG",{});var _0t=s(M5e);_Tr=r(_0t,"ctrl"),_0t.forEach(t),uTr=r(ABe," \u2014 "),mU=n(ABe,"A",{href:!0});var u0t=s(mU);bTr=r(u0t,"TFCTRLForSequenceClassification"),u0t.forEach(t),vTr=r(ABe," (CTRL model)"),ABe.forEach(t),FTr=i(ae),V7=n(ae,"LI",{});var LBe=s(V7);E5e=n(LBe,"STRONG",{});var b0t=s(E5e);TTr=r(b0t,"deberta"),b0t.forEach(t),MTr=r(LBe," \u2014 "),gU=n(LBe,"A",{href:!0});var v0t=s(gU);ETr=r(v0t,"TFDebertaForSequenceClassification"),v0t.forEach(t),CTr=r(LBe," (DeBERTa model)"),LBe.forEach(t),wTr=i(ae),X7=n(ae,"LI",{});var yBe=s(X7);C5e=n(yBe,"STRONG",{});var F0t=s(C5e);ATr=r(F0t,"deberta-v2"),F0t.forEach(t),LTr=r(yBe," \u2014 "),hU=n(yBe,"A",{href:!0});var T0t=s(hU);yTr=r(T0t,"TFDebertaV2ForSequenceClassification"),T0t.forEach(t),xTr=r(yBe," (DeBERTa-v2 model)"),yBe.forEach(t),$Tr=i(ae),z7=n(ae,"LI",{});var xBe=s(z7);w5e=n(xBe,"STRONG",{});var M0t=s(w5e);kTr=r(M0t,"distilbert"),M0t.forEach(t),STr=r(xBe," \u2014 "),pU=n(xBe,"A",{href:!0});var E0t=s(pU);RTr=r(E0t,"TFDistilBertForSequenceClassification"),E0t.forEach(t),PTr=r(xBe," (DistilBERT model)"),xBe.forEach(t),BTr=i(ae),W7=n(ae,"LI",{});var $Be=s(W7);A5e=n($Be,"STRONG",{});var C0t=s(A5e);ITr=r(C0t,"electra"),C0t.forEach(t),NTr=r($Be," \u2014 "),_U=n($Be,"A",{href:!0});var w0t=s(_U);qTr=r(w0t,"TFElectraForSequenceClassification"),w0t.forEach(t),jTr=r($Be," (ELECTRA model)"),$Be.forEach(t),DTr=i(ae),Q7=n(ae,"LI",{});var kBe=s(Q7);L5e=n(kBe,"STRONG",{});var A0t=s(L5e);GTr=r(A0t,"flaubert"),A0t.forEach(t),OTr=r(kBe," \u2014 "),uU=n(kBe,"A",{href:!0});var L0t=s(uU);VTr=r(L0t,"TFFlaubertForSequenceClassification"),L0t.forEach(t),XTr=r(kBe," (FlauBERT model)"),kBe.forEach(t),zTr=i(ae),H7=n(ae,"LI",{});var SBe=s(H7);y5e=n(SBe,"STRONG",{});var y0t=s(y5e);WTr=r(y0t,"funnel"),y0t.forEach(t),QTr=r(SBe," \u2014 "),bU=n(SBe,"A",{href:!0});var x0t=s(bU);HTr=r(x0t,"TFFunnelForSequenceClassification"),x0t.forEach(t),UTr=r(SBe," (Funnel Transformer model)"),SBe.forEach(t),JTr=i(ae),U7=n(ae,"LI",{});var RBe=s(U7);x5e=n(RBe,"STRONG",{});var $0t=s(x5e);YTr=r($0t,"gpt2"),$0t.forEach(t),KTr=r(RBe," \u2014 "),vU=n(RBe,"A",{href:!0});var k0t=s(vU);ZTr=r(k0t,"TFGPT2ForSequenceClassification"),k0t.forEach(t),e7r=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),o7r=i(ae),J7=n(ae,"LI",{});var PBe=s(J7);$5e=n(PBe,"STRONG",{});var S0t=s($5e);r7r=r(S0t,"gptj"),S0t.forEach(t),t7r=r(PBe," \u2014 "),FU=n(PBe,"A",{href:!0});var R0t=s(FU);a7r=r(R0t,"TFGPTJForSequenceClassification"),R0t.forEach(t),n7r=r(PBe," (GPT-J model)"),PBe.forEach(t),s7r=i(ae),Y7=n(ae,"LI",{});var BBe=s(Y7);k5e=n(BBe,"STRONG",{});var P0t=s(k5e);l7r=r(P0t,"layoutlm"),P0t.forEach(t),i7r=r(BBe," \u2014 "),TU=n(BBe,"A",{href:!0});var B0t=s(TU);d7r=r(B0t,"TFLayoutLMForSequenceClassification"),B0t.forEach(t),c7r=r(BBe," (LayoutLM model)"),BBe.forEach(t),f7r=i(ae),K7=n(ae,"LI",{});var IBe=s(K7);S5e=n(IBe,"STRONG",{});var I0t=s(S5e);m7r=r(I0t,"longformer"),I0t.forEach(t),g7r=r(IBe," \u2014 "),MU=n(IBe,"A",{href:!0});var N0t=s(MU);h7r=r(N0t,"TFLongformerForSequenceClassification"),N0t.forEach(t),p7r=r(IBe," (Longformer model)"),IBe.forEach(t),_7r=i(ae),Z7=n(ae,"LI",{});var NBe=s(Z7);R5e=n(NBe,"STRONG",{});var q0t=s(R5e);u7r=r(q0t,"mobilebert"),q0t.forEach(t),b7r=r(NBe," \u2014 "),EU=n(NBe,"A",{href:!0});var j0t=s(EU);v7r=r(j0t,"TFMobileBertForSequenceClassification"),j0t.forEach(t),F7r=r(NBe," (MobileBERT model)"),NBe.forEach(t),T7r=i(ae),eM=n(ae,"LI",{});var qBe=s(eM);P5e=n(qBe,"STRONG",{});var D0t=s(P5e);M7r=r(D0t,"mpnet"),D0t.forEach(t),E7r=r(qBe," \u2014 "),CU=n(qBe,"A",{href:!0});var G0t=s(CU);C7r=r(G0t,"TFMPNetForSequenceClassification"),G0t.forEach(t),w7r=r(qBe," (MPNet model)"),qBe.forEach(t),A7r=i(ae),oM=n(ae,"LI",{});var jBe=s(oM);B5e=n(jBe,"STRONG",{});var O0t=s(B5e);L7r=r(O0t,"openai-gpt"),O0t.forEach(t),y7r=r(jBe," \u2014 "),wU=n(jBe,"A",{href:!0});var V0t=s(wU);x7r=r(V0t,"TFOpenAIGPTForSequenceClassification"),V0t.forEach(t),$7r=r(jBe," (OpenAI GPT model)"),jBe.forEach(t),k7r=i(ae),rM=n(ae,"LI",{});var DBe=s(rM);I5e=n(DBe,"STRONG",{});var X0t=s(I5e);S7r=r(X0t,"rembert"),X0t.forEach(t),R7r=r(DBe," \u2014 "),AU=n(DBe,"A",{href:!0});var z0t=s(AU);P7r=r(z0t,"TFRemBertForSequenceClassification"),z0t.forEach(t),B7r=r(DBe," (RemBERT model)"),DBe.forEach(t),I7r=i(ae),tM=n(ae,"LI",{});var GBe=s(tM);N5e=n(GBe,"STRONG",{});var W0t=s(N5e);N7r=r(W0t,"roberta"),W0t.forEach(t),q7r=r(GBe," \u2014 "),LU=n(GBe,"A",{href:!0});var Q0t=s(LU);j7r=r(Q0t,"TFRobertaForSequenceClassification"),Q0t.forEach(t),D7r=r(GBe," (RoBERTa model)"),GBe.forEach(t),G7r=i(ae),aM=n(ae,"LI",{});var OBe=s(aM);q5e=n(OBe,"STRONG",{});var H0t=s(q5e);O7r=r(H0t,"roformer"),H0t.forEach(t),V7r=r(OBe," \u2014 "),yU=n(OBe,"A",{href:!0});var U0t=s(yU);X7r=r(U0t,"TFRoFormerForSequenceClassification"),U0t.forEach(t),z7r=r(OBe," (RoFormer model)"),OBe.forEach(t),W7r=i(ae),nM=n(ae,"LI",{});var VBe=s(nM);j5e=n(VBe,"STRONG",{});var J0t=s(j5e);Q7r=r(J0t,"tapas"),J0t.forEach(t),H7r=r(VBe," \u2014 "),xU=n(VBe,"A",{href:!0});var Y0t=s(xU);U7r=r(Y0t,"TFTapasForSequenceClassification"),Y0t.forEach(t),J7r=r(VBe," (TAPAS model)"),VBe.forEach(t),Y7r=i(ae),sM=n(ae,"LI",{});var XBe=s(sM);D5e=n(XBe,"STRONG",{});var K0t=s(D5e);K7r=r(K0t,"transfo-xl"),K0t.forEach(t),Z7r=r(XBe," \u2014 "),$U=n(XBe,"A",{href:!0});var Z0t=s($U);eMr=r(Z0t,"TFTransfoXLForSequenceClassification"),Z0t.forEach(t),oMr=r(XBe," (Transformer-XL model)"),XBe.forEach(t),rMr=i(ae),lM=n(ae,"LI",{});var zBe=s(lM);G5e=n(zBe,"STRONG",{});var ewt=s(G5e);tMr=r(ewt,"xlm"),ewt.forEach(t),aMr=r(zBe," \u2014 "),kU=n(zBe,"A",{href:!0});var owt=s(kU);nMr=r(owt,"TFXLMForSequenceClassification"),owt.forEach(t),sMr=r(zBe," (XLM model)"),zBe.forEach(t),lMr=i(ae),iM=n(ae,"LI",{});var WBe=s(iM);O5e=n(WBe,"STRONG",{});var rwt=s(O5e);iMr=r(rwt,"xlm-roberta"),rwt.forEach(t),dMr=r(WBe," \u2014 "),SU=n(WBe,"A",{href:!0});var twt=s(SU);cMr=r(twt,"TFXLMRobertaForSequenceClassification"),twt.forEach(t),fMr=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),mMr=i(ae),dM=n(ae,"LI",{});var QBe=s(dM);V5e=n(QBe,"STRONG",{});var awt=s(V5e);gMr=r(awt,"xlnet"),awt.forEach(t),hMr=r(QBe," \u2014 "),RU=n(QBe,"A",{href:!0});var nwt=s(RU);pMr=r(nwt,"TFXLNetForSequenceClassification"),nwt.forEach(t),_Mr=r(QBe," (XLNet model)"),QBe.forEach(t),ae.forEach(t),uMr=i(yl),T(cM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),FDe=i(f),cc=n(f,"H2",{class:!0});var AOe=s(cc);fM=n(AOe,"A",{id:!0,class:!0,href:!0});var swt=s(fM);X5e=n(swt,"SPAN",{});var lwt=s(X5e);T(t9.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),bMr=i(AOe),z5e=n(AOe,"SPAN",{});var iwt=s(z5e);vMr=r(iwt,"TFAutoModelForMultipleChoice"),iwt.forEach(t),AOe.forEach(t),TDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(a9.$$.fragment,xl),FMr=i(xl),fc=n(xl,"P",{});var Kee=s(fc);TMr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=n(Kee,"A",{href:!0});var dwt=s(PU);MMr=r(dwt,"from_pretrained()"),dwt.forEach(t),EMr=r(Kee," class method or the "),BU=n(Kee,"A",{href:!0});var cwt=s(BU);CMr=r(cwt,"from_config()"),cwt.forEach(t),wMr=r(Kee,` class
method.`),Kee.forEach(t),AMr=i(xl),n9=n(xl,"P",{});var LOe=s(n9);LMr=r(LOe,"This class cannot be instantiated directly using "),W5e=n(LOe,"CODE",{});var fwt=s(W5e);yMr=r(fwt,"__init__()"),fwt.forEach(t),xMr=r(LOe," (throws an error)."),LOe.forEach(t),$Mr=i(xl),Bt=n(xl,"DIV",{class:!0});var ZA=s(Bt);T(s9.$$.fragment,ZA),kMr=i(ZA),Q5e=n(ZA,"P",{});var mwt=s(Q5e);SMr=r(mwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mwt.forEach(t),RMr=i(ZA),mc=n(ZA,"P",{});var Zee=s(mc);PMr=r(Zee,`Note:
Loading a model from its configuration file does `),H5e=n(Zee,"STRONG",{});var gwt=s(H5e);BMr=r(gwt,"not"),gwt.forEach(t),IMr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Zee,"A",{href:!0});var hwt=s(IU);NMr=r(hwt,"from_pretrained()"),hwt.forEach(t),qMr=r(Zee," to load the model weights."),Zee.forEach(t),jMr=i(ZA),T(mM.$$.fragment,ZA),ZA.forEach(t),DMr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(l9.$$.fragment,$l),GMr=i($l),U5e=n($l,"P",{});var pwt=s(U5e);OMr=r(pwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pwt.forEach(t),VMr=i($l),sn=n($l,"P",{});var e6=s(sn);XMr=r(e6,"The model class to instantiate is selected based on the "),J5e=n(e6,"CODE",{});var _wt=s(J5e);zMr=r(_wt,"model_type"),_wt.forEach(t),WMr=r(e6,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(e6,"CODE",{});var uwt=s(Y5e);QMr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),HMr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(e6,"CODE",{});var bwt=s(K5e);UMr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),JMr=r(e6,":"),e6.forEach(t),YMr=i($l),pe=n($l,"UL",{});var ve=s(pe);gM=n(ve,"LI",{});var HBe=s(gM);Z5e=n(HBe,"STRONG",{});var vwt=s(Z5e);KMr=r(vwt,"albert"),vwt.forEach(t),ZMr=r(HBe," \u2014 "),NU=n(HBe,"A",{href:!0});var Fwt=s(NU);eEr=r(Fwt,"TFAlbertForMultipleChoice"),Fwt.forEach(t),oEr=r(HBe," (ALBERT model)"),HBe.forEach(t),rEr=i(ve),hM=n(ve,"LI",{});var UBe=s(hM);e3e=n(UBe,"STRONG",{});var Twt=s(e3e);tEr=r(Twt,"bert"),Twt.forEach(t),aEr=r(UBe," \u2014 "),qU=n(UBe,"A",{href:!0});var Mwt=s(qU);nEr=r(Mwt,"TFBertForMultipleChoice"),Mwt.forEach(t),sEr=r(UBe," (BERT model)"),UBe.forEach(t),lEr=i(ve),pM=n(ve,"LI",{});var JBe=s(pM);o3e=n(JBe,"STRONG",{});var Ewt=s(o3e);iEr=r(Ewt,"camembert"),Ewt.forEach(t),dEr=r(JBe," \u2014 "),jU=n(JBe,"A",{href:!0});var Cwt=s(jU);cEr=r(Cwt,"TFCamembertForMultipleChoice"),Cwt.forEach(t),fEr=r(JBe," (CamemBERT model)"),JBe.forEach(t),mEr=i(ve),_M=n(ve,"LI",{});var YBe=s(_M);r3e=n(YBe,"STRONG",{});var wwt=s(r3e);gEr=r(wwt,"convbert"),wwt.forEach(t),hEr=r(YBe," \u2014 "),DU=n(YBe,"A",{href:!0});var Awt=s(DU);pEr=r(Awt,"TFConvBertForMultipleChoice"),Awt.forEach(t),_Er=r(YBe," (ConvBERT model)"),YBe.forEach(t),uEr=i(ve),uM=n(ve,"LI",{});var KBe=s(uM);t3e=n(KBe,"STRONG",{});var Lwt=s(t3e);bEr=r(Lwt,"distilbert"),Lwt.forEach(t),vEr=r(KBe," \u2014 "),GU=n(KBe,"A",{href:!0});var ywt=s(GU);FEr=r(ywt,"TFDistilBertForMultipleChoice"),ywt.forEach(t),TEr=r(KBe," (DistilBERT model)"),KBe.forEach(t),MEr=i(ve),bM=n(ve,"LI",{});var ZBe=s(bM);a3e=n(ZBe,"STRONG",{});var xwt=s(a3e);EEr=r(xwt,"electra"),xwt.forEach(t),CEr=r(ZBe," \u2014 "),OU=n(ZBe,"A",{href:!0});var $wt=s(OU);wEr=r($wt,"TFElectraForMultipleChoice"),$wt.forEach(t),AEr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),LEr=i(ve),vM=n(ve,"LI",{});var eIe=s(vM);n3e=n(eIe,"STRONG",{});var kwt=s(n3e);yEr=r(kwt,"flaubert"),kwt.forEach(t),xEr=r(eIe," \u2014 "),VU=n(eIe,"A",{href:!0});var Swt=s(VU);$Er=r(Swt,"TFFlaubertForMultipleChoice"),Swt.forEach(t),kEr=r(eIe," (FlauBERT model)"),eIe.forEach(t),SEr=i(ve),FM=n(ve,"LI",{});var oIe=s(FM);s3e=n(oIe,"STRONG",{});var Rwt=s(s3e);REr=r(Rwt,"funnel"),Rwt.forEach(t),PEr=r(oIe," \u2014 "),XU=n(oIe,"A",{href:!0});var Pwt=s(XU);BEr=r(Pwt,"TFFunnelForMultipleChoice"),Pwt.forEach(t),IEr=r(oIe," (Funnel Transformer model)"),oIe.forEach(t),NEr=i(ve),TM=n(ve,"LI",{});var rIe=s(TM);l3e=n(rIe,"STRONG",{});var Bwt=s(l3e);qEr=r(Bwt,"longformer"),Bwt.forEach(t),jEr=r(rIe," \u2014 "),zU=n(rIe,"A",{href:!0});var Iwt=s(zU);DEr=r(Iwt,"TFLongformerForMultipleChoice"),Iwt.forEach(t),GEr=r(rIe," (Longformer model)"),rIe.forEach(t),OEr=i(ve),MM=n(ve,"LI",{});var tIe=s(MM);i3e=n(tIe,"STRONG",{});var Nwt=s(i3e);VEr=r(Nwt,"mobilebert"),Nwt.forEach(t),XEr=r(tIe," \u2014 "),WU=n(tIe,"A",{href:!0});var qwt=s(WU);zEr=r(qwt,"TFMobileBertForMultipleChoice"),qwt.forEach(t),WEr=r(tIe," (MobileBERT model)"),tIe.forEach(t),QEr=i(ve),EM=n(ve,"LI",{});var aIe=s(EM);d3e=n(aIe,"STRONG",{});var jwt=s(d3e);HEr=r(jwt,"mpnet"),jwt.forEach(t),UEr=r(aIe," \u2014 "),QU=n(aIe,"A",{href:!0});var Dwt=s(QU);JEr=r(Dwt,"TFMPNetForMultipleChoice"),Dwt.forEach(t),YEr=r(aIe," (MPNet model)"),aIe.forEach(t),KEr=i(ve),CM=n(ve,"LI",{});var nIe=s(CM);c3e=n(nIe,"STRONG",{});var Gwt=s(c3e);ZEr=r(Gwt,"rembert"),Gwt.forEach(t),eCr=r(nIe," \u2014 "),HU=n(nIe,"A",{href:!0});var Owt=s(HU);oCr=r(Owt,"TFRemBertForMultipleChoice"),Owt.forEach(t),rCr=r(nIe," (RemBERT model)"),nIe.forEach(t),tCr=i(ve),wM=n(ve,"LI",{});var sIe=s(wM);f3e=n(sIe,"STRONG",{});var Vwt=s(f3e);aCr=r(Vwt,"roberta"),Vwt.forEach(t),nCr=r(sIe," \u2014 "),UU=n(sIe,"A",{href:!0});var Xwt=s(UU);sCr=r(Xwt,"TFRobertaForMultipleChoice"),Xwt.forEach(t),lCr=r(sIe," (RoBERTa model)"),sIe.forEach(t),iCr=i(ve),AM=n(ve,"LI",{});var lIe=s(AM);m3e=n(lIe,"STRONG",{});var zwt=s(m3e);dCr=r(zwt,"roformer"),zwt.forEach(t),cCr=r(lIe," \u2014 "),JU=n(lIe,"A",{href:!0});var Wwt=s(JU);fCr=r(Wwt,"TFRoFormerForMultipleChoice"),Wwt.forEach(t),mCr=r(lIe," (RoFormer model)"),lIe.forEach(t),gCr=i(ve),LM=n(ve,"LI",{});var iIe=s(LM);g3e=n(iIe,"STRONG",{});var Qwt=s(g3e);hCr=r(Qwt,"xlm"),Qwt.forEach(t),pCr=r(iIe," \u2014 "),YU=n(iIe,"A",{href:!0});var Hwt=s(YU);_Cr=r(Hwt,"TFXLMForMultipleChoice"),Hwt.forEach(t),uCr=r(iIe," (XLM model)"),iIe.forEach(t),bCr=i(ve),yM=n(ve,"LI",{});var dIe=s(yM);h3e=n(dIe,"STRONG",{});var Uwt=s(h3e);vCr=r(Uwt,"xlm-roberta"),Uwt.forEach(t),FCr=r(dIe," \u2014 "),KU=n(dIe,"A",{href:!0});var Jwt=s(KU);TCr=r(Jwt,"TFXLMRobertaForMultipleChoice"),Jwt.forEach(t),MCr=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),ECr=i(ve),xM=n(ve,"LI",{});var cIe=s(xM);p3e=n(cIe,"STRONG",{});var Ywt=s(p3e);CCr=r(Ywt,"xlnet"),Ywt.forEach(t),wCr=r(cIe," \u2014 "),ZU=n(cIe,"A",{href:!0});var Kwt=s(ZU);ACr=r(Kwt,"TFXLNetForMultipleChoice"),Kwt.forEach(t),LCr=r(cIe," (XLNet model)"),cIe.forEach(t),ve.forEach(t),yCr=i($l),T($M.$$.fragment,$l),$l.forEach(t),xl.forEach(t),MDe=i(f),gc=n(f,"H2",{class:!0});var yOe=s(gc);kM=n(yOe,"A",{id:!0,class:!0,href:!0});var Zwt=s(kM);_3e=n(Zwt,"SPAN",{});var eAt=s(_3e);T(i9.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),xCr=i(yOe),u3e=n(yOe,"SPAN",{});var oAt=s(u3e);$Cr=r(oAt,"TFAutoModelForNextSentencePrediction"),oAt.forEach(t),yOe.forEach(t),EDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(d9.$$.fragment,kl),kCr=i(kl),hc=n(kl,"P",{});var eoe=s(hc);SCr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(eoe,"A",{href:!0});var rAt=s(eJ);RCr=r(rAt,"from_pretrained()"),rAt.forEach(t),PCr=r(eoe," class method or the "),oJ=n(eoe,"A",{href:!0});var tAt=s(oJ);BCr=r(tAt,"from_config()"),tAt.forEach(t),ICr=r(eoe,` class
method.`),eoe.forEach(t),NCr=i(kl),c9=n(kl,"P",{});var xOe=s(c9);qCr=r(xOe,"This class cannot be instantiated directly using "),b3e=n(xOe,"CODE",{});var aAt=s(b3e);jCr=r(aAt,"__init__()"),aAt.forEach(t),DCr=r(xOe," (throws an error)."),xOe.forEach(t),GCr=i(kl),It=n(kl,"DIV",{class:!0});var o6=s(It);T(f9.$$.fragment,o6),OCr=i(o6),v3e=n(o6,"P",{});var nAt=s(v3e);VCr=r(nAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nAt.forEach(t),XCr=i(o6),pc=n(o6,"P",{});var ooe=s(pc);zCr=r(ooe,`Note:
Loading a model from its configuration file does `),F3e=n(ooe,"STRONG",{});var sAt=s(F3e);WCr=r(sAt,"not"),sAt.forEach(t),QCr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(ooe,"A",{href:!0});var lAt=s(rJ);HCr=r(lAt,"from_pretrained()"),lAt.forEach(t),UCr=r(ooe," to load the model weights."),ooe.forEach(t),JCr=i(o6),T(SM.$$.fragment,o6),o6.forEach(t),YCr=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(m9.$$.fragment,Sl),KCr=i(Sl),T3e=n(Sl,"P",{});var iAt=s(T3e);ZCr=r(iAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iAt.forEach(t),e0r=i(Sl),ln=n(Sl,"P",{});var r6=s(ln);o0r=r(r6,"The model class to instantiate is selected based on the "),M3e=n(r6,"CODE",{});var dAt=s(M3e);r0r=r(dAt,"model_type"),dAt.forEach(t),t0r=r(r6,` property of the config object (either
passed as an argument or loaded from `),E3e=n(r6,"CODE",{});var cAt=s(E3e);a0r=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),n0r=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(r6,"CODE",{});var fAt=s(C3e);s0r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),l0r=r(r6,":"),r6.forEach(t),i0r=i(Sl),g9=n(Sl,"UL",{});var $Oe=s(g9);RM=n($Oe,"LI",{});var fIe=s(RM);w3e=n(fIe,"STRONG",{});var mAt=s(w3e);d0r=r(mAt,"bert"),mAt.forEach(t),c0r=r(fIe," \u2014 "),tJ=n(fIe,"A",{href:!0});var gAt=s(tJ);f0r=r(gAt,"TFBertForNextSentencePrediction"),gAt.forEach(t),m0r=r(fIe," (BERT model)"),fIe.forEach(t),g0r=i($Oe),PM=n($Oe,"LI",{});var mIe=s(PM);A3e=n(mIe,"STRONG",{});var hAt=s(A3e);h0r=r(hAt,"mobilebert"),hAt.forEach(t),p0r=r(mIe," \u2014 "),aJ=n(mIe,"A",{href:!0});var pAt=s(aJ);_0r=r(pAt,"TFMobileBertForNextSentencePrediction"),pAt.forEach(t),u0r=r(mIe," (MobileBERT model)"),mIe.forEach(t),$Oe.forEach(t),b0r=i(Sl),T(BM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),CDe=i(f),_c=n(f,"H2",{class:!0});var kOe=s(_c);IM=n(kOe,"A",{id:!0,class:!0,href:!0});var _At=s(IM);L3e=n(_At,"SPAN",{});var uAt=s(L3e);T(h9.$$.fragment,uAt),uAt.forEach(t),_At.forEach(t),v0r=i(kOe),y3e=n(kOe,"SPAN",{});var bAt=s(y3e);F0r=r(bAt,"TFAutoModelForTableQuestionAnswering"),bAt.forEach(t),kOe.forEach(t),wDe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(p9.$$.fragment,Rl),T0r=i(Rl),uc=n(Rl,"P",{});var roe=s(uc);M0r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=n(roe,"A",{href:!0});var vAt=s(nJ);E0r=r(vAt,"from_pretrained()"),vAt.forEach(t),C0r=r(roe," class method or the "),sJ=n(roe,"A",{href:!0});var FAt=s(sJ);w0r=r(FAt,"from_config()"),FAt.forEach(t),A0r=r(roe,` class
method.`),roe.forEach(t),L0r=i(Rl),_9=n(Rl,"P",{});var SOe=s(_9);y0r=r(SOe,"This class cannot be instantiated directly using "),x3e=n(SOe,"CODE",{});var TAt=s(x3e);x0r=r(TAt,"__init__()"),TAt.forEach(t),$0r=r(SOe," (throws an error)."),SOe.forEach(t),k0r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var t6=s(Nt);T(u9.$$.fragment,t6),S0r=i(t6),$3e=n(t6,"P",{});var MAt=s($3e);R0r=r(MAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MAt.forEach(t),P0r=i(t6),bc=n(t6,"P",{});var toe=s(bc);B0r=r(toe,`Note:
Loading a model from its configuration file does `),k3e=n(toe,"STRONG",{});var EAt=s(k3e);I0r=r(EAt,"not"),EAt.forEach(t),N0r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(toe,"A",{href:!0});var CAt=s(lJ);q0r=r(CAt,"from_pretrained()"),CAt.forEach(t),j0r=r(toe," to load the model weights."),toe.forEach(t),D0r=i(t6),T(NM.$$.fragment,t6),t6.forEach(t),G0r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(b9.$$.fragment,Pl),O0r=i(Pl),S3e=n(Pl,"P",{});var wAt=s(S3e);V0r=r(wAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wAt.forEach(t),X0r=i(Pl),dn=n(Pl,"P",{});var a6=s(dn);z0r=r(a6,"The model class to instantiate is selected based on the "),R3e=n(a6,"CODE",{});var AAt=s(R3e);W0r=r(AAt,"model_type"),AAt.forEach(t),Q0r=r(a6,` property of the config object (either
passed as an argument or loaded from `),P3e=n(a6,"CODE",{});var LAt=s(P3e);H0r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),U0r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(a6,"CODE",{});var yAt=s(B3e);J0r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),Y0r=r(a6,":"),a6.forEach(t),K0r=i(Pl),I3e=n(Pl,"UL",{});var xAt=s(I3e);qM=n(xAt,"LI",{});var gIe=s(qM);N3e=n(gIe,"STRONG",{});var $At=s(N3e);Z0r=r($At,"tapas"),$At.forEach(t),ewr=r(gIe," \u2014 "),iJ=n(gIe,"A",{href:!0});var kAt=s(iJ);owr=r(kAt,"TFTapasForQuestionAnswering"),kAt.forEach(t),rwr=r(gIe," (TAPAS model)"),gIe.forEach(t),xAt.forEach(t),twr=i(Pl),T(jM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),ADe=i(f),vc=n(f,"H2",{class:!0});var ROe=s(vc);DM=n(ROe,"A",{id:!0,class:!0,href:!0});var SAt=s(DM);q3e=n(SAt,"SPAN",{});var RAt=s(q3e);T(v9.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),awr=i(ROe),j3e=n(ROe,"SPAN",{});var PAt=s(j3e);nwr=r(PAt,"TFAutoModelForTokenClassification"),PAt.forEach(t),ROe.forEach(t),LDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(F9.$$.fragment,Bl),swr=i(Bl),Fc=n(Bl,"P",{});var aoe=s(Fc);lwr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=n(aoe,"A",{href:!0});var BAt=s(dJ);iwr=r(BAt,"from_pretrained()"),BAt.forEach(t),dwr=r(aoe," class method or the "),cJ=n(aoe,"A",{href:!0});var IAt=s(cJ);cwr=r(IAt,"from_config()"),IAt.forEach(t),fwr=r(aoe,` class
method.`),aoe.forEach(t),mwr=i(Bl),T9=n(Bl,"P",{});var POe=s(T9);gwr=r(POe,"This class cannot be instantiated directly using "),D3e=n(POe,"CODE",{});var NAt=s(D3e);hwr=r(NAt,"__init__()"),NAt.forEach(t),pwr=r(POe," (throws an error)."),POe.forEach(t),_wr=i(Bl),qt=n(Bl,"DIV",{class:!0});var n6=s(qt);T(M9.$$.fragment,n6),uwr=i(n6),G3e=n(n6,"P",{});var qAt=s(G3e);bwr=r(qAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qAt.forEach(t),vwr=i(n6),Tc=n(n6,"P",{});var noe=s(Tc);Fwr=r(noe,`Note:
Loading a model from its configuration file does `),O3e=n(noe,"STRONG",{});var jAt=s(O3e);Twr=r(jAt,"not"),jAt.forEach(t),Mwr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(noe,"A",{href:!0});var DAt=s(fJ);Ewr=r(DAt,"from_pretrained()"),DAt.forEach(t),Cwr=r(noe," to load the model weights."),noe.forEach(t),wwr=i(n6),T(GM.$$.fragment,n6),n6.forEach(t),Awr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(E9.$$.fragment,Il),Lwr=i(Il),V3e=n(Il,"P",{});var GAt=s(V3e);ywr=r(GAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GAt.forEach(t),xwr=i(Il),cn=n(Il,"P",{});var s6=s(cn);$wr=r(s6,"The model class to instantiate is selected based on the "),X3e=n(s6,"CODE",{});var OAt=s(X3e);kwr=r(OAt,"model_type"),OAt.forEach(t),Swr=r(s6,` property of the config object (either
passed as an argument or loaded from `),z3e=n(s6,"CODE",{});var VAt=s(z3e);Rwr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Pwr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(s6,"CODE",{});var XAt=s(W3e);Bwr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Iwr=r(s6,":"),s6.forEach(t),Nwr=i(Il),de=n(Il,"UL",{});var me=s(de);OM=n(me,"LI",{});var hIe=s(OM);Q3e=n(hIe,"STRONG",{});var zAt=s(Q3e);qwr=r(zAt,"albert"),zAt.forEach(t),jwr=r(hIe," \u2014 "),mJ=n(hIe,"A",{href:!0});var WAt=s(mJ);Dwr=r(WAt,"TFAlbertForTokenClassification"),WAt.forEach(t),Gwr=r(hIe," (ALBERT model)"),hIe.forEach(t),Owr=i(me),VM=n(me,"LI",{});var pIe=s(VM);H3e=n(pIe,"STRONG",{});var QAt=s(H3e);Vwr=r(QAt,"bert"),QAt.forEach(t),Xwr=r(pIe," \u2014 "),gJ=n(pIe,"A",{href:!0});var HAt=s(gJ);zwr=r(HAt,"TFBertForTokenClassification"),HAt.forEach(t),Wwr=r(pIe," (BERT model)"),pIe.forEach(t),Qwr=i(me),XM=n(me,"LI",{});var _Ie=s(XM);U3e=n(_Ie,"STRONG",{});var UAt=s(U3e);Hwr=r(UAt,"camembert"),UAt.forEach(t),Uwr=r(_Ie," \u2014 "),hJ=n(_Ie,"A",{href:!0});var JAt=s(hJ);Jwr=r(JAt,"TFCamembertForTokenClassification"),JAt.forEach(t),Ywr=r(_Ie," (CamemBERT model)"),_Ie.forEach(t),Kwr=i(me),zM=n(me,"LI",{});var uIe=s(zM);J3e=n(uIe,"STRONG",{});var YAt=s(J3e);Zwr=r(YAt,"convbert"),YAt.forEach(t),eAr=r(uIe," \u2014 "),pJ=n(uIe,"A",{href:!0});var KAt=s(pJ);oAr=r(KAt,"TFConvBertForTokenClassification"),KAt.forEach(t),rAr=r(uIe," (ConvBERT model)"),uIe.forEach(t),tAr=i(me),WM=n(me,"LI",{});var bIe=s(WM);Y3e=n(bIe,"STRONG",{});var ZAt=s(Y3e);aAr=r(ZAt,"deberta"),ZAt.forEach(t),nAr=r(bIe," \u2014 "),_J=n(bIe,"A",{href:!0});var e6t=s(_J);sAr=r(e6t,"TFDebertaForTokenClassification"),e6t.forEach(t),lAr=r(bIe," (DeBERTa model)"),bIe.forEach(t),iAr=i(me),QM=n(me,"LI",{});var vIe=s(QM);K3e=n(vIe,"STRONG",{});var o6t=s(K3e);dAr=r(o6t,"deberta-v2"),o6t.forEach(t),cAr=r(vIe," \u2014 "),uJ=n(vIe,"A",{href:!0});var r6t=s(uJ);fAr=r(r6t,"TFDebertaV2ForTokenClassification"),r6t.forEach(t),mAr=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),gAr=i(me),HM=n(me,"LI",{});var FIe=s(HM);Z3e=n(FIe,"STRONG",{});var t6t=s(Z3e);hAr=r(t6t,"distilbert"),t6t.forEach(t),pAr=r(FIe," \u2014 "),bJ=n(FIe,"A",{href:!0});var a6t=s(bJ);_Ar=r(a6t,"TFDistilBertForTokenClassification"),a6t.forEach(t),uAr=r(FIe," (DistilBERT model)"),FIe.forEach(t),bAr=i(me),UM=n(me,"LI",{});var TIe=s(UM);eFe=n(TIe,"STRONG",{});var n6t=s(eFe);vAr=r(n6t,"electra"),n6t.forEach(t),FAr=r(TIe," \u2014 "),vJ=n(TIe,"A",{href:!0});var s6t=s(vJ);TAr=r(s6t,"TFElectraForTokenClassification"),s6t.forEach(t),MAr=r(TIe," (ELECTRA model)"),TIe.forEach(t),EAr=i(me),JM=n(me,"LI",{});var MIe=s(JM);oFe=n(MIe,"STRONG",{});var l6t=s(oFe);CAr=r(l6t,"flaubert"),l6t.forEach(t),wAr=r(MIe," \u2014 "),FJ=n(MIe,"A",{href:!0});var i6t=s(FJ);AAr=r(i6t,"TFFlaubertForTokenClassification"),i6t.forEach(t),LAr=r(MIe," (FlauBERT model)"),MIe.forEach(t),yAr=i(me),YM=n(me,"LI",{});var EIe=s(YM);rFe=n(EIe,"STRONG",{});var d6t=s(rFe);xAr=r(d6t,"funnel"),d6t.forEach(t),$Ar=r(EIe," \u2014 "),TJ=n(EIe,"A",{href:!0});var c6t=s(TJ);kAr=r(c6t,"TFFunnelForTokenClassification"),c6t.forEach(t),SAr=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),RAr=i(me),KM=n(me,"LI",{});var CIe=s(KM);tFe=n(CIe,"STRONG",{});var f6t=s(tFe);PAr=r(f6t,"layoutlm"),f6t.forEach(t),BAr=r(CIe," \u2014 "),MJ=n(CIe,"A",{href:!0});var m6t=s(MJ);IAr=r(m6t,"TFLayoutLMForTokenClassification"),m6t.forEach(t),NAr=r(CIe," (LayoutLM model)"),CIe.forEach(t),qAr=i(me),ZM=n(me,"LI",{});var wIe=s(ZM);aFe=n(wIe,"STRONG",{});var g6t=s(aFe);jAr=r(g6t,"longformer"),g6t.forEach(t),DAr=r(wIe," \u2014 "),EJ=n(wIe,"A",{href:!0});var h6t=s(EJ);GAr=r(h6t,"TFLongformerForTokenClassification"),h6t.forEach(t),OAr=r(wIe," (Longformer model)"),wIe.forEach(t),VAr=i(me),eE=n(me,"LI",{});var AIe=s(eE);nFe=n(AIe,"STRONG",{});var p6t=s(nFe);XAr=r(p6t,"mobilebert"),p6t.forEach(t),zAr=r(AIe," \u2014 "),CJ=n(AIe,"A",{href:!0});var _6t=s(CJ);WAr=r(_6t,"TFMobileBertForTokenClassification"),_6t.forEach(t),QAr=r(AIe," (MobileBERT model)"),AIe.forEach(t),HAr=i(me),oE=n(me,"LI",{});var LIe=s(oE);sFe=n(LIe,"STRONG",{});var u6t=s(sFe);UAr=r(u6t,"mpnet"),u6t.forEach(t),JAr=r(LIe," \u2014 "),wJ=n(LIe,"A",{href:!0});var b6t=s(wJ);YAr=r(b6t,"TFMPNetForTokenClassification"),b6t.forEach(t),KAr=r(LIe," (MPNet model)"),LIe.forEach(t),ZAr=i(me),rE=n(me,"LI",{});var yIe=s(rE);lFe=n(yIe,"STRONG",{});var v6t=s(lFe);e6r=r(v6t,"rembert"),v6t.forEach(t),o6r=r(yIe," \u2014 "),AJ=n(yIe,"A",{href:!0});var F6t=s(AJ);r6r=r(F6t,"TFRemBertForTokenClassification"),F6t.forEach(t),t6r=r(yIe," (RemBERT model)"),yIe.forEach(t),a6r=i(me),tE=n(me,"LI",{});var xIe=s(tE);iFe=n(xIe,"STRONG",{});var T6t=s(iFe);n6r=r(T6t,"roberta"),T6t.forEach(t),s6r=r(xIe," \u2014 "),LJ=n(xIe,"A",{href:!0});var M6t=s(LJ);l6r=r(M6t,"TFRobertaForTokenClassification"),M6t.forEach(t),i6r=r(xIe," (RoBERTa model)"),xIe.forEach(t),d6r=i(me),aE=n(me,"LI",{});var $Ie=s(aE);dFe=n($Ie,"STRONG",{});var E6t=s(dFe);c6r=r(E6t,"roformer"),E6t.forEach(t),f6r=r($Ie," \u2014 "),yJ=n($Ie,"A",{href:!0});var C6t=s(yJ);m6r=r(C6t,"TFRoFormerForTokenClassification"),C6t.forEach(t),g6r=r($Ie," (RoFormer model)"),$Ie.forEach(t),h6r=i(me),nE=n(me,"LI",{});var kIe=s(nE);cFe=n(kIe,"STRONG",{});var w6t=s(cFe);p6r=r(w6t,"xlm"),w6t.forEach(t),_6r=r(kIe," \u2014 "),xJ=n(kIe,"A",{href:!0});var A6t=s(xJ);u6r=r(A6t,"TFXLMForTokenClassification"),A6t.forEach(t),b6r=r(kIe," (XLM model)"),kIe.forEach(t),v6r=i(me),sE=n(me,"LI",{});var SIe=s(sE);fFe=n(SIe,"STRONG",{});var L6t=s(fFe);F6r=r(L6t,"xlm-roberta"),L6t.forEach(t),T6r=r(SIe," \u2014 "),$J=n(SIe,"A",{href:!0});var y6t=s($J);M6r=r(y6t,"TFXLMRobertaForTokenClassification"),y6t.forEach(t),E6r=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),C6r=i(me),lE=n(me,"LI",{});var RIe=s(lE);mFe=n(RIe,"STRONG",{});var x6t=s(mFe);w6r=r(x6t,"xlnet"),x6t.forEach(t),A6r=r(RIe," \u2014 "),kJ=n(RIe,"A",{href:!0});var $6t=s(kJ);L6r=r($6t,"TFXLNetForTokenClassification"),$6t.forEach(t),y6r=r(RIe," (XLNet model)"),RIe.forEach(t),me.forEach(t),x6r=i(Il),T(iE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),yDe=i(f),Mc=n(f,"H2",{class:!0});var BOe=s(Mc);dE=n(BOe,"A",{id:!0,class:!0,href:!0});var k6t=s(dE);gFe=n(k6t,"SPAN",{});var S6t=s(gFe);T(C9.$$.fragment,S6t),S6t.forEach(t),k6t.forEach(t),$6r=i(BOe),hFe=n(BOe,"SPAN",{});var R6t=s(hFe);k6r=r(R6t,"TFAutoModelForQuestionAnswering"),R6t.forEach(t),BOe.forEach(t),xDe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(w9.$$.fragment,Nl),S6r=i(Nl),Ec=n(Nl,"P",{});var soe=s(Ec);R6r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=n(soe,"A",{href:!0});var P6t=s(SJ);P6r=r(P6t,"from_pretrained()"),P6t.forEach(t),B6r=r(soe," class method or the "),RJ=n(soe,"A",{href:!0});var B6t=s(RJ);I6r=r(B6t,"from_config()"),B6t.forEach(t),N6r=r(soe,` class
method.`),soe.forEach(t),q6r=i(Nl),A9=n(Nl,"P",{});var IOe=s(A9);j6r=r(IOe,"This class cannot be instantiated directly using "),pFe=n(IOe,"CODE",{});var I6t=s(pFe);D6r=r(I6t,"__init__()"),I6t.forEach(t),G6r=r(IOe," (throws an error)."),IOe.forEach(t),O6r=i(Nl),jt=n(Nl,"DIV",{class:!0});var l6=s(jt);T(L9.$$.fragment,l6),V6r=i(l6),_Fe=n(l6,"P",{});var N6t=s(_Fe);X6r=r(N6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N6t.forEach(t),z6r=i(l6),Cc=n(l6,"P",{});var loe=s(Cc);W6r=r(loe,`Note:
Loading a model from its configuration file does `),uFe=n(loe,"STRONG",{});var q6t=s(uFe);Q6r=r(q6t,"not"),q6t.forEach(t),H6r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(loe,"A",{href:!0});var j6t=s(PJ);U6r=r(j6t,"from_pretrained()"),j6t.forEach(t),J6r=r(loe," to load the model weights."),loe.forEach(t),Y6r=i(l6),T(cE.$$.fragment,l6),l6.forEach(t),K6r=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(y9.$$.fragment,ql),Z6r=i(ql),bFe=n(ql,"P",{});var D6t=s(bFe);eLr=r(D6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D6t.forEach(t),oLr=i(ql),fn=n(ql,"P",{});var i6=s(fn);rLr=r(i6,"The model class to instantiate is selected based on the "),vFe=n(i6,"CODE",{});var G6t=s(vFe);tLr=r(G6t,"model_type"),G6t.forEach(t),aLr=r(i6,` property of the config object (either
passed as an argument or loaded from `),FFe=n(i6,"CODE",{});var O6t=s(FFe);nLr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),sLr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(i6,"CODE",{});var V6t=s(TFe);lLr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),iLr=r(i6,":"),i6.forEach(t),dLr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);fE=n(ge,"LI",{});var PIe=s(fE);MFe=n(PIe,"STRONG",{});var X6t=s(MFe);cLr=r(X6t,"albert"),X6t.forEach(t),fLr=r(PIe," \u2014 "),BJ=n(PIe,"A",{href:!0});var z6t=s(BJ);mLr=r(z6t,"TFAlbertForQuestionAnswering"),z6t.forEach(t),gLr=r(PIe," (ALBERT model)"),PIe.forEach(t),hLr=i(ge),mE=n(ge,"LI",{});var BIe=s(mE);EFe=n(BIe,"STRONG",{});var W6t=s(EFe);pLr=r(W6t,"bert"),W6t.forEach(t),_Lr=r(BIe," \u2014 "),IJ=n(BIe,"A",{href:!0});var Q6t=s(IJ);uLr=r(Q6t,"TFBertForQuestionAnswering"),Q6t.forEach(t),bLr=r(BIe," (BERT model)"),BIe.forEach(t),vLr=i(ge),gE=n(ge,"LI",{});var IIe=s(gE);CFe=n(IIe,"STRONG",{});var H6t=s(CFe);FLr=r(H6t,"camembert"),H6t.forEach(t),TLr=r(IIe," \u2014 "),NJ=n(IIe,"A",{href:!0});var U6t=s(NJ);MLr=r(U6t,"TFCamembertForQuestionAnswering"),U6t.forEach(t),ELr=r(IIe," (CamemBERT model)"),IIe.forEach(t),CLr=i(ge),hE=n(ge,"LI",{});var NIe=s(hE);wFe=n(NIe,"STRONG",{});var J6t=s(wFe);wLr=r(J6t,"convbert"),J6t.forEach(t),ALr=r(NIe," \u2014 "),qJ=n(NIe,"A",{href:!0});var Y6t=s(qJ);LLr=r(Y6t,"TFConvBertForQuestionAnswering"),Y6t.forEach(t),yLr=r(NIe," (ConvBERT model)"),NIe.forEach(t),xLr=i(ge),pE=n(ge,"LI",{});var qIe=s(pE);AFe=n(qIe,"STRONG",{});var K6t=s(AFe);$Lr=r(K6t,"deberta"),K6t.forEach(t),kLr=r(qIe," \u2014 "),jJ=n(qIe,"A",{href:!0});var Z6t=s(jJ);SLr=r(Z6t,"TFDebertaForQuestionAnswering"),Z6t.forEach(t),RLr=r(qIe," (DeBERTa model)"),qIe.forEach(t),PLr=i(ge),_E=n(ge,"LI",{});var jIe=s(_E);LFe=n(jIe,"STRONG",{});var eLt=s(LFe);BLr=r(eLt,"deberta-v2"),eLt.forEach(t),ILr=r(jIe," \u2014 "),DJ=n(jIe,"A",{href:!0});var oLt=s(DJ);NLr=r(oLt,"TFDebertaV2ForQuestionAnswering"),oLt.forEach(t),qLr=r(jIe," (DeBERTa-v2 model)"),jIe.forEach(t),jLr=i(ge),uE=n(ge,"LI",{});var DIe=s(uE);yFe=n(DIe,"STRONG",{});var rLt=s(yFe);DLr=r(rLt,"distilbert"),rLt.forEach(t),GLr=r(DIe," \u2014 "),GJ=n(DIe,"A",{href:!0});var tLt=s(GJ);OLr=r(tLt,"TFDistilBertForQuestionAnswering"),tLt.forEach(t),VLr=r(DIe," (DistilBERT model)"),DIe.forEach(t),XLr=i(ge),bE=n(ge,"LI",{});var GIe=s(bE);xFe=n(GIe,"STRONG",{});var aLt=s(xFe);zLr=r(aLt,"electra"),aLt.forEach(t),WLr=r(GIe," \u2014 "),OJ=n(GIe,"A",{href:!0});var nLt=s(OJ);QLr=r(nLt,"TFElectraForQuestionAnswering"),nLt.forEach(t),HLr=r(GIe," (ELECTRA model)"),GIe.forEach(t),ULr=i(ge),vE=n(ge,"LI",{});var OIe=s(vE);$Fe=n(OIe,"STRONG",{});var sLt=s($Fe);JLr=r(sLt,"flaubert"),sLt.forEach(t),YLr=r(OIe," \u2014 "),VJ=n(OIe,"A",{href:!0});var lLt=s(VJ);KLr=r(lLt,"TFFlaubertForQuestionAnsweringSimple"),lLt.forEach(t),ZLr=r(OIe," (FlauBERT model)"),OIe.forEach(t),eyr=i(ge),FE=n(ge,"LI",{});var VIe=s(FE);kFe=n(VIe,"STRONG",{});var iLt=s(kFe);oyr=r(iLt,"funnel"),iLt.forEach(t),ryr=r(VIe," \u2014 "),XJ=n(VIe,"A",{href:!0});var dLt=s(XJ);tyr=r(dLt,"TFFunnelForQuestionAnswering"),dLt.forEach(t),ayr=r(VIe," (Funnel Transformer model)"),VIe.forEach(t),nyr=i(ge),TE=n(ge,"LI",{});var XIe=s(TE);SFe=n(XIe,"STRONG",{});var cLt=s(SFe);syr=r(cLt,"gptj"),cLt.forEach(t),lyr=r(XIe," \u2014 "),zJ=n(XIe,"A",{href:!0});var fLt=s(zJ);iyr=r(fLt,"TFGPTJForQuestionAnswering"),fLt.forEach(t),dyr=r(XIe," (GPT-J model)"),XIe.forEach(t),cyr=i(ge),ME=n(ge,"LI",{});var zIe=s(ME);RFe=n(zIe,"STRONG",{});var mLt=s(RFe);fyr=r(mLt,"longformer"),mLt.forEach(t),myr=r(zIe," \u2014 "),WJ=n(zIe,"A",{href:!0});var gLt=s(WJ);gyr=r(gLt,"TFLongformerForQuestionAnswering"),gLt.forEach(t),hyr=r(zIe," (Longformer model)"),zIe.forEach(t),pyr=i(ge),EE=n(ge,"LI",{});var WIe=s(EE);PFe=n(WIe,"STRONG",{});var hLt=s(PFe);_yr=r(hLt,"mobilebert"),hLt.forEach(t),uyr=r(WIe," \u2014 "),QJ=n(WIe,"A",{href:!0});var pLt=s(QJ);byr=r(pLt,"TFMobileBertForQuestionAnswering"),pLt.forEach(t),vyr=r(WIe," (MobileBERT model)"),WIe.forEach(t),Fyr=i(ge),CE=n(ge,"LI",{});var QIe=s(CE);BFe=n(QIe,"STRONG",{});var _Lt=s(BFe);Tyr=r(_Lt,"mpnet"),_Lt.forEach(t),Myr=r(QIe," \u2014 "),HJ=n(QIe,"A",{href:!0});var uLt=s(HJ);Eyr=r(uLt,"TFMPNetForQuestionAnswering"),uLt.forEach(t),Cyr=r(QIe," (MPNet model)"),QIe.forEach(t),wyr=i(ge),wE=n(ge,"LI",{});var HIe=s(wE);IFe=n(HIe,"STRONG",{});var bLt=s(IFe);Ayr=r(bLt,"rembert"),bLt.forEach(t),Lyr=r(HIe," \u2014 "),UJ=n(HIe,"A",{href:!0});var vLt=s(UJ);yyr=r(vLt,"TFRemBertForQuestionAnswering"),vLt.forEach(t),xyr=r(HIe," (RemBERT model)"),HIe.forEach(t),$yr=i(ge),AE=n(ge,"LI",{});var UIe=s(AE);NFe=n(UIe,"STRONG",{});var FLt=s(NFe);kyr=r(FLt,"roberta"),FLt.forEach(t),Syr=r(UIe," \u2014 "),JJ=n(UIe,"A",{href:!0});var TLt=s(JJ);Ryr=r(TLt,"TFRobertaForQuestionAnswering"),TLt.forEach(t),Pyr=r(UIe," (RoBERTa model)"),UIe.forEach(t),Byr=i(ge),LE=n(ge,"LI",{});var JIe=s(LE);qFe=n(JIe,"STRONG",{});var MLt=s(qFe);Iyr=r(MLt,"roformer"),MLt.forEach(t),Nyr=r(JIe," \u2014 "),YJ=n(JIe,"A",{href:!0});var ELt=s(YJ);qyr=r(ELt,"TFRoFormerForQuestionAnswering"),ELt.forEach(t),jyr=r(JIe," (RoFormer model)"),JIe.forEach(t),Dyr=i(ge),yE=n(ge,"LI",{});var YIe=s(yE);jFe=n(YIe,"STRONG",{});var CLt=s(jFe);Gyr=r(CLt,"xlm"),CLt.forEach(t),Oyr=r(YIe," \u2014 "),KJ=n(YIe,"A",{href:!0});var wLt=s(KJ);Vyr=r(wLt,"TFXLMForQuestionAnsweringSimple"),wLt.forEach(t),Xyr=r(YIe," (XLM model)"),YIe.forEach(t),zyr=i(ge),xE=n(ge,"LI",{});var KIe=s(xE);DFe=n(KIe,"STRONG",{});var ALt=s(DFe);Wyr=r(ALt,"xlm-roberta"),ALt.forEach(t),Qyr=r(KIe," \u2014 "),ZJ=n(KIe,"A",{href:!0});var LLt=s(ZJ);Hyr=r(LLt,"TFXLMRobertaForQuestionAnswering"),LLt.forEach(t),Uyr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),Jyr=i(ge),$E=n(ge,"LI",{});var ZIe=s($E);GFe=n(ZIe,"STRONG",{});var yLt=s(GFe);Yyr=r(yLt,"xlnet"),yLt.forEach(t),Kyr=r(ZIe," \u2014 "),eY=n(ZIe,"A",{href:!0});var xLt=s(eY);Zyr=r(xLt,"TFXLNetForQuestionAnsweringSimple"),xLt.forEach(t),e8r=r(ZIe," (XLNet model)"),ZIe.forEach(t),ge.forEach(t),o8r=i(ql),T(kE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),$De=i(f),wc=n(f,"H2",{class:!0});var NOe=s(wc);SE=n(NOe,"A",{id:!0,class:!0,href:!0});var $Lt=s(SE);OFe=n($Lt,"SPAN",{});var kLt=s(OFe);T(x9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),r8r=i(NOe),VFe=n(NOe,"SPAN",{});var SLt=s(VFe);t8r=r(SLt,"TFAutoModelForVision2Seq"),SLt.forEach(t),NOe.forEach(t),kDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T($9.$$.fragment,jl),a8r=i(jl),Ac=n(jl,"P",{});var ioe=s(Ac);n8r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=n(ioe,"A",{href:!0});var RLt=s(oY);s8r=r(RLt,"from_pretrained()"),RLt.forEach(t),l8r=r(ioe," class method or the "),rY=n(ioe,"A",{href:!0});var PLt=s(rY);i8r=r(PLt,"from_config()"),PLt.forEach(t),d8r=r(ioe,` class
method.`),ioe.forEach(t),c8r=i(jl),k9=n(jl,"P",{});var qOe=s(k9);f8r=r(qOe,"This class cannot be instantiated directly using "),XFe=n(qOe,"CODE",{});var BLt=s(XFe);m8r=r(BLt,"__init__()"),BLt.forEach(t),g8r=r(qOe," (throws an error)."),qOe.forEach(t),h8r=i(jl),Dt=n(jl,"DIV",{class:!0});var d6=s(Dt);T(S9.$$.fragment,d6),p8r=i(d6),zFe=n(d6,"P",{});var ILt=s(zFe);_8r=r(ILt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ILt.forEach(t),u8r=i(d6),Lc=n(d6,"P",{});var doe=s(Lc);b8r=r(doe,`Note:
Loading a model from its configuration file does `),WFe=n(doe,"STRONG",{});var NLt=s(WFe);v8r=r(NLt,"not"),NLt.forEach(t),F8r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(doe,"A",{href:!0});var qLt=s(tY);T8r=r(qLt,"from_pretrained()"),qLt.forEach(t),M8r=r(doe," to load the model weights."),doe.forEach(t),E8r=i(d6),T(RE.$$.fragment,d6),d6.forEach(t),C8r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(R9.$$.fragment,Dl),w8r=i(Dl),QFe=n(Dl,"P",{});var jLt=s(QFe);A8r=r(jLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jLt.forEach(t),L8r=i(Dl),mn=n(Dl,"P",{});var c6=s(mn);y8r=r(c6,"The model class to instantiate is selected based on the "),HFe=n(c6,"CODE",{});var DLt=s(HFe);x8r=r(DLt,"model_type"),DLt.forEach(t),$8r=r(c6,` property of the config object (either
passed as an argument or loaded from `),UFe=n(c6,"CODE",{});var GLt=s(UFe);k8r=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),S8r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(c6,"CODE",{});var OLt=s(JFe);R8r=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),P8r=r(c6,":"),c6.forEach(t),B8r=i(Dl),YFe=n(Dl,"UL",{});var VLt=s(YFe);PE=n(VLt,"LI",{});var eNe=s(PE);KFe=n(eNe,"STRONG",{});var XLt=s(KFe);I8r=r(XLt,"vision-encoder-decoder"),XLt.forEach(t),N8r=r(eNe," \u2014 "),aY=n(eNe,"A",{href:!0});var zLt=s(aY);q8r=r(zLt,"TFVisionEncoderDecoderModel"),zLt.forEach(t),j8r=r(eNe," (Vision Encoder decoder model)"),eNe.forEach(t),VLt.forEach(t),D8r=i(Dl),T(BE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),SDe=i(f),yc=n(f,"H2",{class:!0});var jOe=s(yc);IE=n(jOe,"A",{id:!0,class:!0,href:!0});var WLt=s(IE);ZFe=n(WLt,"SPAN",{});var QLt=s(ZFe);T(P9.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),G8r=i(jOe),eTe=n(jOe,"SPAN",{});var HLt=s(eTe);O8r=r(HLt,"TFAutoModelForSpeechSeq2Seq"),HLt.forEach(t),jOe.forEach(t),RDe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(B9.$$.fragment,Gl),V8r=i(Gl),xc=n(Gl,"P",{});var coe=s(xc);X8r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=n(coe,"A",{href:!0});var ULt=s(nY);z8r=r(ULt,"from_pretrained()"),ULt.forEach(t),W8r=r(coe," class method or the "),sY=n(coe,"A",{href:!0});var JLt=s(sY);Q8r=r(JLt,"from_config()"),JLt.forEach(t),H8r=r(coe,` class
method.`),coe.forEach(t),U8r=i(Gl),I9=n(Gl,"P",{});var DOe=s(I9);J8r=r(DOe,"This class cannot be instantiated directly using "),oTe=n(DOe,"CODE",{});var YLt=s(oTe);Y8r=r(YLt,"__init__()"),YLt.forEach(t),K8r=r(DOe," (throws an error)."),DOe.forEach(t),Z8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var f6=s(Gt);T(N9.$$.fragment,f6),e9r=i(f6),rTe=n(f6,"P",{});var KLt=s(rTe);o9r=r(KLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),KLt.forEach(t),r9r=i(f6),$c=n(f6,"P",{});var foe=s($c);t9r=r(foe,`Note:
Loading a model from its configuration file does `),tTe=n(foe,"STRONG",{});var ZLt=s(tTe);a9r=r(ZLt,"not"),ZLt.forEach(t),n9r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(foe,"A",{href:!0});var eyt=s(lY);s9r=r(eyt,"from_pretrained()"),eyt.forEach(t),l9r=r(foe," to load the model weights."),foe.forEach(t),i9r=i(f6),T(NE.$$.fragment,f6),f6.forEach(t),d9r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(q9.$$.fragment,Ol),c9r=i(Ol),aTe=n(Ol,"P",{});var oyt=s(aTe);f9r=r(oyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oyt.forEach(t),m9r=i(Ol),gn=n(Ol,"P",{});var m6=s(gn);g9r=r(m6,"The model class to instantiate is selected based on the "),nTe=n(m6,"CODE",{});var ryt=s(nTe);h9r=r(ryt,"model_type"),ryt.forEach(t),p9r=r(m6,` property of the config object (either
passed as an argument or loaded from `),sTe=n(m6,"CODE",{});var tyt=s(sTe);_9r=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),u9r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(m6,"CODE",{});var ayt=s(lTe);b9r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),v9r=r(m6,":"),m6.forEach(t),F9r=i(Ol),iTe=n(Ol,"UL",{});var nyt=s(iTe);qE=n(nyt,"LI",{});var oNe=s(qE);dTe=n(oNe,"STRONG",{});var syt=s(dTe);T9r=r(syt,"speech_to_text"),syt.forEach(t),M9r=r(oNe," \u2014 "),iY=n(oNe,"A",{href:!0});var lyt=s(iY);E9r=r(lyt,"TFSpeech2TextForConditionalGeneration"),lyt.forEach(t),C9r=r(oNe," (Speech2Text model)"),oNe.forEach(t),nyt.forEach(t),w9r=i(Ol),T(jE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),PDe=i(f),kc=n(f,"H2",{class:!0});var GOe=s(kc);DE=n(GOe,"A",{id:!0,class:!0,href:!0});var iyt=s(DE);cTe=n(iyt,"SPAN",{});var dyt=s(cTe);T(j9.$$.fragment,dyt),dyt.forEach(t),iyt.forEach(t),A9r=i(GOe),fTe=n(GOe,"SPAN",{});var cyt=s(fTe);L9r=r(cyt,"FlaxAutoModel"),cyt.forEach(t),GOe.forEach(t),BDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(D9.$$.fragment,Vl),y9r=i(Vl),Sc=n(Vl,"P",{});var moe=s(Sc);x9r=r(moe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=n(moe,"A",{href:!0});var fyt=s(dY);$9r=r(fyt,"from_pretrained()"),fyt.forEach(t),k9r=r(moe," class method or the "),cY=n(moe,"A",{href:!0});var myt=s(cY);S9r=r(myt,"from_config()"),myt.forEach(t),R9r=r(moe,` class
method.`),moe.forEach(t),P9r=i(Vl),G9=n(Vl,"P",{});var OOe=s(G9);B9r=r(OOe,"This class cannot be instantiated directly using "),mTe=n(OOe,"CODE",{});var gyt=s(mTe);I9r=r(gyt,"__init__()"),gyt.forEach(t),N9r=r(OOe," (throws an error)."),OOe.forEach(t),q9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var g6=s(Ot);T(O9.$$.fragment,g6),j9r=i(g6),gTe=n(g6,"P",{});var hyt=s(gTe);D9r=r(hyt,"Instantiates one of the base model classes of the library from a configuration."),hyt.forEach(t),G9r=i(g6),Rc=n(g6,"P",{});var goe=s(Rc);O9r=r(goe,`Note:
Loading a model from its configuration file does `),hTe=n(goe,"STRONG",{});var pyt=s(hTe);V9r=r(pyt,"not"),pyt.forEach(t),X9r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(goe,"A",{href:!0});var _yt=s(fY);z9r=r(_yt,"from_pretrained()"),_yt.forEach(t),W9r=r(goe," to load the model weights."),goe.forEach(t),Q9r=i(g6),T(GE.$$.fragment,g6),g6.forEach(t),H9r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(V9.$$.fragment,Xl),U9r=i(Xl),pTe=n(Xl,"P",{});var uyt=s(pTe);J9r=r(uyt,"Instantiate one of the base model classes of the library from a pretrained model."),uyt.forEach(t),Y9r=i(Xl),hn=n(Xl,"P",{});var h6=s(hn);K9r=r(h6,"The model class to instantiate is selected based on the "),_Te=n(h6,"CODE",{});var byt=s(_Te);Z9r=r(byt,"model_type"),byt.forEach(t),exr=r(h6,` property of the config object (either
passed as an argument or loaded from `),uTe=n(h6,"CODE",{});var vyt=s(uTe);oxr=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),rxr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(h6,"CODE",{});var Fyt=s(bTe);txr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),axr=r(h6,":"),h6.forEach(t),nxr=i(Xl),re=n(Xl,"UL",{});var ne=s(re);OE=n(ne,"LI",{});var rNe=s(OE);vTe=n(rNe,"STRONG",{});var Tyt=s(vTe);sxr=r(Tyt,"albert"),Tyt.forEach(t),lxr=r(rNe," \u2014 "),mY=n(rNe,"A",{href:!0});var Myt=s(mY);ixr=r(Myt,"FlaxAlbertModel"),Myt.forEach(t),dxr=r(rNe," (ALBERT model)"),rNe.forEach(t),cxr=i(ne),VE=n(ne,"LI",{});var tNe=s(VE);FTe=n(tNe,"STRONG",{});var Eyt=s(FTe);fxr=r(Eyt,"bart"),Eyt.forEach(t),mxr=r(tNe," \u2014 "),gY=n(tNe,"A",{href:!0});var Cyt=s(gY);gxr=r(Cyt,"FlaxBartModel"),Cyt.forEach(t),hxr=r(tNe," (BART model)"),tNe.forEach(t),pxr=i(ne),XE=n(ne,"LI",{});var aNe=s(XE);TTe=n(aNe,"STRONG",{});var wyt=s(TTe);_xr=r(wyt,"beit"),wyt.forEach(t),uxr=r(aNe," \u2014 "),hY=n(aNe,"A",{href:!0});var Ayt=s(hY);bxr=r(Ayt,"FlaxBeitModel"),Ayt.forEach(t),vxr=r(aNe," (BEiT model)"),aNe.forEach(t),Fxr=i(ne),zE=n(ne,"LI",{});var nNe=s(zE);MTe=n(nNe,"STRONG",{});var Lyt=s(MTe);Txr=r(Lyt,"bert"),Lyt.forEach(t),Mxr=r(nNe," \u2014 "),pY=n(nNe,"A",{href:!0});var yyt=s(pY);Exr=r(yyt,"FlaxBertModel"),yyt.forEach(t),Cxr=r(nNe," (BERT model)"),nNe.forEach(t),wxr=i(ne),WE=n(ne,"LI",{});var sNe=s(WE);ETe=n(sNe,"STRONG",{});var xyt=s(ETe);Axr=r(xyt,"big_bird"),xyt.forEach(t),Lxr=r(sNe," \u2014 "),_Y=n(sNe,"A",{href:!0});var $yt=s(_Y);yxr=r($yt,"FlaxBigBirdModel"),$yt.forEach(t),xxr=r(sNe," (BigBird model)"),sNe.forEach(t),$xr=i(ne),QE=n(ne,"LI",{});var lNe=s(QE);CTe=n(lNe,"STRONG",{});var kyt=s(CTe);kxr=r(kyt,"blenderbot"),kyt.forEach(t),Sxr=r(lNe," \u2014 "),uY=n(lNe,"A",{href:!0});var Syt=s(uY);Rxr=r(Syt,"FlaxBlenderbotModel"),Syt.forEach(t),Pxr=r(lNe," (Blenderbot model)"),lNe.forEach(t),Bxr=i(ne),HE=n(ne,"LI",{});var iNe=s(HE);wTe=n(iNe,"STRONG",{});var Ryt=s(wTe);Ixr=r(Ryt,"blenderbot-small"),Ryt.forEach(t),Nxr=r(iNe," \u2014 "),bY=n(iNe,"A",{href:!0});var Pyt=s(bY);qxr=r(Pyt,"FlaxBlenderbotSmallModel"),Pyt.forEach(t),jxr=r(iNe," (BlenderbotSmall model)"),iNe.forEach(t),Dxr=i(ne),UE=n(ne,"LI",{});var dNe=s(UE);ATe=n(dNe,"STRONG",{});var Byt=s(ATe);Gxr=r(Byt,"clip"),Byt.forEach(t),Oxr=r(dNe," \u2014 "),vY=n(dNe,"A",{href:!0});var Iyt=s(vY);Vxr=r(Iyt,"FlaxCLIPModel"),Iyt.forEach(t),Xxr=r(dNe," (CLIP model)"),dNe.forEach(t),zxr=i(ne),JE=n(ne,"LI",{});var cNe=s(JE);LTe=n(cNe,"STRONG",{});var Nyt=s(LTe);Wxr=r(Nyt,"distilbert"),Nyt.forEach(t),Qxr=r(cNe," \u2014 "),FY=n(cNe,"A",{href:!0});var qyt=s(FY);Hxr=r(qyt,"FlaxDistilBertModel"),qyt.forEach(t),Uxr=r(cNe," (DistilBERT model)"),cNe.forEach(t),Jxr=i(ne),YE=n(ne,"LI",{});var fNe=s(YE);yTe=n(fNe,"STRONG",{});var jyt=s(yTe);Yxr=r(jyt,"electra"),jyt.forEach(t),Kxr=r(fNe," \u2014 "),TY=n(fNe,"A",{href:!0});var Dyt=s(TY);Zxr=r(Dyt,"FlaxElectraModel"),Dyt.forEach(t),e$r=r(fNe," (ELECTRA model)"),fNe.forEach(t),o$r=i(ne),KE=n(ne,"LI",{});var mNe=s(KE);xTe=n(mNe,"STRONG",{});var Gyt=s(xTe);r$r=r(Gyt,"gpt2"),Gyt.forEach(t),t$r=r(mNe," \u2014 "),MY=n(mNe,"A",{href:!0});var Oyt=s(MY);a$r=r(Oyt,"FlaxGPT2Model"),Oyt.forEach(t),n$r=r(mNe," (OpenAI GPT-2 model)"),mNe.forEach(t),s$r=i(ne),ZE=n(ne,"LI",{});var gNe=s(ZE);$Te=n(gNe,"STRONG",{});var Vyt=s($Te);l$r=r(Vyt,"gpt_neo"),Vyt.forEach(t),i$r=r(gNe," \u2014 "),EY=n(gNe,"A",{href:!0});var Xyt=s(EY);d$r=r(Xyt,"FlaxGPTNeoModel"),Xyt.forEach(t),c$r=r(gNe," (GPT Neo model)"),gNe.forEach(t),f$r=i(ne),eC=n(ne,"LI",{});var hNe=s(eC);kTe=n(hNe,"STRONG",{});var zyt=s(kTe);m$r=r(zyt,"gptj"),zyt.forEach(t),g$r=r(hNe," \u2014 "),CY=n(hNe,"A",{href:!0});var Wyt=s(CY);h$r=r(Wyt,"FlaxGPTJModel"),Wyt.forEach(t),p$r=r(hNe," (GPT-J model)"),hNe.forEach(t),_$r=i(ne),oC=n(ne,"LI",{});var pNe=s(oC);STe=n(pNe,"STRONG",{});var Qyt=s(STe);u$r=r(Qyt,"marian"),Qyt.forEach(t),b$r=r(pNe," \u2014 "),wY=n(pNe,"A",{href:!0});var Hyt=s(wY);v$r=r(Hyt,"FlaxMarianModel"),Hyt.forEach(t),F$r=r(pNe," (Marian model)"),pNe.forEach(t),T$r=i(ne),rC=n(ne,"LI",{});var _Ne=s(rC);RTe=n(_Ne,"STRONG",{});var Uyt=s(RTe);M$r=r(Uyt,"mbart"),Uyt.forEach(t),E$r=r(_Ne," \u2014 "),AY=n(_Ne,"A",{href:!0});var Jyt=s(AY);C$r=r(Jyt,"FlaxMBartModel"),Jyt.forEach(t),w$r=r(_Ne," (mBART model)"),_Ne.forEach(t),A$r=i(ne),tC=n(ne,"LI",{});var uNe=s(tC);PTe=n(uNe,"STRONG",{});var Yyt=s(PTe);L$r=r(Yyt,"mt5"),Yyt.forEach(t),y$r=r(uNe," \u2014 "),LY=n(uNe,"A",{href:!0});var Kyt=s(LY);x$r=r(Kyt,"FlaxMT5Model"),Kyt.forEach(t),$$r=r(uNe," (MT5 model)"),uNe.forEach(t),k$r=i(ne),aC=n(ne,"LI",{});var bNe=s(aC);BTe=n(bNe,"STRONG",{});var Zyt=s(BTe);S$r=r(Zyt,"opt"),Zyt.forEach(t),R$r=r(bNe," \u2014 "),yY=n(bNe,"A",{href:!0});var e8t=s(yY);P$r=r(e8t,"FlaxOPTModel"),e8t.forEach(t),B$r=r(bNe," (OPT model)"),bNe.forEach(t),I$r=i(ne),nC=n(ne,"LI",{});var vNe=s(nC);ITe=n(vNe,"STRONG",{});var o8t=s(ITe);N$r=r(o8t,"pegasus"),o8t.forEach(t),q$r=r(vNe," \u2014 "),xY=n(vNe,"A",{href:!0});var r8t=s(xY);j$r=r(r8t,"FlaxPegasusModel"),r8t.forEach(t),D$r=r(vNe," (Pegasus model)"),vNe.forEach(t),G$r=i(ne),sC=n(ne,"LI",{});var FNe=s(sC);NTe=n(FNe,"STRONG",{});var t8t=s(NTe);O$r=r(t8t,"roberta"),t8t.forEach(t),V$r=r(FNe," \u2014 "),$Y=n(FNe,"A",{href:!0});var a8t=s($Y);X$r=r(a8t,"FlaxRobertaModel"),a8t.forEach(t),z$r=r(FNe," (RoBERTa model)"),FNe.forEach(t),W$r=i(ne),lC=n(ne,"LI",{});var TNe=s(lC);qTe=n(TNe,"STRONG",{});var n8t=s(qTe);Q$r=r(n8t,"roformer"),n8t.forEach(t),H$r=r(TNe," \u2014 "),kY=n(TNe,"A",{href:!0});var s8t=s(kY);U$r=r(s8t,"FlaxRoFormerModel"),s8t.forEach(t),J$r=r(TNe," (RoFormer model)"),TNe.forEach(t),Y$r=i(ne),iC=n(ne,"LI",{});var MNe=s(iC);jTe=n(MNe,"STRONG",{});var l8t=s(jTe);K$r=r(l8t,"t5"),l8t.forEach(t),Z$r=r(MNe," \u2014 "),SY=n(MNe,"A",{href:!0});var i8t=s(SY);ekr=r(i8t,"FlaxT5Model"),i8t.forEach(t),okr=r(MNe," (T5 model)"),MNe.forEach(t),rkr=i(ne),dC=n(ne,"LI",{});var ENe=s(dC);DTe=n(ENe,"STRONG",{});var d8t=s(DTe);tkr=r(d8t,"vision-text-dual-encoder"),d8t.forEach(t),akr=r(ENe," \u2014 "),RY=n(ENe,"A",{href:!0});var c8t=s(RY);nkr=r(c8t,"FlaxVisionTextDualEncoderModel"),c8t.forEach(t),skr=r(ENe," (VisionTextDualEncoder model)"),ENe.forEach(t),lkr=i(ne),cC=n(ne,"LI",{});var CNe=s(cC);GTe=n(CNe,"STRONG",{});var f8t=s(GTe);ikr=r(f8t,"vit"),f8t.forEach(t),dkr=r(CNe," \u2014 "),PY=n(CNe,"A",{href:!0});var m8t=s(PY);ckr=r(m8t,"FlaxViTModel"),m8t.forEach(t),fkr=r(CNe," (ViT model)"),CNe.forEach(t),mkr=i(ne),fC=n(ne,"LI",{});var wNe=s(fC);OTe=n(wNe,"STRONG",{});var g8t=s(OTe);gkr=r(g8t,"wav2vec2"),g8t.forEach(t),hkr=r(wNe," \u2014 "),BY=n(wNe,"A",{href:!0});var h8t=s(BY);pkr=r(h8t,"FlaxWav2Vec2Model"),h8t.forEach(t),_kr=r(wNe," (Wav2Vec2 model)"),wNe.forEach(t),ukr=i(ne),mC=n(ne,"LI",{});var ANe=s(mC);VTe=n(ANe,"STRONG",{});var p8t=s(VTe);bkr=r(p8t,"xglm"),p8t.forEach(t),vkr=r(ANe," \u2014 "),IY=n(ANe,"A",{href:!0});var _8t=s(IY);Fkr=r(_8t,"FlaxXGLMModel"),_8t.forEach(t),Tkr=r(ANe," (XGLM model)"),ANe.forEach(t),Mkr=i(ne),gC=n(ne,"LI",{});var LNe=s(gC);XTe=n(LNe,"STRONG",{});var u8t=s(XTe);Ekr=r(u8t,"xlm-roberta"),u8t.forEach(t),Ckr=r(LNe," \u2014 "),NY=n(LNe,"A",{href:!0});var b8t=s(NY);wkr=r(b8t,"FlaxXLMRobertaModel"),b8t.forEach(t),Akr=r(LNe," (XLM-RoBERTa model)"),LNe.forEach(t),ne.forEach(t),Lkr=i(Xl),T(hC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),IDe=i(f),Pc=n(f,"H2",{class:!0});var VOe=s(Pc);pC=n(VOe,"A",{id:!0,class:!0,href:!0});var v8t=s(pC);zTe=n(v8t,"SPAN",{});var F8t=s(zTe);T(X9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),ykr=i(VOe),WTe=n(VOe,"SPAN",{});var T8t=s(WTe);xkr=r(T8t,"FlaxAutoModelForCausalLM"),T8t.forEach(t),VOe.forEach(t),NDe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(z9.$$.fragment,zl),$kr=i(zl),Bc=n(zl,"P",{});var hoe=s(Bc);kkr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=n(hoe,"A",{href:!0});var M8t=s(qY);Skr=r(M8t,"from_pretrained()"),M8t.forEach(t),Rkr=r(hoe," class method or the "),jY=n(hoe,"A",{href:!0});var E8t=s(jY);Pkr=r(E8t,"from_config()"),E8t.forEach(t),Bkr=r(hoe,` class
method.`),hoe.forEach(t),Ikr=i(zl),W9=n(zl,"P",{});var XOe=s(W9);Nkr=r(XOe,"This class cannot be instantiated directly using "),QTe=n(XOe,"CODE",{});var C8t=s(QTe);qkr=r(C8t,"__init__()"),C8t.forEach(t),jkr=r(XOe," (throws an error)."),XOe.forEach(t),Dkr=i(zl),Vt=n(zl,"DIV",{class:!0});var p6=s(Vt);T(Q9.$$.fragment,p6),Gkr=i(p6),HTe=n(p6,"P",{});var w8t=s(HTe);Okr=r(w8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w8t.forEach(t),Vkr=i(p6),Ic=n(p6,"P",{});var poe=s(Ic);Xkr=r(poe,`Note:
Loading a model from its configuration file does `),UTe=n(poe,"STRONG",{});var A8t=s(UTe);zkr=r(A8t,"not"),A8t.forEach(t),Wkr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(poe,"A",{href:!0});var L8t=s(DY);Qkr=r(L8t,"from_pretrained()"),L8t.forEach(t),Hkr=r(poe," to load the model weights."),poe.forEach(t),Ukr=i(p6),T(_C.$$.fragment,p6),p6.forEach(t),Jkr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(H9.$$.fragment,Wl),Ykr=i(Wl),JTe=n(Wl,"P",{});var y8t=s(JTe);Kkr=r(y8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y8t.forEach(t),Zkr=i(Wl),pn=n(Wl,"P",{});var _6=s(pn);eSr=r(_6,"The model class to instantiate is selected based on the "),YTe=n(_6,"CODE",{});var x8t=s(YTe);oSr=r(x8t,"model_type"),x8t.forEach(t),rSr=r(_6,` property of the config object (either
passed as an argument or loaded from `),KTe=n(_6,"CODE",{});var $8t=s(KTe);tSr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),aSr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(_6,"CODE",{});var k8t=s(ZTe);nSr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),sSr=r(_6,":"),_6.forEach(t),lSr=i(Wl),ye=n(Wl,"UL",{});var Ie=s(ye);uC=n(Ie,"LI",{});var yNe=s(uC);e7e=n(yNe,"STRONG",{});var S8t=s(e7e);iSr=r(S8t,"bart"),S8t.forEach(t),dSr=r(yNe," \u2014 "),GY=n(yNe,"A",{href:!0});var R8t=s(GY);cSr=r(R8t,"FlaxBartForCausalLM"),R8t.forEach(t),fSr=r(yNe," (BART model)"),yNe.forEach(t),mSr=i(Ie),bC=n(Ie,"LI",{});var xNe=s(bC);o7e=n(xNe,"STRONG",{});var P8t=s(o7e);gSr=r(P8t,"bert"),P8t.forEach(t),hSr=r(xNe," \u2014 "),OY=n(xNe,"A",{href:!0});var B8t=s(OY);pSr=r(B8t,"FlaxBertForCausalLM"),B8t.forEach(t),_Sr=r(xNe," (BERT model)"),xNe.forEach(t),uSr=i(Ie),vC=n(Ie,"LI",{});var $Ne=s(vC);r7e=n($Ne,"STRONG",{});var I8t=s(r7e);bSr=r(I8t,"big_bird"),I8t.forEach(t),vSr=r($Ne," \u2014 "),VY=n($Ne,"A",{href:!0});var N8t=s(VY);FSr=r(N8t,"FlaxBigBirdForCausalLM"),N8t.forEach(t),TSr=r($Ne," (BigBird model)"),$Ne.forEach(t),MSr=i(Ie),FC=n(Ie,"LI",{});var kNe=s(FC);t7e=n(kNe,"STRONG",{});var q8t=s(t7e);ESr=r(q8t,"electra"),q8t.forEach(t),CSr=r(kNe," \u2014 "),XY=n(kNe,"A",{href:!0});var j8t=s(XY);wSr=r(j8t,"FlaxElectraForCausalLM"),j8t.forEach(t),ASr=r(kNe," (ELECTRA model)"),kNe.forEach(t),LSr=i(Ie),TC=n(Ie,"LI",{});var SNe=s(TC);a7e=n(SNe,"STRONG",{});var D8t=s(a7e);ySr=r(D8t,"gpt2"),D8t.forEach(t),xSr=r(SNe," \u2014 "),zY=n(SNe,"A",{href:!0});var G8t=s(zY);$Sr=r(G8t,"FlaxGPT2LMHeadModel"),G8t.forEach(t),kSr=r(SNe," (OpenAI GPT-2 model)"),SNe.forEach(t),SSr=i(Ie),MC=n(Ie,"LI",{});var RNe=s(MC);n7e=n(RNe,"STRONG",{});var O8t=s(n7e);RSr=r(O8t,"gpt_neo"),O8t.forEach(t),PSr=r(RNe," \u2014 "),WY=n(RNe,"A",{href:!0});var V8t=s(WY);BSr=r(V8t,"FlaxGPTNeoForCausalLM"),V8t.forEach(t),ISr=r(RNe," (GPT Neo model)"),RNe.forEach(t),NSr=i(Ie),EC=n(Ie,"LI",{});var PNe=s(EC);s7e=n(PNe,"STRONG",{});var X8t=s(s7e);qSr=r(X8t,"gptj"),X8t.forEach(t),jSr=r(PNe," \u2014 "),QY=n(PNe,"A",{href:!0});var z8t=s(QY);DSr=r(z8t,"FlaxGPTJForCausalLM"),z8t.forEach(t),GSr=r(PNe," (GPT-J model)"),PNe.forEach(t),OSr=i(Ie),CC=n(Ie,"LI",{});var BNe=s(CC);l7e=n(BNe,"STRONG",{});var W8t=s(l7e);VSr=r(W8t,"opt"),W8t.forEach(t),XSr=r(BNe," \u2014 "),HY=n(BNe,"A",{href:!0});var Q8t=s(HY);zSr=r(Q8t,"FlaxOPTForCausalLM"),Q8t.forEach(t),WSr=r(BNe," (OPT model)"),BNe.forEach(t),QSr=i(Ie),wC=n(Ie,"LI",{});var INe=s(wC);i7e=n(INe,"STRONG",{});var H8t=s(i7e);HSr=r(H8t,"roberta"),H8t.forEach(t),USr=r(INe," \u2014 "),UY=n(INe,"A",{href:!0});var U8t=s(UY);JSr=r(U8t,"FlaxRobertaForCausalLM"),U8t.forEach(t),YSr=r(INe," (RoBERTa model)"),INe.forEach(t),KSr=i(Ie),AC=n(Ie,"LI",{});var NNe=s(AC);d7e=n(NNe,"STRONG",{});var J8t=s(d7e);ZSr=r(J8t,"xglm"),J8t.forEach(t),eRr=r(NNe," \u2014 "),JY=n(NNe,"A",{href:!0});var Y8t=s(JY);oRr=r(Y8t,"FlaxXGLMForCausalLM"),Y8t.forEach(t),rRr=r(NNe," (XGLM model)"),NNe.forEach(t),Ie.forEach(t),tRr=i(Wl),T(LC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),qDe=i(f),Nc=n(f,"H2",{class:!0});var zOe=s(Nc);yC=n(zOe,"A",{id:!0,class:!0,href:!0});var K8t=s(yC);c7e=n(K8t,"SPAN",{});var Z8t=s(c7e);T(U9.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),aRr=i(zOe),f7e=n(zOe,"SPAN",{});var e9t=s(f7e);nRr=r(e9t,"FlaxAutoModelForPreTraining"),e9t.forEach(t),zOe.forEach(t),jDe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(J9.$$.fragment,Ql),sRr=i(Ql),qc=n(Ql,"P",{});var _oe=s(qc);lRr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=n(_oe,"A",{href:!0});var o9t=s(YY);iRr=r(o9t,"from_pretrained()"),o9t.forEach(t),dRr=r(_oe," class method or the "),KY=n(_oe,"A",{href:!0});var r9t=s(KY);cRr=r(r9t,"from_config()"),r9t.forEach(t),fRr=r(_oe,` class
method.`),_oe.forEach(t),mRr=i(Ql),Y9=n(Ql,"P",{});var WOe=s(Y9);gRr=r(WOe,"This class cannot be instantiated directly using "),m7e=n(WOe,"CODE",{});var t9t=s(m7e);hRr=r(t9t,"__init__()"),t9t.forEach(t),pRr=r(WOe," (throws an error)."),WOe.forEach(t),_Rr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var u6=s(Xt);T(K9.$$.fragment,u6),uRr=i(u6),g7e=n(u6,"P",{});var a9t=s(g7e);bRr=r(a9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a9t.forEach(t),vRr=i(u6),jc=n(u6,"P",{});var uoe=s(jc);FRr=r(uoe,`Note:
Loading a model from its configuration file does `),h7e=n(uoe,"STRONG",{});var n9t=s(h7e);TRr=r(n9t,"not"),n9t.forEach(t),MRr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(uoe,"A",{href:!0});var s9t=s(ZY);ERr=r(s9t,"from_pretrained()"),s9t.forEach(t),CRr=r(uoe," to load the model weights."),uoe.forEach(t),wRr=i(u6),T(xC.$$.fragment,u6),u6.forEach(t),ARr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(Z9.$$.fragment,Hl),LRr=i(Hl),p7e=n(Hl,"P",{});var l9t=s(p7e);yRr=r(l9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l9t.forEach(t),xRr=i(Hl),_n=n(Hl,"P",{});var b6=s(_n);$Rr=r(b6,"The model class to instantiate is selected based on the "),_7e=n(b6,"CODE",{});var i9t=s(_7e);kRr=r(i9t,"model_type"),i9t.forEach(t),SRr=r(b6,` property of the config object (either
passed as an argument or loaded from `),u7e=n(b6,"CODE",{});var d9t=s(u7e);RRr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),PRr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(b6,"CODE",{});var c9t=s(b7e);BRr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),IRr=r(b6,":"),b6.forEach(t),NRr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);$C=n(we,"LI",{});var qNe=s($C);v7e=n(qNe,"STRONG",{});var f9t=s(v7e);qRr=r(f9t,"albert"),f9t.forEach(t),jRr=r(qNe," \u2014 "),eK=n(qNe,"A",{href:!0});var m9t=s(eK);DRr=r(m9t,"FlaxAlbertForPreTraining"),m9t.forEach(t),GRr=r(qNe," (ALBERT model)"),qNe.forEach(t),ORr=i(we),kC=n(we,"LI",{});var jNe=s(kC);F7e=n(jNe,"STRONG",{});var g9t=s(F7e);VRr=r(g9t,"bart"),g9t.forEach(t),XRr=r(jNe," \u2014 "),oK=n(jNe,"A",{href:!0});var h9t=s(oK);zRr=r(h9t,"FlaxBartForConditionalGeneration"),h9t.forEach(t),WRr=r(jNe," (BART model)"),jNe.forEach(t),QRr=i(we),SC=n(we,"LI",{});var DNe=s(SC);T7e=n(DNe,"STRONG",{});var p9t=s(T7e);HRr=r(p9t,"bert"),p9t.forEach(t),URr=r(DNe," \u2014 "),rK=n(DNe,"A",{href:!0});var _9t=s(rK);JRr=r(_9t,"FlaxBertForPreTraining"),_9t.forEach(t),YRr=r(DNe," (BERT model)"),DNe.forEach(t),KRr=i(we),RC=n(we,"LI",{});var GNe=s(RC);M7e=n(GNe,"STRONG",{});var u9t=s(M7e);ZRr=r(u9t,"big_bird"),u9t.forEach(t),ePr=r(GNe," \u2014 "),tK=n(GNe,"A",{href:!0});var b9t=s(tK);oPr=r(b9t,"FlaxBigBirdForPreTraining"),b9t.forEach(t),rPr=r(GNe," (BigBird model)"),GNe.forEach(t),tPr=i(we),PC=n(we,"LI",{});var ONe=s(PC);E7e=n(ONe,"STRONG",{});var v9t=s(E7e);aPr=r(v9t,"electra"),v9t.forEach(t),nPr=r(ONe," \u2014 "),aK=n(ONe,"A",{href:!0});var F9t=s(aK);sPr=r(F9t,"FlaxElectraForPreTraining"),F9t.forEach(t),lPr=r(ONe," (ELECTRA model)"),ONe.forEach(t),iPr=i(we),BC=n(we,"LI",{});var VNe=s(BC);C7e=n(VNe,"STRONG",{});var T9t=s(C7e);dPr=r(T9t,"mbart"),T9t.forEach(t),cPr=r(VNe," \u2014 "),nK=n(VNe,"A",{href:!0});var M9t=s(nK);fPr=r(M9t,"FlaxMBartForConditionalGeneration"),M9t.forEach(t),mPr=r(VNe," (mBART model)"),VNe.forEach(t),gPr=i(we),IC=n(we,"LI",{});var XNe=s(IC);w7e=n(XNe,"STRONG",{});var E9t=s(w7e);hPr=r(E9t,"mt5"),E9t.forEach(t),pPr=r(XNe," \u2014 "),sK=n(XNe,"A",{href:!0});var C9t=s(sK);_Pr=r(C9t,"FlaxMT5ForConditionalGeneration"),C9t.forEach(t),uPr=r(XNe," (MT5 model)"),XNe.forEach(t),bPr=i(we),NC=n(we,"LI",{});var zNe=s(NC);A7e=n(zNe,"STRONG",{});var w9t=s(A7e);vPr=r(w9t,"roberta"),w9t.forEach(t),FPr=r(zNe," \u2014 "),lK=n(zNe,"A",{href:!0});var A9t=s(lK);TPr=r(A9t,"FlaxRobertaForMaskedLM"),A9t.forEach(t),MPr=r(zNe," (RoBERTa model)"),zNe.forEach(t),EPr=i(we),qC=n(we,"LI",{});var WNe=s(qC);L7e=n(WNe,"STRONG",{});var L9t=s(L7e);CPr=r(L9t,"roformer"),L9t.forEach(t),wPr=r(WNe," \u2014 "),iK=n(WNe,"A",{href:!0});var y9t=s(iK);APr=r(y9t,"FlaxRoFormerForMaskedLM"),y9t.forEach(t),LPr=r(WNe," (RoFormer model)"),WNe.forEach(t),yPr=i(we),jC=n(we,"LI",{});var QNe=s(jC);y7e=n(QNe,"STRONG",{});var x9t=s(y7e);xPr=r(x9t,"t5"),x9t.forEach(t),$Pr=r(QNe," \u2014 "),dK=n(QNe,"A",{href:!0});var $9t=s(dK);kPr=r($9t,"FlaxT5ForConditionalGeneration"),$9t.forEach(t),SPr=r(QNe," (T5 model)"),QNe.forEach(t),RPr=i(we),DC=n(we,"LI",{});var HNe=s(DC);x7e=n(HNe,"STRONG",{});var k9t=s(x7e);PPr=r(k9t,"wav2vec2"),k9t.forEach(t),BPr=r(HNe," \u2014 "),cK=n(HNe,"A",{href:!0});var S9t=s(cK);IPr=r(S9t,"FlaxWav2Vec2ForPreTraining"),S9t.forEach(t),NPr=r(HNe," (Wav2Vec2 model)"),HNe.forEach(t),qPr=i(we),GC=n(we,"LI",{});var UNe=s(GC);$7e=n(UNe,"STRONG",{});var R9t=s($7e);jPr=r(R9t,"xlm-roberta"),R9t.forEach(t),DPr=r(UNe," \u2014 "),fK=n(UNe,"A",{href:!0});var P9t=s(fK);GPr=r(P9t,"FlaxXLMRobertaForMaskedLM"),P9t.forEach(t),OPr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),we.forEach(t),VPr=i(Hl),T(OC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),DDe=i(f),Dc=n(f,"H2",{class:!0});var QOe=s(Dc);VC=n(QOe,"A",{id:!0,class:!0,href:!0});var B9t=s(VC);k7e=n(B9t,"SPAN",{});var I9t=s(k7e);T(ex.$$.fragment,I9t),I9t.forEach(t),B9t.forEach(t),XPr=i(QOe),S7e=n(QOe,"SPAN",{});var N9t=s(S7e);zPr=r(N9t,"FlaxAutoModelForMaskedLM"),N9t.forEach(t),QOe.forEach(t),GDe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(ox.$$.fragment,Ul),WPr=i(Ul),Gc=n(Ul,"P",{});var boe=s(Gc);QPr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=n(boe,"A",{href:!0});var q9t=s(mK);HPr=r(q9t,"from_pretrained()"),q9t.forEach(t),UPr=r(boe," class method or the "),gK=n(boe,"A",{href:!0});var j9t=s(gK);JPr=r(j9t,"from_config()"),j9t.forEach(t),YPr=r(boe,` class
method.`),boe.forEach(t),KPr=i(Ul),rx=n(Ul,"P",{});var HOe=s(rx);ZPr=r(HOe,"This class cannot be instantiated directly using "),R7e=n(HOe,"CODE",{});var D9t=s(R7e);eBr=r(D9t,"__init__()"),D9t.forEach(t),oBr=r(HOe," (throws an error)."),HOe.forEach(t),rBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var v6=s(zt);T(tx.$$.fragment,v6),tBr=i(v6),P7e=n(v6,"P",{});var G9t=s(P7e);aBr=r(G9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G9t.forEach(t),nBr=i(v6),Oc=n(v6,"P",{});var voe=s(Oc);sBr=r(voe,`Note:
Loading a model from its configuration file does `),B7e=n(voe,"STRONG",{});var O9t=s(B7e);lBr=r(O9t,"not"),O9t.forEach(t),iBr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(voe,"A",{href:!0});var V9t=s(hK);dBr=r(V9t,"from_pretrained()"),V9t.forEach(t),cBr=r(voe," to load the model weights."),voe.forEach(t),fBr=i(v6),T(XC.$$.fragment,v6),v6.forEach(t),mBr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(ax.$$.fragment,Jl),gBr=i(Jl),I7e=n(Jl,"P",{});var X9t=s(I7e);hBr=r(X9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X9t.forEach(t),pBr=i(Jl),un=n(Jl,"P",{});var F6=s(un);_Br=r(F6,"The model class to instantiate is selected based on the "),N7e=n(F6,"CODE",{});var z9t=s(N7e);uBr=r(z9t,"model_type"),z9t.forEach(t),bBr=r(F6,` property of the config object (either
passed as an argument or loaded from `),q7e=n(F6,"CODE",{});var W9t=s(q7e);vBr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),FBr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(F6,"CODE",{});var Q9t=s(j7e);TBr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),MBr=r(F6,":"),F6.forEach(t),EBr=i(Jl),xe=n(Jl,"UL",{});var Ne=s(xe);zC=n(Ne,"LI",{});var JNe=s(zC);D7e=n(JNe,"STRONG",{});var H9t=s(D7e);CBr=r(H9t,"albert"),H9t.forEach(t),wBr=r(JNe," \u2014 "),pK=n(JNe,"A",{href:!0});var U9t=s(pK);ABr=r(U9t,"FlaxAlbertForMaskedLM"),U9t.forEach(t),LBr=r(JNe," (ALBERT model)"),JNe.forEach(t),yBr=i(Ne),WC=n(Ne,"LI",{});var YNe=s(WC);G7e=n(YNe,"STRONG",{});var J9t=s(G7e);xBr=r(J9t,"bart"),J9t.forEach(t),$Br=r(YNe," \u2014 "),_K=n(YNe,"A",{href:!0});var Y9t=s(_K);kBr=r(Y9t,"FlaxBartForConditionalGeneration"),Y9t.forEach(t),SBr=r(YNe," (BART model)"),YNe.forEach(t),RBr=i(Ne),QC=n(Ne,"LI",{});var KNe=s(QC);O7e=n(KNe,"STRONG",{});var K9t=s(O7e);PBr=r(K9t,"bert"),K9t.forEach(t),BBr=r(KNe," \u2014 "),uK=n(KNe,"A",{href:!0});var Z9t=s(uK);IBr=r(Z9t,"FlaxBertForMaskedLM"),Z9t.forEach(t),NBr=r(KNe," (BERT model)"),KNe.forEach(t),qBr=i(Ne),HC=n(Ne,"LI",{});var ZNe=s(HC);V7e=n(ZNe,"STRONG",{});var ext=s(V7e);jBr=r(ext,"big_bird"),ext.forEach(t),DBr=r(ZNe," \u2014 "),bK=n(ZNe,"A",{href:!0});var oxt=s(bK);GBr=r(oxt,"FlaxBigBirdForMaskedLM"),oxt.forEach(t),OBr=r(ZNe," (BigBird model)"),ZNe.forEach(t),VBr=i(Ne),UC=n(Ne,"LI",{});var eqe=s(UC);X7e=n(eqe,"STRONG",{});var rxt=s(X7e);XBr=r(rxt,"distilbert"),rxt.forEach(t),zBr=r(eqe," \u2014 "),vK=n(eqe,"A",{href:!0});var txt=s(vK);WBr=r(txt,"FlaxDistilBertForMaskedLM"),txt.forEach(t),QBr=r(eqe," (DistilBERT model)"),eqe.forEach(t),HBr=i(Ne),JC=n(Ne,"LI",{});var oqe=s(JC);z7e=n(oqe,"STRONG",{});var axt=s(z7e);UBr=r(axt,"electra"),axt.forEach(t),JBr=r(oqe," \u2014 "),FK=n(oqe,"A",{href:!0});var nxt=s(FK);YBr=r(nxt,"FlaxElectraForMaskedLM"),nxt.forEach(t),KBr=r(oqe," (ELECTRA model)"),oqe.forEach(t),ZBr=i(Ne),YC=n(Ne,"LI",{});var rqe=s(YC);W7e=n(rqe,"STRONG",{});var sxt=s(W7e);eIr=r(sxt,"mbart"),sxt.forEach(t),oIr=r(rqe," \u2014 "),TK=n(rqe,"A",{href:!0});var lxt=s(TK);rIr=r(lxt,"FlaxMBartForConditionalGeneration"),lxt.forEach(t),tIr=r(rqe," (mBART model)"),rqe.forEach(t),aIr=i(Ne),KC=n(Ne,"LI",{});var tqe=s(KC);Q7e=n(tqe,"STRONG",{});var ixt=s(Q7e);nIr=r(ixt,"roberta"),ixt.forEach(t),sIr=r(tqe," \u2014 "),MK=n(tqe,"A",{href:!0});var dxt=s(MK);lIr=r(dxt,"FlaxRobertaForMaskedLM"),dxt.forEach(t),iIr=r(tqe," (RoBERTa model)"),tqe.forEach(t),dIr=i(Ne),ZC=n(Ne,"LI",{});var aqe=s(ZC);H7e=n(aqe,"STRONG",{});var cxt=s(H7e);cIr=r(cxt,"roformer"),cxt.forEach(t),fIr=r(aqe," \u2014 "),EK=n(aqe,"A",{href:!0});var fxt=s(EK);mIr=r(fxt,"FlaxRoFormerForMaskedLM"),fxt.forEach(t),gIr=r(aqe," (RoFormer model)"),aqe.forEach(t),hIr=i(Ne),e0=n(Ne,"LI",{});var nqe=s(e0);U7e=n(nqe,"STRONG",{});var mxt=s(U7e);pIr=r(mxt,"xlm-roberta"),mxt.forEach(t),_Ir=r(nqe," \u2014 "),CK=n(nqe,"A",{href:!0});var gxt=s(CK);uIr=r(gxt,"FlaxXLMRobertaForMaskedLM"),gxt.forEach(t),bIr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Ne.forEach(t),vIr=i(Jl),T(o0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),ODe=i(f),Vc=n(f,"H2",{class:!0});var UOe=s(Vc);r0=n(UOe,"A",{id:!0,class:!0,href:!0});var hxt=s(r0);J7e=n(hxt,"SPAN",{});var pxt=s(J7e);T(nx.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),FIr=i(UOe),Y7e=n(UOe,"SPAN",{});var _xt=s(Y7e);TIr=r(_xt,"FlaxAutoModelForSeq2SeqLM"),_xt.forEach(t),UOe.forEach(t),VDe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(sx.$$.fragment,Yl),MIr=i(Yl),Xc=n(Yl,"P",{});var Foe=s(Xc);EIr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=n(Foe,"A",{href:!0});var uxt=s(wK);CIr=r(uxt,"from_pretrained()"),uxt.forEach(t),wIr=r(Foe," class method or the "),AK=n(Foe,"A",{href:!0});var bxt=s(AK);AIr=r(bxt,"from_config()"),bxt.forEach(t),LIr=r(Foe,` class
method.`),Foe.forEach(t),yIr=i(Yl),lx=n(Yl,"P",{});var JOe=s(lx);xIr=r(JOe,"This class cannot be instantiated directly using "),K7e=n(JOe,"CODE",{});var vxt=s(K7e);$Ir=r(vxt,"__init__()"),vxt.forEach(t),kIr=r(JOe," (throws an error)."),JOe.forEach(t),SIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var T6=s(Wt);T(ix.$$.fragment,T6),RIr=i(T6),Z7e=n(T6,"P",{});var Fxt=s(Z7e);PIr=r(Fxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fxt.forEach(t),BIr=i(T6),zc=n(T6,"P",{});var Toe=s(zc);IIr=r(Toe,`Note:
Loading a model from its configuration file does `),eMe=n(Toe,"STRONG",{});var Txt=s(eMe);NIr=r(Txt,"not"),Txt.forEach(t),qIr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Toe,"A",{href:!0});var Mxt=s(LK);jIr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),DIr=r(Toe," to load the model weights."),Toe.forEach(t),GIr=i(T6),T(t0.$$.fragment,T6),T6.forEach(t),OIr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(dx.$$.fragment,Kl),VIr=i(Kl),oMe=n(Kl,"P",{});var Ext=s(oMe);XIr=r(Ext,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ext.forEach(t),zIr=i(Kl),bn=n(Kl,"P",{});var M6=s(bn);WIr=r(M6,"The model class to instantiate is selected based on the "),rMe=n(M6,"CODE",{});var Cxt=s(rMe);QIr=r(Cxt,"model_type"),Cxt.forEach(t),HIr=r(M6,` property of the config object (either
passed as an argument or loaded from `),tMe=n(M6,"CODE",{});var wxt=s(tMe);UIr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),JIr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(M6,"CODE",{});var Axt=s(aMe);YIr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),KIr=r(M6,":"),M6.forEach(t),ZIr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);a0=n(ze,"LI",{});var sqe=s(a0);nMe=n(sqe,"STRONG",{});var Lxt=s(nMe);eNr=r(Lxt,"bart"),Lxt.forEach(t),oNr=r(sqe," \u2014 "),yK=n(sqe,"A",{href:!0});var yxt=s(yK);rNr=r(yxt,"FlaxBartForConditionalGeneration"),yxt.forEach(t),tNr=r(sqe," (BART model)"),sqe.forEach(t),aNr=i(ze),n0=n(ze,"LI",{});var lqe=s(n0);sMe=n(lqe,"STRONG",{});var xxt=s(sMe);nNr=r(xxt,"blenderbot"),xxt.forEach(t),sNr=r(lqe," \u2014 "),xK=n(lqe,"A",{href:!0});var $xt=s(xK);lNr=r($xt,"FlaxBlenderbotForConditionalGeneration"),$xt.forEach(t),iNr=r(lqe," (Blenderbot model)"),lqe.forEach(t),dNr=i(ze),s0=n(ze,"LI",{});var iqe=s(s0);lMe=n(iqe,"STRONG",{});var kxt=s(lMe);cNr=r(kxt,"blenderbot-small"),kxt.forEach(t),fNr=r(iqe," \u2014 "),$K=n(iqe,"A",{href:!0});var Sxt=s($K);mNr=r(Sxt,"FlaxBlenderbotSmallForConditionalGeneration"),Sxt.forEach(t),gNr=r(iqe," (BlenderbotSmall model)"),iqe.forEach(t),hNr=i(ze),l0=n(ze,"LI",{});var dqe=s(l0);iMe=n(dqe,"STRONG",{});var Rxt=s(iMe);pNr=r(Rxt,"encoder-decoder"),Rxt.forEach(t),_Nr=r(dqe," \u2014 "),kK=n(dqe,"A",{href:!0});var Pxt=s(kK);uNr=r(Pxt,"FlaxEncoderDecoderModel"),Pxt.forEach(t),bNr=r(dqe," (Encoder decoder model)"),dqe.forEach(t),vNr=i(ze),i0=n(ze,"LI",{});var cqe=s(i0);dMe=n(cqe,"STRONG",{});var Bxt=s(dMe);FNr=r(Bxt,"marian"),Bxt.forEach(t),TNr=r(cqe," \u2014 "),SK=n(cqe,"A",{href:!0});var Ixt=s(SK);MNr=r(Ixt,"FlaxMarianMTModel"),Ixt.forEach(t),ENr=r(cqe," (Marian model)"),cqe.forEach(t),CNr=i(ze),d0=n(ze,"LI",{});var fqe=s(d0);cMe=n(fqe,"STRONG",{});var Nxt=s(cMe);wNr=r(Nxt,"mbart"),Nxt.forEach(t),ANr=r(fqe," \u2014 "),RK=n(fqe,"A",{href:!0});var qxt=s(RK);LNr=r(qxt,"FlaxMBartForConditionalGeneration"),qxt.forEach(t),yNr=r(fqe," (mBART model)"),fqe.forEach(t),xNr=i(ze),c0=n(ze,"LI",{});var mqe=s(c0);fMe=n(mqe,"STRONG",{});var jxt=s(fMe);$Nr=r(jxt,"mt5"),jxt.forEach(t),kNr=r(mqe," \u2014 "),PK=n(mqe,"A",{href:!0});var Dxt=s(PK);SNr=r(Dxt,"FlaxMT5ForConditionalGeneration"),Dxt.forEach(t),RNr=r(mqe," (MT5 model)"),mqe.forEach(t),PNr=i(ze),f0=n(ze,"LI",{});var gqe=s(f0);mMe=n(gqe,"STRONG",{});var Gxt=s(mMe);BNr=r(Gxt,"pegasus"),Gxt.forEach(t),INr=r(gqe," \u2014 "),BK=n(gqe,"A",{href:!0});var Oxt=s(BK);NNr=r(Oxt,"FlaxPegasusForConditionalGeneration"),Oxt.forEach(t),qNr=r(gqe," (Pegasus model)"),gqe.forEach(t),jNr=i(ze),m0=n(ze,"LI",{});var hqe=s(m0);gMe=n(hqe,"STRONG",{});var Vxt=s(gMe);DNr=r(Vxt,"t5"),Vxt.forEach(t),GNr=r(hqe," \u2014 "),IK=n(hqe,"A",{href:!0});var Xxt=s(IK);ONr=r(Xxt,"FlaxT5ForConditionalGeneration"),Xxt.forEach(t),VNr=r(hqe," (T5 model)"),hqe.forEach(t),ze.forEach(t),XNr=i(Kl),T(g0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),XDe=i(f),Wc=n(f,"H2",{class:!0});var YOe=s(Wc);h0=n(YOe,"A",{id:!0,class:!0,href:!0});var zxt=s(h0);hMe=n(zxt,"SPAN",{});var Wxt=s(hMe);T(cx.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),zNr=i(YOe),pMe=n(YOe,"SPAN",{});var Qxt=s(pMe);WNr=r(Qxt,"FlaxAutoModelForSequenceClassification"),Qxt.forEach(t),YOe.forEach(t),zDe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(fx.$$.fragment,Zl),QNr=i(Zl),Qc=n(Zl,"P",{});var Moe=s(Qc);HNr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=n(Moe,"A",{href:!0});var Hxt=s(NK);UNr=r(Hxt,"from_pretrained()"),Hxt.forEach(t),JNr=r(Moe," class method or the "),qK=n(Moe,"A",{href:!0});var Uxt=s(qK);YNr=r(Uxt,"from_config()"),Uxt.forEach(t),KNr=r(Moe,` class
method.`),Moe.forEach(t),ZNr=i(Zl),mx=n(Zl,"P",{});var KOe=s(mx);eqr=r(KOe,"This class cannot be instantiated directly using "),_Me=n(KOe,"CODE",{});var Jxt=s(_Me);oqr=r(Jxt,"__init__()"),Jxt.forEach(t),rqr=r(KOe," (throws an error)."),KOe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var E6=s(Qt);T(gx.$$.fragment,E6),aqr=i(E6),uMe=n(E6,"P",{});var Yxt=s(uMe);nqr=r(Yxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yxt.forEach(t),sqr=i(E6),Hc=n(E6,"P",{});var Eoe=s(Hc);lqr=r(Eoe,`Note:
Loading a model from its configuration file does `),bMe=n(Eoe,"STRONG",{});var Kxt=s(bMe);iqr=r(Kxt,"not"),Kxt.forEach(t),dqr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Eoe,"A",{href:!0});var Zxt=s(jK);cqr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),fqr=r(Eoe," to load the model weights."),Eoe.forEach(t),mqr=i(E6),T(p0.$$.fragment,E6),E6.forEach(t),gqr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(hx.$$.fragment,ei),hqr=i(ei),vMe=n(ei,"P",{});var e$t=s(vMe);pqr=r(e$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e$t.forEach(t),_qr=i(ei),vn=n(ei,"P",{});var C6=s(vn);uqr=r(C6,"The model class to instantiate is selected based on the "),FMe=n(C6,"CODE",{});var o$t=s(FMe);bqr=r(o$t,"model_type"),o$t.forEach(t),vqr=r(C6,` property of the config object (either
passed as an argument or loaded from `),TMe=n(C6,"CODE",{});var r$t=s(TMe);Fqr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),Tqr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(C6,"CODE",{});var t$t=s(MMe);Mqr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),Eqr=r(C6,":"),C6.forEach(t),Cqr=i(ei),$e=n(ei,"UL",{});var qe=s($e);_0=n(qe,"LI",{});var pqe=s(_0);EMe=n(pqe,"STRONG",{});var a$t=s(EMe);wqr=r(a$t,"albert"),a$t.forEach(t),Aqr=r(pqe," \u2014 "),DK=n(pqe,"A",{href:!0});var n$t=s(DK);Lqr=r(n$t,"FlaxAlbertForSequenceClassification"),n$t.forEach(t),yqr=r(pqe," (ALBERT model)"),pqe.forEach(t),xqr=i(qe),u0=n(qe,"LI",{});var _qe=s(u0);CMe=n(_qe,"STRONG",{});var s$t=s(CMe);$qr=r(s$t,"bart"),s$t.forEach(t),kqr=r(_qe," \u2014 "),GK=n(_qe,"A",{href:!0});var l$t=s(GK);Sqr=r(l$t,"FlaxBartForSequenceClassification"),l$t.forEach(t),Rqr=r(_qe," (BART model)"),_qe.forEach(t),Pqr=i(qe),b0=n(qe,"LI",{});var uqe=s(b0);wMe=n(uqe,"STRONG",{});var i$t=s(wMe);Bqr=r(i$t,"bert"),i$t.forEach(t),Iqr=r(uqe," \u2014 "),OK=n(uqe,"A",{href:!0});var d$t=s(OK);Nqr=r(d$t,"FlaxBertForSequenceClassification"),d$t.forEach(t),qqr=r(uqe," (BERT model)"),uqe.forEach(t),jqr=i(qe),v0=n(qe,"LI",{});var bqe=s(v0);AMe=n(bqe,"STRONG",{});var c$t=s(AMe);Dqr=r(c$t,"big_bird"),c$t.forEach(t),Gqr=r(bqe," \u2014 "),VK=n(bqe,"A",{href:!0});var f$t=s(VK);Oqr=r(f$t,"FlaxBigBirdForSequenceClassification"),f$t.forEach(t),Vqr=r(bqe," (BigBird model)"),bqe.forEach(t),Xqr=i(qe),F0=n(qe,"LI",{});var vqe=s(F0);LMe=n(vqe,"STRONG",{});var m$t=s(LMe);zqr=r(m$t,"distilbert"),m$t.forEach(t),Wqr=r(vqe," \u2014 "),XK=n(vqe,"A",{href:!0});var g$t=s(XK);Qqr=r(g$t,"FlaxDistilBertForSequenceClassification"),g$t.forEach(t),Hqr=r(vqe," (DistilBERT model)"),vqe.forEach(t),Uqr=i(qe),T0=n(qe,"LI",{});var Fqe=s(T0);yMe=n(Fqe,"STRONG",{});var h$t=s(yMe);Jqr=r(h$t,"electra"),h$t.forEach(t),Yqr=r(Fqe," \u2014 "),zK=n(Fqe,"A",{href:!0});var p$t=s(zK);Kqr=r(p$t,"FlaxElectraForSequenceClassification"),p$t.forEach(t),Zqr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),ejr=i(qe),M0=n(qe,"LI",{});var Tqe=s(M0);xMe=n(Tqe,"STRONG",{});var _$t=s(xMe);ojr=r(_$t,"mbart"),_$t.forEach(t),rjr=r(Tqe," \u2014 "),WK=n(Tqe,"A",{href:!0});var u$t=s(WK);tjr=r(u$t,"FlaxMBartForSequenceClassification"),u$t.forEach(t),ajr=r(Tqe," (mBART model)"),Tqe.forEach(t),njr=i(qe),E0=n(qe,"LI",{});var Mqe=s(E0);$Me=n(Mqe,"STRONG",{});var b$t=s($Me);sjr=r(b$t,"roberta"),b$t.forEach(t),ljr=r(Mqe," \u2014 "),QK=n(Mqe,"A",{href:!0});var v$t=s(QK);ijr=r(v$t,"FlaxRobertaForSequenceClassification"),v$t.forEach(t),djr=r(Mqe," (RoBERTa model)"),Mqe.forEach(t),cjr=i(qe),C0=n(qe,"LI",{});var Eqe=s(C0);kMe=n(Eqe,"STRONG",{});var F$t=s(kMe);fjr=r(F$t,"roformer"),F$t.forEach(t),mjr=r(Eqe," \u2014 "),HK=n(Eqe,"A",{href:!0});var T$t=s(HK);gjr=r(T$t,"FlaxRoFormerForSequenceClassification"),T$t.forEach(t),hjr=r(Eqe," (RoFormer model)"),Eqe.forEach(t),pjr=i(qe),w0=n(qe,"LI",{});var Cqe=s(w0);SMe=n(Cqe,"STRONG",{});var M$t=s(SMe);_jr=r(M$t,"xlm-roberta"),M$t.forEach(t),ujr=r(Cqe," \u2014 "),UK=n(Cqe,"A",{href:!0});var E$t=s(UK);bjr=r(E$t,"FlaxXLMRobertaForSequenceClassification"),E$t.forEach(t),vjr=r(Cqe," (XLM-RoBERTa model)"),Cqe.forEach(t),qe.forEach(t),Fjr=i(ei),T(A0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),WDe=i(f),Uc=n(f,"H2",{class:!0});var ZOe=s(Uc);L0=n(ZOe,"A",{id:!0,class:!0,href:!0});var C$t=s(L0);RMe=n(C$t,"SPAN",{});var w$t=s(RMe);T(px.$$.fragment,w$t),w$t.forEach(t),C$t.forEach(t),Tjr=i(ZOe),PMe=n(ZOe,"SPAN",{});var A$t=s(PMe);Mjr=r(A$t,"FlaxAutoModelForQuestionAnswering"),A$t.forEach(t),ZOe.forEach(t),QDe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(_x.$$.fragment,oi),Ejr=i(oi),Jc=n(oi,"P",{});var Coe=s(Jc);Cjr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=n(Coe,"A",{href:!0});var L$t=s(JK);wjr=r(L$t,"from_pretrained()"),L$t.forEach(t),Ajr=r(Coe," class method or the "),YK=n(Coe,"A",{href:!0});var y$t=s(YK);Ljr=r(y$t,"from_config()"),y$t.forEach(t),yjr=r(Coe,` class
method.`),Coe.forEach(t),xjr=i(oi),ux=n(oi,"P",{});var eVe=s(ux);$jr=r(eVe,"This class cannot be instantiated directly using "),BMe=n(eVe,"CODE",{});var x$t=s(BMe);kjr=r(x$t,"__init__()"),x$t.forEach(t),Sjr=r(eVe," (throws an error)."),eVe.forEach(t),Rjr=i(oi),Ht=n(oi,"DIV",{class:!0});var w6=s(Ht);T(bx.$$.fragment,w6),Pjr=i(w6),IMe=n(w6,"P",{});var $$t=s(IMe);Bjr=r($$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$$t.forEach(t),Ijr=i(w6),Yc=n(w6,"P",{});var woe=s(Yc);Njr=r(woe,`Note:
Loading a model from its configuration file does `),NMe=n(woe,"STRONG",{});var k$t=s(NMe);qjr=r(k$t,"not"),k$t.forEach(t),jjr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(woe,"A",{href:!0});var S$t=s(KK);Djr=r(S$t,"from_pretrained()"),S$t.forEach(t),Gjr=r(woe," to load the model weights."),woe.forEach(t),Ojr=i(w6),T(y0.$$.fragment,w6),w6.forEach(t),Vjr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(vx.$$.fragment,ri),Xjr=i(ri),qMe=n(ri,"P",{});var R$t=s(qMe);zjr=r(R$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R$t.forEach(t),Wjr=i(ri),Fn=n(ri,"P",{});var A6=s(Fn);Qjr=r(A6,"The model class to instantiate is selected based on the "),jMe=n(A6,"CODE",{});var P$t=s(jMe);Hjr=r(P$t,"model_type"),P$t.forEach(t),Ujr=r(A6,` property of the config object (either
passed as an argument or loaded from `),DMe=n(A6,"CODE",{});var B$t=s(DMe);Jjr=r(B$t,"pretrained_model_name_or_path"),B$t.forEach(t),Yjr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(A6,"CODE",{});var I$t=s(GMe);Kjr=r(I$t,"pretrained_model_name_or_path"),I$t.forEach(t),Zjr=r(A6,":"),A6.forEach(t),eDr=i(ri),ke=n(ri,"UL",{});var je=s(ke);x0=n(je,"LI",{});var wqe=s(x0);OMe=n(wqe,"STRONG",{});var N$t=s(OMe);oDr=r(N$t,"albert"),N$t.forEach(t),rDr=r(wqe," \u2014 "),ZK=n(wqe,"A",{href:!0});var q$t=s(ZK);tDr=r(q$t,"FlaxAlbertForQuestionAnswering"),q$t.forEach(t),aDr=r(wqe," (ALBERT model)"),wqe.forEach(t),nDr=i(je),$0=n(je,"LI",{});var Aqe=s($0);VMe=n(Aqe,"STRONG",{});var j$t=s(VMe);sDr=r(j$t,"bart"),j$t.forEach(t),lDr=r(Aqe," \u2014 "),eZ=n(Aqe,"A",{href:!0});var D$t=s(eZ);iDr=r(D$t,"FlaxBartForQuestionAnswering"),D$t.forEach(t),dDr=r(Aqe," (BART model)"),Aqe.forEach(t),cDr=i(je),k0=n(je,"LI",{});var Lqe=s(k0);XMe=n(Lqe,"STRONG",{});var G$t=s(XMe);fDr=r(G$t,"bert"),G$t.forEach(t),mDr=r(Lqe," \u2014 "),oZ=n(Lqe,"A",{href:!0});var O$t=s(oZ);gDr=r(O$t,"FlaxBertForQuestionAnswering"),O$t.forEach(t),hDr=r(Lqe," (BERT model)"),Lqe.forEach(t),pDr=i(je),S0=n(je,"LI",{});var yqe=s(S0);zMe=n(yqe,"STRONG",{});var V$t=s(zMe);_Dr=r(V$t,"big_bird"),V$t.forEach(t),uDr=r(yqe," \u2014 "),rZ=n(yqe,"A",{href:!0});var X$t=s(rZ);bDr=r(X$t,"FlaxBigBirdForQuestionAnswering"),X$t.forEach(t),vDr=r(yqe," (BigBird model)"),yqe.forEach(t),FDr=i(je),R0=n(je,"LI",{});var xqe=s(R0);WMe=n(xqe,"STRONG",{});var z$t=s(WMe);TDr=r(z$t,"distilbert"),z$t.forEach(t),MDr=r(xqe," \u2014 "),tZ=n(xqe,"A",{href:!0});var W$t=s(tZ);EDr=r(W$t,"FlaxDistilBertForQuestionAnswering"),W$t.forEach(t),CDr=r(xqe," (DistilBERT model)"),xqe.forEach(t),wDr=i(je),P0=n(je,"LI",{});var $qe=s(P0);QMe=n($qe,"STRONG",{});var Q$t=s(QMe);ADr=r(Q$t,"electra"),Q$t.forEach(t),LDr=r($qe," \u2014 "),aZ=n($qe,"A",{href:!0});var H$t=s(aZ);yDr=r(H$t,"FlaxElectraForQuestionAnswering"),H$t.forEach(t),xDr=r($qe," (ELECTRA model)"),$qe.forEach(t),$Dr=i(je),B0=n(je,"LI",{});var kqe=s(B0);HMe=n(kqe,"STRONG",{});var U$t=s(HMe);kDr=r(U$t,"mbart"),U$t.forEach(t),SDr=r(kqe," \u2014 "),nZ=n(kqe,"A",{href:!0});var J$t=s(nZ);RDr=r(J$t,"FlaxMBartForQuestionAnswering"),J$t.forEach(t),PDr=r(kqe," (mBART model)"),kqe.forEach(t),BDr=i(je),I0=n(je,"LI",{});var Sqe=s(I0);UMe=n(Sqe,"STRONG",{});var Y$t=s(UMe);IDr=r(Y$t,"roberta"),Y$t.forEach(t),NDr=r(Sqe," \u2014 "),sZ=n(Sqe,"A",{href:!0});var K$t=s(sZ);qDr=r(K$t,"FlaxRobertaForQuestionAnswering"),K$t.forEach(t),jDr=r(Sqe," (RoBERTa model)"),Sqe.forEach(t),DDr=i(je),N0=n(je,"LI",{});var Rqe=s(N0);JMe=n(Rqe,"STRONG",{});var Z$t=s(JMe);GDr=r(Z$t,"roformer"),Z$t.forEach(t),ODr=r(Rqe," \u2014 "),lZ=n(Rqe,"A",{href:!0});var ekt=s(lZ);VDr=r(ekt,"FlaxRoFormerForQuestionAnswering"),ekt.forEach(t),XDr=r(Rqe," (RoFormer model)"),Rqe.forEach(t),zDr=i(je),q0=n(je,"LI",{});var Pqe=s(q0);YMe=n(Pqe,"STRONG",{});var okt=s(YMe);WDr=r(okt,"xlm-roberta"),okt.forEach(t),QDr=r(Pqe," \u2014 "),iZ=n(Pqe,"A",{href:!0});var rkt=s(iZ);HDr=r(rkt,"FlaxXLMRobertaForQuestionAnswering"),rkt.forEach(t),UDr=r(Pqe," (XLM-RoBERTa model)"),Pqe.forEach(t),je.forEach(t),JDr=i(ri),T(j0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),HDe=i(f),Kc=n(f,"H2",{class:!0});var oVe=s(Kc);D0=n(oVe,"A",{id:!0,class:!0,href:!0});var tkt=s(D0);KMe=n(tkt,"SPAN",{});var akt=s(KMe);T(Fx.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),YDr=i(oVe),ZMe=n(oVe,"SPAN",{});var nkt=s(ZMe);KDr=r(nkt,"FlaxAutoModelForTokenClassification"),nkt.forEach(t),oVe.forEach(t),UDe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Tx.$$.fragment,ti),ZDr=i(ti),Zc=n(ti,"P",{});var Aoe=s(Zc);eGr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=n(Aoe,"A",{href:!0});var skt=s(dZ);oGr=r(skt,"from_pretrained()"),skt.forEach(t),rGr=r(Aoe," class method or the "),cZ=n(Aoe,"A",{href:!0});var lkt=s(cZ);tGr=r(lkt,"from_config()"),lkt.forEach(t),aGr=r(Aoe,` class
method.`),Aoe.forEach(t),nGr=i(ti),Mx=n(ti,"P",{});var rVe=s(Mx);sGr=r(rVe,"This class cannot be instantiated directly using "),eEe=n(rVe,"CODE",{});var ikt=s(eEe);lGr=r(ikt,"__init__()"),ikt.forEach(t),iGr=r(rVe," (throws an error)."),rVe.forEach(t),dGr=i(ti),Ut=n(ti,"DIV",{class:!0});var L6=s(Ut);T(Ex.$$.fragment,L6),cGr=i(L6),oEe=n(L6,"P",{});var dkt=s(oEe);fGr=r(dkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dkt.forEach(t),mGr=i(L6),ef=n(L6,"P",{});var Loe=s(ef);gGr=r(Loe,`Note:
Loading a model from its configuration file does `),rEe=n(Loe,"STRONG",{});var ckt=s(rEe);hGr=r(ckt,"not"),ckt.forEach(t),pGr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Loe,"A",{href:!0});var fkt=s(fZ);_Gr=r(fkt,"from_pretrained()"),fkt.forEach(t),uGr=r(Loe," to load the model weights."),Loe.forEach(t),bGr=i(L6),T(G0.$$.fragment,L6),L6.forEach(t),vGr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Cx.$$.fragment,ai),FGr=i(ai),tEe=n(ai,"P",{});var mkt=s(tEe);TGr=r(mkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mkt.forEach(t),MGr=i(ai),Tn=n(ai,"P",{});var y6=s(Tn);EGr=r(y6,"The model class to instantiate is selected based on the "),aEe=n(y6,"CODE",{});var gkt=s(aEe);CGr=r(gkt,"model_type"),gkt.forEach(t),wGr=r(y6,` property of the config object (either
passed as an argument or loaded from `),nEe=n(y6,"CODE",{});var hkt=s(nEe);AGr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),LGr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(y6,"CODE",{});var pkt=s(sEe);yGr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),xGr=r(y6,":"),y6.forEach(t),$Gr=i(ai),Ge=n(ai,"UL",{});var Fo=s(Ge);O0=n(Fo,"LI",{});var Bqe=s(O0);lEe=n(Bqe,"STRONG",{});var _kt=s(lEe);kGr=r(_kt,"albert"),_kt.forEach(t),SGr=r(Bqe," \u2014 "),mZ=n(Bqe,"A",{href:!0});var ukt=s(mZ);RGr=r(ukt,"FlaxAlbertForTokenClassification"),ukt.forEach(t),PGr=r(Bqe," (ALBERT model)"),Bqe.forEach(t),BGr=i(Fo),V0=n(Fo,"LI",{});var Iqe=s(V0);iEe=n(Iqe,"STRONG",{});var bkt=s(iEe);IGr=r(bkt,"bert"),bkt.forEach(t),NGr=r(Iqe," \u2014 "),gZ=n(Iqe,"A",{href:!0});var vkt=s(gZ);qGr=r(vkt,"FlaxBertForTokenClassification"),vkt.forEach(t),jGr=r(Iqe," (BERT model)"),Iqe.forEach(t),DGr=i(Fo),X0=n(Fo,"LI",{});var Nqe=s(X0);dEe=n(Nqe,"STRONG",{});var Fkt=s(dEe);GGr=r(Fkt,"big_bird"),Fkt.forEach(t),OGr=r(Nqe," \u2014 "),hZ=n(Nqe,"A",{href:!0});var Tkt=s(hZ);VGr=r(Tkt,"FlaxBigBirdForTokenClassification"),Tkt.forEach(t),XGr=r(Nqe," (BigBird model)"),Nqe.forEach(t),zGr=i(Fo),z0=n(Fo,"LI",{});var qqe=s(z0);cEe=n(qqe,"STRONG",{});var Mkt=s(cEe);WGr=r(Mkt,"distilbert"),Mkt.forEach(t),QGr=r(qqe," \u2014 "),pZ=n(qqe,"A",{href:!0});var Ekt=s(pZ);HGr=r(Ekt,"FlaxDistilBertForTokenClassification"),Ekt.forEach(t),UGr=r(qqe," (DistilBERT model)"),qqe.forEach(t),JGr=i(Fo),W0=n(Fo,"LI",{});var jqe=s(W0);fEe=n(jqe,"STRONG",{});var Ckt=s(fEe);YGr=r(Ckt,"electra"),Ckt.forEach(t),KGr=r(jqe," \u2014 "),_Z=n(jqe,"A",{href:!0});var wkt=s(_Z);ZGr=r(wkt,"FlaxElectraForTokenClassification"),wkt.forEach(t),eOr=r(jqe," (ELECTRA model)"),jqe.forEach(t),oOr=i(Fo),Q0=n(Fo,"LI",{});var Dqe=s(Q0);mEe=n(Dqe,"STRONG",{});var Akt=s(mEe);rOr=r(Akt,"roberta"),Akt.forEach(t),tOr=r(Dqe," \u2014 "),uZ=n(Dqe,"A",{href:!0});var Lkt=s(uZ);aOr=r(Lkt,"FlaxRobertaForTokenClassification"),Lkt.forEach(t),nOr=r(Dqe," (RoBERTa model)"),Dqe.forEach(t),sOr=i(Fo),H0=n(Fo,"LI",{});var Gqe=s(H0);gEe=n(Gqe,"STRONG",{});var ykt=s(gEe);lOr=r(ykt,"roformer"),ykt.forEach(t),iOr=r(Gqe," \u2014 "),bZ=n(Gqe,"A",{href:!0});var xkt=s(bZ);dOr=r(xkt,"FlaxRoFormerForTokenClassification"),xkt.forEach(t),cOr=r(Gqe," (RoFormer model)"),Gqe.forEach(t),fOr=i(Fo),U0=n(Fo,"LI",{});var Oqe=s(U0);hEe=n(Oqe,"STRONG",{});var $kt=s(hEe);mOr=r($kt,"xlm-roberta"),$kt.forEach(t),gOr=r(Oqe," \u2014 "),vZ=n(Oqe,"A",{href:!0});var kkt=s(vZ);hOr=r(kkt,"FlaxXLMRobertaForTokenClassification"),kkt.forEach(t),pOr=r(Oqe," (XLM-RoBERTa model)"),Oqe.forEach(t),Fo.forEach(t),_Or=i(ai),T(J0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),JDe=i(f),of=n(f,"H2",{class:!0});var tVe=s(of);Y0=n(tVe,"A",{id:!0,class:!0,href:!0});var Skt=s(Y0);pEe=n(Skt,"SPAN",{});var Rkt=s(pEe);T(wx.$$.fragment,Rkt),Rkt.forEach(t),Skt.forEach(t),uOr=i(tVe),_Ee=n(tVe,"SPAN",{});var Pkt=s(_Ee);bOr=r(Pkt,"FlaxAutoModelForMultipleChoice"),Pkt.forEach(t),tVe.forEach(t),YDe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Ax.$$.fragment,ni),vOr=i(ni),rf=n(ni,"P",{});var yoe=s(rf);FOr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=n(yoe,"A",{href:!0});var Bkt=s(FZ);TOr=r(Bkt,"from_pretrained()"),Bkt.forEach(t),MOr=r(yoe," class method or the "),TZ=n(yoe,"A",{href:!0});var Ikt=s(TZ);EOr=r(Ikt,"from_config()"),Ikt.forEach(t),COr=r(yoe,` class
method.`),yoe.forEach(t),wOr=i(ni),Lx=n(ni,"P",{});var aVe=s(Lx);AOr=r(aVe,"This class cannot be instantiated directly using "),uEe=n(aVe,"CODE",{});var Nkt=s(uEe);LOr=r(Nkt,"__init__()"),Nkt.forEach(t),yOr=r(aVe," (throws an error)."),aVe.forEach(t),xOr=i(ni),Jt=n(ni,"DIV",{class:!0});var x6=s(Jt);T(yx.$$.fragment,x6),$Or=i(x6),bEe=n(x6,"P",{});var qkt=s(bEe);kOr=r(qkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qkt.forEach(t),SOr=i(x6),tf=n(x6,"P",{});var xoe=s(tf);ROr=r(xoe,`Note:
Loading a model from its configuration file does `),vEe=n(xoe,"STRONG",{});var jkt=s(vEe);POr=r(jkt,"not"),jkt.forEach(t),BOr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(xoe,"A",{href:!0});var Dkt=s(MZ);IOr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),NOr=r(xoe," to load the model weights."),xoe.forEach(t),qOr=i(x6),T(K0.$$.fragment,x6),x6.forEach(t),jOr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(xx.$$.fragment,si),DOr=i(si),FEe=n(si,"P",{});var Gkt=s(FEe);GOr=r(Gkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gkt.forEach(t),OOr=i(si),Mn=n(si,"P",{});var $6=s(Mn);VOr=r($6,"The model class to instantiate is selected based on the "),TEe=n($6,"CODE",{});var Okt=s(TEe);XOr=r(Okt,"model_type"),Okt.forEach(t),zOr=r($6,` property of the config object (either
passed as an argument or loaded from `),MEe=n($6,"CODE",{});var Vkt=s(MEe);WOr=r(Vkt,"pretrained_model_name_or_path"),Vkt.forEach(t),QOr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n($6,"CODE",{});var Xkt=s(EEe);HOr=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),UOr=r($6,":"),$6.forEach(t),JOr=i(si),Oe=n(si,"UL",{});var To=s(Oe);Z0=n(To,"LI",{});var Vqe=s(Z0);CEe=n(Vqe,"STRONG",{});var zkt=s(CEe);YOr=r(zkt,"albert"),zkt.forEach(t),KOr=r(Vqe," \u2014 "),EZ=n(Vqe,"A",{href:!0});var Wkt=s(EZ);ZOr=r(Wkt,"FlaxAlbertForMultipleChoice"),Wkt.forEach(t),eVr=r(Vqe," (ALBERT model)"),Vqe.forEach(t),oVr=i(To),ew=n(To,"LI",{});var Xqe=s(ew);wEe=n(Xqe,"STRONG",{});var Qkt=s(wEe);rVr=r(Qkt,"bert"),Qkt.forEach(t),tVr=r(Xqe," \u2014 "),CZ=n(Xqe,"A",{href:!0});var Hkt=s(CZ);aVr=r(Hkt,"FlaxBertForMultipleChoice"),Hkt.forEach(t),nVr=r(Xqe," (BERT model)"),Xqe.forEach(t),sVr=i(To),ow=n(To,"LI",{});var zqe=s(ow);AEe=n(zqe,"STRONG",{});var Ukt=s(AEe);lVr=r(Ukt,"big_bird"),Ukt.forEach(t),iVr=r(zqe," \u2014 "),wZ=n(zqe,"A",{href:!0});var Jkt=s(wZ);dVr=r(Jkt,"FlaxBigBirdForMultipleChoice"),Jkt.forEach(t),cVr=r(zqe," (BigBird model)"),zqe.forEach(t),fVr=i(To),rw=n(To,"LI",{});var Wqe=s(rw);LEe=n(Wqe,"STRONG",{});var Ykt=s(LEe);mVr=r(Ykt,"distilbert"),Ykt.forEach(t),gVr=r(Wqe," \u2014 "),AZ=n(Wqe,"A",{href:!0});var Kkt=s(AZ);hVr=r(Kkt,"FlaxDistilBertForMultipleChoice"),Kkt.forEach(t),pVr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),_Vr=i(To),tw=n(To,"LI",{});var Qqe=s(tw);yEe=n(Qqe,"STRONG",{});var Zkt=s(yEe);uVr=r(Zkt,"electra"),Zkt.forEach(t),bVr=r(Qqe," \u2014 "),LZ=n(Qqe,"A",{href:!0});var eSt=s(LZ);vVr=r(eSt,"FlaxElectraForMultipleChoice"),eSt.forEach(t),FVr=r(Qqe," (ELECTRA model)"),Qqe.forEach(t),TVr=i(To),aw=n(To,"LI",{});var Hqe=s(aw);xEe=n(Hqe,"STRONG",{});var oSt=s(xEe);MVr=r(oSt,"roberta"),oSt.forEach(t),EVr=r(Hqe," \u2014 "),yZ=n(Hqe,"A",{href:!0});var rSt=s(yZ);CVr=r(rSt,"FlaxRobertaForMultipleChoice"),rSt.forEach(t),wVr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),AVr=i(To),nw=n(To,"LI",{});var Uqe=s(nw);$Ee=n(Uqe,"STRONG",{});var tSt=s($Ee);LVr=r(tSt,"roformer"),tSt.forEach(t),yVr=r(Uqe," \u2014 "),xZ=n(Uqe,"A",{href:!0});var aSt=s(xZ);xVr=r(aSt,"FlaxRoFormerForMultipleChoice"),aSt.forEach(t),$Vr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),kVr=i(To),sw=n(To,"LI",{});var Jqe=s(sw);kEe=n(Jqe,"STRONG",{});var nSt=s(kEe);SVr=r(nSt,"xlm-roberta"),nSt.forEach(t),RVr=r(Jqe," \u2014 "),$Z=n(Jqe,"A",{href:!0});var sSt=s($Z);PVr=r(sSt,"FlaxXLMRobertaForMultipleChoice"),sSt.forEach(t),BVr=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),To.forEach(t),IVr=i(si),T(lw.$$.fragment,si),si.forEach(t),ni.forEach(t),KDe=i(f),af=n(f,"H2",{class:!0});var nVe=s(af);iw=n(nVe,"A",{id:!0,class:!0,href:!0});var lSt=s(iw);SEe=n(lSt,"SPAN",{});var iSt=s(SEe);T($x.$$.fragment,iSt),iSt.forEach(t),lSt.forEach(t),NVr=i(nVe),REe=n(nVe,"SPAN",{});var dSt=s(REe);qVr=r(dSt,"FlaxAutoModelForNextSentencePrediction"),dSt.forEach(t),nVe.forEach(t),ZDe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(kx.$$.fragment,li),jVr=i(li),nf=n(li,"P",{});var $oe=s(nf);DVr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=n($oe,"A",{href:!0});var cSt=s(kZ);GVr=r(cSt,"from_pretrained()"),cSt.forEach(t),OVr=r($oe," class method or the "),SZ=n($oe,"A",{href:!0});var fSt=s(SZ);VVr=r(fSt,"from_config()"),fSt.forEach(t),XVr=r($oe,` class
method.`),$oe.forEach(t),zVr=i(li),Sx=n(li,"P",{});var sVe=s(Sx);WVr=r(sVe,"This class cannot be instantiated directly using "),PEe=n(sVe,"CODE",{});var mSt=s(PEe);QVr=r(mSt,"__init__()"),mSt.forEach(t),HVr=r(sVe," (throws an error)."),sVe.forEach(t),UVr=i(li),Yt=n(li,"DIV",{class:!0});var k6=s(Yt);T(Rx.$$.fragment,k6),JVr=i(k6),BEe=n(k6,"P",{});var gSt=s(BEe);YVr=r(gSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gSt.forEach(t),KVr=i(k6),sf=n(k6,"P",{});var koe=s(sf);ZVr=r(koe,`Note:
Loading a model from its configuration file does `),IEe=n(koe,"STRONG",{});var hSt=s(IEe);eXr=r(hSt,"not"),hSt.forEach(t),oXr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(koe,"A",{href:!0});var pSt=s(RZ);rXr=r(pSt,"from_pretrained()"),pSt.forEach(t),tXr=r(koe," to load the model weights."),koe.forEach(t),aXr=i(k6),T(dw.$$.fragment,k6),k6.forEach(t),nXr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Px.$$.fragment,ii),sXr=i(ii),NEe=n(ii,"P",{});var _St=s(NEe);lXr=r(_St,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_St.forEach(t),iXr=i(ii),En=n(ii,"P",{});var S6=s(En);dXr=r(S6,"The model class to instantiate is selected based on the "),qEe=n(S6,"CODE",{});var uSt=s(qEe);cXr=r(uSt,"model_type"),uSt.forEach(t),fXr=r(S6,` property of the config object (either
passed as an argument or loaded from `),jEe=n(S6,"CODE",{});var bSt=s(jEe);mXr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),gXr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(S6,"CODE",{});var vSt=s(DEe);hXr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),pXr=r(S6,":"),S6.forEach(t),_Xr=i(ii),GEe=n(ii,"UL",{});var FSt=s(GEe);cw=n(FSt,"LI",{});var Yqe=s(cw);OEe=n(Yqe,"STRONG",{});var TSt=s(OEe);uXr=r(TSt,"bert"),TSt.forEach(t),bXr=r(Yqe," \u2014 "),PZ=n(Yqe,"A",{href:!0});var MSt=s(PZ);vXr=r(MSt,"FlaxBertForNextSentencePrediction"),MSt.forEach(t),FXr=r(Yqe," (BERT model)"),Yqe.forEach(t),FSt.forEach(t),TXr=i(ii),T(fw.$$.fragment,ii),ii.forEach(t),li.forEach(t),eGe=i(f),lf=n(f,"H2",{class:!0});var lVe=s(lf);mw=n(lVe,"A",{id:!0,class:!0,href:!0});var ESt=s(mw);VEe=n(ESt,"SPAN",{});var CSt=s(VEe);T(Bx.$$.fragment,CSt),CSt.forEach(t),ESt.forEach(t),MXr=i(lVe),XEe=n(lVe,"SPAN",{});var wSt=s(XEe);EXr=r(wSt,"FlaxAutoModelForImageClassification"),wSt.forEach(t),lVe.forEach(t),oGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Ix.$$.fragment,di),CXr=i(di),df=n(di,"P",{});var Soe=s(df);wXr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=n(Soe,"A",{href:!0});var ASt=s(BZ);AXr=r(ASt,"from_pretrained()"),ASt.forEach(t),LXr=r(Soe," class method or the "),IZ=n(Soe,"A",{href:!0});var LSt=s(IZ);yXr=r(LSt,"from_config()"),LSt.forEach(t),xXr=r(Soe,` class
method.`),Soe.forEach(t),$Xr=i(di),Nx=n(di,"P",{});var iVe=s(Nx);kXr=r(iVe,"This class cannot be instantiated directly using "),zEe=n(iVe,"CODE",{});var ySt=s(zEe);SXr=r(ySt,"__init__()"),ySt.forEach(t),RXr=r(iVe," (throws an error)."),iVe.forEach(t),PXr=i(di),Kt=n(di,"DIV",{class:!0});var R6=s(Kt);T(qx.$$.fragment,R6),BXr=i(R6),WEe=n(R6,"P",{});var xSt=s(WEe);IXr=r(xSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xSt.forEach(t),NXr=i(R6),cf=n(R6,"P",{});var Roe=s(cf);qXr=r(Roe,`Note:
Loading a model from its configuration file does `),QEe=n(Roe,"STRONG",{});var $St=s(QEe);jXr=r($St,"not"),$St.forEach(t),DXr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(Roe,"A",{href:!0});var kSt=s(NZ);GXr=r(kSt,"from_pretrained()"),kSt.forEach(t),OXr=r(Roe," to load the model weights."),Roe.forEach(t),VXr=i(R6),T(gw.$$.fragment,R6),R6.forEach(t),XXr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(jx.$$.fragment,ci),zXr=i(ci),HEe=n(ci,"P",{});var SSt=s(HEe);WXr=r(SSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SSt.forEach(t),QXr=i(ci),Cn=n(ci,"P",{});var P6=s(Cn);HXr=r(P6,"The model class to instantiate is selected based on the "),UEe=n(P6,"CODE",{});var RSt=s(UEe);UXr=r(RSt,"model_type"),RSt.forEach(t),JXr=r(P6,` property of the config object (either
passed as an argument or loaded from `),JEe=n(P6,"CODE",{});var PSt=s(JEe);YXr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),KXr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(P6,"CODE",{});var BSt=s(YEe);ZXr=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),ezr=r(P6,":"),P6.forEach(t),ozr=i(ci),Dx=n(ci,"UL",{});var dVe=s(Dx);hw=n(dVe,"LI",{});var Kqe=s(hw);KEe=n(Kqe,"STRONG",{});var ISt=s(KEe);rzr=r(ISt,"beit"),ISt.forEach(t),tzr=r(Kqe," \u2014 "),qZ=n(Kqe,"A",{href:!0});var NSt=s(qZ);azr=r(NSt,"FlaxBeitForImageClassification"),NSt.forEach(t),nzr=r(Kqe," (BEiT model)"),Kqe.forEach(t),szr=i(dVe),pw=n(dVe,"LI",{});var Zqe=s(pw);ZEe=n(Zqe,"STRONG",{});var qSt=s(ZEe);lzr=r(qSt,"vit"),qSt.forEach(t),izr=r(Zqe," \u2014 "),jZ=n(Zqe,"A",{href:!0});var jSt=s(jZ);dzr=r(jSt,"FlaxViTForImageClassification"),jSt.forEach(t),czr=r(Zqe," (ViT model)"),Zqe.forEach(t),dVe.forEach(t),fzr=i(ci),T(_w.$$.fragment,ci),ci.forEach(t),di.forEach(t),rGe=i(f),ff=n(f,"H2",{class:!0});var cVe=s(ff);uw=n(cVe,"A",{id:!0,class:!0,href:!0});var DSt=s(uw);eCe=n(DSt,"SPAN",{});var GSt=s(eCe);T(Gx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),mzr=i(cVe),oCe=n(cVe,"SPAN",{});var OSt=s(oCe);gzr=r(OSt,"FlaxAutoModelForVision2Seq"),OSt.forEach(t),cVe.forEach(t),tGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Ox.$$.fragment,fi),hzr=i(fi),mf=n(fi,"P",{});var Poe=s(mf);pzr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(Poe,"A",{href:!0});var VSt=s(DZ);_zr=r(VSt,"from_pretrained()"),VSt.forEach(t),uzr=r(Poe," class method or the "),GZ=n(Poe,"A",{href:!0});var XSt=s(GZ);bzr=r(XSt,"from_config()"),XSt.forEach(t),vzr=r(Poe,` class
method.`),Poe.forEach(t),Fzr=i(fi),Vx=n(fi,"P",{});var fVe=s(Vx);Tzr=r(fVe,"This class cannot be instantiated directly using "),rCe=n(fVe,"CODE",{});var zSt=s(rCe);Mzr=r(zSt,"__init__()"),zSt.forEach(t),Ezr=r(fVe," (throws an error)."),fVe.forEach(t),Czr=i(fi),Zt=n(fi,"DIV",{class:!0});var B6=s(Zt);T(Xx.$$.fragment,B6),wzr=i(B6),tCe=n(B6,"P",{});var WSt=s(tCe);Azr=r(WSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WSt.forEach(t),Lzr=i(B6),gf=n(B6,"P",{});var Boe=s(gf);yzr=r(Boe,`Note:
Loading a model from its configuration file does `),aCe=n(Boe,"STRONG",{});var QSt=s(aCe);xzr=r(QSt,"not"),QSt.forEach(t),$zr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Boe,"A",{href:!0});var HSt=s(OZ);kzr=r(HSt,"from_pretrained()"),HSt.forEach(t),Szr=r(Boe," to load the model weights."),Boe.forEach(t),Rzr=i(B6),T(bw.$$.fragment,B6),B6.forEach(t),Pzr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(zx.$$.fragment,mi),Bzr=i(mi),nCe=n(mi,"P",{});var USt=s(nCe);Izr=r(USt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),USt.forEach(t),Nzr=i(mi),wn=n(mi,"P",{});var I6=s(wn);qzr=r(I6,"The model class to instantiate is selected based on the "),sCe=n(I6,"CODE",{});var JSt=s(sCe);jzr=r(JSt,"model_type"),JSt.forEach(t),Dzr=r(I6,` property of the config object (either
passed as an argument or loaded from `),lCe=n(I6,"CODE",{});var YSt=s(lCe);Gzr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),Ozr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=n(I6,"CODE",{});var KSt=s(iCe);Vzr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),Xzr=r(I6,":"),I6.forEach(t),zzr=i(mi),dCe=n(mi,"UL",{});var ZSt=s(dCe);vw=n(ZSt,"LI",{});var eje=s(vw);cCe=n(eje,"STRONG",{});var eRt=s(cCe);Wzr=r(eRt,"vision-encoder-decoder"),eRt.forEach(t),Qzr=r(eje," \u2014 "),VZ=n(eje,"A",{href:!0});var oRt=s(VZ);Hzr=r(oRt,"FlaxVisionEncoderDecoderModel"),oRt.forEach(t),Uzr=r(eje," (Vision Encoder decoder model)"),eje.forEach(t),ZSt.forEach(t),Jzr=i(mi),T(Fw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(nBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(mk,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gk,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(hk,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(pk,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(_k,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(uk,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bk,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vk,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Fk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Tk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Mk,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(Ek,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(Ck,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(wk,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(Ak,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(Lk,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(yk,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(xk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c($k,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(kk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Sk,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(Rk,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Pk,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Bk,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c(Ik,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(Nk,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(qk,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c(jk,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c(Dk,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(Gk,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ok,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Vk,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(Xk,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(zk,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(Wk,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(Qk,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(Hk,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(Uk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Jk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Yk,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(Kk,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(Zk,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(eS,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(oS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoProcessor"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"id","transformers.AutoModel"),c(mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"id","transformers.AutoModelForPreTraining"),c(fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t1,"id","transformers.AutoModelForCausalLM"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForMaskedLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForSeq2SeqLM"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jb,"id","transformers.AutoModelForSequenceClassification"),c(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jb,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q2,"id","transformers.AutoModelForMultipleChoice"),c(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q2,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForNextSentencePrediction"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForTokenClassification"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForQuestionAnswering"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForTableQuestionAnswering"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.AutoModelForImageClassification"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForVision2Seq"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.AutoModelForAudioClassification"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.AutoModelForAudioFrameClassification"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.AutoModelForCTC"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.AutoModelForAudioXVector"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForMaskedImageModeling"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.AutoModelForObjectDetection"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.AutoModelForImageSegmentation"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.AutoModelForSemanticSegmentation"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForInstanceSegmentation"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.TFAutoModel"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModelForPreTraining"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.TFAutoModelForCausalLM"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForImageClassification"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.TFAutoModelForMaskedLM"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForSequenceClassification"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForMultipleChoice"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForTokenClassification"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForQuestionAnswering"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForVision2Seq"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.FlaxAutoModel"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForCausalLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForPreTraining"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForMaskedLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForTokenClassification"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(LZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Z,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(kZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForImageClassification"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jZ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForVision2Seq"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,tt,u),e(tt,hi),e(tt,pi),e(pi,N6),e(tt,bf),b(f,De,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,q6),e(We,yn),e(We,xn),e(xn,j6),e(We,ui),e(We,$n),e($n,D6),e(We,bi),b(f,vf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,sk),e(Ae,vi),e(vi,lk),e(Ae,ik),b(f,Eo,u),b(f,Aa,u),e(Aa,dk),e(Aa,Ff),e(Ff,ck),e(Aa,mVe),b(f,oje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Ioe),M(G6,Ioe,null),e(Fi,gVe),e(Fi,Noe),e(Noe,hVe),b(f,rje,u),b(f,kn,u),e(kn,pVe),e(kn,qoe),e(qoe,_Ve),e(kn,uVe),e(kn,joe),e(joe,bVe),e(kn,vVe),b(f,tje,u),M(O6,f,u),b(f,aje,u),b(f,fk,u),e(fk,FVe),b(f,nje,u),M(Mf,f,u),b(f,sje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Doe),M(V6,Doe,null),e(Ti,TVe),e(Ti,Goe),e(Goe,MVe),b(f,lje,u),b(f,Co,u),M(X6,Co,null),e(Co,EVe),e(Co,z6),e(z6,CVe),e(z6,mk),e(mk,wVe),e(z6,AVe),e(Co,LVe),e(Co,W6),e(W6,yVe),e(W6,Ooe),e(Ooe,xVe),e(W6,$Ve),e(Co,kVe),e(Co,Er),M(Q6,Er,null),e(Er,SVe),e(Er,Voe),e(Voe,RVe),e(Er,PVe),e(Er,Mi),e(Mi,BVe),e(Mi,Xoe),e(Xoe,IVe),e(Mi,NVe),e(Mi,zoe),e(zoe,qVe),e(Mi,jVe),e(Er,DVe),e(Er,A),e(A,Cf),e(Cf,Woe),e(Woe,GVe),e(Cf,OVe),e(Cf,gk),e(gk,VVe),e(Cf,XVe),e(A,zVe),e(A,wf),e(wf,Qoe),e(Qoe,WVe),e(wf,QVe),e(wf,hk),e(hk,HVe),e(wf,UVe),e(A,JVe),e(A,Af),e(Af,Hoe),e(Hoe,YVe),e(Af,KVe),e(Af,pk),e(pk,ZVe),e(Af,eXe),e(A,oXe),e(A,Lf),e(Lf,Uoe),e(Uoe,rXe),e(Lf,tXe),e(Lf,_k),e(_k,aXe),e(Lf,nXe),e(A,sXe),e(A,yf),e(yf,Joe),e(Joe,lXe),e(yf,iXe),e(yf,uk),e(uk,dXe),e(yf,cXe),e(A,fXe),e(A,xf),e(xf,Yoe),e(Yoe,mXe),e(xf,gXe),e(xf,bk),e(bk,hXe),e(xf,pXe),e(A,_Xe),e(A,$f),e($f,Koe),e(Koe,uXe),e($f,bXe),e($f,vk),e(vk,vXe),e($f,FXe),e(A,TXe),e(A,kf),e(kf,Zoe),e(Zoe,MXe),e(kf,EXe),e(kf,Fk),e(Fk,CXe),e(kf,wXe),e(A,AXe),e(A,Sf),e(Sf,ere),e(ere,LXe),e(Sf,yXe),e(Sf,Tk),e(Tk,xXe),e(Sf,$Xe),e(A,kXe),e(A,Rf),e(Rf,ore),e(ore,SXe),e(Rf,RXe),e(Rf,Mk),e(Mk,PXe),e(Rf,BXe),e(A,IXe),e(A,Pf),e(Pf,rre),e(rre,NXe),e(Pf,qXe),e(Pf,Ek),e(Ek,jXe),e(Pf,DXe),e(A,GXe),e(A,Bf),e(Bf,tre),e(tre,OXe),e(Bf,VXe),e(Bf,Ck),e(Ck,XXe),e(Bf,zXe),e(A,WXe),e(A,If),e(If,are),e(are,QXe),e(If,HXe),e(If,wk),e(wk,UXe),e(If,JXe),e(A,YXe),e(A,Nf),e(Nf,nre),e(nre,KXe),e(Nf,ZXe),e(Nf,Ak),e(Ak,eze),e(Nf,oze),e(A,rze),e(A,qf),e(qf,sre),e(sre,tze),e(qf,aze),e(qf,Lk),e(Lk,nze),e(qf,sze),e(A,lze),e(A,jf),e(jf,lre),e(lre,ize),e(jf,dze),e(jf,yk),e(yk,cze),e(jf,fze),e(A,mze),e(A,Df),e(Df,ire),e(ire,gze),e(Df,hze),e(Df,xk),e(xk,pze),e(Df,_ze),e(A,uze),e(A,Gf),e(Gf,dre),e(dre,bze),e(Gf,vze),e(Gf,$k),e($k,Fze),e(Gf,Tze),e(A,Mze),e(A,Of),e(Of,cre),e(cre,Eze),e(Of,Cze),e(Of,kk),e(kk,wze),e(Of,Aze),e(A,Lze),e(A,Vf),e(Vf,fre),e(fre,yze),e(Vf,xze),e(Vf,Sk),e(Sk,$ze),e(Vf,kze),e(A,Sze),e(A,Xf),e(Xf,mre),e(mre,Rze),e(Xf,Pze),e(Xf,Rk),e(Rk,Bze),e(Xf,Ize),e(A,Nze),e(A,zf),e(zf,gre),e(gre,qze),e(zf,jze),e(zf,Pk),e(Pk,Dze),e(zf,Gze),e(A,Oze),e(A,Wf),e(Wf,hre),e(hre,Vze),e(Wf,Xze),e(Wf,Bk),e(Bk,zze),e(Wf,Wze),e(A,Qze),e(A,Qf),e(Qf,pre),e(pre,Hze),e(Qf,Uze),e(Qf,Ik),e(Ik,Jze),e(Qf,Yze),e(A,Kze),e(A,Hf),e(Hf,_re),e(_re,Zze),e(Hf,eWe),e(Hf,Nk),e(Nk,oWe),e(Hf,rWe),e(A,tWe),e(A,Uf),e(Uf,ure),e(ure,aWe),e(Uf,nWe),e(Uf,qk),e(qk,sWe),e(Uf,lWe),e(A,iWe),e(A,Jf),e(Jf,bre),e(bre,dWe),e(Jf,cWe),e(Jf,jk),e(jk,fWe),e(Jf,mWe),e(A,gWe),e(A,Yf),e(Yf,vre),e(vre,hWe),e(Yf,pWe),e(Yf,Dk),e(Dk,_We),e(Yf,uWe),e(A,bWe),e(A,Kf),e(Kf,Fre),e(Fre,vWe),e(Kf,FWe),e(Kf,Gk),e(Gk,TWe),e(Kf,MWe),e(A,EWe),e(A,Zf),e(Zf,Tre),e(Tre,CWe),e(Zf,wWe),e(Zf,Ok),e(Ok,AWe),e(Zf,LWe),e(A,yWe),e(A,em),e(em,Mre),e(Mre,xWe),e(em,$We),e(em,Vk),e(Vk,kWe),e(em,SWe),e(A,RWe),e(A,om),e(om,Ere),e(Ere,PWe),e(om,BWe),e(om,Xk),e(Xk,IWe),e(om,NWe),e(A,qWe),e(A,rm),e(rm,Cre),e(Cre,jWe),e(rm,DWe),e(rm,zk),e(zk,GWe),e(rm,OWe),e(A,VWe),e(A,tm),e(tm,wre),e(wre,XWe),e(tm,zWe),e(tm,Wk),e(Wk,WWe),e(tm,QWe),e(A,HWe),e(A,am),e(am,Are),e(Are,UWe),e(am,JWe),e(am,Qk),e(Qk,YWe),e(am,KWe),e(A,ZWe),e(A,nm),e(nm,Lre),e(Lre,eQe),e(nm,oQe),e(nm,Hk),e(Hk,rQe),e(nm,tQe),e(A,aQe),e(A,sm),e(sm,yre),e(yre,nQe),e(sm,sQe),e(sm,Uk),e(Uk,lQe),e(sm,iQe),e(A,dQe),e(A,lm),e(lm,xre),e(xre,cQe),e(lm,fQe),e(lm,Jk),e(Jk,mQe),e(lm,gQe),e(A,hQe),e(A,im),e(im,$re),e($re,pQe),e(im,_Qe),e(im,Yk),e(Yk,uQe),e(im,bQe),e(A,vQe),e(A,dm),e(dm,kre),e(kre,FQe),e(dm,TQe),e(dm,Kk),e(Kk,MQe),e(dm,EQe),e(A,CQe),e(A,cm),e(cm,Sre),e(Sre,wQe),e(cm,AQe),e(cm,Zk),e(Zk,LQe),e(cm,yQe),e(A,xQe),e(A,fm),e(fm,Rre),e(Rre,$Qe),e(fm,kQe),e(fm,eS),e(eS,SQe),e(fm,RQe),e(A,PQe),e(A,mm),e(mm,Pre),e(Pre,BQe),e(mm,IQe),e(mm,oS),e(oS,NQe),e(mm,qQe),e(A,jQe),e(A,gm),e(gm,Bre),e(Bre,DQe),e(gm,GQe),e(gm,rS),e(rS,OQe),e(gm,VQe),e(A,XQe),e(A,hm),e(hm,Ire),e(Ire,zQe),e(hm,WQe),e(hm,tS),e(tS,QQe),e(hm,HQe),e(A,UQe),e(A,pm),e(pm,Nre),e(Nre,JQe),e(pm,YQe),e(pm,aS),e(aS,KQe),e(pm,ZQe),e(A,eHe),e(A,_m),e(_m,qre),e(qre,oHe),e(_m,rHe),e(_m,nS),e(nS,tHe),e(_m,aHe),e(A,nHe),e(A,um),e(um,jre),e(jre,sHe),e(um,lHe),e(um,sS),e(sS,iHe),e(um,dHe),e(A,cHe),e(A,bm),e(bm,Dre),e(Dre,fHe),e(bm,mHe),e(bm,lS),e(lS,gHe),e(bm,hHe),e(A,pHe),e(A,vm),e(vm,Gre),e(Gre,_He),e(vm,uHe),e(vm,iS),e(iS,bHe),e(vm,vHe),e(A,FHe),e(A,Fm),e(Fm,Ore),e(Ore,THe),e(Fm,MHe),e(Fm,dS),e(dS,EHe),e(Fm,CHe),e(A,wHe),e(A,Tm),e(Tm,Vre),e(Vre,AHe),e(Tm,LHe),e(Tm,cS),e(cS,yHe),e(Tm,xHe),e(A,$He),e(A,Mm),e(Mm,Xre),e(Xre,kHe),e(Mm,SHe),e(Mm,fS),e(fS,RHe),e(Mm,PHe),e(A,BHe),e(A,Em),e(Em,zre),e(zre,IHe),e(Em,NHe),e(Em,mS),e(mS,qHe),e(Em,jHe),e(A,DHe),e(A,Cm),e(Cm,Wre),e(Wre,GHe),e(Cm,OHe),e(Cm,gS),e(gS,VHe),e(Cm,XHe),e(A,zHe),e(A,wm),e(wm,Qre),e(Qre,WHe),e(wm,QHe),e(wm,hS),e(hS,HHe),e(wm,UHe),e(A,JHe),e(A,Am),e(Am,Hre),e(Hre,YHe),e(Am,KHe),e(Am,pS),e(pS,ZHe),e(Am,eUe),e(A,oUe),e(A,Lm),e(Lm,Ure),e(Ure,rUe),e(Lm,tUe),e(Lm,_S),e(_S,aUe),e(Lm,nUe),e(A,sUe),e(A,ym),e(ym,Jre),e(Jre,lUe),e(ym,iUe),e(ym,uS),e(uS,dUe),e(ym,cUe),e(A,fUe),e(A,xm),e(xm,Yre),e(Yre,mUe),e(xm,gUe),e(xm,bS),e(bS,hUe),e(xm,pUe),e(A,_Ue),e(A,$m),e($m,Kre),e(Kre,uUe),e($m,bUe),e($m,vS),e(vS,vUe),e($m,FUe),e(A,TUe),e(A,km),e(km,Zre),e(Zre,MUe),e(km,EUe),e(km,FS),e(FS,CUe),e(km,wUe),e(A,AUe),e(A,Sm),e(Sm,ete),e(ete,LUe),e(Sm,yUe),e(Sm,TS),e(TS,xUe),e(Sm,$Ue),e(A,kUe),e(A,Rm),e(Rm,ote),e(ote,SUe),e(Rm,RUe),e(Rm,MS),e(MS,PUe),e(Rm,BUe),e(A,IUe),e(A,Pm),e(Pm,rte),e(rte,NUe),e(Pm,qUe),e(Pm,ES),e(ES,jUe),e(Pm,DUe),e(A,GUe),e(A,Bm),e(Bm,tte),e(tte,OUe),e(Bm,VUe),e(Bm,CS),e(CS,XUe),e(Bm,zUe),e(A,WUe),e(A,Im),e(Im,ate),e(ate,QUe),e(Im,HUe),e(Im,wS),e(wS,UUe),e(Im,JUe),e(A,YUe),e(A,Nm),e(Nm,nte),e(nte,KUe),e(Nm,ZUe),e(Nm,AS),e(AS,eJe),e(Nm,oJe),e(A,rJe),e(A,qm),e(qm,ste),e(ste,tJe),e(qm,aJe),e(qm,LS),e(LS,nJe),e(qm,sJe),e(A,lJe),e(A,jm),e(jm,lte),e(lte,iJe),e(jm,dJe),e(jm,yS),e(yS,cJe),e(jm,fJe),e(A,mJe),e(A,Dm),e(Dm,ite),e(ite,gJe),e(Dm,hJe),e(Dm,xS),e(xS,pJe),e(Dm,_Je),e(A,uJe),e(A,Gm),e(Gm,dte),e(dte,bJe),e(Gm,vJe),e(Gm,$S),e($S,FJe),e(Gm,TJe),e(A,MJe),e(A,Om),e(Om,cte),e(cte,EJe),e(Om,CJe),e(Om,kS),e(kS,wJe),e(Om,AJe),e(A,LJe),e(A,Vm),e(Vm,fte),e(fte,yJe),e(Vm,xJe),e(Vm,SS),e(SS,$Je),e(Vm,kJe),e(A,SJe),e(A,Xm),e(Xm,mte),e(mte,RJe),e(Xm,PJe),e(Xm,RS),e(RS,BJe),e(Xm,IJe),e(A,NJe),e(A,zm),e(zm,gte),e(gte,qJe),e(zm,jJe),e(zm,PS),e(PS,DJe),e(zm,GJe),e(A,OJe),e(A,Wm),e(Wm,hte),e(hte,VJe),e(Wm,XJe),e(Wm,BS),e(BS,zJe),e(Wm,WJe),e(A,QJe),e(A,Qm),e(Qm,pte),e(pte,HJe),e(Qm,UJe),e(Qm,IS),e(IS,JJe),e(Qm,YJe),e(A,KJe),e(A,Hm),e(Hm,_te),e(_te,ZJe),e(Hm,eYe),e(Hm,NS),e(NS,oYe),e(Hm,rYe),e(A,tYe),e(A,Um),e(Um,ute),e(ute,aYe),e(Um,nYe),e(Um,qS),e(qS,sYe),e(Um,lYe),e(A,iYe),e(A,Jm),e(Jm,bte),e(bte,dYe),e(Jm,cYe),e(Jm,jS),e(jS,fYe),e(Jm,mYe),e(A,gYe),e(A,Ym),e(Ym,vte),e(vte,hYe),e(Ym,pYe),e(Ym,DS),e(DS,_Ye),e(Ym,uYe),e(A,bYe),e(A,Km),e(Km,Fte),e(Fte,vYe),e(Km,FYe),e(Km,GS),e(GS,TYe),e(Km,MYe),e(A,EYe),e(A,Zm),e(Zm,Tte),e(Tte,CYe),e(Zm,wYe),e(Zm,OS),e(OS,AYe),e(Zm,LYe),e(A,yYe),e(A,eg),e(eg,Mte),e(Mte,xYe),e(eg,$Ye),e(eg,VS),e(VS,kYe),e(eg,SYe),e(A,RYe),e(A,og),e(og,Ete),e(Ete,PYe),e(og,BYe),e(og,XS),e(XS,IYe),e(og,NYe),e(A,qYe),e(A,rg),e(rg,Cte),e(Cte,jYe),e(rg,DYe),e(rg,zS),e(zS,GYe),e(rg,OYe),e(A,VYe),e(A,tg),e(tg,wte),e(wte,XYe),e(tg,zYe),e(tg,WS),e(WS,WYe),e(tg,QYe),e(A,HYe),e(A,ag),e(ag,Ate),e(Ate,UYe),e(ag,JYe),e(ag,QS),e(QS,YYe),e(ag,KYe),e(A,ZYe),e(A,ng),e(ng,Lte),e(Lte,eKe),e(ng,oKe),e(ng,HS),e(HS,rKe),e(ng,tKe),e(A,aKe),e(A,sg),e(sg,yte),e(yte,nKe),e(sg,sKe),e(sg,US),e(US,lKe),e(sg,iKe),e(A,dKe),e(A,lg),e(lg,xte),e(xte,cKe),e(lg,fKe),e(lg,JS),e(JS,mKe),e(lg,gKe),e(A,hKe),e(A,ig),e(ig,$te),e($te,pKe),e(ig,_Ke),e(ig,YS),e(YS,uKe),e(ig,bKe),e(A,vKe),e(A,dg),e(dg,kte),e(kte,FKe),e(dg,TKe),e(dg,KS),e(KS,MKe),e(dg,EKe),e(A,CKe),e(A,cg),e(cg,Ste),e(Ste,wKe),e(cg,AKe),e(cg,ZS),e(ZS,LKe),e(cg,yKe),e(A,xKe),e(A,fg),e(fg,Rte),e(Rte,$Ke),e(fg,kKe),e(fg,eR),e(eR,SKe),e(fg,RKe),e(A,PKe),e(A,mg),e(mg,Pte),e(Pte,BKe),e(mg,IKe),e(mg,oR),e(oR,NKe),e(mg,qKe),e(A,jKe),e(A,gg),e(gg,Bte),e(Bte,DKe),e(gg,GKe),e(gg,rR),e(rR,OKe),e(gg,VKe),e(A,XKe),e(A,hg),e(hg,Ite),e(Ite,zKe),e(hg,WKe),e(hg,tR),e(tR,QKe),e(hg,HKe),e(A,UKe),e(A,pg),e(pg,Nte),e(Nte,JKe),e(pg,YKe),e(pg,aR),e(aR,KKe),e(pg,ZKe),e(A,eZe),e(A,_g),e(_g,qte),e(qte,oZe),e(_g,rZe),e(_g,nR),e(nR,tZe),e(_g,aZe),e(A,nZe),e(A,ug),e(ug,jte),e(jte,sZe),e(ug,lZe),e(ug,sR),e(sR,iZe),e(ug,dZe),e(A,cZe),e(A,bg),e(bg,Dte),e(Dte,fZe),e(bg,mZe),e(bg,lR),e(lR,gZe),e(bg,hZe),e(A,pZe),e(A,vg),e(vg,Gte),e(Gte,_Ze),e(vg,uZe),e(vg,iR),e(iR,bZe),e(vg,vZe),e(A,FZe),e(A,Fg),e(Fg,Ote),e(Ote,TZe),e(Fg,MZe),e(Fg,dR),e(dR,EZe),e(Fg,CZe),e(A,wZe),e(A,Tg),e(Tg,Vte),e(Vte,AZe),e(Tg,LZe),e(Tg,cR),e(cR,yZe),e(Tg,xZe),e(A,$Ze),e(A,Mg),e(Mg,Xte),e(Xte,kZe),e(Mg,SZe),e(Mg,fR),e(fR,RZe),e(Mg,PZe),e(A,BZe),e(A,Eg),e(Eg,zte),e(zte,IZe),e(Eg,NZe),e(Eg,mR),e(mR,qZe),e(Eg,jZe),e(A,DZe),e(A,Cg),e(Cg,Wte),e(Wte,GZe),e(Cg,OZe),e(Cg,gR),e(gR,VZe),e(Cg,XZe),e(A,zZe),e(A,wg),e(wg,Qte),e(Qte,WZe),e(wg,QZe),e(wg,hR),e(hR,HZe),e(wg,UZe),e(A,JZe),e(A,Ag),e(Ag,Hte),e(Hte,YZe),e(Ag,KZe),e(Ag,pR),e(pR,ZZe),e(Ag,eeo),e(Er,oeo),M(Lg,Er,null),e(Co,reo),e(Co,yg),M(H6,yg,null),e(yg,teo),e(yg,Ute),e(Ute,aeo),b(f,ije,u),b(f,Ei,u),e(Ei,xg),e(xg,Jte),M(U6,Jte,null),e(Ei,neo),e(Ei,Yte),e(Yte,seo),b(f,dje,u),b(f,wo,u),M(J6,wo,null),e(wo,leo),e(wo,Y6),e(Y6,ieo),e(Y6,_R),e(_R,deo),e(Y6,ceo),e(wo,feo),e(wo,K6),e(K6,meo),e(K6,Kte),e(Kte,geo),e(K6,heo),e(wo,peo),e(wo,Cr),M(Z6,Cr,null),e(Cr,_eo),e(Cr,Zte),e(Zte,ueo),e(Cr,beo),e(Cr,La),e(La,veo),e(La,eae),e(eae,Feo),e(La,Teo),e(La,oae),e(oae,Meo),e(La,Eeo),e(La,rae),e(rae,Ceo),e(La,weo),e(Cr,Aeo),e(Cr,k),e(k,Sn),e(Sn,tae),e(tae,Leo),e(Sn,yeo),e(Sn,uR),e(uR,xeo),e(Sn,$eo),e(Sn,bR),e(bR,keo),e(Sn,Seo),e(k,Reo),e(k,Rn),e(Rn,aae),e(aae,Peo),e(Rn,Beo),e(Rn,vR),e(vR,Ieo),e(Rn,Neo),e(Rn,FR),e(FR,qeo),e(Rn,jeo),e(k,Deo),e(k,Pn),e(Pn,nae),e(nae,Geo),e(Pn,Oeo),e(Pn,TR),e(TR,Veo),e(Pn,Xeo),e(Pn,MR),e(MR,zeo),e(Pn,Weo),e(k,Qeo),e(k,$g),e($g,sae),e(sae,Heo),e($g,Ueo),e($g,ER),e(ER,Jeo),e($g,Yeo),e(k,Keo),e(k,Bn),e(Bn,lae),e(lae,Zeo),e(Bn,eoo),e(Bn,CR),e(CR,ooo),e(Bn,roo),e(Bn,wR),e(wR,too),e(Bn,aoo),e(k,noo),e(k,kg),e(kg,iae),e(iae,soo),e(kg,loo),e(kg,AR),e(AR,ioo),e(kg,doo),e(k,coo),e(k,Sg),e(Sg,dae),e(dae,foo),e(Sg,moo),e(Sg,LR),e(LR,goo),e(Sg,hoo),e(k,poo),e(k,Rg),e(Rg,cae),e(cae,_oo),e(Rg,uoo),e(Rg,yR),e(yR,boo),e(Rg,voo),e(k,Foo),e(k,In),e(In,fae),e(fae,Too),e(In,Moo),e(In,xR),e(xR,Eoo),e(In,Coo),e(In,$R),e($R,woo),e(In,Aoo),e(k,Loo),e(k,Nn),e(Nn,mae),e(mae,yoo),e(Nn,xoo),e(Nn,kR),e(kR,$oo),e(Nn,koo),e(Nn,SR),e(SR,Soo),e(Nn,Roo),e(k,Poo),e(k,qn),e(qn,gae),e(gae,Boo),e(qn,Ioo),e(qn,RR),e(RR,Noo),e(qn,qoo),e(qn,PR),e(PR,joo),e(qn,Doo),e(k,Goo),e(k,Pg),e(Pg,hae),e(hae,Ooo),e(Pg,Voo),e(Pg,BR),e(BR,Xoo),e(Pg,zoo),e(k,Woo),e(k,Bg),e(Bg,pae),e(pae,Qoo),e(Bg,Hoo),e(Bg,IR),e(IR,Uoo),e(Bg,Joo),e(k,Yoo),e(k,jn),e(jn,_ae),e(_ae,Koo),e(jn,Zoo),e(jn,NR),e(NR,ero),e(jn,oro),e(jn,qR),e(qR,rro),e(jn,tro),e(k,aro),e(k,Ig),e(Ig,uae),e(uae,nro),e(Ig,sro),e(Ig,jR),e(jR,lro),e(Ig,iro),e(k,dro),e(k,Dn),e(Dn,bae),e(bae,cro),e(Dn,fro),e(Dn,DR),e(DR,mro),e(Dn,gro),e(Dn,GR),e(GR,hro),e(Dn,pro),e(k,_ro),e(k,Gn),e(Gn,vae),e(vae,uro),e(Gn,bro),e(Gn,OR),e(OR,vro),e(Gn,Fro),e(Gn,VR),e(VR,Tro),e(Gn,Mro),e(k,Ero),e(k,On),e(On,Fae),e(Fae,Cro),e(On,wro),e(On,XR),e(XR,Aro),e(On,Lro),e(On,zR),e(zR,yro),e(On,xro),e(k,$ro),e(k,Ng),e(Ng,Tae),e(Tae,kro),e(Ng,Sro),e(Ng,WR),e(WR,Rro),e(Ng,Pro),e(k,Bro),e(k,Vn),e(Vn,Mae),e(Mae,Iro),e(Vn,Nro),e(Vn,QR),e(QR,qro),e(Vn,jro),e(Vn,HR),e(HR,Dro),e(Vn,Gro),e(k,Oro),e(k,Xn),e(Xn,Eae),e(Eae,Vro),e(Xn,Xro),e(Xn,UR),e(UR,zro),e(Xn,Wro),e(Xn,JR),e(JR,Qro),e(Xn,Hro),e(k,Uro),e(k,zn),e(zn,Cae),e(Cae,Jro),e(zn,Yro),e(zn,YR),e(YR,Kro),e(zn,Zro),e(zn,KR),e(KR,eto),e(zn,oto),e(k,rto),e(k,Wn),e(Wn,wae),e(wae,tto),e(Wn,ato),e(Wn,ZR),e(ZR,nto),e(Wn,sto),e(Wn,eP),e(eP,lto),e(Wn,ito),e(k,dto),e(k,Qn),e(Qn,Aae),e(Aae,cto),e(Qn,fto),e(Qn,oP),e(oP,mto),e(Qn,gto),e(Qn,rP),e(rP,hto),e(Qn,pto),e(k,_to),e(k,Hn),e(Hn,Lae),e(Lae,uto),e(Hn,bto),e(Hn,tP),e(tP,vto),e(Hn,Fto),e(Hn,aP),e(aP,Tto),e(Hn,Mto),e(k,Eto),e(k,qg),e(qg,yae),e(yae,Cto),e(qg,wto),e(qg,nP),e(nP,Ato),e(qg,Lto),e(k,yto),e(k,Un),e(Un,xae),e(xae,xto),e(Un,$to),e(Un,sP),e(sP,kto),e(Un,Sto),e(Un,lP),e(lP,Rto),e(Un,Pto),e(k,Bto),e(k,jg),e(jg,$ae),e($ae,Ito),e(jg,Nto),e(jg,iP),e(iP,qto),e(jg,jto),e(k,Dto),e(k,Jn),e(Jn,kae),e(kae,Gto),e(Jn,Oto),e(Jn,dP),e(dP,Vto),e(Jn,Xto),e(Jn,cP),e(cP,zto),e(Jn,Wto),e(k,Qto),e(k,Yn),e(Yn,Sae),e(Sae,Hto),e(Yn,Uto),e(Yn,fP),e(fP,Jto),e(Yn,Yto),e(Yn,mP),e(mP,Kto),e(Yn,Zto),e(k,eao),e(k,Kn),e(Kn,Rae),e(Rae,oao),e(Kn,rao),e(Kn,gP),e(gP,tao),e(Kn,aao),e(Kn,hP),e(hP,nao),e(Kn,sao),e(k,lao),e(k,Dg),e(Dg,Pae),e(Pae,iao),e(Dg,dao),e(Dg,pP),e(pP,cao),e(Dg,fao),e(k,mao),e(k,Zn),e(Zn,Bae),e(Bae,gao),e(Zn,hao),e(Zn,_P),e(_P,pao),e(Zn,_ao),e(Zn,uP),e(uP,uao),e(Zn,bao),e(k,vao),e(k,es),e(es,Iae),e(Iae,Fao),e(es,Tao),e(es,bP),e(bP,Mao),e(es,Eao),e(es,vP),e(vP,Cao),e(es,wao),e(k,Aao),e(k,Gg),e(Gg,Nae),e(Nae,Lao),e(Gg,yao),e(Gg,FP),e(FP,xao),e(Gg,$ao),e(k,kao),e(k,os),e(os,qae),e(qae,Sao),e(os,Rao),e(os,TP),e(TP,Pao),e(os,Bao),e(os,MP),e(MP,Iao),e(os,Nao),e(k,qao),e(k,rs),e(rs,jae),e(jae,jao),e(rs,Dao),e(rs,EP),e(EP,Gao),e(rs,Oao),e(rs,CP),e(CP,Vao),e(rs,Xao),e(k,zao),e(k,ts),e(ts,Dae),e(Dae,Wao),e(ts,Qao),e(ts,wP),e(wP,Hao),e(ts,Uao),e(ts,AP),e(AP,Jao),e(ts,Yao),e(k,Kao),e(k,as),e(as,Gae),e(Gae,Zao),e(as,eno),e(as,LP),e(LP,ono),e(as,rno),e(as,yP),e(yP,tno),e(as,ano),e(k,nno),e(k,ns),e(ns,Oae),e(Oae,sno),e(ns,lno),e(ns,xP),e(xP,ino),e(ns,dno),e(ns,$P),e($P,cno),e(ns,fno),e(k,mno),e(k,ss),e(ss,Vae),e(Vae,gno),e(ss,hno),e(ss,kP),e(kP,pno),e(ss,_no),e(ss,SP),e(SP,uno),e(ss,bno),e(k,vno),e(k,ls),e(ls,Xae),e(Xae,Fno),e(ls,Tno),e(ls,RP),e(RP,Mno),e(ls,Eno),e(ls,PP),e(PP,Cno),e(ls,wno),e(k,Ano),e(k,Og),e(Og,zae),e(zae,Lno),e(Og,yno),e(Og,BP),e(BP,xno),e(Og,$no),e(k,kno),e(k,is),e(is,Wae),e(Wae,Sno),e(is,Rno),e(is,IP),e(IP,Pno),e(is,Bno),e(is,NP),e(NP,Ino),e(is,Nno),e(k,qno),e(k,Vg),e(Vg,Qae),e(Qae,jno),e(Vg,Dno),e(Vg,qP),e(qP,Gno),e(Vg,Ono),e(k,Vno),e(k,Xg),e(Xg,Hae),e(Hae,Xno),e(Xg,zno),e(Xg,jP),e(jP,Wno),e(Xg,Qno),e(k,Hno),e(k,ds),e(ds,Uae),e(Uae,Uno),e(ds,Jno),e(ds,DP),e(DP,Yno),e(ds,Kno),e(ds,GP),e(GP,Zno),e(ds,eso),e(k,oso),e(k,cs),e(cs,Jae),e(Jae,rso),e(cs,tso),e(cs,OP),e(OP,aso),e(cs,nso),e(cs,VP),e(VP,sso),e(cs,lso),e(k,iso),e(k,fs),e(fs,Yae),e(Yae,dso),e(fs,cso),e(fs,XP),e(XP,fso),e(fs,mso),e(fs,zP),e(zP,gso),e(fs,hso),e(k,pso),e(k,zg),e(zg,Kae),e(Kae,_so),e(zg,uso),e(zg,WP),e(WP,bso),e(zg,vso),e(k,Fso),e(k,ms),e(ms,Zae),e(Zae,Tso),e(ms,Mso),e(ms,QP),e(QP,Eso),e(ms,Cso),e(ms,HP),e(HP,wso),e(ms,Aso),e(k,Lso),e(k,gs),e(gs,ene),e(ene,yso),e(gs,xso),e(gs,UP),e(UP,$so),e(gs,kso),e(gs,JP),e(JP,Sso),e(gs,Rso),e(k,Pso),e(k,hs),e(hs,one),e(one,Bso),e(hs,Iso),e(hs,YP),e(YP,Nso),e(hs,qso),e(hs,KP),e(KP,jso),e(hs,Dso),e(k,Gso),e(k,ps),e(ps,rne),e(rne,Oso),e(ps,Vso),e(ps,ZP),e(ZP,Xso),e(ps,zso),e(ps,eB),e(eB,Wso),e(ps,Qso),e(k,Hso),e(k,_s),e(_s,tne),e(tne,Uso),e(_s,Jso),e(_s,oB),e(oB,Yso),e(_s,Kso),e(_s,rB),e(rB,Zso),e(_s,elo),e(k,olo),e(k,Wg),e(Wg,ane),e(ane,rlo),e(Wg,tlo),e(Wg,tB),e(tB,alo),e(Wg,nlo),e(k,slo),e(k,us),e(us,nne),e(nne,llo),e(us,ilo),e(us,aB),e(aB,dlo),e(us,clo),e(us,nB),e(nB,flo),e(us,mlo),e(k,glo),e(k,Qg),e(Qg,sne),e(sne,hlo),e(Qg,plo),e(Qg,sB),e(sB,_lo),e(Qg,ulo),e(k,blo),e(k,Hg),e(Hg,lne),e(lne,vlo),e(Hg,Flo),e(Hg,lB),e(lB,Tlo),e(Hg,Mlo),e(k,Elo),e(k,Ug),e(Ug,ine),e(ine,Clo),e(Ug,wlo),e(Ug,iB),e(iB,Alo),e(Ug,Llo),e(k,ylo),e(k,Jg),e(Jg,dne),e(dne,xlo),e(Jg,$lo),e(Jg,dB),e(dB,klo),e(Jg,Slo),e(k,Rlo),e(k,bs),e(bs,cne),e(cne,Plo),e(bs,Blo),e(bs,cB),e(cB,Ilo),e(bs,Nlo),e(bs,fB),e(fB,qlo),e(bs,jlo),e(k,Dlo),e(k,Yg),e(Yg,fne),e(fne,Glo),e(Yg,Olo),e(Yg,mB),e(mB,Vlo),e(Yg,Xlo),e(k,zlo),e(k,vs),e(vs,mne),e(mne,Wlo),e(vs,Qlo),e(vs,gB),e(gB,Hlo),e(vs,Ulo),e(vs,hB),e(hB,Jlo),e(vs,Ylo),e(k,Klo),e(k,Fs),e(Fs,gne),e(gne,Zlo),e(Fs,eio),e(Fs,pB),e(pB,oio),e(Fs,rio),e(Fs,_B),e(_B,tio),e(Fs,aio),e(k,nio),e(k,Ts),e(Ts,hne),e(hne,sio),e(Ts,lio),e(Ts,uB),e(uB,iio),e(Ts,dio),e(Ts,bB),e(bB,cio),e(Ts,fio),e(k,mio),e(k,Ms),e(Ms,pne),e(pne,gio),e(Ms,hio),e(Ms,vB),e(vB,pio),e(Ms,_io),e(Ms,FB),e(FB,uio),e(Ms,bio),e(k,vio),e(k,Es),e(Es,_ne),e(_ne,Fio),e(Es,Tio),e(Es,TB),e(TB,Mio),e(Es,Eio),e(Es,MB),e(MB,Cio),e(Es,wio),e(k,Aio),e(k,Cs),e(Cs,une),e(une,Lio),e(Cs,yio),e(Cs,EB),e(EB,xio),e(Cs,$io),e(Cs,CB),e(CB,kio),e(Cs,Sio),e(k,Rio),e(k,Kg),e(Kg,bne),e(bne,Pio),e(Kg,Bio),e(Kg,wB),e(wB,Iio),e(Kg,Nio),e(k,qio),e(k,Zg),e(Zg,vne),e(vne,jio),e(Zg,Dio),e(Zg,AB),e(AB,Gio),e(Zg,Oio),e(k,Vio),e(k,ws),e(ws,Fne),e(Fne,Xio),e(ws,zio),e(ws,LB),e(LB,Wio),e(ws,Qio),e(ws,yB),e(yB,Hio),e(ws,Uio),e(k,Jio),e(k,As),e(As,Tne),e(Tne,Yio),e(As,Kio),e(As,xB),e(xB,Zio),e(As,edo),e(As,$B),e($B,odo),e(As,rdo),e(k,tdo),e(k,Ls),e(Ls,Mne),e(Mne,ado),e(Ls,ndo),e(Ls,kB),e(kB,sdo),e(Ls,ldo),e(Ls,SB),e(SB,ido),e(Ls,ddo),e(k,cdo),e(k,eh),e(eh,Ene),e(Ene,fdo),e(eh,mdo),e(eh,RB),e(RB,gdo),e(eh,hdo),e(k,pdo),e(k,oh),e(oh,Cne),e(Cne,_do),e(oh,udo),e(oh,PB),e(PB,bdo),e(oh,vdo),e(k,Fdo),e(k,rh),e(rh,wne),e(wne,Tdo),e(rh,Mdo),e(rh,BB),e(BB,Edo),e(rh,Cdo),e(k,wdo),e(k,ys),e(ys,Ane),e(Ane,Ado),e(ys,Ldo),e(ys,IB),e(IB,ydo),e(ys,xdo),e(ys,NB),e(NB,$do),e(ys,kdo),e(k,Sdo),e(k,th),e(th,Lne),e(Lne,Rdo),e(th,Pdo),e(th,qB),e(qB,Bdo),e(th,Ido),e(k,Ndo),e(k,ah),e(ah,yne),e(yne,qdo),e(ah,jdo),e(ah,jB),e(jB,Ddo),e(ah,Gdo),e(k,Odo),e(k,nh),e(nh,xne),e(xne,Vdo),e(nh,Xdo),e(nh,DB),e(DB,zdo),e(nh,Wdo),e(k,Qdo),e(k,xs),e(xs,$ne),e($ne,Hdo),e(xs,Udo),e(xs,GB),e(GB,Jdo),e(xs,Ydo),e(xs,OB),e(OB,Kdo),e(xs,Zdo),e(k,eco),e(k,sh),e(sh,kne),e(kne,oco),e(sh,rco),e(sh,VB),e(VB,tco),e(sh,aco),e(k,nco),e(k,lh),e(lh,Sne),e(Sne,sco),e(lh,lco),e(lh,XB),e(XB,ico),e(lh,dco),e(k,cco),e(k,$s),e($s,Rne),e(Rne,fco),e($s,mco),e($s,zB),e(zB,gco),e($s,hco),e($s,WB),e(WB,pco),e($s,_co),e(k,uco),e(k,ks),e(ks,Pne),e(Pne,bco),e(ks,vco),e(ks,QB),e(QB,Fco),e(ks,Tco),e(ks,HB),e(HB,Mco),e(ks,Eco),e(k,Cco),e(k,Ss),e(Ss,Bne),e(Bne,wco),e(Ss,Aco),e(Ss,UB),e(UB,Lco),e(Ss,yco),e(Ss,JB),e(JB,xco),e(Ss,$co),e(k,kco),e(k,Rs),e(Rs,Ine),e(Ine,Sco),e(Rs,Rco),e(Rs,YB),e(YB,Pco),e(Rs,Bco),e(Rs,KB),e(KB,Ico),e(Rs,Nco),e(Cr,qco),M(ih,Cr,null),e(wo,jco),e(wo,dh),M(eL,dh,null),e(dh,Dco),e(dh,Nne),e(Nne,Gco),b(f,cje,u),b(f,Ci,u),e(Ci,ch),e(ch,qne),M(oL,qne,null),e(Ci,Oco),e(Ci,jne),e(jne,Vco),b(f,fje,u),b(f,Ao,u),M(rL,Ao,null),e(Ao,Xco),e(Ao,tL),e(tL,zco),e(tL,ZB),e(ZB,Wco),e(tL,Qco),e(Ao,Hco),e(Ao,aL),e(aL,Uco),e(aL,Dne),e(Dne,Jco),e(aL,Yco),e(Ao,Kco),e(Ao,He),M(nL,He,null),e(He,Zco),e(He,Gne),e(Gne,efo),e(He,ofo),e(He,ya),e(ya,rfo),e(ya,One),e(One,tfo),e(ya,afo),e(ya,Vne),e(Vne,nfo),e(ya,sfo),e(ya,Xne),e(Xne,lfo),e(ya,ifo),e(He,dfo),e(He,Y),e(Y,fh),e(fh,zne),e(zne,cfo),e(fh,ffo),e(fh,eI),e(eI,mfo),e(fh,gfo),e(Y,hfo),e(Y,mh),e(mh,Wne),e(Wne,pfo),e(mh,_fo),e(mh,oI),e(oI,ufo),e(mh,bfo),e(Y,vfo),e(Y,gh),e(gh,Qne),e(Qne,Ffo),e(gh,Tfo),e(gh,rI),e(rI,Mfo),e(gh,Efo),e(Y,Cfo),e(Y,hh),e(hh,Hne),e(Hne,wfo),e(hh,Afo),e(hh,tI),e(tI,Lfo),e(hh,yfo),e(Y,xfo),e(Y,ph),e(ph,Une),e(Une,$fo),e(ph,kfo),e(ph,aI),e(aI,Sfo),e(ph,Rfo),e(Y,Pfo),e(Y,_h),e(_h,Jne),e(Jne,Bfo),e(_h,Ifo),e(_h,nI),e(nI,Nfo),e(_h,qfo),e(Y,jfo),e(Y,uh),e(uh,Yne),e(Yne,Dfo),e(uh,Gfo),e(uh,sI),e(sI,Ofo),e(uh,Vfo),e(Y,Xfo),e(Y,bh),e(bh,Kne),e(Kne,zfo),e(bh,Wfo),e(bh,lI),e(lI,Qfo),e(bh,Hfo),e(Y,Ufo),e(Y,vh),e(vh,Zne),e(Zne,Jfo),e(vh,Yfo),e(vh,iI),e(iI,Kfo),e(vh,Zfo),e(Y,emo),e(Y,Fh),e(Fh,ese),e(ese,omo),e(Fh,rmo),e(Fh,dI),e(dI,tmo),e(Fh,amo),e(Y,nmo),e(Y,Th),e(Th,ose),e(ose,smo),e(Th,lmo),e(Th,cI),e(cI,imo),e(Th,dmo),e(Y,cmo),e(Y,Mh),e(Mh,rse),e(rse,fmo),e(Mh,mmo),e(Mh,fI),e(fI,gmo),e(Mh,hmo),e(Y,pmo),e(Y,Eh),e(Eh,tse),e(tse,_mo),e(Eh,umo),e(Eh,mI),e(mI,bmo),e(Eh,vmo),e(Y,Fmo),e(Y,Ch),e(Ch,ase),e(ase,Tmo),e(Ch,Mmo),e(Ch,gI),e(gI,Emo),e(Ch,Cmo),e(Y,wmo),e(Y,wh),e(wh,nse),e(nse,Amo),e(wh,Lmo),e(wh,hI),e(hI,ymo),e(wh,xmo),e(Y,$mo),e(Y,Ah),e(Ah,sse),e(sse,kmo),e(Ah,Smo),e(Ah,pI),e(pI,Rmo),e(Ah,Pmo),e(Y,Bmo),e(Y,Lh),e(Lh,lse),e(lse,Imo),e(Lh,Nmo),e(Lh,_I),e(_I,qmo),e(Lh,jmo),e(Y,Dmo),e(Y,yh),e(yh,ise),e(ise,Gmo),e(yh,Omo),e(yh,uI),e(uI,Vmo),e(yh,Xmo),e(Y,zmo),e(Y,xh),e(xh,dse),e(dse,Wmo),e(xh,Qmo),e(xh,bI),e(bI,Hmo),e(xh,Umo),e(Y,Jmo),e(Y,$h),e($h,cse),e(cse,Ymo),e($h,Kmo),e($h,vI),e(vI,Zmo),e($h,ego),e(Y,ogo),e(Y,kh),e(kh,fse),e(fse,rgo),e(kh,tgo),e(kh,FI),e(FI,ago),e(kh,ngo),e(Y,sgo),e(Y,Sh),e(Sh,mse),e(mse,lgo),e(Sh,igo),e(Sh,TI),e(TI,dgo),e(Sh,cgo),e(Y,fgo),e(Y,Rh),e(Rh,gse),e(gse,mgo),e(Rh,ggo),e(Rh,MI),e(MI,hgo),e(Rh,pgo),e(Y,_go),e(Y,Ph),e(Ph,hse),e(hse,ugo),e(Ph,bgo),e(Ph,EI),e(EI,vgo),e(Ph,Fgo),e(Y,Tgo),e(Y,Bh),e(Bh,pse),e(pse,Mgo),e(Bh,Ego),e(Bh,CI),e(CI,Cgo),e(Bh,wgo),e(Y,Ago),e(Y,Ih),e(Ih,_se),e(_se,Lgo),e(Ih,ygo),e(Ih,wI),e(wI,xgo),e(Ih,$go),e(Y,kgo),e(Y,Nh),e(Nh,use),e(use,Sgo),e(Nh,Rgo),e(Nh,AI),e(AI,Pgo),e(Nh,Bgo),e(Y,Igo),e(Y,qh),e(qh,bse),e(bse,Ngo),e(qh,qgo),e(qh,LI),e(LI,jgo),e(qh,Dgo),e(Y,Ggo),e(Y,jh),e(jh,vse),e(vse,Ogo),e(jh,Vgo),e(jh,yI),e(yI,Xgo),e(jh,zgo),e(Y,Wgo),e(Y,Dh),e(Dh,Fse),e(Fse,Qgo),e(Dh,Hgo),e(Dh,xI),e(xI,Ugo),e(Dh,Jgo),e(Y,Ygo),e(Y,Gh),e(Gh,Tse),e(Tse,Kgo),e(Gh,Zgo),e(Gh,$I),e($I,eho),e(Gh,oho),e(He,rho),M(Oh,He,null),e(He,tho),M(Vh,He,null),e(Ao,aho),e(Ao,Xh),M(sL,Xh,null),e(Xh,nho),e(Xh,Mse),e(Mse,sho),b(f,mje,u),b(f,wi,u),e(wi,zh),e(zh,Ese),M(lL,Ese,null),e(wi,lho),e(wi,Cse),e(Cse,iho),b(f,gje,u),b(f,Lo,u),M(iL,Lo,null),e(Lo,dho),e(Lo,dL),e(dL,cho),e(dL,kI),e(kI,fho),e(dL,mho),e(Lo,gho),e(Lo,cL),e(cL,hho),e(cL,wse),e(wse,pho),e(cL,_ho),e(Lo,uho),e(Lo,Ue),M(fL,Ue,null),e(Ue,bho),e(Ue,Ase),e(Ase,vho),e(Ue,Fho),e(Ue,Ai),e(Ai,Tho),e(Ai,Lse),e(Lse,Mho),e(Ai,Eho),e(Ai,yse),e(yse,Cho),e(Ai,who),e(Ue,Aho),e(Ue,he),e(he,Wh),e(Wh,xse),e(xse,Lho),e(Wh,yho),e(Wh,SI),e(SI,xho),e(Wh,$ho),e(he,kho),e(he,Qh),e(Qh,$se),e($se,Sho),e(Qh,Rho),e(Qh,kse),e(kse,Pho),e(Qh,Bho),e(he,Iho),e(he,Hh),e(Hh,Sse),e(Sse,Nho),e(Hh,qho),e(Hh,RI),e(RI,jho),e(Hh,Dho),e(he,Gho),e(he,Uh),e(Uh,Rse),e(Rse,Oho),e(Uh,Vho),e(Uh,PI),e(PI,Xho),e(Uh,zho),e(he,Who),e(he,Jh),e(Jh,Pse),e(Pse,Qho),e(Jh,Hho),e(Jh,BI),e(BI,Uho),e(Jh,Jho),e(he,Yho),e(he,Yh),e(Yh,Bse),e(Bse,Kho),e(Yh,Zho),e(Yh,II),e(II,epo),e(Yh,opo),e(he,rpo),e(he,Kh),e(Kh,Ise),e(Ise,tpo),e(Kh,apo),e(Kh,NI),e(NI,npo),e(Kh,spo),e(he,lpo),e(he,Zh),e(Zh,Nse),e(Nse,ipo),e(Zh,dpo),e(Zh,qI),e(qI,cpo),e(Zh,fpo),e(he,mpo),e(he,ep),e(ep,qse),e(qse,gpo),e(ep,hpo),e(ep,jI),e(jI,ppo),e(ep,_po),e(he,upo),e(he,op),e(op,jse),e(jse,bpo),e(op,vpo),e(op,DI),e(DI,Fpo),e(op,Tpo),e(he,Mpo),e(he,rp),e(rp,Dse),e(Dse,Epo),e(rp,Cpo),e(rp,GI),e(GI,wpo),e(rp,Apo),e(he,Lpo),e(he,tp),e(tp,Gse),e(Gse,ypo),e(tp,xpo),e(tp,OI),e(OI,$po),e(tp,kpo),e(he,Spo),e(he,ap),e(ap,Ose),e(Ose,Rpo),e(ap,Ppo),e(ap,VI),e(VI,Bpo),e(ap,Ipo),e(he,Npo),e(he,np),e(np,Vse),e(Vse,qpo),e(np,jpo),e(np,XI),e(XI,Dpo),e(np,Gpo),e(he,Opo),e(he,sp),e(sp,Xse),e(Xse,Vpo),e(sp,Xpo),e(sp,zI),e(zI,zpo),e(sp,Wpo),e(he,Qpo),e(he,lp),e(lp,zse),e(zse,Hpo),e(lp,Upo),e(lp,WI),e(WI,Jpo),e(lp,Ypo),e(he,Kpo),e(he,ip),e(ip,Wse),e(Wse,Zpo),e(ip,e_o),e(ip,QI),e(QI,o_o),e(ip,r_o),e(Ue,t_o),M(dp,Ue,null),e(Ue,a_o),M(cp,Ue,null),e(Lo,n_o),e(Lo,fp),M(mL,fp,null),e(fp,s_o),e(fp,Qse),e(Qse,l_o),b(f,hje,u),b(f,Li,u),e(Li,mp),e(mp,Hse),M(gL,Hse,null),e(Li,i_o),e(Li,Use),e(Use,d_o),b(f,pje,u),b(f,yo,u),M(hL,yo,null),e(yo,c_o),e(yo,yi),e(yi,f_o),e(yi,HI),e(HI,m_o),e(yi,g_o),e(yi,UI),e(UI,h_o),e(yi,p_o),e(yo,__o),e(yo,pL),e(pL,u_o),e(pL,Jse),e(Jse,b_o),e(pL,v_o),e(yo,F_o),e(yo,at),M(_L,at,null),e(at,T_o),e(at,Yse),e(Yse,M_o),e(at,E_o),e(at,xi),e(xi,C_o),e(xi,Kse),e(Kse,w_o),e(xi,A_o),e(xi,JI),e(JI,L_o),e(xi,y_o),e(at,x_o),M(gp,at,null),e(yo,$_o),e(yo,Je),M(uL,Je,null),e(Je,k_o),e(Je,Zse),e(Zse,S_o),e(Je,R_o),e(Je,xa),e(xa,P_o),e(xa,ele),e(ele,B_o),e(xa,I_o),e(xa,ole),e(ole,N_o),e(xa,q_o),e(xa,rle),e(rle,j_o),e(xa,D_o),e(Je,G_o),e(Je,x),e(x,hp),e(hp,tle),e(tle,O_o),e(hp,V_o),e(hp,YI),e(YI,X_o),e(hp,z_o),e(x,W_o),e(x,pp),e(pp,ale),e(ale,Q_o),e(pp,H_o),e(pp,KI),e(KI,U_o),e(pp,J_o),e(x,Y_o),e(x,_p),e(_p,nle),e(nle,K_o),e(_p,Z_o),e(_p,ZI),e(ZI,euo),e(_p,ouo),e(x,ruo),e(x,up),e(up,sle),e(sle,tuo),e(up,auo),e(up,eN),e(eN,nuo),e(up,suo),e(x,luo),e(x,bp),e(bp,lle),e(lle,iuo),e(bp,duo),e(bp,oN),e(oN,cuo),e(bp,fuo),e(x,muo),e(x,vp),e(vp,ile),e(ile,guo),e(vp,huo),e(vp,rN),e(rN,puo),e(vp,_uo),e(x,uuo),e(x,Fp),e(Fp,dle),e(dle,buo),e(Fp,vuo),e(Fp,tN),e(tN,Fuo),e(Fp,Tuo),e(x,Muo),e(x,Tp),e(Tp,cle),e(cle,Euo),e(Tp,Cuo),e(Tp,aN),e(aN,wuo),e(Tp,Auo),e(x,Luo),e(x,Mp),e(Mp,fle),e(fle,yuo),e(Mp,xuo),e(Mp,nN),e(nN,$uo),e(Mp,kuo),e(x,Suo),e(x,Ep),e(Ep,mle),e(mle,Ruo),e(Ep,Puo),e(Ep,sN),e(sN,Buo),e(Ep,Iuo),e(x,Nuo),e(x,Cp),e(Cp,gle),e(gle,quo),e(Cp,juo),e(Cp,lN),e(lN,Duo),e(Cp,Guo),e(x,Ouo),e(x,wp),e(wp,hle),e(hle,Vuo),e(wp,Xuo),e(wp,iN),e(iN,zuo),e(wp,Wuo),e(x,Quo),e(x,Ap),e(Ap,ple),e(ple,Huo),e(Ap,Uuo),e(Ap,dN),e(dN,Juo),e(Ap,Yuo),e(x,Kuo),e(x,Lp),e(Lp,_le),e(_le,Zuo),e(Lp,e1o),e(Lp,cN),e(cN,o1o),e(Lp,r1o),e(x,t1o),e(x,yp),e(yp,ule),e(ule,a1o),e(yp,n1o),e(yp,fN),e(fN,s1o),e(yp,l1o),e(x,i1o),e(x,xp),e(xp,ble),e(ble,d1o),e(xp,c1o),e(xp,mN),e(mN,f1o),e(xp,m1o),e(x,g1o),e(x,$p),e($p,vle),e(vle,h1o),e($p,p1o),e($p,gN),e(gN,_1o),e($p,u1o),e(x,b1o),e(x,kp),e(kp,Fle),e(Fle,v1o),e(kp,F1o),e(kp,hN),e(hN,T1o),e(kp,M1o),e(x,E1o),e(x,Sp),e(Sp,Tle),e(Tle,C1o),e(Sp,w1o),e(Sp,pN),e(pN,A1o),e(Sp,L1o),e(x,y1o),e(x,Rp),e(Rp,Mle),e(Mle,x1o),e(Rp,$1o),e(Rp,_N),e(_N,k1o),e(Rp,S1o),e(x,R1o),e(x,Pp),e(Pp,Ele),e(Ele,P1o),e(Pp,B1o),e(Pp,uN),e(uN,I1o),e(Pp,N1o),e(x,q1o),e(x,Bp),e(Bp,Cle),e(Cle,j1o),e(Bp,D1o),e(Bp,bN),e(bN,G1o),e(Bp,O1o),e(x,V1o),e(x,Ip),e(Ip,wle),e(wle,X1o),e(Ip,z1o),e(Ip,vN),e(vN,W1o),e(Ip,Q1o),e(x,H1o),e(x,Np),e(Np,Ale),e(Ale,U1o),e(Np,J1o),e(Np,FN),e(FN,Y1o),e(Np,K1o),e(x,Z1o),e(x,qp),e(qp,Lle),e(Lle,ebo),e(qp,obo),e(qp,TN),e(TN,rbo),e(qp,tbo),e(x,abo),e(x,jp),e(jp,yle),e(yle,nbo),e(jp,sbo),e(jp,MN),e(MN,lbo),e(jp,ibo),e(x,dbo),e(x,Dp),e(Dp,xle),e(xle,cbo),e(Dp,fbo),e(Dp,EN),e(EN,mbo),e(Dp,gbo),e(x,hbo),e(x,Gp),e(Gp,$le),e($le,pbo),e(Gp,_bo),e(Gp,CN),e(CN,ubo),e(Gp,bbo),e(x,vbo),e(x,Op),e(Op,kle),e(kle,Fbo),e(Op,Tbo),e(Op,wN),e(wN,Mbo),e(Op,Ebo),e(x,Cbo),e(x,Vp),e(Vp,Sle),e(Sle,wbo),e(Vp,Abo),e(Vp,AN),e(AN,Lbo),e(Vp,ybo),e(x,xbo),e(x,Xp),e(Xp,Rle),e(Rle,$bo),e(Xp,kbo),e(Xp,LN),e(LN,Sbo),e(Xp,Rbo),e(x,Pbo),e(x,zp),e(zp,Ple),e(Ple,Bbo),e(zp,Ibo),e(zp,yN),e(yN,Nbo),e(zp,qbo),e(x,jbo),e(x,Ps),e(Ps,Ble),e(Ble,Dbo),e(Ps,Gbo),e(Ps,xN),e(xN,Obo),e(Ps,Vbo),e(Ps,$N),e($N,Xbo),e(Ps,zbo),e(x,Wbo),e(x,Wp),e(Wp,Ile),e(Ile,Qbo),e(Wp,Hbo),e(Wp,kN),e(kN,Ubo),e(Wp,Jbo),e(x,Ybo),e(x,Qp),e(Qp,Nle),e(Nle,Kbo),e(Qp,Zbo),e(Qp,SN),e(SN,e2o),e(Qp,o2o),e(x,r2o),e(x,Hp),e(Hp,qle),e(qle,t2o),e(Hp,a2o),e(Hp,RN),e(RN,n2o),e(Hp,s2o),e(x,l2o),e(x,Up),e(Up,jle),e(jle,i2o),e(Up,d2o),e(Up,PN),e(PN,c2o),e(Up,f2o),e(x,m2o),e(x,Jp),e(Jp,Dle),e(Dle,g2o),e(Jp,h2o),e(Jp,BN),e(BN,p2o),e(Jp,_2o),e(x,u2o),e(x,Yp),e(Yp,Gle),e(Gle,b2o),e(Yp,v2o),e(Yp,IN),e(IN,F2o),e(Yp,T2o),e(x,M2o),e(x,Kp),e(Kp,Ole),e(Ole,E2o),e(Kp,C2o),e(Kp,NN),e(NN,w2o),e(Kp,A2o),e(x,L2o),e(x,Zp),e(Zp,Vle),e(Vle,y2o),e(Zp,x2o),e(Zp,qN),e(qN,$2o),e(Zp,k2o),e(x,S2o),e(x,e_),e(e_,Xle),e(Xle,R2o),e(e_,P2o),e(e_,jN),e(jN,B2o),e(e_,I2o),e(x,N2o),e(x,o_),e(o_,zle),e(zle,q2o),e(o_,j2o),e(o_,DN),e(DN,D2o),e(o_,G2o),e(x,O2o),e(x,r_),e(r_,Wle),e(Wle,V2o),e(r_,X2o),e(r_,GN),e(GN,z2o),e(r_,W2o),e(x,Q2o),e(x,t_),e(t_,Qle),e(Qle,H2o),e(t_,U2o),e(t_,ON),e(ON,J2o),e(t_,Y2o),e(x,K2o),e(x,a_),e(a_,Hle),e(Hle,Z2o),e(a_,e4o),e(a_,VN),e(VN,o4o),e(a_,r4o),e(x,t4o),e(x,n_),e(n_,Ule),e(Ule,a4o),e(n_,n4o),e(n_,XN),e(XN,s4o),e(n_,l4o),e(x,i4o),e(x,s_),e(s_,Jle),e(Jle,d4o),e(s_,c4o),e(s_,zN),e(zN,f4o),e(s_,m4o),e(x,g4o),e(x,l_),e(l_,Yle),e(Yle,h4o),e(l_,p4o),e(l_,WN),e(WN,_4o),e(l_,u4o),e(x,b4o),e(x,i_),e(i_,Kle),e(Kle,v4o),e(i_,F4o),e(i_,QN),e(QN,T4o),e(i_,M4o),e(x,E4o),e(x,d_),e(d_,Zle),e(Zle,C4o),e(d_,w4o),e(d_,HN),e(HN,A4o),e(d_,L4o),e(x,y4o),e(x,c_),e(c_,eie),e(eie,x4o),e(c_,$4o),e(c_,UN),e(UN,k4o),e(c_,S4o),e(x,R4o),e(x,f_),e(f_,oie),e(oie,P4o),e(f_,B4o),e(f_,JN),e(JN,I4o),e(f_,N4o),e(x,q4o),e(x,m_),e(m_,rie),e(rie,j4o),e(m_,D4o),e(m_,YN),e(YN,G4o),e(m_,O4o),e(x,V4o),e(x,g_),e(g_,tie),e(tie,X4o),e(g_,z4o),e(g_,KN),e(KN,W4o),e(g_,Q4o),e(x,H4o),e(x,h_),e(h_,aie),e(aie,U4o),e(h_,J4o),e(h_,ZN),e(ZN,Y4o),e(h_,K4o),e(x,Z4o),e(x,p_),e(p_,nie),e(nie,evo),e(p_,ovo),e(p_,eq),e(eq,rvo),e(p_,tvo),e(x,avo),e(x,__),e(__,sie),e(sie,nvo),e(__,svo),e(__,oq),e(oq,lvo),e(__,ivo),e(x,dvo),e(x,u_),e(u_,lie),e(lie,cvo),e(u_,fvo),e(u_,rq),e(rq,mvo),e(u_,gvo),e(x,hvo),e(x,b_),e(b_,iie),e(iie,pvo),e(b_,_vo),e(b_,tq),e(tq,uvo),e(b_,bvo),e(x,vvo),e(x,v_),e(v_,die),e(die,Fvo),e(v_,Tvo),e(v_,aq),e(aq,Mvo),e(v_,Evo),e(x,Cvo),e(x,F_),e(F_,cie),e(cie,wvo),e(F_,Avo),e(F_,nq),e(nq,Lvo),e(F_,yvo),e(x,xvo),e(x,T_),e(T_,fie),e(fie,$vo),e(T_,kvo),e(T_,sq),e(sq,Svo),e(T_,Rvo),e(x,Pvo),e(x,M_),e(M_,mie),e(mie,Bvo),e(M_,Ivo),e(M_,lq),e(lq,Nvo),e(M_,qvo),e(x,jvo),e(x,E_),e(E_,gie),e(gie,Dvo),e(E_,Gvo),e(E_,iq),e(iq,Ovo),e(E_,Vvo),e(x,Xvo),e(x,C_),e(C_,hie),e(hie,zvo),e(C_,Wvo),e(C_,dq),e(dq,Qvo),e(C_,Hvo),e(x,Uvo),e(x,w_),e(w_,pie),e(pie,Jvo),e(w_,Yvo),e(w_,cq),e(cq,Kvo),e(w_,Zvo),e(x,e5o),e(x,A_),e(A_,_ie),e(_ie,o5o),e(A_,r5o),e(A_,fq),e(fq,t5o),e(A_,a5o),e(x,n5o),e(x,L_),e(L_,uie),e(uie,s5o),e(L_,l5o),e(L_,mq),e(mq,i5o),e(L_,d5o),e(x,c5o),e(x,y_),e(y_,bie),e(bie,f5o),e(y_,m5o),e(y_,gq),e(gq,g5o),e(y_,h5o),e(x,p5o),e(x,x_),e(x_,vie),e(vie,_5o),e(x_,u5o),e(x_,hq),e(hq,b5o),e(x_,v5o),e(x,F5o),e(x,$_),e($_,Fie),e(Fie,T5o),e($_,M5o),e($_,pq),e(pq,E5o),e($_,C5o),e(x,w5o),e(x,k_),e(k_,Tie),e(Tie,A5o),e(k_,L5o),e(k_,_q),e(_q,y5o),e(k_,x5o),e(x,$5o),e(x,S_),e(S_,Mie),e(Mie,k5o),e(S_,S5o),e(S_,uq),e(uq,R5o),e(S_,P5o),e(x,B5o),e(x,R_),e(R_,Eie),e(Eie,I5o),e(R_,N5o),e(R_,bq),e(bq,q5o),e(R_,j5o),e(x,D5o),e(x,P_),e(P_,Cie),e(Cie,G5o),e(P_,O5o),e(P_,vq),e(vq,V5o),e(P_,X5o),e(x,z5o),e(x,B_),e(B_,wie),e(wie,W5o),e(B_,Q5o),e(B_,Fq),e(Fq,H5o),e(B_,U5o),e(x,J5o),e(x,I_),e(I_,Aie),e(Aie,Y5o),e(I_,K5o),e(I_,Tq),e(Tq,Z5o),e(I_,e3o),e(x,o3o),e(x,N_),e(N_,Lie),e(Lie,r3o),e(N_,t3o),e(N_,Mq),e(Mq,a3o),e(N_,n3o),e(x,s3o),e(x,q_),e(q_,yie),e(yie,l3o),e(q_,i3o),e(q_,Eq),e(Eq,d3o),e(q_,c3o),e(x,f3o),e(x,j_),e(j_,xie),e(xie,m3o),e(j_,g3o),e(j_,Cq),e(Cq,h3o),e(j_,p3o),e(x,_3o),e(x,D_),e(D_,$ie),e($ie,u3o),e(D_,b3o),e(D_,wq),e(wq,v3o),e(D_,F3o),e(x,T3o),e(x,G_),e(G_,kie),e(kie,M3o),e(G_,E3o),e(G_,Aq),e(Aq,C3o),e(G_,w3o),e(x,A3o),e(x,O_),e(O_,Sie),e(Sie,L3o),e(O_,y3o),e(O_,Lq),e(Lq,x3o),e(O_,$3o),e(x,k3o),e(x,V_),e(V_,Rie),e(Rie,S3o),e(V_,R3o),e(V_,yq),e(yq,P3o),e(V_,B3o),e(x,I3o),e(x,X_),e(X_,Pie),e(Pie,N3o),e(X_,q3o),e(X_,xq),e(xq,j3o),e(X_,D3o),e(x,G3o),e(x,z_),e(z_,Bie),e(Bie,O3o),e(z_,V3o),e(z_,$q),e($q,X3o),e(z_,z3o),e(x,W3o),e(x,W_),e(W_,Iie),e(Iie,Q3o),e(W_,H3o),e(W_,kq),e(kq,U3o),e(W_,J3o),e(x,Y3o),e(x,Q_),e(Q_,Nie),e(Nie,K3o),e(Q_,Z3o),e(Q_,Sq),e(Sq,eFo),e(Q_,oFo),e(x,rFo),e(x,H_),e(H_,qie),e(qie,tFo),e(H_,aFo),e(H_,Rq),e(Rq,nFo),e(H_,sFo),e(x,lFo),e(x,U_),e(U_,jie),e(jie,iFo),e(U_,dFo),e(U_,Pq),e(Pq,cFo),e(U_,fFo),e(x,mFo),e(x,J_),e(J_,Die),e(Die,gFo),e(J_,hFo),e(J_,Bq),e(Bq,pFo),e(J_,_Fo),e(x,uFo),e(x,Y_),e(Y_,Gie),e(Gie,bFo),e(Y_,vFo),e(Y_,Iq),e(Iq,FFo),e(Y_,TFo),e(x,MFo),e(x,K_),e(K_,Oie),e(Oie,EFo),e(K_,CFo),e(K_,Nq),e(Nq,wFo),e(K_,AFo),e(x,LFo),e(x,Z_),e(Z_,Vie),e(Vie,yFo),e(Z_,xFo),e(Z_,qq),e(qq,$Fo),e(Z_,kFo),e(x,SFo),e(x,eu),e(eu,Xie),e(Xie,RFo),e(eu,PFo),e(eu,jq),e(jq,BFo),e(eu,IFo),e(x,NFo),e(x,ou),e(ou,zie),e(zie,qFo),e(ou,jFo),e(ou,Dq),e(Dq,DFo),e(ou,GFo),e(x,OFo),e(x,ru),e(ru,Wie),e(Wie,VFo),e(ru,XFo),e(ru,Gq),e(Gq,zFo),e(ru,WFo),e(x,QFo),e(x,tu),e(tu,Qie),e(Qie,HFo),e(tu,UFo),e(tu,Oq),e(Oq,JFo),e(tu,YFo),e(x,KFo),e(x,au),e(au,Hie),e(Hie,ZFo),e(au,eTo),e(au,Vq),e(Vq,oTo),e(au,rTo),e(x,tTo),e(x,nu),e(nu,Uie),e(Uie,aTo),e(nu,nTo),e(nu,Xq),e(Xq,sTo),e(nu,lTo),e(x,iTo),e(x,su),e(su,Jie),e(Jie,dTo),e(su,cTo),e(su,zq),e(zq,fTo),e(su,mTo),e(x,gTo),e(x,lu),e(lu,Yie),e(Yie,hTo),e(lu,pTo),e(lu,Wq),e(Wq,_To),e(lu,uTo),e(x,bTo),e(x,iu),e(iu,Kie),e(Kie,vTo),e(iu,FTo),e(iu,Qq),e(Qq,TTo),e(iu,MTo),e(Je,ETo),e(Je,du),e(du,CTo),e(du,Zie),e(Zie,wTo),e(du,ATo),e(du,ede),e(ede,LTo),e(Je,yTo),M(cu,Je,null),b(f,_je,u),b(f,$i,u),e($i,fu),e(fu,ode),M(bL,ode,null),e($i,xTo),e($i,rde),e(rde,$To),b(f,uje,u),b(f,xo,u),M(vL,xo,null),e(xo,kTo),e(xo,ki),e(ki,STo),e(ki,Hq),e(Hq,RTo),e(ki,PTo),e(ki,Uq),e(Uq,BTo),e(ki,ITo),e(xo,NTo),e(xo,FL),e(FL,qTo),e(FL,tde),e(tde,jTo),e(FL,DTo),e(xo,GTo),e(xo,nt),M(TL,nt,null),e(nt,OTo),e(nt,ade),e(ade,VTo),e(nt,XTo),e(nt,Si),e(Si,zTo),e(Si,nde),e(nde,WTo),e(Si,QTo),e(Si,Jq),e(Jq,HTo),e(Si,UTo),e(nt,JTo),M(mu,nt,null),e(xo,YTo),e(xo,Ye),M(ML,Ye,null),e(Ye,KTo),e(Ye,sde),e(sde,ZTo),e(Ye,e7o),e(Ye,$a),e($a,o7o),e($a,lde),e(lde,r7o),e($a,t7o),e($a,ide),e(ide,a7o),e($a,n7o),e($a,dde),e(dde,s7o),e($a,l7o),e(Ye,i7o),e(Ye,G),e(G,gu),e(gu,cde),e(cde,d7o),e(gu,c7o),e(gu,Yq),e(Yq,f7o),e(gu,m7o),e(G,g7o),e(G,hu),e(hu,fde),e(fde,h7o),e(hu,p7o),e(hu,Kq),e(Kq,_7o),e(hu,u7o),e(G,b7o),e(G,pu),e(pu,mde),e(mde,v7o),e(pu,F7o),e(pu,Zq),e(Zq,T7o),e(pu,M7o),e(G,E7o),e(G,_u),e(_u,gde),e(gde,C7o),e(_u,w7o),e(_u,ej),e(ej,A7o),e(_u,L7o),e(G,y7o),e(G,uu),e(uu,hde),e(hde,x7o),e(uu,$7o),e(uu,oj),e(oj,k7o),e(uu,S7o),e(G,R7o),e(G,bu),e(bu,pde),e(pde,P7o),e(bu,B7o),e(bu,rj),e(rj,I7o),e(bu,N7o),e(G,q7o),e(G,vu),e(vu,_de),e(_de,j7o),e(vu,D7o),e(vu,tj),e(tj,G7o),e(vu,O7o),e(G,V7o),e(G,Fu),e(Fu,ude),e(ude,X7o),e(Fu,z7o),e(Fu,aj),e(aj,W7o),e(Fu,Q7o),e(G,H7o),e(G,Tu),e(Tu,bde),e(bde,U7o),e(Tu,J7o),e(Tu,nj),e(nj,Y7o),e(Tu,K7o),e(G,Z7o),e(G,Mu),e(Mu,vde),e(vde,eMo),e(Mu,oMo),e(Mu,sj),e(sj,rMo),e(Mu,tMo),e(G,aMo),e(G,Eu),e(Eu,Fde),e(Fde,nMo),e(Eu,sMo),e(Eu,lj),e(lj,lMo),e(Eu,iMo),e(G,dMo),e(G,Cu),e(Cu,Tde),e(Tde,cMo),e(Cu,fMo),e(Cu,ij),e(ij,mMo),e(Cu,gMo),e(G,hMo),e(G,wu),e(wu,Mde),e(Mde,pMo),e(wu,_Mo),e(wu,dj),e(dj,uMo),e(wu,bMo),e(G,vMo),e(G,Au),e(Au,Ede),e(Ede,FMo),e(Au,TMo),e(Au,cj),e(cj,MMo),e(Au,EMo),e(G,CMo),e(G,Lu),e(Lu,Cde),e(Cde,wMo),e(Lu,AMo),e(Lu,fj),e(fj,LMo),e(Lu,yMo),e(G,xMo),e(G,yu),e(yu,wde),e(wde,$Mo),e(yu,kMo),e(yu,mj),e(mj,SMo),e(yu,RMo),e(G,PMo),e(G,xu),e(xu,Ade),e(Ade,BMo),e(xu,IMo),e(xu,gj),e(gj,NMo),e(xu,qMo),e(G,jMo),e(G,$u),e($u,Lde),e(Lde,DMo),e($u,GMo),e($u,hj),e(hj,OMo),e($u,VMo),e(G,XMo),e(G,ku),e(ku,yde),e(yde,zMo),e(ku,WMo),e(ku,pj),e(pj,QMo),e(ku,HMo),e(G,UMo),e(G,Su),e(Su,xde),e(xde,JMo),e(Su,YMo),e(Su,_j),e(_j,KMo),e(Su,ZMo),e(G,eEo),e(G,Ru),e(Ru,$de),e($de,oEo),e(Ru,rEo),e(Ru,uj),e(uj,tEo),e(Ru,aEo),e(G,nEo),e(G,Pu),e(Pu,kde),e(kde,sEo),e(Pu,lEo),e(Pu,bj),e(bj,iEo),e(Pu,dEo),e(G,cEo),e(G,Bu),e(Bu,Sde),e(Sde,fEo),e(Bu,mEo),e(Bu,vj),e(vj,gEo),e(Bu,hEo),e(G,pEo),e(G,Iu),e(Iu,Rde),e(Rde,_Eo),e(Iu,uEo),e(Iu,Fj),e(Fj,bEo),e(Iu,vEo),e(G,FEo),e(G,Nu),e(Nu,Pde),e(Pde,TEo),e(Nu,MEo),e(Nu,Tj),e(Tj,EEo),e(Nu,CEo),e(G,wEo),e(G,qu),e(qu,Bde),e(Bde,AEo),e(qu,LEo),e(qu,Mj),e(Mj,yEo),e(qu,xEo),e(G,$Eo),e(G,ju),e(ju,Ide),e(Ide,kEo),e(ju,SEo),e(ju,Ej),e(Ej,REo),e(ju,PEo),e(G,BEo),e(G,Du),e(Du,Nde),e(Nde,IEo),e(Du,NEo),e(Du,Cj),e(Cj,qEo),e(Du,jEo),e(G,DEo),e(G,Gu),e(Gu,qde),e(qde,GEo),e(Gu,OEo),e(Gu,wj),e(wj,VEo),e(Gu,XEo),e(G,zEo),e(G,Ou),e(Ou,jde),e(jde,WEo),e(Ou,QEo),e(Ou,Aj),e(Aj,HEo),e(Ou,UEo),e(G,JEo),e(G,Vu),e(Vu,Dde),e(Dde,YEo),e(Vu,KEo),e(Vu,Lj),e(Lj,ZEo),e(Vu,eCo),e(G,oCo),e(G,Xu),e(Xu,Gde),e(Gde,rCo),e(Xu,tCo),e(Xu,yj),e(yj,aCo),e(Xu,nCo),e(G,sCo),e(G,zu),e(zu,Ode),e(Ode,lCo),e(zu,iCo),e(zu,xj),e(xj,dCo),e(zu,cCo),e(G,fCo),e(G,Wu),e(Wu,Vde),e(Vde,mCo),e(Wu,gCo),e(Wu,$j),e($j,hCo),e(Wu,pCo),e(G,_Co),e(G,Qu),e(Qu,Xde),e(Xde,uCo),e(Qu,bCo),e(Qu,kj),e(kj,vCo),e(Qu,FCo),e(G,TCo),e(G,Hu),e(Hu,zde),e(zde,MCo),e(Hu,ECo),e(Hu,Sj),e(Sj,CCo),e(Hu,wCo),e(G,ACo),e(G,Uu),e(Uu,Wde),e(Wde,LCo),e(Uu,yCo),e(Uu,Rj),e(Rj,xCo),e(Uu,$Co),e(G,kCo),e(G,Ju),e(Ju,Qde),e(Qde,SCo),e(Ju,RCo),e(Ju,Pj),e(Pj,PCo),e(Ju,BCo),e(G,ICo),e(G,Yu),e(Yu,Hde),e(Hde,NCo),e(Yu,qCo),e(Yu,Bj),e(Bj,jCo),e(Yu,DCo),e(G,GCo),e(G,Ku),e(Ku,Ude),e(Ude,OCo),e(Ku,VCo),e(Ku,Ij),e(Ij,XCo),e(Ku,zCo),e(G,WCo),e(G,Zu),e(Zu,Jde),e(Jde,QCo),e(Zu,HCo),e(Zu,Nj),e(Nj,UCo),e(Zu,JCo),e(G,YCo),e(G,e1),e(e1,Yde),e(Yde,KCo),e(e1,ZCo),e(e1,qj),e(qj,e0o),e(e1,o0o),e(Ye,r0o),e(Ye,o1),e(o1,t0o),e(o1,Kde),e(Kde,a0o),e(o1,n0o),e(o1,Zde),e(Zde,s0o),e(Ye,l0o),M(r1,Ye,null),b(f,bje,u),b(f,Ri,u),e(Ri,t1),e(t1,ece),M(EL,ece,null),e(Ri,i0o),e(Ri,oce),e(oce,d0o),b(f,vje,u),b(f,$o,u),M(CL,$o,null),e($o,c0o),e($o,Pi),e(Pi,f0o),e(Pi,jj),e(jj,m0o),e(Pi,g0o),e(Pi,Dj),e(Dj,h0o),e(Pi,p0o),e($o,_0o),e($o,wL),e(wL,u0o),e(wL,rce),e(rce,b0o),e(wL,v0o),e($o,F0o),e($o,st),M(AL,st,null),e(st,T0o),e(st,tce),e(tce,M0o),e(st,E0o),e(st,Bi),e(Bi,C0o),e(Bi,ace),e(ace,w0o),e(Bi,A0o),e(Bi,Gj),e(Gj,L0o),e(Bi,y0o),e(st,x0o),M(a1,st,null),e($o,$0o),e($o,Ke),M(LL,Ke,null),e(Ke,k0o),e(Ke,nce),e(nce,S0o),e(Ke,R0o),e(Ke,ka),e(ka,P0o),e(ka,sce),e(sce,B0o),e(ka,I0o),e(ka,lce),e(lce,N0o),e(ka,q0o),e(ka,ice),e(ice,j0o),e(ka,D0o),e(Ke,G0o),e(Ke,z),e(z,n1),e(n1,dce),e(dce,O0o),e(n1,V0o),e(n1,Oj),e(Oj,X0o),e(n1,z0o),e(z,W0o),e(z,s1),e(s1,cce),e(cce,Q0o),e(s1,H0o),e(s1,Vj),e(Vj,U0o),e(s1,J0o),e(z,Y0o),e(z,l1),e(l1,fce),e(fce,K0o),e(l1,Z0o),e(l1,Xj),e(Xj,ewo),e(l1,owo),e(z,rwo),e(z,i1),e(i1,mce),e(mce,two),e(i1,awo),e(i1,zj),e(zj,nwo),e(i1,swo),e(z,lwo),e(z,d1),e(d1,gce),e(gce,iwo),e(d1,dwo),e(d1,Wj),e(Wj,cwo),e(d1,fwo),e(z,mwo),e(z,c1),e(c1,hce),e(hce,gwo),e(c1,hwo),e(c1,Qj),e(Qj,pwo),e(c1,_wo),e(z,uwo),e(z,f1),e(f1,pce),e(pce,bwo),e(f1,vwo),e(f1,Hj),e(Hj,Fwo),e(f1,Two),e(z,Mwo),e(z,m1),e(m1,_ce),e(_ce,Ewo),e(m1,Cwo),e(m1,Uj),e(Uj,wwo),e(m1,Awo),e(z,Lwo),e(z,g1),e(g1,uce),e(uce,ywo),e(g1,xwo),e(g1,Jj),e(Jj,$wo),e(g1,kwo),e(z,Swo),e(z,h1),e(h1,bce),e(bce,Rwo),e(h1,Pwo),e(h1,Yj),e(Yj,Bwo),e(h1,Iwo),e(z,Nwo),e(z,p1),e(p1,vce),e(vce,qwo),e(p1,jwo),e(p1,Kj),e(Kj,Dwo),e(p1,Gwo),e(z,Owo),e(z,_1),e(_1,Fce),e(Fce,Vwo),e(_1,Xwo),e(_1,Zj),e(Zj,zwo),e(_1,Wwo),e(z,Qwo),e(z,u1),e(u1,Tce),e(Tce,Hwo),e(u1,Uwo),e(u1,eD),e(eD,Jwo),e(u1,Ywo),e(z,Kwo),e(z,b1),e(b1,Mce),e(Mce,Zwo),e(b1,eAo),e(b1,oD),e(oD,oAo),e(b1,rAo),e(z,tAo),e(z,v1),e(v1,Ece),e(Ece,aAo),e(v1,nAo),e(v1,rD),e(rD,sAo),e(v1,lAo),e(z,iAo),e(z,F1),e(F1,Cce),e(Cce,dAo),e(F1,cAo),e(F1,tD),e(tD,fAo),e(F1,mAo),e(z,gAo),e(z,T1),e(T1,wce),e(wce,hAo),e(T1,pAo),e(T1,aD),e(aD,_Ao),e(T1,uAo),e(z,bAo),e(z,M1),e(M1,Ace),e(Ace,vAo),e(M1,FAo),e(M1,nD),e(nD,TAo),e(M1,MAo),e(z,EAo),e(z,E1),e(E1,Lce),e(Lce,CAo),e(E1,wAo),e(E1,sD),e(sD,AAo),e(E1,LAo),e(z,yAo),e(z,C1),e(C1,yce),e(yce,xAo),e(C1,$Ao),e(C1,lD),e(lD,kAo),e(C1,SAo),e(z,RAo),e(z,w1),e(w1,xce),e(xce,PAo),e(w1,BAo),e(w1,iD),e(iD,IAo),e(w1,NAo),e(z,qAo),e(z,A1),e(A1,$ce),e($ce,jAo),e(A1,DAo),e(A1,dD),e(dD,GAo),e(A1,OAo),e(z,VAo),e(z,L1),e(L1,kce),e(kce,XAo),e(L1,zAo),e(L1,cD),e(cD,WAo),e(L1,QAo),e(z,HAo),e(z,y1),e(y1,Sce),e(Sce,UAo),e(y1,JAo),e(y1,fD),e(fD,YAo),e(y1,KAo),e(z,ZAo),e(z,x1),e(x1,Rce),e(Rce,e6o),e(x1,o6o),e(x1,mD),e(mD,r6o),e(x1,t6o),e(z,a6o),e(z,$1),e($1,Pce),e(Pce,n6o),e($1,s6o),e($1,gD),e(gD,l6o),e($1,i6o),e(z,d6o),e(z,k1),e(k1,Bce),e(Bce,c6o),e(k1,f6o),e(k1,hD),e(hD,m6o),e(k1,g6o),e(z,h6o),e(z,S1),e(S1,Ice),e(Ice,p6o),e(S1,_6o),e(S1,pD),e(pD,u6o),e(S1,b6o),e(z,v6o),e(z,R1),e(R1,Nce),e(Nce,F6o),e(R1,T6o),e(R1,_D),e(_D,M6o),e(R1,E6o),e(z,C6o),e(z,P1),e(P1,qce),e(qce,w6o),e(P1,A6o),e(P1,uD),e(uD,L6o),e(P1,y6o),e(z,x6o),e(z,B1),e(B1,jce),e(jce,$6o),e(B1,k6o),e(B1,bD),e(bD,S6o),e(B1,R6o),e(z,P6o),e(z,I1),e(I1,Dce),e(Dce,B6o),e(I1,I6o),e(I1,vD),e(vD,N6o),e(I1,q6o),e(z,j6o),e(z,N1),e(N1,Gce),e(Gce,D6o),e(N1,G6o),e(N1,FD),e(FD,O6o),e(N1,V6o),e(z,X6o),e(z,q1),e(q1,Oce),e(Oce,z6o),e(q1,W6o),e(q1,TD),e(TD,Q6o),e(q1,H6o),e(z,U6o),e(z,j1),e(j1,Vce),e(Vce,J6o),e(j1,Y6o),e(j1,MD),e(MD,K6o),e(j1,Z6o),e(z,eLo),e(z,D1),e(D1,Xce),e(Xce,oLo),e(D1,rLo),e(D1,ED),e(ED,tLo),e(D1,aLo),e(z,nLo),e(z,G1),e(G1,zce),e(zce,sLo),e(G1,lLo),e(G1,CD),e(CD,iLo),e(G1,dLo),e(Ke,cLo),e(Ke,O1),e(O1,fLo),e(O1,Wce),e(Wce,mLo),e(O1,gLo),e(O1,Qce),e(Qce,hLo),e(Ke,pLo),M(V1,Ke,null),b(f,Fje,u),b(f,Ii,u),e(Ii,X1),e(X1,Hce),M(yL,Hce,null),e(Ii,_Lo),e(Ii,Uce),e(Uce,uLo),b(f,Tje,u),b(f,ko,u),M(xL,ko,null),e(ko,bLo),e(ko,Ni),e(Ni,vLo),e(Ni,wD),e(wD,FLo),e(Ni,TLo),e(Ni,AD),e(AD,MLo),e(Ni,ELo),e(ko,CLo),e(ko,$L),e($L,wLo),e($L,Jce),e(Jce,ALo),e($L,LLo),e(ko,yLo),e(ko,lt),M(kL,lt,null),e(lt,xLo),e(lt,Yce),e(Yce,$Lo),e(lt,kLo),e(lt,qi),e(qi,SLo),e(qi,Kce),e(Kce,RLo),e(qi,PLo),e(qi,LD),e(LD,BLo),e(qi,ILo),e(lt,NLo),M(z1,lt,null),e(ko,qLo),e(ko,Ze),M(SL,Ze,null),e(Ze,jLo),e(Ze,Zce),e(Zce,DLo),e(Ze,GLo),e(Ze,Sa),e(Sa,OLo),e(Sa,efe),e(efe,VLo),e(Sa,XLo),e(Sa,ofe),e(ofe,zLo),e(Sa,WLo),e(Sa,rfe),e(rfe,QLo),e(Sa,HLo),e(Ze,ULo),e(Ze,W),e(W,W1),e(W1,tfe),e(tfe,JLo),e(W1,YLo),e(W1,yD),e(yD,KLo),e(W1,ZLo),e(W,eyo),e(W,Q1),e(Q1,afe),e(afe,oyo),e(Q1,ryo),e(Q1,xD),e(xD,tyo),e(Q1,ayo),e(W,nyo),e(W,H1),e(H1,nfe),e(nfe,syo),e(H1,lyo),e(H1,$D),e($D,iyo),e(H1,dyo),e(W,cyo),e(W,U1),e(U1,sfe),e(sfe,fyo),e(U1,myo),e(U1,kD),e(kD,gyo),e(U1,hyo),e(W,pyo),e(W,J1),e(J1,lfe),e(lfe,_yo),e(J1,uyo),e(J1,SD),e(SD,byo),e(J1,vyo),e(W,Fyo),e(W,Y1),e(Y1,ife),e(ife,Tyo),e(Y1,Myo),e(Y1,RD),e(RD,Eyo),e(Y1,Cyo),e(W,wyo),e(W,K1),e(K1,dfe),e(dfe,Ayo),e(K1,Lyo),e(K1,PD),e(PD,yyo),e(K1,xyo),e(W,$yo),e(W,Z1),e(Z1,cfe),e(cfe,kyo),e(Z1,Syo),e(Z1,BD),e(BD,Ryo),e(Z1,Pyo),e(W,Byo),e(W,eb),e(eb,ffe),e(ffe,Iyo),e(eb,Nyo),e(eb,ID),e(ID,qyo),e(eb,jyo),e(W,Dyo),e(W,ob),e(ob,mfe),e(mfe,Gyo),e(ob,Oyo),e(ob,ND),e(ND,Vyo),e(ob,Xyo),e(W,zyo),e(W,rb),e(rb,gfe),e(gfe,Wyo),e(rb,Qyo),e(rb,qD),e(qD,Hyo),e(rb,Uyo),e(W,Jyo),e(W,tb),e(tb,hfe),e(hfe,Yyo),e(tb,Kyo),e(tb,jD),e(jD,Zyo),e(tb,e8o),e(W,o8o),e(W,ab),e(ab,pfe),e(pfe,r8o),e(ab,t8o),e(ab,DD),e(DD,a8o),e(ab,n8o),e(W,s8o),e(W,nb),e(nb,_fe),e(_fe,l8o),e(nb,i8o),e(nb,GD),e(GD,d8o),e(nb,c8o),e(W,f8o),e(W,sb),e(sb,ufe),e(ufe,m8o),e(sb,g8o),e(sb,OD),e(OD,h8o),e(sb,p8o),e(W,_8o),e(W,lb),e(lb,bfe),e(bfe,u8o),e(lb,b8o),e(lb,VD),e(VD,v8o),e(lb,F8o),e(W,T8o),e(W,ib),e(ib,vfe),e(vfe,M8o),e(ib,E8o),e(ib,XD),e(XD,C8o),e(ib,w8o),e(W,A8o),e(W,db),e(db,Ffe),e(Ffe,L8o),e(db,y8o),e(db,zD),e(zD,x8o),e(db,$8o),e(W,k8o),e(W,cb),e(cb,Tfe),e(Tfe,S8o),e(cb,R8o),e(cb,WD),e(WD,P8o),e(cb,B8o),e(W,I8o),e(W,fb),e(fb,Mfe),e(Mfe,N8o),e(fb,q8o),e(fb,QD),e(QD,j8o),e(fb,D8o),e(W,G8o),e(W,mb),e(mb,Efe),e(Efe,O8o),e(mb,V8o),e(mb,HD),e(HD,X8o),e(mb,z8o),e(W,W8o),e(W,gb),e(gb,Cfe),e(Cfe,Q8o),e(gb,H8o),e(gb,UD),e(UD,U8o),e(gb,J8o),e(W,Y8o),e(W,hb),e(hb,wfe),e(wfe,K8o),e(hb,Z8o),e(hb,JD),e(JD,e9o),e(hb,o9o),e(W,r9o),e(W,pb),e(pb,Afe),e(Afe,t9o),e(pb,a9o),e(pb,YD),e(YD,n9o),e(pb,s9o),e(W,l9o),e(W,_b),e(_b,Lfe),e(Lfe,i9o),e(_b,d9o),e(_b,KD),e(KD,c9o),e(_b,f9o),e(W,m9o),e(W,ub),e(ub,yfe),e(yfe,g9o),e(ub,h9o),e(ub,ZD),e(ZD,p9o),e(ub,_9o),e(W,u9o),e(W,bb),e(bb,xfe),e(xfe,b9o),e(bb,v9o),e(bb,eG),e(eG,F9o),e(bb,T9o),e(W,M9o),e(W,vb),e(vb,$fe),e($fe,E9o),e(vb,C9o),e(vb,oG),e(oG,w9o),e(vb,A9o),e(W,L9o),e(W,Fb),e(Fb,kfe),e(kfe,y9o),e(Fb,x9o),e(Fb,rG),e(rG,$9o),e(Fb,k9o),e(W,S9o),e(W,Tb),e(Tb,Sfe),e(Sfe,R9o),e(Tb,P9o),e(Tb,tG),e(tG,B9o),e(Tb,I9o),e(W,N9o),e(W,Mb),e(Mb,Rfe),e(Rfe,q9o),e(Mb,j9o),e(Mb,aG),e(aG,D9o),e(Mb,G9o),e(W,O9o),e(W,Eb),e(Eb,Pfe),e(Pfe,V9o),e(Eb,X9o),e(Eb,Bfe),e(Bfe,z9o),e(Eb,W9o),e(W,Q9o),e(W,Cb),e(Cb,Ife),e(Ife,H9o),e(Cb,U9o),e(Cb,nG),e(nG,J9o),e(Cb,Y9o),e(W,K9o),e(W,wb),e(wb,Nfe),e(Nfe,Z9o),e(wb,exo),e(wb,sG),e(sG,oxo),e(wb,rxo),e(W,txo),e(W,Ab),e(Ab,qfe),e(qfe,axo),e(Ab,nxo),e(Ab,lG),e(lG,sxo),e(Ab,lxo),e(W,ixo),e(W,Lb),e(Lb,jfe),e(jfe,dxo),e(Lb,cxo),e(Lb,iG),e(iG,fxo),e(Lb,mxo),e(Ze,gxo),e(Ze,yb),e(yb,hxo),e(yb,Dfe),e(Dfe,pxo),e(yb,_xo),e(yb,Gfe),e(Gfe,uxo),e(Ze,bxo),M(xb,Ze,null),b(f,Mje,u),b(f,ji,u),e(ji,$b),e($b,Ofe),M(RL,Ofe,null),e(ji,vxo),e(ji,Vfe),e(Vfe,Fxo),b(f,Eje,u),b(f,So,u),M(PL,So,null),e(So,Txo),e(So,Di),e(Di,Mxo),e(Di,dG),e(dG,Exo),e(Di,Cxo),e(Di,cG),e(cG,wxo),e(Di,Axo),e(So,Lxo),e(So,BL),e(BL,yxo),e(BL,Xfe),e(Xfe,xxo),e(BL,$xo),e(So,kxo),e(So,it),M(IL,it,null),e(it,Sxo),e(it,zfe),e(zfe,Rxo),e(it,Pxo),e(it,Gi),e(Gi,Bxo),e(Gi,Wfe),e(Wfe,Ixo),e(Gi,Nxo),e(Gi,fG),e(fG,qxo),e(Gi,jxo),e(it,Dxo),M(kb,it,null),e(So,Gxo),e(So,eo),M(NL,eo,null),e(eo,Oxo),e(eo,Qfe),e(Qfe,Vxo),e(eo,Xxo),e(eo,Ra),e(Ra,zxo),e(Ra,Hfe),e(Hfe,Wxo),e(Ra,Qxo),e(Ra,Ufe),e(Ufe,Hxo),e(Ra,Uxo),e(Ra,Jfe),e(Jfe,Jxo),e(Ra,Yxo),e(eo,Kxo),e(eo,_e),e(_e,Sb),e(Sb,Yfe),e(Yfe,Zxo),e(Sb,e$o),e(Sb,mG),e(mG,o$o),e(Sb,r$o),e(_e,t$o),e(_e,Rb),e(Rb,Kfe),e(Kfe,a$o),e(Rb,n$o),e(Rb,gG),e(gG,s$o),e(Rb,l$o),e(_e,i$o),e(_e,Pb),e(Pb,Zfe),e(Zfe,d$o),e(Pb,c$o),e(Pb,hG),e(hG,f$o),e(Pb,m$o),e(_e,g$o),e(_e,Bb),e(Bb,eme),e(eme,h$o),e(Bb,p$o),e(Bb,pG),e(pG,_$o),e(Bb,u$o),e(_e,b$o),e(_e,Ib),e(Ib,ome),e(ome,v$o),e(Ib,F$o),e(Ib,_G),e(_G,T$o),e(Ib,M$o),e(_e,E$o),e(_e,Nb),e(Nb,rme),e(rme,C$o),e(Nb,w$o),e(Nb,uG),e(uG,A$o),e(Nb,L$o),e(_e,y$o),e(_e,qb),e(qb,tme),e(tme,x$o),e(qb,$$o),e(qb,bG),e(bG,k$o),e(qb,S$o),e(_e,R$o),e(_e,jb),e(jb,ame),e(ame,P$o),e(jb,B$o),e(jb,vG),e(vG,I$o),e(jb,N$o),e(_e,q$o),e(_e,Db),e(Db,nme),e(nme,j$o),e(Db,D$o),e(Db,FG),e(FG,G$o),e(Db,O$o),e(_e,V$o),e(_e,Gb),e(Gb,sme),e(sme,X$o),e(Gb,z$o),e(Gb,TG),e(TG,W$o),e(Gb,Q$o),e(_e,H$o),e(_e,Ob),e(Ob,lme),e(lme,U$o),e(Ob,J$o),e(Ob,MG),e(MG,Y$o),e(Ob,K$o),e(_e,Z$o),e(_e,Vb),e(Vb,ime),e(ime,eko),e(Vb,oko),e(Vb,EG),e(EG,rko),e(Vb,tko),e(_e,ako),e(_e,Xb),e(Xb,dme),e(dme,nko),e(Xb,sko),e(Xb,CG),e(CG,lko),e(Xb,iko),e(_e,dko),e(_e,zb),e(zb,cme),e(cme,cko),e(zb,fko),e(zb,wG),e(wG,mko),e(zb,gko),e(_e,hko),e(_e,Wb),e(Wb,fme),e(fme,pko),e(Wb,_ko),e(Wb,AG),e(AG,uko),e(Wb,bko),e(_e,vko),e(_e,Qb),e(Qb,mme),e(mme,Fko),e(Qb,Tko),e(Qb,LG),e(LG,Mko),e(Qb,Eko),e(eo,Cko),e(eo,Hb),e(Hb,wko),e(Hb,gme),e(gme,Ako),e(Hb,Lko),e(Hb,hme),e(hme,yko),e(eo,xko),M(Ub,eo,null),b(f,Cje,u),b(f,Oi,u),e(Oi,Jb),e(Jb,pme),M(qL,pme,null),e(Oi,$ko),e(Oi,_me),e(_me,kko),b(f,wje,u),b(f,Ro,u),M(jL,Ro,null),e(Ro,Sko),e(Ro,Vi),e(Vi,Rko),e(Vi,yG),e(yG,Pko),e(Vi,Bko),e(Vi,xG),e(xG,Iko),e(Vi,Nko),e(Ro,qko),e(Ro,DL),e(DL,jko),e(DL,ume),e(ume,Dko),e(DL,Gko),e(Ro,Oko),e(Ro,dt),M(GL,dt,null),e(dt,Vko),e(dt,bme),e(bme,Xko),e(dt,zko),e(dt,Xi),e(Xi,Wko),e(Xi,vme),e(vme,Qko),e(Xi,Hko),e(Xi,$G),e($G,Uko),e(Xi,Jko),e(dt,Yko),M(Yb,dt,null),e(Ro,Kko),e(Ro,oo),M(OL,oo,null),e(oo,Zko),e(oo,Fme),e(Fme,eSo),e(oo,oSo),e(oo,Pa),e(Pa,rSo),e(Pa,Tme),e(Tme,tSo),e(Pa,aSo),e(Pa,Mme),e(Mme,nSo),e(Pa,sSo),e(Pa,Eme),e(Eme,lSo),e(Pa,iSo),e(oo,dSo),e(oo,N),e(N,Kb),e(Kb,Cme),e(Cme,cSo),e(Kb,fSo),e(Kb,kG),e(kG,mSo),e(Kb,gSo),e(N,hSo),e(N,Zb),e(Zb,wme),e(wme,pSo),e(Zb,_So),e(Zb,SG),e(SG,uSo),e(Zb,bSo),e(N,vSo),e(N,e2),e(e2,Ame),e(Ame,FSo),e(e2,TSo),e(e2,RG),e(RG,MSo),e(e2,ESo),e(N,CSo),e(N,o2),e(o2,Lme),e(Lme,wSo),e(o2,ASo),e(o2,PG),e(PG,LSo),e(o2,ySo),e(N,xSo),e(N,r2),e(r2,yme),e(yme,$So),e(r2,kSo),e(r2,BG),e(BG,SSo),e(r2,RSo),e(N,PSo),e(N,t2),e(t2,xme),e(xme,BSo),e(t2,ISo),e(t2,IG),e(IG,NSo),e(t2,qSo),e(N,jSo),e(N,a2),e(a2,$me),e($me,DSo),e(a2,GSo),e(a2,NG),e(NG,OSo),e(a2,VSo),e(N,XSo),e(N,n2),e(n2,kme),e(kme,zSo),e(n2,WSo),e(n2,qG),e(qG,QSo),e(n2,HSo),e(N,USo),e(N,s2),e(s2,Sme),e(Sme,JSo),e(s2,YSo),e(s2,jG),e(jG,KSo),e(s2,ZSo),e(N,eRo),e(N,l2),e(l2,Rme),e(Rme,oRo),e(l2,rRo),e(l2,DG),e(DG,tRo),e(l2,aRo),e(N,nRo),e(N,i2),e(i2,Pme),e(Pme,sRo),e(i2,lRo),e(i2,GG),e(GG,iRo),e(i2,dRo),e(N,cRo),e(N,d2),e(d2,Bme),e(Bme,fRo),e(d2,mRo),e(d2,OG),e(OG,gRo),e(d2,hRo),e(N,pRo),e(N,c2),e(c2,Ime),e(Ime,_Ro),e(c2,uRo),e(c2,VG),e(VG,bRo),e(c2,vRo),e(N,FRo),e(N,f2),e(f2,Nme),e(Nme,TRo),e(f2,MRo),e(f2,XG),e(XG,ERo),e(f2,CRo),e(N,wRo),e(N,m2),e(m2,qme),e(qme,ARo),e(m2,LRo),e(m2,zG),e(zG,yRo),e(m2,xRo),e(N,$Ro),e(N,g2),e(g2,jme),e(jme,kRo),e(g2,SRo),e(g2,WG),e(WG,RRo),e(g2,PRo),e(N,BRo),e(N,h2),e(h2,Dme),e(Dme,IRo),e(h2,NRo),e(h2,QG),e(QG,qRo),e(h2,jRo),e(N,DRo),e(N,p2),e(p2,Gme),e(Gme,GRo),e(p2,ORo),e(p2,HG),e(HG,VRo),e(p2,XRo),e(N,zRo),e(N,_2),e(_2,Ome),e(Ome,WRo),e(_2,QRo),e(_2,UG),e(UG,HRo),e(_2,URo),e(N,JRo),e(N,u2),e(u2,Vme),e(Vme,YRo),e(u2,KRo),e(u2,JG),e(JG,ZRo),e(u2,ePo),e(N,oPo),e(N,b2),e(b2,Xme),e(Xme,rPo),e(b2,tPo),e(b2,YG),e(YG,aPo),e(b2,nPo),e(N,sPo),e(N,v2),e(v2,zme),e(zme,lPo),e(v2,iPo),e(v2,KG),e(KG,dPo),e(v2,cPo),e(N,fPo),e(N,F2),e(F2,Wme),e(Wme,mPo),e(F2,gPo),e(F2,ZG),e(ZG,hPo),e(F2,pPo),e(N,_Po),e(N,T2),e(T2,Qme),e(Qme,uPo),e(T2,bPo),e(T2,eO),e(eO,vPo),e(T2,FPo),e(N,TPo),e(N,M2),e(M2,Hme),e(Hme,MPo),e(M2,EPo),e(M2,oO),e(oO,CPo),e(M2,wPo),e(N,APo),e(N,E2),e(E2,Ume),e(Ume,LPo),e(E2,yPo),e(E2,rO),e(rO,xPo),e(E2,$Po),e(N,kPo),e(N,C2),e(C2,Jme),e(Jme,SPo),e(C2,RPo),e(C2,tO),e(tO,PPo),e(C2,BPo),e(N,IPo),e(N,w2),e(w2,Yme),e(Yme,NPo),e(w2,qPo),e(w2,aO),e(aO,jPo),e(w2,DPo),e(N,GPo),e(N,A2),e(A2,Kme),e(Kme,OPo),e(A2,VPo),e(A2,nO),e(nO,XPo),e(A2,zPo),e(N,WPo),e(N,L2),e(L2,Zme),e(Zme,QPo),e(L2,HPo),e(L2,sO),e(sO,UPo),e(L2,JPo),e(N,YPo),e(N,y2),e(y2,ege),e(ege,KPo),e(y2,ZPo),e(y2,lO),e(lO,eBo),e(y2,oBo),e(N,rBo),e(N,x2),e(x2,oge),e(oge,tBo),e(x2,aBo),e(x2,iO),e(iO,nBo),e(x2,sBo),e(N,lBo),e(N,$2),e($2,rge),e(rge,iBo),e($2,dBo),e($2,dO),e(dO,cBo),e($2,fBo),e(N,mBo),e(N,k2),e(k2,tge),e(tge,gBo),e(k2,hBo),e(k2,cO),e(cO,pBo),e(k2,_Bo),e(N,uBo),e(N,S2),e(S2,age),e(age,bBo),e(S2,vBo),e(S2,fO),e(fO,FBo),e(S2,TBo),e(N,MBo),e(N,R2),e(R2,nge),e(nge,EBo),e(R2,CBo),e(R2,mO),e(mO,wBo),e(R2,ABo),e(N,LBo),e(N,P2),e(P2,sge),e(sge,yBo),e(P2,xBo),e(P2,gO),e(gO,$Bo),e(P2,kBo),e(N,SBo),e(N,B2),e(B2,lge),e(lge,RBo),e(B2,PBo),e(B2,hO),e(hO,BBo),e(B2,IBo),e(N,NBo),e(N,I2),e(I2,ige),e(ige,qBo),e(I2,jBo),e(I2,pO),e(pO,DBo),e(I2,GBo),e(N,OBo),e(N,N2),e(N2,dge),e(dge,VBo),e(N2,XBo),e(N2,_O),e(_O,zBo),e(N2,WBo),e(N,QBo),e(N,q2),e(q2,cge),e(cge,HBo),e(q2,UBo),e(q2,uO),e(uO,JBo),e(q2,YBo),e(N,KBo),e(N,j2),e(j2,fge),e(fge,ZBo),e(j2,eIo),e(j2,bO),e(bO,oIo),e(j2,rIo),e(N,tIo),e(N,D2),e(D2,mge),e(mge,aIo),e(D2,nIo),e(D2,vO),e(vO,sIo),e(D2,lIo),e(N,iIo),e(N,G2),e(G2,gge),e(gge,dIo),e(G2,cIo),e(G2,FO),e(FO,fIo),e(G2,mIo),e(N,gIo),e(N,O2),e(O2,hge),e(hge,hIo),e(O2,pIo),e(O2,TO),e(TO,_Io),e(O2,uIo),e(N,bIo),e(N,V2),e(V2,pge),e(pge,vIo),e(V2,FIo),e(V2,MO),e(MO,TIo),e(V2,MIo),e(N,EIo),e(N,X2),e(X2,_ge),e(_ge,CIo),e(X2,wIo),e(X2,EO),e(EO,AIo),e(X2,LIo),e(oo,yIo),e(oo,z2),e(z2,xIo),e(z2,uge),e(uge,$Io),e(z2,kIo),e(z2,bge),e(bge,SIo),e(oo,RIo),M(W2,oo,null),b(f,Aje,u),b(f,zi,u),e(zi,Q2),e(Q2,vge),M(VL,vge,null),e(zi,PIo),e(zi,Fge),e(Fge,BIo),b(f,Lje,u),b(f,Po,u),M(XL,Po,null),e(Po,IIo),e(Po,Wi),e(Wi,NIo),e(Wi,CO),e(CO,qIo),e(Wi,jIo),e(Wi,wO),e(wO,DIo),e(Wi,GIo),e(Po,OIo),e(Po,zL),e(zL,VIo),e(zL,Tge),e(Tge,XIo),e(zL,zIo),e(Po,WIo),e(Po,ct),M(WL,ct,null),e(ct,QIo),e(ct,Mge),e(Mge,HIo),e(ct,UIo),e(ct,Qi),e(Qi,JIo),e(Qi,Ege),e(Ege,YIo),e(Qi,KIo),e(Qi,AO),e(AO,ZIo),e(Qi,eNo),e(ct,oNo),M(H2,ct,null),e(Po,rNo),e(Po,ro),M(QL,ro,null),e(ro,tNo),e(ro,Cge),e(Cge,aNo),e(ro,nNo),e(ro,Ba),e(Ba,sNo),e(Ba,wge),e(wge,lNo),e(Ba,iNo),e(Ba,Age),e(Age,dNo),e(Ba,cNo),e(Ba,Lge),e(Lge,fNo),e(Ba,mNo),e(ro,gNo),e(ro,Z),e(Z,U2),e(U2,yge),e(yge,hNo),e(U2,pNo),e(U2,LO),e(LO,_No),e(U2,uNo),e(Z,bNo),e(Z,J2),e(J2,xge),e(xge,vNo),e(J2,FNo),e(J2,yO),e(yO,TNo),e(J2,MNo),e(Z,ENo),e(Z,Y2),e(Y2,$ge),e($ge,CNo),e(Y2,wNo),e(Y2,xO),e(xO,ANo),e(Y2,LNo),e(Z,yNo),e(Z,K2),e(K2,kge),e(kge,xNo),e(K2,$No),e(K2,$O),e($O,kNo),e(K2,SNo),e(Z,RNo),e(Z,Z2),e(Z2,Sge),e(Sge,PNo),e(Z2,BNo),e(Z2,kO),e(kO,INo),e(Z2,NNo),e(Z,qNo),e(Z,e4),e(e4,Rge),e(Rge,jNo),e(e4,DNo),e(e4,SO),e(SO,GNo),e(e4,ONo),e(Z,VNo),e(Z,o4),e(o4,Pge),e(Pge,XNo),e(o4,zNo),e(o4,RO),e(RO,WNo),e(o4,QNo),e(Z,HNo),e(Z,r4),e(r4,Bge),e(Bge,UNo),e(r4,JNo),e(r4,PO),e(PO,YNo),e(r4,KNo),e(Z,ZNo),e(Z,t4),e(t4,Ige),e(Ige,eqo),e(t4,oqo),e(t4,BO),e(BO,rqo),e(t4,tqo),e(Z,aqo),e(Z,a4),e(a4,Nge),e(Nge,nqo),e(a4,sqo),e(a4,IO),e(IO,lqo),e(a4,iqo),e(Z,dqo),e(Z,n4),e(n4,qge),e(qge,cqo),e(n4,fqo),e(n4,NO),e(NO,mqo),e(n4,gqo),e(Z,hqo),e(Z,s4),e(s4,jge),e(jge,pqo),e(s4,_qo),e(s4,qO),e(qO,uqo),e(s4,bqo),e(Z,vqo),e(Z,l4),e(l4,Dge),e(Dge,Fqo),e(l4,Tqo),e(l4,jO),e(jO,Mqo),e(l4,Eqo),e(Z,Cqo),e(Z,i4),e(i4,Gge),e(Gge,wqo),e(i4,Aqo),e(i4,DO),e(DO,Lqo),e(i4,yqo),e(Z,xqo),e(Z,d4),e(d4,Oge),e(Oge,$qo),e(d4,kqo),e(d4,GO),e(GO,Sqo),e(d4,Rqo),e(Z,Pqo),e(Z,c4),e(c4,Vge),e(Vge,Bqo),e(c4,Iqo),e(c4,OO),e(OO,Nqo),e(c4,qqo),e(Z,jqo),e(Z,f4),e(f4,Xge),e(Xge,Dqo),e(f4,Gqo),e(f4,VO),e(VO,Oqo),e(f4,Vqo),e(Z,Xqo),e(Z,m4),e(m4,zge),e(zge,zqo),e(m4,Wqo),e(m4,XO),e(XO,Qqo),e(m4,Hqo),e(Z,Uqo),e(Z,g4),e(g4,Wge),e(Wge,Jqo),e(g4,Yqo),e(g4,zO),e(zO,Kqo),e(g4,Zqo),e(Z,ejo),e(Z,h4),e(h4,Qge),e(Qge,ojo),e(h4,rjo),e(h4,WO),e(WO,tjo),e(h4,ajo),e(Z,njo),e(Z,p4),e(p4,Hge),e(Hge,sjo),e(p4,ljo),e(p4,QO),e(QO,ijo),e(p4,djo),e(Z,cjo),e(Z,_4),e(_4,Uge),e(Uge,fjo),e(_4,mjo),e(_4,HO),e(HO,gjo),e(_4,hjo),e(Z,pjo),e(Z,u4),e(u4,Jge),e(Jge,_jo),e(u4,ujo),e(u4,UO),e(UO,bjo),e(u4,vjo),e(Z,Fjo),e(Z,b4),e(b4,Yge),e(Yge,Tjo),e(b4,Mjo),e(b4,JO),e(JO,Ejo),e(b4,Cjo),e(Z,wjo),e(Z,v4),e(v4,Kge),e(Kge,Ajo),e(v4,Ljo),e(v4,YO),e(YO,yjo),e(v4,xjo),e(Z,$jo),e(Z,F4),e(F4,Zge),e(Zge,kjo),e(F4,Sjo),e(F4,KO),e(KO,Rjo),e(F4,Pjo),e(Z,Bjo),e(Z,T4),e(T4,ehe),e(ehe,Ijo),e(T4,Njo),e(T4,ZO),e(ZO,qjo),e(T4,jjo),e(Z,Djo),e(Z,M4),e(M4,ohe),e(ohe,Gjo),e(M4,Ojo),e(M4,eV),e(eV,Vjo),e(M4,Xjo),e(Z,zjo),e(Z,E4),e(E4,rhe),e(rhe,Wjo),e(E4,Qjo),e(E4,oV),e(oV,Hjo),e(E4,Ujo),e(ro,Jjo),e(ro,C4),e(C4,Yjo),e(C4,the),e(the,Kjo),e(C4,Zjo),e(C4,ahe),e(ahe,eDo),e(ro,oDo),M(w4,ro,null),b(f,yje,u),b(f,Hi,u),e(Hi,A4),e(A4,nhe),M(HL,nhe,null),e(Hi,rDo),e(Hi,she),e(she,tDo),b(f,xje,u),b(f,Bo,u),M(UL,Bo,null),e(Bo,aDo),e(Bo,Ui),e(Ui,nDo),e(Ui,rV),e(rV,sDo),e(Ui,lDo),e(Ui,tV),e(tV,iDo),e(Ui,dDo),e(Bo,cDo),e(Bo,JL),e(JL,fDo),e(JL,lhe),e(lhe,mDo),e(JL,gDo),e(Bo,hDo),e(Bo,ft),M(YL,ft,null),e(ft,pDo),e(ft,ihe),e(ihe,_Do),e(ft,uDo),e(ft,Ji),e(Ji,bDo),e(Ji,dhe),e(dhe,vDo),e(Ji,FDo),e(Ji,aV),e(aV,TDo),e(Ji,MDo),e(ft,EDo),M(L4,ft,null),e(Bo,CDo),e(Bo,to),M(KL,to,null),e(to,wDo),e(to,che),e(che,ADo),e(to,LDo),e(to,Ia),e(Ia,yDo),e(Ia,fhe),e(fhe,xDo),e(Ia,$Do),e(Ia,mhe),e(mhe,kDo),e(Ia,SDo),e(Ia,ghe),e(ghe,RDo),e(Ia,PDo),e(to,BDo),e(to,Yr),e(Yr,y4),e(y4,hhe),e(hhe,IDo),e(y4,NDo),e(y4,nV),e(nV,qDo),e(y4,jDo),e(Yr,DDo),e(Yr,x4),e(x4,phe),e(phe,GDo),e(x4,ODo),e(x4,sV),e(sV,VDo),e(x4,XDo),e(Yr,zDo),e(Yr,$4),e($4,_he),e(_he,WDo),e($4,QDo),e($4,lV),e(lV,HDo),e($4,UDo),e(Yr,JDo),e(Yr,k4),e(k4,uhe),e(uhe,YDo),e(k4,KDo),e(k4,iV),e(iV,ZDo),e(k4,eGo),e(Yr,oGo),e(Yr,S4),e(S4,bhe),e(bhe,rGo),e(S4,tGo),e(S4,dV),e(dV,aGo),e(S4,nGo),e(to,sGo),e(to,R4),e(R4,lGo),e(R4,vhe),e(vhe,iGo),e(R4,dGo),e(R4,Fhe),e(Fhe,cGo),e(to,fGo),M(P4,to,null),b(f,$je,u),b(f,Yi,u),e(Yi,B4),e(B4,The),M(ZL,The,null),e(Yi,mGo),e(Yi,Mhe),e(Mhe,gGo),b(f,kje,u),b(f,Io,u),M(ey,Io,null),e(Io,hGo),e(Io,Ki),e(Ki,pGo),e(Ki,cV),e(cV,_Go),e(Ki,uGo),e(Ki,fV),e(fV,bGo),e(Ki,vGo),e(Io,FGo),e(Io,oy),e(oy,TGo),e(oy,Ehe),e(Ehe,MGo),e(oy,EGo),e(Io,CGo),e(Io,mt),M(ry,mt,null),e(mt,wGo),e(mt,Che),e(Che,AGo),e(mt,LGo),e(mt,Zi),e(Zi,yGo),e(Zi,whe),e(whe,xGo),e(Zi,$Go),e(Zi,mV),e(mV,kGo),e(Zi,SGo),e(mt,RGo),M(I4,mt,null),e(Io,PGo),e(Io,ao),M(ty,ao,null),e(ao,BGo),e(ao,Ahe),e(Ahe,IGo),e(ao,NGo),e(ao,Na),e(Na,qGo),e(Na,Lhe),e(Lhe,jGo),e(Na,DGo),e(Na,yhe),e(yhe,GGo),e(Na,OGo),e(Na,xhe),e(xhe,VGo),e(Na,XGo),e(ao,zGo),e(ao,U),e(U,N4),e(N4,$he),e($he,WGo),e(N4,QGo),e(N4,gV),e(gV,HGo),e(N4,UGo),e(U,JGo),e(U,q4),e(q4,khe),e(khe,YGo),e(q4,KGo),e(q4,hV),e(hV,ZGo),e(q4,eOo),e(U,oOo),e(U,j4),e(j4,She),e(She,rOo),e(j4,tOo),e(j4,pV),e(pV,aOo),e(j4,nOo),e(U,sOo),e(U,D4),e(D4,Rhe),e(Rhe,lOo),e(D4,iOo),e(D4,_V),e(_V,dOo),e(D4,cOo),e(U,fOo),e(U,G4),e(G4,Phe),e(Phe,mOo),e(G4,gOo),e(G4,uV),e(uV,hOo),e(G4,pOo),e(U,_Oo),e(U,O4),e(O4,Bhe),e(Bhe,uOo),e(O4,bOo),e(O4,bV),e(bV,vOo),e(O4,FOo),e(U,TOo),e(U,V4),e(V4,Ihe),e(Ihe,MOo),e(V4,EOo),e(V4,vV),e(vV,COo),e(V4,wOo),e(U,AOo),e(U,X4),e(X4,Nhe),e(Nhe,LOo),e(X4,yOo),e(X4,FV),e(FV,xOo),e(X4,$Oo),e(U,kOo),e(U,z4),e(z4,qhe),e(qhe,SOo),e(z4,ROo),e(z4,TV),e(TV,POo),e(z4,BOo),e(U,IOo),e(U,W4),e(W4,jhe),e(jhe,NOo),e(W4,qOo),e(W4,MV),e(MV,jOo),e(W4,DOo),e(U,GOo),e(U,Q4),e(Q4,Dhe),e(Dhe,OOo),e(Q4,VOo),e(Q4,EV),e(EV,XOo),e(Q4,zOo),e(U,WOo),e(U,H4),e(H4,Ghe),e(Ghe,QOo),e(H4,HOo),e(H4,CV),e(CV,UOo),e(H4,JOo),e(U,YOo),e(U,U4),e(U4,Ohe),e(Ohe,KOo),e(U4,ZOo),e(U4,wV),e(wV,eVo),e(U4,oVo),e(U,rVo),e(U,J4),e(J4,Vhe),e(Vhe,tVo),e(J4,aVo),e(J4,AV),e(AV,nVo),e(J4,sVo),e(U,lVo),e(U,Y4),e(Y4,Xhe),e(Xhe,iVo),e(Y4,dVo),e(Y4,LV),e(LV,cVo),e(Y4,fVo),e(U,mVo),e(U,K4),e(K4,zhe),e(zhe,gVo),e(K4,hVo),e(K4,yV),e(yV,pVo),e(K4,_Vo),e(U,uVo),e(U,Z4),e(Z4,Whe),e(Whe,bVo),e(Z4,vVo),e(Z4,xV),e(xV,FVo),e(Z4,TVo),e(U,MVo),e(U,ev),e(ev,Qhe),e(Qhe,EVo),e(ev,CVo),e(ev,$V),e($V,wVo),e(ev,AVo),e(U,LVo),e(U,ov),e(ov,Hhe),e(Hhe,yVo),e(ov,xVo),e(ov,kV),e(kV,$Vo),e(ov,kVo),e(U,SVo),e(U,rv),e(rv,Uhe),e(Uhe,RVo),e(rv,PVo),e(rv,SV),e(SV,BVo),e(rv,IVo),e(U,NVo),e(U,tv),e(tv,Jhe),e(Jhe,qVo),e(tv,jVo),e(tv,RV),e(RV,DVo),e(tv,GVo),e(U,OVo),e(U,av),e(av,Yhe),e(Yhe,VVo),e(av,XVo),e(av,PV),e(PV,zVo),e(av,WVo),e(U,QVo),e(U,nv),e(nv,Khe),e(Khe,HVo),e(nv,UVo),e(nv,BV),e(BV,JVo),e(nv,YVo),e(U,KVo),e(U,sv),e(sv,Zhe),e(Zhe,ZVo),e(sv,eXo),e(sv,IV),e(IV,oXo),e(sv,rXo),e(U,tXo),e(U,lv),e(lv,epe),e(epe,aXo),e(lv,nXo),e(lv,NV),e(NV,sXo),e(lv,lXo),e(U,iXo),e(U,iv),e(iv,ope),e(ope,dXo),e(iv,cXo),e(iv,qV),e(qV,fXo),e(iv,mXo),e(U,gXo),e(U,dv),e(dv,rpe),e(rpe,hXo),e(dv,pXo),e(dv,jV),e(jV,_Xo),e(dv,uXo),e(U,bXo),e(U,cv),e(cv,tpe),e(tpe,vXo),e(cv,FXo),e(cv,DV),e(DV,TXo),e(cv,MXo),e(U,EXo),e(U,fv),e(fv,ape),e(ape,CXo),e(fv,wXo),e(fv,GV),e(GV,AXo),e(fv,LXo),e(U,yXo),e(U,mv),e(mv,npe),e(npe,xXo),e(mv,$Xo),e(mv,OV),e(OV,kXo),e(mv,SXo),e(U,RXo),e(U,gv),e(gv,spe),e(spe,PXo),e(gv,BXo),e(gv,VV),e(VV,IXo),e(gv,NXo),e(U,qXo),e(U,hv),e(hv,lpe),e(lpe,jXo),e(hv,DXo),e(hv,XV),e(XV,GXo),e(hv,OXo),e(U,VXo),e(U,pv),e(pv,ipe),e(ipe,XXo),e(pv,zXo),e(pv,zV),e(zV,WXo),e(pv,QXo),e(U,HXo),e(U,_v),e(_v,dpe),e(dpe,UXo),e(_v,JXo),e(_v,WV),e(WV,YXo),e(_v,KXo),e(ao,ZXo),e(ao,uv),e(uv,ezo),e(uv,cpe),e(cpe,ozo),e(uv,rzo),e(uv,fpe),e(fpe,tzo),e(ao,azo),M(bv,ao,null),b(f,Sje,u),b(f,ed,u),e(ed,vv),e(vv,mpe),M(ay,mpe,null),e(ed,nzo),e(ed,gpe),e(gpe,szo),b(f,Rje,u),b(f,No,u),M(ny,No,null),e(No,lzo),e(No,od),e(od,izo),e(od,QV),e(QV,dzo),e(od,czo),e(od,HV),e(HV,fzo),e(od,mzo),e(No,gzo),e(No,sy),e(sy,hzo),e(sy,hpe),e(hpe,pzo),e(sy,_zo),e(No,uzo),e(No,gt),M(ly,gt,null),e(gt,bzo),e(gt,ppe),e(ppe,vzo),e(gt,Fzo),e(gt,rd),e(rd,Tzo),e(rd,_pe),e(_pe,Mzo),e(rd,Ezo),e(rd,UV),e(UV,Czo),e(rd,wzo),e(gt,Azo),M(Fv,gt,null),e(No,Lzo),e(No,no),M(iy,no,null),e(no,yzo),e(no,upe),e(upe,xzo),e(no,$zo),e(no,qa),e(qa,kzo),e(qa,bpe),e(bpe,Szo),e(qa,Rzo),e(qa,vpe),e(vpe,Pzo),e(qa,Bzo),e(qa,Fpe),e(Fpe,Izo),e(qa,Nzo),e(no,qzo),e(no,V),e(V,Tv),e(Tv,Tpe),e(Tpe,jzo),e(Tv,Dzo),e(Tv,JV),e(JV,Gzo),e(Tv,Ozo),e(V,Vzo),e(V,Mv),e(Mv,Mpe),e(Mpe,Xzo),e(Mv,zzo),e(Mv,YV),e(YV,Wzo),e(Mv,Qzo),e(V,Hzo),e(V,Ev),e(Ev,Epe),e(Epe,Uzo),e(Ev,Jzo),e(Ev,KV),e(KV,Yzo),e(Ev,Kzo),e(V,Zzo),e(V,Cv),e(Cv,Cpe),e(Cpe,eWo),e(Cv,oWo),e(Cv,ZV),e(ZV,rWo),e(Cv,tWo),e(V,aWo),e(V,wv),e(wv,wpe),e(wpe,nWo),e(wv,sWo),e(wv,eX),e(eX,lWo),e(wv,iWo),e(V,dWo),e(V,Av),e(Av,Ape),e(Ape,cWo),e(Av,fWo),e(Av,oX),e(oX,mWo),e(Av,gWo),e(V,hWo),e(V,Lv),e(Lv,Lpe),e(Lpe,pWo),e(Lv,_Wo),e(Lv,rX),e(rX,uWo),e(Lv,bWo),e(V,vWo),e(V,yv),e(yv,ype),e(ype,FWo),e(yv,TWo),e(yv,tX),e(tX,MWo),e(yv,EWo),e(V,CWo),e(V,xv),e(xv,xpe),e(xpe,wWo),e(xv,AWo),e(xv,aX),e(aX,LWo),e(xv,yWo),e(V,xWo),e(V,$v),e($v,$pe),e($pe,$Wo),e($v,kWo),e($v,nX),e(nX,SWo),e($v,RWo),e(V,PWo),e(V,kv),e(kv,kpe),e(kpe,BWo),e(kv,IWo),e(kv,sX),e(sX,NWo),e(kv,qWo),e(V,jWo),e(V,Sv),e(Sv,Spe),e(Spe,DWo),e(Sv,GWo),e(Sv,lX),e(lX,OWo),e(Sv,VWo),e(V,XWo),e(V,Rv),e(Rv,Rpe),e(Rpe,zWo),e(Rv,WWo),e(Rv,iX),e(iX,QWo),e(Rv,HWo),e(V,UWo),e(V,Pv),e(Pv,Ppe),e(Ppe,JWo),e(Pv,YWo),e(Pv,dX),e(dX,KWo),e(Pv,ZWo),e(V,eQo),e(V,Bv),e(Bv,Bpe),e(Bpe,oQo),e(Bv,rQo),e(Bv,cX),e(cX,tQo),e(Bv,aQo),e(V,nQo),e(V,Iv),e(Iv,Ipe),e(Ipe,sQo),e(Iv,lQo),e(Iv,fX),e(fX,iQo),e(Iv,dQo),e(V,cQo),e(V,Nv),e(Nv,Npe),e(Npe,fQo),e(Nv,mQo),e(Nv,mX),e(mX,gQo),e(Nv,hQo),e(V,pQo),e(V,qv),e(qv,qpe),e(qpe,_Qo),e(qv,uQo),e(qv,gX),e(gX,bQo),e(qv,vQo),e(V,FQo),e(V,jv),e(jv,jpe),e(jpe,TQo),e(jv,MQo),e(jv,hX),e(hX,EQo),e(jv,CQo),e(V,wQo),e(V,Dv),e(Dv,Dpe),e(Dpe,AQo),e(Dv,LQo),e(Dv,pX),e(pX,yQo),e(Dv,xQo),e(V,$Qo),e(V,Gv),e(Gv,Gpe),e(Gpe,kQo),e(Gv,SQo),e(Gv,_X),e(_X,RQo),e(Gv,PQo),e(V,BQo),e(V,Ov),e(Ov,Ope),e(Ope,IQo),e(Ov,NQo),e(Ov,uX),e(uX,qQo),e(Ov,jQo),e(V,DQo),e(V,Vv),e(Vv,Vpe),e(Vpe,GQo),e(Vv,OQo),e(Vv,bX),e(bX,VQo),e(Vv,XQo),e(V,zQo),e(V,Xv),e(Xv,Xpe),e(Xpe,WQo),e(Xv,QQo),e(Xv,vX),e(vX,HQo),e(Xv,UQo),e(V,JQo),e(V,zv),e(zv,zpe),e(zpe,YQo),e(zv,KQo),e(zv,FX),e(FX,ZQo),e(zv,eHo),e(V,oHo),e(V,Wv),e(Wv,Wpe),e(Wpe,rHo),e(Wv,tHo),e(Wv,TX),e(TX,aHo),e(Wv,nHo),e(V,sHo),e(V,Qv),e(Qv,Qpe),e(Qpe,lHo),e(Qv,iHo),e(Qv,MX),e(MX,dHo),e(Qv,cHo),e(V,fHo),e(V,Hv),e(Hv,Hpe),e(Hpe,mHo),e(Hv,gHo),e(Hv,EX),e(EX,hHo),e(Hv,pHo),e(V,_Ho),e(V,Uv),e(Uv,Upe),e(Upe,uHo),e(Uv,bHo),e(Uv,CX),e(CX,vHo),e(Uv,FHo),e(V,THo),e(V,Jv),e(Jv,Jpe),e(Jpe,MHo),e(Jv,EHo),e(Jv,wX),e(wX,CHo),e(Jv,wHo),e(V,AHo),e(V,Yv),e(Yv,Ype),e(Ype,LHo),e(Yv,yHo),e(Yv,AX),e(AX,xHo),e(Yv,$Ho),e(V,kHo),e(V,Kv),e(Kv,Kpe),e(Kpe,SHo),e(Kv,RHo),e(Kv,LX),e(LX,PHo),e(Kv,BHo),e(V,IHo),e(V,Zv),e(Zv,Zpe),e(Zpe,NHo),e(Zv,qHo),e(Zv,yX),e(yX,jHo),e(Zv,DHo),e(V,GHo),e(V,e5),e(e5,e_e),e(e_e,OHo),e(e5,VHo),e(e5,xX),e(xX,XHo),e(e5,zHo),e(V,WHo),e(V,o5),e(o5,o_e),e(o_e,QHo),e(o5,HHo),e(o5,$X),e($X,UHo),e(o5,JHo),e(V,YHo),e(V,r5),e(r5,r_e),e(r_e,KHo),e(r5,ZHo),e(r5,kX),e(kX,eUo),e(r5,oUo),e(V,rUo),e(V,t5),e(t5,t_e),e(t_e,tUo),e(t5,aUo),e(t5,SX),e(SX,nUo),e(t5,sUo),e(V,lUo),e(V,a5),e(a5,a_e),e(a_e,iUo),e(a5,dUo),e(a5,RX),e(RX,cUo),e(a5,fUo),e(V,mUo),e(V,n5),e(n5,n_e),e(n_e,gUo),e(n5,hUo),e(n5,PX),e(PX,pUo),e(n5,_Uo),e(V,uUo),e(V,s5),e(s5,s_e),e(s_e,bUo),e(s5,vUo),e(s5,BX),e(BX,FUo),e(s5,TUo),e(no,MUo),e(no,l5),e(l5,EUo),e(l5,l_e),e(l_e,CUo),e(l5,wUo),e(l5,i_e),e(i_e,AUo),e(no,LUo),M(i5,no,null),b(f,Pje,u),b(f,td,u),e(td,d5),e(d5,d_e),M(dy,d_e,null),e(td,yUo),e(td,c_e),e(c_e,xUo),b(f,Bje,u),b(f,qo,u),M(cy,qo,null),e(qo,$Uo),e(qo,ad),e(ad,kUo),e(ad,IX),e(IX,SUo),e(ad,RUo),e(ad,NX),e(NX,PUo),e(ad,BUo),e(qo,IUo),e(qo,fy),e(fy,NUo),e(fy,f_e),e(f_e,qUo),e(fy,jUo),e(qo,DUo),e(qo,ht),M(my,ht,null),e(ht,GUo),e(ht,m_e),e(m_e,OUo),e(ht,VUo),e(ht,nd),e(nd,XUo),e(nd,g_e),e(g_e,zUo),e(nd,WUo),e(nd,qX),e(qX,QUo),e(nd,HUo),e(ht,UUo),M(c5,ht,null),e(qo,JUo),e(qo,so),M(gy,so,null),e(so,YUo),e(so,h_e),e(h_e,KUo),e(so,ZUo),e(so,ja),e(ja,eJo),e(ja,p_e),e(p_e,oJo),e(ja,rJo),e(ja,__e),e(__e,tJo),e(ja,aJo),e(ja,u_e),e(u_e,nJo),e(ja,sJo),e(so,lJo),e(so,b_e),e(b_e,f5),e(f5,v_e),e(v_e,iJo),e(f5,dJo),e(f5,jX),e(jX,cJo),e(f5,fJo),e(so,mJo),e(so,m5),e(m5,gJo),e(m5,F_e),e(F_e,hJo),e(m5,pJo),e(m5,T_e),e(T_e,_Jo),e(so,uJo),M(g5,so,null),b(f,Ije,u),b(f,sd,u),e(sd,h5),e(h5,M_e),M(hy,M_e,null),e(sd,bJo),e(sd,E_e),e(E_e,vJo),b(f,Nje,u),b(f,jo,u),M(py,jo,null),e(jo,FJo),e(jo,ld),e(ld,TJo),e(ld,DX),e(DX,MJo),e(ld,EJo),e(ld,GX),e(GX,CJo),e(ld,wJo),e(jo,AJo),e(jo,_y),e(_y,LJo),e(_y,C_e),e(C_e,yJo),e(_y,xJo),e(jo,$Jo),e(jo,pt),M(uy,pt,null),e(pt,kJo),e(pt,w_e),e(w_e,SJo),e(pt,RJo),e(pt,id),e(id,PJo),e(id,A_e),e(A_e,BJo),e(id,IJo),e(id,OX),e(OX,NJo),e(id,qJo),e(pt,jJo),M(p5,pt,null),e(jo,DJo),e(jo,lo),M(by,lo,null),e(lo,GJo),e(lo,L_e),e(L_e,OJo),e(lo,VJo),e(lo,Da),e(Da,XJo),e(Da,y_e),e(y_e,zJo),e(Da,WJo),e(Da,x_e),e(x_e,QJo),e(Da,HJo),e(Da,$_e),e($_e,UJo),e(Da,JJo),e(lo,YJo),e(lo,ue),e(ue,_5),e(_5,k_e),e(k_e,KJo),e(_5,ZJo),e(_5,VX),e(VX,eYo),e(_5,oYo),e(ue,rYo),e(ue,u5),e(u5,S_e),e(S_e,tYo),e(u5,aYo),e(u5,XX),e(XX,nYo),e(u5,sYo),e(ue,lYo),e(ue,b5),e(b5,R_e),e(R_e,iYo),e(b5,dYo),e(b5,zX),e(zX,cYo),e(b5,fYo),e(ue,mYo),e(ue,v5),e(v5,P_e),e(P_e,gYo),e(v5,hYo),e(v5,WX),e(WX,pYo),e(v5,_Yo),e(ue,uYo),e(ue,Bs),e(Bs,B_e),e(B_e,bYo),e(Bs,vYo),e(Bs,QX),e(QX,FYo),e(Bs,TYo),e(Bs,HX),e(HX,MYo),e(Bs,EYo),e(ue,CYo),e(ue,F5),e(F5,I_e),e(I_e,wYo),e(F5,AYo),e(F5,UX),e(UX,LYo),e(F5,yYo),e(ue,xYo),e(ue,Is),e(Is,N_e),e(N_e,$Yo),e(Is,kYo),e(Is,JX),e(JX,SYo),e(Is,RYo),e(Is,YX),e(YX,PYo),e(Is,BYo),e(ue,IYo),e(ue,T5),e(T5,q_e),e(q_e,NYo),e(T5,qYo),e(T5,KX),e(KX,jYo),e(T5,DYo),e(ue,GYo),e(ue,_t),e(_t,j_e),e(j_e,OYo),e(_t,VYo),e(_t,ZX),e(ZX,XYo),e(_t,zYo),e(_t,ez),e(ez,WYo),e(_t,QYo),e(_t,oz),e(oz,HYo),e(_t,UYo),e(ue,JYo),e(ue,M5),e(M5,D_e),e(D_e,YYo),e(M5,KYo),e(M5,rz),e(rz,ZYo),e(M5,eKo),e(ue,oKo),e(ue,E5),e(E5,G_e),e(G_e,rKo),e(E5,tKo),e(E5,tz),e(tz,aKo),e(E5,nKo),e(ue,sKo),e(ue,C5),e(C5,O_e),e(O_e,lKo),e(C5,iKo),e(C5,az),e(az,dKo),e(C5,cKo),e(ue,fKo),e(ue,w5),e(w5,V_e),e(V_e,mKo),e(w5,gKo),e(w5,nz),e(nz,hKo),e(w5,pKo),e(ue,_Ko),e(ue,A5),e(A5,X_e),e(X_e,uKo),e(A5,bKo),e(A5,sz),e(sz,vKo),e(A5,FKo),e(ue,TKo),e(ue,L5),e(L5,z_e),e(z_e,MKo),e(L5,EKo),e(L5,lz),e(lz,CKo),e(L5,wKo),e(ue,AKo),e(ue,y5),e(y5,W_e),e(W_e,LKo),e(y5,yKo),e(y5,iz),e(iz,xKo),e(y5,$Ko),e(lo,kKo),e(lo,x5),e(x5,SKo),e(x5,Q_e),e(Q_e,RKo),e(x5,PKo),e(x5,H_e),e(H_e,BKo),e(lo,IKo),M($5,lo,null),b(f,qje,u),b(f,dd,u),e(dd,k5),e(k5,U_e),M(vy,U_e,null),e(dd,NKo),e(dd,J_e),e(J_e,qKo),b(f,jje,u),b(f,Do,u),M(Fy,Do,null),e(Do,jKo),e(Do,cd),e(cd,DKo),e(cd,dz),e(dz,GKo),e(cd,OKo),e(cd,cz),e(cz,VKo),e(cd,XKo),e(Do,zKo),e(Do,Ty),e(Ty,WKo),e(Ty,Y_e),e(Y_e,QKo),e(Ty,HKo),e(Do,UKo),e(Do,ut),M(My,ut,null),e(ut,JKo),e(ut,K_e),e(K_e,YKo),e(ut,KKo),e(ut,fd),e(fd,ZKo),e(fd,Z_e),e(Z_e,eZo),e(fd,oZo),e(fd,fz),e(fz,rZo),e(fd,tZo),e(ut,aZo),M(S5,ut,null),e(Do,nZo),e(Do,io),M(Ey,io,null),e(io,sZo),e(io,eue),e(eue,lZo),e(io,iZo),e(io,Ga),e(Ga,dZo),e(Ga,oue),e(oue,cZo),e(Ga,fZo),e(Ga,rue),e(rue,mZo),e(Ga,gZo),e(Ga,tue),e(tue,hZo),e(Ga,pZo),e(io,_Zo),e(io,aue),e(aue,R5),e(R5,nue),e(nue,uZo),e(R5,bZo),e(R5,mz),e(mz,vZo),e(R5,FZo),e(io,TZo),e(io,P5),e(P5,MZo),e(P5,sue),e(sue,EZo),e(P5,CZo),e(P5,lue),e(lue,wZo),e(io,AZo),M(B5,io,null),b(f,Dje,u),b(f,md,u),e(md,I5),e(I5,iue),M(Cy,iue,null),e(md,LZo),e(md,due),e(due,yZo),b(f,Gje,u),b(f,Go,u),M(wy,Go,null),e(Go,xZo),e(Go,gd),e(gd,$Zo),e(gd,gz),e(gz,kZo),e(gd,SZo),e(gd,hz),e(hz,RZo),e(gd,PZo),e(Go,BZo),e(Go,Ay),e(Ay,IZo),e(Ay,cue),e(cue,NZo),e(Ay,qZo),e(Go,jZo),e(Go,bt),M(Ly,bt,null),e(bt,DZo),e(bt,fue),e(fue,GZo),e(bt,OZo),e(bt,hd),e(hd,VZo),e(hd,mue),e(mue,XZo),e(hd,zZo),e(hd,pz),e(pz,WZo),e(hd,QZo),e(bt,HZo),M(N5,bt,null),e(Go,UZo),e(Go,co),M(yy,co,null),e(co,JZo),e(co,gue),e(gue,YZo),e(co,KZo),e(co,Oa),e(Oa,ZZo),e(Oa,hue),e(hue,eer),e(Oa,oer),e(Oa,pue),e(pue,rer),e(Oa,ter),e(Oa,_ue),e(_ue,aer),e(Oa,ner),e(co,ser),e(co,Se),e(Se,q5),e(q5,uue),e(uue,ler),e(q5,ier),e(q5,_z),e(_z,der),e(q5,cer),e(Se,fer),e(Se,j5),e(j5,bue),e(bue,mer),e(j5,ger),e(j5,uz),e(uz,her),e(j5,per),e(Se,_er),e(Se,D5),e(D5,vue),e(vue,uer),e(D5,ber),e(D5,bz),e(bz,ver),e(D5,Fer),e(Se,Ter),e(Se,G5),e(G5,Fue),e(Fue,Mer),e(G5,Eer),e(G5,vz),e(vz,Cer),e(G5,wer),e(Se,Aer),e(Se,O5),e(O5,Tue),e(Tue,Ler),e(O5,yer),e(O5,Fz),e(Fz,xer),e(O5,$er),e(Se,ker),e(Se,V5),e(V5,Mue),e(Mue,Ser),e(V5,Rer),e(V5,Tz),e(Tz,Per),e(V5,Ber),e(Se,Ier),e(Se,X5),e(X5,Eue),e(Eue,Ner),e(X5,qer),e(X5,Mz),e(Mz,jer),e(X5,Der),e(Se,Ger),e(Se,z5),e(z5,Cue),e(Cue,Oer),e(z5,Ver),e(z5,Ez),e(Ez,Xer),e(z5,zer),e(Se,Wer),e(Se,W5),e(W5,wue),e(wue,Qer),e(W5,Her),e(W5,Cz),e(Cz,Uer),e(W5,Jer),e(co,Yer),e(co,Q5),e(Q5,Ker),e(Q5,Aue),e(Aue,Zer),e(Q5,eor),e(Q5,Lue),e(Lue,oor),e(co,ror),M(H5,co,null),b(f,Oje,u),b(f,pd,u),e(pd,U5),e(U5,yue),M(xy,yue,null),e(pd,tor),e(pd,xue),e(xue,aor),b(f,Vje,u),b(f,Oo,u),M($y,Oo,null),e(Oo,nor),e(Oo,_d),e(_d,sor),e(_d,wz),e(wz,lor),e(_d,ior),e(_d,Az),e(Az,dor),e(_d,cor),e(Oo,mor),e(Oo,ky),e(ky,gor),e(ky,$ue),e($ue,hor),e(ky,por),e(Oo,_or),e(Oo,vt),M(Sy,vt,null),e(vt,uor),e(vt,kue),e(kue,bor),e(vt,vor),e(vt,ud),e(ud,For),e(ud,Sue),e(Sue,Tor),e(ud,Mor),e(ud,Lz),e(Lz,Eor),e(ud,Cor),e(vt,wor),M(J5,vt,null),e(Oo,Aor),e(Oo,fo),M(Ry,fo,null),e(fo,Lor),e(fo,Rue),e(Rue,yor),e(fo,xor),e(fo,Va),e(Va,$or),e(Va,Pue),e(Pue,kor),e(Va,Sor),e(Va,Bue),e(Bue,Ror),e(Va,Por),e(Va,Iue),e(Iue,Bor),e(Va,Ior),e(fo,Nor),e(fo,Kr),e(Kr,Y5),e(Y5,Nue),e(Nue,qor),e(Y5,jor),e(Y5,yz),e(yz,Dor),e(Y5,Gor),e(Kr,Oor),e(Kr,K5),e(K5,que),e(que,Vor),e(K5,Xor),e(K5,xz),e(xz,zor),e(K5,Wor),e(Kr,Qor),e(Kr,Z5),e(Z5,jue),e(jue,Hor),e(Z5,Uor),e(Z5,$z),e($z,Jor),e(Z5,Yor),e(Kr,Kor),e(Kr,e3),e(e3,Due),e(Due,Zor),e(e3,err),e(e3,kz),e(kz,orr),e(e3,rrr),e(Kr,trr),e(Kr,o3),e(o3,Gue),e(Gue,arr),e(o3,nrr),e(o3,Sz),e(Sz,srr),e(o3,lrr),e(fo,irr),e(fo,r3),e(r3,drr),e(r3,Oue),e(Oue,crr),e(r3,frr),e(r3,Vue),e(Vue,mrr),e(fo,grr),M(t3,fo,null),b(f,Xje,u),b(f,bd,u),e(bd,a3),e(a3,Xue),M(Py,Xue,null),e(bd,hrr),e(bd,zue),e(zue,prr),b(f,zje,u),b(f,Vo,u),M(By,Vo,null),e(Vo,_rr),e(Vo,vd),e(vd,urr),e(vd,Rz),e(Rz,brr),e(vd,vrr),e(vd,Pz),e(Pz,Frr),e(vd,Trr),e(Vo,Mrr),e(Vo,Iy),e(Iy,Err),e(Iy,Wue),e(Wue,Crr),e(Iy,wrr),e(Vo,Arr),e(Vo,Ft),M(Ny,Ft,null),e(Ft,Lrr),e(Ft,Que),e(Que,yrr),e(Ft,xrr),e(Ft,Fd),e(Fd,$rr),e(Fd,Hue),e(Hue,krr),e(Fd,Srr),e(Fd,Bz),e(Bz,Rrr),e(Fd,Prr),e(Ft,Brr),M(n3,Ft,null),e(Vo,Irr),e(Vo,mo),M(qy,mo,null),e(mo,Nrr),e(mo,Uue),e(Uue,qrr),e(mo,jrr),e(mo,Xa),e(Xa,Drr),e(Xa,Jue),e(Jue,Grr),e(Xa,Orr),e(Xa,Yue),e(Yue,Vrr),e(Xa,Xrr),e(Xa,Kue),e(Kue,zrr),e(Xa,Wrr),e(mo,Qrr),e(mo,Re),e(Re,s3),e(s3,Zue),e(Zue,Hrr),e(s3,Urr),e(s3,Iz),e(Iz,Jrr),e(s3,Yrr),e(Re,Krr),e(Re,l3),e(l3,e1e),e(e1e,Zrr),e(l3,etr),e(l3,Nz),e(Nz,otr),e(l3,rtr),e(Re,ttr),e(Re,i3),e(i3,o1e),e(o1e,atr),e(i3,ntr),e(i3,qz),e(qz,str),e(i3,ltr),e(Re,itr),e(Re,d3),e(d3,r1e),e(r1e,dtr),e(d3,ctr),e(d3,jz),e(jz,ftr),e(d3,mtr),e(Re,gtr),e(Re,c3),e(c3,t1e),e(t1e,htr),e(c3,ptr),e(c3,Dz),e(Dz,_tr),e(c3,utr),e(Re,btr),e(Re,f3),e(f3,a1e),e(a1e,vtr),e(f3,Ftr),e(f3,Gz),e(Gz,Ttr),e(f3,Mtr),e(Re,Etr),e(Re,m3),e(m3,n1e),e(n1e,Ctr),e(m3,wtr),e(m3,Oz),e(Oz,Atr),e(m3,Ltr),e(Re,ytr),e(Re,g3),e(g3,s1e),e(s1e,xtr),e(g3,$tr),e(g3,Vz),e(Vz,ktr),e(g3,Str),e(Re,Rtr),e(Re,h3),e(h3,l1e),e(l1e,Ptr),e(h3,Btr),e(h3,Xz),e(Xz,Itr),e(h3,Ntr),e(mo,qtr),e(mo,p3),e(p3,jtr),e(p3,i1e),e(i1e,Dtr),e(p3,Gtr),e(p3,d1e),e(d1e,Otr),e(mo,Vtr),M(_3,mo,null),b(f,Wje,u),b(f,Td,u),e(Td,u3),e(u3,c1e),M(jy,c1e,null),e(Td,Xtr),e(Td,f1e),e(f1e,ztr),b(f,Qje,u),b(f,Xo,u),M(Dy,Xo,null),e(Xo,Wtr),e(Xo,Md),e(Md,Qtr),e(Md,zz),e(zz,Htr),e(Md,Utr),e(Md,Wz),e(Wz,Jtr),e(Md,Ytr),e(Xo,Ktr),e(Xo,Gy),e(Gy,Ztr),e(Gy,m1e),e(m1e,ear),e(Gy,oar),e(Xo,rar),e(Xo,Tt),M(Oy,Tt,null),e(Tt,tar),e(Tt,g1e),e(g1e,aar),e(Tt,nar),e(Tt,Ed),e(Ed,sar),e(Ed,h1e),e(h1e,lar),e(Ed,iar),e(Ed,Qz),e(Qz,dar),e(Ed,car),e(Tt,far),M(b3,Tt,null),e(Xo,mar),e(Xo,go),M(Vy,go,null),e(go,gar),e(go,p1e),e(p1e,har),e(go,par),e(go,za),e(za,_ar),e(za,_1e),e(_1e,uar),e(za,bar),e(za,u1e),e(u1e,Far),e(za,Tar),e(za,b1e),e(b1e,Mar),e(za,Ear),e(go,Car),e(go,Xy),e(Xy,v3),e(v3,v1e),e(v1e,war),e(v3,Aar),e(v3,Hz),e(Hz,Lar),e(v3,yar),e(Xy,xar),e(Xy,F3),e(F3,F1e),e(F1e,$ar),e(F3,kar),e(F3,Uz),e(Uz,Sar),e(F3,Rar),e(go,Par),e(go,T3),e(T3,Bar),e(T3,T1e),e(T1e,Iar),e(T3,Nar),e(T3,M1e),e(M1e,qar),e(go,jar),M(M3,go,null),b(f,Hje,u),b(f,Cd,u),e(Cd,E3),e(E3,E1e),M(zy,E1e,null),e(Cd,Dar),e(Cd,C1e),e(C1e,Gar),b(f,Uje,u),b(f,zo,u),M(Wy,zo,null),e(zo,Oar),e(zo,wd),e(wd,Var),e(wd,Jz),e(Jz,Xar),e(wd,zar),e(wd,Yz),e(Yz,War),e(wd,Qar),e(zo,Har),e(zo,Qy),e(Qy,Uar),e(Qy,w1e),e(w1e,Jar),e(Qy,Yar),e(zo,Kar),e(zo,Mt),M(Hy,Mt,null),e(Mt,Zar),e(Mt,A1e),e(A1e,enr),e(Mt,onr),e(Mt,Ad),e(Ad,rnr),e(Ad,L1e),e(L1e,tnr),e(Ad,anr),e(Ad,Kz),e(Kz,nnr),e(Ad,snr),e(Mt,lnr),M(C3,Mt,null),e(zo,inr),e(zo,ho),M(Uy,ho,null),e(ho,dnr),e(ho,y1e),e(y1e,cnr),e(ho,fnr),e(ho,Wa),e(Wa,mnr),e(Wa,x1e),e(x1e,gnr),e(Wa,hnr),e(Wa,$1e),e($1e,pnr),e(Wa,_nr),e(Wa,k1e),e(k1e,unr),e(Wa,bnr),e(ho,vnr),e(ho,Zr),e(Zr,w3),e(w3,S1e),e(S1e,Fnr),e(w3,Tnr),e(w3,Zz),e(Zz,Mnr),e(w3,Enr),e(Zr,Cnr),e(Zr,A3),e(A3,R1e),e(R1e,wnr),e(A3,Anr),e(A3,eW),e(eW,Lnr),e(A3,ynr),e(Zr,xnr),e(Zr,L3),e(L3,P1e),e(P1e,$nr),e(L3,knr),e(L3,oW),e(oW,Snr),e(L3,Rnr),e(Zr,Pnr),e(Zr,y3),e(y3,B1e),e(B1e,Bnr),e(y3,Inr),e(y3,rW),e(rW,Nnr),e(y3,qnr),e(Zr,jnr),e(Zr,x3),e(x3,I1e),e(I1e,Dnr),e(x3,Gnr),e(x3,tW),e(tW,Onr),e(x3,Vnr),e(ho,Xnr),e(ho,$3),e($3,znr),e($3,N1e),e(N1e,Wnr),e($3,Qnr),e($3,q1e),e(q1e,Hnr),e(ho,Unr),M(k3,ho,null),b(f,Jje,u),b(f,Ld,u),e(Ld,S3),e(S3,j1e),M(Jy,j1e,null),e(Ld,Jnr),e(Ld,D1e),e(D1e,Ynr),b(f,Yje,u),b(f,Wo,u),M(Yy,Wo,null),e(Wo,Knr),e(Wo,yd),e(yd,Znr),e(yd,aW),e(aW,esr),e(yd,osr),e(yd,nW),e(nW,rsr),e(yd,tsr),e(Wo,asr),e(Wo,Ky),e(Ky,nsr),e(Ky,G1e),e(G1e,ssr),e(Ky,lsr),e(Wo,isr),e(Wo,Et),M(Zy,Et,null),e(Et,dsr),e(Et,O1e),e(O1e,csr),e(Et,fsr),e(Et,xd),e(xd,msr),e(xd,V1e),e(V1e,gsr),e(xd,hsr),e(xd,sW),e(sW,psr),e(xd,_sr),e(Et,usr),M(R3,Et,null),e(Wo,bsr),e(Wo,po),M(e8,po,null),e(po,vsr),e(po,X1e),e(X1e,Fsr),e(po,Tsr),e(po,Qa),e(Qa,Msr),e(Qa,z1e),e(z1e,Esr),e(Qa,Csr),e(Qa,W1e),e(W1e,wsr),e(Qa,Asr),e(Qa,Q1e),e(Q1e,Lsr),e(Qa,ysr),e(po,xsr),e(po,$d),e($d,P3),e(P3,H1e),e(H1e,$sr),e(P3,ksr),e(P3,lW),e(lW,Ssr),e(P3,Rsr),e($d,Psr),e($d,B3),e(B3,U1e),e(U1e,Bsr),e(B3,Isr),e(B3,iW),e(iW,Nsr),e(B3,qsr),e($d,jsr),e($d,I3),e(I3,J1e),e(J1e,Dsr),e(I3,Gsr),e(I3,dW),e(dW,Osr),e(I3,Vsr),e(po,Xsr),e(po,N3),e(N3,zsr),e(N3,Y1e),e(Y1e,Wsr),e(N3,Qsr),e(N3,K1e),e(K1e,Hsr),e(po,Usr),M(q3,po,null),b(f,Kje,u),b(f,kd,u),e(kd,j3),e(j3,Z1e),M(o8,Z1e,null),e(kd,Jsr),e(kd,ebe),e(ebe,Ysr),b(f,Zje,u),b(f,Qo,u),M(r8,Qo,null),e(Qo,Ksr),e(Qo,Sd),e(Sd,Zsr),e(Sd,cW),e(cW,elr),e(Sd,olr),e(Sd,fW),e(fW,rlr),e(Sd,tlr),e(Qo,alr),e(Qo,t8),e(t8,nlr),e(t8,obe),e(obe,slr),e(t8,llr),e(Qo,ilr),e(Qo,Ct),M(a8,Ct,null),e(Ct,dlr),e(Ct,rbe),e(rbe,clr),e(Ct,flr),e(Ct,Rd),e(Rd,mlr),e(Rd,tbe),e(tbe,glr),e(Rd,hlr),e(Rd,mW),e(mW,plr),e(Rd,_lr),e(Ct,ulr),M(D3,Ct,null),e(Qo,blr),e(Qo,_o),M(n8,_o,null),e(_o,vlr),e(_o,abe),e(abe,Flr),e(_o,Tlr),e(_o,Ha),e(Ha,Mlr),e(Ha,nbe),e(nbe,Elr),e(Ha,Clr),e(Ha,sbe),e(sbe,wlr),e(Ha,Alr),e(Ha,lbe),e(lbe,Llr),e(Ha,ylr),e(_o,xlr),e(_o,s8),e(s8,G3),e(G3,ibe),e(ibe,$lr),e(G3,klr),e(G3,gW),e(gW,Slr),e(G3,Rlr),e(s8,Plr),e(s8,O3),e(O3,dbe),e(dbe,Blr),e(O3,Ilr),e(O3,hW),e(hW,Nlr),e(O3,qlr),e(_o,jlr),e(_o,V3),e(V3,Dlr),e(V3,cbe),e(cbe,Glr),e(V3,Olr),e(V3,fbe),e(fbe,Vlr),e(_o,Xlr),M(X3,_o,null),b(f,eDe,u),b(f,Pd,u),e(Pd,z3),e(z3,mbe),M(l8,mbe,null),e(Pd,zlr),e(Pd,gbe),e(gbe,Wlr),b(f,oDe,u),b(f,Ho,u),M(i8,Ho,null),e(Ho,Qlr),e(Ho,Bd),e(Bd,Hlr),e(Bd,pW),e(pW,Ulr),e(Bd,Jlr),e(Bd,_W),e(_W,Ylr),e(Bd,Klr),e(Ho,Zlr),e(Ho,d8),e(d8,eir),e(d8,hbe),e(hbe,oir),e(d8,rir),e(Ho,tir),e(Ho,wt),M(c8,wt,null),e(wt,air),e(wt,pbe),e(pbe,nir),e(wt,sir),e(wt,Id),e(Id,lir),e(Id,_be),e(_be,iir),e(Id,dir),e(Id,uW),e(uW,cir),e(Id,fir),e(wt,mir),M(W3,wt,null),e(Ho,gir),e(Ho,uo),M(f8,uo,null),e(uo,hir),e(uo,ube),e(ube,pir),e(uo,_ir),e(uo,Ua),e(Ua,uir),e(Ua,bbe),e(bbe,bir),e(Ua,vir),e(Ua,vbe),e(vbe,Fir),e(Ua,Tir),e(Ua,Fbe),e(Fbe,Mir),e(Ua,Eir),e(uo,Cir),e(uo,Tbe),e(Tbe,Q3),e(Q3,Mbe),e(Mbe,wir),e(Q3,Air),e(Q3,bW),e(bW,Lir),e(Q3,yir),e(uo,xir),e(uo,H3),e(H3,$ir),e(H3,Ebe),e(Ebe,kir),e(H3,Sir),e(H3,Cbe),e(Cbe,Rir),e(uo,Pir),M(U3,uo,null),b(f,rDe,u),b(f,Nd,u),e(Nd,J3),e(J3,wbe),M(m8,wbe,null),e(Nd,Bir),e(Nd,Abe),e(Abe,Iir),b(f,tDe,u),b(f,Uo,u),M(g8,Uo,null),e(Uo,Nir),e(Uo,qd),e(qd,qir),e(qd,vW),e(vW,jir),e(qd,Dir),e(qd,FW),e(FW,Gir),e(qd,Oir),e(Uo,Vir),e(Uo,h8),e(h8,Xir),e(h8,Lbe),e(Lbe,zir),e(h8,Wir),e(Uo,Qir),e(Uo,At),M(p8,At,null),e(At,Hir),e(At,ybe),e(ybe,Uir),e(At,Jir),e(At,jd),e(jd,Yir),e(jd,xbe),e(xbe,Kir),e(jd,Zir),e(jd,TW),e(TW,edr),e(jd,odr),e(At,rdr),M(Y3,At,null),e(Uo,tdr),e(Uo,bo),M(_8,bo,null),e(bo,adr),e(bo,$be),e($be,ndr),e(bo,sdr),e(bo,Ja),e(Ja,ldr),e(Ja,kbe),e(kbe,idr),e(Ja,ddr),e(Ja,Sbe),e(Sbe,cdr),e(Ja,fdr),e(Ja,Rbe),e(Rbe,mdr),e(Ja,gdr),e(bo,hdr),e(bo,et),e(et,K3),e(K3,Pbe),e(Pbe,pdr),e(K3,_dr),e(K3,MW),e(MW,udr),e(K3,bdr),e(et,vdr),e(et,Z3),e(Z3,Bbe),e(Bbe,Fdr),e(Z3,Tdr),e(Z3,EW),e(EW,Mdr),e(Z3,Edr),e(et,Cdr),e(et,eF),e(eF,Ibe),e(Ibe,wdr),e(eF,Adr),e(eF,CW),e(CW,Ldr),e(eF,ydr),e(et,xdr),e(et,oF),e(oF,Nbe),e(Nbe,$dr),e(oF,kdr),e(oF,wW),e(wW,Sdr),e(oF,Rdr),e(et,Pdr),e(et,rF),e(rF,qbe),e(qbe,Bdr),e(rF,Idr),e(rF,AW),e(AW,Ndr),e(rF,qdr),e(bo,jdr),e(bo,tF),e(tF,Ddr),e(tF,jbe),e(jbe,Gdr),e(tF,Odr),e(tF,Dbe),e(Dbe,Vdr),e(bo,Xdr),M(aF,bo,null),b(f,aDe,u),b(f,Dd,u),e(Dd,nF),e(nF,Gbe),M(u8,Gbe,null),e(Dd,zdr),e(Dd,Obe),e(Obe,Wdr),b(f,nDe,u),b(f,Jo,u),M(b8,Jo,null),e(Jo,Qdr),e(Jo,Gd),e(Gd,Hdr),e(Gd,LW),e(LW,Udr),e(Gd,Jdr),e(Gd,yW),e(yW,Ydr),e(Gd,Kdr),e(Jo,Zdr),e(Jo,v8),e(v8,ecr),e(v8,Vbe),e(Vbe,ocr),e(v8,rcr),e(Jo,tcr),e(Jo,Lt),M(F8,Lt,null),e(Lt,acr),e(Lt,Xbe),e(Xbe,ncr),e(Lt,scr),e(Lt,Od),e(Od,lcr),e(Od,zbe),e(zbe,icr),e(Od,dcr),e(Od,xW),e(xW,ccr),e(Od,fcr),e(Lt,mcr),M(sF,Lt,null),e(Jo,gcr),e(Jo,vo),M(T8,vo,null),e(vo,hcr),e(vo,Wbe),e(Wbe,pcr),e(vo,_cr),e(vo,Ya),e(Ya,ucr),e(Ya,Qbe),e(Qbe,bcr),e(Ya,vcr),e(Ya,Hbe),e(Hbe,Fcr),e(Ya,Tcr),e(Ya,Ube),e(Ube,Mcr),e(Ya,Ecr),e(vo,Ccr),e(vo,Jbe),e(Jbe,lF),e(lF,Ybe),e(Ybe,wcr),e(lF,Acr),e(lF,$W),e($W,Lcr),e(lF,ycr),e(vo,xcr),e(vo,iF),e(iF,$cr),e(iF,Kbe),e(Kbe,kcr),e(iF,Scr),e(iF,Zbe),e(Zbe,Rcr),e(vo,Pcr),M(dF,vo,null),b(f,sDe,u),b(f,Vd,u),e(Vd,cF),e(cF,e2e),M(M8,e2e,null),e(Vd,Bcr),e(Vd,o2e),e(o2e,Icr),b(f,lDe,u),b(f,Yo,u),M(E8,Yo,null),e(Yo,Ncr),e(Yo,Xd),e(Xd,qcr),e(Xd,kW),e(kW,jcr),e(Xd,Dcr),e(Xd,SW),e(SW,Gcr),e(Xd,Ocr),e(Yo,Vcr),e(Yo,C8),e(C8,Xcr),e(C8,r2e),e(r2e,zcr),e(C8,Wcr),e(Yo,Qcr),e(Yo,yt),M(w8,yt,null),e(yt,Hcr),e(yt,t2e),e(t2e,Ucr),e(yt,Jcr),e(yt,zd),e(zd,Ycr),e(zd,a2e),e(a2e,Kcr),e(zd,Zcr),e(zd,RW),e(RW,efr),e(zd,ofr),e(yt,rfr),M(fF,yt,null),e(Yo,tfr),e(Yo,wr),M(A8,wr,null),e(wr,afr),e(wr,n2e),e(n2e,nfr),e(wr,sfr),e(wr,Ka),e(Ka,lfr),e(Ka,s2e),e(s2e,ifr),e(Ka,dfr),e(Ka,l2e),e(l2e,cfr),e(Ka,ffr),e(Ka,i2e),e(i2e,mfr),e(Ka,gfr),e(wr,hfr),e(wr,q),e(q,mF),e(mF,d2e),e(d2e,pfr),e(mF,_fr),e(mF,PW),e(PW,ufr),e(mF,bfr),e(q,vfr),e(q,gF),e(gF,c2e),e(c2e,Ffr),e(gF,Tfr),e(gF,BW),e(BW,Mfr),e(gF,Efr),e(q,Cfr),e(q,hF),e(hF,f2e),e(f2e,wfr),e(hF,Afr),e(hF,IW),e(IW,Lfr),e(hF,yfr),e(q,xfr),e(q,pF),e(pF,m2e),e(m2e,$fr),e(pF,kfr),e(pF,NW),e(NW,Sfr),e(pF,Rfr),e(q,Pfr),e(q,_F),e(_F,g2e),e(g2e,Bfr),e(_F,Ifr),e(_F,qW),e(qW,Nfr),e(_F,qfr),e(q,jfr),e(q,uF),e(uF,h2e),e(h2e,Dfr),e(uF,Gfr),e(uF,jW),e(jW,Ofr),e(uF,Vfr),e(q,Xfr),e(q,bF),e(bF,p2e),e(p2e,zfr),e(bF,Wfr),e(bF,DW),e(DW,Qfr),e(bF,Hfr),e(q,Ufr),e(q,vF),e(vF,_2e),e(_2e,Jfr),e(vF,Yfr),e(vF,GW),e(GW,Kfr),e(vF,Zfr),e(q,emr),e(q,FF),e(FF,u2e),e(u2e,omr),e(FF,rmr),e(FF,OW),e(OW,tmr),e(FF,amr),e(q,nmr),e(q,TF),e(TF,b2e),e(b2e,smr),e(TF,lmr),e(TF,VW),e(VW,imr),e(TF,dmr),e(q,cmr),e(q,MF),e(MF,v2e),e(v2e,fmr),e(MF,mmr),e(MF,XW),e(XW,gmr),e(MF,hmr),e(q,pmr),e(q,EF),e(EF,F2e),e(F2e,_mr),e(EF,umr),e(EF,zW),e(zW,bmr),e(EF,vmr),e(q,Fmr),e(q,CF),e(CF,T2e),e(T2e,Tmr),e(CF,Mmr),e(CF,WW),e(WW,Emr),e(CF,Cmr),e(q,wmr),e(q,wF),e(wF,M2e),e(M2e,Amr),e(wF,Lmr),e(wF,QW),e(QW,ymr),e(wF,xmr),e(q,$mr),e(q,AF),e(AF,E2e),e(E2e,kmr),e(AF,Smr),e(AF,HW),e(HW,Rmr),e(AF,Pmr),e(q,Bmr),e(q,LF),e(LF,C2e),e(C2e,Imr),e(LF,Nmr),e(LF,UW),e(UW,qmr),e(LF,jmr),e(q,Dmr),e(q,yF),e(yF,w2e),e(w2e,Gmr),e(yF,Omr),e(yF,JW),e(JW,Vmr),e(yF,Xmr),e(q,zmr),e(q,Ns),e(Ns,A2e),e(A2e,Wmr),e(Ns,Qmr),e(Ns,YW),e(YW,Hmr),e(Ns,Umr),e(Ns,KW),e(KW,Jmr),e(Ns,Ymr),e(q,Kmr),e(q,xF),e(xF,L2e),e(L2e,Zmr),e(xF,egr),e(xF,ZW),e(ZW,ogr),e(xF,rgr),e(q,tgr),e(q,$F),e($F,y2e),e(y2e,agr),e($F,ngr),e($F,eQ),e(eQ,sgr),e($F,lgr),e(q,igr),e(q,kF),e(kF,x2e),e(x2e,dgr),e(kF,cgr),e(kF,oQ),e(oQ,fgr),e(kF,mgr),e(q,ggr),e(q,SF),e(SF,$2e),e($2e,hgr),e(SF,pgr),e(SF,rQ),e(rQ,_gr),e(SF,ugr),e(q,bgr),e(q,RF),e(RF,k2e),e(k2e,vgr),e(RF,Fgr),e(RF,tQ),e(tQ,Tgr),e(RF,Mgr),e(q,Egr),e(q,PF),e(PF,S2e),e(S2e,Cgr),e(PF,wgr),e(PF,aQ),e(aQ,Agr),e(PF,Lgr),e(q,ygr),e(q,BF),e(BF,R2e),e(R2e,xgr),e(BF,$gr),e(BF,nQ),e(nQ,kgr),e(BF,Sgr),e(q,Rgr),e(q,IF),e(IF,P2e),e(P2e,Pgr),e(IF,Bgr),e(IF,sQ),e(sQ,Igr),e(IF,Ngr),e(q,qgr),e(q,NF),e(NF,B2e),e(B2e,jgr),e(NF,Dgr),e(NF,lQ),e(lQ,Ggr),e(NF,Ogr),e(q,Vgr),e(q,qF),e(qF,I2e),e(I2e,Xgr),e(qF,zgr),e(qF,iQ),e(iQ,Wgr),e(qF,Qgr),e(q,Hgr),e(q,jF),e(jF,N2e),e(N2e,Ugr),e(jF,Jgr),e(jF,dQ),e(dQ,Ygr),e(jF,Kgr),e(q,Zgr),e(q,DF),e(DF,q2e),e(q2e,ehr),e(DF,ohr),e(DF,cQ),e(cQ,rhr),e(DF,thr),e(q,ahr),e(q,GF),e(GF,j2e),e(j2e,nhr),e(GF,shr),e(GF,fQ),e(fQ,lhr),e(GF,ihr),e(q,dhr),e(q,OF),e(OF,D2e),e(D2e,chr),e(OF,fhr),e(OF,mQ),e(mQ,mhr),e(OF,ghr),e(q,hhr),e(q,VF),e(VF,G2e),e(G2e,phr),e(VF,_hr),e(VF,gQ),e(gQ,uhr),e(VF,bhr),e(q,vhr),e(q,XF),e(XF,O2e),e(O2e,Fhr),e(XF,Thr),e(XF,hQ),e(hQ,Mhr),e(XF,Ehr),e(q,Chr),e(q,zF),e(zF,V2e),e(V2e,whr),e(zF,Ahr),e(zF,pQ),e(pQ,Lhr),e(zF,yhr),e(q,xhr),e(q,WF),e(WF,X2e),e(X2e,$hr),e(WF,khr),e(WF,_Q),e(_Q,Shr),e(WF,Rhr),e(q,Phr),e(q,QF),e(QF,z2e),e(z2e,Bhr),e(QF,Ihr),e(QF,uQ),e(uQ,Nhr),e(QF,qhr),e(q,jhr),e(q,HF),e(HF,W2e),e(W2e,Dhr),e(HF,Ghr),e(HF,bQ),e(bQ,Ohr),e(HF,Vhr),e(q,Xhr),e(q,UF),e(UF,Q2e),e(Q2e,zhr),e(UF,Whr),e(UF,vQ),e(vQ,Qhr),e(UF,Hhr),e(q,Uhr),e(q,JF),e(JF,H2e),e(H2e,Jhr),e(JF,Yhr),e(JF,FQ),e(FQ,Khr),e(JF,Zhr),e(q,epr),e(q,YF),e(YF,U2e),e(U2e,opr),e(YF,rpr),e(YF,TQ),e(TQ,tpr),e(YF,apr),e(q,npr),e(q,KF),e(KF,J2e),e(J2e,spr),e(KF,lpr),e(KF,MQ),e(MQ,ipr),e(KF,dpr),e(q,cpr),e(q,ZF),e(ZF,Y2e),e(Y2e,fpr),e(ZF,mpr),e(ZF,EQ),e(EQ,gpr),e(ZF,hpr),e(q,ppr),e(q,eT),e(eT,K2e),e(K2e,_pr),e(eT,upr),e(eT,CQ),e(CQ,bpr),e(eT,vpr),e(q,Fpr),e(q,oT),e(oT,Z2e),e(Z2e,Tpr),e(oT,Mpr),e(oT,wQ),e(wQ,Epr),e(oT,Cpr),e(q,wpr),e(q,rT),e(rT,e4e),e(e4e,Apr),e(rT,Lpr),e(rT,AQ),e(AQ,ypr),e(rT,xpr),e(q,$pr),e(q,tT),e(tT,o4e),e(o4e,kpr),e(tT,Spr),e(tT,LQ),e(LQ,Rpr),e(tT,Ppr),e(wr,Bpr),M(aT,wr,null),b(f,iDe,u),b(f,Wd,u),e(Wd,nT),e(nT,r4e),M(L8,r4e,null),e(Wd,Ipr),e(Wd,t4e),e(t4e,Npr),b(f,dDe,u),b(f,Ko,u),M(y8,Ko,null),e(Ko,qpr),e(Ko,Qd),e(Qd,jpr),e(Qd,yQ),e(yQ,Dpr),e(Qd,Gpr),e(Qd,xQ),e(xQ,Opr),e(Qd,Vpr),e(Ko,Xpr),e(Ko,x8),e(x8,zpr),e(x8,a4e),e(a4e,Wpr),e(x8,Qpr),e(Ko,Hpr),e(Ko,xt),M($8,xt,null),e(xt,Upr),e(xt,n4e),e(n4e,Jpr),e(xt,Ypr),e(xt,Hd),e(Hd,Kpr),e(Hd,s4e),e(s4e,Zpr),e(Hd,e_r),e(Hd,$Q),e($Q,o_r),e(Hd,r_r),e(xt,t_r),M(sT,xt,null),e(Ko,a_r),e(Ko,Ar),M(k8,Ar,null),e(Ar,n_r),e(Ar,l4e),e(l4e,s_r),e(Ar,l_r),e(Ar,Za),e(Za,i_r),e(Za,i4e),e(i4e,d_r),e(Za,c_r),e(Za,d4e),e(d4e,f_r),e(Za,m_r),e(Za,c4e),e(c4e,g_r),e(Za,h_r),e(Ar,p_r),e(Ar,se),e(se,lT),e(lT,f4e),e(f4e,__r),e(lT,u_r),e(lT,kQ),e(kQ,b_r),e(lT,v_r),e(se,F_r),e(se,iT),e(iT,m4e),e(m4e,T_r),e(iT,M_r),e(iT,SQ),e(SQ,E_r),e(iT,C_r),e(se,w_r),e(se,dT),e(dT,g4e),e(g4e,A_r),e(dT,L_r),e(dT,RQ),e(RQ,y_r),e(dT,x_r),e(se,$_r),e(se,cT),e(cT,h4e),e(h4e,k_r),e(cT,S_r),e(cT,PQ),e(PQ,R_r),e(cT,P_r),e(se,B_r),e(se,fT),e(fT,p4e),e(p4e,I_r),e(fT,N_r),e(fT,BQ),e(BQ,q_r),e(fT,j_r),e(se,D_r),e(se,mT),e(mT,_4e),e(_4e,G_r),e(mT,O_r),e(mT,IQ),e(IQ,V_r),e(mT,X_r),e(se,z_r),e(se,gT),e(gT,u4e),e(u4e,W_r),e(gT,Q_r),e(gT,NQ),e(NQ,H_r),e(gT,U_r),e(se,J_r),e(se,hT),e(hT,b4e),e(b4e,Y_r),e(hT,K_r),e(hT,qQ),e(qQ,Z_r),e(hT,eur),e(se,our),e(se,pT),e(pT,v4e),e(v4e,rur),e(pT,tur),e(pT,jQ),e(jQ,aur),e(pT,nur),e(se,sur),e(se,_T),e(_T,F4e),e(F4e,lur),e(_T,iur),e(_T,DQ),e(DQ,dur),e(_T,cur),e(se,fur),e(se,uT),e(uT,T4e),e(T4e,mur),e(uT,gur),e(uT,GQ),e(GQ,hur),e(uT,pur),e(se,_ur),e(se,bT),e(bT,M4e),e(M4e,uur),e(bT,bur),e(bT,OQ),e(OQ,vur),e(bT,Fur),e(se,Tur),e(se,vT),e(vT,E4e),e(E4e,Mur),e(vT,Eur),e(vT,VQ),e(VQ,Cur),e(vT,wur),e(se,Aur),e(se,FT),e(FT,C4e),e(C4e,Lur),e(FT,yur),e(FT,XQ),e(XQ,xur),e(FT,$ur),e(se,kur),e(se,TT),e(TT,w4e),e(w4e,Sur),e(TT,Rur),e(TT,zQ),e(zQ,Pur),e(TT,Bur),e(se,Iur),e(se,MT),e(MT,A4e),e(A4e,Nur),e(MT,qur),e(MT,WQ),e(WQ,jur),e(MT,Dur),e(se,Gur),e(se,ET),e(ET,L4e),e(L4e,Our),e(ET,Vur),e(ET,QQ),e(QQ,Xur),e(ET,zur),e(se,Wur),e(se,CT),e(CT,y4e),e(y4e,Qur),e(CT,Hur),e(CT,HQ),e(HQ,Uur),e(CT,Jur),e(se,Yur),e(se,wT),e(wT,x4e),e(x4e,Kur),e(wT,Zur),e(wT,UQ),e(UQ,e1r),e(wT,o1r),e(se,r1r),e(se,AT),e(AT,$4e),e($4e,t1r),e(AT,a1r),e(AT,JQ),e(JQ,n1r),e(AT,s1r),e(se,l1r),e(se,LT),e(LT,k4e),e(k4e,i1r),e(LT,d1r),e(LT,YQ),e(YQ,c1r),e(LT,f1r),e(se,m1r),e(se,yT),e(yT,S4e),e(S4e,g1r),e(yT,h1r),e(yT,KQ),e(KQ,p1r),e(yT,_1r),e(se,u1r),e(se,xT),e(xT,R4e),e(R4e,b1r),e(xT,v1r),e(xT,ZQ),e(ZQ,F1r),e(xT,T1r),e(Ar,M1r),M($T,Ar,null),b(f,cDe,u),b(f,Ud,u),e(Ud,kT),e(kT,P4e),M(S8,P4e,null),e(Ud,E1r),e(Ud,B4e),e(B4e,C1r),b(f,fDe,u),b(f,Zo,u),M(R8,Zo,null),e(Zo,w1r),e(Zo,Jd),e(Jd,A1r),e(Jd,eH),e(eH,L1r),e(Jd,y1r),e(Jd,oH),e(oH,x1r),e(Jd,$1r),e(Zo,k1r),e(Zo,P8),e(P8,S1r),e(P8,I4e),e(I4e,R1r),e(P8,P1r),e(Zo,B1r),e(Zo,$t),M(B8,$t,null),e($t,I1r),e($t,N4e),e(N4e,N1r),e($t,q1r),e($t,Yd),e(Yd,j1r),e(Yd,q4e),e(q4e,D1r),e(Yd,G1r),e(Yd,rH),e(rH,O1r),e(Yd,V1r),e($t,X1r),M(ST,$t,null),e(Zo,z1r),e(Zo,Lr),M(I8,Lr,null),e(Lr,W1r),e(Lr,j4e),e(j4e,Q1r),e(Lr,H1r),e(Lr,en),e(en,U1r),e(en,D4e),e(D4e,J1r),e(en,Y1r),e(en,G4e),e(G4e,K1r),e(en,Z1r),e(en,O4e),e(O4e,ebr),e(en,obr),e(Lr,rbr),e(Lr,Me),e(Me,RT),e(RT,V4e),e(V4e,tbr),e(RT,abr),e(RT,tH),e(tH,nbr),e(RT,sbr),e(Me,lbr),e(Me,PT),e(PT,X4e),e(X4e,ibr),e(PT,dbr),e(PT,aH),e(aH,cbr),e(PT,fbr),e(Me,mbr),e(Me,BT),e(BT,z4e),e(z4e,gbr),e(BT,hbr),e(BT,nH),e(nH,pbr),e(BT,_br),e(Me,ubr),e(Me,IT),e(IT,W4e),e(W4e,bbr),e(IT,vbr),e(IT,sH),e(sH,Fbr),e(IT,Tbr),e(Me,Mbr),e(Me,NT),e(NT,Q4e),e(Q4e,Ebr),e(NT,Cbr),e(NT,lH),e(lH,wbr),e(NT,Abr),e(Me,Lbr),e(Me,qT),e(qT,H4e),e(H4e,ybr),e(qT,xbr),e(qT,iH),e(iH,$br),e(qT,kbr),e(Me,Sbr),e(Me,jT),e(jT,U4e),e(U4e,Rbr),e(jT,Pbr),e(jT,dH),e(dH,Bbr),e(jT,Ibr),e(Me,Nbr),e(Me,DT),e(DT,J4e),e(J4e,qbr),e(DT,jbr),e(DT,cH),e(cH,Dbr),e(DT,Gbr),e(Me,Obr),e(Me,GT),e(GT,Y4e),e(Y4e,Vbr),e(GT,Xbr),e(GT,fH),e(fH,zbr),e(GT,Wbr),e(Me,Qbr),e(Me,OT),e(OT,K4e),e(K4e,Hbr),e(OT,Ubr),e(OT,mH),e(mH,Jbr),e(OT,Ybr),e(Me,Kbr),e(Me,VT),e(VT,Z4e),e(Z4e,Zbr),e(VT,e2r),e(VT,gH),e(gH,o2r),e(VT,r2r),e(Me,t2r),e(Me,XT),e(XT,eve),e(eve,a2r),e(XT,n2r),e(XT,hH),e(hH,s2r),e(XT,l2r),e(Me,i2r),e(Me,zT),e(zT,ove),e(ove,d2r),e(zT,c2r),e(zT,pH),e(pH,f2r),e(zT,m2r),e(Lr,g2r),M(WT,Lr,null),b(f,mDe,u),b(f,Kd,u),e(Kd,QT),e(QT,rve),M(N8,rve,null),e(Kd,h2r),e(Kd,tve),e(tve,p2r),b(f,gDe,u),b(f,er,u),M(q8,er,null),e(er,_2r),e(er,Zd),e(Zd,u2r),e(Zd,_H),e(_H,b2r),e(Zd,v2r),e(Zd,uH),e(uH,F2r),e(Zd,T2r),e(er,M2r),e(er,j8),e(j8,E2r),e(j8,ave),e(ave,C2r),e(j8,w2r),e(er,A2r),e(er,kt),M(D8,kt,null),e(kt,L2r),e(kt,nve),e(nve,y2r),e(kt,x2r),e(kt,ec),e(ec,$2r),e(ec,sve),e(sve,k2r),e(ec,S2r),e(ec,bH),e(bH,R2r),e(ec,P2r),e(kt,B2r),M(HT,kt,null),e(er,I2r),e(er,yr),M(G8,yr,null),e(yr,N2r),e(yr,lve),e(lve,q2r),e(yr,j2r),e(yr,on),e(on,D2r),e(on,ive),e(ive,G2r),e(on,O2r),e(on,dve),e(dve,V2r),e(on,X2r),e(on,cve),e(cve,z2r),e(on,W2r),e(yr,Q2r),e(yr,rn),e(rn,UT),e(UT,fve),e(fve,H2r),e(UT,U2r),e(UT,vH),e(vH,J2r),e(UT,Y2r),e(rn,K2r),e(rn,JT),e(JT,mve),e(mve,Z2r),e(JT,e4r),e(JT,FH),e(FH,o4r),e(JT,r4r),e(rn,t4r),e(rn,YT),e(YT,gve),e(gve,a4r),e(YT,n4r),e(YT,TH),e(TH,s4r),e(YT,l4r),e(rn,i4r),e(rn,KT),e(KT,hve),e(hve,d4r),e(KT,c4r),e(KT,MH),e(MH,f4r),e(KT,m4r),e(yr,g4r),M(ZT,yr,null),b(f,hDe,u),b(f,oc,u),e(oc,e7),e(e7,pve),M(O8,pve,null),e(oc,h4r),e(oc,_ve),e(_ve,p4r),b(f,pDe,u),b(f,or,u),M(V8,or,null),e(or,_4r),e(or,rc),e(rc,u4r),e(rc,EH),e(EH,b4r),e(rc,v4r),e(rc,CH),e(CH,F4r),e(rc,T4r),e(or,M4r),e(or,X8),e(X8,E4r),e(X8,uve),e(uve,C4r),e(X8,w4r),e(or,A4r),e(or,St),M(z8,St,null),e(St,L4r),e(St,bve),e(bve,y4r),e(St,x4r),e(St,tc),e(tc,$4r),e(tc,vve),e(vve,k4r),e(tc,S4r),e(tc,wH),e(wH,R4r),e(tc,P4r),e(St,B4r),M(o7,St,null),e(or,I4r),e(or,xr),M(W8,xr,null),e(xr,N4r),e(xr,Fve),e(Fve,q4r),e(xr,j4r),e(xr,tn),e(tn,D4r),e(tn,Tve),e(Tve,G4r),e(tn,O4r),e(tn,Mve),e(Mve,V4r),e(tn,X4r),e(tn,Eve),e(Eve,z4r),e(tn,W4r),e(xr,Q4r),e(xr,ie),e(ie,r7),e(r7,Cve),e(Cve,H4r),e(r7,U4r),e(r7,AH),e(AH,J4r),e(r7,Y4r),e(ie,K4r),e(ie,t7),e(t7,wve),e(wve,Z4r),e(t7,evr),e(t7,LH),e(LH,ovr),e(t7,rvr),e(ie,tvr),e(ie,a7),e(a7,Ave),e(Ave,avr),e(a7,nvr),e(a7,yH),e(yH,svr),e(a7,lvr),e(ie,ivr),e(ie,n7),e(n7,Lve),e(Lve,dvr),e(n7,cvr),e(n7,xH),e(xH,fvr),e(n7,mvr),e(ie,gvr),e(ie,s7),e(s7,yve),e(yve,hvr),e(s7,pvr),e(s7,$H),e($H,_vr),e(s7,uvr),e(ie,bvr),e(ie,l7),e(l7,xve),e(xve,vvr),e(l7,Fvr),e(l7,kH),e(kH,Tvr),e(l7,Mvr),e(ie,Evr),e(ie,i7),e(i7,$ve),e($ve,Cvr),e(i7,wvr),e(i7,SH),e(SH,Avr),e(i7,Lvr),e(ie,yvr),e(ie,d7),e(d7,kve),e(kve,xvr),e(d7,$vr),e(d7,RH),e(RH,kvr),e(d7,Svr),e(ie,Rvr),e(ie,c7),e(c7,Sve),e(Sve,Pvr),e(c7,Bvr),e(c7,PH),e(PH,Ivr),e(c7,Nvr),e(ie,qvr),e(ie,f7),e(f7,Rve),e(Rve,jvr),e(f7,Dvr),e(f7,BH),e(BH,Gvr),e(f7,Ovr),e(ie,Vvr),e(ie,m7),e(m7,Pve),e(Pve,Xvr),e(m7,zvr),e(m7,IH),e(IH,Wvr),e(m7,Qvr),e(ie,Hvr),e(ie,g7),e(g7,Bve),e(Bve,Uvr),e(g7,Jvr),e(g7,NH),e(NH,Yvr),e(g7,Kvr),e(ie,Zvr),e(ie,h7),e(h7,Ive),e(Ive,e5r),e(h7,o5r),e(h7,qH),e(qH,r5r),e(h7,t5r),e(ie,a5r),e(ie,p7),e(p7,Nve),e(Nve,n5r),e(p7,s5r),e(p7,jH),e(jH,l5r),e(p7,i5r),e(ie,d5r),e(ie,_7),e(_7,qve),e(qve,c5r),e(_7,f5r),e(_7,DH),e(DH,m5r),e(_7,g5r),e(ie,h5r),e(ie,u7),e(u7,jve),e(jve,p5r),e(u7,_5r),e(u7,GH),e(GH,u5r),e(u7,b5r),e(ie,v5r),e(ie,b7),e(b7,Dve),e(Dve,F5r),e(b7,T5r),e(b7,OH),e(OH,M5r),e(b7,E5r),e(ie,C5r),e(ie,v7),e(v7,Gve),e(Gve,w5r),e(v7,A5r),e(v7,VH),e(VH,L5r),e(v7,y5r),e(ie,x5r),e(ie,F7),e(F7,Ove),e(Ove,$5r),e(F7,k5r),e(F7,XH),e(XH,S5r),e(F7,R5r),e(ie,P5r),e(ie,T7),e(T7,Vve),e(Vve,B5r),e(T7,I5r),e(T7,zH),e(zH,N5r),e(T7,q5r),e(xr,j5r),M(M7,xr,null),b(f,_De,u),b(f,ac,u),e(ac,E7),e(E7,Xve),M(Q8,Xve,null),e(ac,D5r),e(ac,zve),e(zve,G5r),b(f,uDe,u),b(f,rr,u),M(H8,rr,null),e(rr,O5r),e(rr,nc),e(nc,V5r),e(nc,WH),e(WH,X5r),e(nc,z5r),e(nc,QH),e(QH,W5r),e(nc,Q5r),e(rr,H5r),e(rr,U8),e(U8,U5r),e(U8,Wve),e(Wve,J5r),e(U8,Y5r),e(rr,K5r),e(rr,Rt),M(J8,Rt,null),e(Rt,Z5r),e(Rt,Qve),e(Qve,e3r),e(Rt,o3r),e(Rt,sc),e(sc,r3r),e(sc,Hve),e(Hve,t3r),e(sc,a3r),e(sc,HH),e(HH,n3r),e(sc,s3r),e(Rt,l3r),M(C7,Rt,null),e(rr,i3r),e(rr,$r),M(Y8,$r,null),e($r,d3r),e($r,Uve),e(Uve,c3r),e($r,f3r),e($r,an),e(an,m3r),e(an,Jve),e(Jve,g3r),e(an,h3r),e(an,Yve),e(Yve,p3r),e(an,_3r),e(an,Kve),e(Kve,u3r),e(an,b3r),e($r,v3r),e($r,Le),e(Le,w7),e(w7,Zve),e(Zve,F3r),e(w7,T3r),e(w7,UH),e(UH,M3r),e(w7,E3r),e(Le,C3r),e(Le,A7),e(A7,e5e),e(e5e,w3r),e(A7,A3r),e(A7,JH),e(JH,L3r),e(A7,y3r),e(Le,x3r),e(Le,L7),e(L7,o5e),e(o5e,$3r),e(L7,k3r),e(L7,YH),e(YH,S3r),e(L7,R3r),e(Le,P3r),e(Le,y7),e(y7,r5e),e(r5e,B3r),e(y7,I3r),e(y7,KH),e(KH,N3r),e(y7,q3r),e(Le,j3r),e(Le,x7),e(x7,t5e),e(t5e,D3r),e(x7,G3r),e(x7,ZH),e(ZH,O3r),e(x7,V3r),e(Le,X3r),e(Le,$7),e($7,a5e),e(a5e,z3r),e($7,W3r),e($7,eU),e(eU,Q3r),e($7,H3r),e(Le,U3r),e(Le,k7),e(k7,n5e),e(n5e,J3r),e(k7,Y3r),e(k7,oU),e(oU,K3r),e(k7,Z3r),e(Le,eFr),e(Le,S7),e(S7,s5e),e(s5e,oFr),e(S7,rFr),e(S7,rU),e(rU,tFr),e(S7,aFr),e(Le,nFr),e(Le,R7),e(R7,l5e),e(l5e,sFr),e(R7,lFr),e(R7,tU),e(tU,iFr),e(R7,dFr),e(Le,cFr),e(Le,P7),e(P7,i5e),e(i5e,fFr),e(P7,mFr),e(P7,aU),e(aU,gFr),e(P7,hFr),e($r,pFr),M(B7,$r,null),b(f,bDe,u),b(f,lc,u),e(lc,I7),e(I7,d5e),M(K8,d5e,null),e(lc,_Fr),e(lc,c5e),e(c5e,uFr),b(f,vDe,u),b(f,tr,u),M(Z8,tr,null),e(tr,bFr),e(tr,ic),e(ic,vFr),e(ic,nU),e(nU,FFr),e(ic,TFr),e(ic,sU),e(sU,MFr),e(ic,EFr),e(tr,CFr),e(tr,e9),e(e9,wFr),e(e9,f5e),e(f5e,AFr),e(e9,LFr),e(tr,yFr),e(tr,Pt),M(o9,Pt,null),e(Pt,xFr),e(Pt,m5e),e(m5e,$Fr),e(Pt,kFr),e(Pt,dc),e(dc,SFr),e(dc,g5e),e(g5e,RFr),e(dc,PFr),e(dc,lU),e(lU,BFr),e(dc,IFr),e(Pt,NFr),M(N7,Pt,null),e(tr,qFr),e(tr,kr),M(r9,kr,null),e(kr,jFr),e(kr,h5e),e(h5e,DFr),e(kr,GFr),e(kr,nn),e(nn,OFr),e(nn,p5e),e(p5e,VFr),e(nn,XFr),e(nn,_5e),e(_5e,zFr),e(nn,WFr),e(nn,u5e),e(u5e,QFr),e(nn,HFr),e(kr,UFr),e(kr,oe),e(oe,q7),e(q7,b5e),e(b5e,JFr),e(q7,YFr),e(q7,iU),e(iU,KFr),e(q7,ZFr),e(oe,eTr),e(oe,j7),e(j7,v5e),e(v5e,oTr),e(j7,rTr),e(j7,dU),e(dU,tTr),e(j7,aTr),e(oe,nTr),e(oe,D7),e(D7,F5e),e(F5e,sTr),e(D7,lTr),e(D7,cU),e(cU,iTr),e(D7,dTr),e(oe,cTr),e(oe,G7),e(G7,T5e),e(T5e,fTr),e(G7,mTr),e(G7,fU),e(fU,gTr),e(G7,hTr),e(oe,pTr),e(oe,O7),e(O7,M5e),e(M5e,_Tr),e(O7,uTr),e(O7,mU),e(mU,bTr),e(O7,vTr),e(oe,FTr),e(oe,V7),e(V7,E5e),e(E5e,TTr),e(V7,MTr),e(V7,gU),e(gU,ETr),e(V7,CTr),e(oe,wTr),e(oe,X7),e(X7,C5e),e(C5e,ATr),e(X7,LTr),e(X7,hU),e(hU,yTr),e(X7,xTr),e(oe,$Tr),e(oe,z7),e(z7,w5e),e(w5e,kTr),e(z7,STr),e(z7,pU),e(pU,RTr),e(z7,PTr),e(oe,BTr),e(oe,W7),e(W7,A5e),e(A5e,ITr),e(W7,NTr),e(W7,_U),e(_U,qTr),e(W7,jTr),e(oe,DTr),e(oe,Q7),e(Q7,L5e),e(L5e,GTr),e(Q7,OTr),e(Q7,uU),e(uU,VTr),e(Q7,XTr),e(oe,zTr),e(oe,H7),e(H7,y5e),e(y5e,WTr),e(H7,QTr),e(H7,bU),e(bU,HTr),e(H7,UTr),e(oe,JTr),e(oe,U7),e(U7,x5e),e(x5e,YTr),e(U7,KTr),e(U7,vU),e(vU,ZTr),e(U7,e7r),e(oe,o7r),e(oe,J7),e(J7,$5e),e($5e,r7r),e(J7,t7r),e(J7,FU),e(FU,a7r),e(J7,n7r),e(oe,s7r),e(oe,Y7),e(Y7,k5e),e(k5e,l7r),e(Y7,i7r),e(Y7,TU),e(TU,d7r),e(Y7,c7r),e(oe,f7r),e(oe,K7),e(K7,S5e),e(S5e,m7r),e(K7,g7r),e(K7,MU),e(MU,h7r),e(K7,p7r),e(oe,_7r),e(oe,Z7),e(Z7,R5e),e(R5e,u7r),e(Z7,b7r),e(Z7,EU),e(EU,v7r),e(Z7,F7r),e(oe,T7r),e(oe,eM),e(eM,P5e),e(P5e,M7r),e(eM,E7r),e(eM,CU),e(CU,C7r),e(eM,w7r),e(oe,A7r),e(oe,oM),e(oM,B5e),e(B5e,L7r),e(oM,y7r),e(oM,wU),e(wU,x7r),e(oM,$7r),e(oe,k7r),e(oe,rM),e(rM,I5e),e(I5e,S7r),e(rM,R7r),e(rM,AU),e(AU,P7r),e(rM,B7r),e(oe,I7r),e(oe,tM),e(tM,N5e),e(N5e,N7r),e(tM,q7r),e(tM,LU),e(LU,j7r),e(tM,D7r),e(oe,G7r),e(oe,aM),e(aM,q5e),e(q5e,O7r),e(aM,V7r),e(aM,yU),e(yU,X7r),e(aM,z7r),e(oe,W7r),e(oe,nM),e(nM,j5e),e(j5e,Q7r),e(nM,H7r),e(nM,xU),e(xU,U7r),e(nM,J7r),e(oe,Y7r),e(oe,sM),e(sM,D5e),e(D5e,K7r),e(sM,Z7r),e(sM,$U),e($U,eMr),e(sM,oMr),e(oe,rMr),e(oe,lM),e(lM,G5e),e(G5e,tMr),e(lM,aMr),e(lM,kU),e(kU,nMr),e(lM,sMr),e(oe,lMr),e(oe,iM),e(iM,O5e),e(O5e,iMr),e(iM,dMr),e(iM,SU),e(SU,cMr),e(iM,fMr),e(oe,mMr),e(oe,dM),e(dM,V5e),e(V5e,gMr),e(dM,hMr),e(dM,RU),e(RU,pMr),e(dM,_Mr),e(kr,uMr),M(cM,kr,null),b(f,FDe,u),b(f,cc,u),e(cc,fM),e(fM,X5e),M(t9,X5e,null),e(cc,bMr),e(cc,z5e),e(z5e,vMr),b(f,TDe,u),b(f,ar,u),M(a9,ar,null),e(ar,FMr),e(ar,fc),e(fc,TMr),e(fc,PU),e(PU,MMr),e(fc,EMr),e(fc,BU),e(BU,CMr),e(fc,wMr),e(ar,AMr),e(ar,n9),e(n9,LMr),e(n9,W5e),e(W5e,yMr),e(n9,xMr),e(ar,$Mr),e(ar,Bt),M(s9,Bt,null),e(Bt,kMr),e(Bt,Q5e),e(Q5e,SMr),e(Bt,RMr),e(Bt,mc),e(mc,PMr),e(mc,H5e),e(H5e,BMr),e(mc,IMr),e(mc,IU),e(IU,NMr),e(mc,qMr),e(Bt,jMr),M(mM,Bt,null),e(ar,DMr),e(ar,Sr),M(l9,Sr,null),e(Sr,GMr),e(Sr,U5e),e(U5e,OMr),e(Sr,VMr),e(Sr,sn),e(sn,XMr),e(sn,J5e),e(J5e,zMr),e(sn,WMr),e(sn,Y5e),e(Y5e,QMr),e(sn,HMr),e(sn,K5e),e(K5e,UMr),e(sn,JMr),e(Sr,YMr),e(Sr,pe),e(pe,gM),e(gM,Z5e),e(Z5e,KMr),e(gM,ZMr),e(gM,NU),e(NU,eEr),e(gM,oEr),e(pe,rEr),e(pe,hM),e(hM,e3e),e(e3e,tEr),e(hM,aEr),e(hM,qU),e(qU,nEr),e(hM,sEr),e(pe,lEr),e(pe,pM),e(pM,o3e),e(o3e,iEr),e(pM,dEr),e(pM,jU),e(jU,cEr),e(pM,fEr),e(pe,mEr),e(pe,_M),e(_M,r3e),e(r3e,gEr),e(_M,hEr),e(_M,DU),e(DU,pEr),e(_M,_Er),e(pe,uEr),e(pe,uM),e(uM,t3e),e(t3e,bEr),e(uM,vEr),e(uM,GU),e(GU,FEr),e(uM,TEr),e(pe,MEr),e(pe,bM),e(bM,a3e),e(a3e,EEr),e(bM,CEr),e(bM,OU),e(OU,wEr),e(bM,AEr),e(pe,LEr),e(pe,vM),e(vM,n3e),e(n3e,yEr),e(vM,xEr),e(vM,VU),e(VU,$Er),e(vM,kEr),e(pe,SEr),e(pe,FM),e(FM,s3e),e(s3e,REr),e(FM,PEr),e(FM,XU),e(XU,BEr),e(FM,IEr),e(pe,NEr),e(pe,TM),e(TM,l3e),e(l3e,qEr),e(TM,jEr),e(TM,zU),e(zU,DEr),e(TM,GEr),e(pe,OEr),e(pe,MM),e(MM,i3e),e(i3e,VEr),e(MM,XEr),e(MM,WU),e(WU,zEr),e(MM,WEr),e(pe,QEr),e(pe,EM),e(EM,d3e),e(d3e,HEr),e(EM,UEr),e(EM,QU),e(QU,JEr),e(EM,YEr),e(pe,KEr),e(pe,CM),e(CM,c3e),e(c3e,ZEr),e(CM,eCr),e(CM,HU),e(HU,oCr),e(CM,rCr),e(pe,tCr),e(pe,wM),e(wM,f3e),e(f3e,aCr),e(wM,nCr),e(wM,UU),e(UU,sCr),e(wM,lCr),e(pe,iCr),e(pe,AM),e(AM,m3e),e(m3e,dCr),e(AM,cCr),e(AM,JU),e(JU,fCr),e(AM,mCr),e(pe,gCr),e(pe,LM),e(LM,g3e),e(g3e,hCr),e(LM,pCr),e(LM,YU),e(YU,_Cr),e(LM,uCr),e(pe,bCr),e(pe,yM),e(yM,h3e),e(h3e,vCr),e(yM,FCr),e(yM,KU),e(KU,TCr),e(yM,MCr),e(pe,ECr),e(pe,xM),e(xM,p3e),e(p3e,CCr),e(xM,wCr),e(xM,ZU),e(ZU,ACr),e(xM,LCr),e(Sr,yCr),M($M,Sr,null),b(f,MDe,u),b(f,gc,u),e(gc,kM),e(kM,_3e),M(i9,_3e,null),e(gc,xCr),e(gc,u3e),e(u3e,$Cr),b(f,EDe,u),b(f,nr,u),M(d9,nr,null),e(nr,kCr),e(nr,hc),e(hc,SCr),e(hc,eJ),e(eJ,RCr),e(hc,PCr),e(hc,oJ),e(oJ,BCr),e(hc,ICr),e(nr,NCr),e(nr,c9),e(c9,qCr),e(c9,b3e),e(b3e,jCr),e(c9,DCr),e(nr,GCr),e(nr,It),M(f9,It,null),e(It,OCr),e(It,v3e),e(v3e,VCr),e(It,XCr),e(It,pc),e(pc,zCr),e(pc,F3e),e(F3e,WCr),e(pc,QCr),e(pc,rJ),e(rJ,HCr),e(pc,UCr),e(It,JCr),M(SM,It,null),e(nr,YCr),e(nr,Rr),M(m9,Rr,null),e(Rr,KCr),e(Rr,T3e),e(T3e,ZCr),e(Rr,e0r),e(Rr,ln),e(ln,o0r),e(ln,M3e),e(M3e,r0r),e(ln,t0r),e(ln,E3e),e(E3e,a0r),e(ln,n0r),e(ln,C3e),e(C3e,s0r),e(ln,l0r),e(Rr,i0r),e(Rr,g9),e(g9,RM),e(RM,w3e),e(w3e,d0r),e(RM,c0r),e(RM,tJ),e(tJ,f0r),e(RM,m0r),e(g9,g0r),e(g9,PM),e(PM,A3e),e(A3e,h0r),e(PM,p0r),e(PM,aJ),e(aJ,_0r),e(PM,u0r),e(Rr,b0r),M(BM,Rr,null),b(f,CDe,u),b(f,_c,u),e(_c,IM),e(IM,L3e),M(h9,L3e,null),e(_c,v0r),e(_c,y3e),e(y3e,F0r),b(f,wDe,u),b(f,sr,u),M(p9,sr,null),e(sr,T0r),e(sr,uc),e(uc,M0r),e(uc,nJ),e(nJ,E0r),e(uc,C0r),e(uc,sJ),e(sJ,w0r),e(uc,A0r),e(sr,L0r),e(sr,_9),e(_9,y0r),e(_9,x3e),e(x3e,x0r),e(_9,$0r),e(sr,k0r),e(sr,Nt),M(u9,Nt,null),e(Nt,S0r),e(Nt,$3e),e($3e,R0r),e(Nt,P0r),e(Nt,bc),e(bc,B0r),e(bc,k3e),e(k3e,I0r),e(bc,N0r),e(bc,lJ),e(lJ,q0r),e(bc,j0r),e(Nt,D0r),M(NM,Nt,null),e(sr,G0r),e(sr,Pr),M(b9,Pr,null),e(Pr,O0r),e(Pr,S3e),e(S3e,V0r),e(Pr,X0r),e(Pr,dn),e(dn,z0r),e(dn,R3e),e(R3e,W0r),e(dn,Q0r),e(dn,P3e),e(P3e,H0r),e(dn,U0r),e(dn,B3e),e(B3e,J0r),e(dn,Y0r),e(Pr,K0r),e(Pr,I3e),e(I3e,qM),e(qM,N3e),e(N3e,Z0r),e(qM,ewr),e(qM,iJ),e(iJ,owr),e(qM,rwr),e(Pr,twr),M(jM,Pr,null),b(f,ADe,u),b(f,vc,u),e(vc,DM),e(DM,q3e),M(v9,q3e,null),e(vc,awr),e(vc,j3e),e(j3e,nwr),b(f,LDe,u),b(f,lr,u),M(F9,lr,null),e(lr,swr),e(lr,Fc),e(Fc,lwr),e(Fc,dJ),e(dJ,iwr),e(Fc,dwr),e(Fc,cJ),e(cJ,cwr),e(Fc,fwr),e(lr,mwr),e(lr,T9),e(T9,gwr),e(T9,D3e),e(D3e,hwr),e(T9,pwr),e(lr,_wr),e(lr,qt),M(M9,qt,null),e(qt,uwr),e(qt,G3e),e(G3e,bwr),e(qt,vwr),e(qt,Tc),e(Tc,Fwr),e(Tc,O3e),e(O3e,Twr),e(Tc,Mwr),e(Tc,fJ),e(fJ,Ewr),e(Tc,Cwr),e(qt,wwr),M(GM,qt,null),e(lr,Awr),e(lr,Br),M(E9,Br,null),e(Br,Lwr),e(Br,V3e),e(V3e,ywr),e(Br,xwr),e(Br,cn),e(cn,$wr),e(cn,X3e),e(X3e,kwr),e(cn,Swr),e(cn,z3e),e(z3e,Rwr),e(cn,Pwr),e(cn,W3e),e(W3e,Bwr),e(cn,Iwr),e(Br,Nwr),e(Br,de),e(de,OM),e(OM,Q3e),e(Q3e,qwr),e(OM,jwr),e(OM,mJ),e(mJ,Dwr),e(OM,Gwr),e(de,Owr),e(de,VM),e(VM,H3e),e(H3e,Vwr),e(VM,Xwr),e(VM,gJ),e(gJ,zwr),e(VM,Wwr),e(de,Qwr),e(de,XM),e(XM,U3e),e(U3e,Hwr),e(XM,Uwr),e(XM,hJ),e(hJ,Jwr),e(XM,Ywr),e(de,Kwr),e(de,zM),e(zM,J3e),e(J3e,Zwr),e(zM,eAr),e(zM,pJ),e(pJ,oAr),e(zM,rAr),e(de,tAr),e(de,WM),e(WM,Y3e),e(Y3e,aAr),e(WM,nAr),e(WM,_J),e(_J,sAr),e(WM,lAr),e(de,iAr),e(de,QM),e(QM,K3e),e(K3e,dAr),e(QM,cAr),e(QM,uJ),e(uJ,fAr),e(QM,mAr),e(de,gAr),e(de,HM),e(HM,Z3e),e(Z3e,hAr),e(HM,pAr),e(HM,bJ),e(bJ,_Ar),e(HM,uAr),e(de,bAr),e(de,UM),e(UM,eFe),e(eFe,vAr),e(UM,FAr),e(UM,vJ),e(vJ,TAr),e(UM,MAr),e(de,EAr),e(de,JM),e(JM,oFe),e(oFe,CAr),e(JM,wAr),e(JM,FJ),e(FJ,AAr),e(JM,LAr),e(de,yAr),e(de,YM),e(YM,rFe),e(rFe,xAr),e(YM,$Ar),e(YM,TJ),e(TJ,kAr),e(YM,SAr),e(de,RAr),e(de,KM),e(KM,tFe),e(tFe,PAr),e(KM,BAr),e(KM,MJ),e(MJ,IAr),e(KM,NAr),e(de,qAr),e(de,ZM),e(ZM,aFe),e(aFe,jAr),e(ZM,DAr),e(ZM,EJ),e(EJ,GAr),e(ZM,OAr),e(de,VAr),e(de,eE),e(eE,nFe),e(nFe,XAr),e(eE,zAr),e(eE,CJ),e(CJ,WAr),e(eE,QAr),e(de,HAr),e(de,oE),e(oE,sFe),e(sFe,UAr),e(oE,JAr),e(oE,wJ),e(wJ,YAr),e(oE,KAr),e(de,ZAr),e(de,rE),e(rE,lFe),e(lFe,e6r),e(rE,o6r),e(rE,AJ),e(AJ,r6r),e(rE,t6r),e(de,a6r),e(de,tE),e(tE,iFe),e(iFe,n6r),e(tE,s6r),e(tE,LJ),e(LJ,l6r),e(tE,i6r),e(de,d6r),e(de,aE),e(aE,dFe),e(dFe,c6r),e(aE,f6r),e(aE,yJ),e(yJ,m6r),e(aE,g6r),e(de,h6r),e(de,nE),e(nE,cFe),e(cFe,p6r),e(nE,_6r),e(nE,xJ),e(xJ,u6r),e(nE,b6r),e(de,v6r),e(de,sE),e(sE,fFe),e(fFe,F6r),e(sE,T6r),e(sE,$J),e($J,M6r),e(sE,E6r),e(de,C6r),e(de,lE),e(lE,mFe),e(mFe,w6r),e(lE,A6r),e(lE,kJ),e(kJ,L6r),e(lE,y6r),e(Br,x6r),M(iE,Br,null),b(f,yDe,u),b(f,Mc,u),e(Mc,dE),e(dE,gFe),M(C9,gFe,null),e(Mc,$6r),e(Mc,hFe),e(hFe,k6r),b(f,xDe,u),b(f,ir,u),M(w9,ir,null),e(ir,S6r),e(ir,Ec),e(Ec,R6r),e(Ec,SJ),e(SJ,P6r),e(Ec,B6r),e(Ec,RJ),e(RJ,I6r),e(Ec,N6r),e(ir,q6r),e(ir,A9),e(A9,j6r),e(A9,pFe),e(pFe,D6r),e(A9,G6r),e(ir,O6r),e(ir,jt),M(L9,jt,null),e(jt,V6r),e(jt,_Fe),e(_Fe,X6r),e(jt,z6r),e(jt,Cc),e(Cc,W6r),e(Cc,uFe),e(uFe,Q6r),e(Cc,H6r),e(Cc,PJ),e(PJ,U6r),e(Cc,J6r),e(jt,Y6r),M(cE,jt,null),e(ir,K6r),e(ir,Ir),M(y9,Ir,null),e(Ir,Z6r),e(Ir,bFe),e(bFe,eLr),e(Ir,oLr),e(Ir,fn),e(fn,rLr),e(fn,vFe),e(vFe,tLr),e(fn,aLr),e(fn,FFe),e(FFe,nLr),e(fn,sLr),e(fn,TFe),e(TFe,lLr),e(fn,iLr),e(Ir,dLr),e(Ir,ce),e(ce,fE),e(fE,MFe),e(MFe,cLr),e(fE,fLr),e(fE,BJ),e(BJ,mLr),e(fE,gLr),e(ce,hLr),e(ce,mE),e(mE,EFe),e(EFe,pLr),e(mE,_Lr),e(mE,IJ),e(IJ,uLr),e(mE,bLr),e(ce,vLr),e(ce,gE),e(gE,CFe),e(CFe,FLr),e(gE,TLr),e(gE,NJ),e(NJ,MLr),e(gE,ELr),e(ce,CLr),e(ce,hE),e(hE,wFe),e(wFe,wLr),e(hE,ALr),e(hE,qJ),e(qJ,LLr),e(hE,yLr),e(ce,xLr),e(ce,pE),e(pE,AFe),e(AFe,$Lr),e(pE,kLr),e(pE,jJ),e(jJ,SLr),e(pE,RLr),e(ce,PLr),e(ce,_E),e(_E,LFe),e(LFe,BLr),e(_E,ILr),e(_E,DJ),e(DJ,NLr),e(_E,qLr),e(ce,jLr),e(ce,uE),e(uE,yFe),e(yFe,DLr),e(uE,GLr),e(uE,GJ),e(GJ,OLr),e(uE,VLr),e(ce,XLr),e(ce,bE),e(bE,xFe),e(xFe,zLr),e(bE,WLr),e(bE,OJ),e(OJ,QLr),e(bE,HLr),e(ce,ULr),e(ce,vE),e(vE,$Fe),e($Fe,JLr),e(vE,YLr),e(vE,VJ),e(VJ,KLr),e(vE,ZLr),e(ce,eyr),e(ce,FE),e(FE,kFe),e(kFe,oyr),e(FE,ryr),e(FE,XJ),e(XJ,tyr),e(FE,ayr),e(ce,nyr),e(ce,TE),e(TE,SFe),e(SFe,syr),e(TE,lyr),e(TE,zJ),e(zJ,iyr),e(TE,dyr),e(ce,cyr),e(ce,ME),e(ME,RFe),e(RFe,fyr),e(ME,myr),e(ME,WJ),e(WJ,gyr),e(ME,hyr),e(ce,pyr),e(ce,EE),e(EE,PFe),e(PFe,_yr),e(EE,uyr),e(EE,QJ),e(QJ,byr),e(EE,vyr),e(ce,Fyr),e(ce,CE),e(CE,BFe),e(BFe,Tyr),e(CE,Myr),e(CE,HJ),e(HJ,Eyr),e(CE,Cyr),e(ce,wyr),e(ce,wE),e(wE,IFe),e(IFe,Ayr),e(wE,Lyr),e(wE,UJ),e(UJ,yyr),e(wE,xyr),e(ce,$yr),e(ce,AE),e(AE,NFe),e(NFe,kyr),e(AE,Syr),e(AE,JJ),e(JJ,Ryr),e(AE,Pyr),e(ce,Byr),e(ce,LE),e(LE,qFe),e(qFe,Iyr),e(LE,Nyr),e(LE,YJ),e(YJ,qyr),e(LE,jyr),e(ce,Dyr),e(ce,yE),e(yE,jFe),e(jFe,Gyr),e(yE,Oyr),e(yE,KJ),e(KJ,Vyr),e(yE,Xyr),e(ce,zyr),e(ce,xE),e(xE,DFe),e(DFe,Wyr),e(xE,Qyr),e(xE,ZJ),e(ZJ,Hyr),e(xE,Uyr),e(ce,Jyr),e(ce,$E),e($E,GFe),e(GFe,Yyr),e($E,Kyr),e($E,eY),e(eY,Zyr),e($E,e8r),e(Ir,o8r),M(kE,Ir,null),b(f,$De,u),b(f,wc,u),e(wc,SE),e(SE,OFe),M(x9,OFe,null),e(wc,r8r),e(wc,VFe),e(VFe,t8r),b(f,kDe,u),b(f,dr,u),M($9,dr,null),e(dr,a8r),e(dr,Ac),e(Ac,n8r),e(Ac,oY),e(oY,s8r),e(Ac,l8r),e(Ac,rY),e(rY,i8r),e(Ac,d8r),e(dr,c8r),e(dr,k9),e(k9,f8r),e(k9,XFe),e(XFe,m8r),e(k9,g8r),e(dr,h8r),e(dr,Dt),M(S9,Dt,null),e(Dt,p8r),e(Dt,zFe),e(zFe,_8r),e(Dt,u8r),e(Dt,Lc),e(Lc,b8r),e(Lc,WFe),e(WFe,v8r),e(Lc,F8r),e(Lc,tY),e(tY,T8r),e(Lc,M8r),e(Dt,E8r),M(RE,Dt,null),e(dr,C8r),e(dr,Nr),M(R9,Nr,null),e(Nr,w8r),e(Nr,QFe),e(QFe,A8r),e(Nr,L8r),e(Nr,mn),e(mn,y8r),e(mn,HFe),e(HFe,x8r),e(mn,$8r),e(mn,UFe),e(UFe,k8r),e(mn,S8r),e(mn,JFe),e(JFe,R8r),e(mn,P8r),e(Nr,B8r),e(Nr,YFe),e(YFe,PE),e(PE,KFe),e(KFe,I8r),e(PE,N8r),e(PE,aY),e(aY,q8r),e(PE,j8r),e(Nr,D8r),M(BE,Nr,null),b(f,SDe,u),b(f,yc,u),e(yc,IE),e(IE,ZFe),M(P9,ZFe,null),e(yc,G8r),e(yc,eTe),e(eTe,O8r),b(f,RDe,u),b(f,cr,u),M(B9,cr,null),e(cr,V8r),e(cr,xc),e(xc,X8r),e(xc,nY),e(nY,z8r),e(xc,W8r),e(xc,sY),e(sY,Q8r),e(xc,H8r),e(cr,U8r),e(cr,I9),e(I9,J8r),e(I9,oTe),e(oTe,Y8r),e(I9,K8r),e(cr,Z8r),e(cr,Gt),M(N9,Gt,null),e(Gt,e9r),e(Gt,rTe),e(rTe,o9r),e(Gt,r9r),e(Gt,$c),e($c,t9r),e($c,tTe),e(tTe,a9r),e($c,n9r),e($c,lY),e(lY,s9r),e($c,l9r),e(Gt,i9r),M(NE,Gt,null),e(cr,d9r),e(cr,qr),M(q9,qr,null),e(qr,c9r),e(qr,aTe),e(aTe,f9r),e(qr,m9r),e(qr,gn),e(gn,g9r),e(gn,nTe),e(nTe,h9r),e(gn,p9r),e(gn,sTe),e(sTe,_9r),e(gn,u9r),e(gn,lTe),e(lTe,b9r),e(gn,v9r),e(qr,F9r),e(qr,iTe),e(iTe,qE),e(qE,dTe),e(dTe,T9r),e(qE,M9r),e(qE,iY),e(iY,E9r),e(qE,C9r),e(qr,w9r),M(jE,qr,null),b(f,PDe,u),b(f,kc,u),e(kc,DE),e(DE,cTe),M(j9,cTe,null),e(kc,A9r),e(kc,fTe),e(fTe,L9r),b(f,BDe,u),b(f,fr,u),M(D9,fr,null),e(fr,y9r),e(fr,Sc),e(Sc,x9r),e(Sc,dY),e(dY,$9r),e(Sc,k9r),e(Sc,cY),e(cY,S9r),e(Sc,R9r),e(fr,P9r),e(fr,G9),e(G9,B9r),e(G9,mTe),e(mTe,I9r),e(G9,N9r),e(fr,q9r),e(fr,Ot),M(O9,Ot,null),e(Ot,j9r),e(Ot,gTe),e(gTe,D9r),e(Ot,G9r),e(Ot,Rc),e(Rc,O9r),e(Rc,hTe),e(hTe,V9r),e(Rc,X9r),e(Rc,fY),e(fY,z9r),e(Rc,W9r),e(Ot,Q9r),M(GE,Ot,null),e(fr,H9r),e(fr,jr),M(V9,jr,null),e(jr,U9r),e(jr,pTe),e(pTe,J9r),e(jr,Y9r),e(jr,hn),e(hn,K9r),e(hn,_Te),e(_Te,Z9r),e(hn,exr),e(hn,uTe),e(uTe,oxr),e(hn,rxr),e(hn,bTe),e(bTe,txr),e(hn,axr),e(jr,nxr),e(jr,re),e(re,OE),e(OE,vTe),e(vTe,sxr),e(OE,lxr),e(OE,mY),e(mY,ixr),e(OE,dxr),e(re,cxr),e(re,VE),e(VE,FTe),e(FTe,fxr),e(VE,mxr),e(VE,gY),e(gY,gxr),e(VE,hxr),e(re,pxr),e(re,XE),e(XE,TTe),e(TTe,_xr),e(XE,uxr),e(XE,hY),e(hY,bxr),e(XE,vxr),e(re,Fxr),e(re,zE),e(zE,MTe),e(MTe,Txr),e(zE,Mxr),e(zE,pY),e(pY,Exr),e(zE,Cxr),e(re,wxr),e(re,WE),e(WE,ETe),e(ETe,Axr),e(WE,Lxr),e(WE,_Y),e(_Y,yxr),e(WE,xxr),e(re,$xr),e(re,QE),e(QE,CTe),e(CTe,kxr),e(QE,Sxr),e(QE,uY),e(uY,Rxr),e(QE,Pxr),e(re,Bxr),e(re,HE),e(HE,wTe),e(wTe,Ixr),e(HE,Nxr),e(HE,bY),e(bY,qxr),e(HE,jxr),e(re,Dxr),e(re,UE),e(UE,ATe),e(ATe,Gxr),e(UE,Oxr),e(UE,vY),e(vY,Vxr),e(UE,Xxr),e(re,zxr),e(re,JE),e(JE,LTe),e(LTe,Wxr),e(JE,Qxr),e(JE,FY),e(FY,Hxr),e(JE,Uxr),e(re,Jxr),e(re,YE),e(YE,yTe),e(yTe,Yxr),e(YE,Kxr),e(YE,TY),e(TY,Zxr),e(YE,e$r),e(re,o$r),e(re,KE),e(KE,xTe),e(xTe,r$r),e(KE,t$r),e(KE,MY),e(MY,a$r),e(KE,n$r),e(re,s$r),e(re,ZE),e(ZE,$Te),e($Te,l$r),e(ZE,i$r),e(ZE,EY),e(EY,d$r),e(ZE,c$r),e(re,f$r),e(re,eC),e(eC,kTe),e(kTe,m$r),e(eC,g$r),e(eC,CY),e(CY,h$r),e(eC,p$r),e(re,_$r),e(re,oC),e(oC,STe),e(STe,u$r),e(oC,b$r),e(oC,wY),e(wY,v$r),e(oC,F$r),e(re,T$r),e(re,rC),e(rC,RTe),e(RTe,M$r),e(rC,E$r),e(rC,AY),e(AY,C$r),e(rC,w$r),e(re,A$r),e(re,tC),e(tC,PTe),e(PTe,L$r),e(tC,y$r),e(tC,LY),e(LY,x$r),e(tC,$$r),e(re,k$r),e(re,aC),e(aC,BTe),e(BTe,S$r),e(aC,R$r),e(aC,yY),e(yY,P$r),e(aC,B$r),e(re,I$r),e(re,nC),e(nC,ITe),e(ITe,N$r),e(nC,q$r),e(nC,xY),e(xY,j$r),e(nC,D$r),e(re,G$r),e(re,sC),e(sC,NTe),e(NTe,O$r),e(sC,V$r),e(sC,$Y),e($Y,X$r),e(sC,z$r),e(re,W$r),e(re,lC),e(lC,qTe),e(qTe,Q$r),e(lC,H$r),e(lC,kY),e(kY,U$r),e(lC,J$r),e(re,Y$r),e(re,iC),e(iC,jTe),e(jTe,K$r),e(iC,Z$r),e(iC,SY),e(SY,ekr),e(iC,okr),e(re,rkr),e(re,dC),e(dC,DTe),e(DTe,tkr),e(dC,akr),e(dC,RY),e(RY,nkr),e(dC,skr),e(re,lkr),e(re,cC),e(cC,GTe),e(GTe,ikr),e(cC,dkr),e(cC,PY),e(PY,ckr),e(cC,fkr),e(re,mkr),e(re,fC),e(fC,OTe),e(OTe,gkr),e(fC,hkr),e(fC,BY),e(BY,pkr),e(fC,_kr),e(re,ukr),e(re,mC),e(mC,VTe),e(VTe,bkr),e(mC,vkr),e(mC,IY),e(IY,Fkr),e(mC,Tkr),e(re,Mkr),e(re,gC),e(gC,XTe),e(XTe,Ekr),e(gC,Ckr),e(gC,NY),e(NY,wkr),e(gC,Akr),e(jr,Lkr),M(hC,jr,null),b(f,IDe,u),b(f,Pc,u),e(Pc,pC),e(pC,zTe),M(X9,zTe,null),e(Pc,ykr),e(Pc,WTe),e(WTe,xkr),b(f,NDe,u),b(f,mr,u),M(z9,mr,null),e(mr,$kr),e(mr,Bc),e(Bc,kkr),e(Bc,qY),e(qY,Skr),e(Bc,Rkr),e(Bc,jY),e(jY,Pkr),e(Bc,Bkr),e(mr,Ikr),e(mr,W9),e(W9,Nkr),e(W9,QTe),e(QTe,qkr),e(W9,jkr),e(mr,Dkr),e(mr,Vt),M(Q9,Vt,null),e(Vt,Gkr),e(Vt,HTe),e(HTe,Okr),e(Vt,Vkr),e(Vt,Ic),e(Ic,Xkr),e(Ic,UTe),e(UTe,zkr),e(Ic,Wkr),e(Ic,DY),e(DY,Qkr),e(Ic,Hkr),e(Vt,Ukr),M(_C,Vt,null),e(mr,Jkr),e(mr,Dr),M(H9,Dr,null),e(Dr,Ykr),e(Dr,JTe),e(JTe,Kkr),e(Dr,Zkr),e(Dr,pn),e(pn,eSr),e(pn,YTe),e(YTe,oSr),e(pn,rSr),e(pn,KTe),e(KTe,tSr),e(pn,aSr),e(pn,ZTe),e(ZTe,nSr),e(pn,sSr),e(Dr,lSr),e(Dr,ye),e(ye,uC),e(uC,e7e),e(e7e,iSr),e(uC,dSr),e(uC,GY),e(GY,cSr),e(uC,fSr),e(ye,mSr),e(ye,bC),e(bC,o7e),e(o7e,gSr),e(bC,hSr),e(bC,OY),e(OY,pSr),e(bC,_Sr),e(ye,uSr),e(ye,vC),e(vC,r7e),e(r7e,bSr),e(vC,vSr),e(vC,VY),e(VY,FSr),e(vC,TSr),e(ye,MSr),e(ye,FC),e(FC,t7e),e(t7e,ESr),e(FC,CSr),e(FC,XY),e(XY,wSr),e(FC,ASr),e(ye,LSr),e(ye,TC),e(TC,a7e),e(a7e,ySr),e(TC,xSr),e(TC,zY),e(zY,$Sr),e(TC,kSr),e(ye,SSr),e(ye,MC),e(MC,n7e),e(n7e,RSr),e(MC,PSr),e(MC,WY),e(WY,BSr),e(MC,ISr),e(ye,NSr),e(ye,EC),e(EC,s7e),e(s7e,qSr),e(EC,jSr),e(EC,QY),e(QY,DSr),e(EC,GSr),e(ye,OSr),e(ye,CC),e(CC,l7e),e(l7e,VSr),e(CC,XSr),e(CC,HY),e(HY,zSr),e(CC,WSr),e(ye,QSr),e(ye,wC),e(wC,i7e),e(i7e,HSr),e(wC,USr),e(wC,UY),e(UY,JSr),e(wC,YSr),e(ye,KSr),e(ye,AC),e(AC,d7e),e(d7e,ZSr),e(AC,eRr),e(AC,JY),e(JY,oRr),e(AC,rRr),e(Dr,tRr),M(LC,Dr,null),b(f,qDe,u),b(f,Nc,u),e(Nc,yC),e(yC,c7e),M(U9,c7e,null),e(Nc,aRr),e(Nc,f7e),e(f7e,nRr),b(f,jDe,u),b(f,gr,u),M(J9,gr,null),e(gr,sRr),e(gr,qc),e(qc,lRr),e(qc,YY),e(YY,iRr),e(qc,dRr),e(qc,KY),e(KY,cRr),e(qc,fRr),e(gr,mRr),e(gr,Y9),e(Y9,gRr),e(Y9,m7e),e(m7e,hRr),e(Y9,pRr),e(gr,_Rr),e(gr,Xt),M(K9,Xt,null),e(Xt,uRr),e(Xt,g7e),e(g7e,bRr),e(Xt,vRr),e(Xt,jc),e(jc,FRr),e(jc,h7e),e(h7e,TRr),e(jc,MRr),e(jc,ZY),e(ZY,ERr),e(jc,CRr),e(Xt,wRr),M(xC,Xt,null),e(gr,ARr),e(gr,Gr),M(Z9,Gr,null),e(Gr,LRr),e(Gr,p7e),e(p7e,yRr),e(Gr,xRr),e(Gr,_n),e(_n,$Rr),e(_n,_7e),e(_7e,kRr),e(_n,SRr),e(_n,u7e),e(u7e,RRr),e(_n,PRr),e(_n,b7e),e(b7e,BRr),e(_n,IRr),e(Gr,NRr),e(Gr,Ee),e(Ee,$C),e($C,v7e),e(v7e,qRr),e($C,jRr),e($C,eK),e(eK,DRr),e($C,GRr),e(Ee,ORr),e(Ee,kC),e(kC,F7e),e(F7e,VRr),e(kC,XRr),e(kC,oK),e(oK,zRr),e(kC,WRr),e(Ee,QRr),e(Ee,SC),e(SC,T7e),e(T7e,HRr),e(SC,URr),e(SC,rK),e(rK,JRr),e(SC,YRr),e(Ee,KRr),e(Ee,RC),e(RC,M7e),e(M7e,ZRr),e(RC,ePr),e(RC,tK),e(tK,oPr),e(RC,rPr),e(Ee,tPr),e(Ee,PC),e(PC,E7e),e(E7e,aPr),e(PC,nPr),e(PC,aK),e(aK,sPr),e(PC,lPr),e(Ee,iPr),e(Ee,BC),e(BC,C7e),e(C7e,dPr),e(BC,cPr),e(BC,nK),e(nK,fPr),e(BC,mPr),e(Ee,gPr),e(Ee,IC),e(IC,w7e),e(w7e,hPr),e(IC,pPr),e(IC,sK),e(sK,_Pr),e(IC,uPr),e(Ee,bPr),e(Ee,NC),e(NC,A7e),e(A7e,vPr),e(NC,FPr),e(NC,lK),e(lK,TPr),e(NC,MPr),e(Ee,EPr),e(Ee,qC),e(qC,L7e),e(L7e,CPr),e(qC,wPr),e(qC,iK),e(iK,APr),e(qC,LPr),e(Ee,yPr),e(Ee,jC),e(jC,y7e),e(y7e,xPr),e(jC,$Pr),e(jC,dK),e(dK,kPr),e(jC,SPr),e(Ee,RPr),e(Ee,DC),e(DC,x7e),e(x7e,PPr),e(DC,BPr),e(DC,cK),e(cK,IPr),e(DC,NPr),e(Ee,qPr),e(Ee,GC),e(GC,$7e),e($7e,jPr),e(GC,DPr),e(GC,fK),e(fK,GPr),e(GC,OPr),e(Gr,VPr),M(OC,Gr,null),b(f,DDe,u),b(f,Dc,u),e(Dc,VC),e(VC,k7e),M(ex,k7e,null),e(Dc,XPr),e(Dc,S7e),e(S7e,zPr),b(f,GDe,u),b(f,hr,u),M(ox,hr,null),e(hr,WPr),e(hr,Gc),e(Gc,QPr),e(Gc,mK),e(mK,HPr),e(Gc,UPr),e(Gc,gK),e(gK,JPr),e(Gc,YPr),e(hr,KPr),e(hr,rx),e(rx,ZPr),e(rx,R7e),e(R7e,eBr),e(rx,oBr),e(hr,rBr),e(hr,zt),M(tx,zt,null),e(zt,tBr),e(zt,P7e),e(P7e,aBr),e(zt,nBr),e(zt,Oc),e(Oc,sBr),e(Oc,B7e),e(B7e,lBr),e(Oc,iBr),e(Oc,hK),e(hK,dBr),e(Oc,cBr),e(zt,fBr),M(XC,zt,null),e(hr,mBr),e(hr,Or),M(ax,Or,null),e(Or,gBr),e(Or,I7e),e(I7e,hBr),e(Or,pBr),e(Or,un),e(un,_Br),e(un,N7e),e(N7e,uBr),e(un,bBr),e(un,q7e),e(q7e,vBr),e(un,FBr),e(un,j7e),e(j7e,TBr),e(un,MBr),e(Or,EBr),e(Or,xe),e(xe,zC),e(zC,D7e),e(D7e,CBr),e(zC,wBr),e(zC,pK),e(pK,ABr),e(zC,LBr),e(xe,yBr),e(xe,WC),e(WC,G7e),e(G7e,xBr),e(WC,$Br),e(WC,_K),e(_K,kBr),e(WC,SBr),e(xe,RBr),e(xe,QC),e(QC,O7e),e(O7e,PBr),e(QC,BBr),e(QC,uK),e(uK,IBr),e(QC,NBr),e(xe,qBr),e(xe,HC),e(HC,V7e),e(V7e,jBr),e(HC,DBr),e(HC,bK),e(bK,GBr),e(HC,OBr),e(xe,VBr),e(xe,UC),e(UC,X7e),e(X7e,XBr),e(UC,zBr),e(UC,vK),e(vK,WBr),e(UC,QBr),e(xe,HBr),e(xe,JC),e(JC,z7e),e(z7e,UBr),e(JC,JBr),e(JC,FK),e(FK,YBr),e(JC,KBr),e(xe,ZBr),e(xe,YC),e(YC,W7e),e(W7e,eIr),e(YC,oIr),e(YC,TK),e(TK,rIr),e(YC,tIr),e(xe,aIr),e(xe,KC),e(KC,Q7e),e(Q7e,nIr),e(KC,sIr),e(KC,MK),e(MK,lIr),e(KC,iIr),e(xe,dIr),e(xe,ZC),e(ZC,H7e),e(H7e,cIr),e(ZC,fIr),e(ZC,EK),e(EK,mIr),e(ZC,gIr),e(xe,hIr),e(xe,e0),e(e0,U7e),e(U7e,pIr),e(e0,_Ir),e(e0,CK),e(CK,uIr),e(e0,bIr),e(Or,vIr),M(o0,Or,null),b(f,ODe,u),b(f,Vc,u),e(Vc,r0),e(r0,J7e),M(nx,J7e,null),e(Vc,FIr),e(Vc,Y7e),e(Y7e,TIr),b(f,VDe,u),b(f,pr,u),M(sx,pr,null),e(pr,MIr),e(pr,Xc),e(Xc,EIr),e(Xc,wK),e(wK,CIr),e(Xc,wIr),e(Xc,AK),e(AK,AIr),e(Xc,LIr),e(pr,yIr),e(pr,lx),e(lx,xIr),e(lx,K7e),e(K7e,$Ir),e(lx,kIr),e(pr,SIr),e(pr,Wt),M(ix,Wt,null),e(Wt,RIr),e(Wt,Z7e),e(Z7e,PIr),e(Wt,BIr),e(Wt,zc),e(zc,IIr),e(zc,eMe),e(eMe,NIr),e(zc,qIr),e(zc,LK),e(LK,jIr),e(zc,DIr),e(Wt,GIr),M(t0,Wt,null),e(pr,OIr),e(pr,Vr),M(dx,Vr,null),e(Vr,VIr),e(Vr,oMe),e(oMe,XIr),e(Vr,zIr),e(Vr,bn),e(bn,WIr),e(bn,rMe),e(rMe,QIr),e(bn,HIr),e(bn,tMe),e(tMe,UIr),e(bn,JIr),e(bn,aMe),e(aMe,YIr),e(bn,KIr),e(Vr,ZIr),e(Vr,Pe),e(Pe,a0),e(a0,nMe),e(nMe,eNr),e(a0,oNr),e(a0,yK),e(yK,rNr),e(a0,tNr),e(Pe,aNr),e(Pe,n0),e(n0,sMe),e(sMe,nNr),e(n0,sNr),e(n0,xK),e(xK,lNr),e(n0,iNr),e(Pe,dNr),e(Pe,s0),e(s0,lMe),e(lMe,cNr),e(s0,fNr),e(s0,$K),e($K,mNr),e(s0,gNr),e(Pe,hNr),e(Pe,l0),e(l0,iMe),e(iMe,pNr),e(l0,_Nr),e(l0,kK),e(kK,uNr),e(l0,bNr),e(Pe,vNr),e(Pe,i0),e(i0,dMe),e(dMe,FNr),e(i0,TNr),e(i0,SK),e(SK,MNr),e(i0,ENr),e(Pe,CNr),e(Pe,d0),e(d0,cMe),e(cMe,wNr),e(d0,ANr),e(d0,RK),e(RK,LNr),e(d0,yNr),e(Pe,xNr),e(Pe,c0),e(c0,fMe),e(fMe,$Nr),e(c0,kNr),e(c0,PK),e(PK,SNr),e(c0,RNr),e(Pe,PNr),e(Pe,f0),e(f0,mMe),e(mMe,BNr),e(f0,INr),e(f0,BK),e(BK,NNr),e(f0,qNr),e(Pe,jNr),e(Pe,m0),e(m0,gMe),e(gMe,DNr),e(m0,GNr),e(m0,IK),e(IK,ONr),e(m0,VNr),e(Vr,XNr),M(g0,Vr,null),b(f,XDe,u),b(f,Wc,u),e(Wc,h0),e(h0,hMe),M(cx,hMe,null),e(Wc,zNr),e(Wc,pMe),e(pMe,WNr),b(f,zDe,u),b(f,_r,u),M(fx,_r,null),e(_r,QNr),e(_r,Qc),e(Qc,HNr),e(Qc,NK),e(NK,UNr),e(Qc,JNr),e(Qc,qK),e(qK,YNr),e(Qc,KNr),e(_r,ZNr),e(_r,mx),e(mx,eqr),e(mx,_Me),e(_Me,oqr),e(mx,rqr),e(_r,tqr),e(_r,Qt),M(gx,Qt,null),e(Qt,aqr),e(Qt,uMe),e(uMe,nqr),e(Qt,sqr),e(Qt,Hc),e(Hc,lqr),e(Hc,bMe),e(bMe,iqr),e(Hc,dqr),e(Hc,jK),e(jK,cqr),e(Hc,fqr),e(Qt,mqr),M(p0,Qt,null),e(_r,gqr),e(_r,Xr),M(hx,Xr,null),e(Xr,hqr),e(Xr,vMe),e(vMe,pqr),e(Xr,_qr),e(Xr,vn),e(vn,uqr),e(vn,FMe),e(FMe,bqr),e(vn,vqr),e(vn,TMe),e(TMe,Fqr),e(vn,Tqr),e(vn,MMe),e(MMe,Mqr),e(vn,Eqr),e(Xr,Cqr),e(Xr,$e),e($e,_0),e(_0,EMe),e(EMe,wqr),e(_0,Aqr),e(_0,DK),e(DK,Lqr),e(_0,yqr),e($e,xqr),e($e,u0),e(u0,CMe),e(CMe,$qr),e(u0,kqr),e(u0,GK),e(GK,Sqr),e(u0,Rqr),e($e,Pqr),e($e,b0),e(b0,wMe),e(wMe,Bqr),e(b0,Iqr),e(b0,OK),e(OK,Nqr),e(b0,qqr),e($e,jqr),e($e,v0),e(v0,AMe),e(AMe,Dqr),e(v0,Gqr),e(v0,VK),e(VK,Oqr),e(v0,Vqr),e($e,Xqr),e($e,F0),e(F0,LMe),e(LMe,zqr),e(F0,Wqr),e(F0,XK),e(XK,Qqr),e(F0,Hqr),e($e,Uqr),e($e,T0),e(T0,yMe),e(yMe,Jqr),e(T0,Yqr),e(T0,zK),e(zK,Kqr),e(T0,Zqr),e($e,ejr),e($e,M0),e(M0,xMe),e(xMe,ojr),e(M0,rjr),e(M0,WK),e(WK,tjr),e(M0,ajr),e($e,njr),e($e,E0),e(E0,$Me),e($Me,sjr),e(E0,ljr),e(E0,QK),e(QK,ijr),e(E0,djr),e($e,cjr),e($e,C0),e(C0,kMe),e(kMe,fjr),e(C0,mjr),e(C0,HK),e(HK,gjr),e(C0,hjr),e($e,pjr),e($e,w0),e(w0,SMe),e(SMe,_jr),e(w0,ujr),e(w0,UK),e(UK,bjr),e(w0,vjr),e(Xr,Fjr),M(A0,Xr,null),b(f,WDe,u),b(f,Uc,u),e(Uc,L0),e(L0,RMe),M(px,RMe,null),e(Uc,Tjr),e(Uc,PMe),e(PMe,Mjr),b(f,QDe,u),b(f,ur,u),M(_x,ur,null),e(ur,Ejr),e(ur,Jc),e(Jc,Cjr),e(Jc,JK),e(JK,wjr),e(Jc,Ajr),e(Jc,YK),e(YK,Ljr),e(Jc,yjr),e(ur,xjr),e(ur,ux),e(ux,$jr),e(ux,BMe),e(BMe,kjr),e(ux,Sjr),e(ur,Rjr),e(ur,Ht),M(bx,Ht,null),e(Ht,Pjr),e(Ht,IMe),e(IMe,Bjr),e(Ht,Ijr),e(Ht,Yc),e(Yc,Njr),e(Yc,NMe),e(NMe,qjr),e(Yc,jjr),e(Yc,KK),e(KK,Djr),e(Yc,Gjr),e(Ht,Ojr),M(y0,Ht,null),e(ur,Vjr),e(ur,zr),M(vx,zr,null),e(zr,Xjr),e(zr,qMe),e(qMe,zjr),e(zr,Wjr),e(zr,Fn),e(Fn,Qjr),e(Fn,jMe),e(jMe,Hjr),e(Fn,Ujr),e(Fn,DMe),e(DMe,Jjr),e(Fn,Yjr),e(Fn,GMe),e(GMe,Kjr),e(Fn,Zjr),e(zr,eDr),e(zr,ke),e(ke,x0),e(x0,OMe),e(OMe,oDr),e(x0,rDr),e(x0,ZK),e(ZK,tDr),e(x0,aDr),e(ke,nDr),e(ke,$0),e($0,VMe),e(VMe,sDr),e($0,lDr),e($0,eZ),e(eZ,iDr),e($0,dDr),e(ke,cDr),e(ke,k0),e(k0,XMe),e(XMe,fDr),e(k0,mDr),e(k0,oZ),e(oZ,gDr),e(k0,hDr),e(ke,pDr),e(ke,S0),e(S0,zMe),e(zMe,_Dr),e(S0,uDr),e(S0,rZ),e(rZ,bDr),e(S0,vDr),e(ke,FDr),e(ke,R0),e(R0,WMe),e(WMe,TDr),e(R0,MDr),e(R0,tZ),e(tZ,EDr),e(R0,CDr),e(ke,wDr),e(ke,P0),e(P0,QMe),e(QMe,ADr),e(P0,LDr),e(P0,aZ),e(aZ,yDr),e(P0,xDr),e(ke,$Dr),e(ke,B0),e(B0,HMe),e(HMe,kDr),e(B0,SDr),e(B0,nZ),e(nZ,RDr),e(B0,PDr),e(ke,BDr),e(ke,I0),e(I0,UMe),e(UMe,IDr),e(I0,NDr),e(I0,sZ),e(sZ,qDr),e(I0,jDr),e(ke,DDr),e(ke,N0),e(N0,JMe),e(JMe,GDr),e(N0,ODr),e(N0,lZ),e(lZ,VDr),e(N0,XDr),e(ke,zDr),e(ke,q0),e(q0,YMe),e(YMe,WDr),e(q0,QDr),e(q0,iZ),e(iZ,HDr),e(q0,UDr),e(zr,JDr),M(j0,zr,null),b(f,HDe,u),b(f,Kc,u),e(Kc,D0),e(D0,KMe),M(Fx,KMe,null),e(Kc,YDr),e(Kc,ZMe),e(ZMe,KDr),b(f,UDe,u),b(f,br,u),M(Tx,br,null),e(br,ZDr),e(br,Zc),e(Zc,eGr),e(Zc,dZ),e(dZ,oGr),e(Zc,rGr),e(Zc,cZ),e(cZ,tGr),e(Zc,aGr),e(br,nGr),e(br,Mx),e(Mx,sGr),e(Mx,eEe),e(eEe,lGr),e(Mx,iGr),e(br,dGr),e(br,Ut),M(Ex,Ut,null),e(Ut,cGr),e(Ut,oEe),e(oEe,fGr),e(Ut,mGr),e(Ut,ef),e(ef,gGr),e(ef,rEe),e(rEe,hGr),e(ef,pGr),e(ef,fZ),e(fZ,_Gr),e(ef,uGr),e(Ut,bGr),M(G0,Ut,null),e(br,vGr),e(br,Wr),M(Cx,Wr,null),e(Wr,FGr),e(Wr,tEe),e(tEe,TGr),e(Wr,MGr),e(Wr,Tn),e(Tn,EGr),e(Tn,aEe),e(aEe,CGr),e(Tn,wGr),e(Tn,nEe),e(nEe,AGr),e(Tn,LGr),e(Tn,sEe),e(sEe,yGr),e(Tn,xGr),e(Wr,$Gr),e(Wr,Ge),e(Ge,O0),e(O0,lEe),e(lEe,kGr),e(O0,SGr),e(O0,mZ),e(mZ,RGr),e(O0,PGr),e(Ge,BGr),e(Ge,V0),e(V0,iEe),e(iEe,IGr),e(V0,NGr),e(V0,gZ),e(gZ,qGr),e(V0,jGr),e(Ge,DGr),e(Ge,X0),e(X0,dEe),e(dEe,GGr),e(X0,OGr),e(X0,hZ),e(hZ,VGr),e(X0,XGr),e(Ge,zGr),e(Ge,z0),e(z0,cEe),e(cEe,WGr),e(z0,QGr),e(z0,pZ),e(pZ,HGr),e(z0,UGr),e(Ge,JGr),e(Ge,W0),e(W0,fEe),e(fEe,YGr),e(W0,KGr),e(W0,_Z),e(_Z,ZGr),e(W0,eOr),e(Ge,oOr),e(Ge,Q0),e(Q0,mEe),e(mEe,rOr),e(Q0,tOr),e(Q0,uZ),e(uZ,aOr),e(Q0,nOr),e(Ge,sOr),e(Ge,H0),e(H0,gEe),e(gEe,lOr),e(H0,iOr),e(H0,bZ),e(bZ,dOr),e(H0,cOr),e(Ge,fOr),e(Ge,U0),e(U0,hEe),e(hEe,mOr),e(U0,gOr),e(U0,vZ),e(vZ,hOr),e(U0,pOr),e(Wr,_Or),M(J0,Wr,null),b(f,JDe,u),b(f,of,u),e(of,Y0),e(Y0,pEe),M(wx,pEe,null),e(of,uOr),e(of,_Ee),e(_Ee,bOr),b(f,YDe,u),b(f,vr,u),M(Ax,vr,null),e(vr,vOr),e(vr,rf),e(rf,FOr),e(rf,FZ),e(FZ,TOr),e(rf,MOr),e(rf,TZ),e(TZ,EOr),e(rf,COr),e(vr,wOr),e(vr,Lx),e(Lx,AOr),e(Lx,uEe),e(uEe,LOr),e(Lx,yOr),e(vr,xOr),e(vr,Jt),M(yx,Jt,null),e(Jt,$Or),e(Jt,bEe),e(bEe,kOr),e(Jt,SOr),e(Jt,tf),e(tf,ROr),e(tf,vEe),e(vEe,POr),e(tf,BOr),e(tf,MZ),e(MZ,IOr),e(tf,NOr),e(Jt,qOr),M(K0,Jt,null),e(vr,jOr),e(vr,Qr),M(xx,Qr,null),e(Qr,DOr),e(Qr,FEe),e(FEe,GOr),e(Qr,OOr),e(Qr,Mn),e(Mn,VOr),e(Mn,TEe),e(TEe,XOr),e(Mn,zOr),e(Mn,MEe),e(MEe,WOr),e(Mn,QOr),e(Mn,EEe),e(EEe,HOr),e(Mn,UOr),e(Qr,JOr),e(Qr,Oe),e(Oe,Z0),e(Z0,CEe),e(CEe,YOr),e(Z0,KOr),e(Z0,EZ),e(EZ,ZOr),e(Z0,eVr),e(Oe,oVr),e(Oe,ew),e(ew,wEe),e(wEe,rVr),e(ew,tVr),e(ew,CZ),e(CZ,aVr),e(ew,nVr),e(Oe,sVr),e(Oe,ow),e(ow,AEe),e(AEe,lVr),e(ow,iVr),e(ow,wZ),e(wZ,dVr),e(ow,cVr),e(Oe,fVr),e(Oe,rw),e(rw,LEe),e(LEe,mVr),e(rw,gVr),e(rw,AZ),e(AZ,hVr),e(rw,pVr),e(Oe,_Vr),e(Oe,tw),e(tw,yEe),e(yEe,uVr),e(tw,bVr),e(tw,LZ),e(LZ,vVr),e(tw,FVr),e(Oe,TVr),e(Oe,aw),e(aw,xEe),e(xEe,MVr),e(aw,EVr),e(aw,yZ),e(yZ,CVr),e(aw,wVr),e(Oe,AVr),e(Oe,nw),e(nw,$Ee),e($Ee,LVr),e(nw,yVr),e(nw,xZ),e(xZ,xVr),e(nw,$Vr),e(Oe,kVr),e(Oe,sw),e(sw,kEe),e(kEe,SVr),e(sw,RVr),e(sw,$Z),e($Z,PVr),e(sw,BVr),e(Qr,IVr),M(lw,Qr,null),b(f,KDe,u),b(f,af,u),e(af,iw),e(iw,SEe),M($x,SEe,null),e(af,NVr),e(af,REe),e(REe,qVr),b(f,ZDe,u),b(f,Fr,u),M(kx,Fr,null),e(Fr,jVr),e(Fr,nf),e(nf,DVr),e(nf,kZ),e(kZ,GVr),e(nf,OVr),e(nf,SZ),e(SZ,VVr),e(nf,XVr),e(Fr,zVr),e(Fr,Sx),e(Sx,WVr),e(Sx,PEe),e(PEe,QVr),e(Sx,HVr),e(Fr,UVr),e(Fr,Yt),M(Rx,Yt,null),e(Yt,JVr),e(Yt,BEe),e(BEe,YVr),e(Yt,KVr),e(Yt,sf),e(sf,ZVr),e(sf,IEe),e(IEe,eXr),e(sf,oXr),e(sf,RZ),e(RZ,rXr),e(sf,tXr),e(Yt,aXr),M(dw,Yt,null),e(Fr,nXr),e(Fr,Hr),M(Px,Hr,null),e(Hr,sXr),e(Hr,NEe),e(NEe,lXr),e(Hr,iXr),e(Hr,En),e(En,dXr),e(En,qEe),e(qEe,cXr),e(En,fXr),e(En,jEe),e(jEe,mXr),e(En,gXr),e(En,DEe),e(DEe,hXr),e(En,pXr),e(Hr,_Xr),e(Hr,GEe),e(GEe,cw),e(cw,OEe),e(OEe,uXr),e(cw,bXr),e(cw,PZ),e(PZ,vXr),e(cw,FXr),e(Hr,TXr),M(fw,Hr,null),b(f,eGe,u),b(f,lf,u),e(lf,mw),e(mw,VEe),M(Bx,VEe,null),e(lf,MXr),e(lf,XEe),e(XEe,EXr),b(f,oGe,u),b(f,Tr,u),M(Ix,Tr,null),e(Tr,CXr),e(Tr,df),e(df,wXr),e(df,BZ),e(BZ,AXr),e(df,LXr),e(df,IZ),e(IZ,yXr),e(df,xXr),e(Tr,$Xr),e(Tr,Nx),e(Nx,kXr),e(Nx,zEe),e(zEe,SXr),e(Nx,RXr),e(Tr,PXr),e(Tr,Kt),M(qx,Kt,null),e(Kt,BXr),e(Kt,WEe),e(WEe,IXr),e(Kt,NXr),e(Kt,cf),e(cf,qXr),e(cf,QEe),e(QEe,jXr),e(cf,DXr),e(cf,NZ),e(NZ,GXr),e(cf,OXr),e(Kt,VXr),M(gw,Kt,null),e(Tr,XXr),e(Tr,Ur),M(jx,Ur,null),e(Ur,zXr),e(Ur,HEe),e(HEe,WXr),e(Ur,QXr),e(Ur,Cn),e(Cn,HXr),e(Cn,UEe),e(UEe,UXr),e(Cn,JXr),e(Cn,JEe),e(JEe,YXr),e(Cn,KXr),e(Cn,YEe),e(YEe,ZXr),e(Cn,ezr),e(Ur,ozr),e(Ur,Dx),e(Dx,hw),e(hw,KEe),e(KEe,rzr),e(hw,tzr),e(hw,qZ),e(qZ,azr),e(hw,nzr),e(Dx,szr),e(Dx,pw),e(pw,ZEe),e(ZEe,lzr),e(pw,izr),e(pw,jZ),e(jZ,dzr),e(pw,czr),e(Ur,fzr),M(_w,Ur,null),b(f,rGe,u),b(f,ff,u),e(ff,uw),e(uw,eCe),M(Gx,eCe,null),e(ff,mzr),e(ff,oCe),e(oCe,gzr),b(f,tGe,u),b(f,Mr,u),M(Ox,Mr,null),e(Mr,hzr),e(Mr,mf),e(mf,pzr),e(mf,DZ),e(DZ,_zr),e(mf,uzr),e(mf,GZ),e(GZ,bzr),e(mf,vzr),e(Mr,Fzr),e(Mr,Vx),e(Vx,Tzr),e(Vx,rCe),e(rCe,Mzr),e(Vx,Ezr),e(Mr,Czr),e(Mr,Zt),M(Xx,Zt,null),e(Zt,wzr),e(Zt,tCe),e(tCe,Azr),e(Zt,Lzr),e(Zt,gf),e(gf,yzr),e(gf,aCe),e(aCe,xzr),e(gf,$zr),e(gf,OZ),e(OZ,kzr),e(gf,Szr),e(Zt,Rzr),M(bw,Zt,null),e(Mr,Pzr),e(Mr,Jr),M(zx,Jr,null),e(Jr,Bzr),e(Jr,nCe),e(nCe,Izr),e(Jr,Nzr),e(Jr,wn),e(wn,qzr),e(wn,sCe),e(sCe,jzr),e(wn,Dzr),e(wn,lCe),e(lCe,Gzr),e(wn,Ozr),e(wn,iCe),e(iCe,Vzr),e(wn,Xzr),e(Jr,zzr),e(Jr,dCe),e(dCe,vw),e(vw,cCe),e(cCe,Wzr),e(vw,Qzr),e(vw,VZ),e(VZ,Hzr),e(vw,Uzr),e(Jr,Jzr),M(Fw,Jr,null),aGe=!0},p(f,[u]){const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),Mf.$set(Wx);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),Lg.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),ih.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),Oh.$set(gCe);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),Vh.$set(Qx);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),dp.$set(hCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),cp.$set(An);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),gp.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),cu.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),mu.$set(uCe);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),r1.$set(Hx);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),a1.$set(bCe);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),V1.$set(Ux);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),z1.$set(vCe);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),xb.$set(Jx);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),kb.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),Ub.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),Yb.$set(MCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),W2.$set(hf);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),H2.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),w4.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),L4.$set(wCe);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),P4.$set(Yx);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),I4.$set(ACe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),bv.$set(LCe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),Fv.$set(yCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),i5.$set(ot);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),c5.$set(Kx);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),g5.$set(xCe);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),p5.$set(Zx);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),$5.$set($Ce);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),S5.$set(rt);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),B5.$set(kCe);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),N5.$set(pf);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),H5.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),J5.$set(RCe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),t3.$set(L);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),n3.$set(Tw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),_3.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),b3.$set(BCe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),M3.$set(Mw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),C3.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),k3.$set(NCe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),R3.$set(Ew);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),q3.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),D3.$set(jCe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),X3.$set(Cw);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),W3.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),U3.$set(GCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),Y3.$set(ww);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),aF.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),sF.$set(VCe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),dF.$set(Aw);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),fF.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),aT.$set(zCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),sT.$set(Lw);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),$T.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),ST.$set(QCe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),WT.$set(yw);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),HT.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),ZT.$set(UCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),o7.$set(xw);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),M7.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),C7.$set(YCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),B7.$set($w);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),N7.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),cM.$set(ZCe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),mM.$set(kw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),$M.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),SM.$set(o0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),BM.$set(Sw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),NM.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),jM.$set(t0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),GM.$set(Rw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),iE.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),cE.$set(n0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),kE.$set(Pw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),RE.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),BE.$set(l0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),NE.$set(Bw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),jE.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),GE.$set(d0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),hC.$set(Iw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),_C.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),LC.$set(f0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),xC.$set(Nw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),OC.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),XC.$set(g0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),o0.$set(qw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),t0.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),g0.$set(p0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),p0.$set(jw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),A0.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),y0.$set(u0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),j0.$set(Dw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),G0.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),J0.$set(v0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),K0.$set(Gw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),lw.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),dw.$set(T0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),fw.$set(Ow);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),gw.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),_w.$set(E0e);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),bw.$set(Vw);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),Fw.$set(C0e)},i(f){aGe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(Mf.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(Lg.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Z6.$$.fragment,f),E(ih.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(nL.$$.fragment,f),E(Oh.$$.fragment,f),E(Vh.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(dp.$$.fragment,f),E(cp.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(gp.$$.fragment,f),E(uL.$$.fragment,f),E(cu.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(mu.$$.fragment,f),E(ML.$$.fragment,f),E(r1.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(a1.$$.fragment,f),E(LL.$$.fragment,f),E(V1.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(z1.$$.fragment,f),E(SL.$$.fragment,f),E(xb.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(kb.$$.fragment,f),E(NL.$$.fragment,f),E(Ub.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(Yb.$$.fragment,f),E(OL.$$.fragment,f),E(W2.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(H2.$$.fragment,f),E(QL.$$.fragment,f),E(w4.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(L4.$$.fragment,f),E(KL.$$.fragment,f),E(P4.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(I4.$$.fragment,f),E(ty.$$.fragment,f),E(bv.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Fv.$$.fragment,f),E(iy.$$.fragment,f),E(i5.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(c5.$$.fragment,f),E(gy.$$.fragment,f),E(g5.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(p5.$$.fragment,f),E(by.$$.fragment,f),E($5.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(S5.$$.fragment,f),E(Ey.$$.fragment,f),E(B5.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(N5.$$.fragment,f),E(yy.$$.fragment,f),E(H5.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(J5.$$.fragment,f),E(Ry.$$.fragment,f),E(t3.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(n3.$$.fragment,f),E(qy.$$.fragment,f),E(_3.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(b3.$$.fragment,f),E(Vy.$$.fragment,f),E(M3.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(C3.$$.fragment,f),E(Uy.$$.fragment,f),E(k3.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(R3.$$.fragment,f),E(e8.$$.fragment,f),E(q3.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(D3.$$.fragment,f),E(n8.$$.fragment,f),E(X3.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(W3.$$.fragment,f),E(f8.$$.fragment,f),E(U3.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(Y3.$$.fragment,f),E(_8.$$.fragment,f),E(aF.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(sF.$$.fragment,f),E(T8.$$.fragment,f),E(dF.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(fF.$$.fragment,f),E(A8.$$.fragment,f),E(aT.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(sT.$$.fragment,f),E(k8.$$.fragment,f),E($T.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(ST.$$.fragment,f),E(I8.$$.fragment,f),E(WT.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(HT.$$.fragment,f),E(G8.$$.fragment,f),E(ZT.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(o7.$$.fragment,f),E(W8.$$.fragment,f),E(M7.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(C7.$$.fragment,f),E(Y8.$$.fragment,f),E(B7.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(N7.$$.fragment,f),E(r9.$$.fragment,f),E(cM.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(mM.$$.fragment,f),E(l9.$$.fragment,f),E($M.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(SM.$$.fragment,f),E(m9.$$.fragment,f),E(BM.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(NM.$$.fragment,f),E(b9.$$.fragment,f),E(jM.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(GM.$$.fragment,f),E(E9.$$.fragment,f),E(iE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(cE.$$.fragment,f),E(y9.$$.fragment,f),E(kE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(RE.$$.fragment,f),E(R9.$$.fragment,f),E(BE.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(NE.$$.fragment,f),E(q9.$$.fragment,f),E(jE.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(GE.$$.fragment,f),E(V9.$$.fragment,f),E(hC.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(_C.$$.fragment,f),E(H9.$$.fragment,f),E(LC.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(xC.$$.fragment,f),E(Z9.$$.fragment,f),E(OC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(XC.$$.fragment,f),E(ax.$$.fragment,f),E(o0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(t0.$$.fragment,f),E(dx.$$.fragment,f),E(g0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(p0.$$.fragment,f),E(hx.$$.fragment,f),E(A0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(y0.$$.fragment,f),E(vx.$$.fragment,f),E(j0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(G0.$$.fragment,f),E(Cx.$$.fragment,f),E(J0.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(K0.$$.fragment,f),E(xx.$$.fragment,f),E(lw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(dw.$$.fragment,f),E(Px.$$.fragment,f),E(fw.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(gw.$$.fragment,f),E(jx.$$.fragment,f),E(_w.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(bw.$$.fragment,f),E(zx.$$.fragment,f),E(Fw.$$.fragment,f),aGe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(Mf.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(Lg.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Z6.$$.fragment,f),C(ih.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(nL.$$.fragment,f),C(Oh.$$.fragment,f),C(Vh.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(dp.$$.fragment,f),C(cp.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(gp.$$.fragment,f),C(uL.$$.fragment,f),C(cu.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(mu.$$.fragment,f),C(ML.$$.fragment,f),C(r1.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(a1.$$.fragment,f),C(LL.$$.fragment,f),C(V1.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(z1.$$.fragment,f),C(SL.$$.fragment,f),C(xb.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(kb.$$.fragment,f),C(NL.$$.fragment,f),C(Ub.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(Yb.$$.fragment,f),C(OL.$$.fragment,f),C(W2.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(H2.$$.fragment,f),C(QL.$$.fragment,f),C(w4.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(L4.$$.fragment,f),C(KL.$$.fragment,f),C(P4.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(I4.$$.fragment,f),C(ty.$$.fragment,f),C(bv.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Fv.$$.fragment,f),C(iy.$$.fragment,f),C(i5.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(c5.$$.fragment,f),C(gy.$$.fragment,f),C(g5.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(p5.$$.fragment,f),C(by.$$.fragment,f),C($5.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(S5.$$.fragment,f),C(Ey.$$.fragment,f),C(B5.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(N5.$$.fragment,f),C(yy.$$.fragment,f),C(H5.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(J5.$$.fragment,f),C(Ry.$$.fragment,f),C(t3.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(n3.$$.fragment,f),C(qy.$$.fragment,f),C(_3.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(b3.$$.fragment,f),C(Vy.$$.fragment,f),C(M3.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(C3.$$.fragment,f),C(Uy.$$.fragment,f),C(k3.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(R3.$$.fragment,f),C(e8.$$.fragment,f),C(q3.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(D3.$$.fragment,f),C(n8.$$.fragment,f),C(X3.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(W3.$$.fragment,f),C(f8.$$.fragment,f),C(U3.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(Y3.$$.fragment,f),C(_8.$$.fragment,f),C(aF.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(sF.$$.fragment,f),C(T8.$$.fragment,f),C(dF.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(fF.$$.fragment,f),C(A8.$$.fragment,f),C(aT.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(sT.$$.fragment,f),C(k8.$$.fragment,f),C($T.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(ST.$$.fragment,f),C(I8.$$.fragment,f),C(WT.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(HT.$$.fragment,f),C(G8.$$.fragment,f),C(ZT.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(o7.$$.fragment,f),C(W8.$$.fragment,f),C(M7.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(C7.$$.fragment,f),C(Y8.$$.fragment,f),C(B7.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(N7.$$.fragment,f),C(r9.$$.fragment,f),C(cM.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(mM.$$.fragment,f),C(l9.$$.fragment,f),C($M.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(SM.$$.fragment,f),C(m9.$$.fragment,f),C(BM.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(NM.$$.fragment,f),C(b9.$$.fragment,f),C(jM.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(GM.$$.fragment,f),C(E9.$$.fragment,f),C(iE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(cE.$$.fragment,f),C(y9.$$.fragment,f),C(kE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(RE.$$.fragment,f),C(R9.$$.fragment,f),C(BE.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(NE.$$.fragment,f),C(q9.$$.fragment,f),C(jE.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(GE.$$.fragment,f),C(V9.$$.fragment,f),C(hC.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(_C.$$.fragment,f),C(H9.$$.fragment,f),C(LC.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(xC.$$.fragment,f),C(Z9.$$.fragment,f),C(OC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(XC.$$.fragment,f),C(ax.$$.fragment,f),C(o0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(t0.$$.fragment,f),C(dx.$$.fragment,f),C(g0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(p0.$$.fragment,f),C(hx.$$.fragment,f),C(A0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(y0.$$.fragment,f),C(vx.$$.fragment,f),C(j0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(G0.$$.fragment,f),C(Cx.$$.fragment,f),C(J0.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(K0.$$.fragment,f),C(xx.$$.fragment,f),C(lw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(dw.$$.fragment,f),C(Px.$$.fragment,f),C(fw.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(gw.$$.fragment,f),C(jx.$$.fragment,f),C(_w.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(bw.$$.fragment,f),C(zx.$$.fragment,f),C(Fw.$$.fragment,f),aGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(tt),f&&t(De),f&&t(We),f&&t(vf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(oje),f&&t(Fi),w(G6),f&&t(rje),f&&t(kn),f&&t(tje),w(O6,f),f&&t(aje),f&&t(fk),f&&t(nje),w(Mf,f),f&&t(sje),f&&t(Ti),w(V6),f&&t(lje),f&&t(Co),w(X6),w(Q6),w(Lg),w(H6),f&&t(ije),f&&t(Ei),w(U6),f&&t(dje),f&&t(wo),w(J6),w(Z6),w(ih),w(eL),f&&t(cje),f&&t(Ci),w(oL),f&&t(fje),f&&t(Ao),w(rL),w(nL),w(Oh),w(Vh),w(sL),f&&t(mje),f&&t(wi),w(lL),f&&t(gje),f&&t(Lo),w(iL),w(fL),w(dp),w(cp),w(mL),f&&t(hje),f&&t(Li),w(gL),f&&t(pje),f&&t(yo),w(hL),w(_L),w(gp),w(uL),w(cu),f&&t(_je),f&&t($i),w(bL),f&&t(uje),f&&t(xo),w(vL),w(TL),w(mu),w(ML),w(r1),f&&t(bje),f&&t(Ri),w(EL),f&&t(vje),f&&t($o),w(CL),w(AL),w(a1),w(LL),w(V1),f&&t(Fje),f&&t(Ii),w(yL),f&&t(Tje),f&&t(ko),w(xL),w(kL),w(z1),w(SL),w(xb),f&&t(Mje),f&&t(ji),w(RL),f&&t(Eje),f&&t(So),w(PL),w(IL),w(kb),w(NL),w(Ub),f&&t(Cje),f&&t(Oi),w(qL),f&&t(wje),f&&t(Ro),w(jL),w(GL),w(Yb),w(OL),w(W2),f&&t(Aje),f&&t(zi),w(VL),f&&t(Lje),f&&t(Po),w(XL),w(WL),w(H2),w(QL),w(w4),f&&t(yje),f&&t(Hi),w(HL),f&&t(xje),f&&t(Bo),w(UL),w(YL),w(L4),w(KL),w(P4),f&&t($je),f&&t(Yi),w(ZL),f&&t(kje),f&&t(Io),w(ey),w(ry),w(I4),w(ty),w(bv),f&&t(Sje),f&&t(ed),w(ay),f&&t(Rje),f&&t(No),w(ny),w(ly),w(Fv),w(iy),w(i5),f&&t(Pje),f&&t(td),w(dy),f&&t(Bje),f&&t(qo),w(cy),w(my),w(c5),w(gy),w(g5),f&&t(Ije),f&&t(sd),w(hy),f&&t(Nje),f&&t(jo),w(py),w(uy),w(p5),w(by),w($5),f&&t(qje),f&&t(dd),w(vy),f&&t(jje),f&&t(Do),w(Fy),w(My),w(S5),w(Ey),w(B5),f&&t(Dje),f&&t(md),w(Cy),f&&t(Gje),f&&t(Go),w(wy),w(Ly),w(N5),w(yy),w(H5),f&&t(Oje),f&&t(pd),w(xy),f&&t(Vje),f&&t(Oo),w($y),w(Sy),w(J5),w(Ry),w(t3),f&&t(Xje),f&&t(bd),w(Py),f&&t(zje),f&&t(Vo),w(By),w(Ny),w(n3),w(qy),w(_3),f&&t(Wje),f&&t(Td),w(jy),f&&t(Qje),f&&t(Xo),w(Dy),w(Oy),w(b3),w(Vy),w(M3),f&&t(Hje),f&&t(Cd),w(zy),f&&t(Uje),f&&t(zo),w(Wy),w(Hy),w(C3),w(Uy),w(k3),f&&t(Jje),f&&t(Ld),w(Jy),f&&t(Yje),f&&t(Wo),w(Yy),w(Zy),w(R3),w(e8),w(q3),f&&t(Kje),f&&t(kd),w(o8),f&&t(Zje),f&&t(Qo),w(r8),w(a8),w(D3),w(n8),w(X3),f&&t(eDe),f&&t(Pd),w(l8),f&&t(oDe),f&&t(Ho),w(i8),w(c8),w(W3),w(f8),w(U3),f&&t(rDe),f&&t(Nd),w(m8),f&&t(tDe),f&&t(Uo),w(g8),w(p8),w(Y3),w(_8),w(aF),f&&t(aDe),f&&t(Dd),w(u8),f&&t(nDe),f&&t(Jo),w(b8),w(F8),w(sF),w(T8),w(dF),f&&t(sDe),f&&t(Vd),w(M8),f&&t(lDe),f&&t(Yo),w(E8),w(w8),w(fF),w(A8),w(aT),f&&t(iDe),f&&t(Wd),w(L8),f&&t(dDe),f&&t(Ko),w(y8),w($8),w(sT),w(k8),w($T),f&&t(cDe),f&&t(Ud),w(S8),f&&t(fDe),f&&t(Zo),w(R8),w(B8),w(ST),w(I8),w(WT),f&&t(mDe),f&&t(Kd),w(N8),f&&t(gDe),f&&t(er),w(q8),w(D8),w(HT),w(G8),w(ZT),f&&t(hDe),f&&t(oc),w(O8),f&&t(pDe),f&&t(or),w(V8),w(z8),w(o7),w(W8),w(M7),f&&t(_De),f&&t(ac),w(Q8),f&&t(uDe),f&&t(rr),w(H8),w(J8),w(C7),w(Y8),w(B7),f&&t(bDe),f&&t(lc),w(K8),f&&t(vDe),f&&t(tr),w(Z8),w(o9),w(N7),w(r9),w(cM),f&&t(FDe),f&&t(cc),w(t9),f&&t(TDe),f&&t(ar),w(a9),w(s9),w(mM),w(l9),w($M),f&&t(MDe),f&&t(gc),w(i9),f&&t(EDe),f&&t(nr),w(d9),w(f9),w(SM),w(m9),w(BM),f&&t(CDe),f&&t(_c),w(h9),f&&t(wDe),f&&t(sr),w(p9),w(u9),w(NM),w(b9),w(jM),f&&t(ADe),f&&t(vc),w(v9),f&&t(LDe),f&&t(lr),w(F9),w(M9),w(GM),w(E9),w(iE),f&&t(yDe),f&&t(Mc),w(C9),f&&t(xDe),f&&t(ir),w(w9),w(L9),w(cE),w(y9),w(kE),f&&t($De),f&&t(wc),w(x9),f&&t(kDe),f&&t(dr),w($9),w(S9),w(RE),w(R9),w(BE),f&&t(SDe),f&&t(yc),w(P9),f&&t(RDe),f&&t(cr),w(B9),w(N9),w(NE),w(q9),w(jE),f&&t(PDe),f&&t(kc),w(j9),f&&t(BDe),f&&t(fr),w(D9),w(O9),w(GE),w(V9),w(hC),f&&t(IDe),f&&t(Pc),w(X9),f&&t(NDe),f&&t(mr),w(z9),w(Q9),w(_C),w(H9),w(LC),f&&t(qDe),f&&t(Nc),w(U9),f&&t(jDe),f&&t(gr),w(J9),w(K9),w(xC),w(Z9),w(OC),f&&t(DDe),f&&t(Dc),w(ex),f&&t(GDe),f&&t(hr),w(ox),w(tx),w(XC),w(ax),w(o0),f&&t(ODe),f&&t(Vc),w(nx),f&&t(VDe),f&&t(pr),w(sx),w(ix),w(t0),w(dx),w(g0),f&&t(XDe),f&&t(Wc),w(cx),f&&t(zDe),f&&t(_r),w(fx),w(gx),w(p0),w(hx),w(A0),f&&t(WDe),f&&t(Uc),w(px),f&&t(QDe),f&&t(ur),w(_x),w(bx),w(y0),w(vx),w(j0),f&&t(HDe),f&&t(Kc),w(Fx),f&&t(UDe),f&&t(br),w(Tx),w(Ex),w(G0),w(Cx),w(J0),f&&t(JDe),f&&t(of),w(wx),f&&t(YDe),f&&t(vr),w(Ax),w(yx),w(K0),w(xx),w(lw),f&&t(KDe),f&&t(af),w($x),f&&t(ZDe),f&&t(Fr),w(kx),w(Rx),w(dw),w(Px),w(fw),f&&t(eGe),f&&t(lf),w(Bx),f&&t(oGe),f&&t(Tr),w(Ix),w(qx),w(gw),w(jx),w(_w),f&&t(rGe),f&&t(ff),w(Gx),f&&t(tGe),f&&t(Mr),w(Ox),w(Xx),w(bw),w(zx),w(Fw)}}}const nBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function sBt(y){return sRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gBt extends rRt{constructor(g){super();tRt(this,g,sBt,aBt,aRt,{})}}export{gBt as default,nBt as metadata};
