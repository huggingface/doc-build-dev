import{S as Ykt,i as Kkt,s as Zkt,e as a,k as l,w as F,t as o,M as eSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as oSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as tzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function rSt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,SA,uf,De,We,pi,yn,RA,Ln,xn,PA,_i,$n,BA,ui,bf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),SA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),RA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),PA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),BA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ek=s(p);m=r(ek,"NewModelConfig"),ek.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var ok=s(mi);_f=r(ok,"model_type"),ok.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var rk=s(gi);hi=r(rk,'"new-model"'),rk.forEach(t),SA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var Aa=s(pi);yn=r(Aa,"NewModel"),Aa.forEach(t),RA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var tk=s(Ln);xn=r(tk,"PreTrainedModel"),tk.forEach(t),PA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),BA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var ak=s(ui);bf=r(ak,"NewModelConfig"),ak.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,tt),e(g,gi),e(gi,hi),e(g,SA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,RA),e(De,Ln),e(Ln,xn),e(De,PA),e(De,_i),e(_i,$n),e(De,BA),e(De,ui),e(ui,bf),e(De,wa)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,SA,uf,De,We,pi,yn,RA,Ln,xn,PA,_i,$n,BA,ui,bf,wa,Qe,Ae,ek,bi,ok,rk,Eo,Aa,tk,vf,ak,zOe,Pqe,vi,Ff,Coe,IA,WOe,woe,QOe,Bqe,kn,HOe,Aoe,UOe,JOe,yoe,YOe,KOe,Iqe,NA,Nqe,nk,ZOe,qqe,Tf,jqe,Fi,Mf,Loe,qA,eVe,xoe,oVe,Dqe,Co,jA,rVe,DA,tVe,sk,aVe,nVe,sVe,GA,lVe,$oe,iVe,dVe,cVe,Er,OA,fVe,koe,mVe,gVe,Ti,hVe,Soe,pVe,_Ve,Roe,uVe,bVe,vVe,A,Ef,Poe,FVe,TVe,lk,MVe,EVe,CVe,Cf,Boe,wVe,AVe,ik,yVe,LVe,xVe,wf,Ioe,$Ve,kVe,dk,SVe,RVe,PVe,Af,Noe,BVe,IVe,ck,NVe,qVe,jVe,yf,qoe,DVe,GVe,fk,OVe,VVe,XVe,Lf,joe,zVe,WVe,mk,QVe,HVe,UVe,xf,Doe,JVe,YVe,gk,KVe,ZVe,eXe,$f,Goe,oXe,rXe,hk,tXe,aXe,nXe,kf,Ooe,sXe,lXe,pk,iXe,dXe,cXe,Sf,Voe,fXe,mXe,_k,gXe,hXe,pXe,Rf,Xoe,_Xe,uXe,uk,bXe,vXe,FXe,Pf,zoe,TXe,MXe,bk,EXe,CXe,wXe,Bf,Woe,AXe,yXe,vk,LXe,xXe,$Xe,If,Qoe,kXe,SXe,Fk,RXe,PXe,BXe,Nf,Hoe,IXe,NXe,Tk,qXe,jXe,DXe,qf,Uoe,GXe,OXe,Mk,VXe,XXe,zXe,jf,Joe,WXe,QXe,Ek,HXe,UXe,JXe,Df,Yoe,YXe,KXe,Ck,ZXe,eze,oze,Gf,Koe,rze,tze,wk,aze,nze,sze,Of,Zoe,lze,ize,Ak,dze,cze,fze,Vf,ere,mze,gze,yk,hze,pze,_ze,Xf,ore,uze,bze,Lk,vze,Fze,Tze,zf,rre,Mze,Eze,xk,Cze,wze,Aze,Wf,tre,yze,Lze,$k,xze,$ze,kze,Qf,are,Sze,Rze,kk,Pze,Bze,Ize,Hf,nre,Nze,qze,Sk,jze,Dze,Gze,Uf,sre,Oze,Vze,Rk,Xze,zze,Wze,Jf,lre,Qze,Hze,Pk,Uze,Jze,Yze,Yf,ire,Kze,Zze,Bk,eWe,oWe,rWe,Kf,dre,tWe,aWe,Ik,nWe,sWe,lWe,Zf,cre,iWe,dWe,Nk,cWe,fWe,mWe,em,fre,gWe,hWe,qk,pWe,_We,uWe,om,mre,bWe,vWe,jk,FWe,TWe,MWe,rm,gre,EWe,CWe,Dk,wWe,AWe,yWe,tm,hre,LWe,xWe,Gk,$We,kWe,SWe,am,pre,RWe,PWe,Ok,BWe,IWe,NWe,nm,_re,qWe,jWe,Vk,DWe,GWe,OWe,sm,ure,VWe,XWe,Xk,zWe,WWe,QWe,lm,bre,HWe,UWe,zk,JWe,YWe,KWe,im,vre,ZWe,eQe,Wk,oQe,rQe,tQe,dm,Fre,aQe,nQe,Qk,sQe,lQe,iQe,cm,Tre,dQe,cQe,Hk,fQe,mQe,gQe,fm,Mre,hQe,pQe,Uk,_Qe,uQe,bQe,mm,Ere,vQe,FQe,Jk,TQe,MQe,EQe,gm,Cre,CQe,wQe,Yk,AQe,yQe,LQe,hm,wre,xQe,$Qe,Kk,kQe,SQe,RQe,pm,Are,PQe,BQe,Zk,IQe,NQe,qQe,_m,yre,jQe,DQe,eS,GQe,OQe,VQe,um,Lre,XQe,zQe,oS,WQe,QQe,HQe,bm,xre,UQe,JQe,rS,YQe,KQe,ZQe,vm,$re,eHe,oHe,tS,rHe,tHe,aHe,Fm,kre,nHe,sHe,aS,lHe,iHe,dHe,Tm,Sre,cHe,fHe,nS,mHe,gHe,hHe,Mm,Rre,pHe,_He,sS,uHe,bHe,vHe,Em,Pre,FHe,THe,lS,MHe,EHe,CHe,Cm,Bre,wHe,AHe,iS,yHe,LHe,xHe,wm,Ire,$He,kHe,dS,SHe,RHe,PHe,Am,Nre,BHe,IHe,cS,NHe,qHe,jHe,ym,qre,DHe,GHe,fS,OHe,VHe,XHe,Lm,jre,zHe,WHe,mS,QHe,HHe,UHe,xm,Dre,JHe,YHe,gS,KHe,ZHe,eUe,$m,Gre,oUe,rUe,hS,tUe,aUe,nUe,km,Ore,sUe,lUe,pS,iUe,dUe,cUe,Sm,Vre,fUe,mUe,_S,gUe,hUe,pUe,Rm,Xre,_Ue,uUe,uS,bUe,vUe,FUe,Pm,zre,TUe,MUe,bS,EUe,CUe,wUe,Bm,Wre,AUe,yUe,vS,LUe,xUe,$Ue,Im,Qre,kUe,SUe,FS,RUe,PUe,BUe,Nm,Hre,IUe,NUe,TS,qUe,jUe,DUe,qm,Ure,GUe,OUe,MS,VUe,XUe,zUe,jm,Jre,WUe,QUe,ES,HUe,UUe,JUe,Dm,Yre,YUe,KUe,CS,ZUe,eJe,oJe,Gm,Kre,rJe,tJe,wS,aJe,nJe,sJe,Om,Zre,lJe,iJe,AS,dJe,cJe,fJe,Vm,ete,mJe,gJe,yS,hJe,pJe,_Je,Xm,ote,uJe,bJe,LS,vJe,FJe,TJe,zm,rte,MJe,EJe,xS,CJe,wJe,AJe,Wm,tte,yJe,LJe,$S,xJe,$Je,kJe,Qm,ate,SJe,RJe,kS,PJe,BJe,IJe,Hm,nte,NJe,qJe,SS,jJe,DJe,GJe,Um,ste,OJe,VJe,RS,XJe,zJe,WJe,Jm,lte,QJe,HJe,PS,UJe,JJe,YJe,Ym,ite,KJe,ZJe,BS,eYe,oYe,rYe,Km,dte,tYe,aYe,IS,nYe,sYe,lYe,Zm,cte,iYe,dYe,NS,cYe,fYe,mYe,eg,fte,gYe,hYe,qS,pYe,_Ye,uYe,og,mte,bYe,vYe,jS,FYe,TYe,MYe,rg,gte,EYe,CYe,DS,wYe,AYe,yYe,tg,hte,LYe,xYe,GS,$Ye,kYe,SYe,ag,pte,RYe,PYe,OS,BYe,IYe,NYe,ng,_te,qYe,jYe,VS,DYe,GYe,OYe,sg,ute,VYe,XYe,XS,zYe,WYe,QYe,lg,bte,HYe,UYe,zS,JYe,YYe,KYe,ig,vte,ZYe,eKe,WS,oKe,rKe,tKe,dg,Fte,aKe,nKe,QS,sKe,lKe,iKe,cg,Tte,dKe,cKe,HS,fKe,mKe,gKe,fg,Mte,hKe,pKe,US,_Ke,uKe,bKe,mg,Ete,vKe,FKe,JS,TKe,MKe,EKe,gg,Cte,CKe,wKe,YS,AKe,yKe,LKe,hg,wte,xKe,$Ke,KS,kKe,SKe,RKe,pg,Ate,PKe,BKe,ZS,IKe,NKe,qKe,_g,yte,jKe,DKe,eR,GKe,OKe,VKe,ug,Lte,XKe,zKe,oR,WKe,QKe,HKe,bg,xte,UKe,JKe,rR,YKe,KKe,ZKe,vg,$te,eZe,oZe,tR,rZe,tZe,aZe,Fg,kte,nZe,sZe,aR,lZe,iZe,dZe,Tg,Ste,cZe,fZe,nR,mZe,gZe,hZe,Mg,Rte,pZe,_Ze,sR,uZe,bZe,vZe,Eg,Pte,FZe,TZe,lR,MZe,EZe,CZe,Cg,Bte,wZe,AZe,iR,yZe,LZe,xZe,wg,$Ze,Ag,VA,kZe,Ite,SZe,Gqe,Mi,yg,Nte,XA,RZe,qte,PZe,Oqe,wo,zA,BZe,WA,IZe,dR,NZe,qZe,jZe,QA,DZe,jte,GZe,OZe,VZe,Cr,HA,XZe,Dte,zZe,WZe,ya,QZe,Gte,HZe,UZe,Ote,JZe,YZe,Vte,KZe,ZZe,eeo,k,Sn,Xte,oeo,reo,cR,teo,aeo,fR,neo,seo,leo,Rn,zte,ieo,deo,mR,ceo,feo,gR,meo,geo,heo,Pn,Wte,peo,_eo,hR,ueo,beo,pR,veo,Feo,Teo,Lg,Qte,Meo,Eeo,_R,Ceo,weo,Aeo,Bn,Hte,yeo,Leo,uR,xeo,$eo,bR,keo,Seo,Reo,xg,Ute,Peo,Beo,vR,Ieo,Neo,qeo,$g,Jte,jeo,Deo,FR,Geo,Oeo,Veo,kg,Yte,Xeo,zeo,TR,Weo,Qeo,Heo,In,Kte,Ueo,Jeo,MR,Yeo,Keo,ER,Zeo,eoo,ooo,Nn,Zte,roo,too,CR,aoo,noo,wR,soo,loo,ioo,qn,eae,doo,coo,AR,foo,moo,yR,goo,hoo,poo,Sg,oae,_oo,uoo,LR,boo,voo,Foo,Rg,rae,Too,Moo,xR,Eoo,Coo,woo,jn,tae,Aoo,yoo,$R,Loo,xoo,kR,$oo,koo,Soo,Pg,aae,Roo,Poo,SR,Boo,Ioo,Noo,Dn,nae,qoo,joo,RR,Doo,Goo,PR,Ooo,Voo,Xoo,Gn,sae,zoo,Woo,BR,Qoo,Hoo,IR,Uoo,Joo,Yoo,On,lae,Koo,Zoo,NR,ero,oro,qR,rro,tro,aro,Bg,iae,nro,sro,jR,lro,iro,dro,Vn,dae,cro,fro,DR,mro,gro,GR,hro,pro,_ro,Xn,cae,uro,bro,OR,vro,Fro,VR,Tro,Mro,Ero,zn,fae,Cro,wro,XR,Aro,yro,zR,Lro,xro,$ro,Wn,mae,kro,Sro,WR,Rro,Pro,QR,Bro,Iro,Nro,Qn,gae,qro,jro,HR,Dro,Gro,UR,Oro,Vro,Xro,Hn,hae,zro,Wro,JR,Qro,Hro,YR,Uro,Jro,Yro,Ig,pae,Kro,Zro,KR,eto,oto,rto,Un,_ae,tto,ato,ZR,nto,sto,eP,lto,ito,dto,Ng,uae,cto,fto,oP,mto,gto,hto,Jn,bae,pto,_to,rP,uto,bto,tP,vto,Fto,Tto,Yn,vae,Mto,Eto,aP,Cto,wto,nP,Ato,yto,Lto,Kn,Fae,xto,$to,sP,kto,Sto,lP,Rto,Pto,Bto,qg,Tae,Ito,Nto,iP,qto,jto,Dto,Zn,Mae,Gto,Oto,dP,Vto,Xto,cP,zto,Wto,Qto,es,Eae,Hto,Uto,fP,Jto,Yto,mP,Kto,Zto,eao,jg,Cae,oao,rao,gP,tao,aao,nao,os,wae,sao,lao,hP,iao,dao,pP,cao,fao,mao,rs,Aae,gao,hao,_P,pao,_ao,uP,uao,bao,vao,ts,yae,Fao,Tao,bP,Mao,Eao,vP,Cao,wao,Aao,as,Lae,yao,Lao,FP,xao,$ao,TP,kao,Sao,Rao,ns,xae,Pao,Bao,MP,Iao,Nao,EP,qao,jao,Dao,ss,$ae,Gao,Oao,CP,Vao,Xao,wP,zao,Wao,Qao,ls,kae,Hao,Uao,AP,Jao,Yao,yP,Kao,Zao,eno,Dg,Sae,ono,rno,LP,tno,ano,nno,is,Rae,sno,lno,xP,ino,dno,$P,cno,fno,mno,Gg,Pae,gno,hno,kP,pno,_no,uno,Og,Bae,bno,vno,SP,Fno,Tno,Mno,ds,Iae,Eno,Cno,RP,wno,Ano,PP,yno,Lno,xno,cs,Nae,$no,kno,BP,Sno,Rno,IP,Pno,Bno,Ino,fs,qae,Nno,qno,NP,jno,Dno,qP,Gno,Ono,Vno,Vg,jae,Xno,zno,jP,Wno,Qno,Hno,ms,Dae,Uno,Jno,DP,Yno,Kno,GP,Zno,eso,oso,gs,Gae,rso,tso,OP,aso,nso,VP,sso,lso,iso,hs,Oae,dso,cso,XP,fso,mso,zP,gso,hso,pso,ps,Vae,_so,uso,WP,bso,vso,QP,Fso,Tso,Mso,_s,Xae,Eso,Cso,HP,wso,Aso,UP,yso,Lso,xso,Xg,zae,$so,kso,JP,Sso,Rso,Pso,us,Wae,Bso,Iso,YP,Nso,qso,KP,jso,Dso,Gso,zg,Qae,Oso,Vso,ZP,Xso,zso,Wso,Wg,Hae,Qso,Hso,eB,Uso,Jso,Yso,Qg,Uae,Kso,Zso,oB,elo,olo,rlo,Hg,Jae,tlo,alo,rB,nlo,slo,llo,bs,Yae,ilo,dlo,tB,clo,flo,aB,mlo,glo,hlo,Ug,Kae,plo,_lo,nB,ulo,blo,vlo,vs,Zae,Flo,Tlo,sB,Mlo,Elo,lB,Clo,wlo,Alo,Fs,ene,ylo,Llo,iB,xlo,$lo,dB,klo,Slo,Rlo,Ts,one,Plo,Blo,cB,Ilo,Nlo,fB,qlo,jlo,Dlo,Ms,rne,Glo,Olo,mB,Vlo,Xlo,gB,zlo,Wlo,Qlo,Es,tne,Hlo,Ulo,hB,Jlo,Ylo,pB,Klo,Zlo,eio,Cs,ane,oio,rio,_B,tio,aio,uB,nio,sio,lio,Jg,nne,iio,dio,bB,cio,fio,mio,Yg,sne,gio,hio,vB,pio,_io,uio,ws,lne,bio,vio,FB,Fio,Tio,TB,Mio,Eio,Cio,As,ine,wio,Aio,MB,yio,Lio,EB,xio,$io,kio,ys,dne,Sio,Rio,CB,Pio,Bio,wB,Iio,Nio,qio,Kg,cne,jio,Dio,AB,Gio,Oio,Vio,Zg,fne,Xio,zio,yB,Wio,Qio,Hio,eh,mne,Uio,Jio,LB,Yio,Kio,Zio,Ls,gne,edo,odo,xB,rdo,tdo,$B,ado,ndo,sdo,oh,hne,ldo,ido,kB,ddo,cdo,fdo,rh,pne,mdo,gdo,SB,hdo,pdo,_do,th,_ne,udo,bdo,RB,vdo,Fdo,Tdo,xs,une,Mdo,Edo,PB,Cdo,wdo,BB,Ado,ydo,Ldo,ah,bne,xdo,$do,IB,kdo,Sdo,Rdo,nh,vne,Pdo,Bdo,NB,Ido,Ndo,qdo,$s,Fne,jdo,Ddo,qB,Gdo,Odo,jB,Vdo,Xdo,zdo,ks,Tne,Wdo,Qdo,DB,Hdo,Udo,GB,Jdo,Ydo,Kdo,Ss,Mne,Zdo,eco,OB,oco,rco,VB,tco,aco,nco,Rs,Ene,sco,lco,XB,ico,dco,zB,cco,fco,mco,sh,gco,lh,UA,hco,Cne,pco,Vqe,Ei,ih,wne,JA,_co,Ane,uco,Xqe,Ao,YA,bco,KA,vco,WB,Fco,Tco,Mco,ZA,Eco,yne,Cco,wco,Aco,He,ey,yco,Lne,Lco,xco,La,$co,xne,kco,Sco,$ne,Rco,Pco,kne,Bco,Ico,Nco,Y,dh,Sne,qco,jco,QB,Dco,Gco,Oco,ch,Rne,Vco,Xco,HB,zco,Wco,Qco,fh,Pne,Hco,Uco,UB,Jco,Yco,Kco,mh,Bne,Zco,efo,JB,ofo,rfo,tfo,gh,Ine,afo,nfo,YB,sfo,lfo,ifo,hh,Nne,dfo,cfo,KB,ffo,mfo,gfo,ph,qne,hfo,pfo,ZB,_fo,ufo,bfo,_h,jne,vfo,Ffo,eI,Tfo,Mfo,Efo,uh,Dne,Cfo,wfo,oI,Afo,yfo,Lfo,bh,Gne,xfo,$fo,rI,kfo,Sfo,Rfo,vh,One,Pfo,Bfo,tI,Ifo,Nfo,qfo,Fh,Vne,jfo,Dfo,aI,Gfo,Ofo,Vfo,Th,Xne,Xfo,zfo,nI,Wfo,Qfo,Hfo,Mh,zne,Ufo,Jfo,sI,Yfo,Kfo,Zfo,Eh,Wne,emo,omo,lI,rmo,tmo,amo,Ch,Qne,nmo,smo,iI,lmo,imo,dmo,wh,Hne,cmo,fmo,dI,mmo,gmo,hmo,Ah,Une,pmo,_mo,cI,umo,bmo,vmo,yh,Jne,Fmo,Tmo,fI,Mmo,Emo,Cmo,Lh,Yne,wmo,Amo,mI,ymo,Lmo,xmo,xh,Kne,$mo,kmo,gI,Smo,Rmo,Pmo,$h,Zne,Bmo,Imo,hI,Nmo,qmo,jmo,kh,ese,Dmo,Gmo,pI,Omo,Vmo,Xmo,Sh,ose,zmo,Wmo,_I,Qmo,Hmo,Umo,Rh,rse,Jmo,Ymo,uI,Kmo,Zmo,ego,Ph,tse,ogo,rgo,bI,tgo,ago,ngo,Bh,ase,sgo,lgo,vI,igo,dgo,cgo,Ih,nse,fgo,mgo,FI,ggo,hgo,pgo,Nh,sse,_go,ugo,TI,bgo,vgo,Fgo,qh,lse,Tgo,Mgo,MI,Ego,Cgo,wgo,jh,Ago,Dh,ygo,Gh,oy,Lgo,ise,xgo,zqe,Ci,Oh,dse,ry,$go,cse,kgo,Wqe,yo,ty,Sgo,ay,Rgo,EI,Pgo,Bgo,Igo,ny,Ngo,fse,qgo,jgo,Dgo,Ue,sy,Ggo,mse,Ogo,Vgo,wi,Xgo,gse,zgo,Wgo,hse,Qgo,Hgo,Ugo,he,Vh,pse,Jgo,Ygo,CI,Kgo,Zgo,eho,Xh,_se,oho,rho,use,tho,aho,nho,zh,bse,sho,lho,wI,iho,dho,cho,Wh,vse,fho,mho,AI,gho,hho,pho,Qh,Fse,_ho,uho,yI,bho,vho,Fho,Hh,Tse,Tho,Mho,LI,Eho,Cho,who,Uh,Mse,Aho,yho,xI,Lho,xho,$ho,Jh,Ese,kho,Sho,$I,Rho,Pho,Bho,Yh,Cse,Iho,Nho,kI,qho,jho,Dho,Kh,wse,Gho,Oho,SI,Vho,Xho,zho,Zh,Ase,Who,Qho,RI,Hho,Uho,Jho,ep,yse,Yho,Kho,PI,Zho,epo,opo,op,Lse,rpo,tpo,BI,apo,npo,spo,rp,xse,lpo,ipo,II,dpo,cpo,fpo,tp,$se,mpo,gpo,NI,hpo,ppo,_po,ap,kse,upo,bpo,qI,vpo,Fpo,Tpo,np,Sse,Mpo,Epo,jI,Cpo,wpo,Apo,sp,ypo,lp,Lpo,ip,ly,xpo,Rse,$po,Qqe,Ai,dp,Pse,iy,kpo,Bse,Spo,Hqe,Lo,dy,Rpo,yi,Ppo,DI,Bpo,Ipo,GI,Npo,qpo,jpo,cy,Dpo,Ise,Gpo,Opo,Vpo,at,fy,Xpo,Nse,zpo,Wpo,Li,Qpo,qse,Hpo,Upo,OI,Jpo,Ypo,Kpo,cp,Zpo,Je,my,e_o,jse,o_o,r_o,xa,t_o,Dse,a_o,n_o,Gse,s_o,l_o,Ose,i_o,d_o,c_o,x,fp,Vse,f_o,m_o,VI,g_o,h_o,p_o,mp,Xse,__o,u_o,XI,b_o,v_o,F_o,gp,zse,T_o,M_o,zI,E_o,C_o,w_o,hp,Wse,A_o,y_o,WI,L_o,x_o,$_o,pp,Qse,k_o,S_o,QI,R_o,P_o,B_o,_p,Hse,I_o,N_o,HI,q_o,j_o,D_o,up,Use,G_o,O_o,UI,V_o,X_o,z_o,bp,Jse,W_o,Q_o,JI,H_o,U_o,J_o,vp,Yse,Y_o,K_o,YI,Z_o,euo,ouo,Fp,Kse,ruo,tuo,KI,auo,nuo,suo,Tp,Zse,luo,iuo,ZI,duo,cuo,fuo,Mp,ele,muo,guo,eN,huo,puo,_uo,Ep,ole,uuo,buo,oN,vuo,Fuo,Tuo,Cp,rle,Muo,Euo,rN,Cuo,wuo,Auo,wp,tle,yuo,Luo,tN,xuo,$uo,kuo,Ap,ale,Suo,Ruo,aN,Puo,Buo,Iuo,yp,nle,Nuo,quo,nN,juo,Duo,Guo,Lp,sle,Ouo,Vuo,sN,Xuo,zuo,Wuo,xp,lle,Quo,Huo,lN,Uuo,Juo,Yuo,$p,ile,Kuo,Zuo,iN,e1o,o1o,r1o,kp,dle,t1o,a1o,dN,n1o,s1o,l1o,Sp,cle,i1o,d1o,cN,c1o,f1o,m1o,Rp,fle,g1o,h1o,fN,p1o,_1o,u1o,Pp,mle,b1o,v1o,mN,F1o,T1o,M1o,Bp,gle,E1o,C1o,gN,w1o,A1o,y1o,Ip,hle,L1o,x1o,hN,$1o,k1o,S1o,Np,ple,R1o,P1o,pN,B1o,I1o,N1o,qp,_le,q1o,j1o,_N,D1o,G1o,O1o,jp,ule,V1o,X1o,uN,z1o,W1o,Q1o,Dp,ble,H1o,U1o,bN,J1o,Y1o,K1o,Gp,vle,Z1o,ebo,vN,obo,rbo,tbo,Op,Fle,abo,nbo,FN,sbo,lbo,ibo,Ps,Tle,dbo,cbo,TN,fbo,mbo,MN,gbo,hbo,pbo,Vp,Mle,_bo,ubo,EN,bbo,vbo,Fbo,Xp,Ele,Tbo,Mbo,CN,Ebo,Cbo,wbo,zp,Cle,Abo,ybo,wN,Lbo,xbo,$bo,Wp,wle,kbo,Sbo,AN,Rbo,Pbo,Bbo,Qp,Ale,Ibo,Nbo,yN,qbo,jbo,Dbo,Hp,yle,Gbo,Obo,LN,Vbo,Xbo,zbo,Up,Lle,Wbo,Qbo,xN,Hbo,Ubo,Jbo,Jp,xle,Ybo,Kbo,$N,Zbo,e2o,o2o,Yp,$le,r2o,t2o,kN,a2o,n2o,s2o,Kp,kle,l2o,i2o,SN,d2o,c2o,f2o,Zp,Sle,m2o,g2o,RN,h2o,p2o,_2o,e_,Rle,u2o,b2o,PN,v2o,F2o,T2o,o_,Ple,M2o,E2o,BN,C2o,w2o,A2o,r_,Ble,y2o,L2o,IN,x2o,$2o,k2o,t_,Ile,S2o,R2o,NN,P2o,B2o,I2o,a_,Nle,N2o,q2o,qN,j2o,D2o,G2o,n_,qle,O2o,V2o,jN,X2o,z2o,W2o,s_,jle,Q2o,H2o,DN,U2o,J2o,Y2o,l_,Dle,K2o,Z2o,GN,e4o,o4o,r4o,i_,Gle,t4o,a4o,ON,n4o,s4o,l4o,d_,Ole,i4o,d4o,VN,c4o,f4o,m4o,c_,Vle,g4o,h4o,XN,p4o,_4o,u4o,f_,Xle,b4o,v4o,zN,F4o,T4o,M4o,m_,zle,E4o,C4o,WN,w4o,A4o,y4o,g_,Wle,L4o,x4o,QN,$4o,k4o,S4o,h_,Qle,R4o,P4o,HN,B4o,I4o,N4o,p_,Hle,q4o,j4o,UN,D4o,G4o,O4o,__,Ule,V4o,X4o,JN,z4o,W4o,Q4o,u_,Jle,H4o,U4o,YN,J4o,Y4o,K4o,b_,Yle,Z4o,evo,KN,ovo,rvo,tvo,v_,Kle,avo,nvo,ZN,svo,lvo,ivo,F_,Zle,dvo,cvo,eq,fvo,mvo,gvo,T_,eie,hvo,pvo,oq,_vo,uvo,bvo,M_,oie,vvo,Fvo,rq,Tvo,Mvo,Evo,E_,rie,Cvo,wvo,tq,Avo,yvo,Lvo,C_,tie,xvo,$vo,aq,kvo,Svo,Rvo,w_,aie,Pvo,Bvo,nq,Ivo,Nvo,qvo,A_,nie,jvo,Dvo,sq,Gvo,Ovo,Vvo,y_,sie,Xvo,zvo,lq,Wvo,Qvo,Hvo,L_,lie,Uvo,Jvo,iq,Yvo,Kvo,Zvo,x_,iie,e5o,o5o,dq,r5o,t5o,a5o,$_,die,n5o,s5o,cq,l5o,i5o,d5o,k_,cie,c5o,f5o,fq,m5o,g5o,h5o,S_,fie,p5o,_5o,mq,u5o,b5o,v5o,R_,mie,F5o,T5o,gq,M5o,E5o,C5o,P_,gie,w5o,A5o,hq,y5o,L5o,x5o,B_,hie,$5o,k5o,pq,S5o,R5o,P5o,I_,pie,B5o,I5o,_q,N5o,q5o,j5o,N_,_ie,D5o,G5o,uq,O5o,V5o,X5o,q_,uie,z5o,W5o,bq,Q5o,H5o,U5o,j_,bie,J5o,Y5o,vq,K5o,Z5o,e3o,D_,vie,o3o,r3o,Fq,t3o,a3o,n3o,G_,Fie,s3o,l3o,Tq,i3o,d3o,c3o,O_,Tie,f3o,m3o,Mq,g3o,h3o,p3o,V_,Mie,_3o,u3o,Eq,b3o,v3o,F3o,X_,Eie,T3o,M3o,Cq,E3o,C3o,w3o,z_,Cie,A3o,y3o,wq,L3o,x3o,$3o,W_,wie,k3o,S3o,Aq,R3o,P3o,B3o,Q_,Aie,I3o,N3o,yq,q3o,j3o,D3o,H_,yie,G3o,O3o,Lq,V3o,X3o,z3o,U_,Lie,W3o,Q3o,xq,H3o,U3o,J3o,J_,xie,Y3o,K3o,$q,Z3o,eFo,oFo,Y_,$ie,rFo,tFo,kq,aFo,nFo,sFo,K_,kie,lFo,iFo,Sq,dFo,cFo,fFo,Z_,Sie,mFo,gFo,Rq,hFo,pFo,_Fo,eu,Rie,uFo,bFo,Pq,vFo,FFo,TFo,ou,Pie,MFo,EFo,Bq,CFo,wFo,AFo,ru,Bie,yFo,LFo,Iq,xFo,$Fo,kFo,tu,Iie,SFo,RFo,Nq,PFo,BFo,IFo,au,Nie,NFo,qFo,qq,jFo,DFo,GFo,nu,OFo,qie,VFo,XFo,jie,zFo,WFo,su,Uqe,xi,lu,Die,gy,QFo,Gie,HFo,Jqe,xo,hy,UFo,$i,JFo,jq,YFo,KFo,Dq,ZFo,eTo,oTo,py,rTo,Oie,tTo,aTo,nTo,nt,_y,sTo,Vie,lTo,iTo,ki,dTo,Xie,cTo,fTo,Gq,mTo,gTo,hTo,iu,pTo,Ye,uy,_To,zie,uTo,bTo,$a,vTo,Wie,FTo,TTo,Qie,MTo,ETo,Hie,CTo,wTo,ATo,G,du,Uie,yTo,LTo,Oq,xTo,$To,kTo,cu,Jie,STo,RTo,Vq,PTo,BTo,ITo,fu,Yie,NTo,qTo,Xq,jTo,DTo,GTo,mu,Kie,OTo,VTo,zq,XTo,zTo,WTo,gu,Zie,QTo,HTo,Wq,UTo,JTo,YTo,hu,ede,KTo,ZTo,Qq,e7o,o7o,r7o,pu,ode,t7o,a7o,Hq,n7o,s7o,l7o,_u,rde,i7o,d7o,Uq,c7o,f7o,m7o,uu,tde,g7o,h7o,Jq,p7o,_7o,u7o,bu,ade,b7o,v7o,Yq,F7o,T7o,M7o,vu,nde,E7o,C7o,Kq,w7o,A7o,y7o,Fu,sde,L7o,x7o,Zq,$7o,k7o,S7o,Tu,lde,R7o,P7o,ej,B7o,I7o,N7o,Mu,ide,q7o,j7o,oj,D7o,G7o,O7o,Eu,dde,V7o,X7o,rj,z7o,W7o,Q7o,Cu,cde,H7o,U7o,tj,J7o,Y7o,K7o,wu,fde,Z7o,eMo,aj,oMo,rMo,tMo,Au,mde,aMo,nMo,nj,sMo,lMo,iMo,yu,gde,dMo,cMo,sj,fMo,mMo,gMo,Lu,hde,hMo,pMo,lj,_Mo,uMo,bMo,xu,pde,vMo,FMo,ij,TMo,MMo,EMo,$u,_de,CMo,wMo,dj,AMo,yMo,LMo,ku,ude,xMo,$Mo,cj,kMo,SMo,RMo,Su,bde,PMo,BMo,fj,IMo,NMo,qMo,Ru,vde,jMo,DMo,mj,GMo,OMo,VMo,Pu,Fde,XMo,zMo,gj,WMo,QMo,HMo,Bu,Tde,UMo,JMo,hj,YMo,KMo,ZMo,Iu,Mde,eEo,oEo,pj,rEo,tEo,aEo,Nu,Ede,nEo,sEo,_j,lEo,iEo,dEo,qu,Cde,cEo,fEo,uj,mEo,gEo,hEo,ju,wde,pEo,_Eo,bj,uEo,bEo,vEo,Du,Ade,FEo,TEo,vj,MEo,EEo,CEo,Gu,yde,wEo,AEo,Fj,yEo,LEo,xEo,Ou,Lde,$Eo,kEo,Tj,SEo,REo,PEo,Vu,xde,BEo,IEo,Mj,NEo,qEo,jEo,Xu,$de,DEo,GEo,Ej,OEo,VEo,XEo,zu,kde,zEo,WEo,Cj,QEo,HEo,UEo,Wu,Sde,JEo,YEo,wj,KEo,ZEo,eCo,Qu,Rde,oCo,rCo,Aj,tCo,aCo,nCo,Hu,Pde,sCo,lCo,yj,iCo,dCo,cCo,Uu,Bde,fCo,mCo,Lj,gCo,hCo,pCo,Ju,Ide,_Co,uCo,xj,bCo,vCo,FCo,Yu,TCo,Nde,MCo,ECo,qde,CCo,wCo,Ku,Yqe,Si,Zu,jde,by,ACo,Dde,yCo,Kqe,$o,vy,LCo,Ri,xCo,$j,$Co,kCo,kj,SCo,RCo,PCo,Fy,BCo,Gde,ICo,NCo,qCo,st,Ty,jCo,Ode,DCo,GCo,Pi,OCo,Vde,VCo,XCo,Sj,zCo,WCo,QCo,e1,HCo,Ke,My,UCo,Xde,JCo,YCo,ka,KCo,zde,ZCo,e0o,Wde,o0o,r0o,Qde,t0o,a0o,n0o,z,o1,Hde,s0o,l0o,Rj,i0o,d0o,c0o,r1,Ude,f0o,m0o,Pj,g0o,h0o,p0o,t1,Jde,_0o,u0o,Bj,b0o,v0o,F0o,a1,Yde,T0o,M0o,Ij,E0o,C0o,w0o,n1,Kde,A0o,y0o,Nj,L0o,x0o,$0o,s1,Zde,k0o,S0o,qj,R0o,P0o,B0o,l1,ece,I0o,N0o,jj,q0o,j0o,D0o,i1,oce,G0o,O0o,Dj,V0o,X0o,z0o,d1,rce,W0o,Q0o,Gj,H0o,U0o,J0o,c1,tce,Y0o,K0o,Oj,Z0o,ewo,owo,f1,ace,rwo,two,Vj,awo,nwo,swo,m1,nce,lwo,iwo,Xj,dwo,cwo,fwo,g1,sce,mwo,gwo,zj,hwo,pwo,_wo,h1,lce,uwo,bwo,Wj,vwo,Fwo,Two,p1,ice,Mwo,Ewo,Qj,Cwo,wwo,Awo,_1,dce,ywo,Lwo,Hj,xwo,$wo,kwo,u1,cce,Swo,Rwo,Uj,Pwo,Bwo,Iwo,b1,fce,Nwo,qwo,Jj,jwo,Dwo,Gwo,v1,mce,Owo,Vwo,Yj,Xwo,zwo,Wwo,F1,gce,Qwo,Hwo,Kj,Uwo,Jwo,Ywo,T1,hce,Kwo,Zwo,Zj,e6o,o6o,r6o,M1,pce,t6o,a6o,eD,n6o,s6o,l6o,E1,_ce,i6o,d6o,oD,c6o,f6o,m6o,C1,uce,g6o,h6o,rD,p6o,_6o,u6o,w1,bce,b6o,v6o,tD,F6o,T6o,M6o,A1,vce,E6o,C6o,aD,w6o,A6o,y6o,y1,Fce,L6o,x6o,nD,$6o,k6o,S6o,L1,Tce,R6o,P6o,sD,B6o,I6o,N6o,x1,Mce,q6o,j6o,lD,D6o,G6o,O6o,$1,Ece,V6o,X6o,iD,z6o,W6o,Q6o,k1,Cce,H6o,U6o,dD,J6o,Y6o,K6o,S1,wce,Z6o,eAo,cD,oAo,rAo,tAo,R1,Ace,aAo,nAo,fD,sAo,lAo,iAo,P1,yce,dAo,cAo,mD,fAo,mAo,gAo,B1,Lce,hAo,pAo,gD,_Ao,uAo,bAo,I1,xce,vAo,FAo,hD,TAo,MAo,EAo,N1,$ce,CAo,wAo,pD,AAo,yAo,LAo,q1,xAo,kce,$Ao,kAo,Sce,SAo,RAo,j1,Zqe,Bi,D1,Rce,Ey,PAo,Pce,BAo,eje,ko,Cy,IAo,Ii,NAo,_D,qAo,jAo,uD,DAo,GAo,OAo,wy,VAo,Bce,XAo,zAo,WAo,lt,Ay,QAo,Ice,HAo,UAo,Ni,JAo,Nce,YAo,KAo,bD,ZAo,eyo,oyo,G1,ryo,Ze,yy,tyo,qce,ayo,nyo,Sa,syo,jce,lyo,iyo,Dce,dyo,cyo,Gce,fyo,myo,gyo,Q,O1,Oce,hyo,pyo,vD,_yo,uyo,byo,V1,Vce,vyo,Fyo,FD,Tyo,Myo,Eyo,X1,Xce,Cyo,wyo,TD,Ayo,yyo,Lyo,z1,zce,xyo,$yo,MD,kyo,Syo,Ryo,W1,Wce,Pyo,Byo,ED,Iyo,Nyo,qyo,Q1,Qce,jyo,Dyo,CD,Gyo,Oyo,Vyo,H1,Hce,Xyo,zyo,wD,Wyo,Qyo,Hyo,U1,Uce,Uyo,Jyo,AD,Yyo,Kyo,Zyo,J1,Jce,eLo,oLo,yD,rLo,tLo,aLo,Y1,Yce,nLo,sLo,LD,lLo,iLo,dLo,K1,Kce,cLo,fLo,xD,mLo,gLo,hLo,Z1,Zce,pLo,_Lo,$D,uLo,bLo,vLo,eb,efe,FLo,TLo,kD,MLo,ELo,CLo,ob,ofe,wLo,ALo,SD,yLo,LLo,xLo,rb,rfe,$Lo,kLo,RD,SLo,RLo,PLo,tb,tfe,BLo,ILo,PD,NLo,qLo,jLo,ab,afe,DLo,GLo,BD,OLo,VLo,XLo,nb,nfe,zLo,WLo,ID,QLo,HLo,ULo,sb,sfe,JLo,YLo,ND,KLo,ZLo,e8o,lb,lfe,o8o,r8o,qD,t8o,a8o,n8o,ib,ife,s8o,l8o,jD,i8o,d8o,c8o,db,dfe,f8o,m8o,DD,g8o,h8o,p8o,cb,cfe,_8o,u8o,GD,b8o,v8o,F8o,fb,ffe,T8o,M8o,OD,E8o,C8o,w8o,mb,mfe,A8o,y8o,VD,L8o,x8o,$8o,gb,gfe,k8o,S8o,XD,R8o,P8o,B8o,hb,hfe,I8o,N8o,zD,q8o,j8o,D8o,pb,pfe,G8o,O8o,WD,V8o,X8o,z8o,_b,_fe,W8o,Q8o,QD,H8o,U8o,J8o,ub,ufe,Y8o,K8o,HD,Z8o,e9o,o9o,bb,bfe,r9o,t9o,vfe,a9o,n9o,s9o,vb,Ffe,l9o,i9o,UD,d9o,c9o,f9o,Fb,Tfe,m9o,g9o,JD,h9o,p9o,_9o,Tb,Mfe,u9o,b9o,YD,v9o,F9o,T9o,Mb,Efe,M9o,E9o,KD,C9o,w9o,A9o,Eb,y9o,Cfe,L9o,x9o,wfe,$9o,k9o,Cb,oje,qi,wb,Afe,Ly,S9o,yfe,R9o,rje,So,xy,P9o,ji,B9o,ZD,I9o,N9o,eG,q9o,j9o,D9o,$y,G9o,Lfe,O9o,V9o,X9o,it,ky,z9o,xfe,W9o,Q9o,Di,H9o,$fe,U9o,J9o,oG,Y9o,K9o,Z9o,Ab,exo,eo,Sy,oxo,kfe,rxo,txo,Ra,axo,Sfe,nxo,sxo,Rfe,lxo,ixo,Pfe,dxo,cxo,fxo,_e,yb,Bfe,mxo,gxo,rG,hxo,pxo,_xo,Lb,Ife,uxo,bxo,tG,vxo,Fxo,Txo,xb,Nfe,Mxo,Exo,aG,Cxo,wxo,Axo,$b,qfe,yxo,Lxo,nG,xxo,$xo,kxo,kb,jfe,Sxo,Rxo,sG,Pxo,Bxo,Ixo,Sb,Dfe,Nxo,qxo,lG,jxo,Dxo,Gxo,Rb,Gfe,Oxo,Vxo,iG,Xxo,zxo,Wxo,Pb,Ofe,Qxo,Hxo,dG,Uxo,Jxo,Yxo,Bb,Vfe,Kxo,Zxo,cG,e$o,o$o,r$o,Ib,Xfe,t$o,a$o,fG,n$o,s$o,l$o,Nb,zfe,i$o,d$o,mG,c$o,f$o,m$o,qb,Wfe,g$o,h$o,gG,p$o,_$o,u$o,jb,Qfe,b$o,v$o,hG,F$o,T$o,M$o,Db,Hfe,E$o,C$o,pG,w$o,A$o,y$o,Gb,Ufe,L$o,x$o,_G,$$o,k$o,S$o,Ob,Jfe,R$o,P$o,uG,B$o,I$o,N$o,Vb,q$o,Yfe,j$o,D$o,Kfe,G$o,O$o,Xb,tje,Gi,zb,Zfe,Ry,V$o,eme,X$o,aje,Ro,Py,z$o,Oi,W$o,bG,Q$o,H$o,vG,U$o,J$o,Y$o,By,K$o,ome,Z$o,eko,oko,dt,Iy,rko,rme,tko,ako,Vi,nko,tme,sko,lko,FG,iko,dko,cko,Wb,fko,oo,Ny,mko,ame,gko,hko,Pa,pko,nme,_ko,uko,sme,bko,vko,lme,Fko,Tko,Mko,N,Qb,ime,Eko,Cko,TG,wko,Ako,yko,Hb,dme,Lko,xko,MG,$ko,kko,Sko,Ub,cme,Rko,Pko,EG,Bko,Iko,Nko,Jb,fme,qko,jko,CG,Dko,Gko,Oko,Yb,mme,Vko,Xko,wG,zko,Wko,Qko,Kb,gme,Hko,Uko,AG,Jko,Yko,Kko,Zb,hme,Zko,eSo,yG,oSo,rSo,tSo,e2,pme,aSo,nSo,LG,sSo,lSo,iSo,o2,_me,dSo,cSo,xG,fSo,mSo,gSo,r2,ume,hSo,pSo,$G,_So,uSo,bSo,t2,bme,vSo,FSo,kG,TSo,MSo,ESo,a2,vme,CSo,wSo,SG,ASo,ySo,LSo,n2,Fme,xSo,$So,RG,kSo,SSo,RSo,s2,Tme,PSo,BSo,PG,ISo,NSo,qSo,l2,Mme,jSo,DSo,BG,GSo,OSo,VSo,i2,Eme,XSo,zSo,IG,WSo,QSo,HSo,d2,Cme,USo,JSo,NG,YSo,KSo,ZSo,c2,wme,eRo,oRo,qG,rRo,tRo,aRo,f2,Ame,nRo,sRo,jG,lRo,iRo,dRo,m2,yme,cRo,fRo,DG,mRo,gRo,hRo,g2,Lme,pRo,_Ro,GG,uRo,bRo,vRo,h2,xme,FRo,TRo,OG,MRo,ERo,CRo,p2,$me,wRo,ARo,VG,yRo,LRo,xRo,_2,kme,$Ro,kRo,XG,SRo,RRo,PRo,u2,Sme,BRo,IRo,zG,NRo,qRo,jRo,b2,Rme,DRo,GRo,WG,ORo,VRo,XRo,v2,Pme,zRo,WRo,QG,QRo,HRo,URo,F2,Bme,JRo,YRo,HG,KRo,ZRo,ePo,T2,Ime,oPo,rPo,UG,tPo,aPo,nPo,M2,Nme,sPo,lPo,JG,iPo,dPo,cPo,E2,qme,fPo,mPo,YG,gPo,hPo,pPo,C2,jme,_Po,uPo,KG,bPo,vPo,FPo,w2,Dme,TPo,MPo,ZG,EPo,CPo,wPo,A2,Gme,APo,yPo,eO,LPo,xPo,$Po,y2,Ome,kPo,SPo,oO,RPo,PPo,BPo,L2,Vme,IPo,NPo,rO,qPo,jPo,DPo,x2,Xme,GPo,OPo,tO,VPo,XPo,zPo,$2,zme,WPo,QPo,aO,HPo,UPo,JPo,k2,Wme,YPo,KPo,nO,ZPo,eBo,oBo,S2,Qme,rBo,tBo,sO,aBo,nBo,sBo,R2,Hme,lBo,iBo,lO,dBo,cBo,fBo,P2,Ume,mBo,gBo,iO,hBo,pBo,_Bo,B2,Jme,uBo,bBo,dO,vBo,FBo,TBo,I2,Yme,MBo,EBo,cO,CBo,wBo,ABo,N2,Kme,yBo,LBo,fO,xBo,$Bo,kBo,q2,Zme,SBo,RBo,mO,PBo,BBo,IBo,j2,ege,NBo,qBo,gO,jBo,DBo,GBo,D2,OBo,oge,VBo,XBo,rge,zBo,WBo,G2,nje,Xi,O2,tge,qy,QBo,age,HBo,sje,Po,jy,UBo,zi,JBo,hO,YBo,KBo,pO,ZBo,eIo,oIo,Dy,rIo,nge,tIo,aIo,nIo,ct,Gy,sIo,sge,lIo,iIo,Wi,dIo,lge,cIo,fIo,_O,mIo,gIo,hIo,V2,pIo,ro,Oy,_Io,ige,uIo,bIo,Ba,vIo,dge,FIo,TIo,cge,MIo,EIo,fge,CIo,wIo,AIo,K,X2,mge,yIo,LIo,uO,xIo,$Io,kIo,z2,gge,SIo,RIo,bO,PIo,BIo,IIo,W2,hge,NIo,qIo,vO,jIo,DIo,GIo,Q2,pge,OIo,VIo,FO,XIo,zIo,WIo,H2,_ge,QIo,HIo,TO,UIo,JIo,YIo,U2,uge,KIo,ZIo,MO,eNo,oNo,rNo,J2,bge,tNo,aNo,EO,nNo,sNo,lNo,Y2,vge,iNo,dNo,CO,cNo,fNo,mNo,K2,Fge,gNo,hNo,wO,pNo,_No,uNo,Z2,Tge,bNo,vNo,AO,FNo,TNo,MNo,e4,Mge,ENo,CNo,yO,wNo,ANo,yNo,o4,Ege,LNo,xNo,LO,$No,kNo,SNo,r4,Cge,RNo,PNo,xO,BNo,INo,NNo,t4,wge,qNo,jNo,$O,DNo,GNo,ONo,a4,Age,VNo,XNo,kO,zNo,WNo,QNo,n4,yge,HNo,UNo,SO,JNo,YNo,KNo,s4,Lge,ZNo,eqo,RO,oqo,rqo,tqo,l4,xge,aqo,nqo,PO,sqo,lqo,iqo,i4,$ge,dqo,cqo,BO,fqo,mqo,gqo,d4,kge,hqo,pqo,IO,_qo,uqo,bqo,c4,Sge,vqo,Fqo,NO,Tqo,Mqo,Eqo,f4,Rge,Cqo,wqo,qO,Aqo,yqo,Lqo,m4,Pge,xqo,$qo,jO,kqo,Sqo,Rqo,g4,Bge,Pqo,Bqo,DO,Iqo,Nqo,qqo,h4,Ige,jqo,Dqo,GO,Gqo,Oqo,Vqo,p4,Nge,Xqo,zqo,OO,Wqo,Qqo,Hqo,_4,qge,Uqo,Jqo,VO,Yqo,Kqo,Zqo,u4,jge,ejo,ojo,XO,rjo,tjo,ajo,b4,Dge,njo,sjo,zO,ljo,ijo,djo,v4,cjo,Gge,fjo,mjo,Oge,gjo,hjo,F4,lje,Qi,T4,Vge,Vy,pjo,Xge,_jo,ije,Bo,Xy,ujo,Hi,bjo,WO,vjo,Fjo,QO,Tjo,Mjo,Ejo,zy,Cjo,zge,wjo,Ajo,yjo,ft,Wy,Ljo,Wge,xjo,$jo,Ui,kjo,Qge,Sjo,Rjo,HO,Pjo,Bjo,Ijo,M4,Njo,to,Qy,qjo,Hge,jjo,Djo,Ia,Gjo,Uge,Ojo,Vjo,Jge,Xjo,zjo,Yge,Wjo,Qjo,Hjo,Yr,E4,Kge,Ujo,Jjo,UO,Yjo,Kjo,Zjo,C4,Zge,eDo,oDo,JO,rDo,tDo,aDo,w4,ehe,nDo,sDo,YO,lDo,iDo,dDo,A4,ohe,cDo,fDo,KO,mDo,gDo,hDo,y4,rhe,pDo,_Do,ZO,uDo,bDo,vDo,L4,FDo,the,TDo,MDo,ahe,EDo,CDo,x4,dje,Ji,$4,nhe,Hy,wDo,she,ADo,cje,Io,Uy,yDo,Yi,LDo,eV,xDo,$Do,oV,kDo,SDo,RDo,Jy,PDo,lhe,BDo,IDo,NDo,mt,Yy,qDo,ihe,jDo,DDo,Ki,GDo,dhe,ODo,VDo,rV,XDo,zDo,WDo,k4,QDo,ao,Ky,HDo,che,UDo,JDo,Na,YDo,fhe,KDo,ZDo,mhe,eGo,oGo,ghe,rGo,tGo,aGo,H,S4,hhe,nGo,sGo,tV,lGo,iGo,dGo,R4,phe,cGo,fGo,aV,mGo,gGo,hGo,P4,_he,pGo,_Go,nV,uGo,bGo,vGo,B4,uhe,FGo,TGo,sV,MGo,EGo,CGo,I4,bhe,wGo,AGo,lV,yGo,LGo,xGo,N4,vhe,$Go,kGo,iV,SGo,RGo,PGo,q4,Fhe,BGo,IGo,dV,NGo,qGo,jGo,j4,The,DGo,GGo,cV,OGo,VGo,XGo,D4,Mhe,zGo,WGo,fV,QGo,HGo,UGo,G4,Ehe,JGo,YGo,mV,KGo,ZGo,eOo,O4,Che,oOo,rOo,gV,tOo,aOo,nOo,V4,whe,sOo,lOo,hV,iOo,dOo,cOo,X4,Ahe,fOo,mOo,pV,gOo,hOo,pOo,z4,yhe,_Oo,uOo,_V,bOo,vOo,FOo,W4,Lhe,TOo,MOo,uV,EOo,COo,wOo,Q4,xhe,AOo,yOo,bV,LOo,xOo,$Oo,H4,$he,kOo,SOo,vV,ROo,POo,BOo,U4,khe,IOo,NOo,FV,qOo,jOo,DOo,J4,She,GOo,OOo,TV,VOo,XOo,zOo,Y4,Rhe,WOo,QOo,MV,HOo,UOo,JOo,K4,Phe,YOo,KOo,EV,ZOo,eVo,oVo,Z4,Bhe,rVo,tVo,CV,aVo,nVo,sVo,ev,Ihe,lVo,iVo,wV,dVo,cVo,fVo,ov,Nhe,mVo,gVo,AV,hVo,pVo,_Vo,rv,qhe,uVo,bVo,yV,vVo,FVo,TVo,tv,jhe,MVo,EVo,LV,CVo,wVo,AVo,av,Dhe,yVo,LVo,xV,xVo,$Vo,kVo,nv,Ghe,SVo,RVo,$V,PVo,BVo,IVo,sv,Ohe,NVo,qVo,kV,jVo,DVo,GVo,lv,Vhe,OVo,VVo,SV,XVo,zVo,WVo,iv,Xhe,QVo,HVo,RV,UVo,JVo,YVo,dv,zhe,KVo,ZVo,PV,eXo,oXo,rXo,cv,Whe,tXo,aXo,BV,nXo,sXo,lXo,fv,Qhe,iXo,dXo,IV,cXo,fXo,mXo,mv,gXo,Hhe,hXo,pXo,Uhe,_Xo,uXo,gv,fje,Zi,hv,Jhe,Zy,bXo,Yhe,vXo,mje,No,eL,FXo,ed,TXo,NV,MXo,EXo,qV,CXo,wXo,AXo,oL,yXo,Khe,LXo,xXo,$Xo,gt,rL,kXo,Zhe,SXo,RXo,od,PXo,epe,BXo,IXo,jV,NXo,qXo,jXo,pv,DXo,no,tL,GXo,ope,OXo,VXo,qa,XXo,rpe,zXo,WXo,tpe,QXo,HXo,ape,UXo,JXo,YXo,V,_v,npe,KXo,ZXo,DV,ezo,ozo,rzo,uv,spe,tzo,azo,GV,nzo,szo,lzo,bv,lpe,izo,dzo,OV,czo,fzo,mzo,vv,ipe,gzo,hzo,VV,pzo,_zo,uzo,Fv,dpe,bzo,vzo,XV,Fzo,Tzo,Mzo,Tv,cpe,Ezo,Czo,zV,wzo,Azo,yzo,Mv,fpe,Lzo,xzo,WV,$zo,kzo,Szo,Ev,mpe,Rzo,Pzo,QV,Bzo,Izo,Nzo,Cv,gpe,qzo,jzo,HV,Dzo,Gzo,Ozo,wv,hpe,Vzo,Xzo,UV,zzo,Wzo,Qzo,Av,ppe,Hzo,Uzo,JV,Jzo,Yzo,Kzo,yv,_pe,Zzo,eWo,YV,oWo,rWo,tWo,Lv,upe,aWo,nWo,KV,sWo,lWo,iWo,xv,bpe,dWo,cWo,ZV,fWo,mWo,gWo,$v,vpe,hWo,pWo,eX,_Wo,uWo,bWo,kv,Fpe,vWo,FWo,oX,TWo,MWo,EWo,Sv,Tpe,CWo,wWo,rX,AWo,yWo,LWo,Rv,Mpe,xWo,$Wo,tX,kWo,SWo,RWo,Pv,Epe,PWo,BWo,aX,IWo,NWo,qWo,Bv,Cpe,jWo,DWo,nX,GWo,OWo,VWo,Iv,wpe,XWo,zWo,sX,WWo,QWo,HWo,Nv,Ape,UWo,JWo,lX,YWo,KWo,ZWo,qv,ype,eQo,oQo,iX,rQo,tQo,aQo,jv,Lpe,nQo,sQo,dX,lQo,iQo,dQo,Dv,xpe,cQo,fQo,cX,mQo,gQo,hQo,Gv,$pe,pQo,_Qo,fX,uQo,bQo,vQo,Ov,kpe,FQo,TQo,mX,MQo,EQo,CQo,Vv,Spe,wQo,AQo,gX,yQo,LQo,xQo,Xv,Rpe,$Qo,kQo,hX,SQo,RQo,PQo,zv,Ppe,BQo,IQo,pX,NQo,qQo,jQo,Wv,Bpe,DQo,GQo,_X,OQo,VQo,XQo,Qv,Ipe,zQo,WQo,uX,QQo,HQo,UQo,Hv,Npe,JQo,YQo,bX,KQo,ZQo,eHo,Uv,qpe,oHo,rHo,vX,tHo,aHo,nHo,Jv,jpe,sHo,lHo,FX,iHo,dHo,cHo,Yv,Dpe,fHo,mHo,TX,gHo,hHo,pHo,Kv,Gpe,_Ho,uHo,MX,bHo,vHo,FHo,Zv,Ope,THo,MHo,EX,EHo,CHo,wHo,e5,Vpe,AHo,yHo,CX,LHo,xHo,$Ho,o5,Xpe,kHo,SHo,wX,RHo,PHo,BHo,r5,IHo,zpe,NHo,qHo,Wpe,jHo,DHo,t5,gje,rd,a5,Qpe,aL,GHo,Hpe,OHo,hje,qo,nL,VHo,td,XHo,AX,zHo,WHo,yX,QHo,HHo,UHo,sL,JHo,Upe,YHo,KHo,ZHo,ht,lL,eUo,Jpe,oUo,rUo,ad,tUo,Ype,aUo,nUo,LX,sUo,lUo,iUo,n5,dUo,so,iL,cUo,Kpe,fUo,mUo,ja,gUo,Zpe,hUo,pUo,e_e,_Uo,uUo,o_e,bUo,vUo,FUo,r_e,s5,t_e,TUo,MUo,xX,EUo,CUo,wUo,l5,AUo,a_e,yUo,LUo,n_e,xUo,$Uo,i5,pje,nd,d5,s_e,dL,kUo,l_e,SUo,_je,jo,cL,RUo,sd,PUo,$X,BUo,IUo,kX,NUo,qUo,jUo,fL,DUo,i_e,GUo,OUo,VUo,pt,mL,XUo,d_e,zUo,WUo,ld,QUo,c_e,HUo,UUo,SX,JUo,YUo,KUo,c5,ZUo,lo,gL,eJo,f_e,oJo,rJo,Da,tJo,m_e,aJo,nJo,g_e,sJo,lJo,h_e,iJo,dJo,cJo,ve,f5,p_e,fJo,mJo,RX,gJo,hJo,pJo,m5,__e,_Jo,uJo,PX,bJo,vJo,FJo,g5,u_e,TJo,MJo,BX,EJo,CJo,wJo,h5,b_e,AJo,yJo,IX,LJo,xJo,$Jo,Bs,v_e,kJo,SJo,NX,RJo,PJo,qX,BJo,IJo,NJo,p5,F_e,qJo,jJo,jX,DJo,GJo,OJo,_5,T_e,VJo,XJo,DX,zJo,WJo,QJo,_t,M_e,HJo,UJo,GX,JJo,YJo,OX,KJo,ZJo,VX,eYo,oYo,rYo,u5,E_e,tYo,aYo,XX,nYo,sYo,lYo,b5,C_e,iYo,dYo,zX,cYo,fYo,mYo,v5,w_e,gYo,hYo,WX,pYo,_Yo,uYo,F5,A_e,bYo,vYo,QX,FYo,TYo,MYo,T5,y_e,EYo,CYo,HX,wYo,AYo,yYo,M5,L_e,LYo,xYo,UX,$Yo,kYo,SYo,E5,x_e,RYo,PYo,JX,BYo,IYo,NYo,C5,qYo,$_e,jYo,DYo,k_e,GYo,OYo,w5,uje,id,A5,S_e,hL,VYo,R_e,XYo,bje,Do,pL,zYo,dd,WYo,YX,QYo,HYo,KX,UYo,JYo,YYo,_L,KYo,P_e,ZYo,eKo,oKo,ut,uL,rKo,B_e,tKo,aKo,cd,nKo,I_e,sKo,lKo,ZX,iKo,dKo,cKo,y5,fKo,io,bL,mKo,N_e,gKo,hKo,Ga,pKo,q_e,_Ko,uKo,j_e,bKo,vKo,D_e,FKo,TKo,MKo,G_e,L5,O_e,EKo,CKo,ez,wKo,AKo,yKo,x5,LKo,V_e,xKo,$Ko,X_e,kKo,SKo,$5,vje,fd,k5,z_e,vL,RKo,W_e,PKo,Fje,Go,FL,BKo,md,IKo,oz,NKo,qKo,rz,jKo,DKo,GKo,TL,OKo,Q_e,VKo,XKo,zKo,bt,ML,WKo,H_e,QKo,HKo,gd,UKo,U_e,JKo,YKo,tz,KKo,ZKo,eZo,S5,oZo,co,EL,rZo,J_e,tZo,aZo,Oa,nZo,Y_e,sZo,lZo,K_e,iZo,dZo,Z_e,cZo,fZo,mZo,Se,R5,eue,gZo,hZo,az,pZo,_Zo,uZo,P5,oue,bZo,vZo,nz,FZo,TZo,MZo,B5,rue,EZo,CZo,sz,wZo,AZo,yZo,I5,tue,LZo,xZo,lz,$Zo,kZo,SZo,N5,aue,RZo,PZo,iz,BZo,IZo,NZo,q5,nue,qZo,jZo,dz,DZo,GZo,OZo,j5,sue,VZo,XZo,cz,zZo,WZo,QZo,D5,lue,HZo,UZo,fz,JZo,YZo,KZo,G5,iue,ZZo,eer,mz,oer,rer,ter,O5,aer,due,ner,ser,cue,ler,ier,V5,Tje,hd,X5,fue,CL,der,mue,cer,Mje,Oo,wL,fer,pd,mer,gz,ger,her,hz,per,_er,uer,AL,ber,gue,ver,Fer,Ter,vt,yL,Mer,hue,Eer,Cer,_d,wer,pue,Aer,yer,pz,Ler,xer,$er,z5,ker,fo,LL,Ser,_ue,Rer,Per,Va,Ber,uue,Ier,Ner,bue,qer,jer,vue,Der,Ger,Oer,Kr,W5,Fue,Ver,Xer,_z,zer,Wer,Qer,Q5,Tue,Her,Uer,uz,Jer,Yer,Ker,H5,Mue,Zer,eor,bz,oor,ror,tor,U5,Eue,aor,nor,vz,sor,lor,ior,J5,Cue,dor,cor,Fz,mor,gor,hor,Y5,por,wue,_or,uor,Aue,bor,vor,K5,Eje,ud,Z5,yue,xL,For,Lue,Tor,Cje,Vo,$L,Mor,bd,Eor,Tz,Cor,wor,Mz,Aor,yor,Lor,kL,xor,xue,$or,kor,Sor,Ft,SL,Ror,$ue,Por,Bor,vd,Ior,kue,Nor,qor,Ez,jor,Dor,Gor,e3,Oor,mo,RL,Vor,Sue,Xor,zor,Xa,Wor,Rue,Qor,Hor,Pue,Uor,Jor,Bue,Yor,Kor,Zor,Re,o3,Iue,err,orr,Cz,rrr,trr,arr,r3,Nue,nrr,srr,wz,lrr,irr,drr,t3,que,crr,frr,Az,mrr,grr,hrr,a3,jue,prr,_rr,yz,urr,brr,vrr,n3,Due,Frr,Trr,Lz,Mrr,Err,Crr,s3,Gue,wrr,Arr,xz,yrr,Lrr,xrr,l3,Oue,$rr,krr,$z,Srr,Rrr,Prr,i3,Vue,Brr,Irr,kz,Nrr,qrr,jrr,d3,Xue,Drr,Grr,Sz,Orr,Vrr,Xrr,c3,zrr,zue,Wrr,Qrr,Wue,Hrr,Urr,f3,wje,Fd,m3,Que,PL,Jrr,Hue,Yrr,Aje,Xo,BL,Krr,Td,Zrr,Rz,etr,otr,Pz,rtr,ttr,atr,IL,ntr,Uue,str,ltr,itr,Tt,NL,dtr,Jue,ctr,ftr,Md,mtr,Yue,gtr,htr,Bz,ptr,_tr,utr,g3,btr,go,qL,vtr,Kue,Ftr,Ttr,za,Mtr,Zue,Etr,Ctr,e1e,wtr,Atr,o1e,ytr,Ltr,xtr,jL,h3,r1e,$tr,ktr,Iz,Str,Rtr,Ptr,p3,t1e,Btr,Itr,Nz,Ntr,qtr,jtr,_3,Dtr,a1e,Gtr,Otr,n1e,Vtr,Xtr,u3,yje,Ed,b3,s1e,DL,ztr,l1e,Wtr,Lje,zo,GL,Qtr,Cd,Htr,qz,Utr,Jtr,jz,Ytr,Ktr,Ztr,OL,ear,i1e,oar,rar,tar,Mt,VL,aar,d1e,nar,sar,wd,lar,c1e,iar,dar,Dz,car,far,mar,v3,gar,ho,XL,har,f1e,par,_ar,Wa,uar,m1e,bar,Far,g1e,Tar,Mar,h1e,Ear,Car,war,Zr,F3,p1e,Aar,yar,Gz,Lar,xar,$ar,T3,_1e,kar,Sar,Oz,Rar,Par,Bar,M3,u1e,Iar,Nar,Vz,qar,jar,Dar,E3,b1e,Gar,Oar,Xz,Var,Xar,zar,C3,v1e,War,Qar,zz,Har,Uar,Jar,w3,Yar,F1e,Kar,Zar,T1e,enr,onr,A3,xje,Ad,y3,M1e,zL,rnr,E1e,tnr,$je,Wo,WL,anr,yd,nnr,Wz,snr,lnr,Qz,inr,dnr,cnr,QL,fnr,C1e,mnr,gnr,hnr,Et,HL,pnr,w1e,_nr,unr,Ld,bnr,A1e,vnr,Fnr,Hz,Tnr,Mnr,Enr,L3,Cnr,po,UL,wnr,y1e,Anr,ynr,Qa,Lnr,L1e,xnr,$nr,x1e,knr,Snr,$1e,Rnr,Pnr,Bnr,xd,x3,k1e,Inr,Nnr,Uz,qnr,jnr,Dnr,$3,S1e,Gnr,Onr,Jz,Vnr,Xnr,znr,k3,R1e,Wnr,Qnr,Yz,Hnr,Unr,Jnr,S3,Ynr,P1e,Knr,Znr,B1e,esr,osr,R3,kje,$d,P3,I1e,JL,rsr,N1e,tsr,Sje,Qo,YL,asr,kd,nsr,Kz,ssr,lsr,Zz,isr,dsr,csr,KL,fsr,q1e,msr,gsr,hsr,Ct,ZL,psr,j1e,_sr,usr,Sd,bsr,D1e,vsr,Fsr,eW,Tsr,Msr,Esr,B3,Csr,_o,e8,wsr,G1e,Asr,ysr,Ha,Lsr,O1e,xsr,$sr,V1e,ksr,Ssr,X1e,Rsr,Psr,Bsr,o8,I3,z1e,Isr,Nsr,oW,qsr,jsr,Dsr,N3,W1e,Gsr,Osr,rW,Vsr,Xsr,zsr,q3,Wsr,Q1e,Qsr,Hsr,H1e,Usr,Jsr,j3,Rje,Rd,D3,U1e,r8,Ysr,J1e,Ksr,Pje,Ho,t8,Zsr,Pd,elr,tW,olr,rlr,aW,tlr,alr,nlr,a8,slr,Y1e,llr,ilr,dlr,wt,n8,clr,K1e,flr,mlr,Bd,glr,Z1e,hlr,plr,nW,_lr,ulr,blr,G3,vlr,uo,s8,Flr,ebe,Tlr,Mlr,Ua,Elr,obe,Clr,wlr,rbe,Alr,ylr,tbe,Llr,xlr,$lr,abe,O3,nbe,klr,Slr,sW,Rlr,Plr,Blr,V3,Ilr,sbe,Nlr,qlr,lbe,jlr,Dlr,X3,Bje,Id,z3,ibe,l8,Glr,dbe,Olr,Ije,Uo,i8,Vlr,Nd,Xlr,lW,zlr,Wlr,iW,Qlr,Hlr,Ulr,d8,Jlr,cbe,Ylr,Klr,Zlr,At,c8,eir,fbe,oir,rir,qd,tir,mbe,air,nir,dW,sir,lir,iir,W3,dir,bo,f8,cir,gbe,fir,mir,Ja,gir,hbe,hir,pir,pbe,_ir,uir,_be,bir,vir,Fir,et,Q3,ube,Tir,Mir,cW,Eir,Cir,wir,H3,bbe,Air,yir,fW,Lir,xir,$ir,U3,vbe,kir,Sir,mW,Rir,Pir,Bir,J3,Fbe,Iir,Nir,gW,qir,jir,Dir,Y3,Tbe,Gir,Oir,hW,Vir,Xir,zir,K3,Wir,Mbe,Qir,Hir,Ebe,Uir,Jir,Z3,Nje,jd,eF,Cbe,m8,Yir,wbe,Kir,qje,Jo,g8,Zir,Dd,edr,pW,odr,rdr,_W,tdr,adr,ndr,h8,sdr,Abe,ldr,idr,ddr,yt,p8,cdr,ybe,fdr,mdr,Gd,gdr,Lbe,hdr,pdr,uW,_dr,udr,bdr,oF,vdr,vo,_8,Fdr,xbe,Tdr,Mdr,Ya,Edr,$be,Cdr,wdr,kbe,Adr,ydr,Sbe,Ldr,xdr,$dr,Rbe,rF,Pbe,kdr,Sdr,bW,Rdr,Pdr,Bdr,tF,Idr,Bbe,Ndr,qdr,Ibe,jdr,Ddr,aF,jje,Od,nF,Nbe,u8,Gdr,qbe,Odr,Dje,Yo,b8,Vdr,Vd,Xdr,vW,zdr,Wdr,FW,Qdr,Hdr,Udr,v8,Jdr,jbe,Ydr,Kdr,Zdr,Lt,F8,ecr,Dbe,ocr,rcr,Xd,tcr,Gbe,acr,ncr,TW,scr,lcr,icr,sF,dcr,wr,T8,ccr,Obe,fcr,mcr,Ka,gcr,Vbe,hcr,pcr,Xbe,_cr,ucr,zbe,bcr,vcr,Fcr,q,lF,Wbe,Tcr,Mcr,MW,Ecr,Ccr,wcr,iF,Qbe,Acr,ycr,EW,Lcr,xcr,$cr,dF,Hbe,kcr,Scr,CW,Rcr,Pcr,Bcr,cF,Ube,Icr,Ncr,wW,qcr,jcr,Dcr,fF,Jbe,Gcr,Ocr,AW,Vcr,Xcr,zcr,mF,Ybe,Wcr,Qcr,yW,Hcr,Ucr,Jcr,gF,Kbe,Ycr,Kcr,LW,Zcr,efr,ofr,hF,Zbe,rfr,tfr,xW,afr,nfr,sfr,pF,e2e,lfr,ifr,$W,dfr,cfr,ffr,_F,o2e,mfr,gfr,kW,hfr,pfr,_fr,uF,r2e,ufr,bfr,SW,vfr,Ffr,Tfr,bF,t2e,Mfr,Efr,RW,Cfr,wfr,Afr,vF,a2e,yfr,Lfr,PW,xfr,$fr,kfr,FF,n2e,Sfr,Rfr,BW,Pfr,Bfr,Ifr,TF,s2e,Nfr,qfr,IW,jfr,Dfr,Gfr,MF,l2e,Ofr,Vfr,NW,Xfr,zfr,Wfr,EF,i2e,Qfr,Hfr,qW,Ufr,Jfr,Yfr,Is,d2e,Kfr,Zfr,jW,emr,omr,DW,rmr,tmr,amr,CF,c2e,nmr,smr,GW,lmr,imr,dmr,wF,f2e,cmr,fmr,OW,mmr,gmr,hmr,AF,m2e,pmr,_mr,VW,umr,bmr,vmr,yF,g2e,Fmr,Tmr,XW,Mmr,Emr,Cmr,LF,h2e,wmr,Amr,zW,ymr,Lmr,xmr,xF,p2e,$mr,kmr,WW,Smr,Rmr,Pmr,$F,_2e,Bmr,Imr,QW,Nmr,qmr,jmr,kF,u2e,Dmr,Gmr,HW,Omr,Vmr,Xmr,SF,b2e,zmr,Wmr,UW,Qmr,Hmr,Umr,RF,v2e,Jmr,Ymr,JW,Kmr,Zmr,egr,PF,F2e,ogr,rgr,YW,tgr,agr,ngr,BF,T2e,sgr,lgr,KW,igr,dgr,cgr,IF,M2e,fgr,mgr,ZW,ggr,hgr,pgr,NF,E2e,_gr,ugr,eQ,bgr,vgr,Fgr,qF,C2e,Tgr,Mgr,oQ,Egr,Cgr,wgr,jF,w2e,Agr,ygr,rQ,Lgr,xgr,$gr,DF,A2e,kgr,Sgr,tQ,Rgr,Pgr,Bgr,GF,y2e,Igr,Ngr,aQ,qgr,jgr,Dgr,OF,L2e,Ggr,Ogr,nQ,Vgr,Xgr,zgr,VF,x2e,Wgr,Qgr,sQ,Hgr,Ugr,Jgr,XF,$2e,Ygr,Kgr,lQ,Zgr,ehr,ohr,zF,k2e,rhr,thr,iQ,ahr,nhr,shr,WF,S2e,lhr,ihr,dQ,dhr,chr,fhr,QF,R2e,mhr,ghr,cQ,hhr,phr,_hr,HF,P2e,uhr,bhr,fQ,vhr,Fhr,Thr,UF,B2e,Mhr,Ehr,mQ,Chr,whr,Ahr,JF,I2e,yhr,Lhr,gQ,xhr,$hr,khr,YF,N2e,Shr,Rhr,hQ,Phr,Bhr,Ihr,KF,q2e,Nhr,qhr,pQ,jhr,Dhr,Ghr,ZF,Gje,zd,eT,j2e,M8,Ohr,D2e,Vhr,Oje,Ko,E8,Xhr,Wd,zhr,_Q,Whr,Qhr,uQ,Hhr,Uhr,Jhr,C8,Yhr,G2e,Khr,Zhr,epr,xt,w8,opr,O2e,rpr,tpr,Qd,apr,V2e,npr,spr,bQ,lpr,ipr,dpr,oT,cpr,Ar,A8,fpr,X2e,mpr,gpr,Za,hpr,z2e,ppr,_pr,W2e,upr,bpr,Q2e,vpr,Fpr,Tpr,se,rT,H2e,Mpr,Epr,vQ,Cpr,wpr,Apr,tT,U2e,ypr,Lpr,FQ,xpr,$pr,kpr,aT,J2e,Spr,Rpr,TQ,Ppr,Bpr,Ipr,nT,Y2e,Npr,qpr,MQ,jpr,Dpr,Gpr,sT,K2e,Opr,Vpr,EQ,Xpr,zpr,Wpr,lT,Z2e,Qpr,Hpr,CQ,Upr,Jpr,Ypr,iT,e4e,Kpr,Zpr,wQ,e_r,o_r,r_r,dT,o4e,t_r,a_r,AQ,n_r,s_r,l_r,cT,r4e,i_r,d_r,yQ,c_r,f_r,m_r,fT,t4e,g_r,h_r,LQ,p_r,__r,u_r,mT,a4e,b_r,v_r,xQ,F_r,T_r,M_r,gT,n4e,E_r,C_r,$Q,w_r,A_r,y_r,hT,s4e,L_r,x_r,kQ,$_r,k_r,S_r,pT,l4e,R_r,P_r,SQ,B_r,I_r,N_r,_T,i4e,q_r,j_r,RQ,D_r,G_r,O_r,uT,d4e,V_r,X_r,PQ,z_r,W_r,Q_r,bT,c4e,H_r,U_r,BQ,J_r,Y_r,K_r,vT,f4e,Z_r,eur,IQ,our,rur,tur,FT,m4e,aur,nur,NQ,sur,lur,iur,TT,g4e,dur,cur,qQ,fur,mur,gur,MT,h4e,hur,pur,jQ,_ur,uur,bur,ET,p4e,vur,Fur,DQ,Tur,Mur,Eur,CT,_4e,Cur,wur,GQ,Aur,yur,Lur,wT,Vje,Hd,AT,u4e,y8,xur,b4e,$ur,Xje,Zo,L8,kur,Ud,Sur,OQ,Rur,Pur,VQ,Bur,Iur,Nur,x8,qur,v4e,jur,Dur,Gur,$t,$8,Our,F4e,Vur,Xur,Jd,zur,T4e,Wur,Qur,XQ,Hur,Uur,Jur,yT,Yur,yr,k8,Kur,M4e,Zur,e1r,en,o1r,E4e,r1r,t1r,C4e,a1r,n1r,w4e,s1r,l1r,i1r,Me,LT,A4e,d1r,c1r,zQ,f1r,m1r,g1r,xT,y4e,h1r,p1r,WQ,_1r,u1r,b1r,$T,L4e,v1r,F1r,QQ,T1r,M1r,E1r,kT,x4e,C1r,w1r,HQ,A1r,y1r,L1r,ST,$4e,x1r,$1r,UQ,k1r,S1r,R1r,RT,k4e,P1r,B1r,JQ,I1r,N1r,q1r,PT,S4e,j1r,D1r,YQ,G1r,O1r,V1r,BT,R4e,X1r,z1r,KQ,W1r,Q1r,H1r,IT,P4e,U1r,J1r,ZQ,Y1r,K1r,Z1r,NT,B4e,ebr,obr,eH,rbr,tbr,abr,qT,I4e,nbr,sbr,oH,lbr,ibr,dbr,jT,N4e,cbr,fbr,rH,mbr,gbr,hbr,DT,q4e,pbr,_br,tH,ubr,bbr,vbr,GT,zje,Yd,OT,j4e,S8,Fbr,D4e,Tbr,Wje,er,R8,Mbr,Kd,Ebr,aH,Cbr,wbr,nH,Abr,ybr,Lbr,P8,xbr,G4e,$br,kbr,Sbr,kt,B8,Rbr,O4e,Pbr,Bbr,Zd,Ibr,V4e,Nbr,qbr,sH,jbr,Dbr,Gbr,VT,Obr,Lr,I8,Vbr,X4e,Xbr,zbr,on,Wbr,z4e,Qbr,Hbr,W4e,Ubr,Jbr,Q4e,Ybr,Kbr,Zbr,rn,XT,H4e,e2r,o2r,lH,r2r,t2r,a2r,zT,U4e,n2r,s2r,iH,l2r,i2r,d2r,WT,J4e,c2r,f2r,dH,m2r,g2r,h2r,QT,Y4e,p2r,_2r,cH,u2r,b2r,v2r,HT,Qje,ec,UT,K4e,N8,F2r,Z4e,T2r,Hje,or,q8,M2r,oc,E2r,fH,C2r,w2r,mH,A2r,y2r,L2r,j8,x2r,eve,$2r,k2r,S2r,St,D8,R2r,ove,P2r,B2r,rc,I2r,rve,N2r,q2r,gH,j2r,D2r,G2r,JT,O2r,xr,G8,V2r,tve,X2r,z2r,tn,W2r,ave,Q2r,H2r,nve,U2r,J2r,sve,Y2r,K2r,Z2r,ie,YT,lve,e4r,o4r,hH,r4r,t4r,a4r,KT,ive,n4r,s4r,pH,l4r,i4r,d4r,ZT,dve,c4r,f4r,_H,m4r,g4r,h4r,e7,cve,p4r,_4r,uH,u4r,b4r,v4r,o7,fve,F4r,T4r,bH,M4r,E4r,C4r,r7,mve,w4r,A4r,vH,y4r,L4r,x4r,t7,gve,$4r,k4r,FH,S4r,R4r,P4r,a7,hve,B4r,I4r,TH,N4r,q4r,j4r,n7,pve,D4r,G4r,MH,O4r,V4r,X4r,s7,_ve,z4r,W4r,EH,Q4r,H4r,U4r,l7,uve,J4r,Y4r,CH,K4r,Z4r,evr,i7,bve,ovr,rvr,wH,tvr,avr,nvr,d7,vve,svr,lvr,AH,ivr,dvr,cvr,c7,Fve,fvr,mvr,yH,gvr,hvr,pvr,f7,Tve,_vr,uvr,LH,bvr,vvr,Fvr,m7,Mve,Tvr,Mvr,xH,Evr,Cvr,wvr,g7,Eve,Avr,yvr,$H,Lvr,xvr,$vr,h7,Cve,kvr,Svr,kH,Rvr,Pvr,Bvr,p7,wve,Ivr,Nvr,SH,qvr,jvr,Dvr,_7,Ave,Gvr,Ovr,RH,Vvr,Xvr,zvr,u7,Uje,tc,b7,yve,O8,Wvr,Lve,Qvr,Jje,rr,V8,Hvr,ac,Uvr,PH,Jvr,Yvr,BH,Kvr,Zvr,e5r,X8,o5r,xve,r5r,t5r,a5r,Rt,z8,n5r,$ve,s5r,l5r,nc,i5r,kve,d5r,c5r,IH,f5r,m5r,g5r,v7,h5r,$r,W8,p5r,Sve,_5r,u5r,an,b5r,Rve,v5r,F5r,Pve,T5r,M5r,Bve,E5r,C5r,w5r,ye,F7,Ive,A5r,y5r,NH,L5r,x5r,$5r,T7,Nve,k5r,S5r,qH,R5r,P5r,B5r,M7,qve,I5r,N5r,jH,q5r,j5r,D5r,E7,jve,G5r,O5r,DH,V5r,X5r,z5r,C7,Dve,W5r,Q5r,GH,H5r,U5r,J5r,w7,Gve,Y5r,K5r,OH,Z5r,e3r,o3r,A7,Ove,r3r,t3r,VH,a3r,n3r,s3r,y7,Vve,l3r,i3r,XH,d3r,c3r,f3r,L7,Xve,m3r,g3r,zH,h3r,p3r,_3r,x7,zve,u3r,b3r,WH,v3r,F3r,T3r,$7,Yje,sc,k7,Wve,Q8,M3r,Qve,E3r,Kje,tr,H8,C3r,lc,w3r,QH,A3r,y3r,HH,L3r,x3r,$3r,U8,k3r,Hve,S3r,R3r,P3r,Pt,J8,B3r,Uve,I3r,N3r,ic,q3r,Jve,j3r,D3r,UH,G3r,O3r,V3r,S7,X3r,kr,Y8,z3r,Yve,W3r,Q3r,nn,H3r,Kve,U3r,J3r,Zve,Y3r,K3r,e5e,Z3r,eFr,oFr,oe,R7,o5e,rFr,tFr,JH,aFr,nFr,sFr,P7,r5e,lFr,iFr,YH,dFr,cFr,fFr,B7,t5e,mFr,gFr,KH,hFr,pFr,_Fr,I7,a5e,uFr,bFr,ZH,vFr,FFr,TFr,N7,n5e,MFr,EFr,eU,CFr,wFr,AFr,q7,s5e,yFr,LFr,oU,xFr,$Fr,kFr,j7,l5e,SFr,RFr,rU,PFr,BFr,IFr,D7,i5e,NFr,qFr,tU,jFr,DFr,GFr,G7,d5e,OFr,VFr,aU,XFr,zFr,WFr,O7,c5e,QFr,HFr,nU,UFr,JFr,YFr,V7,f5e,KFr,ZFr,sU,eTr,oTr,rTr,X7,m5e,tTr,aTr,lU,nTr,sTr,lTr,z7,g5e,iTr,dTr,iU,cTr,fTr,mTr,W7,h5e,gTr,hTr,dU,pTr,_Tr,uTr,Q7,p5e,bTr,vTr,cU,FTr,TTr,MTr,H7,_5e,ETr,CTr,fU,wTr,ATr,yTr,U7,u5e,LTr,xTr,mU,$Tr,kTr,STr,J7,b5e,RTr,PTr,gU,BTr,ITr,NTr,Y7,v5e,qTr,jTr,hU,DTr,GTr,OTr,K7,F5e,VTr,XTr,pU,zTr,WTr,QTr,Z7,T5e,HTr,UTr,_U,JTr,YTr,KTr,eM,M5e,ZTr,e7r,uU,o7r,r7r,t7r,oM,E5e,a7r,n7r,bU,s7r,l7r,i7r,rM,C5e,d7r,c7r,vU,f7r,m7r,g7r,tM,w5e,h7r,p7r,FU,_7r,u7r,b7r,aM,A5e,v7r,F7r,TU,T7r,M7r,E7r,nM,Zje,dc,sM,y5e,K8,C7r,L5e,w7r,eDe,ar,Z8,A7r,cc,y7r,MU,L7r,x7r,EU,$7r,k7r,S7r,e9,R7r,x5e,P7r,B7r,I7r,Bt,o9,N7r,$5e,q7r,j7r,fc,D7r,k5e,G7r,O7r,CU,V7r,X7r,z7r,lM,W7r,Sr,r9,Q7r,S5e,H7r,U7r,sn,J7r,R5e,Y7r,K7r,P5e,Z7r,eMr,B5e,oMr,rMr,tMr,pe,iM,I5e,aMr,nMr,wU,sMr,lMr,iMr,dM,N5e,dMr,cMr,AU,fMr,mMr,gMr,cM,q5e,hMr,pMr,yU,_Mr,uMr,bMr,fM,j5e,vMr,FMr,LU,TMr,MMr,EMr,mM,D5e,CMr,wMr,xU,AMr,yMr,LMr,gM,G5e,xMr,$Mr,$U,kMr,SMr,RMr,hM,O5e,PMr,BMr,kU,IMr,NMr,qMr,pM,V5e,jMr,DMr,SU,GMr,OMr,VMr,_M,X5e,XMr,zMr,RU,WMr,QMr,HMr,uM,z5e,UMr,JMr,PU,YMr,KMr,ZMr,bM,W5e,eEr,oEr,BU,rEr,tEr,aEr,vM,Q5e,nEr,sEr,IU,lEr,iEr,dEr,FM,H5e,cEr,fEr,NU,mEr,gEr,hEr,TM,U5e,pEr,_Er,qU,uEr,bEr,vEr,MM,J5e,FEr,TEr,jU,MEr,EEr,CEr,EM,Y5e,wEr,AEr,DU,yEr,LEr,xEr,CM,K5e,$Er,kEr,GU,SEr,REr,PEr,wM,oDe,mc,AM,Z5e,t9,BEr,e3e,IEr,rDe,nr,a9,NEr,gc,qEr,OU,jEr,DEr,VU,GEr,OEr,VEr,n9,XEr,o3e,zEr,WEr,QEr,It,s9,HEr,r3e,UEr,JEr,hc,YEr,t3e,KEr,ZEr,XU,eCr,oCr,rCr,yM,tCr,Rr,l9,aCr,a3e,nCr,sCr,ln,lCr,n3e,iCr,dCr,s3e,cCr,fCr,l3e,mCr,gCr,hCr,i9,LM,i3e,pCr,_Cr,zU,uCr,bCr,vCr,xM,d3e,FCr,TCr,WU,MCr,ECr,CCr,$M,tDe,pc,kM,c3e,d9,wCr,f3e,ACr,aDe,sr,c9,yCr,_c,LCr,QU,xCr,$Cr,HU,kCr,SCr,RCr,f9,PCr,m3e,BCr,ICr,NCr,Nt,m9,qCr,g3e,jCr,DCr,uc,GCr,h3e,OCr,VCr,UU,XCr,zCr,WCr,SM,QCr,Pr,g9,HCr,p3e,UCr,JCr,dn,YCr,_3e,KCr,ZCr,u3e,e0r,o0r,b3e,r0r,t0r,a0r,v3e,RM,F3e,n0r,s0r,JU,l0r,i0r,d0r,PM,nDe,bc,BM,T3e,h9,c0r,M3e,f0r,sDe,lr,p9,m0r,vc,g0r,YU,h0r,p0r,KU,_0r,u0r,b0r,_9,v0r,E3e,F0r,T0r,M0r,qt,u9,E0r,C3e,C0r,w0r,Fc,A0r,w3e,y0r,L0r,ZU,x0r,$0r,k0r,IM,S0r,Br,b9,R0r,A3e,P0r,B0r,cn,I0r,y3e,N0r,q0r,L3e,j0r,D0r,x3e,G0r,O0r,V0r,de,NM,$3e,X0r,z0r,eJ,W0r,Q0r,H0r,qM,k3e,U0r,J0r,oJ,Y0r,K0r,Z0r,jM,S3e,ewr,owr,rJ,rwr,twr,awr,DM,R3e,nwr,swr,tJ,lwr,iwr,dwr,GM,P3e,cwr,fwr,aJ,mwr,gwr,hwr,OM,B3e,pwr,_wr,nJ,uwr,bwr,vwr,VM,I3e,Fwr,Twr,sJ,Mwr,Ewr,Cwr,XM,N3e,wwr,Awr,lJ,ywr,Lwr,xwr,zM,q3e,$wr,kwr,iJ,Swr,Rwr,Pwr,WM,j3e,Bwr,Iwr,dJ,Nwr,qwr,jwr,QM,D3e,Dwr,Gwr,cJ,Owr,Vwr,Xwr,HM,G3e,zwr,Wwr,fJ,Qwr,Hwr,Uwr,UM,O3e,Jwr,Ywr,mJ,Kwr,Zwr,e6r,JM,V3e,o6r,r6r,gJ,t6r,a6r,n6r,YM,X3e,s6r,l6r,hJ,i6r,d6r,c6r,KM,z3e,f6r,m6r,pJ,g6r,h6r,p6r,ZM,W3e,_6r,u6r,_J,b6r,v6r,F6r,eE,Q3e,T6r,M6r,uJ,E6r,C6r,w6r,oE,H3e,A6r,y6r,bJ,L6r,x6r,$6r,rE,U3e,k6r,S6r,vJ,R6r,P6r,B6r,tE,lDe,Tc,aE,J3e,v9,I6r,Y3e,N6r,iDe,ir,F9,q6r,Mc,j6r,FJ,D6r,G6r,TJ,O6r,V6r,X6r,T9,z6r,K3e,W6r,Q6r,H6r,jt,M9,U6r,Z3e,J6r,Y6r,Ec,K6r,eFe,Z6r,eAr,MJ,oAr,rAr,tAr,nE,aAr,Ir,E9,nAr,oFe,sAr,lAr,fn,iAr,rFe,dAr,cAr,tFe,fAr,mAr,aFe,gAr,hAr,pAr,ce,sE,nFe,_Ar,uAr,EJ,bAr,vAr,FAr,lE,sFe,TAr,MAr,CJ,EAr,CAr,wAr,iE,lFe,AAr,yAr,wJ,LAr,xAr,$Ar,dE,iFe,kAr,SAr,AJ,RAr,PAr,BAr,cE,dFe,IAr,NAr,yJ,qAr,jAr,DAr,fE,cFe,GAr,OAr,LJ,VAr,XAr,zAr,mE,fFe,WAr,QAr,xJ,HAr,UAr,JAr,gE,mFe,YAr,KAr,$J,ZAr,eyr,oyr,hE,gFe,ryr,tyr,kJ,ayr,nyr,syr,pE,hFe,lyr,iyr,SJ,dyr,cyr,fyr,_E,pFe,myr,gyr,RJ,hyr,pyr,_yr,uE,_Fe,uyr,byr,PJ,vyr,Fyr,Tyr,bE,uFe,Myr,Eyr,BJ,Cyr,wyr,Ayr,vE,bFe,yyr,Lyr,IJ,xyr,$yr,kyr,FE,vFe,Syr,Ryr,NJ,Pyr,Byr,Iyr,TE,FFe,Nyr,qyr,qJ,jyr,Dyr,Gyr,ME,TFe,Oyr,Vyr,jJ,Xyr,zyr,Wyr,EE,MFe,Qyr,Hyr,DJ,Uyr,Jyr,Yyr,CE,EFe,Kyr,Zyr,GJ,eLr,oLr,rLr,wE,CFe,tLr,aLr,OJ,nLr,sLr,lLr,AE,dDe,Cc,yE,wFe,C9,iLr,AFe,dLr,cDe,dr,w9,cLr,wc,fLr,VJ,mLr,gLr,XJ,hLr,pLr,_Lr,A9,uLr,yFe,bLr,vLr,FLr,Dt,y9,TLr,LFe,MLr,ELr,Ac,CLr,xFe,wLr,ALr,zJ,yLr,LLr,xLr,LE,$Lr,Nr,L9,kLr,$Fe,SLr,RLr,mn,PLr,kFe,BLr,ILr,SFe,NLr,qLr,RFe,jLr,DLr,GLr,PFe,xE,BFe,OLr,VLr,WJ,XLr,zLr,WLr,$E,fDe,yc,kE,IFe,x9,QLr,NFe,HLr,mDe,cr,$9,ULr,Lc,JLr,QJ,YLr,KLr,HJ,ZLr,e8r,o8r,k9,r8r,qFe,t8r,a8r,n8r,Gt,S9,s8r,jFe,l8r,i8r,xc,d8r,DFe,c8r,f8r,UJ,m8r,g8r,h8r,SE,p8r,qr,R9,_8r,GFe,u8r,b8r,gn,v8r,OFe,F8r,T8r,VFe,M8r,E8r,XFe,C8r,w8r,A8r,zFe,RE,WFe,y8r,L8r,JJ,x8r,$8r,k8r,PE,gDe,$c,BE,QFe,P9,S8r,HFe,R8r,hDe,fr,B9,P8r,kc,B8r,YJ,I8r,N8r,KJ,q8r,j8r,D8r,I9,G8r,UFe,O8r,V8r,X8r,Ot,N9,z8r,JFe,W8r,Q8r,Sc,H8r,YFe,U8r,J8r,ZJ,Y8r,K8r,Z8r,IE,e9r,jr,q9,o9r,KFe,r9r,t9r,hn,a9r,ZFe,n9r,s9r,eTe,l9r,i9r,oTe,d9r,c9r,f9r,re,NE,rTe,m9r,g9r,eY,h9r,p9r,_9r,qE,tTe,u9r,b9r,oY,v9r,F9r,T9r,jE,aTe,M9r,E9r,rY,C9r,w9r,A9r,DE,nTe,y9r,L9r,tY,x9r,$9r,k9r,GE,sTe,S9r,R9r,aY,P9r,B9r,I9r,OE,lTe,N9r,q9r,nY,j9r,D9r,G9r,VE,iTe,O9r,V9r,sY,X9r,z9r,W9r,XE,dTe,Q9r,H9r,lY,U9r,J9r,Y9r,zE,cTe,K9r,Z9r,iY,exr,oxr,rxr,WE,fTe,txr,axr,dY,nxr,sxr,lxr,QE,mTe,ixr,dxr,cY,cxr,fxr,mxr,HE,gTe,gxr,hxr,fY,pxr,_xr,uxr,UE,hTe,bxr,vxr,mY,Fxr,Txr,Mxr,JE,pTe,Exr,Cxr,gY,wxr,Axr,yxr,YE,_Te,Lxr,xxr,hY,$xr,kxr,Sxr,KE,uTe,Rxr,Pxr,pY,Bxr,Ixr,Nxr,ZE,bTe,qxr,jxr,_Y,Dxr,Gxr,Oxr,eC,vTe,Vxr,Xxr,uY,zxr,Wxr,Qxr,oC,FTe,Hxr,Uxr,bY,Jxr,Yxr,Kxr,rC,TTe,Zxr,e$r,vY,o$r,r$r,t$r,tC,MTe,a$r,n$r,FY,s$r,l$r,i$r,aC,ETe,d$r,c$r,TY,f$r,m$r,g$r,nC,CTe,h$r,p$r,MY,_$r,u$r,b$r,sC,wTe,v$r,F$r,EY,T$r,M$r,E$r,lC,ATe,C$r,w$r,CY,A$r,y$r,L$r,iC,yTe,x$r,$$r,wY,k$r,S$r,R$r,dC,pDe,Rc,cC,LTe,j9,P$r,xTe,B$r,_De,mr,D9,I$r,Pc,N$r,AY,q$r,j$r,yY,D$r,G$r,O$r,G9,V$r,$Te,X$r,z$r,W$r,Vt,O9,Q$r,kTe,H$r,U$r,Bc,J$r,STe,Y$r,K$r,LY,Z$r,ekr,okr,fC,rkr,Dr,V9,tkr,RTe,akr,nkr,pn,skr,PTe,lkr,ikr,BTe,dkr,ckr,ITe,fkr,mkr,gkr,Le,mC,NTe,hkr,pkr,xY,_kr,ukr,bkr,gC,qTe,vkr,Fkr,$Y,Tkr,Mkr,Ekr,hC,jTe,Ckr,wkr,kY,Akr,ykr,Lkr,pC,DTe,xkr,$kr,SY,kkr,Skr,Rkr,_C,GTe,Pkr,Bkr,RY,Ikr,Nkr,qkr,uC,OTe,jkr,Dkr,PY,Gkr,Okr,Vkr,bC,VTe,Xkr,zkr,BY,Wkr,Qkr,Hkr,vC,XTe,Ukr,Jkr,IY,Ykr,Kkr,Zkr,FC,zTe,eSr,oSr,NY,rSr,tSr,aSr,TC,WTe,nSr,sSr,qY,lSr,iSr,dSr,MC,uDe,Ic,EC,QTe,X9,cSr,HTe,fSr,bDe,gr,z9,mSr,Nc,gSr,jY,hSr,pSr,DY,_Sr,uSr,bSr,W9,vSr,UTe,FSr,TSr,MSr,Xt,Q9,ESr,JTe,CSr,wSr,qc,ASr,YTe,ySr,LSr,GY,xSr,$Sr,kSr,CC,SSr,Gr,H9,RSr,KTe,PSr,BSr,_n,ISr,ZTe,NSr,qSr,e7e,jSr,DSr,o7e,GSr,OSr,VSr,Ee,wC,r7e,XSr,zSr,OY,WSr,QSr,HSr,AC,t7e,USr,JSr,VY,YSr,KSr,ZSr,yC,a7e,eRr,oRr,XY,rRr,tRr,aRr,LC,n7e,nRr,sRr,zY,lRr,iRr,dRr,xC,s7e,cRr,fRr,WY,mRr,gRr,hRr,$C,l7e,pRr,_Rr,QY,uRr,bRr,vRr,kC,i7e,FRr,TRr,HY,MRr,ERr,CRr,SC,d7e,wRr,ARr,UY,yRr,LRr,xRr,RC,c7e,$Rr,kRr,JY,SRr,RRr,PRr,PC,f7e,BRr,IRr,YY,NRr,qRr,jRr,BC,m7e,DRr,GRr,KY,ORr,VRr,XRr,IC,g7e,zRr,WRr,ZY,QRr,HRr,URr,NC,vDe,jc,qC,h7e,U9,JRr,p7e,YRr,FDe,hr,J9,KRr,Dc,ZRr,eK,ePr,oPr,oK,rPr,tPr,aPr,Y9,nPr,_7e,sPr,lPr,iPr,zt,K9,dPr,u7e,cPr,fPr,Gc,mPr,b7e,gPr,hPr,rK,pPr,_Pr,uPr,jC,bPr,Or,Z9,vPr,v7e,FPr,TPr,un,MPr,F7e,EPr,CPr,T7e,wPr,APr,M7e,yPr,LPr,xPr,xe,DC,E7e,$Pr,kPr,tK,SPr,RPr,PPr,GC,C7e,BPr,IPr,aK,NPr,qPr,jPr,OC,w7e,DPr,GPr,nK,OPr,VPr,XPr,VC,A7e,zPr,WPr,sK,QPr,HPr,UPr,XC,y7e,JPr,YPr,lK,KPr,ZPr,eBr,zC,L7e,oBr,rBr,iK,tBr,aBr,nBr,WC,x7e,sBr,lBr,dK,iBr,dBr,cBr,QC,$7e,fBr,mBr,cK,gBr,hBr,pBr,HC,k7e,_Br,uBr,fK,bBr,vBr,FBr,UC,S7e,TBr,MBr,mK,EBr,CBr,wBr,JC,TDe,Oc,YC,R7e,ex,ABr,P7e,yBr,MDe,pr,ox,LBr,Vc,xBr,gK,$Br,kBr,hK,SBr,RBr,PBr,rx,BBr,B7e,IBr,NBr,qBr,Wt,tx,jBr,I7e,DBr,GBr,Xc,OBr,N7e,VBr,XBr,pK,zBr,WBr,QBr,KC,HBr,Vr,ax,UBr,q7e,JBr,YBr,bn,KBr,j7e,ZBr,eIr,D7e,oIr,rIr,G7e,tIr,aIr,nIr,Pe,ZC,O7e,sIr,lIr,_K,iIr,dIr,cIr,e0,V7e,fIr,mIr,uK,gIr,hIr,pIr,o0,X7e,_Ir,uIr,bK,bIr,vIr,FIr,r0,z7e,TIr,MIr,vK,EIr,CIr,wIr,t0,W7e,AIr,yIr,FK,LIr,xIr,$Ir,a0,Q7e,kIr,SIr,TK,RIr,PIr,BIr,n0,H7e,IIr,NIr,MK,qIr,jIr,DIr,s0,U7e,GIr,OIr,EK,VIr,XIr,zIr,l0,J7e,WIr,QIr,CK,HIr,UIr,JIr,i0,EDe,zc,d0,Y7e,nx,YIr,K7e,KIr,CDe,_r,sx,ZIr,Wc,eNr,wK,oNr,rNr,AK,tNr,aNr,nNr,lx,sNr,Z7e,lNr,iNr,dNr,Qt,ix,cNr,eMe,fNr,mNr,Qc,gNr,oMe,hNr,pNr,yK,_Nr,uNr,bNr,c0,vNr,Xr,dx,FNr,rMe,TNr,MNr,vn,ENr,tMe,CNr,wNr,aMe,ANr,yNr,nMe,LNr,xNr,$Nr,$e,f0,sMe,kNr,SNr,LK,RNr,PNr,BNr,m0,lMe,INr,NNr,xK,qNr,jNr,DNr,g0,iMe,GNr,ONr,$K,VNr,XNr,zNr,h0,dMe,WNr,QNr,kK,HNr,UNr,JNr,p0,cMe,YNr,KNr,SK,ZNr,eqr,oqr,_0,fMe,rqr,tqr,RK,aqr,nqr,sqr,u0,mMe,lqr,iqr,PK,dqr,cqr,fqr,b0,gMe,mqr,gqr,BK,hqr,pqr,_qr,v0,hMe,uqr,bqr,IK,vqr,Fqr,Tqr,F0,pMe,Mqr,Eqr,NK,Cqr,wqr,Aqr,T0,wDe,Hc,M0,_Me,cx,yqr,uMe,Lqr,ADe,ur,fx,xqr,Uc,$qr,qK,kqr,Sqr,jK,Rqr,Pqr,Bqr,mx,Iqr,bMe,Nqr,qqr,jqr,Ht,gx,Dqr,vMe,Gqr,Oqr,Jc,Vqr,FMe,Xqr,zqr,DK,Wqr,Qqr,Hqr,E0,Uqr,zr,hx,Jqr,TMe,Yqr,Kqr,Fn,Zqr,MMe,ejr,ojr,EMe,rjr,tjr,CMe,ajr,njr,sjr,ke,C0,wMe,ljr,ijr,GK,djr,cjr,fjr,w0,AMe,mjr,gjr,OK,hjr,pjr,_jr,A0,yMe,ujr,bjr,VK,vjr,Fjr,Tjr,y0,LMe,Mjr,Ejr,XK,Cjr,wjr,Ajr,L0,xMe,yjr,Ljr,zK,xjr,$jr,kjr,x0,$Me,Sjr,Rjr,WK,Pjr,Bjr,Ijr,$0,kMe,Njr,qjr,QK,jjr,Djr,Gjr,k0,SMe,Ojr,Vjr,HK,Xjr,zjr,Wjr,S0,RMe,Qjr,Hjr,UK,Ujr,Jjr,Yjr,R0,PMe,Kjr,Zjr,JK,eDr,oDr,rDr,P0,yDe,Yc,B0,BMe,px,tDr,IMe,aDr,LDe,br,_x,nDr,Kc,sDr,YK,lDr,iDr,KK,dDr,cDr,fDr,ux,mDr,NMe,gDr,hDr,pDr,Ut,bx,_Dr,qMe,uDr,bDr,Zc,vDr,jMe,FDr,TDr,ZK,MDr,EDr,CDr,I0,wDr,Wr,vx,ADr,DMe,yDr,LDr,Tn,xDr,GMe,$Dr,kDr,OMe,SDr,RDr,VMe,PDr,BDr,IDr,Ge,N0,XMe,NDr,qDr,eZ,jDr,DDr,GDr,q0,zMe,ODr,VDr,oZ,XDr,zDr,WDr,j0,WMe,QDr,HDr,rZ,UDr,JDr,YDr,D0,QMe,KDr,ZDr,tZ,eGr,oGr,rGr,G0,HMe,tGr,aGr,aZ,nGr,sGr,lGr,O0,UMe,iGr,dGr,nZ,cGr,fGr,mGr,V0,JMe,gGr,hGr,sZ,pGr,_Gr,uGr,X0,YMe,bGr,vGr,lZ,FGr,TGr,MGr,z0,xDe,ef,W0,KMe,Fx,EGr,ZMe,CGr,$De,vr,Tx,wGr,of,AGr,iZ,yGr,LGr,dZ,xGr,$Gr,kGr,Mx,SGr,eEe,RGr,PGr,BGr,Jt,Ex,IGr,oEe,NGr,qGr,rf,jGr,rEe,DGr,GGr,cZ,OGr,VGr,XGr,Q0,zGr,Qr,Cx,WGr,tEe,QGr,HGr,Mn,UGr,aEe,JGr,YGr,nEe,KGr,ZGr,sEe,eOr,oOr,rOr,Oe,H0,lEe,tOr,aOr,fZ,nOr,sOr,lOr,U0,iEe,iOr,dOr,mZ,cOr,fOr,mOr,J0,dEe,gOr,hOr,gZ,pOr,_Or,uOr,Y0,cEe,bOr,vOr,hZ,FOr,TOr,MOr,K0,fEe,EOr,COr,pZ,wOr,AOr,yOr,Z0,mEe,LOr,xOr,_Z,$Or,kOr,SOr,ew,gEe,ROr,POr,uZ,BOr,IOr,NOr,ow,hEe,qOr,jOr,bZ,DOr,GOr,OOr,rw,kDe,tf,tw,pEe,wx,VOr,_Ee,XOr,SDe,Fr,Ax,zOr,af,WOr,vZ,QOr,HOr,FZ,UOr,JOr,YOr,yx,KOr,uEe,ZOr,eVr,oVr,Yt,Lx,rVr,bEe,tVr,aVr,nf,nVr,vEe,sVr,lVr,TZ,iVr,dVr,cVr,aw,fVr,Hr,xx,mVr,FEe,gVr,hVr,En,pVr,TEe,_Vr,uVr,MEe,bVr,vVr,EEe,FVr,TVr,MVr,CEe,nw,wEe,EVr,CVr,MZ,wVr,AVr,yVr,sw,RDe,sf,lw,AEe,$x,LVr,yEe,xVr,PDe,Tr,kx,$Vr,lf,kVr,EZ,SVr,RVr,CZ,PVr,BVr,IVr,Sx,NVr,LEe,qVr,jVr,DVr,Kt,Rx,GVr,xEe,OVr,VVr,df,XVr,$Ee,zVr,WVr,wZ,QVr,HVr,UVr,iw,JVr,Ur,Px,YVr,kEe,KVr,ZVr,Cn,eXr,SEe,oXr,rXr,REe,tXr,aXr,PEe,nXr,sXr,lXr,Bx,dw,BEe,iXr,dXr,AZ,cXr,fXr,mXr,cw,IEe,gXr,hXr,yZ,pXr,_Xr,uXr,fw,BDe,cf,mw,NEe,Ix,bXr,qEe,vXr,IDe,Mr,Nx,FXr,ff,TXr,LZ,MXr,EXr,xZ,CXr,wXr,AXr,qx,yXr,jEe,LXr,xXr,$Xr,Zt,jx,kXr,DEe,SXr,RXr,mf,PXr,GEe,BXr,IXr,$Z,NXr,qXr,jXr,gw,DXr,Jr,Dx,GXr,OEe,OXr,VXr,wn,XXr,VEe,zXr,WXr,XEe,QXr,HXr,zEe,UXr,JXr,YXr,WEe,hw,QEe,KXr,ZXr,kZ,ezr,ozr,rzr,pw,NDe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),IA=new te({}),NA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new tzr({props:{warning:!0,$$slots:{default:[rSt]},$$scope:{ctx:L}}}),qA=new te({}),jA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L587"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L733"}}),XA=new te({}),zA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L390"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L404"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L603"}}),JA=new te({}),YA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new tzr({props:{$$slots:{default:[nSt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),sp=new tzr({props:{$$slots:{default:[lSt]},$$scope:{ctx:L}}}),lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L739"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L746"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L761"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L768"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),Ly=new te({}),xy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L775"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L784"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L818"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L825"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L811"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Zy=new te({}),eL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L793"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),aL=new te({}),nL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L800"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),dL=new te({}),cL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L834"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),hL=new te({}),pL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L873"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),vL=new te({}),FL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L880"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),CL=new te({}),wL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L903"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),xL=new te({}),$L=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L887"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),PL=new te({}),BL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L894"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L912"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),zL=new te({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L919"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),JL=new te({}),YL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L866"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),r8=new te({}),t8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L841"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L848"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),m8=new te({}),g8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L857"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),u8=new te({}),b8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),y8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),P9=new te({}),B9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),tt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),SA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),RA=o("AutoConfig"),Ln=o(", "),xn=a("a"),PA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),BA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),ek=o("will create a model that is an instance of "),bi=a("a"),ok=o("BertModel"),rk=o("."),Eo=l(),Aa=a("p"),tk=o("There is one class of "),vf=a("code"),ak=o("AutoModel"),zOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Pqe=l(),vi=a("h2"),Ff=a("a"),Coe=a("span"),F(IA.$$.fragment),WOe=l(),woe=a("span"),QOe=o("Extending the Auto Classes"),Bqe=l(),kn=a("p"),HOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=a("code"),UOe=o("NewModel"),JOe=o(", make sure you have a "),yoe=a("code"),YOe=o("NewModelConfig"),KOe=o(` then you can add those to the auto
classes like this:`),Iqe=l(),F(NA.$$.fragment),Nqe=l(),nk=a("p"),ZOe=o("You will then be able to use the auto classes like you would usually do!"),qqe=l(),F(Tf.$$.fragment),jqe=l(),Fi=a("h2"),Mf=a("a"),Loe=a("span"),F(qA.$$.fragment),eVe=l(),xoe=a("span"),oVe=o("AutoConfig"),Dqe=l(),Co=a("div"),F(jA.$$.fragment),rVe=l(),DA=a("p"),tVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=a("a"),aVe=o("from_pretrained()"),nVe=o(" class method."),sVe=l(),GA=a("p"),lVe=o("This class cannot be instantiated directly using "),$oe=a("code"),iVe=o("__init__()"),dVe=o(" (throws an error)."),cVe=l(),Er=a("div"),F(OA.$$.fragment),fVe=l(),koe=a("p"),mVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),gVe=l(),Ti=a("p"),hVe=o("The configuration class to instantiate is selected based on the "),Soe=a("code"),pVe=o("model_type"),_Ve=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=a("code"),uVe=o("pretrained_model_name_or_path"),bVe=o(":"),vVe=l(),A=a("ul"),Ef=a("li"),Poe=a("strong"),FVe=o("albert"),TVe=o(" \u2014 "),lk=a("a"),MVe=o("AlbertConfig"),EVe=o(" (ALBERT model)"),CVe=l(),Cf=a("li"),Boe=a("strong"),wVe=o("bart"),AVe=o(" \u2014 "),ik=a("a"),yVe=o("BartConfig"),LVe=o(" (BART model)"),xVe=l(),wf=a("li"),Ioe=a("strong"),$Ve=o("beit"),kVe=o(" \u2014 "),dk=a("a"),SVe=o("BeitConfig"),RVe=o(" (BEiT model)"),PVe=l(),Af=a("li"),Noe=a("strong"),BVe=o("bert"),IVe=o(" \u2014 "),ck=a("a"),NVe=o("BertConfig"),qVe=o(" (BERT model)"),jVe=l(),yf=a("li"),qoe=a("strong"),DVe=o("bert-generation"),GVe=o(" \u2014 "),fk=a("a"),OVe=o("BertGenerationConfig"),VVe=o(" (Bert Generation model)"),XVe=l(),Lf=a("li"),joe=a("strong"),zVe=o("big_bird"),WVe=o(" \u2014 "),mk=a("a"),QVe=o("BigBirdConfig"),HVe=o(" (BigBird model)"),UVe=l(),xf=a("li"),Doe=a("strong"),JVe=o("bigbird_pegasus"),YVe=o(" \u2014 "),gk=a("a"),KVe=o("BigBirdPegasusConfig"),ZVe=o(" (BigBirdPegasus model)"),eXe=l(),$f=a("li"),Goe=a("strong"),oXe=o("blenderbot"),rXe=o(" \u2014 "),hk=a("a"),tXe=o("BlenderbotConfig"),aXe=o(" (Blenderbot model)"),nXe=l(),kf=a("li"),Ooe=a("strong"),sXe=o("blenderbot-small"),lXe=o(" \u2014 "),pk=a("a"),iXe=o("BlenderbotSmallConfig"),dXe=o(" (BlenderbotSmall model)"),cXe=l(),Sf=a("li"),Voe=a("strong"),fXe=o("camembert"),mXe=o(" \u2014 "),_k=a("a"),gXe=o("CamembertConfig"),hXe=o(" (CamemBERT model)"),pXe=l(),Rf=a("li"),Xoe=a("strong"),_Xe=o("canine"),uXe=o(" \u2014 "),uk=a("a"),bXe=o("CanineConfig"),vXe=o(" (Canine model)"),FXe=l(),Pf=a("li"),zoe=a("strong"),TXe=o("clip"),MXe=o(" \u2014 "),bk=a("a"),EXe=o("CLIPConfig"),CXe=o(" (CLIP model)"),wXe=l(),Bf=a("li"),Woe=a("strong"),AXe=o("convbert"),yXe=o(" \u2014 "),vk=a("a"),LXe=o("ConvBertConfig"),xXe=o(" (ConvBERT model)"),$Xe=l(),If=a("li"),Qoe=a("strong"),kXe=o("convnext"),SXe=o(" \u2014 "),Fk=a("a"),RXe=o("ConvNextConfig"),PXe=o(" (ConvNext model)"),BXe=l(),Nf=a("li"),Hoe=a("strong"),IXe=o("ctrl"),NXe=o(" \u2014 "),Tk=a("a"),qXe=o("CTRLConfig"),jXe=o(" (CTRL model)"),DXe=l(),qf=a("li"),Uoe=a("strong"),GXe=o("cvt"),OXe=o(" \u2014 "),Mk=a("a"),VXe=o("CvtConfig"),XXe=o(" (CvT model)"),zXe=l(),jf=a("li"),Joe=a("strong"),WXe=o("data2vec-audio"),QXe=o(" \u2014 "),Ek=a("a"),HXe=o("Data2VecAudioConfig"),UXe=o(" (Data2VecAudio model)"),JXe=l(),Df=a("li"),Yoe=a("strong"),YXe=o("data2vec-text"),KXe=o(" \u2014 "),Ck=a("a"),ZXe=o("Data2VecTextConfig"),eze=o(" (Data2VecText model)"),oze=l(),Gf=a("li"),Koe=a("strong"),rze=o("data2vec-vision"),tze=o(" \u2014 "),wk=a("a"),aze=o("Data2VecVisionConfig"),nze=o(" (Data2VecVision model)"),sze=l(),Of=a("li"),Zoe=a("strong"),lze=o("deberta"),ize=o(" \u2014 "),Ak=a("a"),dze=o("DebertaConfig"),cze=o(" (DeBERTa model)"),fze=l(),Vf=a("li"),ere=a("strong"),mze=o("deberta-v2"),gze=o(" \u2014 "),yk=a("a"),hze=o("DebertaV2Config"),pze=o(" (DeBERTa-v2 model)"),_ze=l(),Xf=a("li"),ore=a("strong"),uze=o("decision_transformer"),bze=o(" \u2014 "),Lk=a("a"),vze=o("DecisionTransformerConfig"),Fze=o(" (Decision Transformer model)"),Tze=l(),zf=a("li"),rre=a("strong"),Mze=o("deit"),Eze=o(" \u2014 "),xk=a("a"),Cze=o("DeiTConfig"),wze=o(" (DeiT model)"),Aze=l(),Wf=a("li"),tre=a("strong"),yze=o("detr"),Lze=o(" \u2014 "),$k=a("a"),xze=o("DetrConfig"),$ze=o(" (DETR model)"),kze=l(),Qf=a("li"),are=a("strong"),Sze=o("distilbert"),Rze=o(" \u2014 "),kk=a("a"),Pze=o("DistilBertConfig"),Bze=o(" (DistilBERT model)"),Ize=l(),Hf=a("li"),nre=a("strong"),Nze=o("dpr"),qze=o(" \u2014 "),Sk=a("a"),jze=o("DPRConfig"),Dze=o(" (DPR model)"),Gze=l(),Uf=a("li"),sre=a("strong"),Oze=o("dpt"),Vze=o(" \u2014 "),Rk=a("a"),Xze=o("DPTConfig"),zze=o(" (DPT model)"),Wze=l(),Jf=a("li"),lre=a("strong"),Qze=o("electra"),Hze=o(" \u2014 "),Pk=a("a"),Uze=o("ElectraConfig"),Jze=o(" (ELECTRA model)"),Yze=l(),Yf=a("li"),ire=a("strong"),Kze=o("encoder-decoder"),Zze=o(" \u2014 "),Bk=a("a"),eWe=o("EncoderDecoderConfig"),oWe=o(" (Encoder decoder model)"),rWe=l(),Kf=a("li"),dre=a("strong"),tWe=o("flaubert"),aWe=o(" \u2014 "),Ik=a("a"),nWe=o("FlaubertConfig"),sWe=o(" (FlauBERT model)"),lWe=l(),Zf=a("li"),cre=a("strong"),iWe=o("flava"),dWe=o(" \u2014 "),Nk=a("a"),cWe=o("FlavaConfig"),fWe=o(" (Flava model)"),mWe=l(),em=a("li"),fre=a("strong"),gWe=o("fnet"),hWe=o(" \u2014 "),qk=a("a"),pWe=o("FNetConfig"),_We=o(" (FNet model)"),uWe=l(),om=a("li"),mre=a("strong"),bWe=o("fsmt"),vWe=o(" \u2014 "),jk=a("a"),FWe=o("FSMTConfig"),TWe=o(" (FairSeq Machine-Translation model)"),MWe=l(),rm=a("li"),gre=a("strong"),EWe=o("funnel"),CWe=o(" \u2014 "),Dk=a("a"),wWe=o("FunnelConfig"),AWe=o(" (Funnel Transformer model)"),yWe=l(),tm=a("li"),hre=a("strong"),LWe=o("glpn"),xWe=o(" \u2014 "),Gk=a("a"),$We=o("GLPNConfig"),kWe=o(" (GLPN model)"),SWe=l(),am=a("li"),pre=a("strong"),RWe=o("gpt2"),PWe=o(" \u2014 "),Ok=a("a"),BWe=o("GPT2Config"),IWe=o(" (OpenAI GPT-2 model)"),NWe=l(),nm=a("li"),_re=a("strong"),qWe=o("gpt_neo"),jWe=o(" \u2014 "),Vk=a("a"),DWe=o("GPTNeoConfig"),GWe=o(" (GPT Neo model)"),OWe=l(),sm=a("li"),ure=a("strong"),VWe=o("gpt_neox"),XWe=o(" \u2014 "),Xk=a("a"),zWe=o("GPTNeoXConfig"),WWe=o(" (GPT NeoX model)"),QWe=l(),lm=a("li"),bre=a("strong"),HWe=o("gptj"),UWe=o(" \u2014 "),zk=a("a"),JWe=o("GPTJConfig"),YWe=o(" (GPT-J model)"),KWe=l(),im=a("li"),vre=a("strong"),ZWe=o("hubert"),eQe=o(" \u2014 "),Wk=a("a"),oQe=o("HubertConfig"),rQe=o(" (Hubert model)"),tQe=l(),dm=a("li"),Fre=a("strong"),aQe=o("ibert"),nQe=o(" \u2014 "),Qk=a("a"),sQe=o("IBertConfig"),lQe=o(" (I-BERT model)"),iQe=l(),cm=a("li"),Tre=a("strong"),dQe=o("imagegpt"),cQe=o(" \u2014 "),Hk=a("a"),fQe=o("ImageGPTConfig"),mQe=o(" (ImageGPT model)"),gQe=l(),fm=a("li"),Mre=a("strong"),hQe=o("layoutlm"),pQe=o(" \u2014 "),Uk=a("a"),_Qe=o("LayoutLMConfig"),uQe=o(" (LayoutLM model)"),bQe=l(),mm=a("li"),Ere=a("strong"),vQe=o("layoutlmv2"),FQe=o(" \u2014 "),Jk=a("a"),TQe=o("LayoutLMv2Config"),MQe=o(" (LayoutLMv2 model)"),EQe=l(),gm=a("li"),Cre=a("strong"),CQe=o("layoutlmv3"),wQe=o(" \u2014 "),Yk=a("a"),AQe=o("LayoutLMv3Config"),yQe=o(" (LayoutLMv3 model)"),LQe=l(),hm=a("li"),wre=a("strong"),xQe=o("led"),$Qe=o(" \u2014 "),Kk=a("a"),kQe=o("LEDConfig"),SQe=o(" (LED model)"),RQe=l(),pm=a("li"),Are=a("strong"),PQe=o("longformer"),BQe=o(" \u2014 "),Zk=a("a"),IQe=o("LongformerConfig"),NQe=o(" (Longformer model)"),qQe=l(),_m=a("li"),yre=a("strong"),jQe=o("luke"),DQe=o(" \u2014 "),eS=a("a"),GQe=o("LukeConfig"),OQe=o(" (LUKE model)"),VQe=l(),um=a("li"),Lre=a("strong"),XQe=o("lxmert"),zQe=o(" \u2014 "),oS=a("a"),WQe=o("LxmertConfig"),QQe=o(" (LXMERT model)"),HQe=l(),bm=a("li"),xre=a("strong"),UQe=o("m2m_100"),JQe=o(" \u2014 "),rS=a("a"),YQe=o("M2M100Config"),KQe=o(" (M2M100 model)"),ZQe=l(),vm=a("li"),$re=a("strong"),eHe=o("marian"),oHe=o(" \u2014 "),tS=a("a"),rHe=o("MarianConfig"),tHe=o(" (Marian model)"),aHe=l(),Fm=a("li"),kre=a("strong"),nHe=o("maskformer"),sHe=o(" \u2014 "),aS=a("a"),lHe=o("MaskFormerConfig"),iHe=o(" (MaskFormer model)"),dHe=l(),Tm=a("li"),Sre=a("strong"),cHe=o("mbart"),fHe=o(" \u2014 "),nS=a("a"),mHe=o("MBartConfig"),gHe=o(" (mBART model)"),hHe=l(),Mm=a("li"),Rre=a("strong"),pHe=o("megatron-bert"),_He=o(" \u2014 "),sS=a("a"),uHe=o("MegatronBertConfig"),bHe=o(" (MegatronBert model)"),vHe=l(),Em=a("li"),Pre=a("strong"),FHe=o("mobilebert"),THe=o(" \u2014 "),lS=a("a"),MHe=o("MobileBertConfig"),EHe=o(" (MobileBERT model)"),CHe=l(),Cm=a("li"),Bre=a("strong"),wHe=o("mobilevit"),AHe=o(" \u2014 "),iS=a("a"),yHe=o("MobileViTConfig"),LHe=o(" (MobileViT model)"),xHe=l(),wm=a("li"),Ire=a("strong"),$He=o("mpnet"),kHe=o(" \u2014 "),dS=a("a"),SHe=o("MPNetConfig"),RHe=o(" (MPNet model)"),PHe=l(),Am=a("li"),Nre=a("strong"),BHe=o("mt5"),IHe=o(" \u2014 "),cS=a("a"),NHe=o("MT5Config"),qHe=o(" (mT5 model)"),jHe=l(),ym=a("li"),qre=a("strong"),DHe=o("nystromformer"),GHe=o(" \u2014 "),fS=a("a"),OHe=o("NystromformerConfig"),VHe=o(" (Nystromformer model)"),XHe=l(),Lm=a("li"),jre=a("strong"),zHe=o("openai-gpt"),WHe=o(" \u2014 "),mS=a("a"),QHe=o("OpenAIGPTConfig"),HHe=o(" (OpenAI GPT model)"),UHe=l(),xm=a("li"),Dre=a("strong"),JHe=o("opt"),YHe=o(" \u2014 "),gS=a("a"),KHe=o("OPTConfig"),ZHe=o(" (OPT model)"),eUe=l(),$m=a("li"),Gre=a("strong"),oUe=o("pegasus"),rUe=o(" \u2014 "),hS=a("a"),tUe=o("PegasusConfig"),aUe=o(" (Pegasus model)"),nUe=l(),km=a("li"),Ore=a("strong"),sUe=o("perceiver"),lUe=o(" \u2014 "),pS=a("a"),iUe=o("PerceiverConfig"),dUe=o(" (Perceiver model)"),cUe=l(),Sm=a("li"),Vre=a("strong"),fUe=o("plbart"),mUe=o(" \u2014 "),_S=a("a"),gUe=o("PLBartConfig"),hUe=o(" (PLBart model)"),pUe=l(),Rm=a("li"),Xre=a("strong"),_Ue=o("poolformer"),uUe=o(" \u2014 "),uS=a("a"),bUe=o("PoolFormerConfig"),vUe=o(" (PoolFormer model)"),FUe=l(),Pm=a("li"),zre=a("strong"),TUe=o("prophetnet"),MUe=o(" \u2014 "),bS=a("a"),EUe=o("ProphetNetConfig"),CUe=o(" (ProphetNet model)"),wUe=l(),Bm=a("li"),Wre=a("strong"),AUe=o("qdqbert"),yUe=o(" \u2014 "),vS=a("a"),LUe=o("QDQBertConfig"),xUe=o(" (QDQBert model)"),$Ue=l(),Im=a("li"),Qre=a("strong"),kUe=o("rag"),SUe=o(" \u2014 "),FS=a("a"),RUe=o("RagConfig"),PUe=o(" (RAG model)"),BUe=l(),Nm=a("li"),Hre=a("strong"),IUe=o("realm"),NUe=o(" \u2014 "),TS=a("a"),qUe=o("RealmConfig"),jUe=o(" (Realm model)"),DUe=l(),qm=a("li"),Ure=a("strong"),GUe=o("reformer"),OUe=o(" \u2014 "),MS=a("a"),VUe=o("ReformerConfig"),XUe=o(" (Reformer model)"),zUe=l(),jm=a("li"),Jre=a("strong"),WUe=o("regnet"),QUe=o(" \u2014 "),ES=a("a"),HUe=o("RegNetConfig"),UUe=o(" (RegNet model)"),JUe=l(),Dm=a("li"),Yre=a("strong"),YUe=o("rembert"),KUe=o(" \u2014 "),CS=a("a"),ZUe=o("RemBertConfig"),eJe=o(" (RemBERT model)"),oJe=l(),Gm=a("li"),Kre=a("strong"),rJe=o("resnet"),tJe=o(" \u2014 "),wS=a("a"),aJe=o("ResNetConfig"),nJe=o(" (ResNet model)"),sJe=l(),Om=a("li"),Zre=a("strong"),lJe=o("retribert"),iJe=o(" \u2014 "),AS=a("a"),dJe=o("RetriBertConfig"),cJe=o(" (RetriBERT model)"),fJe=l(),Vm=a("li"),ete=a("strong"),mJe=o("roberta"),gJe=o(" \u2014 "),yS=a("a"),hJe=o("RobertaConfig"),pJe=o(" (RoBERTa model)"),_Je=l(),Xm=a("li"),ote=a("strong"),uJe=o("roformer"),bJe=o(" \u2014 "),LS=a("a"),vJe=o("RoFormerConfig"),FJe=o(" (RoFormer model)"),TJe=l(),zm=a("li"),rte=a("strong"),MJe=o("segformer"),EJe=o(" \u2014 "),xS=a("a"),CJe=o("SegformerConfig"),wJe=o(" (SegFormer model)"),AJe=l(),Wm=a("li"),tte=a("strong"),yJe=o("sew"),LJe=o(" \u2014 "),$S=a("a"),xJe=o("SEWConfig"),$Je=o(" (SEW model)"),kJe=l(),Qm=a("li"),ate=a("strong"),SJe=o("sew-d"),RJe=o(" \u2014 "),kS=a("a"),PJe=o("SEWDConfig"),BJe=o(" (SEW-D model)"),IJe=l(),Hm=a("li"),nte=a("strong"),NJe=o("speech-encoder-decoder"),qJe=o(" \u2014 "),SS=a("a"),jJe=o("SpeechEncoderDecoderConfig"),DJe=o(" (Speech Encoder decoder model)"),GJe=l(),Um=a("li"),ste=a("strong"),OJe=o("speech_to_text"),VJe=o(" \u2014 "),RS=a("a"),XJe=o("Speech2TextConfig"),zJe=o(" (Speech2Text model)"),WJe=l(),Jm=a("li"),lte=a("strong"),QJe=o("speech_to_text_2"),HJe=o(" \u2014 "),PS=a("a"),UJe=o("Speech2Text2Config"),JJe=o(" (Speech2Text2 model)"),YJe=l(),Ym=a("li"),ite=a("strong"),KJe=o("splinter"),ZJe=o(" \u2014 "),BS=a("a"),eYe=o("SplinterConfig"),oYe=o(" (Splinter model)"),rYe=l(),Km=a("li"),dte=a("strong"),tYe=o("squeezebert"),aYe=o(" \u2014 "),IS=a("a"),nYe=o("SqueezeBertConfig"),sYe=o(" (SqueezeBERT model)"),lYe=l(),Zm=a("li"),cte=a("strong"),iYe=o("swin"),dYe=o(" \u2014 "),NS=a("a"),cYe=o("SwinConfig"),fYe=o(" (Swin model)"),mYe=l(),eg=a("li"),fte=a("strong"),gYe=o("t5"),hYe=o(" \u2014 "),qS=a("a"),pYe=o("T5Config"),_Ye=o(" (T5 model)"),uYe=l(),og=a("li"),mte=a("strong"),bYe=o("tapas"),vYe=o(" \u2014 "),jS=a("a"),FYe=o("TapasConfig"),TYe=o(" (TAPAS model)"),MYe=l(),rg=a("li"),gte=a("strong"),EYe=o("trajectory_transformer"),CYe=o(" \u2014 "),DS=a("a"),wYe=o("TrajectoryTransformerConfig"),AYe=o(" (Trajectory Transformer model)"),yYe=l(),tg=a("li"),hte=a("strong"),LYe=o("transfo-xl"),xYe=o(" \u2014 "),GS=a("a"),$Ye=o("TransfoXLConfig"),kYe=o(" (Transformer-XL model)"),SYe=l(),ag=a("li"),pte=a("strong"),RYe=o("trocr"),PYe=o(" \u2014 "),OS=a("a"),BYe=o("TrOCRConfig"),IYe=o(" (TrOCR model)"),NYe=l(),ng=a("li"),_te=a("strong"),qYe=o("unispeech"),jYe=o(" \u2014 "),VS=a("a"),DYe=o("UniSpeechConfig"),GYe=o(" (UniSpeech model)"),OYe=l(),sg=a("li"),ute=a("strong"),VYe=o("unispeech-sat"),XYe=o(" \u2014 "),XS=a("a"),zYe=o("UniSpeechSatConfig"),WYe=o(" (UniSpeechSat model)"),QYe=l(),lg=a("li"),bte=a("strong"),HYe=o("van"),UYe=o(" \u2014 "),zS=a("a"),JYe=o("VanConfig"),YYe=o(" (VAN model)"),KYe=l(),ig=a("li"),vte=a("strong"),ZYe=o("vilt"),eKe=o(" \u2014 "),WS=a("a"),oKe=o("ViltConfig"),rKe=o(" (ViLT model)"),tKe=l(),dg=a("li"),Fte=a("strong"),aKe=o("vision-encoder-decoder"),nKe=o(" \u2014 "),QS=a("a"),sKe=o("VisionEncoderDecoderConfig"),lKe=o(" (Vision Encoder decoder model)"),iKe=l(),cg=a("li"),Tte=a("strong"),dKe=o("vision-text-dual-encoder"),cKe=o(" \u2014 "),HS=a("a"),fKe=o("VisionTextDualEncoderConfig"),mKe=o(" (VisionTextDualEncoder model)"),gKe=l(),fg=a("li"),Mte=a("strong"),hKe=o("visual_bert"),pKe=o(" \u2014 "),US=a("a"),_Ke=o("VisualBertConfig"),uKe=o(" (VisualBert model)"),bKe=l(),mg=a("li"),Ete=a("strong"),vKe=o("vit"),FKe=o(" \u2014 "),JS=a("a"),TKe=o("ViTConfig"),MKe=o(" (ViT model)"),EKe=l(),gg=a("li"),Cte=a("strong"),CKe=o("vit_mae"),wKe=o(" \u2014 "),YS=a("a"),AKe=o("ViTMAEConfig"),yKe=o(" (ViTMAE model)"),LKe=l(),hg=a("li"),wte=a("strong"),xKe=o("wav2vec2"),$Ke=o(" \u2014 "),KS=a("a"),kKe=o("Wav2Vec2Config"),SKe=o(" (Wav2Vec2 model)"),RKe=l(),pg=a("li"),Ate=a("strong"),PKe=o("wav2vec2-conformer"),BKe=o(" \u2014 "),ZS=a("a"),IKe=o("Wav2Vec2ConformerConfig"),NKe=o(" (Wav2Vec2-Conformer model)"),qKe=l(),_g=a("li"),yte=a("strong"),jKe=o("wavlm"),DKe=o(" \u2014 "),eR=a("a"),GKe=o("WavLMConfig"),OKe=o(" (WavLM model)"),VKe=l(),ug=a("li"),Lte=a("strong"),XKe=o("xglm"),zKe=o(" \u2014 "),oR=a("a"),WKe=o("XGLMConfig"),QKe=o(" (XGLM model)"),HKe=l(),bg=a("li"),xte=a("strong"),UKe=o("xlm"),JKe=o(" \u2014 "),rR=a("a"),YKe=o("XLMConfig"),KKe=o(" (XLM model)"),ZKe=l(),vg=a("li"),$te=a("strong"),eZe=o("xlm-prophetnet"),oZe=o(" \u2014 "),tR=a("a"),rZe=o("XLMProphetNetConfig"),tZe=o(" (XLMProphetNet model)"),aZe=l(),Fg=a("li"),kte=a("strong"),nZe=o("xlm-roberta"),sZe=o(" \u2014 "),aR=a("a"),lZe=o("XLMRobertaConfig"),iZe=o(" (XLM-RoBERTa model)"),dZe=l(),Tg=a("li"),Ste=a("strong"),cZe=o("xlm-roberta-xl"),fZe=o(" \u2014 "),nR=a("a"),mZe=o("XLMRobertaXLConfig"),gZe=o(" (XLM-RoBERTa-XL model)"),hZe=l(),Mg=a("li"),Rte=a("strong"),pZe=o("xlnet"),_Ze=o(" \u2014 "),sR=a("a"),uZe=o("XLNetConfig"),bZe=o(" (XLNet model)"),vZe=l(),Eg=a("li"),Pte=a("strong"),FZe=o("yolos"),TZe=o(" \u2014 "),lR=a("a"),MZe=o("YolosConfig"),EZe=o(" (YOLOS model)"),CZe=l(),Cg=a("li"),Bte=a("strong"),wZe=o("yoso"),AZe=o(" \u2014 "),iR=a("a"),yZe=o("YosoConfig"),LZe=o(" (YOSO model)"),xZe=l(),F(wg.$$.fragment),$Ze=l(),Ag=a("div"),F(VA.$$.fragment),kZe=l(),Ite=a("p"),SZe=o("Register a new configuration for this class."),Gqe=l(),Mi=a("h2"),yg=a("a"),Nte=a("span"),F(XA.$$.fragment),RZe=l(),qte=a("span"),PZe=o("AutoTokenizer"),Oqe=l(),wo=a("div"),F(zA.$$.fragment),BZe=l(),WA=a("p"),IZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=a("a"),NZe=o("AutoTokenizer.from_pretrained()"),qZe=o(" class method."),jZe=l(),QA=a("p"),DZe=o("This class cannot be instantiated directly using "),jte=a("code"),GZe=o("__init__()"),OZe=o(" (throws an error)."),VZe=l(),Cr=a("div"),F(HA.$$.fragment),XZe=l(),Dte=a("p"),zZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WZe=l(),ya=a("p"),QZe=o("The tokenizer class to instantiate is selected based on the "),Gte=a("code"),HZe=o("model_type"),UZe=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),JZe=o("pretrained_model_name_or_path"),YZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),KZe=o("pretrained_model_name_or_path"),ZZe=o(":"),eeo=l(),k=a("ul"),Sn=a("li"),Xte=a("strong"),oeo=o("albert"),reo=o(" \u2014 "),cR=a("a"),teo=o("AlbertTokenizer"),aeo=o(" or "),fR=a("a"),neo=o("AlbertTokenizerFast"),seo=o(" (ALBERT model)"),leo=l(),Rn=a("li"),zte=a("strong"),ieo=o("bart"),deo=o(" \u2014 "),mR=a("a"),ceo=o("BartTokenizer"),feo=o(" or "),gR=a("a"),meo=o("BartTokenizerFast"),geo=o(" (BART model)"),heo=l(),Pn=a("li"),Wte=a("strong"),peo=o("barthez"),_eo=o(" \u2014 "),hR=a("a"),ueo=o("BarthezTokenizer"),beo=o(" or "),pR=a("a"),veo=o("BarthezTokenizerFast"),Feo=o(" (BARThez model)"),Teo=l(),Lg=a("li"),Qte=a("strong"),Meo=o("bartpho"),Eeo=o(" \u2014 "),_R=a("a"),Ceo=o("BartphoTokenizer"),weo=o(" (BARTpho model)"),Aeo=l(),Bn=a("li"),Hte=a("strong"),yeo=o("bert"),Leo=o(" \u2014 "),uR=a("a"),xeo=o("BertTokenizer"),$eo=o(" or "),bR=a("a"),keo=o("BertTokenizerFast"),Seo=o(" (BERT model)"),Reo=l(),xg=a("li"),Ute=a("strong"),Peo=o("bert-generation"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("BertGenerationTokenizer"),Neo=o(" (Bert Generation model)"),qeo=l(),$g=a("li"),Jte=a("strong"),jeo=o("bert-japanese"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("BertJapaneseTokenizer"),Oeo=o(" (BertJapanese model)"),Veo=l(),kg=a("li"),Yte=a("strong"),Xeo=o("bertweet"),zeo=o(" \u2014 "),TR=a("a"),Weo=o("BertweetTokenizer"),Qeo=o(" (Bertweet model)"),Heo=l(),In=a("li"),Kte=a("strong"),Ueo=o("big_bird"),Jeo=o(" \u2014 "),MR=a("a"),Yeo=o("BigBirdTokenizer"),Keo=o(" or "),ER=a("a"),Zeo=o("BigBirdTokenizerFast"),eoo=o(" (BigBird model)"),ooo=l(),Nn=a("li"),Zte=a("strong"),roo=o("bigbird_pegasus"),too=o(" \u2014 "),CR=a("a"),aoo=o("PegasusTokenizer"),noo=o(" or "),wR=a("a"),soo=o("PegasusTokenizerFast"),loo=o(" (BigBirdPegasus model)"),ioo=l(),qn=a("li"),eae=a("strong"),doo=o("blenderbot"),coo=o(" \u2014 "),AR=a("a"),foo=o("BlenderbotTokenizer"),moo=o(" or "),yR=a("a"),goo=o("BlenderbotTokenizerFast"),hoo=o(" (Blenderbot model)"),poo=l(),Sg=a("li"),oae=a("strong"),_oo=o("blenderbot-small"),uoo=o(" \u2014 "),LR=a("a"),boo=o("BlenderbotSmallTokenizer"),voo=o(" (BlenderbotSmall model)"),Foo=l(),Rg=a("li"),rae=a("strong"),Too=o("byt5"),Moo=o(" \u2014 "),xR=a("a"),Eoo=o("ByT5Tokenizer"),Coo=o(" (ByT5 model)"),woo=l(),jn=a("li"),tae=a("strong"),Aoo=o("camembert"),yoo=o(" \u2014 "),$R=a("a"),Loo=o("CamembertTokenizer"),xoo=o(" or "),kR=a("a"),$oo=o("CamembertTokenizerFast"),koo=o(" (CamemBERT model)"),Soo=l(),Pg=a("li"),aae=a("strong"),Roo=o("canine"),Poo=o(" \u2014 "),SR=a("a"),Boo=o("CanineTokenizer"),Ioo=o(" (Canine model)"),Noo=l(),Dn=a("li"),nae=a("strong"),qoo=o("clip"),joo=o(" \u2014 "),RR=a("a"),Doo=o("CLIPTokenizer"),Goo=o(" or "),PR=a("a"),Ooo=o("CLIPTokenizerFast"),Voo=o(" (CLIP model)"),Xoo=l(),Gn=a("li"),sae=a("strong"),zoo=o("convbert"),Woo=o(" \u2014 "),BR=a("a"),Qoo=o("ConvBertTokenizer"),Hoo=o(" or "),IR=a("a"),Uoo=o("ConvBertTokenizerFast"),Joo=o(" (ConvBERT model)"),Yoo=l(),On=a("li"),lae=a("strong"),Koo=o("cpm"),Zoo=o(" \u2014 "),NR=a("a"),ero=o("CpmTokenizer"),oro=o(" or "),qR=a("a"),rro=o("CpmTokenizerFast"),tro=o(" (CPM model)"),aro=l(),Bg=a("li"),iae=a("strong"),nro=o("ctrl"),sro=o(" \u2014 "),jR=a("a"),lro=o("CTRLTokenizer"),iro=o(" (CTRL model)"),dro=l(),Vn=a("li"),dae=a("strong"),cro=o("data2vec-text"),fro=o(" \u2014 "),DR=a("a"),mro=o("RobertaTokenizer"),gro=o(" or "),GR=a("a"),hro=o("RobertaTokenizerFast"),pro=o(" (Data2VecText model)"),_ro=l(),Xn=a("li"),cae=a("strong"),uro=o("deberta"),bro=o(" \u2014 "),OR=a("a"),vro=o("DebertaTokenizer"),Fro=o(" or "),VR=a("a"),Tro=o("DebertaTokenizerFast"),Mro=o(" (DeBERTa model)"),Ero=l(),zn=a("li"),fae=a("strong"),Cro=o("deberta-v2"),wro=o(" \u2014 "),XR=a("a"),Aro=o("DebertaV2Tokenizer"),yro=o(" or "),zR=a("a"),Lro=o("DebertaV2TokenizerFast"),xro=o(" (DeBERTa-v2 model)"),$ro=l(),Wn=a("li"),mae=a("strong"),kro=o("distilbert"),Sro=o(" \u2014 "),WR=a("a"),Rro=o("DistilBertTokenizer"),Pro=o(" or "),QR=a("a"),Bro=o("DistilBertTokenizerFast"),Iro=o(" (DistilBERT model)"),Nro=l(),Qn=a("li"),gae=a("strong"),qro=o("dpr"),jro=o(" \u2014 "),HR=a("a"),Dro=o("DPRQuestionEncoderTokenizer"),Gro=o(" or "),UR=a("a"),Oro=o("DPRQuestionEncoderTokenizerFast"),Vro=o(" (DPR model)"),Xro=l(),Hn=a("li"),hae=a("strong"),zro=o("electra"),Wro=o(" \u2014 "),JR=a("a"),Qro=o("ElectraTokenizer"),Hro=o(" or "),YR=a("a"),Uro=o("ElectraTokenizerFast"),Jro=o(" (ELECTRA model)"),Yro=l(),Ig=a("li"),pae=a("strong"),Kro=o("flaubert"),Zro=o(" \u2014 "),KR=a("a"),eto=o("FlaubertTokenizer"),oto=o(" (FlauBERT model)"),rto=l(),Un=a("li"),_ae=a("strong"),tto=o("fnet"),ato=o(" \u2014 "),ZR=a("a"),nto=o("FNetTokenizer"),sto=o(" or "),eP=a("a"),lto=o("FNetTokenizerFast"),ito=o(" (FNet model)"),dto=l(),Ng=a("li"),uae=a("strong"),cto=o("fsmt"),fto=o(" \u2014 "),oP=a("a"),mto=o("FSMTTokenizer"),gto=o(" (FairSeq Machine-Translation model)"),hto=l(),Jn=a("li"),bae=a("strong"),pto=o("funnel"),_to=o(" \u2014 "),rP=a("a"),uto=o("FunnelTokenizer"),bto=o(" or "),tP=a("a"),vto=o("FunnelTokenizerFast"),Fto=o(" (Funnel Transformer model)"),Tto=l(),Yn=a("li"),vae=a("strong"),Mto=o("gpt2"),Eto=o(" \u2014 "),aP=a("a"),Cto=o("GPT2Tokenizer"),wto=o(" or "),nP=a("a"),Ato=o("GPT2TokenizerFast"),yto=o(" (OpenAI GPT-2 model)"),Lto=l(),Kn=a("li"),Fae=a("strong"),xto=o("gpt_neo"),$to=o(" \u2014 "),sP=a("a"),kto=o("GPT2Tokenizer"),Sto=o(" or "),lP=a("a"),Rto=o("GPT2TokenizerFast"),Pto=o(" (GPT Neo model)"),Bto=l(),qg=a("li"),Tae=a("strong"),Ito=o("gpt_neox"),Nto=o(" \u2014 "),iP=a("a"),qto=o("GPTNeoXTokenizerFast"),jto=o(" (GPT NeoX model)"),Dto=l(),Zn=a("li"),Mae=a("strong"),Gto=o("gptj"),Oto=o(" \u2014 "),dP=a("a"),Vto=o("GPT2Tokenizer"),Xto=o(" or "),cP=a("a"),zto=o("GPT2TokenizerFast"),Wto=o(" (GPT-J model)"),Qto=l(),es=a("li"),Eae=a("strong"),Hto=o("herbert"),Uto=o(" \u2014 "),fP=a("a"),Jto=o("HerbertTokenizer"),Yto=o(" or "),mP=a("a"),Kto=o("HerbertTokenizerFast"),Zto=o(" (HerBERT model)"),eao=l(),jg=a("li"),Cae=a("strong"),oao=o("hubert"),rao=o(" \u2014 "),gP=a("a"),tao=o("Wav2Vec2CTCTokenizer"),aao=o(" (Hubert model)"),nao=l(),os=a("li"),wae=a("strong"),sao=o("ibert"),lao=o(" \u2014 "),hP=a("a"),iao=o("RobertaTokenizer"),dao=o(" or "),pP=a("a"),cao=o("RobertaTokenizerFast"),fao=o(" (I-BERT model)"),mao=l(),rs=a("li"),Aae=a("strong"),gao=o("layoutlm"),hao=o(" \u2014 "),_P=a("a"),pao=o("LayoutLMTokenizer"),_ao=o(" or "),uP=a("a"),uao=o("LayoutLMTokenizerFast"),bao=o(" (LayoutLM model)"),vao=l(),ts=a("li"),yae=a("strong"),Fao=o("layoutlmv2"),Tao=o(" \u2014 "),bP=a("a"),Mao=o("LayoutLMv2Tokenizer"),Eao=o(" or "),vP=a("a"),Cao=o("LayoutLMv2TokenizerFast"),wao=o(" (LayoutLMv2 model)"),Aao=l(),as=a("li"),Lae=a("strong"),yao=o("layoutlmv3"),Lao=o(" \u2014 "),FP=a("a"),xao=o("LayoutLMv3Tokenizer"),$ao=o(" or "),TP=a("a"),kao=o("LayoutLMv3TokenizerFast"),Sao=o(" (LayoutLMv3 model)"),Rao=l(),ns=a("li"),xae=a("strong"),Pao=o("layoutxlm"),Bao=o(" \u2014 "),MP=a("a"),Iao=o("LayoutXLMTokenizer"),Nao=o(" or "),EP=a("a"),qao=o("LayoutXLMTokenizerFast"),jao=o(" (LayoutXLM model)"),Dao=l(),ss=a("li"),$ae=a("strong"),Gao=o("led"),Oao=o(" \u2014 "),CP=a("a"),Vao=o("LEDTokenizer"),Xao=o(" or "),wP=a("a"),zao=o("LEDTokenizerFast"),Wao=o(" (LED model)"),Qao=l(),ls=a("li"),kae=a("strong"),Hao=o("longformer"),Uao=o(" \u2014 "),AP=a("a"),Jao=o("LongformerTokenizer"),Yao=o(" or "),yP=a("a"),Kao=o("LongformerTokenizerFast"),Zao=o(" (Longformer model)"),eno=l(),Dg=a("li"),Sae=a("strong"),ono=o("luke"),rno=o(" \u2014 "),LP=a("a"),tno=o("LukeTokenizer"),ano=o(" (LUKE model)"),nno=l(),is=a("li"),Rae=a("strong"),sno=o("lxmert"),lno=o(" \u2014 "),xP=a("a"),ino=o("LxmertTokenizer"),dno=o(" or "),$P=a("a"),cno=o("LxmertTokenizerFast"),fno=o(" (LXMERT model)"),mno=l(),Gg=a("li"),Pae=a("strong"),gno=o("m2m_100"),hno=o(" \u2014 "),kP=a("a"),pno=o("M2M100Tokenizer"),_no=o(" (M2M100 model)"),uno=l(),Og=a("li"),Bae=a("strong"),bno=o("marian"),vno=o(" \u2014 "),SP=a("a"),Fno=o("MarianTokenizer"),Tno=o(" (Marian model)"),Mno=l(),ds=a("li"),Iae=a("strong"),Eno=o("mbart"),Cno=o(" \u2014 "),RP=a("a"),wno=o("MBartTokenizer"),Ano=o(" or "),PP=a("a"),yno=o("MBartTokenizerFast"),Lno=o(" (mBART model)"),xno=l(),cs=a("li"),Nae=a("strong"),$no=o("mbart50"),kno=o(" \u2014 "),BP=a("a"),Sno=o("MBart50Tokenizer"),Rno=o(" or "),IP=a("a"),Pno=o("MBart50TokenizerFast"),Bno=o(" (mBART-50 model)"),Ino=l(),fs=a("li"),qae=a("strong"),Nno=o("megatron-bert"),qno=o(" \u2014 "),NP=a("a"),jno=o("BertTokenizer"),Dno=o(" or "),qP=a("a"),Gno=o("BertTokenizerFast"),Ono=o(" (MegatronBert model)"),Vno=l(),Vg=a("li"),jae=a("strong"),Xno=o("mluke"),zno=o(" \u2014 "),jP=a("a"),Wno=o("MLukeTokenizer"),Qno=o(" (mLUKE model)"),Hno=l(),ms=a("li"),Dae=a("strong"),Uno=o("mobilebert"),Jno=o(" \u2014 "),DP=a("a"),Yno=o("MobileBertTokenizer"),Kno=o(" or "),GP=a("a"),Zno=o("MobileBertTokenizerFast"),eso=o(" (MobileBERT model)"),oso=l(),gs=a("li"),Gae=a("strong"),rso=o("mpnet"),tso=o(" \u2014 "),OP=a("a"),aso=o("MPNetTokenizer"),nso=o(" or "),VP=a("a"),sso=o("MPNetTokenizerFast"),lso=o(" (MPNet model)"),iso=l(),hs=a("li"),Oae=a("strong"),dso=o("mt5"),cso=o(" \u2014 "),XP=a("a"),fso=o("MT5Tokenizer"),mso=o(" or "),zP=a("a"),gso=o("MT5TokenizerFast"),hso=o(" (mT5 model)"),pso=l(),ps=a("li"),Vae=a("strong"),_so=o("nystromformer"),uso=o(" \u2014 "),WP=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),QP=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (Nystromformer model)"),Mso=l(),_s=a("li"),Xae=a("strong"),Eso=o("openai-gpt"),Cso=o(" \u2014 "),HP=a("a"),wso=o("OpenAIGPTTokenizer"),Aso=o(" or "),UP=a("a"),yso=o("OpenAIGPTTokenizerFast"),Lso=o(" (OpenAI GPT model)"),xso=l(),Xg=a("li"),zae=a("strong"),$so=o("opt"),kso=o(" \u2014 "),JP=a("a"),Sso=o("GPT2Tokenizer"),Rso=o(" (OPT model)"),Pso=l(),us=a("li"),Wae=a("strong"),Bso=o("pegasus"),Iso=o(" \u2014 "),YP=a("a"),Nso=o("PegasusTokenizer"),qso=o(" or "),KP=a("a"),jso=o("PegasusTokenizerFast"),Dso=o(" (Pegasus model)"),Gso=l(),zg=a("li"),Qae=a("strong"),Oso=o("perceiver"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("PerceiverTokenizer"),zso=o(" (Perceiver model)"),Wso=l(),Wg=a("li"),Hae=a("strong"),Qso=o("phobert"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("PhobertTokenizer"),Jso=o(" (PhoBERT model)"),Yso=l(),Qg=a("li"),Uae=a("strong"),Kso=o("plbart"),Zso=o(" \u2014 "),oB=a("a"),elo=o("PLBartTokenizer"),olo=o(" (PLBart model)"),rlo=l(),Hg=a("li"),Jae=a("strong"),tlo=o("prophetnet"),alo=o(" \u2014 "),rB=a("a"),nlo=o("ProphetNetTokenizer"),slo=o(" (ProphetNet model)"),llo=l(),bs=a("li"),Yae=a("strong"),ilo=o("qdqbert"),dlo=o(" \u2014 "),tB=a("a"),clo=o("BertTokenizer"),flo=o(" or "),aB=a("a"),mlo=o("BertTokenizerFast"),glo=o(" (QDQBert model)"),hlo=l(),Ug=a("li"),Kae=a("strong"),plo=o("rag"),_lo=o(" \u2014 "),nB=a("a"),ulo=o("RagTokenizer"),blo=o(" (RAG model)"),vlo=l(),vs=a("li"),Zae=a("strong"),Flo=o("realm"),Tlo=o(" \u2014 "),sB=a("a"),Mlo=o("RealmTokenizer"),Elo=o(" or "),lB=a("a"),Clo=o("RealmTokenizerFast"),wlo=o(" (Realm model)"),Alo=l(),Fs=a("li"),ene=a("strong"),ylo=o("reformer"),Llo=o(" \u2014 "),iB=a("a"),xlo=o("ReformerTokenizer"),$lo=o(" or "),dB=a("a"),klo=o("ReformerTokenizerFast"),Slo=o(" (Reformer model)"),Rlo=l(),Ts=a("li"),one=a("strong"),Plo=o("rembert"),Blo=o(" \u2014 "),cB=a("a"),Ilo=o("RemBertTokenizer"),Nlo=o(" or "),fB=a("a"),qlo=o("RemBertTokenizerFast"),jlo=o(" (RemBERT model)"),Dlo=l(),Ms=a("li"),rne=a("strong"),Glo=o("retribert"),Olo=o(" \u2014 "),mB=a("a"),Vlo=o("RetriBertTokenizer"),Xlo=o(" or "),gB=a("a"),zlo=o("RetriBertTokenizerFast"),Wlo=o(" (RetriBERT model)"),Qlo=l(),Es=a("li"),tne=a("strong"),Hlo=o("roberta"),Ulo=o(" \u2014 "),hB=a("a"),Jlo=o("RobertaTokenizer"),Ylo=o(" or "),pB=a("a"),Klo=o("RobertaTokenizerFast"),Zlo=o(" (RoBERTa model)"),eio=l(),Cs=a("li"),ane=a("strong"),oio=o("roformer"),rio=o(" \u2014 "),_B=a("a"),tio=o("RoFormerTokenizer"),aio=o(" or "),uB=a("a"),nio=o("RoFormerTokenizerFast"),sio=o(" (RoFormer model)"),lio=l(),Jg=a("li"),nne=a("strong"),iio=o("speech_to_text"),dio=o(" \u2014 "),bB=a("a"),cio=o("Speech2TextTokenizer"),fio=o(" (Speech2Text model)"),mio=l(),Yg=a("li"),sne=a("strong"),gio=o("speech_to_text_2"),hio=o(" \u2014 "),vB=a("a"),pio=o("Speech2Text2Tokenizer"),_io=o(" (Speech2Text2 model)"),uio=l(),ws=a("li"),lne=a("strong"),bio=o("splinter"),vio=o(" \u2014 "),FB=a("a"),Fio=o("SplinterTokenizer"),Tio=o(" or "),TB=a("a"),Mio=o("SplinterTokenizerFast"),Eio=o(" (Splinter model)"),Cio=l(),As=a("li"),ine=a("strong"),wio=o("squeezebert"),Aio=o(" \u2014 "),MB=a("a"),yio=o("SqueezeBertTokenizer"),Lio=o(" or "),EB=a("a"),xio=o("SqueezeBertTokenizerFast"),$io=o(" (SqueezeBERT model)"),kio=l(),ys=a("li"),dne=a("strong"),Sio=o("t5"),Rio=o(" \u2014 "),CB=a("a"),Pio=o("T5Tokenizer"),Bio=o(" or "),wB=a("a"),Iio=o("T5TokenizerFast"),Nio=o(" (T5 model)"),qio=l(),Kg=a("li"),cne=a("strong"),jio=o("tapas"),Dio=o(" \u2014 "),AB=a("a"),Gio=o("TapasTokenizer"),Oio=o(" (TAPAS model)"),Vio=l(),Zg=a("li"),fne=a("strong"),Xio=o("tapex"),zio=o(" \u2014 "),yB=a("a"),Wio=o("TapexTokenizer"),Qio=o(" (TAPEX model)"),Hio=l(),eh=a("li"),mne=a("strong"),Uio=o("transfo-xl"),Jio=o(" \u2014 "),LB=a("a"),Yio=o("TransfoXLTokenizer"),Kio=o(" (Transformer-XL model)"),Zio=l(),Ls=a("li"),gne=a("strong"),edo=o("visual_bert"),odo=o(" \u2014 "),xB=a("a"),rdo=o("BertTokenizer"),tdo=o(" or "),$B=a("a"),ado=o("BertTokenizerFast"),ndo=o(" (VisualBert model)"),sdo=l(),oh=a("li"),hne=a("strong"),ldo=o("wav2vec2"),ido=o(" \u2014 "),kB=a("a"),ddo=o("Wav2Vec2CTCTokenizer"),cdo=o(" (Wav2Vec2 model)"),fdo=l(),rh=a("li"),pne=a("strong"),mdo=o("wav2vec2-conformer"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("Wav2Vec2CTCTokenizer"),pdo=o(" (Wav2Vec2-Conformer model)"),_do=l(),th=a("li"),_ne=a("strong"),udo=o("wav2vec2_phoneme"),bdo=o(" \u2014 "),RB=a("a"),vdo=o("Wav2Vec2PhonemeCTCTokenizer"),Fdo=o(" (Wav2Vec2Phoneme model)"),Tdo=l(),xs=a("li"),une=a("strong"),Mdo=o("xglm"),Edo=o(" \u2014 "),PB=a("a"),Cdo=o("XGLMTokenizer"),wdo=o(" or "),BB=a("a"),Ado=o("XGLMTokenizerFast"),ydo=o(" (XGLM model)"),Ldo=l(),ah=a("li"),bne=a("strong"),xdo=o("xlm"),$do=o(" \u2014 "),IB=a("a"),kdo=o("XLMTokenizer"),Sdo=o(" (XLM model)"),Rdo=l(),nh=a("li"),vne=a("strong"),Pdo=o("xlm-prophetnet"),Bdo=o(" \u2014 "),NB=a("a"),Ido=o("XLMProphetNetTokenizer"),Ndo=o(" (XLMProphetNet model)"),qdo=l(),$s=a("li"),Fne=a("strong"),jdo=o("xlm-roberta"),Ddo=o(" \u2014 "),qB=a("a"),Gdo=o("XLMRobertaTokenizer"),Odo=o(" or "),jB=a("a"),Vdo=o("XLMRobertaTokenizerFast"),Xdo=o(" (XLM-RoBERTa model)"),zdo=l(),ks=a("li"),Tne=a("strong"),Wdo=o("xlm-roberta-xl"),Qdo=o(" \u2014 "),DB=a("a"),Hdo=o("RobertaTokenizer"),Udo=o(" or "),GB=a("a"),Jdo=o("RobertaTokenizerFast"),Ydo=o(" (XLM-RoBERTa-XL model)"),Kdo=l(),Ss=a("li"),Mne=a("strong"),Zdo=o("xlnet"),eco=o(" \u2014 "),OB=a("a"),oco=o("XLNetTokenizer"),rco=o(" or "),VB=a("a"),tco=o("XLNetTokenizerFast"),aco=o(" (XLNet model)"),nco=l(),Rs=a("li"),Ene=a("strong"),sco=o("yoso"),lco=o(" \u2014 "),XB=a("a"),ico=o("AlbertTokenizer"),dco=o(" or "),zB=a("a"),cco=o("AlbertTokenizerFast"),fco=o(" (YOSO model)"),mco=l(),F(sh.$$.fragment),gco=l(),lh=a("div"),F(UA.$$.fragment),hco=l(),Cne=a("p"),pco=o("Register a new tokenizer in this mapping."),Vqe=l(),Ei=a("h2"),ih=a("a"),wne=a("span"),F(JA.$$.fragment),_co=l(),Ane=a("span"),uco=o("AutoFeatureExtractor"),Xqe=l(),Ao=a("div"),F(YA.$$.fragment),bco=l(),KA=a("p"),vco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=a("a"),Fco=o("AutoFeatureExtractor.from_pretrained()"),Tco=o(" class method."),Mco=l(),ZA=a("p"),Eco=o("This class cannot be instantiated directly using "),yne=a("code"),Cco=o("__init__()"),wco=o(" (throws an error)."),Aco=l(),He=a("div"),F(ey.$$.fragment),yco=l(),Lne=a("p"),Lco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xco=l(),La=a("p"),$co=o("The feature extractor class to instantiate is selected based on the "),xne=a("code"),kco=o("model_type"),Sco=o(` property of the config object
(either passed as an argument or loaded from `),$ne=a("code"),Rco=o("pretrained_model_name_or_path"),Pco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kne=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(":"),Nco=l(),Y=a("ul"),dh=a("li"),Sne=a("strong"),qco=o("beit"),jco=o(" \u2014 "),QB=a("a"),Dco=o("BeitFeatureExtractor"),Gco=o(" (BEiT model)"),Oco=l(),ch=a("li"),Rne=a("strong"),Vco=o("clip"),Xco=o(" \u2014 "),HB=a("a"),zco=o("CLIPFeatureExtractor"),Wco=o(" (CLIP model)"),Qco=l(),fh=a("li"),Pne=a("strong"),Hco=o("convnext"),Uco=o(" \u2014 "),UB=a("a"),Jco=o("ConvNextFeatureExtractor"),Yco=o(" (ConvNext model)"),Kco=l(),mh=a("li"),Bne=a("strong"),Zco=o("cvt"),efo=o(" \u2014 "),JB=a("a"),ofo=o("ConvNextFeatureExtractor"),rfo=o(" (CvT model)"),tfo=l(),gh=a("li"),Ine=a("strong"),afo=o("data2vec-audio"),nfo=o(" \u2014 "),YB=a("a"),sfo=o("Wav2Vec2FeatureExtractor"),lfo=o(" (Data2VecAudio model)"),ifo=l(),hh=a("li"),Nne=a("strong"),dfo=o("data2vec-vision"),cfo=o(" \u2014 "),KB=a("a"),ffo=o("BeitFeatureExtractor"),mfo=o(" (Data2VecVision model)"),gfo=l(),ph=a("li"),qne=a("strong"),hfo=o("deit"),pfo=o(" \u2014 "),ZB=a("a"),_fo=o("DeiTFeatureExtractor"),ufo=o(" (DeiT model)"),bfo=l(),_h=a("li"),jne=a("strong"),vfo=o("detr"),Ffo=o(" \u2014 "),eI=a("a"),Tfo=o("DetrFeatureExtractor"),Mfo=o(" (DETR model)"),Efo=l(),uh=a("li"),Dne=a("strong"),Cfo=o("dpt"),wfo=o(" \u2014 "),oI=a("a"),Afo=o("DPTFeatureExtractor"),yfo=o(" (DPT model)"),Lfo=l(),bh=a("li"),Gne=a("strong"),xfo=o("flava"),$fo=o(" \u2014 "),rI=a("a"),kfo=o("FlavaFeatureExtractor"),Sfo=o(" (Flava model)"),Rfo=l(),vh=a("li"),One=a("strong"),Pfo=o("glpn"),Bfo=o(" \u2014 "),tI=a("a"),Ifo=o("GLPNFeatureExtractor"),Nfo=o(" (GLPN model)"),qfo=l(),Fh=a("li"),Vne=a("strong"),jfo=o("hubert"),Dfo=o(" \u2014 "),aI=a("a"),Gfo=o("Wav2Vec2FeatureExtractor"),Ofo=o(" (Hubert model)"),Vfo=l(),Th=a("li"),Xne=a("strong"),Xfo=o("imagegpt"),zfo=o(" \u2014 "),nI=a("a"),Wfo=o("ImageGPTFeatureExtractor"),Qfo=o(" (ImageGPT model)"),Hfo=l(),Mh=a("li"),zne=a("strong"),Ufo=o("layoutlmv2"),Jfo=o(" \u2014 "),sI=a("a"),Yfo=o("LayoutLMv2FeatureExtractor"),Kfo=o(" (LayoutLMv2 model)"),Zfo=l(),Eh=a("li"),Wne=a("strong"),emo=o("layoutlmv3"),omo=o(" \u2014 "),lI=a("a"),rmo=o("LayoutLMv3FeatureExtractor"),tmo=o(" (LayoutLMv3 model)"),amo=l(),Ch=a("li"),Qne=a("strong"),nmo=o("maskformer"),smo=o(" \u2014 "),iI=a("a"),lmo=o("MaskFormerFeatureExtractor"),imo=o(" (MaskFormer model)"),dmo=l(),wh=a("li"),Hne=a("strong"),cmo=o("mobilevit"),fmo=o(" \u2014 "),dI=a("a"),mmo=o("MobileViTFeatureExtractor"),gmo=o(" (MobileViT model)"),hmo=l(),Ah=a("li"),Une=a("strong"),pmo=o("perceiver"),_mo=o(" \u2014 "),cI=a("a"),umo=o("PerceiverFeatureExtractor"),bmo=o(" (Perceiver model)"),vmo=l(),yh=a("li"),Jne=a("strong"),Fmo=o("poolformer"),Tmo=o(" \u2014 "),fI=a("a"),Mmo=o("PoolFormerFeatureExtractor"),Emo=o(" (PoolFormer model)"),Cmo=l(),Lh=a("li"),Yne=a("strong"),wmo=o("regnet"),Amo=o(" \u2014 "),mI=a("a"),ymo=o("ConvNextFeatureExtractor"),Lmo=o(" (RegNet model)"),xmo=l(),xh=a("li"),Kne=a("strong"),$mo=o("resnet"),kmo=o(" \u2014 "),gI=a("a"),Smo=o("ConvNextFeatureExtractor"),Rmo=o(" (ResNet model)"),Pmo=l(),$h=a("li"),Zne=a("strong"),Bmo=o("segformer"),Imo=o(" \u2014 "),hI=a("a"),Nmo=o("SegformerFeatureExtractor"),qmo=o(" (SegFormer model)"),jmo=l(),kh=a("li"),ese=a("strong"),Dmo=o("speech_to_text"),Gmo=o(" \u2014 "),pI=a("a"),Omo=o("Speech2TextFeatureExtractor"),Vmo=o(" (Speech2Text model)"),Xmo=l(),Sh=a("li"),ose=a("strong"),zmo=o("swin"),Wmo=o(" \u2014 "),_I=a("a"),Qmo=o("ViTFeatureExtractor"),Hmo=o(" (Swin model)"),Umo=l(),Rh=a("li"),rse=a("strong"),Jmo=o("van"),Ymo=o(" \u2014 "),uI=a("a"),Kmo=o("ConvNextFeatureExtractor"),Zmo=o(" (VAN model)"),ego=l(),Ph=a("li"),tse=a("strong"),ogo=o("vit"),rgo=o(" \u2014 "),bI=a("a"),tgo=o("ViTFeatureExtractor"),ago=o(" (ViT model)"),ngo=l(),Bh=a("li"),ase=a("strong"),sgo=o("vit_mae"),lgo=o(" \u2014 "),vI=a("a"),igo=o("ViTFeatureExtractor"),dgo=o(" (ViTMAE model)"),cgo=l(),Ih=a("li"),nse=a("strong"),fgo=o("wav2vec2"),mgo=o(" \u2014 "),FI=a("a"),ggo=o("Wav2Vec2FeatureExtractor"),hgo=o(" (Wav2Vec2 model)"),pgo=l(),Nh=a("li"),sse=a("strong"),_go=o("wav2vec2-conformer"),ugo=o(" \u2014 "),TI=a("a"),bgo=o("Wav2Vec2FeatureExtractor"),vgo=o(" (Wav2Vec2-Conformer model)"),Fgo=l(),qh=a("li"),lse=a("strong"),Tgo=o("yolos"),Mgo=o(" \u2014 "),MI=a("a"),Ego=o("YolosFeatureExtractor"),Cgo=o(" (YOLOS model)"),wgo=l(),F(jh.$$.fragment),Ago=l(),F(Dh.$$.fragment),ygo=l(),Gh=a("div"),F(oy.$$.fragment),Lgo=l(),ise=a("p"),xgo=o("Register a new feature extractor for this class."),zqe=l(),Ci=a("h2"),Oh=a("a"),dse=a("span"),F(ry.$$.fragment),$go=l(),cse=a("span"),kgo=o("AutoProcessor"),Wqe=l(),yo=a("div"),F(ty.$$.fragment),Sgo=l(),ay=a("p"),Rgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=a("a"),Pgo=o("AutoProcessor.from_pretrained()"),Bgo=o(" class method."),Igo=l(),ny=a("p"),Ngo=o("This class cannot be instantiated directly using "),fse=a("code"),qgo=o("__init__()"),jgo=o(" (throws an error)."),Dgo=l(),Ue=a("div"),F(sy.$$.fragment),Ggo=l(),mse=a("p"),Ogo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vgo=l(),wi=a("p"),Xgo=o("The processor class to instantiate is selected based on the "),gse=a("code"),zgo=o("model_type"),Wgo=o(` property of the config object (either
passed as an argument or loaded from `),hse=a("code"),Qgo=o("pretrained_model_name_or_path"),Hgo=o(" if possible):"),Ugo=l(),he=a("ul"),Vh=a("li"),pse=a("strong"),Jgo=o("clip"),Ygo=o(" \u2014 "),CI=a("a"),Kgo=o("CLIPProcessor"),Zgo=o(" (CLIP model)"),eho=l(),Xh=a("li"),_se=a("strong"),oho=o("flava"),rho=o(" \u2014 "),use=a("code"),tho=o("FLAVAProcessor"),aho=o(" (Flava model)"),nho=l(),zh=a("li"),bse=a("strong"),sho=o("layoutlmv2"),lho=o(" \u2014 "),wI=a("a"),iho=o("LayoutLMv2Processor"),dho=o(" (LayoutLMv2 model)"),cho=l(),Wh=a("li"),vse=a("strong"),fho=o("layoutlmv3"),mho=o(" \u2014 "),AI=a("a"),gho=o("LayoutLMv3Processor"),hho=o(" (LayoutLMv3 model)"),pho=l(),Qh=a("li"),Fse=a("strong"),_ho=o("layoutxlm"),uho=o(" \u2014 "),yI=a("a"),bho=o("LayoutXLMProcessor"),vho=o(" (LayoutXLM model)"),Fho=l(),Hh=a("li"),Tse=a("strong"),Tho=o("sew"),Mho=o(" \u2014 "),LI=a("a"),Eho=o("Wav2Vec2Processor"),Cho=o(" (SEW model)"),who=l(),Uh=a("li"),Mse=a("strong"),Aho=o("sew-d"),yho=o(" \u2014 "),xI=a("a"),Lho=o("Wav2Vec2Processor"),xho=o(" (SEW-D model)"),$ho=l(),Jh=a("li"),Ese=a("strong"),kho=o("speech_to_text"),Sho=o(" \u2014 "),$I=a("a"),Rho=o("Speech2TextProcessor"),Pho=o(" (Speech2Text model)"),Bho=l(),Yh=a("li"),Cse=a("strong"),Iho=o("speech_to_text_2"),Nho=o(" \u2014 "),kI=a("a"),qho=o("Speech2Text2Processor"),jho=o(" (Speech2Text2 model)"),Dho=l(),Kh=a("li"),wse=a("strong"),Gho=o("trocr"),Oho=o(" \u2014 "),SI=a("a"),Vho=o("TrOCRProcessor"),Xho=o(" (TrOCR model)"),zho=l(),Zh=a("li"),Ase=a("strong"),Who=o("unispeech"),Qho=o(" \u2014 "),RI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (UniSpeech model)"),Jho=l(),ep=a("li"),yse=a("strong"),Yho=o("unispeech-sat"),Kho=o(" \u2014 "),PI=a("a"),Zho=o("Wav2Vec2Processor"),epo=o(" (UniSpeechSat model)"),opo=l(),op=a("li"),Lse=a("strong"),rpo=o("vilt"),tpo=o(" \u2014 "),BI=a("a"),apo=o("ViltProcessor"),npo=o(" (ViLT model)"),spo=l(),rp=a("li"),xse=a("strong"),lpo=o("vision-text-dual-encoder"),ipo=o(" \u2014 "),II=a("a"),dpo=o("VisionTextDualEncoderProcessor"),cpo=o(" (VisionTextDualEncoder model)"),fpo=l(),tp=a("li"),$se=a("strong"),mpo=o("wav2vec2"),gpo=o(" \u2014 "),NI=a("a"),hpo=o("Wav2Vec2Processor"),ppo=o(" (Wav2Vec2 model)"),_po=l(),ap=a("li"),kse=a("strong"),upo=o("wav2vec2-conformer"),bpo=o(" \u2014 "),qI=a("a"),vpo=o("Wav2Vec2Processor"),Fpo=o(" (Wav2Vec2-Conformer model)"),Tpo=l(),np=a("li"),Sse=a("strong"),Mpo=o("wavlm"),Epo=o(" \u2014 "),jI=a("a"),Cpo=o("Wav2Vec2Processor"),wpo=o(" (WavLM model)"),Apo=l(),F(sp.$$.fragment),ypo=l(),F(lp.$$.fragment),Lpo=l(),ip=a("div"),F(ly.$$.fragment),xpo=l(),Rse=a("p"),$po=o("Register a new processor for this class."),Qqe=l(),Ai=a("h2"),dp=a("a"),Pse=a("span"),F(iy.$$.fragment),kpo=l(),Bse=a("span"),Spo=o("AutoModel"),Hqe=l(),Lo=a("div"),F(dy.$$.fragment),Rpo=l(),yi=a("p"),Ppo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=a("a"),Bpo=o("from_pretrained()"),Ipo=o(" class method or the "),GI=a("a"),Npo=o("from_config()"),qpo=o(` class
method.`),jpo=l(),cy=a("p"),Dpo=o("This class cannot be instantiated directly using "),Ise=a("code"),Gpo=o("__init__()"),Opo=o(" (throws an error)."),Vpo=l(),at=a("div"),F(fy.$$.fragment),Xpo=l(),Nse=a("p"),zpo=o("Instantiates one of the base model classes of the library from a configuration."),Wpo=l(),Li=a("p"),Qpo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),Hpo=o("not"),Upo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),Jpo=o("from_pretrained()"),Ypo=o(" to load the model weights."),Kpo=l(),F(cp.$$.fragment),Zpo=l(),Je=a("div"),F(my.$$.fragment),e_o=l(),jse=a("p"),o_o=o("Instantiate one of the base model classes of the library from a pretrained model."),r_o=l(),xa=a("p"),t_o=o("The model class to instantiate is selected based on the "),Dse=a("code"),a_o=o("model_type"),n_o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),s_o=o("pretrained_model_name_or_path"),l_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),i_o=o("pretrained_model_name_or_path"),d_o=o(":"),c_o=l(),x=a("ul"),fp=a("li"),Vse=a("strong"),f_o=o("albert"),m_o=o(" \u2014 "),VI=a("a"),g_o=o("AlbertModel"),h_o=o(" (ALBERT model)"),p_o=l(),mp=a("li"),Xse=a("strong"),__o=o("bart"),u_o=o(" \u2014 "),XI=a("a"),b_o=o("BartModel"),v_o=o(" (BART model)"),F_o=l(),gp=a("li"),zse=a("strong"),T_o=o("beit"),M_o=o(" \u2014 "),zI=a("a"),E_o=o("BeitModel"),C_o=o(" (BEiT model)"),w_o=l(),hp=a("li"),Wse=a("strong"),A_o=o("bert"),y_o=o(" \u2014 "),WI=a("a"),L_o=o("BertModel"),x_o=o(" (BERT model)"),$_o=l(),pp=a("li"),Qse=a("strong"),k_o=o("bert-generation"),S_o=o(" \u2014 "),QI=a("a"),R_o=o("BertGenerationEncoder"),P_o=o(" (Bert Generation model)"),B_o=l(),_p=a("li"),Hse=a("strong"),I_o=o("big_bird"),N_o=o(" \u2014 "),HI=a("a"),q_o=o("BigBirdModel"),j_o=o(" (BigBird model)"),D_o=l(),up=a("li"),Use=a("strong"),G_o=o("bigbird_pegasus"),O_o=o(" \u2014 "),UI=a("a"),V_o=o("BigBirdPegasusModel"),X_o=o(" (BigBirdPegasus model)"),z_o=l(),bp=a("li"),Jse=a("strong"),W_o=o("blenderbot"),Q_o=o(" \u2014 "),JI=a("a"),H_o=o("BlenderbotModel"),U_o=o(" (Blenderbot model)"),J_o=l(),vp=a("li"),Yse=a("strong"),Y_o=o("blenderbot-small"),K_o=o(" \u2014 "),YI=a("a"),Z_o=o("BlenderbotSmallModel"),euo=o(" (BlenderbotSmall model)"),ouo=l(),Fp=a("li"),Kse=a("strong"),ruo=o("camembert"),tuo=o(" \u2014 "),KI=a("a"),auo=o("CamembertModel"),nuo=o(" (CamemBERT model)"),suo=l(),Tp=a("li"),Zse=a("strong"),luo=o("canine"),iuo=o(" \u2014 "),ZI=a("a"),duo=o("CanineModel"),cuo=o(" (Canine model)"),fuo=l(),Mp=a("li"),ele=a("strong"),muo=o("clip"),guo=o(" \u2014 "),eN=a("a"),huo=o("CLIPModel"),puo=o(" (CLIP model)"),_uo=l(),Ep=a("li"),ole=a("strong"),uuo=o("convbert"),buo=o(" \u2014 "),oN=a("a"),vuo=o("ConvBertModel"),Fuo=o(" (ConvBERT model)"),Tuo=l(),Cp=a("li"),rle=a("strong"),Muo=o("convnext"),Euo=o(" \u2014 "),rN=a("a"),Cuo=o("ConvNextModel"),wuo=o(" (ConvNext model)"),Auo=l(),wp=a("li"),tle=a("strong"),yuo=o("ctrl"),Luo=o(" \u2014 "),tN=a("a"),xuo=o("CTRLModel"),$uo=o(" (CTRL model)"),kuo=l(),Ap=a("li"),ale=a("strong"),Suo=o("cvt"),Ruo=o(" \u2014 "),aN=a("a"),Puo=o("CvtModel"),Buo=o(" (CvT model)"),Iuo=l(),yp=a("li"),nle=a("strong"),Nuo=o("data2vec-audio"),quo=o(" \u2014 "),nN=a("a"),juo=o("Data2VecAudioModel"),Duo=o(" (Data2VecAudio model)"),Guo=l(),Lp=a("li"),sle=a("strong"),Ouo=o("data2vec-text"),Vuo=o(" \u2014 "),sN=a("a"),Xuo=o("Data2VecTextModel"),zuo=o(" (Data2VecText model)"),Wuo=l(),xp=a("li"),lle=a("strong"),Quo=o("data2vec-vision"),Huo=o(" \u2014 "),lN=a("a"),Uuo=o("Data2VecVisionModel"),Juo=o(" (Data2VecVision model)"),Yuo=l(),$p=a("li"),ile=a("strong"),Kuo=o("deberta"),Zuo=o(" \u2014 "),iN=a("a"),e1o=o("DebertaModel"),o1o=o(" (DeBERTa model)"),r1o=l(),kp=a("li"),dle=a("strong"),t1o=o("deberta-v2"),a1o=o(" \u2014 "),dN=a("a"),n1o=o("DebertaV2Model"),s1o=o(" (DeBERTa-v2 model)"),l1o=l(),Sp=a("li"),cle=a("strong"),i1o=o("decision_transformer"),d1o=o(" \u2014 "),cN=a("a"),c1o=o("DecisionTransformerModel"),f1o=o(" (Decision Transformer model)"),m1o=l(),Rp=a("li"),fle=a("strong"),g1o=o("deit"),h1o=o(" \u2014 "),fN=a("a"),p1o=o("DeiTModel"),_1o=o(" (DeiT model)"),u1o=l(),Pp=a("li"),mle=a("strong"),b1o=o("detr"),v1o=o(" \u2014 "),mN=a("a"),F1o=o("DetrModel"),T1o=o(" (DETR model)"),M1o=l(),Bp=a("li"),gle=a("strong"),E1o=o("distilbert"),C1o=o(" \u2014 "),gN=a("a"),w1o=o("DistilBertModel"),A1o=o(" (DistilBERT model)"),y1o=l(),Ip=a("li"),hle=a("strong"),L1o=o("dpr"),x1o=o(" \u2014 "),hN=a("a"),$1o=o("DPRQuestionEncoder"),k1o=o(" (DPR model)"),S1o=l(),Np=a("li"),ple=a("strong"),R1o=o("dpt"),P1o=o(" \u2014 "),pN=a("a"),B1o=o("DPTModel"),I1o=o(" (DPT model)"),N1o=l(),qp=a("li"),_le=a("strong"),q1o=o("electra"),j1o=o(" \u2014 "),_N=a("a"),D1o=o("ElectraModel"),G1o=o(" (ELECTRA model)"),O1o=l(),jp=a("li"),ule=a("strong"),V1o=o("flaubert"),X1o=o(" \u2014 "),uN=a("a"),z1o=o("FlaubertModel"),W1o=o(" (FlauBERT model)"),Q1o=l(),Dp=a("li"),ble=a("strong"),H1o=o("flava"),U1o=o(" \u2014 "),bN=a("a"),J1o=o("FlavaModel"),Y1o=o(" (Flava model)"),K1o=l(),Gp=a("li"),vle=a("strong"),Z1o=o("fnet"),ebo=o(" \u2014 "),vN=a("a"),obo=o("FNetModel"),rbo=o(" (FNet model)"),tbo=l(),Op=a("li"),Fle=a("strong"),abo=o("fsmt"),nbo=o(" \u2014 "),FN=a("a"),sbo=o("FSMTModel"),lbo=o(" (FairSeq Machine-Translation model)"),ibo=l(),Ps=a("li"),Tle=a("strong"),dbo=o("funnel"),cbo=o(" \u2014 "),TN=a("a"),fbo=o("FunnelModel"),mbo=o(" or "),MN=a("a"),gbo=o("FunnelBaseModel"),hbo=o(" (Funnel Transformer model)"),pbo=l(),Vp=a("li"),Mle=a("strong"),_bo=o("glpn"),ubo=o(" \u2014 "),EN=a("a"),bbo=o("GLPNModel"),vbo=o(" (GLPN model)"),Fbo=l(),Xp=a("li"),Ele=a("strong"),Tbo=o("gpt2"),Mbo=o(" \u2014 "),CN=a("a"),Ebo=o("GPT2Model"),Cbo=o(" (OpenAI GPT-2 model)"),wbo=l(),zp=a("li"),Cle=a("strong"),Abo=o("gpt_neo"),ybo=o(" \u2014 "),wN=a("a"),Lbo=o("GPTNeoModel"),xbo=o(" (GPT Neo model)"),$bo=l(),Wp=a("li"),wle=a("strong"),kbo=o("gpt_neox"),Sbo=o(" \u2014 "),AN=a("a"),Rbo=o("GPTNeoXModel"),Pbo=o(" (GPT NeoX model)"),Bbo=l(),Qp=a("li"),Ale=a("strong"),Ibo=o("gptj"),Nbo=o(" \u2014 "),yN=a("a"),qbo=o("GPTJModel"),jbo=o(" (GPT-J model)"),Dbo=l(),Hp=a("li"),yle=a("strong"),Gbo=o("hubert"),Obo=o(" \u2014 "),LN=a("a"),Vbo=o("HubertModel"),Xbo=o(" (Hubert model)"),zbo=l(),Up=a("li"),Lle=a("strong"),Wbo=o("ibert"),Qbo=o(" \u2014 "),xN=a("a"),Hbo=o("IBertModel"),Ubo=o(" (I-BERT model)"),Jbo=l(),Jp=a("li"),xle=a("strong"),Ybo=o("imagegpt"),Kbo=o(" \u2014 "),$N=a("a"),Zbo=o("ImageGPTModel"),e2o=o(" (ImageGPT model)"),o2o=l(),Yp=a("li"),$le=a("strong"),r2o=o("layoutlm"),t2o=o(" \u2014 "),kN=a("a"),a2o=o("LayoutLMModel"),n2o=o(" (LayoutLM model)"),s2o=l(),Kp=a("li"),kle=a("strong"),l2o=o("layoutlmv2"),i2o=o(" \u2014 "),SN=a("a"),d2o=o("LayoutLMv2Model"),c2o=o(" (LayoutLMv2 model)"),f2o=l(),Zp=a("li"),Sle=a("strong"),m2o=o("layoutlmv3"),g2o=o(" \u2014 "),RN=a("a"),h2o=o("LayoutLMv3Model"),p2o=o(" (LayoutLMv3 model)"),_2o=l(),e_=a("li"),Rle=a("strong"),u2o=o("led"),b2o=o(" \u2014 "),PN=a("a"),v2o=o("LEDModel"),F2o=o(" (LED model)"),T2o=l(),o_=a("li"),Ple=a("strong"),M2o=o("longformer"),E2o=o(" \u2014 "),BN=a("a"),C2o=o("LongformerModel"),w2o=o(" (Longformer model)"),A2o=l(),r_=a("li"),Ble=a("strong"),y2o=o("luke"),L2o=o(" \u2014 "),IN=a("a"),x2o=o("LukeModel"),$2o=o(" (LUKE model)"),k2o=l(),t_=a("li"),Ile=a("strong"),S2o=o("lxmert"),R2o=o(" \u2014 "),NN=a("a"),P2o=o("LxmertModel"),B2o=o(" (LXMERT model)"),I2o=l(),a_=a("li"),Nle=a("strong"),N2o=o("m2m_100"),q2o=o(" \u2014 "),qN=a("a"),j2o=o("M2M100Model"),D2o=o(" (M2M100 model)"),G2o=l(),n_=a("li"),qle=a("strong"),O2o=o("marian"),V2o=o(" \u2014 "),jN=a("a"),X2o=o("MarianModel"),z2o=o(" (Marian model)"),W2o=l(),s_=a("li"),jle=a("strong"),Q2o=o("maskformer"),H2o=o(" \u2014 "),DN=a("a"),U2o=o("MaskFormerModel"),J2o=o(" (MaskFormer model)"),Y2o=l(),l_=a("li"),Dle=a("strong"),K2o=o("mbart"),Z2o=o(" \u2014 "),GN=a("a"),e4o=o("MBartModel"),o4o=o(" (mBART model)"),r4o=l(),i_=a("li"),Gle=a("strong"),t4o=o("megatron-bert"),a4o=o(" \u2014 "),ON=a("a"),n4o=o("MegatronBertModel"),s4o=o(" (MegatronBert model)"),l4o=l(),d_=a("li"),Ole=a("strong"),i4o=o("mobilebert"),d4o=o(" \u2014 "),VN=a("a"),c4o=o("MobileBertModel"),f4o=o(" (MobileBERT model)"),m4o=l(),c_=a("li"),Vle=a("strong"),g4o=o("mobilevit"),h4o=o(" \u2014 "),XN=a("a"),p4o=o("MobileViTModel"),_4o=o(" (MobileViT model)"),u4o=l(),f_=a("li"),Xle=a("strong"),b4o=o("mpnet"),v4o=o(" \u2014 "),zN=a("a"),F4o=o("MPNetModel"),T4o=o(" (MPNet model)"),M4o=l(),m_=a("li"),zle=a("strong"),E4o=o("mt5"),C4o=o(" \u2014 "),WN=a("a"),w4o=o("MT5Model"),A4o=o(" (mT5 model)"),y4o=l(),g_=a("li"),Wle=a("strong"),L4o=o("nystromformer"),x4o=o(" \u2014 "),QN=a("a"),$4o=o("NystromformerModel"),k4o=o(" (Nystromformer model)"),S4o=l(),h_=a("li"),Qle=a("strong"),R4o=o("openai-gpt"),P4o=o(" \u2014 "),HN=a("a"),B4o=o("OpenAIGPTModel"),I4o=o(" (OpenAI GPT model)"),N4o=l(),p_=a("li"),Hle=a("strong"),q4o=o("opt"),j4o=o(" \u2014 "),UN=a("a"),D4o=o("OPTModel"),G4o=o(" (OPT model)"),O4o=l(),__=a("li"),Ule=a("strong"),V4o=o("pegasus"),X4o=o(" \u2014 "),JN=a("a"),z4o=o("PegasusModel"),W4o=o(" (Pegasus model)"),Q4o=l(),u_=a("li"),Jle=a("strong"),H4o=o("perceiver"),U4o=o(" \u2014 "),YN=a("a"),J4o=o("PerceiverModel"),Y4o=o(" (Perceiver model)"),K4o=l(),b_=a("li"),Yle=a("strong"),Z4o=o("plbart"),evo=o(" \u2014 "),KN=a("a"),ovo=o("PLBartModel"),rvo=o(" (PLBart model)"),tvo=l(),v_=a("li"),Kle=a("strong"),avo=o("poolformer"),nvo=o(" \u2014 "),ZN=a("a"),svo=o("PoolFormerModel"),lvo=o(" (PoolFormer model)"),ivo=l(),F_=a("li"),Zle=a("strong"),dvo=o("prophetnet"),cvo=o(" \u2014 "),eq=a("a"),fvo=o("ProphetNetModel"),mvo=o(" (ProphetNet model)"),gvo=l(),T_=a("li"),eie=a("strong"),hvo=o("qdqbert"),pvo=o(" \u2014 "),oq=a("a"),_vo=o("QDQBertModel"),uvo=o(" (QDQBert model)"),bvo=l(),M_=a("li"),oie=a("strong"),vvo=o("reformer"),Fvo=o(" \u2014 "),rq=a("a"),Tvo=o("ReformerModel"),Mvo=o(" (Reformer model)"),Evo=l(),E_=a("li"),rie=a("strong"),Cvo=o("regnet"),wvo=o(" \u2014 "),tq=a("a"),Avo=o("RegNetModel"),yvo=o(" (RegNet model)"),Lvo=l(),C_=a("li"),tie=a("strong"),xvo=o("rembert"),$vo=o(" \u2014 "),aq=a("a"),kvo=o("RemBertModel"),Svo=o(" (RemBERT model)"),Rvo=l(),w_=a("li"),aie=a("strong"),Pvo=o("resnet"),Bvo=o(" \u2014 "),nq=a("a"),Ivo=o("ResNetModel"),Nvo=o(" (ResNet model)"),qvo=l(),A_=a("li"),nie=a("strong"),jvo=o("retribert"),Dvo=o(" \u2014 "),sq=a("a"),Gvo=o("RetriBertModel"),Ovo=o(" (RetriBERT model)"),Vvo=l(),y_=a("li"),sie=a("strong"),Xvo=o("roberta"),zvo=o(" \u2014 "),lq=a("a"),Wvo=o("RobertaModel"),Qvo=o(" (RoBERTa model)"),Hvo=l(),L_=a("li"),lie=a("strong"),Uvo=o("roformer"),Jvo=o(" \u2014 "),iq=a("a"),Yvo=o("RoFormerModel"),Kvo=o(" (RoFormer model)"),Zvo=l(),x_=a("li"),iie=a("strong"),e5o=o("segformer"),o5o=o(" \u2014 "),dq=a("a"),r5o=o("SegformerModel"),t5o=o(" (SegFormer model)"),a5o=l(),$_=a("li"),die=a("strong"),n5o=o("sew"),s5o=o(" \u2014 "),cq=a("a"),l5o=o("SEWModel"),i5o=o(" (SEW model)"),d5o=l(),k_=a("li"),cie=a("strong"),c5o=o("sew-d"),f5o=o(" \u2014 "),fq=a("a"),m5o=o("SEWDModel"),g5o=o(" (SEW-D model)"),h5o=l(),S_=a("li"),fie=a("strong"),p5o=o("speech_to_text"),_5o=o(" \u2014 "),mq=a("a"),u5o=o("Speech2TextModel"),b5o=o(" (Speech2Text model)"),v5o=l(),R_=a("li"),mie=a("strong"),F5o=o("splinter"),T5o=o(" \u2014 "),gq=a("a"),M5o=o("SplinterModel"),E5o=o(" (Splinter model)"),C5o=l(),P_=a("li"),gie=a("strong"),w5o=o("squeezebert"),A5o=o(" \u2014 "),hq=a("a"),y5o=o("SqueezeBertModel"),L5o=o(" (SqueezeBERT model)"),x5o=l(),B_=a("li"),hie=a("strong"),$5o=o("swin"),k5o=o(" \u2014 "),pq=a("a"),S5o=o("SwinModel"),R5o=o(" (Swin model)"),P5o=l(),I_=a("li"),pie=a("strong"),B5o=o("t5"),I5o=o(" \u2014 "),_q=a("a"),N5o=o("T5Model"),q5o=o(" (T5 model)"),j5o=l(),N_=a("li"),_ie=a("strong"),D5o=o("tapas"),G5o=o(" \u2014 "),uq=a("a"),O5o=o("TapasModel"),V5o=o(" (TAPAS model)"),X5o=l(),q_=a("li"),uie=a("strong"),z5o=o("trajectory_transformer"),W5o=o(" \u2014 "),bq=a("a"),Q5o=o("TrajectoryTransformerModel"),H5o=o(" (Trajectory Transformer model)"),U5o=l(),j_=a("li"),bie=a("strong"),J5o=o("transfo-xl"),Y5o=o(" \u2014 "),vq=a("a"),K5o=o("TransfoXLModel"),Z5o=o(" (Transformer-XL model)"),e3o=l(),D_=a("li"),vie=a("strong"),o3o=o("unispeech"),r3o=o(" \u2014 "),Fq=a("a"),t3o=o("UniSpeechModel"),a3o=o(" (UniSpeech model)"),n3o=l(),G_=a("li"),Fie=a("strong"),s3o=o("unispeech-sat"),l3o=o(" \u2014 "),Tq=a("a"),i3o=o("UniSpeechSatModel"),d3o=o(" (UniSpeechSat model)"),c3o=l(),O_=a("li"),Tie=a("strong"),f3o=o("van"),m3o=o(" \u2014 "),Mq=a("a"),g3o=o("VanModel"),h3o=o(" (VAN model)"),p3o=l(),V_=a("li"),Mie=a("strong"),_3o=o("vilt"),u3o=o(" \u2014 "),Eq=a("a"),b3o=o("ViltModel"),v3o=o(" (ViLT model)"),F3o=l(),X_=a("li"),Eie=a("strong"),T3o=o("vision-text-dual-encoder"),M3o=o(" \u2014 "),Cq=a("a"),E3o=o("VisionTextDualEncoderModel"),C3o=o(" (VisionTextDualEncoder model)"),w3o=l(),z_=a("li"),Cie=a("strong"),A3o=o("visual_bert"),y3o=o(" \u2014 "),wq=a("a"),L3o=o("VisualBertModel"),x3o=o(" (VisualBert model)"),$3o=l(),W_=a("li"),wie=a("strong"),k3o=o("vit"),S3o=o(" \u2014 "),Aq=a("a"),R3o=o("ViTModel"),P3o=o(" (ViT model)"),B3o=l(),Q_=a("li"),Aie=a("strong"),I3o=o("vit_mae"),N3o=o(" \u2014 "),yq=a("a"),q3o=o("ViTMAEModel"),j3o=o(" (ViTMAE model)"),D3o=l(),H_=a("li"),yie=a("strong"),G3o=o("wav2vec2"),O3o=o(" \u2014 "),Lq=a("a"),V3o=o("Wav2Vec2Model"),X3o=o(" (Wav2Vec2 model)"),z3o=l(),U_=a("li"),Lie=a("strong"),W3o=o("wav2vec2-conformer"),Q3o=o(" \u2014 "),xq=a("a"),H3o=o("Wav2Vec2ConformerModel"),U3o=o(" (Wav2Vec2-Conformer model)"),J3o=l(),J_=a("li"),xie=a("strong"),Y3o=o("wavlm"),K3o=o(" \u2014 "),$q=a("a"),Z3o=o("WavLMModel"),eFo=o(" (WavLM model)"),oFo=l(),Y_=a("li"),$ie=a("strong"),rFo=o("xglm"),tFo=o(" \u2014 "),kq=a("a"),aFo=o("XGLMModel"),nFo=o(" (XGLM model)"),sFo=l(),K_=a("li"),kie=a("strong"),lFo=o("xlm"),iFo=o(" \u2014 "),Sq=a("a"),dFo=o("XLMModel"),cFo=o(" (XLM model)"),fFo=l(),Z_=a("li"),Sie=a("strong"),mFo=o("xlm-prophetnet"),gFo=o(" \u2014 "),Rq=a("a"),hFo=o("XLMProphetNetModel"),pFo=o(" (XLMProphetNet model)"),_Fo=l(),eu=a("li"),Rie=a("strong"),uFo=o("xlm-roberta"),bFo=o(" \u2014 "),Pq=a("a"),vFo=o("XLMRobertaModel"),FFo=o(" (XLM-RoBERTa model)"),TFo=l(),ou=a("li"),Pie=a("strong"),MFo=o("xlm-roberta-xl"),EFo=o(" \u2014 "),Bq=a("a"),CFo=o("XLMRobertaXLModel"),wFo=o(" (XLM-RoBERTa-XL model)"),AFo=l(),ru=a("li"),Bie=a("strong"),yFo=o("xlnet"),LFo=o(" \u2014 "),Iq=a("a"),xFo=o("XLNetModel"),$Fo=o(" (XLNet model)"),kFo=l(),tu=a("li"),Iie=a("strong"),SFo=o("yolos"),RFo=o(" \u2014 "),Nq=a("a"),PFo=o("YolosModel"),BFo=o(" (YOLOS model)"),IFo=l(),au=a("li"),Nie=a("strong"),NFo=o("yoso"),qFo=o(" \u2014 "),qq=a("a"),jFo=o("YosoModel"),DFo=o(" (YOSO model)"),GFo=l(),nu=a("p"),OFo=o("The model is set in evaluation mode by default using "),qie=a("code"),VFo=o("model.eval()"),XFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),zFo=o("model.train()"),WFo=l(),F(su.$$.fragment),Uqe=l(),xi=a("h2"),lu=a("a"),Die=a("span"),F(gy.$$.fragment),QFo=l(),Gie=a("span"),HFo=o("AutoModelForPreTraining"),Jqe=l(),xo=a("div"),F(hy.$$.fragment),UFo=l(),$i=a("p"),JFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),YFo=o("from_pretrained()"),KFo=o(" class method or the "),Dq=a("a"),ZFo=o("from_config()"),eTo=o(` class
method.`),oTo=l(),py=a("p"),rTo=o("This class cannot be instantiated directly using "),Oie=a("code"),tTo=o("__init__()"),aTo=o(" (throws an error)."),nTo=l(),nt=a("div"),F(_y.$$.fragment),sTo=l(),Vie=a("p"),lTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iTo=l(),ki=a("p"),dTo=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),cTo=o("not"),fTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),mTo=o("from_pretrained()"),gTo=o(" to load the model weights."),hTo=l(),F(iu.$$.fragment),pTo=l(),Ye=a("div"),F(uy.$$.fragment),_To=l(),zie=a("p"),uTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bTo=l(),$a=a("p"),vTo=o("The model class to instantiate is selected based on the "),Wie=a("code"),FTo=o("model_type"),TTo=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),MTo=o("pretrained_model_name_or_path"),ETo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),CTo=o("pretrained_model_name_or_path"),wTo=o(":"),ATo=l(),G=a("ul"),du=a("li"),Uie=a("strong"),yTo=o("albert"),LTo=o(" \u2014 "),Oq=a("a"),xTo=o("AlbertForPreTraining"),$To=o(" (ALBERT model)"),kTo=l(),cu=a("li"),Jie=a("strong"),STo=o("bart"),RTo=o(" \u2014 "),Vq=a("a"),PTo=o("BartForConditionalGeneration"),BTo=o(" (BART model)"),ITo=l(),fu=a("li"),Yie=a("strong"),NTo=o("bert"),qTo=o(" \u2014 "),Xq=a("a"),jTo=o("BertForPreTraining"),DTo=o(" (BERT model)"),GTo=l(),mu=a("li"),Kie=a("strong"),OTo=o("big_bird"),VTo=o(" \u2014 "),zq=a("a"),XTo=o("BigBirdForPreTraining"),zTo=o(" (BigBird model)"),WTo=l(),gu=a("li"),Zie=a("strong"),QTo=o("camembert"),HTo=o(" \u2014 "),Wq=a("a"),UTo=o("CamembertForMaskedLM"),JTo=o(" (CamemBERT model)"),YTo=l(),hu=a("li"),ede=a("strong"),KTo=o("ctrl"),ZTo=o(" \u2014 "),Qq=a("a"),e7o=o("CTRLLMHeadModel"),o7o=o(" (CTRL model)"),r7o=l(),pu=a("li"),ode=a("strong"),t7o=o("data2vec-text"),a7o=o(" \u2014 "),Hq=a("a"),n7o=o("Data2VecTextForMaskedLM"),s7o=o(" (Data2VecText model)"),l7o=l(),_u=a("li"),rde=a("strong"),i7o=o("deberta"),d7o=o(" \u2014 "),Uq=a("a"),c7o=o("DebertaForMaskedLM"),f7o=o(" (DeBERTa model)"),m7o=l(),uu=a("li"),tde=a("strong"),g7o=o("deberta-v2"),h7o=o(" \u2014 "),Jq=a("a"),p7o=o("DebertaV2ForMaskedLM"),_7o=o(" (DeBERTa-v2 model)"),u7o=l(),bu=a("li"),ade=a("strong"),b7o=o("distilbert"),v7o=o(" \u2014 "),Yq=a("a"),F7o=o("DistilBertForMaskedLM"),T7o=o(" (DistilBERT model)"),M7o=l(),vu=a("li"),nde=a("strong"),E7o=o("electra"),C7o=o(" \u2014 "),Kq=a("a"),w7o=o("ElectraForPreTraining"),A7o=o(" (ELECTRA model)"),y7o=l(),Fu=a("li"),sde=a("strong"),L7o=o("flaubert"),x7o=o(" \u2014 "),Zq=a("a"),$7o=o("FlaubertWithLMHeadModel"),k7o=o(" (FlauBERT model)"),S7o=l(),Tu=a("li"),lde=a("strong"),R7o=o("flava"),P7o=o(" \u2014 "),ej=a("a"),B7o=o("FlavaForPreTraining"),I7o=o(" (Flava model)"),N7o=l(),Mu=a("li"),ide=a("strong"),q7o=o("fnet"),j7o=o(" \u2014 "),oj=a("a"),D7o=o("FNetForPreTraining"),G7o=o(" (FNet model)"),O7o=l(),Eu=a("li"),dde=a("strong"),V7o=o("fsmt"),X7o=o(" \u2014 "),rj=a("a"),z7o=o("FSMTForConditionalGeneration"),W7o=o(" (FairSeq Machine-Translation model)"),Q7o=l(),Cu=a("li"),cde=a("strong"),H7o=o("funnel"),U7o=o(" \u2014 "),tj=a("a"),J7o=o("FunnelForPreTraining"),Y7o=o(" (Funnel Transformer model)"),K7o=l(),wu=a("li"),fde=a("strong"),Z7o=o("gpt2"),eMo=o(" \u2014 "),aj=a("a"),oMo=o("GPT2LMHeadModel"),rMo=o(" (OpenAI GPT-2 model)"),tMo=l(),Au=a("li"),mde=a("strong"),aMo=o("ibert"),nMo=o(" \u2014 "),nj=a("a"),sMo=o("IBertForMaskedLM"),lMo=o(" (I-BERT model)"),iMo=l(),yu=a("li"),gde=a("strong"),dMo=o("layoutlm"),cMo=o(" \u2014 "),sj=a("a"),fMo=o("LayoutLMForMaskedLM"),mMo=o(" (LayoutLM model)"),gMo=l(),Lu=a("li"),hde=a("strong"),hMo=o("longformer"),pMo=o(" \u2014 "),lj=a("a"),_Mo=o("LongformerForMaskedLM"),uMo=o(" (Longformer model)"),bMo=l(),xu=a("li"),pde=a("strong"),vMo=o("lxmert"),FMo=o(" \u2014 "),ij=a("a"),TMo=o("LxmertForPreTraining"),MMo=o(" (LXMERT model)"),EMo=l(),$u=a("li"),_de=a("strong"),CMo=o("megatron-bert"),wMo=o(" \u2014 "),dj=a("a"),AMo=o("MegatronBertForPreTraining"),yMo=o(" (MegatronBert model)"),LMo=l(),ku=a("li"),ude=a("strong"),xMo=o("mobilebert"),$Mo=o(" \u2014 "),cj=a("a"),kMo=o("MobileBertForPreTraining"),SMo=o(" (MobileBERT model)"),RMo=l(),Su=a("li"),bde=a("strong"),PMo=o("mpnet"),BMo=o(" \u2014 "),fj=a("a"),IMo=o("MPNetForMaskedLM"),NMo=o(" (MPNet model)"),qMo=l(),Ru=a("li"),vde=a("strong"),jMo=o("openai-gpt"),DMo=o(" \u2014 "),mj=a("a"),GMo=o("OpenAIGPTLMHeadModel"),OMo=o(" (OpenAI GPT model)"),VMo=l(),Pu=a("li"),Fde=a("strong"),XMo=o("retribert"),zMo=o(" \u2014 "),gj=a("a"),WMo=o("RetriBertModel"),QMo=o(" (RetriBERT model)"),HMo=l(),Bu=a("li"),Tde=a("strong"),UMo=o("roberta"),JMo=o(" \u2014 "),hj=a("a"),YMo=o("RobertaForMaskedLM"),KMo=o(" (RoBERTa model)"),ZMo=l(),Iu=a("li"),Mde=a("strong"),eEo=o("splinter"),oEo=o(" \u2014 "),pj=a("a"),rEo=o("SplinterForPreTraining"),tEo=o(" (Splinter model)"),aEo=l(),Nu=a("li"),Ede=a("strong"),nEo=o("squeezebert"),sEo=o(" \u2014 "),_j=a("a"),lEo=o("SqueezeBertForMaskedLM"),iEo=o(" (SqueezeBERT model)"),dEo=l(),qu=a("li"),Cde=a("strong"),cEo=o("t5"),fEo=o(" \u2014 "),uj=a("a"),mEo=o("T5ForConditionalGeneration"),gEo=o(" (T5 model)"),hEo=l(),ju=a("li"),wde=a("strong"),pEo=o("tapas"),_Eo=o(" \u2014 "),bj=a("a"),uEo=o("TapasForMaskedLM"),bEo=o(" (TAPAS model)"),vEo=l(),Du=a("li"),Ade=a("strong"),FEo=o("transfo-xl"),TEo=o(" \u2014 "),vj=a("a"),MEo=o("TransfoXLLMHeadModel"),EEo=o(" (Transformer-XL model)"),CEo=l(),Gu=a("li"),yde=a("strong"),wEo=o("unispeech"),AEo=o(" \u2014 "),Fj=a("a"),yEo=o("UniSpeechForPreTraining"),LEo=o(" (UniSpeech model)"),xEo=l(),Ou=a("li"),Lde=a("strong"),$Eo=o("unispeech-sat"),kEo=o(" \u2014 "),Tj=a("a"),SEo=o("UniSpeechSatForPreTraining"),REo=o(" (UniSpeechSat model)"),PEo=l(),Vu=a("li"),xde=a("strong"),BEo=o("visual_bert"),IEo=o(" \u2014 "),Mj=a("a"),NEo=o("VisualBertForPreTraining"),qEo=o(" (VisualBert model)"),jEo=l(),Xu=a("li"),$de=a("strong"),DEo=o("vit_mae"),GEo=o(" \u2014 "),Ej=a("a"),OEo=o("ViTMAEForPreTraining"),VEo=o(" (ViTMAE model)"),XEo=l(),zu=a("li"),kde=a("strong"),zEo=o("wav2vec2"),WEo=o(" \u2014 "),Cj=a("a"),QEo=o("Wav2Vec2ForPreTraining"),HEo=o(" (Wav2Vec2 model)"),UEo=l(),Wu=a("li"),Sde=a("strong"),JEo=o("wav2vec2-conformer"),YEo=o(" \u2014 "),wj=a("a"),KEo=o("Wav2Vec2ConformerForPreTraining"),ZEo=o(" (Wav2Vec2-Conformer model)"),eCo=l(),Qu=a("li"),Rde=a("strong"),oCo=o("xlm"),rCo=o(" \u2014 "),Aj=a("a"),tCo=o("XLMWithLMHeadModel"),aCo=o(" (XLM model)"),nCo=l(),Hu=a("li"),Pde=a("strong"),sCo=o("xlm-roberta"),lCo=o(" \u2014 "),yj=a("a"),iCo=o("XLMRobertaForMaskedLM"),dCo=o(" (XLM-RoBERTa model)"),cCo=l(),Uu=a("li"),Bde=a("strong"),fCo=o("xlm-roberta-xl"),mCo=o(" \u2014 "),Lj=a("a"),gCo=o("XLMRobertaXLForMaskedLM"),hCo=o(" (XLM-RoBERTa-XL model)"),pCo=l(),Ju=a("li"),Ide=a("strong"),_Co=o("xlnet"),uCo=o(" \u2014 "),xj=a("a"),bCo=o("XLNetLMHeadModel"),vCo=o(" (XLNet model)"),FCo=l(),Yu=a("p"),TCo=o("The model is set in evaluation mode by default using "),Nde=a("code"),MCo=o("model.eval()"),ECo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),CCo=o("model.train()"),wCo=l(),F(Ku.$$.fragment),Yqe=l(),Si=a("h2"),Zu=a("a"),jde=a("span"),F(by.$$.fragment),ACo=l(),Dde=a("span"),yCo=o("AutoModelForCausalLM"),Kqe=l(),$o=a("div"),F(vy.$$.fragment),LCo=l(),Ri=a("p"),xCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=a("a"),$Co=o("from_pretrained()"),kCo=o(" class method or the "),kj=a("a"),SCo=o("from_config()"),RCo=o(` class
method.`),PCo=l(),Fy=a("p"),BCo=o("This class cannot be instantiated directly using "),Gde=a("code"),ICo=o("__init__()"),NCo=o(" (throws an error)."),qCo=l(),st=a("div"),F(Ty.$$.fragment),jCo=l(),Ode=a("p"),DCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GCo=l(),Pi=a("p"),OCo=o(`Note:
Loading a model from its configuration file does `),Vde=a("strong"),VCo=o("not"),XCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),zCo=o("from_pretrained()"),WCo=o(" to load the model weights."),QCo=l(),F(e1.$$.fragment),HCo=l(),Ke=a("div"),F(My.$$.fragment),UCo=l(),Xde=a("p"),JCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YCo=l(),ka=a("p"),KCo=o("The model class to instantiate is selected based on the "),zde=a("code"),ZCo=o("model_type"),e0o=o(` property of the config object (either
passed as an argument or loaded from `),Wde=a("code"),o0o=o("pretrained_model_name_or_path"),r0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=a("code"),t0o=o("pretrained_model_name_or_path"),a0o=o(":"),n0o=l(),z=a("ul"),o1=a("li"),Hde=a("strong"),s0o=o("bart"),l0o=o(" \u2014 "),Rj=a("a"),i0o=o("BartForCausalLM"),d0o=o(" (BART model)"),c0o=l(),r1=a("li"),Ude=a("strong"),f0o=o("bert"),m0o=o(" \u2014 "),Pj=a("a"),g0o=o("BertLMHeadModel"),h0o=o(" (BERT model)"),p0o=l(),t1=a("li"),Jde=a("strong"),_0o=o("bert-generation"),u0o=o(" \u2014 "),Bj=a("a"),b0o=o("BertGenerationDecoder"),v0o=o(" (Bert Generation model)"),F0o=l(),a1=a("li"),Yde=a("strong"),T0o=o("big_bird"),M0o=o(" \u2014 "),Ij=a("a"),E0o=o("BigBirdForCausalLM"),C0o=o(" (BigBird model)"),w0o=l(),n1=a("li"),Kde=a("strong"),A0o=o("bigbird_pegasus"),y0o=o(" \u2014 "),Nj=a("a"),L0o=o("BigBirdPegasusForCausalLM"),x0o=o(" (BigBirdPegasus model)"),$0o=l(),s1=a("li"),Zde=a("strong"),k0o=o("blenderbot"),S0o=o(" \u2014 "),qj=a("a"),R0o=o("BlenderbotForCausalLM"),P0o=o(" (Blenderbot model)"),B0o=l(),l1=a("li"),ece=a("strong"),I0o=o("blenderbot-small"),N0o=o(" \u2014 "),jj=a("a"),q0o=o("BlenderbotSmallForCausalLM"),j0o=o(" (BlenderbotSmall model)"),D0o=l(),i1=a("li"),oce=a("strong"),G0o=o("camembert"),O0o=o(" \u2014 "),Dj=a("a"),V0o=o("CamembertForCausalLM"),X0o=o(" (CamemBERT model)"),z0o=l(),d1=a("li"),rce=a("strong"),W0o=o("ctrl"),Q0o=o(" \u2014 "),Gj=a("a"),H0o=o("CTRLLMHeadModel"),U0o=o(" (CTRL model)"),J0o=l(),c1=a("li"),tce=a("strong"),Y0o=o("data2vec-text"),K0o=o(" \u2014 "),Oj=a("a"),Z0o=o("Data2VecTextForCausalLM"),ewo=o(" (Data2VecText model)"),owo=l(),f1=a("li"),ace=a("strong"),rwo=o("electra"),two=o(" \u2014 "),Vj=a("a"),awo=o("ElectraForCausalLM"),nwo=o(" (ELECTRA model)"),swo=l(),m1=a("li"),nce=a("strong"),lwo=o("gpt2"),iwo=o(" \u2014 "),Xj=a("a"),dwo=o("GPT2LMHeadModel"),cwo=o(" (OpenAI GPT-2 model)"),fwo=l(),g1=a("li"),sce=a("strong"),mwo=o("gpt_neo"),gwo=o(" \u2014 "),zj=a("a"),hwo=o("GPTNeoForCausalLM"),pwo=o(" (GPT Neo model)"),_wo=l(),h1=a("li"),lce=a("strong"),uwo=o("gpt_neox"),bwo=o(" \u2014 "),Wj=a("a"),vwo=o("GPTNeoXForCausalLM"),Fwo=o(" (GPT NeoX model)"),Two=l(),p1=a("li"),ice=a("strong"),Mwo=o("gptj"),Ewo=o(" \u2014 "),Qj=a("a"),Cwo=o("GPTJForCausalLM"),wwo=o(" (GPT-J model)"),Awo=l(),_1=a("li"),dce=a("strong"),ywo=o("marian"),Lwo=o(" \u2014 "),Hj=a("a"),xwo=o("MarianForCausalLM"),$wo=o(" (Marian model)"),kwo=l(),u1=a("li"),cce=a("strong"),Swo=o("mbart"),Rwo=o(" \u2014 "),Uj=a("a"),Pwo=o("MBartForCausalLM"),Bwo=o(" (mBART model)"),Iwo=l(),b1=a("li"),fce=a("strong"),Nwo=o("megatron-bert"),qwo=o(" \u2014 "),Jj=a("a"),jwo=o("MegatronBertForCausalLM"),Dwo=o(" (MegatronBert model)"),Gwo=l(),v1=a("li"),mce=a("strong"),Owo=o("openai-gpt"),Vwo=o(" \u2014 "),Yj=a("a"),Xwo=o("OpenAIGPTLMHeadModel"),zwo=o(" (OpenAI GPT model)"),Wwo=l(),F1=a("li"),gce=a("strong"),Qwo=o("opt"),Hwo=o(" \u2014 "),Kj=a("a"),Uwo=o("OPTForCausalLM"),Jwo=o(" (OPT model)"),Ywo=l(),T1=a("li"),hce=a("strong"),Kwo=o("pegasus"),Zwo=o(" \u2014 "),Zj=a("a"),e6o=o("PegasusForCausalLM"),o6o=o(" (Pegasus model)"),r6o=l(),M1=a("li"),pce=a("strong"),t6o=o("plbart"),a6o=o(" \u2014 "),eD=a("a"),n6o=o("PLBartForCausalLM"),s6o=o(" (PLBart model)"),l6o=l(),E1=a("li"),_ce=a("strong"),i6o=o("prophetnet"),d6o=o(" \u2014 "),oD=a("a"),c6o=o("ProphetNetForCausalLM"),f6o=o(" (ProphetNet model)"),m6o=l(),C1=a("li"),uce=a("strong"),g6o=o("qdqbert"),h6o=o(" \u2014 "),rD=a("a"),p6o=o("QDQBertLMHeadModel"),_6o=o(" (QDQBert model)"),u6o=l(),w1=a("li"),bce=a("strong"),b6o=o("reformer"),v6o=o(" \u2014 "),tD=a("a"),F6o=o("ReformerModelWithLMHead"),T6o=o(" (Reformer model)"),M6o=l(),A1=a("li"),vce=a("strong"),E6o=o("rembert"),C6o=o(" \u2014 "),aD=a("a"),w6o=o("RemBertForCausalLM"),A6o=o(" (RemBERT model)"),y6o=l(),y1=a("li"),Fce=a("strong"),L6o=o("roberta"),x6o=o(" \u2014 "),nD=a("a"),$6o=o("RobertaForCausalLM"),k6o=o(" (RoBERTa model)"),S6o=l(),L1=a("li"),Tce=a("strong"),R6o=o("roformer"),P6o=o(" \u2014 "),sD=a("a"),B6o=o("RoFormerForCausalLM"),I6o=o(" (RoFormer model)"),N6o=l(),x1=a("li"),Mce=a("strong"),q6o=o("speech_to_text_2"),j6o=o(" \u2014 "),lD=a("a"),D6o=o("Speech2Text2ForCausalLM"),G6o=o(" (Speech2Text2 model)"),O6o=l(),$1=a("li"),Ece=a("strong"),V6o=o("transfo-xl"),X6o=o(" \u2014 "),iD=a("a"),z6o=o("TransfoXLLMHeadModel"),W6o=o(" (Transformer-XL model)"),Q6o=l(),k1=a("li"),Cce=a("strong"),H6o=o("trocr"),U6o=o(" \u2014 "),dD=a("a"),J6o=o("TrOCRForCausalLM"),Y6o=o(" (TrOCR model)"),K6o=l(),S1=a("li"),wce=a("strong"),Z6o=o("xglm"),eAo=o(" \u2014 "),cD=a("a"),oAo=o("XGLMForCausalLM"),rAo=o(" (XGLM model)"),tAo=l(),R1=a("li"),Ace=a("strong"),aAo=o("xlm"),nAo=o(" \u2014 "),fD=a("a"),sAo=o("XLMWithLMHeadModel"),lAo=o(" (XLM model)"),iAo=l(),P1=a("li"),yce=a("strong"),dAo=o("xlm-prophetnet"),cAo=o(" \u2014 "),mD=a("a"),fAo=o("XLMProphetNetForCausalLM"),mAo=o(" (XLMProphetNet model)"),gAo=l(),B1=a("li"),Lce=a("strong"),hAo=o("xlm-roberta"),pAo=o(" \u2014 "),gD=a("a"),_Ao=o("XLMRobertaForCausalLM"),uAo=o(" (XLM-RoBERTa model)"),bAo=l(),I1=a("li"),xce=a("strong"),vAo=o("xlm-roberta-xl"),FAo=o(" \u2014 "),hD=a("a"),TAo=o("XLMRobertaXLForCausalLM"),MAo=o(" (XLM-RoBERTa-XL model)"),EAo=l(),N1=a("li"),$ce=a("strong"),CAo=o("xlnet"),wAo=o(" \u2014 "),pD=a("a"),AAo=o("XLNetLMHeadModel"),yAo=o(" (XLNet model)"),LAo=l(),q1=a("p"),xAo=o("The model is set in evaluation mode by default using "),kce=a("code"),$Ao=o("model.eval()"),kAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),SAo=o("model.train()"),RAo=l(),F(j1.$$.fragment),Zqe=l(),Bi=a("h2"),D1=a("a"),Rce=a("span"),F(Ey.$$.fragment),PAo=l(),Pce=a("span"),BAo=o("AutoModelForMaskedLM"),eje=l(),ko=a("div"),F(Cy.$$.fragment),IAo=l(),Ii=a("p"),NAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_D=a("a"),qAo=o("from_pretrained()"),jAo=o(" class method or the "),uD=a("a"),DAo=o("from_config()"),GAo=o(` class
method.`),OAo=l(),wy=a("p"),VAo=o("This class cannot be instantiated directly using "),Bce=a("code"),XAo=o("__init__()"),zAo=o(" (throws an error)."),WAo=l(),lt=a("div"),F(Ay.$$.fragment),QAo=l(),Ice=a("p"),HAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UAo=l(),Ni=a("p"),JAo=o(`Note:
Loading a model from its configuration file does `),Nce=a("strong"),YAo=o("not"),KAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),ZAo=o("from_pretrained()"),eyo=o(" to load the model weights."),oyo=l(),F(G1.$$.fragment),ryo=l(),Ze=a("div"),F(yy.$$.fragment),tyo=l(),qce=a("p"),ayo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nyo=l(),Sa=a("p"),syo=o("The model class to instantiate is selected based on the "),jce=a("code"),lyo=o("model_type"),iyo=o(` property of the config object (either
passed as an argument or loaded from `),Dce=a("code"),dyo=o("pretrained_model_name_or_path"),cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=a("code"),fyo=o("pretrained_model_name_or_path"),myo=o(":"),gyo=l(),Q=a("ul"),O1=a("li"),Oce=a("strong"),hyo=o("albert"),pyo=o(" \u2014 "),vD=a("a"),_yo=o("AlbertForMaskedLM"),uyo=o(" (ALBERT model)"),byo=l(),V1=a("li"),Vce=a("strong"),vyo=o("bart"),Fyo=o(" \u2014 "),FD=a("a"),Tyo=o("BartForConditionalGeneration"),Myo=o(" (BART model)"),Eyo=l(),X1=a("li"),Xce=a("strong"),Cyo=o("bert"),wyo=o(" \u2014 "),TD=a("a"),Ayo=o("BertForMaskedLM"),yyo=o(" (BERT model)"),Lyo=l(),z1=a("li"),zce=a("strong"),xyo=o("big_bird"),$yo=o(" \u2014 "),MD=a("a"),kyo=o("BigBirdForMaskedLM"),Syo=o(" (BigBird model)"),Ryo=l(),W1=a("li"),Wce=a("strong"),Pyo=o("camembert"),Byo=o(" \u2014 "),ED=a("a"),Iyo=o("CamembertForMaskedLM"),Nyo=o(" (CamemBERT model)"),qyo=l(),Q1=a("li"),Qce=a("strong"),jyo=o("convbert"),Dyo=o(" \u2014 "),CD=a("a"),Gyo=o("ConvBertForMaskedLM"),Oyo=o(" (ConvBERT model)"),Vyo=l(),H1=a("li"),Hce=a("strong"),Xyo=o("data2vec-text"),zyo=o(" \u2014 "),wD=a("a"),Wyo=o("Data2VecTextForMaskedLM"),Qyo=o(" (Data2VecText model)"),Hyo=l(),U1=a("li"),Uce=a("strong"),Uyo=o("deberta"),Jyo=o(" \u2014 "),AD=a("a"),Yyo=o("DebertaForMaskedLM"),Kyo=o(" (DeBERTa model)"),Zyo=l(),J1=a("li"),Jce=a("strong"),eLo=o("deberta-v2"),oLo=o(" \u2014 "),yD=a("a"),rLo=o("DebertaV2ForMaskedLM"),tLo=o(" (DeBERTa-v2 model)"),aLo=l(),Y1=a("li"),Yce=a("strong"),nLo=o("distilbert"),sLo=o(" \u2014 "),LD=a("a"),lLo=o("DistilBertForMaskedLM"),iLo=o(" (DistilBERT model)"),dLo=l(),K1=a("li"),Kce=a("strong"),cLo=o("electra"),fLo=o(" \u2014 "),xD=a("a"),mLo=o("ElectraForMaskedLM"),gLo=o(" (ELECTRA model)"),hLo=l(),Z1=a("li"),Zce=a("strong"),pLo=o("flaubert"),_Lo=o(" \u2014 "),$D=a("a"),uLo=o("FlaubertWithLMHeadModel"),bLo=o(" (FlauBERT model)"),vLo=l(),eb=a("li"),efe=a("strong"),FLo=o("fnet"),TLo=o(" \u2014 "),kD=a("a"),MLo=o("FNetForMaskedLM"),ELo=o(" (FNet model)"),CLo=l(),ob=a("li"),ofe=a("strong"),wLo=o("funnel"),ALo=o(" \u2014 "),SD=a("a"),yLo=o("FunnelForMaskedLM"),LLo=o(" (Funnel Transformer model)"),xLo=l(),rb=a("li"),rfe=a("strong"),$Lo=o("ibert"),kLo=o(" \u2014 "),RD=a("a"),SLo=o("IBertForMaskedLM"),RLo=o(" (I-BERT model)"),PLo=l(),tb=a("li"),tfe=a("strong"),BLo=o("layoutlm"),ILo=o(" \u2014 "),PD=a("a"),NLo=o("LayoutLMForMaskedLM"),qLo=o(" (LayoutLM model)"),jLo=l(),ab=a("li"),afe=a("strong"),DLo=o("longformer"),GLo=o(" \u2014 "),BD=a("a"),OLo=o("LongformerForMaskedLM"),VLo=o(" (Longformer model)"),XLo=l(),nb=a("li"),nfe=a("strong"),zLo=o("mbart"),WLo=o(" \u2014 "),ID=a("a"),QLo=o("MBartForConditionalGeneration"),HLo=o(" (mBART model)"),ULo=l(),sb=a("li"),sfe=a("strong"),JLo=o("megatron-bert"),YLo=o(" \u2014 "),ND=a("a"),KLo=o("MegatronBertForMaskedLM"),ZLo=o(" (MegatronBert model)"),e8o=l(),lb=a("li"),lfe=a("strong"),o8o=o("mobilebert"),r8o=o(" \u2014 "),qD=a("a"),t8o=o("MobileBertForMaskedLM"),a8o=o(" (MobileBERT model)"),n8o=l(),ib=a("li"),ife=a("strong"),s8o=o("mpnet"),l8o=o(" \u2014 "),jD=a("a"),i8o=o("MPNetForMaskedLM"),d8o=o(" (MPNet model)"),c8o=l(),db=a("li"),dfe=a("strong"),f8o=o("nystromformer"),m8o=o(" \u2014 "),DD=a("a"),g8o=o("NystromformerForMaskedLM"),h8o=o(" (Nystromformer model)"),p8o=l(),cb=a("li"),cfe=a("strong"),_8o=o("perceiver"),u8o=o(" \u2014 "),GD=a("a"),b8o=o("PerceiverForMaskedLM"),v8o=o(" (Perceiver model)"),F8o=l(),fb=a("li"),ffe=a("strong"),T8o=o("qdqbert"),M8o=o(" \u2014 "),OD=a("a"),E8o=o("QDQBertForMaskedLM"),C8o=o(" (QDQBert model)"),w8o=l(),mb=a("li"),mfe=a("strong"),A8o=o("reformer"),y8o=o(" \u2014 "),VD=a("a"),L8o=o("ReformerForMaskedLM"),x8o=o(" (Reformer model)"),$8o=l(),gb=a("li"),gfe=a("strong"),k8o=o("rembert"),S8o=o(" \u2014 "),XD=a("a"),R8o=o("RemBertForMaskedLM"),P8o=o(" (RemBERT model)"),B8o=l(),hb=a("li"),hfe=a("strong"),I8o=o("roberta"),N8o=o(" \u2014 "),zD=a("a"),q8o=o("RobertaForMaskedLM"),j8o=o(" (RoBERTa model)"),D8o=l(),pb=a("li"),pfe=a("strong"),G8o=o("roformer"),O8o=o(" \u2014 "),WD=a("a"),V8o=o("RoFormerForMaskedLM"),X8o=o(" (RoFormer model)"),z8o=l(),_b=a("li"),_fe=a("strong"),W8o=o("squeezebert"),Q8o=o(" \u2014 "),QD=a("a"),H8o=o("SqueezeBertForMaskedLM"),U8o=o(" (SqueezeBERT model)"),J8o=l(),ub=a("li"),ufe=a("strong"),Y8o=o("tapas"),K8o=o(" \u2014 "),HD=a("a"),Z8o=o("TapasForMaskedLM"),e9o=o(" (TAPAS model)"),o9o=l(),bb=a("li"),bfe=a("strong"),r9o=o("wav2vec2"),t9o=o(" \u2014 "),vfe=a("code"),a9o=o("Wav2Vec2ForMaskedLM"),n9o=o(" (Wav2Vec2 model)"),s9o=l(),vb=a("li"),Ffe=a("strong"),l9o=o("xlm"),i9o=o(" \u2014 "),UD=a("a"),d9o=o("XLMWithLMHeadModel"),c9o=o(" (XLM model)"),f9o=l(),Fb=a("li"),Tfe=a("strong"),m9o=o("xlm-roberta"),g9o=o(" \u2014 "),JD=a("a"),h9o=o("XLMRobertaForMaskedLM"),p9o=o(" (XLM-RoBERTa model)"),_9o=l(),Tb=a("li"),Mfe=a("strong"),u9o=o("xlm-roberta-xl"),b9o=o(" \u2014 "),YD=a("a"),v9o=o("XLMRobertaXLForMaskedLM"),F9o=o(" (XLM-RoBERTa-XL model)"),T9o=l(),Mb=a("li"),Efe=a("strong"),M9o=o("yoso"),E9o=o(" \u2014 "),KD=a("a"),C9o=o("YosoForMaskedLM"),w9o=o(" (YOSO model)"),A9o=l(),Eb=a("p"),y9o=o("The model is set in evaluation mode by default using "),Cfe=a("code"),L9o=o("model.eval()"),x9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),$9o=o("model.train()"),k9o=l(),F(Cb.$$.fragment),oje=l(),qi=a("h2"),wb=a("a"),Afe=a("span"),F(Ly.$$.fragment),S9o=l(),yfe=a("span"),R9o=o("AutoModelForSeq2SeqLM"),rje=l(),So=a("div"),F(xy.$$.fragment),P9o=l(),ji=a("p"),B9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=a("a"),I9o=o("from_pretrained()"),N9o=o(" class method or the "),eG=a("a"),q9o=o("from_config()"),j9o=o(` class
method.`),D9o=l(),$y=a("p"),G9o=o("This class cannot be instantiated directly using "),Lfe=a("code"),O9o=o("__init__()"),V9o=o(" (throws an error)."),X9o=l(),it=a("div"),F(ky.$$.fragment),z9o=l(),xfe=a("p"),W9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q9o=l(),Di=a("p"),H9o=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),U9o=o("not"),J9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),Y9o=o("from_pretrained()"),K9o=o(" to load the model weights."),Z9o=l(),F(Ab.$$.fragment),exo=l(),eo=a("div"),F(Sy.$$.fragment),oxo=l(),kfe=a("p"),rxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),txo=l(),Ra=a("p"),axo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),nxo=o("model_type"),sxo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),lxo=o("pretrained_model_name_or_path"),ixo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),dxo=o("pretrained_model_name_or_path"),cxo=o(":"),fxo=l(),_e=a("ul"),yb=a("li"),Bfe=a("strong"),mxo=o("bart"),gxo=o(" \u2014 "),rG=a("a"),hxo=o("BartForConditionalGeneration"),pxo=o(" (BART model)"),_xo=l(),Lb=a("li"),Ife=a("strong"),uxo=o("bigbird_pegasus"),bxo=o(" \u2014 "),tG=a("a"),vxo=o("BigBirdPegasusForConditionalGeneration"),Fxo=o(" (BigBirdPegasus model)"),Txo=l(),xb=a("li"),Nfe=a("strong"),Mxo=o("blenderbot"),Exo=o(" \u2014 "),aG=a("a"),Cxo=o("BlenderbotForConditionalGeneration"),wxo=o(" (Blenderbot model)"),Axo=l(),$b=a("li"),qfe=a("strong"),yxo=o("blenderbot-small"),Lxo=o(" \u2014 "),nG=a("a"),xxo=o("BlenderbotSmallForConditionalGeneration"),$xo=o(" (BlenderbotSmall model)"),kxo=l(),kb=a("li"),jfe=a("strong"),Sxo=o("encoder-decoder"),Rxo=o(" \u2014 "),sG=a("a"),Pxo=o("EncoderDecoderModel"),Bxo=o(" (Encoder decoder model)"),Ixo=l(),Sb=a("li"),Dfe=a("strong"),Nxo=o("fsmt"),qxo=o(" \u2014 "),lG=a("a"),jxo=o("FSMTForConditionalGeneration"),Dxo=o(" (FairSeq Machine-Translation model)"),Gxo=l(),Rb=a("li"),Gfe=a("strong"),Oxo=o("led"),Vxo=o(" \u2014 "),iG=a("a"),Xxo=o("LEDForConditionalGeneration"),zxo=o(" (LED model)"),Wxo=l(),Pb=a("li"),Ofe=a("strong"),Qxo=o("m2m_100"),Hxo=o(" \u2014 "),dG=a("a"),Uxo=o("M2M100ForConditionalGeneration"),Jxo=o(" (M2M100 model)"),Yxo=l(),Bb=a("li"),Vfe=a("strong"),Kxo=o("marian"),Zxo=o(" \u2014 "),cG=a("a"),e$o=o("MarianMTModel"),o$o=o(" (Marian model)"),r$o=l(),Ib=a("li"),Xfe=a("strong"),t$o=o("mbart"),a$o=o(" \u2014 "),fG=a("a"),n$o=o("MBartForConditionalGeneration"),s$o=o(" (mBART model)"),l$o=l(),Nb=a("li"),zfe=a("strong"),i$o=o("mt5"),d$o=o(" \u2014 "),mG=a("a"),c$o=o("MT5ForConditionalGeneration"),f$o=o(" (mT5 model)"),m$o=l(),qb=a("li"),Wfe=a("strong"),g$o=o("pegasus"),h$o=o(" \u2014 "),gG=a("a"),p$o=o("PegasusForConditionalGeneration"),_$o=o(" (Pegasus model)"),u$o=l(),jb=a("li"),Qfe=a("strong"),b$o=o("plbart"),v$o=o(" \u2014 "),hG=a("a"),F$o=o("PLBartForConditionalGeneration"),T$o=o(" (PLBart model)"),M$o=l(),Db=a("li"),Hfe=a("strong"),E$o=o("prophetnet"),C$o=o(" \u2014 "),pG=a("a"),w$o=o("ProphetNetForConditionalGeneration"),A$o=o(" (ProphetNet model)"),y$o=l(),Gb=a("li"),Ufe=a("strong"),L$o=o("t5"),x$o=o(" \u2014 "),_G=a("a"),$$o=o("T5ForConditionalGeneration"),k$o=o(" (T5 model)"),S$o=l(),Ob=a("li"),Jfe=a("strong"),R$o=o("xlm-prophetnet"),P$o=o(" \u2014 "),uG=a("a"),B$o=o("XLMProphetNetForConditionalGeneration"),I$o=o(" (XLMProphetNet model)"),N$o=l(),Vb=a("p"),q$o=o("The model is set in evaluation mode by default using "),Yfe=a("code"),j$o=o("model.eval()"),D$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),G$o=o("model.train()"),O$o=l(),F(Xb.$$.fragment),tje=l(),Gi=a("h2"),zb=a("a"),Zfe=a("span"),F(Ry.$$.fragment),V$o=l(),eme=a("span"),X$o=o("AutoModelForSequenceClassification"),aje=l(),Ro=a("div"),F(Py.$$.fragment),z$o=l(),Oi=a("p"),W$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bG=a("a"),Q$o=o("from_pretrained()"),H$o=o(" class method or the "),vG=a("a"),U$o=o("from_config()"),J$o=o(` class
method.`),Y$o=l(),By=a("p"),K$o=o("This class cannot be instantiated directly using "),ome=a("code"),Z$o=o("__init__()"),eko=o(" (throws an error)."),oko=l(),dt=a("div"),F(Iy.$$.fragment),rko=l(),rme=a("p"),tko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ako=l(),Vi=a("p"),nko=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),sko=o("not"),lko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),iko=o("from_pretrained()"),dko=o(" to load the model weights."),cko=l(),F(Wb.$$.fragment),fko=l(),oo=a("div"),F(Ny.$$.fragment),mko=l(),ame=a("p"),gko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hko=l(),Pa=a("p"),pko=o("The model class to instantiate is selected based on the "),nme=a("code"),_ko=o("model_type"),uko=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),Fko=o("pretrained_model_name_or_path"),Tko=o(":"),Mko=l(),N=a("ul"),Qb=a("li"),ime=a("strong"),Eko=o("albert"),Cko=o(" \u2014 "),TG=a("a"),wko=o("AlbertForSequenceClassification"),Ako=o(" (ALBERT model)"),yko=l(),Hb=a("li"),dme=a("strong"),Lko=o("bart"),xko=o(" \u2014 "),MG=a("a"),$ko=o("BartForSequenceClassification"),kko=o(" (BART model)"),Sko=l(),Ub=a("li"),cme=a("strong"),Rko=o("bert"),Pko=o(" \u2014 "),EG=a("a"),Bko=o("BertForSequenceClassification"),Iko=o(" (BERT model)"),Nko=l(),Jb=a("li"),fme=a("strong"),qko=o("big_bird"),jko=o(" \u2014 "),CG=a("a"),Dko=o("BigBirdForSequenceClassification"),Gko=o(" (BigBird model)"),Oko=l(),Yb=a("li"),mme=a("strong"),Vko=o("bigbird_pegasus"),Xko=o(" \u2014 "),wG=a("a"),zko=o("BigBirdPegasusForSequenceClassification"),Wko=o(" (BigBirdPegasus model)"),Qko=l(),Kb=a("li"),gme=a("strong"),Hko=o("camembert"),Uko=o(" \u2014 "),AG=a("a"),Jko=o("CamembertForSequenceClassification"),Yko=o(" (CamemBERT model)"),Kko=l(),Zb=a("li"),hme=a("strong"),Zko=o("canine"),eSo=o(" \u2014 "),yG=a("a"),oSo=o("CanineForSequenceClassification"),rSo=o(" (Canine model)"),tSo=l(),e2=a("li"),pme=a("strong"),aSo=o("convbert"),nSo=o(" \u2014 "),LG=a("a"),sSo=o("ConvBertForSequenceClassification"),lSo=o(" (ConvBERT model)"),iSo=l(),o2=a("li"),_me=a("strong"),dSo=o("ctrl"),cSo=o(" \u2014 "),xG=a("a"),fSo=o("CTRLForSequenceClassification"),mSo=o(" (CTRL model)"),gSo=l(),r2=a("li"),ume=a("strong"),hSo=o("data2vec-text"),pSo=o(" \u2014 "),$G=a("a"),_So=o("Data2VecTextForSequenceClassification"),uSo=o(" (Data2VecText model)"),bSo=l(),t2=a("li"),bme=a("strong"),vSo=o("deberta"),FSo=o(" \u2014 "),kG=a("a"),TSo=o("DebertaForSequenceClassification"),MSo=o(" (DeBERTa model)"),ESo=l(),a2=a("li"),vme=a("strong"),CSo=o("deberta-v2"),wSo=o(" \u2014 "),SG=a("a"),ASo=o("DebertaV2ForSequenceClassification"),ySo=o(" (DeBERTa-v2 model)"),LSo=l(),n2=a("li"),Fme=a("strong"),xSo=o("distilbert"),$So=o(" \u2014 "),RG=a("a"),kSo=o("DistilBertForSequenceClassification"),SSo=o(" (DistilBERT model)"),RSo=l(),s2=a("li"),Tme=a("strong"),PSo=o("electra"),BSo=o(" \u2014 "),PG=a("a"),ISo=o("ElectraForSequenceClassification"),NSo=o(" (ELECTRA model)"),qSo=l(),l2=a("li"),Mme=a("strong"),jSo=o("flaubert"),DSo=o(" \u2014 "),BG=a("a"),GSo=o("FlaubertForSequenceClassification"),OSo=o(" (FlauBERT model)"),VSo=l(),i2=a("li"),Eme=a("strong"),XSo=o("fnet"),zSo=o(" \u2014 "),IG=a("a"),WSo=o("FNetForSequenceClassification"),QSo=o(" (FNet model)"),HSo=l(),d2=a("li"),Cme=a("strong"),USo=o("funnel"),JSo=o(" \u2014 "),NG=a("a"),YSo=o("FunnelForSequenceClassification"),KSo=o(" (Funnel Transformer model)"),ZSo=l(),c2=a("li"),wme=a("strong"),eRo=o("gpt2"),oRo=o(" \u2014 "),qG=a("a"),rRo=o("GPT2ForSequenceClassification"),tRo=o(" (OpenAI GPT-2 model)"),aRo=l(),f2=a("li"),Ame=a("strong"),nRo=o("gpt_neo"),sRo=o(" \u2014 "),jG=a("a"),lRo=o("GPTNeoForSequenceClassification"),iRo=o(" (GPT Neo model)"),dRo=l(),m2=a("li"),yme=a("strong"),cRo=o("gptj"),fRo=o(" \u2014 "),DG=a("a"),mRo=o("GPTJForSequenceClassification"),gRo=o(" (GPT-J model)"),hRo=l(),g2=a("li"),Lme=a("strong"),pRo=o("ibert"),_Ro=o(" \u2014 "),GG=a("a"),uRo=o("IBertForSequenceClassification"),bRo=o(" (I-BERT model)"),vRo=l(),h2=a("li"),xme=a("strong"),FRo=o("layoutlm"),TRo=o(" \u2014 "),OG=a("a"),MRo=o("LayoutLMForSequenceClassification"),ERo=o(" (LayoutLM model)"),CRo=l(),p2=a("li"),$me=a("strong"),wRo=o("layoutlmv2"),ARo=o(" \u2014 "),VG=a("a"),yRo=o("LayoutLMv2ForSequenceClassification"),LRo=o(" (LayoutLMv2 model)"),xRo=l(),_2=a("li"),kme=a("strong"),$Ro=o("layoutlmv3"),kRo=o(" \u2014 "),XG=a("a"),SRo=o("LayoutLMv3ForSequenceClassification"),RRo=o(" (LayoutLMv3 model)"),PRo=l(),u2=a("li"),Sme=a("strong"),BRo=o("led"),IRo=o(" \u2014 "),zG=a("a"),NRo=o("LEDForSequenceClassification"),qRo=o(" (LED model)"),jRo=l(),b2=a("li"),Rme=a("strong"),DRo=o("longformer"),GRo=o(" \u2014 "),WG=a("a"),ORo=o("LongformerForSequenceClassification"),VRo=o(" (Longformer model)"),XRo=l(),v2=a("li"),Pme=a("strong"),zRo=o("mbart"),WRo=o(" \u2014 "),QG=a("a"),QRo=o("MBartForSequenceClassification"),HRo=o(" (mBART model)"),URo=l(),F2=a("li"),Bme=a("strong"),JRo=o("megatron-bert"),YRo=o(" \u2014 "),HG=a("a"),KRo=o("MegatronBertForSequenceClassification"),ZRo=o(" (MegatronBert model)"),ePo=l(),T2=a("li"),Ime=a("strong"),oPo=o("mobilebert"),rPo=o(" \u2014 "),UG=a("a"),tPo=o("MobileBertForSequenceClassification"),aPo=o(" (MobileBERT model)"),nPo=l(),M2=a("li"),Nme=a("strong"),sPo=o("mpnet"),lPo=o(" \u2014 "),JG=a("a"),iPo=o("MPNetForSequenceClassification"),dPo=o(" (MPNet model)"),cPo=l(),E2=a("li"),qme=a("strong"),fPo=o("nystromformer"),mPo=o(" \u2014 "),YG=a("a"),gPo=o("NystromformerForSequenceClassification"),hPo=o(" (Nystromformer model)"),pPo=l(),C2=a("li"),jme=a("strong"),_Po=o("openai-gpt"),uPo=o(" \u2014 "),KG=a("a"),bPo=o("OpenAIGPTForSequenceClassification"),vPo=o(" (OpenAI GPT model)"),FPo=l(),w2=a("li"),Dme=a("strong"),TPo=o("perceiver"),MPo=o(" \u2014 "),ZG=a("a"),EPo=o("PerceiverForSequenceClassification"),CPo=o(" (Perceiver model)"),wPo=l(),A2=a("li"),Gme=a("strong"),APo=o("plbart"),yPo=o(" \u2014 "),eO=a("a"),LPo=o("PLBartForSequenceClassification"),xPo=o(" (PLBart model)"),$Po=l(),y2=a("li"),Ome=a("strong"),kPo=o("qdqbert"),SPo=o(" \u2014 "),oO=a("a"),RPo=o("QDQBertForSequenceClassification"),PPo=o(" (QDQBert model)"),BPo=l(),L2=a("li"),Vme=a("strong"),IPo=o("reformer"),NPo=o(" \u2014 "),rO=a("a"),qPo=o("ReformerForSequenceClassification"),jPo=o(" (Reformer model)"),DPo=l(),x2=a("li"),Xme=a("strong"),GPo=o("rembert"),OPo=o(" \u2014 "),tO=a("a"),VPo=o("RemBertForSequenceClassification"),XPo=o(" (RemBERT model)"),zPo=l(),$2=a("li"),zme=a("strong"),WPo=o("roberta"),QPo=o(" \u2014 "),aO=a("a"),HPo=o("RobertaForSequenceClassification"),UPo=o(" (RoBERTa model)"),JPo=l(),k2=a("li"),Wme=a("strong"),YPo=o("roformer"),KPo=o(" \u2014 "),nO=a("a"),ZPo=o("RoFormerForSequenceClassification"),eBo=o(" (RoFormer model)"),oBo=l(),S2=a("li"),Qme=a("strong"),rBo=o("squeezebert"),tBo=o(" \u2014 "),sO=a("a"),aBo=o("SqueezeBertForSequenceClassification"),nBo=o(" (SqueezeBERT model)"),sBo=l(),R2=a("li"),Hme=a("strong"),lBo=o("tapas"),iBo=o(" \u2014 "),lO=a("a"),dBo=o("TapasForSequenceClassification"),cBo=o(" (TAPAS model)"),fBo=l(),P2=a("li"),Ume=a("strong"),mBo=o("transfo-xl"),gBo=o(" \u2014 "),iO=a("a"),hBo=o("TransfoXLForSequenceClassification"),pBo=o(" (Transformer-XL model)"),_Bo=l(),B2=a("li"),Jme=a("strong"),uBo=o("xlm"),bBo=o(" \u2014 "),dO=a("a"),vBo=o("XLMForSequenceClassification"),FBo=o(" (XLM model)"),TBo=l(),I2=a("li"),Yme=a("strong"),MBo=o("xlm-roberta"),EBo=o(" \u2014 "),cO=a("a"),CBo=o("XLMRobertaForSequenceClassification"),wBo=o(" (XLM-RoBERTa model)"),ABo=l(),N2=a("li"),Kme=a("strong"),yBo=o("xlm-roberta-xl"),LBo=o(" \u2014 "),fO=a("a"),xBo=o("XLMRobertaXLForSequenceClassification"),$Bo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),q2=a("li"),Zme=a("strong"),SBo=o("xlnet"),RBo=o(" \u2014 "),mO=a("a"),PBo=o("XLNetForSequenceClassification"),BBo=o(" (XLNet model)"),IBo=l(),j2=a("li"),ege=a("strong"),NBo=o("yoso"),qBo=o(" \u2014 "),gO=a("a"),jBo=o("YosoForSequenceClassification"),DBo=o(" (YOSO model)"),GBo=l(),D2=a("p"),OBo=o("The model is set in evaluation mode by default using "),oge=a("code"),VBo=o("model.eval()"),XBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),zBo=o("model.train()"),WBo=l(),F(G2.$$.fragment),nje=l(),Xi=a("h2"),O2=a("a"),tge=a("span"),F(qy.$$.fragment),QBo=l(),age=a("span"),HBo=o("AutoModelForMultipleChoice"),sje=l(),Po=a("div"),F(jy.$$.fragment),UBo=l(),zi=a("p"),JBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hO=a("a"),YBo=o("from_pretrained()"),KBo=o(" class method or the "),pO=a("a"),ZBo=o("from_config()"),eIo=o(` class
method.`),oIo=l(),Dy=a("p"),rIo=o("This class cannot be instantiated directly using "),nge=a("code"),tIo=o("__init__()"),aIo=o(" (throws an error)."),nIo=l(),ct=a("div"),F(Gy.$$.fragment),sIo=l(),sge=a("p"),lIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iIo=l(),Wi=a("p"),dIo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),cIo=o("not"),fIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),mIo=o("from_pretrained()"),gIo=o(" to load the model weights."),hIo=l(),F(V2.$$.fragment),pIo=l(),ro=a("div"),F(Oy.$$.fragment),_Io=l(),ige=a("p"),uIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bIo=l(),Ba=a("p"),vIo=o("The model class to instantiate is selected based on the "),dge=a("code"),FIo=o("model_type"),TIo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),CIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),K=a("ul"),X2=a("li"),mge=a("strong"),yIo=o("albert"),LIo=o(" \u2014 "),uO=a("a"),xIo=o("AlbertForMultipleChoice"),$Io=o(" (ALBERT model)"),kIo=l(),z2=a("li"),gge=a("strong"),SIo=o("bert"),RIo=o(" \u2014 "),bO=a("a"),PIo=o("BertForMultipleChoice"),BIo=o(" (BERT model)"),IIo=l(),W2=a("li"),hge=a("strong"),NIo=o("big_bird"),qIo=o(" \u2014 "),vO=a("a"),jIo=o("BigBirdForMultipleChoice"),DIo=o(" (BigBird model)"),GIo=l(),Q2=a("li"),pge=a("strong"),OIo=o("camembert"),VIo=o(" \u2014 "),FO=a("a"),XIo=o("CamembertForMultipleChoice"),zIo=o(" (CamemBERT model)"),WIo=l(),H2=a("li"),_ge=a("strong"),QIo=o("canine"),HIo=o(" \u2014 "),TO=a("a"),UIo=o("CanineForMultipleChoice"),JIo=o(" (Canine model)"),YIo=l(),U2=a("li"),uge=a("strong"),KIo=o("convbert"),ZIo=o(" \u2014 "),MO=a("a"),eNo=o("ConvBertForMultipleChoice"),oNo=o(" (ConvBERT model)"),rNo=l(),J2=a("li"),bge=a("strong"),tNo=o("data2vec-text"),aNo=o(" \u2014 "),EO=a("a"),nNo=o("Data2VecTextForMultipleChoice"),sNo=o(" (Data2VecText model)"),lNo=l(),Y2=a("li"),vge=a("strong"),iNo=o("deberta-v2"),dNo=o(" \u2014 "),CO=a("a"),cNo=o("DebertaV2ForMultipleChoice"),fNo=o(" (DeBERTa-v2 model)"),mNo=l(),K2=a("li"),Fge=a("strong"),gNo=o("distilbert"),hNo=o(" \u2014 "),wO=a("a"),pNo=o("DistilBertForMultipleChoice"),_No=o(" (DistilBERT model)"),uNo=l(),Z2=a("li"),Tge=a("strong"),bNo=o("electra"),vNo=o(" \u2014 "),AO=a("a"),FNo=o("ElectraForMultipleChoice"),TNo=o(" (ELECTRA model)"),MNo=l(),e4=a("li"),Mge=a("strong"),ENo=o("flaubert"),CNo=o(" \u2014 "),yO=a("a"),wNo=o("FlaubertForMultipleChoice"),ANo=o(" (FlauBERT model)"),yNo=l(),o4=a("li"),Ege=a("strong"),LNo=o("fnet"),xNo=o(" \u2014 "),LO=a("a"),$No=o("FNetForMultipleChoice"),kNo=o(" (FNet model)"),SNo=l(),r4=a("li"),Cge=a("strong"),RNo=o("funnel"),PNo=o(" \u2014 "),xO=a("a"),BNo=o("FunnelForMultipleChoice"),INo=o(" (Funnel Transformer model)"),NNo=l(),t4=a("li"),wge=a("strong"),qNo=o("ibert"),jNo=o(" \u2014 "),$O=a("a"),DNo=o("IBertForMultipleChoice"),GNo=o(" (I-BERT model)"),ONo=l(),a4=a("li"),Age=a("strong"),VNo=o("longformer"),XNo=o(" \u2014 "),kO=a("a"),zNo=o("LongformerForMultipleChoice"),WNo=o(" (Longformer model)"),QNo=l(),n4=a("li"),yge=a("strong"),HNo=o("megatron-bert"),UNo=o(" \u2014 "),SO=a("a"),JNo=o("MegatronBertForMultipleChoice"),YNo=o(" (MegatronBert model)"),KNo=l(),s4=a("li"),Lge=a("strong"),ZNo=o("mobilebert"),eqo=o(" \u2014 "),RO=a("a"),oqo=o("MobileBertForMultipleChoice"),rqo=o(" (MobileBERT model)"),tqo=l(),l4=a("li"),xge=a("strong"),aqo=o("mpnet"),nqo=o(" \u2014 "),PO=a("a"),sqo=o("MPNetForMultipleChoice"),lqo=o(" (MPNet model)"),iqo=l(),i4=a("li"),$ge=a("strong"),dqo=o("nystromformer"),cqo=o(" \u2014 "),BO=a("a"),fqo=o("NystromformerForMultipleChoice"),mqo=o(" (Nystromformer model)"),gqo=l(),d4=a("li"),kge=a("strong"),hqo=o("qdqbert"),pqo=o(" \u2014 "),IO=a("a"),_qo=o("QDQBertForMultipleChoice"),uqo=o(" (QDQBert model)"),bqo=l(),c4=a("li"),Sge=a("strong"),vqo=o("rembert"),Fqo=o(" \u2014 "),NO=a("a"),Tqo=o("RemBertForMultipleChoice"),Mqo=o(" (RemBERT model)"),Eqo=l(),f4=a("li"),Rge=a("strong"),Cqo=o("roberta"),wqo=o(" \u2014 "),qO=a("a"),Aqo=o("RobertaForMultipleChoice"),yqo=o(" (RoBERTa model)"),Lqo=l(),m4=a("li"),Pge=a("strong"),xqo=o("roformer"),$qo=o(" \u2014 "),jO=a("a"),kqo=o("RoFormerForMultipleChoice"),Sqo=o(" (RoFormer model)"),Rqo=l(),g4=a("li"),Bge=a("strong"),Pqo=o("squeezebert"),Bqo=o(" \u2014 "),DO=a("a"),Iqo=o("SqueezeBertForMultipleChoice"),Nqo=o(" (SqueezeBERT model)"),qqo=l(),h4=a("li"),Ige=a("strong"),jqo=o("xlm"),Dqo=o(" \u2014 "),GO=a("a"),Gqo=o("XLMForMultipleChoice"),Oqo=o(" (XLM model)"),Vqo=l(),p4=a("li"),Nge=a("strong"),Xqo=o("xlm-roberta"),zqo=o(" \u2014 "),OO=a("a"),Wqo=o("XLMRobertaForMultipleChoice"),Qqo=o(" (XLM-RoBERTa model)"),Hqo=l(),_4=a("li"),qge=a("strong"),Uqo=o("xlm-roberta-xl"),Jqo=o(" \u2014 "),VO=a("a"),Yqo=o("XLMRobertaXLForMultipleChoice"),Kqo=o(" (XLM-RoBERTa-XL model)"),Zqo=l(),u4=a("li"),jge=a("strong"),ejo=o("xlnet"),ojo=o(" \u2014 "),XO=a("a"),rjo=o("XLNetForMultipleChoice"),tjo=o(" (XLNet model)"),ajo=l(),b4=a("li"),Dge=a("strong"),njo=o("yoso"),sjo=o(" \u2014 "),zO=a("a"),ljo=o("YosoForMultipleChoice"),ijo=o(" (YOSO model)"),djo=l(),v4=a("p"),cjo=o("The model is set in evaluation mode by default using "),Gge=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),gjo=o("model.train()"),hjo=l(),F(F4.$$.fragment),lje=l(),Qi=a("h2"),T4=a("a"),Vge=a("span"),F(Vy.$$.fragment),pjo=l(),Xge=a("span"),_jo=o("AutoModelForNextSentencePrediction"),ije=l(),Bo=a("div"),F(Xy.$$.fragment),ujo=l(),Hi=a("p"),bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WO=a("a"),vjo=o("from_pretrained()"),Fjo=o(" class method or the "),QO=a("a"),Tjo=o("from_config()"),Mjo=o(` class
method.`),Ejo=l(),zy=a("p"),Cjo=o("This class cannot be instantiated directly using "),zge=a("code"),wjo=o("__init__()"),Ajo=o(" (throws an error)."),yjo=l(),ft=a("div"),F(Wy.$$.fragment),Ljo=l(),Wge=a("p"),xjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$jo=l(),Ui=a("p"),kjo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),Sjo=o("not"),Rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),Pjo=o("from_pretrained()"),Bjo=o(" to load the model weights."),Ijo=l(),F(M4.$$.fragment),Njo=l(),to=a("div"),F(Qy.$$.fragment),qjo=l(),Hge=a("p"),jjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Djo=l(),Ia=a("p"),Gjo=o("The model class to instantiate is selected based on the "),Uge=a("code"),Ojo=o("model_type"),Vjo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),Xjo=o("pretrained_model_name_or_path"),zjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),Wjo=o("pretrained_model_name_or_path"),Qjo=o(":"),Hjo=l(),Yr=a("ul"),E4=a("li"),Kge=a("strong"),Ujo=o("bert"),Jjo=o(" \u2014 "),UO=a("a"),Yjo=o("BertForNextSentencePrediction"),Kjo=o(" (BERT model)"),Zjo=l(),C4=a("li"),Zge=a("strong"),eDo=o("fnet"),oDo=o(" \u2014 "),JO=a("a"),rDo=o("FNetForNextSentencePrediction"),tDo=o(" (FNet model)"),aDo=l(),w4=a("li"),ehe=a("strong"),nDo=o("megatron-bert"),sDo=o(" \u2014 "),YO=a("a"),lDo=o("MegatronBertForNextSentencePrediction"),iDo=o(" (MegatronBert model)"),dDo=l(),A4=a("li"),ohe=a("strong"),cDo=o("mobilebert"),fDo=o(" \u2014 "),KO=a("a"),mDo=o("MobileBertForNextSentencePrediction"),gDo=o(" (MobileBERT model)"),hDo=l(),y4=a("li"),rhe=a("strong"),pDo=o("qdqbert"),_Do=o(" \u2014 "),ZO=a("a"),uDo=o("QDQBertForNextSentencePrediction"),bDo=o(" (QDQBert model)"),vDo=l(),L4=a("p"),FDo=o("The model is set in evaluation mode by default using "),the=a("code"),TDo=o("model.eval()"),MDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),EDo=o("model.train()"),CDo=l(),F(x4.$$.fragment),dje=l(),Ji=a("h2"),$4=a("a"),nhe=a("span"),F(Hy.$$.fragment),wDo=l(),she=a("span"),ADo=o("AutoModelForTokenClassification"),cje=l(),Io=a("div"),F(Uy.$$.fragment),yDo=l(),Yi=a("p"),LDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eV=a("a"),xDo=o("from_pretrained()"),$Do=o(" class method or the "),oV=a("a"),kDo=o("from_config()"),SDo=o(` class
method.`),RDo=l(),Jy=a("p"),PDo=o("This class cannot be instantiated directly using "),lhe=a("code"),BDo=o("__init__()"),IDo=o(" (throws an error)."),NDo=l(),mt=a("div"),F(Yy.$$.fragment),qDo=l(),ihe=a("p"),jDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DDo=l(),Ki=a("p"),GDo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),ODo=o("not"),VDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),XDo=o("from_pretrained()"),zDo=o(" to load the model weights."),WDo=l(),F(k4.$$.fragment),QDo=l(),ao=a("div"),F(Ky.$$.fragment),HDo=l(),che=a("p"),UDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JDo=l(),Na=a("p"),YDo=o("The model class to instantiate is selected based on the "),fhe=a("code"),KDo=o("model_type"),ZDo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(":"),aGo=l(),H=a("ul"),S4=a("li"),hhe=a("strong"),nGo=o("albert"),sGo=o(" \u2014 "),tV=a("a"),lGo=o("AlbertForTokenClassification"),iGo=o(" (ALBERT model)"),dGo=l(),R4=a("li"),phe=a("strong"),cGo=o("bert"),fGo=o(" \u2014 "),aV=a("a"),mGo=o("BertForTokenClassification"),gGo=o(" (BERT model)"),hGo=l(),P4=a("li"),_he=a("strong"),pGo=o("big_bird"),_Go=o(" \u2014 "),nV=a("a"),uGo=o("BigBirdForTokenClassification"),bGo=o(" (BigBird model)"),vGo=l(),B4=a("li"),uhe=a("strong"),FGo=o("camembert"),TGo=o(" \u2014 "),sV=a("a"),MGo=o("CamembertForTokenClassification"),EGo=o(" (CamemBERT model)"),CGo=l(),I4=a("li"),bhe=a("strong"),wGo=o("canine"),AGo=o(" \u2014 "),lV=a("a"),yGo=o("CanineForTokenClassification"),LGo=o(" (Canine model)"),xGo=l(),N4=a("li"),vhe=a("strong"),$Go=o("convbert"),kGo=o(" \u2014 "),iV=a("a"),SGo=o("ConvBertForTokenClassification"),RGo=o(" (ConvBERT model)"),PGo=l(),q4=a("li"),Fhe=a("strong"),BGo=o("data2vec-text"),IGo=o(" \u2014 "),dV=a("a"),NGo=o("Data2VecTextForTokenClassification"),qGo=o(" (Data2VecText model)"),jGo=l(),j4=a("li"),The=a("strong"),DGo=o("deberta"),GGo=o(" \u2014 "),cV=a("a"),OGo=o("DebertaForTokenClassification"),VGo=o(" (DeBERTa model)"),XGo=l(),D4=a("li"),Mhe=a("strong"),zGo=o("deberta-v2"),WGo=o(" \u2014 "),fV=a("a"),QGo=o("DebertaV2ForTokenClassification"),HGo=o(" (DeBERTa-v2 model)"),UGo=l(),G4=a("li"),Ehe=a("strong"),JGo=o("distilbert"),YGo=o(" \u2014 "),mV=a("a"),KGo=o("DistilBertForTokenClassification"),ZGo=o(" (DistilBERT model)"),eOo=l(),O4=a("li"),Che=a("strong"),oOo=o("electra"),rOo=o(" \u2014 "),gV=a("a"),tOo=o("ElectraForTokenClassification"),aOo=o(" (ELECTRA model)"),nOo=l(),V4=a("li"),whe=a("strong"),sOo=o("flaubert"),lOo=o(" \u2014 "),hV=a("a"),iOo=o("FlaubertForTokenClassification"),dOo=o(" (FlauBERT model)"),cOo=l(),X4=a("li"),Ahe=a("strong"),fOo=o("fnet"),mOo=o(" \u2014 "),pV=a("a"),gOo=o("FNetForTokenClassification"),hOo=o(" (FNet model)"),pOo=l(),z4=a("li"),yhe=a("strong"),_Oo=o("funnel"),uOo=o(" \u2014 "),_V=a("a"),bOo=o("FunnelForTokenClassification"),vOo=o(" (Funnel Transformer model)"),FOo=l(),W4=a("li"),Lhe=a("strong"),TOo=o("gpt2"),MOo=o(" \u2014 "),uV=a("a"),EOo=o("GPT2ForTokenClassification"),COo=o(" (OpenAI GPT-2 model)"),wOo=l(),Q4=a("li"),xhe=a("strong"),AOo=o("ibert"),yOo=o(" \u2014 "),bV=a("a"),LOo=o("IBertForTokenClassification"),xOo=o(" (I-BERT model)"),$Oo=l(),H4=a("li"),$he=a("strong"),kOo=o("layoutlm"),SOo=o(" \u2014 "),vV=a("a"),ROo=o("LayoutLMForTokenClassification"),POo=o(" (LayoutLM model)"),BOo=l(),U4=a("li"),khe=a("strong"),IOo=o("layoutlmv2"),NOo=o(" \u2014 "),FV=a("a"),qOo=o("LayoutLMv2ForTokenClassification"),jOo=o(" (LayoutLMv2 model)"),DOo=l(),J4=a("li"),She=a("strong"),GOo=o("layoutlmv3"),OOo=o(" \u2014 "),TV=a("a"),VOo=o("LayoutLMv3ForTokenClassification"),XOo=o(" (LayoutLMv3 model)"),zOo=l(),Y4=a("li"),Rhe=a("strong"),WOo=o("longformer"),QOo=o(" \u2014 "),MV=a("a"),HOo=o("LongformerForTokenClassification"),UOo=o(" (Longformer model)"),JOo=l(),K4=a("li"),Phe=a("strong"),YOo=o("megatron-bert"),KOo=o(" \u2014 "),EV=a("a"),ZOo=o("MegatronBertForTokenClassification"),eVo=o(" (MegatronBert model)"),oVo=l(),Z4=a("li"),Bhe=a("strong"),rVo=o("mobilebert"),tVo=o(" \u2014 "),CV=a("a"),aVo=o("MobileBertForTokenClassification"),nVo=o(" (MobileBERT model)"),sVo=l(),ev=a("li"),Ihe=a("strong"),lVo=o("mpnet"),iVo=o(" \u2014 "),wV=a("a"),dVo=o("MPNetForTokenClassification"),cVo=o(" (MPNet model)"),fVo=l(),ov=a("li"),Nhe=a("strong"),mVo=o("nystromformer"),gVo=o(" \u2014 "),AV=a("a"),hVo=o("NystromformerForTokenClassification"),pVo=o(" (Nystromformer model)"),_Vo=l(),rv=a("li"),qhe=a("strong"),uVo=o("qdqbert"),bVo=o(" \u2014 "),yV=a("a"),vVo=o("QDQBertForTokenClassification"),FVo=o(" (QDQBert model)"),TVo=l(),tv=a("li"),jhe=a("strong"),MVo=o("rembert"),EVo=o(" \u2014 "),LV=a("a"),CVo=o("RemBertForTokenClassification"),wVo=o(" (RemBERT model)"),AVo=l(),av=a("li"),Dhe=a("strong"),yVo=o("roberta"),LVo=o(" \u2014 "),xV=a("a"),xVo=o("RobertaForTokenClassification"),$Vo=o(" (RoBERTa model)"),kVo=l(),nv=a("li"),Ghe=a("strong"),SVo=o("roformer"),RVo=o(" \u2014 "),$V=a("a"),PVo=o("RoFormerForTokenClassification"),BVo=o(" (RoFormer model)"),IVo=l(),sv=a("li"),Ohe=a("strong"),NVo=o("squeezebert"),qVo=o(" \u2014 "),kV=a("a"),jVo=o("SqueezeBertForTokenClassification"),DVo=o(" (SqueezeBERT model)"),GVo=l(),lv=a("li"),Vhe=a("strong"),OVo=o("xlm"),VVo=o(" \u2014 "),SV=a("a"),XVo=o("XLMForTokenClassification"),zVo=o(" (XLM model)"),WVo=l(),iv=a("li"),Xhe=a("strong"),QVo=o("xlm-roberta"),HVo=o(" \u2014 "),RV=a("a"),UVo=o("XLMRobertaForTokenClassification"),JVo=o(" (XLM-RoBERTa model)"),YVo=l(),dv=a("li"),zhe=a("strong"),KVo=o("xlm-roberta-xl"),ZVo=o(" \u2014 "),PV=a("a"),eXo=o("XLMRobertaXLForTokenClassification"),oXo=o(" (XLM-RoBERTa-XL model)"),rXo=l(),cv=a("li"),Whe=a("strong"),tXo=o("xlnet"),aXo=o(" \u2014 "),BV=a("a"),nXo=o("XLNetForTokenClassification"),sXo=o(" (XLNet model)"),lXo=l(),fv=a("li"),Qhe=a("strong"),iXo=o("yoso"),dXo=o(" \u2014 "),IV=a("a"),cXo=o("YosoForTokenClassification"),fXo=o(" (YOSO model)"),mXo=l(),mv=a("p"),gXo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),hXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),_Xo=o("model.train()"),uXo=l(),F(gv.$$.fragment),fje=l(),Zi=a("h2"),hv=a("a"),Jhe=a("span"),F(Zy.$$.fragment),bXo=l(),Yhe=a("span"),vXo=o("AutoModelForQuestionAnswering"),mje=l(),No=a("div"),F(eL.$$.fragment),FXo=l(),ed=a("p"),TXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NV=a("a"),MXo=o("from_pretrained()"),EXo=o(" class method or the "),qV=a("a"),CXo=o("from_config()"),wXo=o(` class
method.`),AXo=l(),oL=a("p"),yXo=o("This class cannot be instantiated directly using "),Khe=a("code"),LXo=o("__init__()"),xXo=o(" (throws an error)."),$Xo=l(),gt=a("div"),F(rL.$$.fragment),kXo=l(),Zhe=a("p"),SXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RXo=l(),od=a("p"),PXo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),BXo=o("not"),IXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),NXo=o("from_pretrained()"),qXo=o(" to load the model weights."),jXo=l(),F(pv.$$.fragment),DXo=l(),no=a("div"),F(tL.$$.fragment),GXo=l(),ope=a("p"),OXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VXo=l(),qa=a("p"),XXo=o("The model class to instantiate is selected based on the "),rpe=a("code"),zXo=o("model_type"),WXo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),QXo=o("pretrained_model_name_or_path"),HXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(":"),YXo=l(),V=a("ul"),_v=a("li"),npe=a("strong"),KXo=o("albert"),ZXo=o(" \u2014 "),DV=a("a"),ezo=o("AlbertForQuestionAnswering"),ozo=o(" (ALBERT model)"),rzo=l(),uv=a("li"),spe=a("strong"),tzo=o("bart"),azo=o(" \u2014 "),GV=a("a"),nzo=o("BartForQuestionAnswering"),szo=o(" (BART model)"),lzo=l(),bv=a("li"),lpe=a("strong"),izo=o("bert"),dzo=o(" \u2014 "),OV=a("a"),czo=o("BertForQuestionAnswering"),fzo=o(" (BERT model)"),mzo=l(),vv=a("li"),ipe=a("strong"),gzo=o("big_bird"),hzo=o(" \u2014 "),VV=a("a"),pzo=o("BigBirdForQuestionAnswering"),_zo=o(" (BigBird model)"),uzo=l(),Fv=a("li"),dpe=a("strong"),bzo=o("bigbird_pegasus"),vzo=o(" \u2014 "),XV=a("a"),Fzo=o("BigBirdPegasusForQuestionAnswering"),Tzo=o(" (BigBirdPegasus model)"),Mzo=l(),Tv=a("li"),cpe=a("strong"),Ezo=o("camembert"),Czo=o(" \u2014 "),zV=a("a"),wzo=o("CamembertForQuestionAnswering"),Azo=o(" (CamemBERT model)"),yzo=l(),Mv=a("li"),fpe=a("strong"),Lzo=o("canine"),xzo=o(" \u2014 "),WV=a("a"),$zo=o("CanineForQuestionAnswering"),kzo=o(" (Canine model)"),Szo=l(),Ev=a("li"),mpe=a("strong"),Rzo=o("convbert"),Pzo=o(" \u2014 "),QV=a("a"),Bzo=o("ConvBertForQuestionAnswering"),Izo=o(" (ConvBERT model)"),Nzo=l(),Cv=a("li"),gpe=a("strong"),qzo=o("data2vec-text"),jzo=o(" \u2014 "),HV=a("a"),Dzo=o("Data2VecTextForQuestionAnswering"),Gzo=o(" (Data2VecText model)"),Ozo=l(),wv=a("li"),hpe=a("strong"),Vzo=o("deberta"),Xzo=o(" \u2014 "),UV=a("a"),zzo=o("DebertaForQuestionAnswering"),Wzo=o(" (DeBERTa model)"),Qzo=l(),Av=a("li"),ppe=a("strong"),Hzo=o("deberta-v2"),Uzo=o(" \u2014 "),JV=a("a"),Jzo=o("DebertaV2ForQuestionAnswering"),Yzo=o(" (DeBERTa-v2 model)"),Kzo=l(),yv=a("li"),_pe=a("strong"),Zzo=o("distilbert"),eWo=o(" \u2014 "),YV=a("a"),oWo=o("DistilBertForQuestionAnswering"),rWo=o(" (DistilBERT model)"),tWo=l(),Lv=a("li"),upe=a("strong"),aWo=o("electra"),nWo=o(" \u2014 "),KV=a("a"),sWo=o("ElectraForQuestionAnswering"),lWo=o(" (ELECTRA model)"),iWo=l(),xv=a("li"),bpe=a("strong"),dWo=o("flaubert"),cWo=o(" \u2014 "),ZV=a("a"),fWo=o("FlaubertForQuestionAnsweringSimple"),mWo=o(" (FlauBERT model)"),gWo=l(),$v=a("li"),vpe=a("strong"),hWo=o("fnet"),pWo=o(" \u2014 "),eX=a("a"),_Wo=o("FNetForQuestionAnswering"),uWo=o(" (FNet model)"),bWo=l(),kv=a("li"),Fpe=a("strong"),vWo=o("funnel"),FWo=o(" \u2014 "),oX=a("a"),TWo=o("FunnelForQuestionAnswering"),MWo=o(" (Funnel Transformer model)"),EWo=l(),Sv=a("li"),Tpe=a("strong"),CWo=o("gptj"),wWo=o(" \u2014 "),rX=a("a"),AWo=o("GPTJForQuestionAnswering"),yWo=o(" (GPT-J model)"),LWo=l(),Rv=a("li"),Mpe=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),tX=a("a"),kWo=o("IBertForQuestionAnswering"),SWo=o(" (I-BERT model)"),RWo=l(),Pv=a("li"),Epe=a("strong"),PWo=o("layoutlmv2"),BWo=o(" \u2014 "),aX=a("a"),IWo=o("LayoutLMv2ForQuestionAnswering"),NWo=o(" (LayoutLMv2 model)"),qWo=l(),Bv=a("li"),Cpe=a("strong"),jWo=o("layoutlmv3"),DWo=o(" \u2014 "),nX=a("a"),GWo=o("LayoutLMv3ForQuestionAnswering"),OWo=o(" (LayoutLMv3 model)"),VWo=l(),Iv=a("li"),wpe=a("strong"),XWo=o("led"),zWo=o(" \u2014 "),sX=a("a"),WWo=o("LEDForQuestionAnswering"),QWo=o(" (LED model)"),HWo=l(),Nv=a("li"),Ape=a("strong"),UWo=o("longformer"),JWo=o(" \u2014 "),lX=a("a"),YWo=o("LongformerForQuestionAnswering"),KWo=o(" (Longformer model)"),ZWo=l(),qv=a("li"),ype=a("strong"),eQo=o("lxmert"),oQo=o(" \u2014 "),iX=a("a"),rQo=o("LxmertForQuestionAnswering"),tQo=o(" (LXMERT model)"),aQo=l(),jv=a("li"),Lpe=a("strong"),nQo=o("mbart"),sQo=o(" \u2014 "),dX=a("a"),lQo=o("MBartForQuestionAnswering"),iQo=o(" (mBART model)"),dQo=l(),Dv=a("li"),xpe=a("strong"),cQo=o("megatron-bert"),fQo=o(" \u2014 "),cX=a("a"),mQo=o("MegatronBertForQuestionAnswering"),gQo=o(" (MegatronBert model)"),hQo=l(),Gv=a("li"),$pe=a("strong"),pQo=o("mobilebert"),_Qo=o(" \u2014 "),fX=a("a"),uQo=o("MobileBertForQuestionAnswering"),bQo=o(" (MobileBERT model)"),vQo=l(),Ov=a("li"),kpe=a("strong"),FQo=o("mpnet"),TQo=o(" \u2014 "),mX=a("a"),MQo=o("MPNetForQuestionAnswering"),EQo=o(" (MPNet model)"),CQo=l(),Vv=a("li"),Spe=a("strong"),wQo=o("nystromformer"),AQo=o(" \u2014 "),gX=a("a"),yQo=o("NystromformerForQuestionAnswering"),LQo=o(" (Nystromformer model)"),xQo=l(),Xv=a("li"),Rpe=a("strong"),$Qo=o("qdqbert"),kQo=o(" \u2014 "),hX=a("a"),SQo=o("QDQBertForQuestionAnswering"),RQo=o(" (QDQBert model)"),PQo=l(),zv=a("li"),Ppe=a("strong"),BQo=o("reformer"),IQo=o(" \u2014 "),pX=a("a"),NQo=o("ReformerForQuestionAnswering"),qQo=o(" (Reformer model)"),jQo=l(),Wv=a("li"),Bpe=a("strong"),DQo=o("rembert"),GQo=o(" \u2014 "),_X=a("a"),OQo=o("RemBertForQuestionAnswering"),VQo=o(" (RemBERT model)"),XQo=l(),Qv=a("li"),Ipe=a("strong"),zQo=o("roberta"),WQo=o(" \u2014 "),uX=a("a"),QQo=o("RobertaForQuestionAnswering"),HQo=o(" (RoBERTa model)"),UQo=l(),Hv=a("li"),Npe=a("strong"),JQo=o("roformer"),YQo=o(" \u2014 "),bX=a("a"),KQo=o("RoFormerForQuestionAnswering"),ZQo=o(" (RoFormer model)"),eHo=l(),Uv=a("li"),qpe=a("strong"),oHo=o("splinter"),rHo=o(" \u2014 "),vX=a("a"),tHo=o("SplinterForQuestionAnswering"),aHo=o(" (Splinter model)"),nHo=l(),Jv=a("li"),jpe=a("strong"),sHo=o("squeezebert"),lHo=o(" \u2014 "),FX=a("a"),iHo=o("SqueezeBertForQuestionAnswering"),dHo=o(" (SqueezeBERT model)"),cHo=l(),Yv=a("li"),Dpe=a("strong"),fHo=o("xlm"),mHo=o(" \u2014 "),TX=a("a"),gHo=o("XLMForQuestionAnsweringSimple"),hHo=o(" (XLM model)"),pHo=l(),Kv=a("li"),Gpe=a("strong"),_Ho=o("xlm-roberta"),uHo=o(" \u2014 "),MX=a("a"),bHo=o("XLMRobertaForQuestionAnswering"),vHo=o(" (XLM-RoBERTa model)"),FHo=l(),Zv=a("li"),Ope=a("strong"),THo=o("xlm-roberta-xl"),MHo=o(" \u2014 "),EX=a("a"),EHo=o("XLMRobertaXLForQuestionAnswering"),CHo=o(" (XLM-RoBERTa-XL model)"),wHo=l(),e5=a("li"),Vpe=a("strong"),AHo=o("xlnet"),yHo=o(" \u2014 "),CX=a("a"),LHo=o("XLNetForQuestionAnsweringSimple"),xHo=o(" (XLNet model)"),$Ho=l(),o5=a("li"),Xpe=a("strong"),kHo=o("yoso"),SHo=o(" \u2014 "),wX=a("a"),RHo=o("YosoForQuestionAnswering"),PHo=o(" (YOSO model)"),BHo=l(),r5=a("p"),IHo=o("The model is set in evaluation mode by default using "),zpe=a("code"),NHo=o("model.eval()"),qHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),jHo=o("model.train()"),DHo=l(),F(t5.$$.fragment),gje=l(),rd=a("h2"),a5=a("a"),Qpe=a("span"),F(aL.$$.fragment),GHo=l(),Hpe=a("span"),OHo=o("AutoModelForTableQuestionAnswering"),hje=l(),qo=a("div"),F(nL.$$.fragment),VHo=l(),td=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AX=a("a"),zHo=o("from_pretrained()"),WHo=o(" class method or the "),yX=a("a"),QHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),sL=a("p"),JHo=o("This class cannot be instantiated directly using "),Upe=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),ht=a("div"),F(lL.$$.fragment),eUo=l(),Jpe=a("p"),oUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rUo=l(),ad=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),F(n5.$$.fragment),dUo=l(),so=a("div"),F(iL.$$.fragment),cUo=l(),Kpe=a("p"),fUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mUo=l(),ja=a("p"),gUo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),hUo=o("model_type"),pUo=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),_Uo=o("pretrained_model_name_or_path"),uUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(":"),FUo=l(),r_e=a("ul"),s5=a("li"),t_e=a("strong"),TUo=o("tapas"),MUo=o(" \u2014 "),xX=a("a"),EUo=o("TapasForQuestionAnswering"),CUo=o(" (TAPAS model)"),wUo=l(),l5=a("p"),AUo=o("The model is set in evaluation mode by default using "),a_e=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),xUo=o("model.train()"),$Uo=l(),F(i5.$$.fragment),pje=l(),nd=a("h2"),d5=a("a"),s_e=a("span"),F(dL.$$.fragment),kUo=l(),l_e=a("span"),SUo=o("AutoModelForImageClassification"),_je=l(),jo=a("div"),F(cL.$$.fragment),RUo=l(),sd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$X=a("a"),BUo=o("from_pretrained()"),IUo=o(" class method or the "),kX=a("a"),NUo=o("from_config()"),qUo=o(` class
method.`),jUo=l(),fL=a("p"),DUo=o("This class cannot be instantiated directly using "),i_e=a("code"),GUo=o("__init__()"),OUo=o(" (throws an error)."),VUo=l(),pt=a("div"),F(mL.$$.fragment),XUo=l(),d_e=a("p"),zUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WUo=l(),ld=a("p"),QUo=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),HUo=o("not"),UUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),JUo=o("from_pretrained()"),YUo=o(" to load the model weights."),KUo=l(),F(c5.$$.fragment),ZUo=l(),lo=a("div"),F(gL.$$.fragment),eJo=l(),f_e=a("p"),oJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rJo=l(),Da=a("p"),tJo=o("The model class to instantiate is selected based on the "),m_e=a("code"),aJo=o("model_type"),nJo=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(":"),cJo=l(),ve=a("ul"),f5=a("li"),p_e=a("strong"),fJo=o("beit"),mJo=o(" \u2014 "),RX=a("a"),gJo=o("BeitForImageClassification"),hJo=o(" (BEiT model)"),pJo=l(),m5=a("li"),__e=a("strong"),_Jo=o("convnext"),uJo=o(" \u2014 "),PX=a("a"),bJo=o("ConvNextForImageClassification"),vJo=o(" (ConvNext model)"),FJo=l(),g5=a("li"),u_e=a("strong"),TJo=o("cvt"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("CvtForImageClassification"),CJo=o(" (CvT model)"),wJo=l(),h5=a("li"),b_e=a("strong"),AJo=o("data2vec-vision"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("Data2VecVisionForImageClassification"),xJo=o(" (Data2VecVision model)"),$Jo=l(),Bs=a("li"),v_e=a("strong"),kJo=o("deit"),SJo=o(" \u2014 "),NX=a("a"),RJo=o("DeiTForImageClassification"),PJo=o(" or "),qX=a("a"),BJo=o("DeiTForImageClassificationWithTeacher"),IJo=o(" (DeiT model)"),NJo=l(),p5=a("li"),F_e=a("strong"),qJo=o("imagegpt"),jJo=o(" \u2014 "),jX=a("a"),DJo=o("ImageGPTForImageClassification"),GJo=o(" (ImageGPT model)"),OJo=l(),_5=a("li"),T_e=a("strong"),VJo=o("mobilevit"),XJo=o(" \u2014 "),DX=a("a"),zJo=o("MobileViTForImageClassification"),WJo=o(" (MobileViT model)"),QJo=l(),_t=a("li"),M_e=a("strong"),HJo=o("perceiver"),UJo=o(" \u2014 "),GX=a("a"),JJo=o("PerceiverForImageClassificationLearned"),YJo=o(" or "),OX=a("a"),KJo=o("PerceiverForImageClassificationFourier"),ZJo=o(" or "),VX=a("a"),eYo=o("PerceiverForImageClassificationConvProcessing"),oYo=o(" (Perceiver model)"),rYo=l(),u5=a("li"),E_e=a("strong"),tYo=o("poolformer"),aYo=o(" \u2014 "),XX=a("a"),nYo=o("PoolFormerForImageClassification"),sYo=o(" (PoolFormer model)"),lYo=l(),b5=a("li"),C_e=a("strong"),iYo=o("regnet"),dYo=o(" \u2014 "),zX=a("a"),cYo=o("RegNetForImageClassification"),fYo=o(" (RegNet model)"),mYo=l(),v5=a("li"),w_e=a("strong"),gYo=o("resnet"),hYo=o(" \u2014 "),WX=a("a"),pYo=o("ResNetForImageClassification"),_Yo=o(" (ResNet model)"),uYo=l(),F5=a("li"),A_e=a("strong"),bYo=o("segformer"),vYo=o(" \u2014 "),QX=a("a"),FYo=o("SegformerForImageClassification"),TYo=o(" (SegFormer model)"),MYo=l(),T5=a("li"),y_e=a("strong"),EYo=o("swin"),CYo=o(" \u2014 "),HX=a("a"),wYo=o("SwinForImageClassification"),AYo=o(" (Swin model)"),yYo=l(),M5=a("li"),L_e=a("strong"),LYo=o("van"),xYo=o(" \u2014 "),UX=a("a"),$Yo=o("VanForImageClassification"),kYo=o(" (VAN model)"),SYo=l(),E5=a("li"),x_e=a("strong"),RYo=o("vit"),PYo=o(" \u2014 "),JX=a("a"),BYo=o("ViTForImageClassification"),IYo=o(" (ViT model)"),NYo=l(),C5=a("p"),qYo=o("The model is set in evaluation mode by default using "),$_e=a("code"),jYo=o("model.eval()"),DYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),GYo=o("model.train()"),OYo=l(),F(w5.$$.fragment),uje=l(),id=a("h2"),A5=a("a"),S_e=a("span"),F(hL.$$.fragment),VYo=l(),R_e=a("span"),XYo=o("AutoModelForVision2Seq"),bje=l(),Do=a("div"),F(pL.$$.fragment),zYo=l(),dd=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YX=a("a"),QYo=o("from_pretrained()"),HYo=o(" class method or the "),KX=a("a"),UYo=o("from_config()"),JYo=o(` class
method.`),YYo=l(),_L=a("p"),KYo=o("This class cannot be instantiated directly using "),P_e=a("code"),ZYo=o("__init__()"),eKo=o(" (throws an error)."),oKo=l(),ut=a("div"),F(uL.$$.fragment),rKo=l(),B_e=a("p"),tKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aKo=l(),cd=a("p"),nKo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),sKo=o("not"),lKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),iKo=o("from_pretrained()"),dKo=o(" to load the model weights."),cKo=l(),F(y5.$$.fragment),fKo=l(),io=a("div"),F(bL.$$.fragment),mKo=l(),N_e=a("p"),gKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hKo=l(),Ga=a("p"),pKo=o("The model class to instantiate is selected based on the "),q_e=a("code"),_Ko=o("model_type"),uKo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),FKo=o("pretrained_model_name_or_path"),TKo=o(":"),MKo=l(),G_e=a("ul"),L5=a("li"),O_e=a("strong"),EKo=o("vision-encoder-decoder"),CKo=o(" \u2014 "),ez=a("a"),wKo=o("VisionEncoderDecoderModel"),AKo=o(" (Vision Encoder decoder model)"),yKo=l(),x5=a("p"),LKo=o("The model is set in evaluation mode by default using "),V_e=a("code"),xKo=o("model.eval()"),$Ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),kKo=o("model.train()"),SKo=l(),F($5.$$.fragment),vje=l(),fd=a("h2"),k5=a("a"),z_e=a("span"),F(vL.$$.fragment),RKo=l(),W_e=a("span"),PKo=o("AutoModelForAudioClassification"),Fje=l(),Go=a("div"),F(FL.$$.fragment),BKo=l(),md=a("p"),IKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oz=a("a"),NKo=o("from_pretrained()"),qKo=o(" class method or the "),rz=a("a"),jKo=o("from_config()"),DKo=o(` class
method.`),GKo=l(),TL=a("p"),OKo=o("This class cannot be instantiated directly using "),Q_e=a("code"),VKo=o("__init__()"),XKo=o(" (throws an error)."),zKo=l(),bt=a("div"),F(ML.$$.fragment),WKo=l(),H_e=a("p"),QKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),HKo=l(),gd=a("p"),UKo=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),JKo=o("not"),YKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),KKo=o("from_pretrained()"),ZKo=o(" to load the model weights."),eZo=l(),F(S5.$$.fragment),oZo=l(),co=a("div"),F(EL.$$.fragment),rZo=l(),J_e=a("p"),tZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aZo=l(),Oa=a("p"),nZo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),sZo=o("model_type"),lZo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),iZo=o("pretrained_model_name_or_path"),dZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(":"),mZo=l(),Se=a("ul"),R5=a("li"),eue=a("strong"),gZo=o("data2vec-audio"),hZo=o(" \u2014 "),az=a("a"),pZo=o("Data2VecAudioForSequenceClassification"),_Zo=o(" (Data2VecAudio model)"),uZo=l(),P5=a("li"),oue=a("strong"),bZo=o("hubert"),vZo=o(" \u2014 "),nz=a("a"),FZo=o("HubertForSequenceClassification"),TZo=o(" (Hubert model)"),MZo=l(),B5=a("li"),rue=a("strong"),EZo=o("sew"),CZo=o(" \u2014 "),sz=a("a"),wZo=o("SEWForSequenceClassification"),AZo=o(" (SEW model)"),yZo=l(),I5=a("li"),tue=a("strong"),LZo=o("sew-d"),xZo=o(" \u2014 "),lz=a("a"),$Zo=o("SEWDForSequenceClassification"),kZo=o(" (SEW-D model)"),SZo=l(),N5=a("li"),aue=a("strong"),RZo=o("unispeech"),PZo=o(" \u2014 "),iz=a("a"),BZo=o("UniSpeechForSequenceClassification"),IZo=o(" (UniSpeech model)"),NZo=l(),q5=a("li"),nue=a("strong"),qZo=o("unispeech-sat"),jZo=o(" \u2014 "),dz=a("a"),DZo=o("UniSpeechSatForSequenceClassification"),GZo=o(" (UniSpeechSat model)"),OZo=l(),j5=a("li"),sue=a("strong"),VZo=o("wav2vec2"),XZo=o(" \u2014 "),cz=a("a"),zZo=o("Wav2Vec2ForSequenceClassification"),WZo=o(" (Wav2Vec2 model)"),QZo=l(),D5=a("li"),lue=a("strong"),HZo=o("wav2vec2-conformer"),UZo=o(" \u2014 "),fz=a("a"),JZo=o("Wav2Vec2ConformerForSequenceClassification"),YZo=o(" (Wav2Vec2-Conformer model)"),KZo=l(),G5=a("li"),iue=a("strong"),ZZo=o("wavlm"),eer=o(" \u2014 "),mz=a("a"),oer=o("WavLMForSequenceClassification"),rer=o(" (WavLM model)"),ter=l(),O5=a("p"),aer=o("The model is set in evaluation mode by default using "),due=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),ler=o("model.train()"),ier=l(),F(V5.$$.fragment),Tje=l(),hd=a("h2"),X5=a("a"),fue=a("span"),F(CL.$$.fragment),der=l(),mue=a("span"),cer=o("AutoModelForAudioFrameClassification"),Mje=l(),Oo=a("div"),F(wL.$$.fragment),fer=l(),pd=a("p"),mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gz=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),hz=a("a"),per=o("from_config()"),_er=o(` class
method.`),uer=l(),AL=a("p"),ber=o("This class cannot be instantiated directly using "),gue=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),vt=a("div"),F(yL.$$.fragment),Mer=l(),hue=a("p"),Eer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Cer=l(),_d=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),Aer=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Ler=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(z5.$$.fragment),ker=l(),fo=a("div"),F(LL.$$.fragment),Ser=l(),_ue=a("p"),Rer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Per=l(),Va=a("p"),Ber=o("The model class to instantiate is selected based on the "),uue=a("code"),Ier=o("model_type"),Ner=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),qer=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),Kr=a("ul"),W5=a("li"),Fue=a("strong"),Ver=o("data2vec-audio"),Xer=o(" \u2014 "),_z=a("a"),zer=o("Data2VecAudioForAudioFrameClassification"),Wer=o(" (Data2VecAudio model)"),Qer=l(),Q5=a("li"),Tue=a("strong"),Her=o("unispeech-sat"),Uer=o(" \u2014 "),uz=a("a"),Jer=o("UniSpeechSatForAudioFrameClassification"),Yer=o(" (UniSpeechSat model)"),Ker=l(),H5=a("li"),Mue=a("strong"),Zer=o("wav2vec2"),eor=o(" \u2014 "),bz=a("a"),oor=o("Wav2Vec2ForAudioFrameClassification"),ror=o(" (Wav2Vec2 model)"),tor=l(),U5=a("li"),Eue=a("strong"),aor=o("wav2vec2-conformer"),nor=o(" \u2014 "),vz=a("a"),sor=o("Wav2Vec2ConformerForAudioFrameClassification"),lor=o(" (Wav2Vec2-Conformer model)"),ior=l(),J5=a("li"),Cue=a("strong"),dor=o("wavlm"),cor=o(" \u2014 "),Fz=a("a"),mor=o("WavLMForAudioFrameClassification"),gor=o(" (WavLM model)"),hor=l(),Y5=a("p"),por=o("The model is set in evaluation mode by default using "),wue=a("code"),_or=o("model.eval()"),uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),bor=o("model.train()"),vor=l(),F(K5.$$.fragment),Eje=l(),ud=a("h2"),Z5=a("a"),yue=a("span"),F(xL.$$.fragment),For=l(),Lue=a("span"),Tor=o("AutoModelForCTC"),Cje=l(),Vo=a("div"),F($L.$$.fragment),Mor=l(),bd=a("p"),Eor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tz=a("a"),Cor=o("from_pretrained()"),wor=o(" class method or the "),Mz=a("a"),Aor=o("from_config()"),yor=o(` class
method.`),Lor=l(),kL=a("p"),xor=o("This class cannot be instantiated directly using "),xue=a("code"),$or=o("__init__()"),kor=o(" (throws an error)."),Sor=l(),Ft=a("div"),F(SL.$$.fragment),Ror=l(),$ue=a("p"),Por=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bor=l(),vd=a("p"),Ior=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),Nor=o("not"),qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),jor=o("from_pretrained()"),Dor=o(" to load the model weights."),Gor=l(),F(e3.$$.fragment),Oor=l(),mo=a("div"),F(RL.$$.fragment),Vor=l(),Sue=a("p"),Xor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zor=l(),Xa=a("p"),Wor=o("The model class to instantiate is selected based on the "),Rue=a("code"),Qor=o("model_type"),Hor=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Yor=o("pretrained_model_name_or_path"),Kor=o(":"),Zor=l(),Re=a("ul"),o3=a("li"),Iue=a("strong"),err=o("data2vec-audio"),orr=o(" \u2014 "),Cz=a("a"),rrr=o("Data2VecAudioForCTC"),trr=o(" (Data2VecAudio model)"),arr=l(),r3=a("li"),Nue=a("strong"),nrr=o("hubert"),srr=o(" \u2014 "),wz=a("a"),lrr=o("HubertForCTC"),irr=o(" (Hubert model)"),drr=l(),t3=a("li"),que=a("strong"),crr=o("sew"),frr=o(" \u2014 "),Az=a("a"),mrr=o("SEWForCTC"),grr=o(" (SEW model)"),hrr=l(),a3=a("li"),jue=a("strong"),prr=o("sew-d"),_rr=o(" \u2014 "),yz=a("a"),urr=o("SEWDForCTC"),brr=o(" (SEW-D model)"),vrr=l(),n3=a("li"),Due=a("strong"),Frr=o("unispeech"),Trr=o(" \u2014 "),Lz=a("a"),Mrr=o("UniSpeechForCTC"),Err=o(" (UniSpeech model)"),Crr=l(),s3=a("li"),Gue=a("strong"),wrr=o("unispeech-sat"),Arr=o(" \u2014 "),xz=a("a"),yrr=o("UniSpeechSatForCTC"),Lrr=o(" (UniSpeechSat model)"),xrr=l(),l3=a("li"),Oue=a("strong"),$rr=o("wav2vec2"),krr=o(" \u2014 "),$z=a("a"),Srr=o("Wav2Vec2ForCTC"),Rrr=o(" (Wav2Vec2 model)"),Prr=l(),i3=a("li"),Vue=a("strong"),Brr=o("wav2vec2-conformer"),Irr=o(" \u2014 "),kz=a("a"),Nrr=o("Wav2Vec2ConformerForCTC"),qrr=o(" (Wav2Vec2-Conformer model)"),jrr=l(),d3=a("li"),Xue=a("strong"),Drr=o("wavlm"),Grr=o(" \u2014 "),Sz=a("a"),Orr=o("WavLMForCTC"),Vrr=o(" (WavLM model)"),Xrr=l(),c3=a("p"),zrr=o("The model is set in evaluation mode by default using "),zue=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),Hrr=o("model.train()"),Urr=l(),F(f3.$$.fragment),wje=l(),Fd=a("h2"),m3=a("a"),Que=a("span"),F(PL.$$.fragment),Jrr=l(),Hue=a("span"),Yrr=o("AutoModelForSpeechSeq2Seq"),Aje=l(),Xo=a("div"),F(BL.$$.fragment),Krr=l(),Td=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),Pz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),IL=a("p"),ntr=o("This class cannot be instantiated directly using "),Uue=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Tt=a("div"),F(NL.$$.fragment),dtr=l(),Jue=a("p"),ctr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ftr=l(),Md=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(g3.$$.fragment),btr=l(),go=a("div"),F(qL.$$.fragment),vtr=l(),Kue=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ttr=l(),za=a("p"),Mtr=o("The model class to instantiate is selected based on the "),Zue=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),jL=a("ul"),h3=a("li"),r1e=a("strong"),$tr=o("speech-encoder-decoder"),ktr=o(" \u2014 "),Iz=a("a"),Str=o("SpeechEncoderDecoderModel"),Rtr=o(" (Speech Encoder decoder model)"),Ptr=l(),p3=a("li"),t1e=a("strong"),Btr=o("speech_to_text"),Itr=o(" \u2014 "),Nz=a("a"),Ntr=o("Speech2TextForConditionalGeneration"),qtr=o(" (Speech2Text model)"),jtr=l(),_3=a("p"),Dtr=o("The model is set in evaluation mode by default using "),a1e=a("code"),Gtr=o("model.eval()"),Otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),Vtr=o("model.train()"),Xtr=l(),F(u3.$$.fragment),yje=l(),Ed=a("h2"),b3=a("a"),s1e=a("span"),F(DL.$$.fragment),ztr=l(),l1e=a("span"),Wtr=o("AutoModelForAudioXVector"),Lje=l(),zo=a("div"),F(GL.$$.fragment),Qtr=l(),Cd=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qz=a("a"),Utr=o("from_pretrained()"),Jtr=o(" class method or the "),jz=a("a"),Ytr=o("from_config()"),Ktr=o(` class
method.`),Ztr=l(),OL=a("p"),ear=o("This class cannot be instantiated directly using "),i1e=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),Mt=a("div"),F(VL.$$.fragment),aar=l(),d1e=a("p"),nar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sar=l(),wd=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),car=o("from_pretrained()"),far=o(" to load the model weights."),mar=l(),F(v3.$$.fragment),gar=l(),ho=a("div"),F(XL.$$.fragment),har=l(),f1e=a("p"),par=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_ar=l(),Wa=a("p"),uar=o("The model class to instantiate is selected based on the "),m1e=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),Zr=a("ul"),F3=a("li"),p1e=a("strong"),Aar=o("data2vec-audio"),yar=o(" \u2014 "),Gz=a("a"),Lar=o("Data2VecAudioForXVector"),xar=o(" (Data2VecAudio model)"),$ar=l(),T3=a("li"),_1e=a("strong"),kar=o("unispeech-sat"),Sar=o(" \u2014 "),Oz=a("a"),Rar=o("UniSpeechSatForXVector"),Par=o(" (UniSpeechSat model)"),Bar=l(),M3=a("li"),u1e=a("strong"),Iar=o("wav2vec2"),Nar=o(" \u2014 "),Vz=a("a"),qar=o("Wav2Vec2ForXVector"),jar=o(" (Wav2Vec2 model)"),Dar=l(),E3=a("li"),b1e=a("strong"),Gar=o("wav2vec2-conformer"),Oar=o(" \u2014 "),Xz=a("a"),Var=o("Wav2Vec2ConformerForXVector"),Xar=o(" (Wav2Vec2-Conformer model)"),zar=l(),C3=a("li"),v1e=a("strong"),War=o("wavlm"),Qar=o(" \u2014 "),zz=a("a"),Har=o("WavLMForXVector"),Uar=o(" (WavLM model)"),Jar=l(),w3=a("p"),Yar=o("The model is set in evaluation mode by default using "),F1e=a("code"),Kar=o("model.eval()"),Zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),enr=o("model.train()"),onr=l(),F(A3.$$.fragment),xje=l(),Ad=a("h2"),y3=a("a"),M1e=a("span"),F(zL.$$.fragment),rnr=l(),E1e=a("span"),tnr=o("AutoModelForMaskedImageModeling"),$je=l(),Wo=a("div"),F(WL.$$.fragment),anr=l(),yd=a("p"),nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wz=a("a"),snr=o("from_pretrained()"),lnr=o(" class method or the "),Qz=a("a"),inr=o("from_config()"),dnr=o(` class
method.`),cnr=l(),QL=a("p"),fnr=o("This class cannot be instantiated directly using "),C1e=a("code"),mnr=o("__init__()"),gnr=o(" (throws an error)."),hnr=l(),Et=a("div"),F(HL.$$.fragment),pnr=l(),w1e=a("p"),_nr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),unr=l(),Ld=a("p"),bnr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),vnr=o("not"),Fnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Tnr=o("from_pretrained()"),Mnr=o(" to load the model weights."),Enr=l(),F(L3.$$.fragment),Cnr=l(),po=a("div"),F(UL.$$.fragment),wnr=l(),y1e=a("p"),Anr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ynr=l(),Qa=a("p"),Lnr=o("The model class to instantiate is selected based on the "),L1e=a("code"),xnr=o("model_type"),$nr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(":"),Bnr=l(),xd=a("ul"),x3=a("li"),k1e=a("strong"),Inr=o("deit"),Nnr=o(" \u2014 "),Uz=a("a"),qnr=o("DeiTForMaskedImageModeling"),jnr=o(" (DeiT model)"),Dnr=l(),$3=a("li"),S1e=a("strong"),Gnr=o("swin"),Onr=o(" \u2014 "),Jz=a("a"),Vnr=o("SwinForMaskedImageModeling"),Xnr=o(" (Swin model)"),znr=l(),k3=a("li"),R1e=a("strong"),Wnr=o("vit"),Qnr=o(" \u2014 "),Yz=a("a"),Hnr=o("ViTForMaskedImageModeling"),Unr=o(" (ViT model)"),Jnr=l(),S3=a("p"),Ynr=o("The model is set in evaluation mode by default using "),P1e=a("code"),Knr=o("model.eval()"),Znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=a("code"),esr=o("model.train()"),osr=l(),F(R3.$$.fragment),kje=l(),$d=a("h2"),P3=a("a"),I1e=a("span"),F(JL.$$.fragment),rsr=l(),N1e=a("span"),tsr=o("AutoModelForObjectDetection"),Sje=l(),Qo=a("div"),F(YL.$$.fragment),asr=l(),kd=a("p"),nsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Kz=a("a"),ssr=o("from_pretrained()"),lsr=o(" class method or the "),Zz=a("a"),isr=o("from_config()"),dsr=o(` class
method.`),csr=l(),KL=a("p"),fsr=o("This class cannot be instantiated directly using "),q1e=a("code"),msr=o("__init__()"),gsr=o(" (throws an error)."),hsr=l(),Ct=a("div"),F(ZL.$$.fragment),psr=l(),j1e=a("p"),_sr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),usr=l(),Sd=a("p"),bsr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),vsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Tsr=o("from_pretrained()"),Msr=o(" to load the model weights."),Esr=l(),F(B3.$$.fragment),Csr=l(),_o=a("div"),F(e8.$$.fragment),wsr=l(),G1e=a("p"),Asr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ysr=l(),Ha=a("p"),Lsr=o("The model class to instantiate is selected based on the "),O1e=a("code"),xsr=o("model_type"),$sr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(":"),Bsr=l(),o8=a("ul"),I3=a("li"),z1e=a("strong"),Isr=o("detr"),Nsr=o(" \u2014 "),oW=a("a"),qsr=o("DetrForObjectDetection"),jsr=o(" (DETR model)"),Dsr=l(),N3=a("li"),W1e=a("strong"),Gsr=o("yolos"),Osr=o(" \u2014 "),rW=a("a"),Vsr=o("YolosForObjectDetection"),Xsr=o(" (YOLOS model)"),zsr=l(),q3=a("p"),Wsr=o("The model is set in evaluation mode by default using "),Q1e=a("code"),Qsr=o("model.eval()"),Hsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=a("code"),Usr=o("model.train()"),Jsr=l(),F(j3.$$.fragment),Rje=l(),Rd=a("h2"),D3=a("a"),U1e=a("span"),F(r8.$$.fragment),Ysr=l(),J1e=a("span"),Ksr=o("AutoModelForImageSegmentation"),Pje=l(),Ho=a("div"),F(t8.$$.fragment),Zsr=l(),Pd=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tW=a("a"),olr=o("from_pretrained()"),rlr=o(" class method or the "),aW=a("a"),tlr=o("from_config()"),alr=o(` class
method.`),nlr=l(),a8=a("p"),slr=o("This class cannot be instantiated directly using "),Y1e=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),wt=a("div"),F(n8.$$.fragment),clr=l(),K1e=a("p"),flr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mlr=l(),Bd=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),hlr=o("not"),plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),_lr=o("from_pretrained()"),ulr=o(" to load the model weights."),blr=l(),F(G3.$$.fragment),vlr=l(),uo=a("div"),F(s8.$$.fragment),Flr=l(),ebe=a("p"),Tlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Mlr=l(),Ua=a("p"),Elr=o("The model class to instantiate is selected based on the "),obe=a("code"),Clr=o("model_type"),wlr=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),Alr=o("pretrained_model_name_or_path"),ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),Llr=o("pretrained_model_name_or_path"),xlr=o(":"),$lr=l(),abe=a("ul"),O3=a("li"),nbe=a("strong"),klr=o("detr"),Slr=o(" \u2014 "),sW=a("a"),Rlr=o("DetrForSegmentation"),Plr=o(" (DETR model)"),Blr=l(),V3=a("p"),Ilr=o("The model is set in evaluation mode by default using "),sbe=a("code"),Nlr=o("model.eval()"),qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),jlr=o("model.train()"),Dlr=l(),F(X3.$$.fragment),Bje=l(),Id=a("h2"),z3=a("a"),ibe=a("span"),F(l8.$$.fragment),Glr=l(),dbe=a("span"),Olr=o("AutoModelForSemanticSegmentation"),Ije=l(),Uo=a("div"),F(i8.$$.fragment),Vlr=l(),Nd=a("p"),Xlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lW=a("a"),zlr=o("from_pretrained()"),Wlr=o(" class method or the "),iW=a("a"),Qlr=o("from_config()"),Hlr=o(` class
method.`),Ulr=l(),d8=a("p"),Jlr=o("This class cannot be instantiated directly using "),cbe=a("code"),Ylr=o("__init__()"),Klr=o(" (throws an error)."),Zlr=l(),At=a("div"),F(c8.$$.fragment),eir=l(),fbe=a("p"),oir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rir=l(),qd=a("p"),tir=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),air=o("not"),nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),sir=o("from_pretrained()"),lir=o(" to load the model weights."),iir=l(),F(W3.$$.fragment),dir=l(),bo=a("div"),F(f8.$$.fragment),cir=l(),gbe=a("p"),fir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mir=l(),Ja=a("p"),gir=o("The model class to instantiate is selected based on the "),hbe=a("code"),hir=o("model_type"),pir=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(":"),Fir=l(),et=a("ul"),Q3=a("li"),ube=a("strong"),Tir=o("beit"),Mir=o(" \u2014 "),cW=a("a"),Eir=o("BeitForSemanticSegmentation"),Cir=o(" (BEiT model)"),wir=l(),H3=a("li"),bbe=a("strong"),Air=o("data2vec-vision"),yir=o(" \u2014 "),fW=a("a"),Lir=o("Data2VecVisionForSemanticSegmentation"),xir=o(" (Data2VecVision model)"),$ir=l(),U3=a("li"),vbe=a("strong"),kir=o("dpt"),Sir=o(" \u2014 "),mW=a("a"),Rir=o("DPTForSemanticSegmentation"),Pir=o(" (DPT model)"),Bir=l(),J3=a("li"),Fbe=a("strong"),Iir=o("mobilevit"),Nir=o(" \u2014 "),gW=a("a"),qir=o("MobileViTForSemanticSegmentation"),jir=o(" (MobileViT model)"),Dir=l(),Y3=a("li"),Tbe=a("strong"),Gir=o("segformer"),Oir=o(" \u2014 "),hW=a("a"),Vir=o("SegformerForSemanticSegmentation"),Xir=o(" (SegFormer model)"),zir=l(),K3=a("p"),Wir=o("The model is set in evaluation mode by default using "),Mbe=a("code"),Qir=o("model.eval()"),Hir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),Uir=o("model.train()"),Jir=l(),F(Z3.$$.fragment),Nje=l(),jd=a("h2"),eF=a("a"),Cbe=a("span"),F(m8.$$.fragment),Yir=l(),wbe=a("span"),Kir=o("AutoModelForInstanceSegmentation"),qje=l(),Jo=a("div"),F(g8.$$.fragment),Zir=l(),Dd=a("p"),edr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=a("a"),odr=o("from_pretrained()"),rdr=o(" class method or the "),_W=a("a"),tdr=o("from_config()"),adr=o(` class
method.`),ndr=l(),h8=a("p"),sdr=o("This class cannot be instantiated directly using "),Abe=a("code"),ldr=o("__init__()"),idr=o(" (throws an error)."),ddr=l(),yt=a("div"),F(p8.$$.fragment),cdr=l(),ybe=a("p"),fdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mdr=l(),Gd=a("p"),gdr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),hdr=o("not"),pdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),_dr=o("from_pretrained()"),udr=o(" to load the model weights."),bdr=l(),F(oF.$$.fragment),vdr=l(),vo=a("div"),F(_8.$$.fragment),Fdr=l(),xbe=a("p"),Tdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mdr=l(),Ya=a("p"),Edr=o("The model class to instantiate is selected based on the "),$be=a("code"),Cdr=o("model_type"),wdr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Adr=o("pretrained_model_name_or_path"),ydr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),Ldr=o("pretrained_model_name_or_path"),xdr=o(":"),$dr=l(),Rbe=a("ul"),rF=a("li"),Pbe=a("strong"),kdr=o("maskformer"),Sdr=o(" \u2014 "),bW=a("a"),Rdr=o("MaskFormerForInstanceSegmentation"),Pdr=o(" (MaskFormer model)"),Bdr=l(),tF=a("p"),Idr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),Ndr=o("model.eval()"),qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),jdr=o("model.train()"),Ddr=l(),F(aF.$$.fragment),jje=l(),Od=a("h2"),nF=a("a"),Nbe=a("span"),F(u8.$$.fragment),Gdr=l(),qbe=a("span"),Odr=o("TFAutoModel"),Dje=l(),Yo=a("div"),F(b8.$$.fragment),Vdr=l(),Vd=a("p"),Xdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=a("a"),zdr=o("from_pretrained()"),Wdr=o(" class method or the "),FW=a("a"),Qdr=o("from_config()"),Hdr=o(` class
method.`),Udr=l(),v8=a("p"),Jdr=o("This class cannot be instantiated directly using "),jbe=a("code"),Ydr=o("__init__()"),Kdr=o(" (throws an error)."),Zdr=l(),Lt=a("div"),F(F8.$$.fragment),ecr=l(),Dbe=a("p"),ocr=o("Instantiates one of the base model classes of the library from a configuration."),rcr=l(),Xd=a("p"),tcr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),acr=o("not"),ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),scr=o("from_pretrained()"),lcr=o(" to load the model weights."),icr=l(),F(sF.$$.fragment),dcr=l(),wr=a("div"),F(T8.$$.fragment),ccr=l(),Obe=a("p"),fcr=o("Instantiate one of the base model classes of the library from a pretrained model."),mcr=l(),Ka=a("p"),gcr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),hcr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Fcr=l(),q=a("ul"),lF=a("li"),Wbe=a("strong"),Tcr=o("albert"),Mcr=o(" \u2014 "),MW=a("a"),Ecr=o("TFAlbertModel"),Ccr=o(" (ALBERT model)"),wcr=l(),iF=a("li"),Qbe=a("strong"),Acr=o("bart"),ycr=o(" \u2014 "),EW=a("a"),Lcr=o("TFBartModel"),xcr=o(" (BART model)"),$cr=l(),dF=a("li"),Hbe=a("strong"),kcr=o("bert"),Scr=o(" \u2014 "),CW=a("a"),Rcr=o("TFBertModel"),Pcr=o(" (BERT model)"),Bcr=l(),cF=a("li"),Ube=a("strong"),Icr=o("blenderbot"),Ncr=o(" \u2014 "),wW=a("a"),qcr=o("TFBlenderbotModel"),jcr=o(" (Blenderbot model)"),Dcr=l(),fF=a("li"),Jbe=a("strong"),Gcr=o("blenderbot-small"),Ocr=o(" \u2014 "),AW=a("a"),Vcr=o("TFBlenderbotSmallModel"),Xcr=o(" (BlenderbotSmall model)"),zcr=l(),mF=a("li"),Ybe=a("strong"),Wcr=o("camembert"),Qcr=o(" \u2014 "),yW=a("a"),Hcr=o("TFCamembertModel"),Ucr=o(" (CamemBERT model)"),Jcr=l(),gF=a("li"),Kbe=a("strong"),Ycr=o("clip"),Kcr=o(" \u2014 "),LW=a("a"),Zcr=o("TFCLIPModel"),efr=o(" (CLIP model)"),ofr=l(),hF=a("li"),Zbe=a("strong"),rfr=o("convbert"),tfr=o(" \u2014 "),xW=a("a"),afr=o("TFConvBertModel"),nfr=o(" (ConvBERT model)"),sfr=l(),pF=a("li"),e2e=a("strong"),lfr=o("convnext"),ifr=o(" \u2014 "),$W=a("a"),dfr=o("TFConvNextModel"),cfr=o(" (ConvNext model)"),ffr=l(),_F=a("li"),o2e=a("strong"),mfr=o("ctrl"),gfr=o(" \u2014 "),kW=a("a"),hfr=o("TFCTRLModel"),pfr=o(" (CTRL model)"),_fr=l(),uF=a("li"),r2e=a("strong"),ufr=o("data2vec-vision"),bfr=o(" \u2014 "),SW=a("a"),vfr=o("TFData2VecVisionModel"),Ffr=o(" (Data2VecVision model)"),Tfr=l(),bF=a("li"),t2e=a("strong"),Mfr=o("deberta"),Efr=o(" \u2014 "),RW=a("a"),Cfr=o("TFDebertaModel"),wfr=o(" (DeBERTa model)"),Afr=l(),vF=a("li"),a2e=a("strong"),yfr=o("deberta-v2"),Lfr=o(" \u2014 "),PW=a("a"),xfr=o("TFDebertaV2Model"),$fr=o(" (DeBERTa-v2 model)"),kfr=l(),FF=a("li"),n2e=a("strong"),Sfr=o("distilbert"),Rfr=o(" \u2014 "),BW=a("a"),Pfr=o("TFDistilBertModel"),Bfr=o(" (DistilBERT model)"),Ifr=l(),TF=a("li"),s2e=a("strong"),Nfr=o("dpr"),qfr=o(" \u2014 "),IW=a("a"),jfr=o("TFDPRQuestionEncoder"),Dfr=o(" (DPR model)"),Gfr=l(),MF=a("li"),l2e=a("strong"),Ofr=o("electra"),Vfr=o(" \u2014 "),NW=a("a"),Xfr=o("TFElectraModel"),zfr=o(" (ELECTRA model)"),Wfr=l(),EF=a("li"),i2e=a("strong"),Qfr=o("flaubert"),Hfr=o(" \u2014 "),qW=a("a"),Ufr=o("TFFlaubertModel"),Jfr=o(" (FlauBERT model)"),Yfr=l(),Is=a("li"),d2e=a("strong"),Kfr=o("funnel"),Zfr=o(" \u2014 "),jW=a("a"),emr=o("TFFunnelModel"),omr=o(" or "),DW=a("a"),rmr=o("TFFunnelBaseModel"),tmr=o(" (Funnel Transformer model)"),amr=l(),CF=a("li"),c2e=a("strong"),nmr=o("gpt2"),smr=o(" \u2014 "),GW=a("a"),lmr=o("TFGPT2Model"),imr=o(" (OpenAI GPT-2 model)"),dmr=l(),wF=a("li"),f2e=a("strong"),cmr=o("gptj"),fmr=o(" \u2014 "),OW=a("a"),mmr=o("TFGPTJModel"),gmr=o(" (GPT-J model)"),hmr=l(),AF=a("li"),m2e=a("strong"),pmr=o("hubert"),_mr=o(" \u2014 "),VW=a("a"),umr=o("TFHubertModel"),bmr=o(" (Hubert model)"),vmr=l(),yF=a("li"),g2e=a("strong"),Fmr=o("layoutlm"),Tmr=o(" \u2014 "),XW=a("a"),Mmr=o("TFLayoutLMModel"),Emr=o(" (LayoutLM model)"),Cmr=l(),LF=a("li"),h2e=a("strong"),wmr=o("led"),Amr=o(" \u2014 "),zW=a("a"),ymr=o("TFLEDModel"),Lmr=o(" (LED model)"),xmr=l(),xF=a("li"),p2e=a("strong"),$mr=o("longformer"),kmr=o(" \u2014 "),WW=a("a"),Smr=o("TFLongformerModel"),Rmr=o(" (Longformer model)"),Pmr=l(),$F=a("li"),_2e=a("strong"),Bmr=o("lxmert"),Imr=o(" \u2014 "),QW=a("a"),Nmr=o("TFLxmertModel"),qmr=o(" (LXMERT model)"),jmr=l(),kF=a("li"),u2e=a("strong"),Dmr=o("marian"),Gmr=o(" \u2014 "),HW=a("a"),Omr=o("TFMarianModel"),Vmr=o(" (Marian model)"),Xmr=l(),SF=a("li"),b2e=a("strong"),zmr=o("mbart"),Wmr=o(" \u2014 "),UW=a("a"),Qmr=o("TFMBartModel"),Hmr=o(" (mBART model)"),Umr=l(),RF=a("li"),v2e=a("strong"),Jmr=o("mobilebert"),Ymr=o(" \u2014 "),JW=a("a"),Kmr=o("TFMobileBertModel"),Zmr=o(" (MobileBERT model)"),egr=l(),PF=a("li"),F2e=a("strong"),ogr=o("mpnet"),rgr=o(" \u2014 "),YW=a("a"),tgr=o("TFMPNetModel"),agr=o(" (MPNet model)"),ngr=l(),BF=a("li"),T2e=a("strong"),sgr=o("mt5"),lgr=o(" \u2014 "),KW=a("a"),igr=o("TFMT5Model"),dgr=o(" (mT5 model)"),cgr=l(),IF=a("li"),M2e=a("strong"),fgr=o("openai-gpt"),mgr=o(" \u2014 "),ZW=a("a"),ggr=o("TFOpenAIGPTModel"),hgr=o(" (OpenAI GPT model)"),pgr=l(),NF=a("li"),E2e=a("strong"),_gr=o("opt"),ugr=o(" \u2014 "),eQ=a("a"),bgr=o("TFOPTModel"),vgr=o(" (OPT model)"),Fgr=l(),qF=a("li"),C2e=a("strong"),Tgr=o("pegasus"),Mgr=o(" \u2014 "),oQ=a("a"),Egr=o("TFPegasusModel"),Cgr=o(" (Pegasus model)"),wgr=l(),jF=a("li"),w2e=a("strong"),Agr=o("rembert"),ygr=o(" \u2014 "),rQ=a("a"),Lgr=o("TFRemBertModel"),xgr=o(" (RemBERT model)"),$gr=l(),DF=a("li"),A2e=a("strong"),kgr=o("roberta"),Sgr=o(" \u2014 "),tQ=a("a"),Rgr=o("TFRobertaModel"),Pgr=o(" (RoBERTa model)"),Bgr=l(),GF=a("li"),y2e=a("strong"),Igr=o("roformer"),Ngr=o(" \u2014 "),aQ=a("a"),qgr=o("TFRoFormerModel"),jgr=o(" (RoFormer model)"),Dgr=l(),OF=a("li"),L2e=a("strong"),Ggr=o("speech_to_text"),Ogr=o(" \u2014 "),nQ=a("a"),Vgr=o("TFSpeech2TextModel"),Xgr=o(" (Speech2Text model)"),zgr=l(),VF=a("li"),x2e=a("strong"),Wgr=o("swin"),Qgr=o(" \u2014 "),sQ=a("a"),Hgr=o("TFSwinModel"),Ugr=o(" (Swin model)"),Jgr=l(),XF=a("li"),$2e=a("strong"),Ygr=o("t5"),Kgr=o(" \u2014 "),lQ=a("a"),Zgr=o("TFT5Model"),ehr=o(" (T5 model)"),ohr=l(),zF=a("li"),k2e=a("strong"),rhr=o("tapas"),thr=o(" \u2014 "),iQ=a("a"),ahr=o("TFTapasModel"),nhr=o(" (TAPAS model)"),shr=l(),WF=a("li"),S2e=a("strong"),lhr=o("transfo-xl"),ihr=o(" \u2014 "),dQ=a("a"),dhr=o("TFTransfoXLModel"),chr=o(" (Transformer-XL model)"),fhr=l(),QF=a("li"),R2e=a("strong"),mhr=o("vit"),ghr=o(" \u2014 "),cQ=a("a"),hhr=o("TFViTModel"),phr=o(" (ViT model)"),_hr=l(),HF=a("li"),P2e=a("strong"),uhr=o("vit_mae"),bhr=o(" \u2014 "),fQ=a("a"),vhr=o("TFViTMAEModel"),Fhr=o(" (ViTMAE model)"),Thr=l(),UF=a("li"),B2e=a("strong"),Mhr=o("wav2vec2"),Ehr=o(" \u2014 "),mQ=a("a"),Chr=o("TFWav2Vec2Model"),whr=o(" (Wav2Vec2 model)"),Ahr=l(),JF=a("li"),I2e=a("strong"),yhr=o("xlm"),Lhr=o(" \u2014 "),gQ=a("a"),xhr=o("TFXLMModel"),$hr=o(" (XLM model)"),khr=l(),YF=a("li"),N2e=a("strong"),Shr=o("xlm-roberta"),Rhr=o(" \u2014 "),hQ=a("a"),Phr=o("TFXLMRobertaModel"),Bhr=o(" (XLM-RoBERTa model)"),Ihr=l(),KF=a("li"),q2e=a("strong"),Nhr=o("xlnet"),qhr=o(" \u2014 "),pQ=a("a"),jhr=o("TFXLNetModel"),Dhr=o(" (XLNet model)"),Ghr=l(),F(ZF.$$.fragment),Gje=l(),zd=a("h2"),eT=a("a"),j2e=a("span"),F(M8.$$.fragment),Ohr=l(),D2e=a("span"),Vhr=o("TFAutoModelForPreTraining"),Oje=l(),Ko=a("div"),F(E8.$$.fragment),Xhr=l(),Wd=a("p"),zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=a("a"),Whr=o("from_pretrained()"),Qhr=o(" class method or the "),uQ=a("a"),Hhr=o("from_config()"),Uhr=o(` class
method.`),Jhr=l(),C8=a("p"),Yhr=o("This class cannot be instantiated directly using "),G2e=a("code"),Khr=o("__init__()"),Zhr=o(" (throws an error)."),epr=l(),xt=a("div"),F(w8.$$.fragment),opr=l(),O2e=a("p"),rpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tpr=l(),Qd=a("p"),apr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),npr=o("not"),spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),lpr=o("from_pretrained()"),ipr=o(" to load the model weights."),dpr=l(),F(oT.$$.fragment),cpr=l(),Ar=a("div"),F(A8.$$.fragment),fpr=l(),X2e=a("p"),mpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gpr=l(),Za=a("p"),hpr=o("The model class to instantiate is selected based on the "),z2e=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(":"),Tpr=l(),se=a("ul"),rT=a("li"),H2e=a("strong"),Mpr=o("albert"),Epr=o(" \u2014 "),vQ=a("a"),Cpr=o("TFAlbertForPreTraining"),wpr=o(" (ALBERT model)"),Apr=l(),tT=a("li"),U2e=a("strong"),ypr=o("bart"),Lpr=o(" \u2014 "),FQ=a("a"),xpr=o("TFBartForConditionalGeneration"),$pr=o(" (BART model)"),kpr=l(),aT=a("li"),J2e=a("strong"),Spr=o("bert"),Rpr=o(" \u2014 "),TQ=a("a"),Ppr=o("TFBertForPreTraining"),Bpr=o(" (BERT model)"),Ipr=l(),nT=a("li"),Y2e=a("strong"),Npr=o("camembert"),qpr=o(" \u2014 "),MQ=a("a"),jpr=o("TFCamembertForMaskedLM"),Dpr=o(" (CamemBERT model)"),Gpr=l(),sT=a("li"),K2e=a("strong"),Opr=o("ctrl"),Vpr=o(" \u2014 "),EQ=a("a"),Xpr=o("TFCTRLLMHeadModel"),zpr=o(" (CTRL model)"),Wpr=l(),lT=a("li"),Z2e=a("strong"),Qpr=o("distilbert"),Hpr=o(" \u2014 "),CQ=a("a"),Upr=o("TFDistilBertForMaskedLM"),Jpr=o(" (DistilBERT model)"),Ypr=l(),iT=a("li"),e4e=a("strong"),Kpr=o("electra"),Zpr=o(" \u2014 "),wQ=a("a"),e_r=o("TFElectraForPreTraining"),o_r=o(" (ELECTRA model)"),r_r=l(),dT=a("li"),o4e=a("strong"),t_r=o("flaubert"),a_r=o(" \u2014 "),AQ=a("a"),n_r=o("TFFlaubertWithLMHeadModel"),s_r=o(" (FlauBERT model)"),l_r=l(),cT=a("li"),r4e=a("strong"),i_r=o("funnel"),d_r=o(" \u2014 "),yQ=a("a"),c_r=o("TFFunnelForPreTraining"),f_r=o(" (Funnel Transformer model)"),m_r=l(),fT=a("li"),t4e=a("strong"),g_r=o("gpt2"),h_r=o(" \u2014 "),LQ=a("a"),p_r=o("TFGPT2LMHeadModel"),__r=o(" (OpenAI GPT-2 model)"),u_r=l(),mT=a("li"),a4e=a("strong"),b_r=o("layoutlm"),v_r=o(" \u2014 "),xQ=a("a"),F_r=o("TFLayoutLMForMaskedLM"),T_r=o(" (LayoutLM model)"),M_r=l(),gT=a("li"),n4e=a("strong"),E_r=o("lxmert"),C_r=o(" \u2014 "),$Q=a("a"),w_r=o("TFLxmertForPreTraining"),A_r=o(" (LXMERT model)"),y_r=l(),hT=a("li"),s4e=a("strong"),L_r=o("mobilebert"),x_r=o(" \u2014 "),kQ=a("a"),$_r=o("TFMobileBertForPreTraining"),k_r=o(" (MobileBERT model)"),S_r=l(),pT=a("li"),l4e=a("strong"),R_r=o("mpnet"),P_r=o(" \u2014 "),SQ=a("a"),B_r=o("TFMPNetForMaskedLM"),I_r=o(" (MPNet model)"),N_r=l(),_T=a("li"),i4e=a("strong"),q_r=o("openai-gpt"),j_r=o(" \u2014 "),RQ=a("a"),D_r=o("TFOpenAIGPTLMHeadModel"),G_r=o(" (OpenAI GPT model)"),O_r=l(),uT=a("li"),d4e=a("strong"),V_r=o("roberta"),X_r=o(" \u2014 "),PQ=a("a"),z_r=o("TFRobertaForMaskedLM"),W_r=o(" (RoBERTa model)"),Q_r=l(),bT=a("li"),c4e=a("strong"),H_r=o("t5"),U_r=o(" \u2014 "),BQ=a("a"),J_r=o("TFT5ForConditionalGeneration"),Y_r=o(" (T5 model)"),K_r=l(),vT=a("li"),f4e=a("strong"),Z_r=o("tapas"),eur=o(" \u2014 "),IQ=a("a"),our=o("TFTapasForMaskedLM"),rur=o(" (TAPAS model)"),tur=l(),FT=a("li"),m4e=a("strong"),aur=o("transfo-xl"),nur=o(" \u2014 "),NQ=a("a"),sur=o("TFTransfoXLLMHeadModel"),lur=o(" (Transformer-XL model)"),iur=l(),TT=a("li"),g4e=a("strong"),dur=o("vit_mae"),cur=o(" \u2014 "),qQ=a("a"),fur=o("TFViTMAEForPreTraining"),mur=o(" (ViTMAE model)"),gur=l(),MT=a("li"),h4e=a("strong"),hur=o("xlm"),pur=o(" \u2014 "),jQ=a("a"),_ur=o("TFXLMWithLMHeadModel"),uur=o(" (XLM model)"),bur=l(),ET=a("li"),p4e=a("strong"),vur=o("xlm-roberta"),Fur=o(" \u2014 "),DQ=a("a"),Tur=o("TFXLMRobertaForMaskedLM"),Mur=o(" (XLM-RoBERTa model)"),Eur=l(),CT=a("li"),_4e=a("strong"),Cur=o("xlnet"),wur=o(" \u2014 "),GQ=a("a"),Aur=o("TFXLNetLMHeadModel"),yur=o(" (XLNet model)"),Lur=l(),F(wT.$$.fragment),Vje=l(),Hd=a("h2"),AT=a("a"),u4e=a("span"),F(y8.$$.fragment),xur=l(),b4e=a("span"),$ur=o("TFAutoModelForCausalLM"),Xje=l(),Zo=a("div"),F(L8.$$.fragment),kur=l(),Ud=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=a("a"),Rur=o("from_pretrained()"),Pur=o(" class method or the "),VQ=a("a"),Bur=o("from_config()"),Iur=o(` class
method.`),Nur=l(),x8=a("p"),qur=o("This class cannot be instantiated directly using "),v4e=a("code"),jur=o("__init__()"),Dur=o(" (throws an error)."),Gur=l(),$t=a("div"),F($8.$$.fragment),Our=l(),F4e=a("p"),Vur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xur=l(),Jd=a("p"),zur=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),Wur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Hur=o("from_pretrained()"),Uur=o(" to load the model weights."),Jur=l(),F(yT.$$.fragment),Yur=l(),yr=a("div"),F(k8.$$.fragment),Kur=l(),M4e=a("p"),Zur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e1r=l(),en=a("p"),o1r=o("The model class to instantiate is selected based on the "),E4e=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),Me=a("ul"),LT=a("li"),A4e=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),zQ=a("a"),f1r=o("TFBertLMHeadModel"),m1r=o(" (BERT model)"),g1r=l(),xT=a("li"),y4e=a("strong"),h1r=o("camembert"),p1r=o(" \u2014 "),WQ=a("a"),_1r=o("TFCamembertForCausalLM"),u1r=o(" (CamemBERT model)"),b1r=l(),$T=a("li"),L4e=a("strong"),v1r=o("ctrl"),F1r=o(" \u2014 "),QQ=a("a"),T1r=o("TFCTRLLMHeadModel"),M1r=o(" (CTRL model)"),E1r=l(),kT=a("li"),x4e=a("strong"),C1r=o("gpt2"),w1r=o(" \u2014 "),HQ=a("a"),A1r=o("TFGPT2LMHeadModel"),y1r=o(" (OpenAI GPT-2 model)"),L1r=l(),ST=a("li"),$4e=a("strong"),x1r=o("gptj"),$1r=o(" \u2014 "),UQ=a("a"),k1r=o("TFGPTJForCausalLM"),S1r=o(" (GPT-J model)"),R1r=l(),RT=a("li"),k4e=a("strong"),P1r=o("openai-gpt"),B1r=o(" \u2014 "),JQ=a("a"),I1r=o("TFOpenAIGPTLMHeadModel"),N1r=o(" (OpenAI GPT model)"),q1r=l(),PT=a("li"),S4e=a("strong"),j1r=o("opt"),D1r=o(" \u2014 "),YQ=a("a"),G1r=o("TFOPTForCausalLM"),O1r=o(" (OPT model)"),V1r=l(),BT=a("li"),R4e=a("strong"),X1r=o("rembert"),z1r=o(" \u2014 "),KQ=a("a"),W1r=o("TFRemBertForCausalLM"),Q1r=o(" (RemBERT model)"),H1r=l(),IT=a("li"),P4e=a("strong"),U1r=o("roberta"),J1r=o(" \u2014 "),ZQ=a("a"),Y1r=o("TFRobertaForCausalLM"),K1r=o(" (RoBERTa model)"),Z1r=l(),NT=a("li"),B4e=a("strong"),ebr=o("roformer"),obr=o(" \u2014 "),eH=a("a"),rbr=o("TFRoFormerForCausalLM"),tbr=o(" (RoFormer model)"),abr=l(),qT=a("li"),I4e=a("strong"),nbr=o("transfo-xl"),sbr=o(" \u2014 "),oH=a("a"),lbr=o("TFTransfoXLLMHeadModel"),ibr=o(" (Transformer-XL model)"),dbr=l(),jT=a("li"),N4e=a("strong"),cbr=o("xlm"),fbr=o(" \u2014 "),rH=a("a"),mbr=o("TFXLMWithLMHeadModel"),gbr=o(" (XLM model)"),hbr=l(),DT=a("li"),q4e=a("strong"),pbr=o("xlnet"),_br=o(" \u2014 "),tH=a("a"),ubr=o("TFXLNetLMHeadModel"),bbr=o(" (XLNet model)"),vbr=l(),F(GT.$$.fragment),zje=l(),Yd=a("h2"),OT=a("a"),j4e=a("span"),F(S8.$$.fragment),Fbr=l(),D4e=a("span"),Tbr=o("TFAutoModelForImageClassification"),Wje=l(),er=a("div"),F(R8.$$.fragment),Mbr=l(),Kd=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),nH=a("a"),Abr=o("from_config()"),ybr=o(` class
method.`),Lbr=l(),P8=a("p"),xbr=o("This class cannot be instantiated directly using "),G4e=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),kt=a("div"),F(B8.$$.fragment),Rbr=l(),O4e=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bbr=l(),Zd=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),Nbr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(VT.$$.fragment),Obr=l(),Lr=a("div"),F(I8.$$.fragment),Vbr=l(),X4e=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zbr=l(),on=a("p"),Wbr=o("The model class to instantiate is selected based on the "),z4e=a("code"),Qbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),rn=a("ul"),XT=a("li"),H4e=a("strong"),e2r=o("convnext"),o2r=o(" \u2014 "),lH=a("a"),r2r=o("TFConvNextForImageClassification"),t2r=o(" (ConvNext model)"),a2r=l(),zT=a("li"),U4e=a("strong"),n2r=o("data2vec-vision"),s2r=o(" \u2014 "),iH=a("a"),l2r=o("TFData2VecVisionForImageClassification"),i2r=o(" (Data2VecVision model)"),d2r=l(),WT=a("li"),J4e=a("strong"),c2r=o("swin"),f2r=o(" \u2014 "),dH=a("a"),m2r=o("TFSwinForImageClassification"),g2r=o(" (Swin model)"),h2r=l(),QT=a("li"),Y4e=a("strong"),p2r=o("vit"),_2r=o(" \u2014 "),cH=a("a"),u2r=o("TFViTForImageClassification"),b2r=o(" (ViT model)"),v2r=l(),F(HT.$$.fragment),Qje=l(),ec=a("h2"),UT=a("a"),K4e=a("span"),F(N8.$$.fragment),F2r=l(),Z4e=a("span"),T2r=o("TFAutoModelForMaskedLM"),Hje=l(),or=a("div"),F(q8.$$.fragment),M2r=l(),oc=a("p"),E2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=a("a"),C2r=o("from_pretrained()"),w2r=o(" class method or the "),mH=a("a"),A2r=o("from_config()"),y2r=o(` class
method.`),L2r=l(),j8=a("p"),x2r=o("This class cannot be instantiated directly using "),eve=a("code"),$2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),St=a("div"),F(D8.$$.fragment),R2r=l(),ove=a("p"),P2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B2r=l(),rc=a("p"),I2r=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),N2r=o("not"),q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),j2r=o("from_pretrained()"),D2r=o(" to load the model weights."),G2r=l(),F(JT.$$.fragment),O2r=l(),xr=a("div"),F(G8.$$.fragment),V2r=l(),tve=a("p"),X2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z2r=l(),tn=a("p"),W2r=o("The model class to instantiate is selected based on the "),ave=a("code"),Q2r=o("model_type"),H2r=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(":"),Z2r=l(),ie=a("ul"),YT=a("li"),lve=a("strong"),e4r=o("albert"),o4r=o(" \u2014 "),hH=a("a"),r4r=o("TFAlbertForMaskedLM"),t4r=o(" (ALBERT model)"),a4r=l(),KT=a("li"),ive=a("strong"),n4r=o("bert"),s4r=o(" \u2014 "),pH=a("a"),l4r=o("TFBertForMaskedLM"),i4r=o(" (BERT model)"),d4r=l(),ZT=a("li"),dve=a("strong"),c4r=o("camembert"),f4r=o(" \u2014 "),_H=a("a"),m4r=o("TFCamembertForMaskedLM"),g4r=o(" (CamemBERT model)"),h4r=l(),e7=a("li"),cve=a("strong"),p4r=o("convbert"),_4r=o(" \u2014 "),uH=a("a"),u4r=o("TFConvBertForMaskedLM"),b4r=o(" (ConvBERT model)"),v4r=l(),o7=a("li"),fve=a("strong"),F4r=o("deberta"),T4r=o(" \u2014 "),bH=a("a"),M4r=o("TFDebertaForMaskedLM"),E4r=o(" (DeBERTa model)"),C4r=l(),r7=a("li"),mve=a("strong"),w4r=o("deberta-v2"),A4r=o(" \u2014 "),vH=a("a"),y4r=o("TFDebertaV2ForMaskedLM"),L4r=o(" (DeBERTa-v2 model)"),x4r=l(),t7=a("li"),gve=a("strong"),$4r=o("distilbert"),k4r=o(" \u2014 "),FH=a("a"),S4r=o("TFDistilBertForMaskedLM"),R4r=o(" (DistilBERT model)"),P4r=l(),a7=a("li"),hve=a("strong"),B4r=o("electra"),I4r=o(" \u2014 "),TH=a("a"),N4r=o("TFElectraForMaskedLM"),q4r=o(" (ELECTRA model)"),j4r=l(),n7=a("li"),pve=a("strong"),D4r=o("flaubert"),G4r=o(" \u2014 "),MH=a("a"),O4r=o("TFFlaubertWithLMHeadModel"),V4r=o(" (FlauBERT model)"),X4r=l(),s7=a("li"),_ve=a("strong"),z4r=o("funnel"),W4r=o(" \u2014 "),EH=a("a"),Q4r=o("TFFunnelForMaskedLM"),H4r=o(" (Funnel Transformer model)"),U4r=l(),l7=a("li"),uve=a("strong"),J4r=o("layoutlm"),Y4r=o(" \u2014 "),CH=a("a"),K4r=o("TFLayoutLMForMaskedLM"),Z4r=o(" (LayoutLM model)"),evr=l(),i7=a("li"),bve=a("strong"),ovr=o("longformer"),rvr=o(" \u2014 "),wH=a("a"),tvr=o("TFLongformerForMaskedLM"),avr=o(" (Longformer model)"),nvr=l(),d7=a("li"),vve=a("strong"),svr=o("mobilebert"),lvr=o(" \u2014 "),AH=a("a"),ivr=o("TFMobileBertForMaskedLM"),dvr=o(" (MobileBERT model)"),cvr=l(),c7=a("li"),Fve=a("strong"),fvr=o("mpnet"),mvr=o(" \u2014 "),yH=a("a"),gvr=o("TFMPNetForMaskedLM"),hvr=o(" (MPNet model)"),pvr=l(),f7=a("li"),Tve=a("strong"),_vr=o("rembert"),uvr=o(" \u2014 "),LH=a("a"),bvr=o("TFRemBertForMaskedLM"),vvr=o(" (RemBERT model)"),Fvr=l(),m7=a("li"),Mve=a("strong"),Tvr=o("roberta"),Mvr=o(" \u2014 "),xH=a("a"),Evr=o("TFRobertaForMaskedLM"),Cvr=o(" (RoBERTa model)"),wvr=l(),g7=a("li"),Eve=a("strong"),Avr=o("roformer"),yvr=o(" \u2014 "),$H=a("a"),Lvr=o("TFRoFormerForMaskedLM"),xvr=o(" (RoFormer model)"),$vr=l(),h7=a("li"),Cve=a("strong"),kvr=o("tapas"),Svr=o(" \u2014 "),kH=a("a"),Rvr=o("TFTapasForMaskedLM"),Pvr=o(" (TAPAS model)"),Bvr=l(),p7=a("li"),wve=a("strong"),Ivr=o("xlm"),Nvr=o(" \u2014 "),SH=a("a"),qvr=o("TFXLMWithLMHeadModel"),jvr=o(" (XLM model)"),Dvr=l(),_7=a("li"),Ave=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),RH=a("a"),Vvr=o("TFXLMRobertaForMaskedLM"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),F(u7.$$.fragment),Uje=l(),tc=a("h2"),b7=a("a"),yve=a("span"),F(O8.$$.fragment),Wvr=l(),Lve=a("span"),Qvr=o("TFAutoModelForSeq2SeqLM"),Jje=l(),rr=a("div"),F(V8.$$.fragment),Hvr=l(),ac=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" class method or the "),BH=a("a"),Kvr=o("from_config()"),Zvr=o(` class
method.`),e5r=l(),X8=a("p"),o5r=o("This class cannot be instantiated directly using "),xve=a("code"),r5r=o("__init__()"),t5r=o(" (throws an error)."),a5r=l(),Rt=a("div"),F(z8.$$.fragment),n5r=l(),$ve=a("p"),s5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l5r=l(),nc=a("p"),i5r=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),d5r=o("not"),c5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),f5r=o("from_pretrained()"),m5r=o(" to load the model weights."),g5r=l(),F(v7.$$.fragment),h5r=l(),$r=a("div"),F(W8.$$.fragment),p5r=l(),Sve=a("p"),_5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u5r=l(),an=a("p"),b5r=o("The model class to instantiate is selected based on the "),Rve=a("code"),v5r=o("model_type"),F5r=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),T5r=o("pretrained_model_name_or_path"),M5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),E5r=o("pretrained_model_name_or_path"),C5r=o(":"),w5r=l(),ye=a("ul"),F7=a("li"),Ive=a("strong"),A5r=o("bart"),y5r=o(" \u2014 "),NH=a("a"),L5r=o("TFBartForConditionalGeneration"),x5r=o(" (BART model)"),$5r=l(),T7=a("li"),Nve=a("strong"),k5r=o("blenderbot"),S5r=o(" \u2014 "),qH=a("a"),R5r=o("TFBlenderbotForConditionalGeneration"),P5r=o(" (Blenderbot model)"),B5r=l(),M7=a("li"),qve=a("strong"),I5r=o("blenderbot-small"),N5r=o(" \u2014 "),jH=a("a"),q5r=o("TFBlenderbotSmallForConditionalGeneration"),j5r=o(" (BlenderbotSmall model)"),D5r=l(),E7=a("li"),jve=a("strong"),G5r=o("encoder-decoder"),O5r=o(" \u2014 "),DH=a("a"),V5r=o("TFEncoderDecoderModel"),X5r=o(" (Encoder decoder model)"),z5r=l(),C7=a("li"),Dve=a("strong"),W5r=o("led"),Q5r=o(" \u2014 "),GH=a("a"),H5r=o("TFLEDForConditionalGeneration"),U5r=o(" (LED model)"),J5r=l(),w7=a("li"),Gve=a("strong"),Y5r=o("marian"),K5r=o(" \u2014 "),OH=a("a"),Z5r=o("TFMarianMTModel"),e3r=o(" (Marian model)"),o3r=l(),A7=a("li"),Ove=a("strong"),r3r=o("mbart"),t3r=o(" \u2014 "),VH=a("a"),a3r=o("TFMBartForConditionalGeneration"),n3r=o(" (mBART model)"),s3r=l(),y7=a("li"),Vve=a("strong"),l3r=o("mt5"),i3r=o(" \u2014 "),XH=a("a"),d3r=o("TFMT5ForConditionalGeneration"),c3r=o(" (mT5 model)"),f3r=l(),L7=a("li"),Xve=a("strong"),m3r=o("pegasus"),g3r=o(" \u2014 "),zH=a("a"),h3r=o("TFPegasusForConditionalGeneration"),p3r=o(" (Pegasus model)"),_3r=l(),x7=a("li"),zve=a("strong"),u3r=o("t5"),b3r=o(" \u2014 "),WH=a("a"),v3r=o("TFT5ForConditionalGeneration"),F3r=o(" (T5 model)"),T3r=l(),F($7.$$.fragment),Yje=l(),sc=a("h2"),k7=a("a"),Wve=a("span"),F(Q8.$$.fragment),M3r=l(),Qve=a("span"),E3r=o("TFAutoModelForSequenceClassification"),Kje=l(),tr=a("div"),F(H8.$$.fragment),C3r=l(),lc=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=a("a"),A3r=o("from_pretrained()"),y3r=o(" class method or the "),HH=a("a"),L3r=o("from_config()"),x3r=o(` class
method.`),$3r=l(),U8=a("p"),k3r=o("This class cannot be instantiated directly using "),Hve=a("code"),S3r=o("__init__()"),R3r=o(" (throws an error)."),P3r=l(),Pt=a("div"),F(J8.$$.fragment),B3r=l(),Uve=a("p"),I3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N3r=l(),ic=a("p"),q3r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),j3r=o("not"),D3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),G3r=o("from_pretrained()"),O3r=o(" to load the model weights."),V3r=l(),F(S7.$$.fragment),X3r=l(),kr=a("div"),F(Y8.$$.fragment),z3r=l(),Yve=a("p"),W3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q3r=l(),nn=a("p"),H3r=o("The model class to instantiate is selected based on the "),Kve=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),Z3r=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),oe=a("ul"),R7=a("li"),o5e=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),JH=a("a"),aFr=o("TFAlbertForSequenceClassification"),nFr=o(" (ALBERT model)"),sFr=l(),P7=a("li"),r5e=a("strong"),lFr=o("bert"),iFr=o(" \u2014 "),YH=a("a"),dFr=o("TFBertForSequenceClassification"),cFr=o(" (BERT model)"),fFr=l(),B7=a("li"),t5e=a("strong"),mFr=o("camembert"),gFr=o(" \u2014 "),KH=a("a"),hFr=o("TFCamembertForSequenceClassification"),pFr=o(" (CamemBERT model)"),_Fr=l(),I7=a("li"),a5e=a("strong"),uFr=o("convbert"),bFr=o(" \u2014 "),ZH=a("a"),vFr=o("TFConvBertForSequenceClassification"),FFr=o(" (ConvBERT model)"),TFr=l(),N7=a("li"),n5e=a("strong"),MFr=o("ctrl"),EFr=o(" \u2014 "),eU=a("a"),CFr=o("TFCTRLForSequenceClassification"),wFr=o(" (CTRL model)"),AFr=l(),q7=a("li"),s5e=a("strong"),yFr=o("deberta"),LFr=o(" \u2014 "),oU=a("a"),xFr=o("TFDebertaForSequenceClassification"),$Fr=o(" (DeBERTa model)"),kFr=l(),j7=a("li"),l5e=a("strong"),SFr=o("deberta-v2"),RFr=o(" \u2014 "),rU=a("a"),PFr=o("TFDebertaV2ForSequenceClassification"),BFr=o(" (DeBERTa-v2 model)"),IFr=l(),D7=a("li"),i5e=a("strong"),NFr=o("distilbert"),qFr=o(" \u2014 "),tU=a("a"),jFr=o("TFDistilBertForSequenceClassification"),DFr=o(" (DistilBERT model)"),GFr=l(),G7=a("li"),d5e=a("strong"),OFr=o("electra"),VFr=o(" \u2014 "),aU=a("a"),XFr=o("TFElectraForSequenceClassification"),zFr=o(" (ELECTRA model)"),WFr=l(),O7=a("li"),c5e=a("strong"),QFr=o("flaubert"),HFr=o(" \u2014 "),nU=a("a"),UFr=o("TFFlaubertForSequenceClassification"),JFr=o(" (FlauBERT model)"),YFr=l(),V7=a("li"),f5e=a("strong"),KFr=o("funnel"),ZFr=o(" \u2014 "),sU=a("a"),eTr=o("TFFunnelForSequenceClassification"),oTr=o(" (Funnel Transformer model)"),rTr=l(),X7=a("li"),m5e=a("strong"),tTr=o("gpt2"),aTr=o(" \u2014 "),lU=a("a"),nTr=o("TFGPT2ForSequenceClassification"),sTr=o(" (OpenAI GPT-2 model)"),lTr=l(),z7=a("li"),g5e=a("strong"),iTr=o("gptj"),dTr=o(" \u2014 "),iU=a("a"),cTr=o("TFGPTJForSequenceClassification"),fTr=o(" (GPT-J model)"),mTr=l(),W7=a("li"),h5e=a("strong"),gTr=o("layoutlm"),hTr=o(" \u2014 "),dU=a("a"),pTr=o("TFLayoutLMForSequenceClassification"),_Tr=o(" (LayoutLM model)"),uTr=l(),Q7=a("li"),p5e=a("strong"),bTr=o("longformer"),vTr=o(" \u2014 "),cU=a("a"),FTr=o("TFLongformerForSequenceClassification"),TTr=o(" (Longformer model)"),MTr=l(),H7=a("li"),_5e=a("strong"),ETr=o("mobilebert"),CTr=o(" \u2014 "),fU=a("a"),wTr=o("TFMobileBertForSequenceClassification"),ATr=o(" (MobileBERT model)"),yTr=l(),U7=a("li"),u5e=a("strong"),LTr=o("mpnet"),xTr=o(" \u2014 "),mU=a("a"),$Tr=o("TFMPNetForSequenceClassification"),kTr=o(" (MPNet model)"),STr=l(),J7=a("li"),b5e=a("strong"),RTr=o("openai-gpt"),PTr=o(" \u2014 "),gU=a("a"),BTr=o("TFOpenAIGPTForSequenceClassification"),ITr=o(" (OpenAI GPT model)"),NTr=l(),Y7=a("li"),v5e=a("strong"),qTr=o("rembert"),jTr=o(" \u2014 "),hU=a("a"),DTr=o("TFRemBertForSequenceClassification"),GTr=o(" (RemBERT model)"),OTr=l(),K7=a("li"),F5e=a("strong"),VTr=o("roberta"),XTr=o(" \u2014 "),pU=a("a"),zTr=o("TFRobertaForSequenceClassification"),WTr=o(" (RoBERTa model)"),QTr=l(),Z7=a("li"),T5e=a("strong"),HTr=o("roformer"),UTr=o(" \u2014 "),_U=a("a"),JTr=o("TFRoFormerForSequenceClassification"),YTr=o(" (RoFormer model)"),KTr=l(),eM=a("li"),M5e=a("strong"),ZTr=o("tapas"),e7r=o(" \u2014 "),uU=a("a"),o7r=o("TFTapasForSequenceClassification"),r7r=o(" (TAPAS model)"),t7r=l(),oM=a("li"),E5e=a("strong"),a7r=o("transfo-xl"),n7r=o(" \u2014 "),bU=a("a"),s7r=o("TFTransfoXLForSequenceClassification"),l7r=o(" (Transformer-XL model)"),i7r=l(),rM=a("li"),C5e=a("strong"),d7r=o("xlm"),c7r=o(" \u2014 "),vU=a("a"),f7r=o("TFXLMForSequenceClassification"),m7r=o(" (XLM model)"),g7r=l(),tM=a("li"),w5e=a("strong"),h7r=o("xlm-roberta"),p7r=o(" \u2014 "),FU=a("a"),_7r=o("TFXLMRobertaForSequenceClassification"),u7r=o(" (XLM-RoBERTa model)"),b7r=l(),aM=a("li"),A5e=a("strong"),v7r=o("xlnet"),F7r=o(" \u2014 "),TU=a("a"),T7r=o("TFXLNetForSequenceClassification"),M7r=o(" (XLNet model)"),E7r=l(),F(nM.$$.fragment),Zje=l(),dc=a("h2"),sM=a("a"),y5e=a("span"),F(K8.$$.fragment),C7r=l(),L5e=a("span"),w7r=o("TFAutoModelForMultipleChoice"),eDe=l(),ar=a("div"),F(Z8.$$.fragment),A7r=l(),cc=a("p"),y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=a("a"),L7r=o("from_pretrained()"),x7r=o(" class method or the "),EU=a("a"),$7r=o("from_config()"),k7r=o(` class
method.`),S7r=l(),e9=a("p"),R7r=o("This class cannot be instantiated directly using "),x5e=a("code"),P7r=o("__init__()"),B7r=o(" (throws an error)."),I7r=l(),Bt=a("div"),F(o9.$$.fragment),N7r=l(),$5e=a("p"),q7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j7r=l(),fc=a("p"),D7r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),G7r=o("not"),O7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),V7r=o("from_pretrained()"),X7r=o(" to load the model weights."),z7r=l(),F(lM.$$.fragment),W7r=l(),Sr=a("div"),F(r9.$$.fragment),Q7r=l(),S5e=a("p"),H7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U7r=l(),sn=a("p"),J7r=o("The model class to instantiate is selected based on the "),R5e=a("code"),Y7r=o("model_type"),K7r=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Z7r=o("pretrained_model_name_or_path"),eMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(":"),tMr=l(),pe=a("ul"),iM=a("li"),I5e=a("strong"),aMr=o("albert"),nMr=o(" \u2014 "),wU=a("a"),sMr=o("TFAlbertForMultipleChoice"),lMr=o(" (ALBERT model)"),iMr=l(),dM=a("li"),N5e=a("strong"),dMr=o("bert"),cMr=o(" \u2014 "),AU=a("a"),fMr=o("TFBertForMultipleChoice"),mMr=o(" (BERT model)"),gMr=l(),cM=a("li"),q5e=a("strong"),hMr=o("camembert"),pMr=o(" \u2014 "),yU=a("a"),_Mr=o("TFCamembertForMultipleChoice"),uMr=o(" (CamemBERT model)"),bMr=l(),fM=a("li"),j5e=a("strong"),vMr=o("convbert"),FMr=o(" \u2014 "),LU=a("a"),TMr=o("TFConvBertForMultipleChoice"),MMr=o(" (ConvBERT model)"),EMr=l(),mM=a("li"),D5e=a("strong"),CMr=o("distilbert"),wMr=o(" \u2014 "),xU=a("a"),AMr=o("TFDistilBertForMultipleChoice"),yMr=o(" (DistilBERT model)"),LMr=l(),gM=a("li"),G5e=a("strong"),xMr=o("electra"),$Mr=o(" \u2014 "),$U=a("a"),kMr=o("TFElectraForMultipleChoice"),SMr=o(" (ELECTRA model)"),RMr=l(),hM=a("li"),O5e=a("strong"),PMr=o("flaubert"),BMr=o(" \u2014 "),kU=a("a"),IMr=o("TFFlaubertForMultipleChoice"),NMr=o(" (FlauBERT model)"),qMr=l(),pM=a("li"),V5e=a("strong"),jMr=o("funnel"),DMr=o(" \u2014 "),SU=a("a"),GMr=o("TFFunnelForMultipleChoice"),OMr=o(" (Funnel Transformer model)"),VMr=l(),_M=a("li"),X5e=a("strong"),XMr=o("longformer"),zMr=o(" \u2014 "),RU=a("a"),WMr=o("TFLongformerForMultipleChoice"),QMr=o(" (Longformer model)"),HMr=l(),uM=a("li"),z5e=a("strong"),UMr=o("mobilebert"),JMr=o(" \u2014 "),PU=a("a"),YMr=o("TFMobileBertForMultipleChoice"),KMr=o(" (MobileBERT model)"),ZMr=l(),bM=a("li"),W5e=a("strong"),eEr=o("mpnet"),oEr=o(" \u2014 "),BU=a("a"),rEr=o("TFMPNetForMultipleChoice"),tEr=o(" (MPNet model)"),aEr=l(),vM=a("li"),Q5e=a("strong"),nEr=o("rembert"),sEr=o(" \u2014 "),IU=a("a"),lEr=o("TFRemBertForMultipleChoice"),iEr=o(" (RemBERT model)"),dEr=l(),FM=a("li"),H5e=a("strong"),cEr=o("roberta"),fEr=o(" \u2014 "),NU=a("a"),mEr=o("TFRobertaForMultipleChoice"),gEr=o(" (RoBERTa model)"),hEr=l(),TM=a("li"),U5e=a("strong"),pEr=o("roformer"),_Er=o(" \u2014 "),qU=a("a"),uEr=o("TFRoFormerForMultipleChoice"),bEr=o(" (RoFormer model)"),vEr=l(),MM=a("li"),J5e=a("strong"),FEr=o("xlm"),TEr=o(" \u2014 "),jU=a("a"),MEr=o("TFXLMForMultipleChoice"),EEr=o(" (XLM model)"),CEr=l(),EM=a("li"),Y5e=a("strong"),wEr=o("xlm-roberta"),AEr=o(" \u2014 "),DU=a("a"),yEr=o("TFXLMRobertaForMultipleChoice"),LEr=o(" (XLM-RoBERTa model)"),xEr=l(),CM=a("li"),K5e=a("strong"),$Er=o("xlnet"),kEr=o(" \u2014 "),GU=a("a"),SEr=o("TFXLNetForMultipleChoice"),REr=o(" (XLNet model)"),PEr=l(),F(wM.$$.fragment),oDe=l(),mc=a("h2"),AM=a("a"),Z5e=a("span"),F(t9.$$.fragment),BEr=l(),e3e=a("span"),IEr=o("TFAutoModelForNextSentencePrediction"),rDe=l(),nr=a("div"),F(a9.$$.fragment),NEr=l(),gc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),VU=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),n9=a("p"),XEr=o("This class cannot be instantiated directly using "),o3e=a("code"),zEr=o("__init__()"),WEr=o(" (throws an error)."),QEr=l(),It=a("div"),F(s9.$$.fragment),HEr=l(),r3e=a("p"),UEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JEr=l(),hc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(yM.$$.fragment),tCr=l(),Rr=a("div"),F(l9.$$.fragment),aCr=l(),a3e=a("p"),nCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sCr=l(),ln=a("p"),lCr=o("The model class to instantiate is selected based on the "),n3e=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),mCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),i9=a("ul"),LM=a("li"),i3e=a("strong"),pCr=o("bert"),_Cr=o(" \u2014 "),zU=a("a"),uCr=o("TFBertForNextSentencePrediction"),bCr=o(" (BERT model)"),vCr=l(),xM=a("li"),d3e=a("strong"),FCr=o("mobilebert"),TCr=o(" \u2014 "),WU=a("a"),MCr=o("TFMobileBertForNextSentencePrediction"),ECr=o(" (MobileBERT model)"),CCr=l(),F($M.$$.fragment),tDe=l(),pc=a("h2"),kM=a("a"),c3e=a("span"),F(d9.$$.fragment),wCr=l(),f3e=a("span"),ACr=o("TFAutoModelForTableQuestionAnswering"),aDe=l(),sr=a("div"),F(c9.$$.fragment),yCr=l(),_c=a("p"),LCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=a("a"),xCr=o("from_pretrained()"),$Cr=o(" class method or the "),HU=a("a"),kCr=o("from_config()"),SCr=o(` class
method.`),RCr=l(),f9=a("p"),PCr=o("This class cannot be instantiated directly using "),m3e=a("code"),BCr=o("__init__()"),ICr=o(" (throws an error)."),NCr=l(),Nt=a("div"),F(m9.$$.fragment),qCr=l(),g3e=a("p"),jCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DCr=l(),uc=a("p"),GCr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),OCr=o("not"),VCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),XCr=o("from_pretrained()"),zCr=o(" to load the model weights."),WCr=l(),F(SM.$$.fragment),QCr=l(),Pr=a("div"),F(g9.$$.fragment),HCr=l(),p3e=a("p"),UCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JCr=l(),dn=a("p"),YCr=o("The model class to instantiate is selected based on the "),_3e=a("code"),KCr=o("model_type"),ZCr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),v3e=a("ul"),RM=a("li"),F3e=a("strong"),n0r=o("tapas"),s0r=o(" \u2014 "),JU=a("a"),l0r=o("TFTapasForQuestionAnswering"),i0r=o(" (TAPAS model)"),d0r=l(),F(PM.$$.fragment),nDe=l(),bc=a("h2"),BM=a("a"),T3e=a("span"),F(h9.$$.fragment),c0r=l(),M3e=a("span"),f0r=o("TFAutoModelForTokenClassification"),sDe=l(),lr=a("div"),F(p9.$$.fragment),m0r=l(),vc=a("p"),g0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=a("a"),h0r=o("from_pretrained()"),p0r=o(" class method or the "),KU=a("a"),_0r=o("from_config()"),u0r=o(` class
method.`),b0r=l(),_9=a("p"),v0r=o("This class cannot be instantiated directly using "),E3e=a("code"),F0r=o("__init__()"),T0r=o(" (throws an error)."),M0r=l(),qt=a("div"),F(u9.$$.fragment),E0r=l(),C3e=a("p"),C0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w0r=l(),Fc=a("p"),A0r=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),y0r=o("not"),L0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),x0r=o("from_pretrained()"),$0r=o(" to load the model weights."),k0r=l(),F(IM.$$.fragment),S0r=l(),Br=a("div"),F(b9.$$.fragment),R0r=l(),A3e=a("p"),P0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B0r=l(),cn=a("p"),I0r=o("The model class to instantiate is selected based on the "),y3e=a("code"),N0r=o("model_type"),q0r=o(` property of the config object (either
passed as an argument or loaded from `),L3e=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),V0r=l(),de=a("ul"),NM=a("li"),$3e=a("strong"),X0r=o("albert"),z0r=o(" \u2014 "),eJ=a("a"),W0r=o("TFAlbertForTokenClassification"),Q0r=o(" (ALBERT model)"),H0r=l(),qM=a("li"),k3e=a("strong"),U0r=o("bert"),J0r=o(" \u2014 "),oJ=a("a"),Y0r=o("TFBertForTokenClassification"),K0r=o(" (BERT model)"),Z0r=l(),jM=a("li"),S3e=a("strong"),ewr=o("camembert"),owr=o(" \u2014 "),rJ=a("a"),rwr=o("TFCamembertForTokenClassification"),twr=o(" (CamemBERT model)"),awr=l(),DM=a("li"),R3e=a("strong"),nwr=o("convbert"),swr=o(" \u2014 "),tJ=a("a"),lwr=o("TFConvBertForTokenClassification"),iwr=o(" (ConvBERT model)"),dwr=l(),GM=a("li"),P3e=a("strong"),cwr=o("deberta"),fwr=o(" \u2014 "),aJ=a("a"),mwr=o("TFDebertaForTokenClassification"),gwr=o(" (DeBERTa model)"),hwr=l(),OM=a("li"),B3e=a("strong"),pwr=o("deberta-v2"),_wr=o(" \u2014 "),nJ=a("a"),uwr=o("TFDebertaV2ForTokenClassification"),bwr=o(" (DeBERTa-v2 model)"),vwr=l(),VM=a("li"),I3e=a("strong"),Fwr=o("distilbert"),Twr=o(" \u2014 "),sJ=a("a"),Mwr=o("TFDistilBertForTokenClassification"),Ewr=o(" (DistilBERT model)"),Cwr=l(),XM=a("li"),N3e=a("strong"),wwr=o("electra"),Awr=o(" \u2014 "),lJ=a("a"),ywr=o("TFElectraForTokenClassification"),Lwr=o(" (ELECTRA model)"),xwr=l(),zM=a("li"),q3e=a("strong"),$wr=o("flaubert"),kwr=o(" \u2014 "),iJ=a("a"),Swr=o("TFFlaubertForTokenClassification"),Rwr=o(" (FlauBERT model)"),Pwr=l(),WM=a("li"),j3e=a("strong"),Bwr=o("funnel"),Iwr=o(" \u2014 "),dJ=a("a"),Nwr=o("TFFunnelForTokenClassification"),qwr=o(" (Funnel Transformer model)"),jwr=l(),QM=a("li"),D3e=a("strong"),Dwr=o("layoutlm"),Gwr=o(" \u2014 "),cJ=a("a"),Owr=o("TFLayoutLMForTokenClassification"),Vwr=o(" (LayoutLM model)"),Xwr=l(),HM=a("li"),G3e=a("strong"),zwr=o("longformer"),Wwr=o(" \u2014 "),fJ=a("a"),Qwr=o("TFLongformerForTokenClassification"),Hwr=o(" (Longformer model)"),Uwr=l(),UM=a("li"),O3e=a("strong"),Jwr=o("mobilebert"),Ywr=o(" \u2014 "),mJ=a("a"),Kwr=o("TFMobileBertForTokenClassification"),Zwr=o(" (MobileBERT model)"),e6r=l(),JM=a("li"),V3e=a("strong"),o6r=o("mpnet"),r6r=o(" \u2014 "),gJ=a("a"),t6r=o("TFMPNetForTokenClassification"),a6r=o(" (MPNet model)"),n6r=l(),YM=a("li"),X3e=a("strong"),s6r=o("rembert"),l6r=o(" \u2014 "),hJ=a("a"),i6r=o("TFRemBertForTokenClassification"),d6r=o(" (RemBERT model)"),c6r=l(),KM=a("li"),z3e=a("strong"),f6r=o("roberta"),m6r=o(" \u2014 "),pJ=a("a"),g6r=o("TFRobertaForTokenClassification"),h6r=o(" (RoBERTa model)"),p6r=l(),ZM=a("li"),W3e=a("strong"),_6r=o("roformer"),u6r=o(" \u2014 "),_J=a("a"),b6r=o("TFRoFormerForTokenClassification"),v6r=o(" (RoFormer model)"),F6r=l(),eE=a("li"),Q3e=a("strong"),T6r=o("xlm"),M6r=o(" \u2014 "),uJ=a("a"),E6r=o("TFXLMForTokenClassification"),C6r=o(" (XLM model)"),w6r=l(),oE=a("li"),H3e=a("strong"),A6r=o("xlm-roberta"),y6r=o(" \u2014 "),bJ=a("a"),L6r=o("TFXLMRobertaForTokenClassification"),x6r=o(" (XLM-RoBERTa model)"),$6r=l(),rE=a("li"),U3e=a("strong"),k6r=o("xlnet"),S6r=o(" \u2014 "),vJ=a("a"),R6r=o("TFXLNetForTokenClassification"),P6r=o(" (XLNet model)"),B6r=l(),F(tE.$$.fragment),lDe=l(),Tc=a("h2"),aE=a("a"),J3e=a("span"),F(v9.$$.fragment),I6r=l(),Y3e=a("span"),N6r=o("TFAutoModelForQuestionAnswering"),iDe=l(),ir=a("div"),F(F9.$$.fragment),q6r=l(),Mc=a("p"),j6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=a("a"),D6r=o("from_pretrained()"),G6r=o(" class method or the "),TJ=a("a"),O6r=o("from_config()"),V6r=o(` class
method.`),X6r=l(),T9=a("p"),z6r=o("This class cannot be instantiated directly using "),K3e=a("code"),W6r=o("__init__()"),Q6r=o(" (throws an error)."),H6r=l(),jt=a("div"),F(M9.$$.fragment),U6r=l(),Z3e=a("p"),J6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y6r=l(),Ec=a("p"),K6r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),Z6r=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(nE.$$.fragment),aAr=l(),Ir=a("div"),F(E9.$$.fragment),nAr=l(),oFe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lAr=l(),fn=a("p"),iAr=o("The model class to instantiate is selected based on the "),rFe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),ce=a("ul"),sE=a("li"),nFe=a("strong"),_Ar=o("albert"),uAr=o(" \u2014 "),EJ=a("a"),bAr=o("TFAlbertForQuestionAnswering"),vAr=o(" (ALBERT model)"),FAr=l(),lE=a("li"),sFe=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),CJ=a("a"),EAr=o("TFBertForQuestionAnswering"),CAr=o(" (BERT model)"),wAr=l(),iE=a("li"),lFe=a("strong"),AAr=o("camembert"),yAr=o(" \u2014 "),wJ=a("a"),LAr=o("TFCamembertForQuestionAnswering"),xAr=o(" (CamemBERT model)"),$Ar=l(),dE=a("li"),iFe=a("strong"),kAr=o("convbert"),SAr=o(" \u2014 "),AJ=a("a"),RAr=o("TFConvBertForQuestionAnswering"),PAr=o(" (ConvBERT model)"),BAr=l(),cE=a("li"),dFe=a("strong"),IAr=o("deberta"),NAr=o(" \u2014 "),yJ=a("a"),qAr=o("TFDebertaForQuestionAnswering"),jAr=o(" (DeBERTa model)"),DAr=l(),fE=a("li"),cFe=a("strong"),GAr=o("deberta-v2"),OAr=o(" \u2014 "),LJ=a("a"),VAr=o("TFDebertaV2ForQuestionAnswering"),XAr=o(" (DeBERTa-v2 model)"),zAr=l(),mE=a("li"),fFe=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),xJ=a("a"),HAr=o("TFDistilBertForQuestionAnswering"),UAr=o(" (DistilBERT model)"),JAr=l(),gE=a("li"),mFe=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),$J=a("a"),ZAr=o("TFElectraForQuestionAnswering"),eyr=o(" (ELECTRA model)"),oyr=l(),hE=a("li"),gFe=a("strong"),ryr=o("flaubert"),tyr=o(" \u2014 "),kJ=a("a"),ayr=o("TFFlaubertForQuestionAnsweringSimple"),nyr=o(" (FlauBERT model)"),syr=l(),pE=a("li"),hFe=a("strong"),lyr=o("funnel"),iyr=o(" \u2014 "),SJ=a("a"),dyr=o("TFFunnelForQuestionAnswering"),cyr=o(" (Funnel Transformer model)"),fyr=l(),_E=a("li"),pFe=a("strong"),myr=o("gptj"),gyr=o(" \u2014 "),RJ=a("a"),hyr=o("TFGPTJForQuestionAnswering"),pyr=o(" (GPT-J model)"),_yr=l(),uE=a("li"),_Fe=a("strong"),uyr=o("longformer"),byr=o(" \u2014 "),PJ=a("a"),vyr=o("TFLongformerForQuestionAnswering"),Fyr=o(" (Longformer model)"),Tyr=l(),bE=a("li"),uFe=a("strong"),Myr=o("mobilebert"),Eyr=o(" \u2014 "),BJ=a("a"),Cyr=o("TFMobileBertForQuestionAnswering"),wyr=o(" (MobileBERT model)"),Ayr=l(),vE=a("li"),bFe=a("strong"),yyr=o("mpnet"),Lyr=o(" \u2014 "),IJ=a("a"),xyr=o("TFMPNetForQuestionAnswering"),$yr=o(" (MPNet model)"),kyr=l(),FE=a("li"),vFe=a("strong"),Syr=o("rembert"),Ryr=o(" \u2014 "),NJ=a("a"),Pyr=o("TFRemBertForQuestionAnswering"),Byr=o(" (RemBERT model)"),Iyr=l(),TE=a("li"),FFe=a("strong"),Nyr=o("roberta"),qyr=o(" \u2014 "),qJ=a("a"),jyr=o("TFRobertaForQuestionAnswering"),Dyr=o(" (RoBERTa model)"),Gyr=l(),ME=a("li"),TFe=a("strong"),Oyr=o("roformer"),Vyr=o(" \u2014 "),jJ=a("a"),Xyr=o("TFRoFormerForQuestionAnswering"),zyr=o(" (RoFormer model)"),Wyr=l(),EE=a("li"),MFe=a("strong"),Qyr=o("xlm"),Hyr=o(" \u2014 "),DJ=a("a"),Uyr=o("TFXLMForQuestionAnsweringSimple"),Jyr=o(" (XLM model)"),Yyr=l(),CE=a("li"),EFe=a("strong"),Kyr=o("xlm-roberta"),Zyr=o(" \u2014 "),GJ=a("a"),eLr=o("TFXLMRobertaForQuestionAnswering"),oLr=o(" (XLM-RoBERTa model)"),rLr=l(),wE=a("li"),CFe=a("strong"),tLr=o("xlnet"),aLr=o(" \u2014 "),OJ=a("a"),nLr=o("TFXLNetForQuestionAnsweringSimple"),sLr=o(" (XLNet model)"),lLr=l(),F(AE.$$.fragment),dDe=l(),Cc=a("h2"),yE=a("a"),wFe=a("span"),F(C9.$$.fragment),iLr=l(),AFe=a("span"),dLr=o("TFAutoModelForVision2Seq"),cDe=l(),dr=a("div"),F(w9.$$.fragment),cLr=l(),wc=a("p"),fLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=a("a"),mLr=o("from_pretrained()"),gLr=o(" class method or the "),XJ=a("a"),hLr=o("from_config()"),pLr=o(` class
method.`),_Lr=l(),A9=a("p"),uLr=o("This class cannot be instantiated directly using "),yFe=a("code"),bLr=o("__init__()"),vLr=o(" (throws an error)."),FLr=l(),Dt=a("div"),F(y9.$$.fragment),TLr=l(),LFe=a("p"),MLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ELr=l(),Ac=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),wLr=o("not"),ALr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),yLr=o("from_pretrained()"),LLr=o(" to load the model weights."),xLr=l(),F(LE.$$.fragment),$Lr=l(),Nr=a("div"),F(L9.$$.fragment),kLr=l(),$Fe=a("p"),SLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RLr=l(),mn=a("p"),PLr=o("The model class to instantiate is selected based on the "),kFe=a("code"),BLr=o("model_type"),ILr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),NLr=o("pretrained_model_name_or_path"),qLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),jLr=o("pretrained_model_name_or_path"),DLr=o(":"),GLr=l(),PFe=a("ul"),xE=a("li"),BFe=a("strong"),OLr=o("vision-encoder-decoder"),VLr=o(" \u2014 "),WJ=a("a"),XLr=o("TFVisionEncoderDecoderModel"),zLr=o(" (Vision Encoder decoder model)"),WLr=l(),F($E.$$.fragment),fDe=l(),yc=a("h2"),kE=a("a"),IFe=a("span"),F(x9.$$.fragment),QLr=l(),NFe=a("span"),HLr=o("TFAutoModelForSpeechSeq2Seq"),mDe=l(),cr=a("div"),F($9.$$.fragment),ULr=l(),Lc=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),HJ=a("a"),ZLr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),k9=a("p"),r8r=o("This class cannot be instantiated directly using "),qFe=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),Gt=a("div"),F(S9.$$.fragment),s8r=l(),jFe=a("p"),l8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),i8r=l(),xc=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(SE.$$.fragment),p8r=l(),qr=a("div"),F(R9.$$.fragment),_8r=l(),GFe=a("p"),u8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b8r=l(),gn=a("p"),v8r=o("The model class to instantiate is selected based on the "),OFe=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),zFe=a("ul"),RE=a("li"),WFe=a("strong"),y8r=o("speech_to_text"),L8r=o(" \u2014 "),JJ=a("a"),x8r=o("TFSpeech2TextForConditionalGeneration"),$8r=o(" (Speech2Text model)"),k8r=l(),F(PE.$$.fragment),gDe=l(),$c=a("h2"),BE=a("a"),QFe=a("span"),F(P9.$$.fragment),S8r=l(),HFe=a("span"),R8r=o("FlaxAutoModel"),hDe=l(),fr=a("div"),F(B9.$$.fragment),P8r=l(),kc=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=a("a"),I8r=o("from_pretrained()"),N8r=o(" class method or the "),KJ=a("a"),q8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),I9=a("p"),G8r=o("This class cannot be instantiated directly using "),UFe=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Ot=a("div"),F(N9.$$.fragment),z8r=l(),JFe=a("p"),W8r=o("Instantiates one of the base model classes of the library from a configuration."),Q8r=l(),Sc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(IE.$$.fragment),e9r=l(),jr=a("div"),F(q9.$$.fragment),o9r=l(),KFe=a("p"),r9r=o("Instantiate one of the base model classes of the library from a pretrained model."),t9r=l(),hn=a("p"),a9r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),f9r=l(),re=a("ul"),NE=a("li"),rTe=a("strong"),m9r=o("albert"),g9r=o(" \u2014 "),eY=a("a"),h9r=o("FlaxAlbertModel"),p9r=o(" (ALBERT model)"),_9r=l(),qE=a("li"),tTe=a("strong"),u9r=o("bart"),b9r=o(" \u2014 "),oY=a("a"),v9r=o("FlaxBartModel"),F9r=o(" (BART model)"),T9r=l(),jE=a("li"),aTe=a("strong"),M9r=o("beit"),E9r=o(" \u2014 "),rY=a("a"),C9r=o("FlaxBeitModel"),w9r=o(" (BEiT model)"),A9r=l(),DE=a("li"),nTe=a("strong"),y9r=o("bert"),L9r=o(" \u2014 "),tY=a("a"),x9r=o("FlaxBertModel"),$9r=o(" (BERT model)"),k9r=l(),GE=a("li"),sTe=a("strong"),S9r=o("big_bird"),R9r=o(" \u2014 "),aY=a("a"),P9r=o("FlaxBigBirdModel"),B9r=o(" (BigBird model)"),I9r=l(),OE=a("li"),lTe=a("strong"),N9r=o("blenderbot"),q9r=o(" \u2014 "),nY=a("a"),j9r=o("FlaxBlenderbotModel"),D9r=o(" (Blenderbot model)"),G9r=l(),VE=a("li"),iTe=a("strong"),O9r=o("blenderbot-small"),V9r=o(" \u2014 "),sY=a("a"),X9r=o("FlaxBlenderbotSmallModel"),z9r=o(" (BlenderbotSmall model)"),W9r=l(),XE=a("li"),dTe=a("strong"),Q9r=o("clip"),H9r=o(" \u2014 "),lY=a("a"),U9r=o("FlaxCLIPModel"),J9r=o(" (CLIP model)"),Y9r=l(),zE=a("li"),cTe=a("strong"),K9r=o("distilbert"),Z9r=o(" \u2014 "),iY=a("a"),exr=o("FlaxDistilBertModel"),oxr=o(" (DistilBERT model)"),rxr=l(),WE=a("li"),fTe=a("strong"),txr=o("electra"),axr=o(" \u2014 "),dY=a("a"),nxr=o("FlaxElectraModel"),sxr=o(" (ELECTRA model)"),lxr=l(),QE=a("li"),mTe=a("strong"),ixr=o("gpt2"),dxr=o(" \u2014 "),cY=a("a"),cxr=o("FlaxGPT2Model"),fxr=o(" (OpenAI GPT-2 model)"),mxr=l(),HE=a("li"),gTe=a("strong"),gxr=o("gpt_neo"),hxr=o(" \u2014 "),fY=a("a"),pxr=o("FlaxGPTNeoModel"),_xr=o(" (GPT Neo model)"),uxr=l(),UE=a("li"),hTe=a("strong"),bxr=o("gptj"),vxr=o(" \u2014 "),mY=a("a"),Fxr=o("FlaxGPTJModel"),Txr=o(" (GPT-J model)"),Mxr=l(),JE=a("li"),pTe=a("strong"),Exr=o("marian"),Cxr=o(" \u2014 "),gY=a("a"),wxr=o("FlaxMarianModel"),Axr=o(" (Marian model)"),yxr=l(),YE=a("li"),_Te=a("strong"),Lxr=o("mbart"),xxr=o(" \u2014 "),hY=a("a"),$xr=o("FlaxMBartModel"),kxr=o(" (mBART model)"),Sxr=l(),KE=a("li"),uTe=a("strong"),Rxr=o("mt5"),Pxr=o(" \u2014 "),pY=a("a"),Bxr=o("FlaxMT5Model"),Ixr=o(" (mT5 model)"),Nxr=l(),ZE=a("li"),bTe=a("strong"),qxr=o("opt"),jxr=o(" \u2014 "),_Y=a("a"),Dxr=o("FlaxOPTModel"),Gxr=o(" (OPT model)"),Oxr=l(),eC=a("li"),vTe=a("strong"),Vxr=o("pegasus"),Xxr=o(" \u2014 "),uY=a("a"),zxr=o("FlaxPegasusModel"),Wxr=o(" (Pegasus model)"),Qxr=l(),oC=a("li"),FTe=a("strong"),Hxr=o("roberta"),Uxr=o(" \u2014 "),bY=a("a"),Jxr=o("FlaxRobertaModel"),Yxr=o(" (RoBERTa model)"),Kxr=l(),rC=a("li"),TTe=a("strong"),Zxr=o("roformer"),e$r=o(" \u2014 "),vY=a("a"),o$r=o("FlaxRoFormerModel"),r$r=o(" (RoFormer model)"),t$r=l(),tC=a("li"),MTe=a("strong"),a$r=o("t5"),n$r=o(" \u2014 "),FY=a("a"),s$r=o("FlaxT5Model"),l$r=o(" (T5 model)"),i$r=l(),aC=a("li"),ETe=a("strong"),d$r=o("vision-text-dual-encoder"),c$r=o(" \u2014 "),TY=a("a"),f$r=o("FlaxVisionTextDualEncoderModel"),m$r=o(" (VisionTextDualEncoder model)"),g$r=l(),nC=a("li"),CTe=a("strong"),h$r=o("vit"),p$r=o(" \u2014 "),MY=a("a"),_$r=o("FlaxViTModel"),u$r=o(" (ViT model)"),b$r=l(),sC=a("li"),wTe=a("strong"),v$r=o("wav2vec2"),F$r=o(" \u2014 "),EY=a("a"),T$r=o("FlaxWav2Vec2Model"),M$r=o(" (Wav2Vec2 model)"),E$r=l(),lC=a("li"),ATe=a("strong"),C$r=o("xglm"),w$r=o(" \u2014 "),CY=a("a"),A$r=o("FlaxXGLMModel"),y$r=o(" (XGLM model)"),L$r=l(),iC=a("li"),yTe=a("strong"),x$r=o("xlm-roberta"),$$r=o(" \u2014 "),wY=a("a"),k$r=o("FlaxXLMRobertaModel"),S$r=o(" (XLM-RoBERTa model)"),R$r=l(),F(dC.$$.fragment),pDe=l(),Rc=a("h2"),cC=a("a"),LTe=a("span"),F(j9.$$.fragment),P$r=l(),xTe=a("span"),B$r=o("FlaxAutoModelForCausalLM"),_De=l(),mr=a("div"),F(D9.$$.fragment),I$r=l(),Pc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=a("a"),q$r=o("from_pretrained()"),j$r=o(" class method or the "),yY=a("a"),D$r=o("from_config()"),G$r=o(` class
method.`),O$r=l(),G9=a("p"),V$r=o("This class cannot be instantiated directly using "),$Te=a("code"),X$r=o("__init__()"),z$r=o(" (throws an error)."),W$r=l(),Vt=a("div"),F(O9.$$.fragment),Q$r=l(),kTe=a("p"),H$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U$r=l(),Bc=a("p"),J$r=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),Y$r=o("not"),K$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Z$r=o("from_pretrained()"),ekr=o(" to load the model weights."),okr=l(),F(fC.$$.fragment),rkr=l(),Dr=a("div"),F(V9.$$.fragment),tkr=l(),RTe=a("p"),akr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nkr=l(),pn=a("p"),skr=o("The model class to instantiate is selected based on the "),PTe=a("code"),lkr=o("model_type"),ikr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(":"),gkr=l(),Le=a("ul"),mC=a("li"),NTe=a("strong"),hkr=o("bart"),pkr=o(" \u2014 "),xY=a("a"),_kr=o("FlaxBartForCausalLM"),ukr=o(" (BART model)"),bkr=l(),gC=a("li"),qTe=a("strong"),vkr=o("bert"),Fkr=o(" \u2014 "),$Y=a("a"),Tkr=o("FlaxBertForCausalLM"),Mkr=o(" (BERT model)"),Ekr=l(),hC=a("li"),jTe=a("strong"),Ckr=o("big_bird"),wkr=o(" \u2014 "),kY=a("a"),Akr=o("FlaxBigBirdForCausalLM"),ykr=o(" (BigBird model)"),Lkr=l(),pC=a("li"),DTe=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),SY=a("a"),kkr=o("FlaxElectraForCausalLM"),Skr=o(" (ELECTRA model)"),Rkr=l(),_C=a("li"),GTe=a("strong"),Pkr=o("gpt2"),Bkr=o(" \u2014 "),RY=a("a"),Ikr=o("FlaxGPT2LMHeadModel"),Nkr=o(" (OpenAI GPT-2 model)"),qkr=l(),uC=a("li"),OTe=a("strong"),jkr=o("gpt_neo"),Dkr=o(" \u2014 "),PY=a("a"),Gkr=o("FlaxGPTNeoForCausalLM"),Okr=o(" (GPT Neo model)"),Vkr=l(),bC=a("li"),VTe=a("strong"),Xkr=o("gptj"),zkr=o(" \u2014 "),BY=a("a"),Wkr=o("FlaxGPTJForCausalLM"),Qkr=o(" (GPT-J model)"),Hkr=l(),vC=a("li"),XTe=a("strong"),Ukr=o("opt"),Jkr=o(" \u2014 "),IY=a("a"),Ykr=o("FlaxOPTForCausalLM"),Kkr=o(" (OPT model)"),Zkr=l(),FC=a("li"),zTe=a("strong"),eSr=o("roberta"),oSr=o(" \u2014 "),NY=a("a"),rSr=o("FlaxRobertaForCausalLM"),tSr=o(" (RoBERTa model)"),aSr=l(),TC=a("li"),WTe=a("strong"),nSr=o("xglm"),sSr=o(" \u2014 "),qY=a("a"),lSr=o("FlaxXGLMForCausalLM"),iSr=o(" (XGLM model)"),dSr=l(),F(MC.$$.fragment),uDe=l(),Ic=a("h2"),EC=a("a"),QTe=a("span"),F(X9.$$.fragment),cSr=l(),HTe=a("span"),fSr=o("FlaxAutoModelForPreTraining"),bDe=l(),gr=a("div"),F(z9.$$.fragment),mSr=l(),Nc=a("p"),gSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=a("a"),hSr=o("from_pretrained()"),pSr=o(" class method or the "),DY=a("a"),_Sr=o("from_config()"),uSr=o(` class
method.`),bSr=l(),W9=a("p"),vSr=o("This class cannot be instantiated directly using "),UTe=a("code"),FSr=o("__init__()"),TSr=o(" (throws an error)."),MSr=l(),Xt=a("div"),F(Q9.$$.fragment),ESr=l(),JTe=a("p"),CSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wSr=l(),qc=a("p"),ASr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),ySr=o("not"),LSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),xSr=o("from_pretrained()"),$Sr=o(" to load the model weights."),kSr=l(),F(CC.$$.fragment),SSr=l(),Gr=a("div"),F(H9.$$.fragment),RSr=l(),KTe=a("p"),PSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BSr=l(),_n=a("p"),ISr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),NSr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(":"),VSr=l(),Ee=a("ul"),wC=a("li"),r7e=a("strong"),XSr=o("albert"),zSr=o(" \u2014 "),OY=a("a"),WSr=o("FlaxAlbertForPreTraining"),QSr=o(" (ALBERT model)"),HSr=l(),AC=a("li"),t7e=a("strong"),USr=o("bart"),JSr=o(" \u2014 "),VY=a("a"),YSr=o("FlaxBartForConditionalGeneration"),KSr=o(" (BART model)"),ZSr=l(),yC=a("li"),a7e=a("strong"),eRr=o("bert"),oRr=o(" \u2014 "),XY=a("a"),rRr=o("FlaxBertForPreTraining"),tRr=o(" (BERT model)"),aRr=l(),LC=a("li"),n7e=a("strong"),nRr=o("big_bird"),sRr=o(" \u2014 "),zY=a("a"),lRr=o("FlaxBigBirdForPreTraining"),iRr=o(" (BigBird model)"),dRr=l(),xC=a("li"),s7e=a("strong"),cRr=o("electra"),fRr=o(" \u2014 "),WY=a("a"),mRr=o("FlaxElectraForPreTraining"),gRr=o(" (ELECTRA model)"),hRr=l(),$C=a("li"),l7e=a("strong"),pRr=o("mbart"),_Rr=o(" \u2014 "),QY=a("a"),uRr=o("FlaxMBartForConditionalGeneration"),bRr=o(" (mBART model)"),vRr=l(),kC=a("li"),i7e=a("strong"),FRr=o("mt5"),TRr=o(" \u2014 "),HY=a("a"),MRr=o("FlaxMT5ForConditionalGeneration"),ERr=o(" (mT5 model)"),CRr=l(),SC=a("li"),d7e=a("strong"),wRr=o("roberta"),ARr=o(" \u2014 "),UY=a("a"),yRr=o("FlaxRobertaForMaskedLM"),LRr=o(" (RoBERTa model)"),xRr=l(),RC=a("li"),c7e=a("strong"),$Rr=o("roformer"),kRr=o(" \u2014 "),JY=a("a"),SRr=o("FlaxRoFormerForMaskedLM"),RRr=o(" (RoFormer model)"),PRr=l(),PC=a("li"),f7e=a("strong"),BRr=o("t5"),IRr=o(" \u2014 "),YY=a("a"),NRr=o("FlaxT5ForConditionalGeneration"),qRr=o(" (T5 model)"),jRr=l(),BC=a("li"),m7e=a("strong"),DRr=o("wav2vec2"),GRr=o(" \u2014 "),KY=a("a"),ORr=o("FlaxWav2Vec2ForPreTraining"),VRr=o(" (Wav2Vec2 model)"),XRr=l(),IC=a("li"),g7e=a("strong"),zRr=o("xlm-roberta"),WRr=o(" \u2014 "),ZY=a("a"),QRr=o("FlaxXLMRobertaForMaskedLM"),HRr=o(" (XLM-RoBERTa model)"),URr=l(),F(NC.$$.fragment),vDe=l(),jc=a("h2"),qC=a("a"),h7e=a("span"),F(U9.$$.fragment),JRr=l(),p7e=a("span"),YRr=o("FlaxAutoModelForMaskedLM"),FDe=l(),hr=a("div"),F(J9.$$.fragment),KRr=l(),Dc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),oK=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Y9=a("p"),nPr=o("This class cannot be instantiated directly using "),_7e=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),zt=a("div"),F(K9.$$.fragment),dPr=l(),u7e=a("p"),cPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fPr=l(),Gc=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),pPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),uPr=l(),F(jC.$$.fragment),bPr=l(),Or=a("div"),F(Z9.$$.fragment),vPr=l(),v7e=a("p"),FPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPr=l(),un=a("p"),MPr=o("The model class to instantiate is selected based on the "),F7e=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),yPr=o("pretrained_model_name_or_path"),LPr=o(":"),xPr=l(),xe=a("ul"),DC=a("li"),E7e=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),tK=a("a"),SPr=o("FlaxAlbertForMaskedLM"),RPr=o(" (ALBERT model)"),PPr=l(),GC=a("li"),C7e=a("strong"),BPr=o("bart"),IPr=o(" \u2014 "),aK=a("a"),NPr=o("FlaxBartForConditionalGeneration"),qPr=o(" (BART model)"),jPr=l(),OC=a("li"),w7e=a("strong"),DPr=o("bert"),GPr=o(" \u2014 "),nK=a("a"),OPr=o("FlaxBertForMaskedLM"),VPr=o(" (BERT model)"),XPr=l(),VC=a("li"),A7e=a("strong"),zPr=o("big_bird"),WPr=o(" \u2014 "),sK=a("a"),QPr=o("FlaxBigBirdForMaskedLM"),HPr=o(" (BigBird model)"),UPr=l(),XC=a("li"),y7e=a("strong"),JPr=o("distilbert"),YPr=o(" \u2014 "),lK=a("a"),KPr=o("FlaxDistilBertForMaskedLM"),ZPr=o(" (DistilBERT model)"),eBr=l(),zC=a("li"),L7e=a("strong"),oBr=o("electra"),rBr=o(" \u2014 "),iK=a("a"),tBr=o("FlaxElectraForMaskedLM"),aBr=o(" (ELECTRA model)"),nBr=l(),WC=a("li"),x7e=a("strong"),sBr=o("mbart"),lBr=o(" \u2014 "),dK=a("a"),iBr=o("FlaxMBartForConditionalGeneration"),dBr=o(" (mBART model)"),cBr=l(),QC=a("li"),$7e=a("strong"),fBr=o("roberta"),mBr=o(" \u2014 "),cK=a("a"),gBr=o("FlaxRobertaForMaskedLM"),hBr=o(" (RoBERTa model)"),pBr=l(),HC=a("li"),k7e=a("strong"),_Br=o("roformer"),uBr=o(" \u2014 "),fK=a("a"),bBr=o("FlaxRoFormerForMaskedLM"),vBr=o(" (RoFormer model)"),FBr=l(),UC=a("li"),S7e=a("strong"),TBr=o("xlm-roberta"),MBr=o(" \u2014 "),mK=a("a"),EBr=o("FlaxXLMRobertaForMaskedLM"),CBr=o(" (XLM-RoBERTa model)"),wBr=l(),F(JC.$$.fragment),TDe=l(),Oc=a("h2"),YC=a("a"),R7e=a("span"),F(ex.$$.fragment),ABr=l(),P7e=a("span"),yBr=o("FlaxAutoModelForSeq2SeqLM"),MDe=l(),pr=a("div"),F(ox.$$.fragment),LBr=l(),Vc=a("p"),xBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=a("a"),$Br=o("from_pretrained()"),kBr=o(" class method or the "),hK=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),PBr=l(),rx=a("p"),BBr=o("This class cannot be instantiated directly using "),B7e=a("code"),IBr=o("__init__()"),NBr=o(" (throws an error)."),qBr=l(),Wt=a("div"),F(tx.$$.fragment),jBr=l(),I7e=a("p"),DBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GBr=l(),Xc=a("p"),OBr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),VBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),zBr=o("from_pretrained()"),WBr=o(" to load the model weights."),QBr=l(),F(KC.$$.fragment),HBr=l(),Vr=a("div"),F(ax.$$.fragment),UBr=l(),q7e=a("p"),JBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YBr=l(),bn=a("p"),KBr=o("The model class to instantiate is selected based on the "),j7e=a("code"),ZBr=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),D7e=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),Pe=a("ul"),ZC=a("li"),O7e=a("strong"),sIr=o("bart"),lIr=o(" \u2014 "),_K=a("a"),iIr=o("FlaxBartForConditionalGeneration"),dIr=o(" (BART model)"),cIr=l(),e0=a("li"),V7e=a("strong"),fIr=o("blenderbot"),mIr=o(" \u2014 "),uK=a("a"),gIr=o("FlaxBlenderbotForConditionalGeneration"),hIr=o(" (Blenderbot model)"),pIr=l(),o0=a("li"),X7e=a("strong"),_Ir=o("blenderbot-small"),uIr=o(" \u2014 "),bK=a("a"),bIr=o("FlaxBlenderbotSmallForConditionalGeneration"),vIr=o(" (BlenderbotSmall model)"),FIr=l(),r0=a("li"),z7e=a("strong"),TIr=o("encoder-decoder"),MIr=o(" \u2014 "),vK=a("a"),EIr=o("FlaxEncoderDecoderModel"),CIr=o(" (Encoder decoder model)"),wIr=l(),t0=a("li"),W7e=a("strong"),AIr=o("marian"),yIr=o(" \u2014 "),FK=a("a"),LIr=o("FlaxMarianMTModel"),xIr=o(" (Marian model)"),$Ir=l(),a0=a("li"),Q7e=a("strong"),kIr=o("mbart"),SIr=o(" \u2014 "),TK=a("a"),RIr=o("FlaxMBartForConditionalGeneration"),PIr=o(" (mBART model)"),BIr=l(),n0=a("li"),H7e=a("strong"),IIr=o("mt5"),NIr=o(" \u2014 "),MK=a("a"),qIr=o("FlaxMT5ForConditionalGeneration"),jIr=o(" (mT5 model)"),DIr=l(),s0=a("li"),U7e=a("strong"),GIr=o("pegasus"),OIr=o(" \u2014 "),EK=a("a"),VIr=o("FlaxPegasusForConditionalGeneration"),XIr=o(" (Pegasus model)"),zIr=l(),l0=a("li"),J7e=a("strong"),WIr=o("t5"),QIr=o(" \u2014 "),CK=a("a"),HIr=o("FlaxT5ForConditionalGeneration"),UIr=o(" (T5 model)"),JIr=l(),F(i0.$$.fragment),EDe=l(),zc=a("h2"),d0=a("a"),Y7e=a("span"),F(nx.$$.fragment),YIr=l(),K7e=a("span"),KIr=o("FlaxAutoModelForSequenceClassification"),CDe=l(),_r=a("div"),F(sx.$$.fragment),ZIr=l(),Wc=a("p"),eNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=a("a"),oNr=o("from_pretrained()"),rNr=o(" class method or the "),AK=a("a"),tNr=o("from_config()"),aNr=o(` class
method.`),nNr=l(),lx=a("p"),sNr=o("This class cannot be instantiated directly using "),Z7e=a("code"),lNr=o("__init__()"),iNr=o(" (throws an error)."),dNr=l(),Qt=a("div"),F(ix.$$.fragment),cNr=l(),eMe=a("p"),fNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mNr=l(),Qc=a("p"),gNr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),hNr=o("not"),pNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),_Nr=o("from_pretrained()"),uNr=o(" to load the model weights."),bNr=l(),F(c0.$$.fragment),vNr=l(),Xr=a("div"),F(dx.$$.fragment),FNr=l(),rMe=a("p"),TNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MNr=l(),vn=a("p"),ENr=o("The model class to instantiate is selected based on the "),tMe=a("code"),CNr=o("model_type"),wNr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),LNr=o("pretrained_model_name_or_path"),xNr=o(":"),$Nr=l(),$e=a("ul"),f0=a("li"),sMe=a("strong"),kNr=o("albert"),SNr=o(" \u2014 "),LK=a("a"),RNr=o("FlaxAlbertForSequenceClassification"),PNr=o(" (ALBERT model)"),BNr=l(),m0=a("li"),lMe=a("strong"),INr=o("bart"),NNr=o(" \u2014 "),xK=a("a"),qNr=o("FlaxBartForSequenceClassification"),jNr=o(" (BART model)"),DNr=l(),g0=a("li"),iMe=a("strong"),GNr=o("bert"),ONr=o(" \u2014 "),$K=a("a"),VNr=o("FlaxBertForSequenceClassification"),XNr=o(" (BERT model)"),zNr=l(),h0=a("li"),dMe=a("strong"),WNr=o("big_bird"),QNr=o(" \u2014 "),kK=a("a"),HNr=o("FlaxBigBirdForSequenceClassification"),UNr=o(" (BigBird model)"),JNr=l(),p0=a("li"),cMe=a("strong"),YNr=o("distilbert"),KNr=o(" \u2014 "),SK=a("a"),ZNr=o("FlaxDistilBertForSequenceClassification"),eqr=o(" (DistilBERT model)"),oqr=l(),_0=a("li"),fMe=a("strong"),rqr=o("electra"),tqr=o(" \u2014 "),RK=a("a"),aqr=o("FlaxElectraForSequenceClassification"),nqr=o(" (ELECTRA model)"),sqr=l(),u0=a("li"),mMe=a("strong"),lqr=o("mbart"),iqr=o(" \u2014 "),PK=a("a"),dqr=o("FlaxMBartForSequenceClassification"),cqr=o(" (mBART model)"),fqr=l(),b0=a("li"),gMe=a("strong"),mqr=o("roberta"),gqr=o(" \u2014 "),BK=a("a"),hqr=o("FlaxRobertaForSequenceClassification"),pqr=o(" (RoBERTa model)"),_qr=l(),v0=a("li"),hMe=a("strong"),uqr=o("roformer"),bqr=o(" \u2014 "),IK=a("a"),vqr=o("FlaxRoFormerForSequenceClassification"),Fqr=o(" (RoFormer model)"),Tqr=l(),F0=a("li"),pMe=a("strong"),Mqr=o("xlm-roberta"),Eqr=o(" \u2014 "),NK=a("a"),Cqr=o("FlaxXLMRobertaForSequenceClassification"),wqr=o(" (XLM-RoBERTa model)"),Aqr=l(),F(T0.$$.fragment),wDe=l(),Hc=a("h2"),M0=a("a"),_Me=a("span"),F(cx.$$.fragment),yqr=l(),uMe=a("span"),Lqr=o("FlaxAutoModelForQuestionAnswering"),ADe=l(),ur=a("div"),F(fx.$$.fragment),xqr=l(),Uc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),jK=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),mx=a("p"),Iqr=o("This class cannot be instantiated directly using "),bMe=a("code"),Nqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),Ht=a("div"),F(gx.$$.fragment),Dqr=l(),vMe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oqr=l(),Jc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),Wqr=o("from_pretrained()"),Qqr=o(" to load the model weights."),Hqr=l(),F(E0.$$.fragment),Uqr=l(),zr=a("div"),F(hx.$$.fragment),Jqr=l(),TMe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kqr=l(),Fn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),MMe=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),ke=a("ul"),C0=a("li"),wMe=a("strong"),ljr=o("albert"),ijr=o(" \u2014 "),GK=a("a"),djr=o("FlaxAlbertForQuestionAnswering"),cjr=o(" (ALBERT model)"),fjr=l(),w0=a("li"),AMe=a("strong"),mjr=o("bart"),gjr=o(" \u2014 "),OK=a("a"),hjr=o("FlaxBartForQuestionAnswering"),pjr=o(" (BART model)"),_jr=l(),A0=a("li"),yMe=a("strong"),ujr=o("bert"),bjr=o(" \u2014 "),VK=a("a"),vjr=o("FlaxBertForQuestionAnswering"),Fjr=o(" (BERT model)"),Tjr=l(),y0=a("li"),LMe=a("strong"),Mjr=o("big_bird"),Ejr=o(" \u2014 "),XK=a("a"),Cjr=o("FlaxBigBirdForQuestionAnswering"),wjr=o(" (BigBird model)"),Ajr=l(),L0=a("li"),xMe=a("strong"),yjr=o("distilbert"),Ljr=o(" \u2014 "),zK=a("a"),xjr=o("FlaxDistilBertForQuestionAnswering"),$jr=o(" (DistilBERT model)"),kjr=l(),x0=a("li"),$Me=a("strong"),Sjr=o("electra"),Rjr=o(" \u2014 "),WK=a("a"),Pjr=o("FlaxElectraForQuestionAnswering"),Bjr=o(" (ELECTRA model)"),Ijr=l(),$0=a("li"),kMe=a("strong"),Njr=o("mbart"),qjr=o(" \u2014 "),QK=a("a"),jjr=o("FlaxMBartForQuestionAnswering"),Djr=o(" (mBART model)"),Gjr=l(),k0=a("li"),SMe=a("strong"),Ojr=o("roberta"),Vjr=o(" \u2014 "),HK=a("a"),Xjr=o("FlaxRobertaForQuestionAnswering"),zjr=o(" (RoBERTa model)"),Wjr=l(),S0=a("li"),RMe=a("strong"),Qjr=o("roformer"),Hjr=o(" \u2014 "),UK=a("a"),Ujr=o("FlaxRoFormerForQuestionAnswering"),Jjr=o(" (RoFormer model)"),Yjr=l(),R0=a("li"),PMe=a("strong"),Kjr=o("xlm-roberta"),Zjr=o(" \u2014 "),JK=a("a"),eDr=o("FlaxXLMRobertaForQuestionAnswering"),oDr=o(" (XLM-RoBERTa model)"),rDr=l(),F(P0.$$.fragment),yDe=l(),Yc=a("h2"),B0=a("a"),BMe=a("span"),F(px.$$.fragment),tDr=l(),IMe=a("span"),aDr=o("FlaxAutoModelForTokenClassification"),LDe=l(),br=a("div"),F(_x.$$.fragment),nDr=l(),Kc=a("p"),sDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=a("a"),lDr=o("from_pretrained()"),iDr=o(" class method or the "),KK=a("a"),dDr=o("from_config()"),cDr=o(` class
method.`),fDr=l(),ux=a("p"),mDr=o("This class cannot be instantiated directly using "),NMe=a("code"),gDr=o("__init__()"),hDr=o(" (throws an error)."),pDr=l(),Ut=a("div"),F(bx.$$.fragment),_Dr=l(),qMe=a("p"),uDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bDr=l(),Zc=a("p"),vDr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),FDr=o("not"),TDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),MDr=o("from_pretrained()"),EDr=o(" to load the model weights."),CDr=l(),F(I0.$$.fragment),wDr=l(),Wr=a("div"),F(vx.$$.fragment),ADr=l(),DMe=a("p"),yDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LDr=l(),Tn=a("p"),xDr=o("The model class to instantiate is selected based on the "),GMe=a("code"),$Dr=o("model_type"),kDr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(":"),IDr=l(),Ge=a("ul"),N0=a("li"),XMe=a("strong"),NDr=o("albert"),qDr=o(" \u2014 "),eZ=a("a"),jDr=o("FlaxAlbertForTokenClassification"),DDr=o(" (ALBERT model)"),GDr=l(),q0=a("li"),zMe=a("strong"),ODr=o("bert"),VDr=o(" \u2014 "),oZ=a("a"),XDr=o("FlaxBertForTokenClassification"),zDr=o(" (BERT model)"),WDr=l(),j0=a("li"),WMe=a("strong"),QDr=o("big_bird"),HDr=o(" \u2014 "),rZ=a("a"),UDr=o("FlaxBigBirdForTokenClassification"),JDr=o(" (BigBird model)"),YDr=l(),D0=a("li"),QMe=a("strong"),KDr=o("distilbert"),ZDr=o(" \u2014 "),tZ=a("a"),eGr=o("FlaxDistilBertForTokenClassification"),oGr=o(" (DistilBERT model)"),rGr=l(),G0=a("li"),HMe=a("strong"),tGr=o("electra"),aGr=o(" \u2014 "),aZ=a("a"),nGr=o("FlaxElectraForTokenClassification"),sGr=o(" (ELECTRA model)"),lGr=l(),O0=a("li"),UMe=a("strong"),iGr=o("roberta"),dGr=o(" \u2014 "),nZ=a("a"),cGr=o("FlaxRobertaForTokenClassification"),fGr=o(" (RoBERTa model)"),mGr=l(),V0=a("li"),JMe=a("strong"),gGr=o("roformer"),hGr=o(" \u2014 "),sZ=a("a"),pGr=o("FlaxRoFormerForTokenClassification"),_Gr=o(" (RoFormer model)"),uGr=l(),X0=a("li"),YMe=a("strong"),bGr=o("xlm-roberta"),vGr=o(" \u2014 "),lZ=a("a"),FGr=o("FlaxXLMRobertaForTokenClassification"),TGr=o(" (XLM-RoBERTa model)"),MGr=l(),F(z0.$$.fragment),xDe=l(),ef=a("h2"),W0=a("a"),KMe=a("span"),F(Fx.$$.fragment),EGr=l(),ZMe=a("span"),CGr=o("FlaxAutoModelForMultipleChoice"),$De=l(),vr=a("div"),F(Tx.$$.fragment),wGr=l(),of=a("p"),AGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=a("a"),yGr=o("from_pretrained()"),LGr=o(" class method or the "),dZ=a("a"),xGr=o("from_config()"),$Gr=o(` class
method.`),kGr=l(),Mx=a("p"),SGr=o("This class cannot be instantiated directly using "),eEe=a("code"),RGr=o("__init__()"),PGr=o(" (throws an error)."),BGr=l(),Jt=a("div"),F(Ex.$$.fragment),IGr=l(),oEe=a("p"),NGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qGr=l(),rf=a("p"),jGr=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),DGr=o("not"),GGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),OGr=o("from_pretrained()"),VGr=o(" to load the model weights."),XGr=l(),F(Q0.$$.fragment),zGr=l(),Qr=a("div"),F(Cx.$$.fragment),WGr=l(),tEe=a("p"),QGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HGr=l(),Mn=a("p"),UGr=o("The model class to instantiate is selected based on the "),aEe=a("code"),JGr=o("model_type"),YGr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),KGr=o("pretrained_model_name_or_path"),ZGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),eOr=o("pretrained_model_name_or_path"),oOr=o(":"),rOr=l(),Oe=a("ul"),H0=a("li"),lEe=a("strong"),tOr=o("albert"),aOr=o(" \u2014 "),fZ=a("a"),nOr=o("FlaxAlbertForMultipleChoice"),sOr=o(" (ALBERT model)"),lOr=l(),U0=a("li"),iEe=a("strong"),iOr=o("bert"),dOr=o(" \u2014 "),mZ=a("a"),cOr=o("FlaxBertForMultipleChoice"),fOr=o(" (BERT model)"),mOr=l(),J0=a("li"),dEe=a("strong"),gOr=o("big_bird"),hOr=o(" \u2014 "),gZ=a("a"),pOr=o("FlaxBigBirdForMultipleChoice"),_Or=o(" (BigBird model)"),uOr=l(),Y0=a("li"),cEe=a("strong"),bOr=o("distilbert"),vOr=o(" \u2014 "),hZ=a("a"),FOr=o("FlaxDistilBertForMultipleChoice"),TOr=o(" (DistilBERT model)"),MOr=l(),K0=a("li"),fEe=a("strong"),EOr=o("electra"),COr=o(" \u2014 "),pZ=a("a"),wOr=o("FlaxElectraForMultipleChoice"),AOr=o(" (ELECTRA model)"),yOr=l(),Z0=a("li"),mEe=a("strong"),LOr=o("roberta"),xOr=o(" \u2014 "),_Z=a("a"),$Or=o("FlaxRobertaForMultipleChoice"),kOr=o(" (RoBERTa model)"),SOr=l(),ew=a("li"),gEe=a("strong"),ROr=o("roformer"),POr=o(" \u2014 "),uZ=a("a"),BOr=o("FlaxRoFormerForMultipleChoice"),IOr=o(" (RoFormer model)"),NOr=l(),ow=a("li"),hEe=a("strong"),qOr=o("xlm-roberta"),jOr=o(" \u2014 "),bZ=a("a"),DOr=o("FlaxXLMRobertaForMultipleChoice"),GOr=o(" (XLM-RoBERTa model)"),OOr=l(),F(rw.$$.fragment),kDe=l(),tf=a("h2"),tw=a("a"),pEe=a("span"),F(wx.$$.fragment),VOr=l(),_Ee=a("span"),XOr=o("FlaxAutoModelForNextSentencePrediction"),SDe=l(),Fr=a("div"),F(Ax.$$.fragment),zOr=l(),af=a("p"),WOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=a("a"),QOr=o("from_pretrained()"),HOr=o(" class method or the "),FZ=a("a"),UOr=o("from_config()"),JOr=o(` class
method.`),YOr=l(),yx=a("p"),KOr=o("This class cannot be instantiated directly using "),uEe=a("code"),ZOr=o("__init__()"),eVr=o(" (throws an error)."),oVr=l(),Yt=a("div"),F(Lx.$$.fragment),rVr=l(),bEe=a("p"),tVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aVr=l(),nf=a("p"),nVr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),sVr=o("not"),lVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),iVr=o("from_pretrained()"),dVr=o(" to load the model weights."),cVr=l(),F(aw.$$.fragment),fVr=l(),Hr=a("div"),F(xx.$$.fragment),mVr=l(),FEe=a("p"),gVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hVr=l(),En=a("p"),pVr=o("The model class to instantiate is selected based on the "),TEe=a("code"),_Vr=o("model_type"),uVr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),bVr=o("pretrained_model_name_or_path"),vVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(":"),MVr=l(),CEe=a("ul"),nw=a("li"),wEe=a("strong"),EVr=o("bert"),CVr=o(" \u2014 "),MZ=a("a"),wVr=o("FlaxBertForNextSentencePrediction"),AVr=o(" (BERT model)"),yVr=l(),F(sw.$$.fragment),RDe=l(),sf=a("h2"),lw=a("a"),AEe=a("span"),F($x.$$.fragment),LVr=l(),yEe=a("span"),xVr=o("FlaxAutoModelForImageClassification"),PDe=l(),Tr=a("div"),F(kx.$$.fragment),$Vr=l(),lf=a("p"),kVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=a("a"),SVr=o("from_pretrained()"),RVr=o(" class method or the "),CZ=a("a"),PVr=o("from_config()"),BVr=o(` class
method.`),IVr=l(),Sx=a("p"),NVr=o("This class cannot be instantiated directly using "),LEe=a("code"),qVr=o("__init__()"),jVr=o(" (throws an error)."),DVr=l(),Kt=a("div"),F(Rx.$$.fragment),GVr=l(),xEe=a("p"),OVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VVr=l(),df=a("p"),XVr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),zVr=o("not"),WVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),QVr=o("from_pretrained()"),HVr=o(" to load the model weights."),UVr=l(),F(iw.$$.fragment),JVr=l(),Ur=a("div"),F(Px.$$.fragment),YVr=l(),kEe=a("p"),KVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZVr=l(),Cn=a("p"),eXr=o("The model class to instantiate is selected based on the "),SEe=a("code"),oXr=o("model_type"),rXr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),tXr=o("pretrained_model_name_or_path"),aXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),nXr=o("pretrained_model_name_or_path"),sXr=o(":"),lXr=l(),Bx=a("ul"),dw=a("li"),BEe=a("strong"),iXr=o("beit"),dXr=o(" \u2014 "),AZ=a("a"),cXr=o("FlaxBeitForImageClassification"),fXr=o(" (BEiT model)"),mXr=l(),cw=a("li"),IEe=a("strong"),gXr=o("vit"),hXr=o(" \u2014 "),yZ=a("a"),pXr=o("FlaxViTForImageClassification"),_Xr=o(" (ViT model)"),uXr=l(),F(fw.$$.fragment),BDe=l(),cf=a("h2"),mw=a("a"),NEe=a("span"),F(Ix.$$.fragment),bXr=l(),qEe=a("span"),vXr=o("FlaxAutoModelForVision2Seq"),IDe=l(),Mr=a("div"),F(Nx.$$.fragment),FXr=l(),ff=a("p"),TXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=a("a"),MXr=o("from_pretrained()"),EXr=o(" class method or the "),xZ=a("a"),CXr=o("from_config()"),wXr=o(` class
method.`),AXr=l(),qx=a("p"),yXr=o("This class cannot be instantiated directly using "),jEe=a("code"),LXr=o("__init__()"),xXr=o(" (throws an error)."),$Xr=l(),Zt=a("div"),F(jx.$$.fragment),kXr=l(),DEe=a("p"),SXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RXr=l(),mf=a("p"),PXr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),BXr=o("not"),IXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),NXr=o("from_pretrained()"),qXr=o(" to load the model weights."),jXr=l(),F(gw.$$.fragment),DXr=l(),Jr=a("div"),F(Dx.$$.fragment),GXr=l(),OEe=a("p"),OXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VXr=l(),wn=a("p"),XXr=o("The model class to instantiate is selected based on the "),VEe=a("code"),zXr=o("model_type"),WXr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),QXr=o("pretrained_model_name_or_path"),HXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),UXr=o("pretrained_model_name_or_path"),JXr=o(":"),YXr=l(),WEe=a("ul"),hw=a("li"),QEe=a("strong"),KXr=o("vision-encoder-decoder"),ZXr=o(" \u2014 "),kZ=a("a"),ezr=o("FlaxVisionEncoderDecoderModel"),ozr=o(" (Vision Encoder decoder model)"),rzr=l(),F(pw.$$.fragment),this.h()},l(f){const u=eSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Gx=s(p);m=n(Gx,"A",{id:!0,class:!0,href:!0});var HEe=s(m);_=n(HEe,"SPAN",{});var UEe=s(_);T(d.$$.fragment,UEe),UEe.forEach(t),HEe.forEach(t),h=i(Gx),Mo=n(Gx,"SPAN",{});var JEe=s(Mo);mi=r(JEe,"Auto Classes"),JEe.forEach(t),Gx.forEach(t),_f=i(f),tt=n(f,"P",{});var Ox=s(tt);gi=r(Ox,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Ox,"CODE",{});var YEe=s(hi);SA=r(YEe,"from_pretrained()"),YEe.forEach(t),uf=r(Ox,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ox.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var KEe=s(yn);RA=r(KEe,"AutoConfig"),KEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var ZEe=s(xn);PA=r(ZEe,"AutoModel"),ZEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var eCe=s($n);BA=r(eCe,"AutoTokenizer"),eCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Vx=s(Ae);ek=r(Vx,"will create a model that is an instance of "),bi=n(Vx,"A",{href:!0});var oCe=s(bi);ok=r(oCe,"BertModel"),oCe.forEach(t),rk=r(Vx,"."),Vx.forEach(t),Eo=i(f),Aa=n(f,"P",{});var Xx=s(Aa);tk=r(Xx,"There is one class of "),vf=n(Xx,"CODE",{});var rCe=s(vf);ak=r(rCe,"AutoModel"),rCe.forEach(t),zOe=r(Xx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xx.forEach(t),Pqe=i(f),vi=n(f,"H2",{class:!0});var zx=s(vi);Ff=n(zx,"A",{id:!0,class:!0,href:!0});var tCe=s(Ff);Coe=n(tCe,"SPAN",{});var aCe=s(Coe);T(IA.$$.fragment,aCe),aCe.forEach(t),tCe.forEach(t),WOe=i(zx),woe=n(zx,"SPAN",{});var nCe=s(woe);QOe=r(nCe,"Extending the Auto Classes"),nCe.forEach(t),zx.forEach(t),Bqe=i(f),kn=n(f,"P",{});var gf=s(kn);HOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=n(gf,"CODE",{});var sCe=s(Aoe);UOe=r(sCe,"NewModel"),sCe.forEach(t),JOe=r(gf,", make sure you have a "),yoe=n(gf,"CODE",{});var lCe=s(yoe);YOe=r(lCe,"NewModelConfig"),lCe.forEach(t),KOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Iqe=i(f),T(NA.$$.fragment,f),Nqe=i(f),nk=n(f,"P",{});var iCe=s(nk);ZOe=r(iCe,"You will then be able to use the auto classes like you would usually do!"),iCe.forEach(t),qqe=i(f),T(Tf.$$.fragment,f),jqe=i(f),Fi=n(f,"H2",{class:!0});var Wx=s(Fi);Mf=n(Wx,"A",{id:!0,class:!0,href:!0});var dCe=s(Mf);Loe=n(dCe,"SPAN",{});var cCe=s(Loe);T(qA.$$.fragment,cCe),cCe.forEach(t),dCe.forEach(t),eVe=i(Wx),xoe=n(Wx,"SPAN",{});var fCe=s(xoe);oVe=r(fCe,"AutoConfig"),fCe.forEach(t),Wx.forEach(t),Dqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(jA.$$.fragment,ot),rVe=i(ot),DA=n(ot,"P",{});var Qx=s(DA);tVe=r(Qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=n(Qx,"A",{href:!0});var mCe=s(sk);aVe=r(mCe,"from_pretrained()"),mCe.forEach(t),nVe=r(Qx," class method."),Qx.forEach(t),sVe=i(ot),GA=n(ot,"P",{});var Hx=s(GA);lVe=r(Hx,"This class cannot be instantiated directly using "),$oe=n(Hx,"CODE",{});var gCe=s($oe);iVe=r(gCe,"__init__()"),gCe.forEach(t),dVe=r(Hx," (throws an error)."),Hx.forEach(t),cVe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(OA.$$.fragment,rt),fVe=i(rt),koe=n(rt,"P",{});var hCe=s(koe);mVe=r(hCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),hCe.forEach(t),gVe=i(rt),Ti=n(rt,"P",{});var hf=s(Ti);hVe=r(hf,"The configuration class to instantiate is selected based on the "),Soe=n(hf,"CODE",{});var pCe=s(Soe);pVe=r(pCe,"model_type"),pCe.forEach(t),_Ve=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=n(hf,"CODE",{});var _Ce=s(Roe);uVe=r(_Ce,"pretrained_model_name_or_path"),_Ce.forEach(t),bVe=r(hf,":"),hf.forEach(t),vVe=i(rt),A=n(rt,"UL",{});var y=s(A);Ef=n(y,"LI",{});var _w=s(Ef);Poe=n(_w,"STRONG",{});var uCe=s(Poe);FVe=r(uCe,"albert"),uCe.forEach(t),TVe=r(_w," \u2014 "),lk=n(_w,"A",{href:!0});var bCe=s(lk);MVe=r(bCe,"AlbertConfig"),bCe.forEach(t),EVe=r(_w," (ALBERT model)"),_w.forEach(t),CVe=i(y),Cf=n(y,"LI",{});var uw=s(Cf);Boe=n(uw,"STRONG",{});var vCe=s(Boe);wVe=r(vCe,"bart"),vCe.forEach(t),AVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var FCe=s(ik);yVe=r(FCe,"BartConfig"),FCe.forEach(t),LVe=r(uw," (BART model)"),uw.forEach(t),xVe=i(y),wf=n(y,"LI",{});var bw=s(wf);Ioe=n(bw,"STRONG",{});var TCe=s(Ioe);$Ve=r(TCe,"beit"),TCe.forEach(t),kVe=r(bw," \u2014 "),dk=n(bw,"A",{href:!0});var MCe=s(dk);SVe=r(MCe,"BeitConfig"),MCe.forEach(t),RVe=r(bw," (BEiT model)"),bw.forEach(t),PVe=i(y),Af=n(y,"LI",{});var vw=s(Af);Noe=n(vw,"STRONG",{});var ECe=s(Noe);BVe=r(ECe,"bert"),ECe.forEach(t),IVe=r(vw," \u2014 "),ck=n(vw,"A",{href:!0});var CCe=s(ck);NVe=r(CCe,"BertConfig"),CCe.forEach(t),qVe=r(vw," (BERT model)"),vw.forEach(t),jVe=i(y),yf=n(y,"LI",{});var Fw=s(yf);qoe=n(Fw,"STRONG",{});var wCe=s(qoe);DVe=r(wCe,"bert-generation"),wCe.forEach(t),GVe=r(Fw," \u2014 "),fk=n(Fw,"A",{href:!0});var ACe=s(fk);OVe=r(ACe,"BertGenerationConfig"),ACe.forEach(t),VVe=r(Fw," (Bert Generation model)"),Fw.forEach(t),XVe=i(y),Lf=n(y,"LI",{});var Tw=s(Lf);joe=n(Tw,"STRONG",{});var yCe=s(joe);zVe=r(yCe,"big_bird"),yCe.forEach(t),WVe=r(Tw," \u2014 "),mk=n(Tw,"A",{href:!0});var LCe=s(mk);QVe=r(LCe,"BigBirdConfig"),LCe.forEach(t),HVe=r(Tw," (BigBird model)"),Tw.forEach(t),UVe=i(y),xf=n(y,"LI",{});var Mw=s(xf);Doe=n(Mw,"STRONG",{});var xCe=s(Doe);JVe=r(xCe,"bigbird_pegasus"),xCe.forEach(t),YVe=r(Mw," \u2014 "),gk=n(Mw,"A",{href:!0});var $Ce=s(gk);KVe=r($Ce,"BigBirdPegasusConfig"),$Ce.forEach(t),ZVe=r(Mw," (BigBirdPegasus model)"),Mw.forEach(t),eXe=i(y),$f=n(y,"LI",{});var Ew=s($f);Goe=n(Ew,"STRONG",{});var kCe=s(Goe);oXe=r(kCe,"blenderbot"),kCe.forEach(t),rXe=r(Ew," \u2014 "),hk=n(Ew,"A",{href:!0});var SCe=s(hk);tXe=r(SCe,"BlenderbotConfig"),SCe.forEach(t),aXe=r(Ew," (Blenderbot model)"),Ew.forEach(t),nXe=i(y),kf=n(y,"LI",{});var Cw=s(kf);Ooe=n(Cw,"STRONG",{});var RCe=s(Ooe);sXe=r(RCe,"blenderbot-small"),RCe.forEach(t),lXe=r(Cw," \u2014 "),pk=n(Cw,"A",{href:!0});var PCe=s(pk);iXe=r(PCe,"BlenderbotSmallConfig"),PCe.forEach(t),dXe=r(Cw," (BlenderbotSmall model)"),Cw.forEach(t),cXe=i(y),Sf=n(y,"LI",{});var ww=s(Sf);Voe=n(ww,"STRONG",{});var BCe=s(Voe);fXe=r(BCe,"camembert"),BCe.forEach(t),mXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var ICe=s(_k);gXe=r(ICe,"CamembertConfig"),ICe.forEach(t),hXe=r(ww," (CamemBERT model)"),ww.forEach(t),pXe=i(y),Rf=n(y,"LI",{});var Aw=s(Rf);Xoe=n(Aw,"STRONG",{});var NCe=s(Xoe);_Xe=r(NCe,"canine"),NCe.forEach(t),uXe=r(Aw," \u2014 "),uk=n(Aw,"A",{href:!0});var qCe=s(uk);bXe=r(qCe,"CanineConfig"),qCe.forEach(t),vXe=r(Aw," (Canine model)"),Aw.forEach(t),FXe=i(y),Pf=n(y,"LI",{});var yw=s(Pf);zoe=n(yw,"STRONG",{});var jCe=s(zoe);TXe=r(jCe,"clip"),jCe.forEach(t),MXe=r(yw," \u2014 "),bk=n(yw,"A",{href:!0});var DCe=s(bk);EXe=r(DCe,"CLIPConfig"),DCe.forEach(t),CXe=r(yw," (CLIP model)"),yw.forEach(t),wXe=i(y),Bf=n(y,"LI",{});var Lw=s(Bf);Woe=n(Lw,"STRONG",{});var GCe=s(Woe);AXe=r(GCe,"convbert"),GCe.forEach(t),yXe=r(Lw," \u2014 "),vk=n(Lw,"A",{href:!0});var OCe=s(vk);LXe=r(OCe,"ConvBertConfig"),OCe.forEach(t),xXe=r(Lw," (ConvBERT model)"),Lw.forEach(t),$Xe=i(y),If=n(y,"LI",{});var xw=s(If);Qoe=n(xw,"STRONG",{});var VCe=s(Qoe);kXe=r(VCe,"convnext"),VCe.forEach(t),SXe=r(xw," \u2014 "),Fk=n(xw,"A",{href:!0});var XCe=s(Fk);RXe=r(XCe,"ConvNextConfig"),XCe.forEach(t),PXe=r(xw," (ConvNext model)"),xw.forEach(t),BXe=i(y),Nf=n(y,"LI",{});var $w=s(Nf);Hoe=n($w,"STRONG",{});var zCe=s(Hoe);IXe=r(zCe,"ctrl"),zCe.forEach(t),NXe=r($w," \u2014 "),Tk=n($w,"A",{href:!0});var WCe=s(Tk);qXe=r(WCe,"CTRLConfig"),WCe.forEach(t),jXe=r($w," (CTRL model)"),$w.forEach(t),DXe=i(y),qf=n(y,"LI",{});var kw=s(qf);Uoe=n(kw,"STRONG",{});var QCe=s(Uoe);GXe=r(QCe,"cvt"),QCe.forEach(t),OXe=r(kw," \u2014 "),Mk=n(kw,"A",{href:!0});var HCe=s(Mk);VXe=r(HCe,"CvtConfig"),HCe.forEach(t),XXe=r(kw," (CvT model)"),kw.forEach(t),zXe=i(y),jf=n(y,"LI",{});var Sw=s(jf);Joe=n(Sw,"STRONG",{});var UCe=s(Joe);WXe=r(UCe,"data2vec-audio"),UCe.forEach(t),QXe=r(Sw," \u2014 "),Ek=n(Sw,"A",{href:!0});var JCe=s(Ek);HXe=r(JCe,"Data2VecAudioConfig"),JCe.forEach(t),UXe=r(Sw," (Data2VecAudio model)"),Sw.forEach(t),JXe=i(y),Df=n(y,"LI",{});var Rw=s(Df);Yoe=n(Rw,"STRONG",{});var YCe=s(Yoe);YXe=r(YCe,"data2vec-text"),YCe.forEach(t),KXe=r(Rw," \u2014 "),Ck=n(Rw,"A",{href:!0});var KCe=s(Ck);ZXe=r(KCe,"Data2VecTextConfig"),KCe.forEach(t),eze=r(Rw," (Data2VecText model)"),Rw.forEach(t),oze=i(y),Gf=n(y,"LI",{});var Pw=s(Gf);Koe=n(Pw,"STRONG",{});var ZCe=s(Koe);rze=r(ZCe,"data2vec-vision"),ZCe.forEach(t),tze=r(Pw," \u2014 "),wk=n(Pw,"A",{href:!0});var e0e=s(wk);aze=r(e0e,"Data2VecVisionConfig"),e0e.forEach(t),nze=r(Pw," (Data2VecVision model)"),Pw.forEach(t),sze=i(y),Of=n(y,"LI",{});var Bw=s(Of);Zoe=n(Bw,"STRONG",{});var o0e=s(Zoe);lze=r(o0e,"deberta"),o0e.forEach(t),ize=r(Bw," \u2014 "),Ak=n(Bw,"A",{href:!0});var r0e=s(Ak);dze=r(r0e,"DebertaConfig"),r0e.forEach(t),cze=r(Bw," (DeBERTa model)"),Bw.forEach(t),fze=i(y),Vf=n(y,"LI",{});var Iw=s(Vf);ere=n(Iw,"STRONG",{});var t0e=s(ere);mze=r(t0e,"deberta-v2"),t0e.forEach(t),gze=r(Iw," \u2014 "),yk=n(Iw,"A",{href:!0});var a0e=s(yk);hze=r(a0e,"DebertaV2Config"),a0e.forEach(t),pze=r(Iw," (DeBERTa-v2 model)"),Iw.forEach(t),_ze=i(y),Xf=n(y,"LI",{});var Nw=s(Xf);ore=n(Nw,"STRONG",{});var n0e=s(ore);uze=r(n0e,"decision_transformer"),n0e.forEach(t),bze=r(Nw," \u2014 "),Lk=n(Nw,"A",{href:!0});var s0e=s(Lk);vze=r(s0e,"DecisionTransformerConfig"),s0e.forEach(t),Fze=r(Nw," (Decision Transformer model)"),Nw.forEach(t),Tze=i(y),zf=n(y,"LI",{});var qw=s(zf);rre=n(qw,"STRONG",{});var l0e=s(rre);Mze=r(l0e,"deit"),l0e.forEach(t),Eze=r(qw," \u2014 "),xk=n(qw,"A",{href:!0});var azr=s(xk);Cze=r(azr,"DeiTConfig"),azr.forEach(t),wze=r(qw," (DeiT model)"),qw.forEach(t),Aze=i(y),Wf=n(y,"LI",{});var i0e=s(Wf);tre=n(i0e,"STRONG",{});var nzr=s(tre);yze=r(nzr,"detr"),nzr.forEach(t),Lze=r(i0e," \u2014 "),$k=n(i0e,"A",{href:!0});var szr=s($k);xze=r(szr,"DetrConfig"),szr.forEach(t),$ze=r(i0e," (DETR model)"),i0e.forEach(t),kze=i(y),Qf=n(y,"LI",{});var d0e=s(Qf);are=n(d0e,"STRONG",{});var lzr=s(are);Sze=r(lzr,"distilbert"),lzr.forEach(t),Rze=r(d0e," \u2014 "),kk=n(d0e,"A",{href:!0});var izr=s(kk);Pze=r(izr,"DistilBertConfig"),izr.forEach(t),Bze=r(d0e," (DistilBERT model)"),d0e.forEach(t),Ize=i(y),Hf=n(y,"LI",{});var c0e=s(Hf);nre=n(c0e,"STRONG",{});var dzr=s(nre);Nze=r(dzr,"dpr"),dzr.forEach(t),qze=r(c0e," \u2014 "),Sk=n(c0e,"A",{href:!0});var czr=s(Sk);jze=r(czr,"DPRConfig"),czr.forEach(t),Dze=r(c0e," (DPR model)"),c0e.forEach(t),Gze=i(y),Uf=n(y,"LI",{});var f0e=s(Uf);sre=n(f0e,"STRONG",{});var fzr=s(sre);Oze=r(fzr,"dpt"),fzr.forEach(t),Vze=r(f0e," \u2014 "),Rk=n(f0e,"A",{href:!0});var mzr=s(Rk);Xze=r(mzr,"DPTConfig"),mzr.forEach(t),zze=r(f0e," (DPT model)"),f0e.forEach(t),Wze=i(y),Jf=n(y,"LI",{});var m0e=s(Jf);lre=n(m0e,"STRONG",{});var gzr=s(lre);Qze=r(gzr,"electra"),gzr.forEach(t),Hze=r(m0e," \u2014 "),Pk=n(m0e,"A",{href:!0});var hzr=s(Pk);Uze=r(hzr,"ElectraConfig"),hzr.forEach(t),Jze=r(m0e," (ELECTRA model)"),m0e.forEach(t),Yze=i(y),Yf=n(y,"LI",{});var g0e=s(Yf);ire=n(g0e,"STRONG",{});var pzr=s(ire);Kze=r(pzr,"encoder-decoder"),pzr.forEach(t),Zze=r(g0e," \u2014 "),Bk=n(g0e,"A",{href:!0});var _zr=s(Bk);eWe=r(_zr,"EncoderDecoderConfig"),_zr.forEach(t),oWe=r(g0e," (Encoder decoder model)"),g0e.forEach(t),rWe=i(y),Kf=n(y,"LI",{});var h0e=s(Kf);dre=n(h0e,"STRONG",{});var uzr=s(dre);tWe=r(uzr,"flaubert"),uzr.forEach(t),aWe=r(h0e," \u2014 "),Ik=n(h0e,"A",{href:!0});var bzr=s(Ik);nWe=r(bzr,"FlaubertConfig"),bzr.forEach(t),sWe=r(h0e," (FlauBERT model)"),h0e.forEach(t),lWe=i(y),Zf=n(y,"LI",{});var p0e=s(Zf);cre=n(p0e,"STRONG",{});var vzr=s(cre);iWe=r(vzr,"flava"),vzr.forEach(t),dWe=r(p0e," \u2014 "),Nk=n(p0e,"A",{href:!0});var Fzr=s(Nk);cWe=r(Fzr,"FlavaConfig"),Fzr.forEach(t),fWe=r(p0e," (Flava model)"),p0e.forEach(t),mWe=i(y),em=n(y,"LI",{});var _0e=s(em);fre=n(_0e,"STRONG",{});var Tzr=s(fre);gWe=r(Tzr,"fnet"),Tzr.forEach(t),hWe=r(_0e," \u2014 "),qk=n(_0e,"A",{href:!0});var Mzr=s(qk);pWe=r(Mzr,"FNetConfig"),Mzr.forEach(t),_We=r(_0e," (FNet model)"),_0e.forEach(t),uWe=i(y),om=n(y,"LI",{});var u0e=s(om);mre=n(u0e,"STRONG",{});var Ezr=s(mre);bWe=r(Ezr,"fsmt"),Ezr.forEach(t),vWe=r(u0e," \u2014 "),jk=n(u0e,"A",{href:!0});var Czr=s(jk);FWe=r(Czr,"FSMTConfig"),Czr.forEach(t),TWe=r(u0e," (FairSeq Machine-Translation model)"),u0e.forEach(t),MWe=i(y),rm=n(y,"LI",{});var b0e=s(rm);gre=n(b0e,"STRONG",{});var wzr=s(gre);EWe=r(wzr,"funnel"),wzr.forEach(t),CWe=r(b0e," \u2014 "),Dk=n(b0e,"A",{href:!0});var Azr=s(Dk);wWe=r(Azr,"FunnelConfig"),Azr.forEach(t),AWe=r(b0e," (Funnel Transformer model)"),b0e.forEach(t),yWe=i(y),tm=n(y,"LI",{});var v0e=s(tm);hre=n(v0e,"STRONG",{});var yzr=s(hre);LWe=r(yzr,"glpn"),yzr.forEach(t),xWe=r(v0e," \u2014 "),Gk=n(v0e,"A",{href:!0});var Lzr=s(Gk);$We=r(Lzr,"GLPNConfig"),Lzr.forEach(t),kWe=r(v0e," (GLPN model)"),v0e.forEach(t),SWe=i(y),am=n(y,"LI",{});var F0e=s(am);pre=n(F0e,"STRONG",{});var xzr=s(pre);RWe=r(xzr,"gpt2"),xzr.forEach(t),PWe=r(F0e," \u2014 "),Ok=n(F0e,"A",{href:!0});var $zr=s(Ok);BWe=r($zr,"GPT2Config"),$zr.forEach(t),IWe=r(F0e," (OpenAI GPT-2 model)"),F0e.forEach(t),NWe=i(y),nm=n(y,"LI",{});var T0e=s(nm);_re=n(T0e,"STRONG",{});var kzr=s(_re);qWe=r(kzr,"gpt_neo"),kzr.forEach(t),jWe=r(T0e," \u2014 "),Vk=n(T0e,"A",{href:!0});var Szr=s(Vk);DWe=r(Szr,"GPTNeoConfig"),Szr.forEach(t),GWe=r(T0e," (GPT Neo model)"),T0e.forEach(t),OWe=i(y),sm=n(y,"LI",{});var M0e=s(sm);ure=n(M0e,"STRONG",{});var Rzr=s(ure);VWe=r(Rzr,"gpt_neox"),Rzr.forEach(t),XWe=r(M0e," \u2014 "),Xk=n(M0e,"A",{href:!0});var Pzr=s(Xk);zWe=r(Pzr,"GPTNeoXConfig"),Pzr.forEach(t),WWe=r(M0e," (GPT NeoX model)"),M0e.forEach(t),QWe=i(y),lm=n(y,"LI",{});var E0e=s(lm);bre=n(E0e,"STRONG",{});var Bzr=s(bre);HWe=r(Bzr,"gptj"),Bzr.forEach(t),UWe=r(E0e," \u2014 "),zk=n(E0e,"A",{href:!0});var Izr=s(zk);JWe=r(Izr,"GPTJConfig"),Izr.forEach(t),YWe=r(E0e," (GPT-J model)"),E0e.forEach(t),KWe=i(y),im=n(y,"LI",{});var C0e=s(im);vre=n(C0e,"STRONG",{});var Nzr=s(vre);ZWe=r(Nzr,"hubert"),Nzr.forEach(t),eQe=r(C0e," \u2014 "),Wk=n(C0e,"A",{href:!0});var qzr=s(Wk);oQe=r(qzr,"HubertConfig"),qzr.forEach(t),rQe=r(C0e," (Hubert model)"),C0e.forEach(t),tQe=i(y),dm=n(y,"LI",{});var w0e=s(dm);Fre=n(w0e,"STRONG",{});var jzr=s(Fre);aQe=r(jzr,"ibert"),jzr.forEach(t),nQe=r(w0e," \u2014 "),Qk=n(w0e,"A",{href:!0});var Dzr=s(Qk);sQe=r(Dzr,"IBertConfig"),Dzr.forEach(t),lQe=r(w0e," (I-BERT model)"),w0e.forEach(t),iQe=i(y),cm=n(y,"LI",{});var A0e=s(cm);Tre=n(A0e,"STRONG",{});var Gzr=s(Tre);dQe=r(Gzr,"imagegpt"),Gzr.forEach(t),cQe=r(A0e," \u2014 "),Hk=n(A0e,"A",{href:!0});var Ozr=s(Hk);fQe=r(Ozr,"ImageGPTConfig"),Ozr.forEach(t),mQe=r(A0e," (ImageGPT model)"),A0e.forEach(t),gQe=i(y),fm=n(y,"LI",{});var y0e=s(fm);Mre=n(y0e,"STRONG",{});var Vzr=s(Mre);hQe=r(Vzr,"layoutlm"),Vzr.forEach(t),pQe=r(y0e," \u2014 "),Uk=n(y0e,"A",{href:!0});var Xzr=s(Uk);_Qe=r(Xzr,"LayoutLMConfig"),Xzr.forEach(t),uQe=r(y0e," (LayoutLM model)"),y0e.forEach(t),bQe=i(y),mm=n(y,"LI",{});var L0e=s(mm);Ere=n(L0e,"STRONG",{});var zzr=s(Ere);vQe=r(zzr,"layoutlmv2"),zzr.forEach(t),FQe=r(L0e," \u2014 "),Jk=n(L0e,"A",{href:!0});var Wzr=s(Jk);TQe=r(Wzr,"LayoutLMv2Config"),Wzr.forEach(t),MQe=r(L0e," (LayoutLMv2 model)"),L0e.forEach(t),EQe=i(y),gm=n(y,"LI",{});var x0e=s(gm);Cre=n(x0e,"STRONG",{});var Qzr=s(Cre);CQe=r(Qzr,"layoutlmv3"),Qzr.forEach(t),wQe=r(x0e," \u2014 "),Yk=n(x0e,"A",{href:!0});var Hzr=s(Yk);AQe=r(Hzr,"LayoutLMv3Config"),Hzr.forEach(t),yQe=r(x0e," (LayoutLMv3 model)"),x0e.forEach(t),LQe=i(y),hm=n(y,"LI",{});var $0e=s(hm);wre=n($0e,"STRONG",{});var Uzr=s(wre);xQe=r(Uzr,"led"),Uzr.forEach(t),$Qe=r($0e," \u2014 "),Kk=n($0e,"A",{href:!0});var Jzr=s(Kk);kQe=r(Jzr,"LEDConfig"),Jzr.forEach(t),SQe=r($0e," (LED model)"),$0e.forEach(t),RQe=i(y),pm=n(y,"LI",{});var k0e=s(pm);Are=n(k0e,"STRONG",{});var Yzr=s(Are);PQe=r(Yzr,"longformer"),Yzr.forEach(t),BQe=r(k0e," \u2014 "),Zk=n(k0e,"A",{href:!0});var Kzr=s(Zk);IQe=r(Kzr,"LongformerConfig"),Kzr.forEach(t),NQe=r(k0e," (Longformer model)"),k0e.forEach(t),qQe=i(y),_m=n(y,"LI",{});var S0e=s(_m);yre=n(S0e,"STRONG",{});var Zzr=s(yre);jQe=r(Zzr,"luke"),Zzr.forEach(t),DQe=r(S0e," \u2014 "),eS=n(S0e,"A",{href:!0});var eWr=s(eS);GQe=r(eWr,"LukeConfig"),eWr.forEach(t),OQe=r(S0e," (LUKE model)"),S0e.forEach(t),VQe=i(y),um=n(y,"LI",{});var R0e=s(um);Lre=n(R0e,"STRONG",{});var oWr=s(Lre);XQe=r(oWr,"lxmert"),oWr.forEach(t),zQe=r(R0e," \u2014 "),oS=n(R0e,"A",{href:!0});var rWr=s(oS);WQe=r(rWr,"LxmertConfig"),rWr.forEach(t),QQe=r(R0e," (LXMERT model)"),R0e.forEach(t),HQe=i(y),bm=n(y,"LI",{});var P0e=s(bm);xre=n(P0e,"STRONG",{});var tWr=s(xre);UQe=r(tWr,"m2m_100"),tWr.forEach(t),JQe=r(P0e," \u2014 "),rS=n(P0e,"A",{href:!0});var aWr=s(rS);YQe=r(aWr,"M2M100Config"),aWr.forEach(t),KQe=r(P0e," (M2M100 model)"),P0e.forEach(t),ZQe=i(y),vm=n(y,"LI",{});var B0e=s(vm);$re=n(B0e,"STRONG",{});var nWr=s($re);eHe=r(nWr,"marian"),nWr.forEach(t),oHe=r(B0e," \u2014 "),tS=n(B0e,"A",{href:!0});var sWr=s(tS);rHe=r(sWr,"MarianConfig"),sWr.forEach(t),tHe=r(B0e," (Marian model)"),B0e.forEach(t),aHe=i(y),Fm=n(y,"LI",{});var I0e=s(Fm);kre=n(I0e,"STRONG",{});var lWr=s(kre);nHe=r(lWr,"maskformer"),lWr.forEach(t),sHe=r(I0e," \u2014 "),aS=n(I0e,"A",{href:!0});var iWr=s(aS);lHe=r(iWr,"MaskFormerConfig"),iWr.forEach(t),iHe=r(I0e," (MaskFormer model)"),I0e.forEach(t),dHe=i(y),Tm=n(y,"LI",{});var N0e=s(Tm);Sre=n(N0e,"STRONG",{});var dWr=s(Sre);cHe=r(dWr,"mbart"),dWr.forEach(t),fHe=r(N0e," \u2014 "),nS=n(N0e,"A",{href:!0});var cWr=s(nS);mHe=r(cWr,"MBartConfig"),cWr.forEach(t),gHe=r(N0e," (mBART model)"),N0e.forEach(t),hHe=i(y),Mm=n(y,"LI",{});var q0e=s(Mm);Rre=n(q0e,"STRONG",{});var fWr=s(Rre);pHe=r(fWr,"megatron-bert"),fWr.forEach(t),_He=r(q0e," \u2014 "),sS=n(q0e,"A",{href:!0});var mWr=s(sS);uHe=r(mWr,"MegatronBertConfig"),mWr.forEach(t),bHe=r(q0e," (MegatronBert model)"),q0e.forEach(t),vHe=i(y),Em=n(y,"LI",{});var j0e=s(Em);Pre=n(j0e,"STRONG",{});var gWr=s(Pre);FHe=r(gWr,"mobilebert"),gWr.forEach(t),THe=r(j0e," \u2014 "),lS=n(j0e,"A",{href:!0});var hWr=s(lS);MHe=r(hWr,"MobileBertConfig"),hWr.forEach(t),EHe=r(j0e," (MobileBERT model)"),j0e.forEach(t),CHe=i(y),Cm=n(y,"LI",{});var D0e=s(Cm);Bre=n(D0e,"STRONG",{});var pWr=s(Bre);wHe=r(pWr,"mobilevit"),pWr.forEach(t),AHe=r(D0e," \u2014 "),iS=n(D0e,"A",{href:!0});var _Wr=s(iS);yHe=r(_Wr,"MobileViTConfig"),_Wr.forEach(t),LHe=r(D0e," (MobileViT model)"),D0e.forEach(t),xHe=i(y),wm=n(y,"LI",{});var G0e=s(wm);Ire=n(G0e,"STRONG",{});var uWr=s(Ire);$He=r(uWr,"mpnet"),uWr.forEach(t),kHe=r(G0e," \u2014 "),dS=n(G0e,"A",{href:!0});var bWr=s(dS);SHe=r(bWr,"MPNetConfig"),bWr.forEach(t),RHe=r(G0e," (MPNet model)"),G0e.forEach(t),PHe=i(y),Am=n(y,"LI",{});var O0e=s(Am);Nre=n(O0e,"STRONG",{});var vWr=s(Nre);BHe=r(vWr,"mt5"),vWr.forEach(t),IHe=r(O0e," \u2014 "),cS=n(O0e,"A",{href:!0});var FWr=s(cS);NHe=r(FWr,"MT5Config"),FWr.forEach(t),qHe=r(O0e," (mT5 model)"),O0e.forEach(t),jHe=i(y),ym=n(y,"LI",{});var V0e=s(ym);qre=n(V0e,"STRONG",{});var TWr=s(qre);DHe=r(TWr,"nystromformer"),TWr.forEach(t),GHe=r(V0e," \u2014 "),fS=n(V0e,"A",{href:!0});var MWr=s(fS);OHe=r(MWr,"NystromformerConfig"),MWr.forEach(t),VHe=r(V0e," (Nystromformer model)"),V0e.forEach(t),XHe=i(y),Lm=n(y,"LI",{});var X0e=s(Lm);jre=n(X0e,"STRONG",{});var EWr=s(jre);zHe=r(EWr,"openai-gpt"),EWr.forEach(t),WHe=r(X0e," \u2014 "),mS=n(X0e,"A",{href:!0});var CWr=s(mS);QHe=r(CWr,"OpenAIGPTConfig"),CWr.forEach(t),HHe=r(X0e," (OpenAI GPT model)"),X0e.forEach(t),UHe=i(y),xm=n(y,"LI",{});var z0e=s(xm);Dre=n(z0e,"STRONG",{});var wWr=s(Dre);JHe=r(wWr,"opt"),wWr.forEach(t),YHe=r(z0e," \u2014 "),gS=n(z0e,"A",{href:!0});var AWr=s(gS);KHe=r(AWr,"OPTConfig"),AWr.forEach(t),ZHe=r(z0e," (OPT model)"),z0e.forEach(t),eUe=i(y),$m=n(y,"LI",{});var W0e=s($m);Gre=n(W0e,"STRONG",{});var yWr=s(Gre);oUe=r(yWr,"pegasus"),yWr.forEach(t),rUe=r(W0e," \u2014 "),hS=n(W0e,"A",{href:!0});var LWr=s(hS);tUe=r(LWr,"PegasusConfig"),LWr.forEach(t),aUe=r(W0e," (Pegasus model)"),W0e.forEach(t),nUe=i(y),km=n(y,"LI",{});var Q0e=s(km);Ore=n(Q0e,"STRONG",{});var xWr=s(Ore);sUe=r(xWr,"perceiver"),xWr.forEach(t),lUe=r(Q0e," \u2014 "),pS=n(Q0e,"A",{href:!0});var $Wr=s(pS);iUe=r($Wr,"PerceiverConfig"),$Wr.forEach(t),dUe=r(Q0e," (Perceiver model)"),Q0e.forEach(t),cUe=i(y),Sm=n(y,"LI",{});var H0e=s(Sm);Vre=n(H0e,"STRONG",{});var kWr=s(Vre);fUe=r(kWr,"plbart"),kWr.forEach(t),mUe=r(H0e," \u2014 "),_S=n(H0e,"A",{href:!0});var SWr=s(_S);gUe=r(SWr,"PLBartConfig"),SWr.forEach(t),hUe=r(H0e," (PLBart model)"),H0e.forEach(t),pUe=i(y),Rm=n(y,"LI",{});var U0e=s(Rm);Xre=n(U0e,"STRONG",{});var RWr=s(Xre);_Ue=r(RWr,"poolformer"),RWr.forEach(t),uUe=r(U0e," \u2014 "),uS=n(U0e,"A",{href:!0});var PWr=s(uS);bUe=r(PWr,"PoolFormerConfig"),PWr.forEach(t),vUe=r(U0e," (PoolFormer model)"),U0e.forEach(t),FUe=i(y),Pm=n(y,"LI",{});var J0e=s(Pm);zre=n(J0e,"STRONG",{});var BWr=s(zre);TUe=r(BWr,"prophetnet"),BWr.forEach(t),MUe=r(J0e," \u2014 "),bS=n(J0e,"A",{href:!0});var IWr=s(bS);EUe=r(IWr,"ProphetNetConfig"),IWr.forEach(t),CUe=r(J0e," (ProphetNet model)"),J0e.forEach(t),wUe=i(y),Bm=n(y,"LI",{});var Y0e=s(Bm);Wre=n(Y0e,"STRONG",{});var NWr=s(Wre);AUe=r(NWr,"qdqbert"),NWr.forEach(t),yUe=r(Y0e," \u2014 "),vS=n(Y0e,"A",{href:!0});var qWr=s(vS);LUe=r(qWr,"QDQBertConfig"),qWr.forEach(t),xUe=r(Y0e," (QDQBert model)"),Y0e.forEach(t),$Ue=i(y),Im=n(y,"LI",{});var K0e=s(Im);Qre=n(K0e,"STRONG",{});var jWr=s(Qre);kUe=r(jWr,"rag"),jWr.forEach(t),SUe=r(K0e," \u2014 "),FS=n(K0e,"A",{href:!0});var DWr=s(FS);RUe=r(DWr,"RagConfig"),DWr.forEach(t),PUe=r(K0e," (RAG model)"),K0e.forEach(t),BUe=i(y),Nm=n(y,"LI",{});var Z0e=s(Nm);Hre=n(Z0e,"STRONG",{});var GWr=s(Hre);IUe=r(GWr,"realm"),GWr.forEach(t),NUe=r(Z0e," \u2014 "),TS=n(Z0e,"A",{href:!0});var OWr=s(TS);qUe=r(OWr,"RealmConfig"),OWr.forEach(t),jUe=r(Z0e," (Realm model)"),Z0e.forEach(t),DUe=i(y),qm=n(y,"LI",{});var ewe=s(qm);Ure=n(ewe,"STRONG",{});var VWr=s(Ure);GUe=r(VWr,"reformer"),VWr.forEach(t),OUe=r(ewe," \u2014 "),MS=n(ewe,"A",{href:!0});var XWr=s(MS);VUe=r(XWr,"ReformerConfig"),XWr.forEach(t),XUe=r(ewe," (Reformer model)"),ewe.forEach(t),zUe=i(y),jm=n(y,"LI",{});var owe=s(jm);Jre=n(owe,"STRONG",{});var zWr=s(Jre);WUe=r(zWr,"regnet"),zWr.forEach(t),QUe=r(owe," \u2014 "),ES=n(owe,"A",{href:!0});var WWr=s(ES);HUe=r(WWr,"RegNetConfig"),WWr.forEach(t),UUe=r(owe," (RegNet model)"),owe.forEach(t),JUe=i(y),Dm=n(y,"LI",{});var rwe=s(Dm);Yre=n(rwe,"STRONG",{});var QWr=s(Yre);YUe=r(QWr,"rembert"),QWr.forEach(t),KUe=r(rwe," \u2014 "),CS=n(rwe,"A",{href:!0});var HWr=s(CS);ZUe=r(HWr,"RemBertConfig"),HWr.forEach(t),eJe=r(rwe," (RemBERT model)"),rwe.forEach(t),oJe=i(y),Gm=n(y,"LI",{});var twe=s(Gm);Kre=n(twe,"STRONG",{});var UWr=s(Kre);rJe=r(UWr,"resnet"),UWr.forEach(t),tJe=r(twe," \u2014 "),wS=n(twe,"A",{href:!0});var JWr=s(wS);aJe=r(JWr,"ResNetConfig"),JWr.forEach(t),nJe=r(twe," (ResNet model)"),twe.forEach(t),sJe=i(y),Om=n(y,"LI",{});var awe=s(Om);Zre=n(awe,"STRONG",{});var YWr=s(Zre);lJe=r(YWr,"retribert"),YWr.forEach(t),iJe=r(awe," \u2014 "),AS=n(awe,"A",{href:!0});var KWr=s(AS);dJe=r(KWr,"RetriBertConfig"),KWr.forEach(t),cJe=r(awe," (RetriBERT model)"),awe.forEach(t),fJe=i(y),Vm=n(y,"LI",{});var nwe=s(Vm);ete=n(nwe,"STRONG",{});var ZWr=s(ete);mJe=r(ZWr,"roberta"),ZWr.forEach(t),gJe=r(nwe," \u2014 "),yS=n(nwe,"A",{href:!0});var eQr=s(yS);hJe=r(eQr,"RobertaConfig"),eQr.forEach(t),pJe=r(nwe," (RoBERTa model)"),nwe.forEach(t),_Je=i(y),Xm=n(y,"LI",{});var swe=s(Xm);ote=n(swe,"STRONG",{});var oQr=s(ote);uJe=r(oQr,"roformer"),oQr.forEach(t),bJe=r(swe," \u2014 "),LS=n(swe,"A",{href:!0});var rQr=s(LS);vJe=r(rQr,"RoFormerConfig"),rQr.forEach(t),FJe=r(swe," (RoFormer model)"),swe.forEach(t),TJe=i(y),zm=n(y,"LI",{});var lwe=s(zm);rte=n(lwe,"STRONG",{});var tQr=s(rte);MJe=r(tQr,"segformer"),tQr.forEach(t),EJe=r(lwe," \u2014 "),xS=n(lwe,"A",{href:!0});var aQr=s(xS);CJe=r(aQr,"SegformerConfig"),aQr.forEach(t),wJe=r(lwe," (SegFormer model)"),lwe.forEach(t),AJe=i(y),Wm=n(y,"LI",{});var iwe=s(Wm);tte=n(iwe,"STRONG",{});var nQr=s(tte);yJe=r(nQr,"sew"),nQr.forEach(t),LJe=r(iwe," \u2014 "),$S=n(iwe,"A",{href:!0});var sQr=s($S);xJe=r(sQr,"SEWConfig"),sQr.forEach(t),$Je=r(iwe," (SEW model)"),iwe.forEach(t),kJe=i(y),Qm=n(y,"LI",{});var dwe=s(Qm);ate=n(dwe,"STRONG",{});var lQr=s(ate);SJe=r(lQr,"sew-d"),lQr.forEach(t),RJe=r(dwe," \u2014 "),kS=n(dwe,"A",{href:!0});var iQr=s(kS);PJe=r(iQr,"SEWDConfig"),iQr.forEach(t),BJe=r(dwe," (SEW-D model)"),dwe.forEach(t),IJe=i(y),Hm=n(y,"LI",{});var cwe=s(Hm);nte=n(cwe,"STRONG",{});var dQr=s(nte);NJe=r(dQr,"speech-encoder-decoder"),dQr.forEach(t),qJe=r(cwe," \u2014 "),SS=n(cwe,"A",{href:!0});var cQr=s(SS);jJe=r(cQr,"SpeechEncoderDecoderConfig"),cQr.forEach(t),DJe=r(cwe," (Speech Encoder decoder model)"),cwe.forEach(t),GJe=i(y),Um=n(y,"LI",{});var fwe=s(Um);ste=n(fwe,"STRONG",{});var fQr=s(ste);OJe=r(fQr,"speech_to_text"),fQr.forEach(t),VJe=r(fwe," \u2014 "),RS=n(fwe,"A",{href:!0});var mQr=s(RS);XJe=r(mQr,"Speech2TextConfig"),mQr.forEach(t),zJe=r(fwe," (Speech2Text model)"),fwe.forEach(t),WJe=i(y),Jm=n(y,"LI",{});var mwe=s(Jm);lte=n(mwe,"STRONG",{});var gQr=s(lte);QJe=r(gQr,"speech_to_text_2"),gQr.forEach(t),HJe=r(mwe," \u2014 "),PS=n(mwe,"A",{href:!0});var hQr=s(PS);UJe=r(hQr,"Speech2Text2Config"),hQr.forEach(t),JJe=r(mwe," (Speech2Text2 model)"),mwe.forEach(t),YJe=i(y),Ym=n(y,"LI",{});var gwe=s(Ym);ite=n(gwe,"STRONG",{});var pQr=s(ite);KJe=r(pQr,"splinter"),pQr.forEach(t),ZJe=r(gwe," \u2014 "),BS=n(gwe,"A",{href:!0});var _Qr=s(BS);eYe=r(_Qr,"SplinterConfig"),_Qr.forEach(t),oYe=r(gwe," (Splinter model)"),gwe.forEach(t),rYe=i(y),Km=n(y,"LI",{});var hwe=s(Km);dte=n(hwe,"STRONG",{});var uQr=s(dte);tYe=r(uQr,"squeezebert"),uQr.forEach(t),aYe=r(hwe," \u2014 "),IS=n(hwe,"A",{href:!0});var bQr=s(IS);nYe=r(bQr,"SqueezeBertConfig"),bQr.forEach(t),sYe=r(hwe," (SqueezeBERT model)"),hwe.forEach(t),lYe=i(y),Zm=n(y,"LI",{});var pwe=s(Zm);cte=n(pwe,"STRONG",{});var vQr=s(cte);iYe=r(vQr,"swin"),vQr.forEach(t),dYe=r(pwe," \u2014 "),NS=n(pwe,"A",{href:!0});var FQr=s(NS);cYe=r(FQr,"SwinConfig"),FQr.forEach(t),fYe=r(pwe," (Swin model)"),pwe.forEach(t),mYe=i(y),eg=n(y,"LI",{});var _we=s(eg);fte=n(_we,"STRONG",{});var TQr=s(fte);gYe=r(TQr,"t5"),TQr.forEach(t),hYe=r(_we," \u2014 "),qS=n(_we,"A",{href:!0});var MQr=s(qS);pYe=r(MQr,"T5Config"),MQr.forEach(t),_Ye=r(_we," (T5 model)"),_we.forEach(t),uYe=i(y),og=n(y,"LI",{});var uwe=s(og);mte=n(uwe,"STRONG",{});var EQr=s(mte);bYe=r(EQr,"tapas"),EQr.forEach(t),vYe=r(uwe," \u2014 "),jS=n(uwe,"A",{href:!0});var CQr=s(jS);FYe=r(CQr,"TapasConfig"),CQr.forEach(t),TYe=r(uwe," (TAPAS model)"),uwe.forEach(t),MYe=i(y),rg=n(y,"LI",{});var bwe=s(rg);gte=n(bwe,"STRONG",{});var wQr=s(gte);EYe=r(wQr,"trajectory_transformer"),wQr.forEach(t),CYe=r(bwe," \u2014 "),DS=n(bwe,"A",{href:!0});var AQr=s(DS);wYe=r(AQr,"TrajectoryTransformerConfig"),AQr.forEach(t),AYe=r(bwe," (Trajectory Transformer model)"),bwe.forEach(t),yYe=i(y),tg=n(y,"LI",{});var vwe=s(tg);hte=n(vwe,"STRONG",{});var yQr=s(hte);LYe=r(yQr,"transfo-xl"),yQr.forEach(t),xYe=r(vwe," \u2014 "),GS=n(vwe,"A",{href:!0});var LQr=s(GS);$Ye=r(LQr,"TransfoXLConfig"),LQr.forEach(t),kYe=r(vwe," (Transformer-XL model)"),vwe.forEach(t),SYe=i(y),ag=n(y,"LI",{});var Fwe=s(ag);pte=n(Fwe,"STRONG",{});var xQr=s(pte);RYe=r(xQr,"trocr"),xQr.forEach(t),PYe=r(Fwe," \u2014 "),OS=n(Fwe,"A",{href:!0});var $Qr=s(OS);BYe=r($Qr,"TrOCRConfig"),$Qr.forEach(t),IYe=r(Fwe," (TrOCR model)"),Fwe.forEach(t),NYe=i(y),ng=n(y,"LI",{});var Twe=s(ng);_te=n(Twe,"STRONG",{});var kQr=s(_te);qYe=r(kQr,"unispeech"),kQr.forEach(t),jYe=r(Twe," \u2014 "),VS=n(Twe,"A",{href:!0});var SQr=s(VS);DYe=r(SQr,"UniSpeechConfig"),SQr.forEach(t),GYe=r(Twe," (UniSpeech model)"),Twe.forEach(t),OYe=i(y),sg=n(y,"LI",{});var Mwe=s(sg);ute=n(Mwe,"STRONG",{});var RQr=s(ute);VYe=r(RQr,"unispeech-sat"),RQr.forEach(t),XYe=r(Mwe," \u2014 "),XS=n(Mwe,"A",{href:!0});var PQr=s(XS);zYe=r(PQr,"UniSpeechSatConfig"),PQr.forEach(t),WYe=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),QYe=i(y),lg=n(y,"LI",{});var Ewe=s(lg);bte=n(Ewe,"STRONG",{});var BQr=s(bte);HYe=r(BQr,"van"),BQr.forEach(t),UYe=r(Ewe," \u2014 "),zS=n(Ewe,"A",{href:!0});var IQr=s(zS);JYe=r(IQr,"VanConfig"),IQr.forEach(t),YYe=r(Ewe," (VAN model)"),Ewe.forEach(t),KYe=i(y),ig=n(y,"LI",{});var Cwe=s(ig);vte=n(Cwe,"STRONG",{});var NQr=s(vte);ZYe=r(NQr,"vilt"),NQr.forEach(t),eKe=r(Cwe," \u2014 "),WS=n(Cwe,"A",{href:!0});var qQr=s(WS);oKe=r(qQr,"ViltConfig"),qQr.forEach(t),rKe=r(Cwe," (ViLT model)"),Cwe.forEach(t),tKe=i(y),dg=n(y,"LI",{});var wwe=s(dg);Fte=n(wwe,"STRONG",{});var jQr=s(Fte);aKe=r(jQr,"vision-encoder-decoder"),jQr.forEach(t),nKe=r(wwe," \u2014 "),QS=n(wwe,"A",{href:!0});var DQr=s(QS);sKe=r(DQr,"VisionEncoderDecoderConfig"),DQr.forEach(t),lKe=r(wwe," (Vision Encoder decoder model)"),wwe.forEach(t),iKe=i(y),cg=n(y,"LI",{});var Awe=s(cg);Tte=n(Awe,"STRONG",{});var GQr=s(Tte);dKe=r(GQr,"vision-text-dual-encoder"),GQr.forEach(t),cKe=r(Awe," \u2014 "),HS=n(Awe,"A",{href:!0});var OQr=s(HS);fKe=r(OQr,"VisionTextDualEncoderConfig"),OQr.forEach(t),mKe=r(Awe," (VisionTextDualEncoder model)"),Awe.forEach(t),gKe=i(y),fg=n(y,"LI",{});var ywe=s(fg);Mte=n(ywe,"STRONG",{});var VQr=s(Mte);hKe=r(VQr,"visual_bert"),VQr.forEach(t),pKe=r(ywe," \u2014 "),US=n(ywe,"A",{href:!0});var XQr=s(US);_Ke=r(XQr,"VisualBertConfig"),XQr.forEach(t),uKe=r(ywe," (VisualBert model)"),ywe.forEach(t),bKe=i(y),mg=n(y,"LI",{});var Lwe=s(mg);Ete=n(Lwe,"STRONG",{});var zQr=s(Ete);vKe=r(zQr,"vit"),zQr.forEach(t),FKe=r(Lwe," \u2014 "),JS=n(Lwe,"A",{href:!0});var WQr=s(JS);TKe=r(WQr,"ViTConfig"),WQr.forEach(t),MKe=r(Lwe," (ViT model)"),Lwe.forEach(t),EKe=i(y),gg=n(y,"LI",{});var xwe=s(gg);Cte=n(xwe,"STRONG",{});var QQr=s(Cte);CKe=r(QQr,"vit_mae"),QQr.forEach(t),wKe=r(xwe," \u2014 "),YS=n(xwe,"A",{href:!0});var HQr=s(YS);AKe=r(HQr,"ViTMAEConfig"),HQr.forEach(t),yKe=r(xwe," (ViTMAE model)"),xwe.forEach(t),LKe=i(y),hg=n(y,"LI",{});var $we=s(hg);wte=n($we,"STRONG",{});var UQr=s(wte);xKe=r(UQr,"wav2vec2"),UQr.forEach(t),$Ke=r($we," \u2014 "),KS=n($we,"A",{href:!0});var JQr=s(KS);kKe=r(JQr,"Wav2Vec2Config"),JQr.forEach(t),SKe=r($we," (Wav2Vec2 model)"),$we.forEach(t),RKe=i(y),pg=n(y,"LI",{});var kwe=s(pg);Ate=n(kwe,"STRONG",{});var YQr=s(Ate);PKe=r(YQr,"wav2vec2-conformer"),YQr.forEach(t),BKe=r(kwe," \u2014 "),ZS=n(kwe,"A",{href:!0});var KQr=s(ZS);IKe=r(KQr,"Wav2Vec2ConformerConfig"),KQr.forEach(t),NKe=r(kwe," (Wav2Vec2-Conformer model)"),kwe.forEach(t),qKe=i(y),_g=n(y,"LI",{});var Swe=s(_g);yte=n(Swe,"STRONG",{});var ZQr=s(yte);jKe=r(ZQr,"wavlm"),ZQr.forEach(t),DKe=r(Swe," \u2014 "),eR=n(Swe,"A",{href:!0});var eHr=s(eR);GKe=r(eHr,"WavLMConfig"),eHr.forEach(t),OKe=r(Swe," (WavLM model)"),Swe.forEach(t),VKe=i(y),ug=n(y,"LI",{});var Rwe=s(ug);Lte=n(Rwe,"STRONG",{});var oHr=s(Lte);XKe=r(oHr,"xglm"),oHr.forEach(t),zKe=r(Rwe," \u2014 "),oR=n(Rwe,"A",{href:!0});var rHr=s(oR);WKe=r(rHr,"XGLMConfig"),rHr.forEach(t),QKe=r(Rwe," (XGLM model)"),Rwe.forEach(t),HKe=i(y),bg=n(y,"LI",{});var Pwe=s(bg);xte=n(Pwe,"STRONG",{});var tHr=s(xte);UKe=r(tHr,"xlm"),tHr.forEach(t),JKe=r(Pwe," \u2014 "),rR=n(Pwe,"A",{href:!0});var aHr=s(rR);YKe=r(aHr,"XLMConfig"),aHr.forEach(t),KKe=r(Pwe," (XLM model)"),Pwe.forEach(t),ZKe=i(y),vg=n(y,"LI",{});var Bwe=s(vg);$te=n(Bwe,"STRONG",{});var nHr=s($te);eZe=r(nHr,"xlm-prophetnet"),nHr.forEach(t),oZe=r(Bwe," \u2014 "),tR=n(Bwe,"A",{href:!0});var sHr=s(tR);rZe=r(sHr,"XLMProphetNetConfig"),sHr.forEach(t),tZe=r(Bwe," (XLMProphetNet model)"),Bwe.forEach(t),aZe=i(y),Fg=n(y,"LI",{});var Iwe=s(Fg);kte=n(Iwe,"STRONG",{});var lHr=s(kte);nZe=r(lHr,"xlm-roberta"),lHr.forEach(t),sZe=r(Iwe," \u2014 "),aR=n(Iwe,"A",{href:!0});var iHr=s(aR);lZe=r(iHr,"XLMRobertaConfig"),iHr.forEach(t),iZe=r(Iwe," (XLM-RoBERTa model)"),Iwe.forEach(t),dZe=i(y),Tg=n(y,"LI",{});var Nwe=s(Tg);Ste=n(Nwe,"STRONG",{});var dHr=s(Ste);cZe=r(dHr,"xlm-roberta-xl"),dHr.forEach(t),fZe=r(Nwe," \u2014 "),nR=n(Nwe,"A",{href:!0});var cHr=s(nR);mZe=r(cHr,"XLMRobertaXLConfig"),cHr.forEach(t),gZe=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),hZe=i(y),Mg=n(y,"LI",{});var qwe=s(Mg);Rte=n(qwe,"STRONG",{});var fHr=s(Rte);pZe=r(fHr,"xlnet"),fHr.forEach(t),_Ze=r(qwe," \u2014 "),sR=n(qwe,"A",{href:!0});var mHr=s(sR);uZe=r(mHr,"XLNetConfig"),mHr.forEach(t),bZe=r(qwe," (XLNet model)"),qwe.forEach(t),vZe=i(y),Eg=n(y,"LI",{});var jwe=s(Eg);Pte=n(jwe,"STRONG",{});var gHr=s(Pte);FZe=r(gHr,"yolos"),gHr.forEach(t),TZe=r(jwe," \u2014 "),lR=n(jwe,"A",{href:!0});var hHr=s(lR);MZe=r(hHr,"YolosConfig"),hHr.forEach(t),EZe=r(jwe," (YOLOS model)"),jwe.forEach(t),CZe=i(y),Cg=n(y,"LI",{});var Dwe=s(Cg);Bte=n(Dwe,"STRONG",{});var pHr=s(Bte);wZe=r(pHr,"yoso"),pHr.forEach(t),AZe=r(Dwe," \u2014 "),iR=n(Dwe,"A",{href:!0});var _Hr=s(iR);yZe=r(_Hr,"YosoConfig"),_Hr.forEach(t),LZe=r(Dwe," (YOSO model)"),Dwe.forEach(t),y.forEach(t),xZe=i(rt),T(wg.$$.fragment,rt),rt.forEach(t),$Ze=i(ot),Ag=n(ot,"DIV",{class:!0});var qDe=s(Ag);T(VA.$$.fragment,qDe),kZe=i(qDe),Ite=n(qDe,"P",{});var uHr=s(Ite);SZe=r(uHr,"Register a new configuration for this class."),uHr.forEach(t),qDe.forEach(t),ot.forEach(t),Gqe=i(f),Mi=n(f,"H2",{class:!0});var jDe=s(Mi);yg=n(jDe,"A",{id:!0,class:!0,href:!0});var bHr=s(yg);Nte=n(bHr,"SPAN",{});var vHr=s(Nte);T(XA.$$.fragment,vHr),vHr.forEach(t),bHr.forEach(t),RZe=i(jDe),qte=n(jDe,"SPAN",{});var FHr=s(qte);PZe=r(FHr,"AutoTokenizer"),FHr.forEach(t),jDe.forEach(t),Oqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(zA.$$.fragment,Ns),BZe=i(Ns),WA=n(Ns,"P",{});var DDe=s(WA);IZe=r(DDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=n(DDe,"A",{href:!0});var THr=s(dR);NZe=r(THr,"AutoTokenizer.from_pretrained()"),THr.forEach(t),qZe=r(DDe," class method."),DDe.forEach(t),jZe=i(Ns),QA=n(Ns,"P",{});var GDe=s(QA);DZe=r(GDe,"This class cannot be instantiated directly using "),jte=n(GDe,"CODE",{});var MHr=s(jte);GZe=r(MHr,"__init__()"),MHr.forEach(t),OZe=r(GDe," (throws an error)."),GDe.forEach(t),VZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(HA.$$.fragment,qs),XZe=i(qs),Dte=n(qs,"P",{});var EHr=s(Dte);zZe=r(EHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),EHr.forEach(t),WZe=i(qs),ya=n(qs,"P",{});var jw=s(ya);QZe=r(jw,"The tokenizer class to instantiate is selected based on the "),Gte=n(jw,"CODE",{});var CHr=s(Gte);HZe=r(CHr,"model_type"),CHr.forEach(t),UZe=r(jw,` property of the config object (either
passed as an argument or loaded from `),Ote=n(jw,"CODE",{});var wHr=s(Ote);JZe=r(wHr,"pretrained_model_name_or_path"),wHr.forEach(t),YZe=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(jw,"CODE",{});var AHr=s(Vte);KZe=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),ZZe=r(jw,":"),jw.forEach(t),eeo=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ux=s(Sn);Xte=n(Ux,"STRONG",{});var yHr=s(Xte);oeo=r(yHr,"albert"),yHr.forEach(t),reo=r(Ux," \u2014 "),cR=n(Ux,"A",{href:!0});var LHr=s(cR);teo=r(LHr,"AlbertTokenizer"),LHr.forEach(t),aeo=r(Ux," or "),fR=n(Ux,"A",{href:!0});var xHr=s(fR);neo=r(xHr,"AlbertTokenizerFast"),xHr.forEach(t),seo=r(Ux," (ALBERT model)"),Ux.forEach(t),leo=i(S),Rn=n(S,"LI",{});var Jx=s(Rn);zte=n(Jx,"STRONG",{});var $Hr=s(zte);ieo=r($Hr,"bart"),$Hr.forEach(t),deo=r(Jx," \u2014 "),mR=n(Jx,"A",{href:!0});var kHr=s(mR);ceo=r(kHr,"BartTokenizer"),kHr.forEach(t),feo=r(Jx," or "),gR=n(Jx,"A",{href:!0});var SHr=s(gR);meo=r(SHr,"BartTokenizerFast"),SHr.forEach(t),geo=r(Jx," (BART model)"),Jx.forEach(t),heo=i(S),Pn=n(S,"LI",{});var Yx=s(Pn);Wte=n(Yx,"STRONG",{});var RHr=s(Wte);peo=r(RHr,"barthez"),RHr.forEach(t),_eo=r(Yx," \u2014 "),hR=n(Yx,"A",{href:!0});var PHr=s(hR);ueo=r(PHr,"BarthezTokenizer"),PHr.forEach(t),beo=r(Yx," or "),pR=n(Yx,"A",{href:!0});var BHr=s(pR);veo=r(BHr,"BarthezTokenizerFast"),BHr.forEach(t),Feo=r(Yx," (BARThez model)"),Yx.forEach(t),Teo=i(S),Lg=n(S,"LI",{});var Gwe=s(Lg);Qte=n(Gwe,"STRONG",{});var IHr=s(Qte);Meo=r(IHr,"bartpho"),IHr.forEach(t),Eeo=r(Gwe," \u2014 "),_R=n(Gwe,"A",{href:!0});var NHr=s(_R);Ceo=r(NHr,"BartphoTokenizer"),NHr.forEach(t),weo=r(Gwe," (BARTpho model)"),Gwe.forEach(t),Aeo=i(S),Bn=n(S,"LI",{});var Kx=s(Bn);Hte=n(Kx,"STRONG",{});var qHr=s(Hte);yeo=r(qHr,"bert"),qHr.forEach(t),Leo=r(Kx," \u2014 "),uR=n(Kx,"A",{href:!0});var jHr=s(uR);xeo=r(jHr,"BertTokenizer"),jHr.forEach(t),$eo=r(Kx," or "),bR=n(Kx,"A",{href:!0});var DHr=s(bR);keo=r(DHr,"BertTokenizerFast"),DHr.forEach(t),Seo=r(Kx," (BERT model)"),Kx.forEach(t),Reo=i(S),xg=n(S,"LI",{});var Owe=s(xg);Ute=n(Owe,"STRONG",{});var GHr=s(Ute);Peo=r(GHr,"bert-generation"),GHr.forEach(t),Beo=r(Owe," \u2014 "),vR=n(Owe,"A",{href:!0});var OHr=s(vR);Ieo=r(OHr,"BertGenerationTokenizer"),OHr.forEach(t),Neo=r(Owe," (Bert Generation model)"),Owe.forEach(t),qeo=i(S),$g=n(S,"LI",{});var Vwe=s($g);Jte=n(Vwe,"STRONG",{});var VHr=s(Jte);jeo=r(VHr,"bert-japanese"),VHr.forEach(t),Deo=r(Vwe," \u2014 "),FR=n(Vwe,"A",{href:!0});var XHr=s(FR);Geo=r(XHr,"BertJapaneseTokenizer"),XHr.forEach(t),Oeo=r(Vwe," (BertJapanese model)"),Vwe.forEach(t),Veo=i(S),kg=n(S,"LI",{});var Xwe=s(kg);Yte=n(Xwe,"STRONG",{});var zHr=s(Yte);Xeo=r(zHr,"bertweet"),zHr.forEach(t),zeo=r(Xwe," \u2014 "),TR=n(Xwe,"A",{href:!0});var WHr=s(TR);Weo=r(WHr,"BertweetTokenizer"),WHr.forEach(t),Qeo=r(Xwe," (Bertweet model)"),Xwe.forEach(t),Heo=i(S),In=n(S,"LI",{});var Zx=s(In);Kte=n(Zx,"STRONG",{});var QHr=s(Kte);Ueo=r(QHr,"big_bird"),QHr.forEach(t),Jeo=r(Zx," \u2014 "),MR=n(Zx,"A",{href:!0});var HHr=s(MR);Yeo=r(HHr,"BigBirdTokenizer"),HHr.forEach(t),Keo=r(Zx," or "),ER=n(Zx,"A",{href:!0});var UHr=s(ER);Zeo=r(UHr,"BigBirdTokenizerFast"),UHr.forEach(t),eoo=r(Zx," (BigBird model)"),Zx.forEach(t),ooo=i(S),Nn=n(S,"LI",{});var e$=s(Nn);Zte=n(e$,"STRONG",{});var JHr=s(Zte);roo=r(JHr,"bigbird_pegasus"),JHr.forEach(t),too=r(e$," \u2014 "),CR=n(e$,"A",{href:!0});var YHr=s(CR);aoo=r(YHr,"PegasusTokenizer"),YHr.forEach(t),noo=r(e$," or "),wR=n(e$,"A",{href:!0});var KHr=s(wR);soo=r(KHr,"PegasusTokenizerFast"),KHr.forEach(t),loo=r(e$," (BigBirdPegasus model)"),e$.forEach(t),ioo=i(S),qn=n(S,"LI",{});var o$=s(qn);eae=n(o$,"STRONG",{});var ZHr=s(eae);doo=r(ZHr,"blenderbot"),ZHr.forEach(t),coo=r(o$," \u2014 "),AR=n(o$,"A",{href:!0});var eUr=s(AR);foo=r(eUr,"BlenderbotTokenizer"),eUr.forEach(t),moo=r(o$," or "),yR=n(o$,"A",{href:!0});var oUr=s(yR);goo=r(oUr,"BlenderbotTokenizerFast"),oUr.forEach(t),hoo=r(o$," (Blenderbot model)"),o$.forEach(t),poo=i(S),Sg=n(S,"LI",{});var zwe=s(Sg);oae=n(zwe,"STRONG",{});var rUr=s(oae);_oo=r(rUr,"blenderbot-small"),rUr.forEach(t),uoo=r(zwe," \u2014 "),LR=n(zwe,"A",{href:!0});var tUr=s(LR);boo=r(tUr,"BlenderbotSmallTokenizer"),tUr.forEach(t),voo=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),Foo=i(S),Rg=n(S,"LI",{});var Wwe=s(Rg);rae=n(Wwe,"STRONG",{});var aUr=s(rae);Too=r(aUr,"byt5"),aUr.forEach(t),Moo=r(Wwe," \u2014 "),xR=n(Wwe,"A",{href:!0});var nUr=s(xR);Eoo=r(nUr,"ByT5Tokenizer"),nUr.forEach(t),Coo=r(Wwe," (ByT5 model)"),Wwe.forEach(t),woo=i(S),jn=n(S,"LI",{});var r$=s(jn);tae=n(r$,"STRONG",{});var sUr=s(tae);Aoo=r(sUr,"camembert"),sUr.forEach(t),yoo=r(r$," \u2014 "),$R=n(r$,"A",{href:!0});var lUr=s($R);Loo=r(lUr,"CamembertTokenizer"),lUr.forEach(t),xoo=r(r$," or "),kR=n(r$,"A",{href:!0});var iUr=s(kR);$oo=r(iUr,"CamembertTokenizerFast"),iUr.forEach(t),koo=r(r$," (CamemBERT model)"),r$.forEach(t),Soo=i(S),Pg=n(S,"LI",{});var Qwe=s(Pg);aae=n(Qwe,"STRONG",{});var dUr=s(aae);Roo=r(dUr,"canine"),dUr.forEach(t),Poo=r(Qwe," \u2014 "),SR=n(Qwe,"A",{href:!0});var cUr=s(SR);Boo=r(cUr,"CanineTokenizer"),cUr.forEach(t),Ioo=r(Qwe," (Canine model)"),Qwe.forEach(t),Noo=i(S),Dn=n(S,"LI",{});var t$=s(Dn);nae=n(t$,"STRONG",{});var fUr=s(nae);qoo=r(fUr,"clip"),fUr.forEach(t),joo=r(t$," \u2014 "),RR=n(t$,"A",{href:!0});var mUr=s(RR);Doo=r(mUr,"CLIPTokenizer"),mUr.forEach(t),Goo=r(t$," or "),PR=n(t$,"A",{href:!0});var gUr=s(PR);Ooo=r(gUr,"CLIPTokenizerFast"),gUr.forEach(t),Voo=r(t$," (CLIP model)"),t$.forEach(t),Xoo=i(S),Gn=n(S,"LI",{});var a$=s(Gn);sae=n(a$,"STRONG",{});var hUr=s(sae);zoo=r(hUr,"convbert"),hUr.forEach(t),Woo=r(a$," \u2014 "),BR=n(a$,"A",{href:!0});var pUr=s(BR);Qoo=r(pUr,"ConvBertTokenizer"),pUr.forEach(t),Hoo=r(a$," or "),IR=n(a$,"A",{href:!0});var _Ur=s(IR);Uoo=r(_Ur,"ConvBertTokenizerFast"),_Ur.forEach(t),Joo=r(a$," (ConvBERT model)"),a$.forEach(t),Yoo=i(S),On=n(S,"LI",{});var n$=s(On);lae=n(n$,"STRONG",{});var uUr=s(lae);Koo=r(uUr,"cpm"),uUr.forEach(t),Zoo=r(n$," \u2014 "),NR=n(n$,"A",{href:!0});var bUr=s(NR);ero=r(bUr,"CpmTokenizer"),bUr.forEach(t),oro=r(n$," or "),qR=n(n$,"A",{href:!0});var vUr=s(qR);rro=r(vUr,"CpmTokenizerFast"),vUr.forEach(t),tro=r(n$," (CPM model)"),n$.forEach(t),aro=i(S),Bg=n(S,"LI",{});var Hwe=s(Bg);iae=n(Hwe,"STRONG",{});var FUr=s(iae);nro=r(FUr,"ctrl"),FUr.forEach(t),sro=r(Hwe," \u2014 "),jR=n(Hwe,"A",{href:!0});var TUr=s(jR);lro=r(TUr,"CTRLTokenizer"),TUr.forEach(t),iro=r(Hwe," (CTRL model)"),Hwe.forEach(t),dro=i(S),Vn=n(S,"LI",{});var s$=s(Vn);dae=n(s$,"STRONG",{});var MUr=s(dae);cro=r(MUr,"data2vec-text"),MUr.forEach(t),fro=r(s$," \u2014 "),DR=n(s$,"A",{href:!0});var EUr=s(DR);mro=r(EUr,"RobertaTokenizer"),EUr.forEach(t),gro=r(s$," or "),GR=n(s$,"A",{href:!0});var CUr=s(GR);hro=r(CUr,"RobertaTokenizerFast"),CUr.forEach(t),pro=r(s$," (Data2VecText model)"),s$.forEach(t),_ro=i(S),Xn=n(S,"LI",{});var l$=s(Xn);cae=n(l$,"STRONG",{});var wUr=s(cae);uro=r(wUr,"deberta"),wUr.forEach(t),bro=r(l$," \u2014 "),OR=n(l$,"A",{href:!0});var AUr=s(OR);vro=r(AUr,"DebertaTokenizer"),AUr.forEach(t),Fro=r(l$," or "),VR=n(l$,"A",{href:!0});var yUr=s(VR);Tro=r(yUr,"DebertaTokenizerFast"),yUr.forEach(t),Mro=r(l$," (DeBERTa model)"),l$.forEach(t),Ero=i(S),zn=n(S,"LI",{});var i$=s(zn);fae=n(i$,"STRONG",{});var LUr=s(fae);Cro=r(LUr,"deberta-v2"),LUr.forEach(t),wro=r(i$," \u2014 "),XR=n(i$,"A",{href:!0});var xUr=s(XR);Aro=r(xUr,"DebertaV2Tokenizer"),xUr.forEach(t),yro=r(i$," or "),zR=n(i$,"A",{href:!0});var $Ur=s(zR);Lro=r($Ur,"DebertaV2TokenizerFast"),$Ur.forEach(t),xro=r(i$," (DeBERTa-v2 model)"),i$.forEach(t),$ro=i(S),Wn=n(S,"LI",{});var d$=s(Wn);mae=n(d$,"STRONG",{});var kUr=s(mae);kro=r(kUr,"distilbert"),kUr.forEach(t),Sro=r(d$," \u2014 "),WR=n(d$,"A",{href:!0});var SUr=s(WR);Rro=r(SUr,"DistilBertTokenizer"),SUr.forEach(t),Pro=r(d$," or "),QR=n(d$,"A",{href:!0});var RUr=s(QR);Bro=r(RUr,"DistilBertTokenizerFast"),RUr.forEach(t),Iro=r(d$," (DistilBERT model)"),d$.forEach(t),Nro=i(S),Qn=n(S,"LI",{});var c$=s(Qn);gae=n(c$,"STRONG",{});var PUr=s(gae);qro=r(PUr,"dpr"),PUr.forEach(t),jro=r(c$," \u2014 "),HR=n(c$,"A",{href:!0});var BUr=s(HR);Dro=r(BUr,"DPRQuestionEncoderTokenizer"),BUr.forEach(t),Gro=r(c$," or "),UR=n(c$,"A",{href:!0});var IUr=s(UR);Oro=r(IUr,"DPRQuestionEncoderTokenizerFast"),IUr.forEach(t),Vro=r(c$," (DPR model)"),c$.forEach(t),Xro=i(S),Hn=n(S,"LI",{});var f$=s(Hn);hae=n(f$,"STRONG",{});var NUr=s(hae);zro=r(NUr,"electra"),NUr.forEach(t),Wro=r(f$," \u2014 "),JR=n(f$,"A",{href:!0});var qUr=s(JR);Qro=r(qUr,"ElectraTokenizer"),qUr.forEach(t),Hro=r(f$," or "),YR=n(f$,"A",{href:!0});var jUr=s(YR);Uro=r(jUr,"ElectraTokenizerFast"),jUr.forEach(t),Jro=r(f$," (ELECTRA model)"),f$.forEach(t),Yro=i(S),Ig=n(S,"LI",{});var Uwe=s(Ig);pae=n(Uwe,"STRONG",{});var DUr=s(pae);Kro=r(DUr,"flaubert"),DUr.forEach(t),Zro=r(Uwe," \u2014 "),KR=n(Uwe,"A",{href:!0});var GUr=s(KR);eto=r(GUr,"FlaubertTokenizer"),GUr.forEach(t),oto=r(Uwe," (FlauBERT model)"),Uwe.forEach(t),rto=i(S),Un=n(S,"LI",{});var m$=s(Un);_ae=n(m$,"STRONG",{});var OUr=s(_ae);tto=r(OUr,"fnet"),OUr.forEach(t),ato=r(m$," \u2014 "),ZR=n(m$,"A",{href:!0});var VUr=s(ZR);nto=r(VUr,"FNetTokenizer"),VUr.forEach(t),sto=r(m$," or "),eP=n(m$,"A",{href:!0});var XUr=s(eP);lto=r(XUr,"FNetTokenizerFast"),XUr.forEach(t),ito=r(m$," (FNet model)"),m$.forEach(t),dto=i(S),Ng=n(S,"LI",{});var Jwe=s(Ng);uae=n(Jwe,"STRONG",{});var zUr=s(uae);cto=r(zUr,"fsmt"),zUr.forEach(t),fto=r(Jwe," \u2014 "),oP=n(Jwe,"A",{href:!0});var WUr=s(oP);mto=r(WUr,"FSMTTokenizer"),WUr.forEach(t),gto=r(Jwe," (FairSeq Machine-Translation model)"),Jwe.forEach(t),hto=i(S),Jn=n(S,"LI",{});var g$=s(Jn);bae=n(g$,"STRONG",{});var QUr=s(bae);pto=r(QUr,"funnel"),QUr.forEach(t),_to=r(g$," \u2014 "),rP=n(g$,"A",{href:!0});var HUr=s(rP);uto=r(HUr,"FunnelTokenizer"),HUr.forEach(t),bto=r(g$," or "),tP=n(g$,"A",{href:!0});var UUr=s(tP);vto=r(UUr,"FunnelTokenizerFast"),UUr.forEach(t),Fto=r(g$," (Funnel Transformer model)"),g$.forEach(t),Tto=i(S),Yn=n(S,"LI",{});var h$=s(Yn);vae=n(h$,"STRONG",{});var JUr=s(vae);Mto=r(JUr,"gpt2"),JUr.forEach(t),Eto=r(h$," \u2014 "),aP=n(h$,"A",{href:!0});var YUr=s(aP);Cto=r(YUr,"GPT2Tokenizer"),YUr.forEach(t),wto=r(h$," or "),nP=n(h$,"A",{href:!0});var KUr=s(nP);Ato=r(KUr,"GPT2TokenizerFast"),KUr.forEach(t),yto=r(h$," (OpenAI GPT-2 model)"),h$.forEach(t),Lto=i(S),Kn=n(S,"LI",{});var p$=s(Kn);Fae=n(p$,"STRONG",{});var ZUr=s(Fae);xto=r(ZUr,"gpt_neo"),ZUr.forEach(t),$to=r(p$," \u2014 "),sP=n(p$,"A",{href:!0});var eJr=s(sP);kto=r(eJr,"GPT2Tokenizer"),eJr.forEach(t),Sto=r(p$," or "),lP=n(p$,"A",{href:!0});var oJr=s(lP);Rto=r(oJr,"GPT2TokenizerFast"),oJr.forEach(t),Pto=r(p$," (GPT Neo model)"),p$.forEach(t),Bto=i(S),qg=n(S,"LI",{});var Ywe=s(qg);Tae=n(Ywe,"STRONG",{});var rJr=s(Tae);Ito=r(rJr,"gpt_neox"),rJr.forEach(t),Nto=r(Ywe," \u2014 "),iP=n(Ywe,"A",{href:!0});var tJr=s(iP);qto=r(tJr,"GPTNeoXTokenizerFast"),tJr.forEach(t),jto=r(Ywe," (GPT NeoX model)"),Ywe.forEach(t),Dto=i(S),Zn=n(S,"LI",{});var _$=s(Zn);Mae=n(_$,"STRONG",{});var aJr=s(Mae);Gto=r(aJr,"gptj"),aJr.forEach(t),Oto=r(_$," \u2014 "),dP=n(_$,"A",{href:!0});var nJr=s(dP);Vto=r(nJr,"GPT2Tokenizer"),nJr.forEach(t),Xto=r(_$," or "),cP=n(_$,"A",{href:!0});var sJr=s(cP);zto=r(sJr,"GPT2TokenizerFast"),sJr.forEach(t),Wto=r(_$," (GPT-J model)"),_$.forEach(t),Qto=i(S),es=n(S,"LI",{});var u$=s(es);Eae=n(u$,"STRONG",{});var lJr=s(Eae);Hto=r(lJr,"herbert"),lJr.forEach(t),Uto=r(u$," \u2014 "),fP=n(u$,"A",{href:!0});var iJr=s(fP);Jto=r(iJr,"HerbertTokenizer"),iJr.forEach(t),Yto=r(u$," or "),mP=n(u$,"A",{href:!0});var dJr=s(mP);Kto=r(dJr,"HerbertTokenizerFast"),dJr.forEach(t),Zto=r(u$," (HerBERT model)"),u$.forEach(t),eao=i(S),jg=n(S,"LI",{});var Kwe=s(jg);Cae=n(Kwe,"STRONG",{});var cJr=s(Cae);oao=r(cJr,"hubert"),cJr.forEach(t),rao=r(Kwe," \u2014 "),gP=n(Kwe,"A",{href:!0});var fJr=s(gP);tao=r(fJr,"Wav2Vec2CTCTokenizer"),fJr.forEach(t),aao=r(Kwe," (Hubert model)"),Kwe.forEach(t),nao=i(S),os=n(S,"LI",{});var b$=s(os);wae=n(b$,"STRONG",{});var mJr=s(wae);sao=r(mJr,"ibert"),mJr.forEach(t),lao=r(b$," \u2014 "),hP=n(b$,"A",{href:!0});var gJr=s(hP);iao=r(gJr,"RobertaTokenizer"),gJr.forEach(t),dao=r(b$," or "),pP=n(b$,"A",{href:!0});var hJr=s(pP);cao=r(hJr,"RobertaTokenizerFast"),hJr.forEach(t),fao=r(b$," (I-BERT model)"),b$.forEach(t),mao=i(S),rs=n(S,"LI",{});var v$=s(rs);Aae=n(v$,"STRONG",{});var pJr=s(Aae);gao=r(pJr,"layoutlm"),pJr.forEach(t),hao=r(v$," \u2014 "),_P=n(v$,"A",{href:!0});var _Jr=s(_P);pao=r(_Jr,"LayoutLMTokenizer"),_Jr.forEach(t),_ao=r(v$," or "),uP=n(v$,"A",{href:!0});var uJr=s(uP);uao=r(uJr,"LayoutLMTokenizerFast"),uJr.forEach(t),bao=r(v$," (LayoutLM model)"),v$.forEach(t),vao=i(S),ts=n(S,"LI",{});var F$=s(ts);yae=n(F$,"STRONG",{});var bJr=s(yae);Fao=r(bJr,"layoutlmv2"),bJr.forEach(t),Tao=r(F$," \u2014 "),bP=n(F$,"A",{href:!0});var vJr=s(bP);Mao=r(vJr,"LayoutLMv2Tokenizer"),vJr.forEach(t),Eao=r(F$," or "),vP=n(F$,"A",{href:!0});var FJr=s(vP);Cao=r(FJr,"LayoutLMv2TokenizerFast"),FJr.forEach(t),wao=r(F$," (LayoutLMv2 model)"),F$.forEach(t),Aao=i(S),as=n(S,"LI",{});var T$=s(as);Lae=n(T$,"STRONG",{});var TJr=s(Lae);yao=r(TJr,"layoutlmv3"),TJr.forEach(t),Lao=r(T$," \u2014 "),FP=n(T$,"A",{href:!0});var MJr=s(FP);xao=r(MJr,"LayoutLMv3Tokenizer"),MJr.forEach(t),$ao=r(T$," or "),TP=n(T$,"A",{href:!0});var EJr=s(TP);kao=r(EJr,"LayoutLMv3TokenizerFast"),EJr.forEach(t),Sao=r(T$," (LayoutLMv3 model)"),T$.forEach(t),Rao=i(S),ns=n(S,"LI",{});var M$=s(ns);xae=n(M$,"STRONG",{});var CJr=s(xae);Pao=r(CJr,"layoutxlm"),CJr.forEach(t),Bao=r(M$," \u2014 "),MP=n(M$,"A",{href:!0});var wJr=s(MP);Iao=r(wJr,"LayoutXLMTokenizer"),wJr.forEach(t),Nao=r(M$," or "),EP=n(M$,"A",{href:!0});var AJr=s(EP);qao=r(AJr,"LayoutXLMTokenizerFast"),AJr.forEach(t),jao=r(M$," (LayoutXLM model)"),M$.forEach(t),Dao=i(S),ss=n(S,"LI",{});var E$=s(ss);$ae=n(E$,"STRONG",{});var yJr=s($ae);Gao=r(yJr,"led"),yJr.forEach(t),Oao=r(E$," \u2014 "),CP=n(E$,"A",{href:!0});var LJr=s(CP);Vao=r(LJr,"LEDTokenizer"),LJr.forEach(t),Xao=r(E$," or "),wP=n(E$,"A",{href:!0});var xJr=s(wP);zao=r(xJr,"LEDTokenizerFast"),xJr.forEach(t),Wao=r(E$," (LED model)"),E$.forEach(t),Qao=i(S),ls=n(S,"LI",{});var C$=s(ls);kae=n(C$,"STRONG",{});var $Jr=s(kae);Hao=r($Jr,"longformer"),$Jr.forEach(t),Uao=r(C$," \u2014 "),AP=n(C$,"A",{href:!0});var kJr=s(AP);Jao=r(kJr,"LongformerTokenizer"),kJr.forEach(t),Yao=r(C$," or "),yP=n(C$,"A",{href:!0});var SJr=s(yP);Kao=r(SJr,"LongformerTokenizerFast"),SJr.forEach(t),Zao=r(C$," (Longformer model)"),C$.forEach(t),eno=i(S),Dg=n(S,"LI",{});var Zwe=s(Dg);Sae=n(Zwe,"STRONG",{});var RJr=s(Sae);ono=r(RJr,"luke"),RJr.forEach(t),rno=r(Zwe," \u2014 "),LP=n(Zwe,"A",{href:!0});var PJr=s(LP);tno=r(PJr,"LukeTokenizer"),PJr.forEach(t),ano=r(Zwe," (LUKE model)"),Zwe.forEach(t),nno=i(S),is=n(S,"LI",{});var w$=s(is);Rae=n(w$,"STRONG",{});var BJr=s(Rae);sno=r(BJr,"lxmert"),BJr.forEach(t),lno=r(w$," \u2014 "),xP=n(w$,"A",{href:!0});var IJr=s(xP);ino=r(IJr,"LxmertTokenizer"),IJr.forEach(t),dno=r(w$," or "),$P=n(w$,"A",{href:!0});var NJr=s($P);cno=r(NJr,"LxmertTokenizerFast"),NJr.forEach(t),fno=r(w$," (LXMERT model)"),w$.forEach(t),mno=i(S),Gg=n(S,"LI",{});var e6e=s(Gg);Pae=n(e6e,"STRONG",{});var qJr=s(Pae);gno=r(qJr,"m2m_100"),qJr.forEach(t),hno=r(e6e," \u2014 "),kP=n(e6e,"A",{href:!0});var jJr=s(kP);pno=r(jJr,"M2M100Tokenizer"),jJr.forEach(t),_no=r(e6e," (M2M100 model)"),e6e.forEach(t),uno=i(S),Og=n(S,"LI",{});var o6e=s(Og);Bae=n(o6e,"STRONG",{});var DJr=s(Bae);bno=r(DJr,"marian"),DJr.forEach(t),vno=r(o6e," \u2014 "),SP=n(o6e,"A",{href:!0});var GJr=s(SP);Fno=r(GJr,"MarianTokenizer"),GJr.forEach(t),Tno=r(o6e," (Marian model)"),o6e.forEach(t),Mno=i(S),ds=n(S,"LI",{});var A$=s(ds);Iae=n(A$,"STRONG",{});var OJr=s(Iae);Eno=r(OJr,"mbart"),OJr.forEach(t),Cno=r(A$," \u2014 "),RP=n(A$,"A",{href:!0});var VJr=s(RP);wno=r(VJr,"MBartTokenizer"),VJr.forEach(t),Ano=r(A$," or "),PP=n(A$,"A",{href:!0});var XJr=s(PP);yno=r(XJr,"MBartTokenizerFast"),XJr.forEach(t),Lno=r(A$," (mBART model)"),A$.forEach(t),xno=i(S),cs=n(S,"LI",{});var y$=s(cs);Nae=n(y$,"STRONG",{});var zJr=s(Nae);$no=r(zJr,"mbart50"),zJr.forEach(t),kno=r(y$," \u2014 "),BP=n(y$,"A",{href:!0});var WJr=s(BP);Sno=r(WJr,"MBart50Tokenizer"),WJr.forEach(t),Rno=r(y$," or "),IP=n(y$,"A",{href:!0});var QJr=s(IP);Pno=r(QJr,"MBart50TokenizerFast"),QJr.forEach(t),Bno=r(y$," (mBART-50 model)"),y$.forEach(t),Ino=i(S),fs=n(S,"LI",{});var L$=s(fs);qae=n(L$,"STRONG",{});var HJr=s(qae);Nno=r(HJr,"megatron-bert"),HJr.forEach(t),qno=r(L$," \u2014 "),NP=n(L$,"A",{href:!0});var UJr=s(NP);jno=r(UJr,"BertTokenizer"),UJr.forEach(t),Dno=r(L$," or "),qP=n(L$,"A",{href:!0});var JJr=s(qP);Gno=r(JJr,"BertTokenizerFast"),JJr.forEach(t),Ono=r(L$," (MegatronBert model)"),L$.forEach(t),Vno=i(S),Vg=n(S,"LI",{});var r6e=s(Vg);jae=n(r6e,"STRONG",{});var YJr=s(jae);Xno=r(YJr,"mluke"),YJr.forEach(t),zno=r(r6e," \u2014 "),jP=n(r6e,"A",{href:!0});var KJr=s(jP);Wno=r(KJr,"MLukeTokenizer"),KJr.forEach(t),Qno=r(r6e," (mLUKE model)"),r6e.forEach(t),Hno=i(S),ms=n(S,"LI",{});var x$=s(ms);Dae=n(x$,"STRONG",{});var ZJr=s(Dae);Uno=r(ZJr,"mobilebert"),ZJr.forEach(t),Jno=r(x$," \u2014 "),DP=n(x$,"A",{href:!0});var eYr=s(DP);Yno=r(eYr,"MobileBertTokenizer"),eYr.forEach(t),Kno=r(x$," or "),GP=n(x$,"A",{href:!0});var oYr=s(GP);Zno=r(oYr,"MobileBertTokenizerFast"),oYr.forEach(t),eso=r(x$," (MobileBERT model)"),x$.forEach(t),oso=i(S),gs=n(S,"LI",{});var $$=s(gs);Gae=n($$,"STRONG",{});var rYr=s(Gae);rso=r(rYr,"mpnet"),rYr.forEach(t),tso=r($$," \u2014 "),OP=n($$,"A",{href:!0});var tYr=s(OP);aso=r(tYr,"MPNetTokenizer"),tYr.forEach(t),nso=r($$," or "),VP=n($$,"A",{href:!0});var aYr=s(VP);sso=r(aYr,"MPNetTokenizerFast"),aYr.forEach(t),lso=r($$," (MPNet model)"),$$.forEach(t),iso=i(S),hs=n(S,"LI",{});var k$=s(hs);Oae=n(k$,"STRONG",{});var nYr=s(Oae);dso=r(nYr,"mt5"),nYr.forEach(t),cso=r(k$," \u2014 "),XP=n(k$,"A",{href:!0});var sYr=s(XP);fso=r(sYr,"MT5Tokenizer"),sYr.forEach(t),mso=r(k$," or "),zP=n(k$,"A",{href:!0});var lYr=s(zP);gso=r(lYr,"MT5TokenizerFast"),lYr.forEach(t),hso=r(k$," (mT5 model)"),k$.forEach(t),pso=i(S),ps=n(S,"LI",{});var S$=s(ps);Vae=n(S$,"STRONG",{});var iYr=s(Vae);_so=r(iYr,"nystromformer"),iYr.forEach(t),uso=r(S$," \u2014 "),WP=n(S$,"A",{href:!0});var dYr=s(WP);bso=r(dYr,"AlbertTokenizer"),dYr.forEach(t),vso=r(S$," or "),QP=n(S$,"A",{href:!0});var cYr=s(QP);Fso=r(cYr,"AlbertTokenizerFast"),cYr.forEach(t),Tso=r(S$," (Nystromformer model)"),S$.forEach(t),Mso=i(S),_s=n(S,"LI",{});var R$=s(_s);Xae=n(R$,"STRONG",{});var fYr=s(Xae);Eso=r(fYr,"openai-gpt"),fYr.forEach(t),Cso=r(R$," \u2014 "),HP=n(R$,"A",{href:!0});var mYr=s(HP);wso=r(mYr,"OpenAIGPTTokenizer"),mYr.forEach(t),Aso=r(R$," or "),UP=n(R$,"A",{href:!0});var gYr=s(UP);yso=r(gYr,"OpenAIGPTTokenizerFast"),gYr.forEach(t),Lso=r(R$," (OpenAI GPT model)"),R$.forEach(t),xso=i(S),Xg=n(S,"LI",{});var t6e=s(Xg);zae=n(t6e,"STRONG",{});var hYr=s(zae);$so=r(hYr,"opt"),hYr.forEach(t),kso=r(t6e," \u2014 "),JP=n(t6e,"A",{href:!0});var pYr=s(JP);Sso=r(pYr,"GPT2Tokenizer"),pYr.forEach(t),Rso=r(t6e," (OPT model)"),t6e.forEach(t),Pso=i(S),us=n(S,"LI",{});var P$=s(us);Wae=n(P$,"STRONG",{});var _Yr=s(Wae);Bso=r(_Yr,"pegasus"),_Yr.forEach(t),Iso=r(P$," \u2014 "),YP=n(P$,"A",{href:!0});var uYr=s(YP);Nso=r(uYr,"PegasusTokenizer"),uYr.forEach(t),qso=r(P$," or "),KP=n(P$,"A",{href:!0});var bYr=s(KP);jso=r(bYr,"PegasusTokenizerFast"),bYr.forEach(t),Dso=r(P$," (Pegasus model)"),P$.forEach(t),Gso=i(S),zg=n(S,"LI",{});var a6e=s(zg);Qae=n(a6e,"STRONG",{});var vYr=s(Qae);Oso=r(vYr,"perceiver"),vYr.forEach(t),Vso=r(a6e," \u2014 "),ZP=n(a6e,"A",{href:!0});var FYr=s(ZP);Xso=r(FYr,"PerceiverTokenizer"),FYr.forEach(t),zso=r(a6e," (Perceiver model)"),a6e.forEach(t),Wso=i(S),Wg=n(S,"LI",{});var n6e=s(Wg);Hae=n(n6e,"STRONG",{});var TYr=s(Hae);Qso=r(TYr,"phobert"),TYr.forEach(t),Hso=r(n6e," \u2014 "),eB=n(n6e,"A",{href:!0});var MYr=s(eB);Uso=r(MYr,"PhobertTokenizer"),MYr.forEach(t),Jso=r(n6e," (PhoBERT model)"),n6e.forEach(t),Yso=i(S),Qg=n(S,"LI",{});var s6e=s(Qg);Uae=n(s6e,"STRONG",{});var EYr=s(Uae);Kso=r(EYr,"plbart"),EYr.forEach(t),Zso=r(s6e," \u2014 "),oB=n(s6e,"A",{href:!0});var CYr=s(oB);elo=r(CYr,"PLBartTokenizer"),CYr.forEach(t),olo=r(s6e," (PLBart model)"),s6e.forEach(t),rlo=i(S),Hg=n(S,"LI",{});var l6e=s(Hg);Jae=n(l6e,"STRONG",{});var wYr=s(Jae);tlo=r(wYr,"prophetnet"),wYr.forEach(t),alo=r(l6e," \u2014 "),rB=n(l6e,"A",{href:!0});var AYr=s(rB);nlo=r(AYr,"ProphetNetTokenizer"),AYr.forEach(t),slo=r(l6e," (ProphetNet model)"),l6e.forEach(t),llo=i(S),bs=n(S,"LI",{});var B$=s(bs);Yae=n(B$,"STRONG",{});var yYr=s(Yae);ilo=r(yYr,"qdqbert"),yYr.forEach(t),dlo=r(B$," \u2014 "),tB=n(B$,"A",{href:!0});var LYr=s(tB);clo=r(LYr,"BertTokenizer"),LYr.forEach(t),flo=r(B$," or "),aB=n(B$,"A",{href:!0});var xYr=s(aB);mlo=r(xYr,"BertTokenizerFast"),xYr.forEach(t),glo=r(B$," (QDQBert model)"),B$.forEach(t),hlo=i(S),Ug=n(S,"LI",{});var i6e=s(Ug);Kae=n(i6e,"STRONG",{});var $Yr=s(Kae);plo=r($Yr,"rag"),$Yr.forEach(t),_lo=r(i6e," \u2014 "),nB=n(i6e,"A",{href:!0});var kYr=s(nB);ulo=r(kYr,"RagTokenizer"),kYr.forEach(t),blo=r(i6e," (RAG model)"),i6e.forEach(t),vlo=i(S),vs=n(S,"LI",{});var I$=s(vs);Zae=n(I$,"STRONG",{});var SYr=s(Zae);Flo=r(SYr,"realm"),SYr.forEach(t),Tlo=r(I$," \u2014 "),sB=n(I$,"A",{href:!0});var RYr=s(sB);Mlo=r(RYr,"RealmTokenizer"),RYr.forEach(t),Elo=r(I$," or "),lB=n(I$,"A",{href:!0});var PYr=s(lB);Clo=r(PYr,"RealmTokenizerFast"),PYr.forEach(t),wlo=r(I$," (Realm model)"),I$.forEach(t),Alo=i(S),Fs=n(S,"LI",{});var N$=s(Fs);ene=n(N$,"STRONG",{});var BYr=s(ene);ylo=r(BYr,"reformer"),BYr.forEach(t),Llo=r(N$," \u2014 "),iB=n(N$,"A",{href:!0});var IYr=s(iB);xlo=r(IYr,"ReformerTokenizer"),IYr.forEach(t),$lo=r(N$," or "),dB=n(N$,"A",{href:!0});var NYr=s(dB);klo=r(NYr,"ReformerTokenizerFast"),NYr.forEach(t),Slo=r(N$," (Reformer model)"),N$.forEach(t),Rlo=i(S),Ts=n(S,"LI",{});var q$=s(Ts);one=n(q$,"STRONG",{});var qYr=s(one);Plo=r(qYr,"rembert"),qYr.forEach(t),Blo=r(q$," \u2014 "),cB=n(q$,"A",{href:!0});var jYr=s(cB);Ilo=r(jYr,"RemBertTokenizer"),jYr.forEach(t),Nlo=r(q$," or "),fB=n(q$,"A",{href:!0});var DYr=s(fB);qlo=r(DYr,"RemBertTokenizerFast"),DYr.forEach(t),jlo=r(q$," (RemBERT model)"),q$.forEach(t),Dlo=i(S),Ms=n(S,"LI",{});var j$=s(Ms);rne=n(j$,"STRONG",{});var GYr=s(rne);Glo=r(GYr,"retribert"),GYr.forEach(t),Olo=r(j$," \u2014 "),mB=n(j$,"A",{href:!0});var OYr=s(mB);Vlo=r(OYr,"RetriBertTokenizer"),OYr.forEach(t),Xlo=r(j$," or "),gB=n(j$,"A",{href:!0});var VYr=s(gB);zlo=r(VYr,"RetriBertTokenizerFast"),VYr.forEach(t),Wlo=r(j$," (RetriBERT model)"),j$.forEach(t),Qlo=i(S),Es=n(S,"LI",{});var D$=s(Es);tne=n(D$,"STRONG",{});var XYr=s(tne);Hlo=r(XYr,"roberta"),XYr.forEach(t),Ulo=r(D$," \u2014 "),hB=n(D$,"A",{href:!0});var zYr=s(hB);Jlo=r(zYr,"RobertaTokenizer"),zYr.forEach(t),Ylo=r(D$," or "),pB=n(D$,"A",{href:!0});var WYr=s(pB);Klo=r(WYr,"RobertaTokenizerFast"),WYr.forEach(t),Zlo=r(D$," (RoBERTa model)"),D$.forEach(t),eio=i(S),Cs=n(S,"LI",{});var G$=s(Cs);ane=n(G$,"STRONG",{});var QYr=s(ane);oio=r(QYr,"roformer"),QYr.forEach(t),rio=r(G$," \u2014 "),_B=n(G$,"A",{href:!0});var HYr=s(_B);tio=r(HYr,"RoFormerTokenizer"),HYr.forEach(t),aio=r(G$," or "),uB=n(G$,"A",{href:!0});var UYr=s(uB);nio=r(UYr,"RoFormerTokenizerFast"),UYr.forEach(t),sio=r(G$," (RoFormer model)"),G$.forEach(t),lio=i(S),Jg=n(S,"LI",{});var d6e=s(Jg);nne=n(d6e,"STRONG",{});var JYr=s(nne);iio=r(JYr,"speech_to_text"),JYr.forEach(t),dio=r(d6e," \u2014 "),bB=n(d6e,"A",{href:!0});var YYr=s(bB);cio=r(YYr,"Speech2TextTokenizer"),YYr.forEach(t),fio=r(d6e," (Speech2Text model)"),d6e.forEach(t),mio=i(S),Yg=n(S,"LI",{});var c6e=s(Yg);sne=n(c6e,"STRONG",{});var KYr=s(sne);gio=r(KYr,"speech_to_text_2"),KYr.forEach(t),hio=r(c6e," \u2014 "),vB=n(c6e,"A",{href:!0});var ZYr=s(vB);pio=r(ZYr,"Speech2Text2Tokenizer"),ZYr.forEach(t),_io=r(c6e," (Speech2Text2 model)"),c6e.forEach(t),uio=i(S),ws=n(S,"LI",{});var O$=s(ws);lne=n(O$,"STRONG",{});var eKr=s(lne);bio=r(eKr,"splinter"),eKr.forEach(t),vio=r(O$," \u2014 "),FB=n(O$,"A",{href:!0});var oKr=s(FB);Fio=r(oKr,"SplinterTokenizer"),oKr.forEach(t),Tio=r(O$," or "),TB=n(O$,"A",{href:!0});var rKr=s(TB);Mio=r(rKr,"SplinterTokenizerFast"),rKr.forEach(t),Eio=r(O$," (Splinter model)"),O$.forEach(t),Cio=i(S),As=n(S,"LI",{});var V$=s(As);ine=n(V$,"STRONG",{});var tKr=s(ine);wio=r(tKr,"squeezebert"),tKr.forEach(t),Aio=r(V$," \u2014 "),MB=n(V$,"A",{href:!0});var aKr=s(MB);yio=r(aKr,"SqueezeBertTokenizer"),aKr.forEach(t),Lio=r(V$," or "),EB=n(V$,"A",{href:!0});var nKr=s(EB);xio=r(nKr,"SqueezeBertTokenizerFast"),nKr.forEach(t),$io=r(V$," (SqueezeBERT model)"),V$.forEach(t),kio=i(S),ys=n(S,"LI",{});var X$=s(ys);dne=n(X$,"STRONG",{});var sKr=s(dne);Sio=r(sKr,"t5"),sKr.forEach(t),Rio=r(X$," \u2014 "),CB=n(X$,"A",{href:!0});var lKr=s(CB);Pio=r(lKr,"T5Tokenizer"),lKr.forEach(t),Bio=r(X$," or "),wB=n(X$,"A",{href:!0});var iKr=s(wB);Iio=r(iKr,"T5TokenizerFast"),iKr.forEach(t),Nio=r(X$," (T5 model)"),X$.forEach(t),qio=i(S),Kg=n(S,"LI",{});var f6e=s(Kg);cne=n(f6e,"STRONG",{});var dKr=s(cne);jio=r(dKr,"tapas"),dKr.forEach(t),Dio=r(f6e," \u2014 "),AB=n(f6e,"A",{href:!0});var cKr=s(AB);Gio=r(cKr,"TapasTokenizer"),cKr.forEach(t),Oio=r(f6e," (TAPAS model)"),f6e.forEach(t),Vio=i(S),Zg=n(S,"LI",{});var m6e=s(Zg);fne=n(m6e,"STRONG",{});var fKr=s(fne);Xio=r(fKr,"tapex"),fKr.forEach(t),zio=r(m6e," \u2014 "),yB=n(m6e,"A",{href:!0});var mKr=s(yB);Wio=r(mKr,"TapexTokenizer"),mKr.forEach(t),Qio=r(m6e," (TAPEX model)"),m6e.forEach(t),Hio=i(S),eh=n(S,"LI",{});var g6e=s(eh);mne=n(g6e,"STRONG",{});var gKr=s(mne);Uio=r(gKr,"transfo-xl"),gKr.forEach(t),Jio=r(g6e," \u2014 "),LB=n(g6e,"A",{href:!0});var hKr=s(LB);Yio=r(hKr,"TransfoXLTokenizer"),hKr.forEach(t),Kio=r(g6e," (Transformer-XL model)"),g6e.forEach(t),Zio=i(S),Ls=n(S,"LI",{});var z$=s(Ls);gne=n(z$,"STRONG",{});var pKr=s(gne);edo=r(pKr,"visual_bert"),pKr.forEach(t),odo=r(z$," \u2014 "),xB=n(z$,"A",{href:!0});var _Kr=s(xB);rdo=r(_Kr,"BertTokenizer"),_Kr.forEach(t),tdo=r(z$," or "),$B=n(z$,"A",{href:!0});var uKr=s($B);ado=r(uKr,"BertTokenizerFast"),uKr.forEach(t),ndo=r(z$," (VisualBert model)"),z$.forEach(t),sdo=i(S),oh=n(S,"LI",{});var h6e=s(oh);hne=n(h6e,"STRONG",{});var bKr=s(hne);ldo=r(bKr,"wav2vec2"),bKr.forEach(t),ido=r(h6e," \u2014 "),kB=n(h6e,"A",{href:!0});var vKr=s(kB);ddo=r(vKr,"Wav2Vec2CTCTokenizer"),vKr.forEach(t),cdo=r(h6e," (Wav2Vec2 model)"),h6e.forEach(t),fdo=i(S),rh=n(S,"LI",{});var p6e=s(rh);pne=n(p6e,"STRONG",{});var FKr=s(pne);mdo=r(FKr,"wav2vec2-conformer"),FKr.forEach(t),gdo=r(p6e," \u2014 "),SB=n(p6e,"A",{href:!0});var TKr=s(SB);hdo=r(TKr,"Wav2Vec2CTCTokenizer"),TKr.forEach(t),pdo=r(p6e," (Wav2Vec2-Conformer model)"),p6e.forEach(t),_do=i(S),th=n(S,"LI",{});var _6e=s(th);_ne=n(_6e,"STRONG",{});var MKr=s(_ne);udo=r(MKr,"wav2vec2_phoneme"),MKr.forEach(t),bdo=r(_6e," \u2014 "),RB=n(_6e,"A",{href:!0});var EKr=s(RB);vdo=r(EKr,"Wav2Vec2PhonemeCTCTokenizer"),EKr.forEach(t),Fdo=r(_6e," (Wav2Vec2Phoneme model)"),_6e.forEach(t),Tdo=i(S),xs=n(S,"LI",{});var W$=s(xs);une=n(W$,"STRONG",{});var CKr=s(une);Mdo=r(CKr,"xglm"),CKr.forEach(t),Edo=r(W$," \u2014 "),PB=n(W$,"A",{href:!0});var wKr=s(PB);Cdo=r(wKr,"XGLMTokenizer"),wKr.forEach(t),wdo=r(W$," or "),BB=n(W$,"A",{href:!0});var AKr=s(BB);Ado=r(AKr,"XGLMTokenizerFast"),AKr.forEach(t),ydo=r(W$," (XGLM model)"),W$.forEach(t),Ldo=i(S),ah=n(S,"LI",{});var u6e=s(ah);bne=n(u6e,"STRONG",{});var yKr=s(bne);xdo=r(yKr,"xlm"),yKr.forEach(t),$do=r(u6e," \u2014 "),IB=n(u6e,"A",{href:!0});var LKr=s(IB);kdo=r(LKr,"XLMTokenizer"),LKr.forEach(t),Sdo=r(u6e," (XLM model)"),u6e.forEach(t),Rdo=i(S),nh=n(S,"LI",{});var b6e=s(nh);vne=n(b6e,"STRONG",{});var xKr=s(vne);Pdo=r(xKr,"xlm-prophetnet"),xKr.forEach(t),Bdo=r(b6e," \u2014 "),NB=n(b6e,"A",{href:!0});var $Kr=s(NB);Ido=r($Kr,"XLMProphetNetTokenizer"),$Kr.forEach(t),Ndo=r(b6e," (XLMProphetNet model)"),b6e.forEach(t),qdo=i(S),$s=n(S,"LI",{});var Q$=s($s);Fne=n(Q$,"STRONG",{});var kKr=s(Fne);jdo=r(kKr,"xlm-roberta"),kKr.forEach(t),Ddo=r(Q$," \u2014 "),qB=n(Q$,"A",{href:!0});var SKr=s(qB);Gdo=r(SKr,"XLMRobertaTokenizer"),SKr.forEach(t),Odo=r(Q$," or "),jB=n(Q$,"A",{href:!0});var RKr=s(jB);Vdo=r(RKr,"XLMRobertaTokenizerFast"),RKr.forEach(t),Xdo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),zdo=i(S),ks=n(S,"LI",{});var H$=s(ks);Tne=n(H$,"STRONG",{});var PKr=s(Tne);Wdo=r(PKr,"xlm-roberta-xl"),PKr.forEach(t),Qdo=r(H$," \u2014 "),DB=n(H$,"A",{href:!0});var BKr=s(DB);Hdo=r(BKr,"RobertaTokenizer"),BKr.forEach(t),Udo=r(H$," or "),GB=n(H$,"A",{href:!0});var IKr=s(GB);Jdo=r(IKr,"RobertaTokenizerFast"),IKr.forEach(t),Ydo=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),Kdo=i(S),Ss=n(S,"LI",{});var U$=s(Ss);Mne=n(U$,"STRONG",{});var NKr=s(Mne);Zdo=r(NKr,"xlnet"),NKr.forEach(t),eco=r(U$," \u2014 "),OB=n(U$,"A",{href:!0});var qKr=s(OB);oco=r(qKr,"XLNetTokenizer"),qKr.forEach(t),rco=r(U$," or "),VB=n(U$,"A",{href:!0});var jKr=s(VB);tco=r(jKr,"XLNetTokenizerFast"),jKr.forEach(t),aco=r(U$," (XLNet model)"),U$.forEach(t),nco=i(S),Rs=n(S,"LI",{});var J$=s(Rs);Ene=n(J$,"STRONG",{});var DKr=s(Ene);sco=r(DKr,"yoso"),DKr.forEach(t),lco=r(J$," \u2014 "),XB=n(J$,"A",{href:!0});var GKr=s(XB);ico=r(GKr,"AlbertTokenizer"),GKr.forEach(t),dco=r(J$," or "),zB=n(J$,"A",{href:!0});var OKr=s(zB);cco=r(OKr,"AlbertTokenizerFast"),OKr.forEach(t),fco=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),mco=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),gco=i(Ns),lh=n(Ns,"DIV",{class:!0});var ODe=s(lh);T(UA.$$.fragment,ODe),hco=i(ODe),Cne=n(ODe,"P",{});var VKr=s(Cne);pco=r(VKr,"Register a new tokenizer in this mapping."),VKr.forEach(t),ODe.forEach(t),Ns.forEach(t),Vqe=i(f),Ei=n(f,"H2",{class:!0});var VDe=s(Ei);ih=n(VDe,"A",{id:!0,class:!0,href:!0});var XKr=s(ih);wne=n(XKr,"SPAN",{});var zKr=s(wne);T(JA.$$.fragment,zKr),zKr.forEach(t),XKr.forEach(t),_co=i(VDe),Ane=n(VDe,"SPAN",{});var WKr=s(Ane);uco=r(WKr,"AutoFeatureExtractor"),WKr.forEach(t),VDe.forEach(t),Xqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(YA.$$.fragment,js),bco=i(js),KA=n(js,"P",{});var XDe=s(KA);vco=r(XDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=n(XDe,"A",{href:!0});var QKr=s(WB);Fco=r(QKr,"AutoFeatureExtractor.from_pretrained()"),QKr.forEach(t),Tco=r(XDe," class method."),XDe.forEach(t),Mco=i(js),ZA=n(js,"P",{});var zDe=s(ZA);Eco=r(zDe,"This class cannot be instantiated directly using "),yne=n(zDe,"CODE",{});var HKr=s(yne);Cco=r(HKr,"__init__()"),HKr.forEach(t),wco=r(zDe," (throws an error)."),zDe.forEach(t),Aco=i(js),He=n(js,"DIV",{class:!0});var ea=s(He);T(ey.$$.fragment,ea),yco=i(ea),Lne=n(ea,"P",{});var UKr=s(Lne);Lco=r(UKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UKr.forEach(t),xco=i(ea),La=n(ea,"P",{});var Dw=s(La);$co=r(Dw,"The feature extractor class to instantiate is selected based on the "),xne=n(Dw,"CODE",{});var JKr=s(xne);kco=r(JKr,"model_type"),JKr.forEach(t),Sco=r(Dw,` property of the config object
(either passed as an argument or loaded from `),$ne=n(Dw,"CODE",{});var YKr=s($ne);Rco=r(YKr,"pretrained_model_name_or_path"),YKr.forEach(t),Pco=r(Dw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kne=n(Dw,"CODE",{});var KKr=s(kne);Bco=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),Ico=r(Dw,":"),Dw.forEach(t),Nco=i(ea),Y=n(ea,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var v6e=s(dh);Sne=n(v6e,"STRONG",{});var ZKr=s(Sne);qco=r(ZKr,"beit"),ZKr.forEach(t),jco=r(v6e," \u2014 "),QB=n(v6e,"A",{href:!0});var eZr=s(QB);Dco=r(eZr,"BeitFeatureExtractor"),eZr.forEach(t),Gco=r(v6e," (BEiT model)"),v6e.forEach(t),Oco=i(Z),ch=n(Z,"LI",{});var F6e=s(ch);Rne=n(F6e,"STRONG",{});var oZr=s(Rne);Vco=r(oZr,"clip"),oZr.forEach(t),Xco=r(F6e," \u2014 "),HB=n(F6e,"A",{href:!0});var rZr=s(HB);zco=r(rZr,"CLIPFeatureExtractor"),rZr.forEach(t),Wco=r(F6e," (CLIP model)"),F6e.forEach(t),Qco=i(Z),fh=n(Z,"LI",{});var T6e=s(fh);Pne=n(T6e,"STRONG",{});var tZr=s(Pne);Hco=r(tZr,"convnext"),tZr.forEach(t),Uco=r(T6e," \u2014 "),UB=n(T6e,"A",{href:!0});var aZr=s(UB);Jco=r(aZr,"ConvNextFeatureExtractor"),aZr.forEach(t),Yco=r(T6e," (ConvNext model)"),T6e.forEach(t),Kco=i(Z),mh=n(Z,"LI",{});var M6e=s(mh);Bne=n(M6e,"STRONG",{});var nZr=s(Bne);Zco=r(nZr,"cvt"),nZr.forEach(t),efo=r(M6e," \u2014 "),JB=n(M6e,"A",{href:!0});var sZr=s(JB);ofo=r(sZr,"ConvNextFeatureExtractor"),sZr.forEach(t),rfo=r(M6e," (CvT model)"),M6e.forEach(t),tfo=i(Z),gh=n(Z,"LI",{});var E6e=s(gh);Ine=n(E6e,"STRONG",{});var lZr=s(Ine);afo=r(lZr,"data2vec-audio"),lZr.forEach(t),nfo=r(E6e," \u2014 "),YB=n(E6e,"A",{href:!0});var iZr=s(YB);sfo=r(iZr,"Wav2Vec2FeatureExtractor"),iZr.forEach(t),lfo=r(E6e," (Data2VecAudio model)"),E6e.forEach(t),ifo=i(Z),hh=n(Z,"LI",{});var C6e=s(hh);Nne=n(C6e,"STRONG",{});var dZr=s(Nne);dfo=r(dZr,"data2vec-vision"),dZr.forEach(t),cfo=r(C6e," \u2014 "),KB=n(C6e,"A",{href:!0});var cZr=s(KB);ffo=r(cZr,"BeitFeatureExtractor"),cZr.forEach(t),mfo=r(C6e," (Data2VecVision model)"),C6e.forEach(t),gfo=i(Z),ph=n(Z,"LI",{});var w6e=s(ph);qne=n(w6e,"STRONG",{});var fZr=s(qne);hfo=r(fZr,"deit"),fZr.forEach(t),pfo=r(w6e," \u2014 "),ZB=n(w6e,"A",{href:!0});var mZr=s(ZB);_fo=r(mZr,"DeiTFeatureExtractor"),mZr.forEach(t),ufo=r(w6e," (DeiT model)"),w6e.forEach(t),bfo=i(Z),_h=n(Z,"LI",{});var A6e=s(_h);jne=n(A6e,"STRONG",{});var gZr=s(jne);vfo=r(gZr,"detr"),gZr.forEach(t),Ffo=r(A6e," \u2014 "),eI=n(A6e,"A",{href:!0});var hZr=s(eI);Tfo=r(hZr,"DetrFeatureExtractor"),hZr.forEach(t),Mfo=r(A6e," (DETR model)"),A6e.forEach(t),Efo=i(Z),uh=n(Z,"LI",{});var y6e=s(uh);Dne=n(y6e,"STRONG",{});var pZr=s(Dne);Cfo=r(pZr,"dpt"),pZr.forEach(t),wfo=r(y6e," \u2014 "),oI=n(y6e,"A",{href:!0});var _Zr=s(oI);Afo=r(_Zr,"DPTFeatureExtractor"),_Zr.forEach(t),yfo=r(y6e," (DPT model)"),y6e.forEach(t),Lfo=i(Z),bh=n(Z,"LI",{});var L6e=s(bh);Gne=n(L6e,"STRONG",{});var uZr=s(Gne);xfo=r(uZr,"flava"),uZr.forEach(t),$fo=r(L6e," \u2014 "),rI=n(L6e,"A",{href:!0});var bZr=s(rI);kfo=r(bZr,"FlavaFeatureExtractor"),bZr.forEach(t),Sfo=r(L6e," (Flava model)"),L6e.forEach(t),Rfo=i(Z),vh=n(Z,"LI",{});var x6e=s(vh);One=n(x6e,"STRONG",{});var vZr=s(One);Pfo=r(vZr,"glpn"),vZr.forEach(t),Bfo=r(x6e," \u2014 "),tI=n(x6e,"A",{href:!0});var FZr=s(tI);Ifo=r(FZr,"GLPNFeatureExtractor"),FZr.forEach(t),Nfo=r(x6e," (GLPN model)"),x6e.forEach(t),qfo=i(Z),Fh=n(Z,"LI",{});var $6e=s(Fh);Vne=n($6e,"STRONG",{});var TZr=s(Vne);jfo=r(TZr,"hubert"),TZr.forEach(t),Dfo=r($6e," \u2014 "),aI=n($6e,"A",{href:!0});var MZr=s(aI);Gfo=r(MZr,"Wav2Vec2FeatureExtractor"),MZr.forEach(t),Ofo=r($6e," (Hubert model)"),$6e.forEach(t),Vfo=i(Z),Th=n(Z,"LI",{});var k6e=s(Th);Xne=n(k6e,"STRONG",{});var EZr=s(Xne);Xfo=r(EZr,"imagegpt"),EZr.forEach(t),zfo=r(k6e," \u2014 "),nI=n(k6e,"A",{href:!0});var CZr=s(nI);Wfo=r(CZr,"ImageGPTFeatureExtractor"),CZr.forEach(t),Qfo=r(k6e," (ImageGPT model)"),k6e.forEach(t),Hfo=i(Z),Mh=n(Z,"LI",{});var S6e=s(Mh);zne=n(S6e,"STRONG",{});var wZr=s(zne);Ufo=r(wZr,"layoutlmv2"),wZr.forEach(t),Jfo=r(S6e," \u2014 "),sI=n(S6e,"A",{href:!0});var AZr=s(sI);Yfo=r(AZr,"LayoutLMv2FeatureExtractor"),AZr.forEach(t),Kfo=r(S6e," (LayoutLMv2 model)"),S6e.forEach(t),Zfo=i(Z),Eh=n(Z,"LI",{});var R6e=s(Eh);Wne=n(R6e,"STRONG",{});var yZr=s(Wne);emo=r(yZr,"layoutlmv3"),yZr.forEach(t),omo=r(R6e," \u2014 "),lI=n(R6e,"A",{href:!0});var LZr=s(lI);rmo=r(LZr,"LayoutLMv3FeatureExtractor"),LZr.forEach(t),tmo=r(R6e," (LayoutLMv3 model)"),R6e.forEach(t),amo=i(Z),Ch=n(Z,"LI",{});var P6e=s(Ch);Qne=n(P6e,"STRONG",{});var xZr=s(Qne);nmo=r(xZr,"maskformer"),xZr.forEach(t),smo=r(P6e," \u2014 "),iI=n(P6e,"A",{href:!0});var $Zr=s(iI);lmo=r($Zr,"MaskFormerFeatureExtractor"),$Zr.forEach(t),imo=r(P6e," (MaskFormer model)"),P6e.forEach(t),dmo=i(Z),wh=n(Z,"LI",{});var B6e=s(wh);Hne=n(B6e,"STRONG",{});var kZr=s(Hne);cmo=r(kZr,"mobilevit"),kZr.forEach(t),fmo=r(B6e," \u2014 "),dI=n(B6e,"A",{href:!0});var SZr=s(dI);mmo=r(SZr,"MobileViTFeatureExtractor"),SZr.forEach(t),gmo=r(B6e," (MobileViT model)"),B6e.forEach(t),hmo=i(Z),Ah=n(Z,"LI",{});var I6e=s(Ah);Une=n(I6e,"STRONG",{});var RZr=s(Une);pmo=r(RZr,"perceiver"),RZr.forEach(t),_mo=r(I6e," \u2014 "),cI=n(I6e,"A",{href:!0});var PZr=s(cI);umo=r(PZr,"PerceiverFeatureExtractor"),PZr.forEach(t),bmo=r(I6e," (Perceiver model)"),I6e.forEach(t),vmo=i(Z),yh=n(Z,"LI",{});var N6e=s(yh);Jne=n(N6e,"STRONG",{});var BZr=s(Jne);Fmo=r(BZr,"poolformer"),BZr.forEach(t),Tmo=r(N6e," \u2014 "),fI=n(N6e,"A",{href:!0});var IZr=s(fI);Mmo=r(IZr,"PoolFormerFeatureExtractor"),IZr.forEach(t),Emo=r(N6e," (PoolFormer model)"),N6e.forEach(t),Cmo=i(Z),Lh=n(Z,"LI",{});var q6e=s(Lh);Yne=n(q6e,"STRONG",{});var NZr=s(Yne);wmo=r(NZr,"regnet"),NZr.forEach(t),Amo=r(q6e," \u2014 "),mI=n(q6e,"A",{href:!0});var qZr=s(mI);ymo=r(qZr,"ConvNextFeatureExtractor"),qZr.forEach(t),Lmo=r(q6e," (RegNet model)"),q6e.forEach(t),xmo=i(Z),xh=n(Z,"LI",{});var j6e=s(xh);Kne=n(j6e,"STRONG",{});var jZr=s(Kne);$mo=r(jZr,"resnet"),jZr.forEach(t),kmo=r(j6e," \u2014 "),gI=n(j6e,"A",{href:!0});var DZr=s(gI);Smo=r(DZr,"ConvNextFeatureExtractor"),DZr.forEach(t),Rmo=r(j6e," (ResNet model)"),j6e.forEach(t),Pmo=i(Z),$h=n(Z,"LI",{});var D6e=s($h);Zne=n(D6e,"STRONG",{});var GZr=s(Zne);Bmo=r(GZr,"segformer"),GZr.forEach(t),Imo=r(D6e," \u2014 "),hI=n(D6e,"A",{href:!0});var OZr=s(hI);Nmo=r(OZr,"SegformerFeatureExtractor"),OZr.forEach(t),qmo=r(D6e," (SegFormer model)"),D6e.forEach(t),jmo=i(Z),kh=n(Z,"LI",{});var G6e=s(kh);ese=n(G6e,"STRONG",{});var VZr=s(ese);Dmo=r(VZr,"speech_to_text"),VZr.forEach(t),Gmo=r(G6e," \u2014 "),pI=n(G6e,"A",{href:!0});var XZr=s(pI);Omo=r(XZr,"Speech2TextFeatureExtractor"),XZr.forEach(t),Vmo=r(G6e," (Speech2Text model)"),G6e.forEach(t),Xmo=i(Z),Sh=n(Z,"LI",{});var O6e=s(Sh);ose=n(O6e,"STRONG",{});var zZr=s(ose);zmo=r(zZr,"swin"),zZr.forEach(t),Wmo=r(O6e," \u2014 "),_I=n(O6e,"A",{href:!0});var WZr=s(_I);Qmo=r(WZr,"ViTFeatureExtractor"),WZr.forEach(t),Hmo=r(O6e," (Swin model)"),O6e.forEach(t),Umo=i(Z),Rh=n(Z,"LI",{});var V6e=s(Rh);rse=n(V6e,"STRONG",{});var QZr=s(rse);Jmo=r(QZr,"van"),QZr.forEach(t),Ymo=r(V6e," \u2014 "),uI=n(V6e,"A",{href:!0});var HZr=s(uI);Kmo=r(HZr,"ConvNextFeatureExtractor"),HZr.forEach(t),Zmo=r(V6e," (VAN model)"),V6e.forEach(t),ego=i(Z),Ph=n(Z,"LI",{});var X6e=s(Ph);tse=n(X6e,"STRONG",{});var UZr=s(tse);ogo=r(UZr,"vit"),UZr.forEach(t),rgo=r(X6e," \u2014 "),bI=n(X6e,"A",{href:!0});var JZr=s(bI);tgo=r(JZr,"ViTFeatureExtractor"),JZr.forEach(t),ago=r(X6e," (ViT model)"),X6e.forEach(t),ngo=i(Z),Bh=n(Z,"LI",{});var z6e=s(Bh);ase=n(z6e,"STRONG",{});var YZr=s(ase);sgo=r(YZr,"vit_mae"),YZr.forEach(t),lgo=r(z6e," \u2014 "),vI=n(z6e,"A",{href:!0});var KZr=s(vI);igo=r(KZr,"ViTFeatureExtractor"),KZr.forEach(t),dgo=r(z6e," (ViTMAE model)"),z6e.forEach(t),cgo=i(Z),Ih=n(Z,"LI",{});var W6e=s(Ih);nse=n(W6e,"STRONG",{});var ZZr=s(nse);fgo=r(ZZr,"wav2vec2"),ZZr.forEach(t),mgo=r(W6e," \u2014 "),FI=n(W6e,"A",{href:!0});var eet=s(FI);ggo=r(eet,"Wav2Vec2FeatureExtractor"),eet.forEach(t),hgo=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),pgo=i(Z),Nh=n(Z,"LI",{});var Q6e=s(Nh);sse=n(Q6e,"STRONG",{});var oet=s(sse);_go=r(oet,"wav2vec2-conformer"),oet.forEach(t),ugo=r(Q6e," \u2014 "),TI=n(Q6e,"A",{href:!0});var ret=s(TI);bgo=r(ret,"Wav2Vec2FeatureExtractor"),ret.forEach(t),vgo=r(Q6e," (Wav2Vec2-Conformer model)"),Q6e.forEach(t),Fgo=i(Z),qh=n(Z,"LI",{});var H6e=s(qh);lse=n(H6e,"STRONG",{});var tet=s(lse);Tgo=r(tet,"yolos"),tet.forEach(t),Mgo=r(H6e," \u2014 "),MI=n(H6e,"A",{href:!0});var aet=s(MI);Ego=r(aet,"YolosFeatureExtractor"),aet.forEach(t),Cgo=r(H6e," (YOLOS model)"),H6e.forEach(t),Z.forEach(t),wgo=i(ea),T(jh.$$.fragment,ea),Ago=i(ea),T(Dh.$$.fragment,ea),ea.forEach(t),ygo=i(js),Gh=n(js,"DIV",{class:!0});var WDe=s(Gh);T(oy.$$.fragment,WDe),Lgo=i(WDe),ise=n(WDe,"P",{});var net=s(ise);xgo=r(net,"Register a new feature extractor for this class."),net.forEach(t),WDe.forEach(t),js.forEach(t),zqe=i(f),Ci=n(f,"H2",{class:!0});var QDe=s(Ci);Oh=n(QDe,"A",{id:!0,class:!0,href:!0});var set=s(Oh);dse=n(set,"SPAN",{});var iet=s(dse);T(ry.$$.fragment,iet),iet.forEach(t),set.forEach(t),$go=i(QDe),cse=n(QDe,"SPAN",{});var det=s(cse);kgo=r(det,"AutoProcessor"),det.forEach(t),QDe.forEach(t),Wqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ty.$$.fragment,Ds),Sgo=i(Ds),ay=n(Ds,"P",{});var HDe=s(ay);Rgo=r(HDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=n(HDe,"A",{href:!0});var cet=s(EI);Pgo=r(cet,"AutoProcessor.from_pretrained()"),cet.forEach(t),Bgo=r(HDe," class method."),HDe.forEach(t),Igo=i(Ds),ny=n(Ds,"P",{});var UDe=s(ny);Ngo=r(UDe,"This class cannot be instantiated directly using "),fse=n(UDe,"CODE",{});var fet=s(fse);qgo=r(fet,"__init__()"),fet.forEach(t),jgo=r(UDe," (throws an error)."),UDe.forEach(t),Dgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var oa=s(Ue);T(sy.$$.fragment,oa),Ggo=i(oa),mse=n(oa,"P",{});var met=s(mse);Ogo=r(met,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),met.forEach(t),Vgo=i(oa),wi=n(oa,"P",{});var SZ=s(wi);Xgo=r(SZ,"The processor class to instantiate is selected based on the "),gse=n(SZ,"CODE",{});var get=s(gse);zgo=r(get,"model_type"),get.forEach(t),Wgo=r(SZ,` property of the config object (either
passed as an argument or loaded from `),hse=n(SZ,"CODE",{});var het=s(hse);Qgo=r(het,"pretrained_model_name_or_path"),het.forEach(t),Hgo=r(SZ," if possible):"),SZ.forEach(t),Ugo=i(oa),he=n(oa,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var U6e=s(Vh);pse=n(U6e,"STRONG",{});var pet=s(pse);Jgo=r(pet,"clip"),pet.forEach(t),Ygo=r(U6e," \u2014 "),CI=n(U6e,"A",{href:!0});var _et=s(CI);Kgo=r(_et,"CLIPProcessor"),_et.forEach(t),Zgo=r(U6e," (CLIP model)"),U6e.forEach(t),eho=i(ue),Xh=n(ue,"LI",{});var J6e=s(Xh);_se=n(J6e,"STRONG",{});var uet=s(_se);oho=r(uet,"flava"),uet.forEach(t),rho=r(J6e," \u2014 "),use=n(J6e,"CODE",{});var bet=s(use);tho=r(bet,"FLAVAProcessor"),bet.forEach(t),aho=r(J6e," (Flava model)"),J6e.forEach(t),nho=i(ue),zh=n(ue,"LI",{});var Y6e=s(zh);bse=n(Y6e,"STRONG",{});var vet=s(bse);sho=r(vet,"layoutlmv2"),vet.forEach(t),lho=r(Y6e," \u2014 "),wI=n(Y6e,"A",{href:!0});var Fet=s(wI);iho=r(Fet,"LayoutLMv2Processor"),Fet.forEach(t),dho=r(Y6e," (LayoutLMv2 model)"),Y6e.forEach(t),cho=i(ue),Wh=n(ue,"LI",{});var K6e=s(Wh);vse=n(K6e,"STRONG",{});var Tet=s(vse);fho=r(Tet,"layoutlmv3"),Tet.forEach(t),mho=r(K6e," \u2014 "),AI=n(K6e,"A",{href:!0});var Met=s(AI);gho=r(Met,"LayoutLMv3Processor"),Met.forEach(t),hho=r(K6e," (LayoutLMv3 model)"),K6e.forEach(t),pho=i(ue),Qh=n(ue,"LI",{});var Z6e=s(Qh);Fse=n(Z6e,"STRONG",{});var Eet=s(Fse);_ho=r(Eet,"layoutxlm"),Eet.forEach(t),uho=r(Z6e," \u2014 "),yI=n(Z6e,"A",{href:!0});var Cet=s(yI);bho=r(Cet,"LayoutXLMProcessor"),Cet.forEach(t),vho=r(Z6e," (LayoutXLM model)"),Z6e.forEach(t),Fho=i(ue),Hh=n(ue,"LI",{});var eAe=s(Hh);Tse=n(eAe,"STRONG",{});var wet=s(Tse);Tho=r(wet,"sew"),wet.forEach(t),Mho=r(eAe," \u2014 "),LI=n(eAe,"A",{href:!0});var Aet=s(LI);Eho=r(Aet,"Wav2Vec2Processor"),Aet.forEach(t),Cho=r(eAe," (SEW model)"),eAe.forEach(t),who=i(ue),Uh=n(ue,"LI",{});var oAe=s(Uh);Mse=n(oAe,"STRONG",{});var yet=s(Mse);Aho=r(yet,"sew-d"),yet.forEach(t),yho=r(oAe," \u2014 "),xI=n(oAe,"A",{href:!0});var Let=s(xI);Lho=r(Let,"Wav2Vec2Processor"),Let.forEach(t),xho=r(oAe," (SEW-D model)"),oAe.forEach(t),$ho=i(ue),Jh=n(ue,"LI",{});var rAe=s(Jh);Ese=n(rAe,"STRONG",{});var xet=s(Ese);kho=r(xet,"speech_to_text"),xet.forEach(t),Sho=r(rAe," \u2014 "),$I=n(rAe,"A",{href:!0});var $et=s($I);Rho=r($et,"Speech2TextProcessor"),$et.forEach(t),Pho=r(rAe," (Speech2Text model)"),rAe.forEach(t),Bho=i(ue),Yh=n(ue,"LI",{});var tAe=s(Yh);Cse=n(tAe,"STRONG",{});var ket=s(Cse);Iho=r(ket,"speech_to_text_2"),ket.forEach(t),Nho=r(tAe," \u2014 "),kI=n(tAe,"A",{href:!0});var Set=s(kI);qho=r(Set,"Speech2Text2Processor"),Set.forEach(t),jho=r(tAe," (Speech2Text2 model)"),tAe.forEach(t),Dho=i(ue),Kh=n(ue,"LI",{});var aAe=s(Kh);wse=n(aAe,"STRONG",{});var Ret=s(wse);Gho=r(Ret,"trocr"),Ret.forEach(t),Oho=r(aAe," \u2014 "),SI=n(aAe,"A",{href:!0});var Pet=s(SI);Vho=r(Pet,"TrOCRProcessor"),Pet.forEach(t),Xho=r(aAe," (TrOCR model)"),aAe.forEach(t),zho=i(ue),Zh=n(ue,"LI",{});var nAe=s(Zh);Ase=n(nAe,"STRONG",{});var Bet=s(Ase);Who=r(Bet,"unispeech"),Bet.forEach(t),Qho=r(nAe," \u2014 "),RI=n(nAe,"A",{href:!0});var Iet=s(RI);Hho=r(Iet,"Wav2Vec2Processor"),Iet.forEach(t),Uho=r(nAe," (UniSpeech model)"),nAe.forEach(t),Jho=i(ue),ep=n(ue,"LI",{});var sAe=s(ep);yse=n(sAe,"STRONG",{});var Net=s(yse);Yho=r(Net,"unispeech-sat"),Net.forEach(t),Kho=r(sAe," \u2014 "),PI=n(sAe,"A",{href:!0});var qet=s(PI);Zho=r(qet,"Wav2Vec2Processor"),qet.forEach(t),epo=r(sAe," (UniSpeechSat model)"),sAe.forEach(t),opo=i(ue),op=n(ue,"LI",{});var lAe=s(op);Lse=n(lAe,"STRONG",{});var jet=s(Lse);rpo=r(jet,"vilt"),jet.forEach(t),tpo=r(lAe," \u2014 "),BI=n(lAe,"A",{href:!0});var Det=s(BI);apo=r(Det,"ViltProcessor"),Det.forEach(t),npo=r(lAe," (ViLT model)"),lAe.forEach(t),spo=i(ue),rp=n(ue,"LI",{});var iAe=s(rp);xse=n(iAe,"STRONG",{});var Get=s(xse);lpo=r(Get,"vision-text-dual-encoder"),Get.forEach(t),ipo=r(iAe," \u2014 "),II=n(iAe,"A",{href:!0});var Oet=s(II);dpo=r(Oet,"VisionTextDualEncoderProcessor"),Oet.forEach(t),cpo=r(iAe," (VisionTextDualEncoder model)"),iAe.forEach(t),fpo=i(ue),tp=n(ue,"LI",{});var dAe=s(tp);$se=n(dAe,"STRONG",{});var Vet=s($se);mpo=r(Vet,"wav2vec2"),Vet.forEach(t),gpo=r(dAe," \u2014 "),NI=n(dAe,"A",{href:!0});var Xet=s(NI);hpo=r(Xet,"Wav2Vec2Processor"),Xet.forEach(t),ppo=r(dAe," (Wav2Vec2 model)"),dAe.forEach(t),_po=i(ue),ap=n(ue,"LI",{});var cAe=s(ap);kse=n(cAe,"STRONG",{});var zet=s(kse);upo=r(zet,"wav2vec2-conformer"),zet.forEach(t),bpo=r(cAe," \u2014 "),qI=n(cAe,"A",{href:!0});var Wet=s(qI);vpo=r(Wet,"Wav2Vec2Processor"),Wet.forEach(t),Fpo=r(cAe," (Wav2Vec2-Conformer model)"),cAe.forEach(t),Tpo=i(ue),np=n(ue,"LI",{});var fAe=s(np);Sse=n(fAe,"STRONG",{});var Qet=s(Sse);Mpo=r(Qet,"wavlm"),Qet.forEach(t),Epo=r(fAe," \u2014 "),jI=n(fAe,"A",{href:!0});var Het=s(jI);Cpo=r(Het,"Wav2Vec2Processor"),Het.forEach(t),wpo=r(fAe," (WavLM model)"),fAe.forEach(t),ue.forEach(t),Apo=i(oa),T(sp.$$.fragment,oa),ypo=i(oa),T(lp.$$.fragment,oa),oa.forEach(t),Lpo=i(Ds),ip=n(Ds,"DIV",{class:!0});var JDe=s(ip);T(ly.$$.fragment,JDe),xpo=i(JDe),Rse=n(JDe,"P",{});var Uet=s(Rse);$po=r(Uet,"Register a new processor for this class."),Uet.forEach(t),JDe.forEach(t),Ds.forEach(t),Qqe=i(f),Ai=n(f,"H2",{class:!0});var YDe=s(Ai);dp=n(YDe,"A",{id:!0,class:!0,href:!0});var Jet=s(dp);Pse=n(Jet,"SPAN",{});var Yet=s(Pse);T(iy.$$.fragment,Yet),Yet.forEach(t),Jet.forEach(t),kpo=i(YDe),Bse=n(YDe,"SPAN",{});var Ket=s(Bse);Spo=r(Ket,"AutoModel"),Ket.forEach(t),YDe.forEach(t),Hqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(dy.$$.fragment,Gs),Rpo=i(Gs),yi=n(Gs,"P",{});var RZ=s(yi);Ppo=r(RZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=n(RZ,"A",{href:!0});var Zet=s(DI);Bpo=r(Zet,"from_pretrained()"),Zet.forEach(t),Ipo=r(RZ," class method or the "),GI=n(RZ,"A",{href:!0});var eot=s(GI);Npo=r(eot,"from_config()"),eot.forEach(t),qpo=r(RZ,` class
method.`),RZ.forEach(t),jpo=i(Gs),cy=n(Gs,"P",{});var KDe=s(cy);Dpo=r(KDe,"This class cannot be instantiated directly using "),Ise=n(KDe,"CODE",{});var oot=s(Ise);Gpo=r(oot,"__init__()"),oot.forEach(t),Opo=r(KDe," (throws an error)."),KDe.forEach(t),Vpo=i(Gs),at=n(Gs,"DIV",{class:!0});var Gw=s(at);T(fy.$$.fragment,Gw),Xpo=i(Gw),Nse=n(Gw,"P",{});var rot=s(Nse);zpo=r(rot,"Instantiates one of the base model classes of the library from a configuration."),rot.forEach(t),Wpo=i(Gw),Li=n(Gw,"P",{});var PZ=s(Li);Qpo=r(PZ,`Note:
Loading a model from its configuration file does `),qse=n(PZ,"STRONG",{});var tot=s(qse);Hpo=r(tot,"not"),tot.forEach(t),Upo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(PZ,"A",{href:!0});var aot=s(OI);Jpo=r(aot,"from_pretrained()"),aot.forEach(t),Ypo=r(PZ," to load the model weights."),PZ.forEach(t),Kpo=i(Gw),T(cp.$$.fragment,Gw),Gw.forEach(t),Zpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var ra=s(Je);T(my.$$.fragment,ra),e_o=i(ra),jse=n(ra,"P",{});var not=s(jse);o_o=r(not,"Instantiate one of the base model classes of the library from a pretrained model."),not.forEach(t),r_o=i(ra),xa=n(ra,"P",{});var Ow=s(xa);t_o=r(Ow,"The model class to instantiate is selected based on the "),Dse=n(Ow,"CODE",{});var sot=s(Dse);a_o=r(sot,"model_type"),sot.forEach(t),n_o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Gse=n(Ow,"CODE",{});var lot=s(Gse);s_o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),l_o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(Ow,"CODE",{});var iot=s(Ose);i_o=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),d_o=r(Ow,":"),Ow.forEach(t),c_o=i(ra),x=n(ra,"UL",{});var $=s(x);fp=n($,"LI",{});var mAe=s(fp);Vse=n(mAe,"STRONG",{});var dot=s(Vse);f_o=r(dot,"albert"),dot.forEach(t),m_o=r(mAe," \u2014 "),VI=n(mAe,"A",{href:!0});var cot=s(VI);g_o=r(cot,"AlbertModel"),cot.forEach(t),h_o=r(mAe," (ALBERT model)"),mAe.forEach(t),p_o=i($),mp=n($,"LI",{});var gAe=s(mp);Xse=n(gAe,"STRONG",{});var fot=s(Xse);__o=r(fot,"bart"),fot.forEach(t),u_o=r(gAe," \u2014 "),XI=n(gAe,"A",{href:!0});var mot=s(XI);b_o=r(mot,"BartModel"),mot.forEach(t),v_o=r(gAe," (BART model)"),gAe.forEach(t),F_o=i($),gp=n($,"LI",{});var hAe=s(gp);zse=n(hAe,"STRONG",{});var got=s(zse);T_o=r(got,"beit"),got.forEach(t),M_o=r(hAe," \u2014 "),zI=n(hAe,"A",{href:!0});var hot=s(zI);E_o=r(hot,"BeitModel"),hot.forEach(t),C_o=r(hAe," (BEiT model)"),hAe.forEach(t),w_o=i($),hp=n($,"LI",{});var pAe=s(hp);Wse=n(pAe,"STRONG",{});var pot=s(Wse);A_o=r(pot,"bert"),pot.forEach(t),y_o=r(pAe," \u2014 "),WI=n(pAe,"A",{href:!0});var _ot=s(WI);L_o=r(_ot,"BertModel"),_ot.forEach(t),x_o=r(pAe," (BERT model)"),pAe.forEach(t),$_o=i($),pp=n($,"LI",{});var _Ae=s(pp);Qse=n(_Ae,"STRONG",{});var uot=s(Qse);k_o=r(uot,"bert-generation"),uot.forEach(t),S_o=r(_Ae," \u2014 "),QI=n(_Ae,"A",{href:!0});var bot=s(QI);R_o=r(bot,"BertGenerationEncoder"),bot.forEach(t),P_o=r(_Ae," (Bert Generation model)"),_Ae.forEach(t),B_o=i($),_p=n($,"LI",{});var uAe=s(_p);Hse=n(uAe,"STRONG",{});var vot=s(Hse);I_o=r(vot,"big_bird"),vot.forEach(t),N_o=r(uAe," \u2014 "),HI=n(uAe,"A",{href:!0});var Fot=s(HI);q_o=r(Fot,"BigBirdModel"),Fot.forEach(t),j_o=r(uAe," (BigBird model)"),uAe.forEach(t),D_o=i($),up=n($,"LI",{});var bAe=s(up);Use=n(bAe,"STRONG",{});var Tot=s(Use);G_o=r(Tot,"bigbird_pegasus"),Tot.forEach(t),O_o=r(bAe," \u2014 "),UI=n(bAe,"A",{href:!0});var Mot=s(UI);V_o=r(Mot,"BigBirdPegasusModel"),Mot.forEach(t),X_o=r(bAe," (BigBirdPegasus model)"),bAe.forEach(t),z_o=i($),bp=n($,"LI",{});var vAe=s(bp);Jse=n(vAe,"STRONG",{});var Eot=s(Jse);W_o=r(Eot,"blenderbot"),Eot.forEach(t),Q_o=r(vAe," \u2014 "),JI=n(vAe,"A",{href:!0});var Cot=s(JI);H_o=r(Cot,"BlenderbotModel"),Cot.forEach(t),U_o=r(vAe," (Blenderbot model)"),vAe.forEach(t),J_o=i($),vp=n($,"LI",{});var FAe=s(vp);Yse=n(FAe,"STRONG",{});var wot=s(Yse);Y_o=r(wot,"blenderbot-small"),wot.forEach(t),K_o=r(FAe," \u2014 "),YI=n(FAe,"A",{href:!0});var Aot=s(YI);Z_o=r(Aot,"BlenderbotSmallModel"),Aot.forEach(t),euo=r(FAe," (BlenderbotSmall model)"),FAe.forEach(t),ouo=i($),Fp=n($,"LI",{});var TAe=s(Fp);Kse=n(TAe,"STRONG",{});var yot=s(Kse);ruo=r(yot,"camembert"),yot.forEach(t),tuo=r(TAe," \u2014 "),KI=n(TAe,"A",{href:!0});var Lot=s(KI);auo=r(Lot,"CamembertModel"),Lot.forEach(t),nuo=r(TAe," (CamemBERT model)"),TAe.forEach(t),suo=i($),Tp=n($,"LI",{});var MAe=s(Tp);Zse=n(MAe,"STRONG",{});var xot=s(Zse);luo=r(xot,"canine"),xot.forEach(t),iuo=r(MAe," \u2014 "),ZI=n(MAe,"A",{href:!0});var $ot=s(ZI);duo=r($ot,"CanineModel"),$ot.forEach(t),cuo=r(MAe," (Canine model)"),MAe.forEach(t),fuo=i($),Mp=n($,"LI",{});var EAe=s(Mp);ele=n(EAe,"STRONG",{});var kot=s(ele);muo=r(kot,"clip"),kot.forEach(t),guo=r(EAe," \u2014 "),eN=n(EAe,"A",{href:!0});var Sot=s(eN);huo=r(Sot,"CLIPModel"),Sot.forEach(t),puo=r(EAe," (CLIP model)"),EAe.forEach(t),_uo=i($),Ep=n($,"LI",{});var CAe=s(Ep);ole=n(CAe,"STRONG",{});var Rot=s(ole);uuo=r(Rot,"convbert"),Rot.forEach(t),buo=r(CAe," \u2014 "),oN=n(CAe,"A",{href:!0});var Pot=s(oN);vuo=r(Pot,"ConvBertModel"),Pot.forEach(t),Fuo=r(CAe," (ConvBERT model)"),CAe.forEach(t),Tuo=i($),Cp=n($,"LI",{});var wAe=s(Cp);rle=n(wAe,"STRONG",{});var Bot=s(rle);Muo=r(Bot,"convnext"),Bot.forEach(t),Euo=r(wAe," \u2014 "),rN=n(wAe,"A",{href:!0});var Iot=s(rN);Cuo=r(Iot,"ConvNextModel"),Iot.forEach(t),wuo=r(wAe," (ConvNext model)"),wAe.forEach(t),Auo=i($),wp=n($,"LI",{});var AAe=s(wp);tle=n(AAe,"STRONG",{});var Not=s(tle);yuo=r(Not,"ctrl"),Not.forEach(t),Luo=r(AAe," \u2014 "),tN=n(AAe,"A",{href:!0});var qot=s(tN);xuo=r(qot,"CTRLModel"),qot.forEach(t),$uo=r(AAe," (CTRL model)"),AAe.forEach(t),kuo=i($),Ap=n($,"LI",{});var yAe=s(Ap);ale=n(yAe,"STRONG",{});var jot=s(ale);Suo=r(jot,"cvt"),jot.forEach(t),Ruo=r(yAe," \u2014 "),aN=n(yAe,"A",{href:!0});var Dot=s(aN);Puo=r(Dot,"CvtModel"),Dot.forEach(t),Buo=r(yAe," (CvT model)"),yAe.forEach(t),Iuo=i($),yp=n($,"LI",{});var LAe=s(yp);nle=n(LAe,"STRONG",{});var Got=s(nle);Nuo=r(Got,"data2vec-audio"),Got.forEach(t),quo=r(LAe," \u2014 "),nN=n(LAe,"A",{href:!0});var Oot=s(nN);juo=r(Oot,"Data2VecAudioModel"),Oot.forEach(t),Duo=r(LAe," (Data2VecAudio model)"),LAe.forEach(t),Guo=i($),Lp=n($,"LI",{});var xAe=s(Lp);sle=n(xAe,"STRONG",{});var Vot=s(sle);Ouo=r(Vot,"data2vec-text"),Vot.forEach(t),Vuo=r(xAe," \u2014 "),sN=n(xAe,"A",{href:!0});var Xot=s(sN);Xuo=r(Xot,"Data2VecTextModel"),Xot.forEach(t),zuo=r(xAe," (Data2VecText model)"),xAe.forEach(t),Wuo=i($),xp=n($,"LI",{});var $Ae=s(xp);lle=n($Ae,"STRONG",{});var zot=s(lle);Quo=r(zot,"data2vec-vision"),zot.forEach(t),Huo=r($Ae," \u2014 "),lN=n($Ae,"A",{href:!0});var Wot=s(lN);Uuo=r(Wot,"Data2VecVisionModel"),Wot.forEach(t),Juo=r($Ae," (Data2VecVision model)"),$Ae.forEach(t),Yuo=i($),$p=n($,"LI",{});var kAe=s($p);ile=n(kAe,"STRONG",{});var Qot=s(ile);Kuo=r(Qot,"deberta"),Qot.forEach(t),Zuo=r(kAe," \u2014 "),iN=n(kAe,"A",{href:!0});var Hot=s(iN);e1o=r(Hot,"DebertaModel"),Hot.forEach(t),o1o=r(kAe," (DeBERTa model)"),kAe.forEach(t),r1o=i($),kp=n($,"LI",{});var SAe=s(kp);dle=n(SAe,"STRONG",{});var Uot=s(dle);t1o=r(Uot,"deberta-v2"),Uot.forEach(t),a1o=r(SAe," \u2014 "),dN=n(SAe,"A",{href:!0});var Jot=s(dN);n1o=r(Jot,"DebertaV2Model"),Jot.forEach(t),s1o=r(SAe," (DeBERTa-v2 model)"),SAe.forEach(t),l1o=i($),Sp=n($,"LI",{});var RAe=s(Sp);cle=n(RAe,"STRONG",{});var Yot=s(cle);i1o=r(Yot,"decision_transformer"),Yot.forEach(t),d1o=r(RAe," \u2014 "),cN=n(RAe,"A",{href:!0});var Kot=s(cN);c1o=r(Kot,"DecisionTransformerModel"),Kot.forEach(t),f1o=r(RAe," (Decision Transformer model)"),RAe.forEach(t),m1o=i($),Rp=n($,"LI",{});var PAe=s(Rp);fle=n(PAe,"STRONG",{});var Zot=s(fle);g1o=r(Zot,"deit"),Zot.forEach(t),h1o=r(PAe," \u2014 "),fN=n(PAe,"A",{href:!0});var ert=s(fN);p1o=r(ert,"DeiTModel"),ert.forEach(t),_1o=r(PAe," (DeiT model)"),PAe.forEach(t),u1o=i($),Pp=n($,"LI",{});var BAe=s(Pp);mle=n(BAe,"STRONG",{});var ort=s(mle);b1o=r(ort,"detr"),ort.forEach(t),v1o=r(BAe," \u2014 "),mN=n(BAe,"A",{href:!0});var rrt=s(mN);F1o=r(rrt,"DetrModel"),rrt.forEach(t),T1o=r(BAe," (DETR model)"),BAe.forEach(t),M1o=i($),Bp=n($,"LI",{});var IAe=s(Bp);gle=n(IAe,"STRONG",{});var trt=s(gle);E1o=r(trt,"distilbert"),trt.forEach(t),C1o=r(IAe," \u2014 "),gN=n(IAe,"A",{href:!0});var art=s(gN);w1o=r(art,"DistilBertModel"),art.forEach(t),A1o=r(IAe," (DistilBERT model)"),IAe.forEach(t),y1o=i($),Ip=n($,"LI",{});var NAe=s(Ip);hle=n(NAe,"STRONG",{});var nrt=s(hle);L1o=r(nrt,"dpr"),nrt.forEach(t),x1o=r(NAe," \u2014 "),hN=n(NAe,"A",{href:!0});var srt=s(hN);$1o=r(srt,"DPRQuestionEncoder"),srt.forEach(t),k1o=r(NAe," (DPR model)"),NAe.forEach(t),S1o=i($),Np=n($,"LI",{});var qAe=s(Np);ple=n(qAe,"STRONG",{});var lrt=s(ple);R1o=r(lrt,"dpt"),lrt.forEach(t),P1o=r(qAe," \u2014 "),pN=n(qAe,"A",{href:!0});var irt=s(pN);B1o=r(irt,"DPTModel"),irt.forEach(t),I1o=r(qAe," (DPT model)"),qAe.forEach(t),N1o=i($),qp=n($,"LI",{});var jAe=s(qp);_le=n(jAe,"STRONG",{});var drt=s(_le);q1o=r(drt,"electra"),drt.forEach(t),j1o=r(jAe," \u2014 "),_N=n(jAe,"A",{href:!0});var crt=s(_N);D1o=r(crt,"ElectraModel"),crt.forEach(t),G1o=r(jAe," (ELECTRA model)"),jAe.forEach(t),O1o=i($),jp=n($,"LI",{});var DAe=s(jp);ule=n(DAe,"STRONG",{});var frt=s(ule);V1o=r(frt,"flaubert"),frt.forEach(t),X1o=r(DAe," \u2014 "),uN=n(DAe,"A",{href:!0});var mrt=s(uN);z1o=r(mrt,"FlaubertModel"),mrt.forEach(t),W1o=r(DAe," (FlauBERT model)"),DAe.forEach(t),Q1o=i($),Dp=n($,"LI",{});var GAe=s(Dp);ble=n(GAe,"STRONG",{});var grt=s(ble);H1o=r(grt,"flava"),grt.forEach(t),U1o=r(GAe," \u2014 "),bN=n(GAe,"A",{href:!0});var hrt=s(bN);J1o=r(hrt,"FlavaModel"),hrt.forEach(t),Y1o=r(GAe," (Flava model)"),GAe.forEach(t),K1o=i($),Gp=n($,"LI",{});var OAe=s(Gp);vle=n(OAe,"STRONG",{});var prt=s(vle);Z1o=r(prt,"fnet"),prt.forEach(t),ebo=r(OAe," \u2014 "),vN=n(OAe,"A",{href:!0});var _rt=s(vN);obo=r(_rt,"FNetModel"),_rt.forEach(t),rbo=r(OAe," (FNet model)"),OAe.forEach(t),tbo=i($),Op=n($,"LI",{});var VAe=s(Op);Fle=n(VAe,"STRONG",{});var urt=s(Fle);abo=r(urt,"fsmt"),urt.forEach(t),nbo=r(VAe," \u2014 "),FN=n(VAe,"A",{href:!0});var brt=s(FN);sbo=r(brt,"FSMTModel"),brt.forEach(t),lbo=r(VAe," (FairSeq Machine-Translation model)"),VAe.forEach(t),ibo=i($),Ps=n($,"LI",{});var Y$=s(Ps);Tle=n(Y$,"STRONG",{});var vrt=s(Tle);dbo=r(vrt,"funnel"),vrt.forEach(t),cbo=r(Y$," \u2014 "),TN=n(Y$,"A",{href:!0});var Frt=s(TN);fbo=r(Frt,"FunnelModel"),Frt.forEach(t),mbo=r(Y$," or "),MN=n(Y$,"A",{href:!0});var Trt=s(MN);gbo=r(Trt,"FunnelBaseModel"),Trt.forEach(t),hbo=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),pbo=i($),Vp=n($,"LI",{});var XAe=s(Vp);Mle=n(XAe,"STRONG",{});var Mrt=s(Mle);_bo=r(Mrt,"glpn"),Mrt.forEach(t),ubo=r(XAe," \u2014 "),EN=n(XAe,"A",{href:!0});var Ert=s(EN);bbo=r(Ert,"GLPNModel"),Ert.forEach(t),vbo=r(XAe," (GLPN model)"),XAe.forEach(t),Fbo=i($),Xp=n($,"LI",{});var zAe=s(Xp);Ele=n(zAe,"STRONG",{});var Crt=s(Ele);Tbo=r(Crt,"gpt2"),Crt.forEach(t),Mbo=r(zAe," \u2014 "),CN=n(zAe,"A",{href:!0});var wrt=s(CN);Ebo=r(wrt,"GPT2Model"),wrt.forEach(t),Cbo=r(zAe," (OpenAI GPT-2 model)"),zAe.forEach(t),wbo=i($),zp=n($,"LI",{});var WAe=s(zp);Cle=n(WAe,"STRONG",{});var Art=s(Cle);Abo=r(Art,"gpt_neo"),Art.forEach(t),ybo=r(WAe," \u2014 "),wN=n(WAe,"A",{href:!0});var yrt=s(wN);Lbo=r(yrt,"GPTNeoModel"),yrt.forEach(t),xbo=r(WAe," (GPT Neo model)"),WAe.forEach(t),$bo=i($),Wp=n($,"LI",{});var QAe=s(Wp);wle=n(QAe,"STRONG",{});var Lrt=s(wle);kbo=r(Lrt,"gpt_neox"),Lrt.forEach(t),Sbo=r(QAe," \u2014 "),AN=n(QAe,"A",{href:!0});var xrt=s(AN);Rbo=r(xrt,"GPTNeoXModel"),xrt.forEach(t),Pbo=r(QAe," (GPT NeoX model)"),QAe.forEach(t),Bbo=i($),Qp=n($,"LI",{});var HAe=s(Qp);Ale=n(HAe,"STRONG",{});var $rt=s(Ale);Ibo=r($rt,"gptj"),$rt.forEach(t),Nbo=r(HAe," \u2014 "),yN=n(HAe,"A",{href:!0});var krt=s(yN);qbo=r(krt,"GPTJModel"),krt.forEach(t),jbo=r(HAe," (GPT-J model)"),HAe.forEach(t),Dbo=i($),Hp=n($,"LI",{});var UAe=s(Hp);yle=n(UAe,"STRONG",{});var Srt=s(yle);Gbo=r(Srt,"hubert"),Srt.forEach(t),Obo=r(UAe," \u2014 "),LN=n(UAe,"A",{href:!0});var Rrt=s(LN);Vbo=r(Rrt,"HubertModel"),Rrt.forEach(t),Xbo=r(UAe," (Hubert model)"),UAe.forEach(t),zbo=i($),Up=n($,"LI",{});var JAe=s(Up);Lle=n(JAe,"STRONG",{});var Prt=s(Lle);Wbo=r(Prt,"ibert"),Prt.forEach(t),Qbo=r(JAe," \u2014 "),xN=n(JAe,"A",{href:!0});var Brt=s(xN);Hbo=r(Brt,"IBertModel"),Brt.forEach(t),Ubo=r(JAe," (I-BERT model)"),JAe.forEach(t),Jbo=i($),Jp=n($,"LI",{});var YAe=s(Jp);xle=n(YAe,"STRONG",{});var Irt=s(xle);Ybo=r(Irt,"imagegpt"),Irt.forEach(t),Kbo=r(YAe," \u2014 "),$N=n(YAe,"A",{href:!0});var Nrt=s($N);Zbo=r(Nrt,"ImageGPTModel"),Nrt.forEach(t),e2o=r(YAe," (ImageGPT model)"),YAe.forEach(t),o2o=i($),Yp=n($,"LI",{});var KAe=s(Yp);$le=n(KAe,"STRONG",{});var qrt=s($le);r2o=r(qrt,"layoutlm"),qrt.forEach(t),t2o=r(KAe," \u2014 "),kN=n(KAe,"A",{href:!0});var jrt=s(kN);a2o=r(jrt,"LayoutLMModel"),jrt.forEach(t),n2o=r(KAe," (LayoutLM model)"),KAe.forEach(t),s2o=i($),Kp=n($,"LI",{});var ZAe=s(Kp);kle=n(ZAe,"STRONG",{});var Drt=s(kle);l2o=r(Drt,"layoutlmv2"),Drt.forEach(t),i2o=r(ZAe," \u2014 "),SN=n(ZAe,"A",{href:!0});var Grt=s(SN);d2o=r(Grt,"LayoutLMv2Model"),Grt.forEach(t),c2o=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),f2o=i($),Zp=n($,"LI",{});var eye=s(Zp);Sle=n(eye,"STRONG",{});var Ort=s(Sle);m2o=r(Ort,"layoutlmv3"),Ort.forEach(t),g2o=r(eye," \u2014 "),RN=n(eye,"A",{href:!0});var Vrt=s(RN);h2o=r(Vrt,"LayoutLMv3Model"),Vrt.forEach(t),p2o=r(eye," (LayoutLMv3 model)"),eye.forEach(t),_2o=i($),e_=n($,"LI",{});var oye=s(e_);Rle=n(oye,"STRONG",{});var Xrt=s(Rle);u2o=r(Xrt,"led"),Xrt.forEach(t),b2o=r(oye," \u2014 "),PN=n(oye,"A",{href:!0});var zrt=s(PN);v2o=r(zrt,"LEDModel"),zrt.forEach(t),F2o=r(oye," (LED model)"),oye.forEach(t),T2o=i($),o_=n($,"LI",{});var rye=s(o_);Ple=n(rye,"STRONG",{});var Wrt=s(Ple);M2o=r(Wrt,"longformer"),Wrt.forEach(t),E2o=r(rye," \u2014 "),BN=n(rye,"A",{href:!0});var Qrt=s(BN);C2o=r(Qrt,"LongformerModel"),Qrt.forEach(t),w2o=r(rye," (Longformer model)"),rye.forEach(t),A2o=i($),r_=n($,"LI",{});var tye=s(r_);Ble=n(tye,"STRONG",{});var Hrt=s(Ble);y2o=r(Hrt,"luke"),Hrt.forEach(t),L2o=r(tye," \u2014 "),IN=n(tye,"A",{href:!0});var Urt=s(IN);x2o=r(Urt,"LukeModel"),Urt.forEach(t),$2o=r(tye," (LUKE model)"),tye.forEach(t),k2o=i($),t_=n($,"LI",{});var aye=s(t_);Ile=n(aye,"STRONG",{});var Jrt=s(Ile);S2o=r(Jrt,"lxmert"),Jrt.forEach(t),R2o=r(aye," \u2014 "),NN=n(aye,"A",{href:!0});var Yrt=s(NN);P2o=r(Yrt,"LxmertModel"),Yrt.forEach(t),B2o=r(aye," (LXMERT model)"),aye.forEach(t),I2o=i($),a_=n($,"LI",{});var nye=s(a_);Nle=n(nye,"STRONG",{});var Krt=s(Nle);N2o=r(Krt,"m2m_100"),Krt.forEach(t),q2o=r(nye," \u2014 "),qN=n(nye,"A",{href:!0});var Zrt=s(qN);j2o=r(Zrt,"M2M100Model"),Zrt.forEach(t),D2o=r(nye," (M2M100 model)"),nye.forEach(t),G2o=i($),n_=n($,"LI",{});var sye=s(n_);qle=n(sye,"STRONG",{});var ett=s(qle);O2o=r(ett,"marian"),ett.forEach(t),V2o=r(sye," \u2014 "),jN=n(sye,"A",{href:!0});var ott=s(jN);X2o=r(ott,"MarianModel"),ott.forEach(t),z2o=r(sye," (Marian model)"),sye.forEach(t),W2o=i($),s_=n($,"LI",{});var lye=s(s_);jle=n(lye,"STRONG",{});var rtt=s(jle);Q2o=r(rtt,"maskformer"),rtt.forEach(t),H2o=r(lye," \u2014 "),DN=n(lye,"A",{href:!0});var ttt=s(DN);U2o=r(ttt,"MaskFormerModel"),ttt.forEach(t),J2o=r(lye," (MaskFormer model)"),lye.forEach(t),Y2o=i($),l_=n($,"LI",{});var iye=s(l_);Dle=n(iye,"STRONG",{});var att=s(Dle);K2o=r(att,"mbart"),att.forEach(t),Z2o=r(iye," \u2014 "),GN=n(iye,"A",{href:!0});var ntt=s(GN);e4o=r(ntt,"MBartModel"),ntt.forEach(t),o4o=r(iye," (mBART model)"),iye.forEach(t),r4o=i($),i_=n($,"LI",{});var dye=s(i_);Gle=n(dye,"STRONG",{});var stt=s(Gle);t4o=r(stt,"megatron-bert"),stt.forEach(t),a4o=r(dye," \u2014 "),ON=n(dye,"A",{href:!0});var ltt=s(ON);n4o=r(ltt,"MegatronBertModel"),ltt.forEach(t),s4o=r(dye," (MegatronBert model)"),dye.forEach(t),l4o=i($),d_=n($,"LI",{});var cye=s(d_);Ole=n(cye,"STRONG",{});var itt=s(Ole);i4o=r(itt,"mobilebert"),itt.forEach(t),d4o=r(cye," \u2014 "),VN=n(cye,"A",{href:!0});var dtt=s(VN);c4o=r(dtt,"MobileBertModel"),dtt.forEach(t),f4o=r(cye," (MobileBERT model)"),cye.forEach(t),m4o=i($),c_=n($,"LI",{});var fye=s(c_);Vle=n(fye,"STRONG",{});var ctt=s(Vle);g4o=r(ctt,"mobilevit"),ctt.forEach(t),h4o=r(fye," \u2014 "),XN=n(fye,"A",{href:!0});var ftt=s(XN);p4o=r(ftt,"MobileViTModel"),ftt.forEach(t),_4o=r(fye," (MobileViT model)"),fye.forEach(t),u4o=i($),f_=n($,"LI",{});var mye=s(f_);Xle=n(mye,"STRONG",{});var mtt=s(Xle);b4o=r(mtt,"mpnet"),mtt.forEach(t),v4o=r(mye," \u2014 "),zN=n(mye,"A",{href:!0});var gtt=s(zN);F4o=r(gtt,"MPNetModel"),gtt.forEach(t),T4o=r(mye," (MPNet model)"),mye.forEach(t),M4o=i($),m_=n($,"LI",{});var gye=s(m_);zle=n(gye,"STRONG",{});var htt=s(zle);E4o=r(htt,"mt5"),htt.forEach(t),C4o=r(gye," \u2014 "),WN=n(gye,"A",{href:!0});var ptt=s(WN);w4o=r(ptt,"MT5Model"),ptt.forEach(t),A4o=r(gye," (mT5 model)"),gye.forEach(t),y4o=i($),g_=n($,"LI",{});var hye=s(g_);Wle=n(hye,"STRONG",{});var _tt=s(Wle);L4o=r(_tt,"nystromformer"),_tt.forEach(t),x4o=r(hye," \u2014 "),QN=n(hye,"A",{href:!0});var utt=s(QN);$4o=r(utt,"NystromformerModel"),utt.forEach(t),k4o=r(hye," (Nystromformer model)"),hye.forEach(t),S4o=i($),h_=n($,"LI",{});var pye=s(h_);Qle=n(pye,"STRONG",{});var btt=s(Qle);R4o=r(btt,"openai-gpt"),btt.forEach(t),P4o=r(pye," \u2014 "),HN=n(pye,"A",{href:!0});var vtt=s(HN);B4o=r(vtt,"OpenAIGPTModel"),vtt.forEach(t),I4o=r(pye," (OpenAI GPT model)"),pye.forEach(t),N4o=i($),p_=n($,"LI",{});var _ye=s(p_);Hle=n(_ye,"STRONG",{});var Ftt=s(Hle);q4o=r(Ftt,"opt"),Ftt.forEach(t),j4o=r(_ye," \u2014 "),UN=n(_ye,"A",{href:!0});var Ttt=s(UN);D4o=r(Ttt,"OPTModel"),Ttt.forEach(t),G4o=r(_ye," (OPT model)"),_ye.forEach(t),O4o=i($),__=n($,"LI",{});var uye=s(__);Ule=n(uye,"STRONG",{});var Mtt=s(Ule);V4o=r(Mtt,"pegasus"),Mtt.forEach(t),X4o=r(uye," \u2014 "),JN=n(uye,"A",{href:!0});var Ett=s(JN);z4o=r(Ett,"PegasusModel"),Ett.forEach(t),W4o=r(uye," (Pegasus model)"),uye.forEach(t),Q4o=i($),u_=n($,"LI",{});var bye=s(u_);Jle=n(bye,"STRONG",{});var Ctt=s(Jle);H4o=r(Ctt,"perceiver"),Ctt.forEach(t),U4o=r(bye," \u2014 "),YN=n(bye,"A",{href:!0});var wtt=s(YN);J4o=r(wtt,"PerceiverModel"),wtt.forEach(t),Y4o=r(bye," (Perceiver model)"),bye.forEach(t),K4o=i($),b_=n($,"LI",{});var vye=s(b_);Yle=n(vye,"STRONG",{});var Att=s(Yle);Z4o=r(Att,"plbart"),Att.forEach(t),evo=r(vye," \u2014 "),KN=n(vye,"A",{href:!0});var ytt=s(KN);ovo=r(ytt,"PLBartModel"),ytt.forEach(t),rvo=r(vye," (PLBart model)"),vye.forEach(t),tvo=i($),v_=n($,"LI",{});var Fye=s(v_);Kle=n(Fye,"STRONG",{});var Ltt=s(Kle);avo=r(Ltt,"poolformer"),Ltt.forEach(t),nvo=r(Fye," \u2014 "),ZN=n(Fye,"A",{href:!0});var xtt=s(ZN);svo=r(xtt,"PoolFormerModel"),xtt.forEach(t),lvo=r(Fye," (PoolFormer model)"),Fye.forEach(t),ivo=i($),F_=n($,"LI",{});var Tye=s(F_);Zle=n(Tye,"STRONG",{});var $tt=s(Zle);dvo=r($tt,"prophetnet"),$tt.forEach(t),cvo=r(Tye," \u2014 "),eq=n(Tye,"A",{href:!0});var ktt=s(eq);fvo=r(ktt,"ProphetNetModel"),ktt.forEach(t),mvo=r(Tye," (ProphetNet model)"),Tye.forEach(t),gvo=i($),T_=n($,"LI",{});var Mye=s(T_);eie=n(Mye,"STRONG",{});var Stt=s(eie);hvo=r(Stt,"qdqbert"),Stt.forEach(t),pvo=r(Mye," \u2014 "),oq=n(Mye,"A",{href:!0});var Rtt=s(oq);_vo=r(Rtt,"QDQBertModel"),Rtt.forEach(t),uvo=r(Mye," (QDQBert model)"),Mye.forEach(t),bvo=i($),M_=n($,"LI",{});var Eye=s(M_);oie=n(Eye,"STRONG",{});var Ptt=s(oie);vvo=r(Ptt,"reformer"),Ptt.forEach(t),Fvo=r(Eye," \u2014 "),rq=n(Eye,"A",{href:!0});var Btt=s(rq);Tvo=r(Btt,"ReformerModel"),Btt.forEach(t),Mvo=r(Eye," (Reformer model)"),Eye.forEach(t),Evo=i($),E_=n($,"LI",{});var Cye=s(E_);rie=n(Cye,"STRONG",{});var Itt=s(rie);Cvo=r(Itt,"regnet"),Itt.forEach(t),wvo=r(Cye," \u2014 "),tq=n(Cye,"A",{href:!0});var Ntt=s(tq);Avo=r(Ntt,"RegNetModel"),Ntt.forEach(t),yvo=r(Cye," (RegNet model)"),Cye.forEach(t),Lvo=i($),C_=n($,"LI",{});var wye=s(C_);tie=n(wye,"STRONG",{});var qtt=s(tie);xvo=r(qtt,"rembert"),qtt.forEach(t),$vo=r(wye," \u2014 "),aq=n(wye,"A",{href:!0});var jtt=s(aq);kvo=r(jtt,"RemBertModel"),jtt.forEach(t),Svo=r(wye," (RemBERT model)"),wye.forEach(t),Rvo=i($),w_=n($,"LI",{});var Aye=s(w_);aie=n(Aye,"STRONG",{});var Dtt=s(aie);Pvo=r(Dtt,"resnet"),Dtt.forEach(t),Bvo=r(Aye," \u2014 "),nq=n(Aye,"A",{href:!0});var Gtt=s(nq);Ivo=r(Gtt,"ResNetModel"),Gtt.forEach(t),Nvo=r(Aye," (ResNet model)"),Aye.forEach(t),qvo=i($),A_=n($,"LI",{});var yye=s(A_);nie=n(yye,"STRONG",{});var Ott=s(nie);jvo=r(Ott,"retribert"),Ott.forEach(t),Dvo=r(yye," \u2014 "),sq=n(yye,"A",{href:!0});var Vtt=s(sq);Gvo=r(Vtt,"RetriBertModel"),Vtt.forEach(t),Ovo=r(yye," (RetriBERT model)"),yye.forEach(t),Vvo=i($),y_=n($,"LI",{});var Lye=s(y_);sie=n(Lye,"STRONG",{});var Xtt=s(sie);Xvo=r(Xtt,"roberta"),Xtt.forEach(t),zvo=r(Lye," \u2014 "),lq=n(Lye,"A",{href:!0});var ztt=s(lq);Wvo=r(ztt,"RobertaModel"),ztt.forEach(t),Qvo=r(Lye," (RoBERTa model)"),Lye.forEach(t),Hvo=i($),L_=n($,"LI",{});var xye=s(L_);lie=n(xye,"STRONG",{});var Wtt=s(lie);Uvo=r(Wtt,"roformer"),Wtt.forEach(t),Jvo=r(xye," \u2014 "),iq=n(xye,"A",{href:!0});var Qtt=s(iq);Yvo=r(Qtt,"RoFormerModel"),Qtt.forEach(t),Kvo=r(xye," (RoFormer model)"),xye.forEach(t),Zvo=i($),x_=n($,"LI",{});var $ye=s(x_);iie=n($ye,"STRONG",{});var Htt=s(iie);e5o=r(Htt,"segformer"),Htt.forEach(t),o5o=r($ye," \u2014 "),dq=n($ye,"A",{href:!0});var Utt=s(dq);r5o=r(Utt,"SegformerModel"),Utt.forEach(t),t5o=r($ye," (SegFormer model)"),$ye.forEach(t),a5o=i($),$_=n($,"LI",{});var kye=s($_);die=n(kye,"STRONG",{});var Jtt=s(die);n5o=r(Jtt,"sew"),Jtt.forEach(t),s5o=r(kye," \u2014 "),cq=n(kye,"A",{href:!0});var Ytt=s(cq);l5o=r(Ytt,"SEWModel"),Ytt.forEach(t),i5o=r(kye," (SEW model)"),kye.forEach(t),d5o=i($),k_=n($,"LI",{});var Sye=s(k_);cie=n(Sye,"STRONG",{});var Ktt=s(cie);c5o=r(Ktt,"sew-d"),Ktt.forEach(t),f5o=r(Sye," \u2014 "),fq=n(Sye,"A",{href:!0});var Ztt=s(fq);m5o=r(Ztt,"SEWDModel"),Ztt.forEach(t),g5o=r(Sye," (SEW-D model)"),Sye.forEach(t),h5o=i($),S_=n($,"LI",{});var Rye=s(S_);fie=n(Rye,"STRONG",{});var eat=s(fie);p5o=r(eat,"speech_to_text"),eat.forEach(t),_5o=r(Rye," \u2014 "),mq=n(Rye,"A",{href:!0});var oat=s(mq);u5o=r(oat,"Speech2TextModel"),oat.forEach(t),b5o=r(Rye," (Speech2Text model)"),Rye.forEach(t),v5o=i($),R_=n($,"LI",{});var Pye=s(R_);mie=n(Pye,"STRONG",{});var rat=s(mie);F5o=r(rat,"splinter"),rat.forEach(t),T5o=r(Pye," \u2014 "),gq=n(Pye,"A",{href:!0});var tat=s(gq);M5o=r(tat,"SplinterModel"),tat.forEach(t),E5o=r(Pye," (Splinter model)"),Pye.forEach(t),C5o=i($),P_=n($,"LI",{});var Bye=s(P_);gie=n(Bye,"STRONG",{});var aat=s(gie);w5o=r(aat,"squeezebert"),aat.forEach(t),A5o=r(Bye," \u2014 "),hq=n(Bye,"A",{href:!0});var nat=s(hq);y5o=r(nat,"SqueezeBertModel"),nat.forEach(t),L5o=r(Bye," (SqueezeBERT model)"),Bye.forEach(t),x5o=i($),B_=n($,"LI",{});var Iye=s(B_);hie=n(Iye,"STRONG",{});var sat=s(hie);$5o=r(sat,"swin"),sat.forEach(t),k5o=r(Iye," \u2014 "),pq=n(Iye,"A",{href:!0});var lat=s(pq);S5o=r(lat,"SwinModel"),lat.forEach(t),R5o=r(Iye," (Swin model)"),Iye.forEach(t),P5o=i($),I_=n($,"LI",{});var Nye=s(I_);pie=n(Nye,"STRONG",{});var iat=s(pie);B5o=r(iat,"t5"),iat.forEach(t),I5o=r(Nye," \u2014 "),_q=n(Nye,"A",{href:!0});var dat=s(_q);N5o=r(dat,"T5Model"),dat.forEach(t),q5o=r(Nye," (T5 model)"),Nye.forEach(t),j5o=i($),N_=n($,"LI",{});var qye=s(N_);_ie=n(qye,"STRONG",{});var cat=s(_ie);D5o=r(cat,"tapas"),cat.forEach(t),G5o=r(qye," \u2014 "),uq=n(qye,"A",{href:!0});var fat=s(uq);O5o=r(fat,"TapasModel"),fat.forEach(t),V5o=r(qye," (TAPAS model)"),qye.forEach(t),X5o=i($),q_=n($,"LI",{});var jye=s(q_);uie=n(jye,"STRONG",{});var mat=s(uie);z5o=r(mat,"trajectory_transformer"),mat.forEach(t),W5o=r(jye," \u2014 "),bq=n(jye,"A",{href:!0});var gat=s(bq);Q5o=r(gat,"TrajectoryTransformerModel"),gat.forEach(t),H5o=r(jye," (Trajectory Transformer model)"),jye.forEach(t),U5o=i($),j_=n($,"LI",{});var Dye=s(j_);bie=n(Dye,"STRONG",{});var hat=s(bie);J5o=r(hat,"transfo-xl"),hat.forEach(t),Y5o=r(Dye," \u2014 "),vq=n(Dye,"A",{href:!0});var pat=s(vq);K5o=r(pat,"TransfoXLModel"),pat.forEach(t),Z5o=r(Dye," (Transformer-XL model)"),Dye.forEach(t),e3o=i($),D_=n($,"LI",{});var Gye=s(D_);vie=n(Gye,"STRONG",{});var _at=s(vie);o3o=r(_at,"unispeech"),_at.forEach(t),r3o=r(Gye," \u2014 "),Fq=n(Gye,"A",{href:!0});var uat=s(Fq);t3o=r(uat,"UniSpeechModel"),uat.forEach(t),a3o=r(Gye," (UniSpeech model)"),Gye.forEach(t),n3o=i($),G_=n($,"LI",{});var Oye=s(G_);Fie=n(Oye,"STRONG",{});var bat=s(Fie);s3o=r(bat,"unispeech-sat"),bat.forEach(t),l3o=r(Oye," \u2014 "),Tq=n(Oye,"A",{href:!0});var vat=s(Tq);i3o=r(vat,"UniSpeechSatModel"),vat.forEach(t),d3o=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),c3o=i($),O_=n($,"LI",{});var Vye=s(O_);Tie=n(Vye,"STRONG",{});var Fat=s(Tie);f3o=r(Fat,"van"),Fat.forEach(t),m3o=r(Vye," \u2014 "),Mq=n(Vye,"A",{href:!0});var Tat=s(Mq);g3o=r(Tat,"VanModel"),Tat.forEach(t),h3o=r(Vye," (VAN model)"),Vye.forEach(t),p3o=i($),V_=n($,"LI",{});var Xye=s(V_);Mie=n(Xye,"STRONG",{});var Mat=s(Mie);_3o=r(Mat,"vilt"),Mat.forEach(t),u3o=r(Xye," \u2014 "),Eq=n(Xye,"A",{href:!0});var Eat=s(Eq);b3o=r(Eat,"ViltModel"),Eat.forEach(t),v3o=r(Xye," (ViLT model)"),Xye.forEach(t),F3o=i($),X_=n($,"LI",{});var zye=s(X_);Eie=n(zye,"STRONG",{});var Cat=s(Eie);T3o=r(Cat,"vision-text-dual-encoder"),Cat.forEach(t),M3o=r(zye," \u2014 "),Cq=n(zye,"A",{href:!0});var wat=s(Cq);E3o=r(wat,"VisionTextDualEncoderModel"),wat.forEach(t),C3o=r(zye," (VisionTextDualEncoder model)"),zye.forEach(t),w3o=i($),z_=n($,"LI",{});var Wye=s(z_);Cie=n(Wye,"STRONG",{});var Aat=s(Cie);A3o=r(Aat,"visual_bert"),Aat.forEach(t),y3o=r(Wye," \u2014 "),wq=n(Wye,"A",{href:!0});var yat=s(wq);L3o=r(yat,"VisualBertModel"),yat.forEach(t),x3o=r(Wye," (VisualBert model)"),Wye.forEach(t),$3o=i($),W_=n($,"LI",{});var Qye=s(W_);wie=n(Qye,"STRONG",{});var Lat=s(wie);k3o=r(Lat,"vit"),Lat.forEach(t),S3o=r(Qye," \u2014 "),Aq=n(Qye,"A",{href:!0});var xat=s(Aq);R3o=r(xat,"ViTModel"),xat.forEach(t),P3o=r(Qye," (ViT model)"),Qye.forEach(t),B3o=i($),Q_=n($,"LI",{});var Hye=s(Q_);Aie=n(Hye,"STRONG",{});var $at=s(Aie);I3o=r($at,"vit_mae"),$at.forEach(t),N3o=r(Hye," \u2014 "),yq=n(Hye,"A",{href:!0});var kat=s(yq);q3o=r(kat,"ViTMAEModel"),kat.forEach(t),j3o=r(Hye," (ViTMAE model)"),Hye.forEach(t),D3o=i($),H_=n($,"LI",{});var Uye=s(H_);yie=n(Uye,"STRONG",{});var Sat=s(yie);G3o=r(Sat,"wav2vec2"),Sat.forEach(t),O3o=r(Uye," \u2014 "),Lq=n(Uye,"A",{href:!0});var Rat=s(Lq);V3o=r(Rat,"Wav2Vec2Model"),Rat.forEach(t),X3o=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),z3o=i($),U_=n($,"LI",{});var Jye=s(U_);Lie=n(Jye,"STRONG",{});var Pat=s(Lie);W3o=r(Pat,"wav2vec2-conformer"),Pat.forEach(t),Q3o=r(Jye," \u2014 "),xq=n(Jye,"A",{href:!0});var Bat=s(xq);H3o=r(Bat,"Wav2Vec2ConformerModel"),Bat.forEach(t),U3o=r(Jye," (Wav2Vec2-Conformer model)"),Jye.forEach(t),J3o=i($),J_=n($,"LI",{});var Yye=s(J_);xie=n(Yye,"STRONG",{});var Iat=s(xie);Y3o=r(Iat,"wavlm"),Iat.forEach(t),K3o=r(Yye," \u2014 "),$q=n(Yye,"A",{href:!0});var Nat=s($q);Z3o=r(Nat,"WavLMModel"),Nat.forEach(t),eFo=r(Yye," (WavLM model)"),Yye.forEach(t),oFo=i($),Y_=n($,"LI",{});var Kye=s(Y_);$ie=n(Kye,"STRONG",{});var qat=s($ie);rFo=r(qat,"xglm"),qat.forEach(t),tFo=r(Kye," \u2014 "),kq=n(Kye,"A",{href:!0});var jat=s(kq);aFo=r(jat,"XGLMModel"),jat.forEach(t),nFo=r(Kye," (XGLM model)"),Kye.forEach(t),sFo=i($),K_=n($,"LI",{});var Zye=s(K_);kie=n(Zye,"STRONG",{});var Dat=s(kie);lFo=r(Dat,"xlm"),Dat.forEach(t),iFo=r(Zye," \u2014 "),Sq=n(Zye,"A",{href:!0});var Gat=s(Sq);dFo=r(Gat,"XLMModel"),Gat.forEach(t),cFo=r(Zye," (XLM model)"),Zye.forEach(t),fFo=i($),Z_=n($,"LI",{});var eLe=s(Z_);Sie=n(eLe,"STRONG",{});var Oat=s(Sie);mFo=r(Oat,"xlm-prophetnet"),Oat.forEach(t),gFo=r(eLe," \u2014 "),Rq=n(eLe,"A",{href:!0});var Vat=s(Rq);hFo=r(Vat,"XLMProphetNetModel"),Vat.forEach(t),pFo=r(eLe," (XLMProphetNet model)"),eLe.forEach(t),_Fo=i($),eu=n($,"LI",{});var oLe=s(eu);Rie=n(oLe,"STRONG",{});var Xat=s(Rie);uFo=r(Xat,"xlm-roberta"),Xat.forEach(t),bFo=r(oLe," \u2014 "),Pq=n(oLe,"A",{href:!0});var zat=s(Pq);vFo=r(zat,"XLMRobertaModel"),zat.forEach(t),FFo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),TFo=i($),ou=n($,"LI",{});var rLe=s(ou);Pie=n(rLe,"STRONG",{});var Wat=s(Pie);MFo=r(Wat,"xlm-roberta-xl"),Wat.forEach(t),EFo=r(rLe," \u2014 "),Bq=n(rLe,"A",{href:!0});var Qat=s(Bq);CFo=r(Qat,"XLMRobertaXLModel"),Qat.forEach(t),wFo=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),AFo=i($),ru=n($,"LI",{});var tLe=s(ru);Bie=n(tLe,"STRONG",{});var Hat=s(Bie);yFo=r(Hat,"xlnet"),Hat.forEach(t),LFo=r(tLe," \u2014 "),Iq=n(tLe,"A",{href:!0});var Uat=s(Iq);xFo=r(Uat,"XLNetModel"),Uat.forEach(t),$Fo=r(tLe," (XLNet model)"),tLe.forEach(t),kFo=i($),tu=n($,"LI",{});var aLe=s(tu);Iie=n(aLe,"STRONG",{});var Jat=s(Iie);SFo=r(Jat,"yolos"),Jat.forEach(t),RFo=r(aLe," \u2014 "),Nq=n(aLe,"A",{href:!0});var Yat=s(Nq);PFo=r(Yat,"YolosModel"),Yat.forEach(t),BFo=r(aLe," (YOLOS model)"),aLe.forEach(t),IFo=i($),au=n($,"LI",{});var nLe=s(au);Nie=n(nLe,"STRONG",{});var Kat=s(Nie);NFo=r(Kat,"yoso"),Kat.forEach(t),qFo=r(nLe," \u2014 "),qq=n(nLe,"A",{href:!0});var Zat=s(qq);jFo=r(Zat,"YosoModel"),Zat.forEach(t),DFo=r(nLe," (YOSO model)"),nLe.forEach(t),$.forEach(t),GFo=i(ra),nu=n(ra,"P",{});var sLe=s(nu);OFo=r(sLe,"The model is set in evaluation mode by default using "),qie=n(sLe,"CODE",{});var ent=s(qie);VFo=r(ent,"model.eval()"),ent.forEach(t),XFo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(sLe,"CODE",{});var ont=s(jie);zFo=r(ont,"model.train()"),ont.forEach(t),sLe.forEach(t),WFo=i(ra),T(su.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Uqe=i(f),xi=n(f,"H2",{class:!0});var ZDe=s(xi);lu=n(ZDe,"A",{id:!0,class:!0,href:!0});var rnt=s(lu);Die=n(rnt,"SPAN",{});var tnt=s(Die);T(gy.$$.fragment,tnt),tnt.forEach(t),rnt.forEach(t),QFo=i(ZDe),Gie=n(ZDe,"SPAN",{});var ant=s(Gie);HFo=r(ant,"AutoModelForPreTraining"),ant.forEach(t),ZDe.forEach(t),Jqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(hy.$$.fragment,Os),UFo=i(Os),$i=n(Os,"P",{});var BZ=s($i);JFo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(BZ,"A",{href:!0});var nnt=s(jq);YFo=r(nnt,"from_pretrained()"),nnt.forEach(t),KFo=r(BZ," class method or the "),Dq=n(BZ,"A",{href:!0});var snt=s(Dq);ZFo=r(snt,"from_config()"),snt.forEach(t),eTo=r(BZ,` class
method.`),BZ.forEach(t),oTo=i(Os),py=n(Os,"P",{});var eGe=s(py);rTo=r(eGe,"This class cannot be instantiated directly using "),Oie=n(eGe,"CODE",{});var lnt=s(Oie);tTo=r(lnt,"__init__()"),lnt.forEach(t),aTo=r(eGe," (throws an error)."),eGe.forEach(t),nTo=i(Os),nt=n(Os,"DIV",{class:!0});var Vw=s(nt);T(_y.$$.fragment,Vw),sTo=i(Vw),Vie=n(Vw,"P",{});var int=s(Vie);lTo=r(int,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),int.forEach(t),iTo=i(Vw),ki=n(Vw,"P",{});var IZ=s(ki);dTo=r(IZ,`Note:
Loading a model from its configuration file does `),Xie=n(IZ,"STRONG",{});var dnt=s(Xie);cTo=r(dnt,"not"),dnt.forEach(t),fTo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(IZ,"A",{href:!0});var cnt=s(Gq);mTo=r(cnt,"from_pretrained()"),cnt.forEach(t),gTo=r(IZ," to load the model weights."),IZ.forEach(t),hTo=i(Vw),T(iu.$$.fragment,Vw),Vw.forEach(t),pTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ta=s(Ye);T(uy.$$.fragment,ta),_To=i(ta),zie=n(ta,"P",{});var fnt=s(zie);uTo=r(fnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fnt.forEach(t),bTo=i(ta),$a=n(ta,"P",{});var Xw=s($a);vTo=r(Xw,"The model class to instantiate is selected based on the "),Wie=n(Xw,"CODE",{});var mnt=s(Wie);FTo=r(mnt,"model_type"),mnt.forEach(t),TTo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Qie=n(Xw,"CODE",{});var gnt=s(Qie);MTo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),ETo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(Xw,"CODE",{});var hnt=s(Hie);CTo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),wTo=r(Xw,":"),Xw.forEach(t),ATo=i(ta),G=n(ta,"UL",{});var O=s(G);du=n(O,"LI",{});var lLe=s(du);Uie=n(lLe,"STRONG",{});var pnt=s(Uie);yTo=r(pnt,"albert"),pnt.forEach(t),LTo=r(lLe," \u2014 "),Oq=n(lLe,"A",{href:!0});var _nt=s(Oq);xTo=r(_nt,"AlbertForPreTraining"),_nt.forEach(t),$To=r(lLe," (ALBERT model)"),lLe.forEach(t),kTo=i(O),cu=n(O,"LI",{});var iLe=s(cu);Jie=n(iLe,"STRONG",{});var unt=s(Jie);STo=r(unt,"bart"),unt.forEach(t),RTo=r(iLe," \u2014 "),Vq=n(iLe,"A",{href:!0});var bnt=s(Vq);PTo=r(bnt,"BartForConditionalGeneration"),bnt.forEach(t),BTo=r(iLe," (BART model)"),iLe.forEach(t),ITo=i(O),fu=n(O,"LI",{});var dLe=s(fu);Yie=n(dLe,"STRONG",{});var vnt=s(Yie);NTo=r(vnt,"bert"),vnt.forEach(t),qTo=r(dLe," \u2014 "),Xq=n(dLe,"A",{href:!0});var Fnt=s(Xq);jTo=r(Fnt,"BertForPreTraining"),Fnt.forEach(t),DTo=r(dLe," (BERT model)"),dLe.forEach(t),GTo=i(O),mu=n(O,"LI",{});var cLe=s(mu);Kie=n(cLe,"STRONG",{});var Tnt=s(Kie);OTo=r(Tnt,"big_bird"),Tnt.forEach(t),VTo=r(cLe," \u2014 "),zq=n(cLe,"A",{href:!0});var Mnt=s(zq);XTo=r(Mnt,"BigBirdForPreTraining"),Mnt.forEach(t),zTo=r(cLe," (BigBird model)"),cLe.forEach(t),WTo=i(O),gu=n(O,"LI",{});var fLe=s(gu);Zie=n(fLe,"STRONG",{});var Ent=s(Zie);QTo=r(Ent,"camembert"),Ent.forEach(t),HTo=r(fLe," \u2014 "),Wq=n(fLe,"A",{href:!0});var Cnt=s(Wq);UTo=r(Cnt,"CamembertForMaskedLM"),Cnt.forEach(t),JTo=r(fLe," (CamemBERT model)"),fLe.forEach(t),YTo=i(O),hu=n(O,"LI",{});var mLe=s(hu);ede=n(mLe,"STRONG",{});var wnt=s(ede);KTo=r(wnt,"ctrl"),wnt.forEach(t),ZTo=r(mLe," \u2014 "),Qq=n(mLe,"A",{href:!0});var Ant=s(Qq);e7o=r(Ant,"CTRLLMHeadModel"),Ant.forEach(t),o7o=r(mLe," (CTRL model)"),mLe.forEach(t),r7o=i(O),pu=n(O,"LI",{});var gLe=s(pu);ode=n(gLe,"STRONG",{});var ynt=s(ode);t7o=r(ynt,"data2vec-text"),ynt.forEach(t),a7o=r(gLe," \u2014 "),Hq=n(gLe,"A",{href:!0});var Lnt=s(Hq);n7o=r(Lnt,"Data2VecTextForMaskedLM"),Lnt.forEach(t),s7o=r(gLe," (Data2VecText model)"),gLe.forEach(t),l7o=i(O),_u=n(O,"LI",{});var hLe=s(_u);rde=n(hLe,"STRONG",{});var xnt=s(rde);i7o=r(xnt,"deberta"),xnt.forEach(t),d7o=r(hLe," \u2014 "),Uq=n(hLe,"A",{href:!0});var $nt=s(Uq);c7o=r($nt,"DebertaForMaskedLM"),$nt.forEach(t),f7o=r(hLe," (DeBERTa model)"),hLe.forEach(t),m7o=i(O),uu=n(O,"LI",{});var pLe=s(uu);tde=n(pLe,"STRONG",{});var knt=s(tde);g7o=r(knt,"deberta-v2"),knt.forEach(t),h7o=r(pLe," \u2014 "),Jq=n(pLe,"A",{href:!0});var Snt=s(Jq);p7o=r(Snt,"DebertaV2ForMaskedLM"),Snt.forEach(t),_7o=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),u7o=i(O),bu=n(O,"LI",{});var _Le=s(bu);ade=n(_Le,"STRONG",{});var Rnt=s(ade);b7o=r(Rnt,"distilbert"),Rnt.forEach(t),v7o=r(_Le," \u2014 "),Yq=n(_Le,"A",{href:!0});var Pnt=s(Yq);F7o=r(Pnt,"DistilBertForMaskedLM"),Pnt.forEach(t),T7o=r(_Le," (DistilBERT model)"),_Le.forEach(t),M7o=i(O),vu=n(O,"LI",{});var uLe=s(vu);nde=n(uLe,"STRONG",{});var Bnt=s(nde);E7o=r(Bnt,"electra"),Bnt.forEach(t),C7o=r(uLe," \u2014 "),Kq=n(uLe,"A",{href:!0});var Int=s(Kq);w7o=r(Int,"ElectraForPreTraining"),Int.forEach(t),A7o=r(uLe," (ELECTRA model)"),uLe.forEach(t),y7o=i(O),Fu=n(O,"LI",{});var bLe=s(Fu);sde=n(bLe,"STRONG",{});var Nnt=s(sde);L7o=r(Nnt,"flaubert"),Nnt.forEach(t),x7o=r(bLe," \u2014 "),Zq=n(bLe,"A",{href:!0});var qnt=s(Zq);$7o=r(qnt,"FlaubertWithLMHeadModel"),qnt.forEach(t),k7o=r(bLe," (FlauBERT model)"),bLe.forEach(t),S7o=i(O),Tu=n(O,"LI",{});var vLe=s(Tu);lde=n(vLe,"STRONG",{});var jnt=s(lde);R7o=r(jnt,"flava"),jnt.forEach(t),P7o=r(vLe," \u2014 "),ej=n(vLe,"A",{href:!0});var Dnt=s(ej);B7o=r(Dnt,"FlavaForPreTraining"),Dnt.forEach(t),I7o=r(vLe," (Flava model)"),vLe.forEach(t),N7o=i(O),Mu=n(O,"LI",{});var FLe=s(Mu);ide=n(FLe,"STRONG",{});var Gnt=s(ide);q7o=r(Gnt,"fnet"),Gnt.forEach(t),j7o=r(FLe," \u2014 "),oj=n(FLe,"A",{href:!0});var Ont=s(oj);D7o=r(Ont,"FNetForPreTraining"),Ont.forEach(t),G7o=r(FLe," (FNet model)"),FLe.forEach(t),O7o=i(O),Eu=n(O,"LI",{});var TLe=s(Eu);dde=n(TLe,"STRONG",{});var Vnt=s(dde);V7o=r(Vnt,"fsmt"),Vnt.forEach(t),X7o=r(TLe," \u2014 "),rj=n(TLe,"A",{href:!0});var Xnt=s(rj);z7o=r(Xnt,"FSMTForConditionalGeneration"),Xnt.forEach(t),W7o=r(TLe," (FairSeq Machine-Translation model)"),TLe.forEach(t),Q7o=i(O),Cu=n(O,"LI",{});var MLe=s(Cu);cde=n(MLe,"STRONG",{});var znt=s(cde);H7o=r(znt,"funnel"),znt.forEach(t),U7o=r(MLe," \u2014 "),tj=n(MLe,"A",{href:!0});var Wnt=s(tj);J7o=r(Wnt,"FunnelForPreTraining"),Wnt.forEach(t),Y7o=r(MLe," (Funnel Transformer model)"),MLe.forEach(t),K7o=i(O),wu=n(O,"LI",{});var ELe=s(wu);fde=n(ELe,"STRONG",{});var Qnt=s(fde);Z7o=r(Qnt,"gpt2"),Qnt.forEach(t),eMo=r(ELe," \u2014 "),aj=n(ELe,"A",{href:!0});var Hnt=s(aj);oMo=r(Hnt,"GPT2LMHeadModel"),Hnt.forEach(t),rMo=r(ELe," (OpenAI GPT-2 model)"),ELe.forEach(t),tMo=i(O),Au=n(O,"LI",{});var CLe=s(Au);mde=n(CLe,"STRONG",{});var Unt=s(mde);aMo=r(Unt,"ibert"),Unt.forEach(t),nMo=r(CLe," \u2014 "),nj=n(CLe,"A",{href:!0});var Jnt=s(nj);sMo=r(Jnt,"IBertForMaskedLM"),Jnt.forEach(t),lMo=r(CLe," (I-BERT model)"),CLe.forEach(t),iMo=i(O),yu=n(O,"LI",{});var wLe=s(yu);gde=n(wLe,"STRONG",{});var Ynt=s(gde);dMo=r(Ynt,"layoutlm"),Ynt.forEach(t),cMo=r(wLe," \u2014 "),sj=n(wLe,"A",{href:!0});var Knt=s(sj);fMo=r(Knt,"LayoutLMForMaskedLM"),Knt.forEach(t),mMo=r(wLe," (LayoutLM model)"),wLe.forEach(t),gMo=i(O),Lu=n(O,"LI",{});var ALe=s(Lu);hde=n(ALe,"STRONG",{});var Znt=s(hde);hMo=r(Znt,"longformer"),Znt.forEach(t),pMo=r(ALe," \u2014 "),lj=n(ALe,"A",{href:!0});var est=s(lj);_Mo=r(est,"LongformerForMaskedLM"),est.forEach(t),uMo=r(ALe," (Longformer model)"),ALe.forEach(t),bMo=i(O),xu=n(O,"LI",{});var yLe=s(xu);pde=n(yLe,"STRONG",{});var ost=s(pde);vMo=r(ost,"lxmert"),ost.forEach(t),FMo=r(yLe," \u2014 "),ij=n(yLe,"A",{href:!0});var rst=s(ij);TMo=r(rst,"LxmertForPreTraining"),rst.forEach(t),MMo=r(yLe," (LXMERT model)"),yLe.forEach(t),EMo=i(O),$u=n(O,"LI",{});var LLe=s($u);_de=n(LLe,"STRONG",{});var tst=s(_de);CMo=r(tst,"megatron-bert"),tst.forEach(t),wMo=r(LLe," \u2014 "),dj=n(LLe,"A",{href:!0});var ast=s(dj);AMo=r(ast,"MegatronBertForPreTraining"),ast.forEach(t),yMo=r(LLe," (MegatronBert model)"),LLe.forEach(t),LMo=i(O),ku=n(O,"LI",{});var xLe=s(ku);ude=n(xLe,"STRONG",{});var nst=s(ude);xMo=r(nst,"mobilebert"),nst.forEach(t),$Mo=r(xLe," \u2014 "),cj=n(xLe,"A",{href:!0});var sst=s(cj);kMo=r(sst,"MobileBertForPreTraining"),sst.forEach(t),SMo=r(xLe," (MobileBERT model)"),xLe.forEach(t),RMo=i(O),Su=n(O,"LI",{});var $Le=s(Su);bde=n($Le,"STRONG",{});var lst=s(bde);PMo=r(lst,"mpnet"),lst.forEach(t),BMo=r($Le," \u2014 "),fj=n($Le,"A",{href:!0});var ist=s(fj);IMo=r(ist,"MPNetForMaskedLM"),ist.forEach(t),NMo=r($Le," (MPNet model)"),$Le.forEach(t),qMo=i(O),Ru=n(O,"LI",{});var kLe=s(Ru);vde=n(kLe,"STRONG",{});var dst=s(vde);jMo=r(dst,"openai-gpt"),dst.forEach(t),DMo=r(kLe," \u2014 "),mj=n(kLe,"A",{href:!0});var cst=s(mj);GMo=r(cst,"OpenAIGPTLMHeadModel"),cst.forEach(t),OMo=r(kLe," (OpenAI GPT model)"),kLe.forEach(t),VMo=i(O),Pu=n(O,"LI",{});var SLe=s(Pu);Fde=n(SLe,"STRONG",{});var fst=s(Fde);XMo=r(fst,"retribert"),fst.forEach(t),zMo=r(SLe," \u2014 "),gj=n(SLe,"A",{href:!0});var mst=s(gj);WMo=r(mst,"RetriBertModel"),mst.forEach(t),QMo=r(SLe," (RetriBERT model)"),SLe.forEach(t),HMo=i(O),Bu=n(O,"LI",{});var RLe=s(Bu);Tde=n(RLe,"STRONG",{});var gst=s(Tde);UMo=r(gst,"roberta"),gst.forEach(t),JMo=r(RLe," \u2014 "),hj=n(RLe,"A",{href:!0});var hst=s(hj);YMo=r(hst,"RobertaForMaskedLM"),hst.forEach(t),KMo=r(RLe," (RoBERTa model)"),RLe.forEach(t),ZMo=i(O),Iu=n(O,"LI",{});var PLe=s(Iu);Mde=n(PLe,"STRONG",{});var pst=s(Mde);eEo=r(pst,"splinter"),pst.forEach(t),oEo=r(PLe," \u2014 "),pj=n(PLe,"A",{href:!0});var _st=s(pj);rEo=r(_st,"SplinterForPreTraining"),_st.forEach(t),tEo=r(PLe," (Splinter model)"),PLe.forEach(t),aEo=i(O),Nu=n(O,"LI",{});var BLe=s(Nu);Ede=n(BLe,"STRONG",{});var ust=s(Ede);nEo=r(ust,"squeezebert"),ust.forEach(t),sEo=r(BLe," \u2014 "),_j=n(BLe,"A",{href:!0});var bst=s(_j);lEo=r(bst,"SqueezeBertForMaskedLM"),bst.forEach(t),iEo=r(BLe," (SqueezeBERT model)"),BLe.forEach(t),dEo=i(O),qu=n(O,"LI",{});var ILe=s(qu);Cde=n(ILe,"STRONG",{});var vst=s(Cde);cEo=r(vst,"t5"),vst.forEach(t),fEo=r(ILe," \u2014 "),uj=n(ILe,"A",{href:!0});var Fst=s(uj);mEo=r(Fst,"T5ForConditionalGeneration"),Fst.forEach(t),gEo=r(ILe," (T5 model)"),ILe.forEach(t),hEo=i(O),ju=n(O,"LI",{});var NLe=s(ju);wde=n(NLe,"STRONG",{});var Tst=s(wde);pEo=r(Tst,"tapas"),Tst.forEach(t),_Eo=r(NLe," \u2014 "),bj=n(NLe,"A",{href:!0});var Mst=s(bj);uEo=r(Mst,"TapasForMaskedLM"),Mst.forEach(t),bEo=r(NLe," (TAPAS model)"),NLe.forEach(t),vEo=i(O),Du=n(O,"LI",{});var qLe=s(Du);Ade=n(qLe,"STRONG",{});var Est=s(Ade);FEo=r(Est,"transfo-xl"),Est.forEach(t),TEo=r(qLe," \u2014 "),vj=n(qLe,"A",{href:!0});var Cst=s(vj);MEo=r(Cst,"TransfoXLLMHeadModel"),Cst.forEach(t),EEo=r(qLe," (Transformer-XL model)"),qLe.forEach(t),CEo=i(O),Gu=n(O,"LI",{});var jLe=s(Gu);yde=n(jLe,"STRONG",{});var wst=s(yde);wEo=r(wst,"unispeech"),wst.forEach(t),AEo=r(jLe," \u2014 "),Fj=n(jLe,"A",{href:!0});var Ast=s(Fj);yEo=r(Ast,"UniSpeechForPreTraining"),Ast.forEach(t),LEo=r(jLe," (UniSpeech model)"),jLe.forEach(t),xEo=i(O),Ou=n(O,"LI",{});var DLe=s(Ou);Lde=n(DLe,"STRONG",{});var yst=s(Lde);$Eo=r(yst,"unispeech-sat"),yst.forEach(t),kEo=r(DLe," \u2014 "),Tj=n(DLe,"A",{href:!0});var Lst=s(Tj);SEo=r(Lst,"UniSpeechSatForPreTraining"),Lst.forEach(t),REo=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),PEo=i(O),Vu=n(O,"LI",{});var GLe=s(Vu);xde=n(GLe,"STRONG",{});var xst=s(xde);BEo=r(xst,"visual_bert"),xst.forEach(t),IEo=r(GLe," \u2014 "),Mj=n(GLe,"A",{href:!0});var $st=s(Mj);NEo=r($st,"VisualBertForPreTraining"),$st.forEach(t),qEo=r(GLe," (VisualBert model)"),GLe.forEach(t),jEo=i(O),Xu=n(O,"LI",{});var OLe=s(Xu);$de=n(OLe,"STRONG",{});var kst=s($de);DEo=r(kst,"vit_mae"),kst.forEach(t),GEo=r(OLe," \u2014 "),Ej=n(OLe,"A",{href:!0});var Sst=s(Ej);OEo=r(Sst,"ViTMAEForPreTraining"),Sst.forEach(t),VEo=r(OLe," (ViTMAE model)"),OLe.forEach(t),XEo=i(O),zu=n(O,"LI",{});var VLe=s(zu);kde=n(VLe,"STRONG",{});var Rst=s(kde);zEo=r(Rst,"wav2vec2"),Rst.forEach(t),WEo=r(VLe," \u2014 "),Cj=n(VLe,"A",{href:!0});var Pst=s(Cj);QEo=r(Pst,"Wav2Vec2ForPreTraining"),Pst.forEach(t),HEo=r(VLe," (Wav2Vec2 model)"),VLe.forEach(t),UEo=i(O),Wu=n(O,"LI",{});var XLe=s(Wu);Sde=n(XLe,"STRONG",{});var Bst=s(Sde);JEo=r(Bst,"wav2vec2-conformer"),Bst.forEach(t),YEo=r(XLe," \u2014 "),wj=n(XLe,"A",{href:!0});var Ist=s(wj);KEo=r(Ist,"Wav2Vec2ConformerForPreTraining"),Ist.forEach(t),ZEo=r(XLe," (Wav2Vec2-Conformer model)"),XLe.forEach(t),eCo=i(O),Qu=n(O,"LI",{});var zLe=s(Qu);Rde=n(zLe,"STRONG",{});var Nst=s(Rde);oCo=r(Nst,"xlm"),Nst.forEach(t),rCo=r(zLe," \u2014 "),Aj=n(zLe,"A",{href:!0});var qst=s(Aj);tCo=r(qst,"XLMWithLMHeadModel"),qst.forEach(t),aCo=r(zLe," (XLM model)"),zLe.forEach(t),nCo=i(O),Hu=n(O,"LI",{});var WLe=s(Hu);Pde=n(WLe,"STRONG",{});var jst=s(Pde);sCo=r(jst,"xlm-roberta"),jst.forEach(t),lCo=r(WLe," \u2014 "),yj=n(WLe,"A",{href:!0});var Dst=s(yj);iCo=r(Dst,"XLMRobertaForMaskedLM"),Dst.forEach(t),dCo=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),cCo=i(O),Uu=n(O,"LI",{});var QLe=s(Uu);Bde=n(QLe,"STRONG",{});var Gst=s(Bde);fCo=r(Gst,"xlm-roberta-xl"),Gst.forEach(t),mCo=r(QLe," \u2014 "),Lj=n(QLe,"A",{href:!0});var Ost=s(Lj);gCo=r(Ost,"XLMRobertaXLForMaskedLM"),Ost.forEach(t),hCo=r(QLe," (XLM-RoBERTa-XL model)"),QLe.forEach(t),pCo=i(O),Ju=n(O,"LI",{});var HLe=s(Ju);Ide=n(HLe,"STRONG",{});var Vst=s(Ide);_Co=r(Vst,"xlnet"),Vst.forEach(t),uCo=r(HLe," \u2014 "),xj=n(HLe,"A",{href:!0});var Xst=s(xj);bCo=r(Xst,"XLNetLMHeadModel"),Xst.forEach(t),vCo=r(HLe," (XLNet model)"),HLe.forEach(t),O.forEach(t),FCo=i(ta),Yu=n(ta,"P",{});var ULe=s(Yu);TCo=r(ULe,"The model is set in evaluation mode by default using "),Nde=n(ULe,"CODE",{});var zst=s(Nde);MCo=r(zst,"model.eval()"),zst.forEach(t),ECo=r(ULe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(ULe,"CODE",{});var Wst=s(qde);CCo=r(Wst,"model.train()"),Wst.forEach(t),ULe.forEach(t),wCo=i(ta),T(Ku.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Yqe=i(f),Si=n(f,"H2",{class:!0});var oGe=s(Si);Zu=n(oGe,"A",{id:!0,class:!0,href:!0});var Qst=s(Zu);jde=n(Qst,"SPAN",{});var Hst=s(jde);T(by.$$.fragment,Hst),Hst.forEach(t),Qst.forEach(t),ACo=i(oGe),Dde=n(oGe,"SPAN",{});var Ust=s(Dde);yCo=r(Ust,"AutoModelForCausalLM"),Ust.forEach(t),oGe.forEach(t),Kqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(vy.$$.fragment,Vs),LCo=i(Vs),Ri=n(Vs,"P",{});var NZ=s(Ri);xCo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=n(NZ,"A",{href:!0});var Jst=s($j);$Co=r(Jst,"from_pretrained()"),Jst.forEach(t),kCo=r(NZ," class method or the "),kj=n(NZ,"A",{href:!0});var Yst=s(kj);SCo=r(Yst,"from_config()"),Yst.forEach(t),RCo=r(NZ,` class
method.`),NZ.forEach(t),PCo=i(Vs),Fy=n(Vs,"P",{});var rGe=s(Fy);BCo=r(rGe,"This class cannot be instantiated directly using "),Gde=n(rGe,"CODE",{});var Kst=s(Gde);ICo=r(Kst,"__init__()"),Kst.forEach(t),NCo=r(rGe," (throws an error)."),rGe.forEach(t),qCo=i(Vs),st=n(Vs,"DIV",{class:!0});var zw=s(st);T(Ty.$$.fragment,zw),jCo=i(zw),Ode=n(zw,"P",{});var Zst=s(Ode);DCo=r(Zst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zst.forEach(t),GCo=i(zw),Pi=n(zw,"P",{});var qZ=s(Pi);OCo=r(qZ,`Note:
Loading a model from its configuration file does `),Vde=n(qZ,"STRONG",{});var elt=s(Vde);VCo=r(elt,"not"),elt.forEach(t),XCo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(qZ,"A",{href:!0});var olt=s(Sj);zCo=r(olt,"from_pretrained()"),olt.forEach(t),WCo=r(qZ," to load the model weights."),qZ.forEach(t),QCo=i(zw),T(e1.$$.fragment,zw),zw.forEach(t),HCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var aa=s(Ke);T(My.$$.fragment,aa),UCo=i(aa),Xde=n(aa,"P",{});var rlt=s(Xde);JCo=r(rlt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rlt.forEach(t),YCo=i(aa),ka=n(aa,"P",{});var Ww=s(ka);KCo=r(Ww,"The model class to instantiate is selected based on the "),zde=n(Ww,"CODE",{});var tlt=s(zde);ZCo=r(tlt,"model_type"),tlt.forEach(t),e0o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Wde=n(Ww,"CODE",{});var alt=s(Wde);o0o=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),r0o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=n(Ww,"CODE",{});var nlt=s(Qde);t0o=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),a0o=r(Ww,":"),Ww.forEach(t),n0o=i(aa),z=n(aa,"UL",{});var W=s(z);o1=n(W,"LI",{});var JLe=s(o1);Hde=n(JLe,"STRONG",{});var slt=s(Hde);s0o=r(slt,"bart"),slt.forEach(t),l0o=r(JLe," \u2014 "),Rj=n(JLe,"A",{href:!0});var llt=s(Rj);i0o=r(llt,"BartForCausalLM"),llt.forEach(t),d0o=r(JLe," (BART model)"),JLe.forEach(t),c0o=i(W),r1=n(W,"LI",{});var YLe=s(r1);Ude=n(YLe,"STRONG",{});var ilt=s(Ude);f0o=r(ilt,"bert"),ilt.forEach(t),m0o=r(YLe," \u2014 "),Pj=n(YLe,"A",{href:!0});var dlt=s(Pj);g0o=r(dlt,"BertLMHeadModel"),dlt.forEach(t),h0o=r(YLe," (BERT model)"),YLe.forEach(t),p0o=i(W),t1=n(W,"LI",{});var KLe=s(t1);Jde=n(KLe,"STRONG",{});var clt=s(Jde);_0o=r(clt,"bert-generation"),clt.forEach(t),u0o=r(KLe," \u2014 "),Bj=n(KLe,"A",{href:!0});var flt=s(Bj);b0o=r(flt,"BertGenerationDecoder"),flt.forEach(t),v0o=r(KLe," (Bert Generation model)"),KLe.forEach(t),F0o=i(W),a1=n(W,"LI",{});var ZLe=s(a1);Yde=n(ZLe,"STRONG",{});var mlt=s(Yde);T0o=r(mlt,"big_bird"),mlt.forEach(t),M0o=r(ZLe," \u2014 "),Ij=n(ZLe,"A",{href:!0});var glt=s(Ij);E0o=r(glt,"BigBirdForCausalLM"),glt.forEach(t),C0o=r(ZLe," (BigBird model)"),ZLe.forEach(t),w0o=i(W),n1=n(W,"LI",{});var e8e=s(n1);Kde=n(e8e,"STRONG",{});var hlt=s(Kde);A0o=r(hlt,"bigbird_pegasus"),hlt.forEach(t),y0o=r(e8e," \u2014 "),Nj=n(e8e,"A",{href:!0});var plt=s(Nj);L0o=r(plt,"BigBirdPegasusForCausalLM"),plt.forEach(t),x0o=r(e8e," (BigBirdPegasus model)"),e8e.forEach(t),$0o=i(W),s1=n(W,"LI",{});var o8e=s(s1);Zde=n(o8e,"STRONG",{});var _lt=s(Zde);k0o=r(_lt,"blenderbot"),_lt.forEach(t),S0o=r(o8e," \u2014 "),qj=n(o8e,"A",{href:!0});var ult=s(qj);R0o=r(ult,"BlenderbotForCausalLM"),ult.forEach(t),P0o=r(o8e," (Blenderbot model)"),o8e.forEach(t),B0o=i(W),l1=n(W,"LI",{});var r8e=s(l1);ece=n(r8e,"STRONG",{});var blt=s(ece);I0o=r(blt,"blenderbot-small"),blt.forEach(t),N0o=r(r8e," \u2014 "),jj=n(r8e,"A",{href:!0});var vlt=s(jj);q0o=r(vlt,"BlenderbotSmallForCausalLM"),vlt.forEach(t),j0o=r(r8e," (BlenderbotSmall model)"),r8e.forEach(t),D0o=i(W),i1=n(W,"LI",{});var t8e=s(i1);oce=n(t8e,"STRONG",{});var Flt=s(oce);G0o=r(Flt,"camembert"),Flt.forEach(t),O0o=r(t8e," \u2014 "),Dj=n(t8e,"A",{href:!0});var Tlt=s(Dj);V0o=r(Tlt,"CamembertForCausalLM"),Tlt.forEach(t),X0o=r(t8e," (CamemBERT model)"),t8e.forEach(t),z0o=i(W),d1=n(W,"LI",{});var a8e=s(d1);rce=n(a8e,"STRONG",{});var Mlt=s(rce);W0o=r(Mlt,"ctrl"),Mlt.forEach(t),Q0o=r(a8e," \u2014 "),Gj=n(a8e,"A",{href:!0});var Elt=s(Gj);H0o=r(Elt,"CTRLLMHeadModel"),Elt.forEach(t),U0o=r(a8e," (CTRL model)"),a8e.forEach(t),J0o=i(W),c1=n(W,"LI",{});var n8e=s(c1);tce=n(n8e,"STRONG",{});var Clt=s(tce);Y0o=r(Clt,"data2vec-text"),Clt.forEach(t),K0o=r(n8e," \u2014 "),Oj=n(n8e,"A",{href:!0});var wlt=s(Oj);Z0o=r(wlt,"Data2VecTextForCausalLM"),wlt.forEach(t),ewo=r(n8e," (Data2VecText model)"),n8e.forEach(t),owo=i(W),f1=n(W,"LI",{});var s8e=s(f1);ace=n(s8e,"STRONG",{});var Alt=s(ace);rwo=r(Alt,"electra"),Alt.forEach(t),two=r(s8e," \u2014 "),Vj=n(s8e,"A",{href:!0});var ylt=s(Vj);awo=r(ylt,"ElectraForCausalLM"),ylt.forEach(t),nwo=r(s8e," (ELECTRA model)"),s8e.forEach(t),swo=i(W),m1=n(W,"LI",{});var l8e=s(m1);nce=n(l8e,"STRONG",{});var Llt=s(nce);lwo=r(Llt,"gpt2"),Llt.forEach(t),iwo=r(l8e," \u2014 "),Xj=n(l8e,"A",{href:!0});var xlt=s(Xj);dwo=r(xlt,"GPT2LMHeadModel"),xlt.forEach(t),cwo=r(l8e," (OpenAI GPT-2 model)"),l8e.forEach(t),fwo=i(W),g1=n(W,"LI",{});var i8e=s(g1);sce=n(i8e,"STRONG",{});var $lt=s(sce);mwo=r($lt,"gpt_neo"),$lt.forEach(t),gwo=r(i8e," \u2014 "),zj=n(i8e,"A",{href:!0});var klt=s(zj);hwo=r(klt,"GPTNeoForCausalLM"),klt.forEach(t),pwo=r(i8e," (GPT Neo model)"),i8e.forEach(t),_wo=i(W),h1=n(W,"LI",{});var d8e=s(h1);lce=n(d8e,"STRONG",{});var Slt=s(lce);uwo=r(Slt,"gpt_neox"),Slt.forEach(t),bwo=r(d8e," \u2014 "),Wj=n(d8e,"A",{href:!0});var Rlt=s(Wj);vwo=r(Rlt,"GPTNeoXForCausalLM"),Rlt.forEach(t),Fwo=r(d8e," (GPT NeoX model)"),d8e.forEach(t),Two=i(W),p1=n(W,"LI",{});var c8e=s(p1);ice=n(c8e,"STRONG",{});var Plt=s(ice);Mwo=r(Plt,"gptj"),Plt.forEach(t),Ewo=r(c8e," \u2014 "),Qj=n(c8e,"A",{href:!0});var Blt=s(Qj);Cwo=r(Blt,"GPTJForCausalLM"),Blt.forEach(t),wwo=r(c8e," (GPT-J model)"),c8e.forEach(t),Awo=i(W),_1=n(W,"LI",{});var f8e=s(_1);dce=n(f8e,"STRONG",{});var Ilt=s(dce);ywo=r(Ilt,"marian"),Ilt.forEach(t),Lwo=r(f8e," \u2014 "),Hj=n(f8e,"A",{href:!0});var Nlt=s(Hj);xwo=r(Nlt,"MarianForCausalLM"),Nlt.forEach(t),$wo=r(f8e," (Marian model)"),f8e.forEach(t),kwo=i(W),u1=n(W,"LI",{});var m8e=s(u1);cce=n(m8e,"STRONG",{});var qlt=s(cce);Swo=r(qlt,"mbart"),qlt.forEach(t),Rwo=r(m8e," \u2014 "),Uj=n(m8e,"A",{href:!0});var jlt=s(Uj);Pwo=r(jlt,"MBartForCausalLM"),jlt.forEach(t),Bwo=r(m8e," (mBART model)"),m8e.forEach(t),Iwo=i(W),b1=n(W,"LI",{});var g8e=s(b1);fce=n(g8e,"STRONG",{});var Dlt=s(fce);Nwo=r(Dlt,"megatron-bert"),Dlt.forEach(t),qwo=r(g8e," \u2014 "),Jj=n(g8e,"A",{href:!0});var Glt=s(Jj);jwo=r(Glt,"MegatronBertForCausalLM"),Glt.forEach(t),Dwo=r(g8e," (MegatronBert model)"),g8e.forEach(t),Gwo=i(W),v1=n(W,"LI",{});var h8e=s(v1);mce=n(h8e,"STRONG",{});var Olt=s(mce);Owo=r(Olt,"openai-gpt"),Olt.forEach(t),Vwo=r(h8e," \u2014 "),Yj=n(h8e,"A",{href:!0});var Vlt=s(Yj);Xwo=r(Vlt,"OpenAIGPTLMHeadModel"),Vlt.forEach(t),zwo=r(h8e," (OpenAI GPT model)"),h8e.forEach(t),Wwo=i(W),F1=n(W,"LI",{});var p8e=s(F1);gce=n(p8e,"STRONG",{});var Xlt=s(gce);Qwo=r(Xlt,"opt"),Xlt.forEach(t),Hwo=r(p8e," \u2014 "),Kj=n(p8e,"A",{href:!0});var zlt=s(Kj);Uwo=r(zlt,"OPTForCausalLM"),zlt.forEach(t),Jwo=r(p8e," (OPT model)"),p8e.forEach(t),Ywo=i(W),T1=n(W,"LI",{});var _8e=s(T1);hce=n(_8e,"STRONG",{});var Wlt=s(hce);Kwo=r(Wlt,"pegasus"),Wlt.forEach(t),Zwo=r(_8e," \u2014 "),Zj=n(_8e,"A",{href:!0});var Qlt=s(Zj);e6o=r(Qlt,"PegasusForCausalLM"),Qlt.forEach(t),o6o=r(_8e," (Pegasus model)"),_8e.forEach(t),r6o=i(W),M1=n(W,"LI",{});var u8e=s(M1);pce=n(u8e,"STRONG",{});var Hlt=s(pce);t6o=r(Hlt,"plbart"),Hlt.forEach(t),a6o=r(u8e," \u2014 "),eD=n(u8e,"A",{href:!0});var Ult=s(eD);n6o=r(Ult,"PLBartForCausalLM"),Ult.forEach(t),s6o=r(u8e," (PLBart model)"),u8e.forEach(t),l6o=i(W),E1=n(W,"LI",{});var b8e=s(E1);_ce=n(b8e,"STRONG",{});var Jlt=s(_ce);i6o=r(Jlt,"prophetnet"),Jlt.forEach(t),d6o=r(b8e," \u2014 "),oD=n(b8e,"A",{href:!0});var Ylt=s(oD);c6o=r(Ylt,"ProphetNetForCausalLM"),Ylt.forEach(t),f6o=r(b8e," (ProphetNet model)"),b8e.forEach(t),m6o=i(W),C1=n(W,"LI",{});var v8e=s(C1);uce=n(v8e,"STRONG",{});var Klt=s(uce);g6o=r(Klt,"qdqbert"),Klt.forEach(t),h6o=r(v8e," \u2014 "),rD=n(v8e,"A",{href:!0});var Zlt=s(rD);p6o=r(Zlt,"QDQBertLMHeadModel"),Zlt.forEach(t),_6o=r(v8e," (QDQBert model)"),v8e.forEach(t),u6o=i(W),w1=n(W,"LI",{});var F8e=s(w1);bce=n(F8e,"STRONG",{});var eit=s(bce);b6o=r(eit,"reformer"),eit.forEach(t),v6o=r(F8e," \u2014 "),tD=n(F8e,"A",{href:!0});var oit=s(tD);F6o=r(oit,"ReformerModelWithLMHead"),oit.forEach(t),T6o=r(F8e," (Reformer model)"),F8e.forEach(t),M6o=i(W),A1=n(W,"LI",{});var T8e=s(A1);vce=n(T8e,"STRONG",{});var rit=s(vce);E6o=r(rit,"rembert"),rit.forEach(t),C6o=r(T8e," \u2014 "),aD=n(T8e,"A",{href:!0});var tit=s(aD);w6o=r(tit,"RemBertForCausalLM"),tit.forEach(t),A6o=r(T8e," (RemBERT model)"),T8e.forEach(t),y6o=i(W),y1=n(W,"LI",{});var M8e=s(y1);Fce=n(M8e,"STRONG",{});var ait=s(Fce);L6o=r(ait,"roberta"),ait.forEach(t),x6o=r(M8e," \u2014 "),nD=n(M8e,"A",{href:!0});var nit=s(nD);$6o=r(nit,"RobertaForCausalLM"),nit.forEach(t),k6o=r(M8e," (RoBERTa model)"),M8e.forEach(t),S6o=i(W),L1=n(W,"LI",{});var E8e=s(L1);Tce=n(E8e,"STRONG",{});var sit=s(Tce);R6o=r(sit,"roformer"),sit.forEach(t),P6o=r(E8e," \u2014 "),sD=n(E8e,"A",{href:!0});var lit=s(sD);B6o=r(lit,"RoFormerForCausalLM"),lit.forEach(t),I6o=r(E8e," (RoFormer model)"),E8e.forEach(t),N6o=i(W),x1=n(W,"LI",{});var C8e=s(x1);Mce=n(C8e,"STRONG",{});var iit=s(Mce);q6o=r(iit,"speech_to_text_2"),iit.forEach(t),j6o=r(C8e," \u2014 "),lD=n(C8e,"A",{href:!0});var dit=s(lD);D6o=r(dit,"Speech2Text2ForCausalLM"),dit.forEach(t),G6o=r(C8e," (Speech2Text2 model)"),C8e.forEach(t),O6o=i(W),$1=n(W,"LI",{});var w8e=s($1);Ece=n(w8e,"STRONG",{});var cit=s(Ece);V6o=r(cit,"transfo-xl"),cit.forEach(t),X6o=r(w8e," \u2014 "),iD=n(w8e,"A",{href:!0});var fit=s(iD);z6o=r(fit,"TransfoXLLMHeadModel"),fit.forEach(t),W6o=r(w8e," (Transformer-XL model)"),w8e.forEach(t),Q6o=i(W),k1=n(W,"LI",{});var A8e=s(k1);Cce=n(A8e,"STRONG",{});var mit=s(Cce);H6o=r(mit,"trocr"),mit.forEach(t),U6o=r(A8e," \u2014 "),dD=n(A8e,"A",{href:!0});var git=s(dD);J6o=r(git,"TrOCRForCausalLM"),git.forEach(t),Y6o=r(A8e," (TrOCR model)"),A8e.forEach(t),K6o=i(W),S1=n(W,"LI",{});var y8e=s(S1);wce=n(y8e,"STRONG",{});var hit=s(wce);Z6o=r(hit,"xglm"),hit.forEach(t),eAo=r(y8e," \u2014 "),cD=n(y8e,"A",{href:!0});var pit=s(cD);oAo=r(pit,"XGLMForCausalLM"),pit.forEach(t),rAo=r(y8e," (XGLM model)"),y8e.forEach(t),tAo=i(W),R1=n(W,"LI",{});var L8e=s(R1);Ace=n(L8e,"STRONG",{});var _it=s(Ace);aAo=r(_it,"xlm"),_it.forEach(t),nAo=r(L8e," \u2014 "),fD=n(L8e,"A",{href:!0});var uit=s(fD);sAo=r(uit,"XLMWithLMHeadModel"),uit.forEach(t),lAo=r(L8e," (XLM model)"),L8e.forEach(t),iAo=i(W),P1=n(W,"LI",{});var x8e=s(P1);yce=n(x8e,"STRONG",{});var bit=s(yce);dAo=r(bit,"xlm-prophetnet"),bit.forEach(t),cAo=r(x8e," \u2014 "),mD=n(x8e,"A",{href:!0});var vit=s(mD);fAo=r(vit,"XLMProphetNetForCausalLM"),vit.forEach(t),mAo=r(x8e," (XLMProphetNet model)"),x8e.forEach(t),gAo=i(W),B1=n(W,"LI",{});var $8e=s(B1);Lce=n($8e,"STRONG",{});var Fit=s(Lce);hAo=r(Fit,"xlm-roberta"),Fit.forEach(t),pAo=r($8e," \u2014 "),gD=n($8e,"A",{href:!0});var Tit=s(gD);_Ao=r(Tit,"XLMRobertaForCausalLM"),Tit.forEach(t),uAo=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),bAo=i(W),I1=n(W,"LI",{});var k8e=s(I1);xce=n(k8e,"STRONG",{});var Mit=s(xce);vAo=r(Mit,"xlm-roberta-xl"),Mit.forEach(t),FAo=r(k8e," \u2014 "),hD=n(k8e,"A",{href:!0});var Eit=s(hD);TAo=r(Eit,"XLMRobertaXLForCausalLM"),Eit.forEach(t),MAo=r(k8e," (XLM-RoBERTa-XL model)"),k8e.forEach(t),EAo=i(W),N1=n(W,"LI",{});var S8e=s(N1);$ce=n(S8e,"STRONG",{});var Cit=s($ce);CAo=r(Cit,"xlnet"),Cit.forEach(t),wAo=r(S8e," \u2014 "),pD=n(S8e,"A",{href:!0});var wit=s(pD);AAo=r(wit,"XLNetLMHeadModel"),wit.forEach(t),yAo=r(S8e," (XLNet model)"),S8e.forEach(t),W.forEach(t),LAo=i(aa),q1=n(aa,"P",{});var R8e=s(q1);xAo=r(R8e,"The model is set in evaluation mode by default using "),kce=n(R8e,"CODE",{});var Ait=s(kce);$Ao=r(Ait,"model.eval()"),Ait.forEach(t),kAo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(R8e,"CODE",{});var yit=s(Sce);SAo=r(yit,"model.train()"),yit.forEach(t),R8e.forEach(t),RAo=i(aa),T(j1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Zqe=i(f),Bi=n(f,"H2",{class:!0});var tGe=s(Bi);D1=n(tGe,"A",{id:!0,class:!0,href:!0});var Lit=s(D1);Rce=n(Lit,"SPAN",{});var xit=s(Rce);T(Ey.$$.fragment,xit),xit.forEach(t),Lit.forEach(t),PAo=i(tGe),Pce=n(tGe,"SPAN",{});var $it=s(Pce);BAo=r($it,"AutoModelForMaskedLM"),$it.forEach(t),tGe.forEach(t),eje=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Cy.$$.fragment,Xs),IAo=i(Xs),Ii=n(Xs,"P",{});var jZ=s(Ii);NAo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_D=n(jZ,"A",{href:!0});var kit=s(_D);qAo=r(kit,"from_pretrained()"),kit.forEach(t),jAo=r(jZ," class method or the "),uD=n(jZ,"A",{href:!0});var Sit=s(uD);DAo=r(Sit,"from_config()"),Sit.forEach(t),GAo=r(jZ,` class
method.`),jZ.forEach(t),OAo=i(Xs),wy=n(Xs,"P",{});var aGe=s(wy);VAo=r(aGe,"This class cannot be instantiated directly using "),Bce=n(aGe,"CODE",{});var Rit=s(Bce);XAo=r(Rit,"__init__()"),Rit.forEach(t),zAo=r(aGe," (throws an error)."),aGe.forEach(t),WAo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Qw=s(lt);T(Ay.$$.fragment,Qw),QAo=i(Qw),Ice=n(Qw,"P",{});var Pit=s(Ice);HAo=r(Pit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pit.forEach(t),UAo=i(Qw),Ni=n(Qw,"P",{});var DZ=s(Ni);JAo=r(DZ,`Note:
Loading a model from its configuration file does `),Nce=n(DZ,"STRONG",{});var Bit=s(Nce);YAo=r(Bit,"not"),Bit.forEach(t),KAo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(DZ,"A",{href:!0});var Iit=s(bD);ZAo=r(Iit,"from_pretrained()"),Iit.forEach(t),eyo=r(DZ," to load the model weights."),DZ.forEach(t),oyo=i(Qw),T(G1.$$.fragment,Qw),Qw.forEach(t),ryo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var na=s(Ze);T(yy.$$.fragment,na),tyo=i(na),qce=n(na,"P",{});var Nit=s(qce);ayo=r(Nit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nit.forEach(t),nyo=i(na),Sa=n(na,"P",{});var Hw=s(Sa);syo=r(Hw,"The model class to instantiate is selected based on the "),jce=n(Hw,"CODE",{});var qit=s(jce);lyo=r(qit,"model_type"),qit.forEach(t),iyo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Dce=n(Hw,"CODE",{});var jit=s(Dce);dyo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),cyo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=n(Hw,"CODE",{});var Dit=s(Gce);fyo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),myo=r(Hw,":"),Hw.forEach(t),gyo=i(na),Q=n(na,"UL",{});var U=s(Q);O1=n(U,"LI",{});var P8e=s(O1);Oce=n(P8e,"STRONG",{});var Git=s(Oce);hyo=r(Git,"albert"),Git.forEach(t),pyo=r(P8e," \u2014 "),vD=n(P8e,"A",{href:!0});var Oit=s(vD);_yo=r(Oit,"AlbertForMaskedLM"),Oit.forEach(t),uyo=r(P8e," (ALBERT model)"),P8e.forEach(t),byo=i(U),V1=n(U,"LI",{});var B8e=s(V1);Vce=n(B8e,"STRONG",{});var Vit=s(Vce);vyo=r(Vit,"bart"),Vit.forEach(t),Fyo=r(B8e," \u2014 "),FD=n(B8e,"A",{href:!0});var Xit=s(FD);Tyo=r(Xit,"BartForConditionalGeneration"),Xit.forEach(t),Myo=r(B8e," (BART model)"),B8e.forEach(t),Eyo=i(U),X1=n(U,"LI",{});var I8e=s(X1);Xce=n(I8e,"STRONG",{});var zit=s(Xce);Cyo=r(zit,"bert"),zit.forEach(t),wyo=r(I8e," \u2014 "),TD=n(I8e,"A",{href:!0});var Wit=s(TD);Ayo=r(Wit,"BertForMaskedLM"),Wit.forEach(t),yyo=r(I8e," (BERT model)"),I8e.forEach(t),Lyo=i(U),z1=n(U,"LI",{});var N8e=s(z1);zce=n(N8e,"STRONG",{});var Qit=s(zce);xyo=r(Qit,"big_bird"),Qit.forEach(t),$yo=r(N8e," \u2014 "),MD=n(N8e,"A",{href:!0});var Hit=s(MD);kyo=r(Hit,"BigBirdForMaskedLM"),Hit.forEach(t),Syo=r(N8e," (BigBird model)"),N8e.forEach(t),Ryo=i(U),W1=n(U,"LI",{});var q8e=s(W1);Wce=n(q8e,"STRONG",{});var Uit=s(Wce);Pyo=r(Uit,"camembert"),Uit.forEach(t),Byo=r(q8e," \u2014 "),ED=n(q8e,"A",{href:!0});var Jit=s(ED);Iyo=r(Jit,"CamembertForMaskedLM"),Jit.forEach(t),Nyo=r(q8e," (CamemBERT model)"),q8e.forEach(t),qyo=i(U),Q1=n(U,"LI",{});var j8e=s(Q1);Qce=n(j8e,"STRONG",{});var Yit=s(Qce);jyo=r(Yit,"convbert"),Yit.forEach(t),Dyo=r(j8e," \u2014 "),CD=n(j8e,"A",{href:!0});var Kit=s(CD);Gyo=r(Kit,"ConvBertForMaskedLM"),Kit.forEach(t),Oyo=r(j8e," (ConvBERT model)"),j8e.forEach(t),Vyo=i(U),H1=n(U,"LI",{});var D8e=s(H1);Hce=n(D8e,"STRONG",{});var Zit=s(Hce);Xyo=r(Zit,"data2vec-text"),Zit.forEach(t),zyo=r(D8e," \u2014 "),wD=n(D8e,"A",{href:!0});var edt=s(wD);Wyo=r(edt,"Data2VecTextForMaskedLM"),edt.forEach(t),Qyo=r(D8e," (Data2VecText model)"),D8e.forEach(t),Hyo=i(U),U1=n(U,"LI",{});var G8e=s(U1);Uce=n(G8e,"STRONG",{});var odt=s(Uce);Uyo=r(odt,"deberta"),odt.forEach(t),Jyo=r(G8e," \u2014 "),AD=n(G8e,"A",{href:!0});var rdt=s(AD);Yyo=r(rdt,"DebertaForMaskedLM"),rdt.forEach(t),Kyo=r(G8e," (DeBERTa model)"),G8e.forEach(t),Zyo=i(U),J1=n(U,"LI",{});var O8e=s(J1);Jce=n(O8e,"STRONG",{});var tdt=s(Jce);eLo=r(tdt,"deberta-v2"),tdt.forEach(t),oLo=r(O8e," \u2014 "),yD=n(O8e,"A",{href:!0});var adt=s(yD);rLo=r(adt,"DebertaV2ForMaskedLM"),adt.forEach(t),tLo=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),aLo=i(U),Y1=n(U,"LI",{});var V8e=s(Y1);Yce=n(V8e,"STRONG",{});var ndt=s(Yce);nLo=r(ndt,"distilbert"),ndt.forEach(t),sLo=r(V8e," \u2014 "),LD=n(V8e,"A",{href:!0});var sdt=s(LD);lLo=r(sdt,"DistilBertForMaskedLM"),sdt.forEach(t),iLo=r(V8e," (DistilBERT model)"),V8e.forEach(t),dLo=i(U),K1=n(U,"LI",{});var X8e=s(K1);Kce=n(X8e,"STRONG",{});var ldt=s(Kce);cLo=r(ldt,"electra"),ldt.forEach(t),fLo=r(X8e," \u2014 "),xD=n(X8e,"A",{href:!0});var idt=s(xD);mLo=r(idt,"ElectraForMaskedLM"),idt.forEach(t),gLo=r(X8e," (ELECTRA model)"),X8e.forEach(t),hLo=i(U),Z1=n(U,"LI",{});var z8e=s(Z1);Zce=n(z8e,"STRONG",{});var ddt=s(Zce);pLo=r(ddt,"flaubert"),ddt.forEach(t),_Lo=r(z8e," \u2014 "),$D=n(z8e,"A",{href:!0});var cdt=s($D);uLo=r(cdt,"FlaubertWithLMHeadModel"),cdt.forEach(t),bLo=r(z8e," (FlauBERT model)"),z8e.forEach(t),vLo=i(U),eb=n(U,"LI",{});var W8e=s(eb);efe=n(W8e,"STRONG",{});var fdt=s(efe);FLo=r(fdt,"fnet"),fdt.forEach(t),TLo=r(W8e," \u2014 "),kD=n(W8e,"A",{href:!0});var mdt=s(kD);MLo=r(mdt,"FNetForMaskedLM"),mdt.forEach(t),ELo=r(W8e," (FNet model)"),W8e.forEach(t),CLo=i(U),ob=n(U,"LI",{});var Q8e=s(ob);ofe=n(Q8e,"STRONG",{});var gdt=s(ofe);wLo=r(gdt,"funnel"),gdt.forEach(t),ALo=r(Q8e," \u2014 "),SD=n(Q8e,"A",{href:!0});var hdt=s(SD);yLo=r(hdt,"FunnelForMaskedLM"),hdt.forEach(t),LLo=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),xLo=i(U),rb=n(U,"LI",{});var H8e=s(rb);rfe=n(H8e,"STRONG",{});var pdt=s(rfe);$Lo=r(pdt,"ibert"),pdt.forEach(t),kLo=r(H8e," \u2014 "),RD=n(H8e,"A",{href:!0});var _dt=s(RD);SLo=r(_dt,"IBertForMaskedLM"),_dt.forEach(t),RLo=r(H8e," (I-BERT model)"),H8e.forEach(t),PLo=i(U),tb=n(U,"LI",{});var U8e=s(tb);tfe=n(U8e,"STRONG",{});var udt=s(tfe);BLo=r(udt,"layoutlm"),udt.forEach(t),ILo=r(U8e," \u2014 "),PD=n(U8e,"A",{href:!0});var bdt=s(PD);NLo=r(bdt,"LayoutLMForMaskedLM"),bdt.forEach(t),qLo=r(U8e," (LayoutLM model)"),U8e.forEach(t),jLo=i(U),ab=n(U,"LI",{});var J8e=s(ab);afe=n(J8e,"STRONG",{});var vdt=s(afe);DLo=r(vdt,"longformer"),vdt.forEach(t),GLo=r(J8e," \u2014 "),BD=n(J8e,"A",{href:!0});var Fdt=s(BD);OLo=r(Fdt,"LongformerForMaskedLM"),Fdt.forEach(t),VLo=r(J8e," (Longformer model)"),J8e.forEach(t),XLo=i(U),nb=n(U,"LI",{});var Y8e=s(nb);nfe=n(Y8e,"STRONG",{});var Tdt=s(nfe);zLo=r(Tdt,"mbart"),Tdt.forEach(t),WLo=r(Y8e," \u2014 "),ID=n(Y8e,"A",{href:!0});var Mdt=s(ID);QLo=r(Mdt,"MBartForConditionalGeneration"),Mdt.forEach(t),HLo=r(Y8e," (mBART model)"),Y8e.forEach(t),ULo=i(U),sb=n(U,"LI",{});var K8e=s(sb);sfe=n(K8e,"STRONG",{});var Edt=s(sfe);JLo=r(Edt,"megatron-bert"),Edt.forEach(t),YLo=r(K8e," \u2014 "),ND=n(K8e,"A",{href:!0});var Cdt=s(ND);KLo=r(Cdt,"MegatronBertForMaskedLM"),Cdt.forEach(t),ZLo=r(K8e," (MegatronBert model)"),K8e.forEach(t),e8o=i(U),lb=n(U,"LI",{});var Z8e=s(lb);lfe=n(Z8e,"STRONG",{});var wdt=s(lfe);o8o=r(wdt,"mobilebert"),wdt.forEach(t),r8o=r(Z8e," \u2014 "),qD=n(Z8e,"A",{href:!0});var Adt=s(qD);t8o=r(Adt,"MobileBertForMaskedLM"),Adt.forEach(t),a8o=r(Z8e," (MobileBERT model)"),Z8e.forEach(t),n8o=i(U),ib=n(U,"LI",{});var e9e=s(ib);ife=n(e9e,"STRONG",{});var ydt=s(ife);s8o=r(ydt,"mpnet"),ydt.forEach(t),l8o=r(e9e," \u2014 "),jD=n(e9e,"A",{href:!0});var Ldt=s(jD);i8o=r(Ldt,"MPNetForMaskedLM"),Ldt.forEach(t),d8o=r(e9e," (MPNet model)"),e9e.forEach(t),c8o=i(U),db=n(U,"LI",{});var o9e=s(db);dfe=n(o9e,"STRONG",{});var xdt=s(dfe);f8o=r(xdt,"nystromformer"),xdt.forEach(t),m8o=r(o9e," \u2014 "),DD=n(o9e,"A",{href:!0});var $dt=s(DD);g8o=r($dt,"NystromformerForMaskedLM"),$dt.forEach(t),h8o=r(o9e," (Nystromformer model)"),o9e.forEach(t),p8o=i(U),cb=n(U,"LI",{});var r9e=s(cb);cfe=n(r9e,"STRONG",{});var kdt=s(cfe);_8o=r(kdt,"perceiver"),kdt.forEach(t),u8o=r(r9e," \u2014 "),GD=n(r9e,"A",{href:!0});var Sdt=s(GD);b8o=r(Sdt,"PerceiverForMaskedLM"),Sdt.forEach(t),v8o=r(r9e," (Perceiver model)"),r9e.forEach(t),F8o=i(U),fb=n(U,"LI",{});var t9e=s(fb);ffe=n(t9e,"STRONG",{});var Rdt=s(ffe);T8o=r(Rdt,"qdqbert"),Rdt.forEach(t),M8o=r(t9e," \u2014 "),OD=n(t9e,"A",{href:!0});var Pdt=s(OD);E8o=r(Pdt,"QDQBertForMaskedLM"),Pdt.forEach(t),C8o=r(t9e," (QDQBert model)"),t9e.forEach(t),w8o=i(U),mb=n(U,"LI",{});var a9e=s(mb);mfe=n(a9e,"STRONG",{});var Bdt=s(mfe);A8o=r(Bdt,"reformer"),Bdt.forEach(t),y8o=r(a9e," \u2014 "),VD=n(a9e,"A",{href:!0});var Idt=s(VD);L8o=r(Idt,"ReformerForMaskedLM"),Idt.forEach(t),x8o=r(a9e," (Reformer model)"),a9e.forEach(t),$8o=i(U),gb=n(U,"LI",{});var n9e=s(gb);gfe=n(n9e,"STRONG",{});var Ndt=s(gfe);k8o=r(Ndt,"rembert"),Ndt.forEach(t),S8o=r(n9e," \u2014 "),XD=n(n9e,"A",{href:!0});var qdt=s(XD);R8o=r(qdt,"RemBertForMaskedLM"),qdt.forEach(t),P8o=r(n9e," (RemBERT model)"),n9e.forEach(t),B8o=i(U),hb=n(U,"LI",{});var s9e=s(hb);hfe=n(s9e,"STRONG",{});var jdt=s(hfe);I8o=r(jdt,"roberta"),jdt.forEach(t),N8o=r(s9e," \u2014 "),zD=n(s9e,"A",{href:!0});var Ddt=s(zD);q8o=r(Ddt,"RobertaForMaskedLM"),Ddt.forEach(t),j8o=r(s9e," (RoBERTa model)"),s9e.forEach(t),D8o=i(U),pb=n(U,"LI",{});var l9e=s(pb);pfe=n(l9e,"STRONG",{});var Gdt=s(pfe);G8o=r(Gdt,"roformer"),Gdt.forEach(t),O8o=r(l9e," \u2014 "),WD=n(l9e,"A",{href:!0});var Odt=s(WD);V8o=r(Odt,"RoFormerForMaskedLM"),Odt.forEach(t),X8o=r(l9e," (RoFormer model)"),l9e.forEach(t),z8o=i(U),_b=n(U,"LI",{});var i9e=s(_b);_fe=n(i9e,"STRONG",{});var Vdt=s(_fe);W8o=r(Vdt,"squeezebert"),Vdt.forEach(t),Q8o=r(i9e," \u2014 "),QD=n(i9e,"A",{href:!0});var Xdt=s(QD);H8o=r(Xdt,"SqueezeBertForMaskedLM"),Xdt.forEach(t),U8o=r(i9e," (SqueezeBERT model)"),i9e.forEach(t),J8o=i(U),ub=n(U,"LI",{});var d9e=s(ub);ufe=n(d9e,"STRONG",{});var zdt=s(ufe);Y8o=r(zdt,"tapas"),zdt.forEach(t),K8o=r(d9e," \u2014 "),HD=n(d9e,"A",{href:!0});var Wdt=s(HD);Z8o=r(Wdt,"TapasForMaskedLM"),Wdt.forEach(t),e9o=r(d9e," (TAPAS model)"),d9e.forEach(t),o9o=i(U),bb=n(U,"LI",{});var c9e=s(bb);bfe=n(c9e,"STRONG",{});var Qdt=s(bfe);r9o=r(Qdt,"wav2vec2"),Qdt.forEach(t),t9o=r(c9e," \u2014 "),vfe=n(c9e,"CODE",{});var Hdt=s(vfe);a9o=r(Hdt,"Wav2Vec2ForMaskedLM"),Hdt.forEach(t),n9o=r(c9e," (Wav2Vec2 model)"),c9e.forEach(t),s9o=i(U),vb=n(U,"LI",{});var f9e=s(vb);Ffe=n(f9e,"STRONG",{});var Udt=s(Ffe);l9o=r(Udt,"xlm"),Udt.forEach(t),i9o=r(f9e," \u2014 "),UD=n(f9e,"A",{href:!0});var Jdt=s(UD);d9o=r(Jdt,"XLMWithLMHeadModel"),Jdt.forEach(t),c9o=r(f9e," (XLM model)"),f9e.forEach(t),f9o=i(U),Fb=n(U,"LI",{});var m9e=s(Fb);Tfe=n(m9e,"STRONG",{});var Ydt=s(Tfe);m9o=r(Ydt,"xlm-roberta"),Ydt.forEach(t),g9o=r(m9e," \u2014 "),JD=n(m9e,"A",{href:!0});var Kdt=s(JD);h9o=r(Kdt,"XLMRobertaForMaskedLM"),Kdt.forEach(t),p9o=r(m9e," (XLM-RoBERTa model)"),m9e.forEach(t),_9o=i(U),Tb=n(U,"LI",{});var g9e=s(Tb);Mfe=n(g9e,"STRONG",{});var Zdt=s(Mfe);u9o=r(Zdt,"xlm-roberta-xl"),Zdt.forEach(t),b9o=r(g9e," \u2014 "),YD=n(g9e,"A",{href:!0});var ect=s(YD);v9o=r(ect,"XLMRobertaXLForMaskedLM"),ect.forEach(t),F9o=r(g9e," (XLM-RoBERTa-XL model)"),g9e.forEach(t),T9o=i(U),Mb=n(U,"LI",{});var h9e=s(Mb);Efe=n(h9e,"STRONG",{});var oct=s(Efe);M9o=r(oct,"yoso"),oct.forEach(t),E9o=r(h9e," \u2014 "),KD=n(h9e,"A",{href:!0});var rct=s(KD);C9o=r(rct,"YosoForMaskedLM"),rct.forEach(t),w9o=r(h9e," (YOSO model)"),h9e.forEach(t),U.forEach(t),A9o=i(na),Eb=n(na,"P",{});var p9e=s(Eb);y9o=r(p9e,"The model is set in evaluation mode by default using "),Cfe=n(p9e,"CODE",{});var tct=s(Cfe);L9o=r(tct,"model.eval()"),tct.forEach(t),x9o=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(p9e,"CODE",{});var act=s(wfe);$9o=r(act,"model.train()"),act.forEach(t),p9e.forEach(t),k9o=i(na),T(Cb.$$.fragment,na),na.forEach(t),Xs.forEach(t),oje=i(f),qi=n(f,"H2",{class:!0});var nGe=s(qi);wb=n(nGe,"A",{id:!0,class:!0,href:!0});var nct=s(wb);Afe=n(nct,"SPAN",{});var sct=s(Afe);T(Ly.$$.fragment,sct),sct.forEach(t),nct.forEach(t),S9o=i(nGe),yfe=n(nGe,"SPAN",{});var lct=s(yfe);R9o=r(lct,"AutoModelForSeq2SeqLM"),lct.forEach(t),nGe.forEach(t),rje=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(xy.$$.fragment,zs),P9o=i(zs),ji=n(zs,"P",{});var GZ=s(ji);B9o=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=n(GZ,"A",{href:!0});var ict=s(ZD);I9o=r(ict,"from_pretrained()"),ict.forEach(t),N9o=r(GZ," class method or the "),eG=n(GZ,"A",{href:!0});var dct=s(eG);q9o=r(dct,"from_config()"),dct.forEach(t),j9o=r(GZ,` class
method.`),GZ.forEach(t),D9o=i(zs),$y=n(zs,"P",{});var sGe=s($y);G9o=r(sGe,"This class cannot be instantiated directly using "),Lfe=n(sGe,"CODE",{});var cct=s(Lfe);O9o=r(cct,"__init__()"),cct.forEach(t),V9o=r(sGe," (throws an error)."),sGe.forEach(t),X9o=i(zs),it=n(zs,"DIV",{class:!0});var Uw=s(it);T(ky.$$.fragment,Uw),z9o=i(Uw),xfe=n(Uw,"P",{});var fct=s(xfe);W9o=r(fct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fct.forEach(t),Q9o=i(Uw),Di=n(Uw,"P",{});var OZ=s(Di);H9o=r(OZ,`Note:
Loading a model from its configuration file does `),$fe=n(OZ,"STRONG",{});var mct=s($fe);U9o=r(mct,"not"),mct.forEach(t),J9o=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(OZ,"A",{href:!0});var gct=s(oG);Y9o=r(gct,"from_pretrained()"),gct.forEach(t),K9o=r(OZ," to load the model weights."),OZ.forEach(t),Z9o=i(Uw),T(Ab.$$.fragment,Uw),Uw.forEach(t),exo=i(zs),eo=n(zs,"DIV",{class:!0});var sa=s(eo);T(Sy.$$.fragment,sa),oxo=i(sa),kfe=n(sa,"P",{});var hct=s(kfe);rxo=r(hct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hct.forEach(t),txo=i(sa),Ra=n(sa,"P",{});var Jw=s(Ra);axo=r(Jw,"The model class to instantiate is selected based on the "),Sfe=n(Jw,"CODE",{});var pct=s(Sfe);nxo=r(pct,"model_type"),pct.forEach(t),sxo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(Jw,"CODE",{});var _ct=s(Rfe);lxo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),ixo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(Jw,"CODE",{});var uct=s(Pfe);dxo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),cxo=r(Jw,":"),Jw.forEach(t),fxo=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);yb=n(Fe,"LI",{});var _9e=s(yb);Bfe=n(_9e,"STRONG",{});var bct=s(Bfe);mxo=r(bct,"bart"),bct.forEach(t),gxo=r(_9e," \u2014 "),rG=n(_9e,"A",{href:!0});var vct=s(rG);hxo=r(vct,"BartForConditionalGeneration"),vct.forEach(t),pxo=r(_9e," (BART model)"),_9e.forEach(t),_xo=i(Fe),Lb=n(Fe,"LI",{});var u9e=s(Lb);Ife=n(u9e,"STRONG",{});var Fct=s(Ife);uxo=r(Fct,"bigbird_pegasus"),Fct.forEach(t),bxo=r(u9e," \u2014 "),tG=n(u9e,"A",{href:!0});var Tct=s(tG);vxo=r(Tct,"BigBirdPegasusForConditionalGeneration"),Tct.forEach(t),Fxo=r(u9e," (BigBirdPegasus model)"),u9e.forEach(t),Txo=i(Fe),xb=n(Fe,"LI",{});var b9e=s(xb);Nfe=n(b9e,"STRONG",{});var Mct=s(Nfe);Mxo=r(Mct,"blenderbot"),Mct.forEach(t),Exo=r(b9e," \u2014 "),aG=n(b9e,"A",{href:!0});var Ect=s(aG);Cxo=r(Ect,"BlenderbotForConditionalGeneration"),Ect.forEach(t),wxo=r(b9e," (Blenderbot model)"),b9e.forEach(t),Axo=i(Fe),$b=n(Fe,"LI",{});var v9e=s($b);qfe=n(v9e,"STRONG",{});var Cct=s(qfe);yxo=r(Cct,"blenderbot-small"),Cct.forEach(t),Lxo=r(v9e," \u2014 "),nG=n(v9e,"A",{href:!0});var wct=s(nG);xxo=r(wct,"BlenderbotSmallForConditionalGeneration"),wct.forEach(t),$xo=r(v9e," (BlenderbotSmall model)"),v9e.forEach(t),kxo=i(Fe),kb=n(Fe,"LI",{});var F9e=s(kb);jfe=n(F9e,"STRONG",{});var Act=s(jfe);Sxo=r(Act,"encoder-decoder"),Act.forEach(t),Rxo=r(F9e," \u2014 "),sG=n(F9e,"A",{href:!0});var yct=s(sG);Pxo=r(yct,"EncoderDecoderModel"),yct.forEach(t),Bxo=r(F9e," (Encoder decoder model)"),F9e.forEach(t),Ixo=i(Fe),Sb=n(Fe,"LI",{});var T9e=s(Sb);Dfe=n(T9e,"STRONG",{});var Lct=s(Dfe);Nxo=r(Lct,"fsmt"),Lct.forEach(t),qxo=r(T9e," \u2014 "),lG=n(T9e,"A",{href:!0});var xct=s(lG);jxo=r(xct,"FSMTForConditionalGeneration"),xct.forEach(t),Dxo=r(T9e," (FairSeq Machine-Translation model)"),T9e.forEach(t),Gxo=i(Fe),Rb=n(Fe,"LI",{});var M9e=s(Rb);Gfe=n(M9e,"STRONG",{});var $ct=s(Gfe);Oxo=r($ct,"led"),$ct.forEach(t),Vxo=r(M9e," \u2014 "),iG=n(M9e,"A",{href:!0});var kct=s(iG);Xxo=r(kct,"LEDForConditionalGeneration"),kct.forEach(t),zxo=r(M9e," (LED model)"),M9e.forEach(t),Wxo=i(Fe),Pb=n(Fe,"LI",{});var E9e=s(Pb);Ofe=n(E9e,"STRONG",{});var Sct=s(Ofe);Qxo=r(Sct,"m2m_100"),Sct.forEach(t),Hxo=r(E9e," \u2014 "),dG=n(E9e,"A",{href:!0});var Rct=s(dG);Uxo=r(Rct,"M2M100ForConditionalGeneration"),Rct.forEach(t),Jxo=r(E9e," (M2M100 model)"),E9e.forEach(t),Yxo=i(Fe),Bb=n(Fe,"LI",{});var C9e=s(Bb);Vfe=n(C9e,"STRONG",{});var Pct=s(Vfe);Kxo=r(Pct,"marian"),Pct.forEach(t),Zxo=r(C9e," \u2014 "),cG=n(C9e,"A",{href:!0});var Bct=s(cG);e$o=r(Bct,"MarianMTModel"),Bct.forEach(t),o$o=r(C9e," (Marian model)"),C9e.forEach(t),r$o=i(Fe),Ib=n(Fe,"LI",{});var w9e=s(Ib);Xfe=n(w9e,"STRONG",{});var Ict=s(Xfe);t$o=r(Ict,"mbart"),Ict.forEach(t),a$o=r(w9e," \u2014 "),fG=n(w9e,"A",{href:!0});var Nct=s(fG);n$o=r(Nct,"MBartForConditionalGeneration"),Nct.forEach(t),s$o=r(w9e," (mBART model)"),w9e.forEach(t),l$o=i(Fe),Nb=n(Fe,"LI",{});var A9e=s(Nb);zfe=n(A9e,"STRONG",{});var qct=s(zfe);i$o=r(qct,"mt5"),qct.forEach(t),d$o=r(A9e," \u2014 "),mG=n(A9e,"A",{href:!0});var jct=s(mG);c$o=r(jct,"MT5ForConditionalGeneration"),jct.forEach(t),f$o=r(A9e," (mT5 model)"),A9e.forEach(t),m$o=i(Fe),qb=n(Fe,"LI",{});var y9e=s(qb);Wfe=n(y9e,"STRONG",{});var Dct=s(Wfe);g$o=r(Dct,"pegasus"),Dct.forEach(t),h$o=r(y9e," \u2014 "),gG=n(y9e,"A",{href:!0});var Gct=s(gG);p$o=r(Gct,"PegasusForConditionalGeneration"),Gct.forEach(t),_$o=r(y9e," (Pegasus model)"),y9e.forEach(t),u$o=i(Fe),jb=n(Fe,"LI",{});var L9e=s(jb);Qfe=n(L9e,"STRONG",{});var Oct=s(Qfe);b$o=r(Oct,"plbart"),Oct.forEach(t),v$o=r(L9e," \u2014 "),hG=n(L9e,"A",{href:!0});var Vct=s(hG);F$o=r(Vct,"PLBartForConditionalGeneration"),Vct.forEach(t),T$o=r(L9e," (PLBart model)"),L9e.forEach(t),M$o=i(Fe),Db=n(Fe,"LI",{});var x9e=s(Db);Hfe=n(x9e,"STRONG",{});var Xct=s(Hfe);E$o=r(Xct,"prophetnet"),Xct.forEach(t),C$o=r(x9e," \u2014 "),pG=n(x9e,"A",{href:!0});var zct=s(pG);w$o=r(zct,"ProphetNetForConditionalGeneration"),zct.forEach(t),A$o=r(x9e," (ProphetNet model)"),x9e.forEach(t),y$o=i(Fe),Gb=n(Fe,"LI",{});var $9e=s(Gb);Ufe=n($9e,"STRONG",{});var Wct=s(Ufe);L$o=r(Wct,"t5"),Wct.forEach(t),x$o=r($9e," \u2014 "),_G=n($9e,"A",{href:!0});var Qct=s(_G);$$o=r(Qct,"T5ForConditionalGeneration"),Qct.forEach(t),k$o=r($9e," (T5 model)"),$9e.forEach(t),S$o=i(Fe),Ob=n(Fe,"LI",{});var k9e=s(Ob);Jfe=n(k9e,"STRONG",{});var Hct=s(Jfe);R$o=r(Hct,"xlm-prophetnet"),Hct.forEach(t),P$o=r(k9e," \u2014 "),uG=n(k9e,"A",{href:!0});var Uct=s(uG);B$o=r(Uct,"XLMProphetNetForConditionalGeneration"),Uct.forEach(t),I$o=r(k9e," (XLMProphetNet model)"),k9e.forEach(t),Fe.forEach(t),N$o=i(sa),Vb=n(sa,"P",{});var S9e=s(Vb);q$o=r(S9e,"The model is set in evaluation mode by default using "),Yfe=n(S9e,"CODE",{});var Jct=s(Yfe);j$o=r(Jct,"model.eval()"),Jct.forEach(t),D$o=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(S9e,"CODE",{});var Yct=s(Kfe);G$o=r(Yct,"model.train()"),Yct.forEach(t),S9e.forEach(t),O$o=i(sa),T(Xb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),tje=i(f),Gi=n(f,"H2",{class:!0});var lGe=s(Gi);zb=n(lGe,"A",{id:!0,class:!0,href:!0});var Kct=s(zb);Zfe=n(Kct,"SPAN",{});var Zct=s(Zfe);T(Ry.$$.fragment,Zct),Zct.forEach(t),Kct.forEach(t),V$o=i(lGe),eme=n(lGe,"SPAN",{});var eft=s(eme);X$o=r(eft,"AutoModelForSequenceClassification"),eft.forEach(t),lGe.forEach(t),aje=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(Py.$$.fragment,Ws),z$o=i(Ws),Oi=n(Ws,"P",{});var VZ=s(Oi);W$o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bG=n(VZ,"A",{href:!0});var oft=s(bG);Q$o=r(oft,"from_pretrained()"),oft.forEach(t),H$o=r(VZ," class method or the "),vG=n(VZ,"A",{href:!0});var rft=s(vG);U$o=r(rft,"from_config()"),rft.forEach(t),J$o=r(VZ,` class
method.`),VZ.forEach(t),Y$o=i(Ws),By=n(Ws,"P",{});var iGe=s(By);K$o=r(iGe,"This class cannot be instantiated directly using "),ome=n(iGe,"CODE",{});var tft=s(ome);Z$o=r(tft,"__init__()"),tft.forEach(t),eko=r(iGe," (throws an error)."),iGe.forEach(t),oko=i(Ws),dt=n(Ws,"DIV",{class:!0});var Yw=s(dt);T(Iy.$$.fragment,Yw),rko=i(Yw),rme=n(Yw,"P",{});var aft=s(rme);tko=r(aft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aft.forEach(t),ako=i(Yw),Vi=n(Yw,"P",{});var XZ=s(Vi);nko=r(XZ,`Note:
Loading a model from its configuration file does `),tme=n(XZ,"STRONG",{});var nft=s(tme);sko=r(nft,"not"),nft.forEach(t),lko=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(XZ,"A",{href:!0});var sft=s(FG);iko=r(sft,"from_pretrained()"),sft.forEach(t),dko=r(XZ," to load the model weights."),XZ.forEach(t),cko=i(Yw),T(Wb.$$.fragment,Yw),Yw.forEach(t),fko=i(Ws),oo=n(Ws,"DIV",{class:!0});var la=s(oo);T(Ny.$$.fragment,la),mko=i(la),ame=n(la,"P",{});var lft=s(ame);gko=r(lft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lft.forEach(t),hko=i(la),Pa=n(la,"P",{});var Kw=s(Pa);pko=r(Kw,"The model class to instantiate is selected based on the "),nme=n(Kw,"CODE",{});var ift=s(nme);_ko=r(ift,"model_type"),ift.forEach(t),uko=r(Kw,` property of the config object (either
passed as an argument or loaded from `),sme=n(Kw,"CODE",{});var dft=s(sme);bko=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),vko=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(Kw,"CODE",{});var cft=s(lme);Fko=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),Tko=r(Kw,":"),Kw.forEach(t),Mko=i(la),N=n(la,"UL",{});var j=s(N);Qb=n(j,"LI",{});var R9e=s(Qb);ime=n(R9e,"STRONG",{});var fft=s(ime);Eko=r(fft,"albert"),fft.forEach(t),Cko=r(R9e," \u2014 "),TG=n(R9e,"A",{href:!0});var mft=s(TG);wko=r(mft,"AlbertForSequenceClassification"),mft.forEach(t),Ako=r(R9e," (ALBERT model)"),R9e.forEach(t),yko=i(j),Hb=n(j,"LI",{});var P9e=s(Hb);dme=n(P9e,"STRONG",{});var gft=s(dme);Lko=r(gft,"bart"),gft.forEach(t),xko=r(P9e," \u2014 "),MG=n(P9e,"A",{href:!0});var hft=s(MG);$ko=r(hft,"BartForSequenceClassification"),hft.forEach(t),kko=r(P9e," (BART model)"),P9e.forEach(t),Sko=i(j),Ub=n(j,"LI",{});var B9e=s(Ub);cme=n(B9e,"STRONG",{});var pft=s(cme);Rko=r(pft,"bert"),pft.forEach(t),Pko=r(B9e," \u2014 "),EG=n(B9e,"A",{href:!0});var _ft=s(EG);Bko=r(_ft,"BertForSequenceClassification"),_ft.forEach(t),Iko=r(B9e," (BERT model)"),B9e.forEach(t),Nko=i(j),Jb=n(j,"LI",{});var I9e=s(Jb);fme=n(I9e,"STRONG",{});var uft=s(fme);qko=r(uft,"big_bird"),uft.forEach(t),jko=r(I9e," \u2014 "),CG=n(I9e,"A",{href:!0});var bft=s(CG);Dko=r(bft,"BigBirdForSequenceClassification"),bft.forEach(t),Gko=r(I9e," (BigBird model)"),I9e.forEach(t),Oko=i(j),Yb=n(j,"LI",{});var N9e=s(Yb);mme=n(N9e,"STRONG",{});var vft=s(mme);Vko=r(vft,"bigbird_pegasus"),vft.forEach(t),Xko=r(N9e," \u2014 "),wG=n(N9e,"A",{href:!0});var Fft=s(wG);zko=r(Fft,"BigBirdPegasusForSequenceClassification"),Fft.forEach(t),Wko=r(N9e," (BigBirdPegasus model)"),N9e.forEach(t),Qko=i(j),Kb=n(j,"LI",{});var q9e=s(Kb);gme=n(q9e,"STRONG",{});var Tft=s(gme);Hko=r(Tft,"camembert"),Tft.forEach(t),Uko=r(q9e," \u2014 "),AG=n(q9e,"A",{href:!0});var Mft=s(AG);Jko=r(Mft,"CamembertForSequenceClassification"),Mft.forEach(t),Yko=r(q9e," (CamemBERT model)"),q9e.forEach(t),Kko=i(j),Zb=n(j,"LI",{});var j9e=s(Zb);hme=n(j9e,"STRONG",{});var Eft=s(hme);Zko=r(Eft,"canine"),Eft.forEach(t),eSo=r(j9e," \u2014 "),yG=n(j9e,"A",{href:!0});var Cft=s(yG);oSo=r(Cft,"CanineForSequenceClassification"),Cft.forEach(t),rSo=r(j9e," (Canine model)"),j9e.forEach(t),tSo=i(j),e2=n(j,"LI",{});var D9e=s(e2);pme=n(D9e,"STRONG",{});var wft=s(pme);aSo=r(wft,"convbert"),wft.forEach(t),nSo=r(D9e," \u2014 "),LG=n(D9e,"A",{href:!0});var Aft=s(LG);sSo=r(Aft,"ConvBertForSequenceClassification"),Aft.forEach(t),lSo=r(D9e," (ConvBERT model)"),D9e.forEach(t),iSo=i(j),o2=n(j,"LI",{});var G9e=s(o2);_me=n(G9e,"STRONG",{});var yft=s(_me);dSo=r(yft,"ctrl"),yft.forEach(t),cSo=r(G9e," \u2014 "),xG=n(G9e,"A",{href:!0});var Lft=s(xG);fSo=r(Lft,"CTRLForSequenceClassification"),Lft.forEach(t),mSo=r(G9e," (CTRL model)"),G9e.forEach(t),gSo=i(j),r2=n(j,"LI",{});var O9e=s(r2);ume=n(O9e,"STRONG",{});var xft=s(ume);hSo=r(xft,"data2vec-text"),xft.forEach(t),pSo=r(O9e," \u2014 "),$G=n(O9e,"A",{href:!0});var $ft=s($G);_So=r($ft,"Data2VecTextForSequenceClassification"),$ft.forEach(t),uSo=r(O9e," (Data2VecText model)"),O9e.forEach(t),bSo=i(j),t2=n(j,"LI",{});var V9e=s(t2);bme=n(V9e,"STRONG",{});var kft=s(bme);vSo=r(kft,"deberta"),kft.forEach(t),FSo=r(V9e," \u2014 "),kG=n(V9e,"A",{href:!0});var Sft=s(kG);TSo=r(Sft,"DebertaForSequenceClassification"),Sft.forEach(t),MSo=r(V9e," (DeBERTa model)"),V9e.forEach(t),ESo=i(j),a2=n(j,"LI",{});var X9e=s(a2);vme=n(X9e,"STRONG",{});var Rft=s(vme);CSo=r(Rft,"deberta-v2"),Rft.forEach(t),wSo=r(X9e," \u2014 "),SG=n(X9e,"A",{href:!0});var Pft=s(SG);ASo=r(Pft,"DebertaV2ForSequenceClassification"),Pft.forEach(t),ySo=r(X9e," (DeBERTa-v2 model)"),X9e.forEach(t),LSo=i(j),n2=n(j,"LI",{});var z9e=s(n2);Fme=n(z9e,"STRONG",{});var Bft=s(Fme);xSo=r(Bft,"distilbert"),Bft.forEach(t),$So=r(z9e," \u2014 "),RG=n(z9e,"A",{href:!0});var Ift=s(RG);kSo=r(Ift,"DistilBertForSequenceClassification"),Ift.forEach(t),SSo=r(z9e," (DistilBERT model)"),z9e.forEach(t),RSo=i(j),s2=n(j,"LI",{});var W9e=s(s2);Tme=n(W9e,"STRONG",{});var Nft=s(Tme);PSo=r(Nft,"electra"),Nft.forEach(t),BSo=r(W9e," \u2014 "),PG=n(W9e,"A",{href:!0});var qft=s(PG);ISo=r(qft,"ElectraForSequenceClassification"),qft.forEach(t),NSo=r(W9e," (ELECTRA model)"),W9e.forEach(t),qSo=i(j),l2=n(j,"LI",{});var Q9e=s(l2);Mme=n(Q9e,"STRONG",{});var jft=s(Mme);jSo=r(jft,"flaubert"),jft.forEach(t),DSo=r(Q9e," \u2014 "),BG=n(Q9e,"A",{href:!0});var Dft=s(BG);GSo=r(Dft,"FlaubertForSequenceClassification"),Dft.forEach(t),OSo=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),VSo=i(j),i2=n(j,"LI",{});var H9e=s(i2);Eme=n(H9e,"STRONG",{});var Gft=s(Eme);XSo=r(Gft,"fnet"),Gft.forEach(t),zSo=r(H9e," \u2014 "),IG=n(H9e,"A",{href:!0});var Oft=s(IG);WSo=r(Oft,"FNetForSequenceClassification"),Oft.forEach(t),QSo=r(H9e," (FNet model)"),H9e.forEach(t),HSo=i(j),d2=n(j,"LI",{});var U9e=s(d2);Cme=n(U9e,"STRONG",{});var Vft=s(Cme);USo=r(Vft,"funnel"),Vft.forEach(t),JSo=r(U9e," \u2014 "),NG=n(U9e,"A",{href:!0});var Xft=s(NG);YSo=r(Xft,"FunnelForSequenceClassification"),Xft.forEach(t),KSo=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),ZSo=i(j),c2=n(j,"LI",{});var J9e=s(c2);wme=n(J9e,"STRONG",{});var zft=s(wme);eRo=r(zft,"gpt2"),zft.forEach(t),oRo=r(J9e," \u2014 "),qG=n(J9e,"A",{href:!0});var Wft=s(qG);rRo=r(Wft,"GPT2ForSequenceClassification"),Wft.forEach(t),tRo=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),aRo=i(j),f2=n(j,"LI",{});var Y9e=s(f2);Ame=n(Y9e,"STRONG",{});var Qft=s(Ame);nRo=r(Qft,"gpt_neo"),Qft.forEach(t),sRo=r(Y9e," \u2014 "),jG=n(Y9e,"A",{href:!0});var Hft=s(jG);lRo=r(Hft,"GPTNeoForSequenceClassification"),Hft.forEach(t),iRo=r(Y9e," (GPT Neo model)"),Y9e.forEach(t),dRo=i(j),m2=n(j,"LI",{});var K9e=s(m2);yme=n(K9e,"STRONG",{});var Uft=s(yme);cRo=r(Uft,"gptj"),Uft.forEach(t),fRo=r(K9e," \u2014 "),DG=n(K9e,"A",{href:!0});var Jft=s(DG);mRo=r(Jft,"GPTJForSequenceClassification"),Jft.forEach(t),gRo=r(K9e," (GPT-J model)"),K9e.forEach(t),hRo=i(j),g2=n(j,"LI",{});var Z9e=s(g2);Lme=n(Z9e,"STRONG",{});var Yft=s(Lme);pRo=r(Yft,"ibert"),Yft.forEach(t),_Ro=r(Z9e," \u2014 "),GG=n(Z9e,"A",{href:!0});var Kft=s(GG);uRo=r(Kft,"IBertForSequenceClassification"),Kft.forEach(t),bRo=r(Z9e," (I-BERT model)"),Z9e.forEach(t),vRo=i(j),h2=n(j,"LI",{});var exe=s(h2);xme=n(exe,"STRONG",{});var Zft=s(xme);FRo=r(Zft,"layoutlm"),Zft.forEach(t),TRo=r(exe," \u2014 "),OG=n(exe,"A",{href:!0});var emt=s(OG);MRo=r(emt,"LayoutLMForSequenceClassification"),emt.forEach(t),ERo=r(exe," (LayoutLM model)"),exe.forEach(t),CRo=i(j),p2=n(j,"LI",{});var oxe=s(p2);$me=n(oxe,"STRONG",{});var omt=s($me);wRo=r(omt,"layoutlmv2"),omt.forEach(t),ARo=r(oxe," \u2014 "),VG=n(oxe,"A",{href:!0});var rmt=s(VG);yRo=r(rmt,"LayoutLMv2ForSequenceClassification"),rmt.forEach(t),LRo=r(oxe," (LayoutLMv2 model)"),oxe.forEach(t),xRo=i(j),_2=n(j,"LI",{});var rxe=s(_2);kme=n(rxe,"STRONG",{});var tmt=s(kme);$Ro=r(tmt,"layoutlmv3"),tmt.forEach(t),kRo=r(rxe," \u2014 "),XG=n(rxe,"A",{href:!0});var amt=s(XG);SRo=r(amt,"LayoutLMv3ForSequenceClassification"),amt.forEach(t),RRo=r(rxe," (LayoutLMv3 model)"),rxe.forEach(t),PRo=i(j),u2=n(j,"LI",{});var txe=s(u2);Sme=n(txe,"STRONG",{});var nmt=s(Sme);BRo=r(nmt,"led"),nmt.forEach(t),IRo=r(txe," \u2014 "),zG=n(txe,"A",{href:!0});var smt=s(zG);NRo=r(smt,"LEDForSequenceClassification"),smt.forEach(t),qRo=r(txe," (LED model)"),txe.forEach(t),jRo=i(j),b2=n(j,"LI",{});var axe=s(b2);Rme=n(axe,"STRONG",{});var lmt=s(Rme);DRo=r(lmt,"longformer"),lmt.forEach(t),GRo=r(axe," \u2014 "),WG=n(axe,"A",{href:!0});var imt=s(WG);ORo=r(imt,"LongformerForSequenceClassification"),imt.forEach(t),VRo=r(axe," (Longformer model)"),axe.forEach(t),XRo=i(j),v2=n(j,"LI",{});var nxe=s(v2);Pme=n(nxe,"STRONG",{});var dmt=s(Pme);zRo=r(dmt,"mbart"),dmt.forEach(t),WRo=r(nxe," \u2014 "),QG=n(nxe,"A",{href:!0});var cmt=s(QG);QRo=r(cmt,"MBartForSequenceClassification"),cmt.forEach(t),HRo=r(nxe," (mBART model)"),nxe.forEach(t),URo=i(j),F2=n(j,"LI",{});var sxe=s(F2);Bme=n(sxe,"STRONG",{});var fmt=s(Bme);JRo=r(fmt,"megatron-bert"),fmt.forEach(t),YRo=r(sxe," \u2014 "),HG=n(sxe,"A",{href:!0});var mmt=s(HG);KRo=r(mmt,"MegatronBertForSequenceClassification"),mmt.forEach(t),ZRo=r(sxe," (MegatronBert model)"),sxe.forEach(t),ePo=i(j),T2=n(j,"LI",{});var lxe=s(T2);Ime=n(lxe,"STRONG",{});var gmt=s(Ime);oPo=r(gmt,"mobilebert"),gmt.forEach(t),rPo=r(lxe," \u2014 "),UG=n(lxe,"A",{href:!0});var hmt=s(UG);tPo=r(hmt,"MobileBertForSequenceClassification"),hmt.forEach(t),aPo=r(lxe," (MobileBERT model)"),lxe.forEach(t),nPo=i(j),M2=n(j,"LI",{});var ixe=s(M2);Nme=n(ixe,"STRONG",{});var pmt=s(Nme);sPo=r(pmt,"mpnet"),pmt.forEach(t),lPo=r(ixe," \u2014 "),JG=n(ixe,"A",{href:!0});var _mt=s(JG);iPo=r(_mt,"MPNetForSequenceClassification"),_mt.forEach(t),dPo=r(ixe," (MPNet model)"),ixe.forEach(t),cPo=i(j),E2=n(j,"LI",{});var dxe=s(E2);qme=n(dxe,"STRONG",{});var umt=s(qme);fPo=r(umt,"nystromformer"),umt.forEach(t),mPo=r(dxe," \u2014 "),YG=n(dxe,"A",{href:!0});var bmt=s(YG);gPo=r(bmt,"NystromformerForSequenceClassification"),bmt.forEach(t),hPo=r(dxe," (Nystromformer model)"),dxe.forEach(t),pPo=i(j),C2=n(j,"LI",{});var cxe=s(C2);jme=n(cxe,"STRONG",{});var vmt=s(jme);_Po=r(vmt,"openai-gpt"),vmt.forEach(t),uPo=r(cxe," \u2014 "),KG=n(cxe,"A",{href:!0});var Fmt=s(KG);bPo=r(Fmt,"OpenAIGPTForSequenceClassification"),Fmt.forEach(t),vPo=r(cxe," (OpenAI GPT model)"),cxe.forEach(t),FPo=i(j),w2=n(j,"LI",{});var fxe=s(w2);Dme=n(fxe,"STRONG",{});var Tmt=s(Dme);TPo=r(Tmt,"perceiver"),Tmt.forEach(t),MPo=r(fxe," \u2014 "),ZG=n(fxe,"A",{href:!0});var Mmt=s(ZG);EPo=r(Mmt,"PerceiverForSequenceClassification"),Mmt.forEach(t),CPo=r(fxe," (Perceiver model)"),fxe.forEach(t),wPo=i(j),A2=n(j,"LI",{});var mxe=s(A2);Gme=n(mxe,"STRONG",{});var Emt=s(Gme);APo=r(Emt,"plbart"),Emt.forEach(t),yPo=r(mxe," \u2014 "),eO=n(mxe,"A",{href:!0});var Cmt=s(eO);LPo=r(Cmt,"PLBartForSequenceClassification"),Cmt.forEach(t),xPo=r(mxe," (PLBart model)"),mxe.forEach(t),$Po=i(j),y2=n(j,"LI",{});var gxe=s(y2);Ome=n(gxe,"STRONG",{});var wmt=s(Ome);kPo=r(wmt,"qdqbert"),wmt.forEach(t),SPo=r(gxe," \u2014 "),oO=n(gxe,"A",{href:!0});var Amt=s(oO);RPo=r(Amt,"QDQBertForSequenceClassification"),Amt.forEach(t),PPo=r(gxe," (QDQBert model)"),gxe.forEach(t),BPo=i(j),L2=n(j,"LI",{});var hxe=s(L2);Vme=n(hxe,"STRONG",{});var ymt=s(Vme);IPo=r(ymt,"reformer"),ymt.forEach(t),NPo=r(hxe," \u2014 "),rO=n(hxe,"A",{href:!0});var Lmt=s(rO);qPo=r(Lmt,"ReformerForSequenceClassification"),Lmt.forEach(t),jPo=r(hxe," (Reformer model)"),hxe.forEach(t),DPo=i(j),x2=n(j,"LI",{});var pxe=s(x2);Xme=n(pxe,"STRONG",{});var xmt=s(Xme);GPo=r(xmt,"rembert"),xmt.forEach(t),OPo=r(pxe," \u2014 "),tO=n(pxe,"A",{href:!0});var $mt=s(tO);VPo=r($mt,"RemBertForSequenceClassification"),$mt.forEach(t),XPo=r(pxe," (RemBERT model)"),pxe.forEach(t),zPo=i(j),$2=n(j,"LI",{});var _xe=s($2);zme=n(_xe,"STRONG",{});var kmt=s(zme);WPo=r(kmt,"roberta"),kmt.forEach(t),QPo=r(_xe," \u2014 "),aO=n(_xe,"A",{href:!0});var Smt=s(aO);HPo=r(Smt,"RobertaForSequenceClassification"),Smt.forEach(t),UPo=r(_xe," (RoBERTa model)"),_xe.forEach(t),JPo=i(j),k2=n(j,"LI",{});var uxe=s(k2);Wme=n(uxe,"STRONG",{});var Rmt=s(Wme);YPo=r(Rmt,"roformer"),Rmt.forEach(t),KPo=r(uxe," \u2014 "),nO=n(uxe,"A",{href:!0});var Pmt=s(nO);ZPo=r(Pmt,"RoFormerForSequenceClassification"),Pmt.forEach(t),eBo=r(uxe," (RoFormer model)"),uxe.forEach(t),oBo=i(j),S2=n(j,"LI",{});var bxe=s(S2);Qme=n(bxe,"STRONG",{});var Bmt=s(Qme);rBo=r(Bmt,"squeezebert"),Bmt.forEach(t),tBo=r(bxe," \u2014 "),sO=n(bxe,"A",{href:!0});var Imt=s(sO);aBo=r(Imt,"SqueezeBertForSequenceClassification"),Imt.forEach(t),nBo=r(bxe," (SqueezeBERT model)"),bxe.forEach(t),sBo=i(j),R2=n(j,"LI",{});var vxe=s(R2);Hme=n(vxe,"STRONG",{});var Nmt=s(Hme);lBo=r(Nmt,"tapas"),Nmt.forEach(t),iBo=r(vxe," \u2014 "),lO=n(vxe,"A",{href:!0});var qmt=s(lO);dBo=r(qmt,"TapasForSequenceClassification"),qmt.forEach(t),cBo=r(vxe," (TAPAS model)"),vxe.forEach(t),fBo=i(j),P2=n(j,"LI",{});var Fxe=s(P2);Ume=n(Fxe,"STRONG",{});var jmt=s(Ume);mBo=r(jmt,"transfo-xl"),jmt.forEach(t),gBo=r(Fxe," \u2014 "),iO=n(Fxe,"A",{href:!0});var Dmt=s(iO);hBo=r(Dmt,"TransfoXLForSequenceClassification"),Dmt.forEach(t),pBo=r(Fxe," (Transformer-XL model)"),Fxe.forEach(t),_Bo=i(j),B2=n(j,"LI",{});var Txe=s(B2);Jme=n(Txe,"STRONG",{});var Gmt=s(Jme);uBo=r(Gmt,"xlm"),Gmt.forEach(t),bBo=r(Txe," \u2014 "),dO=n(Txe,"A",{href:!0});var Omt=s(dO);vBo=r(Omt,"XLMForSequenceClassification"),Omt.forEach(t),FBo=r(Txe," (XLM model)"),Txe.forEach(t),TBo=i(j),I2=n(j,"LI",{});var Mxe=s(I2);Yme=n(Mxe,"STRONG",{});var Vmt=s(Yme);MBo=r(Vmt,"xlm-roberta"),Vmt.forEach(t),EBo=r(Mxe," \u2014 "),cO=n(Mxe,"A",{href:!0});var Xmt=s(cO);CBo=r(Xmt,"XLMRobertaForSequenceClassification"),Xmt.forEach(t),wBo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),ABo=i(j),N2=n(j,"LI",{});var Exe=s(N2);Kme=n(Exe,"STRONG",{});var zmt=s(Kme);yBo=r(zmt,"xlm-roberta-xl"),zmt.forEach(t),LBo=r(Exe," \u2014 "),fO=n(Exe,"A",{href:!0});var Wmt=s(fO);xBo=r(Wmt,"XLMRobertaXLForSequenceClassification"),Wmt.forEach(t),$Bo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),kBo=i(j),q2=n(j,"LI",{});var Cxe=s(q2);Zme=n(Cxe,"STRONG",{});var Qmt=s(Zme);SBo=r(Qmt,"xlnet"),Qmt.forEach(t),RBo=r(Cxe," \u2014 "),mO=n(Cxe,"A",{href:!0});var Hmt=s(mO);PBo=r(Hmt,"XLNetForSequenceClassification"),Hmt.forEach(t),BBo=r(Cxe," (XLNet model)"),Cxe.forEach(t),IBo=i(j),j2=n(j,"LI",{});var wxe=s(j2);ege=n(wxe,"STRONG",{});var Umt=s(ege);NBo=r(Umt,"yoso"),Umt.forEach(t),qBo=r(wxe," \u2014 "),gO=n(wxe,"A",{href:!0});var Jmt=s(gO);jBo=r(Jmt,"YosoForSequenceClassification"),Jmt.forEach(t),DBo=r(wxe," (YOSO model)"),wxe.forEach(t),j.forEach(t),GBo=i(la),D2=n(la,"P",{});var Axe=s(D2);OBo=r(Axe,"The model is set in evaluation mode by default using "),oge=n(Axe,"CODE",{});var Ymt=s(oge);VBo=r(Ymt,"model.eval()"),Ymt.forEach(t),XBo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(Axe,"CODE",{});var Kmt=s(rge);zBo=r(Kmt,"model.train()"),Kmt.forEach(t),Axe.forEach(t),WBo=i(la),T(G2.$$.fragment,la),la.forEach(t),Ws.forEach(t),nje=i(f),Xi=n(f,"H2",{class:!0});var dGe=s(Xi);O2=n(dGe,"A",{id:!0,class:!0,href:!0});var Zmt=s(O2);tge=n(Zmt,"SPAN",{});var egt=s(tge);T(qy.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),QBo=i(dGe),age=n(dGe,"SPAN",{});var ogt=s(age);HBo=r(ogt,"AutoModelForMultipleChoice"),ogt.forEach(t),dGe.forEach(t),sje=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(jy.$$.fragment,Qs),UBo=i(Qs),zi=n(Qs,"P",{});var zZ=s(zi);JBo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hO=n(zZ,"A",{href:!0});var rgt=s(hO);YBo=r(rgt,"from_pretrained()"),rgt.forEach(t),KBo=r(zZ," class method or the "),pO=n(zZ,"A",{href:!0});var tgt=s(pO);ZBo=r(tgt,"from_config()"),tgt.forEach(t),eIo=r(zZ,` class
method.`),zZ.forEach(t),oIo=i(Qs),Dy=n(Qs,"P",{});var cGe=s(Dy);rIo=r(cGe,"This class cannot be instantiated directly using "),nge=n(cGe,"CODE",{});var agt=s(nge);tIo=r(agt,"__init__()"),agt.forEach(t),aIo=r(cGe," (throws an error)."),cGe.forEach(t),nIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Zw=s(ct);T(Gy.$$.fragment,Zw),sIo=i(Zw),sge=n(Zw,"P",{});var ngt=s(sge);lIo=r(ngt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ngt.forEach(t),iIo=i(Zw),Wi=n(Zw,"P",{});var WZ=s(Wi);dIo=r(WZ,`Note:
Loading a model from its configuration file does `),lge=n(WZ,"STRONG",{});var sgt=s(lge);cIo=r(sgt,"not"),sgt.forEach(t),fIo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(WZ,"A",{href:!0});var lgt=s(_O);mIo=r(lgt,"from_pretrained()"),lgt.forEach(t),gIo=r(WZ," to load the model weights."),WZ.forEach(t),hIo=i(Zw),T(V2.$$.fragment,Zw),Zw.forEach(t),pIo=i(Qs),ro=n(Qs,"DIV",{class:!0});var ia=s(ro);T(Oy.$$.fragment,ia),_Io=i(ia),ige=n(ia,"P",{});var igt=s(ige);uIo=r(igt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),igt.forEach(t),bIo=i(ia),Ba=n(ia,"P",{});var e6=s(Ba);vIo=r(e6,"The model class to instantiate is selected based on the "),dge=n(e6,"CODE",{});var dgt=s(dge);FIo=r(dgt,"model_type"),dgt.forEach(t),TIo=r(e6,` property of the config object (either
passed as an argument or loaded from `),cge=n(e6,"CODE",{});var cgt=s(cge);MIo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),EIo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(e6,"CODE",{});var fgt=s(fge);CIo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),wIo=r(e6,":"),e6.forEach(t),AIo=i(ia),K=n(ia,"UL",{});var ee=s(K);X2=n(ee,"LI",{});var yxe=s(X2);mge=n(yxe,"STRONG",{});var mgt=s(mge);yIo=r(mgt,"albert"),mgt.forEach(t),LIo=r(yxe," \u2014 "),uO=n(yxe,"A",{href:!0});var ggt=s(uO);xIo=r(ggt,"AlbertForMultipleChoice"),ggt.forEach(t),$Io=r(yxe," (ALBERT model)"),yxe.forEach(t),kIo=i(ee),z2=n(ee,"LI",{});var Lxe=s(z2);gge=n(Lxe,"STRONG",{});var hgt=s(gge);SIo=r(hgt,"bert"),hgt.forEach(t),RIo=r(Lxe," \u2014 "),bO=n(Lxe,"A",{href:!0});var pgt=s(bO);PIo=r(pgt,"BertForMultipleChoice"),pgt.forEach(t),BIo=r(Lxe," (BERT model)"),Lxe.forEach(t),IIo=i(ee),W2=n(ee,"LI",{});var xxe=s(W2);hge=n(xxe,"STRONG",{});var _gt=s(hge);NIo=r(_gt,"big_bird"),_gt.forEach(t),qIo=r(xxe," \u2014 "),vO=n(xxe,"A",{href:!0});var ugt=s(vO);jIo=r(ugt,"BigBirdForMultipleChoice"),ugt.forEach(t),DIo=r(xxe," (BigBird model)"),xxe.forEach(t),GIo=i(ee),Q2=n(ee,"LI",{});var $xe=s(Q2);pge=n($xe,"STRONG",{});var bgt=s(pge);OIo=r(bgt,"camembert"),bgt.forEach(t),VIo=r($xe," \u2014 "),FO=n($xe,"A",{href:!0});var vgt=s(FO);XIo=r(vgt,"CamembertForMultipleChoice"),vgt.forEach(t),zIo=r($xe," (CamemBERT model)"),$xe.forEach(t),WIo=i(ee),H2=n(ee,"LI",{});var kxe=s(H2);_ge=n(kxe,"STRONG",{});var Fgt=s(_ge);QIo=r(Fgt,"canine"),Fgt.forEach(t),HIo=r(kxe," \u2014 "),TO=n(kxe,"A",{href:!0});var Tgt=s(TO);UIo=r(Tgt,"CanineForMultipleChoice"),Tgt.forEach(t),JIo=r(kxe," (Canine model)"),kxe.forEach(t),YIo=i(ee),U2=n(ee,"LI",{});var Sxe=s(U2);uge=n(Sxe,"STRONG",{});var Mgt=s(uge);KIo=r(Mgt,"convbert"),Mgt.forEach(t),ZIo=r(Sxe," \u2014 "),MO=n(Sxe,"A",{href:!0});var Egt=s(MO);eNo=r(Egt,"ConvBertForMultipleChoice"),Egt.forEach(t),oNo=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),rNo=i(ee),J2=n(ee,"LI",{});var Rxe=s(J2);bge=n(Rxe,"STRONG",{});var Cgt=s(bge);tNo=r(Cgt,"data2vec-text"),Cgt.forEach(t),aNo=r(Rxe," \u2014 "),EO=n(Rxe,"A",{href:!0});var wgt=s(EO);nNo=r(wgt,"Data2VecTextForMultipleChoice"),wgt.forEach(t),sNo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),lNo=i(ee),Y2=n(ee,"LI",{});var Pxe=s(Y2);vge=n(Pxe,"STRONG",{});var Agt=s(vge);iNo=r(Agt,"deberta-v2"),Agt.forEach(t),dNo=r(Pxe," \u2014 "),CO=n(Pxe,"A",{href:!0});var ygt=s(CO);cNo=r(ygt,"DebertaV2ForMultipleChoice"),ygt.forEach(t),fNo=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),mNo=i(ee),K2=n(ee,"LI",{});var Bxe=s(K2);Fge=n(Bxe,"STRONG",{});var Lgt=s(Fge);gNo=r(Lgt,"distilbert"),Lgt.forEach(t),hNo=r(Bxe," \u2014 "),wO=n(Bxe,"A",{href:!0});var xgt=s(wO);pNo=r(xgt,"DistilBertForMultipleChoice"),xgt.forEach(t),_No=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),uNo=i(ee),Z2=n(ee,"LI",{});var Ixe=s(Z2);Tge=n(Ixe,"STRONG",{});var $gt=s(Tge);bNo=r($gt,"electra"),$gt.forEach(t),vNo=r(Ixe," \u2014 "),AO=n(Ixe,"A",{href:!0});var kgt=s(AO);FNo=r(kgt,"ElectraForMultipleChoice"),kgt.forEach(t),TNo=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),MNo=i(ee),e4=n(ee,"LI",{});var Nxe=s(e4);Mge=n(Nxe,"STRONG",{});var Sgt=s(Mge);ENo=r(Sgt,"flaubert"),Sgt.forEach(t),CNo=r(Nxe," \u2014 "),yO=n(Nxe,"A",{href:!0});var Rgt=s(yO);wNo=r(Rgt,"FlaubertForMultipleChoice"),Rgt.forEach(t),ANo=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),yNo=i(ee),o4=n(ee,"LI",{});var qxe=s(o4);Ege=n(qxe,"STRONG",{});var Pgt=s(Ege);LNo=r(Pgt,"fnet"),Pgt.forEach(t),xNo=r(qxe," \u2014 "),LO=n(qxe,"A",{href:!0});var Bgt=s(LO);$No=r(Bgt,"FNetForMultipleChoice"),Bgt.forEach(t),kNo=r(qxe," (FNet model)"),qxe.forEach(t),SNo=i(ee),r4=n(ee,"LI",{});var jxe=s(r4);Cge=n(jxe,"STRONG",{});var Igt=s(Cge);RNo=r(Igt,"funnel"),Igt.forEach(t),PNo=r(jxe," \u2014 "),xO=n(jxe,"A",{href:!0});var Ngt=s(xO);BNo=r(Ngt,"FunnelForMultipleChoice"),Ngt.forEach(t),INo=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),NNo=i(ee),t4=n(ee,"LI",{});var Dxe=s(t4);wge=n(Dxe,"STRONG",{});var qgt=s(wge);qNo=r(qgt,"ibert"),qgt.forEach(t),jNo=r(Dxe," \u2014 "),$O=n(Dxe,"A",{href:!0});var jgt=s($O);DNo=r(jgt,"IBertForMultipleChoice"),jgt.forEach(t),GNo=r(Dxe," (I-BERT model)"),Dxe.forEach(t),ONo=i(ee),a4=n(ee,"LI",{});var Gxe=s(a4);Age=n(Gxe,"STRONG",{});var Dgt=s(Age);VNo=r(Dgt,"longformer"),Dgt.forEach(t),XNo=r(Gxe," \u2014 "),kO=n(Gxe,"A",{href:!0});var Ggt=s(kO);zNo=r(Ggt,"LongformerForMultipleChoice"),Ggt.forEach(t),WNo=r(Gxe," (Longformer model)"),Gxe.forEach(t),QNo=i(ee),n4=n(ee,"LI",{});var Oxe=s(n4);yge=n(Oxe,"STRONG",{});var Ogt=s(yge);HNo=r(Ogt,"megatron-bert"),Ogt.forEach(t),UNo=r(Oxe," \u2014 "),SO=n(Oxe,"A",{href:!0});var Vgt=s(SO);JNo=r(Vgt,"MegatronBertForMultipleChoice"),Vgt.forEach(t),YNo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),KNo=i(ee),s4=n(ee,"LI",{});var Vxe=s(s4);Lge=n(Vxe,"STRONG",{});var Xgt=s(Lge);ZNo=r(Xgt,"mobilebert"),Xgt.forEach(t),eqo=r(Vxe," \u2014 "),RO=n(Vxe,"A",{href:!0});var zgt=s(RO);oqo=r(zgt,"MobileBertForMultipleChoice"),zgt.forEach(t),rqo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),tqo=i(ee),l4=n(ee,"LI",{});var Xxe=s(l4);xge=n(Xxe,"STRONG",{});var Wgt=s(xge);aqo=r(Wgt,"mpnet"),Wgt.forEach(t),nqo=r(Xxe," \u2014 "),PO=n(Xxe,"A",{href:!0});var Qgt=s(PO);sqo=r(Qgt,"MPNetForMultipleChoice"),Qgt.forEach(t),lqo=r(Xxe," (MPNet model)"),Xxe.forEach(t),iqo=i(ee),i4=n(ee,"LI",{});var zxe=s(i4);$ge=n(zxe,"STRONG",{});var Hgt=s($ge);dqo=r(Hgt,"nystromformer"),Hgt.forEach(t),cqo=r(zxe," \u2014 "),BO=n(zxe,"A",{href:!0});var Ugt=s(BO);fqo=r(Ugt,"NystromformerForMultipleChoice"),Ugt.forEach(t),mqo=r(zxe," (Nystromformer model)"),zxe.forEach(t),gqo=i(ee),d4=n(ee,"LI",{});var Wxe=s(d4);kge=n(Wxe,"STRONG",{});var Jgt=s(kge);hqo=r(Jgt,"qdqbert"),Jgt.forEach(t),pqo=r(Wxe," \u2014 "),IO=n(Wxe,"A",{href:!0});var Ygt=s(IO);_qo=r(Ygt,"QDQBertForMultipleChoice"),Ygt.forEach(t),uqo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),bqo=i(ee),c4=n(ee,"LI",{});var Qxe=s(c4);Sge=n(Qxe,"STRONG",{});var Kgt=s(Sge);vqo=r(Kgt,"rembert"),Kgt.forEach(t),Fqo=r(Qxe," \u2014 "),NO=n(Qxe,"A",{href:!0});var Zgt=s(NO);Tqo=r(Zgt,"RemBertForMultipleChoice"),Zgt.forEach(t),Mqo=r(Qxe," (RemBERT model)"),Qxe.forEach(t),Eqo=i(ee),f4=n(ee,"LI",{});var Hxe=s(f4);Rge=n(Hxe,"STRONG",{});var eht=s(Rge);Cqo=r(eht,"roberta"),eht.forEach(t),wqo=r(Hxe," \u2014 "),qO=n(Hxe,"A",{href:!0});var oht=s(qO);Aqo=r(oht,"RobertaForMultipleChoice"),oht.forEach(t),yqo=r(Hxe," (RoBERTa model)"),Hxe.forEach(t),Lqo=i(ee),m4=n(ee,"LI",{});var Uxe=s(m4);Pge=n(Uxe,"STRONG",{});var rht=s(Pge);xqo=r(rht,"roformer"),rht.forEach(t),$qo=r(Uxe," \u2014 "),jO=n(Uxe,"A",{href:!0});var tht=s(jO);kqo=r(tht,"RoFormerForMultipleChoice"),tht.forEach(t),Sqo=r(Uxe," (RoFormer model)"),Uxe.forEach(t),Rqo=i(ee),g4=n(ee,"LI",{});var Jxe=s(g4);Bge=n(Jxe,"STRONG",{});var aht=s(Bge);Pqo=r(aht,"squeezebert"),aht.forEach(t),Bqo=r(Jxe," \u2014 "),DO=n(Jxe,"A",{href:!0});var nht=s(DO);Iqo=r(nht,"SqueezeBertForMultipleChoice"),nht.forEach(t),Nqo=r(Jxe," (SqueezeBERT model)"),Jxe.forEach(t),qqo=i(ee),h4=n(ee,"LI",{});var Yxe=s(h4);Ige=n(Yxe,"STRONG",{});var sht=s(Ige);jqo=r(sht,"xlm"),sht.forEach(t),Dqo=r(Yxe," \u2014 "),GO=n(Yxe,"A",{href:!0});var lht=s(GO);Gqo=r(lht,"XLMForMultipleChoice"),lht.forEach(t),Oqo=r(Yxe," (XLM model)"),Yxe.forEach(t),Vqo=i(ee),p4=n(ee,"LI",{});var Kxe=s(p4);Nge=n(Kxe,"STRONG",{});var iht=s(Nge);Xqo=r(iht,"xlm-roberta"),iht.forEach(t),zqo=r(Kxe," \u2014 "),OO=n(Kxe,"A",{href:!0});var dht=s(OO);Wqo=r(dht,"XLMRobertaForMultipleChoice"),dht.forEach(t),Qqo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),Hqo=i(ee),_4=n(ee,"LI",{});var Zxe=s(_4);qge=n(Zxe,"STRONG",{});var cht=s(qge);Uqo=r(cht,"xlm-roberta-xl"),cht.forEach(t),Jqo=r(Zxe," \u2014 "),VO=n(Zxe,"A",{href:!0});var fht=s(VO);Yqo=r(fht,"XLMRobertaXLForMultipleChoice"),fht.forEach(t),Kqo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),Zqo=i(ee),u4=n(ee,"LI",{});var e$e=s(u4);jge=n(e$e,"STRONG",{});var mht=s(jge);ejo=r(mht,"xlnet"),mht.forEach(t),ojo=r(e$e," \u2014 "),XO=n(e$e,"A",{href:!0});var ght=s(XO);rjo=r(ght,"XLNetForMultipleChoice"),ght.forEach(t),tjo=r(e$e," (XLNet model)"),e$e.forEach(t),ajo=i(ee),b4=n(ee,"LI",{});var o$e=s(b4);Dge=n(o$e,"STRONG",{});var hht=s(Dge);njo=r(hht,"yoso"),hht.forEach(t),sjo=r(o$e," \u2014 "),zO=n(o$e,"A",{href:!0});var pht=s(zO);ljo=r(pht,"YosoForMultipleChoice"),pht.forEach(t),ijo=r(o$e," (YOSO model)"),o$e.forEach(t),ee.forEach(t),djo=i(ia),v4=n(ia,"P",{});var r$e=s(v4);cjo=r(r$e,"The model is set in evaluation mode by default using "),Gge=n(r$e,"CODE",{});var _ht=s(Gge);fjo=r(_ht,"model.eval()"),_ht.forEach(t),mjo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(r$e,"CODE",{});var uht=s(Oge);gjo=r(uht,"model.train()"),uht.forEach(t),r$e.forEach(t),hjo=i(ia),T(F4.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),lje=i(f),Qi=n(f,"H2",{class:!0});var fGe=s(Qi);T4=n(fGe,"A",{id:!0,class:!0,href:!0});var bht=s(T4);Vge=n(bht,"SPAN",{});var vht=s(Vge);T(Vy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),pjo=i(fGe),Xge=n(fGe,"SPAN",{});var Fht=s(Xge);_jo=r(Fht,"AutoModelForNextSentencePrediction"),Fht.forEach(t),fGe.forEach(t),ije=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Xy.$$.fragment,Hs),ujo=i(Hs),Hi=n(Hs,"P",{});var QZ=s(Hi);bjo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WO=n(QZ,"A",{href:!0});var Tht=s(WO);vjo=r(Tht,"from_pretrained()"),Tht.forEach(t),Fjo=r(QZ," class method or the "),QO=n(QZ,"A",{href:!0});var Mht=s(QO);Tjo=r(Mht,"from_config()"),Mht.forEach(t),Mjo=r(QZ,` class
method.`),QZ.forEach(t),Ejo=i(Hs),zy=n(Hs,"P",{});var mGe=s(zy);Cjo=r(mGe,"This class cannot be instantiated directly using "),zge=n(mGe,"CODE",{});var Eht=s(zge);wjo=r(Eht,"__init__()"),Eht.forEach(t),Ajo=r(mGe," (throws an error)."),mGe.forEach(t),yjo=i(Hs),ft=n(Hs,"DIV",{class:!0});var o6=s(ft);T(Wy.$$.fragment,o6),Ljo=i(o6),Wge=n(o6,"P",{});var Cht=s(Wge);xjo=r(Cht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cht.forEach(t),$jo=i(o6),Ui=n(o6,"P",{});var HZ=s(Ui);kjo=r(HZ,`Note:
Loading a model from its configuration file does `),Qge=n(HZ,"STRONG",{});var wht=s(Qge);Sjo=r(wht,"not"),wht.forEach(t),Rjo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(HZ,"A",{href:!0});var Aht=s(HO);Pjo=r(Aht,"from_pretrained()"),Aht.forEach(t),Bjo=r(HZ," to load the model weights."),HZ.forEach(t),Ijo=i(o6),T(M4.$$.fragment,o6),o6.forEach(t),Njo=i(Hs),to=n(Hs,"DIV",{class:!0});var da=s(to);T(Qy.$$.fragment,da),qjo=i(da),Hge=n(da,"P",{});var yht=s(Hge);jjo=r(yht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yht.forEach(t),Djo=i(da),Ia=n(da,"P",{});var r6=s(Ia);Gjo=r(r6,"The model class to instantiate is selected based on the "),Uge=n(r6,"CODE",{});var Lht=s(Uge);Ojo=r(Lht,"model_type"),Lht.forEach(t),Vjo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Jge=n(r6,"CODE",{});var xht=s(Jge);Xjo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),zjo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(r6,"CODE",{});var $ht=s(Yge);Wjo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),Qjo=r(r6,":"),r6.forEach(t),Hjo=i(da),Yr=n(da,"UL",{});var Us=s(Yr);E4=n(Us,"LI",{});var t$e=s(E4);Kge=n(t$e,"STRONG",{});var kht=s(Kge);Ujo=r(kht,"bert"),kht.forEach(t),Jjo=r(t$e," \u2014 "),UO=n(t$e,"A",{href:!0});var Sht=s(UO);Yjo=r(Sht,"BertForNextSentencePrediction"),Sht.forEach(t),Kjo=r(t$e," (BERT model)"),t$e.forEach(t),Zjo=i(Us),C4=n(Us,"LI",{});var a$e=s(C4);Zge=n(a$e,"STRONG",{});var Rht=s(Zge);eDo=r(Rht,"fnet"),Rht.forEach(t),oDo=r(a$e," \u2014 "),JO=n(a$e,"A",{href:!0});var Pht=s(JO);rDo=r(Pht,"FNetForNextSentencePrediction"),Pht.forEach(t),tDo=r(a$e," (FNet model)"),a$e.forEach(t),aDo=i(Us),w4=n(Us,"LI",{});var n$e=s(w4);ehe=n(n$e,"STRONG",{});var Bht=s(ehe);nDo=r(Bht,"megatron-bert"),Bht.forEach(t),sDo=r(n$e," \u2014 "),YO=n(n$e,"A",{href:!0});var Iht=s(YO);lDo=r(Iht,"MegatronBertForNextSentencePrediction"),Iht.forEach(t),iDo=r(n$e," (MegatronBert model)"),n$e.forEach(t),dDo=i(Us),A4=n(Us,"LI",{});var s$e=s(A4);ohe=n(s$e,"STRONG",{});var Nht=s(ohe);cDo=r(Nht,"mobilebert"),Nht.forEach(t),fDo=r(s$e," \u2014 "),KO=n(s$e,"A",{href:!0});var qht=s(KO);mDo=r(qht,"MobileBertForNextSentencePrediction"),qht.forEach(t),gDo=r(s$e," (MobileBERT model)"),s$e.forEach(t),hDo=i(Us),y4=n(Us,"LI",{});var l$e=s(y4);rhe=n(l$e,"STRONG",{});var jht=s(rhe);pDo=r(jht,"qdqbert"),jht.forEach(t),_Do=r(l$e," \u2014 "),ZO=n(l$e,"A",{href:!0});var Dht=s(ZO);uDo=r(Dht,"QDQBertForNextSentencePrediction"),Dht.forEach(t),bDo=r(l$e," (QDQBert model)"),l$e.forEach(t),Us.forEach(t),vDo=i(da),L4=n(da,"P",{});var i$e=s(L4);FDo=r(i$e,"The model is set in evaluation mode by default using "),the=n(i$e,"CODE",{});var Ght=s(the);TDo=r(Ght,"model.eval()"),Ght.forEach(t),MDo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(i$e,"CODE",{});var Oht=s(ahe);EDo=r(Oht,"model.train()"),Oht.forEach(t),i$e.forEach(t),CDo=i(da),T(x4.$$.fragment,da),da.forEach(t),Hs.forEach(t),dje=i(f),Ji=n(f,"H2",{class:!0});var gGe=s(Ji);$4=n(gGe,"A",{id:!0,class:!0,href:!0});var Vht=s($4);nhe=n(Vht,"SPAN",{});var Xht=s(nhe);T(Hy.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),wDo=i(gGe),she=n(gGe,"SPAN",{});var zht=s(she);ADo=r(zht,"AutoModelForTokenClassification"),zht.forEach(t),gGe.forEach(t),cje=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Uy.$$.fragment,Js),yDo=i(Js),Yi=n(Js,"P",{});var UZ=s(Yi);LDo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eV=n(UZ,"A",{href:!0});var Wht=s(eV);xDo=r(Wht,"from_pretrained()"),Wht.forEach(t),$Do=r(UZ," class method or the "),oV=n(UZ,"A",{href:!0});var Qht=s(oV);kDo=r(Qht,"from_config()"),Qht.forEach(t),SDo=r(UZ,` class
method.`),UZ.forEach(t),RDo=i(Js),Jy=n(Js,"P",{});var hGe=s(Jy);PDo=r(hGe,"This class cannot be instantiated directly using "),lhe=n(hGe,"CODE",{});var Hht=s(lhe);BDo=r(Hht,"__init__()"),Hht.forEach(t),IDo=r(hGe," (throws an error)."),hGe.forEach(t),NDo=i(Js),mt=n(Js,"DIV",{class:!0});var t6=s(mt);T(Yy.$$.fragment,t6),qDo=i(t6),ihe=n(t6,"P",{});var Uht=s(ihe);jDo=r(Uht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Uht.forEach(t),DDo=i(t6),Ki=n(t6,"P",{});var JZ=s(Ki);GDo=r(JZ,`Note:
Loading a model from its configuration file does `),dhe=n(JZ,"STRONG",{});var Jht=s(dhe);ODo=r(Jht,"not"),Jht.forEach(t),VDo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(JZ,"A",{href:!0});var Yht=s(rV);XDo=r(Yht,"from_pretrained()"),Yht.forEach(t),zDo=r(JZ," to load the model weights."),JZ.forEach(t),WDo=i(t6),T(k4.$$.fragment,t6),t6.forEach(t),QDo=i(Js),ao=n(Js,"DIV",{class:!0});var ca=s(ao);T(Ky.$$.fragment,ca),HDo=i(ca),che=n(ca,"P",{});var Kht=s(che);UDo=r(Kht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kht.forEach(t),JDo=i(ca),Na=n(ca,"P",{});var a6=s(Na);YDo=r(a6,"The model class to instantiate is selected based on the "),fhe=n(a6,"CODE",{});var Zht=s(fhe);KDo=r(Zht,"model_type"),Zht.forEach(t),ZDo=r(a6,` property of the config object (either
passed as an argument or loaded from `),mhe=n(a6,"CODE",{});var ept=s(mhe);eGo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),oGo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(a6,"CODE",{});var opt=s(ghe);rGo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),tGo=r(a6,":"),a6.forEach(t),aGo=i(ca),H=n(ca,"UL",{});var J=s(H);S4=n(J,"LI",{});var d$e=s(S4);hhe=n(d$e,"STRONG",{});var rpt=s(hhe);nGo=r(rpt,"albert"),rpt.forEach(t),sGo=r(d$e," \u2014 "),tV=n(d$e,"A",{href:!0});var tpt=s(tV);lGo=r(tpt,"AlbertForTokenClassification"),tpt.forEach(t),iGo=r(d$e," (ALBERT model)"),d$e.forEach(t),dGo=i(J),R4=n(J,"LI",{});var c$e=s(R4);phe=n(c$e,"STRONG",{});var apt=s(phe);cGo=r(apt,"bert"),apt.forEach(t),fGo=r(c$e," \u2014 "),aV=n(c$e,"A",{href:!0});var npt=s(aV);mGo=r(npt,"BertForTokenClassification"),npt.forEach(t),gGo=r(c$e," (BERT model)"),c$e.forEach(t),hGo=i(J),P4=n(J,"LI",{});var f$e=s(P4);_he=n(f$e,"STRONG",{});var spt=s(_he);pGo=r(spt,"big_bird"),spt.forEach(t),_Go=r(f$e," \u2014 "),nV=n(f$e,"A",{href:!0});var lpt=s(nV);uGo=r(lpt,"BigBirdForTokenClassification"),lpt.forEach(t),bGo=r(f$e," (BigBird model)"),f$e.forEach(t),vGo=i(J),B4=n(J,"LI",{});var m$e=s(B4);uhe=n(m$e,"STRONG",{});var ipt=s(uhe);FGo=r(ipt,"camembert"),ipt.forEach(t),TGo=r(m$e," \u2014 "),sV=n(m$e,"A",{href:!0});var dpt=s(sV);MGo=r(dpt,"CamembertForTokenClassification"),dpt.forEach(t),EGo=r(m$e," (CamemBERT model)"),m$e.forEach(t),CGo=i(J),I4=n(J,"LI",{});var g$e=s(I4);bhe=n(g$e,"STRONG",{});var cpt=s(bhe);wGo=r(cpt,"canine"),cpt.forEach(t),AGo=r(g$e," \u2014 "),lV=n(g$e,"A",{href:!0});var fpt=s(lV);yGo=r(fpt,"CanineForTokenClassification"),fpt.forEach(t),LGo=r(g$e," (Canine model)"),g$e.forEach(t),xGo=i(J),N4=n(J,"LI",{});var h$e=s(N4);vhe=n(h$e,"STRONG",{});var mpt=s(vhe);$Go=r(mpt,"convbert"),mpt.forEach(t),kGo=r(h$e," \u2014 "),iV=n(h$e,"A",{href:!0});var gpt=s(iV);SGo=r(gpt,"ConvBertForTokenClassification"),gpt.forEach(t),RGo=r(h$e," (ConvBERT model)"),h$e.forEach(t),PGo=i(J),q4=n(J,"LI",{});var p$e=s(q4);Fhe=n(p$e,"STRONG",{});var hpt=s(Fhe);BGo=r(hpt,"data2vec-text"),hpt.forEach(t),IGo=r(p$e," \u2014 "),dV=n(p$e,"A",{href:!0});var ppt=s(dV);NGo=r(ppt,"Data2VecTextForTokenClassification"),ppt.forEach(t),qGo=r(p$e," (Data2VecText model)"),p$e.forEach(t),jGo=i(J),j4=n(J,"LI",{});var _$e=s(j4);The=n(_$e,"STRONG",{});var _pt=s(The);DGo=r(_pt,"deberta"),_pt.forEach(t),GGo=r(_$e," \u2014 "),cV=n(_$e,"A",{href:!0});var upt=s(cV);OGo=r(upt,"DebertaForTokenClassification"),upt.forEach(t),VGo=r(_$e," (DeBERTa model)"),_$e.forEach(t),XGo=i(J),D4=n(J,"LI",{});var u$e=s(D4);Mhe=n(u$e,"STRONG",{});var bpt=s(Mhe);zGo=r(bpt,"deberta-v2"),bpt.forEach(t),WGo=r(u$e," \u2014 "),fV=n(u$e,"A",{href:!0});var vpt=s(fV);QGo=r(vpt,"DebertaV2ForTokenClassification"),vpt.forEach(t),HGo=r(u$e," (DeBERTa-v2 model)"),u$e.forEach(t),UGo=i(J),G4=n(J,"LI",{});var b$e=s(G4);Ehe=n(b$e,"STRONG",{});var Fpt=s(Ehe);JGo=r(Fpt,"distilbert"),Fpt.forEach(t),YGo=r(b$e," \u2014 "),mV=n(b$e,"A",{href:!0});var Tpt=s(mV);KGo=r(Tpt,"DistilBertForTokenClassification"),Tpt.forEach(t),ZGo=r(b$e," (DistilBERT model)"),b$e.forEach(t),eOo=i(J),O4=n(J,"LI",{});var v$e=s(O4);Che=n(v$e,"STRONG",{});var Mpt=s(Che);oOo=r(Mpt,"electra"),Mpt.forEach(t),rOo=r(v$e," \u2014 "),gV=n(v$e,"A",{href:!0});var Ept=s(gV);tOo=r(Ept,"ElectraForTokenClassification"),Ept.forEach(t),aOo=r(v$e," (ELECTRA model)"),v$e.forEach(t),nOo=i(J),V4=n(J,"LI",{});var F$e=s(V4);whe=n(F$e,"STRONG",{});var Cpt=s(whe);sOo=r(Cpt,"flaubert"),Cpt.forEach(t),lOo=r(F$e," \u2014 "),hV=n(F$e,"A",{href:!0});var wpt=s(hV);iOo=r(wpt,"FlaubertForTokenClassification"),wpt.forEach(t),dOo=r(F$e," (FlauBERT model)"),F$e.forEach(t),cOo=i(J),X4=n(J,"LI",{});var T$e=s(X4);Ahe=n(T$e,"STRONG",{});var Apt=s(Ahe);fOo=r(Apt,"fnet"),Apt.forEach(t),mOo=r(T$e," \u2014 "),pV=n(T$e,"A",{href:!0});var ypt=s(pV);gOo=r(ypt,"FNetForTokenClassification"),ypt.forEach(t),hOo=r(T$e," (FNet model)"),T$e.forEach(t),pOo=i(J),z4=n(J,"LI",{});var M$e=s(z4);yhe=n(M$e,"STRONG",{});var Lpt=s(yhe);_Oo=r(Lpt,"funnel"),Lpt.forEach(t),uOo=r(M$e," \u2014 "),_V=n(M$e,"A",{href:!0});var xpt=s(_V);bOo=r(xpt,"FunnelForTokenClassification"),xpt.forEach(t),vOo=r(M$e," (Funnel Transformer model)"),M$e.forEach(t),FOo=i(J),W4=n(J,"LI",{});var E$e=s(W4);Lhe=n(E$e,"STRONG",{});var $pt=s(Lhe);TOo=r($pt,"gpt2"),$pt.forEach(t),MOo=r(E$e," \u2014 "),uV=n(E$e,"A",{href:!0});var kpt=s(uV);EOo=r(kpt,"GPT2ForTokenClassification"),kpt.forEach(t),COo=r(E$e," (OpenAI GPT-2 model)"),E$e.forEach(t),wOo=i(J),Q4=n(J,"LI",{});var C$e=s(Q4);xhe=n(C$e,"STRONG",{});var Spt=s(xhe);AOo=r(Spt,"ibert"),Spt.forEach(t),yOo=r(C$e," \u2014 "),bV=n(C$e,"A",{href:!0});var Rpt=s(bV);LOo=r(Rpt,"IBertForTokenClassification"),Rpt.forEach(t),xOo=r(C$e," (I-BERT model)"),C$e.forEach(t),$Oo=i(J),H4=n(J,"LI",{});var w$e=s(H4);$he=n(w$e,"STRONG",{});var Ppt=s($he);kOo=r(Ppt,"layoutlm"),Ppt.forEach(t),SOo=r(w$e," \u2014 "),vV=n(w$e,"A",{href:!0});var Bpt=s(vV);ROo=r(Bpt,"LayoutLMForTokenClassification"),Bpt.forEach(t),POo=r(w$e," (LayoutLM model)"),w$e.forEach(t),BOo=i(J),U4=n(J,"LI",{});var A$e=s(U4);khe=n(A$e,"STRONG",{});var Ipt=s(khe);IOo=r(Ipt,"layoutlmv2"),Ipt.forEach(t),NOo=r(A$e," \u2014 "),FV=n(A$e,"A",{href:!0});var Npt=s(FV);qOo=r(Npt,"LayoutLMv2ForTokenClassification"),Npt.forEach(t),jOo=r(A$e," (LayoutLMv2 model)"),A$e.forEach(t),DOo=i(J),J4=n(J,"LI",{});var y$e=s(J4);She=n(y$e,"STRONG",{});var qpt=s(She);GOo=r(qpt,"layoutlmv3"),qpt.forEach(t),OOo=r(y$e," \u2014 "),TV=n(y$e,"A",{href:!0});var jpt=s(TV);VOo=r(jpt,"LayoutLMv3ForTokenClassification"),jpt.forEach(t),XOo=r(y$e," (LayoutLMv3 model)"),y$e.forEach(t),zOo=i(J),Y4=n(J,"LI",{});var L$e=s(Y4);Rhe=n(L$e,"STRONG",{});var Dpt=s(Rhe);WOo=r(Dpt,"longformer"),Dpt.forEach(t),QOo=r(L$e," \u2014 "),MV=n(L$e,"A",{href:!0});var Gpt=s(MV);HOo=r(Gpt,"LongformerForTokenClassification"),Gpt.forEach(t),UOo=r(L$e," (Longformer model)"),L$e.forEach(t),JOo=i(J),K4=n(J,"LI",{});var x$e=s(K4);Phe=n(x$e,"STRONG",{});var Opt=s(Phe);YOo=r(Opt,"megatron-bert"),Opt.forEach(t),KOo=r(x$e," \u2014 "),EV=n(x$e,"A",{href:!0});var Vpt=s(EV);ZOo=r(Vpt,"MegatronBertForTokenClassification"),Vpt.forEach(t),eVo=r(x$e," (MegatronBert model)"),x$e.forEach(t),oVo=i(J),Z4=n(J,"LI",{});var $$e=s(Z4);Bhe=n($$e,"STRONG",{});var Xpt=s(Bhe);rVo=r(Xpt,"mobilebert"),Xpt.forEach(t),tVo=r($$e," \u2014 "),CV=n($$e,"A",{href:!0});var zpt=s(CV);aVo=r(zpt,"MobileBertForTokenClassification"),zpt.forEach(t),nVo=r($$e," (MobileBERT model)"),$$e.forEach(t),sVo=i(J),ev=n(J,"LI",{});var k$e=s(ev);Ihe=n(k$e,"STRONG",{});var Wpt=s(Ihe);lVo=r(Wpt,"mpnet"),Wpt.forEach(t),iVo=r(k$e," \u2014 "),wV=n(k$e,"A",{href:!0});var Qpt=s(wV);dVo=r(Qpt,"MPNetForTokenClassification"),Qpt.forEach(t),cVo=r(k$e," (MPNet model)"),k$e.forEach(t),fVo=i(J),ov=n(J,"LI",{});var S$e=s(ov);Nhe=n(S$e,"STRONG",{});var Hpt=s(Nhe);mVo=r(Hpt,"nystromformer"),Hpt.forEach(t),gVo=r(S$e," \u2014 "),AV=n(S$e,"A",{href:!0});var Upt=s(AV);hVo=r(Upt,"NystromformerForTokenClassification"),Upt.forEach(t),pVo=r(S$e," (Nystromformer model)"),S$e.forEach(t),_Vo=i(J),rv=n(J,"LI",{});var R$e=s(rv);qhe=n(R$e,"STRONG",{});var Jpt=s(qhe);uVo=r(Jpt,"qdqbert"),Jpt.forEach(t),bVo=r(R$e," \u2014 "),yV=n(R$e,"A",{href:!0});var Ypt=s(yV);vVo=r(Ypt,"QDQBertForTokenClassification"),Ypt.forEach(t),FVo=r(R$e," (QDQBert model)"),R$e.forEach(t),TVo=i(J),tv=n(J,"LI",{});var P$e=s(tv);jhe=n(P$e,"STRONG",{});var Kpt=s(jhe);MVo=r(Kpt,"rembert"),Kpt.forEach(t),EVo=r(P$e," \u2014 "),LV=n(P$e,"A",{href:!0});var Zpt=s(LV);CVo=r(Zpt,"RemBertForTokenClassification"),Zpt.forEach(t),wVo=r(P$e," (RemBERT model)"),P$e.forEach(t),AVo=i(J),av=n(J,"LI",{});var B$e=s(av);Dhe=n(B$e,"STRONG",{});var e_t=s(Dhe);yVo=r(e_t,"roberta"),e_t.forEach(t),LVo=r(B$e," \u2014 "),xV=n(B$e,"A",{href:!0});var o_t=s(xV);xVo=r(o_t,"RobertaForTokenClassification"),o_t.forEach(t),$Vo=r(B$e," (RoBERTa model)"),B$e.forEach(t),kVo=i(J),nv=n(J,"LI",{});var I$e=s(nv);Ghe=n(I$e,"STRONG",{});var r_t=s(Ghe);SVo=r(r_t,"roformer"),r_t.forEach(t),RVo=r(I$e," \u2014 "),$V=n(I$e,"A",{href:!0});var t_t=s($V);PVo=r(t_t,"RoFormerForTokenClassification"),t_t.forEach(t),BVo=r(I$e," (RoFormer model)"),I$e.forEach(t),IVo=i(J),sv=n(J,"LI",{});var N$e=s(sv);Ohe=n(N$e,"STRONG",{});var a_t=s(Ohe);NVo=r(a_t,"squeezebert"),a_t.forEach(t),qVo=r(N$e," \u2014 "),kV=n(N$e,"A",{href:!0});var n_t=s(kV);jVo=r(n_t,"SqueezeBertForTokenClassification"),n_t.forEach(t),DVo=r(N$e," (SqueezeBERT model)"),N$e.forEach(t),GVo=i(J),lv=n(J,"LI",{});var q$e=s(lv);Vhe=n(q$e,"STRONG",{});var s_t=s(Vhe);OVo=r(s_t,"xlm"),s_t.forEach(t),VVo=r(q$e," \u2014 "),SV=n(q$e,"A",{href:!0});var l_t=s(SV);XVo=r(l_t,"XLMForTokenClassification"),l_t.forEach(t),zVo=r(q$e," (XLM model)"),q$e.forEach(t),WVo=i(J),iv=n(J,"LI",{});var j$e=s(iv);Xhe=n(j$e,"STRONG",{});var i_t=s(Xhe);QVo=r(i_t,"xlm-roberta"),i_t.forEach(t),HVo=r(j$e," \u2014 "),RV=n(j$e,"A",{href:!0});var d_t=s(RV);UVo=r(d_t,"XLMRobertaForTokenClassification"),d_t.forEach(t),JVo=r(j$e," (XLM-RoBERTa model)"),j$e.forEach(t),YVo=i(J),dv=n(J,"LI",{});var D$e=s(dv);zhe=n(D$e,"STRONG",{});var c_t=s(zhe);KVo=r(c_t,"xlm-roberta-xl"),c_t.forEach(t),ZVo=r(D$e," \u2014 "),PV=n(D$e,"A",{href:!0});var f_t=s(PV);eXo=r(f_t,"XLMRobertaXLForTokenClassification"),f_t.forEach(t),oXo=r(D$e," (XLM-RoBERTa-XL model)"),D$e.forEach(t),rXo=i(J),cv=n(J,"LI",{});var G$e=s(cv);Whe=n(G$e,"STRONG",{});var m_t=s(Whe);tXo=r(m_t,"xlnet"),m_t.forEach(t),aXo=r(G$e," \u2014 "),BV=n(G$e,"A",{href:!0});var g_t=s(BV);nXo=r(g_t,"XLNetForTokenClassification"),g_t.forEach(t),sXo=r(G$e," (XLNet model)"),G$e.forEach(t),lXo=i(J),fv=n(J,"LI",{});var O$e=s(fv);Qhe=n(O$e,"STRONG",{});var h_t=s(Qhe);iXo=r(h_t,"yoso"),h_t.forEach(t),dXo=r(O$e," \u2014 "),IV=n(O$e,"A",{href:!0});var p_t=s(IV);cXo=r(p_t,"YosoForTokenClassification"),p_t.forEach(t),fXo=r(O$e," (YOSO model)"),O$e.forEach(t),J.forEach(t),mXo=i(ca),mv=n(ca,"P",{});var V$e=s(mv);gXo=r(V$e,"The model is set in evaluation mode by default using "),Hhe=n(V$e,"CODE",{});var __t=s(Hhe);hXo=r(__t,"model.eval()"),__t.forEach(t),pXo=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(V$e,"CODE",{});var u_t=s(Uhe);_Xo=r(u_t,"model.train()"),u_t.forEach(t),V$e.forEach(t),uXo=i(ca),T(gv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),fje=i(f),Zi=n(f,"H2",{class:!0});var pGe=s(Zi);hv=n(pGe,"A",{id:!0,class:!0,href:!0});var b_t=s(hv);Jhe=n(b_t,"SPAN",{});var v_t=s(Jhe);T(Zy.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),bXo=i(pGe),Yhe=n(pGe,"SPAN",{});var F_t=s(Yhe);vXo=r(F_t,"AutoModelForQuestionAnswering"),F_t.forEach(t),pGe.forEach(t),mje=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(eL.$$.fragment,Ys),FXo=i(Ys),ed=n(Ys,"P",{});var YZ=s(ed);TXo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NV=n(YZ,"A",{href:!0});var T_t=s(NV);MXo=r(T_t,"from_pretrained()"),T_t.forEach(t),EXo=r(YZ," class method or the "),qV=n(YZ,"A",{href:!0});var M_t=s(qV);CXo=r(M_t,"from_config()"),M_t.forEach(t),wXo=r(YZ,` class
method.`),YZ.forEach(t),AXo=i(Ys),oL=n(Ys,"P",{});var _Ge=s(oL);yXo=r(_Ge,"This class cannot be instantiated directly using "),Khe=n(_Ge,"CODE",{});var E_t=s(Khe);LXo=r(E_t,"__init__()"),E_t.forEach(t),xXo=r(_Ge," (throws an error)."),_Ge.forEach(t),$Xo=i(Ys),gt=n(Ys,"DIV",{class:!0});var n6=s(gt);T(rL.$$.fragment,n6),kXo=i(n6),Zhe=n(n6,"P",{});var C_t=s(Zhe);SXo=r(C_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C_t.forEach(t),RXo=i(n6),od=n(n6,"P",{});var KZ=s(od);PXo=r(KZ,`Note:
Loading a model from its configuration file does `),epe=n(KZ,"STRONG",{});var w_t=s(epe);BXo=r(w_t,"not"),w_t.forEach(t),IXo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(KZ,"A",{href:!0});var A_t=s(jV);NXo=r(A_t,"from_pretrained()"),A_t.forEach(t),qXo=r(KZ," to load the model weights."),KZ.forEach(t),jXo=i(n6),T(pv.$$.fragment,n6),n6.forEach(t),DXo=i(Ys),no=n(Ys,"DIV",{class:!0});var fa=s(no);T(tL.$$.fragment,fa),GXo=i(fa),ope=n(fa,"P",{});var y_t=s(ope);OXo=r(y_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y_t.forEach(t),VXo=i(fa),qa=n(fa,"P",{});var s6=s(qa);XXo=r(s6,"The model class to instantiate is selected based on the "),rpe=n(s6,"CODE",{});var L_t=s(rpe);zXo=r(L_t,"model_type"),L_t.forEach(t),WXo=r(s6,` property of the config object (either
passed as an argument or loaded from `),tpe=n(s6,"CODE",{});var x_t=s(tpe);QXo=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),HXo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(s6,"CODE",{});var $_t=s(ape);UXo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),JXo=r(s6,":"),s6.forEach(t),YXo=i(fa),V=n(fa,"UL",{});var X=s(V);_v=n(X,"LI",{});var X$e=s(_v);npe=n(X$e,"STRONG",{});var k_t=s(npe);KXo=r(k_t,"albert"),k_t.forEach(t),ZXo=r(X$e," \u2014 "),DV=n(X$e,"A",{href:!0});var S_t=s(DV);ezo=r(S_t,"AlbertForQuestionAnswering"),S_t.forEach(t),ozo=r(X$e," (ALBERT model)"),X$e.forEach(t),rzo=i(X),uv=n(X,"LI",{});var z$e=s(uv);spe=n(z$e,"STRONG",{});var R_t=s(spe);tzo=r(R_t,"bart"),R_t.forEach(t),azo=r(z$e," \u2014 "),GV=n(z$e,"A",{href:!0});var P_t=s(GV);nzo=r(P_t,"BartForQuestionAnswering"),P_t.forEach(t),szo=r(z$e," (BART model)"),z$e.forEach(t),lzo=i(X),bv=n(X,"LI",{});var W$e=s(bv);lpe=n(W$e,"STRONG",{});var B_t=s(lpe);izo=r(B_t,"bert"),B_t.forEach(t),dzo=r(W$e," \u2014 "),OV=n(W$e,"A",{href:!0});var I_t=s(OV);czo=r(I_t,"BertForQuestionAnswering"),I_t.forEach(t),fzo=r(W$e," (BERT model)"),W$e.forEach(t),mzo=i(X),vv=n(X,"LI",{});var Q$e=s(vv);ipe=n(Q$e,"STRONG",{});var N_t=s(ipe);gzo=r(N_t,"big_bird"),N_t.forEach(t),hzo=r(Q$e," \u2014 "),VV=n(Q$e,"A",{href:!0});var q_t=s(VV);pzo=r(q_t,"BigBirdForQuestionAnswering"),q_t.forEach(t),_zo=r(Q$e," (BigBird model)"),Q$e.forEach(t),uzo=i(X),Fv=n(X,"LI",{});var H$e=s(Fv);dpe=n(H$e,"STRONG",{});var j_t=s(dpe);bzo=r(j_t,"bigbird_pegasus"),j_t.forEach(t),vzo=r(H$e," \u2014 "),XV=n(H$e,"A",{href:!0});var D_t=s(XV);Fzo=r(D_t,"BigBirdPegasusForQuestionAnswering"),D_t.forEach(t),Tzo=r(H$e," (BigBirdPegasus model)"),H$e.forEach(t),Mzo=i(X),Tv=n(X,"LI",{});var U$e=s(Tv);cpe=n(U$e,"STRONG",{});var G_t=s(cpe);Ezo=r(G_t,"camembert"),G_t.forEach(t),Czo=r(U$e," \u2014 "),zV=n(U$e,"A",{href:!0});var O_t=s(zV);wzo=r(O_t,"CamembertForQuestionAnswering"),O_t.forEach(t),Azo=r(U$e," (CamemBERT model)"),U$e.forEach(t),yzo=i(X),Mv=n(X,"LI",{});var J$e=s(Mv);fpe=n(J$e,"STRONG",{});var V_t=s(fpe);Lzo=r(V_t,"canine"),V_t.forEach(t),xzo=r(J$e," \u2014 "),WV=n(J$e,"A",{href:!0});var X_t=s(WV);$zo=r(X_t,"CanineForQuestionAnswering"),X_t.forEach(t),kzo=r(J$e," (Canine model)"),J$e.forEach(t),Szo=i(X),Ev=n(X,"LI",{});var Y$e=s(Ev);mpe=n(Y$e,"STRONG",{});var z_t=s(mpe);Rzo=r(z_t,"convbert"),z_t.forEach(t),Pzo=r(Y$e," \u2014 "),QV=n(Y$e,"A",{href:!0});var W_t=s(QV);Bzo=r(W_t,"ConvBertForQuestionAnswering"),W_t.forEach(t),Izo=r(Y$e," (ConvBERT model)"),Y$e.forEach(t),Nzo=i(X),Cv=n(X,"LI",{});var K$e=s(Cv);gpe=n(K$e,"STRONG",{});var Q_t=s(gpe);qzo=r(Q_t,"data2vec-text"),Q_t.forEach(t),jzo=r(K$e," \u2014 "),HV=n(K$e,"A",{href:!0});var H_t=s(HV);Dzo=r(H_t,"Data2VecTextForQuestionAnswering"),H_t.forEach(t),Gzo=r(K$e," (Data2VecText model)"),K$e.forEach(t),Ozo=i(X),wv=n(X,"LI",{});var Z$e=s(wv);hpe=n(Z$e,"STRONG",{});var U_t=s(hpe);Vzo=r(U_t,"deberta"),U_t.forEach(t),Xzo=r(Z$e," \u2014 "),UV=n(Z$e,"A",{href:!0});var J_t=s(UV);zzo=r(J_t,"DebertaForQuestionAnswering"),J_t.forEach(t),Wzo=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),Qzo=i(X),Av=n(X,"LI",{});var eke=s(Av);ppe=n(eke,"STRONG",{});var Y_t=s(ppe);Hzo=r(Y_t,"deberta-v2"),Y_t.forEach(t),Uzo=r(eke," \u2014 "),JV=n(eke,"A",{href:!0});var K_t=s(JV);Jzo=r(K_t,"DebertaV2ForQuestionAnswering"),K_t.forEach(t),Yzo=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),Kzo=i(X),yv=n(X,"LI",{});var oke=s(yv);_pe=n(oke,"STRONG",{});var Z_t=s(_pe);Zzo=r(Z_t,"distilbert"),Z_t.forEach(t),eWo=r(oke," \u2014 "),YV=n(oke,"A",{href:!0});var eut=s(YV);oWo=r(eut,"DistilBertForQuestionAnswering"),eut.forEach(t),rWo=r(oke," (DistilBERT model)"),oke.forEach(t),tWo=i(X),Lv=n(X,"LI",{});var rke=s(Lv);upe=n(rke,"STRONG",{});var out=s(upe);aWo=r(out,"electra"),out.forEach(t),nWo=r(rke," \u2014 "),KV=n(rke,"A",{href:!0});var rut=s(KV);sWo=r(rut,"ElectraForQuestionAnswering"),rut.forEach(t),lWo=r(rke," (ELECTRA model)"),rke.forEach(t),iWo=i(X),xv=n(X,"LI",{});var tke=s(xv);bpe=n(tke,"STRONG",{});var tut=s(bpe);dWo=r(tut,"flaubert"),tut.forEach(t),cWo=r(tke," \u2014 "),ZV=n(tke,"A",{href:!0});var aut=s(ZV);fWo=r(aut,"FlaubertForQuestionAnsweringSimple"),aut.forEach(t),mWo=r(tke," (FlauBERT model)"),tke.forEach(t),gWo=i(X),$v=n(X,"LI",{});var ake=s($v);vpe=n(ake,"STRONG",{});var nut=s(vpe);hWo=r(nut,"fnet"),nut.forEach(t),pWo=r(ake," \u2014 "),eX=n(ake,"A",{href:!0});var sut=s(eX);_Wo=r(sut,"FNetForQuestionAnswering"),sut.forEach(t),uWo=r(ake," (FNet model)"),ake.forEach(t),bWo=i(X),kv=n(X,"LI",{});var nke=s(kv);Fpe=n(nke,"STRONG",{});var lut=s(Fpe);vWo=r(lut,"funnel"),lut.forEach(t),FWo=r(nke," \u2014 "),oX=n(nke,"A",{href:!0});var iut=s(oX);TWo=r(iut,"FunnelForQuestionAnswering"),iut.forEach(t),MWo=r(nke," (Funnel Transformer model)"),nke.forEach(t),EWo=i(X),Sv=n(X,"LI",{});var ske=s(Sv);Tpe=n(ske,"STRONG",{});var dut=s(Tpe);CWo=r(dut,"gptj"),dut.forEach(t),wWo=r(ske," \u2014 "),rX=n(ske,"A",{href:!0});var cut=s(rX);AWo=r(cut,"GPTJForQuestionAnswering"),cut.forEach(t),yWo=r(ske," (GPT-J model)"),ske.forEach(t),LWo=i(X),Rv=n(X,"LI",{});var lke=s(Rv);Mpe=n(lke,"STRONG",{});var fut=s(Mpe);xWo=r(fut,"ibert"),fut.forEach(t),$Wo=r(lke," \u2014 "),tX=n(lke,"A",{href:!0});var mut=s(tX);kWo=r(mut,"IBertForQuestionAnswering"),mut.forEach(t),SWo=r(lke," (I-BERT model)"),lke.forEach(t),RWo=i(X),Pv=n(X,"LI",{});var ike=s(Pv);Epe=n(ike,"STRONG",{});var gut=s(Epe);PWo=r(gut,"layoutlmv2"),gut.forEach(t),BWo=r(ike," \u2014 "),aX=n(ike,"A",{href:!0});var hut=s(aX);IWo=r(hut,"LayoutLMv2ForQuestionAnswering"),hut.forEach(t),NWo=r(ike," (LayoutLMv2 model)"),ike.forEach(t),qWo=i(X),Bv=n(X,"LI",{});var dke=s(Bv);Cpe=n(dke,"STRONG",{});var put=s(Cpe);jWo=r(put,"layoutlmv3"),put.forEach(t),DWo=r(dke," \u2014 "),nX=n(dke,"A",{href:!0});var _ut=s(nX);GWo=r(_ut,"LayoutLMv3ForQuestionAnswering"),_ut.forEach(t),OWo=r(dke," (LayoutLMv3 model)"),dke.forEach(t),VWo=i(X),Iv=n(X,"LI",{});var cke=s(Iv);wpe=n(cke,"STRONG",{});var uut=s(wpe);XWo=r(uut,"led"),uut.forEach(t),zWo=r(cke," \u2014 "),sX=n(cke,"A",{href:!0});var but=s(sX);WWo=r(but,"LEDForQuestionAnswering"),but.forEach(t),QWo=r(cke," (LED model)"),cke.forEach(t),HWo=i(X),Nv=n(X,"LI",{});var fke=s(Nv);Ape=n(fke,"STRONG",{});var vut=s(Ape);UWo=r(vut,"longformer"),vut.forEach(t),JWo=r(fke," \u2014 "),lX=n(fke,"A",{href:!0});var Fut=s(lX);YWo=r(Fut,"LongformerForQuestionAnswering"),Fut.forEach(t),KWo=r(fke," (Longformer model)"),fke.forEach(t),ZWo=i(X),qv=n(X,"LI",{});var mke=s(qv);ype=n(mke,"STRONG",{});var Tut=s(ype);eQo=r(Tut,"lxmert"),Tut.forEach(t),oQo=r(mke," \u2014 "),iX=n(mke,"A",{href:!0});var Mut=s(iX);rQo=r(Mut,"LxmertForQuestionAnswering"),Mut.forEach(t),tQo=r(mke," (LXMERT model)"),mke.forEach(t),aQo=i(X),jv=n(X,"LI",{});var gke=s(jv);Lpe=n(gke,"STRONG",{});var Eut=s(Lpe);nQo=r(Eut,"mbart"),Eut.forEach(t),sQo=r(gke," \u2014 "),dX=n(gke,"A",{href:!0});var Cut=s(dX);lQo=r(Cut,"MBartForQuestionAnswering"),Cut.forEach(t),iQo=r(gke," (mBART model)"),gke.forEach(t),dQo=i(X),Dv=n(X,"LI",{});var hke=s(Dv);xpe=n(hke,"STRONG",{});var wut=s(xpe);cQo=r(wut,"megatron-bert"),wut.forEach(t),fQo=r(hke," \u2014 "),cX=n(hke,"A",{href:!0});var Aut=s(cX);mQo=r(Aut,"MegatronBertForQuestionAnswering"),Aut.forEach(t),gQo=r(hke," (MegatronBert model)"),hke.forEach(t),hQo=i(X),Gv=n(X,"LI",{});var pke=s(Gv);$pe=n(pke,"STRONG",{});var yut=s($pe);pQo=r(yut,"mobilebert"),yut.forEach(t),_Qo=r(pke," \u2014 "),fX=n(pke,"A",{href:!0});var Lut=s(fX);uQo=r(Lut,"MobileBertForQuestionAnswering"),Lut.forEach(t),bQo=r(pke," (MobileBERT model)"),pke.forEach(t),vQo=i(X),Ov=n(X,"LI",{});var _ke=s(Ov);kpe=n(_ke,"STRONG",{});var xut=s(kpe);FQo=r(xut,"mpnet"),xut.forEach(t),TQo=r(_ke," \u2014 "),mX=n(_ke,"A",{href:!0});var $ut=s(mX);MQo=r($ut,"MPNetForQuestionAnswering"),$ut.forEach(t),EQo=r(_ke," (MPNet model)"),_ke.forEach(t),CQo=i(X),Vv=n(X,"LI",{});var uke=s(Vv);Spe=n(uke,"STRONG",{});var kut=s(Spe);wQo=r(kut,"nystromformer"),kut.forEach(t),AQo=r(uke," \u2014 "),gX=n(uke,"A",{href:!0});var Sut=s(gX);yQo=r(Sut,"NystromformerForQuestionAnswering"),Sut.forEach(t),LQo=r(uke," (Nystromformer model)"),uke.forEach(t),xQo=i(X),Xv=n(X,"LI",{});var bke=s(Xv);Rpe=n(bke,"STRONG",{});var Rut=s(Rpe);$Qo=r(Rut,"qdqbert"),Rut.forEach(t),kQo=r(bke," \u2014 "),hX=n(bke,"A",{href:!0});var Put=s(hX);SQo=r(Put,"QDQBertForQuestionAnswering"),Put.forEach(t),RQo=r(bke," (QDQBert model)"),bke.forEach(t),PQo=i(X),zv=n(X,"LI",{});var vke=s(zv);Ppe=n(vke,"STRONG",{});var But=s(Ppe);BQo=r(But,"reformer"),But.forEach(t),IQo=r(vke," \u2014 "),pX=n(vke,"A",{href:!0});var Iut=s(pX);NQo=r(Iut,"ReformerForQuestionAnswering"),Iut.forEach(t),qQo=r(vke," (Reformer model)"),vke.forEach(t),jQo=i(X),Wv=n(X,"LI",{});var Fke=s(Wv);Bpe=n(Fke,"STRONG",{});var Nut=s(Bpe);DQo=r(Nut,"rembert"),Nut.forEach(t),GQo=r(Fke," \u2014 "),_X=n(Fke,"A",{href:!0});var qut=s(_X);OQo=r(qut,"RemBertForQuestionAnswering"),qut.forEach(t),VQo=r(Fke," (RemBERT model)"),Fke.forEach(t),XQo=i(X),Qv=n(X,"LI",{});var Tke=s(Qv);Ipe=n(Tke,"STRONG",{});var jut=s(Ipe);zQo=r(jut,"roberta"),jut.forEach(t),WQo=r(Tke," \u2014 "),uX=n(Tke,"A",{href:!0});var Dut=s(uX);QQo=r(Dut,"RobertaForQuestionAnswering"),Dut.forEach(t),HQo=r(Tke," (RoBERTa model)"),Tke.forEach(t),UQo=i(X),Hv=n(X,"LI",{});var Mke=s(Hv);Npe=n(Mke,"STRONG",{});var Gut=s(Npe);JQo=r(Gut,"roformer"),Gut.forEach(t),YQo=r(Mke," \u2014 "),bX=n(Mke,"A",{href:!0});var Out=s(bX);KQo=r(Out,"RoFormerForQuestionAnswering"),Out.forEach(t),ZQo=r(Mke," (RoFormer model)"),Mke.forEach(t),eHo=i(X),Uv=n(X,"LI",{});var Eke=s(Uv);qpe=n(Eke,"STRONG",{});var Vut=s(qpe);oHo=r(Vut,"splinter"),Vut.forEach(t),rHo=r(Eke," \u2014 "),vX=n(Eke,"A",{href:!0});var Xut=s(vX);tHo=r(Xut,"SplinterForQuestionAnswering"),Xut.forEach(t),aHo=r(Eke," (Splinter model)"),Eke.forEach(t),nHo=i(X),Jv=n(X,"LI",{});var Cke=s(Jv);jpe=n(Cke,"STRONG",{});var zut=s(jpe);sHo=r(zut,"squeezebert"),zut.forEach(t),lHo=r(Cke," \u2014 "),FX=n(Cke,"A",{href:!0});var Wut=s(FX);iHo=r(Wut,"SqueezeBertForQuestionAnswering"),Wut.forEach(t),dHo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),cHo=i(X),Yv=n(X,"LI",{});var wke=s(Yv);Dpe=n(wke,"STRONG",{});var Qut=s(Dpe);fHo=r(Qut,"xlm"),Qut.forEach(t),mHo=r(wke," \u2014 "),TX=n(wke,"A",{href:!0});var Hut=s(TX);gHo=r(Hut,"XLMForQuestionAnsweringSimple"),Hut.forEach(t),hHo=r(wke," (XLM model)"),wke.forEach(t),pHo=i(X),Kv=n(X,"LI",{});var Ake=s(Kv);Gpe=n(Ake,"STRONG",{});var Uut=s(Gpe);_Ho=r(Uut,"xlm-roberta"),Uut.forEach(t),uHo=r(Ake," \u2014 "),MX=n(Ake,"A",{href:!0});var Jut=s(MX);bHo=r(Jut,"XLMRobertaForQuestionAnswering"),Jut.forEach(t),vHo=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),FHo=i(X),Zv=n(X,"LI",{});var yke=s(Zv);Ope=n(yke,"STRONG",{});var Yut=s(Ope);THo=r(Yut,"xlm-roberta-xl"),Yut.forEach(t),MHo=r(yke," \u2014 "),EX=n(yke,"A",{href:!0});var Kut=s(EX);EHo=r(Kut,"XLMRobertaXLForQuestionAnswering"),Kut.forEach(t),CHo=r(yke," (XLM-RoBERTa-XL model)"),yke.forEach(t),wHo=i(X),e5=n(X,"LI",{});var Lke=s(e5);Vpe=n(Lke,"STRONG",{});var Zut=s(Vpe);AHo=r(Zut,"xlnet"),Zut.forEach(t),yHo=r(Lke," \u2014 "),CX=n(Lke,"A",{href:!0});var e1t=s(CX);LHo=r(e1t,"XLNetForQuestionAnsweringSimple"),e1t.forEach(t),xHo=r(Lke," (XLNet model)"),Lke.forEach(t),$Ho=i(X),o5=n(X,"LI",{});var xke=s(o5);Xpe=n(xke,"STRONG",{});var o1t=s(Xpe);kHo=r(o1t,"yoso"),o1t.forEach(t),SHo=r(xke," \u2014 "),wX=n(xke,"A",{href:!0});var r1t=s(wX);RHo=r(r1t,"YosoForQuestionAnswering"),r1t.forEach(t),PHo=r(xke," (YOSO model)"),xke.forEach(t),X.forEach(t),BHo=i(fa),r5=n(fa,"P",{});var $ke=s(r5);IHo=r($ke,"The model is set in evaluation mode by default using "),zpe=n($ke,"CODE",{});var t1t=s(zpe);NHo=r(t1t,"model.eval()"),t1t.forEach(t),qHo=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n($ke,"CODE",{});var a1t=s(Wpe);jHo=r(a1t,"model.train()"),a1t.forEach(t),$ke.forEach(t),DHo=i(fa),T(t5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),gje=i(f),rd=n(f,"H2",{class:!0});var uGe=s(rd);a5=n(uGe,"A",{id:!0,class:!0,href:!0});var n1t=s(a5);Qpe=n(n1t,"SPAN",{});var s1t=s(Qpe);T(aL.$$.fragment,s1t),s1t.forEach(t),n1t.forEach(t),GHo=i(uGe),Hpe=n(uGe,"SPAN",{});var l1t=s(Hpe);OHo=r(l1t,"AutoModelForTableQuestionAnswering"),l1t.forEach(t),uGe.forEach(t),hje=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(nL.$$.fragment,Ks),VHo=i(Ks),td=n(Ks,"P",{});var ZZ=s(td);XHo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AX=n(ZZ,"A",{href:!0});var i1t=s(AX);zHo=r(i1t,"from_pretrained()"),i1t.forEach(t),WHo=r(ZZ," class method or the "),yX=n(ZZ,"A",{href:!0});var d1t=s(yX);QHo=r(d1t,"from_config()"),d1t.forEach(t),HHo=r(ZZ,` class
method.`),ZZ.forEach(t),UHo=i(Ks),sL=n(Ks,"P",{});var bGe=s(sL);JHo=r(bGe,"This class cannot be instantiated directly using "),Upe=n(bGe,"CODE",{});var c1t=s(Upe);YHo=r(c1t,"__init__()"),c1t.forEach(t),KHo=r(bGe," (throws an error)."),bGe.forEach(t),ZHo=i(Ks),ht=n(Ks,"DIV",{class:!0});var l6=s(ht);T(lL.$$.fragment,l6),eUo=i(l6),Jpe=n(l6,"P",{});var f1t=s(Jpe);oUo=r(f1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),f1t.forEach(t),rUo=i(l6),ad=n(l6,"P",{});var eee=s(ad);tUo=r(eee,`Note:
Loading a model from its configuration file does `),Ype=n(eee,"STRONG",{});var m1t=s(Ype);aUo=r(m1t,"not"),m1t.forEach(t),nUo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(eee,"A",{href:!0});var g1t=s(LX);sUo=r(g1t,"from_pretrained()"),g1t.forEach(t),lUo=r(eee," to load the model weights."),eee.forEach(t),iUo=i(l6),T(n5.$$.fragment,l6),l6.forEach(t),dUo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(iL.$$.fragment,ma),cUo=i(ma),Kpe=n(ma,"P",{});var h1t=s(Kpe);fUo=r(h1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),h1t.forEach(t),mUo=i(ma),ja=n(ma,"P",{});var i6=s(ja);gUo=r(i6,"The model class to instantiate is selected based on the "),Zpe=n(i6,"CODE",{});var p1t=s(Zpe);hUo=r(p1t,"model_type"),p1t.forEach(t),pUo=r(i6,` property of the config object (either
passed as an argument or loaded from `),e_e=n(i6,"CODE",{});var _1t=s(e_e);_Uo=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),uUo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(i6,"CODE",{});var u1t=s(o_e);bUo=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),vUo=r(i6,":"),i6.forEach(t),FUo=i(ma),r_e=n(ma,"UL",{});var b1t=s(r_e);s5=n(b1t,"LI",{});var kke=s(s5);t_e=n(kke,"STRONG",{});var v1t=s(t_e);TUo=r(v1t,"tapas"),v1t.forEach(t),MUo=r(kke," \u2014 "),xX=n(kke,"A",{href:!0});var F1t=s(xX);EUo=r(F1t,"TapasForQuestionAnswering"),F1t.forEach(t),CUo=r(kke," (TAPAS model)"),kke.forEach(t),b1t.forEach(t),wUo=i(ma),l5=n(ma,"P",{});var Ske=s(l5);AUo=r(Ske,"The model is set in evaluation mode by default using "),a_e=n(Ske,"CODE",{});var T1t=s(a_e);yUo=r(T1t,"model.eval()"),T1t.forEach(t),LUo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(Ske,"CODE",{});var M1t=s(n_e);xUo=r(M1t,"model.train()"),M1t.forEach(t),Ske.forEach(t),$Uo=i(ma),T(i5.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),pje=i(f),nd=n(f,"H2",{class:!0});var vGe=s(nd);d5=n(vGe,"A",{id:!0,class:!0,href:!0});var E1t=s(d5);s_e=n(E1t,"SPAN",{});var C1t=s(s_e);T(dL.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),kUo=i(vGe),l_e=n(vGe,"SPAN",{});var w1t=s(l_e);SUo=r(w1t,"AutoModelForImageClassification"),w1t.forEach(t),vGe.forEach(t),_je=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(cL.$$.fragment,Zs),RUo=i(Zs),sd=n(Zs,"P",{});var oee=s(sd);PUo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$X=n(oee,"A",{href:!0});var A1t=s($X);BUo=r(A1t,"from_pretrained()"),A1t.forEach(t),IUo=r(oee," class method or the "),kX=n(oee,"A",{href:!0});var y1t=s(kX);NUo=r(y1t,"from_config()"),y1t.forEach(t),qUo=r(oee,` class
method.`),oee.forEach(t),jUo=i(Zs),fL=n(Zs,"P",{});var FGe=s(fL);DUo=r(FGe,"This class cannot be instantiated directly using "),i_e=n(FGe,"CODE",{});var L1t=s(i_e);GUo=r(L1t,"__init__()"),L1t.forEach(t),OUo=r(FGe," (throws an error)."),FGe.forEach(t),VUo=i(Zs),pt=n(Zs,"DIV",{class:!0});var d6=s(pt);T(mL.$$.fragment,d6),XUo=i(d6),d_e=n(d6,"P",{});var x1t=s(d_e);zUo=r(x1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x1t.forEach(t),WUo=i(d6),ld=n(d6,"P",{});var ree=s(ld);QUo=r(ree,`Note:
Loading a model from its configuration file does `),c_e=n(ree,"STRONG",{});var $1t=s(c_e);HUo=r($1t,"not"),$1t.forEach(t),UUo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(ree,"A",{href:!0});var k1t=s(SX);JUo=r(k1t,"from_pretrained()"),k1t.forEach(t),YUo=r(ree," to load the model weights."),ree.forEach(t),KUo=i(d6),T(c5.$$.fragment,d6),d6.forEach(t),ZUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ga=s(lo);T(gL.$$.fragment,ga),eJo=i(ga),f_e=n(ga,"P",{});var S1t=s(f_e);oJo=r(S1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),S1t.forEach(t),rJo=i(ga),Da=n(ga,"P",{});var c6=s(Da);tJo=r(c6,"The model class to instantiate is selected based on the "),m_e=n(c6,"CODE",{});var R1t=s(m_e);aJo=r(R1t,"model_type"),R1t.forEach(t),nJo=r(c6,` property of the config object (either
passed as an argument or loaded from `),g_e=n(c6,"CODE",{});var P1t=s(g_e);sJo=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),lJo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(c6,"CODE",{});var B1t=s(h_e);iJo=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),dJo=r(c6,":"),c6.forEach(t),cJo=i(ga),ve=n(ga,"UL",{});var Te=s(ve);f5=n(Te,"LI",{});var Rke=s(f5);p_e=n(Rke,"STRONG",{});var I1t=s(p_e);fJo=r(I1t,"beit"),I1t.forEach(t),mJo=r(Rke," \u2014 "),RX=n(Rke,"A",{href:!0});var N1t=s(RX);gJo=r(N1t,"BeitForImageClassification"),N1t.forEach(t),hJo=r(Rke," (BEiT model)"),Rke.forEach(t),pJo=i(Te),m5=n(Te,"LI",{});var Pke=s(m5);__e=n(Pke,"STRONG",{});var q1t=s(__e);_Jo=r(q1t,"convnext"),q1t.forEach(t),uJo=r(Pke," \u2014 "),PX=n(Pke,"A",{href:!0});var j1t=s(PX);bJo=r(j1t,"ConvNextForImageClassification"),j1t.forEach(t),vJo=r(Pke," (ConvNext model)"),Pke.forEach(t),FJo=i(Te),g5=n(Te,"LI",{});var Bke=s(g5);u_e=n(Bke,"STRONG",{});var D1t=s(u_e);TJo=r(D1t,"cvt"),D1t.forEach(t),MJo=r(Bke," \u2014 "),BX=n(Bke,"A",{href:!0});var G1t=s(BX);EJo=r(G1t,"CvtForImageClassification"),G1t.forEach(t),CJo=r(Bke," (CvT model)"),Bke.forEach(t),wJo=i(Te),h5=n(Te,"LI",{});var Ike=s(h5);b_e=n(Ike,"STRONG",{});var O1t=s(b_e);AJo=r(O1t,"data2vec-vision"),O1t.forEach(t),yJo=r(Ike," \u2014 "),IX=n(Ike,"A",{href:!0});var V1t=s(IX);LJo=r(V1t,"Data2VecVisionForImageClassification"),V1t.forEach(t),xJo=r(Ike," (Data2VecVision model)"),Ike.forEach(t),$Jo=i(Te),Bs=n(Te,"LI",{});var K$=s(Bs);v_e=n(K$,"STRONG",{});var X1t=s(v_e);kJo=r(X1t,"deit"),X1t.forEach(t),SJo=r(K$," \u2014 "),NX=n(K$,"A",{href:!0});var z1t=s(NX);RJo=r(z1t,"DeiTForImageClassification"),z1t.forEach(t),PJo=r(K$," or "),qX=n(K$,"A",{href:!0});var W1t=s(qX);BJo=r(W1t,"DeiTForImageClassificationWithTeacher"),W1t.forEach(t),IJo=r(K$," (DeiT model)"),K$.forEach(t),NJo=i(Te),p5=n(Te,"LI",{});var Nke=s(p5);F_e=n(Nke,"STRONG",{});var Q1t=s(F_e);qJo=r(Q1t,"imagegpt"),Q1t.forEach(t),jJo=r(Nke," \u2014 "),jX=n(Nke,"A",{href:!0});var H1t=s(jX);DJo=r(H1t,"ImageGPTForImageClassification"),H1t.forEach(t),GJo=r(Nke," (ImageGPT model)"),Nke.forEach(t),OJo=i(Te),_5=n(Te,"LI",{});var qke=s(_5);T_e=n(qke,"STRONG",{});var U1t=s(T_e);VJo=r(U1t,"mobilevit"),U1t.forEach(t),XJo=r(qke," \u2014 "),DX=n(qke,"A",{href:!0});var J1t=s(DX);zJo=r(J1t,"MobileViTForImageClassification"),J1t.forEach(t),WJo=r(qke," (MobileViT model)"),qke.forEach(t),QJo=i(Te),_t=n(Te,"LI",{});var pf=s(_t);M_e=n(pf,"STRONG",{});var Y1t=s(M_e);HJo=r(Y1t,"perceiver"),Y1t.forEach(t),UJo=r(pf," \u2014 "),GX=n(pf,"A",{href:!0});var K1t=s(GX);JJo=r(K1t,"PerceiverForImageClassificationLearned"),K1t.forEach(t),YJo=r(pf," or "),OX=n(pf,"A",{href:!0});var Z1t=s(OX);KJo=r(Z1t,"PerceiverForImageClassificationFourier"),Z1t.forEach(t),ZJo=r(pf," or "),VX=n(pf,"A",{href:!0});var ebt=s(VX);eYo=r(ebt,"PerceiverForImageClassificationConvProcessing"),ebt.forEach(t),oYo=r(pf," (Perceiver model)"),pf.forEach(t),rYo=i(Te),u5=n(Te,"LI",{});var jke=s(u5);E_e=n(jke,"STRONG",{});var obt=s(E_e);tYo=r(obt,"poolformer"),obt.forEach(t),aYo=r(jke," \u2014 "),XX=n(jke,"A",{href:!0});var rbt=s(XX);nYo=r(rbt,"PoolFormerForImageClassification"),rbt.forEach(t),sYo=r(jke," (PoolFormer model)"),jke.forEach(t),lYo=i(Te),b5=n(Te,"LI",{});var Dke=s(b5);C_e=n(Dke,"STRONG",{});var tbt=s(C_e);iYo=r(tbt,"regnet"),tbt.forEach(t),dYo=r(Dke," \u2014 "),zX=n(Dke,"A",{href:!0});var abt=s(zX);cYo=r(abt,"RegNetForImageClassification"),abt.forEach(t),fYo=r(Dke," (RegNet model)"),Dke.forEach(t),mYo=i(Te),v5=n(Te,"LI",{});var Gke=s(v5);w_e=n(Gke,"STRONG",{});var nbt=s(w_e);gYo=r(nbt,"resnet"),nbt.forEach(t),hYo=r(Gke," \u2014 "),WX=n(Gke,"A",{href:!0});var sbt=s(WX);pYo=r(sbt,"ResNetForImageClassification"),sbt.forEach(t),_Yo=r(Gke," (ResNet model)"),Gke.forEach(t),uYo=i(Te),F5=n(Te,"LI",{});var Oke=s(F5);A_e=n(Oke,"STRONG",{});var lbt=s(A_e);bYo=r(lbt,"segformer"),lbt.forEach(t),vYo=r(Oke," \u2014 "),QX=n(Oke,"A",{href:!0});var ibt=s(QX);FYo=r(ibt,"SegformerForImageClassification"),ibt.forEach(t),TYo=r(Oke," (SegFormer model)"),Oke.forEach(t),MYo=i(Te),T5=n(Te,"LI",{});var Vke=s(T5);y_e=n(Vke,"STRONG",{});var dbt=s(y_e);EYo=r(dbt,"swin"),dbt.forEach(t),CYo=r(Vke," \u2014 "),HX=n(Vke,"A",{href:!0});var cbt=s(HX);wYo=r(cbt,"SwinForImageClassification"),cbt.forEach(t),AYo=r(Vke," (Swin model)"),Vke.forEach(t),yYo=i(Te),M5=n(Te,"LI",{});var Xke=s(M5);L_e=n(Xke,"STRONG",{});var fbt=s(L_e);LYo=r(fbt,"van"),fbt.forEach(t),xYo=r(Xke," \u2014 "),UX=n(Xke,"A",{href:!0});var mbt=s(UX);$Yo=r(mbt,"VanForImageClassification"),mbt.forEach(t),kYo=r(Xke," (VAN model)"),Xke.forEach(t),SYo=i(Te),E5=n(Te,"LI",{});var zke=s(E5);x_e=n(zke,"STRONG",{});var gbt=s(x_e);RYo=r(gbt,"vit"),gbt.forEach(t),PYo=r(zke," \u2014 "),JX=n(zke,"A",{href:!0});var hbt=s(JX);BYo=r(hbt,"ViTForImageClassification"),hbt.forEach(t),IYo=r(zke," (ViT model)"),zke.forEach(t),Te.forEach(t),NYo=i(ga),C5=n(ga,"P",{});var Wke=s(C5);qYo=r(Wke,"The model is set in evaluation mode by default using "),$_e=n(Wke,"CODE",{});var pbt=s($_e);jYo=r(pbt,"model.eval()"),pbt.forEach(t),DYo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(Wke,"CODE",{});var _bt=s(k_e);GYo=r(_bt,"model.train()"),_bt.forEach(t),Wke.forEach(t),OYo=i(ga),T(w5.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),uje=i(f),id=n(f,"H2",{class:!0});var TGe=s(id);A5=n(TGe,"A",{id:!0,class:!0,href:!0});var ubt=s(A5);S_e=n(ubt,"SPAN",{});var bbt=s(S_e);T(hL.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),VYo=i(TGe),R_e=n(TGe,"SPAN",{});var vbt=s(R_e);XYo=r(vbt,"AutoModelForVision2Seq"),vbt.forEach(t),TGe.forEach(t),bje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(pL.$$.fragment,el),zYo=i(el),dd=n(el,"P",{});var tee=s(dd);WYo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YX=n(tee,"A",{href:!0});var Fbt=s(YX);QYo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),HYo=r(tee," class method or the "),KX=n(tee,"A",{href:!0});var Tbt=s(KX);UYo=r(Tbt,"from_config()"),Tbt.forEach(t),JYo=r(tee,` class
method.`),tee.forEach(t),YYo=i(el),_L=n(el,"P",{});var MGe=s(_L);KYo=r(MGe,"This class cannot be instantiated directly using "),P_e=n(MGe,"CODE",{});var Mbt=s(P_e);ZYo=r(Mbt,"__init__()"),Mbt.forEach(t),eKo=r(MGe," (throws an error)."),MGe.forEach(t),oKo=i(el),ut=n(el,"DIV",{class:!0});var f6=s(ut);T(uL.$$.fragment,f6),rKo=i(f6),B_e=n(f6,"P",{});var Ebt=s(B_e);tKo=r(Ebt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ebt.forEach(t),aKo=i(f6),cd=n(f6,"P",{});var aee=s(cd);nKo=r(aee,`Note:
Loading a model from its configuration file does `),I_e=n(aee,"STRONG",{});var Cbt=s(I_e);sKo=r(Cbt,"not"),Cbt.forEach(t),lKo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(aee,"A",{href:!0});var wbt=s(ZX);iKo=r(wbt,"from_pretrained()"),wbt.forEach(t),dKo=r(aee," to load the model weights."),aee.forEach(t),cKo=i(f6),T(y5.$$.fragment,f6),f6.forEach(t),fKo=i(el),io=n(el,"DIV",{class:!0});var ha=s(io);T(bL.$$.fragment,ha),mKo=i(ha),N_e=n(ha,"P",{});var Abt=s(N_e);gKo=r(Abt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Abt.forEach(t),hKo=i(ha),Ga=n(ha,"P",{});var m6=s(Ga);pKo=r(m6,"The model class to instantiate is selected based on the "),q_e=n(m6,"CODE",{});var ybt=s(q_e);_Ko=r(ybt,"model_type"),ybt.forEach(t),uKo=r(m6,` property of the config object (either
passed as an argument or loaded from `),j_e=n(m6,"CODE",{});var Lbt=s(j_e);bKo=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),vKo=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(m6,"CODE",{});var xbt=s(D_e);FKo=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),TKo=r(m6,":"),m6.forEach(t),MKo=i(ha),G_e=n(ha,"UL",{});var $bt=s(G_e);L5=n($bt,"LI",{});var Qke=s(L5);O_e=n(Qke,"STRONG",{});var kbt=s(O_e);EKo=r(kbt,"vision-encoder-decoder"),kbt.forEach(t),CKo=r(Qke," \u2014 "),ez=n(Qke,"A",{href:!0});var Sbt=s(ez);wKo=r(Sbt,"VisionEncoderDecoderModel"),Sbt.forEach(t),AKo=r(Qke," (Vision Encoder decoder model)"),Qke.forEach(t),$bt.forEach(t),yKo=i(ha),x5=n(ha,"P",{});var Hke=s(x5);LKo=r(Hke,"The model is set in evaluation mode by default using "),V_e=n(Hke,"CODE",{});var Rbt=s(V_e);xKo=r(Rbt,"model.eval()"),Rbt.forEach(t),$Ko=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(Hke,"CODE",{});var Pbt=s(X_e);kKo=r(Pbt,"model.train()"),Pbt.forEach(t),Hke.forEach(t),SKo=i(ha),T($5.$$.fragment,ha),ha.forEach(t),el.forEach(t),vje=i(f),fd=n(f,"H2",{class:!0});var EGe=s(fd);k5=n(EGe,"A",{id:!0,class:!0,href:!0});var Bbt=s(k5);z_e=n(Bbt,"SPAN",{});var Ibt=s(z_e);T(vL.$$.fragment,Ibt),Ibt.forEach(t),Bbt.forEach(t),RKo=i(EGe),W_e=n(EGe,"SPAN",{});var Nbt=s(W_e);PKo=r(Nbt,"AutoModelForAudioClassification"),Nbt.forEach(t),EGe.forEach(t),Fje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(FL.$$.fragment,ol),BKo=i(ol),md=n(ol,"P",{});var nee=s(md);IKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oz=n(nee,"A",{href:!0});var qbt=s(oz);NKo=r(qbt,"from_pretrained()"),qbt.forEach(t),qKo=r(nee," class method or the "),rz=n(nee,"A",{href:!0});var jbt=s(rz);jKo=r(jbt,"from_config()"),jbt.forEach(t),DKo=r(nee,` class
method.`),nee.forEach(t),GKo=i(ol),TL=n(ol,"P",{});var CGe=s(TL);OKo=r(CGe,"This class cannot be instantiated directly using "),Q_e=n(CGe,"CODE",{});var Dbt=s(Q_e);VKo=r(Dbt,"__init__()"),Dbt.forEach(t),XKo=r(CGe," (throws an error)."),CGe.forEach(t),zKo=i(ol),bt=n(ol,"DIV",{class:!0});var g6=s(bt);T(ML.$$.fragment,g6),WKo=i(g6),H_e=n(g6,"P",{});var Gbt=s(H_e);QKo=r(Gbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gbt.forEach(t),HKo=i(g6),gd=n(g6,"P",{});var see=s(gd);UKo=r(see,`Note:
Loading a model from its configuration file does `),U_e=n(see,"STRONG",{});var Obt=s(U_e);JKo=r(Obt,"not"),Obt.forEach(t),YKo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(see,"A",{href:!0});var Vbt=s(tz);KKo=r(Vbt,"from_pretrained()"),Vbt.forEach(t),ZKo=r(see," to load the model weights."),see.forEach(t),eZo=i(g6),T(S5.$$.fragment,g6),g6.forEach(t),oZo=i(ol),co=n(ol,"DIV",{class:!0});var pa=s(co);T(EL.$$.fragment,pa),rZo=i(pa),J_e=n(pa,"P",{});var Xbt=s(J_e);tZo=r(Xbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xbt.forEach(t),aZo=i(pa),Oa=n(pa,"P",{});var h6=s(Oa);nZo=r(h6,"The model class to instantiate is selected based on the "),Y_e=n(h6,"CODE",{});var zbt=s(Y_e);sZo=r(zbt,"model_type"),zbt.forEach(t),lZo=r(h6,` property of the config object (either
passed as an argument or loaded from `),K_e=n(h6,"CODE",{});var Wbt=s(K_e);iZo=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),dZo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(h6,"CODE",{});var Qbt=s(Z_e);cZo=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),fZo=r(h6,":"),h6.forEach(t),mZo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);R5=n(Ve,"LI",{});var Uke=s(R5);eue=n(Uke,"STRONG",{});var Hbt=s(eue);gZo=r(Hbt,"data2vec-audio"),Hbt.forEach(t),hZo=r(Uke," \u2014 "),az=n(Uke,"A",{href:!0});var Ubt=s(az);pZo=r(Ubt,"Data2VecAudioForSequenceClassification"),Ubt.forEach(t),_Zo=r(Uke," (Data2VecAudio model)"),Uke.forEach(t),uZo=i(Ve),P5=n(Ve,"LI",{});var Jke=s(P5);oue=n(Jke,"STRONG",{});var Jbt=s(oue);bZo=r(Jbt,"hubert"),Jbt.forEach(t),vZo=r(Jke," \u2014 "),nz=n(Jke,"A",{href:!0});var Ybt=s(nz);FZo=r(Ybt,"HubertForSequenceClassification"),Ybt.forEach(t),TZo=r(Jke," (Hubert model)"),Jke.forEach(t),MZo=i(Ve),B5=n(Ve,"LI",{});var Yke=s(B5);rue=n(Yke,"STRONG",{});var Kbt=s(rue);EZo=r(Kbt,"sew"),Kbt.forEach(t),CZo=r(Yke," \u2014 "),sz=n(Yke,"A",{href:!0});var Zbt=s(sz);wZo=r(Zbt,"SEWForSequenceClassification"),Zbt.forEach(t),AZo=r(Yke," (SEW model)"),Yke.forEach(t),yZo=i(Ve),I5=n(Ve,"LI",{});var Kke=s(I5);tue=n(Kke,"STRONG",{});var e2t=s(tue);LZo=r(e2t,"sew-d"),e2t.forEach(t),xZo=r(Kke," \u2014 "),lz=n(Kke,"A",{href:!0});var o2t=s(lz);$Zo=r(o2t,"SEWDForSequenceClassification"),o2t.forEach(t),kZo=r(Kke," (SEW-D model)"),Kke.forEach(t),SZo=i(Ve),N5=n(Ve,"LI",{});var Zke=s(N5);aue=n(Zke,"STRONG",{});var r2t=s(aue);RZo=r(r2t,"unispeech"),r2t.forEach(t),PZo=r(Zke," \u2014 "),iz=n(Zke,"A",{href:!0});var t2t=s(iz);BZo=r(t2t,"UniSpeechForSequenceClassification"),t2t.forEach(t),IZo=r(Zke," (UniSpeech model)"),Zke.forEach(t),NZo=i(Ve),q5=n(Ve,"LI",{});var eSe=s(q5);nue=n(eSe,"STRONG",{});var a2t=s(nue);qZo=r(a2t,"unispeech-sat"),a2t.forEach(t),jZo=r(eSe," \u2014 "),dz=n(eSe,"A",{href:!0});var n2t=s(dz);DZo=r(n2t,"UniSpeechSatForSequenceClassification"),n2t.forEach(t),GZo=r(eSe," (UniSpeechSat model)"),eSe.forEach(t),OZo=i(Ve),j5=n(Ve,"LI",{});var oSe=s(j5);sue=n(oSe,"STRONG",{});var s2t=s(sue);VZo=r(s2t,"wav2vec2"),s2t.forEach(t),XZo=r(oSe," \u2014 "),cz=n(oSe,"A",{href:!0});var l2t=s(cz);zZo=r(l2t,"Wav2Vec2ForSequenceClassification"),l2t.forEach(t),WZo=r(oSe," (Wav2Vec2 model)"),oSe.forEach(t),QZo=i(Ve),D5=n(Ve,"LI",{});var rSe=s(D5);lue=n(rSe,"STRONG",{});var i2t=s(lue);HZo=r(i2t,"wav2vec2-conformer"),i2t.forEach(t),UZo=r(rSe," \u2014 "),fz=n(rSe,"A",{href:!0});var d2t=s(fz);JZo=r(d2t,"Wav2Vec2ConformerForSequenceClassification"),d2t.forEach(t),YZo=r(rSe," (Wav2Vec2-Conformer model)"),rSe.forEach(t),KZo=i(Ve),G5=n(Ve,"LI",{});var tSe=s(G5);iue=n(tSe,"STRONG",{});var c2t=s(iue);ZZo=r(c2t,"wavlm"),c2t.forEach(t),eer=r(tSe," \u2014 "),mz=n(tSe,"A",{href:!0});var f2t=s(mz);oer=r(f2t,"WavLMForSequenceClassification"),f2t.forEach(t),rer=r(tSe," (WavLM model)"),tSe.forEach(t),Ve.forEach(t),ter=i(pa),O5=n(pa,"P",{});var aSe=s(O5);aer=r(aSe,"The model is set in evaluation mode by default using "),due=n(aSe,"CODE",{});var m2t=s(due);ner=r(m2t,"model.eval()"),m2t.forEach(t),ser=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(aSe,"CODE",{});var g2t=s(cue);ler=r(g2t,"model.train()"),g2t.forEach(t),aSe.forEach(t),ier=i(pa),T(V5.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Tje=i(f),hd=n(f,"H2",{class:!0});var wGe=s(hd);X5=n(wGe,"A",{id:!0,class:!0,href:!0});var h2t=s(X5);fue=n(h2t,"SPAN",{});var p2t=s(fue);T(CL.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),der=i(wGe),mue=n(wGe,"SPAN",{});var _2t=s(mue);cer=r(_2t,"AutoModelForAudioFrameClassification"),_2t.forEach(t),wGe.forEach(t),Mje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(wL.$$.fragment,rl),fer=i(rl),pd=n(rl,"P",{});var lee=s(pd);mer=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gz=n(lee,"A",{href:!0});var u2t=s(gz);ger=r(u2t,"from_pretrained()"),u2t.forEach(t),her=r(lee," class method or the "),hz=n(lee,"A",{href:!0});var b2t=s(hz);per=r(b2t,"from_config()"),b2t.forEach(t),_er=r(lee,` class
method.`),lee.forEach(t),uer=i(rl),AL=n(rl,"P",{});var AGe=s(AL);ber=r(AGe,"This class cannot be instantiated directly using "),gue=n(AGe,"CODE",{});var v2t=s(gue);ver=r(v2t,"__init__()"),v2t.forEach(t),Fer=r(AGe," (throws an error)."),AGe.forEach(t),Ter=i(rl),vt=n(rl,"DIV",{class:!0});var p6=s(vt);T(yL.$$.fragment,p6),Mer=i(p6),hue=n(p6,"P",{});var F2t=s(hue);Eer=r(F2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),F2t.forEach(t),Cer=i(p6),_d=n(p6,"P",{});var iee=s(_d);wer=r(iee,`Note:
Loading a model from its configuration file does `),pue=n(iee,"STRONG",{});var T2t=s(pue);Aer=r(T2t,"not"),T2t.forEach(t),yer=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(iee,"A",{href:!0});var M2t=s(pz);Ler=r(M2t,"from_pretrained()"),M2t.forEach(t),xer=r(iee," to load the model weights."),iee.forEach(t),$er=i(p6),T(z5.$$.fragment,p6),p6.forEach(t),ker=i(rl),fo=n(rl,"DIV",{class:!0});var _a=s(fo);T(LL.$$.fragment,_a),Ser=i(_a),_ue=n(_a,"P",{});var E2t=s(_ue);Rer=r(E2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),E2t.forEach(t),Per=i(_a),Va=n(_a,"P",{});var _6=s(Va);Ber=r(_6,"The model class to instantiate is selected based on the "),uue=n(_6,"CODE",{});var C2t=s(uue);Ier=r(C2t,"model_type"),C2t.forEach(t),Ner=r(_6,` property of the config object (either
passed as an argument or loaded from `),bue=n(_6,"CODE",{});var w2t=s(bue);qer=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),jer=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(_6,"CODE",{});var A2t=s(vue);Der=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Ger=r(_6,":"),_6.forEach(t),Oer=i(_a),Kr=n(_a,"UL",{});var tl=s(Kr);W5=n(tl,"LI",{});var nSe=s(W5);Fue=n(nSe,"STRONG",{});var y2t=s(Fue);Ver=r(y2t,"data2vec-audio"),y2t.forEach(t),Xer=r(nSe," \u2014 "),_z=n(nSe,"A",{href:!0});var L2t=s(_z);zer=r(L2t,"Data2VecAudioForAudioFrameClassification"),L2t.forEach(t),Wer=r(nSe," (Data2VecAudio model)"),nSe.forEach(t),Qer=i(tl),Q5=n(tl,"LI",{});var sSe=s(Q5);Tue=n(sSe,"STRONG",{});var x2t=s(Tue);Her=r(x2t,"unispeech-sat"),x2t.forEach(t),Uer=r(sSe," \u2014 "),uz=n(sSe,"A",{href:!0});var $2t=s(uz);Jer=r($2t,"UniSpeechSatForAudioFrameClassification"),$2t.forEach(t),Yer=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),Ker=i(tl),H5=n(tl,"LI",{});var lSe=s(H5);Mue=n(lSe,"STRONG",{});var k2t=s(Mue);Zer=r(k2t,"wav2vec2"),k2t.forEach(t),eor=r(lSe," \u2014 "),bz=n(lSe,"A",{href:!0});var S2t=s(bz);oor=r(S2t,"Wav2Vec2ForAudioFrameClassification"),S2t.forEach(t),ror=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),tor=i(tl),U5=n(tl,"LI",{});var iSe=s(U5);Eue=n(iSe,"STRONG",{});var R2t=s(Eue);aor=r(R2t,"wav2vec2-conformer"),R2t.forEach(t),nor=r(iSe," \u2014 "),vz=n(iSe,"A",{href:!0});var P2t=s(vz);sor=r(P2t,"Wav2Vec2ConformerForAudioFrameClassification"),P2t.forEach(t),lor=r(iSe," (Wav2Vec2-Conformer model)"),iSe.forEach(t),ior=i(tl),J5=n(tl,"LI",{});var dSe=s(J5);Cue=n(dSe,"STRONG",{});var B2t=s(Cue);dor=r(B2t,"wavlm"),B2t.forEach(t),cor=r(dSe," \u2014 "),Fz=n(dSe,"A",{href:!0});var I2t=s(Fz);mor=r(I2t,"WavLMForAudioFrameClassification"),I2t.forEach(t),gor=r(dSe," (WavLM model)"),dSe.forEach(t),tl.forEach(t),hor=i(_a),Y5=n(_a,"P",{});var cSe=s(Y5);por=r(cSe,"The model is set in evaluation mode by default using "),wue=n(cSe,"CODE",{});var N2t=s(wue);_or=r(N2t,"model.eval()"),N2t.forEach(t),uor=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(cSe,"CODE",{});var q2t=s(Aue);bor=r(q2t,"model.train()"),q2t.forEach(t),cSe.forEach(t),vor=i(_a),T(K5.$$.fragment,_a),_a.forEach(t),rl.forEach(t),Eje=i(f),ud=n(f,"H2",{class:!0});var yGe=s(ud);Z5=n(yGe,"A",{id:!0,class:!0,href:!0});var j2t=s(Z5);yue=n(j2t,"SPAN",{});var D2t=s(yue);T(xL.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),For=i(yGe),Lue=n(yGe,"SPAN",{});var G2t=s(Lue);Tor=r(G2t,"AutoModelForCTC"),G2t.forEach(t),yGe.forEach(t),Cje=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T($L.$$.fragment,al),Mor=i(al),bd=n(al,"P",{});var dee=s(bd);Eor=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tz=n(dee,"A",{href:!0});var O2t=s(Tz);Cor=r(O2t,"from_pretrained()"),O2t.forEach(t),wor=r(dee," class method or the "),Mz=n(dee,"A",{href:!0});var V2t=s(Mz);Aor=r(V2t,"from_config()"),V2t.forEach(t),yor=r(dee,` class
method.`),dee.forEach(t),Lor=i(al),kL=n(al,"P",{});var LGe=s(kL);xor=r(LGe,"This class cannot be instantiated directly using "),xue=n(LGe,"CODE",{});var X2t=s(xue);$or=r(X2t,"__init__()"),X2t.forEach(t),kor=r(LGe," (throws an error)."),LGe.forEach(t),Sor=i(al),Ft=n(al,"DIV",{class:!0});var u6=s(Ft);T(SL.$$.fragment,u6),Ror=i(u6),$ue=n(u6,"P",{});var z2t=s($ue);Por=r(z2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),z2t.forEach(t),Bor=i(u6),vd=n(u6,"P",{});var cee=s(vd);Ior=r(cee,`Note:
Loading a model from its configuration file does `),kue=n(cee,"STRONG",{});var W2t=s(kue);Nor=r(W2t,"not"),W2t.forEach(t),qor=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(cee,"A",{href:!0});var Q2t=s(Ez);jor=r(Q2t,"from_pretrained()"),Q2t.forEach(t),Dor=r(cee," to load the model weights."),cee.forEach(t),Gor=i(u6),T(e3.$$.fragment,u6),u6.forEach(t),Oor=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(RL.$$.fragment,ua),Vor=i(ua),Sue=n(ua,"P",{});var H2t=s(Sue);Xor=r(H2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),H2t.forEach(t),zor=i(ua),Xa=n(ua,"P",{});var b6=s(Xa);Wor=r(b6,"The model class to instantiate is selected based on the "),Rue=n(b6,"CODE",{});var U2t=s(Rue);Qor=r(U2t,"model_type"),U2t.forEach(t),Hor=r(b6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(b6,"CODE",{});var J2t=s(Pue);Uor=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),Jor=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(b6,"CODE",{});var Y2t=s(Bue);Yor=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),Kor=r(b6,":"),b6.forEach(t),Zor=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);o3=n(Xe,"LI",{});var fSe=s(o3);Iue=n(fSe,"STRONG",{});var K2t=s(Iue);err=r(K2t,"data2vec-audio"),K2t.forEach(t),orr=r(fSe," \u2014 "),Cz=n(fSe,"A",{href:!0});var Z2t=s(Cz);rrr=r(Z2t,"Data2VecAudioForCTC"),Z2t.forEach(t),trr=r(fSe," (Data2VecAudio model)"),fSe.forEach(t),arr=i(Xe),r3=n(Xe,"LI",{});var mSe=s(r3);Nue=n(mSe,"STRONG",{});var e4t=s(Nue);nrr=r(e4t,"hubert"),e4t.forEach(t),srr=r(mSe," \u2014 "),wz=n(mSe,"A",{href:!0});var o4t=s(wz);lrr=r(o4t,"HubertForCTC"),o4t.forEach(t),irr=r(mSe," (Hubert model)"),mSe.forEach(t),drr=i(Xe),t3=n(Xe,"LI",{});var gSe=s(t3);que=n(gSe,"STRONG",{});var r4t=s(que);crr=r(r4t,"sew"),r4t.forEach(t),frr=r(gSe," \u2014 "),Az=n(gSe,"A",{href:!0});var t4t=s(Az);mrr=r(t4t,"SEWForCTC"),t4t.forEach(t),grr=r(gSe," (SEW model)"),gSe.forEach(t),hrr=i(Xe),a3=n(Xe,"LI",{});var hSe=s(a3);jue=n(hSe,"STRONG",{});var a4t=s(jue);prr=r(a4t,"sew-d"),a4t.forEach(t),_rr=r(hSe," \u2014 "),yz=n(hSe,"A",{href:!0});var n4t=s(yz);urr=r(n4t,"SEWDForCTC"),n4t.forEach(t),brr=r(hSe," (SEW-D model)"),hSe.forEach(t),vrr=i(Xe),n3=n(Xe,"LI",{});var pSe=s(n3);Due=n(pSe,"STRONG",{});var s4t=s(Due);Frr=r(s4t,"unispeech"),s4t.forEach(t),Trr=r(pSe," \u2014 "),Lz=n(pSe,"A",{href:!0});var l4t=s(Lz);Mrr=r(l4t,"UniSpeechForCTC"),l4t.forEach(t),Err=r(pSe," (UniSpeech model)"),pSe.forEach(t),Crr=i(Xe),s3=n(Xe,"LI",{});var _Se=s(s3);Gue=n(_Se,"STRONG",{});var i4t=s(Gue);wrr=r(i4t,"unispeech-sat"),i4t.forEach(t),Arr=r(_Se," \u2014 "),xz=n(_Se,"A",{href:!0});var d4t=s(xz);yrr=r(d4t,"UniSpeechSatForCTC"),d4t.forEach(t),Lrr=r(_Se," (UniSpeechSat model)"),_Se.forEach(t),xrr=i(Xe),l3=n(Xe,"LI",{});var uSe=s(l3);Oue=n(uSe,"STRONG",{});var c4t=s(Oue);$rr=r(c4t,"wav2vec2"),c4t.forEach(t),krr=r(uSe," \u2014 "),$z=n(uSe,"A",{href:!0});var f4t=s($z);Srr=r(f4t,"Wav2Vec2ForCTC"),f4t.forEach(t),Rrr=r(uSe," (Wav2Vec2 model)"),uSe.forEach(t),Prr=i(Xe),i3=n(Xe,"LI",{});var bSe=s(i3);Vue=n(bSe,"STRONG",{});var m4t=s(Vue);Brr=r(m4t,"wav2vec2-conformer"),m4t.forEach(t),Irr=r(bSe," \u2014 "),kz=n(bSe,"A",{href:!0});var g4t=s(kz);Nrr=r(g4t,"Wav2Vec2ConformerForCTC"),g4t.forEach(t),qrr=r(bSe," (Wav2Vec2-Conformer model)"),bSe.forEach(t),jrr=i(Xe),d3=n(Xe,"LI",{});var vSe=s(d3);Xue=n(vSe,"STRONG",{});var h4t=s(Xue);Drr=r(h4t,"wavlm"),h4t.forEach(t),Grr=r(vSe," \u2014 "),Sz=n(vSe,"A",{href:!0});var p4t=s(Sz);Orr=r(p4t,"WavLMForCTC"),p4t.forEach(t),Vrr=r(vSe," (WavLM model)"),vSe.forEach(t),Xe.forEach(t),Xrr=i(ua),c3=n(ua,"P",{});var FSe=s(c3);zrr=r(FSe,"The model is set in evaluation mode by default using "),zue=n(FSe,"CODE",{});var _4t=s(zue);Wrr=r(_4t,"model.eval()"),_4t.forEach(t),Qrr=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(FSe,"CODE",{});var u4t=s(Wue);Hrr=r(u4t,"model.train()"),u4t.forEach(t),FSe.forEach(t),Urr=i(ua),T(f3.$$.fragment,ua),ua.forEach(t),al.forEach(t),wje=i(f),Fd=n(f,"H2",{class:!0});var xGe=s(Fd);m3=n(xGe,"A",{id:!0,class:!0,href:!0});var b4t=s(m3);Que=n(b4t,"SPAN",{});var v4t=s(Que);T(PL.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Jrr=i(xGe),Hue=n(xGe,"SPAN",{});var F4t=s(Hue);Yrr=r(F4t,"AutoModelForSpeechSeq2Seq"),F4t.forEach(t),xGe.forEach(t),Aje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(BL.$$.fragment,nl),Krr=i(nl),Td=n(nl,"P",{});var fee=s(Td);Zrr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rz=n(fee,"A",{href:!0});var T4t=s(Rz);etr=r(T4t,"from_pretrained()"),T4t.forEach(t),otr=r(fee," class method or the "),Pz=n(fee,"A",{href:!0});var M4t=s(Pz);rtr=r(M4t,"from_config()"),M4t.forEach(t),ttr=r(fee,` class
method.`),fee.forEach(t),atr=i(nl),IL=n(nl,"P",{});var $Ge=s(IL);ntr=r($Ge,"This class cannot be instantiated directly using "),Uue=n($Ge,"CODE",{});var E4t=s(Uue);str=r(E4t,"__init__()"),E4t.forEach(t),ltr=r($Ge," (throws an error)."),$Ge.forEach(t),itr=i(nl),Tt=n(nl,"DIV",{class:!0});var v6=s(Tt);T(NL.$$.fragment,v6),dtr=i(v6),Jue=n(v6,"P",{});var C4t=s(Jue);ctr=r(C4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C4t.forEach(t),ftr=i(v6),Md=n(v6,"P",{});var mee=s(Md);mtr=r(mee,`Note:
Loading a model from its configuration file does `),Yue=n(mee,"STRONG",{});var w4t=s(Yue);gtr=r(w4t,"not"),w4t.forEach(t),htr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(mee,"A",{href:!0});var A4t=s(Bz);ptr=r(A4t,"from_pretrained()"),A4t.forEach(t),_tr=r(mee," to load the model weights."),mee.forEach(t),utr=i(v6),T(g3.$$.fragment,v6),v6.forEach(t),btr=i(nl),go=n(nl,"DIV",{class:!0});var ba=s(go);T(qL.$$.fragment,ba),vtr=i(ba),Kue=n(ba,"P",{});var y4t=s(Kue);Ftr=r(y4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y4t.forEach(t),Ttr=i(ba),za=n(ba,"P",{});var F6=s(za);Mtr=r(F6,"The model class to instantiate is selected based on the "),Zue=n(F6,"CODE",{});var L4t=s(Zue);Etr=r(L4t,"model_type"),L4t.forEach(t),Ctr=r(F6,` property of the config object (either
passed as an argument or loaded from `),e1e=n(F6,"CODE",{});var x4t=s(e1e);wtr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),Atr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(F6,"CODE",{});var $4t=s(o1e);ytr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),Ltr=r(F6,":"),F6.forEach(t),xtr=i(ba),jL=n(ba,"UL",{});var kGe=s(jL);h3=n(kGe,"LI",{});var TSe=s(h3);r1e=n(TSe,"STRONG",{});var k4t=s(r1e);$tr=r(k4t,"speech-encoder-decoder"),k4t.forEach(t),ktr=r(TSe," \u2014 "),Iz=n(TSe,"A",{href:!0});var S4t=s(Iz);Str=r(S4t,"SpeechEncoderDecoderModel"),S4t.forEach(t),Rtr=r(TSe," (Speech Encoder decoder model)"),TSe.forEach(t),Ptr=i(kGe),p3=n(kGe,"LI",{});var MSe=s(p3);t1e=n(MSe,"STRONG",{});var R4t=s(t1e);Btr=r(R4t,"speech_to_text"),R4t.forEach(t),Itr=r(MSe," \u2014 "),Nz=n(MSe,"A",{href:!0});var P4t=s(Nz);Ntr=r(P4t,"Speech2TextForConditionalGeneration"),P4t.forEach(t),qtr=r(MSe," (Speech2Text model)"),MSe.forEach(t),kGe.forEach(t),jtr=i(ba),_3=n(ba,"P",{});var ESe=s(_3);Dtr=r(ESe,"The model is set in evaluation mode by default using "),a1e=n(ESe,"CODE",{});var B4t=s(a1e);Gtr=r(B4t,"model.eval()"),B4t.forEach(t),Otr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(ESe,"CODE",{});var I4t=s(n1e);Vtr=r(I4t,"model.train()"),I4t.forEach(t),ESe.forEach(t),Xtr=i(ba),T(u3.$$.fragment,ba),ba.forEach(t),nl.forEach(t),yje=i(f),Ed=n(f,"H2",{class:!0});var SGe=s(Ed);b3=n(SGe,"A",{id:!0,class:!0,href:!0});var N4t=s(b3);s1e=n(N4t,"SPAN",{});var q4t=s(s1e);T(DL.$$.fragment,q4t),q4t.forEach(t),N4t.forEach(t),ztr=i(SGe),l1e=n(SGe,"SPAN",{});var j4t=s(l1e);Wtr=r(j4t,"AutoModelForAudioXVector"),j4t.forEach(t),SGe.forEach(t),Lje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(GL.$$.fragment,sl),Qtr=i(sl),Cd=n(sl,"P",{});var gee=s(Cd);Htr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qz=n(gee,"A",{href:!0});var D4t=s(qz);Utr=r(D4t,"from_pretrained()"),D4t.forEach(t),Jtr=r(gee," class method or the "),jz=n(gee,"A",{href:!0});var G4t=s(jz);Ytr=r(G4t,"from_config()"),G4t.forEach(t),Ktr=r(gee,` class
method.`),gee.forEach(t),Ztr=i(sl),OL=n(sl,"P",{});var RGe=s(OL);ear=r(RGe,"This class cannot be instantiated directly using "),i1e=n(RGe,"CODE",{});var O4t=s(i1e);oar=r(O4t,"__init__()"),O4t.forEach(t),rar=r(RGe," (throws an error)."),RGe.forEach(t),tar=i(sl),Mt=n(sl,"DIV",{class:!0});var T6=s(Mt);T(VL.$$.fragment,T6),aar=i(T6),d1e=n(T6,"P",{});var V4t=s(d1e);nar=r(V4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),V4t.forEach(t),sar=i(T6),wd=n(T6,"P",{});var hee=s(wd);lar=r(hee,`Note:
Loading a model from its configuration file does `),c1e=n(hee,"STRONG",{});var X4t=s(c1e);iar=r(X4t,"not"),X4t.forEach(t),dar=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(hee,"A",{href:!0});var z4t=s(Dz);car=r(z4t,"from_pretrained()"),z4t.forEach(t),far=r(hee," to load the model weights."),hee.forEach(t),mar=i(T6),T(v3.$$.fragment,T6),T6.forEach(t),gar=i(sl),ho=n(sl,"DIV",{class:!0});var va=s(ho);T(XL.$$.fragment,va),har=i(va),f1e=n(va,"P",{});var W4t=s(f1e);par=r(W4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),W4t.forEach(t),_ar=i(va),Wa=n(va,"P",{});var M6=s(Wa);uar=r(M6,"The model class to instantiate is selected based on the "),m1e=n(M6,"CODE",{});var Q4t=s(m1e);bar=r(Q4t,"model_type"),Q4t.forEach(t),Far=r(M6,` property of the config object (either
passed as an argument or loaded from `),g1e=n(M6,"CODE",{});var H4t=s(g1e);Tar=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),Mar=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(M6,"CODE",{});var U4t=s(h1e);Ear=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),Car=r(M6,":"),M6.forEach(t),war=i(va),Zr=n(va,"UL",{});var ll=s(Zr);F3=n(ll,"LI",{});var CSe=s(F3);p1e=n(CSe,"STRONG",{});var J4t=s(p1e);Aar=r(J4t,"data2vec-audio"),J4t.forEach(t),yar=r(CSe," \u2014 "),Gz=n(CSe,"A",{href:!0});var Y4t=s(Gz);Lar=r(Y4t,"Data2VecAudioForXVector"),Y4t.forEach(t),xar=r(CSe," (Data2VecAudio model)"),CSe.forEach(t),$ar=i(ll),T3=n(ll,"LI",{});var wSe=s(T3);_1e=n(wSe,"STRONG",{});var K4t=s(_1e);kar=r(K4t,"unispeech-sat"),K4t.forEach(t),Sar=r(wSe," \u2014 "),Oz=n(wSe,"A",{href:!0});var Z4t=s(Oz);Rar=r(Z4t,"UniSpeechSatForXVector"),Z4t.forEach(t),Par=r(wSe," (UniSpeechSat model)"),wSe.forEach(t),Bar=i(ll),M3=n(ll,"LI",{});var ASe=s(M3);u1e=n(ASe,"STRONG",{});var evt=s(u1e);Iar=r(evt,"wav2vec2"),evt.forEach(t),Nar=r(ASe," \u2014 "),Vz=n(ASe,"A",{href:!0});var ovt=s(Vz);qar=r(ovt,"Wav2Vec2ForXVector"),ovt.forEach(t),jar=r(ASe," (Wav2Vec2 model)"),ASe.forEach(t),Dar=i(ll),E3=n(ll,"LI",{});var ySe=s(E3);b1e=n(ySe,"STRONG",{});var rvt=s(b1e);Gar=r(rvt,"wav2vec2-conformer"),rvt.forEach(t),Oar=r(ySe," \u2014 "),Xz=n(ySe,"A",{href:!0});var tvt=s(Xz);Var=r(tvt,"Wav2Vec2ConformerForXVector"),tvt.forEach(t),Xar=r(ySe," (Wav2Vec2-Conformer model)"),ySe.forEach(t),zar=i(ll),C3=n(ll,"LI",{});var LSe=s(C3);v1e=n(LSe,"STRONG",{});var avt=s(v1e);War=r(avt,"wavlm"),avt.forEach(t),Qar=r(LSe," \u2014 "),zz=n(LSe,"A",{href:!0});var nvt=s(zz);Har=r(nvt,"WavLMForXVector"),nvt.forEach(t),Uar=r(LSe," (WavLM model)"),LSe.forEach(t),ll.forEach(t),Jar=i(va),w3=n(va,"P",{});var xSe=s(w3);Yar=r(xSe,"The model is set in evaluation mode by default using "),F1e=n(xSe,"CODE",{});var svt=s(F1e);Kar=r(svt,"model.eval()"),svt.forEach(t),Zar=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(xSe,"CODE",{});var lvt=s(T1e);enr=r(lvt,"model.train()"),lvt.forEach(t),xSe.forEach(t),onr=i(va),T(A3.$$.fragment,va),va.forEach(t),sl.forEach(t),xje=i(f),Ad=n(f,"H2",{class:!0});var PGe=s(Ad);y3=n(PGe,"A",{id:!0,class:!0,href:!0});var ivt=s(y3);M1e=n(ivt,"SPAN",{});var dvt=s(M1e);T(zL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),rnr=i(PGe),E1e=n(PGe,"SPAN",{});var cvt=s(E1e);tnr=r(cvt,"AutoModelForMaskedImageModeling"),cvt.forEach(t),PGe.forEach(t),$je=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(WL.$$.fragment,il),anr=i(il),yd=n(il,"P",{});var pee=s(yd);nnr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wz=n(pee,"A",{href:!0});var fvt=s(Wz);snr=r(fvt,"from_pretrained()"),fvt.forEach(t),lnr=r(pee," class method or the "),Qz=n(pee,"A",{href:!0});var mvt=s(Qz);inr=r(mvt,"from_config()"),mvt.forEach(t),dnr=r(pee,` class
method.`),pee.forEach(t),cnr=i(il),QL=n(il,"P",{});var BGe=s(QL);fnr=r(BGe,"This class cannot be instantiated directly using "),C1e=n(BGe,"CODE",{});var gvt=s(C1e);mnr=r(gvt,"__init__()"),gvt.forEach(t),gnr=r(BGe," (throws an error)."),BGe.forEach(t),hnr=i(il),Et=n(il,"DIV",{class:!0});var E6=s(Et);T(HL.$$.fragment,E6),pnr=i(E6),w1e=n(E6,"P",{});var hvt=s(w1e);_nr=r(hvt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hvt.forEach(t),unr=i(E6),Ld=n(E6,"P",{});var _ee=s(Ld);bnr=r(_ee,`Note:
Loading a model from its configuration file does `),A1e=n(_ee,"STRONG",{});var pvt=s(A1e);vnr=r(pvt,"not"),pvt.forEach(t),Fnr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(_ee,"A",{href:!0});var _vt=s(Hz);Tnr=r(_vt,"from_pretrained()"),_vt.forEach(t),Mnr=r(_ee," to load the model weights."),_ee.forEach(t),Enr=i(E6),T(L3.$$.fragment,E6),E6.forEach(t),Cnr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(UL.$$.fragment,Fa),wnr=i(Fa),y1e=n(Fa,"P",{});var uvt=s(y1e);Anr=r(uvt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uvt.forEach(t),ynr=i(Fa),Qa=n(Fa,"P",{});var C6=s(Qa);Lnr=r(C6,"The model class to instantiate is selected based on the "),L1e=n(C6,"CODE",{});var bvt=s(L1e);xnr=r(bvt,"model_type"),bvt.forEach(t),$nr=r(C6,` property of the config object (either
passed as an argument or loaded from `),x1e=n(C6,"CODE",{});var vvt=s(x1e);knr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),Snr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(C6,"CODE",{});var Fvt=s($1e);Rnr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),Pnr=r(C6,":"),C6.forEach(t),Bnr=i(Fa),xd=n(Fa,"UL",{});var uee=s(xd);x3=n(uee,"LI",{});var $Se=s(x3);k1e=n($Se,"STRONG",{});var Tvt=s(k1e);Inr=r(Tvt,"deit"),Tvt.forEach(t),Nnr=r($Se," \u2014 "),Uz=n($Se,"A",{href:!0});var Mvt=s(Uz);qnr=r(Mvt,"DeiTForMaskedImageModeling"),Mvt.forEach(t),jnr=r($Se," (DeiT model)"),$Se.forEach(t),Dnr=i(uee),$3=n(uee,"LI",{});var kSe=s($3);S1e=n(kSe,"STRONG",{});var Evt=s(S1e);Gnr=r(Evt,"swin"),Evt.forEach(t),Onr=r(kSe," \u2014 "),Jz=n(kSe,"A",{href:!0});var Cvt=s(Jz);Vnr=r(Cvt,"SwinForMaskedImageModeling"),Cvt.forEach(t),Xnr=r(kSe," (Swin model)"),kSe.forEach(t),znr=i(uee),k3=n(uee,"LI",{});var SSe=s(k3);R1e=n(SSe,"STRONG",{});var wvt=s(R1e);Wnr=r(wvt,"vit"),wvt.forEach(t),Qnr=r(SSe," \u2014 "),Yz=n(SSe,"A",{href:!0});var Avt=s(Yz);Hnr=r(Avt,"ViTForMaskedImageModeling"),Avt.forEach(t),Unr=r(SSe," (ViT model)"),SSe.forEach(t),uee.forEach(t),Jnr=i(Fa),S3=n(Fa,"P",{});var RSe=s(S3);Ynr=r(RSe,"The model is set in evaluation mode by default using "),P1e=n(RSe,"CODE",{});var yvt=s(P1e);Knr=r(yvt,"model.eval()"),yvt.forEach(t),Znr=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=n(RSe,"CODE",{});var Lvt=s(B1e);esr=r(Lvt,"model.train()"),Lvt.forEach(t),RSe.forEach(t),osr=i(Fa),T(R3.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),kje=i(f),$d=n(f,"H2",{class:!0});var IGe=s($d);P3=n(IGe,"A",{id:!0,class:!0,href:!0});var xvt=s(P3);I1e=n(xvt,"SPAN",{});var $vt=s(I1e);T(JL.$$.fragment,$vt),$vt.forEach(t),xvt.forEach(t),rsr=i(IGe),N1e=n(IGe,"SPAN",{});var kvt=s(N1e);tsr=r(kvt,"AutoModelForObjectDetection"),kvt.forEach(t),IGe.forEach(t),Sje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(YL.$$.fragment,dl),asr=i(dl),kd=n(dl,"P",{});var bee=s(kd);nsr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Kz=n(bee,"A",{href:!0});var Svt=s(Kz);ssr=r(Svt,"from_pretrained()"),Svt.forEach(t),lsr=r(bee," class method or the "),Zz=n(bee,"A",{href:!0});var Rvt=s(Zz);isr=r(Rvt,"from_config()"),Rvt.forEach(t),dsr=r(bee,` class
method.`),bee.forEach(t),csr=i(dl),KL=n(dl,"P",{});var NGe=s(KL);fsr=r(NGe,"This class cannot be instantiated directly using "),q1e=n(NGe,"CODE",{});var Pvt=s(q1e);msr=r(Pvt,"__init__()"),Pvt.forEach(t),gsr=r(NGe," (throws an error)."),NGe.forEach(t),hsr=i(dl),Ct=n(dl,"DIV",{class:!0});var w6=s(Ct);T(ZL.$$.fragment,w6),psr=i(w6),j1e=n(w6,"P",{});var Bvt=s(j1e);_sr=r(Bvt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bvt.forEach(t),usr=i(w6),Sd=n(w6,"P",{});var vee=s(Sd);bsr=r(vee,`Note:
Loading a model from its configuration file does `),D1e=n(vee,"STRONG",{});var Ivt=s(D1e);vsr=r(Ivt,"not"),Ivt.forEach(t),Fsr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(vee,"A",{href:!0});var Nvt=s(eW);Tsr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),Msr=r(vee," to load the model weights."),vee.forEach(t),Esr=i(w6),T(B3.$$.fragment,w6),w6.forEach(t),Csr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(e8.$$.fragment,Ta),wsr=i(Ta),G1e=n(Ta,"P",{});var qvt=s(G1e);Asr=r(qvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),qvt.forEach(t),ysr=i(Ta),Ha=n(Ta,"P",{});var A6=s(Ha);Lsr=r(A6,"The model class to instantiate is selected based on the "),O1e=n(A6,"CODE",{});var jvt=s(O1e);xsr=r(jvt,"model_type"),jvt.forEach(t),$sr=r(A6,` property of the config object (either
passed as an argument or loaded from `),V1e=n(A6,"CODE",{});var Dvt=s(V1e);ksr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Ssr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(A6,"CODE",{});var Gvt=s(X1e);Rsr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),Psr=r(A6,":"),A6.forEach(t),Bsr=i(Ta),o8=n(Ta,"UL",{});var qGe=s(o8);I3=n(qGe,"LI",{});var PSe=s(I3);z1e=n(PSe,"STRONG",{});var Ovt=s(z1e);Isr=r(Ovt,"detr"),Ovt.forEach(t),Nsr=r(PSe," \u2014 "),oW=n(PSe,"A",{href:!0});var Vvt=s(oW);qsr=r(Vvt,"DetrForObjectDetection"),Vvt.forEach(t),jsr=r(PSe," (DETR model)"),PSe.forEach(t),Dsr=i(qGe),N3=n(qGe,"LI",{});var BSe=s(N3);W1e=n(BSe,"STRONG",{});var Xvt=s(W1e);Gsr=r(Xvt,"yolos"),Xvt.forEach(t),Osr=r(BSe," \u2014 "),rW=n(BSe,"A",{href:!0});var zvt=s(rW);Vsr=r(zvt,"YolosForObjectDetection"),zvt.forEach(t),Xsr=r(BSe," (YOLOS model)"),BSe.forEach(t),qGe.forEach(t),zsr=i(Ta),q3=n(Ta,"P",{});var ISe=s(q3);Wsr=r(ISe,"The model is set in evaluation mode by default using "),Q1e=n(ISe,"CODE",{});var Wvt=s(Q1e);Qsr=r(Wvt,"model.eval()"),Wvt.forEach(t),Hsr=r(ISe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=n(ISe,"CODE",{});var Qvt=s(H1e);Usr=r(Qvt,"model.train()"),Qvt.forEach(t),ISe.forEach(t),Jsr=i(Ta),T(j3.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Rje=i(f),Rd=n(f,"H2",{class:!0});var jGe=s(Rd);D3=n(jGe,"A",{id:!0,class:!0,href:!0});var Hvt=s(D3);U1e=n(Hvt,"SPAN",{});var Uvt=s(U1e);T(r8.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),Ysr=i(jGe),J1e=n(jGe,"SPAN",{});var Jvt=s(J1e);Ksr=r(Jvt,"AutoModelForImageSegmentation"),Jvt.forEach(t),jGe.forEach(t),Pje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(t8.$$.fragment,cl),Zsr=i(cl),Pd=n(cl,"P",{});var Fee=s(Pd);elr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tW=n(Fee,"A",{href:!0});var Yvt=s(tW);olr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),rlr=r(Fee," class method or the "),aW=n(Fee,"A",{href:!0});var Kvt=s(aW);tlr=r(Kvt,"from_config()"),Kvt.forEach(t),alr=r(Fee,` class
method.`),Fee.forEach(t),nlr=i(cl),a8=n(cl,"P",{});var DGe=s(a8);slr=r(DGe,"This class cannot be instantiated directly using "),Y1e=n(DGe,"CODE",{});var Zvt=s(Y1e);llr=r(Zvt,"__init__()"),Zvt.forEach(t),ilr=r(DGe," (throws an error)."),DGe.forEach(t),dlr=i(cl),wt=n(cl,"DIV",{class:!0});var y6=s(wt);T(n8.$$.fragment,y6),clr=i(y6),K1e=n(y6,"P",{});var e5t=s(K1e);flr=r(e5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),e5t.forEach(t),mlr=i(y6),Bd=n(y6,"P",{});var Tee=s(Bd);glr=r(Tee,`Note:
Loading a model from its configuration file does `),Z1e=n(Tee,"STRONG",{});var o5t=s(Z1e);hlr=r(o5t,"not"),o5t.forEach(t),plr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(Tee,"A",{href:!0});var r5t=s(nW);_lr=r(r5t,"from_pretrained()"),r5t.forEach(t),ulr=r(Tee," to load the model weights."),Tee.forEach(t),blr=i(y6),T(G3.$$.fragment,y6),y6.forEach(t),vlr=i(cl),uo=n(cl,"DIV",{class:!0});var Ma=s(uo);T(s8.$$.fragment,Ma),Flr=i(Ma),ebe=n(Ma,"P",{});var t5t=s(ebe);Tlr=r(t5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),t5t.forEach(t),Mlr=i(Ma),Ua=n(Ma,"P",{});var L6=s(Ua);Elr=r(L6,"The model class to instantiate is selected based on the "),obe=n(L6,"CODE",{});var a5t=s(obe);Clr=r(a5t,"model_type"),a5t.forEach(t),wlr=r(L6,` property of the config object (either
passed as an argument or loaded from `),rbe=n(L6,"CODE",{});var n5t=s(rbe);Alr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),ylr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(L6,"CODE",{});var s5t=s(tbe);Llr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),xlr=r(L6,":"),L6.forEach(t),$lr=i(Ma),abe=n(Ma,"UL",{});var l5t=s(abe);O3=n(l5t,"LI",{});var NSe=s(O3);nbe=n(NSe,"STRONG",{});var i5t=s(nbe);klr=r(i5t,"detr"),i5t.forEach(t),Slr=r(NSe," \u2014 "),sW=n(NSe,"A",{href:!0});var d5t=s(sW);Rlr=r(d5t,"DetrForSegmentation"),d5t.forEach(t),Plr=r(NSe," (DETR model)"),NSe.forEach(t),l5t.forEach(t),Blr=i(Ma),V3=n(Ma,"P",{});var qSe=s(V3);Ilr=r(qSe,"The model is set in evaluation mode by default using "),sbe=n(qSe,"CODE",{});var c5t=s(sbe);Nlr=r(c5t,"model.eval()"),c5t.forEach(t),qlr=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(qSe,"CODE",{});var f5t=s(lbe);jlr=r(f5t,"model.train()"),f5t.forEach(t),qSe.forEach(t),Dlr=i(Ma),T(X3.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Bje=i(f),Id=n(f,"H2",{class:!0});var GGe=s(Id);z3=n(GGe,"A",{id:!0,class:!0,href:!0});var m5t=s(z3);ibe=n(m5t,"SPAN",{});var g5t=s(ibe);T(l8.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),Glr=i(GGe),dbe=n(GGe,"SPAN",{});var h5t=s(dbe);Olr=r(h5t,"AutoModelForSemanticSegmentation"),h5t.forEach(t),GGe.forEach(t),Ije=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(i8.$$.fragment,fl),Vlr=i(fl),Nd=n(fl,"P",{});var Mee=s(Nd);Xlr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lW=n(Mee,"A",{href:!0});var p5t=s(lW);zlr=r(p5t,"from_pretrained()"),p5t.forEach(t),Wlr=r(Mee," class method or the "),iW=n(Mee,"A",{href:!0});var _5t=s(iW);Qlr=r(_5t,"from_config()"),_5t.forEach(t),Hlr=r(Mee,` class
method.`),Mee.forEach(t),Ulr=i(fl),d8=n(fl,"P",{});var OGe=s(d8);Jlr=r(OGe,"This class cannot be instantiated directly using "),cbe=n(OGe,"CODE",{});var u5t=s(cbe);Ylr=r(u5t,"__init__()"),u5t.forEach(t),Klr=r(OGe," (throws an error)."),OGe.forEach(t),Zlr=i(fl),At=n(fl,"DIV",{class:!0});var x6=s(At);T(c8.$$.fragment,x6),eir=i(x6),fbe=n(x6,"P",{});var b5t=s(fbe);oir=r(b5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),b5t.forEach(t),rir=i(x6),qd=n(x6,"P",{});var Eee=s(qd);tir=r(Eee,`Note:
Loading a model from its configuration file does `),mbe=n(Eee,"STRONG",{});var v5t=s(mbe);air=r(v5t,"not"),v5t.forEach(t),nir=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Eee,"A",{href:!0});var F5t=s(dW);sir=r(F5t,"from_pretrained()"),F5t.forEach(t),lir=r(Eee," to load the model weights."),Eee.forEach(t),iir=i(x6),T(W3.$$.fragment,x6),x6.forEach(t),dir=i(fl),bo=n(fl,"DIV",{class:!0});var Ea=s(bo);T(f8.$$.fragment,Ea),cir=i(Ea),gbe=n(Ea,"P",{});var T5t=s(gbe);fir=r(T5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),T5t.forEach(t),mir=i(Ea),Ja=n(Ea,"P",{});var $6=s(Ja);gir=r($6,"The model class to instantiate is selected based on the "),hbe=n($6,"CODE",{});var M5t=s(hbe);hir=r(M5t,"model_type"),M5t.forEach(t),pir=r($6,` property of the config object (either
passed as an argument or loaded from `),pbe=n($6,"CODE",{});var E5t=s(pbe);_ir=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),uir=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n($6,"CODE",{});var C5t=s(_be);bir=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),vir=r($6,":"),$6.forEach(t),Fir=i(Ea),et=n(Ea,"UL",{});var ml=s(et);Q3=n(ml,"LI",{});var jSe=s(Q3);ube=n(jSe,"STRONG",{});var w5t=s(ube);Tir=r(w5t,"beit"),w5t.forEach(t),Mir=r(jSe," \u2014 "),cW=n(jSe,"A",{href:!0});var A5t=s(cW);Eir=r(A5t,"BeitForSemanticSegmentation"),A5t.forEach(t),Cir=r(jSe," (BEiT model)"),jSe.forEach(t),wir=i(ml),H3=n(ml,"LI",{});var DSe=s(H3);bbe=n(DSe,"STRONG",{});var y5t=s(bbe);Air=r(y5t,"data2vec-vision"),y5t.forEach(t),yir=r(DSe," \u2014 "),fW=n(DSe,"A",{href:!0});var L5t=s(fW);Lir=r(L5t,"Data2VecVisionForSemanticSegmentation"),L5t.forEach(t),xir=r(DSe," (Data2VecVision model)"),DSe.forEach(t),$ir=i(ml),U3=n(ml,"LI",{});var GSe=s(U3);vbe=n(GSe,"STRONG",{});var x5t=s(vbe);kir=r(x5t,"dpt"),x5t.forEach(t),Sir=r(GSe," \u2014 "),mW=n(GSe,"A",{href:!0});var $5t=s(mW);Rir=r($5t,"DPTForSemanticSegmentation"),$5t.forEach(t),Pir=r(GSe," (DPT model)"),GSe.forEach(t),Bir=i(ml),J3=n(ml,"LI",{});var OSe=s(J3);Fbe=n(OSe,"STRONG",{});var k5t=s(Fbe);Iir=r(k5t,"mobilevit"),k5t.forEach(t),Nir=r(OSe," \u2014 "),gW=n(OSe,"A",{href:!0});var S5t=s(gW);qir=r(S5t,"MobileViTForSemanticSegmentation"),S5t.forEach(t),jir=r(OSe," (MobileViT model)"),OSe.forEach(t),Dir=i(ml),Y3=n(ml,"LI",{});var VSe=s(Y3);Tbe=n(VSe,"STRONG",{});var R5t=s(Tbe);Gir=r(R5t,"segformer"),R5t.forEach(t),Oir=r(VSe," \u2014 "),hW=n(VSe,"A",{href:!0});var P5t=s(hW);Vir=r(P5t,"SegformerForSemanticSegmentation"),P5t.forEach(t),Xir=r(VSe," (SegFormer model)"),VSe.forEach(t),ml.forEach(t),zir=i(Ea),K3=n(Ea,"P",{});var XSe=s(K3);Wir=r(XSe,"The model is set in evaluation mode by default using "),Mbe=n(XSe,"CODE",{});var B5t=s(Mbe);Qir=r(B5t,"model.eval()"),B5t.forEach(t),Hir=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(XSe,"CODE",{});var I5t=s(Ebe);Uir=r(I5t,"model.train()"),I5t.forEach(t),XSe.forEach(t),Jir=i(Ea),T(Z3.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Nje=i(f),jd=n(f,"H2",{class:!0});var VGe=s(jd);eF=n(VGe,"A",{id:!0,class:!0,href:!0});var N5t=s(eF);Cbe=n(N5t,"SPAN",{});var q5t=s(Cbe);T(m8.$$.fragment,q5t),q5t.forEach(t),N5t.forEach(t),Yir=i(VGe),wbe=n(VGe,"SPAN",{});var j5t=s(wbe);Kir=r(j5t,"AutoModelForInstanceSegmentation"),j5t.forEach(t),VGe.forEach(t),qje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(g8.$$.fragment,gl),Zir=i(gl),Dd=n(gl,"P",{});var Cee=s(Dd);edr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=n(Cee,"A",{href:!0});var D5t=s(pW);odr=r(D5t,"from_pretrained()"),D5t.forEach(t),rdr=r(Cee," class method or the "),_W=n(Cee,"A",{href:!0});var G5t=s(_W);tdr=r(G5t,"from_config()"),G5t.forEach(t),adr=r(Cee,` class
method.`),Cee.forEach(t),ndr=i(gl),h8=n(gl,"P",{});var XGe=s(h8);sdr=r(XGe,"This class cannot be instantiated directly using "),Abe=n(XGe,"CODE",{});var O5t=s(Abe);ldr=r(O5t,"__init__()"),O5t.forEach(t),idr=r(XGe," (throws an error)."),XGe.forEach(t),ddr=i(gl),yt=n(gl,"DIV",{class:!0});var k6=s(yt);T(p8.$$.fragment,k6),cdr=i(k6),ybe=n(k6,"P",{});var V5t=s(ybe);fdr=r(V5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),V5t.forEach(t),mdr=i(k6),Gd=n(k6,"P",{});var wee=s(Gd);gdr=r(wee,`Note:
Loading a model from its configuration file does `),Lbe=n(wee,"STRONG",{});var X5t=s(Lbe);hdr=r(X5t,"not"),X5t.forEach(t),pdr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(wee,"A",{href:!0});var z5t=s(uW);_dr=r(z5t,"from_pretrained()"),z5t.forEach(t),udr=r(wee," to load the model weights."),wee.forEach(t),bdr=i(k6),T(oF.$$.fragment,k6),k6.forEach(t),vdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ca=s(vo);T(_8.$$.fragment,Ca),Fdr=i(Ca),xbe=n(Ca,"P",{});var W5t=s(xbe);Tdr=r(W5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),W5t.forEach(t),Mdr=i(Ca),Ya=n(Ca,"P",{});var S6=s(Ya);Edr=r(S6,"The model class to instantiate is selected based on the "),$be=n(S6,"CODE",{});var Q5t=s($be);Cdr=r(Q5t,"model_type"),Q5t.forEach(t),wdr=r(S6,` property of the config object (either
passed as an argument or loaded from `),kbe=n(S6,"CODE",{});var H5t=s(kbe);Adr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),ydr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(S6,"CODE",{});var U5t=s(Sbe);Ldr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),xdr=r(S6,":"),S6.forEach(t),$dr=i(Ca),Rbe=n(Ca,"UL",{});var J5t=s(Rbe);rF=n(J5t,"LI",{});var zSe=s(rF);Pbe=n(zSe,"STRONG",{});var Y5t=s(Pbe);kdr=r(Y5t,"maskformer"),Y5t.forEach(t),Sdr=r(zSe," \u2014 "),bW=n(zSe,"A",{href:!0});var K5t=s(bW);Rdr=r(K5t,"MaskFormerForInstanceSegmentation"),K5t.forEach(t),Pdr=r(zSe," (MaskFormer model)"),zSe.forEach(t),J5t.forEach(t),Bdr=i(Ca),tF=n(Ca,"P",{});var WSe=s(tF);Idr=r(WSe,"The model is set in evaluation mode by default using "),Bbe=n(WSe,"CODE",{});var Z5t=s(Bbe);Ndr=r(Z5t,"model.eval()"),Z5t.forEach(t),qdr=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(WSe,"CODE",{});var e3t=s(Ibe);jdr=r(e3t,"model.train()"),e3t.forEach(t),WSe.forEach(t),Ddr=i(Ca),T(aF.$$.fragment,Ca),Ca.forEach(t),gl.forEach(t),jje=i(f),Od=n(f,"H2",{class:!0});var zGe=s(Od);nF=n(zGe,"A",{id:!0,class:!0,href:!0});var o3t=s(nF);Nbe=n(o3t,"SPAN",{});var r3t=s(Nbe);T(u8.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),Gdr=i(zGe),qbe=n(zGe,"SPAN",{});var t3t=s(qbe);Odr=r(t3t,"TFAutoModel"),t3t.forEach(t),zGe.forEach(t),Dje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(b8.$$.fragment,hl),Vdr=i(hl),Vd=n(hl,"P",{});var Aee=s(Vd);Xdr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=n(Aee,"A",{href:!0});var a3t=s(vW);zdr=r(a3t,"from_pretrained()"),a3t.forEach(t),Wdr=r(Aee," class method or the "),FW=n(Aee,"A",{href:!0});var n3t=s(FW);Qdr=r(n3t,"from_config()"),n3t.forEach(t),Hdr=r(Aee,` class
method.`),Aee.forEach(t),Udr=i(hl),v8=n(hl,"P",{});var WGe=s(v8);Jdr=r(WGe,"This class cannot be instantiated directly using "),jbe=n(WGe,"CODE",{});var s3t=s(jbe);Ydr=r(s3t,"__init__()"),s3t.forEach(t),Kdr=r(WGe," (throws an error)."),WGe.forEach(t),Zdr=i(hl),Lt=n(hl,"DIV",{class:!0});var R6=s(Lt);T(F8.$$.fragment,R6),ecr=i(R6),Dbe=n(R6,"P",{});var l3t=s(Dbe);ocr=r(l3t,"Instantiates one of the base model classes of the library from a configuration."),l3t.forEach(t),rcr=i(R6),Xd=n(R6,"P",{});var yee=s(Xd);tcr=r(yee,`Note:
Loading a model from its configuration file does `),Gbe=n(yee,"STRONG",{});var i3t=s(Gbe);acr=r(i3t,"not"),i3t.forEach(t),ncr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(yee,"A",{href:!0});var d3t=s(TW);scr=r(d3t,"from_pretrained()"),d3t.forEach(t),lcr=r(yee," to load the model weights."),yee.forEach(t),icr=i(R6),T(sF.$$.fragment,R6),R6.forEach(t),dcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(T8.$$.fragment,pl),ccr=i(pl),Obe=n(pl,"P",{});var c3t=s(Obe);fcr=r(c3t,"Instantiate one of the base model classes of the library from a pretrained model."),c3t.forEach(t),mcr=i(pl),Ka=n(pl,"P",{});var P6=s(Ka);gcr=r(P6,"The model class to instantiate is selected based on the "),Vbe=n(P6,"CODE",{});var f3t=s(Vbe);hcr=r(f3t,"model_type"),f3t.forEach(t),pcr=r(P6,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(P6,"CODE",{});var m3t=s(Xbe);_cr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),ucr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(P6,"CODE",{});var g3t=s(zbe);bcr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),vcr=r(P6,":"),P6.forEach(t),Fcr=i(pl),q=n(pl,"UL",{});var D=s(q);lF=n(D,"LI",{});var QSe=s(lF);Wbe=n(QSe,"STRONG",{});var h3t=s(Wbe);Tcr=r(h3t,"albert"),h3t.forEach(t),Mcr=r(QSe," \u2014 "),MW=n(QSe,"A",{href:!0});var p3t=s(MW);Ecr=r(p3t,"TFAlbertModel"),p3t.forEach(t),Ccr=r(QSe," (ALBERT model)"),QSe.forEach(t),wcr=i(D),iF=n(D,"LI",{});var HSe=s(iF);Qbe=n(HSe,"STRONG",{});var _3t=s(Qbe);Acr=r(_3t,"bart"),_3t.forEach(t),ycr=r(HSe," \u2014 "),EW=n(HSe,"A",{href:!0});var u3t=s(EW);Lcr=r(u3t,"TFBartModel"),u3t.forEach(t),xcr=r(HSe," (BART model)"),HSe.forEach(t),$cr=i(D),dF=n(D,"LI",{});var USe=s(dF);Hbe=n(USe,"STRONG",{});var b3t=s(Hbe);kcr=r(b3t,"bert"),b3t.forEach(t),Scr=r(USe," \u2014 "),CW=n(USe,"A",{href:!0});var v3t=s(CW);Rcr=r(v3t,"TFBertModel"),v3t.forEach(t),Pcr=r(USe," (BERT model)"),USe.forEach(t),Bcr=i(D),cF=n(D,"LI",{});var JSe=s(cF);Ube=n(JSe,"STRONG",{});var F3t=s(Ube);Icr=r(F3t,"blenderbot"),F3t.forEach(t),Ncr=r(JSe," \u2014 "),wW=n(JSe,"A",{href:!0});var T3t=s(wW);qcr=r(T3t,"TFBlenderbotModel"),T3t.forEach(t),jcr=r(JSe," (Blenderbot model)"),JSe.forEach(t),Dcr=i(D),fF=n(D,"LI",{});var YSe=s(fF);Jbe=n(YSe,"STRONG",{});var M3t=s(Jbe);Gcr=r(M3t,"blenderbot-small"),M3t.forEach(t),Ocr=r(YSe," \u2014 "),AW=n(YSe,"A",{href:!0});var E3t=s(AW);Vcr=r(E3t,"TFBlenderbotSmallModel"),E3t.forEach(t),Xcr=r(YSe," (BlenderbotSmall model)"),YSe.forEach(t),zcr=i(D),mF=n(D,"LI",{});var KSe=s(mF);Ybe=n(KSe,"STRONG",{});var C3t=s(Ybe);Wcr=r(C3t,"camembert"),C3t.forEach(t),Qcr=r(KSe," \u2014 "),yW=n(KSe,"A",{href:!0});var w3t=s(yW);Hcr=r(w3t,"TFCamembertModel"),w3t.forEach(t),Ucr=r(KSe," (CamemBERT model)"),KSe.forEach(t),Jcr=i(D),gF=n(D,"LI",{});var ZSe=s(gF);Kbe=n(ZSe,"STRONG",{});var A3t=s(Kbe);Ycr=r(A3t,"clip"),A3t.forEach(t),Kcr=r(ZSe," \u2014 "),LW=n(ZSe,"A",{href:!0});var y3t=s(LW);Zcr=r(y3t,"TFCLIPModel"),y3t.forEach(t),efr=r(ZSe," (CLIP model)"),ZSe.forEach(t),ofr=i(D),hF=n(D,"LI",{});var eRe=s(hF);Zbe=n(eRe,"STRONG",{});var L3t=s(Zbe);rfr=r(L3t,"convbert"),L3t.forEach(t),tfr=r(eRe," \u2014 "),xW=n(eRe,"A",{href:!0});var x3t=s(xW);afr=r(x3t,"TFConvBertModel"),x3t.forEach(t),nfr=r(eRe," (ConvBERT model)"),eRe.forEach(t),sfr=i(D),pF=n(D,"LI",{});var oRe=s(pF);e2e=n(oRe,"STRONG",{});var $3t=s(e2e);lfr=r($3t,"convnext"),$3t.forEach(t),ifr=r(oRe," \u2014 "),$W=n(oRe,"A",{href:!0});var k3t=s($W);dfr=r(k3t,"TFConvNextModel"),k3t.forEach(t),cfr=r(oRe," (ConvNext model)"),oRe.forEach(t),ffr=i(D),_F=n(D,"LI",{});var rRe=s(_F);o2e=n(rRe,"STRONG",{});var S3t=s(o2e);mfr=r(S3t,"ctrl"),S3t.forEach(t),gfr=r(rRe," \u2014 "),kW=n(rRe,"A",{href:!0});var R3t=s(kW);hfr=r(R3t,"TFCTRLModel"),R3t.forEach(t),pfr=r(rRe," (CTRL model)"),rRe.forEach(t),_fr=i(D),uF=n(D,"LI",{});var tRe=s(uF);r2e=n(tRe,"STRONG",{});var P3t=s(r2e);ufr=r(P3t,"data2vec-vision"),P3t.forEach(t),bfr=r(tRe," \u2014 "),SW=n(tRe,"A",{href:!0});var B3t=s(SW);vfr=r(B3t,"TFData2VecVisionModel"),B3t.forEach(t),Ffr=r(tRe," (Data2VecVision model)"),tRe.forEach(t),Tfr=i(D),bF=n(D,"LI",{});var aRe=s(bF);t2e=n(aRe,"STRONG",{});var I3t=s(t2e);Mfr=r(I3t,"deberta"),I3t.forEach(t),Efr=r(aRe," \u2014 "),RW=n(aRe,"A",{href:!0});var N3t=s(RW);Cfr=r(N3t,"TFDebertaModel"),N3t.forEach(t),wfr=r(aRe," (DeBERTa model)"),aRe.forEach(t),Afr=i(D),vF=n(D,"LI",{});var nRe=s(vF);a2e=n(nRe,"STRONG",{});var q3t=s(a2e);yfr=r(q3t,"deberta-v2"),q3t.forEach(t),Lfr=r(nRe," \u2014 "),PW=n(nRe,"A",{href:!0});var j3t=s(PW);xfr=r(j3t,"TFDebertaV2Model"),j3t.forEach(t),$fr=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),kfr=i(D),FF=n(D,"LI",{});var sRe=s(FF);n2e=n(sRe,"STRONG",{});var D3t=s(n2e);Sfr=r(D3t,"distilbert"),D3t.forEach(t),Rfr=r(sRe," \u2014 "),BW=n(sRe,"A",{href:!0});var G3t=s(BW);Pfr=r(G3t,"TFDistilBertModel"),G3t.forEach(t),Bfr=r(sRe," (DistilBERT model)"),sRe.forEach(t),Ifr=i(D),TF=n(D,"LI",{});var lRe=s(TF);s2e=n(lRe,"STRONG",{});var O3t=s(s2e);Nfr=r(O3t,"dpr"),O3t.forEach(t),qfr=r(lRe," \u2014 "),IW=n(lRe,"A",{href:!0});var V3t=s(IW);jfr=r(V3t,"TFDPRQuestionEncoder"),V3t.forEach(t),Dfr=r(lRe," (DPR model)"),lRe.forEach(t),Gfr=i(D),MF=n(D,"LI",{});var iRe=s(MF);l2e=n(iRe,"STRONG",{});var X3t=s(l2e);Ofr=r(X3t,"electra"),X3t.forEach(t),Vfr=r(iRe," \u2014 "),NW=n(iRe,"A",{href:!0});var z3t=s(NW);Xfr=r(z3t,"TFElectraModel"),z3t.forEach(t),zfr=r(iRe," (ELECTRA model)"),iRe.forEach(t),Wfr=i(D),EF=n(D,"LI",{});var dRe=s(EF);i2e=n(dRe,"STRONG",{});var W3t=s(i2e);Qfr=r(W3t,"flaubert"),W3t.forEach(t),Hfr=r(dRe," \u2014 "),qW=n(dRe,"A",{href:!0});var Q3t=s(qW);Ufr=r(Q3t,"TFFlaubertModel"),Q3t.forEach(t),Jfr=r(dRe," (FlauBERT model)"),dRe.forEach(t),Yfr=i(D),Is=n(D,"LI",{});var Z$=s(Is);d2e=n(Z$,"STRONG",{});var H3t=s(d2e);Kfr=r(H3t,"funnel"),H3t.forEach(t),Zfr=r(Z$," \u2014 "),jW=n(Z$,"A",{href:!0});var U3t=s(jW);emr=r(U3t,"TFFunnelModel"),U3t.forEach(t),omr=r(Z$," or "),DW=n(Z$,"A",{href:!0});var J3t=s(DW);rmr=r(J3t,"TFFunnelBaseModel"),J3t.forEach(t),tmr=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),amr=i(D),CF=n(D,"LI",{});var cRe=s(CF);c2e=n(cRe,"STRONG",{});var Y3t=s(c2e);nmr=r(Y3t,"gpt2"),Y3t.forEach(t),smr=r(cRe," \u2014 "),GW=n(cRe,"A",{href:!0});var K3t=s(GW);lmr=r(K3t,"TFGPT2Model"),K3t.forEach(t),imr=r(cRe," (OpenAI GPT-2 model)"),cRe.forEach(t),dmr=i(D),wF=n(D,"LI",{});var fRe=s(wF);f2e=n(fRe,"STRONG",{});var Z3t=s(f2e);cmr=r(Z3t,"gptj"),Z3t.forEach(t),fmr=r(fRe," \u2014 "),OW=n(fRe,"A",{href:!0});var eFt=s(OW);mmr=r(eFt,"TFGPTJModel"),eFt.forEach(t),gmr=r(fRe," (GPT-J model)"),fRe.forEach(t),hmr=i(D),AF=n(D,"LI",{});var mRe=s(AF);m2e=n(mRe,"STRONG",{});var oFt=s(m2e);pmr=r(oFt,"hubert"),oFt.forEach(t),_mr=r(mRe," \u2014 "),VW=n(mRe,"A",{href:!0});var rFt=s(VW);umr=r(rFt,"TFHubertModel"),rFt.forEach(t),bmr=r(mRe," (Hubert model)"),mRe.forEach(t),vmr=i(D),yF=n(D,"LI",{});var gRe=s(yF);g2e=n(gRe,"STRONG",{});var tFt=s(g2e);Fmr=r(tFt,"layoutlm"),tFt.forEach(t),Tmr=r(gRe," \u2014 "),XW=n(gRe,"A",{href:!0});var aFt=s(XW);Mmr=r(aFt,"TFLayoutLMModel"),aFt.forEach(t),Emr=r(gRe," (LayoutLM model)"),gRe.forEach(t),Cmr=i(D),LF=n(D,"LI",{});var hRe=s(LF);h2e=n(hRe,"STRONG",{});var nFt=s(h2e);wmr=r(nFt,"led"),nFt.forEach(t),Amr=r(hRe," \u2014 "),zW=n(hRe,"A",{href:!0});var sFt=s(zW);ymr=r(sFt,"TFLEDModel"),sFt.forEach(t),Lmr=r(hRe," (LED model)"),hRe.forEach(t),xmr=i(D),xF=n(D,"LI",{});var pRe=s(xF);p2e=n(pRe,"STRONG",{});var lFt=s(p2e);$mr=r(lFt,"longformer"),lFt.forEach(t),kmr=r(pRe," \u2014 "),WW=n(pRe,"A",{href:!0});var iFt=s(WW);Smr=r(iFt,"TFLongformerModel"),iFt.forEach(t),Rmr=r(pRe," (Longformer model)"),pRe.forEach(t),Pmr=i(D),$F=n(D,"LI",{});var _Re=s($F);_2e=n(_Re,"STRONG",{});var dFt=s(_2e);Bmr=r(dFt,"lxmert"),dFt.forEach(t),Imr=r(_Re," \u2014 "),QW=n(_Re,"A",{href:!0});var cFt=s(QW);Nmr=r(cFt,"TFLxmertModel"),cFt.forEach(t),qmr=r(_Re," (LXMERT model)"),_Re.forEach(t),jmr=i(D),kF=n(D,"LI",{});var uRe=s(kF);u2e=n(uRe,"STRONG",{});var fFt=s(u2e);Dmr=r(fFt,"marian"),fFt.forEach(t),Gmr=r(uRe," \u2014 "),HW=n(uRe,"A",{href:!0});var mFt=s(HW);Omr=r(mFt,"TFMarianModel"),mFt.forEach(t),Vmr=r(uRe," (Marian model)"),uRe.forEach(t),Xmr=i(D),SF=n(D,"LI",{});var bRe=s(SF);b2e=n(bRe,"STRONG",{});var gFt=s(b2e);zmr=r(gFt,"mbart"),gFt.forEach(t),Wmr=r(bRe," \u2014 "),UW=n(bRe,"A",{href:!0});var hFt=s(UW);Qmr=r(hFt,"TFMBartModel"),hFt.forEach(t),Hmr=r(bRe," (mBART model)"),bRe.forEach(t),Umr=i(D),RF=n(D,"LI",{});var vRe=s(RF);v2e=n(vRe,"STRONG",{});var pFt=s(v2e);Jmr=r(pFt,"mobilebert"),pFt.forEach(t),Ymr=r(vRe," \u2014 "),JW=n(vRe,"A",{href:!0});var _Ft=s(JW);Kmr=r(_Ft,"TFMobileBertModel"),_Ft.forEach(t),Zmr=r(vRe," (MobileBERT model)"),vRe.forEach(t),egr=i(D),PF=n(D,"LI",{});var FRe=s(PF);F2e=n(FRe,"STRONG",{});var uFt=s(F2e);ogr=r(uFt,"mpnet"),uFt.forEach(t),rgr=r(FRe," \u2014 "),YW=n(FRe,"A",{href:!0});var bFt=s(YW);tgr=r(bFt,"TFMPNetModel"),bFt.forEach(t),agr=r(FRe," (MPNet model)"),FRe.forEach(t),ngr=i(D),BF=n(D,"LI",{});var TRe=s(BF);T2e=n(TRe,"STRONG",{});var vFt=s(T2e);sgr=r(vFt,"mt5"),vFt.forEach(t),lgr=r(TRe," \u2014 "),KW=n(TRe,"A",{href:!0});var FFt=s(KW);igr=r(FFt,"TFMT5Model"),FFt.forEach(t),dgr=r(TRe," (mT5 model)"),TRe.forEach(t),cgr=i(D),IF=n(D,"LI",{});var MRe=s(IF);M2e=n(MRe,"STRONG",{});var TFt=s(M2e);fgr=r(TFt,"openai-gpt"),TFt.forEach(t),mgr=r(MRe," \u2014 "),ZW=n(MRe,"A",{href:!0});var MFt=s(ZW);ggr=r(MFt,"TFOpenAIGPTModel"),MFt.forEach(t),hgr=r(MRe," (OpenAI GPT model)"),MRe.forEach(t),pgr=i(D),NF=n(D,"LI",{});var ERe=s(NF);E2e=n(ERe,"STRONG",{});var EFt=s(E2e);_gr=r(EFt,"opt"),EFt.forEach(t),ugr=r(ERe," \u2014 "),eQ=n(ERe,"A",{href:!0});var CFt=s(eQ);bgr=r(CFt,"TFOPTModel"),CFt.forEach(t),vgr=r(ERe," (OPT model)"),ERe.forEach(t),Fgr=i(D),qF=n(D,"LI",{});var CRe=s(qF);C2e=n(CRe,"STRONG",{});var wFt=s(C2e);Tgr=r(wFt,"pegasus"),wFt.forEach(t),Mgr=r(CRe," \u2014 "),oQ=n(CRe,"A",{href:!0});var AFt=s(oQ);Egr=r(AFt,"TFPegasusModel"),AFt.forEach(t),Cgr=r(CRe," (Pegasus model)"),CRe.forEach(t),wgr=i(D),jF=n(D,"LI",{});var wRe=s(jF);w2e=n(wRe,"STRONG",{});var yFt=s(w2e);Agr=r(yFt,"rembert"),yFt.forEach(t),ygr=r(wRe," \u2014 "),rQ=n(wRe,"A",{href:!0});var LFt=s(rQ);Lgr=r(LFt,"TFRemBertModel"),LFt.forEach(t),xgr=r(wRe," (RemBERT model)"),wRe.forEach(t),$gr=i(D),DF=n(D,"LI",{});var ARe=s(DF);A2e=n(ARe,"STRONG",{});var xFt=s(A2e);kgr=r(xFt,"roberta"),xFt.forEach(t),Sgr=r(ARe," \u2014 "),tQ=n(ARe,"A",{href:!0});var $Ft=s(tQ);Rgr=r($Ft,"TFRobertaModel"),$Ft.forEach(t),Pgr=r(ARe," (RoBERTa model)"),ARe.forEach(t),Bgr=i(D),GF=n(D,"LI",{});var yRe=s(GF);y2e=n(yRe,"STRONG",{});var kFt=s(y2e);Igr=r(kFt,"roformer"),kFt.forEach(t),Ngr=r(yRe," \u2014 "),aQ=n(yRe,"A",{href:!0});var SFt=s(aQ);qgr=r(SFt,"TFRoFormerModel"),SFt.forEach(t),jgr=r(yRe," (RoFormer model)"),yRe.forEach(t),Dgr=i(D),OF=n(D,"LI",{});var LRe=s(OF);L2e=n(LRe,"STRONG",{});var RFt=s(L2e);Ggr=r(RFt,"speech_to_text"),RFt.forEach(t),Ogr=r(LRe," \u2014 "),nQ=n(LRe,"A",{href:!0});var PFt=s(nQ);Vgr=r(PFt,"TFSpeech2TextModel"),PFt.forEach(t),Xgr=r(LRe," (Speech2Text model)"),LRe.forEach(t),zgr=i(D),VF=n(D,"LI",{});var xRe=s(VF);x2e=n(xRe,"STRONG",{});var BFt=s(x2e);Wgr=r(BFt,"swin"),BFt.forEach(t),Qgr=r(xRe," \u2014 "),sQ=n(xRe,"A",{href:!0});var IFt=s(sQ);Hgr=r(IFt,"TFSwinModel"),IFt.forEach(t),Ugr=r(xRe," (Swin model)"),xRe.forEach(t),Jgr=i(D),XF=n(D,"LI",{});var $Re=s(XF);$2e=n($Re,"STRONG",{});var NFt=s($2e);Ygr=r(NFt,"t5"),NFt.forEach(t),Kgr=r($Re," \u2014 "),lQ=n($Re,"A",{href:!0});var qFt=s(lQ);Zgr=r(qFt,"TFT5Model"),qFt.forEach(t),ehr=r($Re," (T5 model)"),$Re.forEach(t),ohr=i(D),zF=n(D,"LI",{});var kRe=s(zF);k2e=n(kRe,"STRONG",{});var jFt=s(k2e);rhr=r(jFt,"tapas"),jFt.forEach(t),thr=r(kRe," \u2014 "),iQ=n(kRe,"A",{href:!0});var DFt=s(iQ);ahr=r(DFt,"TFTapasModel"),DFt.forEach(t),nhr=r(kRe," (TAPAS model)"),kRe.forEach(t),shr=i(D),WF=n(D,"LI",{});var SRe=s(WF);S2e=n(SRe,"STRONG",{});var GFt=s(S2e);lhr=r(GFt,"transfo-xl"),GFt.forEach(t),ihr=r(SRe," \u2014 "),dQ=n(SRe,"A",{href:!0});var OFt=s(dQ);dhr=r(OFt,"TFTransfoXLModel"),OFt.forEach(t),chr=r(SRe," (Transformer-XL model)"),SRe.forEach(t),fhr=i(D),QF=n(D,"LI",{});var RRe=s(QF);R2e=n(RRe,"STRONG",{});var VFt=s(R2e);mhr=r(VFt,"vit"),VFt.forEach(t),ghr=r(RRe," \u2014 "),cQ=n(RRe,"A",{href:!0});var XFt=s(cQ);hhr=r(XFt,"TFViTModel"),XFt.forEach(t),phr=r(RRe," (ViT model)"),RRe.forEach(t),_hr=i(D),HF=n(D,"LI",{});var PRe=s(HF);P2e=n(PRe,"STRONG",{});var zFt=s(P2e);uhr=r(zFt,"vit_mae"),zFt.forEach(t),bhr=r(PRe," \u2014 "),fQ=n(PRe,"A",{href:!0});var WFt=s(fQ);vhr=r(WFt,"TFViTMAEModel"),WFt.forEach(t),Fhr=r(PRe," (ViTMAE model)"),PRe.forEach(t),Thr=i(D),UF=n(D,"LI",{});var BRe=s(UF);B2e=n(BRe,"STRONG",{});var QFt=s(B2e);Mhr=r(QFt,"wav2vec2"),QFt.forEach(t),Ehr=r(BRe," \u2014 "),mQ=n(BRe,"A",{href:!0});var HFt=s(mQ);Chr=r(HFt,"TFWav2Vec2Model"),HFt.forEach(t),whr=r(BRe," (Wav2Vec2 model)"),BRe.forEach(t),Ahr=i(D),JF=n(D,"LI",{});var IRe=s(JF);I2e=n(IRe,"STRONG",{});var UFt=s(I2e);yhr=r(UFt,"xlm"),UFt.forEach(t),Lhr=r(IRe," \u2014 "),gQ=n(IRe,"A",{href:!0});var JFt=s(gQ);xhr=r(JFt,"TFXLMModel"),JFt.forEach(t),$hr=r(IRe," (XLM model)"),IRe.forEach(t),khr=i(D),YF=n(D,"LI",{});var NRe=s(YF);N2e=n(NRe,"STRONG",{});var YFt=s(N2e);Shr=r(YFt,"xlm-roberta"),YFt.forEach(t),Rhr=r(NRe," \u2014 "),hQ=n(NRe,"A",{href:!0});var KFt=s(hQ);Phr=r(KFt,"TFXLMRobertaModel"),KFt.forEach(t),Bhr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Ihr=i(D),KF=n(D,"LI",{});var qRe=s(KF);q2e=n(qRe,"STRONG",{});var ZFt=s(q2e);Nhr=r(ZFt,"xlnet"),ZFt.forEach(t),qhr=r(qRe," \u2014 "),pQ=n(qRe,"A",{href:!0});var eTt=s(pQ);jhr=r(eTt,"TFXLNetModel"),eTt.forEach(t),Dhr=r(qRe," (XLNet model)"),qRe.forEach(t),D.forEach(t),Ghr=i(pl),T(ZF.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Gje=i(f),zd=n(f,"H2",{class:!0});var QGe=s(zd);eT=n(QGe,"A",{id:!0,class:!0,href:!0});var oTt=s(eT);j2e=n(oTt,"SPAN",{});var rTt=s(j2e);T(M8.$$.fragment,rTt),rTt.forEach(t),oTt.forEach(t),Ohr=i(QGe),D2e=n(QGe,"SPAN",{});var tTt=s(D2e);Vhr=r(tTt,"TFAutoModelForPreTraining"),tTt.forEach(t),QGe.forEach(t),Oje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(E8.$$.fragment,_l),Xhr=i(_l),Wd=n(_l,"P",{});var Lee=s(Wd);zhr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=n(Lee,"A",{href:!0});var aTt=s(_Q);Whr=r(aTt,"from_pretrained()"),aTt.forEach(t),Qhr=r(Lee," class method or the "),uQ=n(Lee,"A",{href:!0});var nTt=s(uQ);Hhr=r(nTt,"from_config()"),nTt.forEach(t),Uhr=r(Lee,` class
method.`),Lee.forEach(t),Jhr=i(_l),C8=n(_l,"P",{});var HGe=s(C8);Yhr=r(HGe,"This class cannot be instantiated directly using "),G2e=n(HGe,"CODE",{});var sTt=s(G2e);Khr=r(sTt,"__init__()"),sTt.forEach(t),Zhr=r(HGe," (throws an error)."),HGe.forEach(t),epr=i(_l),xt=n(_l,"DIV",{class:!0});var B6=s(xt);T(w8.$$.fragment,B6),opr=i(B6),O2e=n(B6,"P",{});var lTt=s(O2e);rpr=r(lTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lTt.forEach(t),tpr=i(B6),Qd=n(B6,"P",{});var xee=s(Qd);apr=r(xee,`Note:
Loading a model from its configuration file does `),V2e=n(xee,"STRONG",{});var iTt=s(V2e);npr=r(iTt,"not"),iTt.forEach(t),spr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(xee,"A",{href:!0});var dTt=s(bQ);lpr=r(dTt,"from_pretrained()"),dTt.forEach(t),ipr=r(xee," to load the model weights."),xee.forEach(t),dpr=i(B6),T(oT.$$.fragment,B6),B6.forEach(t),cpr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(A8.$$.fragment,ul),fpr=i(ul),X2e=n(ul,"P",{});var cTt=s(X2e);mpr=r(cTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cTt.forEach(t),gpr=i(ul),Za=n(ul,"P",{});var I6=s(Za);hpr=r(I6,"The model class to instantiate is selected based on the "),z2e=n(I6,"CODE",{});var fTt=s(z2e);ppr=r(fTt,"model_type"),fTt.forEach(t),_pr=r(I6,` property of the config object (either
passed as an argument or loaded from `),W2e=n(I6,"CODE",{});var mTt=s(W2e);upr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),bpr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(I6,"CODE",{});var gTt=s(Q2e);vpr=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),Fpr=r(I6,":"),I6.forEach(t),Tpr=i(ul),se=n(ul,"UL",{});var le=s(se);rT=n(le,"LI",{});var jRe=s(rT);H2e=n(jRe,"STRONG",{});var hTt=s(H2e);Mpr=r(hTt,"albert"),hTt.forEach(t),Epr=r(jRe," \u2014 "),vQ=n(jRe,"A",{href:!0});var pTt=s(vQ);Cpr=r(pTt,"TFAlbertForPreTraining"),pTt.forEach(t),wpr=r(jRe," (ALBERT model)"),jRe.forEach(t),Apr=i(le),tT=n(le,"LI",{});var DRe=s(tT);U2e=n(DRe,"STRONG",{});var _Tt=s(U2e);ypr=r(_Tt,"bart"),_Tt.forEach(t),Lpr=r(DRe," \u2014 "),FQ=n(DRe,"A",{href:!0});var uTt=s(FQ);xpr=r(uTt,"TFBartForConditionalGeneration"),uTt.forEach(t),$pr=r(DRe," (BART model)"),DRe.forEach(t),kpr=i(le),aT=n(le,"LI",{});var GRe=s(aT);J2e=n(GRe,"STRONG",{});var bTt=s(J2e);Spr=r(bTt,"bert"),bTt.forEach(t),Rpr=r(GRe," \u2014 "),TQ=n(GRe,"A",{href:!0});var vTt=s(TQ);Ppr=r(vTt,"TFBertForPreTraining"),vTt.forEach(t),Bpr=r(GRe," (BERT model)"),GRe.forEach(t),Ipr=i(le),nT=n(le,"LI",{});var ORe=s(nT);Y2e=n(ORe,"STRONG",{});var FTt=s(Y2e);Npr=r(FTt,"camembert"),FTt.forEach(t),qpr=r(ORe," \u2014 "),MQ=n(ORe,"A",{href:!0});var TTt=s(MQ);jpr=r(TTt,"TFCamembertForMaskedLM"),TTt.forEach(t),Dpr=r(ORe," (CamemBERT model)"),ORe.forEach(t),Gpr=i(le),sT=n(le,"LI",{});var VRe=s(sT);K2e=n(VRe,"STRONG",{});var MTt=s(K2e);Opr=r(MTt,"ctrl"),MTt.forEach(t),Vpr=r(VRe," \u2014 "),EQ=n(VRe,"A",{href:!0});var ETt=s(EQ);Xpr=r(ETt,"TFCTRLLMHeadModel"),ETt.forEach(t),zpr=r(VRe," (CTRL model)"),VRe.forEach(t),Wpr=i(le),lT=n(le,"LI",{});var XRe=s(lT);Z2e=n(XRe,"STRONG",{});var CTt=s(Z2e);Qpr=r(CTt,"distilbert"),CTt.forEach(t),Hpr=r(XRe," \u2014 "),CQ=n(XRe,"A",{href:!0});var wTt=s(CQ);Upr=r(wTt,"TFDistilBertForMaskedLM"),wTt.forEach(t),Jpr=r(XRe," (DistilBERT model)"),XRe.forEach(t),Ypr=i(le),iT=n(le,"LI",{});var zRe=s(iT);e4e=n(zRe,"STRONG",{});var ATt=s(e4e);Kpr=r(ATt,"electra"),ATt.forEach(t),Zpr=r(zRe," \u2014 "),wQ=n(zRe,"A",{href:!0});var yTt=s(wQ);e_r=r(yTt,"TFElectraForPreTraining"),yTt.forEach(t),o_r=r(zRe," (ELECTRA model)"),zRe.forEach(t),r_r=i(le),dT=n(le,"LI",{});var WRe=s(dT);o4e=n(WRe,"STRONG",{});var LTt=s(o4e);t_r=r(LTt,"flaubert"),LTt.forEach(t),a_r=r(WRe," \u2014 "),AQ=n(WRe,"A",{href:!0});var xTt=s(AQ);n_r=r(xTt,"TFFlaubertWithLMHeadModel"),xTt.forEach(t),s_r=r(WRe," (FlauBERT model)"),WRe.forEach(t),l_r=i(le),cT=n(le,"LI",{});var QRe=s(cT);r4e=n(QRe,"STRONG",{});var $Tt=s(r4e);i_r=r($Tt,"funnel"),$Tt.forEach(t),d_r=r(QRe," \u2014 "),yQ=n(QRe,"A",{href:!0});var kTt=s(yQ);c_r=r(kTt,"TFFunnelForPreTraining"),kTt.forEach(t),f_r=r(QRe," (Funnel Transformer model)"),QRe.forEach(t),m_r=i(le),fT=n(le,"LI",{});var HRe=s(fT);t4e=n(HRe,"STRONG",{});var STt=s(t4e);g_r=r(STt,"gpt2"),STt.forEach(t),h_r=r(HRe," \u2014 "),LQ=n(HRe,"A",{href:!0});var RTt=s(LQ);p_r=r(RTt,"TFGPT2LMHeadModel"),RTt.forEach(t),__r=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),u_r=i(le),mT=n(le,"LI",{});var URe=s(mT);a4e=n(URe,"STRONG",{});var PTt=s(a4e);b_r=r(PTt,"layoutlm"),PTt.forEach(t),v_r=r(URe," \u2014 "),xQ=n(URe,"A",{href:!0});var BTt=s(xQ);F_r=r(BTt,"TFLayoutLMForMaskedLM"),BTt.forEach(t),T_r=r(URe," (LayoutLM model)"),URe.forEach(t),M_r=i(le),gT=n(le,"LI",{});var JRe=s(gT);n4e=n(JRe,"STRONG",{});var ITt=s(n4e);E_r=r(ITt,"lxmert"),ITt.forEach(t),C_r=r(JRe," \u2014 "),$Q=n(JRe,"A",{href:!0});var NTt=s($Q);w_r=r(NTt,"TFLxmertForPreTraining"),NTt.forEach(t),A_r=r(JRe," (LXMERT model)"),JRe.forEach(t),y_r=i(le),hT=n(le,"LI",{});var YRe=s(hT);s4e=n(YRe,"STRONG",{});var qTt=s(s4e);L_r=r(qTt,"mobilebert"),qTt.forEach(t),x_r=r(YRe," \u2014 "),kQ=n(YRe,"A",{href:!0});var jTt=s(kQ);$_r=r(jTt,"TFMobileBertForPreTraining"),jTt.forEach(t),k_r=r(YRe," (MobileBERT model)"),YRe.forEach(t),S_r=i(le),pT=n(le,"LI",{});var KRe=s(pT);l4e=n(KRe,"STRONG",{});var DTt=s(l4e);R_r=r(DTt,"mpnet"),DTt.forEach(t),P_r=r(KRe," \u2014 "),SQ=n(KRe,"A",{href:!0});var GTt=s(SQ);B_r=r(GTt,"TFMPNetForMaskedLM"),GTt.forEach(t),I_r=r(KRe," (MPNet model)"),KRe.forEach(t),N_r=i(le),_T=n(le,"LI",{});var ZRe=s(_T);i4e=n(ZRe,"STRONG",{});var OTt=s(i4e);q_r=r(OTt,"openai-gpt"),OTt.forEach(t),j_r=r(ZRe," \u2014 "),RQ=n(ZRe,"A",{href:!0});var VTt=s(RQ);D_r=r(VTt,"TFOpenAIGPTLMHeadModel"),VTt.forEach(t),G_r=r(ZRe," (OpenAI GPT model)"),ZRe.forEach(t),O_r=i(le),uT=n(le,"LI",{});var ePe=s(uT);d4e=n(ePe,"STRONG",{});var XTt=s(d4e);V_r=r(XTt,"roberta"),XTt.forEach(t),X_r=r(ePe," \u2014 "),PQ=n(ePe,"A",{href:!0});var zTt=s(PQ);z_r=r(zTt,"TFRobertaForMaskedLM"),zTt.forEach(t),W_r=r(ePe," (RoBERTa model)"),ePe.forEach(t),Q_r=i(le),bT=n(le,"LI",{});var oPe=s(bT);c4e=n(oPe,"STRONG",{});var WTt=s(c4e);H_r=r(WTt,"t5"),WTt.forEach(t),U_r=r(oPe," \u2014 "),BQ=n(oPe,"A",{href:!0});var QTt=s(BQ);J_r=r(QTt,"TFT5ForConditionalGeneration"),QTt.forEach(t),Y_r=r(oPe," (T5 model)"),oPe.forEach(t),K_r=i(le),vT=n(le,"LI",{});var rPe=s(vT);f4e=n(rPe,"STRONG",{});var HTt=s(f4e);Z_r=r(HTt,"tapas"),HTt.forEach(t),eur=r(rPe," \u2014 "),IQ=n(rPe,"A",{href:!0});var UTt=s(IQ);our=r(UTt,"TFTapasForMaskedLM"),UTt.forEach(t),rur=r(rPe," (TAPAS model)"),rPe.forEach(t),tur=i(le),FT=n(le,"LI",{});var tPe=s(FT);m4e=n(tPe,"STRONG",{});var JTt=s(m4e);aur=r(JTt,"transfo-xl"),JTt.forEach(t),nur=r(tPe," \u2014 "),NQ=n(tPe,"A",{href:!0});var YTt=s(NQ);sur=r(YTt,"TFTransfoXLLMHeadModel"),YTt.forEach(t),lur=r(tPe," (Transformer-XL model)"),tPe.forEach(t),iur=i(le),TT=n(le,"LI",{});var aPe=s(TT);g4e=n(aPe,"STRONG",{});var KTt=s(g4e);dur=r(KTt,"vit_mae"),KTt.forEach(t),cur=r(aPe," \u2014 "),qQ=n(aPe,"A",{href:!0});var ZTt=s(qQ);fur=r(ZTt,"TFViTMAEForPreTraining"),ZTt.forEach(t),mur=r(aPe," (ViTMAE model)"),aPe.forEach(t),gur=i(le),MT=n(le,"LI",{});var nPe=s(MT);h4e=n(nPe,"STRONG",{});var e7t=s(h4e);hur=r(e7t,"xlm"),e7t.forEach(t),pur=r(nPe," \u2014 "),jQ=n(nPe,"A",{href:!0});var o7t=s(jQ);_ur=r(o7t,"TFXLMWithLMHeadModel"),o7t.forEach(t),uur=r(nPe," (XLM model)"),nPe.forEach(t),bur=i(le),ET=n(le,"LI",{});var sPe=s(ET);p4e=n(sPe,"STRONG",{});var r7t=s(p4e);vur=r(r7t,"xlm-roberta"),r7t.forEach(t),Fur=r(sPe," \u2014 "),DQ=n(sPe,"A",{href:!0});var t7t=s(DQ);Tur=r(t7t,"TFXLMRobertaForMaskedLM"),t7t.forEach(t),Mur=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),Eur=i(le),CT=n(le,"LI",{});var lPe=s(CT);_4e=n(lPe,"STRONG",{});var a7t=s(_4e);Cur=r(a7t,"xlnet"),a7t.forEach(t),wur=r(lPe," \u2014 "),GQ=n(lPe,"A",{href:!0});var n7t=s(GQ);Aur=r(n7t,"TFXLNetLMHeadModel"),n7t.forEach(t),yur=r(lPe," (XLNet model)"),lPe.forEach(t),le.forEach(t),Lur=i(ul),T(wT.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Vje=i(f),Hd=n(f,"H2",{class:!0});var UGe=s(Hd);AT=n(UGe,"A",{id:!0,class:!0,href:!0});var s7t=s(AT);u4e=n(s7t,"SPAN",{});var l7t=s(u4e);T(y8.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),xur=i(UGe),b4e=n(UGe,"SPAN",{});var i7t=s(b4e);$ur=r(i7t,"TFAutoModelForCausalLM"),i7t.forEach(t),UGe.forEach(t),Xje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(L8.$$.fragment,bl),kur=i(bl),Ud=n(bl,"P",{});var $ee=s(Ud);Sur=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=n($ee,"A",{href:!0});var d7t=s(OQ);Rur=r(d7t,"from_pretrained()"),d7t.forEach(t),Pur=r($ee," class method or the "),VQ=n($ee,"A",{href:!0});var c7t=s(VQ);Bur=r(c7t,"from_config()"),c7t.forEach(t),Iur=r($ee,` class
method.`),$ee.forEach(t),Nur=i(bl),x8=n(bl,"P",{});var JGe=s(x8);qur=r(JGe,"This class cannot be instantiated directly using "),v4e=n(JGe,"CODE",{});var f7t=s(v4e);jur=r(f7t,"__init__()"),f7t.forEach(t),Dur=r(JGe," (throws an error)."),JGe.forEach(t),Gur=i(bl),$t=n(bl,"DIV",{class:!0});var N6=s($t);T($8.$$.fragment,N6),Our=i(N6),F4e=n(N6,"P",{});var m7t=s(F4e);Vur=r(m7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),m7t.forEach(t),Xur=i(N6),Jd=n(N6,"P",{});var kee=s(Jd);zur=r(kee,`Note:
Loading a model from its configuration file does `),T4e=n(kee,"STRONG",{});var g7t=s(T4e);Wur=r(g7t,"not"),g7t.forEach(t),Qur=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(kee,"A",{href:!0});var h7t=s(XQ);Hur=r(h7t,"from_pretrained()"),h7t.forEach(t),Uur=r(kee," to load the model weights."),kee.forEach(t),Jur=i(N6),T(yT.$$.fragment,N6),N6.forEach(t),Yur=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(k8.$$.fragment,vl),Kur=i(vl),M4e=n(vl,"P",{});var p7t=s(M4e);Zur=r(p7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),p7t.forEach(t),e1r=i(vl),en=n(vl,"P",{});var q6=s(en);o1r=r(q6,"The model class to instantiate is selected based on the "),E4e=n(q6,"CODE",{});var _7t=s(E4e);r1r=r(_7t,"model_type"),_7t.forEach(t),t1r=r(q6,` property of the config object (either
passed as an argument or loaded from `),C4e=n(q6,"CODE",{});var u7t=s(C4e);a1r=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),n1r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(q6,"CODE",{});var b7t=s(w4e);s1r=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),l1r=r(q6,":"),q6.forEach(t),i1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);LT=n(Ce,"LI",{});var iPe=s(LT);A4e=n(iPe,"STRONG",{});var v7t=s(A4e);d1r=r(v7t,"bert"),v7t.forEach(t),c1r=r(iPe," \u2014 "),zQ=n(iPe,"A",{href:!0});var F7t=s(zQ);f1r=r(F7t,"TFBertLMHeadModel"),F7t.forEach(t),m1r=r(iPe," (BERT model)"),iPe.forEach(t),g1r=i(Ce),xT=n(Ce,"LI",{});var dPe=s(xT);y4e=n(dPe,"STRONG",{});var T7t=s(y4e);h1r=r(T7t,"camembert"),T7t.forEach(t),p1r=r(dPe," \u2014 "),WQ=n(dPe,"A",{href:!0});var M7t=s(WQ);_1r=r(M7t,"TFCamembertForCausalLM"),M7t.forEach(t),u1r=r(dPe," (CamemBERT model)"),dPe.forEach(t),b1r=i(Ce),$T=n(Ce,"LI",{});var cPe=s($T);L4e=n(cPe,"STRONG",{});var E7t=s(L4e);v1r=r(E7t,"ctrl"),E7t.forEach(t),F1r=r(cPe," \u2014 "),QQ=n(cPe,"A",{href:!0});var C7t=s(QQ);T1r=r(C7t,"TFCTRLLMHeadModel"),C7t.forEach(t),M1r=r(cPe," (CTRL model)"),cPe.forEach(t),E1r=i(Ce),kT=n(Ce,"LI",{});var fPe=s(kT);x4e=n(fPe,"STRONG",{});var w7t=s(x4e);C1r=r(w7t,"gpt2"),w7t.forEach(t),w1r=r(fPe," \u2014 "),HQ=n(fPe,"A",{href:!0});var A7t=s(HQ);A1r=r(A7t,"TFGPT2LMHeadModel"),A7t.forEach(t),y1r=r(fPe," (OpenAI GPT-2 model)"),fPe.forEach(t),L1r=i(Ce),ST=n(Ce,"LI",{});var mPe=s(ST);$4e=n(mPe,"STRONG",{});var y7t=s($4e);x1r=r(y7t,"gptj"),y7t.forEach(t),$1r=r(mPe," \u2014 "),UQ=n(mPe,"A",{href:!0});var L7t=s(UQ);k1r=r(L7t,"TFGPTJForCausalLM"),L7t.forEach(t),S1r=r(mPe," (GPT-J model)"),mPe.forEach(t),R1r=i(Ce),RT=n(Ce,"LI",{});var gPe=s(RT);k4e=n(gPe,"STRONG",{});var x7t=s(k4e);P1r=r(x7t,"openai-gpt"),x7t.forEach(t),B1r=r(gPe," \u2014 "),JQ=n(gPe,"A",{href:!0});var $7t=s(JQ);I1r=r($7t,"TFOpenAIGPTLMHeadModel"),$7t.forEach(t),N1r=r(gPe," (OpenAI GPT model)"),gPe.forEach(t),q1r=i(Ce),PT=n(Ce,"LI",{});var hPe=s(PT);S4e=n(hPe,"STRONG",{});var k7t=s(S4e);j1r=r(k7t,"opt"),k7t.forEach(t),D1r=r(hPe," \u2014 "),YQ=n(hPe,"A",{href:!0});var S7t=s(YQ);G1r=r(S7t,"TFOPTForCausalLM"),S7t.forEach(t),O1r=r(hPe," (OPT model)"),hPe.forEach(t),V1r=i(Ce),BT=n(Ce,"LI",{});var pPe=s(BT);R4e=n(pPe,"STRONG",{});var R7t=s(R4e);X1r=r(R7t,"rembert"),R7t.forEach(t),z1r=r(pPe," \u2014 "),KQ=n(pPe,"A",{href:!0});var P7t=s(KQ);W1r=r(P7t,"TFRemBertForCausalLM"),P7t.forEach(t),Q1r=r(pPe," (RemBERT model)"),pPe.forEach(t),H1r=i(Ce),IT=n(Ce,"LI",{});var _Pe=s(IT);P4e=n(_Pe,"STRONG",{});var B7t=s(P4e);U1r=r(B7t,"roberta"),B7t.forEach(t),J1r=r(_Pe," \u2014 "),ZQ=n(_Pe,"A",{href:!0});var I7t=s(ZQ);Y1r=r(I7t,"TFRobertaForCausalLM"),I7t.forEach(t),K1r=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),Z1r=i(Ce),NT=n(Ce,"LI",{});var uPe=s(NT);B4e=n(uPe,"STRONG",{});var N7t=s(B4e);ebr=r(N7t,"roformer"),N7t.forEach(t),obr=r(uPe," \u2014 "),eH=n(uPe,"A",{href:!0});var q7t=s(eH);rbr=r(q7t,"TFRoFormerForCausalLM"),q7t.forEach(t),tbr=r(uPe," (RoFormer model)"),uPe.forEach(t),abr=i(Ce),qT=n(Ce,"LI",{});var bPe=s(qT);I4e=n(bPe,"STRONG",{});var j7t=s(I4e);nbr=r(j7t,"transfo-xl"),j7t.forEach(t),sbr=r(bPe," \u2014 "),oH=n(bPe,"A",{href:!0});var D7t=s(oH);lbr=r(D7t,"TFTransfoXLLMHeadModel"),D7t.forEach(t),ibr=r(bPe," (Transformer-XL model)"),bPe.forEach(t),dbr=i(Ce),jT=n(Ce,"LI",{});var vPe=s(jT);N4e=n(vPe,"STRONG",{});var G7t=s(N4e);cbr=r(G7t,"xlm"),G7t.forEach(t),fbr=r(vPe," \u2014 "),rH=n(vPe,"A",{href:!0});var O7t=s(rH);mbr=r(O7t,"TFXLMWithLMHeadModel"),O7t.forEach(t),gbr=r(vPe," (XLM model)"),vPe.forEach(t),hbr=i(Ce),DT=n(Ce,"LI",{});var FPe=s(DT);q4e=n(FPe,"STRONG",{});var V7t=s(q4e);pbr=r(V7t,"xlnet"),V7t.forEach(t),_br=r(FPe," \u2014 "),tH=n(FPe,"A",{href:!0});var X7t=s(tH);ubr=r(X7t,"TFXLNetLMHeadModel"),X7t.forEach(t),bbr=r(FPe," (XLNet model)"),FPe.forEach(t),Ce.forEach(t),vbr=i(vl),T(GT.$$.fragment,vl),vl.forEach(t),bl.forEach(t),zje=i(f),Yd=n(f,"H2",{class:!0});var YGe=s(Yd);OT=n(YGe,"A",{id:!0,class:!0,href:!0});var z7t=s(OT);j4e=n(z7t,"SPAN",{});var W7t=s(j4e);T(S8.$$.fragment,W7t),W7t.forEach(t),z7t.forEach(t),Fbr=i(YGe),D4e=n(YGe,"SPAN",{});var Q7t=s(D4e);Tbr=r(Q7t,"TFAutoModelForImageClassification"),Q7t.forEach(t),YGe.forEach(t),Wje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(R8.$$.fragment,Fl),Mbr=i(Fl),Kd=n(Fl,"P",{});var See=s(Kd);Ebr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=n(See,"A",{href:!0});var H7t=s(aH);Cbr=r(H7t,"from_pretrained()"),H7t.forEach(t),wbr=r(See," class method or the "),nH=n(See,"A",{href:!0});var U7t=s(nH);Abr=r(U7t,"from_config()"),U7t.forEach(t),ybr=r(See,` class
method.`),See.forEach(t),Lbr=i(Fl),P8=n(Fl,"P",{});var KGe=s(P8);xbr=r(KGe,"This class cannot be instantiated directly using "),G4e=n(KGe,"CODE",{});var J7t=s(G4e);$br=r(J7t,"__init__()"),J7t.forEach(t),kbr=r(KGe," (throws an error)."),KGe.forEach(t),Sbr=i(Fl),kt=n(Fl,"DIV",{class:!0});var j6=s(kt);T(B8.$$.fragment,j6),Rbr=i(j6),O4e=n(j6,"P",{});var Y7t=s(O4e);Pbr=r(Y7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y7t.forEach(t),Bbr=i(j6),Zd=n(j6,"P",{});var Ree=s(Zd);Ibr=r(Ree,`Note:
Loading a model from its configuration file does `),V4e=n(Ree,"STRONG",{});var K7t=s(V4e);Nbr=r(K7t,"not"),K7t.forEach(t),qbr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(Ree,"A",{href:!0});var Z7t=s(sH);jbr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),Dbr=r(Ree," to load the model weights."),Ree.forEach(t),Gbr=i(j6),T(VT.$$.fragment,j6),j6.forEach(t),Obr=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(I8.$$.fragment,Tl),Vbr=i(Tl),X4e=n(Tl,"P",{});var eMt=s(X4e);Xbr=r(eMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eMt.forEach(t),zbr=i(Tl),on=n(Tl,"P",{});var D6=s(on);Wbr=r(D6,"The model class to instantiate is selected based on the "),z4e=n(D6,"CODE",{});var oMt=s(z4e);Qbr=r(oMt,"model_type"),oMt.forEach(t),Hbr=r(D6,` property of the config object (either
passed as an argument or loaded from `),W4e=n(D6,"CODE",{});var rMt=s(W4e);Ubr=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),Jbr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(D6,"CODE",{});var tMt=s(Q4e);Ybr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),Kbr=r(D6,":"),D6.forEach(t),Zbr=i(Tl),rn=n(Tl,"UL",{});var G6=s(rn);XT=n(G6,"LI",{});var TPe=s(XT);H4e=n(TPe,"STRONG",{});var aMt=s(H4e);e2r=r(aMt,"convnext"),aMt.forEach(t),o2r=r(TPe," \u2014 "),lH=n(TPe,"A",{href:!0});var nMt=s(lH);r2r=r(nMt,"TFConvNextForImageClassification"),nMt.forEach(t),t2r=r(TPe," (ConvNext model)"),TPe.forEach(t),a2r=i(G6),zT=n(G6,"LI",{});var MPe=s(zT);U4e=n(MPe,"STRONG",{});var sMt=s(U4e);n2r=r(sMt,"data2vec-vision"),sMt.forEach(t),s2r=r(MPe," \u2014 "),iH=n(MPe,"A",{href:!0});var lMt=s(iH);l2r=r(lMt,"TFData2VecVisionForImageClassification"),lMt.forEach(t),i2r=r(MPe," (Data2VecVision model)"),MPe.forEach(t),d2r=i(G6),WT=n(G6,"LI",{});var EPe=s(WT);J4e=n(EPe,"STRONG",{});var iMt=s(J4e);c2r=r(iMt,"swin"),iMt.forEach(t),f2r=r(EPe," \u2014 "),dH=n(EPe,"A",{href:!0});var dMt=s(dH);m2r=r(dMt,"TFSwinForImageClassification"),dMt.forEach(t),g2r=r(EPe," (Swin model)"),EPe.forEach(t),h2r=i(G6),QT=n(G6,"LI",{});var CPe=s(QT);Y4e=n(CPe,"STRONG",{});var cMt=s(Y4e);p2r=r(cMt,"vit"),cMt.forEach(t),_2r=r(CPe," \u2014 "),cH=n(CPe,"A",{href:!0});var fMt=s(cH);u2r=r(fMt,"TFViTForImageClassification"),fMt.forEach(t),b2r=r(CPe," (ViT model)"),CPe.forEach(t),G6.forEach(t),v2r=i(Tl),T(HT.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Qje=i(f),ec=n(f,"H2",{class:!0});var ZGe=s(ec);UT=n(ZGe,"A",{id:!0,class:!0,href:!0});var mMt=s(UT);K4e=n(mMt,"SPAN",{});var gMt=s(K4e);T(N8.$$.fragment,gMt),gMt.forEach(t),mMt.forEach(t),F2r=i(ZGe),Z4e=n(ZGe,"SPAN",{});var hMt=s(Z4e);T2r=r(hMt,"TFAutoModelForMaskedLM"),hMt.forEach(t),ZGe.forEach(t),Hje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(q8.$$.fragment,Ml),M2r=i(Ml),oc=n(Ml,"P",{});var Pee=s(oc);E2r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=n(Pee,"A",{href:!0});var pMt=s(fH);C2r=r(pMt,"from_pretrained()"),pMt.forEach(t),w2r=r(Pee," class method or the "),mH=n(Pee,"A",{href:!0});var _Mt=s(mH);A2r=r(_Mt,"from_config()"),_Mt.forEach(t),y2r=r(Pee,` class
method.`),Pee.forEach(t),L2r=i(Ml),j8=n(Ml,"P",{});var eOe=s(j8);x2r=r(eOe,"This class cannot be instantiated directly using "),eve=n(eOe,"CODE",{});var uMt=s(eve);$2r=r(uMt,"__init__()"),uMt.forEach(t),k2r=r(eOe," (throws an error)."),eOe.forEach(t),S2r=i(Ml),St=n(Ml,"DIV",{class:!0});var O6=s(St);T(D8.$$.fragment,O6),R2r=i(O6),ove=n(O6,"P",{});var bMt=s(ove);P2r=r(bMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bMt.forEach(t),B2r=i(O6),rc=n(O6,"P",{});var Bee=s(rc);I2r=r(Bee,`Note:
Loading a model from its configuration file does `),rve=n(Bee,"STRONG",{});var vMt=s(rve);N2r=r(vMt,"not"),vMt.forEach(t),q2r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Bee,"A",{href:!0});var FMt=s(gH);j2r=r(FMt,"from_pretrained()"),FMt.forEach(t),D2r=r(Bee," to load the model weights."),Bee.forEach(t),G2r=i(O6),T(JT.$$.fragment,O6),O6.forEach(t),O2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(G8.$$.fragment,El),V2r=i(El),tve=n(El,"P",{});var TMt=s(tve);X2r=r(TMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TMt.forEach(t),z2r=i(El),tn=n(El,"P",{});var V6=s(tn);W2r=r(V6,"The model class to instantiate is selected based on the "),ave=n(V6,"CODE",{});var MMt=s(ave);Q2r=r(MMt,"model_type"),MMt.forEach(t),H2r=r(V6,` property of the config object (either
passed as an argument or loaded from `),nve=n(V6,"CODE",{});var EMt=s(nve);U2r=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),J2r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(V6,"CODE",{});var CMt=s(sve);Y2r=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),K2r=r(V6,":"),V6.forEach(t),Z2r=i(El),ie=n(El,"UL",{});var fe=s(ie);YT=n(fe,"LI",{});var wPe=s(YT);lve=n(wPe,"STRONG",{});var wMt=s(lve);e4r=r(wMt,"albert"),wMt.forEach(t),o4r=r(wPe," \u2014 "),hH=n(wPe,"A",{href:!0});var AMt=s(hH);r4r=r(AMt,"TFAlbertForMaskedLM"),AMt.forEach(t),t4r=r(wPe," (ALBERT model)"),wPe.forEach(t),a4r=i(fe),KT=n(fe,"LI",{});var APe=s(KT);ive=n(APe,"STRONG",{});var yMt=s(ive);n4r=r(yMt,"bert"),yMt.forEach(t),s4r=r(APe," \u2014 "),pH=n(APe,"A",{href:!0});var LMt=s(pH);l4r=r(LMt,"TFBertForMaskedLM"),LMt.forEach(t),i4r=r(APe," (BERT model)"),APe.forEach(t),d4r=i(fe),ZT=n(fe,"LI",{});var yPe=s(ZT);dve=n(yPe,"STRONG",{});var xMt=s(dve);c4r=r(xMt,"camembert"),xMt.forEach(t),f4r=r(yPe," \u2014 "),_H=n(yPe,"A",{href:!0});var $Mt=s(_H);m4r=r($Mt,"TFCamembertForMaskedLM"),$Mt.forEach(t),g4r=r(yPe," (CamemBERT model)"),yPe.forEach(t),h4r=i(fe),e7=n(fe,"LI",{});var LPe=s(e7);cve=n(LPe,"STRONG",{});var kMt=s(cve);p4r=r(kMt,"convbert"),kMt.forEach(t),_4r=r(LPe," \u2014 "),uH=n(LPe,"A",{href:!0});var SMt=s(uH);u4r=r(SMt,"TFConvBertForMaskedLM"),SMt.forEach(t),b4r=r(LPe," (ConvBERT model)"),LPe.forEach(t),v4r=i(fe),o7=n(fe,"LI",{});var xPe=s(o7);fve=n(xPe,"STRONG",{});var RMt=s(fve);F4r=r(RMt,"deberta"),RMt.forEach(t),T4r=r(xPe," \u2014 "),bH=n(xPe,"A",{href:!0});var PMt=s(bH);M4r=r(PMt,"TFDebertaForMaskedLM"),PMt.forEach(t),E4r=r(xPe," (DeBERTa model)"),xPe.forEach(t),C4r=i(fe),r7=n(fe,"LI",{});var $Pe=s(r7);mve=n($Pe,"STRONG",{});var BMt=s(mve);w4r=r(BMt,"deberta-v2"),BMt.forEach(t),A4r=r($Pe," \u2014 "),vH=n($Pe,"A",{href:!0});var IMt=s(vH);y4r=r(IMt,"TFDebertaV2ForMaskedLM"),IMt.forEach(t),L4r=r($Pe," (DeBERTa-v2 model)"),$Pe.forEach(t),x4r=i(fe),t7=n(fe,"LI",{});var kPe=s(t7);gve=n(kPe,"STRONG",{});var NMt=s(gve);$4r=r(NMt,"distilbert"),NMt.forEach(t),k4r=r(kPe," \u2014 "),FH=n(kPe,"A",{href:!0});var qMt=s(FH);S4r=r(qMt,"TFDistilBertForMaskedLM"),qMt.forEach(t),R4r=r(kPe," (DistilBERT model)"),kPe.forEach(t),P4r=i(fe),a7=n(fe,"LI",{});var SPe=s(a7);hve=n(SPe,"STRONG",{});var jMt=s(hve);B4r=r(jMt,"electra"),jMt.forEach(t),I4r=r(SPe," \u2014 "),TH=n(SPe,"A",{href:!0});var DMt=s(TH);N4r=r(DMt,"TFElectraForMaskedLM"),DMt.forEach(t),q4r=r(SPe," (ELECTRA model)"),SPe.forEach(t),j4r=i(fe),n7=n(fe,"LI",{});var RPe=s(n7);pve=n(RPe,"STRONG",{});var GMt=s(pve);D4r=r(GMt,"flaubert"),GMt.forEach(t),G4r=r(RPe," \u2014 "),MH=n(RPe,"A",{href:!0});var OMt=s(MH);O4r=r(OMt,"TFFlaubertWithLMHeadModel"),OMt.forEach(t),V4r=r(RPe," (FlauBERT model)"),RPe.forEach(t),X4r=i(fe),s7=n(fe,"LI",{});var PPe=s(s7);_ve=n(PPe,"STRONG",{});var VMt=s(_ve);z4r=r(VMt,"funnel"),VMt.forEach(t),W4r=r(PPe," \u2014 "),EH=n(PPe,"A",{href:!0});var XMt=s(EH);Q4r=r(XMt,"TFFunnelForMaskedLM"),XMt.forEach(t),H4r=r(PPe," (Funnel Transformer model)"),PPe.forEach(t),U4r=i(fe),l7=n(fe,"LI",{});var BPe=s(l7);uve=n(BPe,"STRONG",{});var zMt=s(uve);J4r=r(zMt,"layoutlm"),zMt.forEach(t),Y4r=r(BPe," \u2014 "),CH=n(BPe,"A",{href:!0});var WMt=s(CH);K4r=r(WMt,"TFLayoutLMForMaskedLM"),WMt.forEach(t),Z4r=r(BPe," (LayoutLM model)"),BPe.forEach(t),evr=i(fe),i7=n(fe,"LI",{});var IPe=s(i7);bve=n(IPe,"STRONG",{});var QMt=s(bve);ovr=r(QMt,"longformer"),QMt.forEach(t),rvr=r(IPe," \u2014 "),wH=n(IPe,"A",{href:!0});var HMt=s(wH);tvr=r(HMt,"TFLongformerForMaskedLM"),HMt.forEach(t),avr=r(IPe," (Longformer model)"),IPe.forEach(t),nvr=i(fe),d7=n(fe,"LI",{});var NPe=s(d7);vve=n(NPe,"STRONG",{});var UMt=s(vve);svr=r(UMt,"mobilebert"),UMt.forEach(t),lvr=r(NPe," \u2014 "),AH=n(NPe,"A",{href:!0});var JMt=s(AH);ivr=r(JMt,"TFMobileBertForMaskedLM"),JMt.forEach(t),dvr=r(NPe," (MobileBERT model)"),NPe.forEach(t),cvr=i(fe),c7=n(fe,"LI",{});var qPe=s(c7);Fve=n(qPe,"STRONG",{});var YMt=s(Fve);fvr=r(YMt,"mpnet"),YMt.forEach(t),mvr=r(qPe," \u2014 "),yH=n(qPe,"A",{href:!0});var KMt=s(yH);gvr=r(KMt,"TFMPNetForMaskedLM"),KMt.forEach(t),hvr=r(qPe," (MPNet model)"),qPe.forEach(t),pvr=i(fe),f7=n(fe,"LI",{});var jPe=s(f7);Tve=n(jPe,"STRONG",{});var ZMt=s(Tve);_vr=r(ZMt,"rembert"),ZMt.forEach(t),uvr=r(jPe," \u2014 "),LH=n(jPe,"A",{href:!0});var eEt=s(LH);bvr=r(eEt,"TFRemBertForMaskedLM"),eEt.forEach(t),vvr=r(jPe," (RemBERT model)"),jPe.forEach(t),Fvr=i(fe),m7=n(fe,"LI",{});var DPe=s(m7);Mve=n(DPe,"STRONG",{});var oEt=s(Mve);Tvr=r(oEt,"roberta"),oEt.forEach(t),Mvr=r(DPe," \u2014 "),xH=n(DPe,"A",{href:!0});var rEt=s(xH);Evr=r(rEt,"TFRobertaForMaskedLM"),rEt.forEach(t),Cvr=r(DPe," (RoBERTa model)"),DPe.forEach(t),wvr=i(fe),g7=n(fe,"LI",{});var GPe=s(g7);Eve=n(GPe,"STRONG",{});var tEt=s(Eve);Avr=r(tEt,"roformer"),tEt.forEach(t),yvr=r(GPe," \u2014 "),$H=n(GPe,"A",{href:!0});var aEt=s($H);Lvr=r(aEt,"TFRoFormerForMaskedLM"),aEt.forEach(t),xvr=r(GPe," (RoFormer model)"),GPe.forEach(t),$vr=i(fe),h7=n(fe,"LI",{});var OPe=s(h7);Cve=n(OPe,"STRONG",{});var nEt=s(Cve);kvr=r(nEt,"tapas"),nEt.forEach(t),Svr=r(OPe," \u2014 "),kH=n(OPe,"A",{href:!0});var sEt=s(kH);Rvr=r(sEt,"TFTapasForMaskedLM"),sEt.forEach(t),Pvr=r(OPe," (TAPAS model)"),OPe.forEach(t),Bvr=i(fe),p7=n(fe,"LI",{});var VPe=s(p7);wve=n(VPe,"STRONG",{});var lEt=s(wve);Ivr=r(lEt,"xlm"),lEt.forEach(t),Nvr=r(VPe," \u2014 "),SH=n(VPe,"A",{href:!0});var iEt=s(SH);qvr=r(iEt,"TFXLMWithLMHeadModel"),iEt.forEach(t),jvr=r(VPe," (XLM model)"),VPe.forEach(t),Dvr=i(fe),_7=n(fe,"LI",{});var XPe=s(_7);Ave=n(XPe,"STRONG",{});var dEt=s(Ave);Gvr=r(dEt,"xlm-roberta"),dEt.forEach(t),Ovr=r(XPe," \u2014 "),RH=n(XPe,"A",{href:!0});var cEt=s(RH);Vvr=r(cEt,"TFXLMRobertaForMaskedLM"),cEt.forEach(t),Xvr=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),fe.forEach(t),zvr=i(El),T(u7.$$.fragment,El),El.forEach(t),Ml.forEach(t),Uje=i(f),tc=n(f,"H2",{class:!0});var oOe=s(tc);b7=n(oOe,"A",{id:!0,class:!0,href:!0});var fEt=s(b7);yve=n(fEt,"SPAN",{});var mEt=s(yve);T(O8.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),Wvr=i(oOe),Lve=n(oOe,"SPAN",{});var gEt=s(Lve);Qvr=r(gEt,"TFAutoModelForSeq2SeqLM"),gEt.forEach(t),oOe.forEach(t),Jje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(V8.$$.fragment,Cl),Hvr=i(Cl),ac=n(Cl,"P",{});var Iee=s(ac);Uvr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=n(Iee,"A",{href:!0});var hEt=s(PH);Jvr=r(hEt,"from_pretrained()"),hEt.forEach(t),Yvr=r(Iee," class method or the "),BH=n(Iee,"A",{href:!0});var pEt=s(BH);Kvr=r(pEt,"from_config()"),pEt.forEach(t),Zvr=r(Iee,` class
method.`),Iee.forEach(t),e5r=i(Cl),X8=n(Cl,"P",{});var rOe=s(X8);o5r=r(rOe,"This class cannot be instantiated directly using "),xve=n(rOe,"CODE",{});var _Et=s(xve);r5r=r(_Et,"__init__()"),_Et.forEach(t),t5r=r(rOe," (throws an error)."),rOe.forEach(t),a5r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var X6=s(Rt);T(z8.$$.fragment,X6),n5r=i(X6),$ve=n(X6,"P",{});var uEt=s($ve);s5r=r(uEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uEt.forEach(t),l5r=i(X6),nc=n(X6,"P",{});var Nee=s(nc);i5r=r(Nee,`Note:
Loading a model from its configuration file does `),kve=n(Nee,"STRONG",{});var bEt=s(kve);d5r=r(bEt,"not"),bEt.forEach(t),c5r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Nee,"A",{href:!0});var vEt=s(IH);f5r=r(vEt,"from_pretrained()"),vEt.forEach(t),m5r=r(Nee," to load the model weights."),Nee.forEach(t),g5r=i(X6),T(v7.$$.fragment,X6),X6.forEach(t),h5r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(W8.$$.fragment,wl),p5r=i(wl),Sve=n(wl,"P",{});var FEt=s(Sve);_5r=r(FEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FEt.forEach(t),u5r=i(wl),an=n(wl,"P",{});var z6=s(an);b5r=r(z6,"The model class to instantiate is selected based on the "),Rve=n(z6,"CODE",{});var TEt=s(Rve);v5r=r(TEt,"model_type"),TEt.forEach(t),F5r=r(z6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(z6,"CODE",{});var MEt=s(Pve);T5r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),M5r=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(z6,"CODE",{});var EEt=s(Bve);E5r=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),C5r=r(z6,":"),z6.forEach(t),w5r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);F7=n(Be,"LI",{});var zPe=s(F7);Ive=n(zPe,"STRONG",{});var CEt=s(Ive);A5r=r(CEt,"bart"),CEt.forEach(t),y5r=r(zPe," \u2014 "),NH=n(zPe,"A",{href:!0});var wEt=s(NH);L5r=r(wEt,"TFBartForConditionalGeneration"),wEt.forEach(t),x5r=r(zPe," (BART model)"),zPe.forEach(t),$5r=i(Be),T7=n(Be,"LI",{});var WPe=s(T7);Nve=n(WPe,"STRONG",{});var AEt=s(Nve);k5r=r(AEt,"blenderbot"),AEt.forEach(t),S5r=r(WPe," \u2014 "),qH=n(WPe,"A",{href:!0});var yEt=s(qH);R5r=r(yEt,"TFBlenderbotForConditionalGeneration"),yEt.forEach(t),P5r=r(WPe," (Blenderbot model)"),WPe.forEach(t),B5r=i(Be),M7=n(Be,"LI",{});var QPe=s(M7);qve=n(QPe,"STRONG",{});var LEt=s(qve);I5r=r(LEt,"blenderbot-small"),LEt.forEach(t),N5r=r(QPe," \u2014 "),jH=n(QPe,"A",{href:!0});var xEt=s(jH);q5r=r(xEt,"TFBlenderbotSmallForConditionalGeneration"),xEt.forEach(t),j5r=r(QPe," (BlenderbotSmall model)"),QPe.forEach(t),D5r=i(Be),E7=n(Be,"LI",{});var HPe=s(E7);jve=n(HPe,"STRONG",{});var $Et=s(jve);G5r=r($Et,"encoder-decoder"),$Et.forEach(t),O5r=r(HPe," \u2014 "),DH=n(HPe,"A",{href:!0});var kEt=s(DH);V5r=r(kEt,"TFEncoderDecoderModel"),kEt.forEach(t),X5r=r(HPe," (Encoder decoder model)"),HPe.forEach(t),z5r=i(Be),C7=n(Be,"LI",{});var UPe=s(C7);Dve=n(UPe,"STRONG",{});var SEt=s(Dve);W5r=r(SEt,"led"),SEt.forEach(t),Q5r=r(UPe," \u2014 "),GH=n(UPe,"A",{href:!0});var REt=s(GH);H5r=r(REt,"TFLEDForConditionalGeneration"),REt.forEach(t),U5r=r(UPe," (LED model)"),UPe.forEach(t),J5r=i(Be),w7=n(Be,"LI",{});var JPe=s(w7);Gve=n(JPe,"STRONG",{});var PEt=s(Gve);Y5r=r(PEt,"marian"),PEt.forEach(t),K5r=r(JPe," \u2014 "),OH=n(JPe,"A",{href:!0});var BEt=s(OH);Z5r=r(BEt,"TFMarianMTModel"),BEt.forEach(t),e3r=r(JPe," (Marian model)"),JPe.forEach(t),o3r=i(Be),A7=n(Be,"LI",{});var YPe=s(A7);Ove=n(YPe,"STRONG",{});var IEt=s(Ove);r3r=r(IEt,"mbart"),IEt.forEach(t),t3r=r(YPe," \u2014 "),VH=n(YPe,"A",{href:!0});var NEt=s(VH);a3r=r(NEt,"TFMBartForConditionalGeneration"),NEt.forEach(t),n3r=r(YPe," (mBART model)"),YPe.forEach(t),s3r=i(Be),y7=n(Be,"LI",{});var KPe=s(y7);Vve=n(KPe,"STRONG",{});var qEt=s(Vve);l3r=r(qEt,"mt5"),qEt.forEach(t),i3r=r(KPe," \u2014 "),XH=n(KPe,"A",{href:!0});var jEt=s(XH);d3r=r(jEt,"TFMT5ForConditionalGeneration"),jEt.forEach(t),c3r=r(KPe," (mT5 model)"),KPe.forEach(t),f3r=i(Be),L7=n(Be,"LI",{});var ZPe=s(L7);Xve=n(ZPe,"STRONG",{});var DEt=s(Xve);m3r=r(DEt,"pegasus"),DEt.forEach(t),g3r=r(ZPe," \u2014 "),zH=n(ZPe,"A",{href:!0});var GEt=s(zH);h3r=r(GEt,"TFPegasusForConditionalGeneration"),GEt.forEach(t),p3r=r(ZPe," (Pegasus model)"),ZPe.forEach(t),_3r=i(Be),x7=n(Be,"LI",{});var eBe=s(x7);zve=n(eBe,"STRONG",{});var OEt=s(zve);u3r=r(OEt,"t5"),OEt.forEach(t),b3r=r(eBe," \u2014 "),WH=n(eBe,"A",{href:!0});var VEt=s(WH);v3r=r(VEt,"TFT5ForConditionalGeneration"),VEt.forEach(t),F3r=r(eBe," (T5 model)"),eBe.forEach(t),Be.forEach(t),T3r=i(wl),T($7.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Yje=i(f),sc=n(f,"H2",{class:!0});var tOe=s(sc);k7=n(tOe,"A",{id:!0,class:!0,href:!0});var XEt=s(k7);Wve=n(XEt,"SPAN",{});var zEt=s(Wve);T(Q8.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),M3r=i(tOe),Qve=n(tOe,"SPAN",{});var WEt=s(Qve);E3r=r(WEt,"TFAutoModelForSequenceClassification"),WEt.forEach(t),tOe.forEach(t),Kje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(H8.$$.fragment,Al),C3r=i(Al),lc=n(Al,"P",{});var qee=s(lc);w3r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=n(qee,"A",{href:!0});var QEt=s(QH);A3r=r(QEt,"from_pretrained()"),QEt.forEach(t),y3r=r(qee," class method or the "),HH=n(qee,"A",{href:!0});var HEt=s(HH);L3r=r(HEt,"from_config()"),HEt.forEach(t),x3r=r(qee,` class
method.`),qee.forEach(t),$3r=i(Al),U8=n(Al,"P",{});var aOe=s(U8);k3r=r(aOe,"This class cannot be instantiated directly using "),Hve=n(aOe,"CODE",{});var UEt=s(Hve);S3r=r(UEt,"__init__()"),UEt.forEach(t),R3r=r(aOe," (throws an error)."),aOe.forEach(t),P3r=i(Al),Pt=n(Al,"DIV",{class:!0});var W6=s(Pt);T(J8.$$.fragment,W6),B3r=i(W6),Uve=n(W6,"P",{});var JEt=s(Uve);I3r=r(JEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JEt.forEach(t),N3r=i(W6),ic=n(W6,"P",{});var jee=s(ic);q3r=r(jee,`Note:
Loading a model from its configuration file does `),Jve=n(jee,"STRONG",{});var YEt=s(Jve);j3r=r(YEt,"not"),YEt.forEach(t),D3r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(jee,"A",{href:!0});var KEt=s(UH);G3r=r(KEt,"from_pretrained()"),KEt.forEach(t),O3r=r(jee," to load the model weights."),jee.forEach(t),V3r=i(W6),T(S7.$$.fragment,W6),W6.forEach(t),X3r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(Y8.$$.fragment,yl),z3r=i(yl),Yve=n(yl,"P",{});var ZEt=s(Yve);W3r=r(ZEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZEt.forEach(t),Q3r=i(yl),nn=n(yl,"P",{});var Q6=s(nn);H3r=r(Q6,"The model class to instantiate is selected based on the "),Kve=n(Q6,"CODE",{});var eCt=s(Kve);U3r=r(eCt,"model_type"),eCt.forEach(t),J3r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Zve=n(Q6,"CODE",{});var oCt=s(Zve);Y3r=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),K3r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(Q6,"CODE",{});var rCt=s(e5e);Z3r=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),eFr=r(Q6,":"),Q6.forEach(t),oFr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);R7=n(ae,"LI",{});var oBe=s(R7);o5e=n(oBe,"STRONG",{});var tCt=s(o5e);rFr=r(tCt,"albert"),tCt.forEach(t),tFr=r(oBe," \u2014 "),JH=n(oBe,"A",{href:!0});var aCt=s(JH);aFr=r(aCt,"TFAlbertForSequenceClassification"),aCt.forEach(t),nFr=r(oBe," (ALBERT model)"),oBe.forEach(t),sFr=i(ae),P7=n(ae,"LI",{});var rBe=s(P7);r5e=n(rBe,"STRONG",{});var nCt=s(r5e);lFr=r(nCt,"bert"),nCt.forEach(t),iFr=r(rBe," \u2014 "),YH=n(rBe,"A",{href:!0});var sCt=s(YH);dFr=r(sCt,"TFBertForSequenceClassification"),sCt.forEach(t),cFr=r(rBe," (BERT model)"),rBe.forEach(t),fFr=i(ae),B7=n(ae,"LI",{});var tBe=s(B7);t5e=n(tBe,"STRONG",{});var lCt=s(t5e);mFr=r(lCt,"camembert"),lCt.forEach(t),gFr=r(tBe," \u2014 "),KH=n(tBe,"A",{href:!0});var iCt=s(KH);hFr=r(iCt,"TFCamembertForSequenceClassification"),iCt.forEach(t),pFr=r(tBe," (CamemBERT model)"),tBe.forEach(t),_Fr=i(ae),I7=n(ae,"LI",{});var aBe=s(I7);a5e=n(aBe,"STRONG",{});var dCt=s(a5e);uFr=r(dCt,"convbert"),dCt.forEach(t),bFr=r(aBe," \u2014 "),ZH=n(aBe,"A",{href:!0});var cCt=s(ZH);vFr=r(cCt,"TFConvBertForSequenceClassification"),cCt.forEach(t),FFr=r(aBe," (ConvBERT model)"),aBe.forEach(t),TFr=i(ae),N7=n(ae,"LI",{});var nBe=s(N7);n5e=n(nBe,"STRONG",{});var fCt=s(n5e);MFr=r(fCt,"ctrl"),fCt.forEach(t),EFr=r(nBe," \u2014 "),eU=n(nBe,"A",{href:!0});var mCt=s(eU);CFr=r(mCt,"TFCTRLForSequenceClassification"),mCt.forEach(t),wFr=r(nBe," (CTRL model)"),nBe.forEach(t),AFr=i(ae),q7=n(ae,"LI",{});var sBe=s(q7);s5e=n(sBe,"STRONG",{});var gCt=s(s5e);yFr=r(gCt,"deberta"),gCt.forEach(t),LFr=r(sBe," \u2014 "),oU=n(sBe,"A",{href:!0});var hCt=s(oU);xFr=r(hCt,"TFDebertaForSequenceClassification"),hCt.forEach(t),$Fr=r(sBe," (DeBERTa model)"),sBe.forEach(t),kFr=i(ae),j7=n(ae,"LI",{});var lBe=s(j7);l5e=n(lBe,"STRONG",{});var pCt=s(l5e);SFr=r(pCt,"deberta-v2"),pCt.forEach(t),RFr=r(lBe," \u2014 "),rU=n(lBe,"A",{href:!0});var _Ct=s(rU);PFr=r(_Ct,"TFDebertaV2ForSequenceClassification"),_Ct.forEach(t),BFr=r(lBe," (DeBERTa-v2 model)"),lBe.forEach(t),IFr=i(ae),D7=n(ae,"LI",{});var iBe=s(D7);i5e=n(iBe,"STRONG",{});var uCt=s(i5e);NFr=r(uCt,"distilbert"),uCt.forEach(t),qFr=r(iBe," \u2014 "),tU=n(iBe,"A",{href:!0});var bCt=s(tU);jFr=r(bCt,"TFDistilBertForSequenceClassification"),bCt.forEach(t),DFr=r(iBe," (DistilBERT model)"),iBe.forEach(t),GFr=i(ae),G7=n(ae,"LI",{});var dBe=s(G7);d5e=n(dBe,"STRONG",{});var vCt=s(d5e);OFr=r(vCt,"electra"),vCt.forEach(t),VFr=r(dBe," \u2014 "),aU=n(dBe,"A",{href:!0});var FCt=s(aU);XFr=r(FCt,"TFElectraForSequenceClassification"),FCt.forEach(t),zFr=r(dBe," (ELECTRA model)"),dBe.forEach(t),WFr=i(ae),O7=n(ae,"LI",{});var cBe=s(O7);c5e=n(cBe,"STRONG",{});var TCt=s(c5e);QFr=r(TCt,"flaubert"),TCt.forEach(t),HFr=r(cBe," \u2014 "),nU=n(cBe,"A",{href:!0});var MCt=s(nU);UFr=r(MCt,"TFFlaubertForSequenceClassification"),MCt.forEach(t),JFr=r(cBe," (FlauBERT model)"),cBe.forEach(t),YFr=i(ae),V7=n(ae,"LI",{});var fBe=s(V7);f5e=n(fBe,"STRONG",{});var ECt=s(f5e);KFr=r(ECt,"funnel"),ECt.forEach(t),ZFr=r(fBe," \u2014 "),sU=n(fBe,"A",{href:!0});var CCt=s(sU);eTr=r(CCt,"TFFunnelForSequenceClassification"),CCt.forEach(t),oTr=r(fBe," (Funnel Transformer model)"),fBe.forEach(t),rTr=i(ae),X7=n(ae,"LI",{});var mBe=s(X7);m5e=n(mBe,"STRONG",{});var wCt=s(m5e);tTr=r(wCt,"gpt2"),wCt.forEach(t),aTr=r(mBe," \u2014 "),lU=n(mBe,"A",{href:!0});var ACt=s(lU);nTr=r(ACt,"TFGPT2ForSequenceClassification"),ACt.forEach(t),sTr=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),lTr=i(ae),z7=n(ae,"LI",{});var gBe=s(z7);g5e=n(gBe,"STRONG",{});var yCt=s(g5e);iTr=r(yCt,"gptj"),yCt.forEach(t),dTr=r(gBe," \u2014 "),iU=n(gBe,"A",{href:!0});var LCt=s(iU);cTr=r(LCt,"TFGPTJForSequenceClassification"),LCt.forEach(t),fTr=r(gBe," (GPT-J model)"),gBe.forEach(t),mTr=i(ae),W7=n(ae,"LI",{});var hBe=s(W7);h5e=n(hBe,"STRONG",{});var xCt=s(h5e);gTr=r(xCt,"layoutlm"),xCt.forEach(t),hTr=r(hBe," \u2014 "),dU=n(hBe,"A",{href:!0});var $Ct=s(dU);pTr=r($Ct,"TFLayoutLMForSequenceClassification"),$Ct.forEach(t),_Tr=r(hBe," (LayoutLM model)"),hBe.forEach(t),uTr=i(ae),Q7=n(ae,"LI",{});var pBe=s(Q7);p5e=n(pBe,"STRONG",{});var kCt=s(p5e);bTr=r(kCt,"longformer"),kCt.forEach(t),vTr=r(pBe," \u2014 "),cU=n(pBe,"A",{href:!0});var SCt=s(cU);FTr=r(SCt,"TFLongformerForSequenceClassification"),SCt.forEach(t),TTr=r(pBe," (Longformer model)"),pBe.forEach(t),MTr=i(ae),H7=n(ae,"LI",{});var _Be=s(H7);_5e=n(_Be,"STRONG",{});var RCt=s(_5e);ETr=r(RCt,"mobilebert"),RCt.forEach(t),CTr=r(_Be," \u2014 "),fU=n(_Be,"A",{href:!0});var PCt=s(fU);wTr=r(PCt,"TFMobileBertForSequenceClassification"),PCt.forEach(t),ATr=r(_Be," (MobileBERT model)"),_Be.forEach(t),yTr=i(ae),U7=n(ae,"LI",{});var uBe=s(U7);u5e=n(uBe,"STRONG",{});var BCt=s(u5e);LTr=r(BCt,"mpnet"),BCt.forEach(t),xTr=r(uBe," \u2014 "),mU=n(uBe,"A",{href:!0});var ICt=s(mU);$Tr=r(ICt,"TFMPNetForSequenceClassification"),ICt.forEach(t),kTr=r(uBe," (MPNet model)"),uBe.forEach(t),STr=i(ae),J7=n(ae,"LI",{});var bBe=s(J7);b5e=n(bBe,"STRONG",{});var NCt=s(b5e);RTr=r(NCt,"openai-gpt"),NCt.forEach(t),PTr=r(bBe," \u2014 "),gU=n(bBe,"A",{href:!0});var qCt=s(gU);BTr=r(qCt,"TFOpenAIGPTForSequenceClassification"),qCt.forEach(t),ITr=r(bBe," (OpenAI GPT model)"),bBe.forEach(t),NTr=i(ae),Y7=n(ae,"LI",{});var vBe=s(Y7);v5e=n(vBe,"STRONG",{});var jCt=s(v5e);qTr=r(jCt,"rembert"),jCt.forEach(t),jTr=r(vBe," \u2014 "),hU=n(vBe,"A",{href:!0});var DCt=s(hU);DTr=r(DCt,"TFRemBertForSequenceClassification"),DCt.forEach(t),GTr=r(vBe," (RemBERT model)"),vBe.forEach(t),OTr=i(ae),K7=n(ae,"LI",{});var FBe=s(K7);F5e=n(FBe,"STRONG",{});var GCt=s(F5e);VTr=r(GCt,"roberta"),GCt.forEach(t),XTr=r(FBe," \u2014 "),pU=n(FBe,"A",{href:!0});var OCt=s(pU);zTr=r(OCt,"TFRobertaForSequenceClassification"),OCt.forEach(t),WTr=r(FBe," (RoBERTa model)"),FBe.forEach(t),QTr=i(ae),Z7=n(ae,"LI",{});var TBe=s(Z7);T5e=n(TBe,"STRONG",{});var VCt=s(T5e);HTr=r(VCt,"roformer"),VCt.forEach(t),UTr=r(TBe," \u2014 "),_U=n(TBe,"A",{href:!0});var XCt=s(_U);JTr=r(XCt,"TFRoFormerForSequenceClassification"),XCt.forEach(t),YTr=r(TBe," (RoFormer model)"),TBe.forEach(t),KTr=i(ae),eM=n(ae,"LI",{});var MBe=s(eM);M5e=n(MBe,"STRONG",{});var zCt=s(M5e);ZTr=r(zCt,"tapas"),zCt.forEach(t),e7r=r(MBe," \u2014 "),uU=n(MBe,"A",{href:!0});var WCt=s(uU);o7r=r(WCt,"TFTapasForSequenceClassification"),WCt.forEach(t),r7r=r(MBe," (TAPAS model)"),MBe.forEach(t),t7r=i(ae),oM=n(ae,"LI",{});var EBe=s(oM);E5e=n(EBe,"STRONG",{});var QCt=s(E5e);a7r=r(QCt,"transfo-xl"),QCt.forEach(t),n7r=r(EBe," \u2014 "),bU=n(EBe,"A",{href:!0});var HCt=s(bU);s7r=r(HCt,"TFTransfoXLForSequenceClassification"),HCt.forEach(t),l7r=r(EBe," (Transformer-XL model)"),EBe.forEach(t),i7r=i(ae),rM=n(ae,"LI",{});var CBe=s(rM);C5e=n(CBe,"STRONG",{});var UCt=s(C5e);d7r=r(UCt,"xlm"),UCt.forEach(t),c7r=r(CBe," \u2014 "),vU=n(CBe,"A",{href:!0});var JCt=s(vU);f7r=r(JCt,"TFXLMForSequenceClassification"),JCt.forEach(t),m7r=r(CBe," (XLM model)"),CBe.forEach(t),g7r=i(ae),tM=n(ae,"LI",{});var wBe=s(tM);w5e=n(wBe,"STRONG",{});var YCt=s(w5e);h7r=r(YCt,"xlm-roberta"),YCt.forEach(t),p7r=r(wBe," \u2014 "),FU=n(wBe,"A",{href:!0});var KCt=s(FU);_7r=r(KCt,"TFXLMRobertaForSequenceClassification"),KCt.forEach(t),u7r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),b7r=i(ae),aM=n(ae,"LI",{});var ABe=s(aM);A5e=n(ABe,"STRONG",{});var ZCt=s(A5e);v7r=r(ZCt,"xlnet"),ZCt.forEach(t),F7r=r(ABe," \u2014 "),TU=n(ABe,"A",{href:!0});var e0t=s(TU);T7r=r(e0t,"TFXLNetForSequenceClassification"),e0t.forEach(t),M7r=r(ABe," (XLNet model)"),ABe.forEach(t),ae.forEach(t),E7r=i(yl),T(nM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Zje=i(f),dc=n(f,"H2",{class:!0});var nOe=s(dc);sM=n(nOe,"A",{id:!0,class:!0,href:!0});var o0t=s(sM);y5e=n(o0t,"SPAN",{});var r0t=s(y5e);T(K8.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),C7r=i(nOe),L5e=n(nOe,"SPAN",{});var t0t=s(L5e);w7r=r(t0t,"TFAutoModelForMultipleChoice"),t0t.forEach(t),nOe.forEach(t),eDe=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(Z8.$$.fragment,Ll),A7r=i(Ll),cc=n(Ll,"P",{});var Dee=s(cc);y7r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=n(Dee,"A",{href:!0});var a0t=s(MU);L7r=r(a0t,"from_pretrained()"),a0t.forEach(t),x7r=r(Dee," class method or the "),EU=n(Dee,"A",{href:!0});var n0t=s(EU);$7r=r(n0t,"from_config()"),n0t.forEach(t),k7r=r(Dee,` class
method.`),Dee.forEach(t),S7r=i(Ll),e9=n(Ll,"P",{});var sOe=s(e9);R7r=r(sOe,"This class cannot be instantiated directly using "),x5e=n(sOe,"CODE",{});var s0t=s(x5e);P7r=r(s0t,"__init__()"),s0t.forEach(t),B7r=r(sOe," (throws an error)."),sOe.forEach(t),I7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var H6=s(Bt);T(o9.$$.fragment,H6),N7r=i(H6),$5e=n(H6,"P",{});var l0t=s($5e);q7r=r(l0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l0t.forEach(t),j7r=i(H6),fc=n(H6,"P",{});var Gee=s(fc);D7r=r(Gee,`Note:
Loading a model from its configuration file does `),k5e=n(Gee,"STRONG",{});var i0t=s(k5e);G7r=r(i0t,"not"),i0t.forEach(t),O7r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Gee,"A",{href:!0});var d0t=s(CU);V7r=r(d0t,"from_pretrained()"),d0t.forEach(t),X7r=r(Gee," to load the model weights."),Gee.forEach(t),z7r=i(H6),T(lM.$$.fragment,H6),H6.forEach(t),W7r=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(r9.$$.fragment,xl),Q7r=i(xl),S5e=n(xl,"P",{});var c0t=s(S5e);H7r=r(c0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c0t.forEach(t),U7r=i(xl),sn=n(xl,"P",{});var U6=s(sn);J7r=r(U6,"The model class to instantiate is selected based on the "),R5e=n(U6,"CODE",{});var f0t=s(R5e);Y7r=r(f0t,"model_type"),f0t.forEach(t),K7r=r(U6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(U6,"CODE",{});var m0t=s(P5e);Z7r=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),eMr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(U6,"CODE",{});var g0t=s(B5e);oMr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),rMr=r(U6,":"),U6.forEach(t),tMr=i(xl),pe=n(xl,"UL",{});var be=s(pe);iM=n(be,"LI",{});var yBe=s(iM);I5e=n(yBe,"STRONG",{});var h0t=s(I5e);aMr=r(h0t,"albert"),h0t.forEach(t),nMr=r(yBe," \u2014 "),wU=n(yBe,"A",{href:!0});var p0t=s(wU);sMr=r(p0t,"TFAlbertForMultipleChoice"),p0t.forEach(t),lMr=r(yBe," (ALBERT model)"),yBe.forEach(t),iMr=i(be),dM=n(be,"LI",{});var LBe=s(dM);N5e=n(LBe,"STRONG",{});var _0t=s(N5e);dMr=r(_0t,"bert"),_0t.forEach(t),cMr=r(LBe," \u2014 "),AU=n(LBe,"A",{href:!0});var u0t=s(AU);fMr=r(u0t,"TFBertForMultipleChoice"),u0t.forEach(t),mMr=r(LBe," (BERT model)"),LBe.forEach(t),gMr=i(be),cM=n(be,"LI",{});var xBe=s(cM);q5e=n(xBe,"STRONG",{});var b0t=s(q5e);hMr=r(b0t,"camembert"),b0t.forEach(t),pMr=r(xBe," \u2014 "),yU=n(xBe,"A",{href:!0});var v0t=s(yU);_Mr=r(v0t,"TFCamembertForMultipleChoice"),v0t.forEach(t),uMr=r(xBe," (CamemBERT model)"),xBe.forEach(t),bMr=i(be),fM=n(be,"LI",{});var $Be=s(fM);j5e=n($Be,"STRONG",{});var F0t=s(j5e);vMr=r(F0t,"convbert"),F0t.forEach(t),FMr=r($Be," \u2014 "),LU=n($Be,"A",{href:!0});var T0t=s(LU);TMr=r(T0t,"TFConvBertForMultipleChoice"),T0t.forEach(t),MMr=r($Be," (ConvBERT model)"),$Be.forEach(t),EMr=i(be),mM=n(be,"LI",{});var kBe=s(mM);D5e=n(kBe,"STRONG",{});var M0t=s(D5e);CMr=r(M0t,"distilbert"),M0t.forEach(t),wMr=r(kBe," \u2014 "),xU=n(kBe,"A",{href:!0});var E0t=s(xU);AMr=r(E0t,"TFDistilBertForMultipleChoice"),E0t.forEach(t),yMr=r(kBe," (DistilBERT model)"),kBe.forEach(t),LMr=i(be),gM=n(be,"LI",{});var SBe=s(gM);G5e=n(SBe,"STRONG",{});var C0t=s(G5e);xMr=r(C0t,"electra"),C0t.forEach(t),$Mr=r(SBe," \u2014 "),$U=n(SBe,"A",{href:!0});var w0t=s($U);kMr=r(w0t,"TFElectraForMultipleChoice"),w0t.forEach(t),SMr=r(SBe," (ELECTRA model)"),SBe.forEach(t),RMr=i(be),hM=n(be,"LI",{});var RBe=s(hM);O5e=n(RBe,"STRONG",{});var A0t=s(O5e);PMr=r(A0t,"flaubert"),A0t.forEach(t),BMr=r(RBe," \u2014 "),kU=n(RBe,"A",{href:!0});var y0t=s(kU);IMr=r(y0t,"TFFlaubertForMultipleChoice"),y0t.forEach(t),NMr=r(RBe," (FlauBERT model)"),RBe.forEach(t),qMr=i(be),pM=n(be,"LI",{});var PBe=s(pM);V5e=n(PBe,"STRONG",{});var L0t=s(V5e);jMr=r(L0t,"funnel"),L0t.forEach(t),DMr=r(PBe," \u2014 "),SU=n(PBe,"A",{href:!0});var x0t=s(SU);GMr=r(x0t,"TFFunnelForMultipleChoice"),x0t.forEach(t),OMr=r(PBe," (Funnel Transformer model)"),PBe.forEach(t),VMr=i(be),_M=n(be,"LI",{});var BBe=s(_M);X5e=n(BBe,"STRONG",{});var $0t=s(X5e);XMr=r($0t,"longformer"),$0t.forEach(t),zMr=r(BBe," \u2014 "),RU=n(BBe,"A",{href:!0});var k0t=s(RU);WMr=r(k0t,"TFLongformerForMultipleChoice"),k0t.forEach(t),QMr=r(BBe," (Longformer model)"),BBe.forEach(t),HMr=i(be),uM=n(be,"LI",{});var IBe=s(uM);z5e=n(IBe,"STRONG",{});var S0t=s(z5e);UMr=r(S0t,"mobilebert"),S0t.forEach(t),JMr=r(IBe," \u2014 "),PU=n(IBe,"A",{href:!0});var R0t=s(PU);YMr=r(R0t,"TFMobileBertForMultipleChoice"),R0t.forEach(t),KMr=r(IBe," (MobileBERT model)"),IBe.forEach(t),ZMr=i(be),bM=n(be,"LI",{});var NBe=s(bM);W5e=n(NBe,"STRONG",{});var P0t=s(W5e);eEr=r(P0t,"mpnet"),P0t.forEach(t),oEr=r(NBe," \u2014 "),BU=n(NBe,"A",{href:!0});var B0t=s(BU);rEr=r(B0t,"TFMPNetForMultipleChoice"),B0t.forEach(t),tEr=r(NBe," (MPNet model)"),NBe.forEach(t),aEr=i(be),vM=n(be,"LI",{});var qBe=s(vM);Q5e=n(qBe,"STRONG",{});var I0t=s(Q5e);nEr=r(I0t,"rembert"),I0t.forEach(t),sEr=r(qBe," \u2014 "),IU=n(qBe,"A",{href:!0});var N0t=s(IU);lEr=r(N0t,"TFRemBertForMultipleChoice"),N0t.forEach(t),iEr=r(qBe," (RemBERT model)"),qBe.forEach(t),dEr=i(be),FM=n(be,"LI",{});var jBe=s(FM);H5e=n(jBe,"STRONG",{});var q0t=s(H5e);cEr=r(q0t,"roberta"),q0t.forEach(t),fEr=r(jBe," \u2014 "),NU=n(jBe,"A",{href:!0});var j0t=s(NU);mEr=r(j0t,"TFRobertaForMultipleChoice"),j0t.forEach(t),gEr=r(jBe," (RoBERTa model)"),jBe.forEach(t),hEr=i(be),TM=n(be,"LI",{});var DBe=s(TM);U5e=n(DBe,"STRONG",{});var D0t=s(U5e);pEr=r(D0t,"roformer"),D0t.forEach(t),_Er=r(DBe," \u2014 "),qU=n(DBe,"A",{href:!0});var G0t=s(qU);uEr=r(G0t,"TFRoFormerForMultipleChoice"),G0t.forEach(t),bEr=r(DBe," (RoFormer model)"),DBe.forEach(t),vEr=i(be),MM=n(be,"LI",{});var GBe=s(MM);J5e=n(GBe,"STRONG",{});var O0t=s(J5e);FEr=r(O0t,"xlm"),O0t.forEach(t),TEr=r(GBe," \u2014 "),jU=n(GBe,"A",{href:!0});var V0t=s(jU);MEr=r(V0t,"TFXLMForMultipleChoice"),V0t.forEach(t),EEr=r(GBe," (XLM model)"),GBe.forEach(t),CEr=i(be),EM=n(be,"LI",{});var OBe=s(EM);Y5e=n(OBe,"STRONG",{});var X0t=s(Y5e);wEr=r(X0t,"xlm-roberta"),X0t.forEach(t),AEr=r(OBe," \u2014 "),DU=n(OBe,"A",{href:!0});var z0t=s(DU);yEr=r(z0t,"TFXLMRobertaForMultipleChoice"),z0t.forEach(t),LEr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),xEr=i(be),CM=n(be,"LI",{});var VBe=s(CM);K5e=n(VBe,"STRONG",{});var W0t=s(K5e);$Er=r(W0t,"xlnet"),W0t.forEach(t),kEr=r(VBe," \u2014 "),GU=n(VBe,"A",{href:!0});var Q0t=s(GU);SEr=r(Q0t,"TFXLNetForMultipleChoice"),Q0t.forEach(t),REr=r(VBe," (XLNet model)"),VBe.forEach(t),be.forEach(t),PEr=i(xl),T(wM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),oDe=i(f),mc=n(f,"H2",{class:!0});var lOe=s(mc);AM=n(lOe,"A",{id:!0,class:!0,href:!0});var H0t=s(AM);Z5e=n(H0t,"SPAN",{});var U0t=s(Z5e);T(t9.$$.fragment,U0t),U0t.forEach(t),H0t.forEach(t),BEr=i(lOe),e3e=n(lOe,"SPAN",{});var J0t=s(e3e);IEr=r(J0t,"TFAutoModelForNextSentencePrediction"),J0t.forEach(t),lOe.forEach(t),rDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(a9.$$.fragment,$l),NEr=i($l),gc=n($l,"P",{});var Oee=s(gc);qEr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=n(Oee,"A",{href:!0});var Y0t=s(OU);jEr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),DEr=r(Oee," class method or the "),VU=n(Oee,"A",{href:!0});var K0t=s(VU);GEr=r(K0t,"from_config()"),K0t.forEach(t),OEr=r(Oee,` class
method.`),Oee.forEach(t),VEr=i($l),n9=n($l,"P",{});var iOe=s(n9);XEr=r(iOe,"This class cannot be instantiated directly using "),o3e=n(iOe,"CODE",{});var Z0t=s(o3e);zEr=r(Z0t,"__init__()"),Z0t.forEach(t),WEr=r(iOe," (throws an error)."),iOe.forEach(t),QEr=i($l),It=n($l,"DIV",{class:!0});var J6=s(It);T(s9.$$.fragment,J6),HEr=i(J6),r3e=n(J6,"P",{});var ewt=s(r3e);UEr=r(ewt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ewt.forEach(t),JEr=i(J6),hc=n(J6,"P",{});var Vee=s(hc);YEr=r(Vee,`Note:
Loading a model from its configuration file does `),t3e=n(Vee,"STRONG",{});var owt=s(t3e);KEr=r(owt,"not"),owt.forEach(t),ZEr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(Vee,"A",{href:!0});var rwt=s(XU);eCr=r(rwt,"from_pretrained()"),rwt.forEach(t),oCr=r(Vee," to load the model weights."),Vee.forEach(t),rCr=i(J6),T(yM.$$.fragment,J6),J6.forEach(t),tCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(l9.$$.fragment,kl),aCr=i(kl),a3e=n(kl,"P",{});var twt=s(a3e);nCr=r(twt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),twt.forEach(t),sCr=i(kl),ln=n(kl,"P",{});var Y6=s(ln);lCr=r(Y6,"The model class to instantiate is selected based on the "),n3e=n(Y6,"CODE",{});var awt=s(n3e);iCr=r(awt,"model_type"),awt.forEach(t),dCr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),s3e=n(Y6,"CODE",{});var nwt=s(s3e);cCr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),fCr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(Y6,"CODE",{});var swt=s(l3e);mCr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),gCr=r(Y6,":"),Y6.forEach(t),hCr=i(kl),i9=n(kl,"UL",{});var dOe=s(i9);LM=n(dOe,"LI",{});var XBe=s(LM);i3e=n(XBe,"STRONG",{});var lwt=s(i3e);pCr=r(lwt,"bert"),lwt.forEach(t),_Cr=r(XBe," \u2014 "),zU=n(XBe,"A",{href:!0});var iwt=s(zU);uCr=r(iwt,"TFBertForNextSentencePrediction"),iwt.forEach(t),bCr=r(XBe," (BERT model)"),XBe.forEach(t),vCr=i(dOe),xM=n(dOe,"LI",{});var zBe=s(xM);d3e=n(zBe,"STRONG",{});var dwt=s(d3e);FCr=r(dwt,"mobilebert"),dwt.forEach(t),TCr=r(zBe," \u2014 "),WU=n(zBe,"A",{href:!0});var cwt=s(WU);MCr=r(cwt,"TFMobileBertForNextSentencePrediction"),cwt.forEach(t),ECr=r(zBe," (MobileBERT model)"),zBe.forEach(t),dOe.forEach(t),CCr=i(kl),T($M.$$.fragment,kl),kl.forEach(t),$l.forEach(t),tDe=i(f),pc=n(f,"H2",{class:!0});var cOe=s(pc);kM=n(cOe,"A",{id:!0,class:!0,href:!0});var fwt=s(kM);c3e=n(fwt,"SPAN",{});var mwt=s(c3e);T(d9.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),wCr=i(cOe),f3e=n(cOe,"SPAN",{});var gwt=s(f3e);ACr=r(gwt,"TFAutoModelForTableQuestionAnswering"),gwt.forEach(t),cOe.forEach(t),aDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(c9.$$.fragment,Sl),yCr=i(Sl),_c=n(Sl,"P",{});var Xee=s(_c);LCr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=n(Xee,"A",{href:!0});var hwt=s(QU);xCr=r(hwt,"from_pretrained()"),hwt.forEach(t),$Cr=r(Xee," class method or the "),HU=n(Xee,"A",{href:!0});var pwt=s(HU);kCr=r(pwt,"from_config()"),pwt.forEach(t),SCr=r(Xee,` class
method.`),Xee.forEach(t),RCr=i(Sl),f9=n(Sl,"P",{});var fOe=s(f9);PCr=r(fOe,"This class cannot be instantiated directly using "),m3e=n(fOe,"CODE",{});var _wt=s(m3e);BCr=r(_wt,"__init__()"),_wt.forEach(t),ICr=r(fOe," (throws an error)."),fOe.forEach(t),NCr=i(Sl),Nt=n(Sl,"DIV",{class:!0});var K6=s(Nt);T(m9.$$.fragment,K6),qCr=i(K6),g3e=n(K6,"P",{});var uwt=s(g3e);jCr=r(uwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uwt.forEach(t),DCr=i(K6),uc=n(K6,"P",{});var zee=s(uc);GCr=r(zee,`Note:
Loading a model from its configuration file does `),h3e=n(zee,"STRONG",{});var bwt=s(h3e);OCr=r(bwt,"not"),bwt.forEach(t),VCr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(zee,"A",{href:!0});var vwt=s(UU);XCr=r(vwt,"from_pretrained()"),vwt.forEach(t),zCr=r(zee," to load the model weights."),zee.forEach(t),WCr=i(K6),T(SM.$$.fragment,K6),K6.forEach(t),QCr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(g9.$$.fragment,Rl),HCr=i(Rl),p3e=n(Rl,"P",{});var Fwt=s(p3e);UCr=r(Fwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fwt.forEach(t),JCr=i(Rl),dn=n(Rl,"P",{});var Z6=s(dn);YCr=r(Z6,"The model class to instantiate is selected based on the "),_3e=n(Z6,"CODE",{});var Twt=s(_3e);KCr=r(Twt,"model_type"),Twt.forEach(t),ZCr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),u3e=n(Z6,"CODE",{});var Mwt=s(u3e);e0r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),o0r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(Z6,"CODE",{});var Ewt=s(b3e);r0r=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),t0r=r(Z6,":"),Z6.forEach(t),a0r=i(Rl),v3e=n(Rl,"UL",{});var Cwt=s(v3e);RM=n(Cwt,"LI",{});var WBe=s(RM);F3e=n(WBe,"STRONG",{});var wwt=s(F3e);n0r=r(wwt,"tapas"),wwt.forEach(t),s0r=r(WBe," \u2014 "),JU=n(WBe,"A",{href:!0});var Awt=s(JU);l0r=r(Awt,"TFTapasForQuestionAnswering"),Awt.forEach(t),i0r=r(WBe," (TAPAS model)"),WBe.forEach(t),Cwt.forEach(t),d0r=i(Rl),T(PM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),nDe=i(f),bc=n(f,"H2",{class:!0});var mOe=s(bc);BM=n(mOe,"A",{id:!0,class:!0,href:!0});var ywt=s(BM);T3e=n(ywt,"SPAN",{});var Lwt=s(T3e);T(h9.$$.fragment,Lwt),Lwt.forEach(t),ywt.forEach(t),c0r=i(mOe),M3e=n(mOe,"SPAN",{});var xwt=s(M3e);f0r=r(xwt,"TFAutoModelForTokenClassification"),xwt.forEach(t),mOe.forEach(t),sDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(p9.$$.fragment,Pl),m0r=i(Pl),vc=n(Pl,"P",{});var Wee=s(vc);g0r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=n(Wee,"A",{href:!0});var $wt=s(YU);h0r=r($wt,"from_pretrained()"),$wt.forEach(t),p0r=r(Wee," class method or the "),KU=n(Wee,"A",{href:!0});var kwt=s(KU);_0r=r(kwt,"from_config()"),kwt.forEach(t),u0r=r(Wee,` class
method.`),Wee.forEach(t),b0r=i(Pl),_9=n(Pl,"P",{});var gOe=s(_9);v0r=r(gOe,"This class cannot be instantiated directly using "),E3e=n(gOe,"CODE",{});var Swt=s(E3e);F0r=r(Swt,"__init__()"),Swt.forEach(t),T0r=r(gOe," (throws an error)."),gOe.forEach(t),M0r=i(Pl),qt=n(Pl,"DIV",{class:!0});var eA=s(qt);T(u9.$$.fragment,eA),E0r=i(eA),C3e=n(eA,"P",{});var Rwt=s(C3e);C0r=r(Rwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rwt.forEach(t),w0r=i(eA),Fc=n(eA,"P",{});var Qee=s(Fc);A0r=r(Qee,`Note:
Loading a model from its configuration file does `),w3e=n(Qee,"STRONG",{});var Pwt=s(w3e);y0r=r(Pwt,"not"),Pwt.forEach(t),L0r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(Qee,"A",{href:!0});var Bwt=s(ZU);x0r=r(Bwt,"from_pretrained()"),Bwt.forEach(t),$0r=r(Qee," to load the model weights."),Qee.forEach(t),k0r=i(eA),T(IM.$$.fragment,eA),eA.forEach(t),S0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(b9.$$.fragment,Bl),R0r=i(Bl),A3e=n(Bl,"P",{});var Iwt=s(A3e);P0r=r(Iwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iwt.forEach(t),B0r=i(Bl),cn=n(Bl,"P",{});var oA=s(cn);I0r=r(oA,"The model class to instantiate is selected based on the "),y3e=n(oA,"CODE",{});var Nwt=s(y3e);N0r=r(Nwt,"model_type"),Nwt.forEach(t),q0r=r(oA,` property of the config object (either
passed as an argument or loaded from `),L3e=n(oA,"CODE",{});var qwt=s(L3e);j0r=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),D0r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(oA,"CODE",{});var jwt=s(x3e);G0r=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),O0r=r(oA,":"),oA.forEach(t),V0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);NM=n(me,"LI",{});var QBe=s(NM);$3e=n(QBe,"STRONG",{});var Dwt=s($3e);X0r=r(Dwt,"albert"),Dwt.forEach(t),z0r=r(QBe," \u2014 "),eJ=n(QBe,"A",{href:!0});var Gwt=s(eJ);W0r=r(Gwt,"TFAlbertForTokenClassification"),Gwt.forEach(t),Q0r=r(QBe," (ALBERT model)"),QBe.forEach(t),H0r=i(me),qM=n(me,"LI",{});var HBe=s(qM);k3e=n(HBe,"STRONG",{});var Owt=s(k3e);U0r=r(Owt,"bert"),Owt.forEach(t),J0r=r(HBe," \u2014 "),oJ=n(HBe,"A",{href:!0});var Vwt=s(oJ);Y0r=r(Vwt,"TFBertForTokenClassification"),Vwt.forEach(t),K0r=r(HBe," (BERT model)"),HBe.forEach(t),Z0r=i(me),jM=n(me,"LI",{});var UBe=s(jM);S3e=n(UBe,"STRONG",{});var Xwt=s(S3e);ewr=r(Xwt,"camembert"),Xwt.forEach(t),owr=r(UBe," \u2014 "),rJ=n(UBe,"A",{href:!0});var zwt=s(rJ);rwr=r(zwt,"TFCamembertForTokenClassification"),zwt.forEach(t),twr=r(UBe," (CamemBERT model)"),UBe.forEach(t),awr=i(me),DM=n(me,"LI",{});var JBe=s(DM);R3e=n(JBe,"STRONG",{});var Wwt=s(R3e);nwr=r(Wwt,"convbert"),Wwt.forEach(t),swr=r(JBe," \u2014 "),tJ=n(JBe,"A",{href:!0});var Qwt=s(tJ);lwr=r(Qwt,"TFConvBertForTokenClassification"),Qwt.forEach(t),iwr=r(JBe," (ConvBERT model)"),JBe.forEach(t),dwr=i(me),GM=n(me,"LI",{});var YBe=s(GM);P3e=n(YBe,"STRONG",{});var Hwt=s(P3e);cwr=r(Hwt,"deberta"),Hwt.forEach(t),fwr=r(YBe," \u2014 "),aJ=n(YBe,"A",{href:!0});var Uwt=s(aJ);mwr=r(Uwt,"TFDebertaForTokenClassification"),Uwt.forEach(t),gwr=r(YBe," (DeBERTa model)"),YBe.forEach(t),hwr=i(me),OM=n(me,"LI",{});var KBe=s(OM);B3e=n(KBe,"STRONG",{});var Jwt=s(B3e);pwr=r(Jwt,"deberta-v2"),Jwt.forEach(t),_wr=r(KBe," \u2014 "),nJ=n(KBe,"A",{href:!0});var Ywt=s(nJ);uwr=r(Ywt,"TFDebertaV2ForTokenClassification"),Ywt.forEach(t),bwr=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),vwr=i(me),VM=n(me,"LI",{});var ZBe=s(VM);I3e=n(ZBe,"STRONG",{});var Kwt=s(I3e);Fwr=r(Kwt,"distilbert"),Kwt.forEach(t),Twr=r(ZBe," \u2014 "),sJ=n(ZBe,"A",{href:!0});var Zwt=s(sJ);Mwr=r(Zwt,"TFDistilBertForTokenClassification"),Zwt.forEach(t),Ewr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),Cwr=i(me),XM=n(me,"LI",{});var eIe=s(XM);N3e=n(eIe,"STRONG",{});var e6t=s(N3e);wwr=r(e6t,"electra"),e6t.forEach(t),Awr=r(eIe," \u2014 "),lJ=n(eIe,"A",{href:!0});var o6t=s(lJ);ywr=r(o6t,"TFElectraForTokenClassification"),o6t.forEach(t),Lwr=r(eIe," (ELECTRA model)"),eIe.forEach(t),xwr=i(me),zM=n(me,"LI",{});var oIe=s(zM);q3e=n(oIe,"STRONG",{});var r6t=s(q3e);$wr=r(r6t,"flaubert"),r6t.forEach(t),kwr=r(oIe," \u2014 "),iJ=n(oIe,"A",{href:!0});var t6t=s(iJ);Swr=r(t6t,"TFFlaubertForTokenClassification"),t6t.forEach(t),Rwr=r(oIe," (FlauBERT model)"),oIe.forEach(t),Pwr=i(me),WM=n(me,"LI",{});var rIe=s(WM);j3e=n(rIe,"STRONG",{});var a6t=s(j3e);Bwr=r(a6t,"funnel"),a6t.forEach(t),Iwr=r(rIe," \u2014 "),dJ=n(rIe,"A",{href:!0});var n6t=s(dJ);Nwr=r(n6t,"TFFunnelForTokenClassification"),n6t.forEach(t),qwr=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),jwr=i(me),QM=n(me,"LI",{});var tIe=s(QM);D3e=n(tIe,"STRONG",{});var s6t=s(D3e);Dwr=r(s6t,"layoutlm"),s6t.forEach(t),Gwr=r(tIe," \u2014 "),cJ=n(tIe,"A",{href:!0});var l6t=s(cJ);Owr=r(l6t,"TFLayoutLMForTokenClassification"),l6t.forEach(t),Vwr=r(tIe," (LayoutLM model)"),tIe.forEach(t),Xwr=i(me),HM=n(me,"LI",{});var aIe=s(HM);G3e=n(aIe,"STRONG",{});var i6t=s(G3e);zwr=r(i6t,"longformer"),i6t.forEach(t),Wwr=r(aIe," \u2014 "),fJ=n(aIe,"A",{href:!0});var d6t=s(fJ);Qwr=r(d6t,"TFLongformerForTokenClassification"),d6t.forEach(t),Hwr=r(aIe," (Longformer model)"),aIe.forEach(t),Uwr=i(me),UM=n(me,"LI",{});var nIe=s(UM);O3e=n(nIe,"STRONG",{});var c6t=s(O3e);Jwr=r(c6t,"mobilebert"),c6t.forEach(t),Ywr=r(nIe," \u2014 "),mJ=n(nIe,"A",{href:!0});var f6t=s(mJ);Kwr=r(f6t,"TFMobileBertForTokenClassification"),f6t.forEach(t),Zwr=r(nIe," (MobileBERT model)"),nIe.forEach(t),e6r=i(me),JM=n(me,"LI",{});var sIe=s(JM);V3e=n(sIe,"STRONG",{});var m6t=s(V3e);o6r=r(m6t,"mpnet"),m6t.forEach(t),r6r=r(sIe," \u2014 "),gJ=n(sIe,"A",{href:!0});var g6t=s(gJ);t6r=r(g6t,"TFMPNetForTokenClassification"),g6t.forEach(t),a6r=r(sIe," (MPNet model)"),sIe.forEach(t),n6r=i(me),YM=n(me,"LI",{});var lIe=s(YM);X3e=n(lIe,"STRONG",{});var h6t=s(X3e);s6r=r(h6t,"rembert"),h6t.forEach(t),l6r=r(lIe," \u2014 "),hJ=n(lIe,"A",{href:!0});var p6t=s(hJ);i6r=r(p6t,"TFRemBertForTokenClassification"),p6t.forEach(t),d6r=r(lIe," (RemBERT model)"),lIe.forEach(t),c6r=i(me),KM=n(me,"LI",{});var iIe=s(KM);z3e=n(iIe,"STRONG",{});var _6t=s(z3e);f6r=r(_6t,"roberta"),_6t.forEach(t),m6r=r(iIe," \u2014 "),pJ=n(iIe,"A",{href:!0});var u6t=s(pJ);g6r=r(u6t,"TFRobertaForTokenClassification"),u6t.forEach(t),h6r=r(iIe," (RoBERTa model)"),iIe.forEach(t),p6r=i(me),ZM=n(me,"LI",{});var dIe=s(ZM);W3e=n(dIe,"STRONG",{});var b6t=s(W3e);_6r=r(b6t,"roformer"),b6t.forEach(t),u6r=r(dIe," \u2014 "),_J=n(dIe,"A",{href:!0});var v6t=s(_J);b6r=r(v6t,"TFRoFormerForTokenClassification"),v6t.forEach(t),v6r=r(dIe," (RoFormer model)"),dIe.forEach(t),F6r=i(me),eE=n(me,"LI",{});var cIe=s(eE);Q3e=n(cIe,"STRONG",{});var F6t=s(Q3e);T6r=r(F6t,"xlm"),F6t.forEach(t),M6r=r(cIe," \u2014 "),uJ=n(cIe,"A",{href:!0});var T6t=s(uJ);E6r=r(T6t,"TFXLMForTokenClassification"),T6t.forEach(t),C6r=r(cIe," (XLM model)"),cIe.forEach(t),w6r=i(me),oE=n(me,"LI",{});var fIe=s(oE);H3e=n(fIe,"STRONG",{});var M6t=s(H3e);A6r=r(M6t,"xlm-roberta"),M6t.forEach(t),y6r=r(fIe," \u2014 "),bJ=n(fIe,"A",{href:!0});var E6t=s(bJ);L6r=r(E6t,"TFXLMRobertaForTokenClassification"),E6t.forEach(t),x6r=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),$6r=i(me),rE=n(me,"LI",{});var mIe=s(rE);U3e=n(mIe,"STRONG",{});var C6t=s(U3e);k6r=r(C6t,"xlnet"),C6t.forEach(t),S6r=r(mIe," \u2014 "),vJ=n(mIe,"A",{href:!0});var w6t=s(vJ);R6r=r(w6t,"TFXLNetForTokenClassification"),w6t.forEach(t),P6r=r(mIe," (XLNet model)"),mIe.forEach(t),me.forEach(t),B6r=i(Bl),T(tE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),lDe=i(f),Tc=n(f,"H2",{class:!0});var hOe=s(Tc);aE=n(hOe,"A",{id:!0,class:!0,href:!0});var A6t=s(aE);J3e=n(A6t,"SPAN",{});var y6t=s(J3e);T(v9.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),I6r=i(hOe),Y3e=n(hOe,"SPAN",{});var L6t=s(Y3e);N6r=r(L6t,"TFAutoModelForQuestionAnswering"),L6t.forEach(t),hOe.forEach(t),iDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(F9.$$.fragment,Il),q6r=i(Il),Mc=n(Il,"P",{});var Hee=s(Mc);j6r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=n(Hee,"A",{href:!0});var x6t=s(FJ);D6r=r(x6t,"from_pretrained()"),x6t.forEach(t),G6r=r(Hee," class method or the "),TJ=n(Hee,"A",{href:!0});var $6t=s(TJ);O6r=r($6t,"from_config()"),$6t.forEach(t),V6r=r(Hee,` class
method.`),Hee.forEach(t),X6r=i(Il),T9=n(Il,"P",{});var pOe=s(T9);z6r=r(pOe,"This class cannot be instantiated directly using "),K3e=n(pOe,"CODE",{});var k6t=s(K3e);W6r=r(k6t,"__init__()"),k6t.forEach(t),Q6r=r(pOe," (throws an error)."),pOe.forEach(t),H6r=i(Il),jt=n(Il,"DIV",{class:!0});var rA=s(jt);T(M9.$$.fragment,rA),U6r=i(rA),Z3e=n(rA,"P",{});var S6t=s(Z3e);J6r=r(S6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S6t.forEach(t),Y6r=i(rA),Ec=n(rA,"P",{});var Uee=s(Ec);K6r=r(Uee,`Note:
Loading a model from its configuration file does `),eFe=n(Uee,"STRONG",{});var R6t=s(eFe);Z6r=r(R6t,"not"),R6t.forEach(t),eAr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Uee,"A",{href:!0});var P6t=s(MJ);oAr=r(P6t,"from_pretrained()"),P6t.forEach(t),rAr=r(Uee," to load the model weights."),Uee.forEach(t),tAr=i(rA),T(nE.$$.fragment,rA),rA.forEach(t),aAr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(E9.$$.fragment,Nl),nAr=i(Nl),oFe=n(Nl,"P",{});var B6t=s(oFe);sAr=r(B6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B6t.forEach(t),lAr=i(Nl),fn=n(Nl,"P",{});var tA=s(fn);iAr=r(tA,"The model class to instantiate is selected based on the "),rFe=n(tA,"CODE",{});var I6t=s(rFe);dAr=r(I6t,"model_type"),I6t.forEach(t),cAr=r(tA,` property of the config object (either
passed as an argument or loaded from `),tFe=n(tA,"CODE",{});var N6t=s(tFe);fAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),mAr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(tA,"CODE",{});var q6t=s(aFe);gAr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),hAr=r(tA,":"),tA.forEach(t),pAr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);sE=n(ge,"LI",{});var gIe=s(sE);nFe=n(gIe,"STRONG",{});var j6t=s(nFe);_Ar=r(j6t,"albert"),j6t.forEach(t),uAr=r(gIe," \u2014 "),EJ=n(gIe,"A",{href:!0});var D6t=s(EJ);bAr=r(D6t,"TFAlbertForQuestionAnswering"),D6t.forEach(t),vAr=r(gIe," (ALBERT model)"),gIe.forEach(t),FAr=i(ge),lE=n(ge,"LI",{});var hIe=s(lE);sFe=n(hIe,"STRONG",{});var G6t=s(sFe);TAr=r(G6t,"bert"),G6t.forEach(t),MAr=r(hIe," \u2014 "),CJ=n(hIe,"A",{href:!0});var O6t=s(CJ);EAr=r(O6t,"TFBertForQuestionAnswering"),O6t.forEach(t),CAr=r(hIe," (BERT model)"),hIe.forEach(t),wAr=i(ge),iE=n(ge,"LI",{});var pIe=s(iE);lFe=n(pIe,"STRONG",{});var V6t=s(lFe);AAr=r(V6t,"camembert"),V6t.forEach(t),yAr=r(pIe," \u2014 "),wJ=n(pIe,"A",{href:!0});var X6t=s(wJ);LAr=r(X6t,"TFCamembertForQuestionAnswering"),X6t.forEach(t),xAr=r(pIe," (CamemBERT model)"),pIe.forEach(t),$Ar=i(ge),dE=n(ge,"LI",{});var _Ie=s(dE);iFe=n(_Ie,"STRONG",{});var z6t=s(iFe);kAr=r(z6t,"convbert"),z6t.forEach(t),SAr=r(_Ie," \u2014 "),AJ=n(_Ie,"A",{href:!0});var W6t=s(AJ);RAr=r(W6t,"TFConvBertForQuestionAnswering"),W6t.forEach(t),PAr=r(_Ie," (ConvBERT model)"),_Ie.forEach(t),BAr=i(ge),cE=n(ge,"LI",{});var uIe=s(cE);dFe=n(uIe,"STRONG",{});var Q6t=s(dFe);IAr=r(Q6t,"deberta"),Q6t.forEach(t),NAr=r(uIe," \u2014 "),yJ=n(uIe,"A",{href:!0});var H6t=s(yJ);qAr=r(H6t,"TFDebertaForQuestionAnswering"),H6t.forEach(t),jAr=r(uIe," (DeBERTa model)"),uIe.forEach(t),DAr=i(ge),fE=n(ge,"LI",{});var bIe=s(fE);cFe=n(bIe,"STRONG",{});var U6t=s(cFe);GAr=r(U6t,"deberta-v2"),U6t.forEach(t),OAr=r(bIe," \u2014 "),LJ=n(bIe,"A",{href:!0});var J6t=s(LJ);VAr=r(J6t,"TFDebertaV2ForQuestionAnswering"),J6t.forEach(t),XAr=r(bIe," (DeBERTa-v2 model)"),bIe.forEach(t),zAr=i(ge),mE=n(ge,"LI",{});var vIe=s(mE);fFe=n(vIe,"STRONG",{});var Y6t=s(fFe);WAr=r(Y6t,"distilbert"),Y6t.forEach(t),QAr=r(vIe," \u2014 "),xJ=n(vIe,"A",{href:!0});var K6t=s(xJ);HAr=r(K6t,"TFDistilBertForQuestionAnswering"),K6t.forEach(t),UAr=r(vIe," (DistilBERT model)"),vIe.forEach(t),JAr=i(ge),gE=n(ge,"LI",{});var FIe=s(gE);mFe=n(FIe,"STRONG",{});var Z6t=s(mFe);YAr=r(Z6t,"electra"),Z6t.forEach(t),KAr=r(FIe," \u2014 "),$J=n(FIe,"A",{href:!0});var eAt=s($J);ZAr=r(eAt,"TFElectraForQuestionAnswering"),eAt.forEach(t),eyr=r(FIe," (ELECTRA model)"),FIe.forEach(t),oyr=i(ge),hE=n(ge,"LI",{});var TIe=s(hE);gFe=n(TIe,"STRONG",{});var oAt=s(gFe);ryr=r(oAt,"flaubert"),oAt.forEach(t),tyr=r(TIe," \u2014 "),kJ=n(TIe,"A",{href:!0});var rAt=s(kJ);ayr=r(rAt,"TFFlaubertForQuestionAnsweringSimple"),rAt.forEach(t),nyr=r(TIe," (FlauBERT model)"),TIe.forEach(t),syr=i(ge),pE=n(ge,"LI",{});var MIe=s(pE);hFe=n(MIe,"STRONG",{});var tAt=s(hFe);lyr=r(tAt,"funnel"),tAt.forEach(t),iyr=r(MIe," \u2014 "),SJ=n(MIe,"A",{href:!0});var aAt=s(SJ);dyr=r(aAt,"TFFunnelForQuestionAnswering"),aAt.forEach(t),cyr=r(MIe," (Funnel Transformer model)"),MIe.forEach(t),fyr=i(ge),_E=n(ge,"LI",{});var EIe=s(_E);pFe=n(EIe,"STRONG",{});var nAt=s(pFe);myr=r(nAt,"gptj"),nAt.forEach(t),gyr=r(EIe," \u2014 "),RJ=n(EIe,"A",{href:!0});var sAt=s(RJ);hyr=r(sAt,"TFGPTJForQuestionAnswering"),sAt.forEach(t),pyr=r(EIe," (GPT-J model)"),EIe.forEach(t),_yr=i(ge),uE=n(ge,"LI",{});var CIe=s(uE);_Fe=n(CIe,"STRONG",{});var lAt=s(_Fe);uyr=r(lAt,"longformer"),lAt.forEach(t),byr=r(CIe," \u2014 "),PJ=n(CIe,"A",{href:!0});var iAt=s(PJ);vyr=r(iAt,"TFLongformerForQuestionAnswering"),iAt.forEach(t),Fyr=r(CIe," (Longformer model)"),CIe.forEach(t),Tyr=i(ge),bE=n(ge,"LI",{});var wIe=s(bE);uFe=n(wIe,"STRONG",{});var dAt=s(uFe);Myr=r(dAt,"mobilebert"),dAt.forEach(t),Eyr=r(wIe," \u2014 "),BJ=n(wIe,"A",{href:!0});var cAt=s(BJ);Cyr=r(cAt,"TFMobileBertForQuestionAnswering"),cAt.forEach(t),wyr=r(wIe," (MobileBERT model)"),wIe.forEach(t),Ayr=i(ge),vE=n(ge,"LI",{});var AIe=s(vE);bFe=n(AIe,"STRONG",{});var fAt=s(bFe);yyr=r(fAt,"mpnet"),fAt.forEach(t),Lyr=r(AIe," \u2014 "),IJ=n(AIe,"A",{href:!0});var mAt=s(IJ);xyr=r(mAt,"TFMPNetForQuestionAnswering"),mAt.forEach(t),$yr=r(AIe," (MPNet model)"),AIe.forEach(t),kyr=i(ge),FE=n(ge,"LI",{});var yIe=s(FE);vFe=n(yIe,"STRONG",{});var gAt=s(vFe);Syr=r(gAt,"rembert"),gAt.forEach(t),Ryr=r(yIe," \u2014 "),NJ=n(yIe,"A",{href:!0});var hAt=s(NJ);Pyr=r(hAt,"TFRemBertForQuestionAnswering"),hAt.forEach(t),Byr=r(yIe," (RemBERT model)"),yIe.forEach(t),Iyr=i(ge),TE=n(ge,"LI",{});var LIe=s(TE);FFe=n(LIe,"STRONG",{});var pAt=s(FFe);Nyr=r(pAt,"roberta"),pAt.forEach(t),qyr=r(LIe," \u2014 "),qJ=n(LIe,"A",{href:!0});var _At=s(qJ);jyr=r(_At,"TFRobertaForQuestionAnswering"),_At.forEach(t),Dyr=r(LIe," (RoBERTa model)"),LIe.forEach(t),Gyr=i(ge),ME=n(ge,"LI",{});var xIe=s(ME);TFe=n(xIe,"STRONG",{});var uAt=s(TFe);Oyr=r(uAt,"roformer"),uAt.forEach(t),Vyr=r(xIe," \u2014 "),jJ=n(xIe,"A",{href:!0});var bAt=s(jJ);Xyr=r(bAt,"TFRoFormerForQuestionAnswering"),bAt.forEach(t),zyr=r(xIe," (RoFormer model)"),xIe.forEach(t),Wyr=i(ge),EE=n(ge,"LI",{});var $Ie=s(EE);MFe=n($Ie,"STRONG",{});var vAt=s(MFe);Qyr=r(vAt,"xlm"),vAt.forEach(t),Hyr=r($Ie," \u2014 "),DJ=n($Ie,"A",{href:!0});var FAt=s(DJ);Uyr=r(FAt,"TFXLMForQuestionAnsweringSimple"),FAt.forEach(t),Jyr=r($Ie," (XLM model)"),$Ie.forEach(t),Yyr=i(ge),CE=n(ge,"LI",{});var kIe=s(CE);EFe=n(kIe,"STRONG",{});var TAt=s(EFe);Kyr=r(TAt,"xlm-roberta"),TAt.forEach(t),Zyr=r(kIe," \u2014 "),GJ=n(kIe,"A",{href:!0});var MAt=s(GJ);eLr=r(MAt,"TFXLMRobertaForQuestionAnswering"),MAt.forEach(t),oLr=r(kIe," (XLM-RoBERTa model)"),kIe.forEach(t),rLr=i(ge),wE=n(ge,"LI",{});var SIe=s(wE);CFe=n(SIe,"STRONG",{});var EAt=s(CFe);tLr=r(EAt,"xlnet"),EAt.forEach(t),aLr=r(SIe," \u2014 "),OJ=n(SIe,"A",{href:!0});var CAt=s(OJ);nLr=r(CAt,"TFXLNetForQuestionAnsweringSimple"),CAt.forEach(t),sLr=r(SIe," (XLNet model)"),SIe.forEach(t),ge.forEach(t),lLr=i(Nl),T(AE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),dDe=i(f),Cc=n(f,"H2",{class:!0});var _Oe=s(Cc);yE=n(_Oe,"A",{id:!0,class:!0,href:!0});var wAt=s(yE);wFe=n(wAt,"SPAN",{});var AAt=s(wFe);T(C9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),iLr=i(_Oe),AFe=n(_Oe,"SPAN",{});var yAt=s(AFe);dLr=r(yAt,"TFAutoModelForVision2Seq"),yAt.forEach(t),_Oe.forEach(t),cDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(w9.$$.fragment,ql),cLr=i(ql),wc=n(ql,"P",{});var Jee=s(wc);fLr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=n(Jee,"A",{href:!0});var LAt=s(VJ);mLr=r(LAt,"from_pretrained()"),LAt.forEach(t),gLr=r(Jee," class method or the "),XJ=n(Jee,"A",{href:!0});var xAt=s(XJ);hLr=r(xAt,"from_config()"),xAt.forEach(t),pLr=r(Jee,` class
method.`),Jee.forEach(t),_Lr=i(ql),A9=n(ql,"P",{});var uOe=s(A9);uLr=r(uOe,"This class cannot be instantiated directly using "),yFe=n(uOe,"CODE",{});var $At=s(yFe);bLr=r($At,"__init__()"),$At.forEach(t),vLr=r(uOe," (throws an error)."),uOe.forEach(t),FLr=i(ql),Dt=n(ql,"DIV",{class:!0});var aA=s(Dt);T(y9.$$.fragment,aA),TLr=i(aA),LFe=n(aA,"P",{});var kAt=s(LFe);MLr=r(kAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kAt.forEach(t),ELr=i(aA),Ac=n(aA,"P",{});var Yee=s(Ac);CLr=r(Yee,`Note:
Loading a model from its configuration file does `),xFe=n(Yee,"STRONG",{});var SAt=s(xFe);wLr=r(SAt,"not"),SAt.forEach(t),ALr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yee,"A",{href:!0});var RAt=s(zJ);yLr=r(RAt,"from_pretrained()"),RAt.forEach(t),LLr=r(Yee," to load the model weights."),Yee.forEach(t),xLr=i(aA),T(LE.$$.fragment,aA),aA.forEach(t),$Lr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(L9.$$.fragment,jl),kLr=i(jl),$Fe=n(jl,"P",{});var PAt=s($Fe);SLr=r(PAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PAt.forEach(t),RLr=i(jl),mn=n(jl,"P",{});var nA=s(mn);PLr=r(nA,"The model class to instantiate is selected based on the "),kFe=n(nA,"CODE",{});var BAt=s(kFe);BLr=r(BAt,"model_type"),BAt.forEach(t),ILr=r(nA,` property of the config object (either
passed as an argument or loaded from `),SFe=n(nA,"CODE",{});var IAt=s(SFe);NLr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),qLr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(nA,"CODE",{});var NAt=s(RFe);jLr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),DLr=r(nA,":"),nA.forEach(t),GLr=i(jl),PFe=n(jl,"UL",{});var qAt=s(PFe);xE=n(qAt,"LI",{});var RIe=s(xE);BFe=n(RIe,"STRONG",{});var jAt=s(BFe);OLr=r(jAt,"vision-encoder-decoder"),jAt.forEach(t),VLr=r(RIe," \u2014 "),WJ=n(RIe,"A",{href:!0});var DAt=s(WJ);XLr=r(DAt,"TFVisionEncoderDecoderModel"),DAt.forEach(t),zLr=r(RIe," (Vision Encoder decoder model)"),RIe.forEach(t),qAt.forEach(t),WLr=i(jl),T($E.$$.fragment,jl),jl.forEach(t),ql.forEach(t),fDe=i(f),yc=n(f,"H2",{class:!0});var bOe=s(yc);kE=n(bOe,"A",{id:!0,class:!0,href:!0});var GAt=s(kE);IFe=n(GAt,"SPAN",{});var OAt=s(IFe);T(x9.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),QLr=i(bOe),NFe=n(bOe,"SPAN",{});var VAt=s(NFe);HLr=r(VAt,"TFAutoModelForSpeechSeq2Seq"),VAt.forEach(t),bOe.forEach(t),mDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T($9.$$.fragment,Dl),ULr=i(Dl),Lc=n(Dl,"P",{});var Kee=s(Lc);JLr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=n(Kee,"A",{href:!0});var XAt=s(QJ);YLr=r(XAt,"from_pretrained()"),XAt.forEach(t),KLr=r(Kee," class method or the "),HJ=n(Kee,"A",{href:!0});var zAt=s(HJ);ZLr=r(zAt,"from_config()"),zAt.forEach(t),e8r=r(Kee,` class
method.`),Kee.forEach(t),o8r=i(Dl),k9=n(Dl,"P",{});var vOe=s(k9);r8r=r(vOe,"This class cannot be instantiated directly using "),qFe=n(vOe,"CODE",{});var WAt=s(qFe);t8r=r(WAt,"__init__()"),WAt.forEach(t),a8r=r(vOe," (throws an error)."),vOe.forEach(t),n8r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var sA=s(Gt);T(S9.$$.fragment,sA),s8r=i(sA),jFe=n(sA,"P",{});var QAt=s(jFe);l8r=r(QAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),QAt.forEach(t),i8r=i(sA),xc=n(sA,"P",{});var Zee=s(xc);d8r=r(Zee,`Note:
Loading a model from its configuration file does `),DFe=n(Zee,"STRONG",{});var HAt=s(DFe);c8r=r(HAt,"not"),HAt.forEach(t),f8r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Zee,"A",{href:!0});var UAt=s(UJ);m8r=r(UAt,"from_pretrained()"),UAt.forEach(t),g8r=r(Zee," to load the model weights."),Zee.forEach(t),h8r=i(sA),T(SE.$$.fragment,sA),sA.forEach(t),p8r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(R9.$$.fragment,Gl),_8r=i(Gl),GFe=n(Gl,"P",{});var JAt=s(GFe);u8r=r(JAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JAt.forEach(t),b8r=i(Gl),gn=n(Gl,"P",{});var lA=s(gn);v8r=r(lA,"The model class to instantiate is selected based on the "),OFe=n(lA,"CODE",{});var YAt=s(OFe);F8r=r(YAt,"model_type"),YAt.forEach(t),T8r=r(lA,` property of the config object (either
passed as an argument or loaded from `),VFe=n(lA,"CODE",{});var KAt=s(VFe);M8r=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),E8r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(lA,"CODE",{});var ZAt=s(XFe);C8r=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),w8r=r(lA,":"),lA.forEach(t),A8r=i(Gl),zFe=n(Gl,"UL",{});var eyt=s(zFe);RE=n(eyt,"LI",{});var PIe=s(RE);WFe=n(PIe,"STRONG",{});var oyt=s(WFe);y8r=r(oyt,"speech_to_text"),oyt.forEach(t),L8r=r(PIe," \u2014 "),JJ=n(PIe,"A",{href:!0});var ryt=s(JJ);x8r=r(ryt,"TFSpeech2TextForConditionalGeneration"),ryt.forEach(t),$8r=r(PIe," (Speech2Text model)"),PIe.forEach(t),eyt.forEach(t),k8r=i(Gl),T(PE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),gDe=i(f),$c=n(f,"H2",{class:!0});var FOe=s($c);BE=n(FOe,"A",{id:!0,class:!0,href:!0});var tyt=s(BE);QFe=n(tyt,"SPAN",{});var ayt=s(QFe);T(P9.$$.fragment,ayt),ayt.forEach(t),tyt.forEach(t),S8r=i(FOe),HFe=n(FOe,"SPAN",{});var nyt=s(HFe);R8r=r(nyt,"FlaxAutoModel"),nyt.forEach(t),FOe.forEach(t),hDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(B9.$$.fragment,Ol),P8r=i(Ol),kc=n(Ol,"P",{});var eoe=s(kc);B8r=r(eoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=n(eoe,"A",{href:!0});var syt=s(YJ);I8r=r(syt,"from_pretrained()"),syt.forEach(t),N8r=r(eoe," class method or the "),KJ=n(eoe,"A",{href:!0});var lyt=s(KJ);q8r=r(lyt,"from_config()"),lyt.forEach(t),j8r=r(eoe,` class
method.`),eoe.forEach(t),D8r=i(Ol),I9=n(Ol,"P",{});var TOe=s(I9);G8r=r(TOe,"This class cannot be instantiated directly using "),UFe=n(TOe,"CODE",{});var iyt=s(UFe);O8r=r(iyt,"__init__()"),iyt.forEach(t),V8r=r(TOe," (throws an error)."),TOe.forEach(t),X8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var iA=s(Ot);T(N9.$$.fragment,iA),z8r=i(iA),JFe=n(iA,"P",{});var dyt=s(JFe);W8r=r(dyt,"Instantiates one of the base model classes of the library from a configuration."),dyt.forEach(t),Q8r=i(iA),Sc=n(iA,"P",{});var ooe=s(Sc);H8r=r(ooe,`Note:
Loading a model from its configuration file does `),YFe=n(ooe,"STRONG",{});var cyt=s(YFe);U8r=r(cyt,"not"),cyt.forEach(t),J8r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(ooe,"A",{href:!0});var fyt=s(ZJ);Y8r=r(fyt,"from_pretrained()"),fyt.forEach(t),K8r=r(ooe," to load the model weights."),ooe.forEach(t),Z8r=i(iA),T(IE.$$.fragment,iA),iA.forEach(t),e9r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(q9.$$.fragment,Vl),o9r=i(Vl),KFe=n(Vl,"P",{});var myt=s(KFe);r9r=r(myt,"Instantiate one of the base model classes of the library from a pretrained model."),myt.forEach(t),t9r=i(Vl),hn=n(Vl,"P",{});var dA=s(hn);a9r=r(dA,"The model class to instantiate is selected based on the "),ZFe=n(dA,"CODE",{});var gyt=s(ZFe);n9r=r(gyt,"model_type"),gyt.forEach(t),s9r=r(dA,` property of the config object (either
passed as an argument or loaded from `),eTe=n(dA,"CODE",{});var hyt=s(eTe);l9r=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),i9r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(dA,"CODE",{});var pyt=s(oTe);d9r=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),c9r=r(dA,":"),dA.forEach(t),f9r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);NE=n(ne,"LI",{});var BIe=s(NE);rTe=n(BIe,"STRONG",{});var _yt=s(rTe);m9r=r(_yt,"albert"),_yt.forEach(t),g9r=r(BIe," \u2014 "),eY=n(BIe,"A",{href:!0});var uyt=s(eY);h9r=r(uyt,"FlaxAlbertModel"),uyt.forEach(t),p9r=r(BIe," (ALBERT model)"),BIe.forEach(t),_9r=i(ne),qE=n(ne,"LI",{});var IIe=s(qE);tTe=n(IIe,"STRONG",{});var byt=s(tTe);u9r=r(byt,"bart"),byt.forEach(t),b9r=r(IIe," \u2014 "),oY=n(IIe,"A",{href:!0});var vyt=s(oY);v9r=r(vyt,"FlaxBartModel"),vyt.forEach(t),F9r=r(IIe," (BART model)"),IIe.forEach(t),T9r=i(ne),jE=n(ne,"LI",{});var NIe=s(jE);aTe=n(NIe,"STRONG",{});var Fyt=s(aTe);M9r=r(Fyt,"beit"),Fyt.forEach(t),E9r=r(NIe," \u2014 "),rY=n(NIe,"A",{href:!0});var Tyt=s(rY);C9r=r(Tyt,"FlaxBeitModel"),Tyt.forEach(t),w9r=r(NIe," (BEiT model)"),NIe.forEach(t),A9r=i(ne),DE=n(ne,"LI",{});var qIe=s(DE);nTe=n(qIe,"STRONG",{});var Myt=s(nTe);y9r=r(Myt,"bert"),Myt.forEach(t),L9r=r(qIe," \u2014 "),tY=n(qIe,"A",{href:!0});var Eyt=s(tY);x9r=r(Eyt,"FlaxBertModel"),Eyt.forEach(t),$9r=r(qIe," (BERT model)"),qIe.forEach(t),k9r=i(ne),GE=n(ne,"LI",{});var jIe=s(GE);sTe=n(jIe,"STRONG",{});var Cyt=s(sTe);S9r=r(Cyt,"big_bird"),Cyt.forEach(t),R9r=r(jIe," \u2014 "),aY=n(jIe,"A",{href:!0});var wyt=s(aY);P9r=r(wyt,"FlaxBigBirdModel"),wyt.forEach(t),B9r=r(jIe," (BigBird model)"),jIe.forEach(t),I9r=i(ne),OE=n(ne,"LI",{});var DIe=s(OE);lTe=n(DIe,"STRONG",{});var Ayt=s(lTe);N9r=r(Ayt,"blenderbot"),Ayt.forEach(t),q9r=r(DIe," \u2014 "),nY=n(DIe,"A",{href:!0});var yyt=s(nY);j9r=r(yyt,"FlaxBlenderbotModel"),yyt.forEach(t),D9r=r(DIe," (Blenderbot model)"),DIe.forEach(t),G9r=i(ne),VE=n(ne,"LI",{});var GIe=s(VE);iTe=n(GIe,"STRONG",{});var Lyt=s(iTe);O9r=r(Lyt,"blenderbot-small"),Lyt.forEach(t),V9r=r(GIe," \u2014 "),sY=n(GIe,"A",{href:!0});var xyt=s(sY);X9r=r(xyt,"FlaxBlenderbotSmallModel"),xyt.forEach(t),z9r=r(GIe," (BlenderbotSmall model)"),GIe.forEach(t),W9r=i(ne),XE=n(ne,"LI",{});var OIe=s(XE);dTe=n(OIe,"STRONG",{});var $yt=s(dTe);Q9r=r($yt,"clip"),$yt.forEach(t),H9r=r(OIe," \u2014 "),lY=n(OIe,"A",{href:!0});var kyt=s(lY);U9r=r(kyt,"FlaxCLIPModel"),kyt.forEach(t),J9r=r(OIe," (CLIP model)"),OIe.forEach(t),Y9r=i(ne),zE=n(ne,"LI",{});var VIe=s(zE);cTe=n(VIe,"STRONG",{});var Syt=s(cTe);K9r=r(Syt,"distilbert"),Syt.forEach(t),Z9r=r(VIe," \u2014 "),iY=n(VIe,"A",{href:!0});var Ryt=s(iY);exr=r(Ryt,"FlaxDistilBertModel"),Ryt.forEach(t),oxr=r(VIe," (DistilBERT model)"),VIe.forEach(t),rxr=i(ne),WE=n(ne,"LI",{});var XIe=s(WE);fTe=n(XIe,"STRONG",{});var Pyt=s(fTe);txr=r(Pyt,"electra"),Pyt.forEach(t),axr=r(XIe," \u2014 "),dY=n(XIe,"A",{href:!0});var Byt=s(dY);nxr=r(Byt,"FlaxElectraModel"),Byt.forEach(t),sxr=r(XIe," (ELECTRA model)"),XIe.forEach(t),lxr=i(ne),QE=n(ne,"LI",{});var zIe=s(QE);mTe=n(zIe,"STRONG",{});var Iyt=s(mTe);ixr=r(Iyt,"gpt2"),Iyt.forEach(t),dxr=r(zIe," \u2014 "),cY=n(zIe,"A",{href:!0});var Nyt=s(cY);cxr=r(Nyt,"FlaxGPT2Model"),Nyt.forEach(t),fxr=r(zIe," (OpenAI GPT-2 model)"),zIe.forEach(t),mxr=i(ne),HE=n(ne,"LI",{});var WIe=s(HE);gTe=n(WIe,"STRONG",{});var qyt=s(gTe);gxr=r(qyt,"gpt_neo"),qyt.forEach(t),hxr=r(WIe," \u2014 "),fY=n(WIe,"A",{href:!0});var jyt=s(fY);pxr=r(jyt,"FlaxGPTNeoModel"),jyt.forEach(t),_xr=r(WIe," (GPT Neo model)"),WIe.forEach(t),uxr=i(ne),UE=n(ne,"LI",{});var QIe=s(UE);hTe=n(QIe,"STRONG",{});var Dyt=s(hTe);bxr=r(Dyt,"gptj"),Dyt.forEach(t),vxr=r(QIe," \u2014 "),mY=n(QIe,"A",{href:!0});var Gyt=s(mY);Fxr=r(Gyt,"FlaxGPTJModel"),Gyt.forEach(t),Txr=r(QIe," (GPT-J model)"),QIe.forEach(t),Mxr=i(ne),JE=n(ne,"LI",{});var HIe=s(JE);pTe=n(HIe,"STRONG",{});var Oyt=s(pTe);Exr=r(Oyt,"marian"),Oyt.forEach(t),Cxr=r(HIe," \u2014 "),gY=n(HIe,"A",{href:!0});var Vyt=s(gY);wxr=r(Vyt,"FlaxMarianModel"),Vyt.forEach(t),Axr=r(HIe," (Marian model)"),HIe.forEach(t),yxr=i(ne),YE=n(ne,"LI",{});var UIe=s(YE);_Te=n(UIe,"STRONG",{});var Xyt=s(_Te);Lxr=r(Xyt,"mbart"),Xyt.forEach(t),xxr=r(UIe," \u2014 "),hY=n(UIe,"A",{href:!0});var zyt=s(hY);$xr=r(zyt,"FlaxMBartModel"),zyt.forEach(t),kxr=r(UIe," (mBART model)"),UIe.forEach(t),Sxr=i(ne),KE=n(ne,"LI",{});var JIe=s(KE);uTe=n(JIe,"STRONG",{});var Wyt=s(uTe);Rxr=r(Wyt,"mt5"),Wyt.forEach(t),Pxr=r(JIe," \u2014 "),pY=n(JIe,"A",{href:!0});var Qyt=s(pY);Bxr=r(Qyt,"FlaxMT5Model"),Qyt.forEach(t),Ixr=r(JIe," (mT5 model)"),JIe.forEach(t),Nxr=i(ne),ZE=n(ne,"LI",{});var YIe=s(ZE);bTe=n(YIe,"STRONG",{});var Hyt=s(bTe);qxr=r(Hyt,"opt"),Hyt.forEach(t),jxr=r(YIe," \u2014 "),_Y=n(YIe,"A",{href:!0});var Uyt=s(_Y);Dxr=r(Uyt,"FlaxOPTModel"),Uyt.forEach(t),Gxr=r(YIe," (OPT model)"),YIe.forEach(t),Oxr=i(ne),eC=n(ne,"LI",{});var KIe=s(eC);vTe=n(KIe,"STRONG",{});var Jyt=s(vTe);Vxr=r(Jyt,"pegasus"),Jyt.forEach(t),Xxr=r(KIe," \u2014 "),uY=n(KIe,"A",{href:!0});var Yyt=s(uY);zxr=r(Yyt,"FlaxPegasusModel"),Yyt.forEach(t),Wxr=r(KIe," (Pegasus model)"),KIe.forEach(t),Qxr=i(ne),oC=n(ne,"LI",{});var ZIe=s(oC);FTe=n(ZIe,"STRONG",{});var Kyt=s(FTe);Hxr=r(Kyt,"roberta"),Kyt.forEach(t),Uxr=r(ZIe," \u2014 "),bY=n(ZIe,"A",{href:!0});var Zyt=s(bY);Jxr=r(Zyt,"FlaxRobertaModel"),Zyt.forEach(t),Yxr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Kxr=i(ne),rC=n(ne,"LI",{});var eNe=s(rC);TTe=n(eNe,"STRONG",{});var eLt=s(TTe);Zxr=r(eLt,"roformer"),eLt.forEach(t),e$r=r(eNe," \u2014 "),vY=n(eNe,"A",{href:!0});var oLt=s(vY);o$r=r(oLt,"FlaxRoFormerModel"),oLt.forEach(t),r$r=r(eNe," (RoFormer model)"),eNe.forEach(t),t$r=i(ne),tC=n(ne,"LI",{});var oNe=s(tC);MTe=n(oNe,"STRONG",{});var rLt=s(MTe);a$r=r(rLt,"t5"),rLt.forEach(t),n$r=r(oNe," \u2014 "),FY=n(oNe,"A",{href:!0});var tLt=s(FY);s$r=r(tLt,"FlaxT5Model"),tLt.forEach(t),l$r=r(oNe," (T5 model)"),oNe.forEach(t),i$r=i(ne),aC=n(ne,"LI",{});var rNe=s(aC);ETe=n(rNe,"STRONG",{});var aLt=s(ETe);d$r=r(aLt,"vision-text-dual-encoder"),aLt.forEach(t),c$r=r(rNe," \u2014 "),TY=n(rNe,"A",{href:!0});var nLt=s(TY);f$r=r(nLt,"FlaxVisionTextDualEncoderModel"),nLt.forEach(t),m$r=r(rNe," (VisionTextDualEncoder model)"),rNe.forEach(t),g$r=i(ne),nC=n(ne,"LI",{});var tNe=s(nC);CTe=n(tNe,"STRONG",{});var sLt=s(CTe);h$r=r(sLt,"vit"),sLt.forEach(t),p$r=r(tNe," \u2014 "),MY=n(tNe,"A",{href:!0});var lLt=s(MY);_$r=r(lLt,"FlaxViTModel"),lLt.forEach(t),u$r=r(tNe," (ViT model)"),tNe.forEach(t),b$r=i(ne),sC=n(ne,"LI",{});var aNe=s(sC);wTe=n(aNe,"STRONG",{});var iLt=s(wTe);v$r=r(iLt,"wav2vec2"),iLt.forEach(t),F$r=r(aNe," \u2014 "),EY=n(aNe,"A",{href:!0});var dLt=s(EY);T$r=r(dLt,"FlaxWav2Vec2Model"),dLt.forEach(t),M$r=r(aNe," (Wav2Vec2 model)"),aNe.forEach(t),E$r=i(ne),lC=n(ne,"LI",{});var nNe=s(lC);ATe=n(nNe,"STRONG",{});var cLt=s(ATe);C$r=r(cLt,"xglm"),cLt.forEach(t),w$r=r(nNe," \u2014 "),CY=n(nNe,"A",{href:!0});var fLt=s(CY);A$r=r(fLt,"FlaxXGLMModel"),fLt.forEach(t),y$r=r(nNe," (XGLM model)"),nNe.forEach(t),L$r=i(ne),iC=n(ne,"LI",{});var sNe=s(iC);yTe=n(sNe,"STRONG",{});var mLt=s(yTe);x$r=r(mLt,"xlm-roberta"),mLt.forEach(t),$$r=r(sNe," \u2014 "),wY=n(sNe,"A",{href:!0});var gLt=s(wY);k$r=r(gLt,"FlaxXLMRobertaModel"),gLt.forEach(t),S$r=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),ne.forEach(t),R$r=i(Vl),T(dC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),pDe=i(f),Rc=n(f,"H2",{class:!0});var MOe=s(Rc);cC=n(MOe,"A",{id:!0,class:!0,href:!0});var hLt=s(cC);LTe=n(hLt,"SPAN",{});var pLt=s(LTe);T(j9.$$.fragment,pLt),pLt.forEach(t),hLt.forEach(t),P$r=i(MOe),xTe=n(MOe,"SPAN",{});var _Lt=s(xTe);B$r=r(_Lt,"FlaxAutoModelForCausalLM"),_Lt.forEach(t),MOe.forEach(t),_De=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(D9.$$.fragment,Xl),I$r=i(Xl),Pc=n(Xl,"P",{});var roe=s(Pc);N$r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=n(roe,"A",{href:!0});var uLt=s(AY);q$r=r(uLt,"from_pretrained()"),uLt.forEach(t),j$r=r(roe," class method or the "),yY=n(roe,"A",{href:!0});var bLt=s(yY);D$r=r(bLt,"from_config()"),bLt.forEach(t),G$r=r(roe,` class
method.`),roe.forEach(t),O$r=i(Xl),G9=n(Xl,"P",{});var EOe=s(G9);V$r=r(EOe,"This class cannot be instantiated directly using "),$Te=n(EOe,"CODE",{});var vLt=s($Te);X$r=r(vLt,"__init__()"),vLt.forEach(t),z$r=r(EOe," (throws an error)."),EOe.forEach(t),W$r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var cA=s(Vt);T(O9.$$.fragment,cA),Q$r=i(cA),kTe=n(cA,"P",{});var FLt=s(kTe);H$r=r(FLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FLt.forEach(t),U$r=i(cA),Bc=n(cA,"P",{});var toe=s(Bc);J$r=r(toe,`Note:
Loading a model from its configuration file does `),STe=n(toe,"STRONG",{});var TLt=s(STe);Y$r=r(TLt,"not"),TLt.forEach(t),K$r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(toe,"A",{href:!0});var MLt=s(LY);Z$r=r(MLt,"from_pretrained()"),MLt.forEach(t),ekr=r(toe," to load the model weights."),toe.forEach(t),okr=i(cA),T(fC.$$.fragment,cA),cA.forEach(t),rkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(V9.$$.fragment,zl),tkr=i(zl),RTe=n(zl,"P",{});var ELt=s(RTe);akr=r(ELt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ELt.forEach(t),nkr=i(zl),pn=n(zl,"P",{});var fA=s(pn);skr=r(fA,"The model class to instantiate is selected based on the "),PTe=n(fA,"CODE",{});var CLt=s(PTe);lkr=r(CLt,"model_type"),CLt.forEach(t),ikr=r(fA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(fA,"CODE",{});var wLt=s(BTe);dkr=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),ckr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(fA,"CODE",{});var ALt=s(ITe);fkr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),mkr=r(fA,":"),fA.forEach(t),gkr=i(zl),Le=n(zl,"UL",{});var Ie=s(Le);mC=n(Ie,"LI",{});var lNe=s(mC);NTe=n(lNe,"STRONG",{});var yLt=s(NTe);hkr=r(yLt,"bart"),yLt.forEach(t),pkr=r(lNe," \u2014 "),xY=n(lNe,"A",{href:!0});var LLt=s(xY);_kr=r(LLt,"FlaxBartForCausalLM"),LLt.forEach(t),ukr=r(lNe," (BART model)"),lNe.forEach(t),bkr=i(Ie),gC=n(Ie,"LI",{});var iNe=s(gC);qTe=n(iNe,"STRONG",{});var xLt=s(qTe);vkr=r(xLt,"bert"),xLt.forEach(t),Fkr=r(iNe," \u2014 "),$Y=n(iNe,"A",{href:!0});var $Lt=s($Y);Tkr=r($Lt,"FlaxBertForCausalLM"),$Lt.forEach(t),Mkr=r(iNe," (BERT model)"),iNe.forEach(t),Ekr=i(Ie),hC=n(Ie,"LI",{});var dNe=s(hC);jTe=n(dNe,"STRONG",{});var kLt=s(jTe);Ckr=r(kLt,"big_bird"),kLt.forEach(t),wkr=r(dNe," \u2014 "),kY=n(dNe,"A",{href:!0});var SLt=s(kY);Akr=r(SLt,"FlaxBigBirdForCausalLM"),SLt.forEach(t),ykr=r(dNe," (BigBird model)"),dNe.forEach(t),Lkr=i(Ie),pC=n(Ie,"LI",{});var cNe=s(pC);DTe=n(cNe,"STRONG",{});var RLt=s(DTe);xkr=r(RLt,"electra"),RLt.forEach(t),$kr=r(cNe," \u2014 "),SY=n(cNe,"A",{href:!0});var PLt=s(SY);kkr=r(PLt,"FlaxElectraForCausalLM"),PLt.forEach(t),Skr=r(cNe," (ELECTRA model)"),cNe.forEach(t),Rkr=i(Ie),_C=n(Ie,"LI",{});var fNe=s(_C);GTe=n(fNe,"STRONG",{});var BLt=s(GTe);Pkr=r(BLt,"gpt2"),BLt.forEach(t),Bkr=r(fNe," \u2014 "),RY=n(fNe,"A",{href:!0});var ILt=s(RY);Ikr=r(ILt,"FlaxGPT2LMHeadModel"),ILt.forEach(t),Nkr=r(fNe," (OpenAI GPT-2 model)"),fNe.forEach(t),qkr=i(Ie),uC=n(Ie,"LI",{});var mNe=s(uC);OTe=n(mNe,"STRONG",{});var NLt=s(OTe);jkr=r(NLt,"gpt_neo"),NLt.forEach(t),Dkr=r(mNe," \u2014 "),PY=n(mNe,"A",{href:!0});var qLt=s(PY);Gkr=r(qLt,"FlaxGPTNeoForCausalLM"),qLt.forEach(t),Okr=r(mNe," (GPT Neo model)"),mNe.forEach(t),Vkr=i(Ie),bC=n(Ie,"LI",{});var gNe=s(bC);VTe=n(gNe,"STRONG",{});var jLt=s(VTe);Xkr=r(jLt,"gptj"),jLt.forEach(t),zkr=r(gNe," \u2014 "),BY=n(gNe,"A",{href:!0});var DLt=s(BY);Wkr=r(DLt,"FlaxGPTJForCausalLM"),DLt.forEach(t),Qkr=r(gNe," (GPT-J model)"),gNe.forEach(t),Hkr=i(Ie),vC=n(Ie,"LI",{});var hNe=s(vC);XTe=n(hNe,"STRONG",{});var GLt=s(XTe);Ukr=r(GLt,"opt"),GLt.forEach(t),Jkr=r(hNe," \u2014 "),IY=n(hNe,"A",{href:!0});var OLt=s(IY);Ykr=r(OLt,"FlaxOPTForCausalLM"),OLt.forEach(t),Kkr=r(hNe," (OPT model)"),hNe.forEach(t),Zkr=i(Ie),FC=n(Ie,"LI",{});var pNe=s(FC);zTe=n(pNe,"STRONG",{});var VLt=s(zTe);eSr=r(VLt,"roberta"),VLt.forEach(t),oSr=r(pNe," \u2014 "),NY=n(pNe,"A",{href:!0});var XLt=s(NY);rSr=r(XLt,"FlaxRobertaForCausalLM"),XLt.forEach(t),tSr=r(pNe," (RoBERTa model)"),pNe.forEach(t),aSr=i(Ie),TC=n(Ie,"LI",{});var _Ne=s(TC);WTe=n(_Ne,"STRONG",{});var zLt=s(WTe);nSr=r(zLt,"xglm"),zLt.forEach(t),sSr=r(_Ne," \u2014 "),qY=n(_Ne,"A",{href:!0});var WLt=s(qY);lSr=r(WLt,"FlaxXGLMForCausalLM"),WLt.forEach(t),iSr=r(_Ne," (XGLM model)"),_Ne.forEach(t),Ie.forEach(t),dSr=i(zl),T(MC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),uDe=i(f),Ic=n(f,"H2",{class:!0});var COe=s(Ic);EC=n(COe,"A",{id:!0,class:!0,href:!0});var QLt=s(EC);QTe=n(QLt,"SPAN",{});var HLt=s(QTe);T(X9.$$.fragment,HLt),HLt.forEach(t),QLt.forEach(t),cSr=i(COe),HTe=n(COe,"SPAN",{});var ULt=s(HTe);fSr=r(ULt,"FlaxAutoModelForPreTraining"),ULt.forEach(t),COe.forEach(t),bDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(z9.$$.fragment,Wl),mSr=i(Wl),Nc=n(Wl,"P",{});var aoe=s(Nc);gSr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=n(aoe,"A",{href:!0});var JLt=s(jY);hSr=r(JLt,"from_pretrained()"),JLt.forEach(t),pSr=r(aoe," class method or the "),DY=n(aoe,"A",{href:!0});var YLt=s(DY);_Sr=r(YLt,"from_config()"),YLt.forEach(t),uSr=r(aoe,` class
method.`),aoe.forEach(t),bSr=i(Wl),W9=n(Wl,"P",{});var wOe=s(W9);vSr=r(wOe,"This class cannot be instantiated directly using "),UTe=n(wOe,"CODE",{});var KLt=s(UTe);FSr=r(KLt,"__init__()"),KLt.forEach(t),TSr=r(wOe," (throws an error)."),wOe.forEach(t),MSr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var mA=s(Xt);T(Q9.$$.fragment,mA),ESr=i(mA),JTe=n(mA,"P",{});var ZLt=s(JTe);CSr=r(ZLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZLt.forEach(t),wSr=i(mA),qc=n(mA,"P",{});var noe=s(qc);ASr=r(noe,`Note:
Loading a model from its configuration file does `),YTe=n(noe,"STRONG",{});var e8t=s(YTe);ySr=r(e8t,"not"),e8t.forEach(t),LSr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(noe,"A",{href:!0});var o8t=s(GY);xSr=r(o8t,"from_pretrained()"),o8t.forEach(t),$Sr=r(noe," to load the model weights."),noe.forEach(t),kSr=i(mA),T(CC.$$.fragment,mA),mA.forEach(t),SSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(H9.$$.fragment,Ql),RSr=i(Ql),KTe=n(Ql,"P",{});var r8t=s(KTe);PSr=r(r8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r8t.forEach(t),BSr=i(Ql),_n=n(Ql,"P",{});var gA=s(_n);ISr=r(gA,"The model class to instantiate is selected based on the "),ZTe=n(gA,"CODE",{});var t8t=s(ZTe);NSr=r(t8t,"model_type"),t8t.forEach(t),qSr=r(gA,` property of the config object (either
passed as an argument or loaded from `),e7e=n(gA,"CODE",{});var a8t=s(e7e);jSr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),DSr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(gA,"CODE",{});var n8t=s(o7e);GSr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),OSr=r(gA,":"),gA.forEach(t),VSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);wC=n(we,"LI",{});var uNe=s(wC);r7e=n(uNe,"STRONG",{});var s8t=s(r7e);XSr=r(s8t,"albert"),s8t.forEach(t),zSr=r(uNe," \u2014 "),OY=n(uNe,"A",{href:!0});var l8t=s(OY);WSr=r(l8t,"FlaxAlbertForPreTraining"),l8t.forEach(t),QSr=r(uNe," (ALBERT model)"),uNe.forEach(t),HSr=i(we),AC=n(we,"LI",{});var bNe=s(AC);t7e=n(bNe,"STRONG",{});var i8t=s(t7e);USr=r(i8t,"bart"),i8t.forEach(t),JSr=r(bNe," \u2014 "),VY=n(bNe,"A",{href:!0});var d8t=s(VY);YSr=r(d8t,"FlaxBartForConditionalGeneration"),d8t.forEach(t),KSr=r(bNe," (BART model)"),bNe.forEach(t),ZSr=i(we),yC=n(we,"LI",{});var vNe=s(yC);a7e=n(vNe,"STRONG",{});var c8t=s(a7e);eRr=r(c8t,"bert"),c8t.forEach(t),oRr=r(vNe," \u2014 "),XY=n(vNe,"A",{href:!0});var f8t=s(XY);rRr=r(f8t,"FlaxBertForPreTraining"),f8t.forEach(t),tRr=r(vNe," (BERT model)"),vNe.forEach(t),aRr=i(we),LC=n(we,"LI",{});var FNe=s(LC);n7e=n(FNe,"STRONG",{});var m8t=s(n7e);nRr=r(m8t,"big_bird"),m8t.forEach(t),sRr=r(FNe," \u2014 "),zY=n(FNe,"A",{href:!0});var g8t=s(zY);lRr=r(g8t,"FlaxBigBirdForPreTraining"),g8t.forEach(t),iRr=r(FNe," (BigBird model)"),FNe.forEach(t),dRr=i(we),xC=n(we,"LI",{});var TNe=s(xC);s7e=n(TNe,"STRONG",{});var h8t=s(s7e);cRr=r(h8t,"electra"),h8t.forEach(t),fRr=r(TNe," \u2014 "),WY=n(TNe,"A",{href:!0});var p8t=s(WY);mRr=r(p8t,"FlaxElectraForPreTraining"),p8t.forEach(t),gRr=r(TNe," (ELECTRA model)"),TNe.forEach(t),hRr=i(we),$C=n(we,"LI",{});var MNe=s($C);l7e=n(MNe,"STRONG",{});var _8t=s(l7e);pRr=r(_8t,"mbart"),_8t.forEach(t),_Rr=r(MNe," \u2014 "),QY=n(MNe,"A",{href:!0});var u8t=s(QY);uRr=r(u8t,"FlaxMBartForConditionalGeneration"),u8t.forEach(t),bRr=r(MNe," (mBART model)"),MNe.forEach(t),vRr=i(we),kC=n(we,"LI",{});var ENe=s(kC);i7e=n(ENe,"STRONG",{});var b8t=s(i7e);FRr=r(b8t,"mt5"),b8t.forEach(t),TRr=r(ENe," \u2014 "),HY=n(ENe,"A",{href:!0});var v8t=s(HY);MRr=r(v8t,"FlaxMT5ForConditionalGeneration"),v8t.forEach(t),ERr=r(ENe," (mT5 model)"),ENe.forEach(t),CRr=i(we),SC=n(we,"LI",{});var CNe=s(SC);d7e=n(CNe,"STRONG",{});var F8t=s(d7e);wRr=r(F8t,"roberta"),F8t.forEach(t),ARr=r(CNe," \u2014 "),UY=n(CNe,"A",{href:!0});var T8t=s(UY);yRr=r(T8t,"FlaxRobertaForMaskedLM"),T8t.forEach(t),LRr=r(CNe," (RoBERTa model)"),CNe.forEach(t),xRr=i(we),RC=n(we,"LI",{});var wNe=s(RC);c7e=n(wNe,"STRONG",{});var M8t=s(c7e);$Rr=r(M8t,"roformer"),M8t.forEach(t),kRr=r(wNe," \u2014 "),JY=n(wNe,"A",{href:!0});var E8t=s(JY);SRr=r(E8t,"FlaxRoFormerForMaskedLM"),E8t.forEach(t),RRr=r(wNe," (RoFormer model)"),wNe.forEach(t),PRr=i(we),PC=n(we,"LI",{});var ANe=s(PC);f7e=n(ANe,"STRONG",{});var C8t=s(f7e);BRr=r(C8t,"t5"),C8t.forEach(t),IRr=r(ANe," \u2014 "),YY=n(ANe,"A",{href:!0});var w8t=s(YY);NRr=r(w8t,"FlaxT5ForConditionalGeneration"),w8t.forEach(t),qRr=r(ANe," (T5 model)"),ANe.forEach(t),jRr=i(we),BC=n(we,"LI",{});var yNe=s(BC);m7e=n(yNe,"STRONG",{});var A8t=s(m7e);DRr=r(A8t,"wav2vec2"),A8t.forEach(t),GRr=r(yNe," \u2014 "),KY=n(yNe,"A",{href:!0});var y8t=s(KY);ORr=r(y8t,"FlaxWav2Vec2ForPreTraining"),y8t.forEach(t),VRr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),XRr=i(we),IC=n(we,"LI",{});var LNe=s(IC);g7e=n(LNe,"STRONG",{});var L8t=s(g7e);zRr=r(L8t,"xlm-roberta"),L8t.forEach(t),WRr=r(LNe," \u2014 "),ZY=n(LNe,"A",{href:!0});var x8t=s(ZY);QRr=r(x8t,"FlaxXLMRobertaForMaskedLM"),x8t.forEach(t),HRr=r(LNe," (XLM-RoBERTa model)"),LNe.forEach(t),we.forEach(t),URr=i(Ql),T(NC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),vDe=i(f),jc=n(f,"H2",{class:!0});var AOe=s(jc);qC=n(AOe,"A",{id:!0,class:!0,href:!0});var $8t=s(qC);h7e=n($8t,"SPAN",{});var k8t=s(h7e);T(U9.$$.fragment,k8t),k8t.forEach(t),$8t.forEach(t),JRr=i(AOe),p7e=n(AOe,"SPAN",{});var S8t=s(p7e);YRr=r(S8t,"FlaxAutoModelForMaskedLM"),S8t.forEach(t),AOe.forEach(t),FDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(J9.$$.fragment,Hl),KRr=i(Hl),Dc=n(Hl,"P",{});var soe=s(Dc);ZRr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=n(soe,"A",{href:!0});var R8t=s(eK);ePr=r(R8t,"from_pretrained()"),R8t.forEach(t),oPr=r(soe," class method or the "),oK=n(soe,"A",{href:!0});var P8t=s(oK);rPr=r(P8t,"from_config()"),P8t.forEach(t),tPr=r(soe,` class
method.`),soe.forEach(t),aPr=i(Hl),Y9=n(Hl,"P",{});var yOe=s(Y9);nPr=r(yOe,"This class cannot be instantiated directly using "),_7e=n(yOe,"CODE",{});var B8t=s(_7e);sPr=r(B8t,"__init__()"),B8t.forEach(t),lPr=r(yOe," (throws an error)."),yOe.forEach(t),iPr=i(Hl),zt=n(Hl,"DIV",{class:!0});var hA=s(zt);T(K9.$$.fragment,hA),dPr=i(hA),u7e=n(hA,"P",{});var I8t=s(u7e);cPr=r(I8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I8t.forEach(t),fPr=i(hA),Gc=n(hA,"P",{});var loe=s(Gc);mPr=r(loe,`Note:
Loading a model from its configuration file does `),b7e=n(loe,"STRONG",{});var N8t=s(b7e);gPr=r(N8t,"not"),N8t.forEach(t),hPr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(loe,"A",{href:!0});var q8t=s(rK);pPr=r(q8t,"from_pretrained()"),q8t.forEach(t),_Pr=r(loe," to load the model weights."),loe.forEach(t),uPr=i(hA),T(jC.$$.fragment,hA),hA.forEach(t),bPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(Z9.$$.fragment,Ul),vPr=i(Ul),v7e=n(Ul,"P",{});var j8t=s(v7e);FPr=r(j8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j8t.forEach(t),TPr=i(Ul),un=n(Ul,"P",{});var pA=s(un);MPr=r(pA,"The model class to instantiate is selected based on the "),F7e=n(pA,"CODE",{});var D8t=s(F7e);EPr=r(D8t,"model_type"),D8t.forEach(t),CPr=r(pA,` property of the config object (either
passed as an argument or loaded from `),T7e=n(pA,"CODE",{});var G8t=s(T7e);wPr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),APr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(pA,"CODE",{});var O8t=s(M7e);yPr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),LPr=r(pA,":"),pA.forEach(t),xPr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);DC=n(Ne,"LI",{});var xNe=s(DC);E7e=n(xNe,"STRONG",{});var V8t=s(E7e);$Pr=r(V8t,"albert"),V8t.forEach(t),kPr=r(xNe," \u2014 "),tK=n(xNe,"A",{href:!0});var X8t=s(tK);SPr=r(X8t,"FlaxAlbertForMaskedLM"),X8t.forEach(t),RPr=r(xNe," (ALBERT model)"),xNe.forEach(t),PPr=i(Ne),GC=n(Ne,"LI",{});var $Ne=s(GC);C7e=n($Ne,"STRONG",{});var z8t=s(C7e);BPr=r(z8t,"bart"),z8t.forEach(t),IPr=r($Ne," \u2014 "),aK=n($Ne,"A",{href:!0});var W8t=s(aK);NPr=r(W8t,"FlaxBartForConditionalGeneration"),W8t.forEach(t),qPr=r($Ne," (BART model)"),$Ne.forEach(t),jPr=i(Ne),OC=n(Ne,"LI",{});var kNe=s(OC);w7e=n(kNe,"STRONG",{});var Q8t=s(w7e);DPr=r(Q8t,"bert"),Q8t.forEach(t),GPr=r(kNe," \u2014 "),nK=n(kNe,"A",{href:!0});var H8t=s(nK);OPr=r(H8t,"FlaxBertForMaskedLM"),H8t.forEach(t),VPr=r(kNe," (BERT model)"),kNe.forEach(t),XPr=i(Ne),VC=n(Ne,"LI",{});var SNe=s(VC);A7e=n(SNe,"STRONG",{});var U8t=s(A7e);zPr=r(U8t,"big_bird"),U8t.forEach(t),WPr=r(SNe," \u2014 "),sK=n(SNe,"A",{href:!0});var J8t=s(sK);QPr=r(J8t,"FlaxBigBirdForMaskedLM"),J8t.forEach(t),HPr=r(SNe," (BigBird model)"),SNe.forEach(t),UPr=i(Ne),XC=n(Ne,"LI",{});var RNe=s(XC);y7e=n(RNe,"STRONG",{});var Y8t=s(y7e);JPr=r(Y8t,"distilbert"),Y8t.forEach(t),YPr=r(RNe," \u2014 "),lK=n(RNe,"A",{href:!0});var K8t=s(lK);KPr=r(K8t,"FlaxDistilBertForMaskedLM"),K8t.forEach(t),ZPr=r(RNe," (DistilBERT model)"),RNe.forEach(t),eBr=i(Ne),zC=n(Ne,"LI",{});var PNe=s(zC);L7e=n(PNe,"STRONG",{});var Z8t=s(L7e);oBr=r(Z8t,"electra"),Z8t.forEach(t),rBr=r(PNe," \u2014 "),iK=n(PNe,"A",{href:!0});var e9t=s(iK);tBr=r(e9t,"FlaxElectraForMaskedLM"),e9t.forEach(t),aBr=r(PNe," (ELECTRA model)"),PNe.forEach(t),nBr=i(Ne),WC=n(Ne,"LI",{});var BNe=s(WC);x7e=n(BNe,"STRONG",{});var o9t=s(x7e);sBr=r(o9t,"mbart"),o9t.forEach(t),lBr=r(BNe," \u2014 "),dK=n(BNe,"A",{href:!0});var r9t=s(dK);iBr=r(r9t,"FlaxMBartForConditionalGeneration"),r9t.forEach(t),dBr=r(BNe," (mBART model)"),BNe.forEach(t),cBr=i(Ne),QC=n(Ne,"LI",{});var INe=s(QC);$7e=n(INe,"STRONG",{});var t9t=s($7e);fBr=r(t9t,"roberta"),t9t.forEach(t),mBr=r(INe," \u2014 "),cK=n(INe,"A",{href:!0});var a9t=s(cK);gBr=r(a9t,"FlaxRobertaForMaskedLM"),a9t.forEach(t),hBr=r(INe," (RoBERTa model)"),INe.forEach(t),pBr=i(Ne),HC=n(Ne,"LI",{});var NNe=s(HC);k7e=n(NNe,"STRONG",{});var n9t=s(k7e);_Br=r(n9t,"roformer"),n9t.forEach(t),uBr=r(NNe," \u2014 "),fK=n(NNe,"A",{href:!0});var s9t=s(fK);bBr=r(s9t,"FlaxRoFormerForMaskedLM"),s9t.forEach(t),vBr=r(NNe," (RoFormer model)"),NNe.forEach(t),FBr=i(Ne),UC=n(Ne,"LI",{});var qNe=s(UC);S7e=n(qNe,"STRONG",{});var l9t=s(S7e);TBr=r(l9t,"xlm-roberta"),l9t.forEach(t),MBr=r(qNe," \u2014 "),mK=n(qNe,"A",{href:!0});var i9t=s(mK);EBr=r(i9t,"FlaxXLMRobertaForMaskedLM"),i9t.forEach(t),CBr=r(qNe," (XLM-RoBERTa model)"),qNe.forEach(t),Ne.forEach(t),wBr=i(Ul),T(JC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),TDe=i(f),Oc=n(f,"H2",{class:!0});var LOe=s(Oc);YC=n(LOe,"A",{id:!0,class:!0,href:!0});var d9t=s(YC);R7e=n(d9t,"SPAN",{});var c9t=s(R7e);T(ex.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),ABr=i(LOe),P7e=n(LOe,"SPAN",{});var f9t=s(P7e);yBr=r(f9t,"FlaxAutoModelForSeq2SeqLM"),f9t.forEach(t),LOe.forEach(t),MDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(ox.$$.fragment,Jl),LBr=i(Jl),Vc=n(Jl,"P",{});var ioe=s(Vc);xBr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=n(ioe,"A",{href:!0});var m9t=s(gK);$Br=r(m9t,"from_pretrained()"),m9t.forEach(t),kBr=r(ioe," class method or the "),hK=n(ioe,"A",{href:!0});var g9t=s(hK);SBr=r(g9t,"from_config()"),g9t.forEach(t),RBr=r(ioe,` class
method.`),ioe.forEach(t),PBr=i(Jl),rx=n(Jl,"P",{});var xOe=s(rx);BBr=r(xOe,"This class cannot be instantiated directly using "),B7e=n(xOe,"CODE",{});var h9t=s(B7e);IBr=r(h9t,"__init__()"),h9t.forEach(t),NBr=r(xOe," (throws an error)."),xOe.forEach(t),qBr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var _A=s(Wt);T(tx.$$.fragment,_A),jBr=i(_A),I7e=n(_A,"P",{});var p9t=s(I7e);DBr=r(p9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p9t.forEach(t),GBr=i(_A),Xc=n(_A,"P",{});var doe=s(Xc);OBr=r(doe,`Note:
Loading a model from its configuration file does `),N7e=n(doe,"STRONG",{});var _9t=s(N7e);VBr=r(_9t,"not"),_9t.forEach(t),XBr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(doe,"A",{href:!0});var u9t=s(pK);zBr=r(u9t,"from_pretrained()"),u9t.forEach(t),WBr=r(doe," to load the model weights."),doe.forEach(t),QBr=i(_A),T(KC.$$.fragment,_A),_A.forEach(t),HBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ax.$$.fragment,Yl),UBr=i(Yl),q7e=n(Yl,"P",{});var b9t=s(q7e);JBr=r(b9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b9t.forEach(t),YBr=i(Yl),bn=n(Yl,"P",{});var uA=s(bn);KBr=r(uA,"The model class to instantiate is selected based on the "),j7e=n(uA,"CODE",{});var v9t=s(j7e);ZBr=r(v9t,"model_type"),v9t.forEach(t),eIr=r(uA,` property of the config object (either
passed as an argument or loaded from `),D7e=n(uA,"CODE",{});var F9t=s(D7e);oIr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),rIr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=n(uA,"CODE",{});var T9t=s(G7e);tIr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),aIr=r(uA,":"),uA.forEach(t),nIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);ZC=n(ze,"LI",{});var jNe=s(ZC);O7e=n(jNe,"STRONG",{});var M9t=s(O7e);sIr=r(M9t,"bart"),M9t.forEach(t),lIr=r(jNe," \u2014 "),_K=n(jNe,"A",{href:!0});var E9t=s(_K);iIr=r(E9t,"FlaxBartForConditionalGeneration"),E9t.forEach(t),dIr=r(jNe," (BART model)"),jNe.forEach(t),cIr=i(ze),e0=n(ze,"LI",{});var DNe=s(e0);V7e=n(DNe,"STRONG",{});var C9t=s(V7e);fIr=r(C9t,"blenderbot"),C9t.forEach(t),mIr=r(DNe," \u2014 "),uK=n(DNe,"A",{href:!0});var w9t=s(uK);gIr=r(w9t,"FlaxBlenderbotForConditionalGeneration"),w9t.forEach(t),hIr=r(DNe," (Blenderbot model)"),DNe.forEach(t),pIr=i(ze),o0=n(ze,"LI",{});var GNe=s(o0);X7e=n(GNe,"STRONG",{});var A9t=s(X7e);_Ir=r(A9t,"blenderbot-small"),A9t.forEach(t),uIr=r(GNe," \u2014 "),bK=n(GNe,"A",{href:!0});var y9t=s(bK);bIr=r(y9t,"FlaxBlenderbotSmallForConditionalGeneration"),y9t.forEach(t),vIr=r(GNe," (BlenderbotSmall model)"),GNe.forEach(t),FIr=i(ze),r0=n(ze,"LI",{});var ONe=s(r0);z7e=n(ONe,"STRONG",{});var L9t=s(z7e);TIr=r(L9t,"encoder-decoder"),L9t.forEach(t),MIr=r(ONe," \u2014 "),vK=n(ONe,"A",{href:!0});var x9t=s(vK);EIr=r(x9t,"FlaxEncoderDecoderModel"),x9t.forEach(t),CIr=r(ONe," (Encoder decoder model)"),ONe.forEach(t),wIr=i(ze),t0=n(ze,"LI",{});var VNe=s(t0);W7e=n(VNe,"STRONG",{});var $9t=s(W7e);AIr=r($9t,"marian"),$9t.forEach(t),yIr=r(VNe," \u2014 "),FK=n(VNe,"A",{href:!0});var k9t=s(FK);LIr=r(k9t,"FlaxMarianMTModel"),k9t.forEach(t),xIr=r(VNe," (Marian model)"),VNe.forEach(t),$Ir=i(ze),a0=n(ze,"LI",{});var XNe=s(a0);Q7e=n(XNe,"STRONG",{});var S9t=s(Q7e);kIr=r(S9t,"mbart"),S9t.forEach(t),SIr=r(XNe," \u2014 "),TK=n(XNe,"A",{href:!0});var R9t=s(TK);RIr=r(R9t,"FlaxMBartForConditionalGeneration"),R9t.forEach(t),PIr=r(XNe," (mBART model)"),XNe.forEach(t),BIr=i(ze),n0=n(ze,"LI",{});var zNe=s(n0);H7e=n(zNe,"STRONG",{});var P9t=s(H7e);IIr=r(P9t,"mt5"),P9t.forEach(t),NIr=r(zNe," \u2014 "),MK=n(zNe,"A",{href:!0});var B9t=s(MK);qIr=r(B9t,"FlaxMT5ForConditionalGeneration"),B9t.forEach(t),jIr=r(zNe," (mT5 model)"),zNe.forEach(t),DIr=i(ze),s0=n(ze,"LI",{});var WNe=s(s0);U7e=n(WNe,"STRONG",{});var I9t=s(U7e);GIr=r(I9t,"pegasus"),I9t.forEach(t),OIr=r(WNe," \u2014 "),EK=n(WNe,"A",{href:!0});var N9t=s(EK);VIr=r(N9t,"FlaxPegasusForConditionalGeneration"),N9t.forEach(t),XIr=r(WNe," (Pegasus model)"),WNe.forEach(t),zIr=i(ze),l0=n(ze,"LI",{});var QNe=s(l0);J7e=n(QNe,"STRONG",{});var q9t=s(J7e);WIr=r(q9t,"t5"),q9t.forEach(t),QIr=r(QNe," \u2014 "),CK=n(QNe,"A",{href:!0});var j9t=s(CK);HIr=r(j9t,"FlaxT5ForConditionalGeneration"),j9t.forEach(t),UIr=r(QNe," (T5 model)"),QNe.forEach(t),ze.forEach(t),JIr=i(Yl),T(i0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),EDe=i(f),zc=n(f,"H2",{class:!0});var $Oe=s(zc);d0=n($Oe,"A",{id:!0,class:!0,href:!0});var D9t=s(d0);Y7e=n(D9t,"SPAN",{});var G9t=s(Y7e);T(nx.$$.fragment,G9t),G9t.forEach(t),D9t.forEach(t),YIr=i($Oe),K7e=n($Oe,"SPAN",{});var O9t=s(K7e);KIr=r(O9t,"FlaxAutoModelForSequenceClassification"),O9t.forEach(t),$Oe.forEach(t),CDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(sx.$$.fragment,Kl),ZIr=i(Kl),Wc=n(Kl,"P",{});var coe=s(Wc);eNr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=n(coe,"A",{href:!0});var V9t=s(wK);oNr=r(V9t,"from_pretrained()"),V9t.forEach(t),rNr=r(coe," class method or the "),AK=n(coe,"A",{href:!0});var X9t=s(AK);tNr=r(X9t,"from_config()"),X9t.forEach(t),aNr=r(coe,` class
method.`),coe.forEach(t),nNr=i(Kl),lx=n(Kl,"P",{});var kOe=s(lx);sNr=r(kOe,"This class cannot be instantiated directly using "),Z7e=n(kOe,"CODE",{});var z9t=s(Z7e);lNr=r(z9t,"__init__()"),z9t.forEach(t),iNr=r(kOe," (throws an error)."),kOe.forEach(t),dNr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var bA=s(Qt);T(ix.$$.fragment,bA),cNr=i(bA),eMe=n(bA,"P",{});var W9t=s(eMe);fNr=r(W9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W9t.forEach(t),mNr=i(bA),Qc=n(bA,"P",{});var foe=s(Qc);gNr=r(foe,`Note:
Loading a model from its configuration file does `),oMe=n(foe,"STRONG",{});var Q9t=s(oMe);hNr=r(Q9t,"not"),Q9t.forEach(t),pNr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(foe,"A",{href:!0});var H9t=s(yK);_Nr=r(H9t,"from_pretrained()"),H9t.forEach(t),uNr=r(foe," to load the model weights."),foe.forEach(t),bNr=i(bA),T(c0.$$.fragment,bA),bA.forEach(t),vNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(dx.$$.fragment,Zl),FNr=i(Zl),rMe=n(Zl,"P",{});var U9t=s(rMe);TNr=r(U9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U9t.forEach(t),MNr=i(Zl),vn=n(Zl,"P",{});var vA=s(vn);ENr=r(vA,"The model class to instantiate is selected based on the "),tMe=n(vA,"CODE",{});var J9t=s(tMe);CNr=r(J9t,"model_type"),J9t.forEach(t),wNr=r(vA,` property of the config object (either
passed as an argument or loaded from `),aMe=n(vA,"CODE",{});var Y9t=s(aMe);ANr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),yNr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(vA,"CODE",{});var K9t=s(nMe);LNr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),xNr=r(vA,":"),vA.forEach(t),$Nr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);f0=n(qe,"LI",{});var HNe=s(f0);sMe=n(HNe,"STRONG",{});var Z9t=s(sMe);kNr=r(Z9t,"albert"),Z9t.forEach(t),SNr=r(HNe," \u2014 "),LK=n(HNe,"A",{href:!0});var ext=s(LK);RNr=r(ext,"FlaxAlbertForSequenceClassification"),ext.forEach(t),PNr=r(HNe," (ALBERT model)"),HNe.forEach(t),BNr=i(qe),m0=n(qe,"LI",{});var UNe=s(m0);lMe=n(UNe,"STRONG",{});var oxt=s(lMe);INr=r(oxt,"bart"),oxt.forEach(t),NNr=r(UNe," \u2014 "),xK=n(UNe,"A",{href:!0});var rxt=s(xK);qNr=r(rxt,"FlaxBartForSequenceClassification"),rxt.forEach(t),jNr=r(UNe," (BART model)"),UNe.forEach(t),DNr=i(qe),g0=n(qe,"LI",{});var JNe=s(g0);iMe=n(JNe,"STRONG",{});var txt=s(iMe);GNr=r(txt,"bert"),txt.forEach(t),ONr=r(JNe," \u2014 "),$K=n(JNe,"A",{href:!0});var axt=s($K);VNr=r(axt,"FlaxBertForSequenceClassification"),axt.forEach(t),XNr=r(JNe," (BERT model)"),JNe.forEach(t),zNr=i(qe),h0=n(qe,"LI",{});var YNe=s(h0);dMe=n(YNe,"STRONG",{});var nxt=s(dMe);WNr=r(nxt,"big_bird"),nxt.forEach(t),QNr=r(YNe," \u2014 "),kK=n(YNe,"A",{href:!0});var sxt=s(kK);HNr=r(sxt,"FlaxBigBirdForSequenceClassification"),sxt.forEach(t),UNr=r(YNe," (BigBird model)"),YNe.forEach(t),JNr=i(qe),p0=n(qe,"LI",{});var KNe=s(p0);cMe=n(KNe,"STRONG",{});var lxt=s(cMe);YNr=r(lxt,"distilbert"),lxt.forEach(t),KNr=r(KNe," \u2014 "),SK=n(KNe,"A",{href:!0});var ixt=s(SK);ZNr=r(ixt,"FlaxDistilBertForSequenceClassification"),ixt.forEach(t),eqr=r(KNe," (DistilBERT model)"),KNe.forEach(t),oqr=i(qe),_0=n(qe,"LI",{});var ZNe=s(_0);fMe=n(ZNe,"STRONG",{});var dxt=s(fMe);rqr=r(dxt,"electra"),dxt.forEach(t),tqr=r(ZNe," \u2014 "),RK=n(ZNe,"A",{href:!0});var cxt=s(RK);aqr=r(cxt,"FlaxElectraForSequenceClassification"),cxt.forEach(t),nqr=r(ZNe," (ELECTRA model)"),ZNe.forEach(t),sqr=i(qe),u0=n(qe,"LI",{});var eqe=s(u0);mMe=n(eqe,"STRONG",{});var fxt=s(mMe);lqr=r(fxt,"mbart"),fxt.forEach(t),iqr=r(eqe," \u2014 "),PK=n(eqe,"A",{href:!0});var mxt=s(PK);dqr=r(mxt,"FlaxMBartForSequenceClassification"),mxt.forEach(t),cqr=r(eqe," (mBART model)"),eqe.forEach(t),fqr=i(qe),b0=n(qe,"LI",{});var oqe=s(b0);gMe=n(oqe,"STRONG",{});var gxt=s(gMe);mqr=r(gxt,"roberta"),gxt.forEach(t),gqr=r(oqe," \u2014 "),BK=n(oqe,"A",{href:!0});var hxt=s(BK);hqr=r(hxt,"FlaxRobertaForSequenceClassification"),hxt.forEach(t),pqr=r(oqe," (RoBERTa model)"),oqe.forEach(t),_qr=i(qe),v0=n(qe,"LI",{});var rqe=s(v0);hMe=n(rqe,"STRONG",{});var pxt=s(hMe);uqr=r(pxt,"roformer"),pxt.forEach(t),bqr=r(rqe," \u2014 "),IK=n(rqe,"A",{href:!0});var _xt=s(IK);vqr=r(_xt,"FlaxRoFormerForSequenceClassification"),_xt.forEach(t),Fqr=r(rqe," (RoFormer model)"),rqe.forEach(t),Tqr=i(qe),F0=n(qe,"LI",{});var tqe=s(F0);pMe=n(tqe,"STRONG",{});var uxt=s(pMe);Mqr=r(uxt,"xlm-roberta"),uxt.forEach(t),Eqr=r(tqe," \u2014 "),NK=n(tqe,"A",{href:!0});var bxt=s(NK);Cqr=r(bxt,"FlaxXLMRobertaForSequenceClassification"),bxt.forEach(t),wqr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),qe.forEach(t),Aqr=i(Zl),T(T0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),wDe=i(f),Hc=n(f,"H2",{class:!0});var SOe=s(Hc);M0=n(SOe,"A",{id:!0,class:!0,href:!0});var vxt=s(M0);_Me=n(vxt,"SPAN",{});var Fxt=s(_Me);T(cx.$$.fragment,Fxt),Fxt.forEach(t),vxt.forEach(t),yqr=i(SOe),uMe=n(SOe,"SPAN",{});var Txt=s(uMe);Lqr=r(Txt,"FlaxAutoModelForQuestionAnswering"),Txt.forEach(t),SOe.forEach(t),ADe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(fx.$$.fragment,ei),xqr=i(ei),Uc=n(ei,"P",{});var moe=s(Uc);$qr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=n(moe,"A",{href:!0});var Mxt=s(qK);kqr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),Sqr=r(moe," class method or the "),jK=n(moe,"A",{href:!0});var Ext=s(jK);Rqr=r(Ext,"from_config()"),Ext.forEach(t),Pqr=r(moe,` class
method.`),moe.forEach(t),Bqr=i(ei),mx=n(ei,"P",{});var ROe=s(mx);Iqr=r(ROe,"This class cannot be instantiated directly using "),bMe=n(ROe,"CODE",{});var Cxt=s(bMe);Nqr=r(Cxt,"__init__()"),Cxt.forEach(t),qqr=r(ROe," (throws an error)."),ROe.forEach(t),jqr=i(ei),Ht=n(ei,"DIV",{class:!0});var FA=s(Ht);T(gx.$$.fragment,FA),Dqr=i(FA),vMe=n(FA,"P",{});var wxt=s(vMe);Gqr=r(wxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wxt.forEach(t),Oqr=i(FA),Jc=n(FA,"P",{});var goe=s(Jc);Vqr=r(goe,`Note:
Loading a model from its configuration file does `),FMe=n(goe,"STRONG",{});var Axt=s(FMe);Xqr=r(Axt,"not"),Axt.forEach(t),zqr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(goe,"A",{href:!0});var yxt=s(DK);Wqr=r(yxt,"from_pretrained()"),yxt.forEach(t),Qqr=r(goe," to load the model weights."),goe.forEach(t),Hqr=i(FA),T(E0.$$.fragment,FA),FA.forEach(t),Uqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(hx.$$.fragment,oi),Jqr=i(oi),TMe=n(oi,"P",{});var Lxt=s(TMe);Yqr=r(Lxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lxt.forEach(t),Kqr=i(oi),Fn=n(oi,"P",{});var TA=s(Fn);Zqr=r(TA,"The model class to instantiate is selected based on the "),MMe=n(TA,"CODE",{});var xxt=s(MMe);ejr=r(xxt,"model_type"),xxt.forEach(t),ojr=r(TA,` property of the config object (either
passed as an argument or loaded from `),EMe=n(TA,"CODE",{});var $xt=s(EMe);rjr=r($xt,"pretrained_model_name_or_path"),$xt.forEach(t),tjr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(TA,"CODE",{});var kxt=s(CMe);ajr=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),njr=r(TA,":"),TA.forEach(t),sjr=i(oi),ke=n(oi,"UL",{});var je=s(ke);C0=n(je,"LI",{});var aqe=s(C0);wMe=n(aqe,"STRONG",{});var Sxt=s(wMe);ljr=r(Sxt,"albert"),Sxt.forEach(t),ijr=r(aqe," \u2014 "),GK=n(aqe,"A",{href:!0});var Rxt=s(GK);djr=r(Rxt,"FlaxAlbertForQuestionAnswering"),Rxt.forEach(t),cjr=r(aqe," (ALBERT model)"),aqe.forEach(t),fjr=i(je),w0=n(je,"LI",{});var nqe=s(w0);AMe=n(nqe,"STRONG",{});var Pxt=s(AMe);mjr=r(Pxt,"bart"),Pxt.forEach(t),gjr=r(nqe," \u2014 "),OK=n(nqe,"A",{href:!0});var Bxt=s(OK);hjr=r(Bxt,"FlaxBartForQuestionAnswering"),Bxt.forEach(t),pjr=r(nqe," (BART model)"),nqe.forEach(t),_jr=i(je),A0=n(je,"LI",{});var sqe=s(A0);yMe=n(sqe,"STRONG",{});var Ixt=s(yMe);ujr=r(Ixt,"bert"),Ixt.forEach(t),bjr=r(sqe," \u2014 "),VK=n(sqe,"A",{href:!0});var Nxt=s(VK);vjr=r(Nxt,"FlaxBertForQuestionAnswering"),Nxt.forEach(t),Fjr=r(sqe," (BERT model)"),sqe.forEach(t),Tjr=i(je),y0=n(je,"LI",{});var lqe=s(y0);LMe=n(lqe,"STRONG",{});var qxt=s(LMe);Mjr=r(qxt,"big_bird"),qxt.forEach(t),Ejr=r(lqe," \u2014 "),XK=n(lqe,"A",{href:!0});var jxt=s(XK);Cjr=r(jxt,"FlaxBigBirdForQuestionAnswering"),jxt.forEach(t),wjr=r(lqe," (BigBird model)"),lqe.forEach(t),Ajr=i(je),L0=n(je,"LI",{});var iqe=s(L0);xMe=n(iqe,"STRONG",{});var Dxt=s(xMe);yjr=r(Dxt,"distilbert"),Dxt.forEach(t),Ljr=r(iqe," \u2014 "),zK=n(iqe,"A",{href:!0});var Gxt=s(zK);xjr=r(Gxt,"FlaxDistilBertForQuestionAnswering"),Gxt.forEach(t),$jr=r(iqe," (DistilBERT model)"),iqe.forEach(t),kjr=i(je),x0=n(je,"LI",{});var dqe=s(x0);$Me=n(dqe,"STRONG",{});var Oxt=s($Me);Sjr=r(Oxt,"electra"),Oxt.forEach(t),Rjr=r(dqe," \u2014 "),WK=n(dqe,"A",{href:!0});var Vxt=s(WK);Pjr=r(Vxt,"FlaxElectraForQuestionAnswering"),Vxt.forEach(t),Bjr=r(dqe," (ELECTRA model)"),dqe.forEach(t),Ijr=i(je),$0=n(je,"LI",{});var cqe=s($0);kMe=n(cqe,"STRONG",{});var Xxt=s(kMe);Njr=r(Xxt,"mbart"),Xxt.forEach(t),qjr=r(cqe," \u2014 "),QK=n(cqe,"A",{href:!0});var zxt=s(QK);jjr=r(zxt,"FlaxMBartForQuestionAnswering"),zxt.forEach(t),Djr=r(cqe," (mBART model)"),cqe.forEach(t),Gjr=i(je),k0=n(je,"LI",{});var fqe=s(k0);SMe=n(fqe,"STRONG",{});var Wxt=s(SMe);Ojr=r(Wxt,"roberta"),Wxt.forEach(t),Vjr=r(fqe," \u2014 "),HK=n(fqe,"A",{href:!0});var Qxt=s(HK);Xjr=r(Qxt,"FlaxRobertaForQuestionAnswering"),Qxt.forEach(t),zjr=r(fqe," (RoBERTa model)"),fqe.forEach(t),Wjr=i(je),S0=n(je,"LI",{});var mqe=s(S0);RMe=n(mqe,"STRONG",{});var Hxt=s(RMe);Qjr=r(Hxt,"roformer"),Hxt.forEach(t),Hjr=r(mqe," \u2014 "),UK=n(mqe,"A",{href:!0});var Uxt=s(UK);Ujr=r(Uxt,"FlaxRoFormerForQuestionAnswering"),Uxt.forEach(t),Jjr=r(mqe," (RoFormer model)"),mqe.forEach(t),Yjr=i(je),R0=n(je,"LI",{});var gqe=s(R0);PMe=n(gqe,"STRONG",{});var Jxt=s(PMe);Kjr=r(Jxt,"xlm-roberta"),Jxt.forEach(t),Zjr=r(gqe," \u2014 "),JK=n(gqe,"A",{href:!0});var Yxt=s(JK);eDr=r(Yxt,"FlaxXLMRobertaForQuestionAnswering"),Yxt.forEach(t),oDr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),je.forEach(t),rDr=i(oi),T(P0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),yDe=i(f),Yc=n(f,"H2",{class:!0});var POe=s(Yc);B0=n(POe,"A",{id:!0,class:!0,href:!0});var Kxt=s(B0);BMe=n(Kxt,"SPAN",{});var Zxt=s(BMe);T(px.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),tDr=i(POe),IMe=n(POe,"SPAN",{});var e$t=s(IMe);aDr=r(e$t,"FlaxAutoModelForTokenClassification"),e$t.forEach(t),POe.forEach(t),LDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(_x.$$.fragment,ri),nDr=i(ri),Kc=n(ri,"P",{});var hoe=s(Kc);sDr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=n(hoe,"A",{href:!0});var o$t=s(YK);lDr=r(o$t,"from_pretrained()"),o$t.forEach(t),iDr=r(hoe," class method or the "),KK=n(hoe,"A",{href:!0});var r$t=s(KK);dDr=r(r$t,"from_config()"),r$t.forEach(t),cDr=r(hoe,` class
method.`),hoe.forEach(t),fDr=i(ri),ux=n(ri,"P",{});var BOe=s(ux);mDr=r(BOe,"This class cannot be instantiated directly using "),NMe=n(BOe,"CODE",{});var t$t=s(NMe);gDr=r(t$t,"__init__()"),t$t.forEach(t),hDr=r(BOe," (throws an error)."),BOe.forEach(t),pDr=i(ri),Ut=n(ri,"DIV",{class:!0});var MA=s(Ut);T(bx.$$.fragment,MA),_Dr=i(MA),qMe=n(MA,"P",{});var a$t=s(qMe);uDr=r(a$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),a$t.forEach(t),bDr=i(MA),Zc=n(MA,"P",{});var poe=s(Zc);vDr=r(poe,`Note:
Loading a model from its configuration file does `),jMe=n(poe,"STRONG",{});var n$t=s(jMe);FDr=r(n$t,"not"),n$t.forEach(t),TDr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(poe,"A",{href:!0});var s$t=s(ZK);MDr=r(s$t,"from_pretrained()"),s$t.forEach(t),EDr=r(poe," to load the model weights."),poe.forEach(t),CDr=i(MA),T(I0.$$.fragment,MA),MA.forEach(t),wDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(vx.$$.fragment,ti),ADr=i(ti),DMe=n(ti,"P",{});var l$t=s(DMe);yDr=r(l$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),l$t.forEach(t),LDr=i(ti),Tn=n(ti,"P",{});var EA=s(Tn);xDr=r(EA,"The model class to instantiate is selected based on the "),GMe=n(EA,"CODE",{});var i$t=s(GMe);$Dr=r(i$t,"model_type"),i$t.forEach(t),kDr=r(EA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(EA,"CODE",{});var d$t=s(OMe);SDr=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),RDr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(EA,"CODE",{});var c$t=s(VMe);PDr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),BDr=r(EA,":"),EA.forEach(t),IDr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);N0=n(Fo,"LI",{});var hqe=s(N0);XMe=n(hqe,"STRONG",{});var f$t=s(XMe);NDr=r(f$t,"albert"),f$t.forEach(t),qDr=r(hqe," \u2014 "),eZ=n(hqe,"A",{href:!0});var m$t=s(eZ);jDr=r(m$t,"FlaxAlbertForTokenClassification"),m$t.forEach(t),DDr=r(hqe," (ALBERT model)"),hqe.forEach(t),GDr=i(Fo),q0=n(Fo,"LI",{});var pqe=s(q0);zMe=n(pqe,"STRONG",{});var g$t=s(zMe);ODr=r(g$t,"bert"),g$t.forEach(t),VDr=r(pqe," \u2014 "),oZ=n(pqe,"A",{href:!0});var h$t=s(oZ);XDr=r(h$t,"FlaxBertForTokenClassification"),h$t.forEach(t),zDr=r(pqe," (BERT model)"),pqe.forEach(t),WDr=i(Fo),j0=n(Fo,"LI",{});var _qe=s(j0);WMe=n(_qe,"STRONG",{});var p$t=s(WMe);QDr=r(p$t,"big_bird"),p$t.forEach(t),HDr=r(_qe," \u2014 "),rZ=n(_qe,"A",{href:!0});var _$t=s(rZ);UDr=r(_$t,"FlaxBigBirdForTokenClassification"),_$t.forEach(t),JDr=r(_qe," (BigBird model)"),_qe.forEach(t),YDr=i(Fo),D0=n(Fo,"LI",{});var uqe=s(D0);QMe=n(uqe,"STRONG",{});var u$t=s(QMe);KDr=r(u$t,"distilbert"),u$t.forEach(t),ZDr=r(uqe," \u2014 "),tZ=n(uqe,"A",{href:!0});var b$t=s(tZ);eGr=r(b$t,"FlaxDistilBertForTokenClassification"),b$t.forEach(t),oGr=r(uqe," (DistilBERT model)"),uqe.forEach(t),rGr=i(Fo),G0=n(Fo,"LI",{});var bqe=s(G0);HMe=n(bqe,"STRONG",{});var v$t=s(HMe);tGr=r(v$t,"electra"),v$t.forEach(t),aGr=r(bqe," \u2014 "),aZ=n(bqe,"A",{href:!0});var F$t=s(aZ);nGr=r(F$t,"FlaxElectraForTokenClassification"),F$t.forEach(t),sGr=r(bqe," (ELECTRA model)"),bqe.forEach(t),lGr=i(Fo),O0=n(Fo,"LI",{});var vqe=s(O0);UMe=n(vqe,"STRONG",{});var T$t=s(UMe);iGr=r(T$t,"roberta"),T$t.forEach(t),dGr=r(vqe," \u2014 "),nZ=n(vqe,"A",{href:!0});var M$t=s(nZ);cGr=r(M$t,"FlaxRobertaForTokenClassification"),M$t.forEach(t),fGr=r(vqe," (RoBERTa model)"),vqe.forEach(t),mGr=i(Fo),V0=n(Fo,"LI",{});var Fqe=s(V0);JMe=n(Fqe,"STRONG",{});var E$t=s(JMe);gGr=r(E$t,"roformer"),E$t.forEach(t),hGr=r(Fqe," \u2014 "),sZ=n(Fqe,"A",{href:!0});var C$t=s(sZ);pGr=r(C$t,"FlaxRoFormerForTokenClassification"),C$t.forEach(t),_Gr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),uGr=i(Fo),X0=n(Fo,"LI",{});var Tqe=s(X0);YMe=n(Tqe,"STRONG",{});var w$t=s(YMe);bGr=r(w$t,"xlm-roberta"),w$t.forEach(t),vGr=r(Tqe," \u2014 "),lZ=n(Tqe,"A",{href:!0});var A$t=s(lZ);FGr=r(A$t,"FlaxXLMRobertaForTokenClassification"),A$t.forEach(t),TGr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),Fo.forEach(t),MGr=i(ti),T(z0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),xDe=i(f),ef=n(f,"H2",{class:!0});var IOe=s(ef);W0=n(IOe,"A",{id:!0,class:!0,href:!0});var y$t=s(W0);KMe=n(y$t,"SPAN",{});var L$t=s(KMe);T(Fx.$$.fragment,L$t),L$t.forEach(t),y$t.forEach(t),EGr=i(IOe),ZMe=n(IOe,"SPAN",{});var x$t=s(ZMe);CGr=r(x$t,"FlaxAutoModelForMultipleChoice"),x$t.forEach(t),IOe.forEach(t),$De=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Tx.$$.fragment,ai),wGr=i(ai),of=n(ai,"P",{});var _oe=s(of);AGr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=n(_oe,"A",{href:!0});var $$t=s(iZ);yGr=r($$t,"from_pretrained()"),$$t.forEach(t),LGr=r(_oe," class method or the "),dZ=n(_oe,"A",{href:!0});var k$t=s(dZ);xGr=r(k$t,"from_config()"),k$t.forEach(t),$Gr=r(_oe,` class
method.`),_oe.forEach(t),kGr=i(ai),Mx=n(ai,"P",{});var NOe=s(Mx);SGr=r(NOe,"This class cannot be instantiated directly using "),eEe=n(NOe,"CODE",{});var S$t=s(eEe);RGr=r(S$t,"__init__()"),S$t.forEach(t),PGr=r(NOe," (throws an error)."),NOe.forEach(t),BGr=i(ai),Jt=n(ai,"DIV",{class:!0});var CA=s(Jt);T(Ex.$$.fragment,CA),IGr=i(CA),oEe=n(CA,"P",{});var R$t=s(oEe);NGr=r(R$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R$t.forEach(t),qGr=i(CA),rf=n(CA,"P",{});var uoe=s(rf);jGr=r(uoe,`Note:
Loading a model from its configuration file does `),rEe=n(uoe,"STRONG",{});var P$t=s(rEe);DGr=r(P$t,"not"),P$t.forEach(t),GGr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(uoe,"A",{href:!0});var B$t=s(cZ);OGr=r(B$t,"from_pretrained()"),B$t.forEach(t),VGr=r(uoe," to load the model weights."),uoe.forEach(t),XGr=i(CA),T(Q0.$$.fragment,CA),CA.forEach(t),zGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Cx.$$.fragment,ni),WGr=i(ni),tEe=n(ni,"P",{});var I$t=s(tEe);QGr=r(I$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I$t.forEach(t),HGr=i(ni),Mn=n(ni,"P",{});var wA=s(Mn);UGr=r(wA,"The model class to instantiate is selected based on the "),aEe=n(wA,"CODE",{});var N$t=s(aEe);JGr=r(N$t,"model_type"),N$t.forEach(t),YGr=r(wA,` property of the config object (either
passed as an argument or loaded from `),nEe=n(wA,"CODE",{});var q$t=s(nEe);KGr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),ZGr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(wA,"CODE",{});var j$t=s(sEe);eOr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),oOr=r(wA,":"),wA.forEach(t),rOr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);H0=n(To,"LI",{});var Mqe=s(H0);lEe=n(Mqe,"STRONG",{});var D$t=s(lEe);tOr=r(D$t,"albert"),D$t.forEach(t),aOr=r(Mqe," \u2014 "),fZ=n(Mqe,"A",{href:!0});var G$t=s(fZ);nOr=r(G$t,"FlaxAlbertForMultipleChoice"),G$t.forEach(t),sOr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),lOr=i(To),U0=n(To,"LI",{});var Eqe=s(U0);iEe=n(Eqe,"STRONG",{});var O$t=s(iEe);iOr=r(O$t,"bert"),O$t.forEach(t),dOr=r(Eqe," \u2014 "),mZ=n(Eqe,"A",{href:!0});var V$t=s(mZ);cOr=r(V$t,"FlaxBertForMultipleChoice"),V$t.forEach(t),fOr=r(Eqe," (BERT model)"),Eqe.forEach(t),mOr=i(To),J0=n(To,"LI",{});var Cqe=s(J0);dEe=n(Cqe,"STRONG",{});var X$t=s(dEe);gOr=r(X$t,"big_bird"),X$t.forEach(t),hOr=r(Cqe," \u2014 "),gZ=n(Cqe,"A",{href:!0});var z$t=s(gZ);pOr=r(z$t,"FlaxBigBirdForMultipleChoice"),z$t.forEach(t),_Or=r(Cqe," (BigBird model)"),Cqe.forEach(t),uOr=i(To),Y0=n(To,"LI",{});var wqe=s(Y0);cEe=n(wqe,"STRONG",{});var W$t=s(cEe);bOr=r(W$t,"distilbert"),W$t.forEach(t),vOr=r(wqe," \u2014 "),hZ=n(wqe,"A",{href:!0});var Q$t=s(hZ);FOr=r(Q$t,"FlaxDistilBertForMultipleChoice"),Q$t.forEach(t),TOr=r(wqe," (DistilBERT model)"),wqe.forEach(t),MOr=i(To),K0=n(To,"LI",{});var Aqe=s(K0);fEe=n(Aqe,"STRONG",{});var H$t=s(fEe);EOr=r(H$t,"electra"),H$t.forEach(t),COr=r(Aqe," \u2014 "),pZ=n(Aqe,"A",{href:!0});var U$t=s(pZ);wOr=r(U$t,"FlaxElectraForMultipleChoice"),U$t.forEach(t),AOr=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),yOr=i(To),Z0=n(To,"LI",{});var yqe=s(Z0);mEe=n(yqe,"STRONG",{});var J$t=s(mEe);LOr=r(J$t,"roberta"),J$t.forEach(t),xOr=r(yqe," \u2014 "),_Z=n(yqe,"A",{href:!0});var Y$t=s(_Z);$Or=r(Y$t,"FlaxRobertaForMultipleChoice"),Y$t.forEach(t),kOr=r(yqe," (RoBERTa model)"),yqe.forEach(t),SOr=i(To),ew=n(To,"LI",{});var Lqe=s(ew);gEe=n(Lqe,"STRONG",{});var K$t=s(gEe);ROr=r(K$t,"roformer"),K$t.forEach(t),POr=r(Lqe," \u2014 "),uZ=n(Lqe,"A",{href:!0});var Z$t=s(uZ);BOr=r(Z$t,"FlaxRoFormerForMultipleChoice"),Z$t.forEach(t),IOr=r(Lqe," (RoFormer model)"),Lqe.forEach(t),NOr=i(To),ow=n(To,"LI",{});var xqe=s(ow);hEe=n(xqe,"STRONG",{});var ekt=s(hEe);qOr=r(ekt,"xlm-roberta"),ekt.forEach(t),jOr=r(xqe," \u2014 "),bZ=n(xqe,"A",{href:!0});var okt=s(bZ);DOr=r(okt,"FlaxXLMRobertaForMultipleChoice"),okt.forEach(t),GOr=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),To.forEach(t),OOr=i(ni),T(rw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),kDe=i(f),tf=n(f,"H2",{class:!0});var qOe=s(tf);tw=n(qOe,"A",{id:!0,class:!0,href:!0});var rkt=s(tw);pEe=n(rkt,"SPAN",{});var tkt=s(pEe);T(wx.$$.fragment,tkt),tkt.forEach(t),rkt.forEach(t),VOr=i(qOe),_Ee=n(qOe,"SPAN",{});var akt=s(_Ee);XOr=r(akt,"FlaxAutoModelForNextSentencePrediction"),akt.forEach(t),qOe.forEach(t),SDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Ax.$$.fragment,si),zOr=i(si),af=n(si,"P",{});var boe=s(af);WOr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=n(boe,"A",{href:!0});var nkt=s(vZ);QOr=r(nkt,"from_pretrained()"),nkt.forEach(t),HOr=r(boe," class method or the "),FZ=n(boe,"A",{href:!0});var skt=s(FZ);UOr=r(skt,"from_config()"),skt.forEach(t),JOr=r(boe,` class
method.`),boe.forEach(t),YOr=i(si),yx=n(si,"P",{});var jOe=s(yx);KOr=r(jOe,"This class cannot be instantiated directly using "),uEe=n(jOe,"CODE",{});var lkt=s(uEe);ZOr=r(lkt,"__init__()"),lkt.forEach(t),eVr=r(jOe," (throws an error)."),jOe.forEach(t),oVr=i(si),Yt=n(si,"DIV",{class:!0});var AA=s(Yt);T(Lx.$$.fragment,AA),rVr=i(AA),bEe=n(AA,"P",{});var ikt=s(bEe);tVr=r(ikt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ikt.forEach(t),aVr=i(AA),nf=n(AA,"P",{});var voe=s(nf);nVr=r(voe,`Note:
Loading a model from its configuration file does `),vEe=n(voe,"STRONG",{});var dkt=s(vEe);sVr=r(dkt,"not"),dkt.forEach(t),lVr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(voe,"A",{href:!0});var ckt=s(TZ);iVr=r(ckt,"from_pretrained()"),ckt.forEach(t),dVr=r(voe," to load the model weights."),voe.forEach(t),cVr=i(AA),T(aw.$$.fragment,AA),AA.forEach(t),fVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(xx.$$.fragment,li),mVr=i(li),FEe=n(li,"P",{});var fkt=s(FEe);gVr=r(fkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fkt.forEach(t),hVr=i(li),En=n(li,"P",{});var yA=s(En);pVr=r(yA,"The model class to instantiate is selected based on the "),TEe=n(yA,"CODE",{});var mkt=s(TEe);_Vr=r(mkt,"model_type"),mkt.forEach(t),uVr=r(yA,` property of the config object (either
passed as an argument or loaded from `),MEe=n(yA,"CODE",{});var gkt=s(MEe);bVr=r(gkt,"pretrained_model_name_or_path"),gkt.forEach(t),vVr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(yA,"CODE",{});var hkt=s(EEe);FVr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),TVr=r(yA,":"),yA.forEach(t),MVr=i(li),CEe=n(li,"UL",{});var pkt=s(CEe);nw=n(pkt,"LI",{});var $qe=s(nw);wEe=n($qe,"STRONG",{});var _kt=s(wEe);EVr=r(_kt,"bert"),_kt.forEach(t),CVr=r($qe," \u2014 "),MZ=n($qe,"A",{href:!0});var ukt=s(MZ);wVr=r(ukt,"FlaxBertForNextSentencePrediction"),ukt.forEach(t),AVr=r($qe," (BERT model)"),$qe.forEach(t),pkt.forEach(t),yVr=i(li),T(sw.$$.fragment,li),li.forEach(t),si.forEach(t),RDe=i(f),sf=n(f,"H2",{class:!0});var DOe=s(sf);lw=n(DOe,"A",{id:!0,class:!0,href:!0});var bkt=s(lw);AEe=n(bkt,"SPAN",{});var vkt=s(AEe);T($x.$$.fragment,vkt),vkt.forEach(t),bkt.forEach(t),LVr=i(DOe),yEe=n(DOe,"SPAN",{});var Fkt=s(yEe);xVr=r(Fkt,"FlaxAutoModelForImageClassification"),Fkt.forEach(t),DOe.forEach(t),PDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(kx.$$.fragment,ii),$Vr=i(ii),lf=n(ii,"P",{});var Foe=s(lf);kVr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=n(Foe,"A",{href:!0});var Tkt=s(EZ);SVr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),RVr=r(Foe," class method or the "),CZ=n(Foe,"A",{href:!0});var Mkt=s(CZ);PVr=r(Mkt,"from_config()"),Mkt.forEach(t),BVr=r(Foe,` class
method.`),Foe.forEach(t),IVr=i(ii),Sx=n(ii,"P",{});var GOe=s(Sx);NVr=r(GOe,"This class cannot be instantiated directly using "),LEe=n(GOe,"CODE",{});var Ekt=s(LEe);qVr=r(Ekt,"__init__()"),Ekt.forEach(t),jVr=r(GOe," (throws an error)."),GOe.forEach(t),DVr=i(ii),Kt=n(ii,"DIV",{class:!0});var LA=s(Kt);T(Rx.$$.fragment,LA),GVr=i(LA),xEe=n(LA,"P",{});var Ckt=s(xEe);OVr=r(Ckt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ckt.forEach(t),VVr=i(LA),df=n(LA,"P",{});var Toe=s(df);XVr=r(Toe,`Note:
Loading a model from its configuration file does `),$Ee=n(Toe,"STRONG",{});var wkt=s($Ee);zVr=r(wkt,"not"),wkt.forEach(t),WVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Toe,"A",{href:!0});var Akt=s(wZ);QVr=r(Akt,"from_pretrained()"),Akt.forEach(t),HVr=r(Toe," to load the model weights."),Toe.forEach(t),UVr=i(LA),T(iw.$$.fragment,LA),LA.forEach(t),JVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Px.$$.fragment,di),YVr=i(di),kEe=n(di,"P",{});var ykt=s(kEe);KVr=r(ykt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ykt.forEach(t),ZVr=i(di),Cn=n(di,"P",{});var xA=s(Cn);eXr=r(xA,"The model class to instantiate is selected based on the "),SEe=n(xA,"CODE",{});var Lkt=s(SEe);oXr=r(Lkt,"model_type"),Lkt.forEach(t),rXr=r(xA,` property of the config object (either
passed as an argument or loaded from `),REe=n(xA,"CODE",{});var xkt=s(REe);tXr=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),aXr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(xA,"CODE",{});var $kt=s(PEe);nXr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),sXr=r(xA,":"),xA.forEach(t),lXr=i(di),Bx=n(di,"UL",{});var OOe=s(Bx);dw=n(OOe,"LI",{});var kqe=s(dw);BEe=n(kqe,"STRONG",{});var kkt=s(BEe);iXr=r(kkt,"beit"),kkt.forEach(t),dXr=r(kqe," \u2014 "),AZ=n(kqe,"A",{href:!0});var Skt=s(AZ);cXr=r(Skt,"FlaxBeitForImageClassification"),Skt.forEach(t),fXr=r(kqe," (BEiT model)"),kqe.forEach(t),mXr=i(OOe),cw=n(OOe,"LI",{});var Sqe=s(cw);IEe=n(Sqe,"STRONG",{});var Rkt=s(IEe);gXr=r(Rkt,"vit"),Rkt.forEach(t),hXr=r(Sqe," \u2014 "),yZ=n(Sqe,"A",{href:!0});var Pkt=s(yZ);pXr=r(Pkt,"FlaxViTForImageClassification"),Pkt.forEach(t),_Xr=r(Sqe," (ViT model)"),Sqe.forEach(t),OOe.forEach(t),uXr=i(di),T(fw.$$.fragment,di),di.forEach(t),ii.forEach(t),BDe=i(f),cf=n(f,"H2",{class:!0});var VOe=s(cf);mw=n(VOe,"A",{id:!0,class:!0,href:!0});var Bkt=s(mw);NEe=n(Bkt,"SPAN",{});var Ikt=s(NEe);T(Ix.$$.fragment,Ikt),Ikt.forEach(t),Bkt.forEach(t),bXr=i(VOe),qEe=n(VOe,"SPAN",{});var Nkt=s(qEe);vXr=r(Nkt,"FlaxAutoModelForVision2Seq"),Nkt.forEach(t),VOe.forEach(t),IDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Nx.$$.fragment,ci),FXr=i(ci),ff=n(ci,"P",{});var Moe=s(ff);TXr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=n(Moe,"A",{href:!0});var qkt=s(LZ);MXr=r(qkt,"from_pretrained()"),qkt.forEach(t),EXr=r(Moe," class method or the "),xZ=n(Moe,"A",{href:!0});var jkt=s(xZ);CXr=r(jkt,"from_config()"),jkt.forEach(t),wXr=r(Moe,` class
method.`),Moe.forEach(t),AXr=i(ci),qx=n(ci,"P",{});var XOe=s(qx);yXr=r(XOe,"This class cannot be instantiated directly using "),jEe=n(XOe,"CODE",{});var Dkt=s(jEe);LXr=r(Dkt,"__init__()"),Dkt.forEach(t),xXr=r(XOe," (throws an error)."),XOe.forEach(t),$Xr=i(ci),Zt=n(ci,"DIV",{class:!0});var $A=s(Zt);T(jx.$$.fragment,$A),kXr=i($A),DEe=n($A,"P",{});var Gkt=s(DEe);SXr=r(Gkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gkt.forEach(t),RXr=i($A),mf=n($A,"P",{});var Eoe=s(mf);PXr=r(Eoe,`Note:
Loading a model from its configuration file does `),GEe=n(Eoe,"STRONG",{});var Okt=s(GEe);BXr=r(Okt,"not"),Okt.forEach(t),IXr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Eoe,"A",{href:!0});var Vkt=s($Z);NXr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),qXr=r(Eoe," to load the model weights."),Eoe.forEach(t),jXr=i($A),T(gw.$$.fragment,$A),$A.forEach(t),DXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Dx.$$.fragment,fi),GXr=i(fi),OEe=n(fi,"P",{});var Xkt=s(OEe);OXr=r(Xkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xkt.forEach(t),VXr=i(fi),wn=n(fi,"P",{});var kA=s(wn);XXr=r(kA,"The model class to instantiate is selected based on the "),VEe=n(kA,"CODE",{});var zkt=s(VEe);zXr=r(zkt,"model_type"),zkt.forEach(t),WXr=r(kA,` property of the config object (either
passed as an argument or loaded from `),XEe=n(kA,"CODE",{});var Wkt=s(XEe);QXr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),HXr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(kA,"CODE",{});var Qkt=s(zEe);UXr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),JXr=r(kA,":"),kA.forEach(t),YXr=i(fi),WEe=n(fi,"UL",{});var Hkt=s(WEe);hw=n(Hkt,"LI",{});var Rqe=s(hw);QEe=n(Rqe,"STRONG",{});var Ukt=s(QEe);KXr=r(Ukt,"vision-encoder-decoder"),Ukt.forEach(t),ZXr=r(Rqe," \u2014 "),kZ=n(Rqe,"A",{href:!0});var Jkt=s(kZ);ezr=r(Jkt,"FlaxVisionEncoderDecoderModel"),Jkt.forEach(t),ozr=r(Rqe," (Vision Encoder decoder model)"),Rqe.forEach(t),Hkt.forEach(t),rzr=i(fi),T(pw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ePt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(sk,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(lk,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(ik,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(dk,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(ck,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(fk,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mk,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(gk,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(hk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(pk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(_k,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(uk,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(bk,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(vk,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(Fk,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(Tk,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(Mk,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(Ek,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ck,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(wk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ak,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(yk,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Lk,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(xk,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c($k,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(kk,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Sk,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c(Rk,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c(Pk,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(Bk,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ik,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Nk,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(qk,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(jk,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(Dk,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(Gk,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(Ok,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(Vk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Xk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(zk,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(Wk,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(Qk,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(Hk,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Uk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Jk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Yk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Kk,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(Zk,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(eS,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(oS,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoModel"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoModelForPreTraining"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForMaskedLM"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSeq2SeqLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForMultipleChoice"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.AutoModelForNextSentencePrediction"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.AutoModelForTokenClassification"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForQuestionAnswering"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.AutoModelForTableQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForImageClassification"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.AutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForAudioClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioFrameClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.AutoModelForCTC"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.AutoModelForAudioXVector"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.AutoModelForMaskedImageModeling"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForObjectDetection"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.AutoModelForImageSegmentation"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.AutoModelForSemanticSegmentation"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForInstanceSegmentation"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.TFAutoModel"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.TFAutoModelForPreTraining"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.TFAutoModelForCausalLM"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.TFAutoModelForImageClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForMaskedLM"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForSequenceClassification"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForMultipleChoice"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForTokenClassification"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForQuestionAnswering"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForVision2Seq"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.FlaxAutoModel"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.FlaxAutoModelForCausalLM"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForPreTraining"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModelForMaskedLM"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForTokenClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForImageClassification"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yZ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForVision2Seq"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,tt,u),e(tt,gi),e(tt,hi),e(hi,SA),e(tt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,RA),e(We,Ln),e(We,xn),e(xn,PA),e(We,_i),e(We,$n),e($n,BA),e(We,ui),b(f,bf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ek),e(Ae,bi),e(bi,ok),e(Ae,rk),b(f,Eo,u),b(f,Aa,u),e(Aa,tk),e(Aa,vf),e(vf,ak),e(Aa,zOe),b(f,Pqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Coe),M(IA,Coe,null),e(vi,WOe),e(vi,woe),e(woe,QOe),b(f,Bqe,u),b(f,kn,u),e(kn,HOe),e(kn,Aoe),e(Aoe,UOe),e(kn,JOe),e(kn,yoe),e(yoe,YOe),e(kn,KOe),b(f,Iqe,u),M(NA,f,u),b(f,Nqe,u),b(f,nk,u),e(nk,ZOe),b(f,qqe,u),M(Tf,f,u),b(f,jqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Loe),M(qA,Loe,null),e(Fi,eVe),e(Fi,xoe),e(xoe,oVe),b(f,Dqe,u),b(f,Co,u),M(jA,Co,null),e(Co,rVe),e(Co,DA),e(DA,tVe),e(DA,sk),e(sk,aVe),e(DA,nVe),e(Co,sVe),e(Co,GA),e(GA,lVe),e(GA,$oe),e($oe,iVe),e(GA,dVe),e(Co,cVe),e(Co,Er),M(OA,Er,null),e(Er,fVe),e(Er,koe),e(koe,mVe),e(Er,gVe),e(Er,Ti),e(Ti,hVe),e(Ti,Soe),e(Soe,pVe),e(Ti,_Ve),e(Ti,Roe),e(Roe,uVe),e(Ti,bVe),e(Er,vVe),e(Er,A),e(A,Ef),e(Ef,Poe),e(Poe,FVe),e(Ef,TVe),e(Ef,lk),e(lk,MVe),e(Ef,EVe),e(A,CVe),e(A,Cf),e(Cf,Boe),e(Boe,wVe),e(Cf,AVe),e(Cf,ik),e(ik,yVe),e(Cf,LVe),e(A,xVe),e(A,wf),e(wf,Ioe),e(Ioe,$Ve),e(wf,kVe),e(wf,dk),e(dk,SVe),e(wf,RVe),e(A,PVe),e(A,Af),e(Af,Noe),e(Noe,BVe),e(Af,IVe),e(Af,ck),e(ck,NVe),e(Af,qVe),e(A,jVe),e(A,yf),e(yf,qoe),e(qoe,DVe),e(yf,GVe),e(yf,fk),e(fk,OVe),e(yf,VVe),e(A,XVe),e(A,Lf),e(Lf,joe),e(joe,zVe),e(Lf,WVe),e(Lf,mk),e(mk,QVe),e(Lf,HVe),e(A,UVe),e(A,xf),e(xf,Doe),e(Doe,JVe),e(xf,YVe),e(xf,gk),e(gk,KVe),e(xf,ZVe),e(A,eXe),e(A,$f),e($f,Goe),e(Goe,oXe),e($f,rXe),e($f,hk),e(hk,tXe),e($f,aXe),e(A,nXe),e(A,kf),e(kf,Ooe),e(Ooe,sXe),e(kf,lXe),e(kf,pk),e(pk,iXe),e(kf,dXe),e(A,cXe),e(A,Sf),e(Sf,Voe),e(Voe,fXe),e(Sf,mXe),e(Sf,_k),e(_k,gXe),e(Sf,hXe),e(A,pXe),e(A,Rf),e(Rf,Xoe),e(Xoe,_Xe),e(Rf,uXe),e(Rf,uk),e(uk,bXe),e(Rf,vXe),e(A,FXe),e(A,Pf),e(Pf,zoe),e(zoe,TXe),e(Pf,MXe),e(Pf,bk),e(bk,EXe),e(Pf,CXe),e(A,wXe),e(A,Bf),e(Bf,Woe),e(Woe,AXe),e(Bf,yXe),e(Bf,vk),e(vk,LXe),e(Bf,xXe),e(A,$Xe),e(A,If),e(If,Qoe),e(Qoe,kXe),e(If,SXe),e(If,Fk),e(Fk,RXe),e(If,PXe),e(A,BXe),e(A,Nf),e(Nf,Hoe),e(Hoe,IXe),e(Nf,NXe),e(Nf,Tk),e(Tk,qXe),e(Nf,jXe),e(A,DXe),e(A,qf),e(qf,Uoe),e(Uoe,GXe),e(qf,OXe),e(qf,Mk),e(Mk,VXe),e(qf,XXe),e(A,zXe),e(A,jf),e(jf,Joe),e(Joe,WXe),e(jf,QXe),e(jf,Ek),e(Ek,HXe),e(jf,UXe),e(A,JXe),e(A,Df),e(Df,Yoe),e(Yoe,YXe),e(Df,KXe),e(Df,Ck),e(Ck,ZXe),e(Df,eze),e(A,oze),e(A,Gf),e(Gf,Koe),e(Koe,rze),e(Gf,tze),e(Gf,wk),e(wk,aze),e(Gf,nze),e(A,sze),e(A,Of),e(Of,Zoe),e(Zoe,lze),e(Of,ize),e(Of,Ak),e(Ak,dze),e(Of,cze),e(A,fze),e(A,Vf),e(Vf,ere),e(ere,mze),e(Vf,gze),e(Vf,yk),e(yk,hze),e(Vf,pze),e(A,_ze),e(A,Xf),e(Xf,ore),e(ore,uze),e(Xf,bze),e(Xf,Lk),e(Lk,vze),e(Xf,Fze),e(A,Tze),e(A,zf),e(zf,rre),e(rre,Mze),e(zf,Eze),e(zf,xk),e(xk,Cze),e(zf,wze),e(A,Aze),e(A,Wf),e(Wf,tre),e(tre,yze),e(Wf,Lze),e(Wf,$k),e($k,xze),e(Wf,$ze),e(A,kze),e(A,Qf),e(Qf,are),e(are,Sze),e(Qf,Rze),e(Qf,kk),e(kk,Pze),e(Qf,Bze),e(A,Ize),e(A,Hf),e(Hf,nre),e(nre,Nze),e(Hf,qze),e(Hf,Sk),e(Sk,jze),e(Hf,Dze),e(A,Gze),e(A,Uf),e(Uf,sre),e(sre,Oze),e(Uf,Vze),e(Uf,Rk),e(Rk,Xze),e(Uf,zze),e(A,Wze),e(A,Jf),e(Jf,lre),e(lre,Qze),e(Jf,Hze),e(Jf,Pk),e(Pk,Uze),e(Jf,Jze),e(A,Yze),e(A,Yf),e(Yf,ire),e(ire,Kze),e(Yf,Zze),e(Yf,Bk),e(Bk,eWe),e(Yf,oWe),e(A,rWe),e(A,Kf),e(Kf,dre),e(dre,tWe),e(Kf,aWe),e(Kf,Ik),e(Ik,nWe),e(Kf,sWe),e(A,lWe),e(A,Zf),e(Zf,cre),e(cre,iWe),e(Zf,dWe),e(Zf,Nk),e(Nk,cWe),e(Zf,fWe),e(A,mWe),e(A,em),e(em,fre),e(fre,gWe),e(em,hWe),e(em,qk),e(qk,pWe),e(em,_We),e(A,uWe),e(A,om),e(om,mre),e(mre,bWe),e(om,vWe),e(om,jk),e(jk,FWe),e(om,TWe),e(A,MWe),e(A,rm),e(rm,gre),e(gre,EWe),e(rm,CWe),e(rm,Dk),e(Dk,wWe),e(rm,AWe),e(A,yWe),e(A,tm),e(tm,hre),e(hre,LWe),e(tm,xWe),e(tm,Gk),e(Gk,$We),e(tm,kWe),e(A,SWe),e(A,am),e(am,pre),e(pre,RWe),e(am,PWe),e(am,Ok),e(Ok,BWe),e(am,IWe),e(A,NWe),e(A,nm),e(nm,_re),e(_re,qWe),e(nm,jWe),e(nm,Vk),e(Vk,DWe),e(nm,GWe),e(A,OWe),e(A,sm),e(sm,ure),e(ure,VWe),e(sm,XWe),e(sm,Xk),e(Xk,zWe),e(sm,WWe),e(A,QWe),e(A,lm),e(lm,bre),e(bre,HWe),e(lm,UWe),e(lm,zk),e(zk,JWe),e(lm,YWe),e(A,KWe),e(A,im),e(im,vre),e(vre,ZWe),e(im,eQe),e(im,Wk),e(Wk,oQe),e(im,rQe),e(A,tQe),e(A,dm),e(dm,Fre),e(Fre,aQe),e(dm,nQe),e(dm,Qk),e(Qk,sQe),e(dm,lQe),e(A,iQe),e(A,cm),e(cm,Tre),e(Tre,dQe),e(cm,cQe),e(cm,Hk),e(Hk,fQe),e(cm,mQe),e(A,gQe),e(A,fm),e(fm,Mre),e(Mre,hQe),e(fm,pQe),e(fm,Uk),e(Uk,_Qe),e(fm,uQe),e(A,bQe),e(A,mm),e(mm,Ere),e(Ere,vQe),e(mm,FQe),e(mm,Jk),e(Jk,TQe),e(mm,MQe),e(A,EQe),e(A,gm),e(gm,Cre),e(Cre,CQe),e(gm,wQe),e(gm,Yk),e(Yk,AQe),e(gm,yQe),e(A,LQe),e(A,hm),e(hm,wre),e(wre,xQe),e(hm,$Qe),e(hm,Kk),e(Kk,kQe),e(hm,SQe),e(A,RQe),e(A,pm),e(pm,Are),e(Are,PQe),e(pm,BQe),e(pm,Zk),e(Zk,IQe),e(pm,NQe),e(A,qQe),e(A,_m),e(_m,yre),e(yre,jQe),e(_m,DQe),e(_m,eS),e(eS,GQe),e(_m,OQe),e(A,VQe),e(A,um),e(um,Lre),e(Lre,XQe),e(um,zQe),e(um,oS),e(oS,WQe),e(um,QQe),e(A,HQe),e(A,bm),e(bm,xre),e(xre,UQe),e(bm,JQe),e(bm,rS),e(rS,YQe),e(bm,KQe),e(A,ZQe),e(A,vm),e(vm,$re),e($re,eHe),e(vm,oHe),e(vm,tS),e(tS,rHe),e(vm,tHe),e(A,aHe),e(A,Fm),e(Fm,kre),e(kre,nHe),e(Fm,sHe),e(Fm,aS),e(aS,lHe),e(Fm,iHe),e(A,dHe),e(A,Tm),e(Tm,Sre),e(Sre,cHe),e(Tm,fHe),e(Tm,nS),e(nS,mHe),e(Tm,gHe),e(A,hHe),e(A,Mm),e(Mm,Rre),e(Rre,pHe),e(Mm,_He),e(Mm,sS),e(sS,uHe),e(Mm,bHe),e(A,vHe),e(A,Em),e(Em,Pre),e(Pre,FHe),e(Em,THe),e(Em,lS),e(lS,MHe),e(Em,EHe),e(A,CHe),e(A,Cm),e(Cm,Bre),e(Bre,wHe),e(Cm,AHe),e(Cm,iS),e(iS,yHe),e(Cm,LHe),e(A,xHe),e(A,wm),e(wm,Ire),e(Ire,$He),e(wm,kHe),e(wm,dS),e(dS,SHe),e(wm,RHe),e(A,PHe),e(A,Am),e(Am,Nre),e(Nre,BHe),e(Am,IHe),e(Am,cS),e(cS,NHe),e(Am,qHe),e(A,jHe),e(A,ym),e(ym,qre),e(qre,DHe),e(ym,GHe),e(ym,fS),e(fS,OHe),e(ym,VHe),e(A,XHe),e(A,Lm),e(Lm,jre),e(jre,zHe),e(Lm,WHe),e(Lm,mS),e(mS,QHe),e(Lm,HHe),e(A,UHe),e(A,xm),e(xm,Dre),e(Dre,JHe),e(xm,YHe),e(xm,gS),e(gS,KHe),e(xm,ZHe),e(A,eUe),e(A,$m),e($m,Gre),e(Gre,oUe),e($m,rUe),e($m,hS),e(hS,tUe),e($m,aUe),e(A,nUe),e(A,km),e(km,Ore),e(Ore,sUe),e(km,lUe),e(km,pS),e(pS,iUe),e(km,dUe),e(A,cUe),e(A,Sm),e(Sm,Vre),e(Vre,fUe),e(Sm,mUe),e(Sm,_S),e(_S,gUe),e(Sm,hUe),e(A,pUe),e(A,Rm),e(Rm,Xre),e(Xre,_Ue),e(Rm,uUe),e(Rm,uS),e(uS,bUe),e(Rm,vUe),e(A,FUe),e(A,Pm),e(Pm,zre),e(zre,TUe),e(Pm,MUe),e(Pm,bS),e(bS,EUe),e(Pm,CUe),e(A,wUe),e(A,Bm),e(Bm,Wre),e(Wre,AUe),e(Bm,yUe),e(Bm,vS),e(vS,LUe),e(Bm,xUe),e(A,$Ue),e(A,Im),e(Im,Qre),e(Qre,kUe),e(Im,SUe),e(Im,FS),e(FS,RUe),e(Im,PUe),e(A,BUe),e(A,Nm),e(Nm,Hre),e(Hre,IUe),e(Nm,NUe),e(Nm,TS),e(TS,qUe),e(Nm,jUe),e(A,DUe),e(A,qm),e(qm,Ure),e(Ure,GUe),e(qm,OUe),e(qm,MS),e(MS,VUe),e(qm,XUe),e(A,zUe),e(A,jm),e(jm,Jre),e(Jre,WUe),e(jm,QUe),e(jm,ES),e(ES,HUe),e(jm,UUe),e(A,JUe),e(A,Dm),e(Dm,Yre),e(Yre,YUe),e(Dm,KUe),e(Dm,CS),e(CS,ZUe),e(Dm,eJe),e(A,oJe),e(A,Gm),e(Gm,Kre),e(Kre,rJe),e(Gm,tJe),e(Gm,wS),e(wS,aJe),e(Gm,nJe),e(A,sJe),e(A,Om),e(Om,Zre),e(Zre,lJe),e(Om,iJe),e(Om,AS),e(AS,dJe),e(Om,cJe),e(A,fJe),e(A,Vm),e(Vm,ete),e(ete,mJe),e(Vm,gJe),e(Vm,yS),e(yS,hJe),e(Vm,pJe),e(A,_Je),e(A,Xm),e(Xm,ote),e(ote,uJe),e(Xm,bJe),e(Xm,LS),e(LS,vJe),e(Xm,FJe),e(A,TJe),e(A,zm),e(zm,rte),e(rte,MJe),e(zm,EJe),e(zm,xS),e(xS,CJe),e(zm,wJe),e(A,AJe),e(A,Wm),e(Wm,tte),e(tte,yJe),e(Wm,LJe),e(Wm,$S),e($S,xJe),e(Wm,$Je),e(A,kJe),e(A,Qm),e(Qm,ate),e(ate,SJe),e(Qm,RJe),e(Qm,kS),e(kS,PJe),e(Qm,BJe),e(A,IJe),e(A,Hm),e(Hm,nte),e(nte,NJe),e(Hm,qJe),e(Hm,SS),e(SS,jJe),e(Hm,DJe),e(A,GJe),e(A,Um),e(Um,ste),e(ste,OJe),e(Um,VJe),e(Um,RS),e(RS,XJe),e(Um,zJe),e(A,WJe),e(A,Jm),e(Jm,lte),e(lte,QJe),e(Jm,HJe),e(Jm,PS),e(PS,UJe),e(Jm,JJe),e(A,YJe),e(A,Ym),e(Ym,ite),e(ite,KJe),e(Ym,ZJe),e(Ym,BS),e(BS,eYe),e(Ym,oYe),e(A,rYe),e(A,Km),e(Km,dte),e(dte,tYe),e(Km,aYe),e(Km,IS),e(IS,nYe),e(Km,sYe),e(A,lYe),e(A,Zm),e(Zm,cte),e(cte,iYe),e(Zm,dYe),e(Zm,NS),e(NS,cYe),e(Zm,fYe),e(A,mYe),e(A,eg),e(eg,fte),e(fte,gYe),e(eg,hYe),e(eg,qS),e(qS,pYe),e(eg,_Ye),e(A,uYe),e(A,og),e(og,mte),e(mte,bYe),e(og,vYe),e(og,jS),e(jS,FYe),e(og,TYe),e(A,MYe),e(A,rg),e(rg,gte),e(gte,EYe),e(rg,CYe),e(rg,DS),e(DS,wYe),e(rg,AYe),e(A,yYe),e(A,tg),e(tg,hte),e(hte,LYe),e(tg,xYe),e(tg,GS),e(GS,$Ye),e(tg,kYe),e(A,SYe),e(A,ag),e(ag,pte),e(pte,RYe),e(ag,PYe),e(ag,OS),e(OS,BYe),e(ag,IYe),e(A,NYe),e(A,ng),e(ng,_te),e(_te,qYe),e(ng,jYe),e(ng,VS),e(VS,DYe),e(ng,GYe),e(A,OYe),e(A,sg),e(sg,ute),e(ute,VYe),e(sg,XYe),e(sg,XS),e(XS,zYe),e(sg,WYe),e(A,QYe),e(A,lg),e(lg,bte),e(bte,HYe),e(lg,UYe),e(lg,zS),e(zS,JYe),e(lg,YYe),e(A,KYe),e(A,ig),e(ig,vte),e(vte,ZYe),e(ig,eKe),e(ig,WS),e(WS,oKe),e(ig,rKe),e(A,tKe),e(A,dg),e(dg,Fte),e(Fte,aKe),e(dg,nKe),e(dg,QS),e(QS,sKe),e(dg,lKe),e(A,iKe),e(A,cg),e(cg,Tte),e(Tte,dKe),e(cg,cKe),e(cg,HS),e(HS,fKe),e(cg,mKe),e(A,gKe),e(A,fg),e(fg,Mte),e(Mte,hKe),e(fg,pKe),e(fg,US),e(US,_Ke),e(fg,uKe),e(A,bKe),e(A,mg),e(mg,Ete),e(Ete,vKe),e(mg,FKe),e(mg,JS),e(JS,TKe),e(mg,MKe),e(A,EKe),e(A,gg),e(gg,Cte),e(Cte,CKe),e(gg,wKe),e(gg,YS),e(YS,AKe),e(gg,yKe),e(A,LKe),e(A,hg),e(hg,wte),e(wte,xKe),e(hg,$Ke),e(hg,KS),e(KS,kKe),e(hg,SKe),e(A,RKe),e(A,pg),e(pg,Ate),e(Ate,PKe),e(pg,BKe),e(pg,ZS),e(ZS,IKe),e(pg,NKe),e(A,qKe),e(A,_g),e(_g,yte),e(yte,jKe),e(_g,DKe),e(_g,eR),e(eR,GKe),e(_g,OKe),e(A,VKe),e(A,ug),e(ug,Lte),e(Lte,XKe),e(ug,zKe),e(ug,oR),e(oR,WKe),e(ug,QKe),e(A,HKe),e(A,bg),e(bg,xte),e(xte,UKe),e(bg,JKe),e(bg,rR),e(rR,YKe),e(bg,KKe),e(A,ZKe),e(A,vg),e(vg,$te),e($te,eZe),e(vg,oZe),e(vg,tR),e(tR,rZe),e(vg,tZe),e(A,aZe),e(A,Fg),e(Fg,kte),e(kte,nZe),e(Fg,sZe),e(Fg,aR),e(aR,lZe),e(Fg,iZe),e(A,dZe),e(A,Tg),e(Tg,Ste),e(Ste,cZe),e(Tg,fZe),e(Tg,nR),e(nR,mZe),e(Tg,gZe),e(A,hZe),e(A,Mg),e(Mg,Rte),e(Rte,pZe),e(Mg,_Ze),e(Mg,sR),e(sR,uZe),e(Mg,bZe),e(A,vZe),e(A,Eg),e(Eg,Pte),e(Pte,FZe),e(Eg,TZe),e(Eg,lR),e(lR,MZe),e(Eg,EZe),e(A,CZe),e(A,Cg),e(Cg,Bte),e(Bte,wZe),e(Cg,AZe),e(Cg,iR),e(iR,yZe),e(Cg,LZe),e(Er,xZe),M(wg,Er,null),e(Co,$Ze),e(Co,Ag),M(VA,Ag,null),e(Ag,kZe),e(Ag,Ite),e(Ite,SZe),b(f,Gqe,u),b(f,Mi,u),e(Mi,yg),e(yg,Nte),M(XA,Nte,null),e(Mi,RZe),e(Mi,qte),e(qte,PZe),b(f,Oqe,u),b(f,wo,u),M(zA,wo,null),e(wo,BZe),e(wo,WA),e(WA,IZe),e(WA,dR),e(dR,NZe),e(WA,qZe),e(wo,jZe),e(wo,QA),e(QA,DZe),e(QA,jte),e(jte,GZe),e(QA,OZe),e(wo,VZe),e(wo,Cr),M(HA,Cr,null),e(Cr,XZe),e(Cr,Dte),e(Dte,zZe),e(Cr,WZe),e(Cr,ya),e(ya,QZe),e(ya,Gte),e(Gte,HZe),e(ya,UZe),e(ya,Ote),e(Ote,JZe),e(ya,YZe),e(ya,Vte),e(Vte,KZe),e(ya,ZZe),e(Cr,eeo),e(Cr,k),e(k,Sn),e(Sn,Xte),e(Xte,oeo),e(Sn,reo),e(Sn,cR),e(cR,teo),e(Sn,aeo),e(Sn,fR),e(fR,neo),e(Sn,seo),e(k,leo),e(k,Rn),e(Rn,zte),e(zte,ieo),e(Rn,deo),e(Rn,mR),e(mR,ceo),e(Rn,feo),e(Rn,gR),e(gR,meo),e(Rn,geo),e(k,heo),e(k,Pn),e(Pn,Wte),e(Wte,peo),e(Pn,_eo),e(Pn,hR),e(hR,ueo),e(Pn,beo),e(Pn,pR),e(pR,veo),e(Pn,Feo),e(k,Teo),e(k,Lg),e(Lg,Qte),e(Qte,Meo),e(Lg,Eeo),e(Lg,_R),e(_R,Ceo),e(Lg,weo),e(k,Aeo),e(k,Bn),e(Bn,Hte),e(Hte,yeo),e(Bn,Leo),e(Bn,uR),e(uR,xeo),e(Bn,$eo),e(Bn,bR),e(bR,keo),e(Bn,Seo),e(k,Reo),e(k,xg),e(xg,Ute),e(Ute,Peo),e(xg,Beo),e(xg,vR),e(vR,Ieo),e(xg,Neo),e(k,qeo),e(k,$g),e($g,Jte),e(Jte,jeo),e($g,Deo),e($g,FR),e(FR,Geo),e($g,Oeo),e(k,Veo),e(k,kg),e(kg,Yte),e(Yte,Xeo),e(kg,zeo),e(kg,TR),e(TR,Weo),e(kg,Qeo),e(k,Heo),e(k,In),e(In,Kte),e(Kte,Ueo),e(In,Jeo),e(In,MR),e(MR,Yeo),e(In,Keo),e(In,ER),e(ER,Zeo),e(In,eoo),e(k,ooo),e(k,Nn),e(Nn,Zte),e(Zte,roo),e(Nn,too),e(Nn,CR),e(CR,aoo),e(Nn,noo),e(Nn,wR),e(wR,soo),e(Nn,loo),e(k,ioo),e(k,qn),e(qn,eae),e(eae,doo),e(qn,coo),e(qn,AR),e(AR,foo),e(qn,moo),e(qn,yR),e(yR,goo),e(qn,hoo),e(k,poo),e(k,Sg),e(Sg,oae),e(oae,_oo),e(Sg,uoo),e(Sg,LR),e(LR,boo),e(Sg,voo),e(k,Foo),e(k,Rg),e(Rg,rae),e(rae,Too),e(Rg,Moo),e(Rg,xR),e(xR,Eoo),e(Rg,Coo),e(k,woo),e(k,jn),e(jn,tae),e(tae,Aoo),e(jn,yoo),e(jn,$R),e($R,Loo),e(jn,xoo),e(jn,kR),e(kR,$oo),e(jn,koo),e(k,Soo),e(k,Pg),e(Pg,aae),e(aae,Roo),e(Pg,Poo),e(Pg,SR),e(SR,Boo),e(Pg,Ioo),e(k,Noo),e(k,Dn),e(Dn,nae),e(nae,qoo),e(Dn,joo),e(Dn,RR),e(RR,Doo),e(Dn,Goo),e(Dn,PR),e(PR,Ooo),e(Dn,Voo),e(k,Xoo),e(k,Gn),e(Gn,sae),e(sae,zoo),e(Gn,Woo),e(Gn,BR),e(BR,Qoo),e(Gn,Hoo),e(Gn,IR),e(IR,Uoo),e(Gn,Joo),e(k,Yoo),e(k,On),e(On,lae),e(lae,Koo),e(On,Zoo),e(On,NR),e(NR,ero),e(On,oro),e(On,qR),e(qR,rro),e(On,tro),e(k,aro),e(k,Bg),e(Bg,iae),e(iae,nro),e(Bg,sro),e(Bg,jR),e(jR,lro),e(Bg,iro),e(k,dro),e(k,Vn),e(Vn,dae),e(dae,cro),e(Vn,fro),e(Vn,DR),e(DR,mro),e(Vn,gro),e(Vn,GR),e(GR,hro),e(Vn,pro),e(k,_ro),e(k,Xn),e(Xn,cae),e(cae,uro),e(Xn,bro),e(Xn,OR),e(OR,vro),e(Xn,Fro),e(Xn,VR),e(VR,Tro),e(Xn,Mro),e(k,Ero),e(k,zn),e(zn,fae),e(fae,Cro),e(zn,wro),e(zn,XR),e(XR,Aro),e(zn,yro),e(zn,zR),e(zR,Lro),e(zn,xro),e(k,$ro),e(k,Wn),e(Wn,mae),e(mae,kro),e(Wn,Sro),e(Wn,WR),e(WR,Rro),e(Wn,Pro),e(Wn,QR),e(QR,Bro),e(Wn,Iro),e(k,Nro),e(k,Qn),e(Qn,gae),e(gae,qro),e(Qn,jro),e(Qn,HR),e(HR,Dro),e(Qn,Gro),e(Qn,UR),e(UR,Oro),e(Qn,Vro),e(k,Xro),e(k,Hn),e(Hn,hae),e(hae,zro),e(Hn,Wro),e(Hn,JR),e(JR,Qro),e(Hn,Hro),e(Hn,YR),e(YR,Uro),e(Hn,Jro),e(k,Yro),e(k,Ig),e(Ig,pae),e(pae,Kro),e(Ig,Zro),e(Ig,KR),e(KR,eto),e(Ig,oto),e(k,rto),e(k,Un),e(Un,_ae),e(_ae,tto),e(Un,ato),e(Un,ZR),e(ZR,nto),e(Un,sto),e(Un,eP),e(eP,lto),e(Un,ito),e(k,dto),e(k,Ng),e(Ng,uae),e(uae,cto),e(Ng,fto),e(Ng,oP),e(oP,mto),e(Ng,gto),e(k,hto),e(k,Jn),e(Jn,bae),e(bae,pto),e(Jn,_to),e(Jn,rP),e(rP,uto),e(Jn,bto),e(Jn,tP),e(tP,vto),e(Jn,Fto),e(k,Tto),e(k,Yn),e(Yn,vae),e(vae,Mto),e(Yn,Eto),e(Yn,aP),e(aP,Cto),e(Yn,wto),e(Yn,nP),e(nP,Ato),e(Yn,yto),e(k,Lto),e(k,Kn),e(Kn,Fae),e(Fae,xto),e(Kn,$to),e(Kn,sP),e(sP,kto),e(Kn,Sto),e(Kn,lP),e(lP,Rto),e(Kn,Pto),e(k,Bto),e(k,qg),e(qg,Tae),e(Tae,Ito),e(qg,Nto),e(qg,iP),e(iP,qto),e(qg,jto),e(k,Dto),e(k,Zn),e(Zn,Mae),e(Mae,Gto),e(Zn,Oto),e(Zn,dP),e(dP,Vto),e(Zn,Xto),e(Zn,cP),e(cP,zto),e(Zn,Wto),e(k,Qto),e(k,es),e(es,Eae),e(Eae,Hto),e(es,Uto),e(es,fP),e(fP,Jto),e(es,Yto),e(es,mP),e(mP,Kto),e(es,Zto),e(k,eao),e(k,jg),e(jg,Cae),e(Cae,oao),e(jg,rao),e(jg,gP),e(gP,tao),e(jg,aao),e(k,nao),e(k,os),e(os,wae),e(wae,sao),e(os,lao),e(os,hP),e(hP,iao),e(os,dao),e(os,pP),e(pP,cao),e(os,fao),e(k,mao),e(k,rs),e(rs,Aae),e(Aae,gao),e(rs,hao),e(rs,_P),e(_P,pao),e(rs,_ao),e(rs,uP),e(uP,uao),e(rs,bao),e(k,vao),e(k,ts),e(ts,yae),e(yae,Fao),e(ts,Tao),e(ts,bP),e(bP,Mao),e(ts,Eao),e(ts,vP),e(vP,Cao),e(ts,wao),e(k,Aao),e(k,as),e(as,Lae),e(Lae,yao),e(as,Lao),e(as,FP),e(FP,xao),e(as,$ao),e(as,TP),e(TP,kao),e(as,Sao),e(k,Rao),e(k,ns),e(ns,xae),e(xae,Pao),e(ns,Bao),e(ns,MP),e(MP,Iao),e(ns,Nao),e(ns,EP),e(EP,qao),e(ns,jao),e(k,Dao),e(k,ss),e(ss,$ae),e($ae,Gao),e(ss,Oao),e(ss,CP),e(CP,Vao),e(ss,Xao),e(ss,wP),e(wP,zao),e(ss,Wao),e(k,Qao),e(k,ls),e(ls,kae),e(kae,Hao),e(ls,Uao),e(ls,AP),e(AP,Jao),e(ls,Yao),e(ls,yP),e(yP,Kao),e(ls,Zao),e(k,eno),e(k,Dg),e(Dg,Sae),e(Sae,ono),e(Dg,rno),e(Dg,LP),e(LP,tno),e(Dg,ano),e(k,nno),e(k,is),e(is,Rae),e(Rae,sno),e(is,lno),e(is,xP),e(xP,ino),e(is,dno),e(is,$P),e($P,cno),e(is,fno),e(k,mno),e(k,Gg),e(Gg,Pae),e(Pae,gno),e(Gg,hno),e(Gg,kP),e(kP,pno),e(Gg,_no),e(k,uno),e(k,Og),e(Og,Bae),e(Bae,bno),e(Og,vno),e(Og,SP),e(SP,Fno),e(Og,Tno),e(k,Mno),e(k,ds),e(ds,Iae),e(Iae,Eno),e(ds,Cno),e(ds,RP),e(RP,wno),e(ds,Ano),e(ds,PP),e(PP,yno),e(ds,Lno),e(k,xno),e(k,cs),e(cs,Nae),e(Nae,$no),e(cs,kno),e(cs,BP),e(BP,Sno),e(cs,Rno),e(cs,IP),e(IP,Pno),e(cs,Bno),e(k,Ino),e(k,fs),e(fs,qae),e(qae,Nno),e(fs,qno),e(fs,NP),e(NP,jno),e(fs,Dno),e(fs,qP),e(qP,Gno),e(fs,Ono),e(k,Vno),e(k,Vg),e(Vg,jae),e(jae,Xno),e(Vg,zno),e(Vg,jP),e(jP,Wno),e(Vg,Qno),e(k,Hno),e(k,ms),e(ms,Dae),e(Dae,Uno),e(ms,Jno),e(ms,DP),e(DP,Yno),e(ms,Kno),e(ms,GP),e(GP,Zno),e(ms,eso),e(k,oso),e(k,gs),e(gs,Gae),e(Gae,rso),e(gs,tso),e(gs,OP),e(OP,aso),e(gs,nso),e(gs,VP),e(VP,sso),e(gs,lso),e(k,iso),e(k,hs),e(hs,Oae),e(Oae,dso),e(hs,cso),e(hs,XP),e(XP,fso),e(hs,mso),e(hs,zP),e(zP,gso),e(hs,hso),e(k,pso),e(k,ps),e(ps,Vae),e(Vae,_so),e(ps,uso),e(ps,WP),e(WP,bso),e(ps,vso),e(ps,QP),e(QP,Fso),e(ps,Tso),e(k,Mso),e(k,_s),e(_s,Xae),e(Xae,Eso),e(_s,Cso),e(_s,HP),e(HP,wso),e(_s,Aso),e(_s,UP),e(UP,yso),e(_s,Lso),e(k,xso),e(k,Xg),e(Xg,zae),e(zae,$so),e(Xg,kso),e(Xg,JP),e(JP,Sso),e(Xg,Rso),e(k,Pso),e(k,us),e(us,Wae),e(Wae,Bso),e(us,Iso),e(us,YP),e(YP,Nso),e(us,qso),e(us,KP),e(KP,jso),e(us,Dso),e(k,Gso),e(k,zg),e(zg,Qae),e(Qae,Oso),e(zg,Vso),e(zg,ZP),e(ZP,Xso),e(zg,zso),e(k,Wso),e(k,Wg),e(Wg,Hae),e(Hae,Qso),e(Wg,Hso),e(Wg,eB),e(eB,Uso),e(Wg,Jso),e(k,Yso),e(k,Qg),e(Qg,Uae),e(Uae,Kso),e(Qg,Zso),e(Qg,oB),e(oB,elo),e(Qg,olo),e(k,rlo),e(k,Hg),e(Hg,Jae),e(Jae,tlo),e(Hg,alo),e(Hg,rB),e(rB,nlo),e(Hg,slo),e(k,llo),e(k,bs),e(bs,Yae),e(Yae,ilo),e(bs,dlo),e(bs,tB),e(tB,clo),e(bs,flo),e(bs,aB),e(aB,mlo),e(bs,glo),e(k,hlo),e(k,Ug),e(Ug,Kae),e(Kae,plo),e(Ug,_lo),e(Ug,nB),e(nB,ulo),e(Ug,blo),e(k,vlo),e(k,vs),e(vs,Zae),e(Zae,Flo),e(vs,Tlo),e(vs,sB),e(sB,Mlo),e(vs,Elo),e(vs,lB),e(lB,Clo),e(vs,wlo),e(k,Alo),e(k,Fs),e(Fs,ene),e(ene,ylo),e(Fs,Llo),e(Fs,iB),e(iB,xlo),e(Fs,$lo),e(Fs,dB),e(dB,klo),e(Fs,Slo),e(k,Rlo),e(k,Ts),e(Ts,one),e(one,Plo),e(Ts,Blo),e(Ts,cB),e(cB,Ilo),e(Ts,Nlo),e(Ts,fB),e(fB,qlo),e(Ts,jlo),e(k,Dlo),e(k,Ms),e(Ms,rne),e(rne,Glo),e(Ms,Olo),e(Ms,mB),e(mB,Vlo),e(Ms,Xlo),e(Ms,gB),e(gB,zlo),e(Ms,Wlo),e(k,Qlo),e(k,Es),e(Es,tne),e(tne,Hlo),e(Es,Ulo),e(Es,hB),e(hB,Jlo),e(Es,Ylo),e(Es,pB),e(pB,Klo),e(Es,Zlo),e(k,eio),e(k,Cs),e(Cs,ane),e(ane,oio),e(Cs,rio),e(Cs,_B),e(_B,tio),e(Cs,aio),e(Cs,uB),e(uB,nio),e(Cs,sio),e(k,lio),e(k,Jg),e(Jg,nne),e(nne,iio),e(Jg,dio),e(Jg,bB),e(bB,cio),e(Jg,fio),e(k,mio),e(k,Yg),e(Yg,sne),e(sne,gio),e(Yg,hio),e(Yg,vB),e(vB,pio),e(Yg,_io),e(k,uio),e(k,ws),e(ws,lne),e(lne,bio),e(ws,vio),e(ws,FB),e(FB,Fio),e(ws,Tio),e(ws,TB),e(TB,Mio),e(ws,Eio),e(k,Cio),e(k,As),e(As,ine),e(ine,wio),e(As,Aio),e(As,MB),e(MB,yio),e(As,Lio),e(As,EB),e(EB,xio),e(As,$io),e(k,kio),e(k,ys),e(ys,dne),e(dne,Sio),e(ys,Rio),e(ys,CB),e(CB,Pio),e(ys,Bio),e(ys,wB),e(wB,Iio),e(ys,Nio),e(k,qio),e(k,Kg),e(Kg,cne),e(cne,jio),e(Kg,Dio),e(Kg,AB),e(AB,Gio),e(Kg,Oio),e(k,Vio),e(k,Zg),e(Zg,fne),e(fne,Xio),e(Zg,zio),e(Zg,yB),e(yB,Wio),e(Zg,Qio),e(k,Hio),e(k,eh),e(eh,mne),e(mne,Uio),e(eh,Jio),e(eh,LB),e(LB,Yio),e(eh,Kio),e(k,Zio),e(k,Ls),e(Ls,gne),e(gne,edo),e(Ls,odo),e(Ls,xB),e(xB,rdo),e(Ls,tdo),e(Ls,$B),e($B,ado),e(Ls,ndo),e(k,sdo),e(k,oh),e(oh,hne),e(hne,ldo),e(oh,ido),e(oh,kB),e(kB,ddo),e(oh,cdo),e(k,fdo),e(k,rh),e(rh,pne),e(pne,mdo),e(rh,gdo),e(rh,SB),e(SB,hdo),e(rh,pdo),e(k,_do),e(k,th),e(th,_ne),e(_ne,udo),e(th,bdo),e(th,RB),e(RB,vdo),e(th,Fdo),e(k,Tdo),e(k,xs),e(xs,une),e(une,Mdo),e(xs,Edo),e(xs,PB),e(PB,Cdo),e(xs,wdo),e(xs,BB),e(BB,Ado),e(xs,ydo),e(k,Ldo),e(k,ah),e(ah,bne),e(bne,xdo),e(ah,$do),e(ah,IB),e(IB,kdo),e(ah,Sdo),e(k,Rdo),e(k,nh),e(nh,vne),e(vne,Pdo),e(nh,Bdo),e(nh,NB),e(NB,Ido),e(nh,Ndo),e(k,qdo),e(k,$s),e($s,Fne),e(Fne,jdo),e($s,Ddo),e($s,qB),e(qB,Gdo),e($s,Odo),e($s,jB),e(jB,Vdo),e($s,Xdo),e(k,zdo),e(k,ks),e(ks,Tne),e(Tne,Wdo),e(ks,Qdo),e(ks,DB),e(DB,Hdo),e(ks,Udo),e(ks,GB),e(GB,Jdo),e(ks,Ydo),e(k,Kdo),e(k,Ss),e(Ss,Mne),e(Mne,Zdo),e(Ss,eco),e(Ss,OB),e(OB,oco),e(Ss,rco),e(Ss,VB),e(VB,tco),e(Ss,aco),e(k,nco),e(k,Rs),e(Rs,Ene),e(Ene,sco),e(Rs,lco),e(Rs,XB),e(XB,ico),e(Rs,dco),e(Rs,zB),e(zB,cco),e(Rs,fco),e(Cr,mco),M(sh,Cr,null),e(wo,gco),e(wo,lh),M(UA,lh,null),e(lh,hco),e(lh,Cne),e(Cne,pco),b(f,Vqe,u),b(f,Ei,u),e(Ei,ih),e(ih,wne),M(JA,wne,null),e(Ei,_co),e(Ei,Ane),e(Ane,uco),b(f,Xqe,u),b(f,Ao,u),M(YA,Ao,null),e(Ao,bco),e(Ao,KA),e(KA,vco),e(KA,WB),e(WB,Fco),e(KA,Tco),e(Ao,Mco),e(Ao,ZA),e(ZA,Eco),e(ZA,yne),e(yne,Cco),e(ZA,wco),e(Ao,Aco),e(Ao,He),M(ey,He,null),e(He,yco),e(He,Lne),e(Lne,Lco),e(He,xco),e(He,La),e(La,$co),e(La,xne),e(xne,kco),e(La,Sco),e(La,$ne),e($ne,Rco),e(La,Pco),e(La,kne),e(kne,Bco),e(La,Ico),e(He,Nco),e(He,Y),e(Y,dh),e(dh,Sne),e(Sne,qco),e(dh,jco),e(dh,QB),e(QB,Dco),e(dh,Gco),e(Y,Oco),e(Y,ch),e(ch,Rne),e(Rne,Vco),e(ch,Xco),e(ch,HB),e(HB,zco),e(ch,Wco),e(Y,Qco),e(Y,fh),e(fh,Pne),e(Pne,Hco),e(fh,Uco),e(fh,UB),e(UB,Jco),e(fh,Yco),e(Y,Kco),e(Y,mh),e(mh,Bne),e(Bne,Zco),e(mh,efo),e(mh,JB),e(JB,ofo),e(mh,rfo),e(Y,tfo),e(Y,gh),e(gh,Ine),e(Ine,afo),e(gh,nfo),e(gh,YB),e(YB,sfo),e(gh,lfo),e(Y,ifo),e(Y,hh),e(hh,Nne),e(Nne,dfo),e(hh,cfo),e(hh,KB),e(KB,ffo),e(hh,mfo),e(Y,gfo),e(Y,ph),e(ph,qne),e(qne,hfo),e(ph,pfo),e(ph,ZB),e(ZB,_fo),e(ph,ufo),e(Y,bfo),e(Y,_h),e(_h,jne),e(jne,vfo),e(_h,Ffo),e(_h,eI),e(eI,Tfo),e(_h,Mfo),e(Y,Efo),e(Y,uh),e(uh,Dne),e(Dne,Cfo),e(uh,wfo),e(uh,oI),e(oI,Afo),e(uh,yfo),e(Y,Lfo),e(Y,bh),e(bh,Gne),e(Gne,xfo),e(bh,$fo),e(bh,rI),e(rI,kfo),e(bh,Sfo),e(Y,Rfo),e(Y,vh),e(vh,One),e(One,Pfo),e(vh,Bfo),e(vh,tI),e(tI,Ifo),e(vh,Nfo),e(Y,qfo),e(Y,Fh),e(Fh,Vne),e(Vne,jfo),e(Fh,Dfo),e(Fh,aI),e(aI,Gfo),e(Fh,Ofo),e(Y,Vfo),e(Y,Th),e(Th,Xne),e(Xne,Xfo),e(Th,zfo),e(Th,nI),e(nI,Wfo),e(Th,Qfo),e(Y,Hfo),e(Y,Mh),e(Mh,zne),e(zne,Ufo),e(Mh,Jfo),e(Mh,sI),e(sI,Yfo),e(Mh,Kfo),e(Y,Zfo),e(Y,Eh),e(Eh,Wne),e(Wne,emo),e(Eh,omo),e(Eh,lI),e(lI,rmo),e(Eh,tmo),e(Y,amo),e(Y,Ch),e(Ch,Qne),e(Qne,nmo),e(Ch,smo),e(Ch,iI),e(iI,lmo),e(Ch,imo),e(Y,dmo),e(Y,wh),e(wh,Hne),e(Hne,cmo),e(wh,fmo),e(wh,dI),e(dI,mmo),e(wh,gmo),e(Y,hmo),e(Y,Ah),e(Ah,Une),e(Une,pmo),e(Ah,_mo),e(Ah,cI),e(cI,umo),e(Ah,bmo),e(Y,vmo),e(Y,yh),e(yh,Jne),e(Jne,Fmo),e(yh,Tmo),e(yh,fI),e(fI,Mmo),e(yh,Emo),e(Y,Cmo),e(Y,Lh),e(Lh,Yne),e(Yne,wmo),e(Lh,Amo),e(Lh,mI),e(mI,ymo),e(Lh,Lmo),e(Y,xmo),e(Y,xh),e(xh,Kne),e(Kne,$mo),e(xh,kmo),e(xh,gI),e(gI,Smo),e(xh,Rmo),e(Y,Pmo),e(Y,$h),e($h,Zne),e(Zne,Bmo),e($h,Imo),e($h,hI),e(hI,Nmo),e($h,qmo),e(Y,jmo),e(Y,kh),e(kh,ese),e(ese,Dmo),e(kh,Gmo),e(kh,pI),e(pI,Omo),e(kh,Vmo),e(Y,Xmo),e(Y,Sh),e(Sh,ose),e(ose,zmo),e(Sh,Wmo),e(Sh,_I),e(_I,Qmo),e(Sh,Hmo),e(Y,Umo),e(Y,Rh),e(Rh,rse),e(rse,Jmo),e(Rh,Ymo),e(Rh,uI),e(uI,Kmo),e(Rh,Zmo),e(Y,ego),e(Y,Ph),e(Ph,tse),e(tse,ogo),e(Ph,rgo),e(Ph,bI),e(bI,tgo),e(Ph,ago),e(Y,ngo),e(Y,Bh),e(Bh,ase),e(ase,sgo),e(Bh,lgo),e(Bh,vI),e(vI,igo),e(Bh,dgo),e(Y,cgo),e(Y,Ih),e(Ih,nse),e(nse,fgo),e(Ih,mgo),e(Ih,FI),e(FI,ggo),e(Ih,hgo),e(Y,pgo),e(Y,Nh),e(Nh,sse),e(sse,_go),e(Nh,ugo),e(Nh,TI),e(TI,bgo),e(Nh,vgo),e(Y,Fgo),e(Y,qh),e(qh,lse),e(lse,Tgo),e(qh,Mgo),e(qh,MI),e(MI,Ego),e(qh,Cgo),e(He,wgo),M(jh,He,null),e(He,Ago),M(Dh,He,null),e(Ao,ygo),e(Ao,Gh),M(oy,Gh,null),e(Gh,Lgo),e(Gh,ise),e(ise,xgo),b(f,zqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,dse),M(ry,dse,null),e(Ci,$go),e(Ci,cse),e(cse,kgo),b(f,Wqe,u),b(f,yo,u),M(ty,yo,null),e(yo,Sgo),e(yo,ay),e(ay,Rgo),e(ay,EI),e(EI,Pgo),e(ay,Bgo),e(yo,Igo),e(yo,ny),e(ny,Ngo),e(ny,fse),e(fse,qgo),e(ny,jgo),e(yo,Dgo),e(yo,Ue),M(sy,Ue,null),e(Ue,Ggo),e(Ue,mse),e(mse,Ogo),e(Ue,Vgo),e(Ue,wi),e(wi,Xgo),e(wi,gse),e(gse,zgo),e(wi,Wgo),e(wi,hse),e(hse,Qgo),e(wi,Hgo),e(Ue,Ugo),e(Ue,he),e(he,Vh),e(Vh,pse),e(pse,Jgo),e(Vh,Ygo),e(Vh,CI),e(CI,Kgo),e(Vh,Zgo),e(he,eho),e(he,Xh),e(Xh,_se),e(_se,oho),e(Xh,rho),e(Xh,use),e(use,tho),e(Xh,aho),e(he,nho),e(he,zh),e(zh,bse),e(bse,sho),e(zh,lho),e(zh,wI),e(wI,iho),e(zh,dho),e(he,cho),e(he,Wh),e(Wh,vse),e(vse,fho),e(Wh,mho),e(Wh,AI),e(AI,gho),e(Wh,hho),e(he,pho),e(he,Qh),e(Qh,Fse),e(Fse,_ho),e(Qh,uho),e(Qh,yI),e(yI,bho),e(Qh,vho),e(he,Fho),e(he,Hh),e(Hh,Tse),e(Tse,Tho),e(Hh,Mho),e(Hh,LI),e(LI,Eho),e(Hh,Cho),e(he,who),e(he,Uh),e(Uh,Mse),e(Mse,Aho),e(Uh,yho),e(Uh,xI),e(xI,Lho),e(Uh,xho),e(he,$ho),e(he,Jh),e(Jh,Ese),e(Ese,kho),e(Jh,Sho),e(Jh,$I),e($I,Rho),e(Jh,Pho),e(he,Bho),e(he,Yh),e(Yh,Cse),e(Cse,Iho),e(Yh,Nho),e(Yh,kI),e(kI,qho),e(Yh,jho),e(he,Dho),e(he,Kh),e(Kh,wse),e(wse,Gho),e(Kh,Oho),e(Kh,SI),e(SI,Vho),e(Kh,Xho),e(he,zho),e(he,Zh),e(Zh,Ase),e(Ase,Who),e(Zh,Qho),e(Zh,RI),e(RI,Hho),e(Zh,Uho),e(he,Jho),e(he,ep),e(ep,yse),e(yse,Yho),e(ep,Kho),e(ep,PI),e(PI,Zho),e(ep,epo),e(he,opo),e(he,op),e(op,Lse),e(Lse,rpo),e(op,tpo),e(op,BI),e(BI,apo),e(op,npo),e(he,spo),e(he,rp),e(rp,xse),e(xse,lpo),e(rp,ipo),e(rp,II),e(II,dpo),e(rp,cpo),e(he,fpo),e(he,tp),e(tp,$se),e($se,mpo),e(tp,gpo),e(tp,NI),e(NI,hpo),e(tp,ppo),e(he,_po),e(he,ap),e(ap,kse),e(kse,upo),e(ap,bpo),e(ap,qI),e(qI,vpo),e(ap,Fpo),e(he,Tpo),e(he,np),e(np,Sse),e(Sse,Mpo),e(np,Epo),e(np,jI),e(jI,Cpo),e(np,wpo),e(Ue,Apo),M(sp,Ue,null),e(Ue,ypo),M(lp,Ue,null),e(yo,Lpo),e(yo,ip),M(ly,ip,null),e(ip,xpo),e(ip,Rse),e(Rse,$po),b(f,Qqe,u),b(f,Ai,u),e(Ai,dp),e(dp,Pse),M(iy,Pse,null),e(Ai,kpo),e(Ai,Bse),e(Bse,Spo),b(f,Hqe,u),b(f,Lo,u),M(dy,Lo,null),e(Lo,Rpo),e(Lo,yi),e(yi,Ppo),e(yi,DI),e(DI,Bpo),e(yi,Ipo),e(yi,GI),e(GI,Npo),e(yi,qpo),e(Lo,jpo),e(Lo,cy),e(cy,Dpo),e(cy,Ise),e(Ise,Gpo),e(cy,Opo),e(Lo,Vpo),e(Lo,at),M(fy,at,null),e(at,Xpo),e(at,Nse),e(Nse,zpo),e(at,Wpo),e(at,Li),e(Li,Qpo),e(Li,qse),e(qse,Hpo),e(Li,Upo),e(Li,OI),e(OI,Jpo),e(Li,Ypo),e(at,Kpo),M(cp,at,null),e(Lo,Zpo),e(Lo,Je),M(my,Je,null),e(Je,e_o),e(Je,jse),e(jse,o_o),e(Je,r_o),e(Je,xa),e(xa,t_o),e(xa,Dse),e(Dse,a_o),e(xa,n_o),e(xa,Gse),e(Gse,s_o),e(xa,l_o),e(xa,Ose),e(Ose,i_o),e(xa,d_o),e(Je,c_o),e(Je,x),e(x,fp),e(fp,Vse),e(Vse,f_o),e(fp,m_o),e(fp,VI),e(VI,g_o),e(fp,h_o),e(x,p_o),e(x,mp),e(mp,Xse),e(Xse,__o),e(mp,u_o),e(mp,XI),e(XI,b_o),e(mp,v_o),e(x,F_o),e(x,gp),e(gp,zse),e(zse,T_o),e(gp,M_o),e(gp,zI),e(zI,E_o),e(gp,C_o),e(x,w_o),e(x,hp),e(hp,Wse),e(Wse,A_o),e(hp,y_o),e(hp,WI),e(WI,L_o),e(hp,x_o),e(x,$_o),e(x,pp),e(pp,Qse),e(Qse,k_o),e(pp,S_o),e(pp,QI),e(QI,R_o),e(pp,P_o),e(x,B_o),e(x,_p),e(_p,Hse),e(Hse,I_o),e(_p,N_o),e(_p,HI),e(HI,q_o),e(_p,j_o),e(x,D_o),e(x,up),e(up,Use),e(Use,G_o),e(up,O_o),e(up,UI),e(UI,V_o),e(up,X_o),e(x,z_o),e(x,bp),e(bp,Jse),e(Jse,W_o),e(bp,Q_o),e(bp,JI),e(JI,H_o),e(bp,U_o),e(x,J_o),e(x,vp),e(vp,Yse),e(Yse,Y_o),e(vp,K_o),e(vp,YI),e(YI,Z_o),e(vp,euo),e(x,ouo),e(x,Fp),e(Fp,Kse),e(Kse,ruo),e(Fp,tuo),e(Fp,KI),e(KI,auo),e(Fp,nuo),e(x,suo),e(x,Tp),e(Tp,Zse),e(Zse,luo),e(Tp,iuo),e(Tp,ZI),e(ZI,duo),e(Tp,cuo),e(x,fuo),e(x,Mp),e(Mp,ele),e(ele,muo),e(Mp,guo),e(Mp,eN),e(eN,huo),e(Mp,puo),e(x,_uo),e(x,Ep),e(Ep,ole),e(ole,uuo),e(Ep,buo),e(Ep,oN),e(oN,vuo),e(Ep,Fuo),e(x,Tuo),e(x,Cp),e(Cp,rle),e(rle,Muo),e(Cp,Euo),e(Cp,rN),e(rN,Cuo),e(Cp,wuo),e(x,Auo),e(x,wp),e(wp,tle),e(tle,yuo),e(wp,Luo),e(wp,tN),e(tN,xuo),e(wp,$uo),e(x,kuo),e(x,Ap),e(Ap,ale),e(ale,Suo),e(Ap,Ruo),e(Ap,aN),e(aN,Puo),e(Ap,Buo),e(x,Iuo),e(x,yp),e(yp,nle),e(nle,Nuo),e(yp,quo),e(yp,nN),e(nN,juo),e(yp,Duo),e(x,Guo),e(x,Lp),e(Lp,sle),e(sle,Ouo),e(Lp,Vuo),e(Lp,sN),e(sN,Xuo),e(Lp,zuo),e(x,Wuo),e(x,xp),e(xp,lle),e(lle,Quo),e(xp,Huo),e(xp,lN),e(lN,Uuo),e(xp,Juo),e(x,Yuo),e(x,$p),e($p,ile),e(ile,Kuo),e($p,Zuo),e($p,iN),e(iN,e1o),e($p,o1o),e(x,r1o),e(x,kp),e(kp,dle),e(dle,t1o),e(kp,a1o),e(kp,dN),e(dN,n1o),e(kp,s1o),e(x,l1o),e(x,Sp),e(Sp,cle),e(cle,i1o),e(Sp,d1o),e(Sp,cN),e(cN,c1o),e(Sp,f1o),e(x,m1o),e(x,Rp),e(Rp,fle),e(fle,g1o),e(Rp,h1o),e(Rp,fN),e(fN,p1o),e(Rp,_1o),e(x,u1o),e(x,Pp),e(Pp,mle),e(mle,b1o),e(Pp,v1o),e(Pp,mN),e(mN,F1o),e(Pp,T1o),e(x,M1o),e(x,Bp),e(Bp,gle),e(gle,E1o),e(Bp,C1o),e(Bp,gN),e(gN,w1o),e(Bp,A1o),e(x,y1o),e(x,Ip),e(Ip,hle),e(hle,L1o),e(Ip,x1o),e(Ip,hN),e(hN,$1o),e(Ip,k1o),e(x,S1o),e(x,Np),e(Np,ple),e(ple,R1o),e(Np,P1o),e(Np,pN),e(pN,B1o),e(Np,I1o),e(x,N1o),e(x,qp),e(qp,_le),e(_le,q1o),e(qp,j1o),e(qp,_N),e(_N,D1o),e(qp,G1o),e(x,O1o),e(x,jp),e(jp,ule),e(ule,V1o),e(jp,X1o),e(jp,uN),e(uN,z1o),e(jp,W1o),e(x,Q1o),e(x,Dp),e(Dp,ble),e(ble,H1o),e(Dp,U1o),e(Dp,bN),e(bN,J1o),e(Dp,Y1o),e(x,K1o),e(x,Gp),e(Gp,vle),e(vle,Z1o),e(Gp,ebo),e(Gp,vN),e(vN,obo),e(Gp,rbo),e(x,tbo),e(x,Op),e(Op,Fle),e(Fle,abo),e(Op,nbo),e(Op,FN),e(FN,sbo),e(Op,lbo),e(x,ibo),e(x,Ps),e(Ps,Tle),e(Tle,dbo),e(Ps,cbo),e(Ps,TN),e(TN,fbo),e(Ps,mbo),e(Ps,MN),e(MN,gbo),e(Ps,hbo),e(x,pbo),e(x,Vp),e(Vp,Mle),e(Mle,_bo),e(Vp,ubo),e(Vp,EN),e(EN,bbo),e(Vp,vbo),e(x,Fbo),e(x,Xp),e(Xp,Ele),e(Ele,Tbo),e(Xp,Mbo),e(Xp,CN),e(CN,Ebo),e(Xp,Cbo),e(x,wbo),e(x,zp),e(zp,Cle),e(Cle,Abo),e(zp,ybo),e(zp,wN),e(wN,Lbo),e(zp,xbo),e(x,$bo),e(x,Wp),e(Wp,wle),e(wle,kbo),e(Wp,Sbo),e(Wp,AN),e(AN,Rbo),e(Wp,Pbo),e(x,Bbo),e(x,Qp),e(Qp,Ale),e(Ale,Ibo),e(Qp,Nbo),e(Qp,yN),e(yN,qbo),e(Qp,jbo),e(x,Dbo),e(x,Hp),e(Hp,yle),e(yle,Gbo),e(Hp,Obo),e(Hp,LN),e(LN,Vbo),e(Hp,Xbo),e(x,zbo),e(x,Up),e(Up,Lle),e(Lle,Wbo),e(Up,Qbo),e(Up,xN),e(xN,Hbo),e(Up,Ubo),e(x,Jbo),e(x,Jp),e(Jp,xle),e(xle,Ybo),e(Jp,Kbo),e(Jp,$N),e($N,Zbo),e(Jp,e2o),e(x,o2o),e(x,Yp),e(Yp,$le),e($le,r2o),e(Yp,t2o),e(Yp,kN),e(kN,a2o),e(Yp,n2o),e(x,s2o),e(x,Kp),e(Kp,kle),e(kle,l2o),e(Kp,i2o),e(Kp,SN),e(SN,d2o),e(Kp,c2o),e(x,f2o),e(x,Zp),e(Zp,Sle),e(Sle,m2o),e(Zp,g2o),e(Zp,RN),e(RN,h2o),e(Zp,p2o),e(x,_2o),e(x,e_),e(e_,Rle),e(Rle,u2o),e(e_,b2o),e(e_,PN),e(PN,v2o),e(e_,F2o),e(x,T2o),e(x,o_),e(o_,Ple),e(Ple,M2o),e(o_,E2o),e(o_,BN),e(BN,C2o),e(o_,w2o),e(x,A2o),e(x,r_),e(r_,Ble),e(Ble,y2o),e(r_,L2o),e(r_,IN),e(IN,x2o),e(r_,$2o),e(x,k2o),e(x,t_),e(t_,Ile),e(Ile,S2o),e(t_,R2o),e(t_,NN),e(NN,P2o),e(t_,B2o),e(x,I2o),e(x,a_),e(a_,Nle),e(Nle,N2o),e(a_,q2o),e(a_,qN),e(qN,j2o),e(a_,D2o),e(x,G2o),e(x,n_),e(n_,qle),e(qle,O2o),e(n_,V2o),e(n_,jN),e(jN,X2o),e(n_,z2o),e(x,W2o),e(x,s_),e(s_,jle),e(jle,Q2o),e(s_,H2o),e(s_,DN),e(DN,U2o),e(s_,J2o),e(x,Y2o),e(x,l_),e(l_,Dle),e(Dle,K2o),e(l_,Z2o),e(l_,GN),e(GN,e4o),e(l_,o4o),e(x,r4o),e(x,i_),e(i_,Gle),e(Gle,t4o),e(i_,a4o),e(i_,ON),e(ON,n4o),e(i_,s4o),e(x,l4o),e(x,d_),e(d_,Ole),e(Ole,i4o),e(d_,d4o),e(d_,VN),e(VN,c4o),e(d_,f4o),e(x,m4o),e(x,c_),e(c_,Vle),e(Vle,g4o),e(c_,h4o),e(c_,XN),e(XN,p4o),e(c_,_4o),e(x,u4o),e(x,f_),e(f_,Xle),e(Xle,b4o),e(f_,v4o),e(f_,zN),e(zN,F4o),e(f_,T4o),e(x,M4o),e(x,m_),e(m_,zle),e(zle,E4o),e(m_,C4o),e(m_,WN),e(WN,w4o),e(m_,A4o),e(x,y4o),e(x,g_),e(g_,Wle),e(Wle,L4o),e(g_,x4o),e(g_,QN),e(QN,$4o),e(g_,k4o),e(x,S4o),e(x,h_),e(h_,Qle),e(Qle,R4o),e(h_,P4o),e(h_,HN),e(HN,B4o),e(h_,I4o),e(x,N4o),e(x,p_),e(p_,Hle),e(Hle,q4o),e(p_,j4o),e(p_,UN),e(UN,D4o),e(p_,G4o),e(x,O4o),e(x,__),e(__,Ule),e(Ule,V4o),e(__,X4o),e(__,JN),e(JN,z4o),e(__,W4o),e(x,Q4o),e(x,u_),e(u_,Jle),e(Jle,H4o),e(u_,U4o),e(u_,YN),e(YN,J4o),e(u_,Y4o),e(x,K4o),e(x,b_),e(b_,Yle),e(Yle,Z4o),e(b_,evo),e(b_,KN),e(KN,ovo),e(b_,rvo),e(x,tvo),e(x,v_),e(v_,Kle),e(Kle,avo),e(v_,nvo),e(v_,ZN),e(ZN,svo),e(v_,lvo),e(x,ivo),e(x,F_),e(F_,Zle),e(Zle,dvo),e(F_,cvo),e(F_,eq),e(eq,fvo),e(F_,mvo),e(x,gvo),e(x,T_),e(T_,eie),e(eie,hvo),e(T_,pvo),e(T_,oq),e(oq,_vo),e(T_,uvo),e(x,bvo),e(x,M_),e(M_,oie),e(oie,vvo),e(M_,Fvo),e(M_,rq),e(rq,Tvo),e(M_,Mvo),e(x,Evo),e(x,E_),e(E_,rie),e(rie,Cvo),e(E_,wvo),e(E_,tq),e(tq,Avo),e(E_,yvo),e(x,Lvo),e(x,C_),e(C_,tie),e(tie,xvo),e(C_,$vo),e(C_,aq),e(aq,kvo),e(C_,Svo),e(x,Rvo),e(x,w_),e(w_,aie),e(aie,Pvo),e(w_,Bvo),e(w_,nq),e(nq,Ivo),e(w_,Nvo),e(x,qvo),e(x,A_),e(A_,nie),e(nie,jvo),e(A_,Dvo),e(A_,sq),e(sq,Gvo),e(A_,Ovo),e(x,Vvo),e(x,y_),e(y_,sie),e(sie,Xvo),e(y_,zvo),e(y_,lq),e(lq,Wvo),e(y_,Qvo),e(x,Hvo),e(x,L_),e(L_,lie),e(lie,Uvo),e(L_,Jvo),e(L_,iq),e(iq,Yvo),e(L_,Kvo),e(x,Zvo),e(x,x_),e(x_,iie),e(iie,e5o),e(x_,o5o),e(x_,dq),e(dq,r5o),e(x_,t5o),e(x,a5o),e(x,$_),e($_,die),e(die,n5o),e($_,s5o),e($_,cq),e(cq,l5o),e($_,i5o),e(x,d5o),e(x,k_),e(k_,cie),e(cie,c5o),e(k_,f5o),e(k_,fq),e(fq,m5o),e(k_,g5o),e(x,h5o),e(x,S_),e(S_,fie),e(fie,p5o),e(S_,_5o),e(S_,mq),e(mq,u5o),e(S_,b5o),e(x,v5o),e(x,R_),e(R_,mie),e(mie,F5o),e(R_,T5o),e(R_,gq),e(gq,M5o),e(R_,E5o),e(x,C5o),e(x,P_),e(P_,gie),e(gie,w5o),e(P_,A5o),e(P_,hq),e(hq,y5o),e(P_,L5o),e(x,x5o),e(x,B_),e(B_,hie),e(hie,$5o),e(B_,k5o),e(B_,pq),e(pq,S5o),e(B_,R5o),e(x,P5o),e(x,I_),e(I_,pie),e(pie,B5o),e(I_,I5o),e(I_,_q),e(_q,N5o),e(I_,q5o),e(x,j5o),e(x,N_),e(N_,_ie),e(_ie,D5o),e(N_,G5o),e(N_,uq),e(uq,O5o),e(N_,V5o),e(x,X5o),e(x,q_),e(q_,uie),e(uie,z5o),e(q_,W5o),e(q_,bq),e(bq,Q5o),e(q_,H5o),e(x,U5o),e(x,j_),e(j_,bie),e(bie,J5o),e(j_,Y5o),e(j_,vq),e(vq,K5o),e(j_,Z5o),e(x,e3o),e(x,D_),e(D_,vie),e(vie,o3o),e(D_,r3o),e(D_,Fq),e(Fq,t3o),e(D_,a3o),e(x,n3o),e(x,G_),e(G_,Fie),e(Fie,s3o),e(G_,l3o),e(G_,Tq),e(Tq,i3o),e(G_,d3o),e(x,c3o),e(x,O_),e(O_,Tie),e(Tie,f3o),e(O_,m3o),e(O_,Mq),e(Mq,g3o),e(O_,h3o),e(x,p3o),e(x,V_),e(V_,Mie),e(Mie,_3o),e(V_,u3o),e(V_,Eq),e(Eq,b3o),e(V_,v3o),e(x,F3o),e(x,X_),e(X_,Eie),e(Eie,T3o),e(X_,M3o),e(X_,Cq),e(Cq,E3o),e(X_,C3o),e(x,w3o),e(x,z_),e(z_,Cie),e(Cie,A3o),e(z_,y3o),e(z_,wq),e(wq,L3o),e(z_,x3o),e(x,$3o),e(x,W_),e(W_,wie),e(wie,k3o),e(W_,S3o),e(W_,Aq),e(Aq,R3o),e(W_,P3o),e(x,B3o),e(x,Q_),e(Q_,Aie),e(Aie,I3o),e(Q_,N3o),e(Q_,yq),e(yq,q3o),e(Q_,j3o),e(x,D3o),e(x,H_),e(H_,yie),e(yie,G3o),e(H_,O3o),e(H_,Lq),e(Lq,V3o),e(H_,X3o),e(x,z3o),e(x,U_),e(U_,Lie),e(Lie,W3o),e(U_,Q3o),e(U_,xq),e(xq,H3o),e(U_,U3o),e(x,J3o),e(x,J_),e(J_,xie),e(xie,Y3o),e(J_,K3o),e(J_,$q),e($q,Z3o),e(J_,eFo),e(x,oFo),e(x,Y_),e(Y_,$ie),e($ie,rFo),e(Y_,tFo),e(Y_,kq),e(kq,aFo),e(Y_,nFo),e(x,sFo),e(x,K_),e(K_,kie),e(kie,lFo),e(K_,iFo),e(K_,Sq),e(Sq,dFo),e(K_,cFo),e(x,fFo),e(x,Z_),e(Z_,Sie),e(Sie,mFo),e(Z_,gFo),e(Z_,Rq),e(Rq,hFo),e(Z_,pFo),e(x,_Fo),e(x,eu),e(eu,Rie),e(Rie,uFo),e(eu,bFo),e(eu,Pq),e(Pq,vFo),e(eu,FFo),e(x,TFo),e(x,ou),e(ou,Pie),e(Pie,MFo),e(ou,EFo),e(ou,Bq),e(Bq,CFo),e(ou,wFo),e(x,AFo),e(x,ru),e(ru,Bie),e(Bie,yFo),e(ru,LFo),e(ru,Iq),e(Iq,xFo),e(ru,$Fo),e(x,kFo),e(x,tu),e(tu,Iie),e(Iie,SFo),e(tu,RFo),e(tu,Nq),e(Nq,PFo),e(tu,BFo),e(x,IFo),e(x,au),e(au,Nie),e(Nie,NFo),e(au,qFo),e(au,qq),e(qq,jFo),e(au,DFo),e(Je,GFo),e(Je,nu),e(nu,OFo),e(nu,qie),e(qie,VFo),e(nu,XFo),e(nu,jie),e(jie,zFo),e(Je,WFo),M(su,Je,null),b(f,Uqe,u),b(f,xi,u),e(xi,lu),e(lu,Die),M(gy,Die,null),e(xi,QFo),e(xi,Gie),e(Gie,HFo),b(f,Jqe,u),b(f,xo,u),M(hy,xo,null),e(xo,UFo),e(xo,$i),e($i,JFo),e($i,jq),e(jq,YFo),e($i,KFo),e($i,Dq),e(Dq,ZFo),e($i,eTo),e(xo,oTo),e(xo,py),e(py,rTo),e(py,Oie),e(Oie,tTo),e(py,aTo),e(xo,nTo),e(xo,nt),M(_y,nt,null),e(nt,sTo),e(nt,Vie),e(Vie,lTo),e(nt,iTo),e(nt,ki),e(ki,dTo),e(ki,Xie),e(Xie,cTo),e(ki,fTo),e(ki,Gq),e(Gq,mTo),e(ki,gTo),e(nt,hTo),M(iu,nt,null),e(xo,pTo),e(xo,Ye),M(uy,Ye,null),e(Ye,_To),e(Ye,zie),e(zie,uTo),e(Ye,bTo),e(Ye,$a),e($a,vTo),e($a,Wie),e(Wie,FTo),e($a,TTo),e($a,Qie),e(Qie,MTo),e($a,ETo),e($a,Hie),e(Hie,CTo),e($a,wTo),e(Ye,ATo),e(Ye,G),e(G,du),e(du,Uie),e(Uie,yTo),e(du,LTo),e(du,Oq),e(Oq,xTo),e(du,$To),e(G,kTo),e(G,cu),e(cu,Jie),e(Jie,STo),e(cu,RTo),e(cu,Vq),e(Vq,PTo),e(cu,BTo),e(G,ITo),e(G,fu),e(fu,Yie),e(Yie,NTo),e(fu,qTo),e(fu,Xq),e(Xq,jTo),e(fu,DTo),e(G,GTo),e(G,mu),e(mu,Kie),e(Kie,OTo),e(mu,VTo),e(mu,zq),e(zq,XTo),e(mu,zTo),e(G,WTo),e(G,gu),e(gu,Zie),e(Zie,QTo),e(gu,HTo),e(gu,Wq),e(Wq,UTo),e(gu,JTo),e(G,YTo),e(G,hu),e(hu,ede),e(ede,KTo),e(hu,ZTo),e(hu,Qq),e(Qq,e7o),e(hu,o7o),e(G,r7o),e(G,pu),e(pu,ode),e(ode,t7o),e(pu,a7o),e(pu,Hq),e(Hq,n7o),e(pu,s7o),e(G,l7o),e(G,_u),e(_u,rde),e(rde,i7o),e(_u,d7o),e(_u,Uq),e(Uq,c7o),e(_u,f7o),e(G,m7o),e(G,uu),e(uu,tde),e(tde,g7o),e(uu,h7o),e(uu,Jq),e(Jq,p7o),e(uu,_7o),e(G,u7o),e(G,bu),e(bu,ade),e(ade,b7o),e(bu,v7o),e(bu,Yq),e(Yq,F7o),e(bu,T7o),e(G,M7o),e(G,vu),e(vu,nde),e(nde,E7o),e(vu,C7o),e(vu,Kq),e(Kq,w7o),e(vu,A7o),e(G,y7o),e(G,Fu),e(Fu,sde),e(sde,L7o),e(Fu,x7o),e(Fu,Zq),e(Zq,$7o),e(Fu,k7o),e(G,S7o),e(G,Tu),e(Tu,lde),e(lde,R7o),e(Tu,P7o),e(Tu,ej),e(ej,B7o),e(Tu,I7o),e(G,N7o),e(G,Mu),e(Mu,ide),e(ide,q7o),e(Mu,j7o),e(Mu,oj),e(oj,D7o),e(Mu,G7o),e(G,O7o),e(G,Eu),e(Eu,dde),e(dde,V7o),e(Eu,X7o),e(Eu,rj),e(rj,z7o),e(Eu,W7o),e(G,Q7o),e(G,Cu),e(Cu,cde),e(cde,H7o),e(Cu,U7o),e(Cu,tj),e(tj,J7o),e(Cu,Y7o),e(G,K7o),e(G,wu),e(wu,fde),e(fde,Z7o),e(wu,eMo),e(wu,aj),e(aj,oMo),e(wu,rMo),e(G,tMo),e(G,Au),e(Au,mde),e(mde,aMo),e(Au,nMo),e(Au,nj),e(nj,sMo),e(Au,lMo),e(G,iMo),e(G,yu),e(yu,gde),e(gde,dMo),e(yu,cMo),e(yu,sj),e(sj,fMo),e(yu,mMo),e(G,gMo),e(G,Lu),e(Lu,hde),e(hde,hMo),e(Lu,pMo),e(Lu,lj),e(lj,_Mo),e(Lu,uMo),e(G,bMo),e(G,xu),e(xu,pde),e(pde,vMo),e(xu,FMo),e(xu,ij),e(ij,TMo),e(xu,MMo),e(G,EMo),e(G,$u),e($u,_de),e(_de,CMo),e($u,wMo),e($u,dj),e(dj,AMo),e($u,yMo),e(G,LMo),e(G,ku),e(ku,ude),e(ude,xMo),e(ku,$Mo),e(ku,cj),e(cj,kMo),e(ku,SMo),e(G,RMo),e(G,Su),e(Su,bde),e(bde,PMo),e(Su,BMo),e(Su,fj),e(fj,IMo),e(Su,NMo),e(G,qMo),e(G,Ru),e(Ru,vde),e(vde,jMo),e(Ru,DMo),e(Ru,mj),e(mj,GMo),e(Ru,OMo),e(G,VMo),e(G,Pu),e(Pu,Fde),e(Fde,XMo),e(Pu,zMo),e(Pu,gj),e(gj,WMo),e(Pu,QMo),e(G,HMo),e(G,Bu),e(Bu,Tde),e(Tde,UMo),e(Bu,JMo),e(Bu,hj),e(hj,YMo),e(Bu,KMo),e(G,ZMo),e(G,Iu),e(Iu,Mde),e(Mde,eEo),e(Iu,oEo),e(Iu,pj),e(pj,rEo),e(Iu,tEo),e(G,aEo),e(G,Nu),e(Nu,Ede),e(Ede,nEo),e(Nu,sEo),e(Nu,_j),e(_j,lEo),e(Nu,iEo),e(G,dEo),e(G,qu),e(qu,Cde),e(Cde,cEo),e(qu,fEo),e(qu,uj),e(uj,mEo),e(qu,gEo),e(G,hEo),e(G,ju),e(ju,wde),e(wde,pEo),e(ju,_Eo),e(ju,bj),e(bj,uEo),e(ju,bEo),e(G,vEo),e(G,Du),e(Du,Ade),e(Ade,FEo),e(Du,TEo),e(Du,vj),e(vj,MEo),e(Du,EEo),e(G,CEo),e(G,Gu),e(Gu,yde),e(yde,wEo),e(Gu,AEo),e(Gu,Fj),e(Fj,yEo),e(Gu,LEo),e(G,xEo),e(G,Ou),e(Ou,Lde),e(Lde,$Eo),e(Ou,kEo),e(Ou,Tj),e(Tj,SEo),e(Ou,REo),e(G,PEo),e(G,Vu),e(Vu,xde),e(xde,BEo),e(Vu,IEo),e(Vu,Mj),e(Mj,NEo),e(Vu,qEo),e(G,jEo),e(G,Xu),e(Xu,$de),e($de,DEo),e(Xu,GEo),e(Xu,Ej),e(Ej,OEo),e(Xu,VEo),e(G,XEo),e(G,zu),e(zu,kde),e(kde,zEo),e(zu,WEo),e(zu,Cj),e(Cj,QEo),e(zu,HEo),e(G,UEo),e(G,Wu),e(Wu,Sde),e(Sde,JEo),e(Wu,YEo),e(Wu,wj),e(wj,KEo),e(Wu,ZEo),e(G,eCo),e(G,Qu),e(Qu,Rde),e(Rde,oCo),e(Qu,rCo),e(Qu,Aj),e(Aj,tCo),e(Qu,aCo),e(G,nCo),e(G,Hu),e(Hu,Pde),e(Pde,sCo),e(Hu,lCo),e(Hu,yj),e(yj,iCo),e(Hu,dCo),e(G,cCo),e(G,Uu),e(Uu,Bde),e(Bde,fCo),e(Uu,mCo),e(Uu,Lj),e(Lj,gCo),e(Uu,hCo),e(G,pCo),e(G,Ju),e(Ju,Ide),e(Ide,_Co),e(Ju,uCo),e(Ju,xj),e(xj,bCo),e(Ju,vCo),e(Ye,FCo),e(Ye,Yu),e(Yu,TCo),e(Yu,Nde),e(Nde,MCo),e(Yu,ECo),e(Yu,qde),e(qde,CCo),e(Ye,wCo),M(Ku,Ye,null),b(f,Yqe,u),b(f,Si,u),e(Si,Zu),e(Zu,jde),M(by,jde,null),e(Si,ACo),e(Si,Dde),e(Dde,yCo),b(f,Kqe,u),b(f,$o,u),M(vy,$o,null),e($o,LCo),e($o,Ri),e(Ri,xCo),e(Ri,$j),e($j,$Co),e(Ri,kCo),e(Ri,kj),e(kj,SCo),e(Ri,RCo),e($o,PCo),e($o,Fy),e(Fy,BCo),e(Fy,Gde),e(Gde,ICo),e(Fy,NCo),e($o,qCo),e($o,st),M(Ty,st,null),e(st,jCo),e(st,Ode),e(Ode,DCo),e(st,GCo),e(st,Pi),e(Pi,OCo),e(Pi,Vde),e(Vde,VCo),e(Pi,XCo),e(Pi,Sj),e(Sj,zCo),e(Pi,WCo),e(st,QCo),M(e1,st,null),e($o,HCo),e($o,Ke),M(My,Ke,null),e(Ke,UCo),e(Ke,Xde),e(Xde,JCo),e(Ke,YCo),e(Ke,ka),e(ka,KCo),e(ka,zde),e(zde,ZCo),e(ka,e0o),e(ka,Wde),e(Wde,o0o),e(ka,r0o),e(ka,Qde),e(Qde,t0o),e(ka,a0o),e(Ke,n0o),e(Ke,z),e(z,o1),e(o1,Hde),e(Hde,s0o),e(o1,l0o),e(o1,Rj),e(Rj,i0o),e(o1,d0o),e(z,c0o),e(z,r1),e(r1,Ude),e(Ude,f0o),e(r1,m0o),e(r1,Pj),e(Pj,g0o),e(r1,h0o),e(z,p0o),e(z,t1),e(t1,Jde),e(Jde,_0o),e(t1,u0o),e(t1,Bj),e(Bj,b0o),e(t1,v0o),e(z,F0o),e(z,a1),e(a1,Yde),e(Yde,T0o),e(a1,M0o),e(a1,Ij),e(Ij,E0o),e(a1,C0o),e(z,w0o),e(z,n1),e(n1,Kde),e(Kde,A0o),e(n1,y0o),e(n1,Nj),e(Nj,L0o),e(n1,x0o),e(z,$0o),e(z,s1),e(s1,Zde),e(Zde,k0o),e(s1,S0o),e(s1,qj),e(qj,R0o),e(s1,P0o),e(z,B0o),e(z,l1),e(l1,ece),e(ece,I0o),e(l1,N0o),e(l1,jj),e(jj,q0o),e(l1,j0o),e(z,D0o),e(z,i1),e(i1,oce),e(oce,G0o),e(i1,O0o),e(i1,Dj),e(Dj,V0o),e(i1,X0o),e(z,z0o),e(z,d1),e(d1,rce),e(rce,W0o),e(d1,Q0o),e(d1,Gj),e(Gj,H0o),e(d1,U0o),e(z,J0o),e(z,c1),e(c1,tce),e(tce,Y0o),e(c1,K0o),e(c1,Oj),e(Oj,Z0o),e(c1,ewo),e(z,owo),e(z,f1),e(f1,ace),e(ace,rwo),e(f1,two),e(f1,Vj),e(Vj,awo),e(f1,nwo),e(z,swo),e(z,m1),e(m1,nce),e(nce,lwo),e(m1,iwo),e(m1,Xj),e(Xj,dwo),e(m1,cwo),e(z,fwo),e(z,g1),e(g1,sce),e(sce,mwo),e(g1,gwo),e(g1,zj),e(zj,hwo),e(g1,pwo),e(z,_wo),e(z,h1),e(h1,lce),e(lce,uwo),e(h1,bwo),e(h1,Wj),e(Wj,vwo),e(h1,Fwo),e(z,Two),e(z,p1),e(p1,ice),e(ice,Mwo),e(p1,Ewo),e(p1,Qj),e(Qj,Cwo),e(p1,wwo),e(z,Awo),e(z,_1),e(_1,dce),e(dce,ywo),e(_1,Lwo),e(_1,Hj),e(Hj,xwo),e(_1,$wo),e(z,kwo),e(z,u1),e(u1,cce),e(cce,Swo),e(u1,Rwo),e(u1,Uj),e(Uj,Pwo),e(u1,Bwo),e(z,Iwo),e(z,b1),e(b1,fce),e(fce,Nwo),e(b1,qwo),e(b1,Jj),e(Jj,jwo),e(b1,Dwo),e(z,Gwo),e(z,v1),e(v1,mce),e(mce,Owo),e(v1,Vwo),e(v1,Yj),e(Yj,Xwo),e(v1,zwo),e(z,Wwo),e(z,F1),e(F1,gce),e(gce,Qwo),e(F1,Hwo),e(F1,Kj),e(Kj,Uwo),e(F1,Jwo),e(z,Ywo),e(z,T1),e(T1,hce),e(hce,Kwo),e(T1,Zwo),e(T1,Zj),e(Zj,e6o),e(T1,o6o),e(z,r6o),e(z,M1),e(M1,pce),e(pce,t6o),e(M1,a6o),e(M1,eD),e(eD,n6o),e(M1,s6o),e(z,l6o),e(z,E1),e(E1,_ce),e(_ce,i6o),e(E1,d6o),e(E1,oD),e(oD,c6o),e(E1,f6o),e(z,m6o),e(z,C1),e(C1,uce),e(uce,g6o),e(C1,h6o),e(C1,rD),e(rD,p6o),e(C1,_6o),e(z,u6o),e(z,w1),e(w1,bce),e(bce,b6o),e(w1,v6o),e(w1,tD),e(tD,F6o),e(w1,T6o),e(z,M6o),e(z,A1),e(A1,vce),e(vce,E6o),e(A1,C6o),e(A1,aD),e(aD,w6o),e(A1,A6o),e(z,y6o),e(z,y1),e(y1,Fce),e(Fce,L6o),e(y1,x6o),e(y1,nD),e(nD,$6o),e(y1,k6o),e(z,S6o),e(z,L1),e(L1,Tce),e(Tce,R6o),e(L1,P6o),e(L1,sD),e(sD,B6o),e(L1,I6o),e(z,N6o),e(z,x1),e(x1,Mce),e(Mce,q6o),e(x1,j6o),e(x1,lD),e(lD,D6o),e(x1,G6o),e(z,O6o),e(z,$1),e($1,Ece),e(Ece,V6o),e($1,X6o),e($1,iD),e(iD,z6o),e($1,W6o),e(z,Q6o),e(z,k1),e(k1,Cce),e(Cce,H6o),e(k1,U6o),e(k1,dD),e(dD,J6o),e(k1,Y6o),e(z,K6o),e(z,S1),e(S1,wce),e(wce,Z6o),e(S1,eAo),e(S1,cD),e(cD,oAo),e(S1,rAo),e(z,tAo),e(z,R1),e(R1,Ace),e(Ace,aAo),e(R1,nAo),e(R1,fD),e(fD,sAo),e(R1,lAo),e(z,iAo),e(z,P1),e(P1,yce),e(yce,dAo),e(P1,cAo),e(P1,mD),e(mD,fAo),e(P1,mAo),e(z,gAo),e(z,B1),e(B1,Lce),e(Lce,hAo),e(B1,pAo),e(B1,gD),e(gD,_Ao),e(B1,uAo),e(z,bAo),e(z,I1),e(I1,xce),e(xce,vAo),e(I1,FAo),e(I1,hD),e(hD,TAo),e(I1,MAo),e(z,EAo),e(z,N1),e(N1,$ce),e($ce,CAo),e(N1,wAo),e(N1,pD),e(pD,AAo),e(N1,yAo),e(Ke,LAo),e(Ke,q1),e(q1,xAo),e(q1,kce),e(kce,$Ao),e(q1,kAo),e(q1,Sce),e(Sce,SAo),e(Ke,RAo),M(j1,Ke,null),b(f,Zqe,u),b(f,Bi,u),e(Bi,D1),e(D1,Rce),M(Ey,Rce,null),e(Bi,PAo),e(Bi,Pce),e(Pce,BAo),b(f,eje,u),b(f,ko,u),M(Cy,ko,null),e(ko,IAo),e(ko,Ii),e(Ii,NAo),e(Ii,_D),e(_D,qAo),e(Ii,jAo),e(Ii,uD),e(uD,DAo),e(Ii,GAo),e(ko,OAo),e(ko,wy),e(wy,VAo),e(wy,Bce),e(Bce,XAo),e(wy,zAo),e(ko,WAo),e(ko,lt),M(Ay,lt,null),e(lt,QAo),e(lt,Ice),e(Ice,HAo),e(lt,UAo),e(lt,Ni),e(Ni,JAo),e(Ni,Nce),e(Nce,YAo),e(Ni,KAo),e(Ni,bD),e(bD,ZAo),e(Ni,eyo),e(lt,oyo),M(G1,lt,null),e(ko,ryo),e(ko,Ze),M(yy,Ze,null),e(Ze,tyo),e(Ze,qce),e(qce,ayo),e(Ze,nyo),e(Ze,Sa),e(Sa,syo),e(Sa,jce),e(jce,lyo),e(Sa,iyo),e(Sa,Dce),e(Dce,dyo),e(Sa,cyo),e(Sa,Gce),e(Gce,fyo),e(Sa,myo),e(Ze,gyo),e(Ze,Q),e(Q,O1),e(O1,Oce),e(Oce,hyo),e(O1,pyo),e(O1,vD),e(vD,_yo),e(O1,uyo),e(Q,byo),e(Q,V1),e(V1,Vce),e(Vce,vyo),e(V1,Fyo),e(V1,FD),e(FD,Tyo),e(V1,Myo),e(Q,Eyo),e(Q,X1),e(X1,Xce),e(Xce,Cyo),e(X1,wyo),e(X1,TD),e(TD,Ayo),e(X1,yyo),e(Q,Lyo),e(Q,z1),e(z1,zce),e(zce,xyo),e(z1,$yo),e(z1,MD),e(MD,kyo),e(z1,Syo),e(Q,Ryo),e(Q,W1),e(W1,Wce),e(Wce,Pyo),e(W1,Byo),e(W1,ED),e(ED,Iyo),e(W1,Nyo),e(Q,qyo),e(Q,Q1),e(Q1,Qce),e(Qce,jyo),e(Q1,Dyo),e(Q1,CD),e(CD,Gyo),e(Q1,Oyo),e(Q,Vyo),e(Q,H1),e(H1,Hce),e(Hce,Xyo),e(H1,zyo),e(H1,wD),e(wD,Wyo),e(H1,Qyo),e(Q,Hyo),e(Q,U1),e(U1,Uce),e(Uce,Uyo),e(U1,Jyo),e(U1,AD),e(AD,Yyo),e(U1,Kyo),e(Q,Zyo),e(Q,J1),e(J1,Jce),e(Jce,eLo),e(J1,oLo),e(J1,yD),e(yD,rLo),e(J1,tLo),e(Q,aLo),e(Q,Y1),e(Y1,Yce),e(Yce,nLo),e(Y1,sLo),e(Y1,LD),e(LD,lLo),e(Y1,iLo),e(Q,dLo),e(Q,K1),e(K1,Kce),e(Kce,cLo),e(K1,fLo),e(K1,xD),e(xD,mLo),e(K1,gLo),e(Q,hLo),e(Q,Z1),e(Z1,Zce),e(Zce,pLo),e(Z1,_Lo),e(Z1,$D),e($D,uLo),e(Z1,bLo),e(Q,vLo),e(Q,eb),e(eb,efe),e(efe,FLo),e(eb,TLo),e(eb,kD),e(kD,MLo),e(eb,ELo),e(Q,CLo),e(Q,ob),e(ob,ofe),e(ofe,wLo),e(ob,ALo),e(ob,SD),e(SD,yLo),e(ob,LLo),e(Q,xLo),e(Q,rb),e(rb,rfe),e(rfe,$Lo),e(rb,kLo),e(rb,RD),e(RD,SLo),e(rb,RLo),e(Q,PLo),e(Q,tb),e(tb,tfe),e(tfe,BLo),e(tb,ILo),e(tb,PD),e(PD,NLo),e(tb,qLo),e(Q,jLo),e(Q,ab),e(ab,afe),e(afe,DLo),e(ab,GLo),e(ab,BD),e(BD,OLo),e(ab,VLo),e(Q,XLo),e(Q,nb),e(nb,nfe),e(nfe,zLo),e(nb,WLo),e(nb,ID),e(ID,QLo),e(nb,HLo),e(Q,ULo),e(Q,sb),e(sb,sfe),e(sfe,JLo),e(sb,YLo),e(sb,ND),e(ND,KLo),e(sb,ZLo),e(Q,e8o),e(Q,lb),e(lb,lfe),e(lfe,o8o),e(lb,r8o),e(lb,qD),e(qD,t8o),e(lb,a8o),e(Q,n8o),e(Q,ib),e(ib,ife),e(ife,s8o),e(ib,l8o),e(ib,jD),e(jD,i8o),e(ib,d8o),e(Q,c8o),e(Q,db),e(db,dfe),e(dfe,f8o),e(db,m8o),e(db,DD),e(DD,g8o),e(db,h8o),e(Q,p8o),e(Q,cb),e(cb,cfe),e(cfe,_8o),e(cb,u8o),e(cb,GD),e(GD,b8o),e(cb,v8o),e(Q,F8o),e(Q,fb),e(fb,ffe),e(ffe,T8o),e(fb,M8o),e(fb,OD),e(OD,E8o),e(fb,C8o),e(Q,w8o),e(Q,mb),e(mb,mfe),e(mfe,A8o),e(mb,y8o),e(mb,VD),e(VD,L8o),e(mb,x8o),e(Q,$8o),e(Q,gb),e(gb,gfe),e(gfe,k8o),e(gb,S8o),e(gb,XD),e(XD,R8o),e(gb,P8o),e(Q,B8o),e(Q,hb),e(hb,hfe),e(hfe,I8o),e(hb,N8o),e(hb,zD),e(zD,q8o),e(hb,j8o),e(Q,D8o),e(Q,pb),e(pb,pfe),e(pfe,G8o),e(pb,O8o),e(pb,WD),e(WD,V8o),e(pb,X8o),e(Q,z8o),e(Q,_b),e(_b,_fe),e(_fe,W8o),e(_b,Q8o),e(_b,QD),e(QD,H8o),e(_b,U8o),e(Q,J8o),e(Q,ub),e(ub,ufe),e(ufe,Y8o),e(ub,K8o),e(ub,HD),e(HD,Z8o),e(ub,e9o),e(Q,o9o),e(Q,bb),e(bb,bfe),e(bfe,r9o),e(bb,t9o),e(bb,vfe),e(vfe,a9o),e(bb,n9o),e(Q,s9o),e(Q,vb),e(vb,Ffe),e(Ffe,l9o),e(vb,i9o),e(vb,UD),e(UD,d9o),e(vb,c9o),e(Q,f9o),e(Q,Fb),e(Fb,Tfe),e(Tfe,m9o),e(Fb,g9o),e(Fb,JD),e(JD,h9o),e(Fb,p9o),e(Q,_9o),e(Q,Tb),e(Tb,Mfe),e(Mfe,u9o),e(Tb,b9o),e(Tb,YD),e(YD,v9o),e(Tb,F9o),e(Q,T9o),e(Q,Mb),e(Mb,Efe),e(Efe,M9o),e(Mb,E9o),e(Mb,KD),e(KD,C9o),e(Mb,w9o),e(Ze,A9o),e(Ze,Eb),e(Eb,y9o),e(Eb,Cfe),e(Cfe,L9o),e(Eb,x9o),e(Eb,wfe),e(wfe,$9o),e(Ze,k9o),M(Cb,Ze,null),b(f,oje,u),b(f,qi,u),e(qi,wb),e(wb,Afe),M(Ly,Afe,null),e(qi,S9o),e(qi,yfe),e(yfe,R9o),b(f,rje,u),b(f,So,u),M(xy,So,null),e(So,P9o),e(So,ji),e(ji,B9o),e(ji,ZD),e(ZD,I9o),e(ji,N9o),e(ji,eG),e(eG,q9o),e(ji,j9o),e(So,D9o),e(So,$y),e($y,G9o),e($y,Lfe),e(Lfe,O9o),e($y,V9o),e(So,X9o),e(So,it),M(ky,it,null),e(it,z9o),e(it,xfe),e(xfe,W9o),e(it,Q9o),e(it,Di),e(Di,H9o),e(Di,$fe),e($fe,U9o),e(Di,J9o),e(Di,oG),e(oG,Y9o),e(Di,K9o),e(it,Z9o),M(Ab,it,null),e(So,exo),e(So,eo),M(Sy,eo,null),e(eo,oxo),e(eo,kfe),e(kfe,rxo),e(eo,txo),e(eo,Ra),e(Ra,axo),e(Ra,Sfe),e(Sfe,nxo),e(Ra,sxo),e(Ra,Rfe),e(Rfe,lxo),e(Ra,ixo),e(Ra,Pfe),e(Pfe,dxo),e(Ra,cxo),e(eo,fxo),e(eo,_e),e(_e,yb),e(yb,Bfe),e(Bfe,mxo),e(yb,gxo),e(yb,rG),e(rG,hxo),e(yb,pxo),e(_e,_xo),e(_e,Lb),e(Lb,Ife),e(Ife,uxo),e(Lb,bxo),e(Lb,tG),e(tG,vxo),e(Lb,Fxo),e(_e,Txo),e(_e,xb),e(xb,Nfe),e(Nfe,Mxo),e(xb,Exo),e(xb,aG),e(aG,Cxo),e(xb,wxo),e(_e,Axo),e(_e,$b),e($b,qfe),e(qfe,yxo),e($b,Lxo),e($b,nG),e(nG,xxo),e($b,$xo),e(_e,kxo),e(_e,kb),e(kb,jfe),e(jfe,Sxo),e(kb,Rxo),e(kb,sG),e(sG,Pxo),e(kb,Bxo),e(_e,Ixo),e(_e,Sb),e(Sb,Dfe),e(Dfe,Nxo),e(Sb,qxo),e(Sb,lG),e(lG,jxo),e(Sb,Dxo),e(_e,Gxo),e(_e,Rb),e(Rb,Gfe),e(Gfe,Oxo),e(Rb,Vxo),e(Rb,iG),e(iG,Xxo),e(Rb,zxo),e(_e,Wxo),e(_e,Pb),e(Pb,Ofe),e(Ofe,Qxo),e(Pb,Hxo),e(Pb,dG),e(dG,Uxo),e(Pb,Jxo),e(_e,Yxo),e(_e,Bb),e(Bb,Vfe),e(Vfe,Kxo),e(Bb,Zxo),e(Bb,cG),e(cG,e$o),e(Bb,o$o),e(_e,r$o),e(_e,Ib),e(Ib,Xfe),e(Xfe,t$o),e(Ib,a$o),e(Ib,fG),e(fG,n$o),e(Ib,s$o),e(_e,l$o),e(_e,Nb),e(Nb,zfe),e(zfe,i$o),e(Nb,d$o),e(Nb,mG),e(mG,c$o),e(Nb,f$o),e(_e,m$o),e(_e,qb),e(qb,Wfe),e(Wfe,g$o),e(qb,h$o),e(qb,gG),e(gG,p$o),e(qb,_$o),e(_e,u$o),e(_e,jb),e(jb,Qfe),e(Qfe,b$o),e(jb,v$o),e(jb,hG),e(hG,F$o),e(jb,T$o),e(_e,M$o),e(_e,Db),e(Db,Hfe),e(Hfe,E$o),e(Db,C$o),e(Db,pG),e(pG,w$o),e(Db,A$o),e(_e,y$o),e(_e,Gb),e(Gb,Ufe),e(Ufe,L$o),e(Gb,x$o),e(Gb,_G),e(_G,$$o),e(Gb,k$o),e(_e,S$o),e(_e,Ob),e(Ob,Jfe),e(Jfe,R$o),e(Ob,P$o),e(Ob,uG),e(uG,B$o),e(Ob,I$o),e(eo,N$o),e(eo,Vb),e(Vb,q$o),e(Vb,Yfe),e(Yfe,j$o),e(Vb,D$o),e(Vb,Kfe),e(Kfe,G$o),e(eo,O$o),M(Xb,eo,null),b(f,tje,u),b(f,Gi,u),e(Gi,zb),e(zb,Zfe),M(Ry,Zfe,null),e(Gi,V$o),e(Gi,eme),e(eme,X$o),b(f,aje,u),b(f,Ro,u),M(Py,Ro,null),e(Ro,z$o),e(Ro,Oi),e(Oi,W$o),e(Oi,bG),e(bG,Q$o),e(Oi,H$o),e(Oi,vG),e(vG,U$o),e(Oi,J$o),e(Ro,Y$o),e(Ro,By),e(By,K$o),e(By,ome),e(ome,Z$o),e(By,eko),e(Ro,oko),e(Ro,dt),M(Iy,dt,null),e(dt,rko),e(dt,rme),e(rme,tko),e(dt,ako),e(dt,Vi),e(Vi,nko),e(Vi,tme),e(tme,sko),e(Vi,lko),e(Vi,FG),e(FG,iko),e(Vi,dko),e(dt,cko),M(Wb,dt,null),e(Ro,fko),e(Ro,oo),M(Ny,oo,null),e(oo,mko),e(oo,ame),e(ame,gko),e(oo,hko),e(oo,Pa),e(Pa,pko),e(Pa,nme),e(nme,_ko),e(Pa,uko),e(Pa,sme),e(sme,bko),e(Pa,vko),e(Pa,lme),e(lme,Fko),e(Pa,Tko),e(oo,Mko),e(oo,N),e(N,Qb),e(Qb,ime),e(ime,Eko),e(Qb,Cko),e(Qb,TG),e(TG,wko),e(Qb,Ako),e(N,yko),e(N,Hb),e(Hb,dme),e(dme,Lko),e(Hb,xko),e(Hb,MG),e(MG,$ko),e(Hb,kko),e(N,Sko),e(N,Ub),e(Ub,cme),e(cme,Rko),e(Ub,Pko),e(Ub,EG),e(EG,Bko),e(Ub,Iko),e(N,Nko),e(N,Jb),e(Jb,fme),e(fme,qko),e(Jb,jko),e(Jb,CG),e(CG,Dko),e(Jb,Gko),e(N,Oko),e(N,Yb),e(Yb,mme),e(mme,Vko),e(Yb,Xko),e(Yb,wG),e(wG,zko),e(Yb,Wko),e(N,Qko),e(N,Kb),e(Kb,gme),e(gme,Hko),e(Kb,Uko),e(Kb,AG),e(AG,Jko),e(Kb,Yko),e(N,Kko),e(N,Zb),e(Zb,hme),e(hme,Zko),e(Zb,eSo),e(Zb,yG),e(yG,oSo),e(Zb,rSo),e(N,tSo),e(N,e2),e(e2,pme),e(pme,aSo),e(e2,nSo),e(e2,LG),e(LG,sSo),e(e2,lSo),e(N,iSo),e(N,o2),e(o2,_me),e(_me,dSo),e(o2,cSo),e(o2,xG),e(xG,fSo),e(o2,mSo),e(N,gSo),e(N,r2),e(r2,ume),e(ume,hSo),e(r2,pSo),e(r2,$G),e($G,_So),e(r2,uSo),e(N,bSo),e(N,t2),e(t2,bme),e(bme,vSo),e(t2,FSo),e(t2,kG),e(kG,TSo),e(t2,MSo),e(N,ESo),e(N,a2),e(a2,vme),e(vme,CSo),e(a2,wSo),e(a2,SG),e(SG,ASo),e(a2,ySo),e(N,LSo),e(N,n2),e(n2,Fme),e(Fme,xSo),e(n2,$So),e(n2,RG),e(RG,kSo),e(n2,SSo),e(N,RSo),e(N,s2),e(s2,Tme),e(Tme,PSo),e(s2,BSo),e(s2,PG),e(PG,ISo),e(s2,NSo),e(N,qSo),e(N,l2),e(l2,Mme),e(Mme,jSo),e(l2,DSo),e(l2,BG),e(BG,GSo),e(l2,OSo),e(N,VSo),e(N,i2),e(i2,Eme),e(Eme,XSo),e(i2,zSo),e(i2,IG),e(IG,WSo),e(i2,QSo),e(N,HSo),e(N,d2),e(d2,Cme),e(Cme,USo),e(d2,JSo),e(d2,NG),e(NG,YSo),e(d2,KSo),e(N,ZSo),e(N,c2),e(c2,wme),e(wme,eRo),e(c2,oRo),e(c2,qG),e(qG,rRo),e(c2,tRo),e(N,aRo),e(N,f2),e(f2,Ame),e(Ame,nRo),e(f2,sRo),e(f2,jG),e(jG,lRo),e(f2,iRo),e(N,dRo),e(N,m2),e(m2,yme),e(yme,cRo),e(m2,fRo),e(m2,DG),e(DG,mRo),e(m2,gRo),e(N,hRo),e(N,g2),e(g2,Lme),e(Lme,pRo),e(g2,_Ro),e(g2,GG),e(GG,uRo),e(g2,bRo),e(N,vRo),e(N,h2),e(h2,xme),e(xme,FRo),e(h2,TRo),e(h2,OG),e(OG,MRo),e(h2,ERo),e(N,CRo),e(N,p2),e(p2,$me),e($me,wRo),e(p2,ARo),e(p2,VG),e(VG,yRo),e(p2,LRo),e(N,xRo),e(N,_2),e(_2,kme),e(kme,$Ro),e(_2,kRo),e(_2,XG),e(XG,SRo),e(_2,RRo),e(N,PRo),e(N,u2),e(u2,Sme),e(Sme,BRo),e(u2,IRo),e(u2,zG),e(zG,NRo),e(u2,qRo),e(N,jRo),e(N,b2),e(b2,Rme),e(Rme,DRo),e(b2,GRo),e(b2,WG),e(WG,ORo),e(b2,VRo),e(N,XRo),e(N,v2),e(v2,Pme),e(Pme,zRo),e(v2,WRo),e(v2,QG),e(QG,QRo),e(v2,HRo),e(N,URo),e(N,F2),e(F2,Bme),e(Bme,JRo),e(F2,YRo),e(F2,HG),e(HG,KRo),e(F2,ZRo),e(N,ePo),e(N,T2),e(T2,Ime),e(Ime,oPo),e(T2,rPo),e(T2,UG),e(UG,tPo),e(T2,aPo),e(N,nPo),e(N,M2),e(M2,Nme),e(Nme,sPo),e(M2,lPo),e(M2,JG),e(JG,iPo),e(M2,dPo),e(N,cPo),e(N,E2),e(E2,qme),e(qme,fPo),e(E2,mPo),e(E2,YG),e(YG,gPo),e(E2,hPo),e(N,pPo),e(N,C2),e(C2,jme),e(jme,_Po),e(C2,uPo),e(C2,KG),e(KG,bPo),e(C2,vPo),e(N,FPo),e(N,w2),e(w2,Dme),e(Dme,TPo),e(w2,MPo),e(w2,ZG),e(ZG,EPo),e(w2,CPo),e(N,wPo),e(N,A2),e(A2,Gme),e(Gme,APo),e(A2,yPo),e(A2,eO),e(eO,LPo),e(A2,xPo),e(N,$Po),e(N,y2),e(y2,Ome),e(Ome,kPo),e(y2,SPo),e(y2,oO),e(oO,RPo),e(y2,PPo),e(N,BPo),e(N,L2),e(L2,Vme),e(Vme,IPo),e(L2,NPo),e(L2,rO),e(rO,qPo),e(L2,jPo),e(N,DPo),e(N,x2),e(x2,Xme),e(Xme,GPo),e(x2,OPo),e(x2,tO),e(tO,VPo),e(x2,XPo),e(N,zPo),e(N,$2),e($2,zme),e(zme,WPo),e($2,QPo),e($2,aO),e(aO,HPo),e($2,UPo),e(N,JPo),e(N,k2),e(k2,Wme),e(Wme,YPo),e(k2,KPo),e(k2,nO),e(nO,ZPo),e(k2,eBo),e(N,oBo),e(N,S2),e(S2,Qme),e(Qme,rBo),e(S2,tBo),e(S2,sO),e(sO,aBo),e(S2,nBo),e(N,sBo),e(N,R2),e(R2,Hme),e(Hme,lBo),e(R2,iBo),e(R2,lO),e(lO,dBo),e(R2,cBo),e(N,fBo),e(N,P2),e(P2,Ume),e(Ume,mBo),e(P2,gBo),e(P2,iO),e(iO,hBo),e(P2,pBo),e(N,_Bo),e(N,B2),e(B2,Jme),e(Jme,uBo),e(B2,bBo),e(B2,dO),e(dO,vBo),e(B2,FBo),e(N,TBo),e(N,I2),e(I2,Yme),e(Yme,MBo),e(I2,EBo),e(I2,cO),e(cO,CBo),e(I2,wBo),e(N,ABo),e(N,N2),e(N2,Kme),e(Kme,yBo),e(N2,LBo),e(N2,fO),e(fO,xBo),e(N2,$Bo),e(N,kBo),e(N,q2),e(q2,Zme),e(Zme,SBo),e(q2,RBo),e(q2,mO),e(mO,PBo),e(q2,BBo),e(N,IBo),e(N,j2),e(j2,ege),e(ege,NBo),e(j2,qBo),e(j2,gO),e(gO,jBo),e(j2,DBo),e(oo,GBo),e(oo,D2),e(D2,OBo),e(D2,oge),e(oge,VBo),e(D2,XBo),e(D2,rge),e(rge,zBo),e(oo,WBo),M(G2,oo,null),b(f,nje,u),b(f,Xi,u),e(Xi,O2),e(O2,tge),M(qy,tge,null),e(Xi,QBo),e(Xi,age),e(age,HBo),b(f,sje,u),b(f,Po,u),M(jy,Po,null),e(Po,UBo),e(Po,zi),e(zi,JBo),e(zi,hO),e(hO,YBo),e(zi,KBo),e(zi,pO),e(pO,ZBo),e(zi,eIo),e(Po,oIo),e(Po,Dy),e(Dy,rIo),e(Dy,nge),e(nge,tIo),e(Dy,aIo),e(Po,nIo),e(Po,ct),M(Gy,ct,null),e(ct,sIo),e(ct,sge),e(sge,lIo),e(ct,iIo),e(ct,Wi),e(Wi,dIo),e(Wi,lge),e(lge,cIo),e(Wi,fIo),e(Wi,_O),e(_O,mIo),e(Wi,gIo),e(ct,hIo),M(V2,ct,null),e(Po,pIo),e(Po,ro),M(Oy,ro,null),e(ro,_Io),e(ro,ige),e(ige,uIo),e(ro,bIo),e(ro,Ba),e(Ba,vIo),e(Ba,dge),e(dge,FIo),e(Ba,TIo),e(Ba,cge),e(cge,MIo),e(Ba,EIo),e(Ba,fge),e(fge,CIo),e(Ba,wIo),e(ro,AIo),e(ro,K),e(K,X2),e(X2,mge),e(mge,yIo),e(X2,LIo),e(X2,uO),e(uO,xIo),e(X2,$Io),e(K,kIo),e(K,z2),e(z2,gge),e(gge,SIo),e(z2,RIo),e(z2,bO),e(bO,PIo),e(z2,BIo),e(K,IIo),e(K,W2),e(W2,hge),e(hge,NIo),e(W2,qIo),e(W2,vO),e(vO,jIo),e(W2,DIo),e(K,GIo),e(K,Q2),e(Q2,pge),e(pge,OIo),e(Q2,VIo),e(Q2,FO),e(FO,XIo),e(Q2,zIo),e(K,WIo),e(K,H2),e(H2,_ge),e(_ge,QIo),e(H2,HIo),e(H2,TO),e(TO,UIo),e(H2,JIo),e(K,YIo),e(K,U2),e(U2,uge),e(uge,KIo),e(U2,ZIo),e(U2,MO),e(MO,eNo),e(U2,oNo),e(K,rNo),e(K,J2),e(J2,bge),e(bge,tNo),e(J2,aNo),e(J2,EO),e(EO,nNo),e(J2,sNo),e(K,lNo),e(K,Y2),e(Y2,vge),e(vge,iNo),e(Y2,dNo),e(Y2,CO),e(CO,cNo),e(Y2,fNo),e(K,mNo),e(K,K2),e(K2,Fge),e(Fge,gNo),e(K2,hNo),e(K2,wO),e(wO,pNo),e(K2,_No),e(K,uNo),e(K,Z2),e(Z2,Tge),e(Tge,bNo),e(Z2,vNo),e(Z2,AO),e(AO,FNo),e(Z2,TNo),e(K,MNo),e(K,e4),e(e4,Mge),e(Mge,ENo),e(e4,CNo),e(e4,yO),e(yO,wNo),e(e4,ANo),e(K,yNo),e(K,o4),e(o4,Ege),e(Ege,LNo),e(o4,xNo),e(o4,LO),e(LO,$No),e(o4,kNo),e(K,SNo),e(K,r4),e(r4,Cge),e(Cge,RNo),e(r4,PNo),e(r4,xO),e(xO,BNo),e(r4,INo),e(K,NNo),e(K,t4),e(t4,wge),e(wge,qNo),e(t4,jNo),e(t4,$O),e($O,DNo),e(t4,GNo),e(K,ONo),e(K,a4),e(a4,Age),e(Age,VNo),e(a4,XNo),e(a4,kO),e(kO,zNo),e(a4,WNo),e(K,QNo),e(K,n4),e(n4,yge),e(yge,HNo),e(n4,UNo),e(n4,SO),e(SO,JNo),e(n4,YNo),e(K,KNo),e(K,s4),e(s4,Lge),e(Lge,ZNo),e(s4,eqo),e(s4,RO),e(RO,oqo),e(s4,rqo),e(K,tqo),e(K,l4),e(l4,xge),e(xge,aqo),e(l4,nqo),e(l4,PO),e(PO,sqo),e(l4,lqo),e(K,iqo),e(K,i4),e(i4,$ge),e($ge,dqo),e(i4,cqo),e(i4,BO),e(BO,fqo),e(i4,mqo),e(K,gqo),e(K,d4),e(d4,kge),e(kge,hqo),e(d4,pqo),e(d4,IO),e(IO,_qo),e(d4,uqo),e(K,bqo),e(K,c4),e(c4,Sge),e(Sge,vqo),e(c4,Fqo),e(c4,NO),e(NO,Tqo),e(c4,Mqo),e(K,Eqo),e(K,f4),e(f4,Rge),e(Rge,Cqo),e(f4,wqo),e(f4,qO),e(qO,Aqo),e(f4,yqo),e(K,Lqo),e(K,m4),e(m4,Pge),e(Pge,xqo),e(m4,$qo),e(m4,jO),e(jO,kqo),e(m4,Sqo),e(K,Rqo),e(K,g4),e(g4,Bge),e(Bge,Pqo),e(g4,Bqo),e(g4,DO),e(DO,Iqo),e(g4,Nqo),e(K,qqo),e(K,h4),e(h4,Ige),e(Ige,jqo),e(h4,Dqo),e(h4,GO),e(GO,Gqo),e(h4,Oqo),e(K,Vqo),e(K,p4),e(p4,Nge),e(Nge,Xqo),e(p4,zqo),e(p4,OO),e(OO,Wqo),e(p4,Qqo),e(K,Hqo),e(K,_4),e(_4,qge),e(qge,Uqo),e(_4,Jqo),e(_4,VO),e(VO,Yqo),e(_4,Kqo),e(K,Zqo),e(K,u4),e(u4,jge),e(jge,ejo),e(u4,ojo),e(u4,XO),e(XO,rjo),e(u4,tjo),e(K,ajo),e(K,b4),e(b4,Dge),e(Dge,njo),e(b4,sjo),e(b4,zO),e(zO,ljo),e(b4,ijo),e(ro,djo),e(ro,v4),e(v4,cjo),e(v4,Gge),e(Gge,fjo),e(v4,mjo),e(v4,Oge),e(Oge,gjo),e(ro,hjo),M(F4,ro,null),b(f,lje,u),b(f,Qi,u),e(Qi,T4),e(T4,Vge),M(Vy,Vge,null),e(Qi,pjo),e(Qi,Xge),e(Xge,_jo),b(f,ije,u),b(f,Bo,u),M(Xy,Bo,null),e(Bo,ujo),e(Bo,Hi),e(Hi,bjo),e(Hi,WO),e(WO,vjo),e(Hi,Fjo),e(Hi,QO),e(QO,Tjo),e(Hi,Mjo),e(Bo,Ejo),e(Bo,zy),e(zy,Cjo),e(zy,zge),e(zge,wjo),e(zy,Ajo),e(Bo,yjo),e(Bo,ft),M(Wy,ft,null),e(ft,Ljo),e(ft,Wge),e(Wge,xjo),e(ft,$jo),e(ft,Ui),e(Ui,kjo),e(Ui,Qge),e(Qge,Sjo),e(Ui,Rjo),e(Ui,HO),e(HO,Pjo),e(Ui,Bjo),e(ft,Ijo),M(M4,ft,null),e(Bo,Njo),e(Bo,to),M(Qy,to,null),e(to,qjo),e(to,Hge),e(Hge,jjo),e(to,Djo),e(to,Ia),e(Ia,Gjo),e(Ia,Uge),e(Uge,Ojo),e(Ia,Vjo),e(Ia,Jge),e(Jge,Xjo),e(Ia,zjo),e(Ia,Yge),e(Yge,Wjo),e(Ia,Qjo),e(to,Hjo),e(to,Yr),e(Yr,E4),e(E4,Kge),e(Kge,Ujo),e(E4,Jjo),e(E4,UO),e(UO,Yjo),e(E4,Kjo),e(Yr,Zjo),e(Yr,C4),e(C4,Zge),e(Zge,eDo),e(C4,oDo),e(C4,JO),e(JO,rDo),e(C4,tDo),e(Yr,aDo),e(Yr,w4),e(w4,ehe),e(ehe,nDo),e(w4,sDo),e(w4,YO),e(YO,lDo),e(w4,iDo),e(Yr,dDo),e(Yr,A4),e(A4,ohe),e(ohe,cDo),e(A4,fDo),e(A4,KO),e(KO,mDo),e(A4,gDo),e(Yr,hDo),e(Yr,y4),e(y4,rhe),e(rhe,pDo),e(y4,_Do),e(y4,ZO),e(ZO,uDo),e(y4,bDo),e(to,vDo),e(to,L4),e(L4,FDo),e(L4,the),e(the,TDo),e(L4,MDo),e(L4,ahe),e(ahe,EDo),e(to,CDo),M(x4,to,null),b(f,dje,u),b(f,Ji,u),e(Ji,$4),e($4,nhe),M(Hy,nhe,null),e(Ji,wDo),e(Ji,she),e(she,ADo),b(f,cje,u),b(f,Io,u),M(Uy,Io,null),e(Io,yDo),e(Io,Yi),e(Yi,LDo),e(Yi,eV),e(eV,xDo),e(Yi,$Do),e(Yi,oV),e(oV,kDo),e(Yi,SDo),e(Io,RDo),e(Io,Jy),e(Jy,PDo),e(Jy,lhe),e(lhe,BDo),e(Jy,IDo),e(Io,NDo),e(Io,mt),M(Yy,mt,null),e(mt,qDo),e(mt,ihe),e(ihe,jDo),e(mt,DDo),e(mt,Ki),e(Ki,GDo),e(Ki,dhe),e(dhe,ODo),e(Ki,VDo),e(Ki,rV),e(rV,XDo),e(Ki,zDo),e(mt,WDo),M(k4,mt,null),e(Io,QDo),e(Io,ao),M(Ky,ao,null),e(ao,HDo),e(ao,che),e(che,UDo),e(ao,JDo),e(ao,Na),e(Na,YDo),e(Na,fhe),e(fhe,KDo),e(Na,ZDo),e(Na,mhe),e(mhe,eGo),e(Na,oGo),e(Na,ghe),e(ghe,rGo),e(Na,tGo),e(ao,aGo),e(ao,H),e(H,S4),e(S4,hhe),e(hhe,nGo),e(S4,sGo),e(S4,tV),e(tV,lGo),e(S4,iGo),e(H,dGo),e(H,R4),e(R4,phe),e(phe,cGo),e(R4,fGo),e(R4,aV),e(aV,mGo),e(R4,gGo),e(H,hGo),e(H,P4),e(P4,_he),e(_he,pGo),e(P4,_Go),e(P4,nV),e(nV,uGo),e(P4,bGo),e(H,vGo),e(H,B4),e(B4,uhe),e(uhe,FGo),e(B4,TGo),e(B4,sV),e(sV,MGo),e(B4,EGo),e(H,CGo),e(H,I4),e(I4,bhe),e(bhe,wGo),e(I4,AGo),e(I4,lV),e(lV,yGo),e(I4,LGo),e(H,xGo),e(H,N4),e(N4,vhe),e(vhe,$Go),e(N4,kGo),e(N4,iV),e(iV,SGo),e(N4,RGo),e(H,PGo),e(H,q4),e(q4,Fhe),e(Fhe,BGo),e(q4,IGo),e(q4,dV),e(dV,NGo),e(q4,qGo),e(H,jGo),e(H,j4),e(j4,The),e(The,DGo),e(j4,GGo),e(j4,cV),e(cV,OGo),e(j4,VGo),e(H,XGo),e(H,D4),e(D4,Mhe),e(Mhe,zGo),e(D4,WGo),e(D4,fV),e(fV,QGo),e(D4,HGo),e(H,UGo),e(H,G4),e(G4,Ehe),e(Ehe,JGo),e(G4,YGo),e(G4,mV),e(mV,KGo),e(G4,ZGo),e(H,eOo),e(H,O4),e(O4,Che),e(Che,oOo),e(O4,rOo),e(O4,gV),e(gV,tOo),e(O4,aOo),e(H,nOo),e(H,V4),e(V4,whe),e(whe,sOo),e(V4,lOo),e(V4,hV),e(hV,iOo),e(V4,dOo),e(H,cOo),e(H,X4),e(X4,Ahe),e(Ahe,fOo),e(X4,mOo),e(X4,pV),e(pV,gOo),e(X4,hOo),e(H,pOo),e(H,z4),e(z4,yhe),e(yhe,_Oo),e(z4,uOo),e(z4,_V),e(_V,bOo),e(z4,vOo),e(H,FOo),e(H,W4),e(W4,Lhe),e(Lhe,TOo),e(W4,MOo),e(W4,uV),e(uV,EOo),e(W4,COo),e(H,wOo),e(H,Q4),e(Q4,xhe),e(xhe,AOo),e(Q4,yOo),e(Q4,bV),e(bV,LOo),e(Q4,xOo),e(H,$Oo),e(H,H4),e(H4,$he),e($he,kOo),e(H4,SOo),e(H4,vV),e(vV,ROo),e(H4,POo),e(H,BOo),e(H,U4),e(U4,khe),e(khe,IOo),e(U4,NOo),e(U4,FV),e(FV,qOo),e(U4,jOo),e(H,DOo),e(H,J4),e(J4,She),e(She,GOo),e(J4,OOo),e(J4,TV),e(TV,VOo),e(J4,XOo),e(H,zOo),e(H,Y4),e(Y4,Rhe),e(Rhe,WOo),e(Y4,QOo),e(Y4,MV),e(MV,HOo),e(Y4,UOo),e(H,JOo),e(H,K4),e(K4,Phe),e(Phe,YOo),e(K4,KOo),e(K4,EV),e(EV,ZOo),e(K4,eVo),e(H,oVo),e(H,Z4),e(Z4,Bhe),e(Bhe,rVo),e(Z4,tVo),e(Z4,CV),e(CV,aVo),e(Z4,nVo),e(H,sVo),e(H,ev),e(ev,Ihe),e(Ihe,lVo),e(ev,iVo),e(ev,wV),e(wV,dVo),e(ev,cVo),e(H,fVo),e(H,ov),e(ov,Nhe),e(Nhe,mVo),e(ov,gVo),e(ov,AV),e(AV,hVo),e(ov,pVo),e(H,_Vo),e(H,rv),e(rv,qhe),e(qhe,uVo),e(rv,bVo),e(rv,yV),e(yV,vVo),e(rv,FVo),e(H,TVo),e(H,tv),e(tv,jhe),e(jhe,MVo),e(tv,EVo),e(tv,LV),e(LV,CVo),e(tv,wVo),e(H,AVo),e(H,av),e(av,Dhe),e(Dhe,yVo),e(av,LVo),e(av,xV),e(xV,xVo),e(av,$Vo),e(H,kVo),e(H,nv),e(nv,Ghe),e(Ghe,SVo),e(nv,RVo),e(nv,$V),e($V,PVo),e(nv,BVo),e(H,IVo),e(H,sv),e(sv,Ohe),e(Ohe,NVo),e(sv,qVo),e(sv,kV),e(kV,jVo),e(sv,DVo),e(H,GVo),e(H,lv),e(lv,Vhe),e(Vhe,OVo),e(lv,VVo),e(lv,SV),e(SV,XVo),e(lv,zVo),e(H,WVo),e(H,iv),e(iv,Xhe),e(Xhe,QVo),e(iv,HVo),e(iv,RV),e(RV,UVo),e(iv,JVo),e(H,YVo),e(H,dv),e(dv,zhe),e(zhe,KVo),e(dv,ZVo),e(dv,PV),e(PV,eXo),e(dv,oXo),e(H,rXo),e(H,cv),e(cv,Whe),e(Whe,tXo),e(cv,aXo),e(cv,BV),e(BV,nXo),e(cv,sXo),e(H,lXo),e(H,fv),e(fv,Qhe),e(Qhe,iXo),e(fv,dXo),e(fv,IV),e(IV,cXo),e(fv,fXo),e(ao,mXo),e(ao,mv),e(mv,gXo),e(mv,Hhe),e(Hhe,hXo),e(mv,pXo),e(mv,Uhe),e(Uhe,_Xo),e(ao,uXo),M(gv,ao,null),b(f,fje,u),b(f,Zi,u),e(Zi,hv),e(hv,Jhe),M(Zy,Jhe,null),e(Zi,bXo),e(Zi,Yhe),e(Yhe,vXo),b(f,mje,u),b(f,No,u),M(eL,No,null),e(No,FXo),e(No,ed),e(ed,TXo),e(ed,NV),e(NV,MXo),e(ed,EXo),e(ed,qV),e(qV,CXo),e(ed,wXo),e(No,AXo),e(No,oL),e(oL,yXo),e(oL,Khe),e(Khe,LXo),e(oL,xXo),e(No,$Xo),e(No,gt),M(rL,gt,null),e(gt,kXo),e(gt,Zhe),e(Zhe,SXo),e(gt,RXo),e(gt,od),e(od,PXo),e(od,epe),e(epe,BXo),e(od,IXo),e(od,jV),e(jV,NXo),e(od,qXo),e(gt,jXo),M(pv,gt,null),e(No,DXo),e(No,no),M(tL,no,null),e(no,GXo),e(no,ope),e(ope,OXo),e(no,VXo),e(no,qa),e(qa,XXo),e(qa,rpe),e(rpe,zXo),e(qa,WXo),e(qa,tpe),e(tpe,QXo),e(qa,HXo),e(qa,ape),e(ape,UXo),e(qa,JXo),e(no,YXo),e(no,V),e(V,_v),e(_v,npe),e(npe,KXo),e(_v,ZXo),e(_v,DV),e(DV,ezo),e(_v,ozo),e(V,rzo),e(V,uv),e(uv,spe),e(spe,tzo),e(uv,azo),e(uv,GV),e(GV,nzo),e(uv,szo),e(V,lzo),e(V,bv),e(bv,lpe),e(lpe,izo),e(bv,dzo),e(bv,OV),e(OV,czo),e(bv,fzo),e(V,mzo),e(V,vv),e(vv,ipe),e(ipe,gzo),e(vv,hzo),e(vv,VV),e(VV,pzo),e(vv,_zo),e(V,uzo),e(V,Fv),e(Fv,dpe),e(dpe,bzo),e(Fv,vzo),e(Fv,XV),e(XV,Fzo),e(Fv,Tzo),e(V,Mzo),e(V,Tv),e(Tv,cpe),e(cpe,Ezo),e(Tv,Czo),e(Tv,zV),e(zV,wzo),e(Tv,Azo),e(V,yzo),e(V,Mv),e(Mv,fpe),e(fpe,Lzo),e(Mv,xzo),e(Mv,WV),e(WV,$zo),e(Mv,kzo),e(V,Szo),e(V,Ev),e(Ev,mpe),e(mpe,Rzo),e(Ev,Pzo),e(Ev,QV),e(QV,Bzo),e(Ev,Izo),e(V,Nzo),e(V,Cv),e(Cv,gpe),e(gpe,qzo),e(Cv,jzo),e(Cv,HV),e(HV,Dzo),e(Cv,Gzo),e(V,Ozo),e(V,wv),e(wv,hpe),e(hpe,Vzo),e(wv,Xzo),e(wv,UV),e(UV,zzo),e(wv,Wzo),e(V,Qzo),e(V,Av),e(Av,ppe),e(ppe,Hzo),e(Av,Uzo),e(Av,JV),e(JV,Jzo),e(Av,Yzo),e(V,Kzo),e(V,yv),e(yv,_pe),e(_pe,Zzo),e(yv,eWo),e(yv,YV),e(YV,oWo),e(yv,rWo),e(V,tWo),e(V,Lv),e(Lv,upe),e(upe,aWo),e(Lv,nWo),e(Lv,KV),e(KV,sWo),e(Lv,lWo),e(V,iWo),e(V,xv),e(xv,bpe),e(bpe,dWo),e(xv,cWo),e(xv,ZV),e(ZV,fWo),e(xv,mWo),e(V,gWo),e(V,$v),e($v,vpe),e(vpe,hWo),e($v,pWo),e($v,eX),e(eX,_Wo),e($v,uWo),e(V,bWo),e(V,kv),e(kv,Fpe),e(Fpe,vWo),e(kv,FWo),e(kv,oX),e(oX,TWo),e(kv,MWo),e(V,EWo),e(V,Sv),e(Sv,Tpe),e(Tpe,CWo),e(Sv,wWo),e(Sv,rX),e(rX,AWo),e(Sv,yWo),e(V,LWo),e(V,Rv),e(Rv,Mpe),e(Mpe,xWo),e(Rv,$Wo),e(Rv,tX),e(tX,kWo),e(Rv,SWo),e(V,RWo),e(V,Pv),e(Pv,Epe),e(Epe,PWo),e(Pv,BWo),e(Pv,aX),e(aX,IWo),e(Pv,NWo),e(V,qWo),e(V,Bv),e(Bv,Cpe),e(Cpe,jWo),e(Bv,DWo),e(Bv,nX),e(nX,GWo),e(Bv,OWo),e(V,VWo),e(V,Iv),e(Iv,wpe),e(wpe,XWo),e(Iv,zWo),e(Iv,sX),e(sX,WWo),e(Iv,QWo),e(V,HWo),e(V,Nv),e(Nv,Ape),e(Ape,UWo),e(Nv,JWo),e(Nv,lX),e(lX,YWo),e(Nv,KWo),e(V,ZWo),e(V,qv),e(qv,ype),e(ype,eQo),e(qv,oQo),e(qv,iX),e(iX,rQo),e(qv,tQo),e(V,aQo),e(V,jv),e(jv,Lpe),e(Lpe,nQo),e(jv,sQo),e(jv,dX),e(dX,lQo),e(jv,iQo),e(V,dQo),e(V,Dv),e(Dv,xpe),e(xpe,cQo),e(Dv,fQo),e(Dv,cX),e(cX,mQo),e(Dv,gQo),e(V,hQo),e(V,Gv),e(Gv,$pe),e($pe,pQo),e(Gv,_Qo),e(Gv,fX),e(fX,uQo),e(Gv,bQo),e(V,vQo),e(V,Ov),e(Ov,kpe),e(kpe,FQo),e(Ov,TQo),e(Ov,mX),e(mX,MQo),e(Ov,EQo),e(V,CQo),e(V,Vv),e(Vv,Spe),e(Spe,wQo),e(Vv,AQo),e(Vv,gX),e(gX,yQo),e(Vv,LQo),e(V,xQo),e(V,Xv),e(Xv,Rpe),e(Rpe,$Qo),e(Xv,kQo),e(Xv,hX),e(hX,SQo),e(Xv,RQo),e(V,PQo),e(V,zv),e(zv,Ppe),e(Ppe,BQo),e(zv,IQo),e(zv,pX),e(pX,NQo),e(zv,qQo),e(V,jQo),e(V,Wv),e(Wv,Bpe),e(Bpe,DQo),e(Wv,GQo),e(Wv,_X),e(_X,OQo),e(Wv,VQo),e(V,XQo),e(V,Qv),e(Qv,Ipe),e(Ipe,zQo),e(Qv,WQo),e(Qv,uX),e(uX,QQo),e(Qv,HQo),e(V,UQo),e(V,Hv),e(Hv,Npe),e(Npe,JQo),e(Hv,YQo),e(Hv,bX),e(bX,KQo),e(Hv,ZQo),e(V,eHo),e(V,Uv),e(Uv,qpe),e(qpe,oHo),e(Uv,rHo),e(Uv,vX),e(vX,tHo),e(Uv,aHo),e(V,nHo),e(V,Jv),e(Jv,jpe),e(jpe,sHo),e(Jv,lHo),e(Jv,FX),e(FX,iHo),e(Jv,dHo),e(V,cHo),e(V,Yv),e(Yv,Dpe),e(Dpe,fHo),e(Yv,mHo),e(Yv,TX),e(TX,gHo),e(Yv,hHo),e(V,pHo),e(V,Kv),e(Kv,Gpe),e(Gpe,_Ho),e(Kv,uHo),e(Kv,MX),e(MX,bHo),e(Kv,vHo),e(V,FHo),e(V,Zv),e(Zv,Ope),e(Ope,THo),e(Zv,MHo),e(Zv,EX),e(EX,EHo),e(Zv,CHo),e(V,wHo),e(V,e5),e(e5,Vpe),e(Vpe,AHo),e(e5,yHo),e(e5,CX),e(CX,LHo),e(e5,xHo),e(V,$Ho),e(V,o5),e(o5,Xpe),e(Xpe,kHo),e(o5,SHo),e(o5,wX),e(wX,RHo),e(o5,PHo),e(no,BHo),e(no,r5),e(r5,IHo),e(r5,zpe),e(zpe,NHo),e(r5,qHo),e(r5,Wpe),e(Wpe,jHo),e(no,DHo),M(t5,no,null),b(f,gje,u),b(f,rd,u),e(rd,a5),e(a5,Qpe),M(aL,Qpe,null),e(rd,GHo),e(rd,Hpe),e(Hpe,OHo),b(f,hje,u),b(f,qo,u),M(nL,qo,null),e(qo,VHo),e(qo,td),e(td,XHo),e(td,AX),e(AX,zHo),e(td,WHo),e(td,yX),e(yX,QHo),e(td,HHo),e(qo,UHo),e(qo,sL),e(sL,JHo),e(sL,Upe),e(Upe,YHo),e(sL,KHo),e(qo,ZHo),e(qo,ht),M(lL,ht,null),e(ht,eUo),e(ht,Jpe),e(Jpe,oUo),e(ht,rUo),e(ht,ad),e(ad,tUo),e(ad,Ype),e(Ype,aUo),e(ad,nUo),e(ad,LX),e(LX,sUo),e(ad,lUo),e(ht,iUo),M(n5,ht,null),e(qo,dUo),e(qo,so),M(iL,so,null),e(so,cUo),e(so,Kpe),e(Kpe,fUo),e(so,mUo),e(so,ja),e(ja,gUo),e(ja,Zpe),e(Zpe,hUo),e(ja,pUo),e(ja,e_e),e(e_e,_Uo),e(ja,uUo),e(ja,o_e),e(o_e,bUo),e(ja,vUo),e(so,FUo),e(so,r_e),e(r_e,s5),e(s5,t_e),e(t_e,TUo),e(s5,MUo),e(s5,xX),e(xX,EUo),e(s5,CUo),e(so,wUo),e(so,l5),e(l5,AUo),e(l5,a_e),e(a_e,yUo),e(l5,LUo),e(l5,n_e),e(n_e,xUo),e(so,$Uo),M(i5,so,null),b(f,pje,u),b(f,nd,u),e(nd,d5),e(d5,s_e),M(dL,s_e,null),e(nd,kUo),e(nd,l_e),e(l_e,SUo),b(f,_je,u),b(f,jo,u),M(cL,jo,null),e(jo,RUo),e(jo,sd),e(sd,PUo),e(sd,$X),e($X,BUo),e(sd,IUo),e(sd,kX),e(kX,NUo),e(sd,qUo),e(jo,jUo),e(jo,fL),e(fL,DUo),e(fL,i_e),e(i_e,GUo),e(fL,OUo),e(jo,VUo),e(jo,pt),M(mL,pt,null),e(pt,XUo),e(pt,d_e),e(d_e,zUo),e(pt,WUo),e(pt,ld),e(ld,QUo),e(ld,c_e),e(c_e,HUo),e(ld,UUo),e(ld,SX),e(SX,JUo),e(ld,YUo),e(pt,KUo),M(c5,pt,null),e(jo,ZUo),e(jo,lo),M(gL,lo,null),e(lo,eJo),e(lo,f_e),e(f_e,oJo),e(lo,rJo),e(lo,Da),e(Da,tJo),e(Da,m_e),e(m_e,aJo),e(Da,nJo),e(Da,g_e),e(g_e,sJo),e(Da,lJo),e(Da,h_e),e(h_e,iJo),e(Da,dJo),e(lo,cJo),e(lo,ve),e(ve,f5),e(f5,p_e),e(p_e,fJo),e(f5,mJo),e(f5,RX),e(RX,gJo),e(f5,hJo),e(ve,pJo),e(ve,m5),e(m5,__e),e(__e,_Jo),e(m5,uJo),e(m5,PX),e(PX,bJo),e(m5,vJo),e(ve,FJo),e(ve,g5),e(g5,u_e),e(u_e,TJo),e(g5,MJo),e(g5,BX),e(BX,EJo),e(g5,CJo),e(ve,wJo),e(ve,h5),e(h5,b_e),e(b_e,AJo),e(h5,yJo),e(h5,IX),e(IX,LJo),e(h5,xJo),e(ve,$Jo),e(ve,Bs),e(Bs,v_e),e(v_e,kJo),e(Bs,SJo),e(Bs,NX),e(NX,RJo),e(Bs,PJo),e(Bs,qX),e(qX,BJo),e(Bs,IJo),e(ve,NJo),e(ve,p5),e(p5,F_e),e(F_e,qJo),e(p5,jJo),e(p5,jX),e(jX,DJo),e(p5,GJo),e(ve,OJo),e(ve,_5),e(_5,T_e),e(T_e,VJo),e(_5,XJo),e(_5,DX),e(DX,zJo),e(_5,WJo),e(ve,QJo),e(ve,_t),e(_t,M_e),e(M_e,HJo),e(_t,UJo),e(_t,GX),e(GX,JJo),e(_t,YJo),e(_t,OX),e(OX,KJo),e(_t,ZJo),e(_t,VX),e(VX,eYo),e(_t,oYo),e(ve,rYo),e(ve,u5),e(u5,E_e),e(E_e,tYo),e(u5,aYo),e(u5,XX),e(XX,nYo),e(u5,sYo),e(ve,lYo),e(ve,b5),e(b5,C_e),e(C_e,iYo),e(b5,dYo),e(b5,zX),e(zX,cYo),e(b5,fYo),e(ve,mYo),e(ve,v5),e(v5,w_e),e(w_e,gYo),e(v5,hYo),e(v5,WX),e(WX,pYo),e(v5,_Yo),e(ve,uYo),e(ve,F5),e(F5,A_e),e(A_e,bYo),e(F5,vYo),e(F5,QX),e(QX,FYo),e(F5,TYo),e(ve,MYo),e(ve,T5),e(T5,y_e),e(y_e,EYo),e(T5,CYo),e(T5,HX),e(HX,wYo),e(T5,AYo),e(ve,yYo),e(ve,M5),e(M5,L_e),e(L_e,LYo),e(M5,xYo),e(M5,UX),e(UX,$Yo),e(M5,kYo),e(ve,SYo),e(ve,E5),e(E5,x_e),e(x_e,RYo),e(E5,PYo),e(E5,JX),e(JX,BYo),e(E5,IYo),e(lo,NYo),e(lo,C5),e(C5,qYo),e(C5,$_e),e($_e,jYo),e(C5,DYo),e(C5,k_e),e(k_e,GYo),e(lo,OYo),M(w5,lo,null),b(f,uje,u),b(f,id,u),e(id,A5),e(A5,S_e),M(hL,S_e,null),e(id,VYo),e(id,R_e),e(R_e,XYo),b(f,bje,u),b(f,Do,u),M(pL,Do,null),e(Do,zYo),e(Do,dd),e(dd,WYo),e(dd,YX),e(YX,QYo),e(dd,HYo),e(dd,KX),e(KX,UYo),e(dd,JYo),e(Do,YYo),e(Do,_L),e(_L,KYo),e(_L,P_e),e(P_e,ZYo),e(_L,eKo),e(Do,oKo),e(Do,ut),M(uL,ut,null),e(ut,rKo),e(ut,B_e),e(B_e,tKo),e(ut,aKo),e(ut,cd),e(cd,nKo),e(cd,I_e),e(I_e,sKo),e(cd,lKo),e(cd,ZX),e(ZX,iKo),e(cd,dKo),e(ut,cKo),M(y5,ut,null),e(Do,fKo),e(Do,io),M(bL,io,null),e(io,mKo),e(io,N_e),e(N_e,gKo),e(io,hKo),e(io,Ga),e(Ga,pKo),e(Ga,q_e),e(q_e,_Ko),e(Ga,uKo),e(Ga,j_e),e(j_e,bKo),e(Ga,vKo),e(Ga,D_e),e(D_e,FKo),e(Ga,TKo),e(io,MKo),e(io,G_e),e(G_e,L5),e(L5,O_e),e(O_e,EKo),e(L5,CKo),e(L5,ez),e(ez,wKo),e(L5,AKo),e(io,yKo),e(io,x5),e(x5,LKo),e(x5,V_e),e(V_e,xKo),e(x5,$Ko),e(x5,X_e),e(X_e,kKo),e(io,SKo),M($5,io,null),b(f,vje,u),b(f,fd,u),e(fd,k5),e(k5,z_e),M(vL,z_e,null),e(fd,RKo),e(fd,W_e),e(W_e,PKo),b(f,Fje,u),b(f,Go,u),M(FL,Go,null),e(Go,BKo),e(Go,md),e(md,IKo),e(md,oz),e(oz,NKo),e(md,qKo),e(md,rz),e(rz,jKo),e(md,DKo),e(Go,GKo),e(Go,TL),e(TL,OKo),e(TL,Q_e),e(Q_e,VKo),e(TL,XKo),e(Go,zKo),e(Go,bt),M(ML,bt,null),e(bt,WKo),e(bt,H_e),e(H_e,QKo),e(bt,HKo),e(bt,gd),e(gd,UKo),e(gd,U_e),e(U_e,JKo),e(gd,YKo),e(gd,tz),e(tz,KKo),e(gd,ZKo),e(bt,eZo),M(S5,bt,null),e(Go,oZo),e(Go,co),M(EL,co,null),e(co,rZo),e(co,J_e),e(J_e,tZo),e(co,aZo),e(co,Oa),e(Oa,nZo),e(Oa,Y_e),e(Y_e,sZo),e(Oa,lZo),e(Oa,K_e),e(K_e,iZo),e(Oa,dZo),e(Oa,Z_e),e(Z_e,cZo),e(Oa,fZo),e(co,mZo),e(co,Se),e(Se,R5),e(R5,eue),e(eue,gZo),e(R5,hZo),e(R5,az),e(az,pZo),e(R5,_Zo),e(Se,uZo),e(Se,P5),e(P5,oue),e(oue,bZo),e(P5,vZo),e(P5,nz),e(nz,FZo),e(P5,TZo),e(Se,MZo),e(Se,B5),e(B5,rue),e(rue,EZo),e(B5,CZo),e(B5,sz),e(sz,wZo),e(B5,AZo),e(Se,yZo),e(Se,I5),e(I5,tue),e(tue,LZo),e(I5,xZo),e(I5,lz),e(lz,$Zo),e(I5,kZo),e(Se,SZo),e(Se,N5),e(N5,aue),e(aue,RZo),e(N5,PZo),e(N5,iz),e(iz,BZo),e(N5,IZo),e(Se,NZo),e(Se,q5),e(q5,nue),e(nue,qZo),e(q5,jZo),e(q5,dz),e(dz,DZo),e(q5,GZo),e(Se,OZo),e(Se,j5),e(j5,sue),e(sue,VZo),e(j5,XZo),e(j5,cz),e(cz,zZo),e(j5,WZo),e(Se,QZo),e(Se,D5),e(D5,lue),e(lue,HZo),e(D5,UZo),e(D5,fz),e(fz,JZo),e(D5,YZo),e(Se,KZo),e(Se,G5),e(G5,iue),e(iue,ZZo),e(G5,eer),e(G5,mz),e(mz,oer),e(G5,rer),e(co,ter),e(co,O5),e(O5,aer),e(O5,due),e(due,ner),e(O5,ser),e(O5,cue),e(cue,ler),e(co,ier),M(V5,co,null),b(f,Tje,u),b(f,hd,u),e(hd,X5),e(X5,fue),M(CL,fue,null),e(hd,der),e(hd,mue),e(mue,cer),b(f,Mje,u),b(f,Oo,u),M(wL,Oo,null),e(Oo,fer),e(Oo,pd),e(pd,mer),e(pd,gz),e(gz,ger),e(pd,her),e(pd,hz),e(hz,per),e(pd,_er),e(Oo,uer),e(Oo,AL),e(AL,ber),e(AL,gue),e(gue,ver),e(AL,Fer),e(Oo,Ter),e(Oo,vt),M(yL,vt,null),e(vt,Mer),e(vt,hue),e(hue,Eer),e(vt,Cer),e(vt,_d),e(_d,wer),e(_d,pue),e(pue,Aer),e(_d,yer),e(_d,pz),e(pz,Ler),e(_d,xer),e(vt,$er),M(z5,vt,null),e(Oo,ker),e(Oo,fo),M(LL,fo,null),e(fo,Ser),e(fo,_ue),e(_ue,Rer),e(fo,Per),e(fo,Va),e(Va,Ber),e(Va,uue),e(uue,Ier),e(Va,Ner),e(Va,bue),e(bue,qer),e(Va,jer),e(Va,vue),e(vue,Der),e(Va,Ger),e(fo,Oer),e(fo,Kr),e(Kr,W5),e(W5,Fue),e(Fue,Ver),e(W5,Xer),e(W5,_z),e(_z,zer),e(W5,Wer),e(Kr,Qer),e(Kr,Q5),e(Q5,Tue),e(Tue,Her),e(Q5,Uer),e(Q5,uz),e(uz,Jer),e(Q5,Yer),e(Kr,Ker),e(Kr,H5),e(H5,Mue),e(Mue,Zer),e(H5,eor),e(H5,bz),e(bz,oor),e(H5,ror),e(Kr,tor),e(Kr,U5),e(U5,Eue),e(Eue,aor),e(U5,nor),e(U5,vz),e(vz,sor),e(U5,lor),e(Kr,ior),e(Kr,J5),e(J5,Cue),e(Cue,dor),e(J5,cor),e(J5,Fz),e(Fz,mor),e(J5,gor),e(fo,hor),e(fo,Y5),e(Y5,por),e(Y5,wue),e(wue,_or),e(Y5,uor),e(Y5,Aue),e(Aue,bor),e(fo,vor),M(K5,fo,null),b(f,Eje,u),b(f,ud,u),e(ud,Z5),e(Z5,yue),M(xL,yue,null),e(ud,For),e(ud,Lue),e(Lue,Tor),b(f,Cje,u),b(f,Vo,u),M($L,Vo,null),e(Vo,Mor),e(Vo,bd),e(bd,Eor),e(bd,Tz),e(Tz,Cor),e(bd,wor),e(bd,Mz),e(Mz,Aor),e(bd,yor),e(Vo,Lor),e(Vo,kL),e(kL,xor),e(kL,xue),e(xue,$or),e(kL,kor),e(Vo,Sor),e(Vo,Ft),M(SL,Ft,null),e(Ft,Ror),e(Ft,$ue),e($ue,Por),e(Ft,Bor),e(Ft,vd),e(vd,Ior),e(vd,kue),e(kue,Nor),e(vd,qor),e(vd,Ez),e(Ez,jor),e(vd,Dor),e(Ft,Gor),M(e3,Ft,null),e(Vo,Oor),e(Vo,mo),M(RL,mo,null),e(mo,Vor),e(mo,Sue),e(Sue,Xor),e(mo,zor),e(mo,Xa),e(Xa,Wor),e(Xa,Rue),e(Rue,Qor),e(Xa,Hor),e(Xa,Pue),e(Pue,Uor),e(Xa,Jor),e(Xa,Bue),e(Bue,Yor),e(Xa,Kor),e(mo,Zor),e(mo,Re),e(Re,o3),e(o3,Iue),e(Iue,err),e(o3,orr),e(o3,Cz),e(Cz,rrr),e(o3,trr),e(Re,arr),e(Re,r3),e(r3,Nue),e(Nue,nrr),e(r3,srr),e(r3,wz),e(wz,lrr),e(r3,irr),e(Re,drr),e(Re,t3),e(t3,que),e(que,crr),e(t3,frr),e(t3,Az),e(Az,mrr),e(t3,grr),e(Re,hrr),e(Re,a3),e(a3,jue),e(jue,prr),e(a3,_rr),e(a3,yz),e(yz,urr),e(a3,brr),e(Re,vrr),e(Re,n3),e(n3,Due),e(Due,Frr),e(n3,Trr),e(n3,Lz),e(Lz,Mrr),e(n3,Err),e(Re,Crr),e(Re,s3),e(s3,Gue),e(Gue,wrr),e(s3,Arr),e(s3,xz),e(xz,yrr),e(s3,Lrr),e(Re,xrr),e(Re,l3),e(l3,Oue),e(Oue,$rr),e(l3,krr),e(l3,$z),e($z,Srr),e(l3,Rrr),e(Re,Prr),e(Re,i3),e(i3,Vue),e(Vue,Brr),e(i3,Irr),e(i3,kz),e(kz,Nrr),e(i3,qrr),e(Re,jrr),e(Re,d3),e(d3,Xue),e(Xue,Drr),e(d3,Grr),e(d3,Sz),e(Sz,Orr),e(d3,Vrr),e(mo,Xrr),e(mo,c3),e(c3,zrr),e(c3,zue),e(zue,Wrr),e(c3,Qrr),e(c3,Wue),e(Wue,Hrr),e(mo,Urr),M(f3,mo,null),b(f,wje,u),b(f,Fd,u),e(Fd,m3),e(m3,Que),M(PL,Que,null),e(Fd,Jrr),e(Fd,Hue),e(Hue,Yrr),b(f,Aje,u),b(f,Xo,u),M(BL,Xo,null),e(Xo,Krr),e(Xo,Td),e(Td,Zrr),e(Td,Rz),e(Rz,etr),e(Td,otr),e(Td,Pz),e(Pz,rtr),e(Td,ttr),e(Xo,atr),e(Xo,IL),e(IL,ntr),e(IL,Uue),e(Uue,str),e(IL,ltr),e(Xo,itr),e(Xo,Tt),M(NL,Tt,null),e(Tt,dtr),e(Tt,Jue),e(Jue,ctr),e(Tt,ftr),e(Tt,Md),e(Md,mtr),e(Md,Yue),e(Yue,gtr),e(Md,htr),e(Md,Bz),e(Bz,ptr),e(Md,_tr),e(Tt,utr),M(g3,Tt,null),e(Xo,btr),e(Xo,go),M(qL,go,null),e(go,vtr),e(go,Kue),e(Kue,Ftr),e(go,Ttr),e(go,za),e(za,Mtr),e(za,Zue),e(Zue,Etr),e(za,Ctr),e(za,e1e),e(e1e,wtr),e(za,Atr),e(za,o1e),e(o1e,ytr),e(za,Ltr),e(go,xtr),e(go,jL),e(jL,h3),e(h3,r1e),e(r1e,$tr),e(h3,ktr),e(h3,Iz),e(Iz,Str),e(h3,Rtr),e(jL,Ptr),e(jL,p3),e(p3,t1e),e(t1e,Btr),e(p3,Itr),e(p3,Nz),e(Nz,Ntr),e(p3,qtr),e(go,jtr),e(go,_3),e(_3,Dtr),e(_3,a1e),e(a1e,Gtr),e(_3,Otr),e(_3,n1e),e(n1e,Vtr),e(go,Xtr),M(u3,go,null),b(f,yje,u),b(f,Ed,u),e(Ed,b3),e(b3,s1e),M(DL,s1e,null),e(Ed,ztr),e(Ed,l1e),e(l1e,Wtr),b(f,Lje,u),b(f,zo,u),M(GL,zo,null),e(zo,Qtr),e(zo,Cd),e(Cd,Htr),e(Cd,qz),e(qz,Utr),e(Cd,Jtr),e(Cd,jz),e(jz,Ytr),e(Cd,Ktr),e(zo,Ztr),e(zo,OL),e(OL,ear),e(OL,i1e),e(i1e,oar),e(OL,rar),e(zo,tar),e(zo,Mt),M(VL,Mt,null),e(Mt,aar),e(Mt,d1e),e(d1e,nar),e(Mt,sar),e(Mt,wd),e(wd,lar),e(wd,c1e),e(c1e,iar),e(wd,dar),e(wd,Dz),e(Dz,car),e(wd,far),e(Mt,mar),M(v3,Mt,null),e(zo,gar),e(zo,ho),M(XL,ho,null),e(ho,har),e(ho,f1e),e(f1e,par),e(ho,_ar),e(ho,Wa),e(Wa,uar),e(Wa,m1e),e(m1e,bar),e(Wa,Far),e(Wa,g1e),e(g1e,Tar),e(Wa,Mar),e(Wa,h1e),e(h1e,Ear),e(Wa,Car),e(ho,war),e(ho,Zr),e(Zr,F3),e(F3,p1e),e(p1e,Aar),e(F3,yar),e(F3,Gz),e(Gz,Lar),e(F3,xar),e(Zr,$ar),e(Zr,T3),e(T3,_1e),e(_1e,kar),e(T3,Sar),e(T3,Oz),e(Oz,Rar),e(T3,Par),e(Zr,Bar),e(Zr,M3),e(M3,u1e),e(u1e,Iar),e(M3,Nar),e(M3,Vz),e(Vz,qar),e(M3,jar),e(Zr,Dar),e(Zr,E3),e(E3,b1e),e(b1e,Gar),e(E3,Oar),e(E3,Xz),e(Xz,Var),e(E3,Xar),e(Zr,zar),e(Zr,C3),e(C3,v1e),e(v1e,War),e(C3,Qar),e(C3,zz),e(zz,Har),e(C3,Uar),e(ho,Jar),e(ho,w3),e(w3,Yar),e(w3,F1e),e(F1e,Kar),e(w3,Zar),e(w3,T1e),e(T1e,enr),e(ho,onr),M(A3,ho,null),b(f,xje,u),b(f,Ad,u),e(Ad,y3),e(y3,M1e),M(zL,M1e,null),e(Ad,rnr),e(Ad,E1e),e(E1e,tnr),b(f,$je,u),b(f,Wo,u),M(WL,Wo,null),e(Wo,anr),e(Wo,yd),e(yd,nnr),e(yd,Wz),e(Wz,snr),e(yd,lnr),e(yd,Qz),e(Qz,inr),e(yd,dnr),e(Wo,cnr),e(Wo,QL),e(QL,fnr),e(QL,C1e),e(C1e,mnr),e(QL,gnr),e(Wo,hnr),e(Wo,Et),M(HL,Et,null),e(Et,pnr),e(Et,w1e),e(w1e,_nr),e(Et,unr),e(Et,Ld),e(Ld,bnr),e(Ld,A1e),e(A1e,vnr),e(Ld,Fnr),e(Ld,Hz),e(Hz,Tnr),e(Ld,Mnr),e(Et,Enr),M(L3,Et,null),e(Wo,Cnr),e(Wo,po),M(UL,po,null),e(po,wnr),e(po,y1e),e(y1e,Anr),e(po,ynr),e(po,Qa),e(Qa,Lnr),e(Qa,L1e),e(L1e,xnr),e(Qa,$nr),e(Qa,x1e),e(x1e,knr),e(Qa,Snr),e(Qa,$1e),e($1e,Rnr),e(Qa,Pnr),e(po,Bnr),e(po,xd),e(xd,x3),e(x3,k1e),e(k1e,Inr),e(x3,Nnr),e(x3,Uz),e(Uz,qnr),e(x3,jnr),e(xd,Dnr),e(xd,$3),e($3,S1e),e(S1e,Gnr),e($3,Onr),e($3,Jz),e(Jz,Vnr),e($3,Xnr),e(xd,znr),e(xd,k3),e(k3,R1e),e(R1e,Wnr),e(k3,Qnr),e(k3,Yz),e(Yz,Hnr),e(k3,Unr),e(po,Jnr),e(po,S3),e(S3,Ynr),e(S3,P1e),e(P1e,Knr),e(S3,Znr),e(S3,B1e),e(B1e,esr),e(po,osr),M(R3,po,null),b(f,kje,u),b(f,$d,u),e($d,P3),e(P3,I1e),M(JL,I1e,null),e($d,rsr),e($d,N1e),e(N1e,tsr),b(f,Sje,u),b(f,Qo,u),M(YL,Qo,null),e(Qo,asr),e(Qo,kd),e(kd,nsr),e(kd,Kz),e(Kz,ssr),e(kd,lsr),e(kd,Zz),e(Zz,isr),e(kd,dsr),e(Qo,csr),e(Qo,KL),e(KL,fsr),e(KL,q1e),e(q1e,msr),e(KL,gsr),e(Qo,hsr),e(Qo,Ct),M(ZL,Ct,null),e(Ct,psr),e(Ct,j1e),e(j1e,_sr),e(Ct,usr),e(Ct,Sd),e(Sd,bsr),e(Sd,D1e),e(D1e,vsr),e(Sd,Fsr),e(Sd,eW),e(eW,Tsr),e(Sd,Msr),e(Ct,Esr),M(B3,Ct,null),e(Qo,Csr),e(Qo,_o),M(e8,_o,null),e(_o,wsr),e(_o,G1e),e(G1e,Asr),e(_o,ysr),e(_o,Ha),e(Ha,Lsr),e(Ha,O1e),e(O1e,xsr),e(Ha,$sr),e(Ha,V1e),e(V1e,ksr),e(Ha,Ssr),e(Ha,X1e),e(X1e,Rsr),e(Ha,Psr),e(_o,Bsr),e(_o,o8),e(o8,I3),e(I3,z1e),e(z1e,Isr),e(I3,Nsr),e(I3,oW),e(oW,qsr),e(I3,jsr),e(o8,Dsr),e(o8,N3),e(N3,W1e),e(W1e,Gsr),e(N3,Osr),e(N3,rW),e(rW,Vsr),e(N3,Xsr),e(_o,zsr),e(_o,q3),e(q3,Wsr),e(q3,Q1e),e(Q1e,Qsr),e(q3,Hsr),e(q3,H1e),e(H1e,Usr),e(_o,Jsr),M(j3,_o,null),b(f,Rje,u),b(f,Rd,u),e(Rd,D3),e(D3,U1e),M(r8,U1e,null),e(Rd,Ysr),e(Rd,J1e),e(J1e,Ksr),b(f,Pje,u),b(f,Ho,u),M(t8,Ho,null),e(Ho,Zsr),e(Ho,Pd),e(Pd,elr),e(Pd,tW),e(tW,olr),e(Pd,rlr),e(Pd,aW),e(aW,tlr),e(Pd,alr),e(Ho,nlr),e(Ho,a8),e(a8,slr),e(a8,Y1e),e(Y1e,llr),e(a8,ilr),e(Ho,dlr),e(Ho,wt),M(n8,wt,null),e(wt,clr),e(wt,K1e),e(K1e,flr),e(wt,mlr),e(wt,Bd),e(Bd,glr),e(Bd,Z1e),e(Z1e,hlr),e(Bd,plr),e(Bd,nW),e(nW,_lr),e(Bd,ulr),e(wt,blr),M(G3,wt,null),e(Ho,vlr),e(Ho,uo),M(s8,uo,null),e(uo,Flr),e(uo,ebe),e(ebe,Tlr),e(uo,Mlr),e(uo,Ua),e(Ua,Elr),e(Ua,obe),e(obe,Clr),e(Ua,wlr),e(Ua,rbe),e(rbe,Alr),e(Ua,ylr),e(Ua,tbe),e(tbe,Llr),e(Ua,xlr),e(uo,$lr),e(uo,abe),e(abe,O3),e(O3,nbe),e(nbe,klr),e(O3,Slr),e(O3,sW),e(sW,Rlr),e(O3,Plr),e(uo,Blr),e(uo,V3),e(V3,Ilr),e(V3,sbe),e(sbe,Nlr),e(V3,qlr),e(V3,lbe),e(lbe,jlr),e(uo,Dlr),M(X3,uo,null),b(f,Bje,u),b(f,Id,u),e(Id,z3),e(z3,ibe),M(l8,ibe,null),e(Id,Glr),e(Id,dbe),e(dbe,Olr),b(f,Ije,u),b(f,Uo,u),M(i8,Uo,null),e(Uo,Vlr),e(Uo,Nd),e(Nd,Xlr),e(Nd,lW),e(lW,zlr),e(Nd,Wlr),e(Nd,iW),e(iW,Qlr),e(Nd,Hlr),e(Uo,Ulr),e(Uo,d8),e(d8,Jlr),e(d8,cbe),e(cbe,Ylr),e(d8,Klr),e(Uo,Zlr),e(Uo,At),M(c8,At,null),e(At,eir),e(At,fbe),e(fbe,oir),e(At,rir),e(At,qd),e(qd,tir),e(qd,mbe),e(mbe,air),e(qd,nir),e(qd,dW),e(dW,sir),e(qd,lir),e(At,iir),M(W3,At,null),e(Uo,dir),e(Uo,bo),M(f8,bo,null),e(bo,cir),e(bo,gbe),e(gbe,fir),e(bo,mir),e(bo,Ja),e(Ja,gir),e(Ja,hbe),e(hbe,hir),e(Ja,pir),e(Ja,pbe),e(pbe,_ir),e(Ja,uir),e(Ja,_be),e(_be,bir),e(Ja,vir),e(bo,Fir),e(bo,et),e(et,Q3),e(Q3,ube),e(ube,Tir),e(Q3,Mir),e(Q3,cW),e(cW,Eir),e(Q3,Cir),e(et,wir),e(et,H3),e(H3,bbe),e(bbe,Air),e(H3,yir),e(H3,fW),e(fW,Lir),e(H3,xir),e(et,$ir),e(et,U3),e(U3,vbe),e(vbe,kir),e(U3,Sir),e(U3,mW),e(mW,Rir),e(U3,Pir),e(et,Bir),e(et,J3),e(J3,Fbe),e(Fbe,Iir),e(J3,Nir),e(J3,gW),e(gW,qir),e(J3,jir),e(et,Dir),e(et,Y3),e(Y3,Tbe),e(Tbe,Gir),e(Y3,Oir),e(Y3,hW),e(hW,Vir),e(Y3,Xir),e(bo,zir),e(bo,K3),e(K3,Wir),e(K3,Mbe),e(Mbe,Qir),e(K3,Hir),e(K3,Ebe),e(Ebe,Uir),e(bo,Jir),M(Z3,bo,null),b(f,Nje,u),b(f,jd,u),e(jd,eF),e(eF,Cbe),M(m8,Cbe,null),e(jd,Yir),e(jd,wbe),e(wbe,Kir),b(f,qje,u),b(f,Jo,u),M(g8,Jo,null),e(Jo,Zir),e(Jo,Dd),e(Dd,edr),e(Dd,pW),e(pW,odr),e(Dd,rdr),e(Dd,_W),e(_W,tdr),e(Dd,adr),e(Jo,ndr),e(Jo,h8),e(h8,sdr),e(h8,Abe),e(Abe,ldr),e(h8,idr),e(Jo,ddr),e(Jo,yt),M(p8,yt,null),e(yt,cdr),e(yt,ybe),e(ybe,fdr),e(yt,mdr),e(yt,Gd),e(Gd,gdr),e(Gd,Lbe),e(Lbe,hdr),e(Gd,pdr),e(Gd,uW),e(uW,_dr),e(Gd,udr),e(yt,bdr),M(oF,yt,null),e(Jo,vdr),e(Jo,vo),M(_8,vo,null),e(vo,Fdr),e(vo,xbe),e(xbe,Tdr),e(vo,Mdr),e(vo,Ya),e(Ya,Edr),e(Ya,$be),e($be,Cdr),e(Ya,wdr),e(Ya,kbe),e(kbe,Adr),e(Ya,ydr),e(Ya,Sbe),e(Sbe,Ldr),e(Ya,xdr),e(vo,$dr),e(vo,Rbe),e(Rbe,rF),e(rF,Pbe),e(Pbe,kdr),e(rF,Sdr),e(rF,bW),e(bW,Rdr),e(rF,Pdr),e(vo,Bdr),e(vo,tF),e(tF,Idr),e(tF,Bbe),e(Bbe,Ndr),e(tF,qdr),e(tF,Ibe),e(Ibe,jdr),e(vo,Ddr),M(aF,vo,null),b(f,jje,u),b(f,Od,u),e(Od,nF),e(nF,Nbe),M(u8,Nbe,null),e(Od,Gdr),e(Od,qbe),e(qbe,Odr),b(f,Dje,u),b(f,Yo,u),M(b8,Yo,null),e(Yo,Vdr),e(Yo,Vd),e(Vd,Xdr),e(Vd,vW),e(vW,zdr),e(Vd,Wdr),e(Vd,FW),e(FW,Qdr),e(Vd,Hdr),e(Yo,Udr),e(Yo,v8),e(v8,Jdr),e(v8,jbe),e(jbe,Ydr),e(v8,Kdr),e(Yo,Zdr),e(Yo,Lt),M(F8,Lt,null),e(Lt,ecr),e(Lt,Dbe),e(Dbe,ocr),e(Lt,rcr),e(Lt,Xd),e(Xd,tcr),e(Xd,Gbe),e(Gbe,acr),e(Xd,ncr),e(Xd,TW),e(TW,scr),e(Xd,lcr),e(Lt,icr),M(sF,Lt,null),e(Yo,dcr),e(Yo,wr),M(T8,wr,null),e(wr,ccr),e(wr,Obe),e(Obe,fcr),e(wr,mcr),e(wr,Ka),e(Ka,gcr),e(Ka,Vbe),e(Vbe,hcr),e(Ka,pcr),e(Ka,Xbe),e(Xbe,_cr),e(Ka,ucr),e(Ka,zbe),e(zbe,bcr),e(Ka,vcr),e(wr,Fcr),e(wr,q),e(q,lF),e(lF,Wbe),e(Wbe,Tcr),e(lF,Mcr),e(lF,MW),e(MW,Ecr),e(lF,Ccr),e(q,wcr),e(q,iF),e(iF,Qbe),e(Qbe,Acr),e(iF,ycr),e(iF,EW),e(EW,Lcr),e(iF,xcr),e(q,$cr),e(q,dF),e(dF,Hbe),e(Hbe,kcr),e(dF,Scr),e(dF,CW),e(CW,Rcr),e(dF,Pcr),e(q,Bcr),e(q,cF),e(cF,Ube),e(Ube,Icr),e(cF,Ncr),e(cF,wW),e(wW,qcr),e(cF,jcr),e(q,Dcr),e(q,fF),e(fF,Jbe),e(Jbe,Gcr),e(fF,Ocr),e(fF,AW),e(AW,Vcr),e(fF,Xcr),e(q,zcr),e(q,mF),e(mF,Ybe),e(Ybe,Wcr),e(mF,Qcr),e(mF,yW),e(yW,Hcr),e(mF,Ucr),e(q,Jcr),e(q,gF),e(gF,Kbe),e(Kbe,Ycr),e(gF,Kcr),e(gF,LW),e(LW,Zcr),e(gF,efr),e(q,ofr),e(q,hF),e(hF,Zbe),e(Zbe,rfr),e(hF,tfr),e(hF,xW),e(xW,afr),e(hF,nfr),e(q,sfr),e(q,pF),e(pF,e2e),e(e2e,lfr),e(pF,ifr),e(pF,$W),e($W,dfr),e(pF,cfr),e(q,ffr),e(q,_F),e(_F,o2e),e(o2e,mfr),e(_F,gfr),e(_F,kW),e(kW,hfr),e(_F,pfr),e(q,_fr),e(q,uF),e(uF,r2e),e(r2e,ufr),e(uF,bfr),e(uF,SW),e(SW,vfr),e(uF,Ffr),e(q,Tfr),e(q,bF),e(bF,t2e),e(t2e,Mfr),e(bF,Efr),e(bF,RW),e(RW,Cfr),e(bF,wfr),e(q,Afr),e(q,vF),e(vF,a2e),e(a2e,yfr),e(vF,Lfr),e(vF,PW),e(PW,xfr),e(vF,$fr),e(q,kfr),e(q,FF),e(FF,n2e),e(n2e,Sfr),e(FF,Rfr),e(FF,BW),e(BW,Pfr),e(FF,Bfr),e(q,Ifr),e(q,TF),e(TF,s2e),e(s2e,Nfr),e(TF,qfr),e(TF,IW),e(IW,jfr),e(TF,Dfr),e(q,Gfr),e(q,MF),e(MF,l2e),e(l2e,Ofr),e(MF,Vfr),e(MF,NW),e(NW,Xfr),e(MF,zfr),e(q,Wfr),e(q,EF),e(EF,i2e),e(i2e,Qfr),e(EF,Hfr),e(EF,qW),e(qW,Ufr),e(EF,Jfr),e(q,Yfr),e(q,Is),e(Is,d2e),e(d2e,Kfr),e(Is,Zfr),e(Is,jW),e(jW,emr),e(Is,omr),e(Is,DW),e(DW,rmr),e(Is,tmr),e(q,amr),e(q,CF),e(CF,c2e),e(c2e,nmr),e(CF,smr),e(CF,GW),e(GW,lmr),e(CF,imr),e(q,dmr),e(q,wF),e(wF,f2e),e(f2e,cmr),e(wF,fmr),e(wF,OW),e(OW,mmr),e(wF,gmr),e(q,hmr),e(q,AF),e(AF,m2e),e(m2e,pmr),e(AF,_mr),e(AF,VW),e(VW,umr),e(AF,bmr),e(q,vmr),e(q,yF),e(yF,g2e),e(g2e,Fmr),e(yF,Tmr),e(yF,XW),e(XW,Mmr),e(yF,Emr),e(q,Cmr),e(q,LF),e(LF,h2e),e(h2e,wmr),e(LF,Amr),e(LF,zW),e(zW,ymr),e(LF,Lmr),e(q,xmr),e(q,xF),e(xF,p2e),e(p2e,$mr),e(xF,kmr),e(xF,WW),e(WW,Smr),e(xF,Rmr),e(q,Pmr),e(q,$F),e($F,_2e),e(_2e,Bmr),e($F,Imr),e($F,QW),e(QW,Nmr),e($F,qmr),e(q,jmr),e(q,kF),e(kF,u2e),e(u2e,Dmr),e(kF,Gmr),e(kF,HW),e(HW,Omr),e(kF,Vmr),e(q,Xmr),e(q,SF),e(SF,b2e),e(b2e,zmr),e(SF,Wmr),e(SF,UW),e(UW,Qmr),e(SF,Hmr),e(q,Umr),e(q,RF),e(RF,v2e),e(v2e,Jmr),e(RF,Ymr),e(RF,JW),e(JW,Kmr),e(RF,Zmr),e(q,egr),e(q,PF),e(PF,F2e),e(F2e,ogr),e(PF,rgr),e(PF,YW),e(YW,tgr),e(PF,agr),e(q,ngr),e(q,BF),e(BF,T2e),e(T2e,sgr),e(BF,lgr),e(BF,KW),e(KW,igr),e(BF,dgr),e(q,cgr),e(q,IF),e(IF,M2e),e(M2e,fgr),e(IF,mgr),e(IF,ZW),e(ZW,ggr),e(IF,hgr),e(q,pgr),e(q,NF),e(NF,E2e),e(E2e,_gr),e(NF,ugr),e(NF,eQ),e(eQ,bgr),e(NF,vgr),e(q,Fgr),e(q,qF),e(qF,C2e),e(C2e,Tgr),e(qF,Mgr),e(qF,oQ),e(oQ,Egr),e(qF,Cgr),e(q,wgr),e(q,jF),e(jF,w2e),e(w2e,Agr),e(jF,ygr),e(jF,rQ),e(rQ,Lgr),e(jF,xgr),e(q,$gr),e(q,DF),e(DF,A2e),e(A2e,kgr),e(DF,Sgr),e(DF,tQ),e(tQ,Rgr),e(DF,Pgr),e(q,Bgr),e(q,GF),e(GF,y2e),e(y2e,Igr),e(GF,Ngr),e(GF,aQ),e(aQ,qgr),e(GF,jgr),e(q,Dgr),e(q,OF),e(OF,L2e),e(L2e,Ggr),e(OF,Ogr),e(OF,nQ),e(nQ,Vgr),e(OF,Xgr),e(q,zgr),e(q,VF),e(VF,x2e),e(x2e,Wgr),e(VF,Qgr),e(VF,sQ),e(sQ,Hgr),e(VF,Ugr),e(q,Jgr),e(q,XF),e(XF,$2e),e($2e,Ygr),e(XF,Kgr),e(XF,lQ),e(lQ,Zgr),e(XF,ehr),e(q,ohr),e(q,zF),e(zF,k2e),e(k2e,rhr),e(zF,thr),e(zF,iQ),e(iQ,ahr),e(zF,nhr),e(q,shr),e(q,WF),e(WF,S2e),e(S2e,lhr),e(WF,ihr),e(WF,dQ),e(dQ,dhr),e(WF,chr),e(q,fhr),e(q,QF),e(QF,R2e),e(R2e,mhr),e(QF,ghr),e(QF,cQ),e(cQ,hhr),e(QF,phr),e(q,_hr),e(q,HF),e(HF,P2e),e(P2e,uhr),e(HF,bhr),e(HF,fQ),e(fQ,vhr),e(HF,Fhr),e(q,Thr),e(q,UF),e(UF,B2e),e(B2e,Mhr),e(UF,Ehr),e(UF,mQ),e(mQ,Chr),e(UF,whr),e(q,Ahr),e(q,JF),e(JF,I2e),e(I2e,yhr),e(JF,Lhr),e(JF,gQ),e(gQ,xhr),e(JF,$hr),e(q,khr),e(q,YF),e(YF,N2e),e(N2e,Shr),e(YF,Rhr),e(YF,hQ),e(hQ,Phr),e(YF,Bhr),e(q,Ihr),e(q,KF),e(KF,q2e),e(q2e,Nhr),e(KF,qhr),e(KF,pQ),e(pQ,jhr),e(KF,Dhr),e(wr,Ghr),M(ZF,wr,null),b(f,Gje,u),b(f,zd,u),e(zd,eT),e(eT,j2e),M(M8,j2e,null),e(zd,Ohr),e(zd,D2e),e(D2e,Vhr),b(f,Oje,u),b(f,Ko,u),M(E8,Ko,null),e(Ko,Xhr),e(Ko,Wd),e(Wd,zhr),e(Wd,_Q),e(_Q,Whr),e(Wd,Qhr),e(Wd,uQ),e(uQ,Hhr),e(Wd,Uhr),e(Ko,Jhr),e(Ko,C8),e(C8,Yhr),e(C8,G2e),e(G2e,Khr),e(C8,Zhr),e(Ko,epr),e(Ko,xt),M(w8,xt,null),e(xt,opr),e(xt,O2e),e(O2e,rpr),e(xt,tpr),e(xt,Qd),e(Qd,apr),e(Qd,V2e),e(V2e,npr),e(Qd,spr),e(Qd,bQ),e(bQ,lpr),e(Qd,ipr),e(xt,dpr),M(oT,xt,null),e(Ko,cpr),e(Ko,Ar),M(A8,Ar,null),e(Ar,fpr),e(Ar,X2e),e(X2e,mpr),e(Ar,gpr),e(Ar,Za),e(Za,hpr),e(Za,z2e),e(z2e,ppr),e(Za,_pr),e(Za,W2e),e(W2e,upr),e(Za,bpr),e(Za,Q2e),e(Q2e,vpr),e(Za,Fpr),e(Ar,Tpr),e(Ar,se),e(se,rT),e(rT,H2e),e(H2e,Mpr),e(rT,Epr),e(rT,vQ),e(vQ,Cpr),e(rT,wpr),e(se,Apr),e(se,tT),e(tT,U2e),e(U2e,ypr),e(tT,Lpr),e(tT,FQ),e(FQ,xpr),e(tT,$pr),e(se,kpr),e(se,aT),e(aT,J2e),e(J2e,Spr),e(aT,Rpr),e(aT,TQ),e(TQ,Ppr),e(aT,Bpr),e(se,Ipr),e(se,nT),e(nT,Y2e),e(Y2e,Npr),e(nT,qpr),e(nT,MQ),e(MQ,jpr),e(nT,Dpr),e(se,Gpr),e(se,sT),e(sT,K2e),e(K2e,Opr),e(sT,Vpr),e(sT,EQ),e(EQ,Xpr),e(sT,zpr),e(se,Wpr),e(se,lT),e(lT,Z2e),e(Z2e,Qpr),e(lT,Hpr),e(lT,CQ),e(CQ,Upr),e(lT,Jpr),e(se,Ypr),e(se,iT),e(iT,e4e),e(e4e,Kpr),e(iT,Zpr),e(iT,wQ),e(wQ,e_r),e(iT,o_r),e(se,r_r),e(se,dT),e(dT,o4e),e(o4e,t_r),e(dT,a_r),e(dT,AQ),e(AQ,n_r),e(dT,s_r),e(se,l_r),e(se,cT),e(cT,r4e),e(r4e,i_r),e(cT,d_r),e(cT,yQ),e(yQ,c_r),e(cT,f_r),e(se,m_r),e(se,fT),e(fT,t4e),e(t4e,g_r),e(fT,h_r),e(fT,LQ),e(LQ,p_r),e(fT,__r),e(se,u_r),e(se,mT),e(mT,a4e),e(a4e,b_r),e(mT,v_r),e(mT,xQ),e(xQ,F_r),e(mT,T_r),e(se,M_r),e(se,gT),e(gT,n4e),e(n4e,E_r),e(gT,C_r),e(gT,$Q),e($Q,w_r),e(gT,A_r),e(se,y_r),e(se,hT),e(hT,s4e),e(s4e,L_r),e(hT,x_r),e(hT,kQ),e(kQ,$_r),e(hT,k_r),e(se,S_r),e(se,pT),e(pT,l4e),e(l4e,R_r),e(pT,P_r),e(pT,SQ),e(SQ,B_r),e(pT,I_r),e(se,N_r),e(se,_T),e(_T,i4e),e(i4e,q_r),e(_T,j_r),e(_T,RQ),e(RQ,D_r),e(_T,G_r),e(se,O_r),e(se,uT),e(uT,d4e),e(d4e,V_r),e(uT,X_r),e(uT,PQ),e(PQ,z_r),e(uT,W_r),e(se,Q_r),e(se,bT),e(bT,c4e),e(c4e,H_r),e(bT,U_r),e(bT,BQ),e(BQ,J_r),e(bT,Y_r),e(se,K_r),e(se,vT),e(vT,f4e),e(f4e,Z_r),e(vT,eur),e(vT,IQ),e(IQ,our),e(vT,rur),e(se,tur),e(se,FT),e(FT,m4e),e(m4e,aur),e(FT,nur),e(FT,NQ),e(NQ,sur),e(FT,lur),e(se,iur),e(se,TT),e(TT,g4e),e(g4e,dur),e(TT,cur),e(TT,qQ),e(qQ,fur),e(TT,mur),e(se,gur),e(se,MT),e(MT,h4e),e(h4e,hur),e(MT,pur),e(MT,jQ),e(jQ,_ur),e(MT,uur),e(se,bur),e(se,ET),e(ET,p4e),e(p4e,vur),e(ET,Fur),e(ET,DQ),e(DQ,Tur),e(ET,Mur),e(se,Eur),e(se,CT),e(CT,_4e),e(_4e,Cur),e(CT,wur),e(CT,GQ),e(GQ,Aur),e(CT,yur),e(Ar,Lur),M(wT,Ar,null),b(f,Vje,u),b(f,Hd,u),e(Hd,AT),e(AT,u4e),M(y8,u4e,null),e(Hd,xur),e(Hd,b4e),e(b4e,$ur),b(f,Xje,u),b(f,Zo,u),M(L8,Zo,null),e(Zo,kur),e(Zo,Ud),e(Ud,Sur),e(Ud,OQ),e(OQ,Rur),e(Ud,Pur),e(Ud,VQ),e(VQ,Bur),e(Ud,Iur),e(Zo,Nur),e(Zo,x8),e(x8,qur),e(x8,v4e),e(v4e,jur),e(x8,Dur),e(Zo,Gur),e(Zo,$t),M($8,$t,null),e($t,Our),e($t,F4e),e(F4e,Vur),e($t,Xur),e($t,Jd),e(Jd,zur),e(Jd,T4e),e(T4e,Wur),e(Jd,Qur),e(Jd,XQ),e(XQ,Hur),e(Jd,Uur),e($t,Jur),M(yT,$t,null),e(Zo,Yur),e(Zo,yr),M(k8,yr,null),e(yr,Kur),e(yr,M4e),e(M4e,Zur),e(yr,e1r),e(yr,en),e(en,o1r),e(en,E4e),e(E4e,r1r),e(en,t1r),e(en,C4e),e(C4e,a1r),e(en,n1r),e(en,w4e),e(w4e,s1r),e(en,l1r),e(yr,i1r),e(yr,Me),e(Me,LT),e(LT,A4e),e(A4e,d1r),e(LT,c1r),e(LT,zQ),e(zQ,f1r),e(LT,m1r),e(Me,g1r),e(Me,xT),e(xT,y4e),e(y4e,h1r),e(xT,p1r),e(xT,WQ),e(WQ,_1r),e(xT,u1r),e(Me,b1r),e(Me,$T),e($T,L4e),e(L4e,v1r),e($T,F1r),e($T,QQ),e(QQ,T1r),e($T,M1r),e(Me,E1r),e(Me,kT),e(kT,x4e),e(x4e,C1r),e(kT,w1r),e(kT,HQ),e(HQ,A1r),e(kT,y1r),e(Me,L1r),e(Me,ST),e(ST,$4e),e($4e,x1r),e(ST,$1r),e(ST,UQ),e(UQ,k1r),e(ST,S1r),e(Me,R1r),e(Me,RT),e(RT,k4e),e(k4e,P1r),e(RT,B1r),e(RT,JQ),e(JQ,I1r),e(RT,N1r),e(Me,q1r),e(Me,PT),e(PT,S4e),e(S4e,j1r),e(PT,D1r),e(PT,YQ),e(YQ,G1r),e(PT,O1r),e(Me,V1r),e(Me,BT),e(BT,R4e),e(R4e,X1r),e(BT,z1r),e(BT,KQ),e(KQ,W1r),e(BT,Q1r),e(Me,H1r),e(Me,IT),e(IT,P4e),e(P4e,U1r),e(IT,J1r),e(IT,ZQ),e(ZQ,Y1r),e(IT,K1r),e(Me,Z1r),e(Me,NT),e(NT,B4e),e(B4e,ebr),e(NT,obr),e(NT,eH),e(eH,rbr),e(NT,tbr),e(Me,abr),e(Me,qT),e(qT,I4e),e(I4e,nbr),e(qT,sbr),e(qT,oH),e(oH,lbr),e(qT,ibr),e(Me,dbr),e(Me,jT),e(jT,N4e),e(N4e,cbr),e(jT,fbr),e(jT,rH),e(rH,mbr),e(jT,gbr),e(Me,hbr),e(Me,DT),e(DT,q4e),e(q4e,pbr),e(DT,_br),e(DT,tH),e(tH,ubr),e(DT,bbr),e(yr,vbr),M(GT,yr,null),b(f,zje,u),b(f,Yd,u),e(Yd,OT),e(OT,j4e),M(S8,j4e,null),e(Yd,Fbr),e(Yd,D4e),e(D4e,Tbr),b(f,Wje,u),b(f,er,u),M(R8,er,null),e(er,Mbr),e(er,Kd),e(Kd,Ebr),e(Kd,aH),e(aH,Cbr),e(Kd,wbr),e(Kd,nH),e(nH,Abr),e(Kd,ybr),e(er,Lbr),e(er,P8),e(P8,xbr),e(P8,G4e),e(G4e,$br),e(P8,kbr),e(er,Sbr),e(er,kt),M(B8,kt,null),e(kt,Rbr),e(kt,O4e),e(O4e,Pbr),e(kt,Bbr),e(kt,Zd),e(Zd,Ibr),e(Zd,V4e),e(V4e,Nbr),e(Zd,qbr),e(Zd,sH),e(sH,jbr),e(Zd,Dbr),e(kt,Gbr),M(VT,kt,null),e(er,Obr),e(er,Lr),M(I8,Lr,null),e(Lr,Vbr),e(Lr,X4e),e(X4e,Xbr),e(Lr,zbr),e(Lr,on),e(on,Wbr),e(on,z4e),e(z4e,Qbr),e(on,Hbr),e(on,W4e),e(W4e,Ubr),e(on,Jbr),e(on,Q4e),e(Q4e,Ybr),e(on,Kbr),e(Lr,Zbr),e(Lr,rn),e(rn,XT),e(XT,H4e),e(H4e,e2r),e(XT,o2r),e(XT,lH),e(lH,r2r),e(XT,t2r),e(rn,a2r),e(rn,zT),e(zT,U4e),e(U4e,n2r),e(zT,s2r),e(zT,iH),e(iH,l2r),e(zT,i2r),e(rn,d2r),e(rn,WT),e(WT,J4e),e(J4e,c2r),e(WT,f2r),e(WT,dH),e(dH,m2r),e(WT,g2r),e(rn,h2r),e(rn,QT),e(QT,Y4e),e(Y4e,p2r),e(QT,_2r),e(QT,cH),e(cH,u2r),e(QT,b2r),e(Lr,v2r),M(HT,Lr,null),b(f,Qje,u),b(f,ec,u),e(ec,UT),e(UT,K4e),M(N8,K4e,null),e(ec,F2r),e(ec,Z4e),e(Z4e,T2r),b(f,Hje,u),b(f,or,u),M(q8,or,null),e(or,M2r),e(or,oc),e(oc,E2r),e(oc,fH),e(fH,C2r),e(oc,w2r),e(oc,mH),e(mH,A2r),e(oc,y2r),e(or,L2r),e(or,j8),e(j8,x2r),e(j8,eve),e(eve,$2r),e(j8,k2r),e(or,S2r),e(or,St),M(D8,St,null),e(St,R2r),e(St,ove),e(ove,P2r),e(St,B2r),e(St,rc),e(rc,I2r),e(rc,rve),e(rve,N2r),e(rc,q2r),e(rc,gH),e(gH,j2r),e(rc,D2r),e(St,G2r),M(JT,St,null),e(or,O2r),e(or,xr),M(G8,xr,null),e(xr,V2r),e(xr,tve),e(tve,X2r),e(xr,z2r),e(xr,tn),e(tn,W2r),e(tn,ave),e(ave,Q2r),e(tn,H2r),e(tn,nve),e(nve,U2r),e(tn,J2r),e(tn,sve),e(sve,Y2r),e(tn,K2r),e(xr,Z2r),e(xr,ie),e(ie,YT),e(YT,lve),e(lve,e4r),e(YT,o4r),e(YT,hH),e(hH,r4r),e(YT,t4r),e(ie,a4r),e(ie,KT),e(KT,ive),e(ive,n4r),e(KT,s4r),e(KT,pH),e(pH,l4r),e(KT,i4r),e(ie,d4r),e(ie,ZT),e(ZT,dve),e(dve,c4r),e(ZT,f4r),e(ZT,_H),e(_H,m4r),e(ZT,g4r),e(ie,h4r),e(ie,e7),e(e7,cve),e(cve,p4r),e(e7,_4r),e(e7,uH),e(uH,u4r),e(e7,b4r),e(ie,v4r),e(ie,o7),e(o7,fve),e(fve,F4r),e(o7,T4r),e(o7,bH),e(bH,M4r),e(o7,E4r),e(ie,C4r),e(ie,r7),e(r7,mve),e(mve,w4r),e(r7,A4r),e(r7,vH),e(vH,y4r),e(r7,L4r),e(ie,x4r),e(ie,t7),e(t7,gve),e(gve,$4r),e(t7,k4r),e(t7,FH),e(FH,S4r),e(t7,R4r),e(ie,P4r),e(ie,a7),e(a7,hve),e(hve,B4r),e(a7,I4r),e(a7,TH),e(TH,N4r),e(a7,q4r),e(ie,j4r),e(ie,n7),e(n7,pve),e(pve,D4r),e(n7,G4r),e(n7,MH),e(MH,O4r),e(n7,V4r),e(ie,X4r),e(ie,s7),e(s7,_ve),e(_ve,z4r),e(s7,W4r),e(s7,EH),e(EH,Q4r),e(s7,H4r),e(ie,U4r),e(ie,l7),e(l7,uve),e(uve,J4r),e(l7,Y4r),e(l7,CH),e(CH,K4r),e(l7,Z4r),e(ie,evr),e(ie,i7),e(i7,bve),e(bve,ovr),e(i7,rvr),e(i7,wH),e(wH,tvr),e(i7,avr),e(ie,nvr),e(ie,d7),e(d7,vve),e(vve,svr),e(d7,lvr),e(d7,AH),e(AH,ivr),e(d7,dvr),e(ie,cvr),e(ie,c7),e(c7,Fve),e(Fve,fvr),e(c7,mvr),e(c7,yH),e(yH,gvr),e(c7,hvr),e(ie,pvr),e(ie,f7),e(f7,Tve),e(Tve,_vr),e(f7,uvr),e(f7,LH),e(LH,bvr),e(f7,vvr),e(ie,Fvr),e(ie,m7),e(m7,Mve),e(Mve,Tvr),e(m7,Mvr),e(m7,xH),e(xH,Evr),e(m7,Cvr),e(ie,wvr),e(ie,g7),e(g7,Eve),e(Eve,Avr),e(g7,yvr),e(g7,$H),e($H,Lvr),e(g7,xvr),e(ie,$vr),e(ie,h7),e(h7,Cve),e(Cve,kvr),e(h7,Svr),e(h7,kH),e(kH,Rvr),e(h7,Pvr),e(ie,Bvr),e(ie,p7),e(p7,wve),e(wve,Ivr),e(p7,Nvr),e(p7,SH),e(SH,qvr),e(p7,jvr),e(ie,Dvr),e(ie,_7),e(_7,Ave),e(Ave,Gvr),e(_7,Ovr),e(_7,RH),e(RH,Vvr),e(_7,Xvr),e(xr,zvr),M(u7,xr,null),b(f,Uje,u),b(f,tc,u),e(tc,b7),e(b7,yve),M(O8,yve,null),e(tc,Wvr),e(tc,Lve),e(Lve,Qvr),b(f,Jje,u),b(f,rr,u),M(V8,rr,null),e(rr,Hvr),e(rr,ac),e(ac,Uvr),e(ac,PH),e(PH,Jvr),e(ac,Yvr),e(ac,BH),e(BH,Kvr),e(ac,Zvr),e(rr,e5r),e(rr,X8),e(X8,o5r),e(X8,xve),e(xve,r5r),e(X8,t5r),e(rr,a5r),e(rr,Rt),M(z8,Rt,null),e(Rt,n5r),e(Rt,$ve),e($ve,s5r),e(Rt,l5r),e(Rt,nc),e(nc,i5r),e(nc,kve),e(kve,d5r),e(nc,c5r),e(nc,IH),e(IH,f5r),e(nc,m5r),e(Rt,g5r),M(v7,Rt,null),e(rr,h5r),e(rr,$r),M(W8,$r,null),e($r,p5r),e($r,Sve),e(Sve,_5r),e($r,u5r),e($r,an),e(an,b5r),e(an,Rve),e(Rve,v5r),e(an,F5r),e(an,Pve),e(Pve,T5r),e(an,M5r),e(an,Bve),e(Bve,E5r),e(an,C5r),e($r,w5r),e($r,ye),e(ye,F7),e(F7,Ive),e(Ive,A5r),e(F7,y5r),e(F7,NH),e(NH,L5r),e(F7,x5r),e(ye,$5r),e(ye,T7),e(T7,Nve),e(Nve,k5r),e(T7,S5r),e(T7,qH),e(qH,R5r),e(T7,P5r),e(ye,B5r),e(ye,M7),e(M7,qve),e(qve,I5r),e(M7,N5r),e(M7,jH),e(jH,q5r),e(M7,j5r),e(ye,D5r),e(ye,E7),e(E7,jve),e(jve,G5r),e(E7,O5r),e(E7,DH),e(DH,V5r),e(E7,X5r),e(ye,z5r),e(ye,C7),e(C7,Dve),e(Dve,W5r),e(C7,Q5r),e(C7,GH),e(GH,H5r),e(C7,U5r),e(ye,J5r),e(ye,w7),e(w7,Gve),e(Gve,Y5r),e(w7,K5r),e(w7,OH),e(OH,Z5r),e(w7,e3r),e(ye,o3r),e(ye,A7),e(A7,Ove),e(Ove,r3r),e(A7,t3r),e(A7,VH),e(VH,a3r),e(A7,n3r),e(ye,s3r),e(ye,y7),e(y7,Vve),e(Vve,l3r),e(y7,i3r),e(y7,XH),e(XH,d3r),e(y7,c3r),e(ye,f3r),e(ye,L7),e(L7,Xve),e(Xve,m3r),e(L7,g3r),e(L7,zH),e(zH,h3r),e(L7,p3r),e(ye,_3r),e(ye,x7),e(x7,zve),e(zve,u3r),e(x7,b3r),e(x7,WH),e(WH,v3r),e(x7,F3r),e($r,T3r),M($7,$r,null),b(f,Yje,u),b(f,sc,u),e(sc,k7),e(k7,Wve),M(Q8,Wve,null),e(sc,M3r),e(sc,Qve),e(Qve,E3r),b(f,Kje,u),b(f,tr,u),M(H8,tr,null),e(tr,C3r),e(tr,lc),e(lc,w3r),e(lc,QH),e(QH,A3r),e(lc,y3r),e(lc,HH),e(HH,L3r),e(lc,x3r),e(tr,$3r),e(tr,U8),e(U8,k3r),e(U8,Hve),e(Hve,S3r),e(U8,R3r),e(tr,P3r),e(tr,Pt),M(J8,Pt,null),e(Pt,B3r),e(Pt,Uve),e(Uve,I3r),e(Pt,N3r),e(Pt,ic),e(ic,q3r),e(ic,Jve),e(Jve,j3r),e(ic,D3r),e(ic,UH),e(UH,G3r),e(ic,O3r),e(Pt,V3r),M(S7,Pt,null),e(tr,X3r),e(tr,kr),M(Y8,kr,null),e(kr,z3r),e(kr,Yve),e(Yve,W3r),e(kr,Q3r),e(kr,nn),e(nn,H3r),e(nn,Kve),e(Kve,U3r),e(nn,J3r),e(nn,Zve),e(Zve,Y3r),e(nn,K3r),e(nn,e5e),e(e5e,Z3r),e(nn,eFr),e(kr,oFr),e(kr,oe),e(oe,R7),e(R7,o5e),e(o5e,rFr),e(R7,tFr),e(R7,JH),e(JH,aFr),e(R7,nFr),e(oe,sFr),e(oe,P7),e(P7,r5e),e(r5e,lFr),e(P7,iFr),e(P7,YH),e(YH,dFr),e(P7,cFr),e(oe,fFr),e(oe,B7),e(B7,t5e),e(t5e,mFr),e(B7,gFr),e(B7,KH),e(KH,hFr),e(B7,pFr),e(oe,_Fr),e(oe,I7),e(I7,a5e),e(a5e,uFr),e(I7,bFr),e(I7,ZH),e(ZH,vFr),e(I7,FFr),e(oe,TFr),e(oe,N7),e(N7,n5e),e(n5e,MFr),e(N7,EFr),e(N7,eU),e(eU,CFr),e(N7,wFr),e(oe,AFr),e(oe,q7),e(q7,s5e),e(s5e,yFr),e(q7,LFr),e(q7,oU),e(oU,xFr),e(q7,$Fr),e(oe,kFr),e(oe,j7),e(j7,l5e),e(l5e,SFr),e(j7,RFr),e(j7,rU),e(rU,PFr),e(j7,BFr),e(oe,IFr),e(oe,D7),e(D7,i5e),e(i5e,NFr),e(D7,qFr),e(D7,tU),e(tU,jFr),e(D7,DFr),e(oe,GFr),e(oe,G7),e(G7,d5e),e(d5e,OFr),e(G7,VFr),e(G7,aU),e(aU,XFr),e(G7,zFr),e(oe,WFr),e(oe,O7),e(O7,c5e),e(c5e,QFr),e(O7,HFr),e(O7,nU),e(nU,UFr),e(O7,JFr),e(oe,YFr),e(oe,V7),e(V7,f5e),e(f5e,KFr),e(V7,ZFr),e(V7,sU),e(sU,eTr),e(V7,oTr),e(oe,rTr),e(oe,X7),e(X7,m5e),e(m5e,tTr),e(X7,aTr),e(X7,lU),e(lU,nTr),e(X7,sTr),e(oe,lTr),e(oe,z7),e(z7,g5e),e(g5e,iTr),e(z7,dTr),e(z7,iU),e(iU,cTr),e(z7,fTr),e(oe,mTr),e(oe,W7),e(W7,h5e),e(h5e,gTr),e(W7,hTr),e(W7,dU),e(dU,pTr),e(W7,_Tr),e(oe,uTr),e(oe,Q7),e(Q7,p5e),e(p5e,bTr),e(Q7,vTr),e(Q7,cU),e(cU,FTr),e(Q7,TTr),e(oe,MTr),e(oe,H7),e(H7,_5e),e(_5e,ETr),e(H7,CTr),e(H7,fU),e(fU,wTr),e(H7,ATr),e(oe,yTr),e(oe,U7),e(U7,u5e),e(u5e,LTr),e(U7,xTr),e(U7,mU),e(mU,$Tr),e(U7,kTr),e(oe,STr),e(oe,J7),e(J7,b5e),e(b5e,RTr),e(J7,PTr),e(J7,gU),e(gU,BTr),e(J7,ITr),e(oe,NTr),e(oe,Y7),e(Y7,v5e),e(v5e,qTr),e(Y7,jTr),e(Y7,hU),e(hU,DTr),e(Y7,GTr),e(oe,OTr),e(oe,K7),e(K7,F5e),e(F5e,VTr),e(K7,XTr),e(K7,pU),e(pU,zTr),e(K7,WTr),e(oe,QTr),e(oe,Z7),e(Z7,T5e),e(T5e,HTr),e(Z7,UTr),e(Z7,_U),e(_U,JTr),e(Z7,YTr),e(oe,KTr),e(oe,eM),e(eM,M5e),e(M5e,ZTr),e(eM,e7r),e(eM,uU),e(uU,o7r),e(eM,r7r),e(oe,t7r),e(oe,oM),e(oM,E5e),e(E5e,a7r),e(oM,n7r),e(oM,bU),e(bU,s7r),e(oM,l7r),e(oe,i7r),e(oe,rM),e(rM,C5e),e(C5e,d7r),e(rM,c7r),e(rM,vU),e(vU,f7r),e(rM,m7r),e(oe,g7r),e(oe,tM),e(tM,w5e),e(w5e,h7r),e(tM,p7r),e(tM,FU),e(FU,_7r),e(tM,u7r),e(oe,b7r),e(oe,aM),e(aM,A5e),e(A5e,v7r),e(aM,F7r),e(aM,TU),e(TU,T7r),e(aM,M7r),e(kr,E7r),M(nM,kr,null),b(f,Zje,u),b(f,dc,u),e(dc,sM),e(sM,y5e),M(K8,y5e,null),e(dc,C7r),e(dc,L5e),e(L5e,w7r),b(f,eDe,u),b(f,ar,u),M(Z8,ar,null),e(ar,A7r),e(ar,cc),e(cc,y7r),e(cc,MU),e(MU,L7r),e(cc,x7r),e(cc,EU),e(EU,$7r),e(cc,k7r),e(ar,S7r),e(ar,e9),e(e9,R7r),e(e9,x5e),e(x5e,P7r),e(e9,B7r),e(ar,I7r),e(ar,Bt),M(o9,Bt,null),e(Bt,N7r),e(Bt,$5e),e($5e,q7r),e(Bt,j7r),e(Bt,fc),e(fc,D7r),e(fc,k5e),e(k5e,G7r),e(fc,O7r),e(fc,CU),e(CU,V7r),e(fc,X7r),e(Bt,z7r),M(lM,Bt,null),e(ar,W7r),e(ar,Sr),M(r9,Sr,null),e(Sr,Q7r),e(Sr,S5e),e(S5e,H7r),e(Sr,U7r),e(Sr,sn),e(sn,J7r),e(sn,R5e),e(R5e,Y7r),e(sn,K7r),e(sn,P5e),e(P5e,Z7r),e(sn,eMr),e(sn,B5e),e(B5e,oMr),e(sn,rMr),e(Sr,tMr),e(Sr,pe),e(pe,iM),e(iM,I5e),e(I5e,aMr),e(iM,nMr),e(iM,wU),e(wU,sMr),e(iM,lMr),e(pe,iMr),e(pe,dM),e(dM,N5e),e(N5e,dMr),e(dM,cMr),e(dM,AU),e(AU,fMr),e(dM,mMr),e(pe,gMr),e(pe,cM),e(cM,q5e),e(q5e,hMr),e(cM,pMr),e(cM,yU),e(yU,_Mr),e(cM,uMr),e(pe,bMr),e(pe,fM),e(fM,j5e),e(j5e,vMr),e(fM,FMr),e(fM,LU),e(LU,TMr),e(fM,MMr),e(pe,EMr),e(pe,mM),e(mM,D5e),e(D5e,CMr),e(mM,wMr),e(mM,xU),e(xU,AMr),e(mM,yMr),e(pe,LMr),e(pe,gM),e(gM,G5e),e(G5e,xMr),e(gM,$Mr),e(gM,$U),e($U,kMr),e(gM,SMr),e(pe,RMr),e(pe,hM),e(hM,O5e),e(O5e,PMr),e(hM,BMr),e(hM,kU),e(kU,IMr),e(hM,NMr),e(pe,qMr),e(pe,pM),e(pM,V5e),e(V5e,jMr),e(pM,DMr),e(pM,SU),e(SU,GMr),e(pM,OMr),e(pe,VMr),e(pe,_M),e(_M,X5e),e(X5e,XMr),e(_M,zMr),e(_M,RU),e(RU,WMr),e(_M,QMr),e(pe,HMr),e(pe,uM),e(uM,z5e),e(z5e,UMr),e(uM,JMr),e(uM,PU),e(PU,YMr),e(uM,KMr),e(pe,ZMr),e(pe,bM),e(bM,W5e),e(W5e,eEr),e(bM,oEr),e(bM,BU),e(BU,rEr),e(bM,tEr),e(pe,aEr),e(pe,vM),e(vM,Q5e),e(Q5e,nEr),e(vM,sEr),e(vM,IU),e(IU,lEr),e(vM,iEr),e(pe,dEr),e(pe,FM),e(FM,H5e),e(H5e,cEr),e(FM,fEr),e(FM,NU),e(NU,mEr),e(FM,gEr),e(pe,hEr),e(pe,TM),e(TM,U5e),e(U5e,pEr),e(TM,_Er),e(TM,qU),e(qU,uEr),e(TM,bEr),e(pe,vEr),e(pe,MM),e(MM,J5e),e(J5e,FEr),e(MM,TEr),e(MM,jU),e(jU,MEr),e(MM,EEr),e(pe,CEr),e(pe,EM),e(EM,Y5e),e(Y5e,wEr),e(EM,AEr),e(EM,DU),e(DU,yEr),e(EM,LEr),e(pe,xEr),e(pe,CM),e(CM,K5e),e(K5e,$Er),e(CM,kEr),e(CM,GU),e(GU,SEr),e(CM,REr),e(Sr,PEr),M(wM,Sr,null),b(f,oDe,u),b(f,mc,u),e(mc,AM),e(AM,Z5e),M(t9,Z5e,null),e(mc,BEr),e(mc,e3e),e(e3e,IEr),b(f,rDe,u),b(f,nr,u),M(a9,nr,null),e(nr,NEr),e(nr,gc),e(gc,qEr),e(gc,OU),e(OU,jEr),e(gc,DEr),e(gc,VU),e(VU,GEr),e(gc,OEr),e(nr,VEr),e(nr,n9),e(n9,XEr),e(n9,o3e),e(o3e,zEr),e(n9,WEr),e(nr,QEr),e(nr,It),M(s9,It,null),e(It,HEr),e(It,r3e),e(r3e,UEr),e(It,JEr),e(It,hc),e(hc,YEr),e(hc,t3e),e(t3e,KEr),e(hc,ZEr),e(hc,XU),e(XU,eCr),e(hc,oCr),e(It,rCr),M(yM,It,null),e(nr,tCr),e(nr,Rr),M(l9,Rr,null),e(Rr,aCr),e(Rr,a3e),e(a3e,nCr),e(Rr,sCr),e(Rr,ln),e(ln,lCr),e(ln,n3e),e(n3e,iCr),e(ln,dCr),e(ln,s3e),e(s3e,cCr),e(ln,fCr),e(ln,l3e),e(l3e,mCr),e(ln,gCr),e(Rr,hCr),e(Rr,i9),e(i9,LM),e(LM,i3e),e(i3e,pCr),e(LM,_Cr),e(LM,zU),e(zU,uCr),e(LM,bCr),e(i9,vCr),e(i9,xM),e(xM,d3e),e(d3e,FCr),e(xM,TCr),e(xM,WU),e(WU,MCr),e(xM,ECr),e(Rr,CCr),M($M,Rr,null),b(f,tDe,u),b(f,pc,u),e(pc,kM),e(kM,c3e),M(d9,c3e,null),e(pc,wCr),e(pc,f3e),e(f3e,ACr),b(f,aDe,u),b(f,sr,u),M(c9,sr,null),e(sr,yCr),e(sr,_c),e(_c,LCr),e(_c,QU),e(QU,xCr),e(_c,$Cr),e(_c,HU),e(HU,kCr),e(_c,SCr),e(sr,RCr),e(sr,f9),e(f9,PCr),e(f9,m3e),e(m3e,BCr),e(f9,ICr),e(sr,NCr),e(sr,Nt),M(m9,Nt,null),e(Nt,qCr),e(Nt,g3e),e(g3e,jCr),e(Nt,DCr),e(Nt,uc),e(uc,GCr),e(uc,h3e),e(h3e,OCr),e(uc,VCr),e(uc,UU),e(UU,XCr),e(uc,zCr),e(Nt,WCr),M(SM,Nt,null),e(sr,QCr),e(sr,Pr),M(g9,Pr,null),e(Pr,HCr),e(Pr,p3e),e(p3e,UCr),e(Pr,JCr),e(Pr,dn),e(dn,YCr),e(dn,_3e),e(_3e,KCr),e(dn,ZCr),e(dn,u3e),e(u3e,e0r),e(dn,o0r),e(dn,b3e),e(b3e,r0r),e(dn,t0r),e(Pr,a0r),e(Pr,v3e),e(v3e,RM),e(RM,F3e),e(F3e,n0r),e(RM,s0r),e(RM,JU),e(JU,l0r),e(RM,i0r),e(Pr,d0r),M(PM,Pr,null),b(f,nDe,u),b(f,bc,u),e(bc,BM),e(BM,T3e),M(h9,T3e,null),e(bc,c0r),e(bc,M3e),e(M3e,f0r),b(f,sDe,u),b(f,lr,u),M(p9,lr,null),e(lr,m0r),e(lr,vc),e(vc,g0r),e(vc,YU),e(YU,h0r),e(vc,p0r),e(vc,KU),e(KU,_0r),e(vc,u0r),e(lr,b0r),e(lr,_9),e(_9,v0r),e(_9,E3e),e(E3e,F0r),e(_9,T0r),e(lr,M0r),e(lr,qt),M(u9,qt,null),e(qt,E0r),e(qt,C3e),e(C3e,C0r),e(qt,w0r),e(qt,Fc),e(Fc,A0r),e(Fc,w3e),e(w3e,y0r),e(Fc,L0r),e(Fc,ZU),e(ZU,x0r),e(Fc,$0r),e(qt,k0r),M(IM,qt,null),e(lr,S0r),e(lr,Br),M(b9,Br,null),e(Br,R0r),e(Br,A3e),e(A3e,P0r),e(Br,B0r),e(Br,cn),e(cn,I0r),e(cn,y3e),e(y3e,N0r),e(cn,q0r),e(cn,L3e),e(L3e,j0r),e(cn,D0r),e(cn,x3e),e(x3e,G0r),e(cn,O0r),e(Br,V0r),e(Br,de),e(de,NM),e(NM,$3e),e($3e,X0r),e(NM,z0r),e(NM,eJ),e(eJ,W0r),e(NM,Q0r),e(de,H0r),e(de,qM),e(qM,k3e),e(k3e,U0r),e(qM,J0r),e(qM,oJ),e(oJ,Y0r),e(qM,K0r),e(de,Z0r),e(de,jM),e(jM,S3e),e(S3e,ewr),e(jM,owr),e(jM,rJ),e(rJ,rwr),e(jM,twr),e(de,awr),e(de,DM),e(DM,R3e),e(R3e,nwr),e(DM,swr),e(DM,tJ),e(tJ,lwr),e(DM,iwr),e(de,dwr),e(de,GM),e(GM,P3e),e(P3e,cwr),e(GM,fwr),e(GM,aJ),e(aJ,mwr),e(GM,gwr),e(de,hwr),e(de,OM),e(OM,B3e),e(B3e,pwr),e(OM,_wr),e(OM,nJ),e(nJ,uwr),e(OM,bwr),e(de,vwr),e(de,VM),e(VM,I3e),e(I3e,Fwr),e(VM,Twr),e(VM,sJ),e(sJ,Mwr),e(VM,Ewr),e(de,Cwr),e(de,XM),e(XM,N3e),e(N3e,wwr),e(XM,Awr),e(XM,lJ),e(lJ,ywr),e(XM,Lwr),e(de,xwr),e(de,zM),e(zM,q3e),e(q3e,$wr),e(zM,kwr),e(zM,iJ),e(iJ,Swr),e(zM,Rwr),e(de,Pwr),e(de,WM),e(WM,j3e),e(j3e,Bwr),e(WM,Iwr),e(WM,dJ),e(dJ,Nwr),e(WM,qwr),e(de,jwr),e(de,QM),e(QM,D3e),e(D3e,Dwr),e(QM,Gwr),e(QM,cJ),e(cJ,Owr),e(QM,Vwr),e(de,Xwr),e(de,HM),e(HM,G3e),e(G3e,zwr),e(HM,Wwr),e(HM,fJ),e(fJ,Qwr),e(HM,Hwr),e(de,Uwr),e(de,UM),e(UM,O3e),e(O3e,Jwr),e(UM,Ywr),e(UM,mJ),e(mJ,Kwr),e(UM,Zwr),e(de,e6r),e(de,JM),e(JM,V3e),e(V3e,o6r),e(JM,r6r),e(JM,gJ),e(gJ,t6r),e(JM,a6r),e(de,n6r),e(de,YM),e(YM,X3e),e(X3e,s6r),e(YM,l6r),e(YM,hJ),e(hJ,i6r),e(YM,d6r),e(de,c6r),e(de,KM),e(KM,z3e),e(z3e,f6r),e(KM,m6r),e(KM,pJ),e(pJ,g6r),e(KM,h6r),e(de,p6r),e(de,ZM),e(ZM,W3e),e(W3e,_6r),e(ZM,u6r),e(ZM,_J),e(_J,b6r),e(ZM,v6r),e(de,F6r),e(de,eE),e(eE,Q3e),e(Q3e,T6r),e(eE,M6r),e(eE,uJ),e(uJ,E6r),e(eE,C6r),e(de,w6r),e(de,oE),e(oE,H3e),e(H3e,A6r),e(oE,y6r),e(oE,bJ),e(bJ,L6r),e(oE,x6r),e(de,$6r),e(de,rE),e(rE,U3e),e(U3e,k6r),e(rE,S6r),e(rE,vJ),e(vJ,R6r),e(rE,P6r),e(Br,B6r),M(tE,Br,null),b(f,lDe,u),b(f,Tc,u),e(Tc,aE),e(aE,J3e),M(v9,J3e,null),e(Tc,I6r),e(Tc,Y3e),e(Y3e,N6r),b(f,iDe,u),b(f,ir,u),M(F9,ir,null),e(ir,q6r),e(ir,Mc),e(Mc,j6r),e(Mc,FJ),e(FJ,D6r),e(Mc,G6r),e(Mc,TJ),e(TJ,O6r),e(Mc,V6r),e(ir,X6r),e(ir,T9),e(T9,z6r),e(T9,K3e),e(K3e,W6r),e(T9,Q6r),e(ir,H6r),e(ir,jt),M(M9,jt,null),e(jt,U6r),e(jt,Z3e),e(Z3e,J6r),e(jt,Y6r),e(jt,Ec),e(Ec,K6r),e(Ec,eFe),e(eFe,Z6r),e(Ec,eAr),e(Ec,MJ),e(MJ,oAr),e(Ec,rAr),e(jt,tAr),M(nE,jt,null),e(ir,aAr),e(ir,Ir),M(E9,Ir,null),e(Ir,nAr),e(Ir,oFe),e(oFe,sAr),e(Ir,lAr),e(Ir,fn),e(fn,iAr),e(fn,rFe),e(rFe,dAr),e(fn,cAr),e(fn,tFe),e(tFe,fAr),e(fn,mAr),e(fn,aFe),e(aFe,gAr),e(fn,hAr),e(Ir,pAr),e(Ir,ce),e(ce,sE),e(sE,nFe),e(nFe,_Ar),e(sE,uAr),e(sE,EJ),e(EJ,bAr),e(sE,vAr),e(ce,FAr),e(ce,lE),e(lE,sFe),e(sFe,TAr),e(lE,MAr),e(lE,CJ),e(CJ,EAr),e(lE,CAr),e(ce,wAr),e(ce,iE),e(iE,lFe),e(lFe,AAr),e(iE,yAr),e(iE,wJ),e(wJ,LAr),e(iE,xAr),e(ce,$Ar),e(ce,dE),e(dE,iFe),e(iFe,kAr),e(dE,SAr),e(dE,AJ),e(AJ,RAr),e(dE,PAr),e(ce,BAr),e(ce,cE),e(cE,dFe),e(dFe,IAr),e(cE,NAr),e(cE,yJ),e(yJ,qAr),e(cE,jAr),e(ce,DAr),e(ce,fE),e(fE,cFe),e(cFe,GAr),e(fE,OAr),e(fE,LJ),e(LJ,VAr),e(fE,XAr),e(ce,zAr),e(ce,mE),e(mE,fFe),e(fFe,WAr),e(mE,QAr),e(mE,xJ),e(xJ,HAr),e(mE,UAr),e(ce,JAr),e(ce,gE),e(gE,mFe),e(mFe,YAr),e(gE,KAr),e(gE,$J),e($J,ZAr),e(gE,eyr),e(ce,oyr),e(ce,hE),e(hE,gFe),e(gFe,ryr),e(hE,tyr),e(hE,kJ),e(kJ,ayr),e(hE,nyr),e(ce,syr),e(ce,pE),e(pE,hFe),e(hFe,lyr),e(pE,iyr),e(pE,SJ),e(SJ,dyr),e(pE,cyr),e(ce,fyr),e(ce,_E),e(_E,pFe),e(pFe,myr),e(_E,gyr),e(_E,RJ),e(RJ,hyr),e(_E,pyr),e(ce,_yr),e(ce,uE),e(uE,_Fe),e(_Fe,uyr),e(uE,byr),e(uE,PJ),e(PJ,vyr),e(uE,Fyr),e(ce,Tyr),e(ce,bE),e(bE,uFe),e(uFe,Myr),e(bE,Eyr),e(bE,BJ),e(BJ,Cyr),e(bE,wyr),e(ce,Ayr),e(ce,vE),e(vE,bFe),e(bFe,yyr),e(vE,Lyr),e(vE,IJ),e(IJ,xyr),e(vE,$yr),e(ce,kyr),e(ce,FE),e(FE,vFe),e(vFe,Syr),e(FE,Ryr),e(FE,NJ),e(NJ,Pyr),e(FE,Byr),e(ce,Iyr),e(ce,TE),e(TE,FFe),e(FFe,Nyr),e(TE,qyr),e(TE,qJ),e(qJ,jyr),e(TE,Dyr),e(ce,Gyr),e(ce,ME),e(ME,TFe),e(TFe,Oyr),e(ME,Vyr),e(ME,jJ),e(jJ,Xyr),e(ME,zyr),e(ce,Wyr),e(ce,EE),e(EE,MFe),e(MFe,Qyr),e(EE,Hyr),e(EE,DJ),e(DJ,Uyr),e(EE,Jyr),e(ce,Yyr),e(ce,CE),e(CE,EFe),e(EFe,Kyr),e(CE,Zyr),e(CE,GJ),e(GJ,eLr),e(CE,oLr),e(ce,rLr),e(ce,wE),e(wE,CFe),e(CFe,tLr),e(wE,aLr),e(wE,OJ),e(OJ,nLr),e(wE,sLr),e(Ir,lLr),M(AE,Ir,null),b(f,dDe,u),b(f,Cc,u),e(Cc,yE),e(yE,wFe),M(C9,wFe,null),e(Cc,iLr),e(Cc,AFe),e(AFe,dLr),b(f,cDe,u),b(f,dr,u),M(w9,dr,null),e(dr,cLr),e(dr,wc),e(wc,fLr),e(wc,VJ),e(VJ,mLr),e(wc,gLr),e(wc,XJ),e(XJ,hLr),e(wc,pLr),e(dr,_Lr),e(dr,A9),e(A9,uLr),e(A9,yFe),e(yFe,bLr),e(A9,vLr),e(dr,FLr),e(dr,Dt),M(y9,Dt,null),e(Dt,TLr),e(Dt,LFe),e(LFe,MLr),e(Dt,ELr),e(Dt,Ac),e(Ac,CLr),e(Ac,xFe),e(xFe,wLr),e(Ac,ALr),e(Ac,zJ),e(zJ,yLr),e(Ac,LLr),e(Dt,xLr),M(LE,Dt,null),e(dr,$Lr),e(dr,Nr),M(L9,Nr,null),e(Nr,kLr),e(Nr,$Fe),e($Fe,SLr),e(Nr,RLr),e(Nr,mn),e(mn,PLr),e(mn,kFe),e(kFe,BLr),e(mn,ILr),e(mn,SFe),e(SFe,NLr),e(mn,qLr),e(mn,RFe),e(RFe,jLr),e(mn,DLr),e(Nr,GLr),e(Nr,PFe),e(PFe,xE),e(xE,BFe),e(BFe,OLr),e(xE,VLr),e(xE,WJ),e(WJ,XLr),e(xE,zLr),e(Nr,WLr),M($E,Nr,null),b(f,fDe,u),b(f,yc,u),e(yc,kE),e(kE,IFe),M(x9,IFe,null),e(yc,QLr),e(yc,NFe),e(NFe,HLr),b(f,mDe,u),b(f,cr,u),M($9,cr,null),e(cr,ULr),e(cr,Lc),e(Lc,JLr),e(Lc,QJ),e(QJ,YLr),e(Lc,KLr),e(Lc,HJ),e(HJ,ZLr),e(Lc,e8r),e(cr,o8r),e(cr,k9),e(k9,r8r),e(k9,qFe),e(qFe,t8r),e(k9,a8r),e(cr,n8r),e(cr,Gt),M(S9,Gt,null),e(Gt,s8r),e(Gt,jFe),e(jFe,l8r),e(Gt,i8r),e(Gt,xc),e(xc,d8r),e(xc,DFe),e(DFe,c8r),e(xc,f8r),e(xc,UJ),e(UJ,m8r),e(xc,g8r),e(Gt,h8r),M(SE,Gt,null),e(cr,p8r),e(cr,qr),M(R9,qr,null),e(qr,_8r),e(qr,GFe),e(GFe,u8r),e(qr,b8r),e(qr,gn),e(gn,v8r),e(gn,OFe),e(OFe,F8r),e(gn,T8r),e(gn,VFe),e(VFe,M8r),e(gn,E8r),e(gn,XFe),e(XFe,C8r),e(gn,w8r),e(qr,A8r),e(qr,zFe),e(zFe,RE),e(RE,WFe),e(WFe,y8r),e(RE,L8r),e(RE,JJ),e(JJ,x8r),e(RE,$8r),e(qr,k8r),M(PE,qr,null),b(f,gDe,u),b(f,$c,u),e($c,BE),e(BE,QFe),M(P9,QFe,null),e($c,S8r),e($c,HFe),e(HFe,R8r),b(f,hDe,u),b(f,fr,u),M(B9,fr,null),e(fr,P8r),e(fr,kc),e(kc,B8r),e(kc,YJ),e(YJ,I8r),e(kc,N8r),e(kc,KJ),e(KJ,q8r),e(kc,j8r),e(fr,D8r),e(fr,I9),e(I9,G8r),e(I9,UFe),e(UFe,O8r),e(I9,V8r),e(fr,X8r),e(fr,Ot),M(N9,Ot,null),e(Ot,z8r),e(Ot,JFe),e(JFe,W8r),e(Ot,Q8r),e(Ot,Sc),e(Sc,H8r),e(Sc,YFe),e(YFe,U8r),e(Sc,J8r),e(Sc,ZJ),e(ZJ,Y8r),e(Sc,K8r),e(Ot,Z8r),M(IE,Ot,null),e(fr,e9r),e(fr,jr),M(q9,jr,null),e(jr,o9r),e(jr,KFe),e(KFe,r9r),e(jr,t9r),e(jr,hn),e(hn,a9r),e(hn,ZFe),e(ZFe,n9r),e(hn,s9r),e(hn,eTe),e(eTe,l9r),e(hn,i9r),e(hn,oTe),e(oTe,d9r),e(hn,c9r),e(jr,f9r),e(jr,re),e(re,NE),e(NE,rTe),e(rTe,m9r),e(NE,g9r),e(NE,eY),e(eY,h9r),e(NE,p9r),e(re,_9r),e(re,qE),e(qE,tTe),e(tTe,u9r),e(qE,b9r),e(qE,oY),e(oY,v9r),e(qE,F9r),e(re,T9r),e(re,jE),e(jE,aTe),e(aTe,M9r),e(jE,E9r),e(jE,rY),e(rY,C9r),e(jE,w9r),e(re,A9r),e(re,DE),e(DE,nTe),e(nTe,y9r),e(DE,L9r),e(DE,tY),e(tY,x9r),e(DE,$9r),e(re,k9r),e(re,GE),e(GE,sTe),e(sTe,S9r),e(GE,R9r),e(GE,aY),e(aY,P9r),e(GE,B9r),e(re,I9r),e(re,OE),e(OE,lTe),e(lTe,N9r),e(OE,q9r),e(OE,nY),e(nY,j9r),e(OE,D9r),e(re,G9r),e(re,VE),e(VE,iTe),e(iTe,O9r),e(VE,V9r),e(VE,sY),e(sY,X9r),e(VE,z9r),e(re,W9r),e(re,XE),e(XE,dTe),e(dTe,Q9r),e(XE,H9r),e(XE,lY),e(lY,U9r),e(XE,J9r),e(re,Y9r),e(re,zE),e(zE,cTe),e(cTe,K9r),e(zE,Z9r),e(zE,iY),e(iY,exr),e(zE,oxr),e(re,rxr),e(re,WE),e(WE,fTe),e(fTe,txr),e(WE,axr),e(WE,dY),e(dY,nxr),e(WE,sxr),e(re,lxr),e(re,QE),e(QE,mTe),e(mTe,ixr),e(QE,dxr),e(QE,cY),e(cY,cxr),e(QE,fxr),e(re,mxr),e(re,HE),e(HE,gTe),e(gTe,gxr),e(HE,hxr),e(HE,fY),e(fY,pxr),e(HE,_xr),e(re,uxr),e(re,UE),e(UE,hTe),e(hTe,bxr),e(UE,vxr),e(UE,mY),e(mY,Fxr),e(UE,Txr),e(re,Mxr),e(re,JE),e(JE,pTe),e(pTe,Exr),e(JE,Cxr),e(JE,gY),e(gY,wxr),e(JE,Axr),e(re,yxr),e(re,YE),e(YE,_Te),e(_Te,Lxr),e(YE,xxr),e(YE,hY),e(hY,$xr),e(YE,kxr),e(re,Sxr),e(re,KE),e(KE,uTe),e(uTe,Rxr),e(KE,Pxr),e(KE,pY),e(pY,Bxr),e(KE,Ixr),e(re,Nxr),e(re,ZE),e(ZE,bTe),e(bTe,qxr),e(ZE,jxr),e(ZE,_Y),e(_Y,Dxr),e(ZE,Gxr),e(re,Oxr),e(re,eC),e(eC,vTe),e(vTe,Vxr),e(eC,Xxr),e(eC,uY),e(uY,zxr),e(eC,Wxr),e(re,Qxr),e(re,oC),e(oC,FTe),e(FTe,Hxr),e(oC,Uxr),e(oC,bY),e(bY,Jxr),e(oC,Yxr),e(re,Kxr),e(re,rC),e(rC,TTe),e(TTe,Zxr),e(rC,e$r),e(rC,vY),e(vY,o$r),e(rC,r$r),e(re,t$r),e(re,tC),e(tC,MTe),e(MTe,a$r),e(tC,n$r),e(tC,FY),e(FY,s$r),e(tC,l$r),e(re,i$r),e(re,aC),e(aC,ETe),e(ETe,d$r),e(aC,c$r),e(aC,TY),e(TY,f$r),e(aC,m$r),e(re,g$r),e(re,nC),e(nC,CTe),e(CTe,h$r),e(nC,p$r),e(nC,MY),e(MY,_$r),e(nC,u$r),e(re,b$r),e(re,sC),e(sC,wTe),e(wTe,v$r),e(sC,F$r),e(sC,EY),e(EY,T$r),e(sC,M$r),e(re,E$r),e(re,lC),e(lC,ATe),e(ATe,C$r),e(lC,w$r),e(lC,CY),e(CY,A$r),e(lC,y$r),e(re,L$r),e(re,iC),e(iC,yTe),e(yTe,x$r),e(iC,$$r),e(iC,wY),e(wY,k$r),e(iC,S$r),e(jr,R$r),M(dC,jr,null),b(f,pDe,u),b(f,Rc,u),e(Rc,cC),e(cC,LTe),M(j9,LTe,null),e(Rc,P$r),e(Rc,xTe),e(xTe,B$r),b(f,_De,u),b(f,mr,u),M(D9,mr,null),e(mr,I$r),e(mr,Pc),e(Pc,N$r),e(Pc,AY),e(AY,q$r),e(Pc,j$r),e(Pc,yY),e(yY,D$r),e(Pc,G$r),e(mr,O$r),e(mr,G9),e(G9,V$r),e(G9,$Te),e($Te,X$r),e(G9,z$r),e(mr,W$r),e(mr,Vt),M(O9,Vt,null),e(Vt,Q$r),e(Vt,kTe),e(kTe,H$r),e(Vt,U$r),e(Vt,Bc),e(Bc,J$r),e(Bc,STe),e(STe,Y$r),e(Bc,K$r),e(Bc,LY),e(LY,Z$r),e(Bc,ekr),e(Vt,okr),M(fC,Vt,null),e(mr,rkr),e(mr,Dr),M(V9,Dr,null),e(Dr,tkr),e(Dr,RTe),e(RTe,akr),e(Dr,nkr),e(Dr,pn),e(pn,skr),e(pn,PTe),e(PTe,lkr),e(pn,ikr),e(pn,BTe),e(BTe,dkr),e(pn,ckr),e(pn,ITe),e(ITe,fkr),e(pn,mkr),e(Dr,gkr),e(Dr,Le),e(Le,mC),e(mC,NTe),e(NTe,hkr),e(mC,pkr),e(mC,xY),e(xY,_kr),e(mC,ukr),e(Le,bkr),e(Le,gC),e(gC,qTe),e(qTe,vkr),e(gC,Fkr),e(gC,$Y),e($Y,Tkr),e(gC,Mkr),e(Le,Ekr),e(Le,hC),e(hC,jTe),e(jTe,Ckr),e(hC,wkr),e(hC,kY),e(kY,Akr),e(hC,ykr),e(Le,Lkr),e(Le,pC),e(pC,DTe),e(DTe,xkr),e(pC,$kr),e(pC,SY),e(SY,kkr),e(pC,Skr),e(Le,Rkr),e(Le,_C),e(_C,GTe),e(GTe,Pkr),e(_C,Bkr),e(_C,RY),e(RY,Ikr),e(_C,Nkr),e(Le,qkr),e(Le,uC),e(uC,OTe),e(OTe,jkr),e(uC,Dkr),e(uC,PY),e(PY,Gkr),e(uC,Okr),e(Le,Vkr),e(Le,bC),e(bC,VTe),e(VTe,Xkr),e(bC,zkr),e(bC,BY),e(BY,Wkr),e(bC,Qkr),e(Le,Hkr),e(Le,vC),e(vC,XTe),e(XTe,Ukr),e(vC,Jkr),e(vC,IY),e(IY,Ykr),e(vC,Kkr),e(Le,Zkr),e(Le,FC),e(FC,zTe),e(zTe,eSr),e(FC,oSr),e(FC,NY),e(NY,rSr),e(FC,tSr),e(Le,aSr),e(Le,TC),e(TC,WTe),e(WTe,nSr),e(TC,sSr),e(TC,qY),e(qY,lSr),e(TC,iSr),e(Dr,dSr),M(MC,Dr,null),b(f,uDe,u),b(f,Ic,u),e(Ic,EC),e(EC,QTe),M(X9,QTe,null),e(Ic,cSr),e(Ic,HTe),e(HTe,fSr),b(f,bDe,u),b(f,gr,u),M(z9,gr,null),e(gr,mSr),e(gr,Nc),e(Nc,gSr),e(Nc,jY),e(jY,hSr),e(Nc,pSr),e(Nc,DY),e(DY,_Sr),e(Nc,uSr),e(gr,bSr),e(gr,W9),e(W9,vSr),e(W9,UTe),e(UTe,FSr),e(W9,TSr),e(gr,MSr),e(gr,Xt),M(Q9,Xt,null),e(Xt,ESr),e(Xt,JTe),e(JTe,CSr),e(Xt,wSr),e(Xt,qc),e(qc,ASr),e(qc,YTe),e(YTe,ySr),e(qc,LSr),e(qc,GY),e(GY,xSr),e(qc,$Sr),e(Xt,kSr),M(CC,Xt,null),e(gr,SSr),e(gr,Gr),M(H9,Gr,null),e(Gr,RSr),e(Gr,KTe),e(KTe,PSr),e(Gr,BSr),e(Gr,_n),e(_n,ISr),e(_n,ZTe),e(ZTe,NSr),e(_n,qSr),e(_n,e7e),e(e7e,jSr),e(_n,DSr),e(_n,o7e),e(o7e,GSr),e(_n,OSr),e(Gr,VSr),e(Gr,Ee),e(Ee,wC),e(wC,r7e),e(r7e,XSr),e(wC,zSr),e(wC,OY),e(OY,WSr),e(wC,QSr),e(Ee,HSr),e(Ee,AC),e(AC,t7e),e(t7e,USr),e(AC,JSr),e(AC,VY),e(VY,YSr),e(AC,KSr),e(Ee,ZSr),e(Ee,yC),e(yC,a7e),e(a7e,eRr),e(yC,oRr),e(yC,XY),e(XY,rRr),e(yC,tRr),e(Ee,aRr),e(Ee,LC),e(LC,n7e),e(n7e,nRr),e(LC,sRr),e(LC,zY),e(zY,lRr),e(LC,iRr),e(Ee,dRr),e(Ee,xC),e(xC,s7e),e(s7e,cRr),e(xC,fRr),e(xC,WY),e(WY,mRr),e(xC,gRr),e(Ee,hRr),e(Ee,$C),e($C,l7e),e(l7e,pRr),e($C,_Rr),e($C,QY),e(QY,uRr),e($C,bRr),e(Ee,vRr),e(Ee,kC),e(kC,i7e),e(i7e,FRr),e(kC,TRr),e(kC,HY),e(HY,MRr),e(kC,ERr),e(Ee,CRr),e(Ee,SC),e(SC,d7e),e(d7e,wRr),e(SC,ARr),e(SC,UY),e(UY,yRr),e(SC,LRr),e(Ee,xRr),e(Ee,RC),e(RC,c7e),e(c7e,$Rr),e(RC,kRr),e(RC,JY),e(JY,SRr),e(RC,RRr),e(Ee,PRr),e(Ee,PC),e(PC,f7e),e(f7e,BRr),e(PC,IRr),e(PC,YY),e(YY,NRr),e(PC,qRr),e(Ee,jRr),e(Ee,BC),e(BC,m7e),e(m7e,DRr),e(BC,GRr),e(BC,KY),e(KY,ORr),e(BC,VRr),e(Ee,XRr),e(Ee,IC),e(IC,g7e),e(g7e,zRr),e(IC,WRr),e(IC,ZY),e(ZY,QRr),e(IC,HRr),e(Gr,URr),M(NC,Gr,null),b(f,vDe,u),b(f,jc,u),e(jc,qC),e(qC,h7e),M(U9,h7e,null),e(jc,JRr),e(jc,p7e),e(p7e,YRr),b(f,FDe,u),b(f,hr,u),M(J9,hr,null),e(hr,KRr),e(hr,Dc),e(Dc,ZRr),e(Dc,eK),e(eK,ePr),e(Dc,oPr),e(Dc,oK),e(oK,rPr),e(Dc,tPr),e(hr,aPr),e(hr,Y9),e(Y9,nPr),e(Y9,_7e),e(_7e,sPr),e(Y9,lPr),e(hr,iPr),e(hr,zt),M(K9,zt,null),e(zt,dPr),e(zt,u7e),e(u7e,cPr),e(zt,fPr),e(zt,Gc),e(Gc,mPr),e(Gc,b7e),e(b7e,gPr),e(Gc,hPr),e(Gc,rK),e(rK,pPr),e(Gc,_Pr),e(zt,uPr),M(jC,zt,null),e(hr,bPr),e(hr,Or),M(Z9,Or,null),e(Or,vPr),e(Or,v7e),e(v7e,FPr),e(Or,TPr),e(Or,un),e(un,MPr),e(un,F7e),e(F7e,EPr),e(un,CPr),e(un,T7e),e(T7e,wPr),e(un,APr),e(un,M7e),e(M7e,yPr),e(un,LPr),e(Or,xPr),e(Or,xe),e(xe,DC),e(DC,E7e),e(E7e,$Pr),e(DC,kPr),e(DC,tK),e(tK,SPr),e(DC,RPr),e(xe,PPr),e(xe,GC),e(GC,C7e),e(C7e,BPr),e(GC,IPr),e(GC,aK),e(aK,NPr),e(GC,qPr),e(xe,jPr),e(xe,OC),e(OC,w7e),e(w7e,DPr),e(OC,GPr),e(OC,nK),e(nK,OPr),e(OC,VPr),e(xe,XPr),e(xe,VC),e(VC,A7e),e(A7e,zPr),e(VC,WPr),e(VC,sK),e(sK,QPr),e(VC,HPr),e(xe,UPr),e(xe,XC),e(XC,y7e),e(y7e,JPr),e(XC,YPr),e(XC,lK),e(lK,KPr),e(XC,ZPr),e(xe,eBr),e(xe,zC),e(zC,L7e),e(L7e,oBr),e(zC,rBr),e(zC,iK),e(iK,tBr),e(zC,aBr),e(xe,nBr),e(xe,WC),e(WC,x7e),e(x7e,sBr),e(WC,lBr),e(WC,dK),e(dK,iBr),e(WC,dBr),e(xe,cBr),e(xe,QC),e(QC,$7e),e($7e,fBr),e(QC,mBr),e(QC,cK),e(cK,gBr),e(QC,hBr),e(xe,pBr),e(xe,HC),e(HC,k7e),e(k7e,_Br),e(HC,uBr),e(HC,fK),e(fK,bBr),e(HC,vBr),e(xe,FBr),e(xe,UC),e(UC,S7e),e(S7e,TBr),e(UC,MBr),e(UC,mK),e(mK,EBr),e(UC,CBr),e(Or,wBr),M(JC,Or,null),b(f,TDe,u),b(f,Oc,u),e(Oc,YC),e(YC,R7e),M(ex,R7e,null),e(Oc,ABr),e(Oc,P7e),e(P7e,yBr),b(f,MDe,u),b(f,pr,u),M(ox,pr,null),e(pr,LBr),e(pr,Vc),e(Vc,xBr),e(Vc,gK),e(gK,$Br),e(Vc,kBr),e(Vc,hK),e(hK,SBr),e(Vc,RBr),e(pr,PBr),e(pr,rx),e(rx,BBr),e(rx,B7e),e(B7e,IBr),e(rx,NBr),e(pr,qBr),e(pr,Wt),M(tx,Wt,null),e(Wt,jBr),e(Wt,I7e),e(I7e,DBr),e(Wt,GBr),e(Wt,Xc),e(Xc,OBr),e(Xc,N7e),e(N7e,VBr),e(Xc,XBr),e(Xc,pK),e(pK,zBr),e(Xc,WBr),e(Wt,QBr),M(KC,Wt,null),e(pr,HBr),e(pr,Vr),M(ax,Vr,null),e(Vr,UBr),e(Vr,q7e),e(q7e,JBr),e(Vr,YBr),e(Vr,bn),e(bn,KBr),e(bn,j7e),e(j7e,ZBr),e(bn,eIr),e(bn,D7e),e(D7e,oIr),e(bn,rIr),e(bn,G7e),e(G7e,tIr),e(bn,aIr),e(Vr,nIr),e(Vr,Pe),e(Pe,ZC),e(ZC,O7e),e(O7e,sIr),e(ZC,lIr),e(ZC,_K),e(_K,iIr),e(ZC,dIr),e(Pe,cIr),e(Pe,e0),e(e0,V7e),e(V7e,fIr),e(e0,mIr),e(e0,uK),e(uK,gIr),e(e0,hIr),e(Pe,pIr),e(Pe,o0),e(o0,X7e),e(X7e,_Ir),e(o0,uIr),e(o0,bK),e(bK,bIr),e(o0,vIr),e(Pe,FIr),e(Pe,r0),e(r0,z7e),e(z7e,TIr),e(r0,MIr),e(r0,vK),e(vK,EIr),e(r0,CIr),e(Pe,wIr),e(Pe,t0),e(t0,W7e),e(W7e,AIr),e(t0,yIr),e(t0,FK),e(FK,LIr),e(t0,xIr),e(Pe,$Ir),e(Pe,a0),e(a0,Q7e),e(Q7e,kIr),e(a0,SIr),e(a0,TK),e(TK,RIr),e(a0,PIr),e(Pe,BIr),e(Pe,n0),e(n0,H7e),e(H7e,IIr),e(n0,NIr),e(n0,MK),e(MK,qIr),e(n0,jIr),e(Pe,DIr),e(Pe,s0),e(s0,U7e),e(U7e,GIr),e(s0,OIr),e(s0,EK),e(EK,VIr),e(s0,XIr),e(Pe,zIr),e(Pe,l0),e(l0,J7e),e(J7e,WIr),e(l0,QIr),e(l0,CK),e(CK,HIr),e(l0,UIr),e(Vr,JIr),M(i0,Vr,null),b(f,EDe,u),b(f,zc,u),e(zc,d0),e(d0,Y7e),M(nx,Y7e,null),e(zc,YIr),e(zc,K7e),e(K7e,KIr),b(f,CDe,u),b(f,_r,u),M(sx,_r,null),e(_r,ZIr),e(_r,Wc),e(Wc,eNr),e(Wc,wK),e(wK,oNr),e(Wc,rNr),e(Wc,AK),e(AK,tNr),e(Wc,aNr),e(_r,nNr),e(_r,lx),e(lx,sNr),e(lx,Z7e),e(Z7e,lNr),e(lx,iNr),e(_r,dNr),e(_r,Qt),M(ix,Qt,null),e(Qt,cNr),e(Qt,eMe),e(eMe,fNr),e(Qt,mNr),e(Qt,Qc),e(Qc,gNr),e(Qc,oMe),e(oMe,hNr),e(Qc,pNr),e(Qc,yK),e(yK,_Nr),e(Qc,uNr),e(Qt,bNr),M(c0,Qt,null),e(_r,vNr),e(_r,Xr),M(dx,Xr,null),e(Xr,FNr),e(Xr,rMe),e(rMe,TNr),e(Xr,MNr),e(Xr,vn),e(vn,ENr),e(vn,tMe),e(tMe,CNr),e(vn,wNr),e(vn,aMe),e(aMe,ANr),e(vn,yNr),e(vn,nMe),e(nMe,LNr),e(vn,xNr),e(Xr,$Nr),e(Xr,$e),e($e,f0),e(f0,sMe),e(sMe,kNr),e(f0,SNr),e(f0,LK),e(LK,RNr),e(f0,PNr),e($e,BNr),e($e,m0),e(m0,lMe),e(lMe,INr),e(m0,NNr),e(m0,xK),e(xK,qNr),e(m0,jNr),e($e,DNr),e($e,g0),e(g0,iMe),e(iMe,GNr),e(g0,ONr),e(g0,$K),e($K,VNr),e(g0,XNr),e($e,zNr),e($e,h0),e(h0,dMe),e(dMe,WNr),e(h0,QNr),e(h0,kK),e(kK,HNr),e(h0,UNr),e($e,JNr),e($e,p0),e(p0,cMe),e(cMe,YNr),e(p0,KNr),e(p0,SK),e(SK,ZNr),e(p0,eqr),e($e,oqr),e($e,_0),e(_0,fMe),e(fMe,rqr),e(_0,tqr),e(_0,RK),e(RK,aqr),e(_0,nqr),e($e,sqr),e($e,u0),e(u0,mMe),e(mMe,lqr),e(u0,iqr),e(u0,PK),e(PK,dqr),e(u0,cqr),e($e,fqr),e($e,b0),e(b0,gMe),e(gMe,mqr),e(b0,gqr),e(b0,BK),e(BK,hqr),e(b0,pqr),e($e,_qr),e($e,v0),e(v0,hMe),e(hMe,uqr),e(v0,bqr),e(v0,IK),e(IK,vqr),e(v0,Fqr),e($e,Tqr),e($e,F0),e(F0,pMe),e(pMe,Mqr),e(F0,Eqr),e(F0,NK),e(NK,Cqr),e(F0,wqr),e(Xr,Aqr),M(T0,Xr,null),b(f,wDe,u),b(f,Hc,u),e(Hc,M0),e(M0,_Me),M(cx,_Me,null),e(Hc,yqr),e(Hc,uMe),e(uMe,Lqr),b(f,ADe,u),b(f,ur,u),M(fx,ur,null),e(ur,xqr),e(ur,Uc),e(Uc,$qr),e(Uc,qK),e(qK,kqr),e(Uc,Sqr),e(Uc,jK),e(jK,Rqr),e(Uc,Pqr),e(ur,Bqr),e(ur,mx),e(mx,Iqr),e(mx,bMe),e(bMe,Nqr),e(mx,qqr),e(ur,jqr),e(ur,Ht),M(gx,Ht,null),e(Ht,Dqr),e(Ht,vMe),e(vMe,Gqr),e(Ht,Oqr),e(Ht,Jc),e(Jc,Vqr),e(Jc,FMe),e(FMe,Xqr),e(Jc,zqr),e(Jc,DK),e(DK,Wqr),e(Jc,Qqr),e(Ht,Hqr),M(E0,Ht,null),e(ur,Uqr),e(ur,zr),M(hx,zr,null),e(zr,Jqr),e(zr,TMe),e(TMe,Yqr),e(zr,Kqr),e(zr,Fn),e(Fn,Zqr),e(Fn,MMe),e(MMe,ejr),e(Fn,ojr),e(Fn,EMe),e(EMe,rjr),e(Fn,tjr),e(Fn,CMe),e(CMe,ajr),e(Fn,njr),e(zr,sjr),e(zr,ke),e(ke,C0),e(C0,wMe),e(wMe,ljr),e(C0,ijr),e(C0,GK),e(GK,djr),e(C0,cjr),e(ke,fjr),e(ke,w0),e(w0,AMe),e(AMe,mjr),e(w0,gjr),e(w0,OK),e(OK,hjr),e(w0,pjr),e(ke,_jr),e(ke,A0),e(A0,yMe),e(yMe,ujr),e(A0,bjr),e(A0,VK),e(VK,vjr),e(A0,Fjr),e(ke,Tjr),e(ke,y0),e(y0,LMe),e(LMe,Mjr),e(y0,Ejr),e(y0,XK),e(XK,Cjr),e(y0,wjr),e(ke,Ajr),e(ke,L0),e(L0,xMe),e(xMe,yjr),e(L0,Ljr),e(L0,zK),e(zK,xjr),e(L0,$jr),e(ke,kjr),e(ke,x0),e(x0,$Me),e($Me,Sjr),e(x0,Rjr),e(x0,WK),e(WK,Pjr),e(x0,Bjr),e(ke,Ijr),e(ke,$0),e($0,kMe),e(kMe,Njr),e($0,qjr),e($0,QK),e(QK,jjr),e($0,Djr),e(ke,Gjr),e(ke,k0),e(k0,SMe),e(SMe,Ojr),e(k0,Vjr),e(k0,HK),e(HK,Xjr),e(k0,zjr),e(ke,Wjr),e(ke,S0),e(S0,RMe),e(RMe,Qjr),e(S0,Hjr),e(S0,UK),e(UK,Ujr),e(S0,Jjr),e(ke,Yjr),e(ke,R0),e(R0,PMe),e(PMe,Kjr),e(R0,Zjr),e(R0,JK),e(JK,eDr),e(R0,oDr),e(zr,rDr),M(P0,zr,null),b(f,yDe,u),b(f,Yc,u),e(Yc,B0),e(B0,BMe),M(px,BMe,null),e(Yc,tDr),e(Yc,IMe),e(IMe,aDr),b(f,LDe,u),b(f,br,u),M(_x,br,null),e(br,nDr),e(br,Kc),e(Kc,sDr),e(Kc,YK),e(YK,lDr),e(Kc,iDr),e(Kc,KK),e(KK,dDr),e(Kc,cDr),e(br,fDr),e(br,ux),e(ux,mDr),e(ux,NMe),e(NMe,gDr),e(ux,hDr),e(br,pDr),e(br,Ut),M(bx,Ut,null),e(Ut,_Dr),e(Ut,qMe),e(qMe,uDr),e(Ut,bDr),e(Ut,Zc),e(Zc,vDr),e(Zc,jMe),e(jMe,FDr),e(Zc,TDr),e(Zc,ZK),e(ZK,MDr),e(Zc,EDr),e(Ut,CDr),M(I0,Ut,null),e(br,wDr),e(br,Wr),M(vx,Wr,null),e(Wr,ADr),e(Wr,DMe),e(DMe,yDr),e(Wr,LDr),e(Wr,Tn),e(Tn,xDr),e(Tn,GMe),e(GMe,$Dr),e(Tn,kDr),e(Tn,OMe),e(OMe,SDr),e(Tn,RDr),e(Tn,VMe),e(VMe,PDr),e(Tn,BDr),e(Wr,IDr),e(Wr,Ge),e(Ge,N0),e(N0,XMe),e(XMe,NDr),e(N0,qDr),e(N0,eZ),e(eZ,jDr),e(N0,DDr),e(Ge,GDr),e(Ge,q0),e(q0,zMe),e(zMe,ODr),e(q0,VDr),e(q0,oZ),e(oZ,XDr),e(q0,zDr),e(Ge,WDr),e(Ge,j0),e(j0,WMe),e(WMe,QDr),e(j0,HDr),e(j0,rZ),e(rZ,UDr),e(j0,JDr),e(Ge,YDr),e(Ge,D0),e(D0,QMe),e(QMe,KDr),e(D0,ZDr),e(D0,tZ),e(tZ,eGr),e(D0,oGr),e(Ge,rGr),e(Ge,G0),e(G0,HMe),e(HMe,tGr),e(G0,aGr),e(G0,aZ),e(aZ,nGr),e(G0,sGr),e(Ge,lGr),e(Ge,O0),e(O0,UMe),e(UMe,iGr),e(O0,dGr),e(O0,nZ),e(nZ,cGr),e(O0,fGr),e(Ge,mGr),e(Ge,V0),e(V0,JMe),e(JMe,gGr),e(V0,hGr),e(V0,sZ),e(sZ,pGr),e(V0,_Gr),e(Ge,uGr),e(Ge,X0),e(X0,YMe),e(YMe,bGr),e(X0,vGr),e(X0,lZ),e(lZ,FGr),e(X0,TGr),e(Wr,MGr),M(z0,Wr,null),b(f,xDe,u),b(f,ef,u),e(ef,W0),e(W0,KMe),M(Fx,KMe,null),e(ef,EGr),e(ef,ZMe),e(ZMe,CGr),b(f,$De,u),b(f,vr,u),M(Tx,vr,null),e(vr,wGr),e(vr,of),e(of,AGr),e(of,iZ),e(iZ,yGr),e(of,LGr),e(of,dZ),e(dZ,xGr),e(of,$Gr),e(vr,kGr),e(vr,Mx),e(Mx,SGr),e(Mx,eEe),e(eEe,RGr),e(Mx,PGr),e(vr,BGr),e(vr,Jt),M(Ex,Jt,null),e(Jt,IGr),e(Jt,oEe),e(oEe,NGr),e(Jt,qGr),e(Jt,rf),e(rf,jGr),e(rf,rEe),e(rEe,DGr),e(rf,GGr),e(rf,cZ),e(cZ,OGr),e(rf,VGr),e(Jt,XGr),M(Q0,Jt,null),e(vr,zGr),e(vr,Qr),M(Cx,Qr,null),e(Qr,WGr),e(Qr,tEe),e(tEe,QGr),e(Qr,HGr),e(Qr,Mn),e(Mn,UGr),e(Mn,aEe),e(aEe,JGr),e(Mn,YGr),e(Mn,nEe),e(nEe,KGr),e(Mn,ZGr),e(Mn,sEe),e(sEe,eOr),e(Mn,oOr),e(Qr,rOr),e(Qr,Oe),e(Oe,H0),e(H0,lEe),e(lEe,tOr),e(H0,aOr),e(H0,fZ),e(fZ,nOr),e(H0,sOr),e(Oe,lOr),e(Oe,U0),e(U0,iEe),e(iEe,iOr),e(U0,dOr),e(U0,mZ),e(mZ,cOr),e(U0,fOr),e(Oe,mOr),e(Oe,J0),e(J0,dEe),e(dEe,gOr),e(J0,hOr),e(J0,gZ),e(gZ,pOr),e(J0,_Or),e(Oe,uOr),e(Oe,Y0),e(Y0,cEe),e(cEe,bOr),e(Y0,vOr),e(Y0,hZ),e(hZ,FOr),e(Y0,TOr),e(Oe,MOr),e(Oe,K0),e(K0,fEe),e(fEe,EOr),e(K0,COr),e(K0,pZ),e(pZ,wOr),e(K0,AOr),e(Oe,yOr),e(Oe,Z0),e(Z0,mEe),e(mEe,LOr),e(Z0,xOr),e(Z0,_Z),e(_Z,$Or),e(Z0,kOr),e(Oe,SOr),e(Oe,ew),e(ew,gEe),e(gEe,ROr),e(ew,POr),e(ew,uZ),e(uZ,BOr),e(ew,IOr),e(Oe,NOr),e(Oe,ow),e(ow,hEe),e(hEe,qOr),e(ow,jOr),e(ow,bZ),e(bZ,DOr),e(ow,GOr),e(Qr,OOr),M(rw,Qr,null),b(f,kDe,u),b(f,tf,u),e(tf,tw),e(tw,pEe),M(wx,pEe,null),e(tf,VOr),e(tf,_Ee),e(_Ee,XOr),b(f,SDe,u),b(f,Fr,u),M(Ax,Fr,null),e(Fr,zOr),e(Fr,af),e(af,WOr),e(af,vZ),e(vZ,QOr),e(af,HOr),e(af,FZ),e(FZ,UOr),e(af,JOr),e(Fr,YOr),e(Fr,yx),e(yx,KOr),e(yx,uEe),e(uEe,ZOr),e(yx,eVr),e(Fr,oVr),e(Fr,Yt),M(Lx,Yt,null),e(Yt,rVr),e(Yt,bEe),e(bEe,tVr),e(Yt,aVr),e(Yt,nf),e(nf,nVr),e(nf,vEe),e(vEe,sVr),e(nf,lVr),e(nf,TZ),e(TZ,iVr),e(nf,dVr),e(Yt,cVr),M(aw,Yt,null),e(Fr,fVr),e(Fr,Hr),M(xx,Hr,null),e(Hr,mVr),e(Hr,FEe),e(FEe,gVr),e(Hr,hVr),e(Hr,En),e(En,pVr),e(En,TEe),e(TEe,_Vr),e(En,uVr),e(En,MEe),e(MEe,bVr),e(En,vVr),e(En,EEe),e(EEe,FVr),e(En,TVr),e(Hr,MVr),e(Hr,CEe),e(CEe,nw),e(nw,wEe),e(wEe,EVr),e(nw,CVr),e(nw,MZ),e(MZ,wVr),e(nw,AVr),e(Hr,yVr),M(sw,Hr,null),b(f,RDe,u),b(f,sf,u),e(sf,lw),e(lw,AEe),M($x,AEe,null),e(sf,LVr),e(sf,yEe),e(yEe,xVr),b(f,PDe,u),b(f,Tr,u),M(kx,Tr,null),e(Tr,$Vr),e(Tr,lf),e(lf,kVr),e(lf,EZ),e(EZ,SVr),e(lf,RVr),e(lf,CZ),e(CZ,PVr),e(lf,BVr),e(Tr,IVr),e(Tr,Sx),e(Sx,NVr),e(Sx,LEe),e(LEe,qVr),e(Sx,jVr),e(Tr,DVr),e(Tr,Kt),M(Rx,Kt,null),e(Kt,GVr),e(Kt,xEe),e(xEe,OVr),e(Kt,VVr),e(Kt,df),e(df,XVr),e(df,$Ee),e($Ee,zVr),e(df,WVr),e(df,wZ),e(wZ,QVr),e(df,HVr),e(Kt,UVr),M(iw,Kt,null),e(Tr,JVr),e(Tr,Ur),M(Px,Ur,null),e(Ur,YVr),e(Ur,kEe),e(kEe,KVr),e(Ur,ZVr),e(Ur,Cn),e(Cn,eXr),e(Cn,SEe),e(SEe,oXr),e(Cn,rXr),e(Cn,REe),e(REe,tXr),e(Cn,aXr),e(Cn,PEe),e(PEe,nXr),e(Cn,sXr),e(Ur,lXr),e(Ur,Bx),e(Bx,dw),e(dw,BEe),e(BEe,iXr),e(dw,dXr),e(dw,AZ),e(AZ,cXr),e(dw,fXr),e(Bx,mXr),e(Bx,cw),e(cw,IEe),e(IEe,gXr),e(cw,hXr),e(cw,yZ),e(yZ,pXr),e(cw,_Xr),e(Ur,uXr),M(fw,Ur,null),b(f,BDe,u),b(f,cf,u),e(cf,mw),e(mw,NEe),M(Ix,NEe,null),e(cf,bXr),e(cf,qEe),e(qEe,vXr),b(f,IDe,u),b(f,Mr,u),M(Nx,Mr,null),e(Mr,FXr),e(Mr,ff),e(ff,TXr),e(ff,LZ),e(LZ,MXr),e(ff,EXr),e(ff,xZ),e(xZ,CXr),e(ff,wXr),e(Mr,AXr),e(Mr,qx),e(qx,yXr),e(qx,jEe),e(jEe,LXr),e(qx,xXr),e(Mr,$Xr),e(Mr,Zt),M(jx,Zt,null),e(Zt,kXr),e(Zt,DEe),e(DEe,SXr),e(Zt,RXr),e(Zt,mf),e(mf,PXr),e(mf,GEe),e(GEe,BXr),e(mf,IXr),e(mf,$Z),e($Z,NXr),e(mf,qXr),e(Zt,jXr),M(gw,Zt,null),e(Mr,DXr),e(Mr,Jr),M(Dx,Jr,null),e(Jr,GXr),e(Jr,OEe),e(OEe,OXr),e(Jr,VXr),e(Jr,wn),e(wn,XXr),e(wn,VEe),e(VEe,zXr),e(wn,WXr),e(wn,XEe),e(XEe,QXr),e(wn,HXr),e(wn,zEe),e(zEe,UXr),e(wn,JXr),e(Jr,YXr),e(Jr,WEe),e(WEe,hw),e(hw,QEe),e(QEe,KXr),e(hw,ZXr),e(hw,kZ),e(kZ,ezr),e(hw,ozr),e(Jr,rzr),M(pw,Jr,null),NDe=!0},p(f,[u]){const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Tf.$set(Gx);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),wg.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),sh.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),jh.$set(JEe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Dh.$set(Ox);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),sp.$set(YEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),lp.$set(An);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),cp.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),su.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),iu.$set(eCe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Ku.$set(Vx);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),e1.$set(oCe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),j1.$set(Xx);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),G1.$set(rCe);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),Cb.$set(zx);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),Ab.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),Xb.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),Wb.$set(nCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),G2.$set(gf);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),V2.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),F4.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),M4.$set(iCe);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),x4.$set(Wx);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),k4.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),gv.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),pv.$set(fCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),t5.$set(ot);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),n5.$set(Qx);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),i5.$set(mCe);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),c5.$set(Hx);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),w5.$set(gCe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),y5.$set(rt);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),$5.$set(hCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),S5.$set(hf);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),V5.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),z5.$set(_Ce);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),K5.$set(y);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),e3.$set(_w);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),f3.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),g3.$set(bCe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),u3.$set(uw);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),v3.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),A3.$set(FCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),L3.$set(bw);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),R3.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),B3.$set(MCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),j3.$set(vw);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),G3.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),X3.$set(CCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),W3.$set(Fw);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),Z3.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),oF.$set(ACe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),aF.$set(Tw);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),sF.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),ZF.$set(LCe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),oT.$set(Mw);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),wT.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),yT.$set($Ce);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),GT.$set(Ew);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),VT.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),HT.$set(SCe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),JT.$set(Cw);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),u7.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),v7.$set(PCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),$7.$set(ww);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),S7.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),nM.$set(ICe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),lM.$set(Aw);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),wM.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),yM.$set(qCe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),$M.$set(yw);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),SM.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),PM.$set(DCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),IM.$set(Lw);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),tE.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),nE.$set(OCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),AE.$set(xw);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),LE.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),$E.$set(XCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),SE.$set($w);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),PE.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),IE.$set(WCe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),dC.$set(kw);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),fC.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),MC.$set(HCe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),CC.$set(Sw);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),NC.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),jC.$set(JCe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),JC.$set(Rw);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),KC.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),i0.$set(KCe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),c0.$set(Pw);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),T0.$set(ZCe);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),E0.$set(e0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),P0.$set(Bw);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),I0.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),z0.$set(r0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),Q0.$set(Iw);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),rw.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),aw.$set(a0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),sw.$set(Nw);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),iw.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),fw.$set(s0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),gw.$set(qw);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),pw.$set(l0e)},i(f){NDe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(Tf.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(wg.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(sh.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ey.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(sy.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(cp.$$.fragment,f),E(my.$$.fragment,f),E(su.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(iu.$$.fragment,f),E(uy.$$.fragment,f),E(Ku.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(e1.$$.fragment,f),E(My.$$.fragment,f),E(j1.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(G1.$$.fragment,f),E(yy.$$.fragment,f),E(Cb.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Ab.$$.fragment,f),E(Sy.$$.fragment,f),E(Xb.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Wb.$$.fragment,f),E(Ny.$$.fragment,f),E(G2.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(V2.$$.fragment,f),E(Oy.$$.fragment,f),E(F4.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(M4.$$.fragment,f),E(Qy.$$.fragment,f),E(x4.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(k4.$$.fragment,f),E(Ky.$$.fragment,f),E(gv.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(pv.$$.fragment,f),E(tL.$$.fragment,f),E(t5.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(n5.$$.fragment,f),E(iL.$$.fragment,f),E(i5.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(c5.$$.fragment,f),E(gL.$$.fragment,f),E(w5.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(y5.$$.fragment,f),E(bL.$$.fragment,f),E($5.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(S5.$$.fragment,f),E(EL.$$.fragment,f),E(V5.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(z5.$$.fragment,f),E(LL.$$.fragment,f),E(K5.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(e3.$$.fragment,f),E(RL.$$.fragment,f),E(f3.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(g3.$$.fragment,f),E(qL.$$.fragment,f),E(u3.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(v3.$$.fragment,f),E(XL.$$.fragment,f),E(A3.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(L3.$$.fragment,f),E(UL.$$.fragment,f),E(R3.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(B3.$$.fragment,f),E(e8.$$.fragment,f),E(j3.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(G3.$$.fragment,f),E(s8.$$.fragment,f),E(X3.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(W3.$$.fragment,f),E(f8.$$.fragment,f),E(Z3.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(oF.$$.fragment,f),E(_8.$$.fragment,f),E(aF.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(sF.$$.fragment,f),E(T8.$$.fragment,f),E(ZF.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(oT.$$.fragment,f),E(A8.$$.fragment,f),E(wT.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(yT.$$.fragment,f),E(k8.$$.fragment,f),E(GT.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(VT.$$.fragment,f),E(I8.$$.fragment,f),E(HT.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(JT.$$.fragment,f),E(G8.$$.fragment,f),E(u7.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(v7.$$.fragment,f),E(W8.$$.fragment,f),E($7.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(S7.$$.fragment,f),E(Y8.$$.fragment,f),E(nM.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(lM.$$.fragment,f),E(r9.$$.fragment,f),E(wM.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(yM.$$.fragment,f),E(l9.$$.fragment,f),E($M.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(SM.$$.fragment,f),E(g9.$$.fragment,f),E(PM.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(IM.$$.fragment,f),E(b9.$$.fragment,f),E(tE.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(nE.$$.fragment,f),E(E9.$$.fragment,f),E(AE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(y9.$$.fragment,f),E(LE.$$.fragment,f),E(L9.$$.fragment,f),E($E.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(SE.$$.fragment,f),E(R9.$$.fragment,f),E(PE.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(IE.$$.fragment,f),E(q9.$$.fragment,f),E(dC.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(fC.$$.fragment,f),E(V9.$$.fragment,f),E(MC.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(CC.$$.fragment,f),E(H9.$$.fragment,f),E(NC.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(jC.$$.fragment,f),E(Z9.$$.fragment,f),E(JC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(KC.$$.fragment,f),E(ax.$$.fragment,f),E(i0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(c0.$$.fragment,f),E(dx.$$.fragment,f),E(T0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(E0.$$.fragment,f),E(hx.$$.fragment,f),E(P0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(I0.$$.fragment,f),E(vx.$$.fragment,f),E(z0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(Q0.$$.fragment,f),E(Cx.$$.fragment,f),E(rw.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(aw.$$.fragment,f),E(xx.$$.fragment,f),E(sw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(iw.$$.fragment,f),E(Px.$$.fragment,f),E(fw.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(gw.$$.fragment,f),E(Dx.$$.fragment,f),E(pw.$$.fragment,f),NDe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(Tf.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(wg.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(sh.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ey.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(sy.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(cp.$$.fragment,f),C(my.$$.fragment,f),C(su.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(iu.$$.fragment,f),C(uy.$$.fragment,f),C(Ku.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(e1.$$.fragment,f),C(My.$$.fragment,f),C(j1.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(G1.$$.fragment,f),C(yy.$$.fragment,f),C(Cb.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Ab.$$.fragment,f),C(Sy.$$.fragment,f),C(Xb.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Wb.$$.fragment,f),C(Ny.$$.fragment,f),C(G2.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(V2.$$.fragment,f),C(Oy.$$.fragment,f),C(F4.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(M4.$$.fragment,f),C(Qy.$$.fragment,f),C(x4.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(k4.$$.fragment,f),C(Ky.$$.fragment,f),C(gv.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(pv.$$.fragment,f),C(tL.$$.fragment,f),C(t5.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(n5.$$.fragment,f),C(iL.$$.fragment,f),C(i5.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(c5.$$.fragment,f),C(gL.$$.fragment,f),C(w5.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(y5.$$.fragment,f),C(bL.$$.fragment,f),C($5.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(S5.$$.fragment,f),C(EL.$$.fragment,f),C(V5.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(z5.$$.fragment,f),C(LL.$$.fragment,f),C(K5.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(e3.$$.fragment,f),C(RL.$$.fragment,f),C(f3.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(g3.$$.fragment,f),C(qL.$$.fragment,f),C(u3.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(v3.$$.fragment,f),C(XL.$$.fragment,f),C(A3.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(L3.$$.fragment,f),C(UL.$$.fragment,f),C(R3.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(B3.$$.fragment,f),C(e8.$$.fragment,f),C(j3.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(G3.$$.fragment,f),C(s8.$$.fragment,f),C(X3.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(W3.$$.fragment,f),C(f8.$$.fragment,f),C(Z3.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(oF.$$.fragment,f),C(_8.$$.fragment,f),C(aF.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(sF.$$.fragment,f),C(T8.$$.fragment,f),C(ZF.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(oT.$$.fragment,f),C(A8.$$.fragment,f),C(wT.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(yT.$$.fragment,f),C(k8.$$.fragment,f),C(GT.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(VT.$$.fragment,f),C(I8.$$.fragment,f),C(HT.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(JT.$$.fragment,f),C(G8.$$.fragment,f),C(u7.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(v7.$$.fragment,f),C(W8.$$.fragment,f),C($7.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(S7.$$.fragment,f),C(Y8.$$.fragment,f),C(nM.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(lM.$$.fragment,f),C(r9.$$.fragment,f),C(wM.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(yM.$$.fragment,f),C(l9.$$.fragment,f),C($M.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(SM.$$.fragment,f),C(g9.$$.fragment,f),C(PM.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(IM.$$.fragment,f),C(b9.$$.fragment,f),C(tE.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(nE.$$.fragment,f),C(E9.$$.fragment,f),C(AE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(y9.$$.fragment,f),C(LE.$$.fragment,f),C(L9.$$.fragment,f),C($E.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(SE.$$.fragment,f),C(R9.$$.fragment,f),C(PE.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(IE.$$.fragment,f),C(q9.$$.fragment,f),C(dC.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(fC.$$.fragment,f),C(V9.$$.fragment,f),C(MC.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(CC.$$.fragment,f),C(H9.$$.fragment,f),C(NC.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(jC.$$.fragment,f),C(Z9.$$.fragment,f),C(JC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(KC.$$.fragment,f),C(ax.$$.fragment,f),C(i0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(c0.$$.fragment,f),C(dx.$$.fragment,f),C(T0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(E0.$$.fragment,f),C(hx.$$.fragment,f),C(P0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(I0.$$.fragment,f),C(vx.$$.fragment,f),C(z0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(Q0.$$.fragment,f),C(Cx.$$.fragment,f),C(rw.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(aw.$$.fragment,f),C(xx.$$.fragment,f),C(sw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(iw.$$.fragment,f),C(Px.$$.fragment,f),C(fw.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(gw.$$.fragment,f),C(Dx.$$.fragment,f),C(pw.$$.fragment,f),NDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(tt),f&&t(De),f&&t(We),f&&t(bf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(Pqe),f&&t(vi),w(IA),f&&t(Bqe),f&&t(kn),f&&t(Iqe),w(NA,f),f&&t(Nqe),f&&t(nk),f&&t(qqe),w(Tf,f),f&&t(jqe),f&&t(Fi),w(qA),f&&t(Dqe),f&&t(Co),w(jA),w(OA),w(wg),w(VA),f&&t(Gqe),f&&t(Mi),w(XA),f&&t(Oqe),f&&t(wo),w(zA),w(HA),w(sh),w(UA),f&&t(Vqe),f&&t(Ei),w(JA),f&&t(Xqe),f&&t(Ao),w(YA),w(ey),w(jh),w(Dh),w(oy),f&&t(zqe),f&&t(Ci),w(ry),f&&t(Wqe),f&&t(yo),w(ty),w(sy),w(sp),w(lp),w(ly),f&&t(Qqe),f&&t(Ai),w(iy),f&&t(Hqe),f&&t(Lo),w(dy),w(fy),w(cp),w(my),w(su),f&&t(Uqe),f&&t(xi),w(gy),f&&t(Jqe),f&&t(xo),w(hy),w(_y),w(iu),w(uy),w(Ku),f&&t(Yqe),f&&t(Si),w(by),f&&t(Kqe),f&&t($o),w(vy),w(Ty),w(e1),w(My),w(j1),f&&t(Zqe),f&&t(Bi),w(Ey),f&&t(eje),f&&t(ko),w(Cy),w(Ay),w(G1),w(yy),w(Cb),f&&t(oje),f&&t(qi),w(Ly),f&&t(rje),f&&t(So),w(xy),w(ky),w(Ab),w(Sy),w(Xb),f&&t(tje),f&&t(Gi),w(Ry),f&&t(aje),f&&t(Ro),w(Py),w(Iy),w(Wb),w(Ny),w(G2),f&&t(nje),f&&t(Xi),w(qy),f&&t(sje),f&&t(Po),w(jy),w(Gy),w(V2),w(Oy),w(F4),f&&t(lje),f&&t(Qi),w(Vy),f&&t(ije),f&&t(Bo),w(Xy),w(Wy),w(M4),w(Qy),w(x4),f&&t(dje),f&&t(Ji),w(Hy),f&&t(cje),f&&t(Io),w(Uy),w(Yy),w(k4),w(Ky),w(gv),f&&t(fje),f&&t(Zi),w(Zy),f&&t(mje),f&&t(No),w(eL),w(rL),w(pv),w(tL),w(t5),f&&t(gje),f&&t(rd),w(aL),f&&t(hje),f&&t(qo),w(nL),w(lL),w(n5),w(iL),w(i5),f&&t(pje),f&&t(nd),w(dL),f&&t(_je),f&&t(jo),w(cL),w(mL),w(c5),w(gL),w(w5),f&&t(uje),f&&t(id),w(hL),f&&t(bje),f&&t(Do),w(pL),w(uL),w(y5),w(bL),w($5),f&&t(vje),f&&t(fd),w(vL),f&&t(Fje),f&&t(Go),w(FL),w(ML),w(S5),w(EL),w(V5),f&&t(Tje),f&&t(hd),w(CL),f&&t(Mje),f&&t(Oo),w(wL),w(yL),w(z5),w(LL),w(K5),f&&t(Eje),f&&t(ud),w(xL),f&&t(Cje),f&&t(Vo),w($L),w(SL),w(e3),w(RL),w(f3),f&&t(wje),f&&t(Fd),w(PL),f&&t(Aje),f&&t(Xo),w(BL),w(NL),w(g3),w(qL),w(u3),f&&t(yje),f&&t(Ed),w(DL),f&&t(Lje),f&&t(zo),w(GL),w(VL),w(v3),w(XL),w(A3),f&&t(xje),f&&t(Ad),w(zL),f&&t($je),f&&t(Wo),w(WL),w(HL),w(L3),w(UL),w(R3),f&&t(kje),f&&t($d),w(JL),f&&t(Sje),f&&t(Qo),w(YL),w(ZL),w(B3),w(e8),w(j3),f&&t(Rje),f&&t(Rd),w(r8),f&&t(Pje),f&&t(Ho),w(t8),w(n8),w(G3),w(s8),w(X3),f&&t(Bje),f&&t(Id),w(l8),f&&t(Ije),f&&t(Uo),w(i8),w(c8),w(W3),w(f8),w(Z3),f&&t(Nje),f&&t(jd),w(m8),f&&t(qje),f&&t(Jo),w(g8),w(p8),w(oF),w(_8),w(aF),f&&t(jje),f&&t(Od),w(u8),f&&t(Dje),f&&t(Yo),w(b8),w(F8),w(sF),w(T8),w(ZF),f&&t(Gje),f&&t(zd),w(M8),f&&t(Oje),f&&t(Ko),w(E8),w(w8),w(oT),w(A8),w(wT),f&&t(Vje),f&&t(Hd),w(y8),f&&t(Xje),f&&t(Zo),w(L8),w($8),w(yT),w(k8),w(GT),f&&t(zje),f&&t(Yd),w(S8),f&&t(Wje),f&&t(er),w(R8),w(B8),w(VT),w(I8),w(HT),f&&t(Qje),f&&t(ec),w(N8),f&&t(Hje),f&&t(or),w(q8),w(D8),w(JT),w(G8),w(u7),f&&t(Uje),f&&t(tc),w(O8),f&&t(Jje),f&&t(rr),w(V8),w(z8),w(v7),w(W8),w($7),f&&t(Yje),f&&t(sc),w(Q8),f&&t(Kje),f&&t(tr),w(H8),w(J8),w(S7),w(Y8),w(nM),f&&t(Zje),f&&t(dc),w(K8),f&&t(eDe),f&&t(ar),w(Z8),w(o9),w(lM),w(r9),w(wM),f&&t(oDe),f&&t(mc),w(t9),f&&t(rDe),f&&t(nr),w(a9),w(s9),w(yM),w(l9),w($M),f&&t(tDe),f&&t(pc),w(d9),f&&t(aDe),f&&t(sr),w(c9),w(m9),w(SM),w(g9),w(PM),f&&t(nDe),f&&t(bc),w(h9),f&&t(sDe),f&&t(lr),w(p9),w(u9),w(IM),w(b9),w(tE),f&&t(lDe),f&&t(Tc),w(v9),f&&t(iDe),f&&t(ir),w(F9),w(M9),w(nE),w(E9),w(AE),f&&t(dDe),f&&t(Cc),w(C9),f&&t(cDe),f&&t(dr),w(w9),w(y9),w(LE),w(L9),w($E),f&&t(fDe),f&&t(yc),w(x9),f&&t(mDe),f&&t(cr),w($9),w(S9),w(SE),w(R9),w(PE),f&&t(gDe),f&&t($c),w(P9),f&&t(hDe),f&&t(fr),w(B9),w(N9),w(IE),w(q9),w(dC),f&&t(pDe),f&&t(Rc),w(j9),f&&t(_De),f&&t(mr),w(D9),w(O9),w(fC),w(V9),w(MC),f&&t(uDe),f&&t(Ic),w(X9),f&&t(bDe),f&&t(gr),w(z9),w(Q9),w(CC),w(H9),w(NC),f&&t(vDe),f&&t(jc),w(U9),f&&t(FDe),f&&t(hr),w(J9),w(K9),w(jC),w(Z9),w(JC),f&&t(TDe),f&&t(Oc),w(ex),f&&t(MDe),f&&t(pr),w(ox),w(tx),w(KC),w(ax),w(i0),f&&t(EDe),f&&t(zc),w(nx),f&&t(CDe),f&&t(_r),w(sx),w(ix),w(c0),w(dx),w(T0),f&&t(wDe),f&&t(Hc),w(cx),f&&t(ADe),f&&t(ur),w(fx),w(gx),w(E0),w(hx),w(P0),f&&t(yDe),f&&t(Yc),w(px),f&&t(LDe),f&&t(br),w(_x),w(bx),w(I0),w(vx),w(z0),f&&t(xDe),f&&t(ef),w(Fx),f&&t($De),f&&t(vr),w(Tx),w(Ex),w(Q0),w(Cx),w(rw),f&&t(kDe),f&&t(tf),w(wx),f&&t(SDe),f&&t(Fr),w(Ax),w(Lx),w(aw),w(xx),w(sw),f&&t(RDe),f&&t(sf),w($x),f&&t(PDe),f&&t(Tr),w(kx),w(Rx),w(iw),w(Px),w(fw),f&&t(BDe),f&&t(cf),w(Ix),f&&t(IDe),f&&t(Mr),w(Nx),w(jx),w(gw),w(Dx),w(pw)}}}const ePt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function oPt(L){return oSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class iPt extends Ykt{constructor(g){super();Kkt(this,g,oPt,ZRt,Zkt,{})}}export{iPt as default,ePt as metadata};
