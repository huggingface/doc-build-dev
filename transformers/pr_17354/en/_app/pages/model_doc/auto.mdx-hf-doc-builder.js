import{S as QPt,i as HPt,s as UPt,e as a,k as l,w as F,t as o,M as JPt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as YPt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as CQr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function KPt(x){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,WA,bf,Ge,We,_i,Ln,QA,yn,xn,HA,ui,$n,UA,bi,vf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),WA=o(")."),bf=l(),Ge=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),QA=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),HA=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),UA=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var pk=s(p);m=r(pk,"NewModelConfig"),pk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var _k=s(gi);uf=r(_k,"model_type"),_k.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var uk=s(hi);pi=r(uk,'"new-model"'),uk.forEach(t),WA=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var Aa=s(_i);Ln=r(Aa,"NewModel"),Aa.forEach(t),QA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var bk=s(yn);xn=r(bk,"PreTrainedModel"),bk.forEach(t),HA=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),UA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var vk=s(bi);vf=r(vk,"NewModelConfig"),vk.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,tt),e(g,hi),e(hi,pi),e(g,WA),b(Qe,bf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,_i),e(_i,Ln),e(Ge,QA),e(Ge,yn),e(yn,xn),e(Ge,HA),e(Ge,ui),e(ui,$n),e(Ge,UA),e(Ge,bi),e(bi,vf),e(Ge,wa)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Ge)}}}function ZPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function rBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function aBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UIt(x){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,WA,bf,Ge,We,_i,Ln,QA,yn,xn,HA,ui,$n,UA,bi,vf,wa,Qe,Ae,pk,vi,_k,uk,Eo,Aa,bk,Ff,vk,HVe,Nje,Fi,Tf,ere,JA,UVe,ore,JVe,qje,kn,YVe,rre,KVe,ZVe,tre,eXe,oXe,jje,YA,Dje,Fk,rXe,Gje,Mf,Oje,Ti,Ef,are,KA,tXe,nre,aXe,Vje,Co,ZA,nXe,eL,sXe,Tk,lXe,iXe,dXe,oL,cXe,sre,fXe,mXe,gXe,Er,rL,hXe,lre,pXe,_Xe,Mi,uXe,ire,bXe,vXe,dre,FXe,TXe,MXe,A,Cf,cre,EXe,CXe,Mk,wXe,AXe,LXe,wf,fre,yXe,xXe,Ek,$Xe,kXe,SXe,Af,mre,RXe,PXe,Ck,BXe,IXe,NXe,Lf,gre,qXe,jXe,wk,DXe,GXe,OXe,yf,hre,VXe,XXe,Ak,zXe,WXe,QXe,xf,pre,HXe,UXe,Lk,JXe,YXe,KXe,$f,_re,ZXe,eze,yk,oze,rze,tze,kf,ure,aze,nze,xk,sze,lze,ize,Sf,bre,dze,cze,$k,fze,mze,gze,Rf,vre,hze,pze,kk,_ze,uze,bze,Pf,Fre,vze,Fze,Sk,Tze,Mze,Eze,Bf,Tre,Cze,wze,Rk,Aze,Lze,yze,If,Mre,xze,$ze,Pk,kze,Sze,Rze,Nf,Ere,Pze,Bze,Bk,Ize,Nze,qze,qf,Cre,jze,Dze,Ik,Gze,Oze,Vze,jf,wre,Xze,zze,Nk,Wze,Qze,Hze,Df,Are,Uze,Jze,qk,Yze,Kze,Zze,Gf,Lre,eWe,oWe,jk,rWe,tWe,aWe,Of,yre,nWe,sWe,Dk,lWe,iWe,dWe,Vf,xre,cWe,fWe,Gk,mWe,gWe,hWe,Xf,$re,pWe,_We,Ok,uWe,bWe,vWe,zf,kre,FWe,TWe,Vk,MWe,EWe,CWe,Wf,Sre,wWe,AWe,Xk,LWe,yWe,xWe,Qf,Rre,$We,kWe,zk,SWe,RWe,PWe,Hf,Pre,BWe,IWe,Wk,NWe,qWe,jWe,Uf,Bre,DWe,GWe,Qk,OWe,VWe,XWe,Jf,Ire,zWe,WWe,Hk,QWe,HWe,UWe,Yf,Nre,JWe,YWe,Uk,KWe,ZWe,eQe,Kf,qre,oQe,rQe,Jk,tQe,aQe,nQe,Zf,jre,sQe,lQe,Yk,iQe,dQe,cQe,em,Dre,fQe,mQe,Kk,gQe,hQe,pQe,om,Gre,_Qe,uQe,Zk,bQe,vQe,FQe,rm,Ore,TQe,MQe,eS,EQe,CQe,wQe,tm,Vre,AQe,LQe,oS,yQe,xQe,$Qe,am,Xre,kQe,SQe,rS,RQe,PQe,BQe,nm,zre,IQe,NQe,tS,qQe,jQe,DQe,sm,Wre,GQe,OQe,aS,VQe,XQe,zQe,lm,Qre,WQe,QQe,nS,HQe,UQe,JQe,im,Hre,YQe,KQe,sS,ZQe,eHe,oHe,dm,Ure,rHe,tHe,lS,aHe,nHe,sHe,cm,Jre,lHe,iHe,iS,dHe,cHe,fHe,fm,Yre,mHe,gHe,dS,hHe,pHe,_He,mm,Kre,uHe,bHe,cS,vHe,FHe,THe,gm,Zre,MHe,EHe,fS,CHe,wHe,AHe,hm,ete,LHe,yHe,mS,xHe,$He,kHe,pm,ote,SHe,RHe,gS,PHe,BHe,IHe,_m,rte,NHe,qHe,hS,jHe,DHe,GHe,um,tte,OHe,VHe,pS,XHe,zHe,WHe,bm,ate,QHe,HHe,_S,UHe,JHe,YHe,vm,nte,KHe,ZHe,uS,eUe,oUe,rUe,Fm,ste,tUe,aUe,bS,nUe,sUe,lUe,Tm,lte,iUe,dUe,vS,cUe,fUe,mUe,Mm,ite,gUe,hUe,FS,pUe,_Ue,uUe,Em,dte,bUe,vUe,TS,FUe,TUe,MUe,Cm,cte,EUe,CUe,MS,wUe,AUe,LUe,wm,fte,yUe,xUe,ES,$Ue,kUe,SUe,Am,mte,RUe,PUe,CS,BUe,IUe,NUe,Lm,gte,qUe,jUe,wS,DUe,GUe,OUe,ym,hte,VUe,XUe,AS,zUe,WUe,QUe,xm,pte,HUe,UUe,LS,JUe,YUe,KUe,$m,_te,ZUe,eJe,yS,oJe,rJe,tJe,km,ute,aJe,nJe,xS,sJe,lJe,iJe,Sm,bte,dJe,cJe,$S,fJe,mJe,gJe,Rm,vte,hJe,pJe,kS,_Je,uJe,bJe,Pm,Fte,vJe,FJe,SS,TJe,MJe,EJe,Bm,Tte,CJe,wJe,RS,AJe,LJe,yJe,Im,Mte,xJe,$Je,PS,kJe,SJe,RJe,Nm,Ete,PJe,BJe,BS,IJe,NJe,qJe,qm,Cte,jJe,DJe,IS,GJe,OJe,VJe,jm,wte,XJe,zJe,NS,WJe,QJe,HJe,Dm,Ate,UJe,JJe,qS,YJe,KJe,ZJe,Gm,Lte,eYe,oYe,jS,rYe,tYe,aYe,Om,yte,nYe,sYe,DS,lYe,iYe,dYe,Vm,xte,cYe,fYe,GS,mYe,gYe,hYe,Xm,$te,pYe,_Ye,OS,uYe,bYe,vYe,zm,kte,FYe,TYe,VS,MYe,EYe,CYe,Wm,Ste,wYe,AYe,XS,LYe,yYe,xYe,Qm,Rte,$Ye,kYe,zS,SYe,RYe,PYe,Hm,Pte,BYe,IYe,WS,NYe,qYe,jYe,Um,Bte,DYe,GYe,QS,OYe,VYe,XYe,Jm,Ite,zYe,WYe,HS,QYe,HYe,UYe,Ym,Nte,JYe,YYe,US,KYe,ZYe,eKe,Km,qte,oKe,rKe,JS,tKe,aKe,nKe,Zm,jte,sKe,lKe,YS,iKe,dKe,cKe,eg,Dte,fKe,mKe,KS,gKe,hKe,pKe,og,Gte,_Ke,uKe,ZS,bKe,vKe,FKe,rg,Ote,TKe,MKe,eR,EKe,CKe,wKe,tg,Vte,AKe,LKe,oR,yKe,xKe,$Ke,ag,Xte,kKe,SKe,rR,RKe,PKe,BKe,ng,zte,IKe,NKe,tR,qKe,jKe,DKe,sg,Wte,GKe,OKe,aR,VKe,XKe,zKe,lg,Qte,WKe,QKe,nR,HKe,UKe,JKe,ig,Hte,YKe,KKe,sR,ZKe,eZe,oZe,dg,Ute,rZe,tZe,lR,aZe,nZe,sZe,cg,Jte,lZe,iZe,iR,dZe,cZe,fZe,fg,Yte,mZe,gZe,dR,hZe,pZe,_Ze,mg,Kte,uZe,bZe,cR,vZe,FZe,TZe,gg,Zte,MZe,EZe,fR,CZe,wZe,AZe,hg,eae,LZe,yZe,mR,xZe,$Ze,kZe,pg,oae,SZe,RZe,gR,PZe,BZe,IZe,_g,rae,NZe,qZe,hR,jZe,DZe,GZe,ug,tae,OZe,VZe,pR,XZe,zZe,WZe,bg,aae,QZe,HZe,_R,UZe,JZe,YZe,vg,nae,KZe,ZZe,uR,eeo,oeo,reo,Fg,sae,teo,aeo,bR,neo,seo,leo,Tg,lae,ieo,deo,vR,ceo,feo,meo,Mg,iae,geo,heo,FR,peo,_eo,ueo,Eg,dae,beo,veo,TR,Feo,Teo,Meo,Cg,cae,Eeo,Ceo,MR,weo,Aeo,Leo,wg,fae,yeo,xeo,ER,$eo,keo,Seo,Ag,mae,Reo,Peo,CR,Beo,Ieo,Neo,Lg,gae,qeo,jeo,wR,Deo,Geo,Oeo,yg,hae,Veo,Xeo,AR,zeo,Weo,Qeo,xg,Heo,$g,tL,Ueo,pae,Jeo,Xje,Ei,kg,_ae,aL,Yeo,uae,Keo,zje,wo,nL,Zeo,sL,eoo,LR,ooo,roo,too,lL,aoo,bae,noo,soo,loo,Cr,iL,ioo,vae,doo,coo,La,foo,Fae,moo,goo,Tae,hoo,poo,Mae,_oo,uoo,boo,k,Sn,Eae,voo,Foo,yR,Too,Moo,xR,Eoo,Coo,woo,Rn,Cae,Aoo,Loo,$R,yoo,xoo,kR,$oo,koo,Soo,Pn,wae,Roo,Poo,SR,Boo,Ioo,RR,Noo,qoo,joo,Sg,Aae,Doo,Goo,PR,Ooo,Voo,Xoo,Bn,Lae,zoo,Woo,BR,Qoo,Hoo,IR,Uoo,Joo,Yoo,Rg,yae,Koo,Zoo,NR,ero,oro,rro,Pg,xae,tro,aro,qR,nro,sro,lro,Bg,$ae,iro,dro,jR,cro,fro,mro,In,kae,gro,hro,DR,pro,_ro,GR,uro,bro,vro,Nn,Sae,Fro,Tro,OR,Mro,Ero,VR,Cro,wro,Aro,qn,Rae,Lro,yro,XR,xro,$ro,zR,kro,Sro,Rro,Ig,Pae,Pro,Bro,WR,Iro,Nro,qro,Ng,Bae,jro,Dro,QR,Gro,Oro,Vro,qg,Iae,Xro,zro,HR,Wro,Qro,Hro,jn,Nae,Uro,Jro,UR,Yro,Kro,JR,Zro,eto,oto,jg,qae,rto,tto,YR,ato,nto,sto,Dn,jae,lto,ito,KR,dto,cto,ZR,fto,mto,gto,Gn,Dae,hto,pto,eP,_to,uto,oP,bto,vto,Fto,On,Gae,Tto,Mto,rP,Eto,Cto,tP,wto,Ato,Lto,Dg,Oae,yto,xto,aP,$to,kto,Sto,Vn,Vae,Rto,Pto,nP,Bto,Ito,sP,Nto,qto,jto,Xn,Xae,Dto,Gto,lP,Oto,Vto,iP,Xto,zto,Wto,zn,zae,Qto,Hto,dP,Uto,Jto,cP,Yto,Kto,Zto,Wn,Wae,eao,oao,fP,rao,tao,mP,aao,nao,sao,Qn,Qae,lao,iao,gP,dao,cao,hP,fao,mao,gao,Hn,Hae,hao,pao,pP,_ao,uao,_P,bao,vao,Fao,Gg,Uae,Tao,Mao,uP,Eao,Cao,wao,Un,Jae,Aao,Lao,bP,yao,xao,vP,$ao,kao,Sao,Og,Yae,Rao,Pao,FP,Bao,Iao,Nao,Jn,Kae,qao,jao,TP,Dao,Gao,MP,Oao,Vao,Xao,Yn,Zae,zao,Wao,EP,Qao,Hao,CP,Uao,Jao,Yao,Kn,ene,Kao,Zao,wP,eno,ono,AP,rno,tno,ano,Vg,one,nno,sno,LP,lno,ino,dno,Zn,rne,cno,fno,yP,mno,gno,xP,hno,pno,_no,es,tne,uno,bno,$P,vno,Fno,kP,Tno,Mno,Eno,Xg,ane,Cno,wno,SP,Ano,Lno,yno,os,nne,xno,$no,RP,kno,Sno,PP,Rno,Pno,Bno,rs,sne,Ino,Nno,BP,qno,jno,IP,Dno,Gno,Ono,ts,lne,Vno,Xno,NP,zno,Wno,qP,Qno,Hno,Uno,as,ine,Jno,Yno,jP,Kno,Zno,DP,eso,oso,rso,ns,dne,tso,aso,GP,nso,sso,OP,lso,iso,dso,ss,cne,cso,fso,VP,mso,gso,XP,hso,pso,_so,ls,fne,uso,bso,zP,vso,Fso,WP,Tso,Mso,Eso,zg,mne,Cso,wso,QP,Aso,Lso,yso,is,gne,xso,$so,HP,kso,Sso,UP,Rso,Pso,Bso,Wg,hne,Iso,Nso,JP,qso,jso,Dso,Qg,pne,Gso,Oso,YP,Vso,Xso,zso,ds,_ne,Wso,Qso,KP,Hso,Uso,ZP,Jso,Yso,Kso,cs,une,Zso,elo,eB,olo,rlo,oB,tlo,alo,nlo,fs,bne,slo,llo,rB,ilo,dlo,tB,clo,flo,mlo,Hg,vne,glo,hlo,aB,plo,_lo,ulo,ms,Fne,blo,vlo,nB,Flo,Tlo,sB,Mlo,Elo,Clo,gs,Tne,wlo,Alo,lB,Llo,ylo,iB,xlo,$lo,klo,hs,Mne,Slo,Rlo,dB,Plo,Blo,cB,Ilo,Nlo,qlo,ps,Ene,jlo,Dlo,fB,Glo,Olo,mB,Vlo,Xlo,zlo,_s,Cne,Wlo,Qlo,gB,Hlo,Ulo,hB,Jlo,Ylo,Klo,Ug,wne,Zlo,eio,pB,oio,rio,tio,us,Ane,aio,nio,_B,sio,lio,uB,iio,dio,cio,Jg,Lne,fio,mio,bB,gio,hio,pio,Yg,yne,_io,uio,vB,bio,vio,Fio,Kg,xne,Tio,Mio,FB,Eio,Cio,wio,Zg,$ne,Aio,Lio,TB,yio,xio,$io,bs,kne,kio,Sio,MB,Rio,Pio,EB,Bio,Iio,Nio,eh,Sne,qio,jio,CB,Dio,Gio,Oio,vs,Rne,Vio,Xio,wB,zio,Wio,AB,Qio,Hio,Uio,Fs,Pne,Jio,Yio,LB,Kio,Zio,yB,edo,odo,rdo,Ts,Bne,tdo,ado,xB,ndo,sdo,$B,ldo,ido,ddo,Ms,Ine,cdo,fdo,kB,mdo,gdo,SB,hdo,pdo,_do,Es,Nne,udo,bdo,RB,vdo,Fdo,PB,Tdo,Mdo,Edo,Cs,qne,Cdo,wdo,BB,Ado,Ldo,IB,ydo,xdo,$do,oh,jne,kdo,Sdo,NB,Rdo,Pdo,Bdo,rh,Dne,Ido,Ndo,qB,qdo,jdo,Ddo,ws,Gne,Gdo,Odo,jB,Vdo,Xdo,DB,zdo,Wdo,Qdo,As,One,Hdo,Udo,GB,Jdo,Ydo,OB,Kdo,Zdo,eco,Ls,Vne,oco,rco,VB,tco,aco,XB,nco,sco,lco,th,Xne,ico,dco,zB,cco,fco,mco,ah,zne,gco,hco,WB,pco,_co,uco,nh,Wne,bco,vco,QB,Fco,Tco,Mco,ys,Qne,Eco,Cco,HB,wco,Aco,UB,Lco,yco,xco,sh,Hne,$co,kco,JB,Sco,Rco,Pco,lh,Une,Bco,Ico,YB,Nco,qco,jco,ih,Jne,Dco,Gco,KB,Oco,Vco,Xco,xs,Yne,zco,Wco,ZB,Qco,Hco,eI,Uco,Jco,Yco,dh,Kne,Kco,Zco,oI,efo,ofo,rfo,ch,Zne,tfo,afo,rI,nfo,sfo,lfo,$s,ese,ifo,dfo,tI,cfo,ffo,aI,mfo,gfo,hfo,ks,ose,pfo,_fo,nI,ufo,bfo,sI,vfo,Ffo,Tfo,Ss,rse,Mfo,Efo,lI,Cfo,wfo,iI,Afo,Lfo,yfo,Rs,tse,xfo,$fo,dI,kfo,Sfo,cI,Rfo,Pfo,Bfo,fh,Ifo,mh,dL,Nfo,ase,qfo,Wje,Ci,gh,nse,cL,jfo,sse,Dfo,Qje,Ao,fL,Gfo,mL,Ofo,fI,Vfo,Xfo,zfo,gL,Wfo,lse,Qfo,Hfo,Ufo,He,hL,Jfo,ise,Yfo,Kfo,ya,Zfo,dse,emo,omo,cse,rmo,tmo,fse,amo,nmo,smo,Y,hh,mse,lmo,imo,mI,dmo,cmo,fmo,ph,gse,mmo,gmo,gI,hmo,pmo,_mo,_h,hse,umo,bmo,hI,vmo,Fmo,Tmo,uh,pse,Mmo,Emo,pI,Cmo,wmo,Amo,bh,_se,Lmo,ymo,_I,xmo,$mo,kmo,vh,use,Smo,Rmo,uI,Pmo,Bmo,Imo,Fh,bse,Nmo,qmo,bI,jmo,Dmo,Gmo,Th,vse,Omo,Vmo,vI,Xmo,zmo,Wmo,Mh,Fse,Qmo,Hmo,FI,Umo,Jmo,Ymo,Eh,Tse,Kmo,Zmo,TI,ego,ogo,rgo,Ch,Mse,tgo,ago,MI,ngo,sgo,lgo,wh,Ese,igo,dgo,EI,cgo,fgo,mgo,Ah,Cse,ggo,hgo,CI,pgo,_go,ugo,Lh,wse,bgo,vgo,wI,Fgo,Tgo,Mgo,yh,Ase,Ego,Cgo,AI,wgo,Ago,Lgo,xh,Lse,ygo,xgo,LI,$go,kgo,Sgo,$h,yse,Rgo,Pgo,yI,Bgo,Igo,Ngo,kh,xse,qgo,jgo,xI,Dgo,Ggo,Ogo,Sh,$se,Vgo,Xgo,$I,zgo,Wgo,Qgo,Rh,kse,Hgo,Ugo,kI,Jgo,Ygo,Kgo,Ph,Sse,Zgo,eho,SI,oho,rho,tho,Bh,Rse,aho,nho,RI,sho,lho,iho,Ih,Pse,dho,cho,PI,fho,mho,gho,Nh,Bse,hho,pho,BI,_ho,uho,bho,qh,Ise,vho,Fho,II,Tho,Mho,Eho,jh,Nse,Cho,who,NI,Aho,Lho,yho,Dh,qse,xho,$ho,qI,kho,Sho,Rho,Gh,jse,Pho,Bho,jI,Iho,Nho,qho,Oh,Dse,jho,Dho,DI,Gho,Oho,Vho,Vh,Gse,Xho,zho,GI,Who,Qho,Hho,Xh,Ose,Uho,Jho,OI,Yho,Kho,Zho,zh,Vse,epo,opo,VI,rpo,tpo,apo,Wh,npo,Qh,spo,Hh,pL,lpo,Xse,ipo,Hje,wi,Uh,zse,_L,dpo,Wse,cpo,Uje,Lo,uL,fpo,bL,mpo,XI,gpo,hpo,ppo,vL,_po,Qse,upo,bpo,vpo,Ue,FL,Fpo,Hse,Tpo,Mpo,Ai,Epo,Use,Cpo,wpo,Jse,Apo,Lpo,ypo,he,Jh,Yse,xpo,$po,zI,kpo,Spo,Rpo,Yh,Kse,Ppo,Bpo,Zse,Ipo,Npo,qpo,Kh,ele,jpo,Dpo,WI,Gpo,Opo,Vpo,Zh,ole,Xpo,zpo,QI,Wpo,Qpo,Hpo,ep,rle,Upo,Jpo,HI,Ypo,Kpo,Zpo,op,tle,e_o,o_o,UI,r_o,t_o,a_o,rp,ale,n_o,s_o,JI,l_o,i_o,d_o,tp,nle,c_o,f_o,YI,m_o,g_o,h_o,ap,sle,p_o,__o,KI,u_o,b_o,v_o,np,lle,F_o,T_o,ZI,M_o,E_o,C_o,sp,ile,w_o,A_o,eN,L_o,y_o,x_o,lp,dle,$_o,k_o,oN,S_o,R_o,P_o,ip,cle,B_o,I_o,rN,N_o,q_o,j_o,dp,fle,D_o,G_o,tN,O_o,V_o,X_o,cp,mle,z_o,W_o,aN,Q_o,H_o,U_o,fp,gle,J_o,Y_o,nN,K_o,Z_o,euo,mp,hle,ouo,ruo,sN,tuo,auo,nuo,gp,suo,hp,luo,pp,TL,iuo,ple,duo,Jje,Li,_p,_le,ML,cuo,ule,fuo,Yje,yo,EL,muo,yi,guo,lN,huo,puo,iN,_uo,uuo,buo,CL,vuo,ble,Fuo,Tuo,Muo,at,wL,Euo,vle,Cuo,wuo,xi,Auo,Fle,Luo,yuo,dN,xuo,$uo,kuo,up,Suo,Je,AL,Ruo,Tle,Puo,Buo,xa,Iuo,Mle,Nuo,quo,Ele,juo,Duo,Cle,Guo,Ouo,Vuo,y,bp,wle,Xuo,zuo,cN,Wuo,Quo,Huo,vp,Ale,Uuo,Juo,fN,Yuo,Kuo,Zuo,Fp,Lle,e1o,o1o,mN,r1o,t1o,a1o,Tp,yle,n1o,s1o,gN,l1o,i1o,d1o,Mp,xle,c1o,f1o,hN,m1o,g1o,h1o,Ep,$le,p1o,_1o,pN,u1o,b1o,v1o,Cp,kle,F1o,T1o,_N,M1o,E1o,C1o,wp,Sle,w1o,A1o,uN,L1o,y1o,x1o,Ap,Rle,$1o,k1o,bN,S1o,R1o,P1o,Lp,Ple,B1o,I1o,vN,N1o,q1o,j1o,yp,Ble,D1o,G1o,FN,O1o,V1o,X1o,xp,Ile,z1o,W1o,TN,Q1o,H1o,U1o,$p,Nle,J1o,Y1o,MN,K1o,Z1o,ebo,kp,qle,obo,rbo,EN,tbo,abo,nbo,Sp,jle,sbo,lbo,CN,ibo,dbo,cbo,Rp,Dle,fbo,mbo,wN,gbo,hbo,pbo,Pp,Gle,_bo,ubo,AN,bbo,vbo,Fbo,Bp,Ole,Tbo,Mbo,LN,Ebo,Cbo,wbo,Ip,Vle,Abo,Lbo,yN,ybo,xbo,$bo,Np,Xle,kbo,Sbo,xN,Rbo,Pbo,Bbo,qp,zle,Ibo,Nbo,$N,qbo,jbo,Dbo,jp,Wle,Gbo,Obo,kN,Vbo,Xbo,zbo,Dp,Qle,Wbo,Qbo,SN,Hbo,Ubo,Jbo,Gp,Hle,Ybo,Kbo,RN,Zbo,e2o,o2o,Op,Ule,r2o,t2o,PN,a2o,n2o,s2o,Vp,Jle,l2o,i2o,BN,d2o,c2o,f2o,Xp,Yle,m2o,g2o,IN,h2o,p2o,_2o,zp,Kle,u2o,b2o,NN,v2o,F2o,T2o,Wp,Zle,M2o,E2o,qN,C2o,w2o,A2o,Qp,eie,L2o,y2o,jN,x2o,$2o,k2o,Hp,oie,S2o,R2o,DN,P2o,B2o,I2o,Up,rie,N2o,q2o,GN,j2o,D2o,G2o,Jp,tie,O2o,V2o,ON,X2o,z2o,W2o,Ps,aie,Q2o,H2o,VN,U2o,J2o,XN,Y2o,K2o,Z2o,Yp,nie,e4o,o4o,zN,r4o,t4o,a4o,Kp,sie,n4o,s4o,WN,l4o,i4o,d4o,Zp,lie,c4o,f4o,QN,m4o,g4o,h4o,e_,iie,p4o,_4o,HN,u4o,b4o,v4o,o_,die,F4o,T4o,UN,M4o,E4o,C4o,r_,cie,w4o,A4o,JN,L4o,y4o,x4o,t_,fie,$4o,k4o,YN,S4o,R4o,P4o,a_,mie,B4o,I4o,KN,N4o,q4o,j4o,n_,gie,D4o,G4o,ZN,O4o,V4o,X4o,s_,hie,z4o,W4o,eq,Q4o,H4o,U4o,l_,pie,J4o,Y4o,oq,K4o,Z4o,evo,i_,_ie,ovo,rvo,rq,tvo,avo,nvo,d_,uie,svo,lvo,tq,ivo,dvo,cvo,c_,bie,fvo,mvo,aq,gvo,hvo,pvo,f_,vie,_vo,uvo,nq,bvo,vvo,Fvo,m_,Fie,Tvo,Mvo,sq,Evo,Cvo,wvo,g_,Tie,Avo,Lvo,lq,yvo,xvo,$vo,h_,Mie,kvo,Svo,iq,Rvo,Pvo,Bvo,p_,Eie,Ivo,Nvo,dq,qvo,jvo,Dvo,__,Cie,Gvo,Ovo,cq,Vvo,Xvo,zvo,u_,wie,Wvo,Qvo,fq,Hvo,Uvo,Jvo,b_,Aie,Yvo,Kvo,mq,Zvo,e5o,o5o,v_,Lie,r5o,t5o,gq,a5o,n5o,s5o,F_,yie,l5o,i5o,hq,d5o,c5o,f5o,T_,xie,m5o,g5o,pq,h5o,p5o,_5o,M_,$ie,u5o,b5o,_q,v5o,F5o,T5o,E_,kie,M5o,E5o,uq,C5o,w5o,A5o,C_,Sie,L5o,y5o,bq,x5o,$5o,k5o,w_,Rie,S5o,R5o,vq,P5o,B5o,I5o,A_,Pie,N5o,q5o,Fq,j5o,D5o,G5o,L_,Bie,O5o,V5o,Tq,X5o,z5o,W5o,y_,Iie,Q5o,H5o,Mq,U5o,J5o,Y5o,x_,Nie,K5o,Z5o,Eq,e3o,o3o,r3o,$_,qie,t3o,a3o,Cq,n3o,s3o,l3o,k_,jie,i3o,d3o,wq,c3o,f3o,m3o,S_,Die,g3o,h3o,Aq,p3o,_3o,u3o,R_,Gie,b3o,v3o,Lq,F3o,T3o,M3o,P_,Oie,E3o,C3o,yq,w3o,A3o,L3o,B_,Vie,y3o,x3o,xq,$3o,k3o,S3o,I_,Xie,R3o,P3o,$q,B3o,I3o,N3o,N_,zie,q3o,j3o,kq,D3o,G3o,O3o,q_,Wie,V3o,X3o,Sq,z3o,W3o,Q3o,j_,Qie,H3o,U3o,Rq,J3o,Y3o,K3o,D_,Hie,Z3o,eFo,Pq,oFo,rFo,tFo,G_,Uie,aFo,nFo,Bq,sFo,lFo,iFo,O_,Jie,dFo,cFo,Iq,fFo,mFo,gFo,V_,Yie,hFo,pFo,Nq,_Fo,uFo,bFo,X_,Kie,vFo,FFo,qq,TFo,MFo,EFo,z_,Zie,CFo,wFo,jq,AFo,LFo,yFo,W_,ede,xFo,$Fo,Dq,kFo,SFo,RFo,Q_,ode,PFo,BFo,Gq,IFo,NFo,qFo,H_,rde,jFo,DFo,Oq,GFo,OFo,VFo,U_,tde,XFo,zFo,Vq,WFo,QFo,HFo,J_,ade,UFo,JFo,Xq,YFo,KFo,ZFo,Y_,nde,eTo,oTo,zq,rTo,tTo,aTo,K_,sde,nTo,sTo,Wq,lTo,iTo,dTo,Z_,lde,cTo,fTo,Qq,mTo,gTo,hTo,eu,ide,pTo,_To,Hq,uTo,bTo,vTo,ou,dde,FTo,TTo,Uq,MTo,ETo,CTo,ru,cde,wTo,ATo,Jq,LTo,yTo,xTo,tu,fde,$To,kTo,Yq,STo,RTo,PTo,au,mde,BTo,ITo,Kq,NTo,qTo,jTo,nu,gde,DTo,GTo,Zq,OTo,VTo,XTo,su,hde,zTo,WTo,ej,QTo,HTo,UTo,lu,pde,JTo,YTo,oj,KTo,ZTo,e7o,iu,_de,o7o,r7o,rj,t7o,a7o,n7o,du,ude,s7o,l7o,tj,i7o,d7o,c7o,cu,bde,f7o,m7o,aj,g7o,h7o,p7o,fu,vde,_7o,u7o,nj,b7o,v7o,F7o,mu,Fde,T7o,M7o,sj,E7o,C7o,w7o,gu,Tde,A7o,L7o,lj,y7o,x7o,$7o,hu,Mde,k7o,S7o,ij,R7o,P7o,B7o,pu,I7o,Ede,N7o,q7o,Cde,j7o,D7o,_u,Kje,$i,uu,wde,LL,G7o,Ade,O7o,Zje,xo,yL,V7o,ki,X7o,dj,z7o,W7o,cj,Q7o,H7o,U7o,xL,J7o,Lde,Y7o,K7o,Z7o,nt,$L,eMo,yde,oMo,rMo,Si,tMo,xde,aMo,nMo,fj,sMo,lMo,iMo,bu,dMo,Ye,kL,cMo,$de,fMo,mMo,$a,gMo,kde,hMo,pMo,Sde,_Mo,uMo,Rde,bMo,vMo,FMo,G,vu,Pde,TMo,MMo,mj,EMo,CMo,wMo,Fu,Bde,AMo,LMo,gj,yMo,xMo,$Mo,Tu,Ide,kMo,SMo,hj,RMo,PMo,BMo,Mu,Nde,IMo,NMo,pj,qMo,jMo,DMo,Eu,qde,GMo,OMo,_j,VMo,XMo,zMo,Cu,jde,WMo,QMo,uj,HMo,UMo,JMo,wu,Dde,YMo,KMo,bj,ZMo,eEo,oEo,Au,Gde,rEo,tEo,vj,aEo,nEo,sEo,Lu,Ode,lEo,iEo,Fj,dEo,cEo,fEo,yu,Vde,mEo,gEo,Tj,hEo,pEo,_Eo,xu,Xde,uEo,bEo,Mj,vEo,FEo,TEo,$u,zde,MEo,EEo,Ej,CEo,wEo,AEo,ku,Wde,LEo,yEo,Cj,xEo,$Eo,kEo,Su,Qde,SEo,REo,wj,PEo,BEo,IEo,Ru,Hde,NEo,qEo,Aj,jEo,DEo,GEo,Pu,Ude,OEo,VEo,Lj,XEo,zEo,WEo,Bu,Jde,QEo,HEo,yj,UEo,JEo,YEo,Iu,Yde,KEo,ZEo,xj,eCo,oCo,rCo,Nu,Kde,tCo,aCo,$j,nCo,sCo,lCo,qu,Zde,iCo,dCo,kj,cCo,fCo,mCo,ju,ece,gCo,hCo,Sj,pCo,_Co,uCo,Du,oce,bCo,vCo,Rj,FCo,TCo,MCo,Gu,rce,ECo,CCo,Pj,wCo,ACo,LCo,Ou,tce,yCo,xCo,Bj,$Co,kCo,SCo,Vu,ace,RCo,PCo,Ij,BCo,ICo,NCo,Xu,nce,qCo,jCo,Nj,DCo,GCo,OCo,zu,sce,VCo,XCo,qj,zCo,WCo,QCo,Wu,lce,HCo,UCo,jj,JCo,YCo,KCo,Qu,ice,ZCo,e0o,Dj,o0o,r0o,t0o,Hu,dce,a0o,n0o,Gj,s0o,l0o,i0o,Uu,cce,d0o,c0o,Oj,f0o,m0o,g0o,Ju,fce,h0o,p0o,Vj,_0o,u0o,b0o,Yu,mce,v0o,F0o,Xj,T0o,M0o,E0o,Ku,gce,C0o,w0o,zj,A0o,L0o,y0o,Zu,hce,x0o,$0o,Wj,k0o,S0o,R0o,e1,pce,P0o,B0o,Qj,I0o,N0o,q0o,o1,_ce,j0o,D0o,Hj,G0o,O0o,V0o,r1,uce,X0o,z0o,Uj,W0o,Q0o,H0o,t1,bce,U0o,J0o,Jj,Y0o,K0o,Z0o,a1,vce,ewo,owo,Yj,rwo,two,awo,n1,Fce,nwo,swo,Kj,lwo,iwo,dwo,s1,Tce,cwo,fwo,Zj,mwo,gwo,hwo,l1,Mce,pwo,_wo,eD,uwo,bwo,vwo,i1,Fwo,Ece,Two,Mwo,Cce,Ewo,Cwo,d1,eDe,Ri,c1,wce,SL,wwo,Ace,Awo,oDe,$o,RL,Lwo,Pi,ywo,oD,xwo,$wo,rD,kwo,Swo,Rwo,PL,Pwo,Lce,Bwo,Iwo,Nwo,st,BL,qwo,yce,jwo,Dwo,Bi,Gwo,xce,Owo,Vwo,tD,Xwo,zwo,Wwo,f1,Qwo,Ke,IL,Hwo,$ce,Uwo,Jwo,ka,Ywo,kce,Kwo,Zwo,Sce,e6o,o6o,Rce,r6o,t6o,a6o,z,m1,Pce,n6o,s6o,aD,l6o,i6o,d6o,g1,Bce,c6o,f6o,nD,m6o,g6o,h6o,h1,Ice,p6o,_6o,sD,u6o,b6o,v6o,p1,Nce,F6o,T6o,lD,M6o,E6o,C6o,_1,qce,w6o,A6o,iD,L6o,y6o,x6o,u1,jce,$6o,k6o,dD,S6o,R6o,P6o,b1,Dce,B6o,I6o,cD,N6o,q6o,j6o,v1,Gce,D6o,G6o,fD,O6o,V6o,X6o,F1,Oce,z6o,W6o,mD,Q6o,H6o,U6o,T1,Vce,J6o,Y6o,gD,K6o,Z6o,eAo,M1,Xce,oAo,rAo,hD,tAo,aAo,nAo,E1,zce,sAo,lAo,pD,iAo,dAo,cAo,C1,Wce,fAo,mAo,_D,gAo,hAo,pAo,w1,Qce,_Ao,uAo,uD,bAo,vAo,FAo,A1,Hce,TAo,MAo,bD,EAo,CAo,wAo,L1,Uce,AAo,LAo,vD,yAo,xAo,$Ao,y1,Jce,kAo,SAo,FD,RAo,PAo,BAo,x1,Yce,IAo,NAo,TD,qAo,jAo,DAo,$1,Kce,GAo,OAo,MD,VAo,XAo,zAo,k1,Zce,WAo,QAo,ED,HAo,UAo,JAo,S1,efe,YAo,KAo,CD,ZAo,eLo,oLo,R1,ofe,rLo,tLo,wD,aLo,nLo,sLo,P1,rfe,lLo,iLo,AD,dLo,cLo,fLo,B1,tfe,mLo,gLo,LD,hLo,pLo,_Lo,I1,afe,uLo,bLo,yD,vLo,FLo,TLo,N1,nfe,MLo,ELo,xD,CLo,wLo,ALo,q1,sfe,LLo,yLo,$D,xLo,$Lo,kLo,j1,lfe,SLo,RLo,kD,PLo,BLo,ILo,D1,ife,NLo,qLo,SD,jLo,DLo,GLo,G1,dfe,OLo,VLo,RD,XLo,zLo,WLo,O1,cfe,QLo,HLo,PD,ULo,JLo,YLo,V1,ffe,KLo,ZLo,BD,eyo,oyo,ryo,X1,mfe,tyo,ayo,ID,nyo,syo,lyo,z1,gfe,iyo,dyo,ND,cyo,fyo,myo,W1,hfe,gyo,hyo,qD,pyo,_yo,uyo,Q1,pfe,byo,vyo,jD,Fyo,Tyo,Myo,H1,_fe,Eyo,Cyo,DD,wyo,Ayo,Lyo,U1,ufe,yyo,xyo,GD,$yo,kyo,Syo,J1,Ryo,bfe,Pyo,Byo,vfe,Iyo,Nyo,Y1,rDe,Ii,K1,Ffe,NL,qyo,Tfe,jyo,tDe,ko,qL,Dyo,Ni,Gyo,OD,Oyo,Vyo,VD,Xyo,zyo,Wyo,jL,Qyo,Mfe,Hyo,Uyo,Jyo,lt,DL,Yyo,Efe,Kyo,Zyo,qi,e8o,Cfe,o8o,r8o,XD,t8o,a8o,n8o,Z1,s8o,Ze,GL,l8o,wfe,i8o,d8o,Sa,c8o,Afe,f8o,m8o,Lfe,g8o,h8o,yfe,p8o,_8o,u8o,Q,eb,xfe,b8o,v8o,zD,F8o,T8o,M8o,ob,$fe,E8o,C8o,WD,w8o,A8o,L8o,rb,kfe,y8o,x8o,QD,$8o,k8o,S8o,tb,Sfe,R8o,P8o,HD,B8o,I8o,N8o,ab,Rfe,q8o,j8o,UD,D8o,G8o,O8o,nb,Pfe,V8o,X8o,JD,z8o,W8o,Q8o,sb,Bfe,H8o,U8o,YD,J8o,Y8o,K8o,lb,Ife,Z8o,e9o,KD,o9o,r9o,t9o,ib,Nfe,a9o,n9o,ZD,s9o,l9o,i9o,db,qfe,d9o,c9o,eG,f9o,m9o,g9o,cb,jfe,h9o,p9o,oG,_9o,u9o,b9o,fb,Dfe,v9o,F9o,rG,T9o,M9o,E9o,mb,Gfe,C9o,w9o,tG,A9o,L9o,y9o,gb,Ofe,x9o,$9o,aG,k9o,S9o,R9o,hb,Vfe,P9o,B9o,nG,I9o,N9o,q9o,pb,Xfe,j9o,D9o,sG,G9o,O9o,V9o,_b,zfe,X9o,z9o,lG,W9o,Q9o,H9o,ub,Wfe,U9o,J9o,iG,Y9o,K9o,Z9o,bb,Qfe,exo,oxo,dG,rxo,txo,axo,vb,Hfe,nxo,sxo,cG,lxo,ixo,dxo,Fb,Ufe,cxo,fxo,fG,mxo,gxo,hxo,Tb,Jfe,pxo,_xo,mG,uxo,bxo,vxo,Mb,Yfe,Fxo,Txo,gG,Mxo,Exo,Cxo,Eb,Kfe,wxo,Axo,hG,Lxo,yxo,xxo,Cb,Zfe,$xo,kxo,pG,Sxo,Rxo,Pxo,wb,eme,Bxo,Ixo,_G,Nxo,qxo,jxo,Ab,ome,Dxo,Gxo,uG,Oxo,Vxo,Xxo,Lb,rme,zxo,Wxo,bG,Qxo,Hxo,Uxo,yb,tme,Jxo,Yxo,vG,Kxo,Zxo,e$o,xb,ame,o$o,r$o,FG,t$o,a$o,n$o,$b,nme,s$o,l$o,TG,i$o,d$o,c$o,kb,sme,f$o,m$o,lme,g$o,h$o,p$o,Sb,ime,_$o,u$o,MG,b$o,v$o,F$o,Rb,dme,T$o,M$o,EG,E$o,C$o,w$o,Pb,cme,A$o,L$o,CG,y$o,x$o,$$o,Bb,fme,k$o,S$o,wG,R$o,P$o,B$o,Ib,I$o,mme,N$o,q$o,gme,j$o,D$o,Nb,aDe,ji,qb,hme,OL,G$o,pme,O$o,nDe,So,VL,V$o,Di,X$o,AG,z$o,W$o,LG,Q$o,H$o,U$o,XL,J$o,_me,Y$o,K$o,Z$o,it,zL,eko,ume,oko,rko,Gi,tko,bme,ako,nko,yG,sko,lko,iko,jb,dko,eo,WL,cko,vme,fko,mko,Ra,gko,Fme,hko,pko,Tme,_ko,uko,Mme,bko,vko,Fko,_e,Db,Eme,Tko,Mko,xG,Eko,Cko,wko,Gb,Cme,Ako,Lko,$G,yko,xko,$ko,Ob,wme,kko,Sko,kG,Rko,Pko,Bko,Vb,Ame,Iko,Nko,SG,qko,jko,Dko,Xb,Lme,Gko,Oko,RG,Vko,Xko,zko,zb,yme,Wko,Qko,PG,Hko,Uko,Jko,Wb,xme,Yko,Kko,BG,Zko,eSo,oSo,Qb,$me,rSo,tSo,IG,aSo,nSo,sSo,Hb,kme,lSo,iSo,NG,dSo,cSo,fSo,Ub,Sme,mSo,gSo,qG,hSo,pSo,_So,Jb,Rme,uSo,bSo,jG,vSo,FSo,TSo,Yb,Pme,MSo,ESo,DG,CSo,wSo,ASo,Kb,Bme,LSo,ySo,GG,xSo,$So,kSo,Zb,Ime,SSo,RSo,OG,PSo,BSo,ISo,e2,Nme,NSo,qSo,VG,jSo,DSo,GSo,o2,qme,OSo,VSo,XG,XSo,zSo,WSo,r2,QSo,jme,HSo,USo,Dme,JSo,YSo,t2,sDe,Oi,a2,Gme,QL,KSo,Ome,ZSo,lDe,Ro,HL,eRo,Vi,oRo,zG,rRo,tRo,WG,aRo,nRo,sRo,UL,lRo,Vme,iRo,dRo,cRo,dt,JL,fRo,Xme,mRo,gRo,Xi,hRo,zme,pRo,_Ro,QG,uRo,bRo,vRo,n2,FRo,oo,YL,TRo,Wme,MRo,ERo,Pa,CRo,Qme,wRo,ARo,Hme,LRo,yRo,Ume,xRo,$Ro,kRo,N,s2,Jme,SRo,RRo,HG,PRo,BRo,IRo,l2,Yme,NRo,qRo,UG,jRo,DRo,GRo,i2,Kme,ORo,VRo,JG,XRo,zRo,WRo,d2,Zme,QRo,HRo,YG,URo,JRo,YRo,c2,ege,KRo,ZRo,KG,ePo,oPo,rPo,f2,oge,tPo,aPo,ZG,nPo,sPo,lPo,m2,rge,iPo,dPo,eO,cPo,fPo,mPo,g2,tge,gPo,hPo,oO,pPo,_Po,uPo,h2,age,bPo,vPo,rO,FPo,TPo,MPo,p2,nge,EPo,CPo,tO,wPo,APo,LPo,_2,sge,yPo,xPo,aO,$Po,kPo,SPo,u2,lge,RPo,PPo,nO,BPo,IPo,NPo,b2,ige,qPo,jPo,sO,DPo,GPo,OPo,v2,dge,VPo,XPo,lO,zPo,WPo,QPo,F2,cge,HPo,UPo,iO,JPo,YPo,KPo,T2,fge,ZPo,eBo,dO,oBo,rBo,tBo,M2,mge,aBo,nBo,cO,sBo,lBo,iBo,E2,gge,dBo,cBo,fO,fBo,mBo,gBo,C2,hge,hBo,pBo,mO,_Bo,uBo,bBo,w2,pge,vBo,FBo,gO,TBo,MBo,EBo,A2,_ge,CBo,wBo,hO,ABo,LBo,yBo,L2,uge,xBo,$Bo,pO,kBo,SBo,RBo,y2,bge,PBo,BBo,_O,IBo,NBo,qBo,x2,vge,jBo,DBo,uO,GBo,OBo,VBo,$2,Fge,XBo,zBo,bO,WBo,QBo,HBo,k2,Tge,UBo,JBo,vO,YBo,KBo,ZBo,S2,Mge,eIo,oIo,FO,rIo,tIo,aIo,R2,Ege,nIo,sIo,TO,lIo,iIo,dIo,P2,Cge,cIo,fIo,MO,mIo,gIo,hIo,B2,wge,pIo,_Io,EO,uIo,bIo,vIo,I2,Age,FIo,TIo,CO,MIo,EIo,CIo,N2,Lge,wIo,AIo,wO,LIo,yIo,xIo,q2,yge,$Io,kIo,AO,SIo,RIo,PIo,j2,xge,BIo,IIo,LO,NIo,qIo,jIo,D2,$ge,DIo,GIo,yO,OIo,VIo,XIo,G2,kge,zIo,WIo,xO,QIo,HIo,UIo,O2,Sge,JIo,YIo,$O,KIo,ZIo,eNo,V2,Rge,oNo,rNo,kO,tNo,aNo,nNo,X2,Pge,sNo,lNo,SO,iNo,dNo,cNo,z2,Bge,fNo,mNo,RO,gNo,hNo,pNo,W2,Ige,_No,uNo,PO,bNo,vNo,FNo,Q2,Nge,TNo,MNo,BO,ENo,CNo,wNo,H2,qge,ANo,LNo,IO,yNo,xNo,$No,U2,jge,kNo,SNo,NO,RNo,PNo,BNo,J2,Dge,INo,NNo,qO,qNo,jNo,DNo,Y2,Gge,GNo,ONo,jO,VNo,XNo,zNo,K2,Oge,WNo,QNo,DO,HNo,UNo,JNo,Z2,YNo,Vge,KNo,ZNo,Xge,eqo,oqo,e4,iDe,zi,o4,zge,KL,rqo,Wge,tqo,dDe,Po,ZL,aqo,Wi,nqo,GO,sqo,lqo,OO,iqo,dqo,cqo,ey,fqo,Qge,mqo,gqo,hqo,ct,oy,pqo,Hge,_qo,uqo,Qi,bqo,Uge,vqo,Fqo,VO,Tqo,Mqo,Eqo,r4,Cqo,ro,ry,wqo,Jge,Aqo,Lqo,Ba,yqo,Yge,xqo,$qo,Kge,kqo,Sqo,Zge,Rqo,Pqo,Bqo,Z,t4,ehe,Iqo,Nqo,XO,qqo,jqo,Dqo,a4,ohe,Gqo,Oqo,zO,Vqo,Xqo,zqo,n4,rhe,Wqo,Qqo,WO,Hqo,Uqo,Jqo,s4,the,Yqo,Kqo,QO,Zqo,ejo,ojo,l4,ahe,rjo,tjo,HO,ajo,njo,sjo,i4,nhe,ljo,ijo,UO,djo,cjo,fjo,d4,she,mjo,gjo,JO,hjo,pjo,_jo,c4,lhe,ujo,bjo,YO,vjo,Fjo,Tjo,f4,ihe,Mjo,Ejo,KO,Cjo,wjo,Ajo,m4,dhe,Ljo,yjo,ZO,xjo,$jo,kjo,g4,che,Sjo,Rjo,eV,Pjo,Bjo,Ijo,h4,fhe,Njo,qjo,oV,jjo,Djo,Gjo,p4,mhe,Ojo,Vjo,rV,Xjo,zjo,Wjo,_4,ghe,Qjo,Hjo,tV,Ujo,Jjo,Yjo,u4,hhe,Kjo,Zjo,aV,eDo,oDo,rDo,b4,phe,tDo,aDo,nV,nDo,sDo,lDo,v4,_he,iDo,dDo,sV,cDo,fDo,mDo,F4,uhe,gDo,hDo,lV,pDo,_Do,uDo,T4,bhe,bDo,vDo,iV,FDo,TDo,MDo,M4,vhe,EDo,CDo,dV,wDo,ADo,LDo,E4,Fhe,yDo,xDo,cV,$Do,kDo,SDo,C4,The,RDo,PDo,fV,BDo,IDo,NDo,w4,Mhe,qDo,jDo,mV,DDo,GDo,ODo,A4,Ehe,VDo,XDo,gV,zDo,WDo,QDo,L4,Che,HDo,UDo,hV,JDo,YDo,KDo,y4,whe,ZDo,eGo,pV,oGo,rGo,tGo,x4,Ahe,aGo,nGo,_V,sGo,lGo,iGo,$4,Lhe,dGo,cGo,uV,fGo,mGo,gGo,k4,yhe,hGo,pGo,bV,_Go,uGo,bGo,S4,vGo,xhe,FGo,TGo,$he,MGo,EGo,R4,cDe,Hi,P4,khe,ty,CGo,She,wGo,fDe,Bo,ay,AGo,Ui,LGo,vV,yGo,xGo,FV,$Go,kGo,SGo,ny,RGo,Rhe,PGo,BGo,IGo,ft,sy,NGo,Phe,qGo,jGo,Ji,DGo,Bhe,GGo,OGo,TV,VGo,XGo,zGo,B4,WGo,to,ly,QGo,Ihe,HGo,UGo,Ia,JGo,Nhe,YGo,KGo,qhe,ZGo,eOo,jhe,oOo,rOo,tOo,Yr,I4,Dhe,aOo,nOo,MV,sOo,lOo,iOo,N4,Ghe,dOo,cOo,EV,fOo,mOo,gOo,q4,Ohe,hOo,pOo,CV,_Oo,uOo,bOo,j4,Vhe,vOo,FOo,wV,TOo,MOo,EOo,D4,Xhe,COo,wOo,AV,AOo,LOo,yOo,G4,xOo,zhe,$Oo,kOo,Whe,SOo,ROo,O4,mDe,Yi,V4,Qhe,iy,POo,Hhe,BOo,gDe,Io,dy,IOo,Ki,NOo,LV,qOo,jOo,yV,DOo,GOo,OOo,cy,VOo,Uhe,XOo,zOo,WOo,mt,fy,QOo,Jhe,HOo,UOo,Zi,JOo,Yhe,YOo,KOo,xV,ZOo,eVo,oVo,X4,rVo,ao,my,tVo,Khe,aVo,nVo,Na,sVo,Zhe,lVo,iVo,epe,dVo,cVo,ope,fVo,mVo,gVo,U,z4,rpe,hVo,pVo,$V,_Vo,uVo,bVo,W4,tpe,vVo,FVo,kV,TVo,MVo,EVo,Q4,ape,CVo,wVo,SV,AVo,LVo,yVo,H4,npe,xVo,$Vo,RV,kVo,SVo,RVo,U4,spe,PVo,BVo,PV,IVo,NVo,qVo,J4,lpe,jVo,DVo,BV,GVo,OVo,VVo,Y4,ipe,XVo,zVo,IV,WVo,QVo,HVo,K4,dpe,UVo,JVo,NV,YVo,KVo,ZVo,Z4,cpe,eXo,oXo,qV,rXo,tXo,aXo,ev,fpe,nXo,sXo,jV,lXo,iXo,dXo,ov,mpe,cXo,fXo,DV,mXo,gXo,hXo,rv,gpe,pXo,_Xo,GV,uXo,bXo,vXo,tv,hpe,FXo,TXo,OV,MXo,EXo,CXo,av,ppe,wXo,AXo,VV,LXo,yXo,xXo,nv,_pe,$Xo,kXo,XV,SXo,RXo,PXo,sv,upe,BXo,IXo,zV,NXo,qXo,jXo,lv,bpe,DXo,GXo,WV,OXo,VXo,XXo,iv,vpe,zXo,WXo,QV,QXo,HXo,UXo,dv,Fpe,JXo,YXo,HV,KXo,ZXo,ezo,cv,Tpe,ozo,rzo,UV,tzo,azo,nzo,fv,Mpe,szo,lzo,JV,izo,dzo,czo,mv,Epe,fzo,mzo,YV,gzo,hzo,pzo,gv,Cpe,_zo,uzo,KV,bzo,vzo,Fzo,hv,wpe,Tzo,Mzo,ZV,Ezo,Czo,wzo,pv,Ape,Azo,Lzo,eX,yzo,xzo,$zo,_v,Lpe,kzo,Szo,oX,Rzo,Pzo,Bzo,uv,ype,Izo,Nzo,rX,qzo,jzo,Dzo,bv,xpe,Gzo,Ozo,tX,Vzo,Xzo,zzo,vv,$pe,Wzo,Qzo,aX,Hzo,Uzo,Jzo,Fv,kpe,Yzo,Kzo,nX,Zzo,eWo,oWo,Tv,Spe,rWo,tWo,sX,aWo,nWo,sWo,Mv,Rpe,lWo,iWo,lX,dWo,cWo,fWo,Ev,Ppe,mWo,gWo,iX,hWo,pWo,_Wo,Cv,Bpe,uWo,bWo,dX,vWo,FWo,TWo,wv,MWo,Ipe,EWo,CWo,Npe,wWo,AWo,Av,hDe,ed,Lv,qpe,gy,LWo,jpe,yWo,pDe,No,hy,xWo,od,$Wo,cX,kWo,SWo,fX,RWo,PWo,BWo,py,IWo,Dpe,NWo,qWo,jWo,gt,_y,DWo,Gpe,GWo,OWo,rd,VWo,Ope,XWo,zWo,mX,WWo,QWo,HWo,yv,UWo,no,uy,JWo,Vpe,YWo,KWo,qa,ZWo,Xpe,eQo,oQo,zpe,rQo,tQo,Wpe,aQo,nQo,sQo,V,xv,Qpe,lQo,iQo,gX,dQo,cQo,fQo,$v,Hpe,mQo,gQo,hX,hQo,pQo,_Qo,kv,Upe,uQo,bQo,pX,vQo,FQo,TQo,Sv,Jpe,MQo,EQo,_X,CQo,wQo,AQo,Rv,Ype,LQo,yQo,uX,xQo,$Qo,kQo,Pv,Kpe,SQo,RQo,bX,PQo,BQo,IQo,Bv,Zpe,NQo,qQo,vX,jQo,DQo,GQo,Iv,e_e,OQo,VQo,FX,XQo,zQo,WQo,Nv,o_e,QQo,HQo,TX,UQo,JQo,YQo,qv,r_e,KQo,ZQo,MX,eHo,oHo,rHo,jv,t_e,tHo,aHo,EX,nHo,sHo,lHo,Dv,a_e,iHo,dHo,CX,cHo,fHo,mHo,Gv,n_e,gHo,hHo,wX,pHo,_Ho,uHo,Ov,s_e,bHo,vHo,AX,FHo,THo,MHo,Vv,l_e,EHo,CHo,LX,wHo,AHo,LHo,Xv,i_e,yHo,xHo,yX,$Ho,kHo,SHo,zv,d_e,RHo,PHo,xX,BHo,IHo,NHo,Wv,c_e,qHo,jHo,$X,DHo,GHo,OHo,Qv,f_e,VHo,XHo,kX,zHo,WHo,QHo,Hv,m_e,HHo,UHo,SX,JHo,YHo,KHo,Uv,g_e,ZHo,eUo,RX,oUo,rUo,tUo,Jv,h_e,aUo,nUo,PX,sUo,lUo,iUo,Yv,p_e,dUo,cUo,BX,fUo,mUo,gUo,Kv,__e,hUo,pUo,IX,_Uo,uUo,bUo,Zv,u_e,vUo,FUo,NX,TUo,MUo,EUo,e5,b_e,CUo,wUo,qX,AUo,LUo,yUo,o5,v_e,xUo,$Uo,jX,kUo,SUo,RUo,r5,F_e,PUo,BUo,DX,IUo,NUo,qUo,t5,T_e,jUo,DUo,GX,GUo,OUo,VUo,a5,M_e,XUo,zUo,OX,WUo,QUo,HUo,n5,E_e,UUo,JUo,VX,YUo,KUo,ZUo,s5,C_e,eJo,oJo,XX,rJo,tJo,aJo,l5,w_e,nJo,sJo,zX,lJo,iJo,dJo,i5,A_e,cJo,fJo,WX,mJo,gJo,hJo,d5,L_e,pJo,_Jo,QX,uJo,bJo,vJo,c5,y_e,FJo,TJo,HX,MJo,EJo,CJo,f5,x_e,wJo,AJo,UX,LJo,yJo,xJo,m5,$_e,$Jo,kJo,JX,SJo,RJo,PJo,g5,k_e,BJo,IJo,YX,NJo,qJo,jJo,h5,S_e,DJo,GJo,KX,OJo,VJo,XJo,p5,zJo,R_e,WJo,QJo,P_e,HJo,UJo,_5,_De,td,u5,B_e,by,JJo,I_e,YJo,uDe,qo,vy,KJo,ad,ZJo,ZX,eYo,oYo,ez,rYo,tYo,aYo,Fy,nYo,N_e,sYo,lYo,iYo,ht,Ty,dYo,q_e,cYo,fYo,nd,mYo,j_e,gYo,hYo,oz,pYo,_Yo,uYo,b5,bYo,so,My,vYo,D_e,FYo,TYo,ja,MYo,G_e,EYo,CYo,O_e,wYo,AYo,V_e,LYo,yYo,xYo,X_e,v5,z_e,$Yo,kYo,rz,SYo,RYo,PYo,F5,BYo,W_e,IYo,NYo,Q_e,qYo,jYo,T5,bDe,sd,M5,H_e,Ey,DYo,U_e,GYo,vDe,jo,Cy,OYo,ld,VYo,tz,XYo,zYo,az,WYo,QYo,HYo,wy,UYo,J_e,JYo,YYo,KYo,pt,Ay,ZYo,Y_e,eKo,oKo,id,rKo,K_e,tKo,aKo,nz,nKo,sKo,lKo,E5,iKo,lo,Ly,dKo,Z_e,cKo,fKo,Da,mKo,eue,gKo,hKo,oue,pKo,_Ko,rue,uKo,bKo,vKo,ue,C5,tue,FKo,TKo,sz,MKo,EKo,CKo,w5,aue,wKo,AKo,lz,LKo,yKo,xKo,A5,nue,$Ko,kKo,iz,SKo,RKo,PKo,L5,sue,BKo,IKo,dz,NKo,qKo,jKo,Bs,lue,DKo,GKo,cz,OKo,VKo,fz,XKo,zKo,WKo,y5,iue,QKo,HKo,mz,UKo,JKo,YKo,Is,due,KKo,ZKo,gz,eZo,oZo,hz,rZo,tZo,aZo,x5,cue,nZo,sZo,pz,lZo,iZo,dZo,_t,fue,cZo,fZo,_z,mZo,gZo,uz,hZo,pZo,bz,_Zo,uZo,bZo,$5,mue,vZo,FZo,vz,TZo,MZo,EZo,k5,gue,CZo,wZo,Fz,AZo,LZo,yZo,S5,hue,xZo,$Zo,Tz,kZo,SZo,RZo,R5,pue,PZo,BZo,Mz,IZo,NZo,qZo,P5,_ue,jZo,DZo,Ez,GZo,OZo,VZo,B5,uue,XZo,zZo,Cz,WZo,QZo,HZo,I5,bue,UZo,JZo,wz,YZo,KZo,ZZo,N5,eer,vue,oer,rer,Fue,ter,aer,q5,FDe,dd,j5,Tue,yy,ner,Mue,ser,TDe,Do,xy,ler,cd,ier,Az,der,cer,Lz,fer,mer,ger,$y,her,Eue,per,_er,uer,ut,ky,ber,Cue,ver,Fer,fd,Ter,wue,Mer,Eer,yz,Cer,wer,Aer,D5,Ler,io,Sy,yer,Aue,xer,$er,Ga,ker,Lue,Ser,Rer,yue,Per,Ber,xue,Ier,Ner,qer,$ue,G5,kue,jer,Der,xz,Ger,Oer,Ver,O5,Xer,Sue,zer,Wer,Rue,Qer,Her,V5,MDe,md,X5,Pue,Ry,Uer,Bue,Jer,EDe,Go,Py,Yer,gd,Ker,$z,Zer,eor,kz,oor,ror,tor,By,aor,Iue,nor,sor,lor,bt,Iy,ior,Nue,dor,cor,hd,mor,que,gor,hor,Sz,por,_or,uor,z5,bor,co,Ny,vor,jue,For,Tor,Oa,Mor,Due,Eor,Cor,Gue,wor,Aor,Oue,Lor,yor,xor,Re,W5,Vue,$or,kor,Rz,Sor,Ror,Por,Q5,Xue,Bor,Ior,Pz,Nor,qor,jor,H5,zue,Dor,Gor,Bz,Oor,Vor,Xor,U5,Wue,zor,Wor,Iz,Qor,Hor,Uor,J5,Que,Jor,Yor,Nz,Kor,Zor,err,Y5,Hue,orr,rrr,qz,trr,arr,nrr,K5,Uue,srr,lrr,jz,irr,drr,crr,Z5,Jue,frr,mrr,Dz,grr,hrr,prr,e3,Yue,_rr,urr,Gz,brr,vrr,Frr,o3,Trr,Kue,Mrr,Err,Zue,Crr,wrr,r3,CDe,pd,t3,e1e,qy,Arr,o1e,Lrr,wDe,Oo,jy,yrr,_d,xrr,Oz,$rr,krr,Vz,Srr,Rrr,Prr,Dy,Brr,r1e,Irr,Nrr,qrr,vt,Gy,jrr,t1e,Drr,Grr,ud,Orr,a1e,Vrr,Xrr,Xz,zrr,Wrr,Qrr,a3,Hrr,fo,Oy,Urr,n1e,Jrr,Yrr,Va,Krr,s1e,Zrr,etr,l1e,otr,rtr,i1e,ttr,atr,ntr,Kr,n3,d1e,str,ltr,zz,itr,dtr,ctr,s3,c1e,ftr,mtr,Wz,gtr,htr,ptr,l3,f1e,_tr,utr,Qz,btr,vtr,Ftr,i3,m1e,Ttr,Mtr,Hz,Etr,Ctr,wtr,d3,g1e,Atr,Ltr,Uz,ytr,xtr,$tr,c3,ktr,h1e,Str,Rtr,p1e,Ptr,Btr,f3,ADe,bd,m3,_1e,Vy,Itr,u1e,Ntr,LDe,Vo,Xy,qtr,vd,jtr,Jz,Dtr,Gtr,Yz,Otr,Vtr,Xtr,zy,ztr,b1e,Wtr,Qtr,Htr,Ft,Wy,Utr,v1e,Jtr,Ytr,Fd,Ktr,F1e,Ztr,ear,Kz,oar,rar,tar,g3,aar,mo,Qy,nar,T1e,sar,lar,Xa,iar,M1e,dar,car,E1e,far,mar,C1e,gar,har,par,Le,h3,w1e,_ar,uar,Zz,bar,Far,Tar,p3,A1e,Mar,Ear,eW,Car,war,Aar,_3,L1e,Lar,yar,oW,xar,$ar,kar,u3,y1e,Sar,Rar,rW,Par,Bar,Iar,b3,x1e,Nar,qar,tW,jar,Dar,Gar,v3,$1e,Oar,Var,aW,Xar,zar,War,F3,k1e,Qar,Har,nW,Uar,Jar,Yar,T3,S1e,Kar,Zar,sW,enr,onr,rnr,M3,R1e,tnr,anr,lW,nnr,snr,lnr,E3,P1e,inr,dnr,iW,cnr,fnr,mnr,C3,gnr,B1e,hnr,pnr,I1e,_nr,unr,w3,yDe,Td,A3,N1e,Hy,bnr,q1e,vnr,xDe,Xo,Uy,Fnr,Md,Tnr,dW,Mnr,Enr,cW,Cnr,wnr,Anr,Jy,Lnr,j1e,ynr,xnr,$nr,Tt,Yy,knr,D1e,Snr,Rnr,Ed,Pnr,G1e,Bnr,Inr,fW,Nnr,qnr,jnr,L3,Dnr,go,Ky,Gnr,O1e,Onr,Vnr,za,Xnr,V1e,znr,Wnr,X1e,Qnr,Hnr,z1e,Unr,Jnr,Ynr,Zy,y3,W1e,Knr,Znr,mW,esr,osr,rsr,x3,Q1e,tsr,asr,gW,nsr,ssr,lsr,$3,isr,H1e,dsr,csr,U1e,fsr,msr,k3,$De,Cd,S3,J1e,e8,gsr,Y1e,hsr,kDe,zo,o8,psr,wd,_sr,hW,usr,bsr,pW,vsr,Fsr,Tsr,r8,Msr,K1e,Esr,Csr,wsr,Mt,t8,Asr,Z1e,Lsr,ysr,Ad,xsr,ebe,$sr,ksr,_W,Ssr,Rsr,Psr,R3,Bsr,ho,a8,Isr,obe,Nsr,qsr,Wa,jsr,rbe,Dsr,Gsr,tbe,Osr,Vsr,abe,Xsr,zsr,Wsr,Zr,P3,nbe,Qsr,Hsr,uW,Usr,Jsr,Ysr,B3,sbe,Ksr,Zsr,bW,elr,olr,rlr,I3,lbe,tlr,alr,vW,nlr,slr,llr,N3,ibe,ilr,dlr,FW,clr,flr,mlr,q3,dbe,glr,hlr,TW,plr,_lr,ulr,j3,blr,cbe,vlr,Flr,fbe,Tlr,Mlr,D3,SDe,Ld,G3,mbe,n8,Elr,gbe,Clr,RDe,Wo,s8,wlr,yd,Alr,MW,Llr,ylr,EW,xlr,$lr,klr,l8,Slr,hbe,Rlr,Plr,Blr,Et,i8,Ilr,pbe,Nlr,qlr,xd,jlr,_be,Dlr,Glr,CW,Olr,Vlr,Xlr,O3,zlr,po,d8,Wlr,ube,Qlr,Hlr,Qa,Ulr,bbe,Jlr,Ylr,vbe,Klr,Zlr,Fbe,eir,oir,rir,$d,V3,Tbe,tir,air,wW,nir,sir,lir,X3,Mbe,iir,dir,AW,cir,fir,mir,z3,Ebe,gir,hir,LW,pir,_ir,uir,W3,bir,Cbe,vir,Fir,wbe,Tir,Mir,Q3,PDe,kd,H3,Abe,c8,Eir,Lbe,Cir,BDe,Qo,f8,wir,Sd,Air,yW,Lir,yir,xW,xir,$ir,kir,m8,Sir,ybe,Rir,Pir,Bir,Ct,g8,Iir,xbe,Nir,qir,Rd,jir,$be,Dir,Gir,$W,Oir,Vir,Xir,U3,zir,_o,h8,Wir,kbe,Qir,Hir,Ha,Uir,Sbe,Jir,Yir,Rbe,Kir,Zir,Pbe,edr,odr,rdr,p8,J3,Bbe,tdr,adr,kW,ndr,sdr,ldr,Y3,Ibe,idr,ddr,SW,cdr,fdr,mdr,K3,gdr,Nbe,hdr,pdr,qbe,_dr,udr,Z3,IDe,Pd,eF,jbe,_8,bdr,Dbe,vdr,NDe,Ho,u8,Fdr,Bd,Tdr,RW,Mdr,Edr,PW,Cdr,wdr,Adr,b8,Ldr,Gbe,ydr,xdr,$dr,wt,v8,kdr,Obe,Sdr,Rdr,Id,Pdr,Vbe,Bdr,Idr,BW,Ndr,qdr,jdr,oF,Ddr,uo,F8,Gdr,Xbe,Odr,Vdr,Ua,Xdr,zbe,zdr,Wdr,Wbe,Qdr,Hdr,Qbe,Udr,Jdr,Ydr,Hbe,rF,Ube,Kdr,Zdr,IW,ecr,ocr,rcr,tF,tcr,Jbe,acr,ncr,Ybe,scr,lcr,aF,qDe,Nd,nF,Kbe,T8,icr,Zbe,dcr,jDe,Uo,M8,ccr,qd,fcr,NW,mcr,gcr,qW,hcr,pcr,_cr,E8,ucr,e2e,bcr,vcr,Fcr,At,C8,Tcr,o2e,Mcr,Ecr,jd,Ccr,r2e,wcr,Acr,jW,Lcr,ycr,xcr,sF,$cr,bo,w8,kcr,t2e,Scr,Rcr,Ja,Pcr,a2e,Bcr,Icr,n2e,Ncr,qcr,s2e,jcr,Dcr,Gcr,et,lF,l2e,Ocr,Vcr,DW,Xcr,zcr,Wcr,iF,i2e,Qcr,Hcr,GW,Ucr,Jcr,Ycr,dF,d2e,Kcr,Zcr,OW,efr,ofr,rfr,cF,c2e,tfr,afr,VW,nfr,sfr,lfr,fF,f2e,ifr,dfr,XW,cfr,ffr,mfr,mF,gfr,m2e,hfr,pfr,g2e,_fr,ufr,gF,DDe,Dd,hF,h2e,A8,bfr,p2e,vfr,GDe,Jo,L8,Ffr,Gd,Tfr,zW,Mfr,Efr,WW,Cfr,wfr,Afr,y8,Lfr,_2e,yfr,xfr,$fr,Lt,x8,kfr,u2e,Sfr,Rfr,Od,Pfr,b2e,Bfr,Ifr,QW,Nfr,qfr,jfr,pF,Dfr,vo,$8,Gfr,v2e,Ofr,Vfr,Ya,Xfr,F2e,zfr,Wfr,T2e,Qfr,Hfr,M2e,Ufr,Jfr,Yfr,E2e,_F,C2e,Kfr,Zfr,HW,emr,omr,rmr,uF,tmr,w2e,amr,nmr,A2e,smr,lmr,bF,ODe,Vd,vF,L2e,k8,imr,y2e,dmr,VDe,Yo,S8,cmr,Xd,fmr,UW,mmr,gmr,JW,hmr,pmr,_mr,R8,umr,x2e,bmr,vmr,Fmr,yt,P8,Tmr,$2e,Mmr,Emr,zd,Cmr,k2e,wmr,Amr,YW,Lmr,ymr,xmr,FF,$mr,wr,B8,kmr,S2e,Smr,Rmr,Ka,Pmr,R2e,Bmr,Imr,P2e,Nmr,qmr,B2e,jmr,Dmr,Gmr,q,TF,I2e,Omr,Vmr,KW,Xmr,zmr,Wmr,MF,N2e,Qmr,Hmr,ZW,Umr,Jmr,Ymr,EF,q2e,Kmr,Zmr,eQ,egr,ogr,rgr,CF,j2e,tgr,agr,oQ,ngr,sgr,lgr,wF,D2e,igr,dgr,rQ,cgr,fgr,mgr,AF,G2e,ggr,hgr,tQ,pgr,_gr,ugr,LF,O2e,bgr,vgr,aQ,Fgr,Tgr,Mgr,yF,V2e,Egr,Cgr,nQ,wgr,Agr,Lgr,xF,X2e,ygr,xgr,sQ,$gr,kgr,Sgr,$F,z2e,Rgr,Pgr,lQ,Bgr,Igr,Ngr,kF,W2e,qgr,jgr,iQ,Dgr,Ggr,Ogr,SF,Q2e,Vgr,Xgr,dQ,zgr,Wgr,Qgr,RF,H2e,Hgr,Ugr,cQ,Jgr,Ygr,Kgr,PF,U2e,Zgr,ehr,fQ,ohr,rhr,thr,BF,J2e,ahr,nhr,mQ,shr,lhr,ihr,IF,Y2e,dhr,chr,gQ,fhr,mhr,ghr,NF,K2e,hhr,phr,hQ,_hr,uhr,bhr,Ns,Z2e,vhr,Fhr,pQ,Thr,Mhr,_Q,Ehr,Chr,whr,qF,e4e,Ahr,Lhr,uQ,yhr,xhr,$hr,jF,o4e,khr,Shr,bQ,Rhr,Phr,Bhr,DF,r4e,Ihr,Nhr,vQ,qhr,jhr,Dhr,GF,t4e,Ghr,Ohr,FQ,Vhr,Xhr,zhr,OF,a4e,Whr,Qhr,TQ,Hhr,Uhr,Jhr,VF,n4e,Yhr,Khr,MQ,Zhr,epr,opr,XF,s4e,rpr,tpr,EQ,apr,npr,spr,zF,l4e,lpr,ipr,CQ,dpr,cpr,fpr,WF,i4e,mpr,gpr,wQ,hpr,ppr,_pr,QF,d4e,upr,bpr,AQ,vpr,Fpr,Tpr,HF,c4e,Mpr,Epr,LQ,Cpr,wpr,Apr,UF,f4e,Lpr,ypr,yQ,xpr,$pr,kpr,JF,m4e,Spr,Rpr,xQ,Ppr,Bpr,Ipr,YF,g4e,Npr,qpr,$Q,jpr,Dpr,Gpr,KF,h4e,Opr,Vpr,kQ,Xpr,zpr,Wpr,ZF,p4e,Qpr,Hpr,SQ,Upr,Jpr,Ypr,eT,_4e,Kpr,Zpr,RQ,e_r,o_r,r_r,oT,u4e,t_r,a_r,PQ,n_r,s_r,l_r,rT,b4e,i_r,d_r,BQ,c_r,f_r,m_r,tT,v4e,g_r,h_r,IQ,p_r,__r,u_r,aT,F4e,b_r,v_r,NQ,F_r,T_r,M_r,nT,T4e,E_r,C_r,qQ,w_r,A_r,L_r,sT,M4e,y_r,x_r,jQ,$_r,k_r,S_r,lT,E4e,R_r,P_r,DQ,B_r,I_r,N_r,iT,C4e,q_r,j_r,GQ,D_r,G_r,O_r,dT,w4e,V_r,X_r,OQ,z_r,W_r,Q_r,cT,A4e,H_r,U_r,VQ,J_r,Y_r,K_r,fT,L4e,Z_r,eur,XQ,our,rur,tur,mT,y4e,aur,nur,zQ,sur,lur,iur,gT,XDe,Wd,hT,x4e,I8,dur,$4e,cur,zDe,Ko,N8,fur,Qd,mur,WQ,gur,hur,QQ,pur,_ur,uur,q8,bur,k4e,vur,Fur,Tur,xt,j8,Mur,S4e,Eur,Cur,Hd,wur,R4e,Aur,Lur,HQ,yur,xur,$ur,pT,kur,Ar,D8,Sur,P4e,Rur,Pur,Za,Bur,B4e,Iur,Nur,I4e,qur,jur,N4e,Dur,Gur,Our,se,_T,q4e,Vur,Xur,UQ,zur,Wur,Qur,uT,j4e,Hur,Uur,JQ,Jur,Yur,Kur,bT,D4e,Zur,e1r,YQ,o1r,r1r,t1r,vT,G4e,a1r,n1r,KQ,s1r,l1r,i1r,FT,O4e,d1r,c1r,ZQ,f1r,m1r,g1r,TT,V4e,h1r,p1r,eH,_1r,u1r,b1r,MT,X4e,v1r,F1r,oH,T1r,M1r,E1r,ET,z4e,C1r,w1r,rH,A1r,L1r,y1r,CT,W4e,x1r,$1r,tH,k1r,S1r,R1r,wT,Q4e,P1r,B1r,aH,I1r,N1r,q1r,AT,H4e,j1r,D1r,nH,G1r,O1r,V1r,LT,U4e,X1r,z1r,sH,W1r,Q1r,H1r,yT,J4e,U1r,J1r,lH,Y1r,K1r,Z1r,xT,Y4e,ebr,obr,iH,rbr,tbr,abr,$T,K4e,nbr,sbr,dH,lbr,ibr,dbr,kT,Z4e,cbr,fbr,cH,mbr,gbr,hbr,ST,eve,pbr,_br,fH,ubr,bbr,vbr,RT,ove,Fbr,Tbr,mH,Mbr,Ebr,Cbr,PT,rve,wbr,Abr,gH,Lbr,ybr,xbr,BT,tve,$br,kbr,hH,Sbr,Rbr,Pbr,IT,ave,Bbr,Ibr,pH,Nbr,qbr,jbr,NT,nve,Dbr,Gbr,_H,Obr,Vbr,Xbr,qT,sve,zbr,Wbr,uH,Qbr,Hbr,Ubr,jT,WDe,Ud,DT,lve,G8,Jbr,ive,Ybr,QDe,Zo,O8,Kbr,Jd,Zbr,bH,e2r,o2r,vH,r2r,t2r,a2r,V8,n2r,dve,s2r,l2r,i2r,$t,X8,d2r,cve,c2r,f2r,Yd,m2r,fve,g2r,h2r,FH,p2r,_2r,u2r,GT,b2r,Lr,z8,v2r,mve,F2r,T2r,en,M2r,gve,E2r,C2r,hve,w2r,A2r,pve,L2r,y2r,x2r,Me,OT,_ve,$2r,k2r,TH,S2r,R2r,P2r,VT,uve,B2r,I2r,MH,N2r,q2r,j2r,XT,bve,D2r,G2r,EH,O2r,V2r,X2r,zT,vve,z2r,W2r,CH,Q2r,H2r,U2r,WT,Fve,J2r,Y2r,wH,K2r,Z2r,e4r,QT,Tve,o4r,r4r,AH,t4r,a4r,n4r,HT,Mve,s4r,l4r,LH,i4r,d4r,c4r,UT,Eve,f4r,m4r,yH,g4r,h4r,p4r,JT,Cve,_4r,u4r,xH,b4r,v4r,F4r,YT,wve,T4r,M4r,$H,E4r,C4r,w4r,KT,Ave,A4r,L4r,kH,y4r,x4r,$4r,ZT,Lve,k4r,S4r,SH,R4r,P4r,B4r,e7,yve,I4r,N4r,RH,q4r,j4r,D4r,o7,HDe,Kd,r7,xve,W8,G4r,$ve,O4r,UDe,er,Q8,V4r,Zd,X4r,PH,z4r,W4r,BH,Q4r,H4r,U4r,H8,J4r,kve,Y4r,K4r,Z4r,kt,U8,evr,Sve,ovr,rvr,ec,tvr,Rve,avr,nvr,IH,svr,lvr,ivr,t7,dvr,yr,J8,cvr,Pve,fvr,mvr,on,gvr,Bve,hvr,pvr,Ive,_vr,uvr,Nve,bvr,vvr,Fvr,rn,a7,qve,Tvr,Mvr,NH,Evr,Cvr,wvr,n7,jve,Avr,Lvr,qH,yvr,xvr,$vr,s7,Dve,kvr,Svr,jH,Rvr,Pvr,Bvr,l7,Gve,Ivr,Nvr,DH,qvr,jvr,Dvr,i7,JDe,oc,d7,Ove,Y8,Gvr,Vve,Ovr,YDe,or,K8,Vvr,rc,Xvr,GH,zvr,Wvr,OH,Qvr,Hvr,Uvr,Z8,Jvr,Xve,Yvr,Kvr,Zvr,St,e9,e5r,zve,o5r,r5r,tc,t5r,Wve,a5r,n5r,VH,s5r,l5r,i5r,c7,d5r,xr,o9,c5r,Qve,f5r,m5r,tn,g5r,Hve,h5r,p5r,Uve,_5r,u5r,Jve,b5r,v5r,F5r,ie,f7,Yve,T5r,M5r,XH,E5r,C5r,w5r,m7,Kve,A5r,L5r,zH,y5r,x5r,$5r,g7,Zve,k5r,S5r,WH,R5r,P5r,B5r,h7,e5e,I5r,N5r,QH,q5r,j5r,D5r,p7,o5e,G5r,O5r,HH,V5r,X5r,z5r,_7,r5e,W5r,Q5r,UH,H5r,U5r,J5r,u7,t5e,Y5r,K5r,JH,Z5r,e3r,o3r,b7,a5e,r3r,t3r,YH,a3r,n3r,s3r,v7,n5e,l3r,i3r,KH,d3r,c3r,f3r,F7,s5e,m3r,g3r,ZH,h3r,p3r,_3r,T7,l5e,u3r,b3r,eU,v3r,F3r,T3r,M7,i5e,M3r,E3r,oU,C3r,w3r,A3r,E7,d5e,L3r,y3r,rU,x3r,$3r,k3r,C7,c5e,S3r,R3r,tU,P3r,B3r,I3r,w7,f5e,N3r,q3r,aU,j3r,D3r,G3r,A7,m5e,O3r,V3r,nU,X3r,z3r,W3r,L7,g5e,Q3r,H3r,sU,U3r,J3r,Y3r,y7,h5e,K3r,Z3r,lU,eFr,oFr,rFr,x7,p5e,tFr,aFr,iU,nFr,sFr,lFr,$7,_5e,iFr,dFr,dU,cFr,fFr,mFr,k7,KDe,ac,S7,u5e,r9,gFr,b5e,hFr,ZDe,rr,t9,pFr,nc,_Fr,cU,uFr,bFr,fU,vFr,FFr,TFr,a9,MFr,v5e,EFr,CFr,wFr,Rt,n9,AFr,F5e,LFr,yFr,sc,xFr,T5e,$Fr,kFr,mU,SFr,RFr,PFr,R7,BFr,$r,s9,IFr,M5e,NFr,qFr,an,jFr,E5e,DFr,GFr,C5e,OFr,VFr,w5e,XFr,zFr,WFr,ye,P7,A5e,QFr,HFr,gU,UFr,JFr,YFr,B7,L5e,KFr,ZFr,hU,eTr,oTr,rTr,I7,y5e,tTr,aTr,pU,nTr,sTr,lTr,N7,x5e,iTr,dTr,_U,cTr,fTr,mTr,q7,$5e,gTr,hTr,uU,pTr,_Tr,uTr,j7,k5e,bTr,vTr,bU,FTr,TTr,MTr,D7,S5e,ETr,CTr,vU,wTr,ATr,LTr,G7,R5e,yTr,xTr,FU,$Tr,kTr,STr,O7,P5e,RTr,PTr,TU,BTr,ITr,NTr,V7,B5e,qTr,jTr,MU,DTr,GTr,OTr,X7,eGe,lc,z7,I5e,l9,VTr,N5e,XTr,oGe,tr,i9,zTr,ic,WTr,EU,QTr,HTr,CU,UTr,JTr,YTr,d9,KTr,q5e,ZTr,e7r,o7r,Pt,c9,r7r,j5e,t7r,a7r,dc,n7r,D5e,s7r,l7r,wU,i7r,d7r,c7r,W7,f7r,kr,f9,m7r,G5e,g7r,h7r,nn,p7r,O5e,_7r,u7r,V5e,b7r,v7r,X5e,F7r,T7r,M7r,oe,Q7,z5e,E7r,C7r,AU,w7r,A7r,L7r,H7,W5e,y7r,x7r,LU,$7r,k7r,S7r,U7,Q5e,R7r,P7r,yU,B7r,I7r,N7r,J7,H5e,q7r,j7r,xU,D7r,G7r,O7r,Y7,U5e,V7r,X7r,$U,z7r,W7r,Q7r,K7,J5e,H7r,U7r,kU,J7r,Y7r,K7r,Z7,Y5e,Z7r,eMr,SU,oMr,rMr,tMr,eM,K5e,aMr,nMr,RU,sMr,lMr,iMr,oM,Z5e,dMr,cMr,PU,fMr,mMr,gMr,rM,e3e,hMr,pMr,BU,_Mr,uMr,bMr,tM,o3e,vMr,FMr,IU,TMr,MMr,EMr,aM,r3e,CMr,wMr,NU,AMr,LMr,yMr,nM,t3e,xMr,$Mr,qU,kMr,SMr,RMr,sM,a3e,PMr,BMr,jU,IMr,NMr,qMr,lM,n3e,jMr,DMr,DU,GMr,OMr,VMr,iM,s3e,XMr,zMr,GU,WMr,QMr,HMr,dM,l3e,UMr,JMr,OU,YMr,KMr,ZMr,cM,i3e,eEr,oEr,VU,rEr,tEr,aEr,fM,d3e,nEr,sEr,XU,lEr,iEr,dEr,mM,c3e,cEr,fEr,zU,mEr,gEr,hEr,gM,f3e,pEr,_Er,WU,uEr,bEr,vEr,hM,m3e,FEr,TEr,QU,MEr,EEr,CEr,pM,g3e,wEr,AEr,HU,LEr,yEr,xEr,_M,h3e,$Er,kEr,UU,SEr,REr,PEr,uM,p3e,BEr,IEr,JU,NEr,qEr,jEr,bM,_3e,DEr,GEr,YU,OEr,VEr,XEr,vM,rGe,cc,FM,u3e,m9,zEr,b3e,WEr,tGe,ar,g9,QEr,fc,HEr,KU,UEr,JEr,ZU,YEr,KEr,ZEr,h9,eCr,v3e,oCr,rCr,tCr,Bt,p9,aCr,F3e,nCr,sCr,mc,lCr,T3e,iCr,dCr,eJ,cCr,fCr,mCr,TM,gCr,Sr,_9,hCr,M3e,pCr,_Cr,sn,uCr,E3e,bCr,vCr,C3e,FCr,TCr,w3e,MCr,ECr,CCr,pe,MM,A3e,wCr,ACr,oJ,LCr,yCr,xCr,EM,L3e,$Cr,kCr,rJ,SCr,RCr,PCr,CM,y3e,BCr,ICr,tJ,NCr,qCr,jCr,wM,x3e,DCr,GCr,aJ,OCr,VCr,XCr,AM,$3e,zCr,WCr,nJ,QCr,HCr,UCr,LM,k3e,JCr,YCr,sJ,KCr,ZCr,e0r,yM,S3e,o0r,r0r,lJ,t0r,a0r,n0r,xM,R3e,s0r,l0r,iJ,i0r,d0r,c0r,$M,P3e,f0r,m0r,dJ,g0r,h0r,p0r,kM,B3e,_0r,u0r,cJ,b0r,v0r,F0r,SM,I3e,T0r,M0r,fJ,E0r,C0r,w0r,RM,N3e,A0r,L0r,mJ,y0r,x0r,$0r,PM,q3e,k0r,S0r,gJ,R0r,P0r,B0r,BM,j3e,I0r,N0r,hJ,q0r,j0r,D0r,IM,D3e,G0r,O0r,pJ,V0r,X0r,z0r,NM,G3e,W0r,Q0r,_J,H0r,U0r,J0r,qM,O3e,Y0r,K0r,uJ,Z0r,ewr,owr,jM,aGe,gc,DM,V3e,u9,rwr,X3e,twr,nGe,nr,b9,awr,hc,nwr,bJ,swr,lwr,vJ,iwr,dwr,cwr,v9,fwr,z3e,mwr,gwr,hwr,It,F9,pwr,W3e,_wr,uwr,pc,bwr,Q3e,vwr,Fwr,FJ,Twr,Mwr,Ewr,GM,Cwr,Rr,T9,wwr,H3e,Awr,Lwr,ln,ywr,U3e,xwr,$wr,J3e,kwr,Swr,Y3e,Rwr,Pwr,Bwr,M9,OM,K3e,Iwr,Nwr,TJ,qwr,jwr,Dwr,VM,Z3e,Gwr,Owr,MJ,Vwr,Xwr,zwr,XM,sGe,_c,zM,eFe,E9,Wwr,oFe,Qwr,lGe,sr,C9,Hwr,uc,Uwr,EJ,Jwr,Ywr,CJ,Kwr,Zwr,e6r,w9,o6r,rFe,r6r,t6r,a6r,Nt,A9,n6r,tFe,s6r,l6r,bc,i6r,aFe,d6r,c6r,wJ,f6r,m6r,g6r,WM,h6r,Pr,L9,p6r,nFe,_6r,u6r,dn,b6r,sFe,v6r,F6r,lFe,T6r,M6r,iFe,E6r,C6r,w6r,dFe,QM,cFe,A6r,L6r,AJ,y6r,x6r,$6r,HM,iGe,vc,UM,fFe,y9,k6r,mFe,S6r,dGe,lr,x9,R6r,Fc,P6r,LJ,B6r,I6r,yJ,N6r,q6r,j6r,$9,D6r,gFe,G6r,O6r,V6r,qt,k9,X6r,hFe,z6r,W6r,Tc,Q6r,pFe,H6r,U6r,xJ,J6r,Y6r,K6r,JM,Z6r,Br,S9,eAr,_Fe,oAr,rAr,cn,tAr,uFe,aAr,nAr,bFe,sAr,lAr,vFe,iAr,dAr,cAr,de,YM,FFe,fAr,mAr,$J,gAr,hAr,pAr,KM,TFe,_Ar,uAr,kJ,bAr,vAr,FAr,ZM,MFe,TAr,MAr,SJ,EAr,CAr,wAr,eE,EFe,AAr,LAr,RJ,yAr,xAr,$Ar,oE,CFe,kAr,SAr,PJ,RAr,PAr,BAr,rE,wFe,IAr,NAr,BJ,qAr,jAr,DAr,tE,AFe,GAr,OAr,IJ,VAr,XAr,zAr,aE,LFe,WAr,QAr,NJ,HAr,UAr,JAr,nE,yFe,YAr,KAr,qJ,ZAr,eLr,oLr,sE,xFe,rLr,tLr,jJ,aLr,nLr,sLr,lE,$Fe,lLr,iLr,DJ,dLr,cLr,fLr,iE,kFe,mLr,gLr,GJ,hLr,pLr,_Lr,dE,SFe,uLr,bLr,OJ,vLr,FLr,TLr,cE,RFe,MLr,ELr,VJ,CLr,wLr,ALr,fE,PFe,LLr,yLr,XJ,xLr,$Lr,kLr,mE,BFe,SLr,RLr,zJ,PLr,BLr,ILr,gE,IFe,NLr,qLr,WJ,jLr,DLr,GLr,hE,NFe,OLr,VLr,QJ,XLr,zLr,WLr,pE,qFe,QLr,HLr,HJ,ULr,JLr,YLr,_E,jFe,KLr,ZLr,UJ,eyr,oyr,ryr,uE,cGe,Mc,bE,DFe,R9,tyr,GFe,ayr,fGe,ir,P9,nyr,Ec,syr,JJ,lyr,iyr,YJ,dyr,cyr,fyr,B9,myr,OFe,gyr,hyr,pyr,jt,I9,_yr,VFe,uyr,byr,Cc,vyr,XFe,Fyr,Tyr,KJ,Myr,Eyr,Cyr,vE,wyr,Ir,N9,Ayr,zFe,Lyr,yyr,fn,xyr,WFe,$yr,kyr,QFe,Syr,Ryr,HFe,Pyr,Byr,Iyr,ce,FE,UFe,Nyr,qyr,ZJ,jyr,Dyr,Gyr,TE,JFe,Oyr,Vyr,eY,Xyr,zyr,Wyr,ME,YFe,Qyr,Hyr,oY,Uyr,Jyr,Yyr,EE,KFe,Kyr,Zyr,rY,e8r,o8r,r8r,CE,ZFe,t8r,a8r,tY,n8r,s8r,l8r,wE,eTe,i8r,d8r,aY,c8r,f8r,m8r,AE,oTe,g8r,h8r,nY,p8r,_8r,u8r,LE,rTe,b8r,v8r,sY,F8r,T8r,M8r,yE,tTe,E8r,C8r,lY,w8r,A8r,L8r,xE,aTe,y8r,x8r,iY,$8r,k8r,S8r,$E,nTe,R8r,P8r,dY,B8r,I8r,N8r,kE,sTe,q8r,j8r,cY,D8r,G8r,O8r,SE,lTe,V8r,X8r,fY,z8r,W8r,Q8r,RE,iTe,H8r,U8r,mY,J8r,Y8r,K8r,PE,dTe,Z8r,e9r,gY,o9r,r9r,t9r,BE,cTe,a9r,n9r,hY,s9r,l9r,i9r,IE,fTe,d9r,c9r,pY,f9r,m9r,g9r,NE,mTe,h9r,p9r,_Y,_9r,u9r,b9r,qE,gTe,v9r,F9r,uY,T9r,M9r,E9r,jE,hTe,C9r,w9r,bY,A9r,L9r,y9r,DE,mGe,wc,GE,pTe,q9,x9r,_Te,$9r,gGe,dr,j9,k9r,Ac,S9r,vY,R9r,P9r,FY,B9r,I9r,N9r,D9,q9r,uTe,j9r,D9r,G9r,Dt,G9,O9r,bTe,V9r,X9r,Lc,z9r,vTe,W9r,Q9r,TY,H9r,U9r,J9r,OE,Y9r,Nr,O9,K9r,FTe,Z9r,exr,mn,oxr,TTe,rxr,txr,MTe,axr,nxr,ETe,sxr,lxr,ixr,CTe,VE,wTe,dxr,cxr,MY,fxr,mxr,gxr,XE,hGe,yc,zE,ATe,V9,hxr,LTe,pxr,pGe,cr,X9,_xr,xc,uxr,EY,bxr,vxr,CY,Fxr,Txr,Mxr,z9,Exr,yTe,Cxr,wxr,Axr,Gt,W9,Lxr,xTe,yxr,xxr,$c,$xr,$Te,kxr,Sxr,wY,Rxr,Pxr,Bxr,WE,Ixr,qr,Q9,Nxr,kTe,qxr,jxr,gn,Dxr,STe,Gxr,Oxr,RTe,Vxr,Xxr,PTe,zxr,Wxr,Qxr,BTe,QE,ITe,Hxr,Uxr,AY,Jxr,Yxr,Kxr,HE,_Ge,kc,UE,NTe,H9,Zxr,qTe,e$r,uGe,fr,U9,o$r,Sc,r$r,LY,t$r,a$r,yY,n$r,s$r,l$r,J9,i$r,jTe,d$r,c$r,f$r,Ot,Y9,m$r,DTe,g$r,h$r,Rc,p$r,GTe,_$r,u$r,xY,b$r,v$r,F$r,JE,T$r,jr,K9,M$r,OTe,E$r,C$r,hn,w$r,VTe,A$r,L$r,XTe,y$r,x$r,zTe,$$r,k$r,S$r,re,YE,WTe,R$r,P$r,$Y,B$r,I$r,N$r,KE,QTe,q$r,j$r,kY,D$r,G$r,O$r,ZE,HTe,V$r,X$r,SY,z$r,W$r,Q$r,eC,UTe,H$r,U$r,RY,J$r,Y$r,K$r,oC,JTe,Z$r,ekr,PY,okr,rkr,tkr,rC,YTe,akr,nkr,BY,skr,lkr,ikr,tC,KTe,dkr,ckr,IY,fkr,mkr,gkr,aC,ZTe,hkr,pkr,NY,_kr,ukr,bkr,nC,e7e,vkr,Fkr,qY,Tkr,Mkr,Ekr,sC,o7e,Ckr,wkr,jY,Akr,Lkr,ykr,lC,r7e,xkr,$kr,DY,kkr,Skr,Rkr,iC,t7e,Pkr,Bkr,GY,Ikr,Nkr,qkr,dC,a7e,jkr,Dkr,OY,Gkr,Okr,Vkr,cC,n7e,Xkr,zkr,VY,Wkr,Qkr,Hkr,fC,s7e,Ukr,Jkr,XY,Ykr,Kkr,Zkr,mC,l7e,eSr,oSr,zY,rSr,tSr,aSr,gC,i7e,nSr,sSr,WY,lSr,iSr,dSr,hC,d7e,cSr,fSr,QY,mSr,gSr,hSr,pC,c7e,pSr,_Sr,HY,uSr,bSr,vSr,_C,f7e,FSr,TSr,UY,MSr,ESr,CSr,uC,m7e,wSr,ASr,JY,LSr,ySr,xSr,bC,g7e,$Sr,kSr,YY,SSr,RSr,PSr,vC,h7e,BSr,ISr,KY,NSr,qSr,jSr,FC,p7e,DSr,GSr,ZY,OSr,VSr,XSr,TC,_7e,zSr,WSr,eK,QSr,HSr,USr,MC,u7e,JSr,YSr,oK,KSr,ZSr,eRr,EC,bGe,Pc,CC,b7e,Z9,oRr,v7e,rRr,vGe,mr,ex,tRr,Bc,aRr,rK,nRr,sRr,tK,lRr,iRr,dRr,ox,cRr,F7e,fRr,mRr,gRr,Vt,rx,hRr,T7e,pRr,_Rr,Ic,uRr,M7e,bRr,vRr,aK,FRr,TRr,MRr,wC,ERr,Dr,tx,CRr,E7e,wRr,ARr,pn,LRr,C7e,yRr,xRr,w7e,$Rr,kRr,A7e,SRr,RRr,PRr,xe,AC,L7e,BRr,IRr,nK,NRr,qRr,jRr,LC,y7e,DRr,GRr,sK,ORr,VRr,XRr,yC,x7e,zRr,WRr,lK,QRr,HRr,URr,xC,$7e,JRr,YRr,iK,KRr,ZRr,ePr,$C,k7e,oPr,rPr,dK,tPr,aPr,nPr,kC,S7e,sPr,lPr,cK,iPr,dPr,cPr,SC,R7e,fPr,mPr,fK,gPr,hPr,pPr,RC,P7e,_Pr,uPr,mK,bPr,vPr,FPr,PC,B7e,TPr,MPr,gK,EPr,CPr,wPr,BC,I7e,APr,LPr,hK,yPr,xPr,$Pr,IC,FGe,Nc,NC,N7e,ax,kPr,q7e,SPr,TGe,gr,nx,RPr,qc,PPr,pK,BPr,IPr,_K,NPr,qPr,jPr,sx,DPr,j7e,GPr,OPr,VPr,Xt,lx,XPr,D7e,zPr,WPr,jc,QPr,G7e,HPr,UPr,uK,JPr,YPr,KPr,qC,ZPr,Gr,ix,eBr,O7e,oBr,rBr,_n,tBr,V7e,aBr,nBr,X7e,sBr,lBr,z7e,iBr,dBr,cBr,Ee,jC,W7e,fBr,mBr,bK,gBr,hBr,pBr,DC,Q7e,_Br,uBr,vK,bBr,vBr,FBr,GC,H7e,TBr,MBr,FK,EBr,CBr,wBr,OC,U7e,ABr,LBr,TK,yBr,xBr,$Br,VC,J7e,kBr,SBr,MK,RBr,PBr,BBr,XC,Y7e,IBr,NBr,EK,qBr,jBr,DBr,zC,K7e,GBr,OBr,CK,VBr,XBr,zBr,WC,Z7e,WBr,QBr,wK,HBr,UBr,JBr,QC,eMe,YBr,KBr,AK,ZBr,eIr,oIr,HC,oMe,rIr,tIr,LK,aIr,nIr,sIr,UC,rMe,lIr,iIr,yK,dIr,cIr,fIr,JC,tMe,mIr,gIr,xK,hIr,pIr,_Ir,YC,MGe,Dc,KC,aMe,dx,uIr,nMe,bIr,EGe,hr,cx,vIr,Gc,FIr,$K,TIr,MIr,kK,EIr,CIr,wIr,fx,AIr,sMe,LIr,yIr,xIr,zt,mx,$Ir,lMe,kIr,SIr,Oc,RIr,iMe,PIr,BIr,SK,IIr,NIr,qIr,ZC,jIr,Or,gx,DIr,dMe,GIr,OIr,un,VIr,cMe,XIr,zIr,fMe,WIr,QIr,mMe,HIr,UIr,JIr,$e,e0,gMe,YIr,KIr,RK,ZIr,eNr,oNr,o0,hMe,rNr,tNr,PK,aNr,nNr,sNr,r0,pMe,lNr,iNr,BK,dNr,cNr,fNr,t0,_Me,mNr,gNr,IK,hNr,pNr,_Nr,a0,uMe,uNr,bNr,NK,vNr,FNr,TNr,n0,bMe,MNr,ENr,qK,CNr,wNr,ANr,s0,vMe,LNr,yNr,jK,xNr,$Nr,kNr,l0,FMe,SNr,RNr,DK,PNr,BNr,INr,i0,TMe,NNr,qNr,GK,jNr,DNr,GNr,d0,MMe,ONr,VNr,OK,XNr,zNr,WNr,c0,CGe,Vc,f0,EMe,hx,QNr,CMe,HNr,wGe,pr,px,UNr,Xc,JNr,VK,YNr,KNr,XK,ZNr,eqr,oqr,_x,rqr,wMe,tqr,aqr,nqr,Wt,ux,sqr,AMe,lqr,iqr,zc,dqr,LMe,cqr,fqr,zK,mqr,gqr,hqr,m0,pqr,Vr,bx,_qr,yMe,uqr,bqr,bn,vqr,xMe,Fqr,Tqr,$Me,Mqr,Eqr,kMe,Cqr,wqr,Aqr,Pe,g0,SMe,Lqr,yqr,WK,xqr,$qr,kqr,h0,RMe,Sqr,Rqr,QK,Pqr,Bqr,Iqr,p0,PMe,Nqr,qqr,HK,jqr,Dqr,Gqr,_0,BMe,Oqr,Vqr,UK,Xqr,zqr,Wqr,u0,IMe,Qqr,Hqr,JK,Uqr,Jqr,Yqr,b0,NMe,Kqr,Zqr,YK,ejr,ojr,rjr,v0,qMe,tjr,ajr,KK,njr,sjr,ljr,F0,jMe,ijr,djr,ZK,cjr,fjr,mjr,T0,DMe,gjr,hjr,eZ,pjr,_jr,ujr,M0,AGe,Wc,E0,GMe,vx,bjr,OMe,vjr,LGe,_r,Fx,Fjr,Qc,Tjr,oZ,Mjr,Ejr,rZ,Cjr,wjr,Ajr,Tx,Ljr,VMe,yjr,xjr,$jr,Qt,Mx,kjr,XMe,Sjr,Rjr,Hc,Pjr,zMe,Bjr,Ijr,tZ,Njr,qjr,jjr,C0,Djr,Xr,Ex,Gjr,WMe,Ojr,Vjr,vn,Xjr,QMe,zjr,Wjr,HMe,Qjr,Hjr,UMe,Ujr,Jjr,Yjr,ke,w0,JMe,Kjr,Zjr,aZ,eDr,oDr,rDr,A0,YMe,tDr,aDr,nZ,nDr,sDr,lDr,L0,KMe,iDr,dDr,sZ,cDr,fDr,mDr,y0,ZMe,gDr,hDr,lZ,pDr,_Dr,uDr,x0,eEe,bDr,vDr,iZ,FDr,TDr,MDr,$0,oEe,EDr,CDr,dZ,wDr,ADr,LDr,k0,rEe,yDr,xDr,cZ,$Dr,kDr,SDr,S0,tEe,RDr,PDr,fZ,BDr,IDr,NDr,R0,aEe,qDr,jDr,mZ,DDr,GDr,ODr,P0,nEe,VDr,XDr,gZ,zDr,WDr,QDr,B0,yGe,Uc,I0,sEe,Cx,HDr,lEe,UDr,xGe,ur,wx,JDr,Jc,YDr,hZ,KDr,ZDr,pZ,eGr,oGr,rGr,Ax,tGr,iEe,aGr,nGr,sGr,Ht,Lx,lGr,dEe,iGr,dGr,Yc,cGr,cEe,fGr,mGr,_Z,gGr,hGr,pGr,N0,_Gr,zr,yx,uGr,fEe,bGr,vGr,Fn,FGr,mEe,TGr,MGr,gEe,EGr,CGr,hEe,wGr,AGr,LGr,Se,q0,pEe,yGr,xGr,uZ,$Gr,kGr,SGr,j0,_Ee,RGr,PGr,bZ,BGr,IGr,NGr,D0,uEe,qGr,jGr,vZ,DGr,GGr,OGr,G0,bEe,VGr,XGr,FZ,zGr,WGr,QGr,O0,vEe,HGr,UGr,TZ,JGr,YGr,KGr,V0,FEe,ZGr,eOr,MZ,oOr,rOr,tOr,X0,TEe,aOr,nOr,EZ,sOr,lOr,iOr,z0,MEe,dOr,cOr,CZ,fOr,mOr,gOr,W0,EEe,hOr,pOr,wZ,_Or,uOr,bOr,Q0,CEe,vOr,FOr,AZ,TOr,MOr,EOr,H0,$Ge,Kc,U0,wEe,xx,COr,AEe,wOr,kGe,br,$x,AOr,Zc,LOr,LZ,yOr,xOr,yZ,$Or,kOr,SOr,kx,ROr,LEe,POr,BOr,IOr,Ut,Sx,NOr,yEe,qOr,jOr,ef,DOr,xEe,GOr,OOr,xZ,VOr,XOr,zOr,J0,WOr,Wr,Rx,QOr,$Ee,HOr,UOr,Tn,JOr,kEe,YOr,KOr,SEe,ZOr,eVr,REe,oVr,rVr,tVr,Oe,Y0,PEe,aVr,nVr,$Z,sVr,lVr,iVr,K0,BEe,dVr,cVr,kZ,fVr,mVr,gVr,Z0,IEe,hVr,pVr,SZ,_Vr,uVr,bVr,ew,NEe,vVr,FVr,RZ,TVr,MVr,EVr,ow,qEe,CVr,wVr,PZ,AVr,LVr,yVr,rw,jEe,xVr,$Vr,BZ,kVr,SVr,RVr,tw,DEe,PVr,BVr,IZ,IVr,NVr,qVr,aw,GEe,jVr,DVr,NZ,GVr,OVr,VVr,nw,SGe,of,sw,OEe,Px,XVr,VEe,zVr,RGe,vr,Bx,WVr,rf,QVr,qZ,HVr,UVr,jZ,JVr,YVr,KVr,Ix,ZVr,XEe,eXr,oXr,rXr,Jt,Nx,tXr,zEe,aXr,nXr,tf,sXr,WEe,lXr,iXr,DZ,dXr,cXr,fXr,lw,mXr,Qr,qx,gXr,QEe,hXr,pXr,Mn,_Xr,HEe,uXr,bXr,UEe,vXr,FXr,JEe,TXr,MXr,EXr,Ve,iw,YEe,CXr,wXr,GZ,AXr,LXr,yXr,dw,KEe,xXr,$Xr,OZ,kXr,SXr,RXr,cw,ZEe,PXr,BXr,VZ,IXr,NXr,qXr,fw,eCe,jXr,DXr,XZ,GXr,OXr,VXr,mw,oCe,XXr,zXr,zZ,WXr,QXr,HXr,gw,rCe,UXr,JXr,WZ,YXr,KXr,ZXr,hw,tCe,ezr,ozr,QZ,rzr,tzr,azr,pw,aCe,nzr,szr,HZ,lzr,izr,dzr,_w,PGe,af,uw,nCe,jx,czr,sCe,fzr,BGe,Fr,Dx,mzr,nf,gzr,UZ,hzr,pzr,JZ,_zr,uzr,bzr,Gx,vzr,lCe,Fzr,Tzr,Mzr,Yt,Ox,Ezr,iCe,Czr,wzr,sf,Azr,dCe,Lzr,yzr,YZ,xzr,$zr,kzr,bw,Szr,Hr,Vx,Rzr,cCe,Pzr,Bzr,En,Izr,fCe,Nzr,qzr,mCe,jzr,Dzr,gCe,Gzr,Ozr,Vzr,hCe,vw,pCe,Xzr,zzr,KZ,Wzr,Qzr,Hzr,Fw,IGe,lf,Tw,_Ce,Xx,Uzr,uCe,Jzr,NGe,Tr,zx,Yzr,df,Kzr,ZZ,Zzr,eWr,eee,oWr,rWr,tWr,Wx,aWr,bCe,nWr,sWr,lWr,Kt,Qx,iWr,vCe,dWr,cWr,cf,fWr,FCe,mWr,gWr,oee,hWr,pWr,_Wr,Mw,uWr,Ur,Hx,bWr,TCe,vWr,FWr,Cn,TWr,MCe,MWr,EWr,ECe,CWr,wWr,CCe,AWr,LWr,yWr,Ux,Ew,wCe,xWr,$Wr,ree,kWr,SWr,RWr,Cw,ACe,PWr,BWr,tee,IWr,NWr,qWr,ww,qGe,ff,Aw,LCe,Jx,jWr,yCe,DWr,jGe,Mr,Yx,GWr,mf,OWr,aee,VWr,XWr,nee,zWr,WWr,QWr,Kx,HWr,xCe,UWr,JWr,YWr,Zt,Zx,KWr,$Ce,ZWr,eQr,gf,oQr,kCe,rQr,tQr,see,aQr,nQr,sQr,Lw,lQr,Jr,e$,iQr,SCe,dQr,cQr,wn,fQr,RCe,mQr,gQr,PCe,hQr,pQr,BCe,_Qr,uQr,bQr,ICe,yw,NCe,vQr,FQr,lee,TQr,MQr,EQr,xw,DGe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),JA=new te({}),YA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new CQr({props:{warning:!0,$$slots:{default:[KPt]},$$scope:{ctx:x}}}),KA=new te({}),ZA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L594"}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L617"}}),xg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),tL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L740"}}),aL=new te({}),nL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L391"}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L405"}}),fh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),dL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L604"}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),Wh=new CQr({props:{$$slots:{default:[oBt]},$$scope:{ctx:x}}}),Qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),pL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),_L=new te({}),uL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),gp=new CQr({props:{$$slots:{default:[tBt]},$$scope:{ctx:x}}}),hp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),TL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),ML=new te({}),EL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L747"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),up=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_u=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),LL=new te({}),yL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L754"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),SL=new te({}),RL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L769"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),NL=new te({}),qL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L776"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L783"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L792"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L826"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L833"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L819"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L801"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L808"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L842"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L881"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L888"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L911"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L895"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L902"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L920"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L927"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),c8=new te({}),f8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L874"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),_8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L849"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),T8=new te({}),M8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L856"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),A8=new te({}),L8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L865"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KBt]},$$scope:{ctx:x}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZBt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eIt]},$$scope:{ctx:x}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oIt]},$$scope:{ctx:x}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rIt]},$$scope:{ctx:x}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tIt]},$$scope:{ctx:x}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aIt]},$$scope:{ctx:x}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nIt]},$$scope:{ctx:x}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sIt]},$$scope:{ctx:x}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lIt]},$$scope:{ctx:x}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iIt]},$$scope:{ctx:x}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dIt]},$$scope:{ctx:x}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cIt]},$$scope:{ctx:x}}}),m9=new te({}),g9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fIt]},$$scope:{ctx:x}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mIt]},$$scope:{ctx:x}}}),u9=new te({}),b9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gIt]},$$scope:{ctx:x}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hIt]},$$scope:{ctx:x}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pIt]},$$scope:{ctx:x}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_It]},$$scope:{ctx:x}}}),y9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uIt]},$$scope:{ctx:x}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bIt]},$$scope:{ctx:x}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vIt]},$$scope:{ctx:x}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FIt]},$$scope:{ctx:x}}}),q9=new te({}),j9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[TIt]},$$scope:{ctx:x}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MIt]},$$scope:{ctx:x}}}),V9=new te({}),X9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[EIt]},$$scope:{ctx:x}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[CIt]},$$scope:{ctx:x}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wIt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[AIt]},$$scope:{ctx:x}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[LIt]},$$scope:{ctx:x}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yIt]},$$scope:{ctx:x}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xIt]},$$scope:{ctx:x}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$It]},$$scope:{ctx:x}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kIt]},$$scope:{ctx:x}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SIt]},$$scope:{ctx:x}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RIt]},$$scope:{ctx:x}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PIt]},$$scope:{ctx:x}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BIt]},$$scope:{ctx:x}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IIt]},$$scope:{ctx:x}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NIt]},$$scope:{ctx:x}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qIt]},$$scope:{ctx:x}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jIt]},$$scope:{ctx:x}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DIt]},$$scope:{ctx:x}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[GIt]},$$scope:{ctx:x}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[OIt]},$$scope:{ctx:x}}}),jx=new te({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VIt]},$$scope:{ctx:x}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XIt]},$$scope:{ctx:x}}}),Xx=new te({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zIt]},$$scope:{ctx:x}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WIt]},$$scope:{ctx:x}}}),Jx=new te({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[QIt]},$$scope:{ctx:x}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[HIt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),tt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),WA=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),QA=o("AutoConfig"),yn=o(", "),xn=a("a"),HA=o("AutoModel"),ui=o(`, and
`),$n=a("a"),UA=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),pk=o("will create a model that is an instance of "),vi=a("a"),_k=o("BertModel"),uk=o("."),Eo=l(),Aa=a("p"),bk=o("There is one class of "),Ff=a("code"),vk=o("AutoModel"),HVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nje=l(),Fi=a("h2"),Tf=a("a"),ere=a("span"),F(JA.$$.fragment),UVe=l(),ore=a("span"),JVe=o("Extending the Auto Classes"),qje=l(),kn=a("p"),YVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rre=a("code"),KVe=o("NewModel"),ZVe=o(", make sure you have a "),tre=a("code"),eXe=o("NewModelConfig"),oXe=o(` then you can add those to the auto
classes like this:`),jje=l(),F(YA.$$.fragment),Dje=l(),Fk=a("p"),rXe=o("You will then be able to use the auto classes like you would usually do!"),Gje=l(),F(Mf.$$.fragment),Oje=l(),Ti=a("h2"),Ef=a("a"),are=a("span"),F(KA.$$.fragment),tXe=l(),nre=a("span"),aXe=o("AutoConfig"),Vje=l(),Co=a("div"),F(ZA.$$.fragment),nXe=l(),eL=a("p"),sXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Tk=a("a"),lXe=o("from_pretrained()"),iXe=o(" class method."),dXe=l(),oL=a("p"),cXe=o("This class cannot be instantiated directly using "),sre=a("code"),fXe=o("__init__()"),mXe=o(" (throws an error)."),gXe=l(),Er=a("div"),F(rL.$$.fragment),hXe=l(),lre=a("p"),pXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Xe=l(),Mi=a("p"),uXe=o("The configuration class to instantiate is selected based on the "),ire=a("code"),bXe=o("model_type"),vXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dre=a("code"),FXe=o("pretrained_model_name_or_path"),TXe=o(":"),MXe=l(),A=a("ul"),Cf=a("li"),cre=a("strong"),EXe=o("albert"),CXe=o(" \u2014 "),Mk=a("a"),wXe=o("AlbertConfig"),AXe=o(" (ALBERT model)"),LXe=l(),wf=a("li"),fre=a("strong"),yXe=o("bart"),xXe=o(" \u2014 "),Ek=a("a"),$Xe=o("BartConfig"),kXe=o(" (BART model)"),SXe=l(),Af=a("li"),mre=a("strong"),RXe=o("beit"),PXe=o(" \u2014 "),Ck=a("a"),BXe=o("BeitConfig"),IXe=o(" (BEiT model)"),NXe=l(),Lf=a("li"),gre=a("strong"),qXe=o("bert"),jXe=o(" \u2014 "),wk=a("a"),DXe=o("BertConfig"),GXe=o(" (BERT model)"),OXe=l(),yf=a("li"),hre=a("strong"),VXe=o("bert-generation"),XXe=o(" \u2014 "),Ak=a("a"),zXe=o("BertGenerationConfig"),WXe=o(" (Bert Generation model)"),QXe=l(),xf=a("li"),pre=a("strong"),HXe=o("big_bird"),UXe=o(" \u2014 "),Lk=a("a"),JXe=o("BigBirdConfig"),YXe=o(" (BigBird model)"),KXe=l(),$f=a("li"),_re=a("strong"),ZXe=o("bigbird_pegasus"),eze=o(" \u2014 "),yk=a("a"),oze=o("BigBirdPegasusConfig"),rze=o(" (BigBird-Pegasus model)"),tze=l(),kf=a("li"),ure=a("strong"),aze=o("blenderbot"),nze=o(" \u2014 "),xk=a("a"),sze=o("BlenderbotConfig"),lze=o(" (Blenderbot model)"),ize=l(),Sf=a("li"),bre=a("strong"),dze=o("blenderbot-small"),cze=o(" \u2014 "),$k=a("a"),fze=o("BlenderbotSmallConfig"),mze=o(" (BlenderbotSmall model)"),gze=l(),Rf=a("li"),vre=a("strong"),hze=o("bloom"),pze=o(" \u2014 "),kk=a("a"),_ze=o("BloomConfig"),uze=o(" (BLOOM model)"),bze=l(),Pf=a("li"),Fre=a("strong"),vze=o("camembert"),Fze=o(" \u2014 "),Sk=a("a"),Tze=o("CamembertConfig"),Mze=o(" (CamemBERT model)"),Eze=l(),Bf=a("li"),Tre=a("strong"),Cze=o("canine"),wze=o(" \u2014 "),Rk=a("a"),Aze=o("CanineConfig"),Lze=o(" (CANINE model)"),yze=l(),If=a("li"),Mre=a("strong"),xze=o("clip"),$ze=o(" \u2014 "),Pk=a("a"),kze=o("CLIPConfig"),Sze=o(" (CLIP model)"),Rze=l(),Nf=a("li"),Ere=a("strong"),Pze=o("convbert"),Bze=o(" \u2014 "),Bk=a("a"),Ize=o("ConvBertConfig"),Nze=o(" (ConvBERT model)"),qze=l(),qf=a("li"),Cre=a("strong"),jze=o("convnext"),Dze=o(" \u2014 "),Ik=a("a"),Gze=o("ConvNextConfig"),Oze=o(" (ConvNeXT model)"),Vze=l(),jf=a("li"),wre=a("strong"),Xze=o("ctrl"),zze=o(" \u2014 "),Nk=a("a"),Wze=o("CTRLConfig"),Qze=o(" (CTRL model)"),Hze=l(),Df=a("li"),Are=a("strong"),Uze=o("cvt"),Jze=o(" \u2014 "),qk=a("a"),Yze=o("CvtConfig"),Kze=o(" (CvT model)"),Zze=l(),Gf=a("li"),Lre=a("strong"),eWe=o("data2vec-audio"),oWe=o(" \u2014 "),jk=a("a"),rWe=o("Data2VecAudioConfig"),tWe=o(" (Data2VecAudio model)"),aWe=l(),Of=a("li"),yre=a("strong"),nWe=o("data2vec-text"),sWe=o(" \u2014 "),Dk=a("a"),lWe=o("Data2VecTextConfig"),iWe=o(" (Data2VecText model)"),dWe=l(),Vf=a("li"),xre=a("strong"),cWe=o("data2vec-vision"),fWe=o(" \u2014 "),Gk=a("a"),mWe=o("Data2VecVisionConfig"),gWe=o(" (Data2VecVision model)"),hWe=l(),Xf=a("li"),$re=a("strong"),pWe=o("deberta"),_We=o(" \u2014 "),Ok=a("a"),uWe=o("DebertaConfig"),bWe=o(" (DeBERTa model)"),vWe=l(),zf=a("li"),kre=a("strong"),FWe=o("deberta-v2"),TWe=o(" \u2014 "),Vk=a("a"),MWe=o("DebertaV2Config"),EWe=o(" (DeBERTa-v2 model)"),CWe=l(),Wf=a("li"),Sre=a("strong"),wWe=o("decision_transformer"),AWe=o(" \u2014 "),Xk=a("a"),LWe=o("DecisionTransformerConfig"),yWe=o(" (Decision Transformer model)"),xWe=l(),Qf=a("li"),Rre=a("strong"),$We=o("deit"),kWe=o(" \u2014 "),zk=a("a"),SWe=o("DeiTConfig"),RWe=o(" (DeiT model)"),PWe=l(),Hf=a("li"),Pre=a("strong"),BWe=o("detr"),IWe=o(" \u2014 "),Wk=a("a"),NWe=o("DetrConfig"),qWe=o(" (DETR model)"),jWe=l(),Uf=a("li"),Bre=a("strong"),DWe=o("distilbert"),GWe=o(" \u2014 "),Qk=a("a"),OWe=o("DistilBertConfig"),VWe=o(" (DistilBERT model)"),XWe=l(),Jf=a("li"),Ire=a("strong"),zWe=o("dpr"),WWe=o(" \u2014 "),Hk=a("a"),QWe=o("DPRConfig"),HWe=o(" (DPR model)"),UWe=l(),Yf=a("li"),Nre=a("strong"),JWe=o("dpt"),YWe=o(" \u2014 "),Uk=a("a"),KWe=o("DPTConfig"),ZWe=o(" (DPT model)"),eQe=l(),Kf=a("li"),qre=a("strong"),oQe=o("electra"),rQe=o(" \u2014 "),Jk=a("a"),tQe=o("ElectraConfig"),aQe=o(" (ELECTRA model)"),nQe=l(),Zf=a("li"),jre=a("strong"),sQe=o("encoder-decoder"),lQe=o(" \u2014 "),Yk=a("a"),iQe=o("EncoderDecoderConfig"),dQe=o(" (Encoder decoder model)"),cQe=l(),em=a("li"),Dre=a("strong"),fQe=o("flaubert"),mQe=o(" \u2014 "),Kk=a("a"),gQe=o("FlaubertConfig"),hQe=o(" (FlauBERT model)"),pQe=l(),om=a("li"),Gre=a("strong"),_Qe=o("flava"),uQe=o(" \u2014 "),Zk=a("a"),bQe=o("FlavaConfig"),vQe=o(" (FLAVA model)"),FQe=l(),rm=a("li"),Ore=a("strong"),TQe=o("fnet"),MQe=o(" \u2014 "),eS=a("a"),EQe=o("FNetConfig"),CQe=o(" (FNet model)"),wQe=l(),tm=a("li"),Vre=a("strong"),AQe=o("fsmt"),LQe=o(" \u2014 "),oS=a("a"),yQe=o("FSMTConfig"),xQe=o(" (FairSeq Machine-Translation model)"),$Qe=l(),am=a("li"),Xre=a("strong"),kQe=o("funnel"),SQe=o(" \u2014 "),rS=a("a"),RQe=o("FunnelConfig"),PQe=o(" (Funnel Transformer model)"),BQe=l(),nm=a("li"),zre=a("strong"),IQe=o("glpn"),NQe=o(" \u2014 "),tS=a("a"),qQe=o("GLPNConfig"),jQe=o(" (GLPN model)"),DQe=l(),sm=a("li"),Wre=a("strong"),GQe=o("gpt2"),OQe=o(" \u2014 "),aS=a("a"),VQe=o("GPT2Config"),XQe=o(" (OpenAI GPT-2 model)"),zQe=l(),lm=a("li"),Qre=a("strong"),WQe=o("gpt_neo"),QQe=o(" \u2014 "),nS=a("a"),HQe=o("GPTNeoConfig"),UQe=o(" (GPT Neo model)"),JQe=l(),im=a("li"),Hre=a("strong"),YQe=o("gpt_neox"),KQe=o(" \u2014 "),sS=a("a"),ZQe=o("GPTNeoXConfig"),eHe=o(" (GPT NeoX model)"),oHe=l(),dm=a("li"),Ure=a("strong"),rHe=o("gptj"),tHe=o(" \u2014 "),lS=a("a"),aHe=o("GPTJConfig"),nHe=o(" (GPT-J model)"),sHe=l(),cm=a("li"),Jre=a("strong"),lHe=o("hubert"),iHe=o(" \u2014 "),iS=a("a"),dHe=o("HubertConfig"),cHe=o(" (Hubert model)"),fHe=l(),fm=a("li"),Yre=a("strong"),mHe=o("ibert"),gHe=o(" \u2014 "),dS=a("a"),hHe=o("IBertConfig"),pHe=o(" (I-BERT model)"),_He=l(),mm=a("li"),Kre=a("strong"),uHe=o("imagegpt"),bHe=o(" \u2014 "),cS=a("a"),vHe=o("ImageGPTConfig"),FHe=o(" (ImageGPT model)"),THe=l(),gm=a("li"),Zre=a("strong"),MHe=o("layoutlm"),EHe=o(" \u2014 "),fS=a("a"),CHe=o("LayoutLMConfig"),wHe=o(" (LayoutLM model)"),AHe=l(),hm=a("li"),ete=a("strong"),LHe=o("layoutlmv2"),yHe=o(" \u2014 "),mS=a("a"),xHe=o("LayoutLMv2Config"),$He=o(" (LayoutLMv2 model)"),kHe=l(),pm=a("li"),ote=a("strong"),SHe=o("layoutlmv3"),RHe=o(" \u2014 "),gS=a("a"),PHe=o("LayoutLMv3Config"),BHe=o(" (LayoutLMv3 model)"),IHe=l(),_m=a("li"),rte=a("strong"),NHe=o("led"),qHe=o(" \u2014 "),hS=a("a"),jHe=o("LEDConfig"),DHe=o(" (LED model)"),GHe=l(),um=a("li"),tte=a("strong"),OHe=o("levit"),VHe=o(" \u2014 "),pS=a("a"),XHe=o("LevitConfig"),zHe=o(" (LeViT model)"),WHe=l(),bm=a("li"),ate=a("strong"),QHe=o("longformer"),HHe=o(" \u2014 "),_S=a("a"),UHe=o("LongformerConfig"),JHe=o(" (Longformer model)"),YHe=l(),vm=a("li"),nte=a("strong"),KHe=o("luke"),ZHe=o(" \u2014 "),uS=a("a"),eUe=o("LukeConfig"),oUe=o(" (LUKE model)"),rUe=l(),Fm=a("li"),ste=a("strong"),tUe=o("lxmert"),aUe=o(" \u2014 "),bS=a("a"),nUe=o("LxmertConfig"),sUe=o(" (LXMERT model)"),lUe=l(),Tm=a("li"),lte=a("strong"),iUe=o("m2m_100"),dUe=o(" \u2014 "),vS=a("a"),cUe=o("M2M100Config"),fUe=o(" (M2M100 model)"),mUe=l(),Mm=a("li"),ite=a("strong"),gUe=o("marian"),hUe=o(" \u2014 "),FS=a("a"),pUe=o("MarianConfig"),_Ue=o(" (Marian model)"),uUe=l(),Em=a("li"),dte=a("strong"),bUe=o("maskformer"),vUe=o(" \u2014 "),TS=a("a"),FUe=o("MaskFormerConfig"),TUe=o(" (MaskFormer model)"),MUe=l(),Cm=a("li"),cte=a("strong"),EUe=o("mbart"),CUe=o(" \u2014 "),MS=a("a"),wUe=o("MBartConfig"),AUe=o(" (mBART model)"),LUe=l(),wm=a("li"),fte=a("strong"),yUe=o("mctct"),xUe=o(" \u2014 "),ES=a("a"),$Ue=o("MCTCTConfig"),kUe=o(" (M-CTC-T model)"),SUe=l(),Am=a("li"),mte=a("strong"),RUe=o("megatron-bert"),PUe=o(" \u2014 "),CS=a("a"),BUe=o("MegatronBertConfig"),IUe=o(" (Megatron-BERT model)"),NUe=l(),Lm=a("li"),gte=a("strong"),qUe=o("mobilebert"),jUe=o(" \u2014 "),wS=a("a"),DUe=o("MobileBertConfig"),GUe=o(" (MobileBERT model)"),OUe=l(),ym=a("li"),hte=a("strong"),VUe=o("mobilevit"),XUe=o(" \u2014 "),AS=a("a"),zUe=o("MobileViTConfig"),WUe=o(" (MobileViT model)"),QUe=l(),xm=a("li"),pte=a("strong"),HUe=o("mpnet"),UUe=o(" \u2014 "),LS=a("a"),JUe=o("MPNetConfig"),YUe=o(" (MPNet model)"),KUe=l(),$m=a("li"),_te=a("strong"),ZUe=o("mt5"),eJe=o(" \u2014 "),yS=a("a"),oJe=o("MT5Config"),rJe=o(" (MT5 model)"),tJe=l(),km=a("li"),ute=a("strong"),aJe=o("nystromformer"),nJe=o(" \u2014 "),xS=a("a"),sJe=o("NystromformerConfig"),lJe=o(" (Nystr\xF6mformer model)"),iJe=l(),Sm=a("li"),bte=a("strong"),dJe=o("openai-gpt"),cJe=o(" \u2014 "),$S=a("a"),fJe=o("OpenAIGPTConfig"),mJe=o(" (OpenAI GPT model)"),gJe=l(),Rm=a("li"),vte=a("strong"),hJe=o("opt"),pJe=o(" \u2014 "),kS=a("a"),_Je=o("OPTConfig"),uJe=o(" (OPT model)"),bJe=l(),Pm=a("li"),Fte=a("strong"),vJe=o("pegasus"),FJe=o(" \u2014 "),SS=a("a"),TJe=o("PegasusConfig"),MJe=o(" (Pegasus model)"),EJe=l(),Bm=a("li"),Tte=a("strong"),CJe=o("perceiver"),wJe=o(" \u2014 "),RS=a("a"),AJe=o("PerceiverConfig"),LJe=o(" (Perceiver model)"),yJe=l(),Im=a("li"),Mte=a("strong"),xJe=o("plbart"),$Je=o(" \u2014 "),PS=a("a"),kJe=o("PLBartConfig"),SJe=o(" (PLBart model)"),RJe=l(),Nm=a("li"),Ete=a("strong"),PJe=o("poolformer"),BJe=o(" \u2014 "),BS=a("a"),IJe=o("PoolFormerConfig"),NJe=o(" (PoolFormer model)"),qJe=l(),qm=a("li"),Cte=a("strong"),jJe=o("prophetnet"),DJe=o(" \u2014 "),IS=a("a"),GJe=o("ProphetNetConfig"),OJe=o(" (ProphetNet model)"),VJe=l(),jm=a("li"),wte=a("strong"),XJe=o("qdqbert"),zJe=o(" \u2014 "),NS=a("a"),WJe=o("QDQBertConfig"),QJe=o(" (QDQBert model)"),HJe=l(),Dm=a("li"),Ate=a("strong"),UJe=o("rag"),JJe=o(" \u2014 "),qS=a("a"),YJe=o("RagConfig"),KJe=o(" (RAG model)"),ZJe=l(),Gm=a("li"),Lte=a("strong"),eYe=o("realm"),oYe=o(" \u2014 "),jS=a("a"),rYe=o("RealmConfig"),tYe=o(" (REALM model)"),aYe=l(),Om=a("li"),yte=a("strong"),nYe=o("reformer"),sYe=o(" \u2014 "),DS=a("a"),lYe=o("ReformerConfig"),iYe=o(" (Reformer model)"),dYe=l(),Vm=a("li"),xte=a("strong"),cYe=o("regnet"),fYe=o(" \u2014 "),GS=a("a"),mYe=o("RegNetConfig"),gYe=o(" (RegNet model)"),hYe=l(),Xm=a("li"),$te=a("strong"),pYe=o("rembert"),_Ye=o(" \u2014 "),OS=a("a"),uYe=o("RemBertConfig"),bYe=o(" (RemBERT model)"),vYe=l(),zm=a("li"),kte=a("strong"),FYe=o("resnet"),TYe=o(" \u2014 "),VS=a("a"),MYe=o("ResNetConfig"),EYe=o(" (ResNet model)"),CYe=l(),Wm=a("li"),Ste=a("strong"),wYe=o("retribert"),AYe=o(" \u2014 "),XS=a("a"),LYe=o("RetriBertConfig"),yYe=o(" (RetriBERT model)"),xYe=l(),Qm=a("li"),Rte=a("strong"),$Ye=o("roberta"),kYe=o(" \u2014 "),zS=a("a"),SYe=o("RobertaConfig"),RYe=o(" (RoBERTa model)"),PYe=l(),Hm=a("li"),Pte=a("strong"),BYe=o("roformer"),IYe=o(" \u2014 "),WS=a("a"),NYe=o("RoFormerConfig"),qYe=o(" (RoFormer model)"),jYe=l(),Um=a("li"),Bte=a("strong"),DYe=o("segformer"),GYe=o(" \u2014 "),QS=a("a"),OYe=o("SegformerConfig"),VYe=o(" (SegFormer model)"),XYe=l(),Jm=a("li"),Ite=a("strong"),zYe=o("sew"),WYe=o(" \u2014 "),HS=a("a"),QYe=o("SEWConfig"),HYe=o(" (SEW model)"),UYe=l(),Ym=a("li"),Nte=a("strong"),JYe=o("sew-d"),YYe=o(" \u2014 "),US=a("a"),KYe=o("SEWDConfig"),ZYe=o(" (SEW-D model)"),eKe=l(),Km=a("li"),qte=a("strong"),oKe=o("speech-encoder-decoder"),rKe=o(" \u2014 "),JS=a("a"),tKe=o("SpeechEncoderDecoderConfig"),aKe=o(" (Speech Encoder decoder model)"),nKe=l(),Zm=a("li"),jte=a("strong"),sKe=o("speech_to_text"),lKe=o(" \u2014 "),YS=a("a"),iKe=o("Speech2TextConfig"),dKe=o(" (Speech2Text model)"),cKe=l(),eg=a("li"),Dte=a("strong"),fKe=o("speech_to_text_2"),mKe=o(" \u2014 "),KS=a("a"),gKe=o("Speech2Text2Config"),hKe=o(" (Speech2Text2 model)"),pKe=l(),og=a("li"),Gte=a("strong"),_Ke=o("splinter"),uKe=o(" \u2014 "),ZS=a("a"),bKe=o("SplinterConfig"),vKe=o(" (Splinter model)"),FKe=l(),rg=a("li"),Ote=a("strong"),TKe=o("squeezebert"),MKe=o(" \u2014 "),eR=a("a"),EKe=o("SqueezeBertConfig"),CKe=o(" (SqueezeBERT model)"),wKe=l(),tg=a("li"),Vte=a("strong"),AKe=o("swin"),LKe=o(" \u2014 "),oR=a("a"),yKe=o("SwinConfig"),xKe=o(" (Swin Transformer model)"),$Ke=l(),ag=a("li"),Xte=a("strong"),kKe=o("t5"),SKe=o(" \u2014 "),rR=a("a"),RKe=o("T5Config"),PKe=o(" (T5 model)"),BKe=l(),ng=a("li"),zte=a("strong"),IKe=o("tapas"),NKe=o(" \u2014 "),tR=a("a"),qKe=o("TapasConfig"),jKe=o(" (TAPAS model)"),DKe=l(),sg=a("li"),Wte=a("strong"),GKe=o("trajectory_transformer"),OKe=o(" \u2014 "),aR=a("a"),VKe=o("TrajectoryTransformerConfig"),XKe=o(" (Trajectory Transformer model)"),zKe=l(),lg=a("li"),Qte=a("strong"),WKe=o("transfo-xl"),QKe=o(" \u2014 "),nR=a("a"),HKe=o("TransfoXLConfig"),UKe=o(" (Transformer-XL model)"),JKe=l(),ig=a("li"),Hte=a("strong"),YKe=o("trocr"),KKe=o(" \u2014 "),sR=a("a"),ZKe=o("TrOCRConfig"),eZe=o(" (TrOCR model)"),oZe=l(),dg=a("li"),Ute=a("strong"),rZe=o("unispeech"),tZe=o(" \u2014 "),lR=a("a"),aZe=o("UniSpeechConfig"),nZe=o(" (UniSpeech model)"),sZe=l(),cg=a("li"),Jte=a("strong"),lZe=o("unispeech-sat"),iZe=o(" \u2014 "),iR=a("a"),dZe=o("UniSpeechSatConfig"),cZe=o(" (UniSpeechSat model)"),fZe=l(),fg=a("li"),Yte=a("strong"),mZe=o("van"),gZe=o(" \u2014 "),dR=a("a"),hZe=o("VanConfig"),pZe=o(" (VAN model)"),_Ze=l(),mg=a("li"),Kte=a("strong"),uZe=o("vilt"),bZe=o(" \u2014 "),cR=a("a"),vZe=o("ViltConfig"),FZe=o(" (ViLT model)"),TZe=l(),gg=a("li"),Zte=a("strong"),MZe=o("vision-encoder-decoder"),EZe=o(" \u2014 "),fR=a("a"),CZe=o("VisionEncoderDecoderConfig"),wZe=o(" (Vision Encoder decoder model)"),AZe=l(),hg=a("li"),eae=a("strong"),LZe=o("vision-text-dual-encoder"),yZe=o(" \u2014 "),mR=a("a"),xZe=o("VisionTextDualEncoderConfig"),$Ze=o(" (VisionTextDualEncoder model)"),kZe=l(),pg=a("li"),oae=a("strong"),SZe=o("visual_bert"),RZe=o(" \u2014 "),gR=a("a"),PZe=o("VisualBertConfig"),BZe=o(" (VisualBERT model)"),IZe=l(),_g=a("li"),rae=a("strong"),NZe=o("vit"),qZe=o(" \u2014 "),hR=a("a"),jZe=o("ViTConfig"),DZe=o(" (ViT model)"),GZe=l(),ug=a("li"),tae=a("strong"),OZe=o("vit_mae"),VZe=o(" \u2014 "),pR=a("a"),XZe=o("ViTMAEConfig"),zZe=o(" (ViTMAE model)"),WZe=l(),bg=a("li"),aae=a("strong"),QZe=o("wav2vec2"),HZe=o(" \u2014 "),_R=a("a"),UZe=o("Wav2Vec2Config"),JZe=o(" (Wav2Vec2 model)"),YZe=l(),vg=a("li"),nae=a("strong"),KZe=o("wav2vec2-conformer"),ZZe=o(" \u2014 "),uR=a("a"),eeo=o("Wav2Vec2ConformerConfig"),oeo=o(" (Wav2Vec2-Conformer model)"),reo=l(),Fg=a("li"),sae=a("strong"),teo=o("wavlm"),aeo=o(" \u2014 "),bR=a("a"),neo=o("WavLMConfig"),seo=o(" (WavLM model)"),leo=l(),Tg=a("li"),lae=a("strong"),ieo=o("xglm"),deo=o(" \u2014 "),vR=a("a"),ceo=o("XGLMConfig"),feo=o(" (XGLM model)"),meo=l(),Mg=a("li"),iae=a("strong"),geo=o("xlm"),heo=o(" \u2014 "),FR=a("a"),peo=o("XLMConfig"),_eo=o(" (XLM model)"),ueo=l(),Eg=a("li"),dae=a("strong"),beo=o("xlm-prophetnet"),veo=o(" \u2014 "),TR=a("a"),Feo=o("XLMProphetNetConfig"),Teo=o(" (XLM-ProphetNet model)"),Meo=l(),Cg=a("li"),cae=a("strong"),Eeo=o("xlm-roberta"),Ceo=o(" \u2014 "),MR=a("a"),weo=o("XLMRobertaConfig"),Aeo=o(" (XLM-RoBERTa model)"),Leo=l(),wg=a("li"),fae=a("strong"),yeo=o("xlm-roberta-xl"),xeo=o(" \u2014 "),ER=a("a"),$eo=o("XLMRobertaXLConfig"),keo=o(" (XLM-RoBERTa-XL model)"),Seo=l(),Ag=a("li"),mae=a("strong"),Reo=o("xlnet"),Peo=o(" \u2014 "),CR=a("a"),Beo=o("XLNetConfig"),Ieo=o(" (XLNet model)"),Neo=l(),Lg=a("li"),gae=a("strong"),qeo=o("yolos"),jeo=o(" \u2014 "),wR=a("a"),Deo=o("YolosConfig"),Geo=o(" (YOLOS model)"),Oeo=l(),yg=a("li"),hae=a("strong"),Veo=o("yoso"),Xeo=o(" \u2014 "),AR=a("a"),zeo=o("YosoConfig"),Weo=o(" (YOSO model)"),Qeo=l(),F(xg.$$.fragment),Heo=l(),$g=a("div"),F(tL.$$.fragment),Ueo=l(),pae=a("p"),Jeo=o("Register a new configuration for this class."),Xje=l(),Ei=a("h2"),kg=a("a"),_ae=a("span"),F(aL.$$.fragment),Yeo=l(),uae=a("span"),Keo=o("AutoTokenizer"),zje=l(),wo=a("div"),F(nL.$$.fragment),Zeo=l(),sL=a("p"),eoo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LR=a("a"),ooo=o("AutoTokenizer.from_pretrained()"),roo=o(" class method."),too=l(),lL=a("p"),aoo=o("This class cannot be instantiated directly using "),bae=a("code"),noo=o("__init__()"),soo=o(" (throws an error)."),loo=l(),Cr=a("div"),F(iL.$$.fragment),ioo=l(),vae=a("p"),doo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),coo=l(),La=a("p"),foo=o("The tokenizer class to instantiate is selected based on the "),Fae=a("code"),moo=o("model_type"),goo=o(` property of the config object (either
passed as an argument or loaded from `),Tae=a("code"),hoo=o("pretrained_model_name_or_path"),poo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=a("code"),_oo=o("pretrained_model_name_or_path"),uoo=o(":"),boo=l(),k=a("ul"),Sn=a("li"),Eae=a("strong"),voo=o("albert"),Foo=o(" \u2014 "),yR=a("a"),Too=o("AlbertTokenizer"),Moo=o(" or "),xR=a("a"),Eoo=o("AlbertTokenizerFast"),Coo=o(" (ALBERT model)"),woo=l(),Rn=a("li"),Cae=a("strong"),Aoo=o("bart"),Loo=o(" \u2014 "),$R=a("a"),yoo=o("BartTokenizer"),xoo=o(" or "),kR=a("a"),$oo=o("BartTokenizerFast"),koo=o(" (BART model)"),Soo=l(),Pn=a("li"),wae=a("strong"),Roo=o("barthez"),Poo=o(" \u2014 "),SR=a("a"),Boo=o("BarthezTokenizer"),Ioo=o(" or "),RR=a("a"),Noo=o("BarthezTokenizerFast"),qoo=o(" (BARThez model)"),joo=l(),Sg=a("li"),Aae=a("strong"),Doo=o("bartpho"),Goo=o(" \u2014 "),PR=a("a"),Ooo=o("BartphoTokenizer"),Voo=o(" (BARTpho model)"),Xoo=l(),Bn=a("li"),Lae=a("strong"),zoo=o("bert"),Woo=o(" \u2014 "),BR=a("a"),Qoo=o("BertTokenizer"),Hoo=o(" or "),IR=a("a"),Uoo=o("BertTokenizerFast"),Joo=o(" (BERT model)"),Yoo=l(),Rg=a("li"),yae=a("strong"),Koo=o("bert-generation"),Zoo=o(" \u2014 "),NR=a("a"),ero=o("BertGenerationTokenizer"),oro=o(" (Bert Generation model)"),rro=l(),Pg=a("li"),xae=a("strong"),tro=o("bert-japanese"),aro=o(" \u2014 "),qR=a("a"),nro=o("BertJapaneseTokenizer"),sro=o(" (BertJapanese model)"),lro=l(),Bg=a("li"),$ae=a("strong"),iro=o("bertweet"),dro=o(" \u2014 "),jR=a("a"),cro=o("BertweetTokenizer"),fro=o(" (BERTweet model)"),mro=l(),In=a("li"),kae=a("strong"),gro=o("big_bird"),hro=o(" \u2014 "),DR=a("a"),pro=o("BigBirdTokenizer"),_ro=o(" or "),GR=a("a"),uro=o("BigBirdTokenizerFast"),bro=o(" (BigBird model)"),vro=l(),Nn=a("li"),Sae=a("strong"),Fro=o("bigbird_pegasus"),Tro=o(" \u2014 "),OR=a("a"),Mro=o("PegasusTokenizer"),Ero=o(" or "),VR=a("a"),Cro=o("PegasusTokenizerFast"),wro=o(" (BigBird-Pegasus model)"),Aro=l(),qn=a("li"),Rae=a("strong"),Lro=o("blenderbot"),yro=o(" \u2014 "),XR=a("a"),xro=o("BlenderbotTokenizer"),$ro=o(" or "),zR=a("a"),kro=o("BlenderbotTokenizerFast"),Sro=o(" (Blenderbot model)"),Rro=l(),Ig=a("li"),Pae=a("strong"),Pro=o("blenderbot-small"),Bro=o(" \u2014 "),WR=a("a"),Iro=o("BlenderbotSmallTokenizer"),Nro=o(" (BlenderbotSmall model)"),qro=l(),Ng=a("li"),Bae=a("strong"),jro=o("bloom"),Dro=o(" \u2014 "),QR=a("a"),Gro=o("BloomTokenizerFast"),Oro=o(" (BLOOM model)"),Vro=l(),qg=a("li"),Iae=a("strong"),Xro=o("byt5"),zro=o(" \u2014 "),HR=a("a"),Wro=o("ByT5Tokenizer"),Qro=o(" (ByT5 model)"),Hro=l(),jn=a("li"),Nae=a("strong"),Uro=o("camembert"),Jro=o(" \u2014 "),UR=a("a"),Yro=o("CamembertTokenizer"),Kro=o(" or "),JR=a("a"),Zro=o("CamembertTokenizerFast"),eto=o(" (CamemBERT model)"),oto=l(),jg=a("li"),qae=a("strong"),rto=o("canine"),tto=o(" \u2014 "),YR=a("a"),ato=o("CanineTokenizer"),nto=o(" (CANINE model)"),sto=l(),Dn=a("li"),jae=a("strong"),lto=o("clip"),ito=o(" \u2014 "),KR=a("a"),dto=o("CLIPTokenizer"),cto=o(" or "),ZR=a("a"),fto=o("CLIPTokenizerFast"),mto=o(" (CLIP model)"),gto=l(),Gn=a("li"),Dae=a("strong"),hto=o("convbert"),pto=o(" \u2014 "),eP=a("a"),_to=o("ConvBertTokenizer"),uto=o(" or "),oP=a("a"),bto=o("ConvBertTokenizerFast"),vto=o(" (ConvBERT model)"),Fto=l(),On=a("li"),Gae=a("strong"),Tto=o("cpm"),Mto=o(" \u2014 "),rP=a("a"),Eto=o("CpmTokenizer"),Cto=o(" or "),tP=a("a"),wto=o("CpmTokenizerFast"),Ato=o(" (CPM model)"),Lto=l(),Dg=a("li"),Oae=a("strong"),yto=o("ctrl"),xto=o(" \u2014 "),aP=a("a"),$to=o("CTRLTokenizer"),kto=o(" (CTRL model)"),Sto=l(),Vn=a("li"),Vae=a("strong"),Rto=o("data2vec-text"),Pto=o(" \u2014 "),nP=a("a"),Bto=o("RobertaTokenizer"),Ito=o(" or "),sP=a("a"),Nto=o("RobertaTokenizerFast"),qto=o(" (Data2VecText model)"),jto=l(),Xn=a("li"),Xae=a("strong"),Dto=o("deberta"),Gto=o(" \u2014 "),lP=a("a"),Oto=o("DebertaTokenizer"),Vto=o(" or "),iP=a("a"),Xto=o("DebertaTokenizerFast"),zto=o(" (DeBERTa model)"),Wto=l(),zn=a("li"),zae=a("strong"),Qto=o("deberta-v2"),Hto=o(" \u2014 "),dP=a("a"),Uto=o("DebertaV2Tokenizer"),Jto=o(" or "),cP=a("a"),Yto=o("DebertaV2TokenizerFast"),Kto=o(" (DeBERTa-v2 model)"),Zto=l(),Wn=a("li"),Wae=a("strong"),eao=o("distilbert"),oao=o(" \u2014 "),fP=a("a"),rao=o("DistilBertTokenizer"),tao=o(" or "),mP=a("a"),aao=o("DistilBertTokenizerFast"),nao=o(" (DistilBERT model)"),sao=l(),Qn=a("li"),Qae=a("strong"),lao=o("dpr"),iao=o(" \u2014 "),gP=a("a"),dao=o("DPRQuestionEncoderTokenizer"),cao=o(" or "),hP=a("a"),fao=o("DPRQuestionEncoderTokenizerFast"),mao=o(" (DPR model)"),gao=l(),Hn=a("li"),Hae=a("strong"),hao=o("electra"),pao=o(" \u2014 "),pP=a("a"),_ao=o("ElectraTokenizer"),uao=o(" or "),_P=a("a"),bao=o("ElectraTokenizerFast"),vao=o(" (ELECTRA model)"),Fao=l(),Gg=a("li"),Uae=a("strong"),Tao=o("flaubert"),Mao=o(" \u2014 "),uP=a("a"),Eao=o("FlaubertTokenizer"),Cao=o(" (FlauBERT model)"),wao=l(),Un=a("li"),Jae=a("strong"),Aao=o("fnet"),Lao=o(" \u2014 "),bP=a("a"),yao=o("FNetTokenizer"),xao=o(" or "),vP=a("a"),$ao=o("FNetTokenizerFast"),kao=o(" (FNet model)"),Sao=l(),Og=a("li"),Yae=a("strong"),Rao=o("fsmt"),Pao=o(" \u2014 "),FP=a("a"),Bao=o("FSMTTokenizer"),Iao=o(" (FairSeq Machine-Translation model)"),Nao=l(),Jn=a("li"),Kae=a("strong"),qao=o("funnel"),jao=o(" \u2014 "),TP=a("a"),Dao=o("FunnelTokenizer"),Gao=o(" or "),MP=a("a"),Oao=o("FunnelTokenizerFast"),Vao=o(" (Funnel Transformer model)"),Xao=l(),Yn=a("li"),Zae=a("strong"),zao=o("gpt2"),Wao=o(" \u2014 "),EP=a("a"),Qao=o("GPT2Tokenizer"),Hao=o(" or "),CP=a("a"),Uao=o("GPT2TokenizerFast"),Jao=o(" (OpenAI GPT-2 model)"),Yao=l(),Kn=a("li"),ene=a("strong"),Kao=o("gpt_neo"),Zao=o(" \u2014 "),wP=a("a"),eno=o("GPT2Tokenizer"),ono=o(" or "),AP=a("a"),rno=o("GPT2TokenizerFast"),tno=o(" (GPT Neo model)"),ano=l(),Vg=a("li"),one=a("strong"),nno=o("gpt_neox"),sno=o(" \u2014 "),LP=a("a"),lno=o("GPTNeoXTokenizerFast"),ino=o(" (GPT NeoX model)"),dno=l(),Zn=a("li"),rne=a("strong"),cno=o("gptj"),fno=o(" \u2014 "),yP=a("a"),mno=o("GPT2Tokenizer"),gno=o(" or "),xP=a("a"),hno=o("GPT2TokenizerFast"),pno=o(" (GPT-J model)"),_no=l(),es=a("li"),tne=a("strong"),uno=o("herbert"),bno=o(" \u2014 "),$P=a("a"),vno=o("HerbertTokenizer"),Fno=o(" or "),kP=a("a"),Tno=o("HerbertTokenizerFast"),Mno=o(" (HerBERT model)"),Eno=l(),Xg=a("li"),ane=a("strong"),Cno=o("hubert"),wno=o(" \u2014 "),SP=a("a"),Ano=o("Wav2Vec2CTCTokenizer"),Lno=o(" (Hubert model)"),yno=l(),os=a("li"),nne=a("strong"),xno=o("ibert"),$no=o(" \u2014 "),RP=a("a"),kno=o("RobertaTokenizer"),Sno=o(" or "),PP=a("a"),Rno=o("RobertaTokenizerFast"),Pno=o(" (I-BERT model)"),Bno=l(),rs=a("li"),sne=a("strong"),Ino=o("layoutlm"),Nno=o(" \u2014 "),BP=a("a"),qno=o("LayoutLMTokenizer"),jno=o(" or "),IP=a("a"),Dno=o("LayoutLMTokenizerFast"),Gno=o(" (LayoutLM model)"),Ono=l(),ts=a("li"),lne=a("strong"),Vno=o("layoutlmv2"),Xno=o(" \u2014 "),NP=a("a"),zno=o("LayoutLMv2Tokenizer"),Wno=o(" or "),qP=a("a"),Qno=o("LayoutLMv2TokenizerFast"),Hno=o(" (LayoutLMv2 model)"),Uno=l(),as=a("li"),ine=a("strong"),Jno=o("layoutlmv3"),Yno=o(" \u2014 "),jP=a("a"),Kno=o("LayoutLMv3Tokenizer"),Zno=o(" or "),DP=a("a"),eso=o("LayoutLMv3TokenizerFast"),oso=o(" (LayoutLMv3 model)"),rso=l(),ns=a("li"),dne=a("strong"),tso=o("layoutxlm"),aso=o(" \u2014 "),GP=a("a"),nso=o("LayoutXLMTokenizer"),sso=o(" or "),OP=a("a"),lso=o("LayoutXLMTokenizerFast"),iso=o(" (LayoutXLM model)"),dso=l(),ss=a("li"),cne=a("strong"),cso=o("led"),fso=o(" \u2014 "),VP=a("a"),mso=o("LEDTokenizer"),gso=o(" or "),XP=a("a"),hso=o("LEDTokenizerFast"),pso=o(" (LED model)"),_so=l(),ls=a("li"),fne=a("strong"),uso=o("longformer"),bso=o(" \u2014 "),zP=a("a"),vso=o("LongformerTokenizer"),Fso=o(" or "),WP=a("a"),Tso=o("LongformerTokenizerFast"),Mso=o(" (Longformer model)"),Eso=l(),zg=a("li"),mne=a("strong"),Cso=o("luke"),wso=o(" \u2014 "),QP=a("a"),Aso=o("LukeTokenizer"),Lso=o(" (LUKE model)"),yso=l(),is=a("li"),gne=a("strong"),xso=o("lxmert"),$so=o(" \u2014 "),HP=a("a"),kso=o("LxmertTokenizer"),Sso=o(" or "),UP=a("a"),Rso=o("LxmertTokenizerFast"),Pso=o(" (LXMERT model)"),Bso=l(),Wg=a("li"),hne=a("strong"),Iso=o("m2m_100"),Nso=o(" \u2014 "),JP=a("a"),qso=o("M2M100Tokenizer"),jso=o(" (M2M100 model)"),Dso=l(),Qg=a("li"),pne=a("strong"),Gso=o("marian"),Oso=o(" \u2014 "),YP=a("a"),Vso=o("MarianTokenizer"),Xso=o(" (Marian model)"),zso=l(),ds=a("li"),_ne=a("strong"),Wso=o("mbart"),Qso=o(" \u2014 "),KP=a("a"),Hso=o("MBartTokenizer"),Uso=o(" or "),ZP=a("a"),Jso=o("MBartTokenizerFast"),Yso=o(" (mBART model)"),Kso=l(),cs=a("li"),une=a("strong"),Zso=o("mbart50"),elo=o(" \u2014 "),eB=a("a"),olo=o("MBart50Tokenizer"),rlo=o(" or "),oB=a("a"),tlo=o("MBart50TokenizerFast"),alo=o(" (mBART-50 model)"),nlo=l(),fs=a("li"),bne=a("strong"),slo=o("megatron-bert"),llo=o(" \u2014 "),rB=a("a"),ilo=o("BertTokenizer"),dlo=o(" or "),tB=a("a"),clo=o("BertTokenizerFast"),flo=o(" (Megatron-BERT model)"),mlo=l(),Hg=a("li"),vne=a("strong"),glo=o("mluke"),hlo=o(" \u2014 "),aB=a("a"),plo=o("MLukeTokenizer"),_lo=o(" (mLUKE model)"),ulo=l(),ms=a("li"),Fne=a("strong"),blo=o("mobilebert"),vlo=o(" \u2014 "),nB=a("a"),Flo=o("MobileBertTokenizer"),Tlo=o(" or "),sB=a("a"),Mlo=o("MobileBertTokenizerFast"),Elo=o(" (MobileBERT model)"),Clo=l(),gs=a("li"),Tne=a("strong"),wlo=o("mpnet"),Alo=o(" \u2014 "),lB=a("a"),Llo=o("MPNetTokenizer"),ylo=o(" or "),iB=a("a"),xlo=o("MPNetTokenizerFast"),$lo=o(" (MPNet model)"),klo=l(),hs=a("li"),Mne=a("strong"),Slo=o("mt5"),Rlo=o(" \u2014 "),dB=a("a"),Plo=o("MT5Tokenizer"),Blo=o(" or "),cB=a("a"),Ilo=o("MT5TokenizerFast"),Nlo=o(" (MT5 model)"),qlo=l(),ps=a("li"),Ene=a("strong"),jlo=o("nystromformer"),Dlo=o(" \u2014 "),fB=a("a"),Glo=o("AlbertTokenizer"),Olo=o(" or "),mB=a("a"),Vlo=o("AlbertTokenizerFast"),Xlo=o(" (Nystr\xF6mformer model)"),zlo=l(),_s=a("li"),Cne=a("strong"),Wlo=o("openai-gpt"),Qlo=o(" \u2014 "),gB=a("a"),Hlo=o("OpenAIGPTTokenizer"),Ulo=o(" or "),hB=a("a"),Jlo=o("OpenAIGPTTokenizerFast"),Ylo=o(" (OpenAI GPT model)"),Klo=l(),Ug=a("li"),wne=a("strong"),Zlo=o("opt"),eio=o(" \u2014 "),pB=a("a"),oio=o("GPT2Tokenizer"),rio=o(" (OPT model)"),tio=l(),us=a("li"),Ane=a("strong"),aio=o("pegasus"),nio=o(" \u2014 "),_B=a("a"),sio=o("PegasusTokenizer"),lio=o(" or "),uB=a("a"),iio=o("PegasusTokenizerFast"),dio=o(" (Pegasus model)"),cio=l(),Jg=a("li"),Lne=a("strong"),fio=o("perceiver"),mio=o(" \u2014 "),bB=a("a"),gio=o("PerceiverTokenizer"),hio=o(" (Perceiver model)"),pio=l(),Yg=a("li"),yne=a("strong"),_io=o("phobert"),uio=o(" \u2014 "),vB=a("a"),bio=o("PhobertTokenizer"),vio=o(" (PhoBERT model)"),Fio=l(),Kg=a("li"),xne=a("strong"),Tio=o("plbart"),Mio=o(" \u2014 "),FB=a("a"),Eio=o("PLBartTokenizer"),Cio=o(" (PLBart model)"),wio=l(),Zg=a("li"),$ne=a("strong"),Aio=o("prophetnet"),Lio=o(" \u2014 "),TB=a("a"),yio=o("ProphetNetTokenizer"),xio=o(" (ProphetNet model)"),$io=l(),bs=a("li"),kne=a("strong"),kio=o("qdqbert"),Sio=o(" \u2014 "),MB=a("a"),Rio=o("BertTokenizer"),Pio=o(" or "),EB=a("a"),Bio=o("BertTokenizerFast"),Iio=o(" (QDQBert model)"),Nio=l(),eh=a("li"),Sne=a("strong"),qio=o("rag"),jio=o(" \u2014 "),CB=a("a"),Dio=o("RagTokenizer"),Gio=o(" (RAG model)"),Oio=l(),vs=a("li"),Rne=a("strong"),Vio=o("realm"),Xio=o(" \u2014 "),wB=a("a"),zio=o("RealmTokenizer"),Wio=o(" or "),AB=a("a"),Qio=o("RealmTokenizerFast"),Hio=o(" (REALM model)"),Uio=l(),Fs=a("li"),Pne=a("strong"),Jio=o("reformer"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("ReformerTokenizer"),Zio=o(" or "),yB=a("a"),edo=o("ReformerTokenizerFast"),odo=o(" (Reformer model)"),rdo=l(),Ts=a("li"),Bne=a("strong"),tdo=o("rembert"),ado=o(" \u2014 "),xB=a("a"),ndo=o("RemBertTokenizer"),sdo=o(" or "),$B=a("a"),ldo=o("RemBertTokenizerFast"),ido=o(" (RemBERT model)"),ddo=l(),Ms=a("li"),Ine=a("strong"),cdo=o("retribert"),fdo=o(" \u2014 "),kB=a("a"),mdo=o("RetriBertTokenizer"),gdo=o(" or "),SB=a("a"),hdo=o("RetriBertTokenizerFast"),pdo=o(" (RetriBERT model)"),_do=l(),Es=a("li"),Nne=a("strong"),udo=o("roberta"),bdo=o(" \u2014 "),RB=a("a"),vdo=o("RobertaTokenizer"),Fdo=o(" or "),PB=a("a"),Tdo=o("RobertaTokenizerFast"),Mdo=o(" (RoBERTa model)"),Edo=l(),Cs=a("li"),qne=a("strong"),Cdo=o("roformer"),wdo=o(" \u2014 "),BB=a("a"),Ado=o("RoFormerTokenizer"),Ldo=o(" or "),IB=a("a"),ydo=o("RoFormerTokenizerFast"),xdo=o(" (RoFormer model)"),$do=l(),oh=a("li"),jne=a("strong"),kdo=o("speech_to_text"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("Speech2TextTokenizer"),Pdo=o(" (Speech2Text model)"),Bdo=l(),rh=a("li"),Dne=a("strong"),Ido=o("speech_to_text_2"),Ndo=o(" \u2014 "),qB=a("a"),qdo=o("Speech2Text2Tokenizer"),jdo=o(" (Speech2Text2 model)"),Ddo=l(),ws=a("li"),Gne=a("strong"),Gdo=o("splinter"),Odo=o(" \u2014 "),jB=a("a"),Vdo=o("SplinterTokenizer"),Xdo=o(" or "),DB=a("a"),zdo=o("SplinterTokenizerFast"),Wdo=o(" (Splinter model)"),Qdo=l(),As=a("li"),One=a("strong"),Hdo=o("squeezebert"),Udo=o(" \u2014 "),GB=a("a"),Jdo=o("SqueezeBertTokenizer"),Ydo=o(" or "),OB=a("a"),Kdo=o("SqueezeBertTokenizerFast"),Zdo=o(" (SqueezeBERT model)"),eco=l(),Ls=a("li"),Vne=a("strong"),oco=o("t5"),rco=o(" \u2014 "),VB=a("a"),tco=o("T5Tokenizer"),aco=o(" or "),XB=a("a"),nco=o("T5TokenizerFast"),sco=o(" (T5 model)"),lco=l(),th=a("li"),Xne=a("strong"),ico=o("tapas"),dco=o(" \u2014 "),zB=a("a"),cco=o("TapasTokenizer"),fco=o(" (TAPAS model)"),mco=l(),ah=a("li"),zne=a("strong"),gco=o("tapex"),hco=o(" \u2014 "),WB=a("a"),pco=o("TapexTokenizer"),_co=o(" (TAPEX model)"),uco=l(),nh=a("li"),Wne=a("strong"),bco=o("transfo-xl"),vco=o(" \u2014 "),QB=a("a"),Fco=o("TransfoXLTokenizer"),Tco=o(" (Transformer-XL model)"),Mco=l(),ys=a("li"),Qne=a("strong"),Eco=o("visual_bert"),Cco=o(" \u2014 "),HB=a("a"),wco=o("BertTokenizer"),Aco=o(" or "),UB=a("a"),Lco=o("BertTokenizerFast"),yco=o(" (VisualBERT model)"),xco=l(),sh=a("li"),Hne=a("strong"),$co=o("wav2vec2"),kco=o(" \u2014 "),JB=a("a"),Sco=o("Wav2Vec2CTCTokenizer"),Rco=o(" (Wav2Vec2 model)"),Pco=l(),lh=a("li"),Une=a("strong"),Bco=o("wav2vec2-conformer"),Ico=o(" \u2014 "),YB=a("a"),Nco=o("Wav2Vec2CTCTokenizer"),qco=o(" (Wav2Vec2-Conformer model)"),jco=l(),ih=a("li"),Jne=a("strong"),Dco=o("wav2vec2_phoneme"),Gco=o(" \u2014 "),KB=a("a"),Oco=o("Wav2Vec2PhonemeCTCTokenizer"),Vco=o(" (Wav2Vec2Phoneme model)"),Xco=l(),xs=a("li"),Yne=a("strong"),zco=o("xglm"),Wco=o(" \u2014 "),ZB=a("a"),Qco=o("XGLMTokenizer"),Hco=o(" or "),eI=a("a"),Uco=o("XGLMTokenizerFast"),Jco=o(" (XGLM model)"),Yco=l(),dh=a("li"),Kne=a("strong"),Kco=o("xlm"),Zco=o(" \u2014 "),oI=a("a"),efo=o("XLMTokenizer"),ofo=o(" (XLM model)"),rfo=l(),ch=a("li"),Zne=a("strong"),tfo=o("xlm-prophetnet"),afo=o(" \u2014 "),rI=a("a"),nfo=o("XLMProphetNetTokenizer"),sfo=o(" (XLM-ProphetNet model)"),lfo=l(),$s=a("li"),ese=a("strong"),ifo=o("xlm-roberta"),dfo=o(" \u2014 "),tI=a("a"),cfo=o("XLMRobertaTokenizer"),ffo=o(" or "),aI=a("a"),mfo=o("XLMRobertaTokenizerFast"),gfo=o(" (XLM-RoBERTa model)"),hfo=l(),ks=a("li"),ose=a("strong"),pfo=o("xlm-roberta-xl"),_fo=o(" \u2014 "),nI=a("a"),ufo=o("RobertaTokenizer"),bfo=o(" or "),sI=a("a"),vfo=o("RobertaTokenizerFast"),Ffo=o(" (XLM-RoBERTa-XL model)"),Tfo=l(),Ss=a("li"),rse=a("strong"),Mfo=o("xlnet"),Efo=o(" \u2014 "),lI=a("a"),Cfo=o("XLNetTokenizer"),wfo=o(" or "),iI=a("a"),Afo=o("XLNetTokenizerFast"),Lfo=o(" (XLNet model)"),yfo=l(),Rs=a("li"),tse=a("strong"),xfo=o("yoso"),$fo=o(" \u2014 "),dI=a("a"),kfo=o("AlbertTokenizer"),Sfo=o(" or "),cI=a("a"),Rfo=o("AlbertTokenizerFast"),Pfo=o(" (YOSO model)"),Bfo=l(),F(fh.$$.fragment),Ifo=l(),mh=a("div"),F(dL.$$.fragment),Nfo=l(),ase=a("p"),qfo=o("Register a new tokenizer in this mapping."),Wje=l(),Ci=a("h2"),gh=a("a"),nse=a("span"),F(cL.$$.fragment),jfo=l(),sse=a("span"),Dfo=o("AutoFeatureExtractor"),Qje=l(),Ao=a("div"),F(fL.$$.fragment),Gfo=l(),mL=a("p"),Ofo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fI=a("a"),Vfo=o("AutoFeatureExtractor.from_pretrained()"),Xfo=o(" class method."),zfo=l(),gL=a("p"),Wfo=o("This class cannot be instantiated directly using "),lse=a("code"),Qfo=o("__init__()"),Hfo=o(" (throws an error)."),Ufo=l(),He=a("div"),F(hL.$$.fragment),Jfo=l(),ise=a("p"),Yfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Kfo=l(),ya=a("p"),Zfo=o("The feature extractor class to instantiate is selected based on the "),dse=a("code"),emo=o("model_type"),omo=o(` property of the config object
(either passed as an argument or loaded from `),cse=a("code"),rmo=o("pretrained_model_name_or_path"),tmo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fse=a("code"),amo=o("pretrained_model_name_or_path"),nmo=o(":"),smo=l(),Y=a("ul"),hh=a("li"),mse=a("strong"),lmo=o("beit"),imo=o(" \u2014 "),mI=a("a"),dmo=o("BeitFeatureExtractor"),cmo=o(" (BEiT model)"),fmo=l(),ph=a("li"),gse=a("strong"),mmo=o("clip"),gmo=o(" \u2014 "),gI=a("a"),hmo=o("CLIPFeatureExtractor"),pmo=o(" (CLIP model)"),_mo=l(),_h=a("li"),hse=a("strong"),umo=o("convnext"),bmo=o(" \u2014 "),hI=a("a"),vmo=o("ConvNextFeatureExtractor"),Fmo=o(" (ConvNeXT model)"),Tmo=l(),uh=a("li"),pse=a("strong"),Mmo=o("cvt"),Emo=o(" \u2014 "),pI=a("a"),Cmo=o("ConvNextFeatureExtractor"),wmo=o(" (CvT model)"),Amo=l(),bh=a("li"),_se=a("strong"),Lmo=o("data2vec-audio"),ymo=o(" \u2014 "),_I=a("a"),xmo=o("Wav2Vec2FeatureExtractor"),$mo=o(" (Data2VecAudio model)"),kmo=l(),vh=a("li"),use=a("strong"),Smo=o("data2vec-vision"),Rmo=o(" \u2014 "),uI=a("a"),Pmo=o("BeitFeatureExtractor"),Bmo=o(" (Data2VecVision model)"),Imo=l(),Fh=a("li"),bse=a("strong"),Nmo=o("deit"),qmo=o(" \u2014 "),bI=a("a"),jmo=o("DeiTFeatureExtractor"),Dmo=o(" (DeiT model)"),Gmo=l(),Th=a("li"),vse=a("strong"),Omo=o("detr"),Vmo=o(" \u2014 "),vI=a("a"),Xmo=o("DetrFeatureExtractor"),zmo=o(" (DETR model)"),Wmo=l(),Mh=a("li"),Fse=a("strong"),Qmo=o("dpt"),Hmo=o(" \u2014 "),FI=a("a"),Umo=o("DPTFeatureExtractor"),Jmo=o(" (DPT model)"),Ymo=l(),Eh=a("li"),Tse=a("strong"),Kmo=o("flava"),Zmo=o(" \u2014 "),TI=a("a"),ego=o("FlavaFeatureExtractor"),ogo=o(" (FLAVA model)"),rgo=l(),Ch=a("li"),Mse=a("strong"),tgo=o("glpn"),ago=o(" \u2014 "),MI=a("a"),ngo=o("GLPNFeatureExtractor"),sgo=o(" (GLPN model)"),lgo=l(),wh=a("li"),Ese=a("strong"),igo=o("hubert"),dgo=o(" \u2014 "),EI=a("a"),cgo=o("Wav2Vec2FeatureExtractor"),fgo=o(" (Hubert model)"),mgo=l(),Ah=a("li"),Cse=a("strong"),ggo=o("imagegpt"),hgo=o(" \u2014 "),CI=a("a"),pgo=o("ImageGPTFeatureExtractor"),_go=o(" (ImageGPT model)"),ugo=l(),Lh=a("li"),wse=a("strong"),bgo=o("layoutlmv2"),vgo=o(" \u2014 "),wI=a("a"),Fgo=o("LayoutLMv2FeatureExtractor"),Tgo=o(" (LayoutLMv2 model)"),Mgo=l(),yh=a("li"),Ase=a("strong"),Ego=o("layoutlmv3"),Cgo=o(" \u2014 "),AI=a("a"),wgo=o("LayoutLMv3FeatureExtractor"),Ago=o(" (LayoutLMv3 model)"),Lgo=l(),xh=a("li"),Lse=a("strong"),ygo=o("levit"),xgo=o(" \u2014 "),LI=a("a"),$go=o("LevitFeatureExtractor"),kgo=o(" (LeViT model)"),Sgo=l(),$h=a("li"),yse=a("strong"),Rgo=o("maskformer"),Pgo=o(" \u2014 "),yI=a("a"),Bgo=o("MaskFormerFeatureExtractor"),Igo=o(" (MaskFormer model)"),Ngo=l(),kh=a("li"),xse=a("strong"),qgo=o("mctct"),jgo=o(" \u2014 "),xI=a("a"),Dgo=o("MCTCTFeatureExtractor"),Ggo=o(" (M-CTC-T model)"),Ogo=l(),Sh=a("li"),$se=a("strong"),Vgo=o("mobilevit"),Xgo=o(" \u2014 "),$I=a("a"),zgo=o("MobileViTFeatureExtractor"),Wgo=o(" (MobileViT model)"),Qgo=l(),Rh=a("li"),kse=a("strong"),Hgo=o("perceiver"),Ugo=o(" \u2014 "),kI=a("a"),Jgo=o("PerceiverFeatureExtractor"),Ygo=o(" (Perceiver model)"),Kgo=l(),Ph=a("li"),Sse=a("strong"),Zgo=o("poolformer"),eho=o(" \u2014 "),SI=a("a"),oho=o("PoolFormerFeatureExtractor"),rho=o(" (PoolFormer model)"),tho=l(),Bh=a("li"),Rse=a("strong"),aho=o("regnet"),nho=o(" \u2014 "),RI=a("a"),sho=o("ConvNextFeatureExtractor"),lho=o(" (RegNet model)"),iho=l(),Ih=a("li"),Pse=a("strong"),dho=o("resnet"),cho=o(" \u2014 "),PI=a("a"),fho=o("ConvNextFeatureExtractor"),mho=o(" (ResNet model)"),gho=l(),Nh=a("li"),Bse=a("strong"),hho=o("segformer"),pho=o(" \u2014 "),BI=a("a"),_ho=o("SegformerFeatureExtractor"),uho=o(" (SegFormer model)"),bho=l(),qh=a("li"),Ise=a("strong"),vho=o("speech_to_text"),Fho=o(" \u2014 "),II=a("a"),Tho=o("Speech2TextFeatureExtractor"),Mho=o(" (Speech2Text model)"),Eho=l(),jh=a("li"),Nse=a("strong"),Cho=o("swin"),who=o(" \u2014 "),NI=a("a"),Aho=o("ViTFeatureExtractor"),Lho=o(" (Swin Transformer model)"),yho=l(),Dh=a("li"),qse=a("strong"),xho=o("van"),$ho=o(" \u2014 "),qI=a("a"),kho=o("ConvNextFeatureExtractor"),Sho=o(" (VAN model)"),Rho=l(),Gh=a("li"),jse=a("strong"),Pho=o("vit"),Bho=o(" \u2014 "),jI=a("a"),Iho=o("ViTFeatureExtractor"),Nho=o(" (ViT model)"),qho=l(),Oh=a("li"),Dse=a("strong"),jho=o("vit_mae"),Dho=o(" \u2014 "),DI=a("a"),Gho=o("ViTFeatureExtractor"),Oho=o(" (ViTMAE model)"),Vho=l(),Vh=a("li"),Gse=a("strong"),Xho=o("wav2vec2"),zho=o(" \u2014 "),GI=a("a"),Who=o("Wav2Vec2FeatureExtractor"),Qho=o(" (Wav2Vec2 model)"),Hho=l(),Xh=a("li"),Ose=a("strong"),Uho=o("wav2vec2-conformer"),Jho=o(" \u2014 "),OI=a("a"),Yho=o("Wav2Vec2FeatureExtractor"),Kho=o(" (Wav2Vec2-Conformer model)"),Zho=l(),zh=a("li"),Vse=a("strong"),epo=o("yolos"),opo=o(" \u2014 "),VI=a("a"),rpo=o("YolosFeatureExtractor"),tpo=o(" (YOLOS model)"),apo=l(),F(Wh.$$.fragment),npo=l(),F(Qh.$$.fragment),spo=l(),Hh=a("div"),F(pL.$$.fragment),lpo=l(),Xse=a("p"),ipo=o("Register a new feature extractor for this class."),Hje=l(),wi=a("h2"),Uh=a("a"),zse=a("span"),F(_L.$$.fragment),dpo=l(),Wse=a("span"),cpo=o("AutoProcessor"),Uje=l(),Lo=a("div"),F(uL.$$.fragment),fpo=l(),bL=a("p"),mpo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),XI=a("a"),gpo=o("AutoProcessor.from_pretrained()"),hpo=o(" class method."),ppo=l(),vL=a("p"),_po=o("This class cannot be instantiated directly using "),Qse=a("code"),upo=o("__init__()"),bpo=o(" (throws an error)."),vpo=l(),Ue=a("div"),F(FL.$$.fragment),Fpo=l(),Hse=a("p"),Tpo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mpo=l(),Ai=a("p"),Epo=o("The processor class to instantiate is selected based on the "),Use=a("code"),Cpo=o("model_type"),wpo=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),Apo=o("pretrained_model_name_or_path"),Lpo=o(" if possible):"),ypo=l(),he=a("ul"),Jh=a("li"),Yse=a("strong"),xpo=o("clip"),$po=o(" \u2014 "),zI=a("a"),kpo=o("CLIPProcessor"),Spo=o(" (CLIP model)"),Rpo=l(),Yh=a("li"),Kse=a("strong"),Ppo=o("flava"),Bpo=o(" \u2014 "),Zse=a("code"),Ipo=o("FLAVAProcessor"),Npo=o(" (FLAVA model)"),qpo=l(),Kh=a("li"),ele=a("strong"),jpo=o("layoutlmv2"),Dpo=o(" \u2014 "),WI=a("a"),Gpo=o("LayoutLMv2Processor"),Opo=o(" (LayoutLMv2 model)"),Vpo=l(),Zh=a("li"),ole=a("strong"),Xpo=o("layoutlmv3"),zpo=o(" \u2014 "),QI=a("a"),Wpo=o("LayoutLMv3Processor"),Qpo=o(" (LayoutLMv3 model)"),Hpo=l(),ep=a("li"),rle=a("strong"),Upo=o("layoutxlm"),Jpo=o(" \u2014 "),HI=a("a"),Ypo=o("LayoutXLMProcessor"),Kpo=o(" (LayoutXLM model)"),Zpo=l(),op=a("li"),tle=a("strong"),e_o=o("sew"),o_o=o(" \u2014 "),UI=a("a"),r_o=o("Wav2Vec2Processor"),t_o=o(" (SEW model)"),a_o=l(),rp=a("li"),ale=a("strong"),n_o=o("sew-d"),s_o=o(" \u2014 "),JI=a("a"),l_o=o("Wav2Vec2Processor"),i_o=o(" (SEW-D model)"),d_o=l(),tp=a("li"),nle=a("strong"),c_o=o("speech_to_text"),f_o=o(" \u2014 "),YI=a("a"),m_o=o("Speech2TextProcessor"),g_o=o(" (Speech2Text model)"),h_o=l(),ap=a("li"),sle=a("strong"),p_o=o("speech_to_text_2"),__o=o(" \u2014 "),KI=a("a"),u_o=o("Speech2Text2Processor"),b_o=o(" (Speech2Text2 model)"),v_o=l(),np=a("li"),lle=a("strong"),F_o=o("trocr"),T_o=o(" \u2014 "),ZI=a("a"),M_o=o("TrOCRProcessor"),E_o=o(" (TrOCR model)"),C_o=l(),sp=a("li"),ile=a("strong"),w_o=o("unispeech"),A_o=o(" \u2014 "),eN=a("a"),L_o=o("Wav2Vec2Processor"),y_o=o(" (UniSpeech model)"),x_o=l(),lp=a("li"),dle=a("strong"),$_o=o("unispeech-sat"),k_o=o(" \u2014 "),oN=a("a"),S_o=o("Wav2Vec2Processor"),R_o=o(" (UniSpeechSat model)"),P_o=l(),ip=a("li"),cle=a("strong"),B_o=o("vilt"),I_o=o(" \u2014 "),rN=a("a"),N_o=o("ViltProcessor"),q_o=o(" (ViLT model)"),j_o=l(),dp=a("li"),fle=a("strong"),D_o=o("vision-text-dual-encoder"),G_o=o(" \u2014 "),tN=a("a"),O_o=o("VisionTextDualEncoderProcessor"),V_o=o(" (VisionTextDualEncoder model)"),X_o=l(),cp=a("li"),mle=a("strong"),z_o=o("wav2vec2"),W_o=o(" \u2014 "),aN=a("a"),Q_o=o("Wav2Vec2Processor"),H_o=o(" (Wav2Vec2 model)"),U_o=l(),fp=a("li"),gle=a("strong"),J_o=o("wav2vec2-conformer"),Y_o=o(" \u2014 "),nN=a("a"),K_o=o("Wav2Vec2Processor"),Z_o=o(" (Wav2Vec2-Conformer model)"),euo=l(),mp=a("li"),hle=a("strong"),ouo=o("wavlm"),ruo=o(" \u2014 "),sN=a("a"),tuo=o("Wav2Vec2Processor"),auo=o(" (WavLM model)"),nuo=l(),F(gp.$$.fragment),suo=l(),F(hp.$$.fragment),luo=l(),pp=a("div"),F(TL.$$.fragment),iuo=l(),ple=a("p"),duo=o("Register a new processor for this class."),Jje=l(),Li=a("h2"),_p=a("a"),_le=a("span"),F(ML.$$.fragment),cuo=l(),ule=a("span"),fuo=o("AutoModel"),Yje=l(),yo=a("div"),F(EL.$$.fragment),muo=l(),yi=a("p"),guo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lN=a("a"),huo=o("from_pretrained()"),puo=o(" class method or the "),iN=a("a"),_uo=o("from_config()"),uuo=o(` class
method.`),buo=l(),CL=a("p"),vuo=o("This class cannot be instantiated directly using "),ble=a("code"),Fuo=o("__init__()"),Tuo=o(" (throws an error)."),Muo=l(),at=a("div"),F(wL.$$.fragment),Euo=l(),vle=a("p"),Cuo=o("Instantiates one of the base model classes of the library from a configuration."),wuo=l(),xi=a("p"),Auo=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),Luo=o("not"),yuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),xuo=o("from_pretrained()"),$uo=o(" to load the model weights."),kuo=l(),F(up.$$.fragment),Suo=l(),Je=a("div"),F(AL.$$.fragment),Ruo=l(),Tle=a("p"),Puo=o("Instantiate one of the base model classes of the library from a pretrained model."),Buo=l(),xa=a("p"),Iuo=o("The model class to instantiate is selected based on the "),Mle=a("code"),Nuo=o("model_type"),quo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),juo=o("pretrained_model_name_or_path"),Duo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=a("code"),Guo=o("pretrained_model_name_or_path"),Ouo=o(":"),Vuo=l(),y=a("ul"),bp=a("li"),wle=a("strong"),Xuo=o("albert"),zuo=o(" \u2014 "),cN=a("a"),Wuo=o("AlbertModel"),Quo=o(" (ALBERT model)"),Huo=l(),vp=a("li"),Ale=a("strong"),Uuo=o("bart"),Juo=o(" \u2014 "),fN=a("a"),Yuo=o("BartModel"),Kuo=o(" (BART model)"),Zuo=l(),Fp=a("li"),Lle=a("strong"),e1o=o("beit"),o1o=o(" \u2014 "),mN=a("a"),r1o=o("BeitModel"),t1o=o(" (BEiT model)"),a1o=l(),Tp=a("li"),yle=a("strong"),n1o=o("bert"),s1o=o(" \u2014 "),gN=a("a"),l1o=o("BertModel"),i1o=o(" (BERT model)"),d1o=l(),Mp=a("li"),xle=a("strong"),c1o=o("bert-generation"),f1o=o(" \u2014 "),hN=a("a"),m1o=o("BertGenerationEncoder"),g1o=o(" (Bert Generation model)"),h1o=l(),Ep=a("li"),$le=a("strong"),p1o=o("big_bird"),_1o=o(" \u2014 "),pN=a("a"),u1o=o("BigBirdModel"),b1o=o(" (BigBird model)"),v1o=l(),Cp=a("li"),kle=a("strong"),F1o=o("bigbird_pegasus"),T1o=o(" \u2014 "),_N=a("a"),M1o=o("BigBirdPegasusModel"),E1o=o(" (BigBird-Pegasus model)"),C1o=l(),wp=a("li"),Sle=a("strong"),w1o=o("blenderbot"),A1o=o(" \u2014 "),uN=a("a"),L1o=o("BlenderbotModel"),y1o=o(" (Blenderbot model)"),x1o=l(),Ap=a("li"),Rle=a("strong"),$1o=o("blenderbot-small"),k1o=o(" \u2014 "),bN=a("a"),S1o=o("BlenderbotSmallModel"),R1o=o(" (BlenderbotSmall model)"),P1o=l(),Lp=a("li"),Ple=a("strong"),B1o=o("bloom"),I1o=o(" \u2014 "),vN=a("a"),N1o=o("BloomModel"),q1o=o(" (BLOOM model)"),j1o=l(),yp=a("li"),Ble=a("strong"),D1o=o("camembert"),G1o=o(" \u2014 "),FN=a("a"),O1o=o("CamembertModel"),V1o=o(" (CamemBERT model)"),X1o=l(),xp=a("li"),Ile=a("strong"),z1o=o("canine"),W1o=o(" \u2014 "),TN=a("a"),Q1o=o("CanineModel"),H1o=o(" (CANINE model)"),U1o=l(),$p=a("li"),Nle=a("strong"),J1o=o("clip"),Y1o=o(" \u2014 "),MN=a("a"),K1o=o("CLIPModel"),Z1o=o(" (CLIP model)"),ebo=l(),kp=a("li"),qle=a("strong"),obo=o("convbert"),rbo=o(" \u2014 "),EN=a("a"),tbo=o("ConvBertModel"),abo=o(" (ConvBERT model)"),nbo=l(),Sp=a("li"),jle=a("strong"),sbo=o("convnext"),lbo=o(" \u2014 "),CN=a("a"),ibo=o("ConvNextModel"),dbo=o(" (ConvNeXT model)"),cbo=l(),Rp=a("li"),Dle=a("strong"),fbo=o("ctrl"),mbo=o(" \u2014 "),wN=a("a"),gbo=o("CTRLModel"),hbo=o(" (CTRL model)"),pbo=l(),Pp=a("li"),Gle=a("strong"),_bo=o("cvt"),ubo=o(" \u2014 "),AN=a("a"),bbo=o("CvtModel"),vbo=o(" (CvT model)"),Fbo=l(),Bp=a("li"),Ole=a("strong"),Tbo=o("data2vec-audio"),Mbo=o(" \u2014 "),LN=a("a"),Ebo=o("Data2VecAudioModel"),Cbo=o(" (Data2VecAudio model)"),wbo=l(),Ip=a("li"),Vle=a("strong"),Abo=o("data2vec-text"),Lbo=o(" \u2014 "),yN=a("a"),ybo=o("Data2VecTextModel"),xbo=o(" (Data2VecText model)"),$bo=l(),Np=a("li"),Xle=a("strong"),kbo=o("data2vec-vision"),Sbo=o(" \u2014 "),xN=a("a"),Rbo=o("Data2VecVisionModel"),Pbo=o(" (Data2VecVision model)"),Bbo=l(),qp=a("li"),zle=a("strong"),Ibo=o("deberta"),Nbo=o(" \u2014 "),$N=a("a"),qbo=o("DebertaModel"),jbo=o(" (DeBERTa model)"),Dbo=l(),jp=a("li"),Wle=a("strong"),Gbo=o("deberta-v2"),Obo=o(" \u2014 "),kN=a("a"),Vbo=o("DebertaV2Model"),Xbo=o(" (DeBERTa-v2 model)"),zbo=l(),Dp=a("li"),Qle=a("strong"),Wbo=o("decision_transformer"),Qbo=o(" \u2014 "),SN=a("a"),Hbo=o("DecisionTransformerModel"),Ubo=o(" (Decision Transformer model)"),Jbo=l(),Gp=a("li"),Hle=a("strong"),Ybo=o("deit"),Kbo=o(" \u2014 "),RN=a("a"),Zbo=o("DeiTModel"),e2o=o(" (DeiT model)"),o2o=l(),Op=a("li"),Ule=a("strong"),r2o=o("detr"),t2o=o(" \u2014 "),PN=a("a"),a2o=o("DetrModel"),n2o=o(" (DETR model)"),s2o=l(),Vp=a("li"),Jle=a("strong"),l2o=o("distilbert"),i2o=o(" \u2014 "),BN=a("a"),d2o=o("DistilBertModel"),c2o=o(" (DistilBERT model)"),f2o=l(),Xp=a("li"),Yle=a("strong"),m2o=o("dpr"),g2o=o(" \u2014 "),IN=a("a"),h2o=o("DPRQuestionEncoder"),p2o=o(" (DPR model)"),_2o=l(),zp=a("li"),Kle=a("strong"),u2o=o("dpt"),b2o=o(" \u2014 "),NN=a("a"),v2o=o("DPTModel"),F2o=o(" (DPT model)"),T2o=l(),Wp=a("li"),Zle=a("strong"),M2o=o("electra"),E2o=o(" \u2014 "),qN=a("a"),C2o=o("ElectraModel"),w2o=o(" (ELECTRA model)"),A2o=l(),Qp=a("li"),eie=a("strong"),L2o=o("flaubert"),y2o=o(" \u2014 "),jN=a("a"),x2o=o("FlaubertModel"),$2o=o(" (FlauBERT model)"),k2o=l(),Hp=a("li"),oie=a("strong"),S2o=o("flava"),R2o=o(" \u2014 "),DN=a("a"),P2o=o("FlavaModel"),B2o=o(" (FLAVA model)"),I2o=l(),Up=a("li"),rie=a("strong"),N2o=o("fnet"),q2o=o(" \u2014 "),GN=a("a"),j2o=o("FNetModel"),D2o=o(" (FNet model)"),G2o=l(),Jp=a("li"),tie=a("strong"),O2o=o("fsmt"),V2o=o(" \u2014 "),ON=a("a"),X2o=o("FSMTModel"),z2o=o(" (FairSeq Machine-Translation model)"),W2o=l(),Ps=a("li"),aie=a("strong"),Q2o=o("funnel"),H2o=o(" \u2014 "),VN=a("a"),U2o=o("FunnelModel"),J2o=o(" or "),XN=a("a"),Y2o=o("FunnelBaseModel"),K2o=o(" (Funnel Transformer model)"),Z2o=l(),Yp=a("li"),nie=a("strong"),e4o=o("glpn"),o4o=o(" \u2014 "),zN=a("a"),r4o=o("GLPNModel"),t4o=o(" (GLPN model)"),a4o=l(),Kp=a("li"),sie=a("strong"),n4o=o("gpt2"),s4o=o(" \u2014 "),WN=a("a"),l4o=o("GPT2Model"),i4o=o(" (OpenAI GPT-2 model)"),d4o=l(),Zp=a("li"),lie=a("strong"),c4o=o("gpt_neo"),f4o=o(" \u2014 "),QN=a("a"),m4o=o("GPTNeoModel"),g4o=o(" (GPT Neo model)"),h4o=l(),e_=a("li"),iie=a("strong"),p4o=o("gpt_neox"),_4o=o(" \u2014 "),HN=a("a"),u4o=o("GPTNeoXModel"),b4o=o(" (GPT NeoX model)"),v4o=l(),o_=a("li"),die=a("strong"),F4o=o("gptj"),T4o=o(" \u2014 "),UN=a("a"),M4o=o("GPTJModel"),E4o=o(" (GPT-J model)"),C4o=l(),r_=a("li"),cie=a("strong"),w4o=o("hubert"),A4o=o(" \u2014 "),JN=a("a"),L4o=o("HubertModel"),y4o=o(" (Hubert model)"),x4o=l(),t_=a("li"),fie=a("strong"),$4o=o("ibert"),k4o=o(" \u2014 "),YN=a("a"),S4o=o("IBertModel"),R4o=o(" (I-BERT model)"),P4o=l(),a_=a("li"),mie=a("strong"),B4o=o("imagegpt"),I4o=o(" \u2014 "),KN=a("a"),N4o=o("ImageGPTModel"),q4o=o(" (ImageGPT model)"),j4o=l(),n_=a("li"),gie=a("strong"),D4o=o("layoutlm"),G4o=o(" \u2014 "),ZN=a("a"),O4o=o("LayoutLMModel"),V4o=o(" (LayoutLM model)"),X4o=l(),s_=a("li"),hie=a("strong"),z4o=o("layoutlmv2"),W4o=o(" \u2014 "),eq=a("a"),Q4o=o("LayoutLMv2Model"),H4o=o(" (LayoutLMv2 model)"),U4o=l(),l_=a("li"),pie=a("strong"),J4o=o("layoutlmv3"),Y4o=o(" \u2014 "),oq=a("a"),K4o=o("LayoutLMv3Model"),Z4o=o(" (LayoutLMv3 model)"),evo=l(),i_=a("li"),_ie=a("strong"),ovo=o("led"),rvo=o(" \u2014 "),rq=a("a"),tvo=o("LEDModel"),avo=o(" (LED model)"),nvo=l(),d_=a("li"),uie=a("strong"),svo=o("levit"),lvo=o(" \u2014 "),tq=a("a"),ivo=o("LevitModel"),dvo=o(" (LeViT model)"),cvo=l(),c_=a("li"),bie=a("strong"),fvo=o("longformer"),mvo=o(" \u2014 "),aq=a("a"),gvo=o("LongformerModel"),hvo=o(" (Longformer model)"),pvo=l(),f_=a("li"),vie=a("strong"),_vo=o("luke"),uvo=o(" \u2014 "),nq=a("a"),bvo=o("LukeModel"),vvo=o(" (LUKE model)"),Fvo=l(),m_=a("li"),Fie=a("strong"),Tvo=o("lxmert"),Mvo=o(" \u2014 "),sq=a("a"),Evo=o("LxmertModel"),Cvo=o(" (LXMERT model)"),wvo=l(),g_=a("li"),Tie=a("strong"),Avo=o("m2m_100"),Lvo=o(" \u2014 "),lq=a("a"),yvo=o("M2M100Model"),xvo=o(" (M2M100 model)"),$vo=l(),h_=a("li"),Mie=a("strong"),kvo=o("marian"),Svo=o(" \u2014 "),iq=a("a"),Rvo=o("MarianModel"),Pvo=o(" (Marian model)"),Bvo=l(),p_=a("li"),Eie=a("strong"),Ivo=o("maskformer"),Nvo=o(" \u2014 "),dq=a("a"),qvo=o("MaskFormerModel"),jvo=o(" (MaskFormer model)"),Dvo=l(),__=a("li"),Cie=a("strong"),Gvo=o("mbart"),Ovo=o(" \u2014 "),cq=a("a"),Vvo=o("MBartModel"),Xvo=o(" (mBART model)"),zvo=l(),u_=a("li"),wie=a("strong"),Wvo=o("mctct"),Qvo=o(" \u2014 "),fq=a("a"),Hvo=o("MCTCTModel"),Uvo=o(" (M-CTC-T model)"),Jvo=l(),b_=a("li"),Aie=a("strong"),Yvo=o("megatron-bert"),Kvo=o(" \u2014 "),mq=a("a"),Zvo=o("MegatronBertModel"),e5o=o(" (Megatron-BERT model)"),o5o=l(),v_=a("li"),Lie=a("strong"),r5o=o("mobilebert"),t5o=o(" \u2014 "),gq=a("a"),a5o=o("MobileBertModel"),n5o=o(" (MobileBERT model)"),s5o=l(),F_=a("li"),yie=a("strong"),l5o=o("mobilevit"),i5o=o(" \u2014 "),hq=a("a"),d5o=o("MobileViTModel"),c5o=o(" (MobileViT model)"),f5o=l(),T_=a("li"),xie=a("strong"),m5o=o("mpnet"),g5o=o(" \u2014 "),pq=a("a"),h5o=o("MPNetModel"),p5o=o(" (MPNet model)"),_5o=l(),M_=a("li"),$ie=a("strong"),u5o=o("mt5"),b5o=o(" \u2014 "),_q=a("a"),v5o=o("MT5Model"),F5o=o(" (MT5 model)"),T5o=l(),E_=a("li"),kie=a("strong"),M5o=o("nystromformer"),E5o=o(" \u2014 "),uq=a("a"),C5o=o("NystromformerModel"),w5o=o(" (Nystr\xF6mformer model)"),A5o=l(),C_=a("li"),Sie=a("strong"),L5o=o("openai-gpt"),y5o=o(" \u2014 "),bq=a("a"),x5o=o("OpenAIGPTModel"),$5o=o(" (OpenAI GPT model)"),k5o=l(),w_=a("li"),Rie=a("strong"),S5o=o("opt"),R5o=o(" \u2014 "),vq=a("a"),P5o=o("OPTModel"),B5o=o(" (OPT model)"),I5o=l(),A_=a("li"),Pie=a("strong"),N5o=o("pegasus"),q5o=o(" \u2014 "),Fq=a("a"),j5o=o("PegasusModel"),D5o=o(" (Pegasus model)"),G5o=l(),L_=a("li"),Bie=a("strong"),O5o=o("perceiver"),V5o=o(" \u2014 "),Tq=a("a"),X5o=o("PerceiverModel"),z5o=o(" (Perceiver model)"),W5o=l(),y_=a("li"),Iie=a("strong"),Q5o=o("plbart"),H5o=o(" \u2014 "),Mq=a("a"),U5o=o("PLBartModel"),J5o=o(" (PLBart model)"),Y5o=l(),x_=a("li"),Nie=a("strong"),K5o=o("poolformer"),Z5o=o(" \u2014 "),Eq=a("a"),e3o=o("PoolFormerModel"),o3o=o(" (PoolFormer model)"),r3o=l(),$_=a("li"),qie=a("strong"),t3o=o("prophetnet"),a3o=o(" \u2014 "),Cq=a("a"),n3o=o("ProphetNetModel"),s3o=o(" (ProphetNet model)"),l3o=l(),k_=a("li"),jie=a("strong"),i3o=o("qdqbert"),d3o=o(" \u2014 "),wq=a("a"),c3o=o("QDQBertModel"),f3o=o(" (QDQBert model)"),m3o=l(),S_=a("li"),Die=a("strong"),g3o=o("reformer"),h3o=o(" \u2014 "),Aq=a("a"),p3o=o("ReformerModel"),_3o=o(" (Reformer model)"),u3o=l(),R_=a("li"),Gie=a("strong"),b3o=o("regnet"),v3o=o(" \u2014 "),Lq=a("a"),F3o=o("RegNetModel"),T3o=o(" (RegNet model)"),M3o=l(),P_=a("li"),Oie=a("strong"),E3o=o("rembert"),C3o=o(" \u2014 "),yq=a("a"),w3o=o("RemBertModel"),A3o=o(" (RemBERT model)"),L3o=l(),B_=a("li"),Vie=a("strong"),y3o=o("resnet"),x3o=o(" \u2014 "),xq=a("a"),$3o=o("ResNetModel"),k3o=o(" (ResNet model)"),S3o=l(),I_=a("li"),Xie=a("strong"),R3o=o("retribert"),P3o=o(" \u2014 "),$q=a("a"),B3o=o("RetriBertModel"),I3o=o(" (RetriBERT model)"),N3o=l(),N_=a("li"),zie=a("strong"),q3o=o("roberta"),j3o=o(" \u2014 "),kq=a("a"),D3o=o("RobertaModel"),G3o=o(" (RoBERTa model)"),O3o=l(),q_=a("li"),Wie=a("strong"),V3o=o("roformer"),X3o=o(" \u2014 "),Sq=a("a"),z3o=o("RoFormerModel"),W3o=o(" (RoFormer model)"),Q3o=l(),j_=a("li"),Qie=a("strong"),H3o=o("segformer"),U3o=o(" \u2014 "),Rq=a("a"),J3o=o("SegformerModel"),Y3o=o(" (SegFormer model)"),K3o=l(),D_=a("li"),Hie=a("strong"),Z3o=o("sew"),eFo=o(" \u2014 "),Pq=a("a"),oFo=o("SEWModel"),rFo=o(" (SEW model)"),tFo=l(),G_=a("li"),Uie=a("strong"),aFo=o("sew-d"),nFo=o(" \u2014 "),Bq=a("a"),sFo=o("SEWDModel"),lFo=o(" (SEW-D model)"),iFo=l(),O_=a("li"),Jie=a("strong"),dFo=o("speech_to_text"),cFo=o(" \u2014 "),Iq=a("a"),fFo=o("Speech2TextModel"),mFo=o(" (Speech2Text model)"),gFo=l(),V_=a("li"),Yie=a("strong"),hFo=o("splinter"),pFo=o(" \u2014 "),Nq=a("a"),_Fo=o("SplinterModel"),uFo=o(" (Splinter model)"),bFo=l(),X_=a("li"),Kie=a("strong"),vFo=o("squeezebert"),FFo=o(" \u2014 "),qq=a("a"),TFo=o("SqueezeBertModel"),MFo=o(" (SqueezeBERT model)"),EFo=l(),z_=a("li"),Zie=a("strong"),CFo=o("swin"),wFo=o(" \u2014 "),jq=a("a"),AFo=o("SwinModel"),LFo=o(" (Swin Transformer model)"),yFo=l(),W_=a("li"),ede=a("strong"),xFo=o("t5"),$Fo=o(" \u2014 "),Dq=a("a"),kFo=o("T5Model"),SFo=o(" (T5 model)"),RFo=l(),Q_=a("li"),ode=a("strong"),PFo=o("tapas"),BFo=o(" \u2014 "),Gq=a("a"),IFo=o("TapasModel"),NFo=o(" (TAPAS model)"),qFo=l(),H_=a("li"),rde=a("strong"),jFo=o("trajectory_transformer"),DFo=o(" \u2014 "),Oq=a("a"),GFo=o("TrajectoryTransformerModel"),OFo=o(" (Trajectory Transformer model)"),VFo=l(),U_=a("li"),tde=a("strong"),XFo=o("transfo-xl"),zFo=o(" \u2014 "),Vq=a("a"),WFo=o("TransfoXLModel"),QFo=o(" (Transformer-XL model)"),HFo=l(),J_=a("li"),ade=a("strong"),UFo=o("unispeech"),JFo=o(" \u2014 "),Xq=a("a"),YFo=o("UniSpeechModel"),KFo=o(" (UniSpeech model)"),ZFo=l(),Y_=a("li"),nde=a("strong"),eTo=o("unispeech-sat"),oTo=o(" \u2014 "),zq=a("a"),rTo=o("UniSpeechSatModel"),tTo=o(" (UniSpeechSat model)"),aTo=l(),K_=a("li"),sde=a("strong"),nTo=o("van"),sTo=o(" \u2014 "),Wq=a("a"),lTo=o("VanModel"),iTo=o(" (VAN model)"),dTo=l(),Z_=a("li"),lde=a("strong"),cTo=o("vilt"),fTo=o(" \u2014 "),Qq=a("a"),mTo=o("ViltModel"),gTo=o(" (ViLT model)"),hTo=l(),eu=a("li"),ide=a("strong"),pTo=o("vision-text-dual-encoder"),_To=o(" \u2014 "),Hq=a("a"),uTo=o("VisionTextDualEncoderModel"),bTo=o(" (VisionTextDualEncoder model)"),vTo=l(),ou=a("li"),dde=a("strong"),FTo=o("visual_bert"),TTo=o(" \u2014 "),Uq=a("a"),MTo=o("VisualBertModel"),ETo=o(" (VisualBERT model)"),CTo=l(),ru=a("li"),cde=a("strong"),wTo=o("vit"),ATo=o(" \u2014 "),Jq=a("a"),LTo=o("ViTModel"),yTo=o(" (ViT model)"),xTo=l(),tu=a("li"),fde=a("strong"),$To=o("vit_mae"),kTo=o(" \u2014 "),Yq=a("a"),STo=o("ViTMAEModel"),RTo=o(" (ViTMAE model)"),PTo=l(),au=a("li"),mde=a("strong"),BTo=o("wav2vec2"),ITo=o(" \u2014 "),Kq=a("a"),NTo=o("Wav2Vec2Model"),qTo=o(" (Wav2Vec2 model)"),jTo=l(),nu=a("li"),gde=a("strong"),DTo=o("wav2vec2-conformer"),GTo=o(" \u2014 "),Zq=a("a"),OTo=o("Wav2Vec2ConformerModel"),VTo=o(" (Wav2Vec2-Conformer model)"),XTo=l(),su=a("li"),hde=a("strong"),zTo=o("wavlm"),WTo=o(" \u2014 "),ej=a("a"),QTo=o("WavLMModel"),HTo=o(" (WavLM model)"),UTo=l(),lu=a("li"),pde=a("strong"),JTo=o("xglm"),YTo=o(" \u2014 "),oj=a("a"),KTo=o("XGLMModel"),ZTo=o(" (XGLM model)"),e7o=l(),iu=a("li"),_de=a("strong"),o7o=o("xlm"),r7o=o(" \u2014 "),rj=a("a"),t7o=o("XLMModel"),a7o=o(" (XLM model)"),n7o=l(),du=a("li"),ude=a("strong"),s7o=o("xlm-prophetnet"),l7o=o(" \u2014 "),tj=a("a"),i7o=o("XLMProphetNetModel"),d7o=o(" (XLM-ProphetNet model)"),c7o=l(),cu=a("li"),bde=a("strong"),f7o=o("xlm-roberta"),m7o=o(" \u2014 "),aj=a("a"),g7o=o("XLMRobertaModel"),h7o=o(" (XLM-RoBERTa model)"),p7o=l(),fu=a("li"),vde=a("strong"),_7o=o("xlm-roberta-xl"),u7o=o(" \u2014 "),nj=a("a"),b7o=o("XLMRobertaXLModel"),v7o=o(" (XLM-RoBERTa-XL model)"),F7o=l(),mu=a("li"),Fde=a("strong"),T7o=o("xlnet"),M7o=o(" \u2014 "),sj=a("a"),E7o=o("XLNetModel"),C7o=o(" (XLNet model)"),w7o=l(),gu=a("li"),Tde=a("strong"),A7o=o("yolos"),L7o=o(" \u2014 "),lj=a("a"),y7o=o("YolosModel"),x7o=o(" (YOLOS model)"),$7o=l(),hu=a("li"),Mde=a("strong"),k7o=o("yoso"),S7o=o(" \u2014 "),ij=a("a"),R7o=o("YosoModel"),P7o=o(" (YOSO model)"),B7o=l(),pu=a("p"),I7o=o("The model is set in evaluation mode by default using "),Ede=a("code"),N7o=o("model.eval()"),q7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),j7o=o("model.train()"),D7o=l(),F(_u.$$.fragment),Kje=l(),$i=a("h2"),uu=a("a"),wde=a("span"),F(LL.$$.fragment),G7o=l(),Ade=a("span"),O7o=o("AutoModelForPreTraining"),Zje=l(),xo=a("div"),F(yL.$$.fragment),V7o=l(),ki=a("p"),X7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dj=a("a"),z7o=o("from_pretrained()"),W7o=o(" class method or the "),cj=a("a"),Q7o=o("from_config()"),H7o=o(` class
method.`),U7o=l(),xL=a("p"),J7o=o("This class cannot be instantiated directly using "),Lde=a("code"),Y7o=o("__init__()"),K7o=o(" (throws an error)."),Z7o=l(),nt=a("div"),F($L.$$.fragment),eMo=l(),yde=a("p"),oMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rMo=l(),Si=a("p"),tMo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),aMo=o("not"),nMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),sMo=o("from_pretrained()"),lMo=o(" to load the model weights."),iMo=l(),F(bu.$$.fragment),dMo=l(),Ye=a("div"),F(kL.$$.fragment),cMo=l(),$de=a("p"),fMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mMo=l(),$a=a("p"),gMo=o("The model class to instantiate is selected based on the "),kde=a("code"),hMo=o("model_type"),pMo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),_Mo=o("pretrained_model_name_or_path"),uMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),bMo=o("pretrained_model_name_or_path"),vMo=o(":"),FMo=l(),G=a("ul"),vu=a("li"),Pde=a("strong"),TMo=o("albert"),MMo=o(" \u2014 "),mj=a("a"),EMo=o("AlbertForPreTraining"),CMo=o(" (ALBERT model)"),wMo=l(),Fu=a("li"),Bde=a("strong"),AMo=o("bart"),LMo=o(" \u2014 "),gj=a("a"),yMo=o("BartForConditionalGeneration"),xMo=o(" (BART model)"),$Mo=l(),Tu=a("li"),Ide=a("strong"),kMo=o("bert"),SMo=o(" \u2014 "),hj=a("a"),RMo=o("BertForPreTraining"),PMo=o(" (BERT model)"),BMo=l(),Mu=a("li"),Nde=a("strong"),IMo=o("big_bird"),NMo=o(" \u2014 "),pj=a("a"),qMo=o("BigBirdForPreTraining"),jMo=o(" (BigBird model)"),DMo=l(),Eu=a("li"),qde=a("strong"),GMo=o("bloom"),OMo=o(" \u2014 "),_j=a("a"),VMo=o("BloomForCausalLM"),XMo=o(" (BLOOM model)"),zMo=l(),Cu=a("li"),jde=a("strong"),WMo=o("camembert"),QMo=o(" \u2014 "),uj=a("a"),HMo=o("CamembertForMaskedLM"),UMo=o(" (CamemBERT model)"),JMo=l(),wu=a("li"),Dde=a("strong"),YMo=o("ctrl"),KMo=o(" \u2014 "),bj=a("a"),ZMo=o("CTRLLMHeadModel"),eEo=o(" (CTRL model)"),oEo=l(),Au=a("li"),Gde=a("strong"),rEo=o("data2vec-text"),tEo=o(" \u2014 "),vj=a("a"),aEo=o("Data2VecTextForMaskedLM"),nEo=o(" (Data2VecText model)"),sEo=l(),Lu=a("li"),Ode=a("strong"),lEo=o("deberta"),iEo=o(" \u2014 "),Fj=a("a"),dEo=o("DebertaForMaskedLM"),cEo=o(" (DeBERTa model)"),fEo=l(),yu=a("li"),Vde=a("strong"),mEo=o("deberta-v2"),gEo=o(" \u2014 "),Tj=a("a"),hEo=o("DebertaV2ForMaskedLM"),pEo=o(" (DeBERTa-v2 model)"),_Eo=l(),xu=a("li"),Xde=a("strong"),uEo=o("distilbert"),bEo=o(" \u2014 "),Mj=a("a"),vEo=o("DistilBertForMaskedLM"),FEo=o(" (DistilBERT model)"),TEo=l(),$u=a("li"),zde=a("strong"),MEo=o("electra"),EEo=o(" \u2014 "),Ej=a("a"),CEo=o("ElectraForPreTraining"),wEo=o(" (ELECTRA model)"),AEo=l(),ku=a("li"),Wde=a("strong"),LEo=o("flaubert"),yEo=o(" \u2014 "),Cj=a("a"),xEo=o("FlaubertWithLMHeadModel"),$Eo=o(" (FlauBERT model)"),kEo=l(),Su=a("li"),Qde=a("strong"),SEo=o("flava"),REo=o(" \u2014 "),wj=a("a"),PEo=o("FlavaForPreTraining"),BEo=o(" (FLAVA model)"),IEo=l(),Ru=a("li"),Hde=a("strong"),NEo=o("fnet"),qEo=o(" \u2014 "),Aj=a("a"),jEo=o("FNetForPreTraining"),DEo=o(" (FNet model)"),GEo=l(),Pu=a("li"),Ude=a("strong"),OEo=o("fsmt"),VEo=o(" \u2014 "),Lj=a("a"),XEo=o("FSMTForConditionalGeneration"),zEo=o(" (FairSeq Machine-Translation model)"),WEo=l(),Bu=a("li"),Jde=a("strong"),QEo=o("funnel"),HEo=o(" \u2014 "),yj=a("a"),UEo=o("FunnelForPreTraining"),JEo=o(" (Funnel Transformer model)"),YEo=l(),Iu=a("li"),Yde=a("strong"),KEo=o("gpt2"),ZEo=o(" \u2014 "),xj=a("a"),eCo=o("GPT2LMHeadModel"),oCo=o(" (OpenAI GPT-2 model)"),rCo=l(),Nu=a("li"),Kde=a("strong"),tCo=o("ibert"),aCo=o(" \u2014 "),$j=a("a"),nCo=o("IBertForMaskedLM"),sCo=o(" (I-BERT model)"),lCo=l(),qu=a("li"),Zde=a("strong"),iCo=o("layoutlm"),dCo=o(" \u2014 "),kj=a("a"),cCo=o("LayoutLMForMaskedLM"),fCo=o(" (LayoutLM model)"),mCo=l(),ju=a("li"),ece=a("strong"),gCo=o("longformer"),hCo=o(" \u2014 "),Sj=a("a"),pCo=o("LongformerForMaskedLM"),_Co=o(" (Longformer model)"),uCo=l(),Du=a("li"),oce=a("strong"),bCo=o("lxmert"),vCo=o(" \u2014 "),Rj=a("a"),FCo=o("LxmertForPreTraining"),TCo=o(" (LXMERT model)"),MCo=l(),Gu=a("li"),rce=a("strong"),ECo=o("megatron-bert"),CCo=o(" \u2014 "),Pj=a("a"),wCo=o("MegatronBertForPreTraining"),ACo=o(" (Megatron-BERT model)"),LCo=l(),Ou=a("li"),tce=a("strong"),yCo=o("mobilebert"),xCo=o(" \u2014 "),Bj=a("a"),$Co=o("MobileBertForPreTraining"),kCo=o(" (MobileBERT model)"),SCo=l(),Vu=a("li"),ace=a("strong"),RCo=o("mpnet"),PCo=o(" \u2014 "),Ij=a("a"),BCo=o("MPNetForMaskedLM"),ICo=o(" (MPNet model)"),NCo=l(),Xu=a("li"),nce=a("strong"),qCo=o("openai-gpt"),jCo=o(" \u2014 "),Nj=a("a"),DCo=o("OpenAIGPTLMHeadModel"),GCo=o(" (OpenAI GPT model)"),OCo=l(),zu=a("li"),sce=a("strong"),VCo=o("retribert"),XCo=o(" \u2014 "),qj=a("a"),zCo=o("RetriBertModel"),WCo=o(" (RetriBERT model)"),QCo=l(),Wu=a("li"),lce=a("strong"),HCo=o("roberta"),UCo=o(" \u2014 "),jj=a("a"),JCo=o("RobertaForMaskedLM"),YCo=o(" (RoBERTa model)"),KCo=l(),Qu=a("li"),ice=a("strong"),ZCo=o("splinter"),e0o=o(" \u2014 "),Dj=a("a"),o0o=o("SplinterForPreTraining"),r0o=o(" (Splinter model)"),t0o=l(),Hu=a("li"),dce=a("strong"),a0o=o("squeezebert"),n0o=o(" \u2014 "),Gj=a("a"),s0o=o("SqueezeBertForMaskedLM"),l0o=o(" (SqueezeBERT model)"),i0o=l(),Uu=a("li"),cce=a("strong"),d0o=o("t5"),c0o=o(" \u2014 "),Oj=a("a"),f0o=o("T5ForConditionalGeneration"),m0o=o(" (T5 model)"),g0o=l(),Ju=a("li"),fce=a("strong"),h0o=o("tapas"),p0o=o(" \u2014 "),Vj=a("a"),_0o=o("TapasForMaskedLM"),u0o=o(" (TAPAS model)"),b0o=l(),Yu=a("li"),mce=a("strong"),v0o=o("transfo-xl"),F0o=o(" \u2014 "),Xj=a("a"),T0o=o("TransfoXLLMHeadModel"),M0o=o(" (Transformer-XL model)"),E0o=l(),Ku=a("li"),gce=a("strong"),C0o=o("unispeech"),w0o=o(" \u2014 "),zj=a("a"),A0o=o("UniSpeechForPreTraining"),L0o=o(" (UniSpeech model)"),y0o=l(),Zu=a("li"),hce=a("strong"),x0o=o("unispeech-sat"),$0o=o(" \u2014 "),Wj=a("a"),k0o=o("UniSpeechSatForPreTraining"),S0o=o(" (UniSpeechSat model)"),R0o=l(),e1=a("li"),pce=a("strong"),P0o=o("visual_bert"),B0o=o(" \u2014 "),Qj=a("a"),I0o=o("VisualBertForPreTraining"),N0o=o(" (VisualBERT model)"),q0o=l(),o1=a("li"),_ce=a("strong"),j0o=o("vit_mae"),D0o=o(" \u2014 "),Hj=a("a"),G0o=o("ViTMAEForPreTraining"),O0o=o(" (ViTMAE model)"),V0o=l(),r1=a("li"),uce=a("strong"),X0o=o("wav2vec2"),z0o=o(" \u2014 "),Uj=a("a"),W0o=o("Wav2Vec2ForPreTraining"),Q0o=o(" (Wav2Vec2 model)"),H0o=l(),t1=a("li"),bce=a("strong"),U0o=o("wav2vec2-conformer"),J0o=o(" \u2014 "),Jj=a("a"),Y0o=o("Wav2Vec2ConformerForPreTraining"),K0o=o(" (Wav2Vec2-Conformer model)"),Z0o=l(),a1=a("li"),vce=a("strong"),ewo=o("xlm"),owo=o(" \u2014 "),Yj=a("a"),rwo=o("XLMWithLMHeadModel"),two=o(" (XLM model)"),awo=l(),n1=a("li"),Fce=a("strong"),nwo=o("xlm-roberta"),swo=o(" \u2014 "),Kj=a("a"),lwo=o("XLMRobertaForMaskedLM"),iwo=o(" (XLM-RoBERTa model)"),dwo=l(),s1=a("li"),Tce=a("strong"),cwo=o("xlm-roberta-xl"),fwo=o(" \u2014 "),Zj=a("a"),mwo=o("XLMRobertaXLForMaskedLM"),gwo=o(" (XLM-RoBERTa-XL model)"),hwo=l(),l1=a("li"),Mce=a("strong"),pwo=o("xlnet"),_wo=o(" \u2014 "),eD=a("a"),uwo=o("XLNetLMHeadModel"),bwo=o(" (XLNet model)"),vwo=l(),i1=a("p"),Fwo=o("The model is set in evaluation mode by default using "),Ece=a("code"),Two=o("model.eval()"),Mwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),Ewo=o("model.train()"),Cwo=l(),F(d1.$$.fragment),eDe=l(),Ri=a("h2"),c1=a("a"),wce=a("span"),F(SL.$$.fragment),wwo=l(),Ace=a("span"),Awo=o("AutoModelForCausalLM"),oDe=l(),$o=a("div"),F(RL.$$.fragment),Lwo=l(),Pi=a("p"),ywo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oD=a("a"),xwo=o("from_pretrained()"),$wo=o(" class method or the "),rD=a("a"),kwo=o("from_config()"),Swo=o(` class
method.`),Rwo=l(),PL=a("p"),Pwo=o("This class cannot be instantiated directly using "),Lce=a("code"),Bwo=o("__init__()"),Iwo=o(" (throws an error)."),Nwo=l(),st=a("div"),F(BL.$$.fragment),qwo=l(),yce=a("p"),jwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dwo=l(),Bi=a("p"),Gwo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),Owo=o("not"),Vwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=a("a"),Xwo=o("from_pretrained()"),zwo=o(" to load the model weights."),Wwo=l(),F(f1.$$.fragment),Qwo=l(),Ke=a("div"),F(IL.$$.fragment),Hwo=l(),$ce=a("p"),Uwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jwo=l(),ka=a("p"),Ywo=o("The model class to instantiate is selected based on the "),kce=a("code"),Kwo=o("model_type"),Zwo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),r6o=o("pretrained_model_name_or_path"),t6o=o(":"),a6o=l(),z=a("ul"),m1=a("li"),Pce=a("strong"),n6o=o("bart"),s6o=o(" \u2014 "),aD=a("a"),l6o=o("BartForCausalLM"),i6o=o(" (BART model)"),d6o=l(),g1=a("li"),Bce=a("strong"),c6o=o("bert"),f6o=o(" \u2014 "),nD=a("a"),m6o=o("BertLMHeadModel"),g6o=o(" (BERT model)"),h6o=l(),h1=a("li"),Ice=a("strong"),p6o=o("bert-generation"),_6o=o(" \u2014 "),sD=a("a"),u6o=o("BertGenerationDecoder"),b6o=o(" (Bert Generation model)"),v6o=l(),p1=a("li"),Nce=a("strong"),F6o=o("big_bird"),T6o=o(" \u2014 "),lD=a("a"),M6o=o("BigBirdForCausalLM"),E6o=o(" (BigBird model)"),C6o=l(),_1=a("li"),qce=a("strong"),w6o=o("bigbird_pegasus"),A6o=o(" \u2014 "),iD=a("a"),L6o=o("BigBirdPegasusForCausalLM"),y6o=o(" (BigBird-Pegasus model)"),x6o=l(),u1=a("li"),jce=a("strong"),$6o=o("blenderbot"),k6o=o(" \u2014 "),dD=a("a"),S6o=o("BlenderbotForCausalLM"),R6o=o(" (Blenderbot model)"),P6o=l(),b1=a("li"),Dce=a("strong"),B6o=o("blenderbot-small"),I6o=o(" \u2014 "),cD=a("a"),N6o=o("BlenderbotSmallForCausalLM"),q6o=o(" (BlenderbotSmall model)"),j6o=l(),v1=a("li"),Gce=a("strong"),D6o=o("bloom"),G6o=o(" \u2014 "),fD=a("a"),O6o=o("BloomForCausalLM"),V6o=o(" (BLOOM model)"),X6o=l(),F1=a("li"),Oce=a("strong"),z6o=o("camembert"),W6o=o(" \u2014 "),mD=a("a"),Q6o=o("CamembertForCausalLM"),H6o=o(" (CamemBERT model)"),U6o=l(),T1=a("li"),Vce=a("strong"),J6o=o("ctrl"),Y6o=o(" \u2014 "),gD=a("a"),K6o=o("CTRLLMHeadModel"),Z6o=o(" (CTRL model)"),eAo=l(),M1=a("li"),Xce=a("strong"),oAo=o("data2vec-text"),rAo=o(" \u2014 "),hD=a("a"),tAo=o("Data2VecTextForCausalLM"),aAo=o(" (Data2VecText model)"),nAo=l(),E1=a("li"),zce=a("strong"),sAo=o("electra"),lAo=o(" \u2014 "),pD=a("a"),iAo=o("ElectraForCausalLM"),dAo=o(" (ELECTRA model)"),cAo=l(),C1=a("li"),Wce=a("strong"),fAo=o("gpt2"),mAo=o(" \u2014 "),_D=a("a"),gAo=o("GPT2LMHeadModel"),hAo=o(" (OpenAI GPT-2 model)"),pAo=l(),w1=a("li"),Qce=a("strong"),_Ao=o("gpt_neo"),uAo=o(" \u2014 "),uD=a("a"),bAo=o("GPTNeoForCausalLM"),vAo=o(" (GPT Neo model)"),FAo=l(),A1=a("li"),Hce=a("strong"),TAo=o("gpt_neox"),MAo=o(" \u2014 "),bD=a("a"),EAo=o("GPTNeoXForCausalLM"),CAo=o(" (GPT NeoX model)"),wAo=l(),L1=a("li"),Uce=a("strong"),AAo=o("gptj"),LAo=o(" \u2014 "),vD=a("a"),yAo=o("GPTJForCausalLM"),xAo=o(" (GPT-J model)"),$Ao=l(),y1=a("li"),Jce=a("strong"),kAo=o("marian"),SAo=o(" \u2014 "),FD=a("a"),RAo=o("MarianForCausalLM"),PAo=o(" (Marian model)"),BAo=l(),x1=a("li"),Yce=a("strong"),IAo=o("mbart"),NAo=o(" \u2014 "),TD=a("a"),qAo=o("MBartForCausalLM"),jAo=o(" (mBART model)"),DAo=l(),$1=a("li"),Kce=a("strong"),GAo=o("megatron-bert"),OAo=o(" \u2014 "),MD=a("a"),VAo=o("MegatronBertForCausalLM"),XAo=o(" (Megatron-BERT model)"),zAo=l(),k1=a("li"),Zce=a("strong"),WAo=o("openai-gpt"),QAo=o(" \u2014 "),ED=a("a"),HAo=o("OpenAIGPTLMHeadModel"),UAo=o(" (OpenAI GPT model)"),JAo=l(),S1=a("li"),efe=a("strong"),YAo=o("opt"),KAo=o(" \u2014 "),CD=a("a"),ZAo=o("OPTForCausalLM"),eLo=o(" (OPT model)"),oLo=l(),R1=a("li"),ofe=a("strong"),rLo=o("pegasus"),tLo=o(" \u2014 "),wD=a("a"),aLo=o("PegasusForCausalLM"),nLo=o(" (Pegasus model)"),sLo=l(),P1=a("li"),rfe=a("strong"),lLo=o("plbart"),iLo=o(" \u2014 "),AD=a("a"),dLo=o("PLBartForCausalLM"),cLo=o(" (PLBart model)"),fLo=l(),B1=a("li"),tfe=a("strong"),mLo=o("prophetnet"),gLo=o(" \u2014 "),LD=a("a"),hLo=o("ProphetNetForCausalLM"),pLo=o(" (ProphetNet model)"),_Lo=l(),I1=a("li"),afe=a("strong"),uLo=o("qdqbert"),bLo=o(" \u2014 "),yD=a("a"),vLo=o("QDQBertLMHeadModel"),FLo=o(" (QDQBert model)"),TLo=l(),N1=a("li"),nfe=a("strong"),MLo=o("reformer"),ELo=o(" \u2014 "),xD=a("a"),CLo=o("ReformerModelWithLMHead"),wLo=o(" (Reformer model)"),ALo=l(),q1=a("li"),sfe=a("strong"),LLo=o("rembert"),yLo=o(" \u2014 "),$D=a("a"),xLo=o("RemBertForCausalLM"),$Lo=o(" (RemBERT model)"),kLo=l(),j1=a("li"),lfe=a("strong"),SLo=o("roberta"),RLo=o(" \u2014 "),kD=a("a"),PLo=o("RobertaForCausalLM"),BLo=o(" (RoBERTa model)"),ILo=l(),D1=a("li"),ife=a("strong"),NLo=o("roformer"),qLo=o(" \u2014 "),SD=a("a"),jLo=o("RoFormerForCausalLM"),DLo=o(" (RoFormer model)"),GLo=l(),G1=a("li"),dfe=a("strong"),OLo=o("speech_to_text_2"),VLo=o(" \u2014 "),RD=a("a"),XLo=o("Speech2Text2ForCausalLM"),zLo=o(" (Speech2Text2 model)"),WLo=l(),O1=a("li"),cfe=a("strong"),QLo=o("transfo-xl"),HLo=o(" \u2014 "),PD=a("a"),ULo=o("TransfoXLLMHeadModel"),JLo=o(" (Transformer-XL model)"),YLo=l(),V1=a("li"),ffe=a("strong"),KLo=o("trocr"),ZLo=o(" \u2014 "),BD=a("a"),eyo=o("TrOCRForCausalLM"),oyo=o(" (TrOCR model)"),ryo=l(),X1=a("li"),mfe=a("strong"),tyo=o("xglm"),ayo=o(" \u2014 "),ID=a("a"),nyo=o("XGLMForCausalLM"),syo=o(" (XGLM model)"),lyo=l(),z1=a("li"),gfe=a("strong"),iyo=o("xlm"),dyo=o(" \u2014 "),ND=a("a"),cyo=o("XLMWithLMHeadModel"),fyo=o(" (XLM model)"),myo=l(),W1=a("li"),hfe=a("strong"),gyo=o("xlm-prophetnet"),hyo=o(" \u2014 "),qD=a("a"),pyo=o("XLMProphetNetForCausalLM"),_yo=o(" (XLM-ProphetNet model)"),uyo=l(),Q1=a("li"),pfe=a("strong"),byo=o("xlm-roberta"),vyo=o(" \u2014 "),jD=a("a"),Fyo=o("XLMRobertaForCausalLM"),Tyo=o(" (XLM-RoBERTa model)"),Myo=l(),H1=a("li"),_fe=a("strong"),Eyo=o("xlm-roberta-xl"),Cyo=o(" \u2014 "),DD=a("a"),wyo=o("XLMRobertaXLForCausalLM"),Ayo=o(" (XLM-RoBERTa-XL model)"),Lyo=l(),U1=a("li"),ufe=a("strong"),yyo=o("xlnet"),xyo=o(" \u2014 "),GD=a("a"),$yo=o("XLNetLMHeadModel"),kyo=o(" (XLNet model)"),Syo=l(),J1=a("p"),Ryo=o("The model is set in evaluation mode by default using "),bfe=a("code"),Pyo=o("model.eval()"),Byo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),Iyo=o("model.train()"),Nyo=l(),F(Y1.$$.fragment),rDe=l(),Ii=a("h2"),K1=a("a"),Ffe=a("span"),F(NL.$$.fragment),qyo=l(),Tfe=a("span"),jyo=o("AutoModelForMaskedLM"),tDe=l(),ko=a("div"),F(qL.$$.fragment),Dyo=l(),Ni=a("p"),Gyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OD=a("a"),Oyo=o("from_pretrained()"),Vyo=o(" class method or the "),VD=a("a"),Xyo=o("from_config()"),zyo=o(` class
method.`),Wyo=l(),jL=a("p"),Qyo=o("This class cannot be instantiated directly using "),Mfe=a("code"),Hyo=o("__init__()"),Uyo=o(" (throws an error)."),Jyo=l(),lt=a("div"),F(DL.$$.fragment),Yyo=l(),Efe=a("p"),Kyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zyo=l(),qi=a("p"),e8o=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),o8o=o("not"),r8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),t8o=o("from_pretrained()"),a8o=o(" to load the model weights."),n8o=l(),F(Z1.$$.fragment),s8o=l(),Ze=a("div"),F(GL.$$.fragment),l8o=l(),wfe=a("p"),i8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d8o=l(),Sa=a("p"),c8o=o("The model class to instantiate is selected based on the "),Afe=a("code"),f8o=o("model_type"),m8o=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),g8o=o("pretrained_model_name_or_path"),h8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),p8o=o("pretrained_model_name_or_path"),_8o=o(":"),u8o=l(),Q=a("ul"),eb=a("li"),xfe=a("strong"),b8o=o("albert"),v8o=o(" \u2014 "),zD=a("a"),F8o=o("AlbertForMaskedLM"),T8o=o(" (ALBERT model)"),M8o=l(),ob=a("li"),$fe=a("strong"),E8o=o("bart"),C8o=o(" \u2014 "),WD=a("a"),w8o=o("BartForConditionalGeneration"),A8o=o(" (BART model)"),L8o=l(),rb=a("li"),kfe=a("strong"),y8o=o("bert"),x8o=o(" \u2014 "),QD=a("a"),$8o=o("BertForMaskedLM"),k8o=o(" (BERT model)"),S8o=l(),tb=a("li"),Sfe=a("strong"),R8o=o("big_bird"),P8o=o(" \u2014 "),HD=a("a"),B8o=o("BigBirdForMaskedLM"),I8o=o(" (BigBird model)"),N8o=l(),ab=a("li"),Rfe=a("strong"),q8o=o("camembert"),j8o=o(" \u2014 "),UD=a("a"),D8o=o("CamembertForMaskedLM"),G8o=o(" (CamemBERT model)"),O8o=l(),nb=a("li"),Pfe=a("strong"),V8o=o("convbert"),X8o=o(" \u2014 "),JD=a("a"),z8o=o("ConvBertForMaskedLM"),W8o=o(" (ConvBERT model)"),Q8o=l(),sb=a("li"),Bfe=a("strong"),H8o=o("data2vec-text"),U8o=o(" \u2014 "),YD=a("a"),J8o=o("Data2VecTextForMaskedLM"),Y8o=o(" (Data2VecText model)"),K8o=l(),lb=a("li"),Ife=a("strong"),Z8o=o("deberta"),e9o=o(" \u2014 "),KD=a("a"),o9o=o("DebertaForMaskedLM"),r9o=o(" (DeBERTa model)"),t9o=l(),ib=a("li"),Nfe=a("strong"),a9o=o("deberta-v2"),n9o=o(" \u2014 "),ZD=a("a"),s9o=o("DebertaV2ForMaskedLM"),l9o=o(" (DeBERTa-v2 model)"),i9o=l(),db=a("li"),qfe=a("strong"),d9o=o("distilbert"),c9o=o(" \u2014 "),eG=a("a"),f9o=o("DistilBertForMaskedLM"),m9o=o(" (DistilBERT model)"),g9o=l(),cb=a("li"),jfe=a("strong"),h9o=o("electra"),p9o=o(" \u2014 "),oG=a("a"),_9o=o("ElectraForMaskedLM"),u9o=o(" (ELECTRA model)"),b9o=l(),fb=a("li"),Dfe=a("strong"),v9o=o("flaubert"),F9o=o(" \u2014 "),rG=a("a"),T9o=o("FlaubertWithLMHeadModel"),M9o=o(" (FlauBERT model)"),E9o=l(),mb=a("li"),Gfe=a("strong"),C9o=o("fnet"),w9o=o(" \u2014 "),tG=a("a"),A9o=o("FNetForMaskedLM"),L9o=o(" (FNet model)"),y9o=l(),gb=a("li"),Ofe=a("strong"),x9o=o("funnel"),$9o=o(" \u2014 "),aG=a("a"),k9o=o("FunnelForMaskedLM"),S9o=o(" (Funnel Transformer model)"),R9o=l(),hb=a("li"),Vfe=a("strong"),P9o=o("ibert"),B9o=o(" \u2014 "),nG=a("a"),I9o=o("IBertForMaskedLM"),N9o=o(" (I-BERT model)"),q9o=l(),pb=a("li"),Xfe=a("strong"),j9o=o("layoutlm"),D9o=o(" \u2014 "),sG=a("a"),G9o=o("LayoutLMForMaskedLM"),O9o=o(" (LayoutLM model)"),V9o=l(),_b=a("li"),zfe=a("strong"),X9o=o("longformer"),z9o=o(" \u2014 "),lG=a("a"),W9o=o("LongformerForMaskedLM"),Q9o=o(" (Longformer model)"),H9o=l(),ub=a("li"),Wfe=a("strong"),U9o=o("luke"),J9o=o(" \u2014 "),iG=a("a"),Y9o=o("LukeForMaskedLM"),K9o=o(" (LUKE model)"),Z9o=l(),bb=a("li"),Qfe=a("strong"),exo=o("mbart"),oxo=o(" \u2014 "),dG=a("a"),rxo=o("MBartForConditionalGeneration"),txo=o(" (mBART model)"),axo=l(),vb=a("li"),Hfe=a("strong"),nxo=o("megatron-bert"),sxo=o(" \u2014 "),cG=a("a"),lxo=o("MegatronBertForMaskedLM"),ixo=o(" (Megatron-BERT model)"),dxo=l(),Fb=a("li"),Ufe=a("strong"),cxo=o("mobilebert"),fxo=o(" \u2014 "),fG=a("a"),mxo=o("MobileBertForMaskedLM"),gxo=o(" (MobileBERT model)"),hxo=l(),Tb=a("li"),Jfe=a("strong"),pxo=o("mpnet"),_xo=o(" \u2014 "),mG=a("a"),uxo=o("MPNetForMaskedLM"),bxo=o(" (MPNet model)"),vxo=l(),Mb=a("li"),Yfe=a("strong"),Fxo=o("nystromformer"),Txo=o(" \u2014 "),gG=a("a"),Mxo=o("NystromformerForMaskedLM"),Exo=o(" (Nystr\xF6mformer model)"),Cxo=l(),Eb=a("li"),Kfe=a("strong"),wxo=o("perceiver"),Axo=o(" \u2014 "),hG=a("a"),Lxo=o("PerceiverForMaskedLM"),yxo=o(" (Perceiver model)"),xxo=l(),Cb=a("li"),Zfe=a("strong"),$xo=o("qdqbert"),kxo=o(" \u2014 "),pG=a("a"),Sxo=o("QDQBertForMaskedLM"),Rxo=o(" (QDQBert model)"),Pxo=l(),wb=a("li"),eme=a("strong"),Bxo=o("reformer"),Ixo=o(" \u2014 "),_G=a("a"),Nxo=o("ReformerForMaskedLM"),qxo=o(" (Reformer model)"),jxo=l(),Ab=a("li"),ome=a("strong"),Dxo=o("rembert"),Gxo=o(" \u2014 "),uG=a("a"),Oxo=o("RemBertForMaskedLM"),Vxo=o(" (RemBERT model)"),Xxo=l(),Lb=a("li"),rme=a("strong"),zxo=o("roberta"),Wxo=o(" \u2014 "),bG=a("a"),Qxo=o("RobertaForMaskedLM"),Hxo=o(" (RoBERTa model)"),Uxo=l(),yb=a("li"),tme=a("strong"),Jxo=o("roformer"),Yxo=o(" \u2014 "),vG=a("a"),Kxo=o("RoFormerForMaskedLM"),Zxo=o(" (RoFormer model)"),e$o=l(),xb=a("li"),ame=a("strong"),o$o=o("squeezebert"),r$o=o(" \u2014 "),FG=a("a"),t$o=o("SqueezeBertForMaskedLM"),a$o=o(" (SqueezeBERT model)"),n$o=l(),$b=a("li"),nme=a("strong"),s$o=o("tapas"),l$o=o(" \u2014 "),TG=a("a"),i$o=o("TapasForMaskedLM"),d$o=o(" (TAPAS model)"),c$o=l(),kb=a("li"),sme=a("strong"),f$o=o("wav2vec2"),m$o=o(" \u2014 "),lme=a("code"),g$o=o("Wav2Vec2ForMaskedLM"),h$o=o(" (Wav2Vec2 model)"),p$o=l(),Sb=a("li"),ime=a("strong"),_$o=o("xlm"),u$o=o(" \u2014 "),MG=a("a"),b$o=o("XLMWithLMHeadModel"),v$o=o(" (XLM model)"),F$o=l(),Rb=a("li"),dme=a("strong"),T$o=o("xlm-roberta"),M$o=o(" \u2014 "),EG=a("a"),E$o=o("XLMRobertaForMaskedLM"),C$o=o(" (XLM-RoBERTa model)"),w$o=l(),Pb=a("li"),cme=a("strong"),A$o=o("xlm-roberta-xl"),L$o=o(" \u2014 "),CG=a("a"),y$o=o("XLMRobertaXLForMaskedLM"),x$o=o(" (XLM-RoBERTa-XL model)"),$$o=l(),Bb=a("li"),fme=a("strong"),k$o=o("yoso"),S$o=o(" \u2014 "),wG=a("a"),R$o=o("YosoForMaskedLM"),P$o=o(" (YOSO model)"),B$o=l(),Ib=a("p"),I$o=o("The model is set in evaluation mode by default using "),mme=a("code"),N$o=o("model.eval()"),q$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),j$o=o("model.train()"),D$o=l(),F(Nb.$$.fragment),aDe=l(),ji=a("h2"),qb=a("a"),hme=a("span"),F(OL.$$.fragment),G$o=l(),pme=a("span"),O$o=o("AutoModelForSeq2SeqLM"),nDe=l(),So=a("div"),F(VL.$$.fragment),V$o=l(),Di=a("p"),X$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AG=a("a"),z$o=o("from_pretrained()"),W$o=o(" class method or the "),LG=a("a"),Q$o=o("from_config()"),H$o=o(` class
method.`),U$o=l(),XL=a("p"),J$o=o("This class cannot be instantiated directly using "),_me=a("code"),Y$o=o("__init__()"),K$o=o(" (throws an error)."),Z$o=l(),it=a("div"),F(zL.$$.fragment),eko=l(),ume=a("p"),oko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rko=l(),Gi=a("p"),tko=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),ako=o("not"),nko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),sko=o("from_pretrained()"),lko=o(" to load the model weights."),iko=l(),F(jb.$$.fragment),dko=l(),eo=a("div"),F(WL.$$.fragment),cko=l(),vme=a("p"),fko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mko=l(),Ra=a("p"),gko=o("The model class to instantiate is selected based on the "),Fme=a("code"),hko=o("model_type"),pko=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),_ko=o("pretrained_model_name_or_path"),uko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(":"),Fko=l(),_e=a("ul"),Db=a("li"),Eme=a("strong"),Tko=o("bart"),Mko=o(" \u2014 "),xG=a("a"),Eko=o("BartForConditionalGeneration"),Cko=o(" (BART model)"),wko=l(),Gb=a("li"),Cme=a("strong"),Ako=o("bigbird_pegasus"),Lko=o(" \u2014 "),$G=a("a"),yko=o("BigBirdPegasusForConditionalGeneration"),xko=o(" (BigBird-Pegasus model)"),$ko=l(),Ob=a("li"),wme=a("strong"),kko=o("blenderbot"),Sko=o(" \u2014 "),kG=a("a"),Rko=o("BlenderbotForConditionalGeneration"),Pko=o(" (Blenderbot model)"),Bko=l(),Vb=a("li"),Ame=a("strong"),Iko=o("blenderbot-small"),Nko=o(" \u2014 "),SG=a("a"),qko=o("BlenderbotSmallForConditionalGeneration"),jko=o(" (BlenderbotSmall model)"),Dko=l(),Xb=a("li"),Lme=a("strong"),Gko=o("encoder-decoder"),Oko=o(" \u2014 "),RG=a("a"),Vko=o("EncoderDecoderModel"),Xko=o(" (Encoder decoder model)"),zko=l(),zb=a("li"),yme=a("strong"),Wko=o("fsmt"),Qko=o(" \u2014 "),PG=a("a"),Hko=o("FSMTForConditionalGeneration"),Uko=o(" (FairSeq Machine-Translation model)"),Jko=l(),Wb=a("li"),xme=a("strong"),Yko=o("led"),Kko=o(" \u2014 "),BG=a("a"),Zko=o("LEDForConditionalGeneration"),eSo=o(" (LED model)"),oSo=l(),Qb=a("li"),$me=a("strong"),rSo=o("m2m_100"),tSo=o(" \u2014 "),IG=a("a"),aSo=o("M2M100ForConditionalGeneration"),nSo=o(" (M2M100 model)"),sSo=l(),Hb=a("li"),kme=a("strong"),lSo=o("marian"),iSo=o(" \u2014 "),NG=a("a"),dSo=o("MarianMTModel"),cSo=o(" (Marian model)"),fSo=l(),Ub=a("li"),Sme=a("strong"),mSo=o("mbart"),gSo=o(" \u2014 "),qG=a("a"),hSo=o("MBartForConditionalGeneration"),pSo=o(" (mBART model)"),_So=l(),Jb=a("li"),Rme=a("strong"),uSo=o("mt5"),bSo=o(" \u2014 "),jG=a("a"),vSo=o("MT5ForConditionalGeneration"),FSo=o(" (MT5 model)"),TSo=l(),Yb=a("li"),Pme=a("strong"),MSo=o("pegasus"),ESo=o(" \u2014 "),DG=a("a"),CSo=o("PegasusForConditionalGeneration"),wSo=o(" (Pegasus model)"),ASo=l(),Kb=a("li"),Bme=a("strong"),LSo=o("plbart"),ySo=o(" \u2014 "),GG=a("a"),xSo=o("PLBartForConditionalGeneration"),$So=o(" (PLBart model)"),kSo=l(),Zb=a("li"),Ime=a("strong"),SSo=o("prophetnet"),RSo=o(" \u2014 "),OG=a("a"),PSo=o("ProphetNetForConditionalGeneration"),BSo=o(" (ProphetNet model)"),ISo=l(),e2=a("li"),Nme=a("strong"),NSo=o("t5"),qSo=o(" \u2014 "),VG=a("a"),jSo=o("T5ForConditionalGeneration"),DSo=o(" (T5 model)"),GSo=l(),o2=a("li"),qme=a("strong"),OSo=o("xlm-prophetnet"),VSo=o(" \u2014 "),XG=a("a"),XSo=o("XLMProphetNetForConditionalGeneration"),zSo=o(" (XLM-ProphetNet model)"),WSo=l(),r2=a("p"),QSo=o("The model is set in evaluation mode by default using "),jme=a("code"),HSo=o("model.eval()"),USo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),JSo=o("model.train()"),YSo=l(),F(t2.$$.fragment),sDe=l(),Oi=a("h2"),a2=a("a"),Gme=a("span"),F(QL.$$.fragment),KSo=l(),Ome=a("span"),ZSo=o("AutoModelForSequenceClassification"),lDe=l(),Ro=a("div"),F(HL.$$.fragment),eRo=l(),Vi=a("p"),oRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zG=a("a"),rRo=o("from_pretrained()"),tRo=o(" class method or the "),WG=a("a"),aRo=o("from_config()"),nRo=o(` class
method.`),sRo=l(),UL=a("p"),lRo=o("This class cannot be instantiated directly using "),Vme=a("code"),iRo=o("__init__()"),dRo=o(" (throws an error)."),cRo=l(),dt=a("div"),F(JL.$$.fragment),fRo=l(),Xme=a("p"),mRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gRo=l(),Xi=a("p"),hRo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),pRo=o("not"),_Ro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),uRo=o("from_pretrained()"),bRo=o(" to load the model weights."),vRo=l(),F(n2.$$.fragment),FRo=l(),oo=a("div"),F(YL.$$.fragment),TRo=l(),Wme=a("p"),MRo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ERo=l(),Pa=a("p"),CRo=o("The model class to instantiate is selected based on the "),Qme=a("code"),wRo=o("model_type"),ARo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),LRo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),xRo=o("pretrained_model_name_or_path"),$Ro=o(":"),kRo=l(),N=a("ul"),s2=a("li"),Jme=a("strong"),SRo=o("albert"),RRo=o(" \u2014 "),HG=a("a"),PRo=o("AlbertForSequenceClassification"),BRo=o(" (ALBERT model)"),IRo=l(),l2=a("li"),Yme=a("strong"),NRo=o("bart"),qRo=o(" \u2014 "),UG=a("a"),jRo=o("BartForSequenceClassification"),DRo=o(" (BART model)"),GRo=l(),i2=a("li"),Kme=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),JG=a("a"),XRo=o("BertForSequenceClassification"),zRo=o(" (BERT model)"),WRo=l(),d2=a("li"),Zme=a("strong"),QRo=o("big_bird"),HRo=o(" \u2014 "),YG=a("a"),URo=o("BigBirdForSequenceClassification"),JRo=o(" (BigBird model)"),YRo=l(),c2=a("li"),ege=a("strong"),KRo=o("bigbird_pegasus"),ZRo=o(" \u2014 "),KG=a("a"),ePo=o("BigBirdPegasusForSequenceClassification"),oPo=o(" (BigBird-Pegasus model)"),rPo=l(),f2=a("li"),oge=a("strong"),tPo=o("camembert"),aPo=o(" \u2014 "),ZG=a("a"),nPo=o("CamembertForSequenceClassification"),sPo=o(" (CamemBERT model)"),lPo=l(),m2=a("li"),rge=a("strong"),iPo=o("canine"),dPo=o(" \u2014 "),eO=a("a"),cPo=o("CanineForSequenceClassification"),fPo=o(" (CANINE model)"),mPo=l(),g2=a("li"),tge=a("strong"),gPo=o("convbert"),hPo=o(" \u2014 "),oO=a("a"),pPo=o("ConvBertForSequenceClassification"),_Po=o(" (ConvBERT model)"),uPo=l(),h2=a("li"),age=a("strong"),bPo=o("ctrl"),vPo=o(" \u2014 "),rO=a("a"),FPo=o("CTRLForSequenceClassification"),TPo=o(" (CTRL model)"),MPo=l(),p2=a("li"),nge=a("strong"),EPo=o("data2vec-text"),CPo=o(" \u2014 "),tO=a("a"),wPo=o("Data2VecTextForSequenceClassification"),APo=o(" (Data2VecText model)"),LPo=l(),_2=a("li"),sge=a("strong"),yPo=o("deberta"),xPo=o(" \u2014 "),aO=a("a"),$Po=o("DebertaForSequenceClassification"),kPo=o(" (DeBERTa model)"),SPo=l(),u2=a("li"),lge=a("strong"),RPo=o("deberta-v2"),PPo=o(" \u2014 "),nO=a("a"),BPo=o("DebertaV2ForSequenceClassification"),IPo=o(" (DeBERTa-v2 model)"),NPo=l(),b2=a("li"),ige=a("strong"),qPo=o("distilbert"),jPo=o(" \u2014 "),sO=a("a"),DPo=o("DistilBertForSequenceClassification"),GPo=o(" (DistilBERT model)"),OPo=l(),v2=a("li"),dge=a("strong"),VPo=o("electra"),XPo=o(" \u2014 "),lO=a("a"),zPo=o("ElectraForSequenceClassification"),WPo=o(" (ELECTRA model)"),QPo=l(),F2=a("li"),cge=a("strong"),HPo=o("flaubert"),UPo=o(" \u2014 "),iO=a("a"),JPo=o("FlaubertForSequenceClassification"),YPo=o(" (FlauBERT model)"),KPo=l(),T2=a("li"),fge=a("strong"),ZPo=o("fnet"),eBo=o(" \u2014 "),dO=a("a"),oBo=o("FNetForSequenceClassification"),rBo=o(" (FNet model)"),tBo=l(),M2=a("li"),mge=a("strong"),aBo=o("funnel"),nBo=o(" \u2014 "),cO=a("a"),sBo=o("FunnelForSequenceClassification"),lBo=o(" (Funnel Transformer model)"),iBo=l(),E2=a("li"),gge=a("strong"),dBo=o("gpt2"),cBo=o(" \u2014 "),fO=a("a"),fBo=o("GPT2ForSequenceClassification"),mBo=o(" (OpenAI GPT-2 model)"),gBo=l(),C2=a("li"),hge=a("strong"),hBo=o("gpt_neo"),pBo=o(" \u2014 "),mO=a("a"),_Bo=o("GPTNeoForSequenceClassification"),uBo=o(" (GPT Neo model)"),bBo=l(),w2=a("li"),pge=a("strong"),vBo=o("gptj"),FBo=o(" \u2014 "),gO=a("a"),TBo=o("GPTJForSequenceClassification"),MBo=o(" (GPT-J model)"),EBo=l(),A2=a("li"),_ge=a("strong"),CBo=o("ibert"),wBo=o(" \u2014 "),hO=a("a"),ABo=o("IBertForSequenceClassification"),LBo=o(" (I-BERT model)"),yBo=l(),L2=a("li"),uge=a("strong"),xBo=o("layoutlm"),$Bo=o(" \u2014 "),pO=a("a"),kBo=o("LayoutLMForSequenceClassification"),SBo=o(" (LayoutLM model)"),RBo=l(),y2=a("li"),bge=a("strong"),PBo=o("layoutlmv2"),BBo=o(" \u2014 "),_O=a("a"),IBo=o("LayoutLMv2ForSequenceClassification"),NBo=o(" (LayoutLMv2 model)"),qBo=l(),x2=a("li"),vge=a("strong"),jBo=o("layoutlmv3"),DBo=o(" \u2014 "),uO=a("a"),GBo=o("LayoutLMv3ForSequenceClassification"),OBo=o(" (LayoutLMv3 model)"),VBo=l(),$2=a("li"),Fge=a("strong"),XBo=o("led"),zBo=o(" \u2014 "),bO=a("a"),WBo=o("LEDForSequenceClassification"),QBo=o(" (LED model)"),HBo=l(),k2=a("li"),Tge=a("strong"),UBo=o("longformer"),JBo=o(" \u2014 "),vO=a("a"),YBo=o("LongformerForSequenceClassification"),KBo=o(" (Longformer model)"),ZBo=l(),S2=a("li"),Mge=a("strong"),eIo=o("mbart"),oIo=o(" \u2014 "),FO=a("a"),rIo=o("MBartForSequenceClassification"),tIo=o(" (mBART model)"),aIo=l(),R2=a("li"),Ege=a("strong"),nIo=o("megatron-bert"),sIo=o(" \u2014 "),TO=a("a"),lIo=o("MegatronBertForSequenceClassification"),iIo=o(" (Megatron-BERT model)"),dIo=l(),P2=a("li"),Cge=a("strong"),cIo=o("mobilebert"),fIo=o(" \u2014 "),MO=a("a"),mIo=o("MobileBertForSequenceClassification"),gIo=o(" (MobileBERT model)"),hIo=l(),B2=a("li"),wge=a("strong"),pIo=o("mpnet"),_Io=o(" \u2014 "),EO=a("a"),uIo=o("MPNetForSequenceClassification"),bIo=o(" (MPNet model)"),vIo=l(),I2=a("li"),Age=a("strong"),FIo=o("nystromformer"),TIo=o(" \u2014 "),CO=a("a"),MIo=o("NystromformerForSequenceClassification"),EIo=o(" (Nystr\xF6mformer model)"),CIo=l(),N2=a("li"),Lge=a("strong"),wIo=o("openai-gpt"),AIo=o(" \u2014 "),wO=a("a"),LIo=o("OpenAIGPTForSequenceClassification"),yIo=o(" (OpenAI GPT model)"),xIo=l(),q2=a("li"),yge=a("strong"),$Io=o("perceiver"),kIo=o(" \u2014 "),AO=a("a"),SIo=o("PerceiverForSequenceClassification"),RIo=o(" (Perceiver model)"),PIo=l(),j2=a("li"),xge=a("strong"),BIo=o("plbart"),IIo=o(" \u2014 "),LO=a("a"),NIo=o("PLBartForSequenceClassification"),qIo=o(" (PLBart model)"),jIo=l(),D2=a("li"),$ge=a("strong"),DIo=o("qdqbert"),GIo=o(" \u2014 "),yO=a("a"),OIo=o("QDQBertForSequenceClassification"),VIo=o(" (QDQBert model)"),XIo=l(),G2=a("li"),kge=a("strong"),zIo=o("reformer"),WIo=o(" \u2014 "),xO=a("a"),QIo=o("ReformerForSequenceClassification"),HIo=o(" (Reformer model)"),UIo=l(),O2=a("li"),Sge=a("strong"),JIo=o("rembert"),YIo=o(" \u2014 "),$O=a("a"),KIo=o("RemBertForSequenceClassification"),ZIo=o(" (RemBERT model)"),eNo=l(),V2=a("li"),Rge=a("strong"),oNo=o("roberta"),rNo=o(" \u2014 "),kO=a("a"),tNo=o("RobertaForSequenceClassification"),aNo=o(" (RoBERTa model)"),nNo=l(),X2=a("li"),Pge=a("strong"),sNo=o("roformer"),lNo=o(" \u2014 "),SO=a("a"),iNo=o("RoFormerForSequenceClassification"),dNo=o(" (RoFormer model)"),cNo=l(),z2=a("li"),Bge=a("strong"),fNo=o("squeezebert"),mNo=o(" \u2014 "),RO=a("a"),gNo=o("SqueezeBertForSequenceClassification"),hNo=o(" (SqueezeBERT model)"),pNo=l(),W2=a("li"),Ige=a("strong"),_No=o("tapas"),uNo=o(" \u2014 "),PO=a("a"),bNo=o("TapasForSequenceClassification"),vNo=o(" (TAPAS model)"),FNo=l(),Q2=a("li"),Nge=a("strong"),TNo=o("transfo-xl"),MNo=o(" \u2014 "),BO=a("a"),ENo=o("TransfoXLForSequenceClassification"),CNo=o(" (Transformer-XL model)"),wNo=l(),H2=a("li"),qge=a("strong"),ANo=o("xlm"),LNo=o(" \u2014 "),IO=a("a"),yNo=o("XLMForSequenceClassification"),xNo=o(" (XLM model)"),$No=l(),U2=a("li"),jge=a("strong"),kNo=o("xlm-roberta"),SNo=o(" \u2014 "),NO=a("a"),RNo=o("XLMRobertaForSequenceClassification"),PNo=o(" (XLM-RoBERTa model)"),BNo=l(),J2=a("li"),Dge=a("strong"),INo=o("xlm-roberta-xl"),NNo=o(" \u2014 "),qO=a("a"),qNo=o("XLMRobertaXLForSequenceClassification"),jNo=o(" (XLM-RoBERTa-XL model)"),DNo=l(),Y2=a("li"),Gge=a("strong"),GNo=o("xlnet"),ONo=o(" \u2014 "),jO=a("a"),VNo=o("XLNetForSequenceClassification"),XNo=o(" (XLNet model)"),zNo=l(),K2=a("li"),Oge=a("strong"),WNo=o("yoso"),QNo=o(" \u2014 "),DO=a("a"),HNo=o("YosoForSequenceClassification"),UNo=o(" (YOSO model)"),JNo=l(),Z2=a("p"),YNo=o("The model is set in evaluation mode by default using "),Vge=a("code"),KNo=o("model.eval()"),ZNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),eqo=o("model.train()"),oqo=l(),F(e4.$$.fragment),iDe=l(),zi=a("h2"),o4=a("a"),zge=a("span"),F(KL.$$.fragment),rqo=l(),Wge=a("span"),tqo=o("AutoModelForMultipleChoice"),dDe=l(),Po=a("div"),F(ZL.$$.fragment),aqo=l(),Wi=a("p"),nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GO=a("a"),sqo=o("from_pretrained()"),lqo=o(" class method or the "),OO=a("a"),iqo=o("from_config()"),dqo=o(` class
method.`),cqo=l(),ey=a("p"),fqo=o("This class cannot be instantiated directly using "),Qge=a("code"),mqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),ct=a("div"),F(oy.$$.fragment),pqo=l(),Hge=a("p"),_qo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uqo=l(),Qi=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),vqo=o("not"),Fqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),Tqo=o("from_pretrained()"),Mqo=o(" to load the model weights."),Eqo=l(),F(r4.$$.fragment),Cqo=l(),ro=a("div"),F(ry.$$.fragment),wqo=l(),Jge=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lqo=l(),Ba=a("p"),yqo=o("The model class to instantiate is selected based on the "),Yge=a("code"),xqo=o("model_type"),$qo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),kqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Rqo=o("pretrained_model_name_or_path"),Pqo=o(":"),Bqo=l(),Z=a("ul"),t4=a("li"),ehe=a("strong"),Iqo=o("albert"),Nqo=o(" \u2014 "),XO=a("a"),qqo=o("AlbertForMultipleChoice"),jqo=o(" (ALBERT model)"),Dqo=l(),a4=a("li"),ohe=a("strong"),Gqo=o("bert"),Oqo=o(" \u2014 "),zO=a("a"),Vqo=o("BertForMultipleChoice"),Xqo=o(" (BERT model)"),zqo=l(),n4=a("li"),rhe=a("strong"),Wqo=o("big_bird"),Qqo=o(" \u2014 "),WO=a("a"),Hqo=o("BigBirdForMultipleChoice"),Uqo=o(" (BigBird model)"),Jqo=l(),s4=a("li"),the=a("strong"),Yqo=o("camembert"),Kqo=o(" \u2014 "),QO=a("a"),Zqo=o("CamembertForMultipleChoice"),ejo=o(" (CamemBERT model)"),ojo=l(),l4=a("li"),ahe=a("strong"),rjo=o("canine"),tjo=o(" \u2014 "),HO=a("a"),ajo=o("CanineForMultipleChoice"),njo=o(" (CANINE model)"),sjo=l(),i4=a("li"),nhe=a("strong"),ljo=o("convbert"),ijo=o(" \u2014 "),UO=a("a"),djo=o("ConvBertForMultipleChoice"),cjo=o(" (ConvBERT model)"),fjo=l(),d4=a("li"),she=a("strong"),mjo=o("data2vec-text"),gjo=o(" \u2014 "),JO=a("a"),hjo=o("Data2VecTextForMultipleChoice"),pjo=o(" (Data2VecText model)"),_jo=l(),c4=a("li"),lhe=a("strong"),ujo=o("deberta-v2"),bjo=o(" \u2014 "),YO=a("a"),vjo=o("DebertaV2ForMultipleChoice"),Fjo=o(" (DeBERTa-v2 model)"),Tjo=l(),f4=a("li"),ihe=a("strong"),Mjo=o("distilbert"),Ejo=o(" \u2014 "),KO=a("a"),Cjo=o("DistilBertForMultipleChoice"),wjo=o(" (DistilBERT model)"),Ajo=l(),m4=a("li"),dhe=a("strong"),Ljo=o("electra"),yjo=o(" \u2014 "),ZO=a("a"),xjo=o("ElectraForMultipleChoice"),$jo=o(" (ELECTRA model)"),kjo=l(),g4=a("li"),che=a("strong"),Sjo=o("flaubert"),Rjo=o(" \u2014 "),eV=a("a"),Pjo=o("FlaubertForMultipleChoice"),Bjo=o(" (FlauBERT model)"),Ijo=l(),h4=a("li"),fhe=a("strong"),Njo=o("fnet"),qjo=o(" \u2014 "),oV=a("a"),jjo=o("FNetForMultipleChoice"),Djo=o(" (FNet model)"),Gjo=l(),p4=a("li"),mhe=a("strong"),Ojo=o("funnel"),Vjo=o(" \u2014 "),rV=a("a"),Xjo=o("FunnelForMultipleChoice"),zjo=o(" (Funnel Transformer model)"),Wjo=l(),_4=a("li"),ghe=a("strong"),Qjo=o("ibert"),Hjo=o(" \u2014 "),tV=a("a"),Ujo=o("IBertForMultipleChoice"),Jjo=o(" (I-BERT model)"),Yjo=l(),u4=a("li"),hhe=a("strong"),Kjo=o("longformer"),Zjo=o(" \u2014 "),aV=a("a"),eDo=o("LongformerForMultipleChoice"),oDo=o(" (Longformer model)"),rDo=l(),b4=a("li"),phe=a("strong"),tDo=o("megatron-bert"),aDo=o(" \u2014 "),nV=a("a"),nDo=o("MegatronBertForMultipleChoice"),sDo=o(" (Megatron-BERT model)"),lDo=l(),v4=a("li"),_he=a("strong"),iDo=o("mobilebert"),dDo=o(" \u2014 "),sV=a("a"),cDo=o("MobileBertForMultipleChoice"),fDo=o(" (MobileBERT model)"),mDo=l(),F4=a("li"),uhe=a("strong"),gDo=o("mpnet"),hDo=o(" \u2014 "),lV=a("a"),pDo=o("MPNetForMultipleChoice"),_Do=o(" (MPNet model)"),uDo=l(),T4=a("li"),bhe=a("strong"),bDo=o("nystromformer"),vDo=o(" \u2014 "),iV=a("a"),FDo=o("NystromformerForMultipleChoice"),TDo=o(" (Nystr\xF6mformer model)"),MDo=l(),M4=a("li"),vhe=a("strong"),EDo=o("qdqbert"),CDo=o(" \u2014 "),dV=a("a"),wDo=o("QDQBertForMultipleChoice"),ADo=o(" (QDQBert model)"),LDo=l(),E4=a("li"),Fhe=a("strong"),yDo=o("rembert"),xDo=o(" \u2014 "),cV=a("a"),$Do=o("RemBertForMultipleChoice"),kDo=o(" (RemBERT model)"),SDo=l(),C4=a("li"),The=a("strong"),RDo=o("roberta"),PDo=o(" \u2014 "),fV=a("a"),BDo=o("RobertaForMultipleChoice"),IDo=o(" (RoBERTa model)"),NDo=l(),w4=a("li"),Mhe=a("strong"),qDo=o("roformer"),jDo=o(" \u2014 "),mV=a("a"),DDo=o("RoFormerForMultipleChoice"),GDo=o(" (RoFormer model)"),ODo=l(),A4=a("li"),Ehe=a("strong"),VDo=o("squeezebert"),XDo=o(" \u2014 "),gV=a("a"),zDo=o("SqueezeBertForMultipleChoice"),WDo=o(" (SqueezeBERT model)"),QDo=l(),L4=a("li"),Che=a("strong"),HDo=o("xlm"),UDo=o(" \u2014 "),hV=a("a"),JDo=o("XLMForMultipleChoice"),YDo=o(" (XLM model)"),KDo=l(),y4=a("li"),whe=a("strong"),ZDo=o("xlm-roberta"),eGo=o(" \u2014 "),pV=a("a"),oGo=o("XLMRobertaForMultipleChoice"),rGo=o(" (XLM-RoBERTa model)"),tGo=l(),x4=a("li"),Ahe=a("strong"),aGo=o("xlm-roberta-xl"),nGo=o(" \u2014 "),_V=a("a"),sGo=o("XLMRobertaXLForMultipleChoice"),lGo=o(" (XLM-RoBERTa-XL model)"),iGo=l(),$4=a("li"),Lhe=a("strong"),dGo=o("xlnet"),cGo=o(" \u2014 "),uV=a("a"),fGo=o("XLNetForMultipleChoice"),mGo=o(" (XLNet model)"),gGo=l(),k4=a("li"),yhe=a("strong"),hGo=o("yoso"),pGo=o(" \u2014 "),bV=a("a"),_Go=o("YosoForMultipleChoice"),uGo=o(" (YOSO model)"),bGo=l(),S4=a("p"),vGo=o("The model is set in evaluation mode by default using "),xhe=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),MGo=o("model.train()"),EGo=l(),F(R4.$$.fragment),cDe=l(),Hi=a("h2"),P4=a("a"),khe=a("span"),F(ty.$$.fragment),CGo=l(),She=a("span"),wGo=o("AutoModelForNextSentencePrediction"),fDe=l(),Bo=a("div"),F(ay.$$.fragment),AGo=l(),Ui=a("p"),LGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vV=a("a"),yGo=o("from_pretrained()"),xGo=o(" class method or the "),FV=a("a"),$Go=o("from_config()"),kGo=o(` class
method.`),SGo=l(),ny=a("p"),RGo=o("This class cannot be instantiated directly using "),Rhe=a("code"),PGo=o("__init__()"),BGo=o(" (throws an error)."),IGo=l(),ft=a("div"),F(sy.$$.fragment),NGo=l(),Phe=a("p"),qGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jGo=l(),Ji=a("p"),DGo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),GGo=o("not"),OGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),VGo=o("from_pretrained()"),XGo=o(" to load the model weights."),zGo=l(),F(B4.$$.fragment),WGo=l(),to=a("div"),F(ly.$$.fragment),QGo=l(),Ihe=a("p"),HGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UGo=l(),Ia=a("p"),JGo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),YGo=o("model_type"),KGo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),ZGo=o("pretrained_model_name_or_path"),eOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),oOo=o("pretrained_model_name_or_path"),rOo=o(":"),tOo=l(),Yr=a("ul"),I4=a("li"),Dhe=a("strong"),aOo=o("bert"),nOo=o(" \u2014 "),MV=a("a"),sOo=o("BertForNextSentencePrediction"),lOo=o(" (BERT model)"),iOo=l(),N4=a("li"),Ghe=a("strong"),dOo=o("fnet"),cOo=o(" \u2014 "),EV=a("a"),fOo=o("FNetForNextSentencePrediction"),mOo=o(" (FNet model)"),gOo=l(),q4=a("li"),Ohe=a("strong"),hOo=o("megatron-bert"),pOo=o(" \u2014 "),CV=a("a"),_Oo=o("MegatronBertForNextSentencePrediction"),uOo=o(" (Megatron-BERT model)"),bOo=l(),j4=a("li"),Vhe=a("strong"),vOo=o("mobilebert"),FOo=o(" \u2014 "),wV=a("a"),TOo=o("MobileBertForNextSentencePrediction"),MOo=o(" (MobileBERT model)"),EOo=l(),D4=a("li"),Xhe=a("strong"),COo=o("qdqbert"),wOo=o(" \u2014 "),AV=a("a"),AOo=o("QDQBertForNextSentencePrediction"),LOo=o(" (QDQBert model)"),yOo=l(),G4=a("p"),xOo=o("The model is set in evaluation mode by default using "),zhe=a("code"),$Oo=o("model.eval()"),kOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),SOo=o("model.train()"),ROo=l(),F(O4.$$.fragment),mDe=l(),Yi=a("h2"),V4=a("a"),Qhe=a("span"),F(iy.$$.fragment),POo=l(),Hhe=a("span"),BOo=o("AutoModelForTokenClassification"),gDe=l(),Io=a("div"),F(dy.$$.fragment),IOo=l(),Ki=a("p"),NOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LV=a("a"),qOo=o("from_pretrained()"),jOo=o(" class method or the "),yV=a("a"),DOo=o("from_config()"),GOo=o(` class
method.`),OOo=l(),cy=a("p"),VOo=o("This class cannot be instantiated directly using "),Uhe=a("code"),XOo=o("__init__()"),zOo=o(" (throws an error)."),WOo=l(),mt=a("div"),F(fy.$$.fragment),QOo=l(),Jhe=a("p"),HOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UOo=l(),Zi=a("p"),JOo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),YOo=o("not"),KOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),ZOo=o("from_pretrained()"),eVo=o(" to load the model weights."),oVo=l(),F(X4.$$.fragment),rVo=l(),ao=a("div"),F(my.$$.fragment),tVo=l(),Khe=a("p"),aVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nVo=l(),Na=a("p"),sVo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),lVo=o("model_type"),iVo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),dVo=o("pretrained_model_name_or_path"),cVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),fVo=o("pretrained_model_name_or_path"),mVo=o(":"),gVo=l(),U=a("ul"),z4=a("li"),rpe=a("strong"),hVo=o("albert"),pVo=o(" \u2014 "),$V=a("a"),_Vo=o("AlbertForTokenClassification"),uVo=o(" (ALBERT model)"),bVo=l(),W4=a("li"),tpe=a("strong"),vVo=o("bert"),FVo=o(" \u2014 "),kV=a("a"),TVo=o("BertForTokenClassification"),MVo=o(" (BERT model)"),EVo=l(),Q4=a("li"),ape=a("strong"),CVo=o("big_bird"),wVo=o(" \u2014 "),SV=a("a"),AVo=o("BigBirdForTokenClassification"),LVo=o(" (BigBird model)"),yVo=l(),H4=a("li"),npe=a("strong"),xVo=o("camembert"),$Vo=o(" \u2014 "),RV=a("a"),kVo=o("CamembertForTokenClassification"),SVo=o(" (CamemBERT model)"),RVo=l(),U4=a("li"),spe=a("strong"),PVo=o("canine"),BVo=o(" \u2014 "),PV=a("a"),IVo=o("CanineForTokenClassification"),NVo=o(" (CANINE model)"),qVo=l(),J4=a("li"),lpe=a("strong"),jVo=o("convbert"),DVo=o(" \u2014 "),BV=a("a"),GVo=o("ConvBertForTokenClassification"),OVo=o(" (ConvBERT model)"),VVo=l(),Y4=a("li"),ipe=a("strong"),XVo=o("data2vec-text"),zVo=o(" \u2014 "),IV=a("a"),WVo=o("Data2VecTextForTokenClassification"),QVo=o(" (Data2VecText model)"),HVo=l(),K4=a("li"),dpe=a("strong"),UVo=o("deberta"),JVo=o(" \u2014 "),NV=a("a"),YVo=o("DebertaForTokenClassification"),KVo=o(" (DeBERTa model)"),ZVo=l(),Z4=a("li"),cpe=a("strong"),eXo=o("deberta-v2"),oXo=o(" \u2014 "),qV=a("a"),rXo=o("DebertaV2ForTokenClassification"),tXo=o(" (DeBERTa-v2 model)"),aXo=l(),ev=a("li"),fpe=a("strong"),nXo=o("distilbert"),sXo=o(" \u2014 "),jV=a("a"),lXo=o("DistilBertForTokenClassification"),iXo=o(" (DistilBERT model)"),dXo=l(),ov=a("li"),mpe=a("strong"),cXo=o("electra"),fXo=o(" \u2014 "),DV=a("a"),mXo=o("ElectraForTokenClassification"),gXo=o(" (ELECTRA model)"),hXo=l(),rv=a("li"),gpe=a("strong"),pXo=o("flaubert"),_Xo=o(" \u2014 "),GV=a("a"),uXo=o("FlaubertForTokenClassification"),bXo=o(" (FlauBERT model)"),vXo=l(),tv=a("li"),hpe=a("strong"),FXo=o("fnet"),TXo=o(" \u2014 "),OV=a("a"),MXo=o("FNetForTokenClassification"),EXo=o(" (FNet model)"),CXo=l(),av=a("li"),ppe=a("strong"),wXo=o("funnel"),AXo=o(" \u2014 "),VV=a("a"),LXo=o("FunnelForTokenClassification"),yXo=o(" (Funnel Transformer model)"),xXo=l(),nv=a("li"),_pe=a("strong"),$Xo=o("gpt2"),kXo=o(" \u2014 "),XV=a("a"),SXo=o("GPT2ForTokenClassification"),RXo=o(" (OpenAI GPT-2 model)"),PXo=l(),sv=a("li"),upe=a("strong"),BXo=o("ibert"),IXo=o(" \u2014 "),zV=a("a"),NXo=o("IBertForTokenClassification"),qXo=o(" (I-BERT model)"),jXo=l(),lv=a("li"),bpe=a("strong"),DXo=o("layoutlm"),GXo=o(" \u2014 "),WV=a("a"),OXo=o("LayoutLMForTokenClassification"),VXo=o(" (LayoutLM model)"),XXo=l(),iv=a("li"),vpe=a("strong"),zXo=o("layoutlmv2"),WXo=o(" \u2014 "),QV=a("a"),QXo=o("LayoutLMv2ForTokenClassification"),HXo=o(" (LayoutLMv2 model)"),UXo=l(),dv=a("li"),Fpe=a("strong"),JXo=o("layoutlmv3"),YXo=o(" \u2014 "),HV=a("a"),KXo=o("LayoutLMv3ForTokenClassification"),ZXo=o(" (LayoutLMv3 model)"),ezo=l(),cv=a("li"),Tpe=a("strong"),ozo=o("longformer"),rzo=o(" \u2014 "),UV=a("a"),tzo=o("LongformerForTokenClassification"),azo=o(" (Longformer model)"),nzo=l(),fv=a("li"),Mpe=a("strong"),szo=o("megatron-bert"),lzo=o(" \u2014 "),JV=a("a"),izo=o("MegatronBertForTokenClassification"),dzo=o(" (Megatron-BERT model)"),czo=l(),mv=a("li"),Epe=a("strong"),fzo=o("mobilebert"),mzo=o(" \u2014 "),YV=a("a"),gzo=o("MobileBertForTokenClassification"),hzo=o(" (MobileBERT model)"),pzo=l(),gv=a("li"),Cpe=a("strong"),_zo=o("mpnet"),uzo=o(" \u2014 "),KV=a("a"),bzo=o("MPNetForTokenClassification"),vzo=o(" (MPNet model)"),Fzo=l(),hv=a("li"),wpe=a("strong"),Tzo=o("nystromformer"),Mzo=o(" \u2014 "),ZV=a("a"),Ezo=o("NystromformerForTokenClassification"),Czo=o(" (Nystr\xF6mformer model)"),wzo=l(),pv=a("li"),Ape=a("strong"),Azo=o("qdqbert"),Lzo=o(" \u2014 "),eX=a("a"),yzo=o("QDQBertForTokenClassification"),xzo=o(" (QDQBert model)"),$zo=l(),_v=a("li"),Lpe=a("strong"),kzo=o("rembert"),Szo=o(" \u2014 "),oX=a("a"),Rzo=o("RemBertForTokenClassification"),Pzo=o(" (RemBERT model)"),Bzo=l(),uv=a("li"),ype=a("strong"),Izo=o("roberta"),Nzo=o(" \u2014 "),rX=a("a"),qzo=o("RobertaForTokenClassification"),jzo=o(" (RoBERTa model)"),Dzo=l(),bv=a("li"),xpe=a("strong"),Gzo=o("roformer"),Ozo=o(" \u2014 "),tX=a("a"),Vzo=o("RoFormerForTokenClassification"),Xzo=o(" (RoFormer model)"),zzo=l(),vv=a("li"),$pe=a("strong"),Wzo=o("squeezebert"),Qzo=o(" \u2014 "),aX=a("a"),Hzo=o("SqueezeBertForTokenClassification"),Uzo=o(" (SqueezeBERT model)"),Jzo=l(),Fv=a("li"),kpe=a("strong"),Yzo=o("xlm"),Kzo=o(" \u2014 "),nX=a("a"),Zzo=o("XLMForTokenClassification"),eWo=o(" (XLM model)"),oWo=l(),Tv=a("li"),Spe=a("strong"),rWo=o("xlm-roberta"),tWo=o(" \u2014 "),sX=a("a"),aWo=o("XLMRobertaForTokenClassification"),nWo=o(" (XLM-RoBERTa model)"),sWo=l(),Mv=a("li"),Rpe=a("strong"),lWo=o("xlm-roberta-xl"),iWo=o(" \u2014 "),lX=a("a"),dWo=o("XLMRobertaXLForTokenClassification"),cWo=o(" (XLM-RoBERTa-XL model)"),fWo=l(),Ev=a("li"),Ppe=a("strong"),mWo=o("xlnet"),gWo=o(" \u2014 "),iX=a("a"),hWo=o("XLNetForTokenClassification"),pWo=o(" (XLNet model)"),_Wo=l(),Cv=a("li"),Bpe=a("strong"),uWo=o("yoso"),bWo=o(" \u2014 "),dX=a("a"),vWo=o("YosoForTokenClassification"),FWo=o(" (YOSO model)"),TWo=l(),wv=a("p"),MWo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),EWo=o("model.eval()"),CWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),wWo=o("model.train()"),AWo=l(),F(Av.$$.fragment),hDe=l(),ed=a("h2"),Lv=a("a"),qpe=a("span"),F(gy.$$.fragment),LWo=l(),jpe=a("span"),yWo=o("AutoModelForQuestionAnswering"),pDe=l(),No=a("div"),F(hy.$$.fragment),xWo=l(),od=a("p"),$Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cX=a("a"),kWo=o("from_pretrained()"),SWo=o(" class method or the "),fX=a("a"),RWo=o("from_config()"),PWo=o(` class
method.`),BWo=l(),py=a("p"),IWo=o("This class cannot be instantiated directly using "),Dpe=a("code"),NWo=o("__init__()"),qWo=o(" (throws an error)."),jWo=l(),gt=a("div"),F(_y.$$.fragment),DWo=l(),Gpe=a("p"),GWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OWo=l(),rd=a("p"),VWo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),XWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),WWo=o("from_pretrained()"),QWo=o(" to load the model weights."),HWo=l(),F(yv.$$.fragment),UWo=l(),no=a("div"),F(uy.$$.fragment),JWo=l(),Vpe=a("p"),YWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KWo=l(),qa=a("p"),ZWo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),eQo=o("model_type"),oQo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(":"),sQo=l(),V=a("ul"),xv=a("li"),Qpe=a("strong"),lQo=o("albert"),iQo=o(" \u2014 "),gX=a("a"),dQo=o("AlbertForQuestionAnswering"),cQo=o(" (ALBERT model)"),fQo=l(),$v=a("li"),Hpe=a("strong"),mQo=o("bart"),gQo=o(" \u2014 "),hX=a("a"),hQo=o("BartForQuestionAnswering"),pQo=o(" (BART model)"),_Qo=l(),kv=a("li"),Upe=a("strong"),uQo=o("bert"),bQo=o(" \u2014 "),pX=a("a"),vQo=o("BertForQuestionAnswering"),FQo=o(" (BERT model)"),TQo=l(),Sv=a("li"),Jpe=a("strong"),MQo=o("big_bird"),EQo=o(" \u2014 "),_X=a("a"),CQo=o("BigBirdForQuestionAnswering"),wQo=o(" (BigBird model)"),AQo=l(),Rv=a("li"),Ype=a("strong"),LQo=o("bigbird_pegasus"),yQo=o(" \u2014 "),uX=a("a"),xQo=o("BigBirdPegasusForQuestionAnswering"),$Qo=o(" (BigBird-Pegasus model)"),kQo=l(),Pv=a("li"),Kpe=a("strong"),SQo=o("camembert"),RQo=o(" \u2014 "),bX=a("a"),PQo=o("CamembertForQuestionAnswering"),BQo=o(" (CamemBERT model)"),IQo=l(),Bv=a("li"),Zpe=a("strong"),NQo=o("canine"),qQo=o(" \u2014 "),vX=a("a"),jQo=o("CanineForQuestionAnswering"),DQo=o(" (CANINE model)"),GQo=l(),Iv=a("li"),e_e=a("strong"),OQo=o("convbert"),VQo=o(" \u2014 "),FX=a("a"),XQo=o("ConvBertForQuestionAnswering"),zQo=o(" (ConvBERT model)"),WQo=l(),Nv=a("li"),o_e=a("strong"),QQo=o("data2vec-text"),HQo=o(" \u2014 "),TX=a("a"),UQo=o("Data2VecTextForQuestionAnswering"),JQo=o(" (Data2VecText model)"),YQo=l(),qv=a("li"),r_e=a("strong"),KQo=o("deberta"),ZQo=o(" \u2014 "),MX=a("a"),eHo=o("DebertaForQuestionAnswering"),oHo=o(" (DeBERTa model)"),rHo=l(),jv=a("li"),t_e=a("strong"),tHo=o("deberta-v2"),aHo=o(" \u2014 "),EX=a("a"),nHo=o("DebertaV2ForQuestionAnswering"),sHo=o(" (DeBERTa-v2 model)"),lHo=l(),Dv=a("li"),a_e=a("strong"),iHo=o("distilbert"),dHo=o(" \u2014 "),CX=a("a"),cHo=o("DistilBertForQuestionAnswering"),fHo=o(" (DistilBERT model)"),mHo=l(),Gv=a("li"),n_e=a("strong"),gHo=o("electra"),hHo=o(" \u2014 "),wX=a("a"),pHo=o("ElectraForQuestionAnswering"),_Ho=o(" (ELECTRA model)"),uHo=l(),Ov=a("li"),s_e=a("strong"),bHo=o("flaubert"),vHo=o(" \u2014 "),AX=a("a"),FHo=o("FlaubertForQuestionAnsweringSimple"),THo=o(" (FlauBERT model)"),MHo=l(),Vv=a("li"),l_e=a("strong"),EHo=o("fnet"),CHo=o(" \u2014 "),LX=a("a"),wHo=o("FNetForQuestionAnswering"),AHo=o(" (FNet model)"),LHo=l(),Xv=a("li"),i_e=a("strong"),yHo=o("funnel"),xHo=o(" \u2014 "),yX=a("a"),$Ho=o("FunnelForQuestionAnswering"),kHo=o(" (Funnel Transformer model)"),SHo=l(),zv=a("li"),d_e=a("strong"),RHo=o("gptj"),PHo=o(" \u2014 "),xX=a("a"),BHo=o("GPTJForQuestionAnswering"),IHo=o(" (GPT-J model)"),NHo=l(),Wv=a("li"),c_e=a("strong"),qHo=o("ibert"),jHo=o(" \u2014 "),$X=a("a"),DHo=o("IBertForQuestionAnswering"),GHo=o(" (I-BERT model)"),OHo=l(),Qv=a("li"),f_e=a("strong"),VHo=o("layoutlmv2"),XHo=o(" \u2014 "),kX=a("a"),zHo=o("LayoutLMv2ForQuestionAnswering"),WHo=o(" (LayoutLMv2 model)"),QHo=l(),Hv=a("li"),m_e=a("strong"),HHo=o("layoutlmv3"),UHo=o(" \u2014 "),SX=a("a"),JHo=o("LayoutLMv3ForQuestionAnswering"),YHo=o(" (LayoutLMv3 model)"),KHo=l(),Uv=a("li"),g_e=a("strong"),ZHo=o("led"),eUo=o(" \u2014 "),RX=a("a"),oUo=o("LEDForQuestionAnswering"),rUo=o(" (LED model)"),tUo=l(),Jv=a("li"),h_e=a("strong"),aUo=o("longformer"),nUo=o(" \u2014 "),PX=a("a"),sUo=o("LongformerForQuestionAnswering"),lUo=o(" (Longformer model)"),iUo=l(),Yv=a("li"),p_e=a("strong"),dUo=o("lxmert"),cUo=o(" \u2014 "),BX=a("a"),fUo=o("LxmertForQuestionAnswering"),mUo=o(" (LXMERT model)"),gUo=l(),Kv=a("li"),__e=a("strong"),hUo=o("mbart"),pUo=o(" \u2014 "),IX=a("a"),_Uo=o("MBartForQuestionAnswering"),uUo=o(" (mBART model)"),bUo=l(),Zv=a("li"),u_e=a("strong"),vUo=o("megatron-bert"),FUo=o(" \u2014 "),NX=a("a"),TUo=o("MegatronBertForQuestionAnswering"),MUo=o(" (Megatron-BERT model)"),EUo=l(),e5=a("li"),b_e=a("strong"),CUo=o("mobilebert"),wUo=o(" \u2014 "),qX=a("a"),AUo=o("MobileBertForQuestionAnswering"),LUo=o(" (MobileBERT model)"),yUo=l(),o5=a("li"),v_e=a("strong"),xUo=o("mpnet"),$Uo=o(" \u2014 "),jX=a("a"),kUo=o("MPNetForQuestionAnswering"),SUo=o(" (MPNet model)"),RUo=l(),r5=a("li"),F_e=a("strong"),PUo=o("nystromformer"),BUo=o(" \u2014 "),DX=a("a"),IUo=o("NystromformerForQuestionAnswering"),NUo=o(" (Nystr\xF6mformer model)"),qUo=l(),t5=a("li"),T_e=a("strong"),jUo=o("qdqbert"),DUo=o(" \u2014 "),GX=a("a"),GUo=o("QDQBertForQuestionAnswering"),OUo=o(" (QDQBert model)"),VUo=l(),a5=a("li"),M_e=a("strong"),XUo=o("reformer"),zUo=o(" \u2014 "),OX=a("a"),WUo=o("ReformerForQuestionAnswering"),QUo=o(" (Reformer model)"),HUo=l(),n5=a("li"),E_e=a("strong"),UUo=o("rembert"),JUo=o(" \u2014 "),VX=a("a"),YUo=o("RemBertForQuestionAnswering"),KUo=o(" (RemBERT model)"),ZUo=l(),s5=a("li"),C_e=a("strong"),eJo=o("roberta"),oJo=o(" \u2014 "),XX=a("a"),rJo=o("RobertaForQuestionAnswering"),tJo=o(" (RoBERTa model)"),aJo=l(),l5=a("li"),w_e=a("strong"),nJo=o("roformer"),sJo=o(" \u2014 "),zX=a("a"),lJo=o("RoFormerForQuestionAnswering"),iJo=o(" (RoFormer model)"),dJo=l(),i5=a("li"),A_e=a("strong"),cJo=o("splinter"),fJo=o(" \u2014 "),WX=a("a"),mJo=o("SplinterForQuestionAnswering"),gJo=o(" (Splinter model)"),hJo=l(),d5=a("li"),L_e=a("strong"),pJo=o("squeezebert"),_Jo=o(" \u2014 "),QX=a("a"),uJo=o("SqueezeBertForQuestionAnswering"),bJo=o(" (SqueezeBERT model)"),vJo=l(),c5=a("li"),y_e=a("strong"),FJo=o("xlm"),TJo=o(" \u2014 "),HX=a("a"),MJo=o("XLMForQuestionAnsweringSimple"),EJo=o(" (XLM model)"),CJo=l(),f5=a("li"),x_e=a("strong"),wJo=o("xlm-roberta"),AJo=o(" \u2014 "),UX=a("a"),LJo=o("XLMRobertaForQuestionAnswering"),yJo=o(" (XLM-RoBERTa model)"),xJo=l(),m5=a("li"),$_e=a("strong"),$Jo=o("xlm-roberta-xl"),kJo=o(" \u2014 "),JX=a("a"),SJo=o("XLMRobertaXLForQuestionAnswering"),RJo=o(" (XLM-RoBERTa-XL model)"),PJo=l(),g5=a("li"),k_e=a("strong"),BJo=o("xlnet"),IJo=o(" \u2014 "),YX=a("a"),NJo=o("XLNetForQuestionAnsweringSimple"),qJo=o(" (XLNet model)"),jJo=l(),h5=a("li"),S_e=a("strong"),DJo=o("yoso"),GJo=o(" \u2014 "),KX=a("a"),OJo=o("YosoForQuestionAnswering"),VJo=o(" (YOSO model)"),XJo=l(),p5=a("p"),zJo=o("The model is set in evaluation mode by default using "),R_e=a("code"),WJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),HJo=o("model.train()"),UJo=l(),F(_5.$$.fragment),_De=l(),td=a("h2"),u5=a("a"),B_e=a("span"),F(by.$$.fragment),JJo=l(),I_e=a("span"),YJo=o("AutoModelForTableQuestionAnswering"),uDe=l(),qo=a("div"),F(vy.$$.fragment),KJo=l(),ad=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),ez=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),Fy=a("p"),nYo=o("This class cannot be instantiated directly using "),N_e=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),ht=a("div"),F(Ty.$$.fragment),dYo=l(),q_e=a("p"),cYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fYo=l(),nd=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),pYo=o("from_pretrained()"),_Yo=o(" to load the model weights."),uYo=l(),F(b5.$$.fragment),bYo=l(),so=a("div"),F(My.$$.fragment),vYo=l(),D_e=a("p"),FYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TYo=l(),ja=a("p"),MYo=o("The model class to instantiate is selected based on the "),G_e=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),LYo=o("pretrained_model_name_or_path"),yYo=o(":"),xYo=l(),X_e=a("ul"),v5=a("li"),z_e=a("strong"),$Yo=o("tapas"),kYo=o(" \u2014 "),rz=a("a"),SYo=o("TapasForQuestionAnswering"),RYo=o(" (TAPAS model)"),PYo=l(),F5=a("p"),BYo=o("The model is set in evaluation mode by default using "),W_e=a("code"),IYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),qYo=o("model.train()"),jYo=l(),F(T5.$$.fragment),bDe=l(),sd=a("h2"),M5=a("a"),H_e=a("span"),F(Ey.$$.fragment),DYo=l(),U_e=a("span"),GYo=o("AutoModelForImageClassification"),vDe=l(),jo=a("div"),F(Cy.$$.fragment),OYo=l(),ld=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tz=a("a"),XYo=o("from_pretrained()"),zYo=o(" class method or the "),az=a("a"),WYo=o("from_config()"),QYo=o(` class
method.`),HYo=l(),wy=a("p"),UYo=o("This class cannot be instantiated directly using "),J_e=a("code"),JYo=o("__init__()"),YYo=o(" (throws an error)."),KYo=l(),pt=a("div"),F(Ay.$$.fragment),ZYo=l(),Y_e=a("p"),eKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oKo=l(),id=a("p"),rKo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),tKo=o("not"),aKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),nKo=o("from_pretrained()"),sKo=o(" to load the model weights."),lKo=l(),F(E5.$$.fragment),iKo=l(),lo=a("div"),F(Ly.$$.fragment),dKo=l(),Z_e=a("p"),cKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fKo=l(),Da=a("p"),mKo=o("The model class to instantiate is selected based on the "),eue=a("code"),gKo=o("model_type"),hKo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),pKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),uKo=o("pretrained_model_name_or_path"),bKo=o(":"),vKo=l(),ue=a("ul"),C5=a("li"),tue=a("strong"),FKo=o("beit"),TKo=o(" \u2014 "),sz=a("a"),MKo=o("BeitForImageClassification"),EKo=o(" (BEiT model)"),CKo=l(),w5=a("li"),aue=a("strong"),wKo=o("convnext"),AKo=o(" \u2014 "),lz=a("a"),LKo=o("ConvNextForImageClassification"),yKo=o(" (ConvNeXT model)"),xKo=l(),A5=a("li"),nue=a("strong"),$Ko=o("cvt"),kKo=o(" \u2014 "),iz=a("a"),SKo=o("CvtForImageClassification"),RKo=o(" (CvT model)"),PKo=l(),L5=a("li"),sue=a("strong"),BKo=o("data2vec-vision"),IKo=o(" \u2014 "),dz=a("a"),NKo=o("Data2VecVisionForImageClassification"),qKo=o(" (Data2VecVision model)"),jKo=l(),Bs=a("li"),lue=a("strong"),DKo=o("deit"),GKo=o(" \u2014 "),cz=a("a"),OKo=o("DeiTForImageClassification"),VKo=o(" or "),fz=a("a"),XKo=o("DeiTForImageClassificationWithTeacher"),zKo=o(" (DeiT model)"),WKo=l(),y5=a("li"),iue=a("strong"),QKo=o("imagegpt"),HKo=o(" \u2014 "),mz=a("a"),UKo=o("ImageGPTForImageClassification"),JKo=o(" (ImageGPT model)"),YKo=l(),Is=a("li"),due=a("strong"),KKo=o("levit"),ZKo=o(" \u2014 "),gz=a("a"),eZo=o("LevitForImageClassification"),oZo=o(" or "),hz=a("a"),rZo=o("LevitForImageClassificationWithTeacher"),tZo=o(" (LeViT model)"),aZo=l(),x5=a("li"),cue=a("strong"),nZo=o("mobilevit"),sZo=o(" \u2014 "),pz=a("a"),lZo=o("MobileViTForImageClassification"),iZo=o(" (MobileViT model)"),dZo=l(),_t=a("li"),fue=a("strong"),cZo=o("perceiver"),fZo=o(" \u2014 "),_z=a("a"),mZo=o("PerceiverForImageClassificationLearned"),gZo=o(" or "),uz=a("a"),hZo=o("PerceiverForImageClassificationFourier"),pZo=o(" or "),bz=a("a"),_Zo=o("PerceiverForImageClassificationConvProcessing"),uZo=o(" (Perceiver model)"),bZo=l(),$5=a("li"),mue=a("strong"),vZo=o("poolformer"),FZo=o(" \u2014 "),vz=a("a"),TZo=o("PoolFormerForImageClassification"),MZo=o(" (PoolFormer model)"),EZo=l(),k5=a("li"),gue=a("strong"),CZo=o("regnet"),wZo=o(" \u2014 "),Fz=a("a"),AZo=o("RegNetForImageClassification"),LZo=o(" (RegNet model)"),yZo=l(),S5=a("li"),hue=a("strong"),xZo=o("resnet"),$Zo=o(" \u2014 "),Tz=a("a"),kZo=o("ResNetForImageClassification"),SZo=o(" (ResNet model)"),RZo=l(),R5=a("li"),pue=a("strong"),PZo=o("segformer"),BZo=o(" \u2014 "),Mz=a("a"),IZo=o("SegformerForImageClassification"),NZo=o(" (SegFormer model)"),qZo=l(),P5=a("li"),_ue=a("strong"),jZo=o("swin"),DZo=o(" \u2014 "),Ez=a("a"),GZo=o("SwinForImageClassification"),OZo=o(" (Swin Transformer model)"),VZo=l(),B5=a("li"),uue=a("strong"),XZo=o("van"),zZo=o(" \u2014 "),Cz=a("a"),WZo=o("VanForImageClassification"),QZo=o(" (VAN model)"),HZo=l(),I5=a("li"),bue=a("strong"),UZo=o("vit"),JZo=o(" \u2014 "),wz=a("a"),YZo=o("ViTForImageClassification"),KZo=o(" (ViT model)"),ZZo=l(),N5=a("p"),eer=o("The model is set in evaluation mode by default using "),vue=a("code"),oer=o("model.eval()"),rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),ter=o("model.train()"),aer=l(),F(q5.$$.fragment),FDe=l(),dd=a("h2"),j5=a("a"),Tue=a("span"),F(yy.$$.fragment),ner=l(),Mue=a("span"),ser=o("AutoModelForVision2Seq"),TDe=l(),Do=a("div"),F(xy.$$.fragment),ler=l(),cd=a("p"),ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Az=a("a"),der=o("from_pretrained()"),cer=o(" class method or the "),Lz=a("a"),fer=o("from_config()"),mer=o(` class
method.`),ger=l(),$y=a("p"),her=o("This class cannot be instantiated directly using "),Eue=a("code"),per=o("__init__()"),_er=o(" (throws an error)."),uer=l(),ut=a("div"),F(ky.$$.fragment),ber=l(),Cue=a("p"),ver=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fer=l(),fd=a("p"),Ter=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Mer=o("not"),Eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Cer=o("from_pretrained()"),wer=o(" to load the model weights."),Aer=l(),F(D5.$$.fragment),Ler=l(),io=a("div"),F(Sy.$$.fragment),yer=l(),Aue=a("p"),xer=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$er=l(),Ga=a("p"),ker=o("The model class to instantiate is selected based on the "),Lue=a("code"),Ser=o("model_type"),Rer=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),Per=o("pretrained_model_name_or_path"),Ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Ier=o("pretrained_model_name_or_path"),Ner=o(":"),qer=l(),$ue=a("ul"),G5=a("li"),kue=a("strong"),jer=o("vision-encoder-decoder"),Der=o(" \u2014 "),xz=a("a"),Ger=o("VisionEncoderDecoderModel"),Oer=o(" (Vision Encoder decoder model)"),Ver=l(),O5=a("p"),Xer=o("The model is set in evaluation mode by default using "),Sue=a("code"),zer=o("model.eval()"),Wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),Qer=o("model.train()"),Her=l(),F(V5.$$.fragment),MDe=l(),md=a("h2"),X5=a("a"),Pue=a("span"),F(Ry.$$.fragment),Uer=l(),Bue=a("span"),Jer=o("AutoModelForAudioClassification"),EDe=l(),Go=a("div"),F(Py.$$.fragment),Yer=l(),gd=a("p"),Ker=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$z=a("a"),Zer=o("from_pretrained()"),eor=o(" class method or the "),kz=a("a"),oor=o("from_config()"),ror=o(` class
method.`),tor=l(),By=a("p"),aor=o("This class cannot be instantiated directly using "),Iue=a("code"),nor=o("__init__()"),sor=o(" (throws an error)."),lor=l(),bt=a("div"),F(Iy.$$.fragment),ior=l(),Nue=a("p"),dor=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cor=l(),hd=a("p"),mor=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),gor=o("not"),hor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),por=o("from_pretrained()"),_or=o(" to load the model weights."),uor=l(),F(z5.$$.fragment),bor=l(),co=a("div"),F(Ny.$$.fragment),vor=l(),jue=a("p"),For=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Tor=l(),Oa=a("p"),Mor=o("The model class to instantiate is selected based on the "),Due=a("code"),Eor=o("model_type"),Cor=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),wor=o("pretrained_model_name_or_path"),Aor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),Lor=o("pretrained_model_name_or_path"),yor=o(":"),xor=l(),Re=a("ul"),W5=a("li"),Vue=a("strong"),$or=o("data2vec-audio"),kor=o(" \u2014 "),Rz=a("a"),Sor=o("Data2VecAudioForSequenceClassification"),Ror=o(" (Data2VecAudio model)"),Por=l(),Q5=a("li"),Xue=a("strong"),Bor=o("hubert"),Ior=o(" \u2014 "),Pz=a("a"),Nor=o("HubertForSequenceClassification"),qor=o(" (Hubert model)"),jor=l(),H5=a("li"),zue=a("strong"),Dor=o("sew"),Gor=o(" \u2014 "),Bz=a("a"),Oor=o("SEWForSequenceClassification"),Vor=o(" (SEW model)"),Xor=l(),U5=a("li"),Wue=a("strong"),zor=o("sew-d"),Wor=o(" \u2014 "),Iz=a("a"),Qor=o("SEWDForSequenceClassification"),Hor=o(" (SEW-D model)"),Uor=l(),J5=a("li"),Que=a("strong"),Jor=o("unispeech"),Yor=o(" \u2014 "),Nz=a("a"),Kor=o("UniSpeechForSequenceClassification"),Zor=o(" (UniSpeech model)"),err=l(),Y5=a("li"),Hue=a("strong"),orr=o("unispeech-sat"),rrr=o(" \u2014 "),qz=a("a"),trr=o("UniSpeechSatForSequenceClassification"),arr=o(" (UniSpeechSat model)"),nrr=l(),K5=a("li"),Uue=a("strong"),srr=o("wav2vec2"),lrr=o(" \u2014 "),jz=a("a"),irr=o("Wav2Vec2ForSequenceClassification"),drr=o(" (Wav2Vec2 model)"),crr=l(),Z5=a("li"),Jue=a("strong"),frr=o("wav2vec2-conformer"),mrr=o(" \u2014 "),Dz=a("a"),grr=o("Wav2Vec2ConformerForSequenceClassification"),hrr=o(" (Wav2Vec2-Conformer model)"),prr=l(),e3=a("li"),Yue=a("strong"),_rr=o("wavlm"),urr=o(" \u2014 "),Gz=a("a"),brr=o("WavLMForSequenceClassification"),vrr=o(" (WavLM model)"),Frr=l(),o3=a("p"),Trr=o("The model is set in evaluation mode by default using "),Kue=a("code"),Mrr=o("model.eval()"),Err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),Crr=o("model.train()"),wrr=l(),F(r3.$$.fragment),CDe=l(),pd=a("h2"),t3=a("a"),e1e=a("span"),F(qy.$$.fragment),Arr=l(),o1e=a("span"),Lrr=o("AutoModelForAudioFrameClassification"),wDe=l(),Oo=a("div"),F(jy.$$.fragment),yrr=l(),_d=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Oz=a("a"),$rr=o("from_pretrained()"),krr=o(" class method or the "),Vz=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Prr=l(),Dy=a("p"),Brr=o("This class cannot be instantiated directly using "),r1e=a("code"),Irr=o("__init__()"),Nrr=o(" (throws an error)."),qrr=l(),vt=a("div"),F(Gy.$$.fragment),jrr=l(),t1e=a("p"),Drr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Grr=l(),ud=a("p"),Orr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Vrr=o("not"),Xrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),zrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Qrr=l(),F(a3.$$.fragment),Hrr=l(),fo=a("div"),F(Oy.$$.fragment),Urr=l(),n1e=a("p"),Jrr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yrr=l(),Va=a("p"),Krr=o("The model class to instantiate is selected based on the "),s1e=a("code"),Zrr=o("model_type"),etr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),ttr=o("pretrained_model_name_or_path"),atr=o(":"),ntr=l(),Kr=a("ul"),n3=a("li"),d1e=a("strong"),str=o("data2vec-audio"),ltr=o(" \u2014 "),zz=a("a"),itr=o("Data2VecAudioForAudioFrameClassification"),dtr=o(" (Data2VecAudio model)"),ctr=l(),s3=a("li"),c1e=a("strong"),ftr=o("unispeech-sat"),mtr=o(" \u2014 "),Wz=a("a"),gtr=o("UniSpeechSatForAudioFrameClassification"),htr=o(" (UniSpeechSat model)"),ptr=l(),l3=a("li"),f1e=a("strong"),_tr=o("wav2vec2"),utr=o(" \u2014 "),Qz=a("a"),btr=o("Wav2Vec2ForAudioFrameClassification"),vtr=o(" (Wav2Vec2 model)"),Ftr=l(),i3=a("li"),m1e=a("strong"),Ttr=o("wav2vec2-conformer"),Mtr=o(" \u2014 "),Hz=a("a"),Etr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ctr=o(" (Wav2Vec2-Conformer model)"),wtr=l(),d3=a("li"),g1e=a("strong"),Atr=o("wavlm"),Ltr=o(" \u2014 "),Uz=a("a"),ytr=o("WavLMForAudioFrameClassification"),xtr=o(" (WavLM model)"),$tr=l(),c3=a("p"),ktr=o("The model is set in evaluation mode by default using "),h1e=a("code"),Str=o("model.eval()"),Rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Ptr=o("model.train()"),Btr=l(),F(f3.$$.fragment),ADe=l(),bd=a("h2"),m3=a("a"),_1e=a("span"),F(Vy.$$.fragment),Itr=l(),u1e=a("span"),Ntr=o("AutoModelForCTC"),LDe=l(),Vo=a("div"),F(Xy.$$.fragment),qtr=l(),vd=a("p"),jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jz=a("a"),Dtr=o("from_pretrained()"),Gtr=o(" class method or the "),Yz=a("a"),Otr=o("from_config()"),Vtr=o(` class
method.`),Xtr=l(),zy=a("p"),ztr=o("This class cannot be instantiated directly using "),b1e=a("code"),Wtr=o("__init__()"),Qtr=o(" (throws an error)."),Htr=l(),Ft=a("div"),F(Wy.$$.fragment),Utr=l(),v1e=a("p"),Jtr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ytr=l(),Fd=a("p"),Ktr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Ztr=o("not"),ear=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),oar=o("from_pretrained()"),rar=o(" to load the model weights."),tar=l(),F(g3.$$.fragment),aar=l(),mo=a("div"),F(Qy.$$.fragment),nar=l(),T1e=a("p"),sar=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lar=l(),Xa=a("p"),iar=o("The model class to instantiate is selected based on the "),M1e=a("code"),dar=o("model_type"),car=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),far=o("pretrained_model_name_or_path"),mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),gar=o("pretrained_model_name_or_path"),har=o(":"),par=l(),Le=a("ul"),h3=a("li"),w1e=a("strong"),_ar=o("data2vec-audio"),uar=o(" \u2014 "),Zz=a("a"),bar=o("Data2VecAudioForCTC"),Far=o(" (Data2VecAudio model)"),Tar=l(),p3=a("li"),A1e=a("strong"),Mar=o("hubert"),Ear=o(" \u2014 "),eW=a("a"),Car=o("HubertForCTC"),war=o(" (Hubert model)"),Aar=l(),_3=a("li"),L1e=a("strong"),Lar=o("mctct"),yar=o(" \u2014 "),oW=a("a"),xar=o("MCTCTForCTC"),$ar=o(" (M-CTC-T model)"),kar=l(),u3=a("li"),y1e=a("strong"),Sar=o("sew"),Rar=o(" \u2014 "),rW=a("a"),Par=o("SEWForCTC"),Bar=o(" (SEW model)"),Iar=l(),b3=a("li"),x1e=a("strong"),Nar=o("sew-d"),qar=o(" \u2014 "),tW=a("a"),jar=o("SEWDForCTC"),Dar=o(" (SEW-D model)"),Gar=l(),v3=a("li"),$1e=a("strong"),Oar=o("unispeech"),Var=o(" \u2014 "),aW=a("a"),Xar=o("UniSpeechForCTC"),zar=o(" (UniSpeech model)"),War=l(),F3=a("li"),k1e=a("strong"),Qar=o("unispeech-sat"),Har=o(" \u2014 "),nW=a("a"),Uar=o("UniSpeechSatForCTC"),Jar=o(" (UniSpeechSat model)"),Yar=l(),T3=a("li"),S1e=a("strong"),Kar=o("wav2vec2"),Zar=o(" \u2014 "),sW=a("a"),enr=o("Wav2Vec2ForCTC"),onr=o(" (Wav2Vec2 model)"),rnr=l(),M3=a("li"),R1e=a("strong"),tnr=o("wav2vec2-conformer"),anr=o(" \u2014 "),lW=a("a"),nnr=o("Wav2Vec2ConformerForCTC"),snr=o(" (Wav2Vec2-Conformer model)"),lnr=l(),E3=a("li"),P1e=a("strong"),inr=o("wavlm"),dnr=o(" \u2014 "),iW=a("a"),cnr=o("WavLMForCTC"),fnr=o(" (WavLM model)"),mnr=l(),C3=a("p"),gnr=o("The model is set in evaluation mode by default using "),B1e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),_nr=o("model.train()"),unr=l(),F(w3.$$.fragment),yDe=l(),Td=a("h2"),A3=a("a"),N1e=a("span"),F(Hy.$$.fragment),bnr=l(),q1e=a("span"),vnr=o("AutoModelForSpeechSeq2Seq"),xDe=l(),Xo=a("div"),F(Uy.$$.fragment),Fnr=l(),Md=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dW=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),cW=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),Jy=a("p"),Lnr=o("This class cannot be instantiated directly using "),j1e=a("code"),ynr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),Tt=a("div"),F(Yy.$$.fragment),knr=l(),D1e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rnr=l(),Ed=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(L3.$$.fragment),Dnr=l(),go=a("div"),F(Ky.$$.fragment),Gnr=l(),O1e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vnr=l(),za=a("p"),Xnr=o("The model class to instantiate is selected based on the "),V1e=a("code"),znr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),Zy=a("ul"),y3=a("li"),W1e=a("strong"),Knr=o("speech-encoder-decoder"),Znr=o(" \u2014 "),mW=a("a"),esr=o("SpeechEncoderDecoderModel"),osr=o(" (Speech Encoder decoder model)"),rsr=l(),x3=a("li"),Q1e=a("strong"),tsr=o("speech_to_text"),asr=o(" \u2014 "),gW=a("a"),nsr=o("Speech2TextForConditionalGeneration"),ssr=o(" (Speech2Text model)"),lsr=l(),$3=a("p"),isr=o("The model is set in evaluation mode by default using "),H1e=a("code"),dsr=o("model.eval()"),csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=a("code"),fsr=o("model.train()"),msr=l(),F(k3.$$.fragment),$De=l(),Cd=a("h2"),S3=a("a"),J1e=a("span"),F(e8.$$.fragment),gsr=l(),Y1e=a("span"),hsr=o("AutoModelForAudioXVector"),kDe=l(),zo=a("div"),F(o8.$$.fragment),psr=l(),wd=a("p"),_sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hW=a("a"),usr=o("from_pretrained()"),bsr=o(" class method or the "),pW=a("a"),vsr=o("from_config()"),Fsr=o(` class
method.`),Tsr=l(),r8=a("p"),Msr=o("This class cannot be instantiated directly using "),K1e=a("code"),Esr=o("__init__()"),Csr=o(" (throws an error)."),wsr=l(),Mt=a("div"),F(t8.$$.fragment),Asr=l(),Z1e=a("p"),Lsr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ysr=l(),Ad=a("p"),xsr=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),$sr=o("not"),ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),Ssr=o("from_pretrained()"),Rsr=o(" to load the model weights."),Psr=l(),F(R3.$$.fragment),Bsr=l(),ho=a("div"),F(a8.$$.fragment),Isr=l(),obe=a("p"),Nsr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qsr=l(),Wa=a("p"),jsr=o("The model class to instantiate is selected based on the "),rbe=a("code"),Dsr=o("model_type"),Gsr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Xsr=o("pretrained_model_name_or_path"),zsr=o(":"),Wsr=l(),Zr=a("ul"),P3=a("li"),nbe=a("strong"),Qsr=o("data2vec-audio"),Hsr=o(" \u2014 "),uW=a("a"),Usr=o("Data2VecAudioForXVector"),Jsr=o(" (Data2VecAudio model)"),Ysr=l(),B3=a("li"),sbe=a("strong"),Ksr=o("unispeech-sat"),Zsr=o(" \u2014 "),bW=a("a"),elr=o("UniSpeechSatForXVector"),olr=o(" (UniSpeechSat model)"),rlr=l(),I3=a("li"),lbe=a("strong"),tlr=o("wav2vec2"),alr=o(" \u2014 "),vW=a("a"),nlr=o("Wav2Vec2ForXVector"),slr=o(" (Wav2Vec2 model)"),llr=l(),N3=a("li"),ibe=a("strong"),ilr=o("wav2vec2-conformer"),dlr=o(" \u2014 "),FW=a("a"),clr=o("Wav2Vec2ConformerForXVector"),flr=o(" (Wav2Vec2-Conformer model)"),mlr=l(),q3=a("li"),dbe=a("strong"),glr=o("wavlm"),hlr=o(" \u2014 "),TW=a("a"),plr=o("WavLMForXVector"),_lr=o(" (WavLM model)"),ulr=l(),j3=a("p"),blr=o("The model is set in evaluation mode by default using "),cbe=a("code"),vlr=o("model.eval()"),Flr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),Tlr=o("model.train()"),Mlr=l(),F(D3.$$.fragment),SDe=l(),Ld=a("h2"),G3=a("a"),mbe=a("span"),F(n8.$$.fragment),Elr=l(),gbe=a("span"),Clr=o("AutoModelForMaskedImageModeling"),RDe=l(),Wo=a("div"),F(s8.$$.fragment),wlr=l(),yd=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MW=a("a"),Llr=o("from_pretrained()"),ylr=o(" class method or the "),EW=a("a"),xlr=o("from_config()"),$lr=o(` class
method.`),klr=l(),l8=a("p"),Slr=o("This class cannot be instantiated directly using "),hbe=a("code"),Rlr=o("__init__()"),Plr=o(" (throws an error)."),Blr=l(),Et=a("div"),F(i8.$$.fragment),Ilr=l(),pbe=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qlr=l(),xd=a("p"),jlr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),Dlr=o("not"),Glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),Olr=o("from_pretrained()"),Vlr=o(" to load the model weights."),Xlr=l(),F(O3.$$.fragment),zlr=l(),po=a("div"),F(d8.$$.fragment),Wlr=l(),ube=a("p"),Qlr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Hlr=l(),Qa=a("p"),Ulr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),$d=a("ul"),V3=a("li"),Tbe=a("strong"),tir=o("deit"),air=o(" \u2014 "),wW=a("a"),nir=o("DeiTForMaskedImageModeling"),sir=o(" (DeiT model)"),lir=l(),X3=a("li"),Mbe=a("strong"),iir=o("swin"),dir=o(" \u2014 "),AW=a("a"),cir=o("SwinForMaskedImageModeling"),fir=o(" (Swin Transformer model)"),mir=l(),z3=a("li"),Ebe=a("strong"),gir=o("vit"),hir=o(" \u2014 "),LW=a("a"),pir=o("ViTForMaskedImageModeling"),_ir=o(" (ViT model)"),uir=l(),W3=a("p"),bir=o("The model is set in evaluation mode by default using "),Cbe=a("code"),vir=o("model.eval()"),Fir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=a("code"),Tir=o("model.train()"),Mir=l(),F(Q3.$$.fragment),PDe=l(),kd=a("h2"),H3=a("a"),Abe=a("span"),F(c8.$$.fragment),Eir=l(),Lbe=a("span"),Cir=o("AutoModelForObjectDetection"),BDe=l(),Qo=a("div"),F(f8.$$.fragment),wir=l(),Sd=a("p"),Air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yW=a("a"),Lir=o("from_pretrained()"),yir=o(" class method or the "),xW=a("a"),xir=o("from_config()"),$ir=o(` class
method.`),kir=l(),m8=a("p"),Sir=o("This class cannot be instantiated directly using "),ybe=a("code"),Rir=o("__init__()"),Pir=o(" (throws an error)."),Bir=l(),Ct=a("div"),F(g8.$$.fragment),Iir=l(),xbe=a("p"),Nir=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qir=l(),Rd=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),Dir=o("not"),Gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Oir=o("from_pretrained()"),Vir=o(" to load the model weights."),Xir=l(),F(U3.$$.fragment),zir=l(),_o=a("div"),F(h8.$$.fragment),Wir=l(),kbe=a("p"),Qir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hir=l(),Ha=a("p"),Uir=o("The model class to instantiate is selected based on the "),Sbe=a("code"),Jir=o("model_type"),Yir=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),edr=o("pretrained_model_name_or_path"),odr=o(":"),rdr=l(),p8=a("ul"),J3=a("li"),Bbe=a("strong"),tdr=o("detr"),adr=o(" \u2014 "),kW=a("a"),ndr=o("DetrForObjectDetection"),sdr=o(" (DETR model)"),ldr=l(),Y3=a("li"),Ibe=a("strong"),idr=o("yolos"),ddr=o(" \u2014 "),SW=a("a"),cdr=o("YolosForObjectDetection"),fdr=o(" (YOLOS model)"),mdr=l(),K3=a("p"),gdr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),hdr=o("model.eval()"),pdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),_dr=o("model.train()"),udr=l(),F(Z3.$$.fragment),IDe=l(),Pd=a("h2"),eF=a("a"),jbe=a("span"),F(_8.$$.fragment),bdr=l(),Dbe=a("span"),vdr=o("AutoModelForImageSegmentation"),NDe=l(),Ho=a("div"),F(u8.$$.fragment),Fdr=l(),Bd=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RW=a("a"),Mdr=o("from_pretrained()"),Edr=o(" class method or the "),PW=a("a"),Cdr=o("from_config()"),wdr=o(` class
method.`),Adr=l(),b8=a("p"),Ldr=o("This class cannot be instantiated directly using "),Gbe=a("code"),ydr=o("__init__()"),xdr=o(" (throws an error)."),$dr=l(),wt=a("div"),F(v8.$$.fragment),kdr=l(),Obe=a("p"),Sdr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rdr=l(),Id=a("p"),Pdr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),Bdr=o("not"),Idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),Ndr=o("from_pretrained()"),qdr=o(" to load the model weights."),jdr=l(),F(oF.$$.fragment),Ddr=l(),uo=a("div"),F(F8.$$.fragment),Gdr=l(),Xbe=a("p"),Odr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Vdr=l(),Ua=a("p"),Xdr=o("The model class to instantiate is selected based on the "),zbe=a("code"),zdr=o("model_type"),Wdr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),Qdr=o("pretrained_model_name_or_path"),Hdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(":"),Ydr=l(),Hbe=a("ul"),rF=a("li"),Ube=a("strong"),Kdr=o("detr"),Zdr=o(" \u2014 "),IW=a("a"),ecr=o("DetrForSegmentation"),ocr=o(" (DETR model)"),rcr=l(),tF=a("p"),tcr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),acr=o("model.eval()"),ncr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),scr=o("model.train()"),lcr=l(),F(aF.$$.fragment),qDe=l(),Nd=a("h2"),nF=a("a"),Kbe=a("span"),F(T8.$$.fragment),icr=l(),Zbe=a("span"),dcr=o("AutoModelForSemanticSegmentation"),jDe=l(),Uo=a("div"),F(M8.$$.fragment),ccr=l(),qd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NW=a("a"),mcr=o("from_pretrained()"),gcr=o(" class method or the "),qW=a("a"),hcr=o("from_config()"),pcr=o(` class
method.`),_cr=l(),E8=a("p"),ucr=o("This class cannot be instantiated directly using "),e2e=a("code"),bcr=o("__init__()"),vcr=o(" (throws an error)."),Fcr=l(),At=a("div"),F(C8.$$.fragment),Tcr=l(),o2e=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ecr=l(),jd=a("p"),Ccr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Lcr=o("from_pretrained()"),ycr=o(" to load the model weights."),xcr=l(),F(sF.$$.fragment),$cr=l(),bo=a("div"),F(w8.$$.fragment),kcr=l(),t2e=a("p"),Scr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rcr=l(),Ja=a("p"),Pcr=o("The model class to instantiate is selected based on the "),a2e=a("code"),Bcr=o("model_type"),Icr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Ncr=o("pretrained_model_name_or_path"),qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(":"),Gcr=l(),et=a("ul"),lF=a("li"),l2e=a("strong"),Ocr=o("beit"),Vcr=o(" \u2014 "),DW=a("a"),Xcr=o("BeitForSemanticSegmentation"),zcr=o(" (BEiT model)"),Wcr=l(),iF=a("li"),i2e=a("strong"),Qcr=o("data2vec-vision"),Hcr=o(" \u2014 "),GW=a("a"),Ucr=o("Data2VecVisionForSemanticSegmentation"),Jcr=o(" (Data2VecVision model)"),Ycr=l(),dF=a("li"),d2e=a("strong"),Kcr=o("dpt"),Zcr=o(" \u2014 "),OW=a("a"),efr=o("DPTForSemanticSegmentation"),ofr=o(" (DPT model)"),rfr=l(),cF=a("li"),c2e=a("strong"),tfr=o("mobilevit"),afr=o(" \u2014 "),VW=a("a"),nfr=o("MobileViTForSemanticSegmentation"),sfr=o(" (MobileViT model)"),lfr=l(),fF=a("li"),f2e=a("strong"),ifr=o("segformer"),dfr=o(" \u2014 "),XW=a("a"),cfr=o("SegformerForSemanticSegmentation"),ffr=o(" (SegFormer model)"),mfr=l(),mF=a("p"),gfr=o("The model is set in evaluation mode by default using "),m2e=a("code"),hfr=o("model.eval()"),pfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),_fr=o("model.train()"),ufr=l(),F(gF.$$.fragment),DDe=l(),Dd=a("h2"),hF=a("a"),h2e=a("span"),F(A8.$$.fragment),bfr=l(),p2e=a("span"),vfr=o("AutoModelForInstanceSegmentation"),GDe=l(),Jo=a("div"),F(L8.$$.fragment),Ffr=l(),Gd=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),WW=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),y8=a("p"),Lfr=o("This class cannot be instantiated directly using "),_2e=a("code"),yfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),Lt=a("div"),F(x8.$$.fragment),kfr=l(),u2e=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Rfr=l(),Od=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Nfr=o("from_pretrained()"),qfr=o(" to load the model weights."),jfr=l(),F(pF.$$.fragment),Dfr=l(),vo=a("div"),F($8.$$.fragment),Gfr=l(),v2e=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Vfr=l(),Ya=a("p"),Xfr=o("The model class to instantiate is selected based on the "),F2e=a("code"),zfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),Qfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),E2e=a("ul"),_F=a("li"),C2e=a("strong"),Kfr=o("maskformer"),Zfr=o(" \u2014 "),HW=a("a"),emr=o("MaskFormerForInstanceSegmentation"),omr=o(" (MaskFormer model)"),rmr=l(),uF=a("p"),tmr=o("The model is set in evaluation mode by default using "),w2e=a("code"),amr=o("model.eval()"),nmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),smr=o("model.train()"),lmr=l(),F(bF.$$.fragment),ODe=l(),Vd=a("h2"),vF=a("a"),L2e=a("span"),F(k8.$$.fragment),imr=l(),y2e=a("span"),dmr=o("TFAutoModel"),VDe=l(),Yo=a("div"),F(S8.$$.fragment),cmr=l(),Xd=a("p"),fmr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UW=a("a"),mmr=o("from_pretrained()"),gmr=o(" class method or the "),JW=a("a"),hmr=o("from_config()"),pmr=o(` class
method.`),_mr=l(),R8=a("p"),umr=o("This class cannot be instantiated directly using "),x2e=a("code"),bmr=o("__init__()"),vmr=o(" (throws an error)."),Fmr=l(),yt=a("div"),F(P8.$$.fragment),Tmr=l(),$2e=a("p"),Mmr=o("Instantiates one of the base model classes of the library from a configuration."),Emr=l(),zd=a("p"),Cmr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),wmr=o("not"),Amr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),Lmr=o("from_pretrained()"),ymr=o(" to load the model weights."),xmr=l(),F(FF.$$.fragment),$mr=l(),wr=a("div"),F(B8.$$.fragment),kmr=l(),S2e=a("p"),Smr=o("Instantiate one of the base model classes of the library from a pretrained model."),Rmr=l(),Ka=a("p"),Pmr=o("The model class to instantiate is selected based on the "),R2e=a("code"),Bmr=o("model_type"),Imr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Nmr=o("pretrained_model_name_or_path"),qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(":"),Gmr=l(),q=a("ul"),TF=a("li"),I2e=a("strong"),Omr=o("albert"),Vmr=o(" \u2014 "),KW=a("a"),Xmr=o("TFAlbertModel"),zmr=o(" (ALBERT model)"),Wmr=l(),MF=a("li"),N2e=a("strong"),Qmr=o("bart"),Hmr=o(" \u2014 "),ZW=a("a"),Umr=o("TFBartModel"),Jmr=o(" (BART model)"),Ymr=l(),EF=a("li"),q2e=a("strong"),Kmr=o("bert"),Zmr=o(" \u2014 "),eQ=a("a"),egr=o("TFBertModel"),ogr=o(" (BERT model)"),rgr=l(),CF=a("li"),j2e=a("strong"),tgr=o("blenderbot"),agr=o(" \u2014 "),oQ=a("a"),ngr=o("TFBlenderbotModel"),sgr=o(" (Blenderbot model)"),lgr=l(),wF=a("li"),D2e=a("strong"),igr=o("blenderbot-small"),dgr=o(" \u2014 "),rQ=a("a"),cgr=o("TFBlenderbotSmallModel"),fgr=o(" (BlenderbotSmall model)"),mgr=l(),AF=a("li"),G2e=a("strong"),ggr=o("camembert"),hgr=o(" \u2014 "),tQ=a("a"),pgr=o("TFCamembertModel"),_gr=o(" (CamemBERT model)"),ugr=l(),LF=a("li"),O2e=a("strong"),bgr=o("clip"),vgr=o(" \u2014 "),aQ=a("a"),Fgr=o("TFCLIPModel"),Tgr=o(" (CLIP model)"),Mgr=l(),yF=a("li"),V2e=a("strong"),Egr=o("convbert"),Cgr=o(" \u2014 "),nQ=a("a"),wgr=o("TFConvBertModel"),Agr=o(" (ConvBERT model)"),Lgr=l(),xF=a("li"),X2e=a("strong"),ygr=o("convnext"),xgr=o(" \u2014 "),sQ=a("a"),$gr=o("TFConvNextModel"),kgr=o(" (ConvNeXT model)"),Sgr=l(),$F=a("li"),z2e=a("strong"),Rgr=o("ctrl"),Pgr=o(" \u2014 "),lQ=a("a"),Bgr=o("TFCTRLModel"),Igr=o(" (CTRL model)"),Ngr=l(),kF=a("li"),W2e=a("strong"),qgr=o("data2vec-vision"),jgr=o(" \u2014 "),iQ=a("a"),Dgr=o("TFData2VecVisionModel"),Ggr=o(" (Data2VecVision model)"),Ogr=l(),SF=a("li"),Q2e=a("strong"),Vgr=o("deberta"),Xgr=o(" \u2014 "),dQ=a("a"),zgr=o("TFDebertaModel"),Wgr=o(" (DeBERTa model)"),Qgr=l(),RF=a("li"),H2e=a("strong"),Hgr=o("deberta-v2"),Ugr=o(" \u2014 "),cQ=a("a"),Jgr=o("TFDebertaV2Model"),Ygr=o(" (DeBERTa-v2 model)"),Kgr=l(),PF=a("li"),U2e=a("strong"),Zgr=o("distilbert"),ehr=o(" \u2014 "),fQ=a("a"),ohr=o("TFDistilBertModel"),rhr=o(" (DistilBERT model)"),thr=l(),BF=a("li"),J2e=a("strong"),ahr=o("dpr"),nhr=o(" \u2014 "),mQ=a("a"),shr=o("TFDPRQuestionEncoder"),lhr=o(" (DPR model)"),ihr=l(),IF=a("li"),Y2e=a("strong"),dhr=o("electra"),chr=o(" \u2014 "),gQ=a("a"),fhr=o("TFElectraModel"),mhr=o(" (ELECTRA model)"),ghr=l(),NF=a("li"),K2e=a("strong"),hhr=o("flaubert"),phr=o(" \u2014 "),hQ=a("a"),_hr=o("TFFlaubertModel"),uhr=o(" (FlauBERT model)"),bhr=l(),Ns=a("li"),Z2e=a("strong"),vhr=o("funnel"),Fhr=o(" \u2014 "),pQ=a("a"),Thr=o("TFFunnelModel"),Mhr=o(" or "),_Q=a("a"),Ehr=o("TFFunnelBaseModel"),Chr=o(" (Funnel Transformer model)"),whr=l(),qF=a("li"),e4e=a("strong"),Ahr=o("gpt2"),Lhr=o(" \u2014 "),uQ=a("a"),yhr=o("TFGPT2Model"),xhr=o(" (OpenAI GPT-2 model)"),$hr=l(),jF=a("li"),o4e=a("strong"),khr=o("gptj"),Shr=o(" \u2014 "),bQ=a("a"),Rhr=o("TFGPTJModel"),Phr=o(" (GPT-J model)"),Bhr=l(),DF=a("li"),r4e=a("strong"),Ihr=o("hubert"),Nhr=o(" \u2014 "),vQ=a("a"),qhr=o("TFHubertModel"),jhr=o(" (Hubert model)"),Dhr=l(),GF=a("li"),t4e=a("strong"),Ghr=o("layoutlm"),Ohr=o(" \u2014 "),FQ=a("a"),Vhr=o("TFLayoutLMModel"),Xhr=o(" (LayoutLM model)"),zhr=l(),OF=a("li"),a4e=a("strong"),Whr=o("led"),Qhr=o(" \u2014 "),TQ=a("a"),Hhr=o("TFLEDModel"),Uhr=o(" (LED model)"),Jhr=l(),VF=a("li"),n4e=a("strong"),Yhr=o("longformer"),Khr=o(" \u2014 "),MQ=a("a"),Zhr=o("TFLongformerModel"),epr=o(" (Longformer model)"),opr=l(),XF=a("li"),s4e=a("strong"),rpr=o("lxmert"),tpr=o(" \u2014 "),EQ=a("a"),apr=o("TFLxmertModel"),npr=o(" (LXMERT model)"),spr=l(),zF=a("li"),l4e=a("strong"),lpr=o("marian"),ipr=o(" \u2014 "),CQ=a("a"),dpr=o("TFMarianModel"),cpr=o(" (Marian model)"),fpr=l(),WF=a("li"),i4e=a("strong"),mpr=o("mbart"),gpr=o(" \u2014 "),wQ=a("a"),hpr=o("TFMBartModel"),ppr=o(" (mBART model)"),_pr=l(),QF=a("li"),d4e=a("strong"),upr=o("mobilebert"),bpr=o(" \u2014 "),AQ=a("a"),vpr=o("TFMobileBertModel"),Fpr=o(" (MobileBERT model)"),Tpr=l(),HF=a("li"),c4e=a("strong"),Mpr=o("mpnet"),Epr=o(" \u2014 "),LQ=a("a"),Cpr=o("TFMPNetModel"),wpr=o(" (MPNet model)"),Apr=l(),UF=a("li"),f4e=a("strong"),Lpr=o("mt5"),ypr=o(" \u2014 "),yQ=a("a"),xpr=o("TFMT5Model"),$pr=o(" (MT5 model)"),kpr=l(),JF=a("li"),m4e=a("strong"),Spr=o("openai-gpt"),Rpr=o(" \u2014 "),xQ=a("a"),Ppr=o("TFOpenAIGPTModel"),Bpr=o(" (OpenAI GPT model)"),Ipr=l(),YF=a("li"),g4e=a("strong"),Npr=o("opt"),qpr=o(" \u2014 "),$Q=a("a"),jpr=o("TFOPTModel"),Dpr=o(" (OPT model)"),Gpr=l(),KF=a("li"),h4e=a("strong"),Opr=o("pegasus"),Vpr=o(" \u2014 "),kQ=a("a"),Xpr=o("TFPegasusModel"),zpr=o(" (Pegasus model)"),Wpr=l(),ZF=a("li"),p4e=a("strong"),Qpr=o("rembert"),Hpr=o(" \u2014 "),SQ=a("a"),Upr=o("TFRemBertModel"),Jpr=o(" (RemBERT model)"),Ypr=l(),eT=a("li"),_4e=a("strong"),Kpr=o("roberta"),Zpr=o(" \u2014 "),RQ=a("a"),e_r=o("TFRobertaModel"),o_r=o(" (RoBERTa model)"),r_r=l(),oT=a("li"),u4e=a("strong"),t_r=o("roformer"),a_r=o(" \u2014 "),PQ=a("a"),n_r=o("TFRoFormerModel"),s_r=o(" (RoFormer model)"),l_r=l(),rT=a("li"),b4e=a("strong"),i_r=o("speech_to_text"),d_r=o(" \u2014 "),BQ=a("a"),c_r=o("TFSpeech2TextModel"),f_r=o(" (Speech2Text model)"),m_r=l(),tT=a("li"),v4e=a("strong"),g_r=o("swin"),h_r=o(" \u2014 "),IQ=a("a"),p_r=o("TFSwinModel"),__r=o(" (Swin Transformer model)"),u_r=l(),aT=a("li"),F4e=a("strong"),b_r=o("t5"),v_r=o(" \u2014 "),NQ=a("a"),F_r=o("TFT5Model"),T_r=o(" (T5 model)"),M_r=l(),nT=a("li"),T4e=a("strong"),E_r=o("tapas"),C_r=o(" \u2014 "),qQ=a("a"),w_r=o("TFTapasModel"),A_r=o(" (TAPAS model)"),L_r=l(),sT=a("li"),M4e=a("strong"),y_r=o("transfo-xl"),x_r=o(" \u2014 "),jQ=a("a"),$_r=o("TFTransfoXLModel"),k_r=o(" (Transformer-XL model)"),S_r=l(),lT=a("li"),E4e=a("strong"),R_r=o("vit"),P_r=o(" \u2014 "),DQ=a("a"),B_r=o("TFViTModel"),I_r=o(" (ViT model)"),N_r=l(),iT=a("li"),C4e=a("strong"),q_r=o("vit_mae"),j_r=o(" \u2014 "),GQ=a("a"),D_r=o("TFViTMAEModel"),G_r=o(" (ViTMAE model)"),O_r=l(),dT=a("li"),w4e=a("strong"),V_r=o("wav2vec2"),X_r=o(" \u2014 "),OQ=a("a"),z_r=o("TFWav2Vec2Model"),W_r=o(" (Wav2Vec2 model)"),Q_r=l(),cT=a("li"),A4e=a("strong"),H_r=o("xlm"),U_r=o(" \u2014 "),VQ=a("a"),J_r=o("TFXLMModel"),Y_r=o(" (XLM model)"),K_r=l(),fT=a("li"),L4e=a("strong"),Z_r=o("xlm-roberta"),eur=o(" \u2014 "),XQ=a("a"),our=o("TFXLMRobertaModel"),rur=o(" (XLM-RoBERTa model)"),tur=l(),mT=a("li"),y4e=a("strong"),aur=o("xlnet"),nur=o(" \u2014 "),zQ=a("a"),sur=o("TFXLNetModel"),lur=o(" (XLNet model)"),iur=l(),F(gT.$$.fragment),XDe=l(),Wd=a("h2"),hT=a("a"),x4e=a("span"),F(I8.$$.fragment),dur=l(),$4e=a("span"),cur=o("TFAutoModelForPreTraining"),zDe=l(),Ko=a("div"),F(N8.$$.fragment),fur=l(),Qd=a("p"),mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WQ=a("a"),gur=o("from_pretrained()"),hur=o(" class method or the "),QQ=a("a"),pur=o("from_config()"),_ur=o(` class
method.`),uur=l(),q8=a("p"),bur=o("This class cannot be instantiated directly using "),k4e=a("code"),vur=o("__init__()"),Fur=o(" (throws an error)."),Tur=l(),xt=a("div"),F(j8.$$.fragment),Mur=l(),S4e=a("p"),Eur=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cur=l(),Hd=a("p"),wur=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Aur=o("not"),Lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),yur=o("from_pretrained()"),xur=o(" to load the model weights."),$ur=l(),F(pT.$$.fragment),kur=l(),Ar=a("div"),F(D8.$$.fragment),Sur=l(),P4e=a("p"),Rur=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pur=l(),Za=a("p"),Bur=o("The model class to instantiate is selected based on the "),B4e=a("code"),Iur=o("model_type"),Nur=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(":"),Our=l(),se=a("ul"),_T=a("li"),q4e=a("strong"),Vur=o("albert"),Xur=o(" \u2014 "),UQ=a("a"),zur=o("TFAlbertForPreTraining"),Wur=o(" (ALBERT model)"),Qur=l(),uT=a("li"),j4e=a("strong"),Hur=o("bart"),Uur=o(" \u2014 "),JQ=a("a"),Jur=o("TFBartForConditionalGeneration"),Yur=o(" (BART model)"),Kur=l(),bT=a("li"),D4e=a("strong"),Zur=o("bert"),e1r=o(" \u2014 "),YQ=a("a"),o1r=o("TFBertForPreTraining"),r1r=o(" (BERT model)"),t1r=l(),vT=a("li"),G4e=a("strong"),a1r=o("camembert"),n1r=o(" \u2014 "),KQ=a("a"),s1r=o("TFCamembertForMaskedLM"),l1r=o(" (CamemBERT model)"),i1r=l(),FT=a("li"),O4e=a("strong"),d1r=o("ctrl"),c1r=o(" \u2014 "),ZQ=a("a"),f1r=o("TFCTRLLMHeadModel"),m1r=o(" (CTRL model)"),g1r=l(),TT=a("li"),V4e=a("strong"),h1r=o("distilbert"),p1r=o(" \u2014 "),eH=a("a"),_1r=o("TFDistilBertForMaskedLM"),u1r=o(" (DistilBERT model)"),b1r=l(),MT=a("li"),X4e=a("strong"),v1r=o("electra"),F1r=o(" \u2014 "),oH=a("a"),T1r=o("TFElectraForPreTraining"),M1r=o(" (ELECTRA model)"),E1r=l(),ET=a("li"),z4e=a("strong"),C1r=o("flaubert"),w1r=o(" \u2014 "),rH=a("a"),A1r=o("TFFlaubertWithLMHeadModel"),L1r=o(" (FlauBERT model)"),y1r=l(),CT=a("li"),W4e=a("strong"),x1r=o("funnel"),$1r=o(" \u2014 "),tH=a("a"),k1r=o("TFFunnelForPreTraining"),S1r=o(" (Funnel Transformer model)"),R1r=l(),wT=a("li"),Q4e=a("strong"),P1r=o("gpt2"),B1r=o(" \u2014 "),aH=a("a"),I1r=o("TFGPT2LMHeadModel"),N1r=o(" (OpenAI GPT-2 model)"),q1r=l(),AT=a("li"),H4e=a("strong"),j1r=o("layoutlm"),D1r=o(" \u2014 "),nH=a("a"),G1r=o("TFLayoutLMForMaskedLM"),O1r=o(" (LayoutLM model)"),V1r=l(),LT=a("li"),U4e=a("strong"),X1r=o("lxmert"),z1r=o(" \u2014 "),sH=a("a"),W1r=o("TFLxmertForPreTraining"),Q1r=o(" (LXMERT model)"),H1r=l(),yT=a("li"),J4e=a("strong"),U1r=o("mobilebert"),J1r=o(" \u2014 "),lH=a("a"),Y1r=o("TFMobileBertForPreTraining"),K1r=o(" (MobileBERT model)"),Z1r=l(),xT=a("li"),Y4e=a("strong"),ebr=o("mpnet"),obr=o(" \u2014 "),iH=a("a"),rbr=o("TFMPNetForMaskedLM"),tbr=o(" (MPNet model)"),abr=l(),$T=a("li"),K4e=a("strong"),nbr=o("openai-gpt"),sbr=o(" \u2014 "),dH=a("a"),lbr=o("TFOpenAIGPTLMHeadModel"),ibr=o(" (OpenAI GPT model)"),dbr=l(),kT=a("li"),Z4e=a("strong"),cbr=o("roberta"),fbr=o(" \u2014 "),cH=a("a"),mbr=o("TFRobertaForMaskedLM"),gbr=o(" (RoBERTa model)"),hbr=l(),ST=a("li"),eve=a("strong"),pbr=o("t5"),_br=o(" \u2014 "),fH=a("a"),ubr=o("TFT5ForConditionalGeneration"),bbr=o(" (T5 model)"),vbr=l(),RT=a("li"),ove=a("strong"),Fbr=o("tapas"),Tbr=o(" \u2014 "),mH=a("a"),Mbr=o("TFTapasForMaskedLM"),Ebr=o(" (TAPAS model)"),Cbr=l(),PT=a("li"),rve=a("strong"),wbr=o("transfo-xl"),Abr=o(" \u2014 "),gH=a("a"),Lbr=o("TFTransfoXLLMHeadModel"),ybr=o(" (Transformer-XL model)"),xbr=l(),BT=a("li"),tve=a("strong"),$br=o("vit_mae"),kbr=o(" \u2014 "),hH=a("a"),Sbr=o("TFViTMAEForPreTraining"),Rbr=o(" (ViTMAE model)"),Pbr=l(),IT=a("li"),ave=a("strong"),Bbr=o("xlm"),Ibr=o(" \u2014 "),pH=a("a"),Nbr=o("TFXLMWithLMHeadModel"),qbr=o(" (XLM model)"),jbr=l(),NT=a("li"),nve=a("strong"),Dbr=o("xlm-roberta"),Gbr=o(" \u2014 "),_H=a("a"),Obr=o("TFXLMRobertaForMaskedLM"),Vbr=o(" (XLM-RoBERTa model)"),Xbr=l(),qT=a("li"),sve=a("strong"),zbr=o("xlnet"),Wbr=o(" \u2014 "),uH=a("a"),Qbr=o("TFXLNetLMHeadModel"),Hbr=o(" (XLNet model)"),Ubr=l(),F(jT.$$.fragment),WDe=l(),Ud=a("h2"),DT=a("a"),lve=a("span"),F(G8.$$.fragment),Jbr=l(),ive=a("span"),Ybr=o("TFAutoModelForCausalLM"),QDe=l(),Zo=a("div"),F(O8.$$.fragment),Kbr=l(),Jd=a("p"),Zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bH=a("a"),e2r=o("from_pretrained()"),o2r=o(" class method or the "),vH=a("a"),r2r=o("from_config()"),t2r=o(` class
method.`),a2r=l(),V8=a("p"),n2r=o("This class cannot be instantiated directly using "),dve=a("code"),s2r=o("__init__()"),l2r=o(" (throws an error)."),i2r=l(),$t=a("div"),F(X8.$$.fragment),d2r=l(),cve=a("p"),c2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),f2r=l(),Yd=a("p"),m2r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),g2r=o("not"),h2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),p2r=o("from_pretrained()"),_2r=o(" to load the model weights."),u2r=l(),F(GT.$$.fragment),b2r=l(),Lr=a("div"),F(z8.$$.fragment),v2r=l(),mve=a("p"),F2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T2r=l(),en=a("p"),M2r=o("The model class to instantiate is selected based on the "),gve=a("code"),E2r=o("model_type"),C2r=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),L2r=o("pretrained_model_name_or_path"),y2r=o(":"),x2r=l(),Me=a("ul"),OT=a("li"),_ve=a("strong"),$2r=o("bert"),k2r=o(" \u2014 "),TH=a("a"),S2r=o("TFBertLMHeadModel"),R2r=o(" (BERT model)"),P2r=l(),VT=a("li"),uve=a("strong"),B2r=o("camembert"),I2r=o(" \u2014 "),MH=a("a"),N2r=o("TFCamembertForCausalLM"),q2r=o(" (CamemBERT model)"),j2r=l(),XT=a("li"),bve=a("strong"),D2r=o("ctrl"),G2r=o(" \u2014 "),EH=a("a"),O2r=o("TFCTRLLMHeadModel"),V2r=o(" (CTRL model)"),X2r=l(),zT=a("li"),vve=a("strong"),z2r=o("gpt2"),W2r=o(" \u2014 "),CH=a("a"),Q2r=o("TFGPT2LMHeadModel"),H2r=o(" (OpenAI GPT-2 model)"),U2r=l(),WT=a("li"),Fve=a("strong"),J2r=o("gptj"),Y2r=o(" \u2014 "),wH=a("a"),K2r=o("TFGPTJForCausalLM"),Z2r=o(" (GPT-J model)"),e4r=l(),QT=a("li"),Tve=a("strong"),o4r=o("openai-gpt"),r4r=o(" \u2014 "),AH=a("a"),t4r=o("TFOpenAIGPTLMHeadModel"),a4r=o(" (OpenAI GPT model)"),n4r=l(),HT=a("li"),Mve=a("strong"),s4r=o("opt"),l4r=o(" \u2014 "),LH=a("a"),i4r=o("TFOPTForCausalLM"),d4r=o(" (OPT model)"),c4r=l(),UT=a("li"),Eve=a("strong"),f4r=o("rembert"),m4r=o(" \u2014 "),yH=a("a"),g4r=o("TFRemBertForCausalLM"),h4r=o(" (RemBERT model)"),p4r=l(),JT=a("li"),Cve=a("strong"),_4r=o("roberta"),u4r=o(" \u2014 "),xH=a("a"),b4r=o("TFRobertaForCausalLM"),v4r=o(" (RoBERTa model)"),F4r=l(),YT=a("li"),wve=a("strong"),T4r=o("roformer"),M4r=o(" \u2014 "),$H=a("a"),E4r=o("TFRoFormerForCausalLM"),C4r=o(" (RoFormer model)"),w4r=l(),KT=a("li"),Ave=a("strong"),A4r=o("transfo-xl"),L4r=o(" \u2014 "),kH=a("a"),y4r=o("TFTransfoXLLMHeadModel"),x4r=o(" (Transformer-XL model)"),$4r=l(),ZT=a("li"),Lve=a("strong"),k4r=o("xlm"),S4r=o(" \u2014 "),SH=a("a"),R4r=o("TFXLMWithLMHeadModel"),P4r=o(" (XLM model)"),B4r=l(),e7=a("li"),yve=a("strong"),I4r=o("xlnet"),N4r=o(" \u2014 "),RH=a("a"),q4r=o("TFXLNetLMHeadModel"),j4r=o(" (XLNet model)"),D4r=l(),F(o7.$$.fragment),HDe=l(),Kd=a("h2"),r7=a("a"),xve=a("span"),F(W8.$$.fragment),G4r=l(),$ve=a("span"),O4r=o("TFAutoModelForImageClassification"),UDe=l(),er=a("div"),F(Q8.$$.fragment),V4r=l(),Zd=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PH=a("a"),z4r=o("from_pretrained()"),W4r=o(" class method or the "),BH=a("a"),Q4r=o("from_config()"),H4r=o(` class
method.`),U4r=l(),H8=a("p"),J4r=o("This class cannot be instantiated directly using "),kve=a("code"),Y4r=o("__init__()"),K4r=o(" (throws an error)."),Z4r=l(),kt=a("div"),F(U8.$$.fragment),evr=l(),Sve=a("p"),ovr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rvr=l(),ec=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),svr=o("from_pretrained()"),lvr=o(" to load the model weights."),ivr=l(),F(t7.$$.fragment),dvr=l(),yr=a("div"),F(J8.$$.fragment),cvr=l(),Pve=a("p"),fvr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mvr=l(),on=a("p"),gvr=o("The model class to instantiate is selected based on the "),Bve=a("code"),hvr=o("model_type"),pvr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),_vr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(":"),Fvr=l(),rn=a("ul"),a7=a("li"),qve=a("strong"),Tvr=o("convnext"),Mvr=o(" \u2014 "),NH=a("a"),Evr=o("TFConvNextForImageClassification"),Cvr=o(" (ConvNeXT model)"),wvr=l(),n7=a("li"),jve=a("strong"),Avr=o("data2vec-vision"),Lvr=o(" \u2014 "),qH=a("a"),yvr=o("TFData2VecVisionForImageClassification"),xvr=o(" (Data2VecVision model)"),$vr=l(),s7=a("li"),Dve=a("strong"),kvr=o("swin"),Svr=o(" \u2014 "),jH=a("a"),Rvr=o("TFSwinForImageClassification"),Pvr=o(" (Swin Transformer model)"),Bvr=l(),l7=a("li"),Gve=a("strong"),Ivr=o("vit"),Nvr=o(" \u2014 "),DH=a("a"),qvr=o("TFViTForImageClassification"),jvr=o(" (ViT model)"),Dvr=l(),F(i7.$$.fragment),JDe=l(),oc=a("h2"),d7=a("a"),Ove=a("span"),F(Y8.$$.fragment),Gvr=l(),Vve=a("span"),Ovr=o("TFAutoModelForMaskedLM"),YDe=l(),or=a("div"),F(K8.$$.fragment),Vvr=l(),rc=a("p"),Xvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GH=a("a"),zvr=o("from_pretrained()"),Wvr=o(" class method or the "),OH=a("a"),Qvr=o("from_config()"),Hvr=o(` class
method.`),Uvr=l(),Z8=a("p"),Jvr=o("This class cannot be instantiated directly using "),Xve=a("code"),Yvr=o("__init__()"),Kvr=o(" (throws an error)."),Zvr=l(),St=a("div"),F(e9.$$.fragment),e5r=l(),zve=a("p"),o5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r5r=l(),tc=a("p"),t5r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),a5r=o("not"),n5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),s5r=o("from_pretrained()"),l5r=o(" to load the model weights."),i5r=l(),F(c7.$$.fragment),d5r=l(),xr=a("div"),F(o9.$$.fragment),c5r=l(),Qve=a("p"),f5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m5r=l(),tn=a("p"),g5r=o("The model class to instantiate is selected based on the "),Hve=a("code"),h5r=o("model_type"),p5r=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),_5r=o("pretrained_model_name_or_path"),u5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(":"),F5r=l(),ie=a("ul"),f7=a("li"),Yve=a("strong"),T5r=o("albert"),M5r=o(" \u2014 "),XH=a("a"),E5r=o("TFAlbertForMaskedLM"),C5r=o(" (ALBERT model)"),w5r=l(),m7=a("li"),Kve=a("strong"),A5r=o("bert"),L5r=o(" \u2014 "),zH=a("a"),y5r=o("TFBertForMaskedLM"),x5r=o(" (BERT model)"),$5r=l(),g7=a("li"),Zve=a("strong"),k5r=o("camembert"),S5r=o(" \u2014 "),WH=a("a"),R5r=o("TFCamembertForMaskedLM"),P5r=o(" (CamemBERT model)"),B5r=l(),h7=a("li"),e5e=a("strong"),I5r=o("convbert"),N5r=o(" \u2014 "),QH=a("a"),q5r=o("TFConvBertForMaskedLM"),j5r=o(" (ConvBERT model)"),D5r=l(),p7=a("li"),o5e=a("strong"),G5r=o("deberta"),O5r=o(" \u2014 "),HH=a("a"),V5r=o("TFDebertaForMaskedLM"),X5r=o(" (DeBERTa model)"),z5r=l(),_7=a("li"),r5e=a("strong"),W5r=o("deberta-v2"),Q5r=o(" \u2014 "),UH=a("a"),H5r=o("TFDebertaV2ForMaskedLM"),U5r=o(" (DeBERTa-v2 model)"),J5r=l(),u7=a("li"),t5e=a("strong"),Y5r=o("distilbert"),K5r=o(" \u2014 "),JH=a("a"),Z5r=o("TFDistilBertForMaskedLM"),e3r=o(" (DistilBERT model)"),o3r=l(),b7=a("li"),a5e=a("strong"),r3r=o("electra"),t3r=o(" \u2014 "),YH=a("a"),a3r=o("TFElectraForMaskedLM"),n3r=o(" (ELECTRA model)"),s3r=l(),v7=a("li"),n5e=a("strong"),l3r=o("flaubert"),i3r=o(" \u2014 "),KH=a("a"),d3r=o("TFFlaubertWithLMHeadModel"),c3r=o(" (FlauBERT model)"),f3r=l(),F7=a("li"),s5e=a("strong"),m3r=o("funnel"),g3r=o(" \u2014 "),ZH=a("a"),h3r=o("TFFunnelForMaskedLM"),p3r=o(" (Funnel Transformer model)"),_3r=l(),T7=a("li"),l5e=a("strong"),u3r=o("layoutlm"),b3r=o(" \u2014 "),eU=a("a"),v3r=o("TFLayoutLMForMaskedLM"),F3r=o(" (LayoutLM model)"),T3r=l(),M7=a("li"),i5e=a("strong"),M3r=o("longformer"),E3r=o(" \u2014 "),oU=a("a"),C3r=o("TFLongformerForMaskedLM"),w3r=o(" (Longformer model)"),A3r=l(),E7=a("li"),d5e=a("strong"),L3r=o("mobilebert"),y3r=o(" \u2014 "),rU=a("a"),x3r=o("TFMobileBertForMaskedLM"),$3r=o(" (MobileBERT model)"),k3r=l(),C7=a("li"),c5e=a("strong"),S3r=o("mpnet"),R3r=o(" \u2014 "),tU=a("a"),P3r=o("TFMPNetForMaskedLM"),B3r=o(" (MPNet model)"),I3r=l(),w7=a("li"),f5e=a("strong"),N3r=o("rembert"),q3r=o(" \u2014 "),aU=a("a"),j3r=o("TFRemBertForMaskedLM"),D3r=o(" (RemBERT model)"),G3r=l(),A7=a("li"),m5e=a("strong"),O3r=o("roberta"),V3r=o(" \u2014 "),nU=a("a"),X3r=o("TFRobertaForMaskedLM"),z3r=o(" (RoBERTa model)"),W3r=l(),L7=a("li"),g5e=a("strong"),Q3r=o("roformer"),H3r=o(" \u2014 "),sU=a("a"),U3r=o("TFRoFormerForMaskedLM"),J3r=o(" (RoFormer model)"),Y3r=l(),y7=a("li"),h5e=a("strong"),K3r=o("tapas"),Z3r=o(" \u2014 "),lU=a("a"),eFr=o("TFTapasForMaskedLM"),oFr=o(" (TAPAS model)"),rFr=l(),x7=a("li"),p5e=a("strong"),tFr=o("xlm"),aFr=o(" \u2014 "),iU=a("a"),nFr=o("TFXLMWithLMHeadModel"),sFr=o(" (XLM model)"),lFr=l(),$7=a("li"),_5e=a("strong"),iFr=o("xlm-roberta"),dFr=o(" \u2014 "),dU=a("a"),cFr=o("TFXLMRobertaForMaskedLM"),fFr=o(" (XLM-RoBERTa model)"),mFr=l(),F(k7.$$.fragment),KDe=l(),ac=a("h2"),S7=a("a"),u5e=a("span"),F(r9.$$.fragment),gFr=l(),b5e=a("span"),hFr=o("TFAutoModelForSeq2SeqLM"),ZDe=l(),rr=a("div"),F(t9.$$.fragment),pFr=l(),nc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cU=a("a"),uFr=o("from_pretrained()"),bFr=o(" class method or the "),fU=a("a"),vFr=o("from_config()"),FFr=o(` class
method.`),TFr=l(),a9=a("p"),MFr=o("This class cannot be instantiated directly using "),v5e=a("code"),EFr=o("__init__()"),CFr=o(" (throws an error)."),wFr=l(),Rt=a("div"),F(n9.$$.fragment),AFr=l(),F5e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yFr=l(),sc=a("p"),xFr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),$Fr=o("not"),kFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),SFr=o("from_pretrained()"),RFr=o(" to load the model weights."),PFr=l(),F(R7.$$.fragment),BFr=l(),$r=a("div"),F(s9.$$.fragment),IFr=l(),M5e=a("p"),NFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qFr=l(),an=a("p"),jFr=o("The model class to instantiate is selected based on the "),E5e=a("code"),DFr=o("model_type"),GFr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),OFr=o("pretrained_model_name_or_path"),VFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(":"),WFr=l(),ye=a("ul"),P7=a("li"),A5e=a("strong"),QFr=o("bart"),HFr=o(" \u2014 "),gU=a("a"),UFr=o("TFBartForConditionalGeneration"),JFr=o(" (BART model)"),YFr=l(),B7=a("li"),L5e=a("strong"),KFr=o("blenderbot"),ZFr=o(" \u2014 "),hU=a("a"),eTr=o("TFBlenderbotForConditionalGeneration"),oTr=o(" (Blenderbot model)"),rTr=l(),I7=a("li"),y5e=a("strong"),tTr=o("blenderbot-small"),aTr=o(" \u2014 "),pU=a("a"),nTr=o("TFBlenderbotSmallForConditionalGeneration"),sTr=o(" (BlenderbotSmall model)"),lTr=l(),N7=a("li"),x5e=a("strong"),iTr=o("encoder-decoder"),dTr=o(" \u2014 "),_U=a("a"),cTr=o("TFEncoderDecoderModel"),fTr=o(" (Encoder decoder model)"),mTr=l(),q7=a("li"),$5e=a("strong"),gTr=o("led"),hTr=o(" \u2014 "),uU=a("a"),pTr=o("TFLEDForConditionalGeneration"),_Tr=o(" (LED model)"),uTr=l(),j7=a("li"),k5e=a("strong"),bTr=o("marian"),vTr=o(" \u2014 "),bU=a("a"),FTr=o("TFMarianMTModel"),TTr=o(" (Marian model)"),MTr=l(),D7=a("li"),S5e=a("strong"),ETr=o("mbart"),CTr=o(" \u2014 "),vU=a("a"),wTr=o("TFMBartForConditionalGeneration"),ATr=o(" (mBART model)"),LTr=l(),G7=a("li"),R5e=a("strong"),yTr=o("mt5"),xTr=o(" \u2014 "),FU=a("a"),$Tr=o("TFMT5ForConditionalGeneration"),kTr=o(" (MT5 model)"),STr=l(),O7=a("li"),P5e=a("strong"),RTr=o("pegasus"),PTr=o(" \u2014 "),TU=a("a"),BTr=o("TFPegasusForConditionalGeneration"),ITr=o(" (Pegasus model)"),NTr=l(),V7=a("li"),B5e=a("strong"),qTr=o("t5"),jTr=o(" \u2014 "),MU=a("a"),DTr=o("TFT5ForConditionalGeneration"),GTr=o(" (T5 model)"),OTr=l(),F(X7.$$.fragment),eGe=l(),lc=a("h2"),z7=a("a"),I5e=a("span"),F(l9.$$.fragment),VTr=l(),N5e=a("span"),XTr=o("TFAutoModelForSequenceClassification"),oGe=l(),tr=a("div"),F(i9.$$.fragment),zTr=l(),ic=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EU=a("a"),QTr=o("from_pretrained()"),HTr=o(" class method or the "),CU=a("a"),UTr=o("from_config()"),JTr=o(` class
method.`),YTr=l(),d9=a("p"),KTr=o("This class cannot be instantiated directly using "),q5e=a("code"),ZTr=o("__init__()"),e7r=o(" (throws an error)."),o7r=l(),Pt=a("div"),F(c9.$$.fragment),r7r=l(),j5e=a("p"),t7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),a7r=l(),dc=a("p"),n7r=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),s7r=o("not"),l7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),i7r=o("from_pretrained()"),d7r=o(" to load the model weights."),c7r=l(),F(W7.$$.fragment),f7r=l(),kr=a("div"),F(f9.$$.fragment),m7r=l(),G5e=a("p"),g7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h7r=l(),nn=a("p"),p7r=o("The model class to instantiate is selected based on the "),O5e=a("code"),_7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(":"),M7r=l(),oe=a("ul"),Q7=a("li"),z5e=a("strong"),E7r=o("albert"),C7r=o(" \u2014 "),AU=a("a"),w7r=o("TFAlbertForSequenceClassification"),A7r=o(" (ALBERT model)"),L7r=l(),H7=a("li"),W5e=a("strong"),y7r=o("bert"),x7r=o(" \u2014 "),LU=a("a"),$7r=o("TFBertForSequenceClassification"),k7r=o(" (BERT model)"),S7r=l(),U7=a("li"),Q5e=a("strong"),R7r=o("camembert"),P7r=o(" \u2014 "),yU=a("a"),B7r=o("TFCamembertForSequenceClassification"),I7r=o(" (CamemBERT model)"),N7r=l(),J7=a("li"),H5e=a("strong"),q7r=o("convbert"),j7r=o(" \u2014 "),xU=a("a"),D7r=o("TFConvBertForSequenceClassification"),G7r=o(" (ConvBERT model)"),O7r=l(),Y7=a("li"),U5e=a("strong"),V7r=o("ctrl"),X7r=o(" \u2014 "),$U=a("a"),z7r=o("TFCTRLForSequenceClassification"),W7r=o(" (CTRL model)"),Q7r=l(),K7=a("li"),J5e=a("strong"),H7r=o("deberta"),U7r=o(" \u2014 "),kU=a("a"),J7r=o("TFDebertaForSequenceClassification"),Y7r=o(" (DeBERTa model)"),K7r=l(),Z7=a("li"),Y5e=a("strong"),Z7r=o("deberta-v2"),eMr=o(" \u2014 "),SU=a("a"),oMr=o("TFDebertaV2ForSequenceClassification"),rMr=o(" (DeBERTa-v2 model)"),tMr=l(),eM=a("li"),K5e=a("strong"),aMr=o("distilbert"),nMr=o(" \u2014 "),RU=a("a"),sMr=o("TFDistilBertForSequenceClassification"),lMr=o(" (DistilBERT model)"),iMr=l(),oM=a("li"),Z5e=a("strong"),dMr=o("electra"),cMr=o(" \u2014 "),PU=a("a"),fMr=o("TFElectraForSequenceClassification"),mMr=o(" (ELECTRA model)"),gMr=l(),rM=a("li"),e3e=a("strong"),hMr=o("flaubert"),pMr=o(" \u2014 "),BU=a("a"),_Mr=o("TFFlaubertForSequenceClassification"),uMr=o(" (FlauBERT model)"),bMr=l(),tM=a("li"),o3e=a("strong"),vMr=o("funnel"),FMr=o(" \u2014 "),IU=a("a"),TMr=o("TFFunnelForSequenceClassification"),MMr=o(" (Funnel Transformer model)"),EMr=l(),aM=a("li"),r3e=a("strong"),CMr=o("gpt2"),wMr=o(" \u2014 "),NU=a("a"),AMr=o("TFGPT2ForSequenceClassification"),LMr=o(" (OpenAI GPT-2 model)"),yMr=l(),nM=a("li"),t3e=a("strong"),xMr=o("gptj"),$Mr=o(" \u2014 "),qU=a("a"),kMr=o("TFGPTJForSequenceClassification"),SMr=o(" (GPT-J model)"),RMr=l(),sM=a("li"),a3e=a("strong"),PMr=o("layoutlm"),BMr=o(" \u2014 "),jU=a("a"),IMr=o("TFLayoutLMForSequenceClassification"),NMr=o(" (LayoutLM model)"),qMr=l(),lM=a("li"),n3e=a("strong"),jMr=o("longformer"),DMr=o(" \u2014 "),DU=a("a"),GMr=o("TFLongformerForSequenceClassification"),OMr=o(" (Longformer model)"),VMr=l(),iM=a("li"),s3e=a("strong"),XMr=o("mobilebert"),zMr=o(" \u2014 "),GU=a("a"),WMr=o("TFMobileBertForSequenceClassification"),QMr=o(" (MobileBERT model)"),HMr=l(),dM=a("li"),l3e=a("strong"),UMr=o("mpnet"),JMr=o(" \u2014 "),OU=a("a"),YMr=o("TFMPNetForSequenceClassification"),KMr=o(" (MPNet model)"),ZMr=l(),cM=a("li"),i3e=a("strong"),eEr=o("openai-gpt"),oEr=o(" \u2014 "),VU=a("a"),rEr=o("TFOpenAIGPTForSequenceClassification"),tEr=o(" (OpenAI GPT model)"),aEr=l(),fM=a("li"),d3e=a("strong"),nEr=o("rembert"),sEr=o(" \u2014 "),XU=a("a"),lEr=o("TFRemBertForSequenceClassification"),iEr=o(" (RemBERT model)"),dEr=l(),mM=a("li"),c3e=a("strong"),cEr=o("roberta"),fEr=o(" \u2014 "),zU=a("a"),mEr=o("TFRobertaForSequenceClassification"),gEr=o(" (RoBERTa model)"),hEr=l(),gM=a("li"),f3e=a("strong"),pEr=o("roformer"),_Er=o(" \u2014 "),WU=a("a"),uEr=o("TFRoFormerForSequenceClassification"),bEr=o(" (RoFormer model)"),vEr=l(),hM=a("li"),m3e=a("strong"),FEr=o("tapas"),TEr=o(" \u2014 "),QU=a("a"),MEr=o("TFTapasForSequenceClassification"),EEr=o(" (TAPAS model)"),CEr=l(),pM=a("li"),g3e=a("strong"),wEr=o("transfo-xl"),AEr=o(" \u2014 "),HU=a("a"),LEr=o("TFTransfoXLForSequenceClassification"),yEr=o(" (Transformer-XL model)"),xEr=l(),_M=a("li"),h3e=a("strong"),$Er=o("xlm"),kEr=o(" \u2014 "),UU=a("a"),SEr=o("TFXLMForSequenceClassification"),REr=o(" (XLM model)"),PEr=l(),uM=a("li"),p3e=a("strong"),BEr=o("xlm-roberta"),IEr=o(" \u2014 "),JU=a("a"),NEr=o("TFXLMRobertaForSequenceClassification"),qEr=o(" (XLM-RoBERTa model)"),jEr=l(),bM=a("li"),_3e=a("strong"),DEr=o("xlnet"),GEr=o(" \u2014 "),YU=a("a"),OEr=o("TFXLNetForSequenceClassification"),VEr=o(" (XLNet model)"),XEr=l(),F(vM.$$.fragment),rGe=l(),cc=a("h2"),FM=a("a"),u3e=a("span"),F(m9.$$.fragment),zEr=l(),b3e=a("span"),WEr=o("TFAutoModelForMultipleChoice"),tGe=l(),ar=a("div"),F(g9.$$.fragment),QEr=l(),fc=a("p"),HEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KU=a("a"),UEr=o("from_pretrained()"),JEr=o(" class method or the "),ZU=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),h9=a("p"),eCr=o("This class cannot be instantiated directly using "),v3e=a("code"),oCr=o("__init__()"),rCr=o(" (throws an error)."),tCr=l(),Bt=a("div"),F(p9.$$.fragment),aCr=l(),F3e=a("p"),nCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sCr=l(),mc=a("p"),lCr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),iCr=o("not"),dCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),cCr=o("from_pretrained()"),fCr=o(" to load the model weights."),mCr=l(),F(TM.$$.fragment),gCr=l(),Sr=a("div"),F(_9.$$.fragment),hCr=l(),M3e=a("p"),pCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Cr=l(),sn=a("p"),uCr=o("The model class to instantiate is selected based on the "),E3e=a("code"),bCr=o("model_type"),vCr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),MCr=o("pretrained_model_name_or_path"),ECr=o(":"),CCr=l(),pe=a("ul"),MM=a("li"),A3e=a("strong"),wCr=o("albert"),ACr=o(" \u2014 "),oJ=a("a"),LCr=o("TFAlbertForMultipleChoice"),yCr=o(" (ALBERT model)"),xCr=l(),EM=a("li"),L3e=a("strong"),$Cr=o("bert"),kCr=o(" \u2014 "),rJ=a("a"),SCr=o("TFBertForMultipleChoice"),RCr=o(" (BERT model)"),PCr=l(),CM=a("li"),y3e=a("strong"),BCr=o("camembert"),ICr=o(" \u2014 "),tJ=a("a"),NCr=o("TFCamembertForMultipleChoice"),qCr=o(" (CamemBERT model)"),jCr=l(),wM=a("li"),x3e=a("strong"),DCr=o("convbert"),GCr=o(" \u2014 "),aJ=a("a"),OCr=o("TFConvBertForMultipleChoice"),VCr=o(" (ConvBERT model)"),XCr=l(),AM=a("li"),$3e=a("strong"),zCr=o("distilbert"),WCr=o(" \u2014 "),nJ=a("a"),QCr=o("TFDistilBertForMultipleChoice"),HCr=o(" (DistilBERT model)"),UCr=l(),LM=a("li"),k3e=a("strong"),JCr=o("electra"),YCr=o(" \u2014 "),sJ=a("a"),KCr=o("TFElectraForMultipleChoice"),ZCr=o(" (ELECTRA model)"),e0r=l(),yM=a("li"),S3e=a("strong"),o0r=o("flaubert"),r0r=o(" \u2014 "),lJ=a("a"),t0r=o("TFFlaubertForMultipleChoice"),a0r=o(" (FlauBERT model)"),n0r=l(),xM=a("li"),R3e=a("strong"),s0r=o("funnel"),l0r=o(" \u2014 "),iJ=a("a"),i0r=o("TFFunnelForMultipleChoice"),d0r=o(" (Funnel Transformer model)"),c0r=l(),$M=a("li"),P3e=a("strong"),f0r=o("longformer"),m0r=o(" \u2014 "),dJ=a("a"),g0r=o("TFLongformerForMultipleChoice"),h0r=o(" (Longformer model)"),p0r=l(),kM=a("li"),B3e=a("strong"),_0r=o("mobilebert"),u0r=o(" \u2014 "),cJ=a("a"),b0r=o("TFMobileBertForMultipleChoice"),v0r=o(" (MobileBERT model)"),F0r=l(),SM=a("li"),I3e=a("strong"),T0r=o("mpnet"),M0r=o(" \u2014 "),fJ=a("a"),E0r=o("TFMPNetForMultipleChoice"),C0r=o(" (MPNet model)"),w0r=l(),RM=a("li"),N3e=a("strong"),A0r=o("rembert"),L0r=o(" \u2014 "),mJ=a("a"),y0r=o("TFRemBertForMultipleChoice"),x0r=o(" (RemBERT model)"),$0r=l(),PM=a("li"),q3e=a("strong"),k0r=o("roberta"),S0r=o(" \u2014 "),gJ=a("a"),R0r=o("TFRobertaForMultipleChoice"),P0r=o(" (RoBERTa model)"),B0r=l(),BM=a("li"),j3e=a("strong"),I0r=o("roformer"),N0r=o(" \u2014 "),hJ=a("a"),q0r=o("TFRoFormerForMultipleChoice"),j0r=o(" (RoFormer model)"),D0r=l(),IM=a("li"),D3e=a("strong"),G0r=o("xlm"),O0r=o(" \u2014 "),pJ=a("a"),V0r=o("TFXLMForMultipleChoice"),X0r=o(" (XLM model)"),z0r=l(),NM=a("li"),G3e=a("strong"),W0r=o("xlm-roberta"),Q0r=o(" \u2014 "),_J=a("a"),H0r=o("TFXLMRobertaForMultipleChoice"),U0r=o(" (XLM-RoBERTa model)"),J0r=l(),qM=a("li"),O3e=a("strong"),Y0r=o("xlnet"),K0r=o(" \u2014 "),uJ=a("a"),Z0r=o("TFXLNetForMultipleChoice"),ewr=o(" (XLNet model)"),owr=l(),F(jM.$$.fragment),aGe=l(),gc=a("h2"),DM=a("a"),V3e=a("span"),F(u9.$$.fragment),rwr=l(),X3e=a("span"),twr=o("TFAutoModelForNextSentencePrediction"),nGe=l(),nr=a("div"),F(b9.$$.fragment),awr=l(),hc=a("p"),nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bJ=a("a"),swr=o("from_pretrained()"),lwr=o(" class method or the "),vJ=a("a"),iwr=o("from_config()"),dwr=o(` class
method.`),cwr=l(),v9=a("p"),fwr=o("This class cannot be instantiated directly using "),z3e=a("code"),mwr=o("__init__()"),gwr=o(" (throws an error)."),hwr=l(),It=a("div"),F(F9.$$.fragment),pwr=l(),W3e=a("p"),_wr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uwr=l(),pc=a("p"),bwr=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),vwr=o("not"),Fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),Twr=o("from_pretrained()"),Mwr=o(" to load the model weights."),Ewr=l(),F(GM.$$.fragment),Cwr=l(),Rr=a("div"),F(T9.$$.fragment),wwr=l(),H3e=a("p"),Awr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lwr=l(),ln=a("p"),ywr=o("The model class to instantiate is selected based on the "),U3e=a("code"),xwr=o("model_type"),$wr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),kwr=o("pretrained_model_name_or_path"),Swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),Rwr=o("pretrained_model_name_or_path"),Pwr=o(":"),Bwr=l(),M9=a("ul"),OM=a("li"),K3e=a("strong"),Iwr=o("bert"),Nwr=o(" \u2014 "),TJ=a("a"),qwr=o("TFBertForNextSentencePrediction"),jwr=o(" (BERT model)"),Dwr=l(),VM=a("li"),Z3e=a("strong"),Gwr=o("mobilebert"),Owr=o(" \u2014 "),MJ=a("a"),Vwr=o("TFMobileBertForNextSentencePrediction"),Xwr=o(" (MobileBERT model)"),zwr=l(),F(XM.$$.fragment),sGe=l(),_c=a("h2"),zM=a("a"),eFe=a("span"),F(E9.$$.fragment),Wwr=l(),oFe=a("span"),Qwr=o("TFAutoModelForTableQuestionAnswering"),lGe=l(),sr=a("div"),F(C9.$$.fragment),Hwr=l(),uc=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EJ=a("a"),Jwr=o("from_pretrained()"),Ywr=o(" class method or the "),CJ=a("a"),Kwr=o("from_config()"),Zwr=o(` class
method.`),e6r=l(),w9=a("p"),o6r=o("This class cannot be instantiated directly using "),rFe=a("code"),r6r=o("__init__()"),t6r=o(" (throws an error)."),a6r=l(),Nt=a("div"),F(A9.$$.fragment),n6r=l(),tFe=a("p"),s6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l6r=l(),bc=a("p"),i6r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),d6r=o("not"),c6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),f6r=o("from_pretrained()"),m6r=o(" to load the model weights."),g6r=l(),F(WM.$$.fragment),h6r=l(),Pr=a("div"),F(L9.$$.fragment),p6r=l(),nFe=a("p"),_6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u6r=l(),dn=a("p"),b6r=o("The model class to instantiate is selected based on the "),sFe=a("code"),v6r=o("model_type"),F6r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),T6r=o("pretrained_model_name_or_path"),M6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),E6r=o("pretrained_model_name_or_path"),C6r=o(":"),w6r=l(),dFe=a("ul"),QM=a("li"),cFe=a("strong"),A6r=o("tapas"),L6r=o(" \u2014 "),AJ=a("a"),y6r=o("TFTapasForQuestionAnswering"),x6r=o(" (TAPAS model)"),$6r=l(),F(HM.$$.fragment),iGe=l(),vc=a("h2"),UM=a("a"),fFe=a("span"),F(y9.$$.fragment),k6r=l(),mFe=a("span"),S6r=o("TFAutoModelForTokenClassification"),dGe=l(),lr=a("div"),F(x9.$$.fragment),R6r=l(),Fc=a("p"),P6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LJ=a("a"),B6r=o("from_pretrained()"),I6r=o(" class method or the "),yJ=a("a"),N6r=o("from_config()"),q6r=o(` class
method.`),j6r=l(),$9=a("p"),D6r=o("This class cannot be instantiated directly using "),gFe=a("code"),G6r=o("__init__()"),O6r=o(" (throws an error)."),V6r=l(),qt=a("div"),F(k9.$$.fragment),X6r=l(),hFe=a("p"),z6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W6r=l(),Tc=a("p"),Q6r=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),H6r=o("not"),U6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),J6r=o("from_pretrained()"),Y6r=o(" to load the model weights."),K6r=l(),F(JM.$$.fragment),Z6r=l(),Br=a("div"),F(S9.$$.fragment),eAr=l(),_Fe=a("p"),oAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rAr=l(),cn=a("p"),tAr=o("The model class to instantiate is selected based on the "),uFe=a("code"),aAr=o("model_type"),nAr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),sAr=o("pretrained_model_name_or_path"),lAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),iAr=o("pretrained_model_name_or_path"),dAr=o(":"),cAr=l(),de=a("ul"),YM=a("li"),FFe=a("strong"),fAr=o("albert"),mAr=o(" \u2014 "),$J=a("a"),gAr=o("TFAlbertForTokenClassification"),hAr=o(" (ALBERT model)"),pAr=l(),KM=a("li"),TFe=a("strong"),_Ar=o("bert"),uAr=o(" \u2014 "),kJ=a("a"),bAr=o("TFBertForTokenClassification"),vAr=o(" (BERT model)"),FAr=l(),ZM=a("li"),MFe=a("strong"),TAr=o("camembert"),MAr=o(" \u2014 "),SJ=a("a"),EAr=o("TFCamembertForTokenClassification"),CAr=o(" (CamemBERT model)"),wAr=l(),eE=a("li"),EFe=a("strong"),AAr=o("convbert"),LAr=o(" \u2014 "),RJ=a("a"),yAr=o("TFConvBertForTokenClassification"),xAr=o(" (ConvBERT model)"),$Ar=l(),oE=a("li"),CFe=a("strong"),kAr=o("deberta"),SAr=o(" \u2014 "),PJ=a("a"),RAr=o("TFDebertaForTokenClassification"),PAr=o(" (DeBERTa model)"),BAr=l(),rE=a("li"),wFe=a("strong"),IAr=o("deberta-v2"),NAr=o(" \u2014 "),BJ=a("a"),qAr=o("TFDebertaV2ForTokenClassification"),jAr=o(" (DeBERTa-v2 model)"),DAr=l(),tE=a("li"),AFe=a("strong"),GAr=o("distilbert"),OAr=o(" \u2014 "),IJ=a("a"),VAr=o("TFDistilBertForTokenClassification"),XAr=o(" (DistilBERT model)"),zAr=l(),aE=a("li"),LFe=a("strong"),WAr=o("electra"),QAr=o(" \u2014 "),NJ=a("a"),HAr=o("TFElectraForTokenClassification"),UAr=o(" (ELECTRA model)"),JAr=l(),nE=a("li"),yFe=a("strong"),YAr=o("flaubert"),KAr=o(" \u2014 "),qJ=a("a"),ZAr=o("TFFlaubertForTokenClassification"),eLr=o(" (FlauBERT model)"),oLr=l(),sE=a("li"),xFe=a("strong"),rLr=o("funnel"),tLr=o(" \u2014 "),jJ=a("a"),aLr=o("TFFunnelForTokenClassification"),nLr=o(" (Funnel Transformer model)"),sLr=l(),lE=a("li"),$Fe=a("strong"),lLr=o("layoutlm"),iLr=o(" \u2014 "),DJ=a("a"),dLr=o("TFLayoutLMForTokenClassification"),cLr=o(" (LayoutLM model)"),fLr=l(),iE=a("li"),kFe=a("strong"),mLr=o("longformer"),gLr=o(" \u2014 "),GJ=a("a"),hLr=o("TFLongformerForTokenClassification"),pLr=o(" (Longformer model)"),_Lr=l(),dE=a("li"),SFe=a("strong"),uLr=o("mobilebert"),bLr=o(" \u2014 "),OJ=a("a"),vLr=o("TFMobileBertForTokenClassification"),FLr=o(" (MobileBERT model)"),TLr=l(),cE=a("li"),RFe=a("strong"),MLr=o("mpnet"),ELr=o(" \u2014 "),VJ=a("a"),CLr=o("TFMPNetForTokenClassification"),wLr=o(" (MPNet model)"),ALr=l(),fE=a("li"),PFe=a("strong"),LLr=o("rembert"),yLr=o(" \u2014 "),XJ=a("a"),xLr=o("TFRemBertForTokenClassification"),$Lr=o(" (RemBERT model)"),kLr=l(),mE=a("li"),BFe=a("strong"),SLr=o("roberta"),RLr=o(" \u2014 "),zJ=a("a"),PLr=o("TFRobertaForTokenClassification"),BLr=o(" (RoBERTa model)"),ILr=l(),gE=a("li"),IFe=a("strong"),NLr=o("roformer"),qLr=o(" \u2014 "),WJ=a("a"),jLr=o("TFRoFormerForTokenClassification"),DLr=o(" (RoFormer model)"),GLr=l(),hE=a("li"),NFe=a("strong"),OLr=o("xlm"),VLr=o(" \u2014 "),QJ=a("a"),XLr=o("TFXLMForTokenClassification"),zLr=o(" (XLM model)"),WLr=l(),pE=a("li"),qFe=a("strong"),QLr=o("xlm-roberta"),HLr=o(" \u2014 "),HJ=a("a"),ULr=o("TFXLMRobertaForTokenClassification"),JLr=o(" (XLM-RoBERTa model)"),YLr=l(),_E=a("li"),jFe=a("strong"),KLr=o("xlnet"),ZLr=o(" \u2014 "),UJ=a("a"),eyr=o("TFXLNetForTokenClassification"),oyr=o(" (XLNet model)"),ryr=l(),F(uE.$$.fragment),cGe=l(),Mc=a("h2"),bE=a("a"),DFe=a("span"),F(R9.$$.fragment),tyr=l(),GFe=a("span"),ayr=o("TFAutoModelForQuestionAnswering"),fGe=l(),ir=a("div"),F(P9.$$.fragment),nyr=l(),Ec=a("p"),syr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" class method or the "),YJ=a("a"),dyr=o("from_config()"),cyr=o(` class
method.`),fyr=l(),B9=a("p"),myr=o("This class cannot be instantiated directly using "),OFe=a("code"),gyr=o("__init__()"),hyr=o(" (throws an error)."),pyr=l(),jt=a("div"),F(I9.$$.fragment),_yr=l(),VFe=a("p"),uyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),byr=l(),Cc=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Fyr=o("not"),Tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" to load the model weights."),Cyr=l(),F(vE.$$.fragment),wyr=l(),Ir=a("div"),F(N9.$$.fragment),Ayr=l(),zFe=a("p"),Lyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yyr=l(),fn=a("p"),xyr=o("The model class to instantiate is selected based on the "),WFe=a("code"),$yr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(":"),Iyr=l(),ce=a("ul"),FE=a("li"),UFe=a("strong"),Nyr=o("albert"),qyr=o(" \u2014 "),ZJ=a("a"),jyr=o("TFAlbertForQuestionAnswering"),Dyr=o(" (ALBERT model)"),Gyr=l(),TE=a("li"),JFe=a("strong"),Oyr=o("bert"),Vyr=o(" \u2014 "),eY=a("a"),Xyr=o("TFBertForQuestionAnswering"),zyr=o(" (BERT model)"),Wyr=l(),ME=a("li"),YFe=a("strong"),Qyr=o("camembert"),Hyr=o(" \u2014 "),oY=a("a"),Uyr=o("TFCamembertForQuestionAnswering"),Jyr=o(" (CamemBERT model)"),Yyr=l(),EE=a("li"),KFe=a("strong"),Kyr=o("convbert"),Zyr=o(" \u2014 "),rY=a("a"),e8r=o("TFConvBertForQuestionAnswering"),o8r=o(" (ConvBERT model)"),r8r=l(),CE=a("li"),ZFe=a("strong"),t8r=o("deberta"),a8r=o(" \u2014 "),tY=a("a"),n8r=o("TFDebertaForQuestionAnswering"),s8r=o(" (DeBERTa model)"),l8r=l(),wE=a("li"),eTe=a("strong"),i8r=o("deberta-v2"),d8r=o(" \u2014 "),aY=a("a"),c8r=o("TFDebertaV2ForQuestionAnswering"),f8r=o(" (DeBERTa-v2 model)"),m8r=l(),AE=a("li"),oTe=a("strong"),g8r=o("distilbert"),h8r=o(" \u2014 "),nY=a("a"),p8r=o("TFDistilBertForQuestionAnswering"),_8r=o(" (DistilBERT model)"),u8r=l(),LE=a("li"),rTe=a("strong"),b8r=o("electra"),v8r=o(" \u2014 "),sY=a("a"),F8r=o("TFElectraForQuestionAnswering"),T8r=o(" (ELECTRA model)"),M8r=l(),yE=a("li"),tTe=a("strong"),E8r=o("flaubert"),C8r=o(" \u2014 "),lY=a("a"),w8r=o("TFFlaubertForQuestionAnsweringSimple"),A8r=o(" (FlauBERT model)"),L8r=l(),xE=a("li"),aTe=a("strong"),y8r=o("funnel"),x8r=o(" \u2014 "),iY=a("a"),$8r=o("TFFunnelForQuestionAnswering"),k8r=o(" (Funnel Transformer model)"),S8r=l(),$E=a("li"),nTe=a("strong"),R8r=o("gptj"),P8r=o(" \u2014 "),dY=a("a"),B8r=o("TFGPTJForQuestionAnswering"),I8r=o(" (GPT-J model)"),N8r=l(),kE=a("li"),sTe=a("strong"),q8r=o("longformer"),j8r=o(" \u2014 "),cY=a("a"),D8r=o("TFLongformerForQuestionAnswering"),G8r=o(" (Longformer model)"),O8r=l(),SE=a("li"),lTe=a("strong"),V8r=o("mobilebert"),X8r=o(" \u2014 "),fY=a("a"),z8r=o("TFMobileBertForQuestionAnswering"),W8r=o(" (MobileBERT model)"),Q8r=l(),RE=a("li"),iTe=a("strong"),H8r=o("mpnet"),U8r=o(" \u2014 "),mY=a("a"),J8r=o("TFMPNetForQuestionAnswering"),Y8r=o(" (MPNet model)"),K8r=l(),PE=a("li"),dTe=a("strong"),Z8r=o("rembert"),e9r=o(" \u2014 "),gY=a("a"),o9r=o("TFRemBertForQuestionAnswering"),r9r=o(" (RemBERT model)"),t9r=l(),BE=a("li"),cTe=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),hY=a("a"),s9r=o("TFRobertaForQuestionAnswering"),l9r=o(" (RoBERTa model)"),i9r=l(),IE=a("li"),fTe=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),pY=a("a"),f9r=o("TFRoFormerForQuestionAnswering"),m9r=o(" (RoFormer model)"),g9r=l(),NE=a("li"),mTe=a("strong"),h9r=o("xlm"),p9r=o(" \u2014 "),_Y=a("a"),_9r=o("TFXLMForQuestionAnsweringSimple"),u9r=o(" (XLM model)"),b9r=l(),qE=a("li"),gTe=a("strong"),v9r=o("xlm-roberta"),F9r=o(" \u2014 "),uY=a("a"),T9r=o("TFXLMRobertaForQuestionAnswering"),M9r=o(" (XLM-RoBERTa model)"),E9r=l(),jE=a("li"),hTe=a("strong"),C9r=o("xlnet"),w9r=o(" \u2014 "),bY=a("a"),A9r=o("TFXLNetForQuestionAnsweringSimple"),L9r=o(" (XLNet model)"),y9r=l(),F(DE.$$.fragment),mGe=l(),wc=a("h2"),GE=a("a"),pTe=a("span"),F(q9.$$.fragment),x9r=l(),_Te=a("span"),$9r=o("TFAutoModelForVision2Seq"),gGe=l(),dr=a("div"),F(j9.$$.fragment),k9r=l(),Ac=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),FY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),D9=a("p"),q9r=o("This class cannot be instantiated directly using "),uTe=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Dt=a("div"),F(G9.$$.fragment),O9r=l(),bTe=a("p"),V9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X9r=l(),Lc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(OE.$$.fragment),Y9r=l(),Nr=a("div"),F(O9.$$.fragment),K9r=l(),FTe=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),exr=l(),mn=a("p"),oxr=o("The model class to instantiate is selected based on the "),TTe=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),CTe=a("ul"),VE=a("li"),wTe=a("strong"),dxr=o("vision-encoder-decoder"),cxr=o(" \u2014 "),MY=a("a"),fxr=o("TFVisionEncoderDecoderModel"),mxr=o(" (Vision Encoder decoder model)"),gxr=l(),F(XE.$$.fragment),hGe=l(),yc=a("h2"),zE=a("a"),ATe=a("span"),F(V9.$$.fragment),hxr=l(),LTe=a("span"),pxr=o("TFAutoModelForSpeechSeq2Seq"),pGe=l(),cr=a("div"),F(X9.$$.fragment),_xr=l(),xc=a("p"),uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EY=a("a"),bxr=o("from_pretrained()"),vxr=o(" class method or the "),CY=a("a"),Fxr=o("from_config()"),Txr=o(` class
method.`),Mxr=l(),z9=a("p"),Exr=o("This class cannot be instantiated directly using "),yTe=a("code"),Cxr=o("__init__()"),wxr=o(" (throws an error)."),Axr=l(),Gt=a("div"),F(W9.$$.fragment),Lxr=l(),xTe=a("p"),yxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xxr=l(),$c=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),kxr=o("not"),Sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),Rxr=o("from_pretrained()"),Pxr=o(" to load the model weights."),Bxr=l(),F(WE.$$.fragment),Ixr=l(),qr=a("div"),F(Q9.$$.fragment),Nxr=l(),kTe=a("p"),qxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jxr=l(),gn=a("p"),Dxr=o("The model class to instantiate is selected based on the "),STe=a("code"),Gxr=o("model_type"),Oxr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),zxr=o("pretrained_model_name_or_path"),Wxr=o(":"),Qxr=l(),BTe=a("ul"),QE=a("li"),ITe=a("strong"),Hxr=o("speech_to_text"),Uxr=o(" \u2014 "),AY=a("a"),Jxr=o("TFSpeech2TextForConditionalGeneration"),Yxr=o(" (Speech2Text model)"),Kxr=l(),F(HE.$$.fragment),_Ge=l(),kc=a("h2"),UE=a("a"),NTe=a("span"),F(H9.$$.fragment),Zxr=l(),qTe=a("span"),e$r=o("FlaxAutoModel"),uGe=l(),fr=a("div"),F(U9.$$.fragment),o$r=l(),Sc=a("p"),r$r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LY=a("a"),t$r=o("from_pretrained()"),a$r=o(" class method or the "),yY=a("a"),n$r=o("from_config()"),s$r=o(` class
method.`),l$r=l(),J9=a("p"),i$r=o("This class cannot be instantiated directly using "),jTe=a("code"),d$r=o("__init__()"),c$r=o(" (throws an error)."),f$r=l(),Ot=a("div"),F(Y9.$$.fragment),m$r=l(),DTe=a("p"),g$r=o("Instantiates one of the base model classes of the library from a configuration."),h$r=l(),Rc=a("p"),p$r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),_$r=o("not"),u$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),b$r=o("from_pretrained()"),v$r=o(" to load the model weights."),F$r=l(),F(JE.$$.fragment),T$r=l(),jr=a("div"),F(K9.$$.fragment),M$r=l(),OTe=a("p"),E$r=o("Instantiate one of the base model classes of the library from a pretrained model."),C$r=l(),hn=a("p"),w$r=o("The model class to instantiate is selected based on the "),VTe=a("code"),A$r=o("model_type"),L$r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),y$r=o("pretrained_model_name_or_path"),x$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(":"),S$r=l(),re=a("ul"),YE=a("li"),WTe=a("strong"),R$r=o("albert"),P$r=o(" \u2014 "),$Y=a("a"),B$r=o("FlaxAlbertModel"),I$r=o(" (ALBERT model)"),N$r=l(),KE=a("li"),QTe=a("strong"),q$r=o("bart"),j$r=o(" \u2014 "),kY=a("a"),D$r=o("FlaxBartModel"),G$r=o(" (BART model)"),O$r=l(),ZE=a("li"),HTe=a("strong"),V$r=o("beit"),X$r=o(" \u2014 "),SY=a("a"),z$r=o("FlaxBeitModel"),W$r=o(" (BEiT model)"),Q$r=l(),eC=a("li"),UTe=a("strong"),H$r=o("bert"),U$r=o(" \u2014 "),RY=a("a"),J$r=o("FlaxBertModel"),Y$r=o(" (BERT model)"),K$r=l(),oC=a("li"),JTe=a("strong"),Z$r=o("big_bird"),ekr=o(" \u2014 "),PY=a("a"),okr=o("FlaxBigBirdModel"),rkr=o(" (BigBird model)"),tkr=l(),rC=a("li"),YTe=a("strong"),akr=o("blenderbot"),nkr=o(" \u2014 "),BY=a("a"),skr=o("FlaxBlenderbotModel"),lkr=o(" (Blenderbot model)"),ikr=l(),tC=a("li"),KTe=a("strong"),dkr=o("blenderbot-small"),ckr=o(" \u2014 "),IY=a("a"),fkr=o("FlaxBlenderbotSmallModel"),mkr=o(" (BlenderbotSmall model)"),gkr=l(),aC=a("li"),ZTe=a("strong"),hkr=o("clip"),pkr=o(" \u2014 "),NY=a("a"),_kr=o("FlaxCLIPModel"),ukr=o(" (CLIP model)"),bkr=l(),nC=a("li"),e7e=a("strong"),vkr=o("distilbert"),Fkr=o(" \u2014 "),qY=a("a"),Tkr=o("FlaxDistilBertModel"),Mkr=o(" (DistilBERT model)"),Ekr=l(),sC=a("li"),o7e=a("strong"),Ckr=o("electra"),wkr=o(" \u2014 "),jY=a("a"),Akr=o("FlaxElectraModel"),Lkr=o(" (ELECTRA model)"),ykr=l(),lC=a("li"),r7e=a("strong"),xkr=o("gpt2"),$kr=o(" \u2014 "),DY=a("a"),kkr=o("FlaxGPT2Model"),Skr=o(" (OpenAI GPT-2 model)"),Rkr=l(),iC=a("li"),t7e=a("strong"),Pkr=o("gpt_neo"),Bkr=o(" \u2014 "),GY=a("a"),Ikr=o("FlaxGPTNeoModel"),Nkr=o(" (GPT Neo model)"),qkr=l(),dC=a("li"),a7e=a("strong"),jkr=o("gptj"),Dkr=o(" \u2014 "),OY=a("a"),Gkr=o("FlaxGPTJModel"),Okr=o(" (GPT-J model)"),Vkr=l(),cC=a("li"),n7e=a("strong"),Xkr=o("marian"),zkr=o(" \u2014 "),VY=a("a"),Wkr=o("FlaxMarianModel"),Qkr=o(" (Marian model)"),Hkr=l(),fC=a("li"),s7e=a("strong"),Ukr=o("mbart"),Jkr=o(" \u2014 "),XY=a("a"),Ykr=o("FlaxMBartModel"),Kkr=o(" (mBART model)"),Zkr=l(),mC=a("li"),l7e=a("strong"),eSr=o("mt5"),oSr=o(" \u2014 "),zY=a("a"),rSr=o("FlaxMT5Model"),tSr=o(" (MT5 model)"),aSr=l(),gC=a("li"),i7e=a("strong"),nSr=o("opt"),sSr=o(" \u2014 "),WY=a("a"),lSr=o("FlaxOPTModel"),iSr=o(" (OPT model)"),dSr=l(),hC=a("li"),d7e=a("strong"),cSr=o("pegasus"),fSr=o(" \u2014 "),QY=a("a"),mSr=o("FlaxPegasusModel"),gSr=o(" (Pegasus model)"),hSr=l(),pC=a("li"),c7e=a("strong"),pSr=o("roberta"),_Sr=o(" \u2014 "),HY=a("a"),uSr=o("FlaxRobertaModel"),bSr=o(" (RoBERTa model)"),vSr=l(),_C=a("li"),f7e=a("strong"),FSr=o("roformer"),TSr=o(" \u2014 "),UY=a("a"),MSr=o("FlaxRoFormerModel"),ESr=o(" (RoFormer model)"),CSr=l(),uC=a("li"),m7e=a("strong"),wSr=o("t5"),ASr=o(" \u2014 "),JY=a("a"),LSr=o("FlaxT5Model"),ySr=o(" (T5 model)"),xSr=l(),bC=a("li"),g7e=a("strong"),$Sr=o("vision-text-dual-encoder"),kSr=o(" \u2014 "),YY=a("a"),SSr=o("FlaxVisionTextDualEncoderModel"),RSr=o(" (VisionTextDualEncoder model)"),PSr=l(),vC=a("li"),h7e=a("strong"),BSr=o("vit"),ISr=o(" \u2014 "),KY=a("a"),NSr=o("FlaxViTModel"),qSr=o(" (ViT model)"),jSr=l(),FC=a("li"),p7e=a("strong"),DSr=o("wav2vec2"),GSr=o(" \u2014 "),ZY=a("a"),OSr=o("FlaxWav2Vec2Model"),VSr=o(" (Wav2Vec2 model)"),XSr=l(),TC=a("li"),_7e=a("strong"),zSr=o("xglm"),WSr=o(" \u2014 "),eK=a("a"),QSr=o("FlaxXGLMModel"),HSr=o(" (XGLM model)"),USr=l(),MC=a("li"),u7e=a("strong"),JSr=o("xlm-roberta"),YSr=o(" \u2014 "),oK=a("a"),KSr=o("FlaxXLMRobertaModel"),ZSr=o(" (XLM-RoBERTa model)"),eRr=l(),F(EC.$$.fragment),bGe=l(),Pc=a("h2"),CC=a("a"),b7e=a("span"),F(Z9.$$.fragment),oRr=l(),v7e=a("span"),rRr=o("FlaxAutoModelForCausalLM"),vGe=l(),mr=a("div"),F(ex.$$.fragment),tRr=l(),Bc=a("p"),aRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rK=a("a"),nRr=o("from_pretrained()"),sRr=o(" class method or the "),tK=a("a"),lRr=o("from_config()"),iRr=o(` class
method.`),dRr=l(),ox=a("p"),cRr=o("This class cannot be instantiated directly using "),F7e=a("code"),fRr=o("__init__()"),mRr=o(" (throws an error)."),gRr=l(),Vt=a("div"),F(rx.$$.fragment),hRr=l(),T7e=a("p"),pRr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Rr=l(),Ic=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),bRr=o("not"),vRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),FRr=o("from_pretrained()"),TRr=o(" to load the model weights."),MRr=l(),F(wC.$$.fragment),ERr=l(),Dr=a("div"),F(tx.$$.fragment),CRr=l(),E7e=a("p"),wRr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ARr=l(),pn=a("p"),LRr=o("The model class to instantiate is selected based on the "),C7e=a("code"),yRr=o("model_type"),xRr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),$Rr=o("pretrained_model_name_or_path"),kRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(":"),PRr=l(),xe=a("ul"),AC=a("li"),L7e=a("strong"),BRr=o("bart"),IRr=o(" \u2014 "),nK=a("a"),NRr=o("FlaxBartForCausalLM"),qRr=o(" (BART model)"),jRr=l(),LC=a("li"),y7e=a("strong"),DRr=o("bert"),GRr=o(" \u2014 "),sK=a("a"),ORr=o("FlaxBertForCausalLM"),VRr=o(" (BERT model)"),XRr=l(),yC=a("li"),x7e=a("strong"),zRr=o("big_bird"),WRr=o(" \u2014 "),lK=a("a"),QRr=o("FlaxBigBirdForCausalLM"),HRr=o(" (BigBird model)"),URr=l(),xC=a("li"),$7e=a("strong"),JRr=o("electra"),YRr=o(" \u2014 "),iK=a("a"),KRr=o("FlaxElectraForCausalLM"),ZRr=o(" (ELECTRA model)"),ePr=l(),$C=a("li"),k7e=a("strong"),oPr=o("gpt2"),rPr=o(" \u2014 "),dK=a("a"),tPr=o("FlaxGPT2LMHeadModel"),aPr=o(" (OpenAI GPT-2 model)"),nPr=l(),kC=a("li"),S7e=a("strong"),sPr=o("gpt_neo"),lPr=o(" \u2014 "),cK=a("a"),iPr=o("FlaxGPTNeoForCausalLM"),dPr=o(" (GPT Neo model)"),cPr=l(),SC=a("li"),R7e=a("strong"),fPr=o("gptj"),mPr=o(" \u2014 "),fK=a("a"),gPr=o("FlaxGPTJForCausalLM"),hPr=o(" (GPT-J model)"),pPr=l(),RC=a("li"),P7e=a("strong"),_Pr=o("opt"),uPr=o(" \u2014 "),mK=a("a"),bPr=o("FlaxOPTForCausalLM"),vPr=o(" (OPT model)"),FPr=l(),PC=a("li"),B7e=a("strong"),TPr=o("roberta"),MPr=o(" \u2014 "),gK=a("a"),EPr=o("FlaxRobertaForCausalLM"),CPr=o(" (RoBERTa model)"),wPr=l(),BC=a("li"),I7e=a("strong"),APr=o("xglm"),LPr=o(" \u2014 "),hK=a("a"),yPr=o("FlaxXGLMForCausalLM"),xPr=o(" (XGLM model)"),$Pr=l(),F(IC.$$.fragment),FGe=l(),Nc=a("h2"),NC=a("a"),N7e=a("span"),F(ax.$$.fragment),kPr=l(),q7e=a("span"),SPr=o("FlaxAutoModelForPreTraining"),TGe=l(),gr=a("div"),F(nx.$$.fragment),RPr=l(),qc=a("p"),PPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=a("a"),BPr=o("from_pretrained()"),IPr=o(" class method or the "),_K=a("a"),NPr=o("from_config()"),qPr=o(` class
method.`),jPr=l(),sx=a("p"),DPr=o("This class cannot be instantiated directly using "),j7e=a("code"),GPr=o("__init__()"),OPr=o(" (throws an error)."),VPr=l(),Xt=a("div"),F(lx.$$.fragment),XPr=l(),D7e=a("p"),zPr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WPr=l(),jc=a("p"),QPr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),HPr=o("not"),UPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),JPr=o("from_pretrained()"),YPr=o(" to load the model weights."),KPr=l(),F(qC.$$.fragment),ZPr=l(),Gr=a("div"),F(ix.$$.fragment),eBr=l(),O7e=a("p"),oBr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rBr=l(),_n=a("p"),tBr=o("The model class to instantiate is selected based on the "),V7e=a("code"),aBr=o("model_type"),nBr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(":"),cBr=l(),Ee=a("ul"),jC=a("li"),W7e=a("strong"),fBr=o("albert"),mBr=o(" \u2014 "),bK=a("a"),gBr=o("FlaxAlbertForPreTraining"),hBr=o(" (ALBERT model)"),pBr=l(),DC=a("li"),Q7e=a("strong"),_Br=o("bart"),uBr=o(" \u2014 "),vK=a("a"),bBr=o("FlaxBartForConditionalGeneration"),vBr=o(" (BART model)"),FBr=l(),GC=a("li"),H7e=a("strong"),TBr=o("bert"),MBr=o(" \u2014 "),FK=a("a"),EBr=o("FlaxBertForPreTraining"),CBr=o(" (BERT model)"),wBr=l(),OC=a("li"),U7e=a("strong"),ABr=o("big_bird"),LBr=o(" \u2014 "),TK=a("a"),yBr=o("FlaxBigBirdForPreTraining"),xBr=o(" (BigBird model)"),$Br=l(),VC=a("li"),J7e=a("strong"),kBr=o("electra"),SBr=o(" \u2014 "),MK=a("a"),RBr=o("FlaxElectraForPreTraining"),PBr=o(" (ELECTRA model)"),BBr=l(),XC=a("li"),Y7e=a("strong"),IBr=o("mbart"),NBr=o(" \u2014 "),EK=a("a"),qBr=o("FlaxMBartForConditionalGeneration"),jBr=o(" (mBART model)"),DBr=l(),zC=a("li"),K7e=a("strong"),GBr=o("mt5"),OBr=o(" \u2014 "),CK=a("a"),VBr=o("FlaxMT5ForConditionalGeneration"),XBr=o(" (MT5 model)"),zBr=l(),WC=a("li"),Z7e=a("strong"),WBr=o("roberta"),QBr=o(" \u2014 "),wK=a("a"),HBr=o("FlaxRobertaForMaskedLM"),UBr=o(" (RoBERTa model)"),JBr=l(),QC=a("li"),eMe=a("strong"),YBr=o("roformer"),KBr=o(" \u2014 "),AK=a("a"),ZBr=o("FlaxRoFormerForMaskedLM"),eIr=o(" (RoFormer model)"),oIr=l(),HC=a("li"),oMe=a("strong"),rIr=o("t5"),tIr=o(" \u2014 "),LK=a("a"),aIr=o("FlaxT5ForConditionalGeneration"),nIr=o(" (T5 model)"),sIr=l(),UC=a("li"),rMe=a("strong"),lIr=o("wav2vec2"),iIr=o(" \u2014 "),yK=a("a"),dIr=o("FlaxWav2Vec2ForPreTraining"),cIr=o(" (Wav2Vec2 model)"),fIr=l(),JC=a("li"),tMe=a("strong"),mIr=o("xlm-roberta"),gIr=o(" \u2014 "),xK=a("a"),hIr=o("FlaxXLMRobertaForMaskedLM"),pIr=o(" (XLM-RoBERTa model)"),_Ir=l(),F(YC.$$.fragment),MGe=l(),Dc=a("h2"),KC=a("a"),aMe=a("span"),F(dx.$$.fragment),uIr=l(),nMe=a("span"),bIr=o("FlaxAutoModelForMaskedLM"),EGe=l(),hr=a("div"),F(cx.$$.fragment),vIr=l(),Gc=a("p"),FIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$K=a("a"),TIr=o("from_pretrained()"),MIr=o(" class method or the "),kK=a("a"),EIr=o("from_config()"),CIr=o(` class
method.`),wIr=l(),fx=a("p"),AIr=o("This class cannot be instantiated directly using "),sMe=a("code"),LIr=o("__init__()"),yIr=o(" (throws an error)."),xIr=l(),zt=a("div"),F(mx.$$.fragment),$Ir=l(),lMe=a("p"),kIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SIr=l(),Oc=a("p"),RIr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),PIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),IIr=o("from_pretrained()"),NIr=o(" to load the model weights."),qIr=l(),F(ZC.$$.fragment),jIr=l(),Or=a("div"),F(gx.$$.fragment),DIr=l(),dMe=a("p"),GIr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OIr=l(),un=a("p"),VIr=o("The model class to instantiate is selected based on the "),cMe=a("code"),XIr=o("model_type"),zIr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),HIr=o("pretrained_model_name_or_path"),UIr=o(":"),JIr=l(),$e=a("ul"),e0=a("li"),gMe=a("strong"),YIr=o("albert"),KIr=o(" \u2014 "),RK=a("a"),ZIr=o("FlaxAlbertForMaskedLM"),eNr=o(" (ALBERT model)"),oNr=l(),o0=a("li"),hMe=a("strong"),rNr=o("bart"),tNr=o(" \u2014 "),PK=a("a"),aNr=o("FlaxBartForConditionalGeneration"),nNr=o(" (BART model)"),sNr=l(),r0=a("li"),pMe=a("strong"),lNr=o("bert"),iNr=o(" \u2014 "),BK=a("a"),dNr=o("FlaxBertForMaskedLM"),cNr=o(" (BERT model)"),fNr=l(),t0=a("li"),_Me=a("strong"),mNr=o("big_bird"),gNr=o(" \u2014 "),IK=a("a"),hNr=o("FlaxBigBirdForMaskedLM"),pNr=o(" (BigBird model)"),_Nr=l(),a0=a("li"),uMe=a("strong"),uNr=o("distilbert"),bNr=o(" \u2014 "),NK=a("a"),vNr=o("FlaxDistilBertForMaskedLM"),FNr=o(" (DistilBERT model)"),TNr=l(),n0=a("li"),bMe=a("strong"),MNr=o("electra"),ENr=o(" \u2014 "),qK=a("a"),CNr=o("FlaxElectraForMaskedLM"),wNr=o(" (ELECTRA model)"),ANr=l(),s0=a("li"),vMe=a("strong"),LNr=o("mbart"),yNr=o(" \u2014 "),jK=a("a"),xNr=o("FlaxMBartForConditionalGeneration"),$Nr=o(" (mBART model)"),kNr=l(),l0=a("li"),FMe=a("strong"),SNr=o("roberta"),RNr=o(" \u2014 "),DK=a("a"),PNr=o("FlaxRobertaForMaskedLM"),BNr=o(" (RoBERTa model)"),INr=l(),i0=a("li"),TMe=a("strong"),NNr=o("roformer"),qNr=o(" \u2014 "),GK=a("a"),jNr=o("FlaxRoFormerForMaskedLM"),DNr=o(" (RoFormer model)"),GNr=l(),d0=a("li"),MMe=a("strong"),ONr=o("xlm-roberta"),VNr=o(" \u2014 "),OK=a("a"),XNr=o("FlaxXLMRobertaForMaskedLM"),zNr=o(" (XLM-RoBERTa model)"),WNr=l(),F(c0.$$.fragment),CGe=l(),Vc=a("h2"),f0=a("a"),EMe=a("span"),F(hx.$$.fragment),QNr=l(),CMe=a("span"),HNr=o("FlaxAutoModelForSeq2SeqLM"),wGe=l(),pr=a("div"),F(px.$$.fragment),UNr=l(),Xc=a("p"),JNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VK=a("a"),YNr=o("from_pretrained()"),KNr=o(" class method or the "),XK=a("a"),ZNr=o("from_config()"),eqr=o(` class
method.`),oqr=l(),_x=a("p"),rqr=o("This class cannot be instantiated directly using "),wMe=a("code"),tqr=o("__init__()"),aqr=o(" (throws an error)."),nqr=l(),Wt=a("div"),F(ux.$$.fragment),sqr=l(),AMe=a("p"),lqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iqr=l(),zc=a("p"),dqr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),cqr=o("not"),fqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),mqr=o("from_pretrained()"),gqr=o(" to load the model weights."),hqr=l(),F(m0.$$.fragment),pqr=l(),Vr=a("div"),F(bx.$$.fragment),_qr=l(),yMe=a("p"),uqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bqr=l(),bn=a("p"),vqr=o("The model class to instantiate is selected based on the "),xMe=a("code"),Fqr=o("model_type"),Tqr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),Cqr=o("pretrained_model_name_or_path"),wqr=o(":"),Aqr=l(),Pe=a("ul"),g0=a("li"),SMe=a("strong"),Lqr=o("bart"),yqr=o(" \u2014 "),WK=a("a"),xqr=o("FlaxBartForConditionalGeneration"),$qr=o(" (BART model)"),kqr=l(),h0=a("li"),RMe=a("strong"),Sqr=o("blenderbot"),Rqr=o(" \u2014 "),QK=a("a"),Pqr=o("FlaxBlenderbotForConditionalGeneration"),Bqr=o(" (Blenderbot model)"),Iqr=l(),p0=a("li"),PMe=a("strong"),Nqr=o("blenderbot-small"),qqr=o(" \u2014 "),HK=a("a"),jqr=o("FlaxBlenderbotSmallForConditionalGeneration"),Dqr=o(" (BlenderbotSmall model)"),Gqr=l(),_0=a("li"),BMe=a("strong"),Oqr=o("encoder-decoder"),Vqr=o(" \u2014 "),UK=a("a"),Xqr=o("FlaxEncoderDecoderModel"),zqr=o(" (Encoder decoder model)"),Wqr=l(),u0=a("li"),IMe=a("strong"),Qqr=o("marian"),Hqr=o(" \u2014 "),JK=a("a"),Uqr=o("FlaxMarianMTModel"),Jqr=o(" (Marian model)"),Yqr=l(),b0=a("li"),NMe=a("strong"),Kqr=o("mbart"),Zqr=o(" \u2014 "),YK=a("a"),ejr=o("FlaxMBartForConditionalGeneration"),ojr=o(" (mBART model)"),rjr=l(),v0=a("li"),qMe=a("strong"),tjr=o("mt5"),ajr=o(" \u2014 "),KK=a("a"),njr=o("FlaxMT5ForConditionalGeneration"),sjr=o(" (MT5 model)"),ljr=l(),F0=a("li"),jMe=a("strong"),ijr=o("pegasus"),djr=o(" \u2014 "),ZK=a("a"),cjr=o("FlaxPegasusForConditionalGeneration"),fjr=o(" (Pegasus model)"),mjr=l(),T0=a("li"),DMe=a("strong"),gjr=o("t5"),hjr=o(" \u2014 "),eZ=a("a"),pjr=o("FlaxT5ForConditionalGeneration"),_jr=o(" (T5 model)"),ujr=l(),F(M0.$$.fragment),AGe=l(),Wc=a("h2"),E0=a("a"),GMe=a("span"),F(vx.$$.fragment),bjr=l(),OMe=a("span"),vjr=o("FlaxAutoModelForSequenceClassification"),LGe=l(),_r=a("div"),F(Fx.$$.fragment),Fjr=l(),Qc=a("p"),Tjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oZ=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" class method or the "),rZ=a("a"),Cjr=o("from_config()"),wjr=o(` class
method.`),Ajr=l(),Tx=a("p"),Ljr=o("This class cannot be instantiated directly using "),VMe=a("code"),yjr=o("__init__()"),xjr=o(" (throws an error)."),$jr=l(),Qt=a("div"),F(Mx.$$.fragment),kjr=l(),XMe=a("p"),Sjr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rjr=l(),Hc=a("p"),Pjr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),Bjr=o("not"),Ijr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),Njr=o("from_pretrained()"),qjr=o(" to load the model weights."),jjr=l(),F(C0.$$.fragment),Djr=l(),Xr=a("div"),F(Ex.$$.fragment),Gjr=l(),WMe=a("p"),Ojr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vjr=l(),vn=a("p"),Xjr=o("The model class to instantiate is selected based on the "),QMe=a("code"),zjr=o("model_type"),Wjr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),Ujr=o("pretrained_model_name_or_path"),Jjr=o(":"),Yjr=l(),ke=a("ul"),w0=a("li"),JMe=a("strong"),Kjr=o("albert"),Zjr=o(" \u2014 "),aZ=a("a"),eDr=o("FlaxAlbertForSequenceClassification"),oDr=o(" (ALBERT model)"),rDr=l(),A0=a("li"),YMe=a("strong"),tDr=o("bart"),aDr=o(" \u2014 "),nZ=a("a"),nDr=o("FlaxBartForSequenceClassification"),sDr=o(" (BART model)"),lDr=l(),L0=a("li"),KMe=a("strong"),iDr=o("bert"),dDr=o(" \u2014 "),sZ=a("a"),cDr=o("FlaxBertForSequenceClassification"),fDr=o(" (BERT model)"),mDr=l(),y0=a("li"),ZMe=a("strong"),gDr=o("big_bird"),hDr=o(" \u2014 "),lZ=a("a"),pDr=o("FlaxBigBirdForSequenceClassification"),_Dr=o(" (BigBird model)"),uDr=l(),x0=a("li"),eEe=a("strong"),bDr=o("distilbert"),vDr=o(" \u2014 "),iZ=a("a"),FDr=o("FlaxDistilBertForSequenceClassification"),TDr=o(" (DistilBERT model)"),MDr=l(),$0=a("li"),oEe=a("strong"),EDr=o("electra"),CDr=o(" \u2014 "),dZ=a("a"),wDr=o("FlaxElectraForSequenceClassification"),ADr=o(" (ELECTRA model)"),LDr=l(),k0=a("li"),rEe=a("strong"),yDr=o("mbart"),xDr=o(" \u2014 "),cZ=a("a"),$Dr=o("FlaxMBartForSequenceClassification"),kDr=o(" (mBART model)"),SDr=l(),S0=a("li"),tEe=a("strong"),RDr=o("roberta"),PDr=o(" \u2014 "),fZ=a("a"),BDr=o("FlaxRobertaForSequenceClassification"),IDr=o(" (RoBERTa model)"),NDr=l(),R0=a("li"),aEe=a("strong"),qDr=o("roformer"),jDr=o(" \u2014 "),mZ=a("a"),DDr=o("FlaxRoFormerForSequenceClassification"),GDr=o(" (RoFormer model)"),ODr=l(),P0=a("li"),nEe=a("strong"),VDr=o("xlm-roberta"),XDr=o(" \u2014 "),gZ=a("a"),zDr=o("FlaxXLMRobertaForSequenceClassification"),WDr=o(" (XLM-RoBERTa model)"),QDr=l(),F(B0.$$.fragment),yGe=l(),Uc=a("h2"),I0=a("a"),sEe=a("span"),F(Cx.$$.fragment),HDr=l(),lEe=a("span"),UDr=o("FlaxAutoModelForQuestionAnswering"),xGe=l(),ur=a("div"),F(wx.$$.fragment),JDr=l(),Jc=a("p"),YDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hZ=a("a"),KDr=o("from_pretrained()"),ZDr=o(" class method or the "),pZ=a("a"),eGr=o("from_config()"),oGr=o(` class
method.`),rGr=l(),Ax=a("p"),tGr=o("This class cannot be instantiated directly using "),iEe=a("code"),aGr=o("__init__()"),nGr=o(" (throws an error)."),sGr=l(),Ht=a("div"),F(Lx.$$.fragment),lGr=l(),dEe=a("p"),iGr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dGr=l(),Yc=a("p"),cGr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),fGr=o("not"),mGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),gGr=o("from_pretrained()"),hGr=o(" to load the model weights."),pGr=l(),F(N0.$$.fragment),_Gr=l(),zr=a("div"),F(yx.$$.fragment),uGr=l(),fEe=a("p"),bGr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vGr=l(),Fn=a("p"),FGr=o("The model class to instantiate is selected based on the "),mEe=a("code"),TGr=o("model_type"),MGr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),wGr=o("pretrained_model_name_or_path"),AGr=o(":"),LGr=l(),Se=a("ul"),q0=a("li"),pEe=a("strong"),yGr=o("albert"),xGr=o(" \u2014 "),uZ=a("a"),$Gr=o("FlaxAlbertForQuestionAnswering"),kGr=o(" (ALBERT model)"),SGr=l(),j0=a("li"),_Ee=a("strong"),RGr=o("bart"),PGr=o(" \u2014 "),bZ=a("a"),BGr=o("FlaxBartForQuestionAnswering"),IGr=o(" (BART model)"),NGr=l(),D0=a("li"),uEe=a("strong"),qGr=o("bert"),jGr=o(" \u2014 "),vZ=a("a"),DGr=o("FlaxBertForQuestionAnswering"),GGr=o(" (BERT model)"),OGr=l(),G0=a("li"),bEe=a("strong"),VGr=o("big_bird"),XGr=o(" \u2014 "),FZ=a("a"),zGr=o("FlaxBigBirdForQuestionAnswering"),WGr=o(" (BigBird model)"),QGr=l(),O0=a("li"),vEe=a("strong"),HGr=o("distilbert"),UGr=o(" \u2014 "),TZ=a("a"),JGr=o("FlaxDistilBertForQuestionAnswering"),YGr=o(" (DistilBERT model)"),KGr=l(),V0=a("li"),FEe=a("strong"),ZGr=o("electra"),eOr=o(" \u2014 "),MZ=a("a"),oOr=o("FlaxElectraForQuestionAnswering"),rOr=o(" (ELECTRA model)"),tOr=l(),X0=a("li"),TEe=a("strong"),aOr=o("mbart"),nOr=o(" \u2014 "),EZ=a("a"),sOr=o("FlaxMBartForQuestionAnswering"),lOr=o(" (mBART model)"),iOr=l(),z0=a("li"),MEe=a("strong"),dOr=o("roberta"),cOr=o(" \u2014 "),CZ=a("a"),fOr=o("FlaxRobertaForQuestionAnswering"),mOr=o(" (RoBERTa model)"),gOr=l(),W0=a("li"),EEe=a("strong"),hOr=o("roformer"),pOr=o(" \u2014 "),wZ=a("a"),_Or=o("FlaxRoFormerForQuestionAnswering"),uOr=o(" (RoFormer model)"),bOr=l(),Q0=a("li"),CEe=a("strong"),vOr=o("xlm-roberta"),FOr=o(" \u2014 "),AZ=a("a"),TOr=o("FlaxXLMRobertaForQuestionAnswering"),MOr=o(" (XLM-RoBERTa model)"),EOr=l(),F(H0.$$.fragment),$Ge=l(),Kc=a("h2"),U0=a("a"),wEe=a("span"),F(xx.$$.fragment),COr=l(),AEe=a("span"),wOr=o("FlaxAutoModelForTokenClassification"),kGe=l(),br=a("div"),F($x.$$.fragment),AOr=l(),Zc=a("p"),LOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LZ=a("a"),yOr=o("from_pretrained()"),xOr=o(" class method or the "),yZ=a("a"),$Or=o("from_config()"),kOr=o(` class
method.`),SOr=l(),kx=a("p"),ROr=o("This class cannot be instantiated directly using "),LEe=a("code"),POr=o("__init__()"),BOr=o(" (throws an error)."),IOr=l(),Ut=a("div"),F(Sx.$$.fragment),NOr=l(),yEe=a("p"),qOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jOr=l(),ef=a("p"),DOr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),GOr=o("not"),OOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),VOr=o("from_pretrained()"),XOr=o(" to load the model weights."),zOr=l(),F(J0.$$.fragment),WOr=l(),Wr=a("div"),F(Rx.$$.fragment),QOr=l(),$Ee=a("p"),HOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UOr=l(),Tn=a("p"),JOr=o("The model class to instantiate is selected based on the "),kEe=a("code"),YOr=o("model_type"),KOr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),ZOr=o("pretrained_model_name_or_path"),eVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),oVr=o("pretrained_model_name_or_path"),rVr=o(":"),tVr=l(),Oe=a("ul"),Y0=a("li"),PEe=a("strong"),aVr=o("albert"),nVr=o(" \u2014 "),$Z=a("a"),sVr=o("FlaxAlbertForTokenClassification"),lVr=o(" (ALBERT model)"),iVr=l(),K0=a("li"),BEe=a("strong"),dVr=o("bert"),cVr=o(" \u2014 "),kZ=a("a"),fVr=o("FlaxBertForTokenClassification"),mVr=o(" (BERT model)"),gVr=l(),Z0=a("li"),IEe=a("strong"),hVr=o("big_bird"),pVr=o(" \u2014 "),SZ=a("a"),_Vr=o("FlaxBigBirdForTokenClassification"),uVr=o(" (BigBird model)"),bVr=l(),ew=a("li"),NEe=a("strong"),vVr=o("distilbert"),FVr=o(" \u2014 "),RZ=a("a"),TVr=o("FlaxDistilBertForTokenClassification"),MVr=o(" (DistilBERT model)"),EVr=l(),ow=a("li"),qEe=a("strong"),CVr=o("electra"),wVr=o(" \u2014 "),PZ=a("a"),AVr=o("FlaxElectraForTokenClassification"),LVr=o(" (ELECTRA model)"),yVr=l(),rw=a("li"),jEe=a("strong"),xVr=o("roberta"),$Vr=o(" \u2014 "),BZ=a("a"),kVr=o("FlaxRobertaForTokenClassification"),SVr=o(" (RoBERTa model)"),RVr=l(),tw=a("li"),DEe=a("strong"),PVr=o("roformer"),BVr=o(" \u2014 "),IZ=a("a"),IVr=o("FlaxRoFormerForTokenClassification"),NVr=o(" (RoFormer model)"),qVr=l(),aw=a("li"),GEe=a("strong"),jVr=o("xlm-roberta"),DVr=o(" \u2014 "),NZ=a("a"),GVr=o("FlaxXLMRobertaForTokenClassification"),OVr=o(" (XLM-RoBERTa model)"),VVr=l(),F(nw.$$.fragment),SGe=l(),of=a("h2"),sw=a("a"),OEe=a("span"),F(Px.$$.fragment),XVr=l(),VEe=a("span"),zVr=o("FlaxAutoModelForMultipleChoice"),RGe=l(),vr=a("div"),F(Bx.$$.fragment),WVr=l(),rf=a("p"),QVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qZ=a("a"),HVr=o("from_pretrained()"),UVr=o(" class method or the "),jZ=a("a"),JVr=o("from_config()"),YVr=o(` class
method.`),KVr=l(),Ix=a("p"),ZVr=o("This class cannot be instantiated directly using "),XEe=a("code"),eXr=o("__init__()"),oXr=o(" (throws an error)."),rXr=l(),Jt=a("div"),F(Nx.$$.fragment),tXr=l(),zEe=a("p"),aXr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nXr=l(),tf=a("p"),sXr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),lXr=o("not"),iXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),dXr=o("from_pretrained()"),cXr=o(" to load the model weights."),fXr=l(),F(lw.$$.fragment),mXr=l(),Qr=a("div"),F(qx.$$.fragment),gXr=l(),QEe=a("p"),hXr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pXr=l(),Mn=a("p"),_Xr=o("The model class to instantiate is selected based on the "),HEe=a("code"),uXr=o("model_type"),bXr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),vXr=o("pretrained_model_name_or_path"),FXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(":"),EXr=l(),Ve=a("ul"),iw=a("li"),YEe=a("strong"),CXr=o("albert"),wXr=o(" \u2014 "),GZ=a("a"),AXr=o("FlaxAlbertForMultipleChoice"),LXr=o(" (ALBERT model)"),yXr=l(),dw=a("li"),KEe=a("strong"),xXr=o("bert"),$Xr=o(" \u2014 "),OZ=a("a"),kXr=o("FlaxBertForMultipleChoice"),SXr=o(" (BERT model)"),RXr=l(),cw=a("li"),ZEe=a("strong"),PXr=o("big_bird"),BXr=o(" \u2014 "),VZ=a("a"),IXr=o("FlaxBigBirdForMultipleChoice"),NXr=o(" (BigBird model)"),qXr=l(),fw=a("li"),eCe=a("strong"),jXr=o("distilbert"),DXr=o(" \u2014 "),XZ=a("a"),GXr=o("FlaxDistilBertForMultipleChoice"),OXr=o(" (DistilBERT model)"),VXr=l(),mw=a("li"),oCe=a("strong"),XXr=o("electra"),zXr=o(" \u2014 "),zZ=a("a"),WXr=o("FlaxElectraForMultipleChoice"),QXr=o(" (ELECTRA model)"),HXr=l(),gw=a("li"),rCe=a("strong"),UXr=o("roberta"),JXr=o(" \u2014 "),WZ=a("a"),YXr=o("FlaxRobertaForMultipleChoice"),KXr=o(" (RoBERTa model)"),ZXr=l(),hw=a("li"),tCe=a("strong"),ezr=o("roformer"),ozr=o(" \u2014 "),QZ=a("a"),rzr=o("FlaxRoFormerForMultipleChoice"),tzr=o(" (RoFormer model)"),azr=l(),pw=a("li"),aCe=a("strong"),nzr=o("xlm-roberta"),szr=o(" \u2014 "),HZ=a("a"),lzr=o("FlaxXLMRobertaForMultipleChoice"),izr=o(" (XLM-RoBERTa model)"),dzr=l(),F(_w.$$.fragment),PGe=l(),af=a("h2"),uw=a("a"),nCe=a("span"),F(jx.$$.fragment),czr=l(),sCe=a("span"),fzr=o("FlaxAutoModelForNextSentencePrediction"),BGe=l(),Fr=a("div"),F(Dx.$$.fragment),mzr=l(),nf=a("p"),gzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UZ=a("a"),hzr=o("from_pretrained()"),pzr=o(" class method or the "),JZ=a("a"),_zr=o("from_config()"),uzr=o(` class
method.`),bzr=l(),Gx=a("p"),vzr=o("This class cannot be instantiated directly using "),lCe=a("code"),Fzr=o("__init__()"),Tzr=o(" (throws an error)."),Mzr=l(),Yt=a("div"),F(Ox.$$.fragment),Ezr=l(),iCe=a("p"),Czr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wzr=l(),sf=a("p"),Azr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),Lzr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),xzr=o("from_pretrained()"),$zr=o(" to load the model weights."),kzr=l(),F(bw.$$.fragment),Szr=l(),Hr=a("div"),F(Vx.$$.fragment),Rzr=l(),cCe=a("p"),Pzr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bzr=l(),En=a("p"),Izr=o("The model class to instantiate is selected based on the "),fCe=a("code"),Nzr=o("model_type"),qzr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),jzr=o("pretrained_model_name_or_path"),Dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(":"),Vzr=l(),hCe=a("ul"),vw=a("li"),pCe=a("strong"),Xzr=o("bert"),zzr=o(" \u2014 "),KZ=a("a"),Wzr=o("FlaxBertForNextSentencePrediction"),Qzr=o(" (BERT model)"),Hzr=l(),F(Fw.$$.fragment),IGe=l(),lf=a("h2"),Tw=a("a"),_Ce=a("span"),F(Xx.$$.fragment),Uzr=l(),uCe=a("span"),Jzr=o("FlaxAutoModelForImageClassification"),NGe=l(),Tr=a("div"),F(zx.$$.fragment),Yzr=l(),df=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZZ=a("a"),Zzr=o("from_pretrained()"),eWr=o(" class method or the "),eee=a("a"),oWr=o("from_config()"),rWr=o(` class
method.`),tWr=l(),Wx=a("p"),aWr=o("This class cannot be instantiated directly using "),bCe=a("code"),nWr=o("__init__()"),sWr=o(" (throws an error)."),lWr=l(),Kt=a("div"),F(Qx.$$.fragment),iWr=l(),vCe=a("p"),dWr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cWr=l(),cf=a("p"),fWr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),mWr=o("not"),gWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),hWr=o("from_pretrained()"),pWr=o(" to load the model weights."),_Wr=l(),F(Mw.$$.fragment),uWr=l(),Ur=a("div"),F(Hx.$$.fragment),bWr=l(),TCe=a("p"),vWr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FWr=l(),Cn=a("p"),TWr=o("The model class to instantiate is selected based on the "),MCe=a("code"),MWr=o("model_type"),EWr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),CWr=o("pretrained_model_name_or_path"),wWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),AWr=o("pretrained_model_name_or_path"),LWr=o(":"),yWr=l(),Ux=a("ul"),Ew=a("li"),wCe=a("strong"),xWr=o("beit"),$Wr=o(" \u2014 "),ree=a("a"),kWr=o("FlaxBeitForImageClassification"),SWr=o(" (BEiT model)"),RWr=l(),Cw=a("li"),ACe=a("strong"),PWr=o("vit"),BWr=o(" \u2014 "),tee=a("a"),IWr=o("FlaxViTForImageClassification"),NWr=o(" (ViT model)"),qWr=l(),F(ww.$$.fragment),qGe=l(),ff=a("h2"),Aw=a("a"),LCe=a("span"),F(Jx.$$.fragment),jWr=l(),yCe=a("span"),DWr=o("FlaxAutoModelForVision2Seq"),jGe=l(),Mr=a("div"),F(Yx.$$.fragment),GWr=l(),mf=a("p"),OWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aee=a("a"),VWr=o("from_pretrained()"),XWr=o(" class method or the "),nee=a("a"),zWr=o("from_config()"),WWr=o(` class
method.`),QWr=l(),Kx=a("p"),HWr=o("This class cannot be instantiated directly using "),xCe=a("code"),UWr=o("__init__()"),JWr=o(" (throws an error)."),YWr=l(),Zt=a("div"),F(Zx.$$.fragment),KWr=l(),$Ce=a("p"),ZWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eQr=l(),gf=a("p"),oQr=o(`Note:
Loading a model from its configuration file does `),kCe=a("strong"),rQr=o("not"),tQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),aQr=o("from_pretrained()"),nQr=o(" to load the model weights."),sQr=l(),F(Lw.$$.fragment),lQr=l(),Jr=a("div"),F(e$.$$.fragment),iQr=l(),SCe=a("p"),dQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cQr=l(),wn=a("p"),fQr=o("The model class to instantiate is selected based on the "),RCe=a("code"),mQr=o("model_type"),gQr=o(` property of the config object (either
passed as an argument or loaded from `),PCe=a("code"),hQr=o("pretrained_model_name_or_path"),pQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=a("code"),_Qr=o("pretrained_model_name_or_path"),uQr=o(":"),bQr=l(),ICe=a("ul"),yw=a("li"),NCe=a("strong"),vQr=o("vision-encoder-decoder"),FQr=o(" \u2014 "),lee=a("a"),TQr=o("FlaxVisionEncoderDecoderModel"),MQr=o(" (Vision Encoder decoder model)"),EQr=l(),F(xw.$$.fragment),this.h()},l(f){const u=JPt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var o$=s(p);m=n(o$,"A",{id:!0,class:!0,href:!0});var qCe=s(m);_=n(qCe,"SPAN",{});var jCe=s(_);T(d.$$.fragment,jCe),jCe.forEach(t),qCe.forEach(t),h=i(o$),Mo=n(o$,"SPAN",{});var DCe=s(Mo);gi=r(DCe,"Auto Classes"),DCe.forEach(t),o$.forEach(t),uf=i(f),tt=n(f,"P",{});var r$=s(tt);hi=r(r$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(r$,"CODE",{});var GCe=s(pi);WA=r(GCe,"from_pretrained()"),GCe.forEach(t),bf=r(r$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),r$.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var OCe=s(Ln);QA=r(OCe,"AutoConfig"),OCe.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var VCe=s(xn);HA=r(VCe,"AutoModel"),VCe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var XCe=s($n);UA=r(XCe,"AutoTokenizer"),XCe.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var t$=s(Ae);pk=r(t$,"will create a model that is an instance of "),vi=n(t$,"A",{href:!0});var zCe=s(vi);_k=r(zCe,"BertModel"),zCe.forEach(t),uk=r(t$,"."),t$.forEach(t),Eo=i(f),Aa=n(f,"P",{});var a$=s(Aa);bk=r(a$,"There is one class of "),Ff=n(a$,"CODE",{});var WCe=s(Ff);vk=r(WCe,"AutoModel"),WCe.forEach(t),HVe=r(a$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),a$.forEach(t),Nje=i(f),Fi=n(f,"H2",{class:!0});var n$=s(Fi);Tf=n(n$,"A",{id:!0,class:!0,href:!0});var QCe=s(Tf);ere=n(QCe,"SPAN",{});var HCe=s(ere);T(JA.$$.fragment,HCe),HCe.forEach(t),QCe.forEach(t),UVe=i(n$),ore=n(n$,"SPAN",{});var UCe=s(ore);JVe=r(UCe,"Extending the Auto Classes"),UCe.forEach(t),n$.forEach(t),qje=i(f),kn=n(f,"P",{});var hf=s(kn);YVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rre=n(hf,"CODE",{});var JCe=s(rre);KVe=r(JCe,"NewModel"),JCe.forEach(t),ZVe=r(hf,", make sure you have a "),tre=n(hf,"CODE",{});var YCe=s(tre);eXe=r(YCe,"NewModelConfig"),YCe.forEach(t),oXe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),jje=i(f),T(YA.$$.fragment,f),Dje=i(f),Fk=n(f,"P",{});var KCe=s(Fk);rXe=r(KCe,"You will then be able to use the auto classes like you would usually do!"),KCe.forEach(t),Gje=i(f),T(Mf.$$.fragment,f),Oje=i(f),Ti=n(f,"H2",{class:!0});var s$=s(Ti);Ef=n(s$,"A",{id:!0,class:!0,href:!0});var ZCe=s(Ef);are=n(ZCe,"SPAN",{});var e0e=s(are);T(KA.$$.fragment,e0e),e0e.forEach(t),ZCe.forEach(t),tXe=i(s$),nre=n(s$,"SPAN",{});var o0e=s(nre);aXe=r(o0e,"AutoConfig"),o0e.forEach(t),s$.forEach(t),Vje=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(ZA.$$.fragment,ot),nXe=i(ot),eL=n(ot,"P",{});var l$=s(eL);sXe=r(l$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Tk=n(l$,"A",{href:!0});var r0e=s(Tk);lXe=r(r0e,"from_pretrained()"),r0e.forEach(t),iXe=r(l$," class method."),l$.forEach(t),dXe=i(ot),oL=n(ot,"P",{});var i$=s(oL);cXe=r(i$,"This class cannot be instantiated directly using "),sre=n(i$,"CODE",{});var t0e=s(sre);fXe=r(t0e,"__init__()"),t0e.forEach(t),mXe=r(i$," (throws an error)."),i$.forEach(t),gXe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(rL.$$.fragment,rt),hXe=i(rt),lre=n(rt,"P",{});var a0e=s(lre);pXe=r(a0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),a0e.forEach(t),_Xe=i(rt),Mi=n(rt,"P",{});var pf=s(Mi);uXe=r(pf,"The configuration class to instantiate is selected based on the "),ire=n(pf,"CODE",{});var n0e=s(ire);bXe=r(n0e,"model_type"),n0e.forEach(t),vXe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dre=n(pf,"CODE",{});var s0e=s(dre);FXe=r(s0e,"pretrained_model_name_or_path"),s0e.forEach(t),TXe=r(pf,":"),pf.forEach(t),MXe=i(rt),A=n(rt,"UL",{});var L=s(A);Cf=n(L,"LI",{});var $w=s(Cf);cre=n($w,"STRONG",{});var l0e=s(cre);EXe=r(l0e,"albert"),l0e.forEach(t),CXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var i0e=s(Mk);wXe=r(i0e,"AlbertConfig"),i0e.forEach(t),AXe=r($w," (ALBERT model)"),$w.forEach(t),LXe=i(L),wf=n(L,"LI",{});var kw=s(wf);fre=n(kw,"STRONG",{});var d0e=s(fre);yXe=r(d0e,"bart"),d0e.forEach(t),xXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var c0e=s(Ek);$Xe=r(c0e,"BartConfig"),c0e.forEach(t),kXe=r(kw," (BART model)"),kw.forEach(t),SXe=i(L),Af=n(L,"LI",{});var Sw=s(Af);mre=n(Sw,"STRONG",{});var f0e=s(mre);RXe=r(f0e,"beit"),f0e.forEach(t),PXe=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var m0e=s(Ck);BXe=r(m0e,"BeitConfig"),m0e.forEach(t),IXe=r(Sw," (BEiT model)"),Sw.forEach(t),NXe=i(L),Lf=n(L,"LI",{});var Rw=s(Lf);gre=n(Rw,"STRONG",{});var g0e=s(gre);qXe=r(g0e,"bert"),g0e.forEach(t),jXe=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var h0e=s(wk);DXe=r(h0e,"BertConfig"),h0e.forEach(t),GXe=r(Rw," (BERT model)"),Rw.forEach(t),OXe=i(L),yf=n(L,"LI",{});var Pw=s(yf);hre=n(Pw,"STRONG",{});var p0e=s(hre);VXe=r(p0e,"bert-generation"),p0e.forEach(t),XXe=r(Pw," \u2014 "),Ak=n(Pw,"A",{href:!0});var _0e=s(Ak);zXe=r(_0e,"BertGenerationConfig"),_0e.forEach(t),WXe=r(Pw," (Bert Generation model)"),Pw.forEach(t),QXe=i(L),xf=n(L,"LI",{});var Bw=s(xf);pre=n(Bw,"STRONG",{});var u0e=s(pre);HXe=r(u0e,"big_bird"),u0e.forEach(t),UXe=r(Bw," \u2014 "),Lk=n(Bw,"A",{href:!0});var b0e=s(Lk);JXe=r(b0e,"BigBirdConfig"),b0e.forEach(t),YXe=r(Bw," (BigBird model)"),Bw.forEach(t),KXe=i(L),$f=n(L,"LI",{});var Iw=s($f);_re=n(Iw,"STRONG",{});var v0e=s(_re);ZXe=r(v0e,"bigbird_pegasus"),v0e.forEach(t),eze=r(Iw," \u2014 "),yk=n(Iw,"A",{href:!0});var F0e=s(yk);oze=r(F0e,"BigBirdPegasusConfig"),F0e.forEach(t),rze=r(Iw," (BigBird-Pegasus model)"),Iw.forEach(t),tze=i(L),kf=n(L,"LI",{});var Nw=s(kf);ure=n(Nw,"STRONG",{});var T0e=s(ure);aze=r(T0e,"blenderbot"),T0e.forEach(t),nze=r(Nw," \u2014 "),xk=n(Nw,"A",{href:!0});var M0e=s(xk);sze=r(M0e,"BlenderbotConfig"),M0e.forEach(t),lze=r(Nw," (Blenderbot model)"),Nw.forEach(t),ize=i(L),Sf=n(L,"LI",{});var qw=s(Sf);bre=n(qw,"STRONG",{});var E0e=s(bre);dze=r(E0e,"blenderbot-small"),E0e.forEach(t),cze=r(qw," \u2014 "),$k=n(qw,"A",{href:!0});var C0e=s($k);fze=r(C0e,"BlenderbotSmallConfig"),C0e.forEach(t),mze=r(qw," (BlenderbotSmall model)"),qw.forEach(t),gze=i(L),Rf=n(L,"LI",{});var jw=s(Rf);vre=n(jw,"STRONG",{});var w0e=s(vre);hze=r(w0e,"bloom"),w0e.forEach(t),pze=r(jw," \u2014 "),kk=n(jw,"A",{href:!0});var A0e=s(kk);_ze=r(A0e,"BloomConfig"),A0e.forEach(t),uze=r(jw," (BLOOM model)"),jw.forEach(t),bze=i(L),Pf=n(L,"LI",{});var Dw=s(Pf);Fre=n(Dw,"STRONG",{});var L0e=s(Fre);vze=r(L0e,"camembert"),L0e.forEach(t),Fze=r(Dw," \u2014 "),Sk=n(Dw,"A",{href:!0});var y0e=s(Sk);Tze=r(y0e,"CamembertConfig"),y0e.forEach(t),Mze=r(Dw," (CamemBERT model)"),Dw.forEach(t),Eze=i(L),Bf=n(L,"LI",{});var Gw=s(Bf);Tre=n(Gw,"STRONG",{});var x0e=s(Tre);Cze=r(x0e,"canine"),x0e.forEach(t),wze=r(Gw," \u2014 "),Rk=n(Gw,"A",{href:!0});var $0e=s(Rk);Aze=r($0e,"CanineConfig"),$0e.forEach(t),Lze=r(Gw," (CANINE model)"),Gw.forEach(t),yze=i(L),If=n(L,"LI",{});var Ow=s(If);Mre=n(Ow,"STRONG",{});var k0e=s(Mre);xze=r(k0e,"clip"),k0e.forEach(t),$ze=r(Ow," \u2014 "),Pk=n(Ow,"A",{href:!0});var S0e=s(Pk);kze=r(S0e,"CLIPConfig"),S0e.forEach(t),Sze=r(Ow," (CLIP model)"),Ow.forEach(t),Rze=i(L),Nf=n(L,"LI",{});var Vw=s(Nf);Ere=n(Vw,"STRONG",{});var R0e=s(Ere);Pze=r(R0e,"convbert"),R0e.forEach(t),Bze=r(Vw," \u2014 "),Bk=n(Vw,"A",{href:!0});var P0e=s(Bk);Ize=r(P0e,"ConvBertConfig"),P0e.forEach(t),Nze=r(Vw," (ConvBERT model)"),Vw.forEach(t),qze=i(L),qf=n(L,"LI",{});var Xw=s(qf);Cre=n(Xw,"STRONG",{});var B0e=s(Cre);jze=r(B0e,"convnext"),B0e.forEach(t),Dze=r(Xw," \u2014 "),Ik=n(Xw,"A",{href:!0});var I0e=s(Ik);Gze=r(I0e,"ConvNextConfig"),I0e.forEach(t),Oze=r(Xw," (ConvNeXT model)"),Xw.forEach(t),Vze=i(L),jf=n(L,"LI",{});var zw=s(jf);wre=n(zw,"STRONG",{});var N0e=s(wre);Xze=r(N0e,"ctrl"),N0e.forEach(t),zze=r(zw," \u2014 "),Nk=n(zw,"A",{href:!0});var q0e=s(Nk);Wze=r(q0e,"CTRLConfig"),q0e.forEach(t),Qze=r(zw," (CTRL model)"),zw.forEach(t),Hze=i(L),Df=n(L,"LI",{});var Ww=s(Df);Are=n(Ww,"STRONG",{});var j0e=s(Are);Uze=r(j0e,"cvt"),j0e.forEach(t),Jze=r(Ww," \u2014 "),qk=n(Ww,"A",{href:!0});var D0e=s(qk);Yze=r(D0e,"CvtConfig"),D0e.forEach(t),Kze=r(Ww," (CvT model)"),Ww.forEach(t),Zze=i(L),Gf=n(L,"LI",{});var Qw=s(Gf);Lre=n(Qw,"STRONG",{});var G0e=s(Lre);eWe=r(G0e,"data2vec-audio"),G0e.forEach(t),oWe=r(Qw," \u2014 "),jk=n(Qw,"A",{href:!0});var O0e=s(jk);rWe=r(O0e,"Data2VecAudioConfig"),O0e.forEach(t),tWe=r(Qw," (Data2VecAudio model)"),Qw.forEach(t),aWe=i(L),Of=n(L,"LI",{});var Hw=s(Of);yre=n(Hw,"STRONG",{});var V0e=s(yre);nWe=r(V0e,"data2vec-text"),V0e.forEach(t),sWe=r(Hw," \u2014 "),Dk=n(Hw,"A",{href:!0});var X0e=s(Dk);lWe=r(X0e,"Data2VecTextConfig"),X0e.forEach(t),iWe=r(Hw," (Data2VecText model)"),Hw.forEach(t),dWe=i(L),Vf=n(L,"LI",{});var Uw=s(Vf);xre=n(Uw,"STRONG",{});var z0e=s(xre);cWe=r(z0e,"data2vec-vision"),z0e.forEach(t),fWe=r(Uw," \u2014 "),Gk=n(Uw,"A",{href:!0});var W0e=s(Gk);mWe=r(W0e,"Data2VecVisionConfig"),W0e.forEach(t),gWe=r(Uw," (Data2VecVision model)"),Uw.forEach(t),hWe=i(L),Xf=n(L,"LI",{});var Jw=s(Xf);$re=n(Jw,"STRONG",{});var Q0e=s($re);pWe=r(Q0e,"deberta"),Q0e.forEach(t),_We=r(Jw," \u2014 "),Ok=n(Jw,"A",{href:!0});var H0e=s(Ok);uWe=r(H0e,"DebertaConfig"),H0e.forEach(t),bWe=r(Jw," (DeBERTa model)"),Jw.forEach(t),vWe=i(L),zf=n(L,"LI",{});var Yw=s(zf);kre=n(Yw,"STRONG",{});var U0e=s(kre);FWe=r(U0e,"deberta-v2"),U0e.forEach(t),TWe=r(Yw," \u2014 "),Vk=n(Yw,"A",{href:!0});var J0e=s(Vk);MWe=r(J0e,"DebertaV2Config"),J0e.forEach(t),EWe=r(Yw," (DeBERTa-v2 model)"),Yw.forEach(t),CWe=i(L),Wf=n(L,"LI",{});var Kw=s(Wf);Sre=n(Kw,"STRONG",{});var Y0e=s(Sre);wWe=r(Y0e,"decision_transformer"),Y0e.forEach(t),AWe=r(Kw," \u2014 "),Xk=n(Kw,"A",{href:!0});var wQr=s(Xk);LWe=r(wQr,"DecisionTransformerConfig"),wQr.forEach(t),yWe=r(Kw," (Decision Transformer model)"),Kw.forEach(t),xWe=i(L),Qf=n(L,"LI",{});var K0e=s(Qf);Rre=n(K0e,"STRONG",{});var AQr=s(Rre);$We=r(AQr,"deit"),AQr.forEach(t),kWe=r(K0e," \u2014 "),zk=n(K0e,"A",{href:!0});var LQr=s(zk);SWe=r(LQr,"DeiTConfig"),LQr.forEach(t),RWe=r(K0e," (DeiT model)"),K0e.forEach(t),PWe=i(L),Hf=n(L,"LI",{});var Z0e=s(Hf);Pre=n(Z0e,"STRONG",{});var yQr=s(Pre);BWe=r(yQr,"detr"),yQr.forEach(t),IWe=r(Z0e," \u2014 "),Wk=n(Z0e,"A",{href:!0});var xQr=s(Wk);NWe=r(xQr,"DetrConfig"),xQr.forEach(t),qWe=r(Z0e," (DETR model)"),Z0e.forEach(t),jWe=i(L),Uf=n(L,"LI",{});var ewe=s(Uf);Bre=n(ewe,"STRONG",{});var $Qr=s(Bre);DWe=r($Qr,"distilbert"),$Qr.forEach(t),GWe=r(ewe," \u2014 "),Qk=n(ewe,"A",{href:!0});var kQr=s(Qk);OWe=r(kQr,"DistilBertConfig"),kQr.forEach(t),VWe=r(ewe," (DistilBERT model)"),ewe.forEach(t),XWe=i(L),Jf=n(L,"LI",{});var owe=s(Jf);Ire=n(owe,"STRONG",{});var SQr=s(Ire);zWe=r(SQr,"dpr"),SQr.forEach(t),WWe=r(owe," \u2014 "),Hk=n(owe,"A",{href:!0});var RQr=s(Hk);QWe=r(RQr,"DPRConfig"),RQr.forEach(t),HWe=r(owe," (DPR model)"),owe.forEach(t),UWe=i(L),Yf=n(L,"LI",{});var rwe=s(Yf);Nre=n(rwe,"STRONG",{});var PQr=s(Nre);JWe=r(PQr,"dpt"),PQr.forEach(t),YWe=r(rwe," \u2014 "),Uk=n(rwe,"A",{href:!0});var BQr=s(Uk);KWe=r(BQr,"DPTConfig"),BQr.forEach(t),ZWe=r(rwe," (DPT model)"),rwe.forEach(t),eQe=i(L),Kf=n(L,"LI",{});var twe=s(Kf);qre=n(twe,"STRONG",{});var IQr=s(qre);oQe=r(IQr,"electra"),IQr.forEach(t),rQe=r(twe," \u2014 "),Jk=n(twe,"A",{href:!0});var NQr=s(Jk);tQe=r(NQr,"ElectraConfig"),NQr.forEach(t),aQe=r(twe," (ELECTRA model)"),twe.forEach(t),nQe=i(L),Zf=n(L,"LI",{});var awe=s(Zf);jre=n(awe,"STRONG",{});var qQr=s(jre);sQe=r(qQr,"encoder-decoder"),qQr.forEach(t),lQe=r(awe," \u2014 "),Yk=n(awe,"A",{href:!0});var jQr=s(Yk);iQe=r(jQr,"EncoderDecoderConfig"),jQr.forEach(t),dQe=r(awe," (Encoder decoder model)"),awe.forEach(t),cQe=i(L),em=n(L,"LI",{});var nwe=s(em);Dre=n(nwe,"STRONG",{});var DQr=s(Dre);fQe=r(DQr,"flaubert"),DQr.forEach(t),mQe=r(nwe," \u2014 "),Kk=n(nwe,"A",{href:!0});var GQr=s(Kk);gQe=r(GQr,"FlaubertConfig"),GQr.forEach(t),hQe=r(nwe," (FlauBERT model)"),nwe.forEach(t),pQe=i(L),om=n(L,"LI",{});var swe=s(om);Gre=n(swe,"STRONG",{});var OQr=s(Gre);_Qe=r(OQr,"flava"),OQr.forEach(t),uQe=r(swe," \u2014 "),Zk=n(swe,"A",{href:!0});var VQr=s(Zk);bQe=r(VQr,"FlavaConfig"),VQr.forEach(t),vQe=r(swe," (FLAVA model)"),swe.forEach(t),FQe=i(L),rm=n(L,"LI",{});var lwe=s(rm);Ore=n(lwe,"STRONG",{});var XQr=s(Ore);TQe=r(XQr,"fnet"),XQr.forEach(t),MQe=r(lwe," \u2014 "),eS=n(lwe,"A",{href:!0});var zQr=s(eS);EQe=r(zQr,"FNetConfig"),zQr.forEach(t),CQe=r(lwe," (FNet model)"),lwe.forEach(t),wQe=i(L),tm=n(L,"LI",{});var iwe=s(tm);Vre=n(iwe,"STRONG",{});var WQr=s(Vre);AQe=r(WQr,"fsmt"),WQr.forEach(t),LQe=r(iwe," \u2014 "),oS=n(iwe,"A",{href:!0});var QQr=s(oS);yQe=r(QQr,"FSMTConfig"),QQr.forEach(t),xQe=r(iwe," (FairSeq Machine-Translation model)"),iwe.forEach(t),$Qe=i(L),am=n(L,"LI",{});var dwe=s(am);Xre=n(dwe,"STRONG",{});var HQr=s(Xre);kQe=r(HQr,"funnel"),HQr.forEach(t),SQe=r(dwe," \u2014 "),rS=n(dwe,"A",{href:!0});var UQr=s(rS);RQe=r(UQr,"FunnelConfig"),UQr.forEach(t),PQe=r(dwe," (Funnel Transformer model)"),dwe.forEach(t),BQe=i(L),nm=n(L,"LI",{});var cwe=s(nm);zre=n(cwe,"STRONG",{});var JQr=s(zre);IQe=r(JQr,"glpn"),JQr.forEach(t),NQe=r(cwe," \u2014 "),tS=n(cwe,"A",{href:!0});var YQr=s(tS);qQe=r(YQr,"GLPNConfig"),YQr.forEach(t),jQe=r(cwe," (GLPN model)"),cwe.forEach(t),DQe=i(L),sm=n(L,"LI",{});var fwe=s(sm);Wre=n(fwe,"STRONG",{});var KQr=s(Wre);GQe=r(KQr,"gpt2"),KQr.forEach(t),OQe=r(fwe," \u2014 "),aS=n(fwe,"A",{href:!0});var ZQr=s(aS);VQe=r(ZQr,"GPT2Config"),ZQr.forEach(t),XQe=r(fwe," (OpenAI GPT-2 model)"),fwe.forEach(t),zQe=i(L),lm=n(L,"LI",{});var mwe=s(lm);Qre=n(mwe,"STRONG",{});var eHr=s(Qre);WQe=r(eHr,"gpt_neo"),eHr.forEach(t),QQe=r(mwe," \u2014 "),nS=n(mwe,"A",{href:!0});var oHr=s(nS);HQe=r(oHr,"GPTNeoConfig"),oHr.forEach(t),UQe=r(mwe," (GPT Neo model)"),mwe.forEach(t),JQe=i(L),im=n(L,"LI",{});var gwe=s(im);Hre=n(gwe,"STRONG",{});var rHr=s(Hre);YQe=r(rHr,"gpt_neox"),rHr.forEach(t),KQe=r(gwe," \u2014 "),sS=n(gwe,"A",{href:!0});var tHr=s(sS);ZQe=r(tHr,"GPTNeoXConfig"),tHr.forEach(t),eHe=r(gwe," (GPT NeoX model)"),gwe.forEach(t),oHe=i(L),dm=n(L,"LI",{});var hwe=s(dm);Ure=n(hwe,"STRONG",{});var aHr=s(Ure);rHe=r(aHr,"gptj"),aHr.forEach(t),tHe=r(hwe," \u2014 "),lS=n(hwe,"A",{href:!0});var nHr=s(lS);aHe=r(nHr,"GPTJConfig"),nHr.forEach(t),nHe=r(hwe," (GPT-J model)"),hwe.forEach(t),sHe=i(L),cm=n(L,"LI",{});var pwe=s(cm);Jre=n(pwe,"STRONG",{});var sHr=s(Jre);lHe=r(sHr,"hubert"),sHr.forEach(t),iHe=r(pwe," \u2014 "),iS=n(pwe,"A",{href:!0});var lHr=s(iS);dHe=r(lHr,"HubertConfig"),lHr.forEach(t),cHe=r(pwe," (Hubert model)"),pwe.forEach(t),fHe=i(L),fm=n(L,"LI",{});var _we=s(fm);Yre=n(_we,"STRONG",{});var iHr=s(Yre);mHe=r(iHr,"ibert"),iHr.forEach(t),gHe=r(_we," \u2014 "),dS=n(_we,"A",{href:!0});var dHr=s(dS);hHe=r(dHr,"IBertConfig"),dHr.forEach(t),pHe=r(_we," (I-BERT model)"),_we.forEach(t),_He=i(L),mm=n(L,"LI",{});var uwe=s(mm);Kre=n(uwe,"STRONG",{});var cHr=s(Kre);uHe=r(cHr,"imagegpt"),cHr.forEach(t),bHe=r(uwe," \u2014 "),cS=n(uwe,"A",{href:!0});var fHr=s(cS);vHe=r(fHr,"ImageGPTConfig"),fHr.forEach(t),FHe=r(uwe," (ImageGPT model)"),uwe.forEach(t),THe=i(L),gm=n(L,"LI",{});var bwe=s(gm);Zre=n(bwe,"STRONG",{});var mHr=s(Zre);MHe=r(mHr,"layoutlm"),mHr.forEach(t),EHe=r(bwe," \u2014 "),fS=n(bwe,"A",{href:!0});var gHr=s(fS);CHe=r(gHr,"LayoutLMConfig"),gHr.forEach(t),wHe=r(bwe," (LayoutLM model)"),bwe.forEach(t),AHe=i(L),hm=n(L,"LI",{});var vwe=s(hm);ete=n(vwe,"STRONG",{});var hHr=s(ete);LHe=r(hHr,"layoutlmv2"),hHr.forEach(t),yHe=r(vwe," \u2014 "),mS=n(vwe,"A",{href:!0});var pHr=s(mS);xHe=r(pHr,"LayoutLMv2Config"),pHr.forEach(t),$He=r(vwe," (LayoutLMv2 model)"),vwe.forEach(t),kHe=i(L),pm=n(L,"LI",{});var Fwe=s(pm);ote=n(Fwe,"STRONG",{});var _Hr=s(ote);SHe=r(_Hr,"layoutlmv3"),_Hr.forEach(t),RHe=r(Fwe," \u2014 "),gS=n(Fwe,"A",{href:!0});var uHr=s(gS);PHe=r(uHr,"LayoutLMv3Config"),uHr.forEach(t),BHe=r(Fwe," (LayoutLMv3 model)"),Fwe.forEach(t),IHe=i(L),_m=n(L,"LI",{});var Twe=s(_m);rte=n(Twe,"STRONG",{});var bHr=s(rte);NHe=r(bHr,"led"),bHr.forEach(t),qHe=r(Twe," \u2014 "),hS=n(Twe,"A",{href:!0});var vHr=s(hS);jHe=r(vHr,"LEDConfig"),vHr.forEach(t),DHe=r(Twe," (LED model)"),Twe.forEach(t),GHe=i(L),um=n(L,"LI",{});var Mwe=s(um);tte=n(Mwe,"STRONG",{});var FHr=s(tte);OHe=r(FHr,"levit"),FHr.forEach(t),VHe=r(Mwe," \u2014 "),pS=n(Mwe,"A",{href:!0});var THr=s(pS);XHe=r(THr,"LevitConfig"),THr.forEach(t),zHe=r(Mwe," (LeViT model)"),Mwe.forEach(t),WHe=i(L),bm=n(L,"LI",{});var Ewe=s(bm);ate=n(Ewe,"STRONG",{});var MHr=s(ate);QHe=r(MHr,"longformer"),MHr.forEach(t),HHe=r(Ewe," \u2014 "),_S=n(Ewe,"A",{href:!0});var EHr=s(_S);UHe=r(EHr,"LongformerConfig"),EHr.forEach(t),JHe=r(Ewe," (Longformer model)"),Ewe.forEach(t),YHe=i(L),vm=n(L,"LI",{});var Cwe=s(vm);nte=n(Cwe,"STRONG",{});var CHr=s(nte);KHe=r(CHr,"luke"),CHr.forEach(t),ZHe=r(Cwe," \u2014 "),uS=n(Cwe,"A",{href:!0});var wHr=s(uS);eUe=r(wHr,"LukeConfig"),wHr.forEach(t),oUe=r(Cwe," (LUKE model)"),Cwe.forEach(t),rUe=i(L),Fm=n(L,"LI",{});var wwe=s(Fm);ste=n(wwe,"STRONG",{});var AHr=s(ste);tUe=r(AHr,"lxmert"),AHr.forEach(t),aUe=r(wwe," \u2014 "),bS=n(wwe,"A",{href:!0});var LHr=s(bS);nUe=r(LHr,"LxmertConfig"),LHr.forEach(t),sUe=r(wwe," (LXMERT model)"),wwe.forEach(t),lUe=i(L),Tm=n(L,"LI",{});var Awe=s(Tm);lte=n(Awe,"STRONG",{});var yHr=s(lte);iUe=r(yHr,"m2m_100"),yHr.forEach(t),dUe=r(Awe," \u2014 "),vS=n(Awe,"A",{href:!0});var xHr=s(vS);cUe=r(xHr,"M2M100Config"),xHr.forEach(t),fUe=r(Awe," (M2M100 model)"),Awe.forEach(t),mUe=i(L),Mm=n(L,"LI",{});var Lwe=s(Mm);ite=n(Lwe,"STRONG",{});var $Hr=s(ite);gUe=r($Hr,"marian"),$Hr.forEach(t),hUe=r(Lwe," \u2014 "),FS=n(Lwe,"A",{href:!0});var kHr=s(FS);pUe=r(kHr,"MarianConfig"),kHr.forEach(t),_Ue=r(Lwe," (Marian model)"),Lwe.forEach(t),uUe=i(L),Em=n(L,"LI",{});var ywe=s(Em);dte=n(ywe,"STRONG",{});var SHr=s(dte);bUe=r(SHr,"maskformer"),SHr.forEach(t),vUe=r(ywe," \u2014 "),TS=n(ywe,"A",{href:!0});var RHr=s(TS);FUe=r(RHr,"MaskFormerConfig"),RHr.forEach(t),TUe=r(ywe," (MaskFormer model)"),ywe.forEach(t),MUe=i(L),Cm=n(L,"LI",{});var xwe=s(Cm);cte=n(xwe,"STRONG",{});var PHr=s(cte);EUe=r(PHr,"mbart"),PHr.forEach(t),CUe=r(xwe," \u2014 "),MS=n(xwe,"A",{href:!0});var BHr=s(MS);wUe=r(BHr,"MBartConfig"),BHr.forEach(t),AUe=r(xwe," (mBART model)"),xwe.forEach(t),LUe=i(L),wm=n(L,"LI",{});var $we=s(wm);fte=n($we,"STRONG",{});var IHr=s(fte);yUe=r(IHr,"mctct"),IHr.forEach(t),xUe=r($we," \u2014 "),ES=n($we,"A",{href:!0});var NHr=s(ES);$Ue=r(NHr,"MCTCTConfig"),NHr.forEach(t),kUe=r($we," (M-CTC-T model)"),$we.forEach(t),SUe=i(L),Am=n(L,"LI",{});var kwe=s(Am);mte=n(kwe,"STRONG",{});var qHr=s(mte);RUe=r(qHr,"megatron-bert"),qHr.forEach(t),PUe=r(kwe," \u2014 "),CS=n(kwe,"A",{href:!0});var jHr=s(CS);BUe=r(jHr,"MegatronBertConfig"),jHr.forEach(t),IUe=r(kwe," (Megatron-BERT model)"),kwe.forEach(t),NUe=i(L),Lm=n(L,"LI",{});var Swe=s(Lm);gte=n(Swe,"STRONG",{});var DHr=s(gte);qUe=r(DHr,"mobilebert"),DHr.forEach(t),jUe=r(Swe," \u2014 "),wS=n(Swe,"A",{href:!0});var GHr=s(wS);DUe=r(GHr,"MobileBertConfig"),GHr.forEach(t),GUe=r(Swe," (MobileBERT model)"),Swe.forEach(t),OUe=i(L),ym=n(L,"LI",{});var Rwe=s(ym);hte=n(Rwe,"STRONG",{});var OHr=s(hte);VUe=r(OHr,"mobilevit"),OHr.forEach(t),XUe=r(Rwe," \u2014 "),AS=n(Rwe,"A",{href:!0});var VHr=s(AS);zUe=r(VHr,"MobileViTConfig"),VHr.forEach(t),WUe=r(Rwe," (MobileViT model)"),Rwe.forEach(t),QUe=i(L),xm=n(L,"LI",{});var Pwe=s(xm);pte=n(Pwe,"STRONG",{});var XHr=s(pte);HUe=r(XHr,"mpnet"),XHr.forEach(t),UUe=r(Pwe," \u2014 "),LS=n(Pwe,"A",{href:!0});var zHr=s(LS);JUe=r(zHr,"MPNetConfig"),zHr.forEach(t),YUe=r(Pwe," (MPNet model)"),Pwe.forEach(t),KUe=i(L),$m=n(L,"LI",{});var Bwe=s($m);_te=n(Bwe,"STRONG",{});var WHr=s(_te);ZUe=r(WHr,"mt5"),WHr.forEach(t),eJe=r(Bwe," \u2014 "),yS=n(Bwe,"A",{href:!0});var QHr=s(yS);oJe=r(QHr,"MT5Config"),QHr.forEach(t),rJe=r(Bwe," (MT5 model)"),Bwe.forEach(t),tJe=i(L),km=n(L,"LI",{});var Iwe=s(km);ute=n(Iwe,"STRONG",{});var HHr=s(ute);aJe=r(HHr,"nystromformer"),HHr.forEach(t),nJe=r(Iwe," \u2014 "),xS=n(Iwe,"A",{href:!0});var UHr=s(xS);sJe=r(UHr,"NystromformerConfig"),UHr.forEach(t),lJe=r(Iwe," (Nystr\xF6mformer model)"),Iwe.forEach(t),iJe=i(L),Sm=n(L,"LI",{});var Nwe=s(Sm);bte=n(Nwe,"STRONG",{});var JHr=s(bte);dJe=r(JHr,"openai-gpt"),JHr.forEach(t),cJe=r(Nwe," \u2014 "),$S=n(Nwe,"A",{href:!0});var YHr=s($S);fJe=r(YHr,"OpenAIGPTConfig"),YHr.forEach(t),mJe=r(Nwe," (OpenAI GPT model)"),Nwe.forEach(t),gJe=i(L),Rm=n(L,"LI",{});var qwe=s(Rm);vte=n(qwe,"STRONG",{});var KHr=s(vte);hJe=r(KHr,"opt"),KHr.forEach(t),pJe=r(qwe," \u2014 "),kS=n(qwe,"A",{href:!0});var ZHr=s(kS);_Je=r(ZHr,"OPTConfig"),ZHr.forEach(t),uJe=r(qwe," (OPT model)"),qwe.forEach(t),bJe=i(L),Pm=n(L,"LI",{});var jwe=s(Pm);Fte=n(jwe,"STRONG",{});var eUr=s(Fte);vJe=r(eUr,"pegasus"),eUr.forEach(t),FJe=r(jwe," \u2014 "),SS=n(jwe,"A",{href:!0});var oUr=s(SS);TJe=r(oUr,"PegasusConfig"),oUr.forEach(t),MJe=r(jwe," (Pegasus model)"),jwe.forEach(t),EJe=i(L),Bm=n(L,"LI",{});var Dwe=s(Bm);Tte=n(Dwe,"STRONG",{});var rUr=s(Tte);CJe=r(rUr,"perceiver"),rUr.forEach(t),wJe=r(Dwe," \u2014 "),RS=n(Dwe,"A",{href:!0});var tUr=s(RS);AJe=r(tUr,"PerceiverConfig"),tUr.forEach(t),LJe=r(Dwe," (Perceiver model)"),Dwe.forEach(t),yJe=i(L),Im=n(L,"LI",{});var Gwe=s(Im);Mte=n(Gwe,"STRONG",{});var aUr=s(Mte);xJe=r(aUr,"plbart"),aUr.forEach(t),$Je=r(Gwe," \u2014 "),PS=n(Gwe,"A",{href:!0});var nUr=s(PS);kJe=r(nUr,"PLBartConfig"),nUr.forEach(t),SJe=r(Gwe," (PLBart model)"),Gwe.forEach(t),RJe=i(L),Nm=n(L,"LI",{});var Owe=s(Nm);Ete=n(Owe,"STRONG",{});var sUr=s(Ete);PJe=r(sUr,"poolformer"),sUr.forEach(t),BJe=r(Owe," \u2014 "),BS=n(Owe,"A",{href:!0});var lUr=s(BS);IJe=r(lUr,"PoolFormerConfig"),lUr.forEach(t),NJe=r(Owe," (PoolFormer model)"),Owe.forEach(t),qJe=i(L),qm=n(L,"LI",{});var Vwe=s(qm);Cte=n(Vwe,"STRONG",{});var iUr=s(Cte);jJe=r(iUr,"prophetnet"),iUr.forEach(t),DJe=r(Vwe," \u2014 "),IS=n(Vwe,"A",{href:!0});var dUr=s(IS);GJe=r(dUr,"ProphetNetConfig"),dUr.forEach(t),OJe=r(Vwe," (ProphetNet model)"),Vwe.forEach(t),VJe=i(L),jm=n(L,"LI",{});var Xwe=s(jm);wte=n(Xwe,"STRONG",{});var cUr=s(wte);XJe=r(cUr,"qdqbert"),cUr.forEach(t),zJe=r(Xwe," \u2014 "),NS=n(Xwe,"A",{href:!0});var fUr=s(NS);WJe=r(fUr,"QDQBertConfig"),fUr.forEach(t),QJe=r(Xwe," (QDQBert model)"),Xwe.forEach(t),HJe=i(L),Dm=n(L,"LI",{});var zwe=s(Dm);Ate=n(zwe,"STRONG",{});var mUr=s(Ate);UJe=r(mUr,"rag"),mUr.forEach(t),JJe=r(zwe," \u2014 "),qS=n(zwe,"A",{href:!0});var gUr=s(qS);YJe=r(gUr,"RagConfig"),gUr.forEach(t),KJe=r(zwe," (RAG model)"),zwe.forEach(t),ZJe=i(L),Gm=n(L,"LI",{});var Wwe=s(Gm);Lte=n(Wwe,"STRONG",{});var hUr=s(Lte);eYe=r(hUr,"realm"),hUr.forEach(t),oYe=r(Wwe," \u2014 "),jS=n(Wwe,"A",{href:!0});var pUr=s(jS);rYe=r(pUr,"RealmConfig"),pUr.forEach(t),tYe=r(Wwe," (REALM model)"),Wwe.forEach(t),aYe=i(L),Om=n(L,"LI",{});var Qwe=s(Om);yte=n(Qwe,"STRONG",{});var _Ur=s(yte);nYe=r(_Ur,"reformer"),_Ur.forEach(t),sYe=r(Qwe," \u2014 "),DS=n(Qwe,"A",{href:!0});var uUr=s(DS);lYe=r(uUr,"ReformerConfig"),uUr.forEach(t),iYe=r(Qwe," (Reformer model)"),Qwe.forEach(t),dYe=i(L),Vm=n(L,"LI",{});var Hwe=s(Vm);xte=n(Hwe,"STRONG",{});var bUr=s(xte);cYe=r(bUr,"regnet"),bUr.forEach(t),fYe=r(Hwe," \u2014 "),GS=n(Hwe,"A",{href:!0});var vUr=s(GS);mYe=r(vUr,"RegNetConfig"),vUr.forEach(t),gYe=r(Hwe," (RegNet model)"),Hwe.forEach(t),hYe=i(L),Xm=n(L,"LI",{});var Uwe=s(Xm);$te=n(Uwe,"STRONG",{});var FUr=s($te);pYe=r(FUr,"rembert"),FUr.forEach(t),_Ye=r(Uwe," \u2014 "),OS=n(Uwe,"A",{href:!0});var TUr=s(OS);uYe=r(TUr,"RemBertConfig"),TUr.forEach(t),bYe=r(Uwe," (RemBERT model)"),Uwe.forEach(t),vYe=i(L),zm=n(L,"LI",{});var Jwe=s(zm);kte=n(Jwe,"STRONG",{});var MUr=s(kte);FYe=r(MUr,"resnet"),MUr.forEach(t),TYe=r(Jwe," \u2014 "),VS=n(Jwe,"A",{href:!0});var EUr=s(VS);MYe=r(EUr,"ResNetConfig"),EUr.forEach(t),EYe=r(Jwe," (ResNet model)"),Jwe.forEach(t),CYe=i(L),Wm=n(L,"LI",{});var Ywe=s(Wm);Ste=n(Ywe,"STRONG",{});var CUr=s(Ste);wYe=r(CUr,"retribert"),CUr.forEach(t),AYe=r(Ywe," \u2014 "),XS=n(Ywe,"A",{href:!0});var wUr=s(XS);LYe=r(wUr,"RetriBertConfig"),wUr.forEach(t),yYe=r(Ywe," (RetriBERT model)"),Ywe.forEach(t),xYe=i(L),Qm=n(L,"LI",{});var Kwe=s(Qm);Rte=n(Kwe,"STRONG",{});var AUr=s(Rte);$Ye=r(AUr,"roberta"),AUr.forEach(t),kYe=r(Kwe," \u2014 "),zS=n(Kwe,"A",{href:!0});var LUr=s(zS);SYe=r(LUr,"RobertaConfig"),LUr.forEach(t),RYe=r(Kwe," (RoBERTa model)"),Kwe.forEach(t),PYe=i(L),Hm=n(L,"LI",{});var Zwe=s(Hm);Pte=n(Zwe,"STRONG",{});var yUr=s(Pte);BYe=r(yUr,"roformer"),yUr.forEach(t),IYe=r(Zwe," \u2014 "),WS=n(Zwe,"A",{href:!0});var xUr=s(WS);NYe=r(xUr,"RoFormerConfig"),xUr.forEach(t),qYe=r(Zwe," (RoFormer model)"),Zwe.forEach(t),jYe=i(L),Um=n(L,"LI",{});var e6e=s(Um);Bte=n(e6e,"STRONG",{});var $Ur=s(Bte);DYe=r($Ur,"segformer"),$Ur.forEach(t),GYe=r(e6e," \u2014 "),QS=n(e6e,"A",{href:!0});var kUr=s(QS);OYe=r(kUr,"SegformerConfig"),kUr.forEach(t),VYe=r(e6e," (SegFormer model)"),e6e.forEach(t),XYe=i(L),Jm=n(L,"LI",{});var o6e=s(Jm);Ite=n(o6e,"STRONG",{});var SUr=s(Ite);zYe=r(SUr,"sew"),SUr.forEach(t),WYe=r(o6e," \u2014 "),HS=n(o6e,"A",{href:!0});var RUr=s(HS);QYe=r(RUr,"SEWConfig"),RUr.forEach(t),HYe=r(o6e," (SEW model)"),o6e.forEach(t),UYe=i(L),Ym=n(L,"LI",{});var r6e=s(Ym);Nte=n(r6e,"STRONG",{});var PUr=s(Nte);JYe=r(PUr,"sew-d"),PUr.forEach(t),YYe=r(r6e," \u2014 "),US=n(r6e,"A",{href:!0});var BUr=s(US);KYe=r(BUr,"SEWDConfig"),BUr.forEach(t),ZYe=r(r6e," (SEW-D model)"),r6e.forEach(t),eKe=i(L),Km=n(L,"LI",{});var t6e=s(Km);qte=n(t6e,"STRONG",{});var IUr=s(qte);oKe=r(IUr,"speech-encoder-decoder"),IUr.forEach(t),rKe=r(t6e," \u2014 "),JS=n(t6e,"A",{href:!0});var NUr=s(JS);tKe=r(NUr,"SpeechEncoderDecoderConfig"),NUr.forEach(t),aKe=r(t6e," (Speech Encoder decoder model)"),t6e.forEach(t),nKe=i(L),Zm=n(L,"LI",{});var a6e=s(Zm);jte=n(a6e,"STRONG",{});var qUr=s(jte);sKe=r(qUr,"speech_to_text"),qUr.forEach(t),lKe=r(a6e," \u2014 "),YS=n(a6e,"A",{href:!0});var jUr=s(YS);iKe=r(jUr,"Speech2TextConfig"),jUr.forEach(t),dKe=r(a6e," (Speech2Text model)"),a6e.forEach(t),cKe=i(L),eg=n(L,"LI",{});var n6e=s(eg);Dte=n(n6e,"STRONG",{});var DUr=s(Dte);fKe=r(DUr,"speech_to_text_2"),DUr.forEach(t),mKe=r(n6e," \u2014 "),KS=n(n6e,"A",{href:!0});var GUr=s(KS);gKe=r(GUr,"Speech2Text2Config"),GUr.forEach(t),hKe=r(n6e," (Speech2Text2 model)"),n6e.forEach(t),pKe=i(L),og=n(L,"LI",{});var s6e=s(og);Gte=n(s6e,"STRONG",{});var OUr=s(Gte);_Ke=r(OUr,"splinter"),OUr.forEach(t),uKe=r(s6e," \u2014 "),ZS=n(s6e,"A",{href:!0});var VUr=s(ZS);bKe=r(VUr,"SplinterConfig"),VUr.forEach(t),vKe=r(s6e," (Splinter model)"),s6e.forEach(t),FKe=i(L),rg=n(L,"LI",{});var l6e=s(rg);Ote=n(l6e,"STRONG",{});var XUr=s(Ote);TKe=r(XUr,"squeezebert"),XUr.forEach(t),MKe=r(l6e," \u2014 "),eR=n(l6e,"A",{href:!0});var zUr=s(eR);EKe=r(zUr,"SqueezeBertConfig"),zUr.forEach(t),CKe=r(l6e," (SqueezeBERT model)"),l6e.forEach(t),wKe=i(L),tg=n(L,"LI",{});var i6e=s(tg);Vte=n(i6e,"STRONG",{});var WUr=s(Vte);AKe=r(WUr,"swin"),WUr.forEach(t),LKe=r(i6e," \u2014 "),oR=n(i6e,"A",{href:!0});var QUr=s(oR);yKe=r(QUr,"SwinConfig"),QUr.forEach(t),xKe=r(i6e," (Swin Transformer model)"),i6e.forEach(t),$Ke=i(L),ag=n(L,"LI",{});var d6e=s(ag);Xte=n(d6e,"STRONG",{});var HUr=s(Xte);kKe=r(HUr,"t5"),HUr.forEach(t),SKe=r(d6e," \u2014 "),rR=n(d6e,"A",{href:!0});var UUr=s(rR);RKe=r(UUr,"T5Config"),UUr.forEach(t),PKe=r(d6e," (T5 model)"),d6e.forEach(t),BKe=i(L),ng=n(L,"LI",{});var c6e=s(ng);zte=n(c6e,"STRONG",{});var JUr=s(zte);IKe=r(JUr,"tapas"),JUr.forEach(t),NKe=r(c6e," \u2014 "),tR=n(c6e,"A",{href:!0});var YUr=s(tR);qKe=r(YUr,"TapasConfig"),YUr.forEach(t),jKe=r(c6e," (TAPAS model)"),c6e.forEach(t),DKe=i(L),sg=n(L,"LI",{});var f6e=s(sg);Wte=n(f6e,"STRONG",{});var KUr=s(Wte);GKe=r(KUr,"trajectory_transformer"),KUr.forEach(t),OKe=r(f6e," \u2014 "),aR=n(f6e,"A",{href:!0});var ZUr=s(aR);VKe=r(ZUr,"TrajectoryTransformerConfig"),ZUr.forEach(t),XKe=r(f6e," (Trajectory Transformer model)"),f6e.forEach(t),zKe=i(L),lg=n(L,"LI",{});var m6e=s(lg);Qte=n(m6e,"STRONG",{});var eJr=s(Qte);WKe=r(eJr,"transfo-xl"),eJr.forEach(t),QKe=r(m6e," \u2014 "),nR=n(m6e,"A",{href:!0});var oJr=s(nR);HKe=r(oJr,"TransfoXLConfig"),oJr.forEach(t),UKe=r(m6e," (Transformer-XL model)"),m6e.forEach(t),JKe=i(L),ig=n(L,"LI",{});var g6e=s(ig);Hte=n(g6e,"STRONG",{});var rJr=s(Hte);YKe=r(rJr,"trocr"),rJr.forEach(t),KKe=r(g6e," \u2014 "),sR=n(g6e,"A",{href:!0});var tJr=s(sR);ZKe=r(tJr,"TrOCRConfig"),tJr.forEach(t),eZe=r(g6e," (TrOCR model)"),g6e.forEach(t),oZe=i(L),dg=n(L,"LI",{});var h6e=s(dg);Ute=n(h6e,"STRONG",{});var aJr=s(Ute);rZe=r(aJr,"unispeech"),aJr.forEach(t),tZe=r(h6e," \u2014 "),lR=n(h6e,"A",{href:!0});var nJr=s(lR);aZe=r(nJr,"UniSpeechConfig"),nJr.forEach(t),nZe=r(h6e," (UniSpeech model)"),h6e.forEach(t),sZe=i(L),cg=n(L,"LI",{});var p6e=s(cg);Jte=n(p6e,"STRONG",{});var sJr=s(Jte);lZe=r(sJr,"unispeech-sat"),sJr.forEach(t),iZe=r(p6e," \u2014 "),iR=n(p6e,"A",{href:!0});var lJr=s(iR);dZe=r(lJr,"UniSpeechSatConfig"),lJr.forEach(t),cZe=r(p6e," (UniSpeechSat model)"),p6e.forEach(t),fZe=i(L),fg=n(L,"LI",{});var _6e=s(fg);Yte=n(_6e,"STRONG",{});var iJr=s(Yte);mZe=r(iJr,"van"),iJr.forEach(t),gZe=r(_6e," \u2014 "),dR=n(_6e,"A",{href:!0});var dJr=s(dR);hZe=r(dJr,"VanConfig"),dJr.forEach(t),pZe=r(_6e," (VAN model)"),_6e.forEach(t),_Ze=i(L),mg=n(L,"LI",{});var u6e=s(mg);Kte=n(u6e,"STRONG",{});var cJr=s(Kte);uZe=r(cJr,"vilt"),cJr.forEach(t),bZe=r(u6e," \u2014 "),cR=n(u6e,"A",{href:!0});var fJr=s(cR);vZe=r(fJr,"ViltConfig"),fJr.forEach(t),FZe=r(u6e," (ViLT model)"),u6e.forEach(t),TZe=i(L),gg=n(L,"LI",{});var b6e=s(gg);Zte=n(b6e,"STRONG",{});var mJr=s(Zte);MZe=r(mJr,"vision-encoder-decoder"),mJr.forEach(t),EZe=r(b6e," \u2014 "),fR=n(b6e,"A",{href:!0});var gJr=s(fR);CZe=r(gJr,"VisionEncoderDecoderConfig"),gJr.forEach(t),wZe=r(b6e," (Vision Encoder decoder model)"),b6e.forEach(t),AZe=i(L),hg=n(L,"LI",{});var v6e=s(hg);eae=n(v6e,"STRONG",{});var hJr=s(eae);LZe=r(hJr,"vision-text-dual-encoder"),hJr.forEach(t),yZe=r(v6e," \u2014 "),mR=n(v6e,"A",{href:!0});var pJr=s(mR);xZe=r(pJr,"VisionTextDualEncoderConfig"),pJr.forEach(t),$Ze=r(v6e," (VisionTextDualEncoder model)"),v6e.forEach(t),kZe=i(L),pg=n(L,"LI",{});var F6e=s(pg);oae=n(F6e,"STRONG",{});var _Jr=s(oae);SZe=r(_Jr,"visual_bert"),_Jr.forEach(t),RZe=r(F6e," \u2014 "),gR=n(F6e,"A",{href:!0});var uJr=s(gR);PZe=r(uJr,"VisualBertConfig"),uJr.forEach(t),BZe=r(F6e," (VisualBERT model)"),F6e.forEach(t),IZe=i(L),_g=n(L,"LI",{});var T6e=s(_g);rae=n(T6e,"STRONG",{});var bJr=s(rae);NZe=r(bJr,"vit"),bJr.forEach(t),qZe=r(T6e," \u2014 "),hR=n(T6e,"A",{href:!0});var vJr=s(hR);jZe=r(vJr,"ViTConfig"),vJr.forEach(t),DZe=r(T6e," (ViT model)"),T6e.forEach(t),GZe=i(L),ug=n(L,"LI",{});var M6e=s(ug);tae=n(M6e,"STRONG",{});var FJr=s(tae);OZe=r(FJr,"vit_mae"),FJr.forEach(t),VZe=r(M6e," \u2014 "),pR=n(M6e,"A",{href:!0});var TJr=s(pR);XZe=r(TJr,"ViTMAEConfig"),TJr.forEach(t),zZe=r(M6e," (ViTMAE model)"),M6e.forEach(t),WZe=i(L),bg=n(L,"LI",{});var E6e=s(bg);aae=n(E6e,"STRONG",{});var MJr=s(aae);QZe=r(MJr,"wav2vec2"),MJr.forEach(t),HZe=r(E6e," \u2014 "),_R=n(E6e,"A",{href:!0});var EJr=s(_R);UZe=r(EJr,"Wav2Vec2Config"),EJr.forEach(t),JZe=r(E6e," (Wav2Vec2 model)"),E6e.forEach(t),YZe=i(L),vg=n(L,"LI",{});var C6e=s(vg);nae=n(C6e,"STRONG",{});var CJr=s(nae);KZe=r(CJr,"wav2vec2-conformer"),CJr.forEach(t),ZZe=r(C6e," \u2014 "),uR=n(C6e,"A",{href:!0});var wJr=s(uR);eeo=r(wJr,"Wav2Vec2ConformerConfig"),wJr.forEach(t),oeo=r(C6e," (Wav2Vec2-Conformer model)"),C6e.forEach(t),reo=i(L),Fg=n(L,"LI",{});var w6e=s(Fg);sae=n(w6e,"STRONG",{});var AJr=s(sae);teo=r(AJr,"wavlm"),AJr.forEach(t),aeo=r(w6e," \u2014 "),bR=n(w6e,"A",{href:!0});var LJr=s(bR);neo=r(LJr,"WavLMConfig"),LJr.forEach(t),seo=r(w6e," (WavLM model)"),w6e.forEach(t),leo=i(L),Tg=n(L,"LI",{});var A6e=s(Tg);lae=n(A6e,"STRONG",{});var yJr=s(lae);ieo=r(yJr,"xglm"),yJr.forEach(t),deo=r(A6e," \u2014 "),vR=n(A6e,"A",{href:!0});var xJr=s(vR);ceo=r(xJr,"XGLMConfig"),xJr.forEach(t),feo=r(A6e," (XGLM model)"),A6e.forEach(t),meo=i(L),Mg=n(L,"LI",{});var L6e=s(Mg);iae=n(L6e,"STRONG",{});var $Jr=s(iae);geo=r($Jr,"xlm"),$Jr.forEach(t),heo=r(L6e," \u2014 "),FR=n(L6e,"A",{href:!0});var kJr=s(FR);peo=r(kJr,"XLMConfig"),kJr.forEach(t),_eo=r(L6e," (XLM model)"),L6e.forEach(t),ueo=i(L),Eg=n(L,"LI",{});var y6e=s(Eg);dae=n(y6e,"STRONG",{});var SJr=s(dae);beo=r(SJr,"xlm-prophetnet"),SJr.forEach(t),veo=r(y6e," \u2014 "),TR=n(y6e,"A",{href:!0});var RJr=s(TR);Feo=r(RJr,"XLMProphetNetConfig"),RJr.forEach(t),Teo=r(y6e," (XLM-ProphetNet model)"),y6e.forEach(t),Meo=i(L),Cg=n(L,"LI",{});var x6e=s(Cg);cae=n(x6e,"STRONG",{});var PJr=s(cae);Eeo=r(PJr,"xlm-roberta"),PJr.forEach(t),Ceo=r(x6e," \u2014 "),MR=n(x6e,"A",{href:!0});var BJr=s(MR);weo=r(BJr,"XLMRobertaConfig"),BJr.forEach(t),Aeo=r(x6e," (XLM-RoBERTa model)"),x6e.forEach(t),Leo=i(L),wg=n(L,"LI",{});var $6e=s(wg);fae=n($6e,"STRONG",{});var IJr=s(fae);yeo=r(IJr,"xlm-roberta-xl"),IJr.forEach(t),xeo=r($6e," \u2014 "),ER=n($6e,"A",{href:!0});var NJr=s(ER);$eo=r(NJr,"XLMRobertaXLConfig"),NJr.forEach(t),keo=r($6e," (XLM-RoBERTa-XL model)"),$6e.forEach(t),Seo=i(L),Ag=n(L,"LI",{});var k6e=s(Ag);mae=n(k6e,"STRONG",{});var qJr=s(mae);Reo=r(qJr,"xlnet"),qJr.forEach(t),Peo=r(k6e," \u2014 "),CR=n(k6e,"A",{href:!0});var jJr=s(CR);Beo=r(jJr,"XLNetConfig"),jJr.forEach(t),Ieo=r(k6e," (XLNet model)"),k6e.forEach(t),Neo=i(L),Lg=n(L,"LI",{});var S6e=s(Lg);gae=n(S6e,"STRONG",{});var DJr=s(gae);qeo=r(DJr,"yolos"),DJr.forEach(t),jeo=r(S6e," \u2014 "),wR=n(S6e,"A",{href:!0});var GJr=s(wR);Deo=r(GJr,"YolosConfig"),GJr.forEach(t),Geo=r(S6e," (YOLOS model)"),S6e.forEach(t),Oeo=i(L),yg=n(L,"LI",{});var R6e=s(yg);hae=n(R6e,"STRONG",{});var OJr=s(hae);Veo=r(OJr,"yoso"),OJr.forEach(t),Xeo=r(R6e," \u2014 "),AR=n(R6e,"A",{href:!0});var VJr=s(AR);zeo=r(VJr,"YosoConfig"),VJr.forEach(t),Weo=r(R6e," (YOSO model)"),R6e.forEach(t),L.forEach(t),Qeo=i(rt),T(xg.$$.fragment,rt),rt.forEach(t),Heo=i(ot),$g=n(ot,"DIV",{class:!0});var GGe=s($g);T(tL.$$.fragment,GGe),Ueo=i(GGe),pae=n(GGe,"P",{});var XJr=s(pae);Jeo=r(XJr,"Register a new configuration for this class."),XJr.forEach(t),GGe.forEach(t),ot.forEach(t),Xje=i(f),Ei=n(f,"H2",{class:!0});var OGe=s(Ei);kg=n(OGe,"A",{id:!0,class:!0,href:!0});var zJr=s(kg);_ae=n(zJr,"SPAN",{});var WJr=s(_ae);T(aL.$$.fragment,WJr),WJr.forEach(t),zJr.forEach(t),Yeo=i(OGe),uae=n(OGe,"SPAN",{});var QJr=s(uae);Keo=r(QJr,"AutoTokenizer"),QJr.forEach(t),OGe.forEach(t),zje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(nL.$$.fragment,qs),Zeo=i(qs),sL=n(qs,"P",{});var VGe=s(sL);eoo=r(VGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LR=n(VGe,"A",{href:!0});var HJr=s(LR);ooo=r(HJr,"AutoTokenizer.from_pretrained()"),HJr.forEach(t),roo=r(VGe," class method."),VGe.forEach(t),too=i(qs),lL=n(qs,"P",{});var XGe=s(lL);aoo=r(XGe,"This class cannot be instantiated directly using "),bae=n(XGe,"CODE",{});var UJr=s(bae);noo=r(UJr,"__init__()"),UJr.forEach(t),soo=r(XGe," (throws an error)."),XGe.forEach(t),loo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(iL.$$.fragment,js),ioo=i(js),vae=n(js,"P",{});var JJr=s(vae);doo=r(JJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JJr.forEach(t),coo=i(js),La=n(js,"P",{});var Zw=s(La);foo=r(Zw,"The tokenizer class to instantiate is selected based on the "),Fae=n(Zw,"CODE",{});var YJr=s(Fae);moo=r(YJr,"model_type"),YJr.forEach(t),goo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Tae=n(Zw,"CODE",{});var KJr=s(Tae);hoo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),poo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=n(Zw,"CODE",{});var ZJr=s(Mae);_oo=r(ZJr,"pretrained_model_name_or_path"),ZJr.forEach(t),uoo=r(Zw,":"),Zw.forEach(t),boo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var d$=s(Sn);Eae=n(d$,"STRONG",{});var eYr=s(Eae);voo=r(eYr,"albert"),eYr.forEach(t),Foo=r(d$," \u2014 "),yR=n(d$,"A",{href:!0});var oYr=s(yR);Too=r(oYr,"AlbertTokenizer"),oYr.forEach(t),Moo=r(d$," or "),xR=n(d$,"A",{href:!0});var rYr=s(xR);Eoo=r(rYr,"AlbertTokenizerFast"),rYr.forEach(t),Coo=r(d$," (ALBERT model)"),d$.forEach(t),woo=i(S),Rn=n(S,"LI",{});var c$=s(Rn);Cae=n(c$,"STRONG",{});var tYr=s(Cae);Aoo=r(tYr,"bart"),tYr.forEach(t),Loo=r(c$," \u2014 "),$R=n(c$,"A",{href:!0});var aYr=s($R);yoo=r(aYr,"BartTokenizer"),aYr.forEach(t),xoo=r(c$," or "),kR=n(c$,"A",{href:!0});var nYr=s(kR);$oo=r(nYr,"BartTokenizerFast"),nYr.forEach(t),koo=r(c$," (BART model)"),c$.forEach(t),Soo=i(S),Pn=n(S,"LI",{});var f$=s(Pn);wae=n(f$,"STRONG",{});var sYr=s(wae);Roo=r(sYr,"barthez"),sYr.forEach(t),Poo=r(f$," \u2014 "),SR=n(f$,"A",{href:!0});var lYr=s(SR);Boo=r(lYr,"BarthezTokenizer"),lYr.forEach(t),Ioo=r(f$," or "),RR=n(f$,"A",{href:!0});var iYr=s(RR);Noo=r(iYr,"BarthezTokenizerFast"),iYr.forEach(t),qoo=r(f$," (BARThez model)"),f$.forEach(t),joo=i(S),Sg=n(S,"LI",{});var P6e=s(Sg);Aae=n(P6e,"STRONG",{});var dYr=s(Aae);Doo=r(dYr,"bartpho"),dYr.forEach(t),Goo=r(P6e," \u2014 "),PR=n(P6e,"A",{href:!0});var cYr=s(PR);Ooo=r(cYr,"BartphoTokenizer"),cYr.forEach(t),Voo=r(P6e," (BARTpho model)"),P6e.forEach(t),Xoo=i(S),Bn=n(S,"LI",{});var m$=s(Bn);Lae=n(m$,"STRONG",{});var fYr=s(Lae);zoo=r(fYr,"bert"),fYr.forEach(t),Woo=r(m$," \u2014 "),BR=n(m$,"A",{href:!0});var mYr=s(BR);Qoo=r(mYr,"BertTokenizer"),mYr.forEach(t),Hoo=r(m$," or "),IR=n(m$,"A",{href:!0});var gYr=s(IR);Uoo=r(gYr,"BertTokenizerFast"),gYr.forEach(t),Joo=r(m$," (BERT model)"),m$.forEach(t),Yoo=i(S),Rg=n(S,"LI",{});var B6e=s(Rg);yae=n(B6e,"STRONG",{});var hYr=s(yae);Koo=r(hYr,"bert-generation"),hYr.forEach(t),Zoo=r(B6e," \u2014 "),NR=n(B6e,"A",{href:!0});var pYr=s(NR);ero=r(pYr,"BertGenerationTokenizer"),pYr.forEach(t),oro=r(B6e," (Bert Generation model)"),B6e.forEach(t),rro=i(S),Pg=n(S,"LI",{});var I6e=s(Pg);xae=n(I6e,"STRONG",{});var _Yr=s(xae);tro=r(_Yr,"bert-japanese"),_Yr.forEach(t),aro=r(I6e," \u2014 "),qR=n(I6e,"A",{href:!0});var uYr=s(qR);nro=r(uYr,"BertJapaneseTokenizer"),uYr.forEach(t),sro=r(I6e," (BertJapanese model)"),I6e.forEach(t),lro=i(S),Bg=n(S,"LI",{});var N6e=s(Bg);$ae=n(N6e,"STRONG",{});var bYr=s($ae);iro=r(bYr,"bertweet"),bYr.forEach(t),dro=r(N6e," \u2014 "),jR=n(N6e,"A",{href:!0});var vYr=s(jR);cro=r(vYr,"BertweetTokenizer"),vYr.forEach(t),fro=r(N6e," (BERTweet model)"),N6e.forEach(t),mro=i(S),In=n(S,"LI",{});var g$=s(In);kae=n(g$,"STRONG",{});var FYr=s(kae);gro=r(FYr,"big_bird"),FYr.forEach(t),hro=r(g$," \u2014 "),DR=n(g$,"A",{href:!0});var TYr=s(DR);pro=r(TYr,"BigBirdTokenizer"),TYr.forEach(t),_ro=r(g$," or "),GR=n(g$,"A",{href:!0});var MYr=s(GR);uro=r(MYr,"BigBirdTokenizerFast"),MYr.forEach(t),bro=r(g$," (BigBird model)"),g$.forEach(t),vro=i(S),Nn=n(S,"LI",{});var h$=s(Nn);Sae=n(h$,"STRONG",{});var EYr=s(Sae);Fro=r(EYr,"bigbird_pegasus"),EYr.forEach(t),Tro=r(h$," \u2014 "),OR=n(h$,"A",{href:!0});var CYr=s(OR);Mro=r(CYr,"PegasusTokenizer"),CYr.forEach(t),Ero=r(h$," or "),VR=n(h$,"A",{href:!0});var wYr=s(VR);Cro=r(wYr,"PegasusTokenizerFast"),wYr.forEach(t),wro=r(h$," (BigBird-Pegasus model)"),h$.forEach(t),Aro=i(S),qn=n(S,"LI",{});var p$=s(qn);Rae=n(p$,"STRONG",{});var AYr=s(Rae);Lro=r(AYr,"blenderbot"),AYr.forEach(t),yro=r(p$," \u2014 "),XR=n(p$,"A",{href:!0});var LYr=s(XR);xro=r(LYr,"BlenderbotTokenizer"),LYr.forEach(t),$ro=r(p$," or "),zR=n(p$,"A",{href:!0});var yYr=s(zR);kro=r(yYr,"BlenderbotTokenizerFast"),yYr.forEach(t),Sro=r(p$," (Blenderbot model)"),p$.forEach(t),Rro=i(S),Ig=n(S,"LI",{});var q6e=s(Ig);Pae=n(q6e,"STRONG",{});var xYr=s(Pae);Pro=r(xYr,"blenderbot-small"),xYr.forEach(t),Bro=r(q6e," \u2014 "),WR=n(q6e,"A",{href:!0});var $Yr=s(WR);Iro=r($Yr,"BlenderbotSmallTokenizer"),$Yr.forEach(t),Nro=r(q6e," (BlenderbotSmall model)"),q6e.forEach(t),qro=i(S),Ng=n(S,"LI",{});var j6e=s(Ng);Bae=n(j6e,"STRONG",{});var kYr=s(Bae);jro=r(kYr,"bloom"),kYr.forEach(t),Dro=r(j6e," \u2014 "),QR=n(j6e,"A",{href:!0});var SYr=s(QR);Gro=r(SYr,"BloomTokenizerFast"),SYr.forEach(t),Oro=r(j6e," (BLOOM model)"),j6e.forEach(t),Vro=i(S),qg=n(S,"LI",{});var D6e=s(qg);Iae=n(D6e,"STRONG",{});var RYr=s(Iae);Xro=r(RYr,"byt5"),RYr.forEach(t),zro=r(D6e," \u2014 "),HR=n(D6e,"A",{href:!0});var PYr=s(HR);Wro=r(PYr,"ByT5Tokenizer"),PYr.forEach(t),Qro=r(D6e," (ByT5 model)"),D6e.forEach(t),Hro=i(S),jn=n(S,"LI",{});var _$=s(jn);Nae=n(_$,"STRONG",{});var BYr=s(Nae);Uro=r(BYr,"camembert"),BYr.forEach(t),Jro=r(_$," \u2014 "),UR=n(_$,"A",{href:!0});var IYr=s(UR);Yro=r(IYr,"CamembertTokenizer"),IYr.forEach(t),Kro=r(_$," or "),JR=n(_$,"A",{href:!0});var NYr=s(JR);Zro=r(NYr,"CamembertTokenizerFast"),NYr.forEach(t),eto=r(_$," (CamemBERT model)"),_$.forEach(t),oto=i(S),jg=n(S,"LI",{});var G6e=s(jg);qae=n(G6e,"STRONG",{});var qYr=s(qae);rto=r(qYr,"canine"),qYr.forEach(t),tto=r(G6e," \u2014 "),YR=n(G6e,"A",{href:!0});var jYr=s(YR);ato=r(jYr,"CanineTokenizer"),jYr.forEach(t),nto=r(G6e," (CANINE model)"),G6e.forEach(t),sto=i(S),Dn=n(S,"LI",{});var u$=s(Dn);jae=n(u$,"STRONG",{});var DYr=s(jae);lto=r(DYr,"clip"),DYr.forEach(t),ito=r(u$," \u2014 "),KR=n(u$,"A",{href:!0});var GYr=s(KR);dto=r(GYr,"CLIPTokenizer"),GYr.forEach(t),cto=r(u$," or "),ZR=n(u$,"A",{href:!0});var OYr=s(ZR);fto=r(OYr,"CLIPTokenizerFast"),OYr.forEach(t),mto=r(u$," (CLIP model)"),u$.forEach(t),gto=i(S),Gn=n(S,"LI",{});var b$=s(Gn);Dae=n(b$,"STRONG",{});var VYr=s(Dae);hto=r(VYr,"convbert"),VYr.forEach(t),pto=r(b$," \u2014 "),eP=n(b$,"A",{href:!0});var XYr=s(eP);_to=r(XYr,"ConvBertTokenizer"),XYr.forEach(t),uto=r(b$," or "),oP=n(b$,"A",{href:!0});var zYr=s(oP);bto=r(zYr,"ConvBertTokenizerFast"),zYr.forEach(t),vto=r(b$," (ConvBERT model)"),b$.forEach(t),Fto=i(S),On=n(S,"LI",{});var v$=s(On);Gae=n(v$,"STRONG",{});var WYr=s(Gae);Tto=r(WYr,"cpm"),WYr.forEach(t),Mto=r(v$," \u2014 "),rP=n(v$,"A",{href:!0});var QYr=s(rP);Eto=r(QYr,"CpmTokenizer"),QYr.forEach(t),Cto=r(v$," or "),tP=n(v$,"A",{href:!0});var HYr=s(tP);wto=r(HYr,"CpmTokenizerFast"),HYr.forEach(t),Ato=r(v$," (CPM model)"),v$.forEach(t),Lto=i(S),Dg=n(S,"LI",{});var O6e=s(Dg);Oae=n(O6e,"STRONG",{});var UYr=s(Oae);yto=r(UYr,"ctrl"),UYr.forEach(t),xto=r(O6e," \u2014 "),aP=n(O6e,"A",{href:!0});var JYr=s(aP);$to=r(JYr,"CTRLTokenizer"),JYr.forEach(t),kto=r(O6e," (CTRL model)"),O6e.forEach(t),Sto=i(S),Vn=n(S,"LI",{});var F$=s(Vn);Vae=n(F$,"STRONG",{});var YYr=s(Vae);Rto=r(YYr,"data2vec-text"),YYr.forEach(t),Pto=r(F$," \u2014 "),nP=n(F$,"A",{href:!0});var KYr=s(nP);Bto=r(KYr,"RobertaTokenizer"),KYr.forEach(t),Ito=r(F$," or "),sP=n(F$,"A",{href:!0});var ZYr=s(sP);Nto=r(ZYr,"RobertaTokenizerFast"),ZYr.forEach(t),qto=r(F$," (Data2VecText model)"),F$.forEach(t),jto=i(S),Xn=n(S,"LI",{});var T$=s(Xn);Xae=n(T$,"STRONG",{});var eKr=s(Xae);Dto=r(eKr,"deberta"),eKr.forEach(t),Gto=r(T$," \u2014 "),lP=n(T$,"A",{href:!0});var oKr=s(lP);Oto=r(oKr,"DebertaTokenizer"),oKr.forEach(t),Vto=r(T$," or "),iP=n(T$,"A",{href:!0});var rKr=s(iP);Xto=r(rKr,"DebertaTokenizerFast"),rKr.forEach(t),zto=r(T$," (DeBERTa model)"),T$.forEach(t),Wto=i(S),zn=n(S,"LI",{});var M$=s(zn);zae=n(M$,"STRONG",{});var tKr=s(zae);Qto=r(tKr,"deberta-v2"),tKr.forEach(t),Hto=r(M$," \u2014 "),dP=n(M$,"A",{href:!0});var aKr=s(dP);Uto=r(aKr,"DebertaV2Tokenizer"),aKr.forEach(t),Jto=r(M$," or "),cP=n(M$,"A",{href:!0});var nKr=s(cP);Yto=r(nKr,"DebertaV2TokenizerFast"),nKr.forEach(t),Kto=r(M$," (DeBERTa-v2 model)"),M$.forEach(t),Zto=i(S),Wn=n(S,"LI",{});var E$=s(Wn);Wae=n(E$,"STRONG",{});var sKr=s(Wae);eao=r(sKr,"distilbert"),sKr.forEach(t),oao=r(E$," \u2014 "),fP=n(E$,"A",{href:!0});var lKr=s(fP);rao=r(lKr,"DistilBertTokenizer"),lKr.forEach(t),tao=r(E$," or "),mP=n(E$,"A",{href:!0});var iKr=s(mP);aao=r(iKr,"DistilBertTokenizerFast"),iKr.forEach(t),nao=r(E$," (DistilBERT model)"),E$.forEach(t),sao=i(S),Qn=n(S,"LI",{});var C$=s(Qn);Qae=n(C$,"STRONG",{});var dKr=s(Qae);lao=r(dKr,"dpr"),dKr.forEach(t),iao=r(C$," \u2014 "),gP=n(C$,"A",{href:!0});var cKr=s(gP);dao=r(cKr,"DPRQuestionEncoderTokenizer"),cKr.forEach(t),cao=r(C$," or "),hP=n(C$,"A",{href:!0});var fKr=s(hP);fao=r(fKr,"DPRQuestionEncoderTokenizerFast"),fKr.forEach(t),mao=r(C$," (DPR model)"),C$.forEach(t),gao=i(S),Hn=n(S,"LI",{});var w$=s(Hn);Hae=n(w$,"STRONG",{});var mKr=s(Hae);hao=r(mKr,"electra"),mKr.forEach(t),pao=r(w$," \u2014 "),pP=n(w$,"A",{href:!0});var gKr=s(pP);_ao=r(gKr,"ElectraTokenizer"),gKr.forEach(t),uao=r(w$," or "),_P=n(w$,"A",{href:!0});var hKr=s(_P);bao=r(hKr,"ElectraTokenizerFast"),hKr.forEach(t),vao=r(w$," (ELECTRA model)"),w$.forEach(t),Fao=i(S),Gg=n(S,"LI",{});var V6e=s(Gg);Uae=n(V6e,"STRONG",{});var pKr=s(Uae);Tao=r(pKr,"flaubert"),pKr.forEach(t),Mao=r(V6e," \u2014 "),uP=n(V6e,"A",{href:!0});var _Kr=s(uP);Eao=r(_Kr,"FlaubertTokenizer"),_Kr.forEach(t),Cao=r(V6e," (FlauBERT model)"),V6e.forEach(t),wao=i(S),Un=n(S,"LI",{});var A$=s(Un);Jae=n(A$,"STRONG",{});var uKr=s(Jae);Aao=r(uKr,"fnet"),uKr.forEach(t),Lao=r(A$," \u2014 "),bP=n(A$,"A",{href:!0});var bKr=s(bP);yao=r(bKr,"FNetTokenizer"),bKr.forEach(t),xao=r(A$," or "),vP=n(A$,"A",{href:!0});var vKr=s(vP);$ao=r(vKr,"FNetTokenizerFast"),vKr.forEach(t),kao=r(A$," (FNet model)"),A$.forEach(t),Sao=i(S),Og=n(S,"LI",{});var X6e=s(Og);Yae=n(X6e,"STRONG",{});var FKr=s(Yae);Rao=r(FKr,"fsmt"),FKr.forEach(t),Pao=r(X6e," \u2014 "),FP=n(X6e,"A",{href:!0});var TKr=s(FP);Bao=r(TKr,"FSMTTokenizer"),TKr.forEach(t),Iao=r(X6e," (FairSeq Machine-Translation model)"),X6e.forEach(t),Nao=i(S),Jn=n(S,"LI",{});var L$=s(Jn);Kae=n(L$,"STRONG",{});var MKr=s(Kae);qao=r(MKr,"funnel"),MKr.forEach(t),jao=r(L$," \u2014 "),TP=n(L$,"A",{href:!0});var EKr=s(TP);Dao=r(EKr,"FunnelTokenizer"),EKr.forEach(t),Gao=r(L$," or "),MP=n(L$,"A",{href:!0});var CKr=s(MP);Oao=r(CKr,"FunnelTokenizerFast"),CKr.forEach(t),Vao=r(L$," (Funnel Transformer model)"),L$.forEach(t),Xao=i(S),Yn=n(S,"LI",{});var y$=s(Yn);Zae=n(y$,"STRONG",{});var wKr=s(Zae);zao=r(wKr,"gpt2"),wKr.forEach(t),Wao=r(y$," \u2014 "),EP=n(y$,"A",{href:!0});var AKr=s(EP);Qao=r(AKr,"GPT2Tokenizer"),AKr.forEach(t),Hao=r(y$," or "),CP=n(y$,"A",{href:!0});var LKr=s(CP);Uao=r(LKr,"GPT2TokenizerFast"),LKr.forEach(t),Jao=r(y$," (OpenAI GPT-2 model)"),y$.forEach(t),Yao=i(S),Kn=n(S,"LI",{});var x$=s(Kn);ene=n(x$,"STRONG",{});var yKr=s(ene);Kao=r(yKr,"gpt_neo"),yKr.forEach(t),Zao=r(x$," \u2014 "),wP=n(x$,"A",{href:!0});var xKr=s(wP);eno=r(xKr,"GPT2Tokenizer"),xKr.forEach(t),ono=r(x$," or "),AP=n(x$,"A",{href:!0});var $Kr=s(AP);rno=r($Kr,"GPT2TokenizerFast"),$Kr.forEach(t),tno=r(x$," (GPT Neo model)"),x$.forEach(t),ano=i(S),Vg=n(S,"LI",{});var z6e=s(Vg);one=n(z6e,"STRONG",{});var kKr=s(one);nno=r(kKr,"gpt_neox"),kKr.forEach(t),sno=r(z6e," \u2014 "),LP=n(z6e,"A",{href:!0});var SKr=s(LP);lno=r(SKr,"GPTNeoXTokenizerFast"),SKr.forEach(t),ino=r(z6e," (GPT NeoX model)"),z6e.forEach(t),dno=i(S),Zn=n(S,"LI",{});var $$=s(Zn);rne=n($$,"STRONG",{});var RKr=s(rne);cno=r(RKr,"gptj"),RKr.forEach(t),fno=r($$," \u2014 "),yP=n($$,"A",{href:!0});var PKr=s(yP);mno=r(PKr,"GPT2Tokenizer"),PKr.forEach(t),gno=r($$," or "),xP=n($$,"A",{href:!0});var BKr=s(xP);hno=r(BKr,"GPT2TokenizerFast"),BKr.forEach(t),pno=r($$," (GPT-J model)"),$$.forEach(t),_no=i(S),es=n(S,"LI",{});var k$=s(es);tne=n(k$,"STRONG",{});var IKr=s(tne);uno=r(IKr,"herbert"),IKr.forEach(t),bno=r(k$," \u2014 "),$P=n(k$,"A",{href:!0});var NKr=s($P);vno=r(NKr,"HerbertTokenizer"),NKr.forEach(t),Fno=r(k$," or "),kP=n(k$,"A",{href:!0});var qKr=s(kP);Tno=r(qKr,"HerbertTokenizerFast"),qKr.forEach(t),Mno=r(k$," (HerBERT model)"),k$.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var W6e=s(Xg);ane=n(W6e,"STRONG",{});var jKr=s(ane);Cno=r(jKr,"hubert"),jKr.forEach(t),wno=r(W6e," \u2014 "),SP=n(W6e,"A",{href:!0});var DKr=s(SP);Ano=r(DKr,"Wav2Vec2CTCTokenizer"),DKr.forEach(t),Lno=r(W6e," (Hubert model)"),W6e.forEach(t),yno=i(S),os=n(S,"LI",{});var S$=s(os);nne=n(S$,"STRONG",{});var GKr=s(nne);xno=r(GKr,"ibert"),GKr.forEach(t),$no=r(S$," \u2014 "),RP=n(S$,"A",{href:!0});var OKr=s(RP);kno=r(OKr,"RobertaTokenizer"),OKr.forEach(t),Sno=r(S$," or "),PP=n(S$,"A",{href:!0});var VKr=s(PP);Rno=r(VKr,"RobertaTokenizerFast"),VKr.forEach(t),Pno=r(S$," (I-BERT model)"),S$.forEach(t),Bno=i(S),rs=n(S,"LI",{});var R$=s(rs);sne=n(R$,"STRONG",{});var XKr=s(sne);Ino=r(XKr,"layoutlm"),XKr.forEach(t),Nno=r(R$," \u2014 "),BP=n(R$,"A",{href:!0});var zKr=s(BP);qno=r(zKr,"LayoutLMTokenizer"),zKr.forEach(t),jno=r(R$," or "),IP=n(R$,"A",{href:!0});var WKr=s(IP);Dno=r(WKr,"LayoutLMTokenizerFast"),WKr.forEach(t),Gno=r(R$," (LayoutLM model)"),R$.forEach(t),Ono=i(S),ts=n(S,"LI",{});var P$=s(ts);lne=n(P$,"STRONG",{});var QKr=s(lne);Vno=r(QKr,"layoutlmv2"),QKr.forEach(t),Xno=r(P$," \u2014 "),NP=n(P$,"A",{href:!0});var HKr=s(NP);zno=r(HKr,"LayoutLMv2Tokenizer"),HKr.forEach(t),Wno=r(P$," or "),qP=n(P$,"A",{href:!0});var UKr=s(qP);Qno=r(UKr,"LayoutLMv2TokenizerFast"),UKr.forEach(t),Hno=r(P$," (LayoutLMv2 model)"),P$.forEach(t),Uno=i(S),as=n(S,"LI",{});var B$=s(as);ine=n(B$,"STRONG",{});var JKr=s(ine);Jno=r(JKr,"layoutlmv3"),JKr.forEach(t),Yno=r(B$," \u2014 "),jP=n(B$,"A",{href:!0});var YKr=s(jP);Kno=r(YKr,"LayoutLMv3Tokenizer"),YKr.forEach(t),Zno=r(B$," or "),DP=n(B$,"A",{href:!0});var KKr=s(DP);eso=r(KKr,"LayoutLMv3TokenizerFast"),KKr.forEach(t),oso=r(B$," (LayoutLMv3 model)"),B$.forEach(t),rso=i(S),ns=n(S,"LI",{});var I$=s(ns);dne=n(I$,"STRONG",{});var ZKr=s(dne);tso=r(ZKr,"layoutxlm"),ZKr.forEach(t),aso=r(I$," \u2014 "),GP=n(I$,"A",{href:!0});var eZr=s(GP);nso=r(eZr,"LayoutXLMTokenizer"),eZr.forEach(t),sso=r(I$," or "),OP=n(I$,"A",{href:!0});var oZr=s(OP);lso=r(oZr,"LayoutXLMTokenizerFast"),oZr.forEach(t),iso=r(I$," (LayoutXLM model)"),I$.forEach(t),dso=i(S),ss=n(S,"LI",{});var N$=s(ss);cne=n(N$,"STRONG",{});var rZr=s(cne);cso=r(rZr,"led"),rZr.forEach(t),fso=r(N$," \u2014 "),VP=n(N$,"A",{href:!0});var tZr=s(VP);mso=r(tZr,"LEDTokenizer"),tZr.forEach(t),gso=r(N$," or "),XP=n(N$,"A",{href:!0});var aZr=s(XP);hso=r(aZr,"LEDTokenizerFast"),aZr.forEach(t),pso=r(N$," (LED model)"),N$.forEach(t),_so=i(S),ls=n(S,"LI",{});var q$=s(ls);fne=n(q$,"STRONG",{});var nZr=s(fne);uso=r(nZr,"longformer"),nZr.forEach(t),bso=r(q$," \u2014 "),zP=n(q$,"A",{href:!0});var sZr=s(zP);vso=r(sZr,"LongformerTokenizer"),sZr.forEach(t),Fso=r(q$," or "),WP=n(q$,"A",{href:!0});var lZr=s(WP);Tso=r(lZr,"LongformerTokenizerFast"),lZr.forEach(t),Mso=r(q$," (Longformer model)"),q$.forEach(t),Eso=i(S),zg=n(S,"LI",{});var Q6e=s(zg);mne=n(Q6e,"STRONG",{});var iZr=s(mne);Cso=r(iZr,"luke"),iZr.forEach(t),wso=r(Q6e," \u2014 "),QP=n(Q6e,"A",{href:!0});var dZr=s(QP);Aso=r(dZr,"LukeTokenizer"),dZr.forEach(t),Lso=r(Q6e," (LUKE model)"),Q6e.forEach(t),yso=i(S),is=n(S,"LI",{});var j$=s(is);gne=n(j$,"STRONG",{});var cZr=s(gne);xso=r(cZr,"lxmert"),cZr.forEach(t),$so=r(j$," \u2014 "),HP=n(j$,"A",{href:!0});var fZr=s(HP);kso=r(fZr,"LxmertTokenizer"),fZr.forEach(t),Sso=r(j$," or "),UP=n(j$,"A",{href:!0});var mZr=s(UP);Rso=r(mZr,"LxmertTokenizerFast"),mZr.forEach(t),Pso=r(j$," (LXMERT model)"),j$.forEach(t),Bso=i(S),Wg=n(S,"LI",{});var H6e=s(Wg);hne=n(H6e,"STRONG",{});var gZr=s(hne);Iso=r(gZr,"m2m_100"),gZr.forEach(t),Nso=r(H6e," \u2014 "),JP=n(H6e,"A",{href:!0});var hZr=s(JP);qso=r(hZr,"M2M100Tokenizer"),hZr.forEach(t),jso=r(H6e," (M2M100 model)"),H6e.forEach(t),Dso=i(S),Qg=n(S,"LI",{});var U6e=s(Qg);pne=n(U6e,"STRONG",{});var pZr=s(pne);Gso=r(pZr,"marian"),pZr.forEach(t),Oso=r(U6e," \u2014 "),YP=n(U6e,"A",{href:!0});var _Zr=s(YP);Vso=r(_Zr,"MarianTokenizer"),_Zr.forEach(t),Xso=r(U6e," (Marian model)"),U6e.forEach(t),zso=i(S),ds=n(S,"LI",{});var D$=s(ds);_ne=n(D$,"STRONG",{});var uZr=s(_ne);Wso=r(uZr,"mbart"),uZr.forEach(t),Qso=r(D$," \u2014 "),KP=n(D$,"A",{href:!0});var bZr=s(KP);Hso=r(bZr,"MBartTokenizer"),bZr.forEach(t),Uso=r(D$," or "),ZP=n(D$,"A",{href:!0});var vZr=s(ZP);Jso=r(vZr,"MBartTokenizerFast"),vZr.forEach(t),Yso=r(D$," (mBART model)"),D$.forEach(t),Kso=i(S),cs=n(S,"LI",{});var G$=s(cs);une=n(G$,"STRONG",{});var FZr=s(une);Zso=r(FZr,"mbart50"),FZr.forEach(t),elo=r(G$," \u2014 "),eB=n(G$,"A",{href:!0});var TZr=s(eB);olo=r(TZr,"MBart50Tokenizer"),TZr.forEach(t),rlo=r(G$," or "),oB=n(G$,"A",{href:!0});var MZr=s(oB);tlo=r(MZr,"MBart50TokenizerFast"),MZr.forEach(t),alo=r(G$," (mBART-50 model)"),G$.forEach(t),nlo=i(S),fs=n(S,"LI",{});var O$=s(fs);bne=n(O$,"STRONG",{});var EZr=s(bne);slo=r(EZr,"megatron-bert"),EZr.forEach(t),llo=r(O$," \u2014 "),rB=n(O$,"A",{href:!0});var CZr=s(rB);ilo=r(CZr,"BertTokenizer"),CZr.forEach(t),dlo=r(O$," or "),tB=n(O$,"A",{href:!0});var wZr=s(tB);clo=r(wZr,"BertTokenizerFast"),wZr.forEach(t),flo=r(O$," (Megatron-BERT model)"),O$.forEach(t),mlo=i(S),Hg=n(S,"LI",{});var J6e=s(Hg);vne=n(J6e,"STRONG",{});var AZr=s(vne);glo=r(AZr,"mluke"),AZr.forEach(t),hlo=r(J6e," \u2014 "),aB=n(J6e,"A",{href:!0});var LZr=s(aB);plo=r(LZr,"MLukeTokenizer"),LZr.forEach(t),_lo=r(J6e," (mLUKE model)"),J6e.forEach(t),ulo=i(S),ms=n(S,"LI",{});var V$=s(ms);Fne=n(V$,"STRONG",{});var yZr=s(Fne);blo=r(yZr,"mobilebert"),yZr.forEach(t),vlo=r(V$," \u2014 "),nB=n(V$,"A",{href:!0});var xZr=s(nB);Flo=r(xZr,"MobileBertTokenizer"),xZr.forEach(t),Tlo=r(V$," or "),sB=n(V$,"A",{href:!0});var $Zr=s(sB);Mlo=r($Zr,"MobileBertTokenizerFast"),$Zr.forEach(t),Elo=r(V$," (MobileBERT model)"),V$.forEach(t),Clo=i(S),gs=n(S,"LI",{});var X$=s(gs);Tne=n(X$,"STRONG",{});var kZr=s(Tne);wlo=r(kZr,"mpnet"),kZr.forEach(t),Alo=r(X$," \u2014 "),lB=n(X$,"A",{href:!0});var SZr=s(lB);Llo=r(SZr,"MPNetTokenizer"),SZr.forEach(t),ylo=r(X$," or "),iB=n(X$,"A",{href:!0});var RZr=s(iB);xlo=r(RZr,"MPNetTokenizerFast"),RZr.forEach(t),$lo=r(X$," (MPNet model)"),X$.forEach(t),klo=i(S),hs=n(S,"LI",{});var z$=s(hs);Mne=n(z$,"STRONG",{});var PZr=s(Mne);Slo=r(PZr,"mt5"),PZr.forEach(t),Rlo=r(z$," \u2014 "),dB=n(z$,"A",{href:!0});var BZr=s(dB);Plo=r(BZr,"MT5Tokenizer"),BZr.forEach(t),Blo=r(z$," or "),cB=n(z$,"A",{href:!0});var IZr=s(cB);Ilo=r(IZr,"MT5TokenizerFast"),IZr.forEach(t),Nlo=r(z$," (MT5 model)"),z$.forEach(t),qlo=i(S),ps=n(S,"LI",{});var W$=s(ps);Ene=n(W$,"STRONG",{});var NZr=s(Ene);jlo=r(NZr,"nystromformer"),NZr.forEach(t),Dlo=r(W$," \u2014 "),fB=n(W$,"A",{href:!0});var qZr=s(fB);Glo=r(qZr,"AlbertTokenizer"),qZr.forEach(t),Olo=r(W$," or "),mB=n(W$,"A",{href:!0});var jZr=s(mB);Vlo=r(jZr,"AlbertTokenizerFast"),jZr.forEach(t),Xlo=r(W$," (Nystr\xF6mformer model)"),W$.forEach(t),zlo=i(S),_s=n(S,"LI",{});var Q$=s(_s);Cne=n(Q$,"STRONG",{});var DZr=s(Cne);Wlo=r(DZr,"openai-gpt"),DZr.forEach(t),Qlo=r(Q$," \u2014 "),gB=n(Q$,"A",{href:!0});var GZr=s(gB);Hlo=r(GZr,"OpenAIGPTTokenizer"),GZr.forEach(t),Ulo=r(Q$," or "),hB=n(Q$,"A",{href:!0});var OZr=s(hB);Jlo=r(OZr,"OpenAIGPTTokenizerFast"),OZr.forEach(t),Ylo=r(Q$," (OpenAI GPT model)"),Q$.forEach(t),Klo=i(S),Ug=n(S,"LI",{});var Y6e=s(Ug);wne=n(Y6e,"STRONG",{});var VZr=s(wne);Zlo=r(VZr,"opt"),VZr.forEach(t),eio=r(Y6e," \u2014 "),pB=n(Y6e,"A",{href:!0});var XZr=s(pB);oio=r(XZr,"GPT2Tokenizer"),XZr.forEach(t),rio=r(Y6e," (OPT model)"),Y6e.forEach(t),tio=i(S),us=n(S,"LI",{});var H$=s(us);Ane=n(H$,"STRONG",{});var zZr=s(Ane);aio=r(zZr,"pegasus"),zZr.forEach(t),nio=r(H$," \u2014 "),_B=n(H$,"A",{href:!0});var WZr=s(_B);sio=r(WZr,"PegasusTokenizer"),WZr.forEach(t),lio=r(H$," or "),uB=n(H$,"A",{href:!0});var QZr=s(uB);iio=r(QZr,"PegasusTokenizerFast"),QZr.forEach(t),dio=r(H$," (Pegasus model)"),H$.forEach(t),cio=i(S),Jg=n(S,"LI",{});var K6e=s(Jg);Lne=n(K6e,"STRONG",{});var HZr=s(Lne);fio=r(HZr,"perceiver"),HZr.forEach(t),mio=r(K6e," \u2014 "),bB=n(K6e,"A",{href:!0});var UZr=s(bB);gio=r(UZr,"PerceiverTokenizer"),UZr.forEach(t),hio=r(K6e," (Perceiver model)"),K6e.forEach(t),pio=i(S),Yg=n(S,"LI",{});var Z6e=s(Yg);yne=n(Z6e,"STRONG",{});var JZr=s(yne);_io=r(JZr,"phobert"),JZr.forEach(t),uio=r(Z6e," \u2014 "),vB=n(Z6e,"A",{href:!0});var YZr=s(vB);bio=r(YZr,"PhobertTokenizer"),YZr.forEach(t),vio=r(Z6e," (PhoBERT model)"),Z6e.forEach(t),Fio=i(S),Kg=n(S,"LI",{});var eAe=s(Kg);xne=n(eAe,"STRONG",{});var KZr=s(xne);Tio=r(KZr,"plbart"),KZr.forEach(t),Mio=r(eAe," \u2014 "),FB=n(eAe,"A",{href:!0});var ZZr=s(FB);Eio=r(ZZr,"PLBartTokenizer"),ZZr.forEach(t),Cio=r(eAe," (PLBart model)"),eAe.forEach(t),wio=i(S),Zg=n(S,"LI",{});var oAe=s(Zg);$ne=n(oAe,"STRONG",{});var eet=s($ne);Aio=r(eet,"prophetnet"),eet.forEach(t),Lio=r(oAe," \u2014 "),TB=n(oAe,"A",{href:!0});var oet=s(TB);yio=r(oet,"ProphetNetTokenizer"),oet.forEach(t),xio=r(oAe," (ProphetNet model)"),oAe.forEach(t),$io=i(S),bs=n(S,"LI",{});var U$=s(bs);kne=n(U$,"STRONG",{});var ret=s(kne);kio=r(ret,"qdqbert"),ret.forEach(t),Sio=r(U$," \u2014 "),MB=n(U$,"A",{href:!0});var tet=s(MB);Rio=r(tet,"BertTokenizer"),tet.forEach(t),Pio=r(U$," or "),EB=n(U$,"A",{href:!0});var aet=s(EB);Bio=r(aet,"BertTokenizerFast"),aet.forEach(t),Iio=r(U$," (QDQBert model)"),U$.forEach(t),Nio=i(S),eh=n(S,"LI",{});var rAe=s(eh);Sne=n(rAe,"STRONG",{});var net=s(Sne);qio=r(net,"rag"),net.forEach(t),jio=r(rAe," \u2014 "),CB=n(rAe,"A",{href:!0});var set=s(CB);Dio=r(set,"RagTokenizer"),set.forEach(t),Gio=r(rAe," (RAG model)"),rAe.forEach(t),Oio=i(S),vs=n(S,"LI",{});var J$=s(vs);Rne=n(J$,"STRONG",{});var iet=s(Rne);Vio=r(iet,"realm"),iet.forEach(t),Xio=r(J$," \u2014 "),wB=n(J$,"A",{href:!0});var det=s(wB);zio=r(det,"RealmTokenizer"),det.forEach(t),Wio=r(J$," or "),AB=n(J$,"A",{href:!0});var cet=s(AB);Qio=r(cet,"RealmTokenizerFast"),cet.forEach(t),Hio=r(J$," (REALM model)"),J$.forEach(t),Uio=i(S),Fs=n(S,"LI",{});var Y$=s(Fs);Pne=n(Y$,"STRONG",{});var fet=s(Pne);Jio=r(fet,"reformer"),fet.forEach(t),Yio=r(Y$," \u2014 "),LB=n(Y$,"A",{href:!0});var met=s(LB);Kio=r(met,"ReformerTokenizer"),met.forEach(t),Zio=r(Y$," or "),yB=n(Y$,"A",{href:!0});var get=s(yB);edo=r(get,"ReformerTokenizerFast"),get.forEach(t),odo=r(Y$," (Reformer model)"),Y$.forEach(t),rdo=i(S),Ts=n(S,"LI",{});var K$=s(Ts);Bne=n(K$,"STRONG",{});var het=s(Bne);tdo=r(het,"rembert"),het.forEach(t),ado=r(K$," \u2014 "),xB=n(K$,"A",{href:!0});var pet=s(xB);ndo=r(pet,"RemBertTokenizer"),pet.forEach(t),sdo=r(K$," or "),$B=n(K$,"A",{href:!0});var _et=s($B);ldo=r(_et,"RemBertTokenizerFast"),_et.forEach(t),ido=r(K$," (RemBERT model)"),K$.forEach(t),ddo=i(S),Ms=n(S,"LI",{});var Z$=s(Ms);Ine=n(Z$,"STRONG",{});var uet=s(Ine);cdo=r(uet,"retribert"),uet.forEach(t),fdo=r(Z$," \u2014 "),kB=n(Z$,"A",{href:!0});var bet=s(kB);mdo=r(bet,"RetriBertTokenizer"),bet.forEach(t),gdo=r(Z$," or "),SB=n(Z$,"A",{href:!0});var vet=s(SB);hdo=r(vet,"RetriBertTokenizerFast"),vet.forEach(t),pdo=r(Z$," (RetriBERT model)"),Z$.forEach(t),_do=i(S),Es=n(S,"LI",{});var ek=s(Es);Nne=n(ek,"STRONG",{});var Fet=s(Nne);udo=r(Fet,"roberta"),Fet.forEach(t),bdo=r(ek," \u2014 "),RB=n(ek,"A",{href:!0});var Tet=s(RB);vdo=r(Tet,"RobertaTokenizer"),Tet.forEach(t),Fdo=r(ek," or "),PB=n(ek,"A",{href:!0});var Met=s(PB);Tdo=r(Met,"RobertaTokenizerFast"),Met.forEach(t),Mdo=r(ek," (RoBERTa model)"),ek.forEach(t),Edo=i(S),Cs=n(S,"LI",{});var ok=s(Cs);qne=n(ok,"STRONG",{});var Eet=s(qne);Cdo=r(Eet,"roformer"),Eet.forEach(t),wdo=r(ok," \u2014 "),BB=n(ok,"A",{href:!0});var Cet=s(BB);Ado=r(Cet,"RoFormerTokenizer"),Cet.forEach(t),Ldo=r(ok," or "),IB=n(ok,"A",{href:!0});var wet=s(IB);ydo=r(wet,"RoFormerTokenizerFast"),wet.forEach(t),xdo=r(ok," (RoFormer model)"),ok.forEach(t),$do=i(S),oh=n(S,"LI",{});var tAe=s(oh);jne=n(tAe,"STRONG",{});var Aet=s(jne);kdo=r(Aet,"speech_to_text"),Aet.forEach(t),Sdo=r(tAe," \u2014 "),NB=n(tAe,"A",{href:!0});var Let=s(NB);Rdo=r(Let,"Speech2TextTokenizer"),Let.forEach(t),Pdo=r(tAe," (Speech2Text model)"),tAe.forEach(t),Bdo=i(S),rh=n(S,"LI",{});var aAe=s(rh);Dne=n(aAe,"STRONG",{});var yet=s(Dne);Ido=r(yet,"speech_to_text_2"),yet.forEach(t),Ndo=r(aAe," \u2014 "),qB=n(aAe,"A",{href:!0});var xet=s(qB);qdo=r(xet,"Speech2Text2Tokenizer"),xet.forEach(t),jdo=r(aAe," (Speech2Text2 model)"),aAe.forEach(t),Ddo=i(S),ws=n(S,"LI",{});var rk=s(ws);Gne=n(rk,"STRONG",{});var $et=s(Gne);Gdo=r($et,"splinter"),$et.forEach(t),Odo=r(rk," \u2014 "),jB=n(rk,"A",{href:!0});var ket=s(jB);Vdo=r(ket,"SplinterTokenizer"),ket.forEach(t),Xdo=r(rk," or "),DB=n(rk,"A",{href:!0});var Set=s(DB);zdo=r(Set,"SplinterTokenizerFast"),Set.forEach(t),Wdo=r(rk," (Splinter model)"),rk.forEach(t),Qdo=i(S),As=n(S,"LI",{});var tk=s(As);One=n(tk,"STRONG",{});var Ret=s(One);Hdo=r(Ret,"squeezebert"),Ret.forEach(t),Udo=r(tk," \u2014 "),GB=n(tk,"A",{href:!0});var Pet=s(GB);Jdo=r(Pet,"SqueezeBertTokenizer"),Pet.forEach(t),Ydo=r(tk," or "),OB=n(tk,"A",{href:!0});var Bet=s(OB);Kdo=r(Bet,"SqueezeBertTokenizerFast"),Bet.forEach(t),Zdo=r(tk," (SqueezeBERT model)"),tk.forEach(t),eco=i(S),Ls=n(S,"LI",{});var ak=s(Ls);Vne=n(ak,"STRONG",{});var Iet=s(Vne);oco=r(Iet,"t5"),Iet.forEach(t),rco=r(ak," \u2014 "),VB=n(ak,"A",{href:!0});var Net=s(VB);tco=r(Net,"T5Tokenizer"),Net.forEach(t),aco=r(ak," or "),XB=n(ak,"A",{href:!0});var qet=s(XB);nco=r(qet,"T5TokenizerFast"),qet.forEach(t),sco=r(ak," (T5 model)"),ak.forEach(t),lco=i(S),th=n(S,"LI",{});var nAe=s(th);Xne=n(nAe,"STRONG",{});var jet=s(Xne);ico=r(jet,"tapas"),jet.forEach(t),dco=r(nAe," \u2014 "),zB=n(nAe,"A",{href:!0});var Det=s(zB);cco=r(Det,"TapasTokenizer"),Det.forEach(t),fco=r(nAe," (TAPAS model)"),nAe.forEach(t),mco=i(S),ah=n(S,"LI",{});var sAe=s(ah);zne=n(sAe,"STRONG",{});var Get=s(zne);gco=r(Get,"tapex"),Get.forEach(t),hco=r(sAe," \u2014 "),WB=n(sAe,"A",{href:!0});var Oet=s(WB);pco=r(Oet,"TapexTokenizer"),Oet.forEach(t),_co=r(sAe," (TAPEX model)"),sAe.forEach(t),uco=i(S),nh=n(S,"LI",{});var lAe=s(nh);Wne=n(lAe,"STRONG",{});var Vet=s(Wne);bco=r(Vet,"transfo-xl"),Vet.forEach(t),vco=r(lAe," \u2014 "),QB=n(lAe,"A",{href:!0});var Xet=s(QB);Fco=r(Xet,"TransfoXLTokenizer"),Xet.forEach(t),Tco=r(lAe," (Transformer-XL model)"),lAe.forEach(t),Mco=i(S),ys=n(S,"LI",{});var nk=s(ys);Qne=n(nk,"STRONG",{});var zet=s(Qne);Eco=r(zet,"visual_bert"),zet.forEach(t),Cco=r(nk," \u2014 "),HB=n(nk,"A",{href:!0});var Wet=s(HB);wco=r(Wet,"BertTokenizer"),Wet.forEach(t),Aco=r(nk," or "),UB=n(nk,"A",{href:!0});var Qet=s(UB);Lco=r(Qet,"BertTokenizerFast"),Qet.forEach(t),yco=r(nk," (VisualBERT model)"),nk.forEach(t),xco=i(S),sh=n(S,"LI",{});var iAe=s(sh);Hne=n(iAe,"STRONG",{});var Het=s(Hne);$co=r(Het,"wav2vec2"),Het.forEach(t),kco=r(iAe," \u2014 "),JB=n(iAe,"A",{href:!0});var Uet=s(JB);Sco=r(Uet,"Wav2Vec2CTCTokenizer"),Uet.forEach(t),Rco=r(iAe," (Wav2Vec2 model)"),iAe.forEach(t),Pco=i(S),lh=n(S,"LI",{});var dAe=s(lh);Une=n(dAe,"STRONG",{});var Jet=s(Une);Bco=r(Jet,"wav2vec2-conformer"),Jet.forEach(t),Ico=r(dAe," \u2014 "),YB=n(dAe,"A",{href:!0});var Yet=s(YB);Nco=r(Yet,"Wav2Vec2CTCTokenizer"),Yet.forEach(t),qco=r(dAe," (Wav2Vec2-Conformer model)"),dAe.forEach(t),jco=i(S),ih=n(S,"LI",{});var cAe=s(ih);Jne=n(cAe,"STRONG",{});var Ket=s(Jne);Dco=r(Ket,"wav2vec2_phoneme"),Ket.forEach(t),Gco=r(cAe," \u2014 "),KB=n(cAe,"A",{href:!0});var Zet=s(KB);Oco=r(Zet,"Wav2Vec2PhonemeCTCTokenizer"),Zet.forEach(t),Vco=r(cAe," (Wav2Vec2Phoneme model)"),cAe.forEach(t),Xco=i(S),xs=n(S,"LI",{});var sk=s(xs);Yne=n(sk,"STRONG",{});var eot=s(Yne);zco=r(eot,"xglm"),eot.forEach(t),Wco=r(sk," \u2014 "),ZB=n(sk,"A",{href:!0});var oot=s(ZB);Qco=r(oot,"XGLMTokenizer"),oot.forEach(t),Hco=r(sk," or "),eI=n(sk,"A",{href:!0});var rot=s(eI);Uco=r(rot,"XGLMTokenizerFast"),rot.forEach(t),Jco=r(sk," (XGLM model)"),sk.forEach(t),Yco=i(S),dh=n(S,"LI",{});var fAe=s(dh);Kne=n(fAe,"STRONG",{});var tot=s(Kne);Kco=r(tot,"xlm"),tot.forEach(t),Zco=r(fAe," \u2014 "),oI=n(fAe,"A",{href:!0});var aot=s(oI);efo=r(aot,"XLMTokenizer"),aot.forEach(t),ofo=r(fAe," (XLM model)"),fAe.forEach(t),rfo=i(S),ch=n(S,"LI",{});var mAe=s(ch);Zne=n(mAe,"STRONG",{});var not=s(Zne);tfo=r(not,"xlm-prophetnet"),not.forEach(t),afo=r(mAe," \u2014 "),rI=n(mAe,"A",{href:!0});var sot=s(rI);nfo=r(sot,"XLMProphetNetTokenizer"),sot.forEach(t),sfo=r(mAe," (XLM-ProphetNet model)"),mAe.forEach(t),lfo=i(S),$s=n(S,"LI",{});var lk=s($s);ese=n(lk,"STRONG",{});var lot=s(ese);ifo=r(lot,"xlm-roberta"),lot.forEach(t),dfo=r(lk," \u2014 "),tI=n(lk,"A",{href:!0});var iot=s(tI);cfo=r(iot,"XLMRobertaTokenizer"),iot.forEach(t),ffo=r(lk," or "),aI=n(lk,"A",{href:!0});var dot=s(aI);mfo=r(dot,"XLMRobertaTokenizerFast"),dot.forEach(t),gfo=r(lk," (XLM-RoBERTa model)"),lk.forEach(t),hfo=i(S),ks=n(S,"LI",{});var ik=s(ks);ose=n(ik,"STRONG",{});var cot=s(ose);pfo=r(cot,"xlm-roberta-xl"),cot.forEach(t),_fo=r(ik," \u2014 "),nI=n(ik,"A",{href:!0});var fot=s(nI);ufo=r(fot,"RobertaTokenizer"),fot.forEach(t),bfo=r(ik," or "),sI=n(ik,"A",{href:!0});var mot=s(sI);vfo=r(mot,"RobertaTokenizerFast"),mot.forEach(t),Ffo=r(ik," (XLM-RoBERTa-XL model)"),ik.forEach(t),Tfo=i(S),Ss=n(S,"LI",{});var dk=s(Ss);rse=n(dk,"STRONG",{});var got=s(rse);Mfo=r(got,"xlnet"),got.forEach(t),Efo=r(dk," \u2014 "),lI=n(dk,"A",{href:!0});var hot=s(lI);Cfo=r(hot,"XLNetTokenizer"),hot.forEach(t),wfo=r(dk," or "),iI=n(dk,"A",{href:!0});var pot=s(iI);Afo=r(pot,"XLNetTokenizerFast"),pot.forEach(t),Lfo=r(dk," (XLNet model)"),dk.forEach(t),yfo=i(S),Rs=n(S,"LI",{});var ck=s(Rs);tse=n(ck,"STRONG",{});var _ot=s(tse);xfo=r(_ot,"yoso"),_ot.forEach(t),$fo=r(ck," \u2014 "),dI=n(ck,"A",{href:!0});var uot=s(dI);kfo=r(uot,"AlbertTokenizer"),uot.forEach(t),Sfo=r(ck," or "),cI=n(ck,"A",{href:!0});var bot=s(cI);Rfo=r(bot,"AlbertTokenizerFast"),bot.forEach(t),Pfo=r(ck," (YOSO model)"),ck.forEach(t),S.forEach(t),Bfo=i(js),T(fh.$$.fragment,js),js.forEach(t),Ifo=i(qs),mh=n(qs,"DIV",{class:!0});var zGe=s(mh);T(dL.$$.fragment,zGe),Nfo=i(zGe),ase=n(zGe,"P",{});var vot=s(ase);qfo=r(vot,"Register a new tokenizer in this mapping."),vot.forEach(t),zGe.forEach(t),qs.forEach(t),Wje=i(f),Ci=n(f,"H2",{class:!0});var WGe=s(Ci);gh=n(WGe,"A",{id:!0,class:!0,href:!0});var Fot=s(gh);nse=n(Fot,"SPAN",{});var Tot=s(nse);T(cL.$$.fragment,Tot),Tot.forEach(t),Fot.forEach(t),jfo=i(WGe),sse=n(WGe,"SPAN",{});var Mot=s(sse);Dfo=r(Mot,"AutoFeatureExtractor"),Mot.forEach(t),WGe.forEach(t),Qje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(fL.$$.fragment,Ds),Gfo=i(Ds),mL=n(Ds,"P",{});var QGe=s(mL);Ofo=r(QGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fI=n(QGe,"A",{href:!0});var Eot=s(fI);Vfo=r(Eot,"AutoFeatureExtractor.from_pretrained()"),Eot.forEach(t),Xfo=r(QGe," class method."),QGe.forEach(t),zfo=i(Ds),gL=n(Ds,"P",{});var HGe=s(gL);Wfo=r(HGe,"This class cannot be instantiated directly using "),lse=n(HGe,"CODE",{});var Cot=s(lse);Qfo=r(Cot,"__init__()"),Cot.forEach(t),Hfo=r(HGe," (throws an error)."),HGe.forEach(t),Ufo=i(Ds),He=n(Ds,"DIV",{class:!0});var ea=s(He);T(hL.$$.fragment,ea),Jfo=i(ea),ise=n(ea,"P",{});var wot=s(ise);Yfo=r(wot,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wot.forEach(t),Kfo=i(ea),ya=n(ea,"P",{});var e6=s(ya);Zfo=r(e6,"The feature extractor class to instantiate is selected based on the "),dse=n(e6,"CODE",{});var Aot=s(dse);emo=r(Aot,"model_type"),Aot.forEach(t),omo=r(e6,` property of the config object
(either passed as an argument or loaded from `),cse=n(e6,"CODE",{});var Lot=s(cse);rmo=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),tmo=r(e6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fse=n(e6,"CODE",{});var yot=s(fse);amo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),nmo=r(e6,":"),e6.forEach(t),smo=i(ea),Y=n(ea,"UL",{});var K=s(Y);hh=n(K,"LI",{});var gAe=s(hh);mse=n(gAe,"STRONG",{});var xot=s(mse);lmo=r(xot,"beit"),xot.forEach(t),imo=r(gAe," \u2014 "),mI=n(gAe,"A",{href:!0});var $ot=s(mI);dmo=r($ot,"BeitFeatureExtractor"),$ot.forEach(t),cmo=r(gAe," (BEiT model)"),gAe.forEach(t),fmo=i(K),ph=n(K,"LI",{});var hAe=s(ph);gse=n(hAe,"STRONG",{});var kot=s(gse);mmo=r(kot,"clip"),kot.forEach(t),gmo=r(hAe," \u2014 "),gI=n(hAe,"A",{href:!0});var Sot=s(gI);hmo=r(Sot,"CLIPFeatureExtractor"),Sot.forEach(t),pmo=r(hAe," (CLIP model)"),hAe.forEach(t),_mo=i(K),_h=n(K,"LI",{});var pAe=s(_h);hse=n(pAe,"STRONG",{});var Rot=s(hse);umo=r(Rot,"convnext"),Rot.forEach(t),bmo=r(pAe," \u2014 "),hI=n(pAe,"A",{href:!0});var Pot=s(hI);vmo=r(Pot,"ConvNextFeatureExtractor"),Pot.forEach(t),Fmo=r(pAe," (ConvNeXT model)"),pAe.forEach(t),Tmo=i(K),uh=n(K,"LI",{});var _Ae=s(uh);pse=n(_Ae,"STRONG",{});var Bot=s(pse);Mmo=r(Bot,"cvt"),Bot.forEach(t),Emo=r(_Ae," \u2014 "),pI=n(_Ae,"A",{href:!0});var Iot=s(pI);Cmo=r(Iot,"ConvNextFeatureExtractor"),Iot.forEach(t),wmo=r(_Ae," (CvT model)"),_Ae.forEach(t),Amo=i(K),bh=n(K,"LI",{});var uAe=s(bh);_se=n(uAe,"STRONG",{});var Not=s(_se);Lmo=r(Not,"data2vec-audio"),Not.forEach(t),ymo=r(uAe," \u2014 "),_I=n(uAe,"A",{href:!0});var qot=s(_I);xmo=r(qot,"Wav2Vec2FeatureExtractor"),qot.forEach(t),$mo=r(uAe," (Data2VecAudio model)"),uAe.forEach(t),kmo=i(K),vh=n(K,"LI",{});var bAe=s(vh);use=n(bAe,"STRONG",{});var jot=s(use);Smo=r(jot,"data2vec-vision"),jot.forEach(t),Rmo=r(bAe," \u2014 "),uI=n(bAe,"A",{href:!0});var Dot=s(uI);Pmo=r(Dot,"BeitFeatureExtractor"),Dot.forEach(t),Bmo=r(bAe," (Data2VecVision model)"),bAe.forEach(t),Imo=i(K),Fh=n(K,"LI",{});var vAe=s(Fh);bse=n(vAe,"STRONG",{});var Got=s(bse);Nmo=r(Got,"deit"),Got.forEach(t),qmo=r(vAe," \u2014 "),bI=n(vAe,"A",{href:!0});var Oot=s(bI);jmo=r(Oot,"DeiTFeatureExtractor"),Oot.forEach(t),Dmo=r(vAe," (DeiT model)"),vAe.forEach(t),Gmo=i(K),Th=n(K,"LI",{});var FAe=s(Th);vse=n(FAe,"STRONG",{});var Vot=s(vse);Omo=r(Vot,"detr"),Vot.forEach(t),Vmo=r(FAe," \u2014 "),vI=n(FAe,"A",{href:!0});var Xot=s(vI);Xmo=r(Xot,"DetrFeatureExtractor"),Xot.forEach(t),zmo=r(FAe," (DETR model)"),FAe.forEach(t),Wmo=i(K),Mh=n(K,"LI",{});var TAe=s(Mh);Fse=n(TAe,"STRONG",{});var zot=s(Fse);Qmo=r(zot,"dpt"),zot.forEach(t),Hmo=r(TAe," \u2014 "),FI=n(TAe,"A",{href:!0});var Wot=s(FI);Umo=r(Wot,"DPTFeatureExtractor"),Wot.forEach(t),Jmo=r(TAe," (DPT model)"),TAe.forEach(t),Ymo=i(K),Eh=n(K,"LI",{});var MAe=s(Eh);Tse=n(MAe,"STRONG",{});var Qot=s(Tse);Kmo=r(Qot,"flava"),Qot.forEach(t),Zmo=r(MAe," \u2014 "),TI=n(MAe,"A",{href:!0});var Hot=s(TI);ego=r(Hot,"FlavaFeatureExtractor"),Hot.forEach(t),ogo=r(MAe," (FLAVA model)"),MAe.forEach(t),rgo=i(K),Ch=n(K,"LI",{});var EAe=s(Ch);Mse=n(EAe,"STRONG",{});var Uot=s(Mse);tgo=r(Uot,"glpn"),Uot.forEach(t),ago=r(EAe," \u2014 "),MI=n(EAe,"A",{href:!0});var Jot=s(MI);ngo=r(Jot,"GLPNFeatureExtractor"),Jot.forEach(t),sgo=r(EAe," (GLPN model)"),EAe.forEach(t),lgo=i(K),wh=n(K,"LI",{});var CAe=s(wh);Ese=n(CAe,"STRONG",{});var Yot=s(Ese);igo=r(Yot,"hubert"),Yot.forEach(t),dgo=r(CAe," \u2014 "),EI=n(CAe,"A",{href:!0});var Kot=s(EI);cgo=r(Kot,"Wav2Vec2FeatureExtractor"),Kot.forEach(t),fgo=r(CAe," (Hubert model)"),CAe.forEach(t),mgo=i(K),Ah=n(K,"LI",{});var wAe=s(Ah);Cse=n(wAe,"STRONG",{});var Zot=s(Cse);ggo=r(Zot,"imagegpt"),Zot.forEach(t),hgo=r(wAe," \u2014 "),CI=n(wAe,"A",{href:!0});var ert=s(CI);pgo=r(ert,"ImageGPTFeatureExtractor"),ert.forEach(t),_go=r(wAe," (ImageGPT model)"),wAe.forEach(t),ugo=i(K),Lh=n(K,"LI",{});var AAe=s(Lh);wse=n(AAe,"STRONG",{});var ort=s(wse);bgo=r(ort,"layoutlmv2"),ort.forEach(t),vgo=r(AAe," \u2014 "),wI=n(AAe,"A",{href:!0});var rrt=s(wI);Fgo=r(rrt,"LayoutLMv2FeatureExtractor"),rrt.forEach(t),Tgo=r(AAe," (LayoutLMv2 model)"),AAe.forEach(t),Mgo=i(K),yh=n(K,"LI",{});var LAe=s(yh);Ase=n(LAe,"STRONG",{});var trt=s(Ase);Ego=r(trt,"layoutlmv3"),trt.forEach(t),Cgo=r(LAe," \u2014 "),AI=n(LAe,"A",{href:!0});var art=s(AI);wgo=r(art,"LayoutLMv3FeatureExtractor"),art.forEach(t),Ago=r(LAe," (LayoutLMv3 model)"),LAe.forEach(t),Lgo=i(K),xh=n(K,"LI",{});var yAe=s(xh);Lse=n(yAe,"STRONG",{});var nrt=s(Lse);ygo=r(nrt,"levit"),nrt.forEach(t),xgo=r(yAe," \u2014 "),LI=n(yAe,"A",{href:!0});var srt=s(LI);$go=r(srt,"LevitFeatureExtractor"),srt.forEach(t),kgo=r(yAe," (LeViT model)"),yAe.forEach(t),Sgo=i(K),$h=n(K,"LI",{});var xAe=s($h);yse=n(xAe,"STRONG",{});var lrt=s(yse);Rgo=r(lrt,"maskformer"),lrt.forEach(t),Pgo=r(xAe," \u2014 "),yI=n(xAe,"A",{href:!0});var irt=s(yI);Bgo=r(irt,"MaskFormerFeatureExtractor"),irt.forEach(t),Igo=r(xAe," (MaskFormer model)"),xAe.forEach(t),Ngo=i(K),kh=n(K,"LI",{});var $Ae=s(kh);xse=n($Ae,"STRONG",{});var drt=s(xse);qgo=r(drt,"mctct"),drt.forEach(t),jgo=r($Ae," \u2014 "),xI=n($Ae,"A",{href:!0});var crt=s(xI);Dgo=r(crt,"MCTCTFeatureExtractor"),crt.forEach(t),Ggo=r($Ae," (M-CTC-T model)"),$Ae.forEach(t),Ogo=i(K),Sh=n(K,"LI",{});var kAe=s(Sh);$se=n(kAe,"STRONG",{});var frt=s($se);Vgo=r(frt,"mobilevit"),frt.forEach(t),Xgo=r(kAe," \u2014 "),$I=n(kAe,"A",{href:!0});var mrt=s($I);zgo=r(mrt,"MobileViTFeatureExtractor"),mrt.forEach(t),Wgo=r(kAe," (MobileViT model)"),kAe.forEach(t),Qgo=i(K),Rh=n(K,"LI",{});var SAe=s(Rh);kse=n(SAe,"STRONG",{});var grt=s(kse);Hgo=r(grt,"perceiver"),grt.forEach(t),Ugo=r(SAe," \u2014 "),kI=n(SAe,"A",{href:!0});var hrt=s(kI);Jgo=r(hrt,"PerceiverFeatureExtractor"),hrt.forEach(t),Ygo=r(SAe," (Perceiver model)"),SAe.forEach(t),Kgo=i(K),Ph=n(K,"LI",{});var RAe=s(Ph);Sse=n(RAe,"STRONG",{});var prt=s(Sse);Zgo=r(prt,"poolformer"),prt.forEach(t),eho=r(RAe," \u2014 "),SI=n(RAe,"A",{href:!0});var _rt=s(SI);oho=r(_rt,"PoolFormerFeatureExtractor"),_rt.forEach(t),rho=r(RAe," (PoolFormer model)"),RAe.forEach(t),tho=i(K),Bh=n(K,"LI",{});var PAe=s(Bh);Rse=n(PAe,"STRONG",{});var urt=s(Rse);aho=r(urt,"regnet"),urt.forEach(t),nho=r(PAe," \u2014 "),RI=n(PAe,"A",{href:!0});var brt=s(RI);sho=r(brt,"ConvNextFeatureExtractor"),brt.forEach(t),lho=r(PAe," (RegNet model)"),PAe.forEach(t),iho=i(K),Ih=n(K,"LI",{});var BAe=s(Ih);Pse=n(BAe,"STRONG",{});var vrt=s(Pse);dho=r(vrt,"resnet"),vrt.forEach(t),cho=r(BAe," \u2014 "),PI=n(BAe,"A",{href:!0});var Frt=s(PI);fho=r(Frt,"ConvNextFeatureExtractor"),Frt.forEach(t),mho=r(BAe," (ResNet model)"),BAe.forEach(t),gho=i(K),Nh=n(K,"LI",{});var IAe=s(Nh);Bse=n(IAe,"STRONG",{});var Trt=s(Bse);hho=r(Trt,"segformer"),Trt.forEach(t),pho=r(IAe," \u2014 "),BI=n(IAe,"A",{href:!0});var Mrt=s(BI);_ho=r(Mrt,"SegformerFeatureExtractor"),Mrt.forEach(t),uho=r(IAe," (SegFormer model)"),IAe.forEach(t),bho=i(K),qh=n(K,"LI",{});var NAe=s(qh);Ise=n(NAe,"STRONG",{});var Ert=s(Ise);vho=r(Ert,"speech_to_text"),Ert.forEach(t),Fho=r(NAe," \u2014 "),II=n(NAe,"A",{href:!0});var Crt=s(II);Tho=r(Crt,"Speech2TextFeatureExtractor"),Crt.forEach(t),Mho=r(NAe," (Speech2Text model)"),NAe.forEach(t),Eho=i(K),jh=n(K,"LI",{});var qAe=s(jh);Nse=n(qAe,"STRONG",{});var wrt=s(Nse);Cho=r(wrt,"swin"),wrt.forEach(t),who=r(qAe," \u2014 "),NI=n(qAe,"A",{href:!0});var Art=s(NI);Aho=r(Art,"ViTFeatureExtractor"),Art.forEach(t),Lho=r(qAe," (Swin Transformer model)"),qAe.forEach(t),yho=i(K),Dh=n(K,"LI",{});var jAe=s(Dh);qse=n(jAe,"STRONG",{});var Lrt=s(qse);xho=r(Lrt,"van"),Lrt.forEach(t),$ho=r(jAe," \u2014 "),qI=n(jAe,"A",{href:!0});var yrt=s(qI);kho=r(yrt,"ConvNextFeatureExtractor"),yrt.forEach(t),Sho=r(jAe," (VAN model)"),jAe.forEach(t),Rho=i(K),Gh=n(K,"LI",{});var DAe=s(Gh);jse=n(DAe,"STRONG",{});var xrt=s(jse);Pho=r(xrt,"vit"),xrt.forEach(t),Bho=r(DAe," \u2014 "),jI=n(DAe,"A",{href:!0});var $rt=s(jI);Iho=r($rt,"ViTFeatureExtractor"),$rt.forEach(t),Nho=r(DAe," (ViT model)"),DAe.forEach(t),qho=i(K),Oh=n(K,"LI",{});var GAe=s(Oh);Dse=n(GAe,"STRONG",{});var krt=s(Dse);jho=r(krt,"vit_mae"),krt.forEach(t),Dho=r(GAe," \u2014 "),DI=n(GAe,"A",{href:!0});var Srt=s(DI);Gho=r(Srt,"ViTFeatureExtractor"),Srt.forEach(t),Oho=r(GAe," (ViTMAE model)"),GAe.forEach(t),Vho=i(K),Vh=n(K,"LI",{});var OAe=s(Vh);Gse=n(OAe,"STRONG",{});var Rrt=s(Gse);Xho=r(Rrt,"wav2vec2"),Rrt.forEach(t),zho=r(OAe," \u2014 "),GI=n(OAe,"A",{href:!0});var Prt=s(GI);Who=r(Prt,"Wav2Vec2FeatureExtractor"),Prt.forEach(t),Qho=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),Hho=i(K),Xh=n(K,"LI",{});var VAe=s(Xh);Ose=n(VAe,"STRONG",{});var Brt=s(Ose);Uho=r(Brt,"wav2vec2-conformer"),Brt.forEach(t),Jho=r(VAe," \u2014 "),OI=n(VAe,"A",{href:!0});var Irt=s(OI);Yho=r(Irt,"Wav2Vec2FeatureExtractor"),Irt.forEach(t),Kho=r(VAe," (Wav2Vec2-Conformer model)"),VAe.forEach(t),Zho=i(K),zh=n(K,"LI",{});var XAe=s(zh);Vse=n(XAe,"STRONG",{});var Nrt=s(Vse);epo=r(Nrt,"yolos"),Nrt.forEach(t),opo=r(XAe," \u2014 "),VI=n(XAe,"A",{href:!0});var qrt=s(VI);rpo=r(qrt,"YolosFeatureExtractor"),qrt.forEach(t),tpo=r(XAe," (YOLOS model)"),XAe.forEach(t),K.forEach(t),apo=i(ea),T(Wh.$$.fragment,ea),npo=i(ea),T(Qh.$$.fragment,ea),ea.forEach(t),spo=i(Ds),Hh=n(Ds,"DIV",{class:!0});var UGe=s(Hh);T(pL.$$.fragment,UGe),lpo=i(UGe),Xse=n(UGe,"P",{});var jrt=s(Xse);ipo=r(jrt,"Register a new feature extractor for this class."),jrt.forEach(t),UGe.forEach(t),Ds.forEach(t),Hje=i(f),wi=n(f,"H2",{class:!0});var JGe=s(wi);Uh=n(JGe,"A",{id:!0,class:!0,href:!0});var Drt=s(Uh);zse=n(Drt,"SPAN",{});var Grt=s(zse);T(_L.$$.fragment,Grt),Grt.forEach(t),Drt.forEach(t),dpo=i(JGe),Wse=n(JGe,"SPAN",{});var Ort=s(Wse);cpo=r(Ort,"AutoProcessor"),Ort.forEach(t),JGe.forEach(t),Uje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(uL.$$.fragment,Gs),fpo=i(Gs),bL=n(Gs,"P",{});var YGe=s(bL);mpo=r(YGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),XI=n(YGe,"A",{href:!0});var Vrt=s(XI);gpo=r(Vrt,"AutoProcessor.from_pretrained()"),Vrt.forEach(t),hpo=r(YGe," class method."),YGe.forEach(t),ppo=i(Gs),vL=n(Gs,"P",{});var KGe=s(vL);_po=r(KGe,"This class cannot be instantiated directly using "),Qse=n(KGe,"CODE",{});var Xrt=s(Qse);upo=r(Xrt,"__init__()"),Xrt.forEach(t),bpo=r(KGe," (throws an error)."),KGe.forEach(t),vpo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var oa=s(Ue);T(FL.$$.fragment,oa),Fpo=i(oa),Hse=n(oa,"P",{});var zrt=s(Hse);Tpo=r(zrt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zrt.forEach(t),Mpo=i(oa),Ai=n(oa,"P",{});var iee=s(Ai);Epo=r(iee,"The processor class to instantiate is selected based on the "),Use=n(iee,"CODE",{});var Wrt=s(Use);Cpo=r(Wrt,"model_type"),Wrt.forEach(t),wpo=r(iee,` property of the config object (either
passed as an argument or loaded from `),Jse=n(iee,"CODE",{});var Qrt=s(Jse);Apo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),Lpo=r(iee," if possible):"),iee.forEach(t),ypo=i(oa),he=n(oa,"UL",{});var be=s(he);Jh=n(be,"LI",{});var zAe=s(Jh);Yse=n(zAe,"STRONG",{});var Hrt=s(Yse);xpo=r(Hrt,"clip"),Hrt.forEach(t),$po=r(zAe," \u2014 "),zI=n(zAe,"A",{href:!0});var Urt=s(zI);kpo=r(Urt,"CLIPProcessor"),Urt.forEach(t),Spo=r(zAe," (CLIP model)"),zAe.forEach(t),Rpo=i(be),Yh=n(be,"LI",{});var WAe=s(Yh);Kse=n(WAe,"STRONG",{});var Jrt=s(Kse);Ppo=r(Jrt,"flava"),Jrt.forEach(t),Bpo=r(WAe," \u2014 "),Zse=n(WAe,"CODE",{});var Yrt=s(Zse);Ipo=r(Yrt,"FLAVAProcessor"),Yrt.forEach(t),Npo=r(WAe," (FLAVA model)"),WAe.forEach(t),qpo=i(be),Kh=n(be,"LI",{});var QAe=s(Kh);ele=n(QAe,"STRONG",{});var Krt=s(ele);jpo=r(Krt,"layoutlmv2"),Krt.forEach(t),Dpo=r(QAe," \u2014 "),WI=n(QAe,"A",{href:!0});var Zrt=s(WI);Gpo=r(Zrt,"LayoutLMv2Processor"),Zrt.forEach(t),Opo=r(QAe," (LayoutLMv2 model)"),QAe.forEach(t),Vpo=i(be),Zh=n(be,"LI",{});var HAe=s(Zh);ole=n(HAe,"STRONG",{});var ett=s(ole);Xpo=r(ett,"layoutlmv3"),ett.forEach(t),zpo=r(HAe," \u2014 "),QI=n(HAe,"A",{href:!0});var ott=s(QI);Wpo=r(ott,"LayoutLMv3Processor"),ott.forEach(t),Qpo=r(HAe," (LayoutLMv3 model)"),HAe.forEach(t),Hpo=i(be),ep=n(be,"LI",{});var UAe=s(ep);rle=n(UAe,"STRONG",{});var rtt=s(rle);Upo=r(rtt,"layoutxlm"),rtt.forEach(t),Jpo=r(UAe," \u2014 "),HI=n(UAe,"A",{href:!0});var ttt=s(HI);Ypo=r(ttt,"LayoutXLMProcessor"),ttt.forEach(t),Kpo=r(UAe," (LayoutXLM model)"),UAe.forEach(t),Zpo=i(be),op=n(be,"LI",{});var JAe=s(op);tle=n(JAe,"STRONG",{});var att=s(tle);e_o=r(att,"sew"),att.forEach(t),o_o=r(JAe," \u2014 "),UI=n(JAe,"A",{href:!0});var ntt=s(UI);r_o=r(ntt,"Wav2Vec2Processor"),ntt.forEach(t),t_o=r(JAe," (SEW model)"),JAe.forEach(t),a_o=i(be),rp=n(be,"LI",{});var YAe=s(rp);ale=n(YAe,"STRONG",{});var stt=s(ale);n_o=r(stt,"sew-d"),stt.forEach(t),s_o=r(YAe," \u2014 "),JI=n(YAe,"A",{href:!0});var ltt=s(JI);l_o=r(ltt,"Wav2Vec2Processor"),ltt.forEach(t),i_o=r(YAe," (SEW-D model)"),YAe.forEach(t),d_o=i(be),tp=n(be,"LI",{});var KAe=s(tp);nle=n(KAe,"STRONG",{});var itt=s(nle);c_o=r(itt,"speech_to_text"),itt.forEach(t),f_o=r(KAe," \u2014 "),YI=n(KAe,"A",{href:!0});var dtt=s(YI);m_o=r(dtt,"Speech2TextProcessor"),dtt.forEach(t),g_o=r(KAe," (Speech2Text model)"),KAe.forEach(t),h_o=i(be),ap=n(be,"LI",{});var ZAe=s(ap);sle=n(ZAe,"STRONG",{});var ctt=s(sle);p_o=r(ctt,"speech_to_text_2"),ctt.forEach(t),__o=r(ZAe," \u2014 "),KI=n(ZAe,"A",{href:!0});var ftt=s(KI);u_o=r(ftt,"Speech2Text2Processor"),ftt.forEach(t),b_o=r(ZAe," (Speech2Text2 model)"),ZAe.forEach(t),v_o=i(be),np=n(be,"LI",{});var eLe=s(np);lle=n(eLe,"STRONG",{});var mtt=s(lle);F_o=r(mtt,"trocr"),mtt.forEach(t),T_o=r(eLe," \u2014 "),ZI=n(eLe,"A",{href:!0});var gtt=s(ZI);M_o=r(gtt,"TrOCRProcessor"),gtt.forEach(t),E_o=r(eLe," (TrOCR model)"),eLe.forEach(t),C_o=i(be),sp=n(be,"LI",{});var oLe=s(sp);ile=n(oLe,"STRONG",{});var htt=s(ile);w_o=r(htt,"unispeech"),htt.forEach(t),A_o=r(oLe," \u2014 "),eN=n(oLe,"A",{href:!0});var ptt=s(eN);L_o=r(ptt,"Wav2Vec2Processor"),ptt.forEach(t),y_o=r(oLe," (UniSpeech model)"),oLe.forEach(t),x_o=i(be),lp=n(be,"LI",{});var rLe=s(lp);dle=n(rLe,"STRONG",{});var _tt=s(dle);$_o=r(_tt,"unispeech-sat"),_tt.forEach(t),k_o=r(rLe," \u2014 "),oN=n(rLe,"A",{href:!0});var utt=s(oN);S_o=r(utt,"Wav2Vec2Processor"),utt.forEach(t),R_o=r(rLe," (UniSpeechSat model)"),rLe.forEach(t),P_o=i(be),ip=n(be,"LI",{});var tLe=s(ip);cle=n(tLe,"STRONG",{});var btt=s(cle);B_o=r(btt,"vilt"),btt.forEach(t),I_o=r(tLe," \u2014 "),rN=n(tLe,"A",{href:!0});var vtt=s(rN);N_o=r(vtt,"ViltProcessor"),vtt.forEach(t),q_o=r(tLe," (ViLT model)"),tLe.forEach(t),j_o=i(be),dp=n(be,"LI",{});var aLe=s(dp);fle=n(aLe,"STRONG",{});var Ftt=s(fle);D_o=r(Ftt,"vision-text-dual-encoder"),Ftt.forEach(t),G_o=r(aLe," \u2014 "),tN=n(aLe,"A",{href:!0});var Ttt=s(tN);O_o=r(Ttt,"VisionTextDualEncoderProcessor"),Ttt.forEach(t),V_o=r(aLe," (VisionTextDualEncoder model)"),aLe.forEach(t),X_o=i(be),cp=n(be,"LI",{});var nLe=s(cp);mle=n(nLe,"STRONG",{});var Mtt=s(mle);z_o=r(Mtt,"wav2vec2"),Mtt.forEach(t),W_o=r(nLe," \u2014 "),aN=n(nLe,"A",{href:!0});var Ett=s(aN);Q_o=r(Ett,"Wav2Vec2Processor"),Ett.forEach(t),H_o=r(nLe," (Wav2Vec2 model)"),nLe.forEach(t),U_o=i(be),fp=n(be,"LI",{});var sLe=s(fp);gle=n(sLe,"STRONG",{});var Ctt=s(gle);J_o=r(Ctt,"wav2vec2-conformer"),Ctt.forEach(t),Y_o=r(sLe," \u2014 "),nN=n(sLe,"A",{href:!0});var wtt=s(nN);K_o=r(wtt,"Wav2Vec2Processor"),wtt.forEach(t),Z_o=r(sLe," (Wav2Vec2-Conformer model)"),sLe.forEach(t),euo=i(be),mp=n(be,"LI",{});var lLe=s(mp);hle=n(lLe,"STRONG",{});var Att=s(hle);ouo=r(Att,"wavlm"),Att.forEach(t),ruo=r(lLe," \u2014 "),sN=n(lLe,"A",{href:!0});var Ltt=s(sN);tuo=r(Ltt,"Wav2Vec2Processor"),Ltt.forEach(t),auo=r(lLe," (WavLM model)"),lLe.forEach(t),be.forEach(t),nuo=i(oa),T(gp.$$.fragment,oa),suo=i(oa),T(hp.$$.fragment,oa),oa.forEach(t),luo=i(Gs),pp=n(Gs,"DIV",{class:!0});var ZGe=s(pp);T(TL.$$.fragment,ZGe),iuo=i(ZGe),ple=n(ZGe,"P",{});var ytt=s(ple);duo=r(ytt,"Register a new processor for this class."),ytt.forEach(t),ZGe.forEach(t),Gs.forEach(t),Jje=i(f),Li=n(f,"H2",{class:!0});var eOe=s(Li);_p=n(eOe,"A",{id:!0,class:!0,href:!0});var xtt=s(_p);_le=n(xtt,"SPAN",{});var $tt=s(_le);T(ML.$$.fragment,$tt),$tt.forEach(t),xtt.forEach(t),cuo=i(eOe),ule=n(eOe,"SPAN",{});var ktt=s(ule);fuo=r(ktt,"AutoModel"),ktt.forEach(t),eOe.forEach(t),Yje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(EL.$$.fragment,Os),muo=i(Os),yi=n(Os,"P",{});var dee=s(yi);guo=r(dee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lN=n(dee,"A",{href:!0});var Stt=s(lN);huo=r(Stt,"from_pretrained()"),Stt.forEach(t),puo=r(dee," class method or the "),iN=n(dee,"A",{href:!0});var Rtt=s(iN);_uo=r(Rtt,"from_config()"),Rtt.forEach(t),uuo=r(dee,` class
method.`),dee.forEach(t),buo=i(Os),CL=n(Os,"P",{});var oOe=s(CL);vuo=r(oOe,"This class cannot be instantiated directly using "),ble=n(oOe,"CODE",{});var Ptt=s(ble);Fuo=r(Ptt,"__init__()"),Ptt.forEach(t),Tuo=r(oOe," (throws an error)."),oOe.forEach(t),Muo=i(Os),at=n(Os,"DIV",{class:!0});var o6=s(at);T(wL.$$.fragment,o6),Euo=i(o6),vle=n(o6,"P",{});var Btt=s(vle);Cuo=r(Btt,"Instantiates one of the base model classes of the library from a configuration."),Btt.forEach(t),wuo=i(o6),xi=n(o6,"P",{});var cee=s(xi);Auo=r(cee,`Note:
Loading a model from its configuration file does `),Fle=n(cee,"STRONG",{});var Itt=s(Fle);Luo=r(Itt,"not"),Itt.forEach(t),yuo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(cee,"A",{href:!0});var Ntt=s(dN);xuo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),$uo=r(cee," to load the model weights."),cee.forEach(t),kuo=i(o6),T(up.$$.fragment,o6),o6.forEach(t),Suo=i(Os),Je=n(Os,"DIV",{class:!0});var ra=s(Je);T(AL.$$.fragment,ra),Ruo=i(ra),Tle=n(ra,"P",{});var qtt=s(Tle);Puo=r(qtt,"Instantiate one of the base model classes of the library from a pretrained model."),qtt.forEach(t),Buo=i(ra),xa=n(ra,"P",{});var r6=s(xa);Iuo=r(r6,"The model class to instantiate is selected based on the "),Mle=n(r6,"CODE",{});var jtt=s(Mle);Nuo=r(jtt,"model_type"),jtt.forEach(t),quo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Ele=n(r6,"CODE",{});var Dtt=s(Ele);juo=r(Dtt,"pretrained_model_name_or_path"),Dtt.forEach(t),Duo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=n(r6,"CODE",{});var Gtt=s(Cle);Guo=r(Gtt,"pretrained_model_name_or_path"),Gtt.forEach(t),Ouo=r(r6,":"),r6.forEach(t),Vuo=i(ra),y=n(ra,"UL",{});var $=s(y);bp=n($,"LI",{});var iLe=s(bp);wle=n(iLe,"STRONG",{});var Ott=s(wle);Xuo=r(Ott,"albert"),Ott.forEach(t),zuo=r(iLe," \u2014 "),cN=n(iLe,"A",{href:!0});var Vtt=s(cN);Wuo=r(Vtt,"AlbertModel"),Vtt.forEach(t),Quo=r(iLe," (ALBERT model)"),iLe.forEach(t),Huo=i($),vp=n($,"LI",{});var dLe=s(vp);Ale=n(dLe,"STRONG",{});var Xtt=s(Ale);Uuo=r(Xtt,"bart"),Xtt.forEach(t),Juo=r(dLe," \u2014 "),fN=n(dLe,"A",{href:!0});var ztt=s(fN);Yuo=r(ztt,"BartModel"),ztt.forEach(t),Kuo=r(dLe," (BART model)"),dLe.forEach(t),Zuo=i($),Fp=n($,"LI",{});var cLe=s(Fp);Lle=n(cLe,"STRONG",{});var Wtt=s(Lle);e1o=r(Wtt,"beit"),Wtt.forEach(t),o1o=r(cLe," \u2014 "),mN=n(cLe,"A",{href:!0});var Qtt=s(mN);r1o=r(Qtt,"BeitModel"),Qtt.forEach(t),t1o=r(cLe," (BEiT model)"),cLe.forEach(t),a1o=i($),Tp=n($,"LI",{});var fLe=s(Tp);yle=n(fLe,"STRONG",{});var Htt=s(yle);n1o=r(Htt,"bert"),Htt.forEach(t),s1o=r(fLe," \u2014 "),gN=n(fLe,"A",{href:!0});var Utt=s(gN);l1o=r(Utt,"BertModel"),Utt.forEach(t),i1o=r(fLe," (BERT model)"),fLe.forEach(t),d1o=i($),Mp=n($,"LI",{});var mLe=s(Mp);xle=n(mLe,"STRONG",{});var Jtt=s(xle);c1o=r(Jtt,"bert-generation"),Jtt.forEach(t),f1o=r(mLe," \u2014 "),hN=n(mLe,"A",{href:!0});var Ytt=s(hN);m1o=r(Ytt,"BertGenerationEncoder"),Ytt.forEach(t),g1o=r(mLe," (Bert Generation model)"),mLe.forEach(t),h1o=i($),Ep=n($,"LI",{});var gLe=s(Ep);$le=n(gLe,"STRONG",{});var Ktt=s($le);p1o=r(Ktt,"big_bird"),Ktt.forEach(t),_1o=r(gLe," \u2014 "),pN=n(gLe,"A",{href:!0});var Ztt=s(pN);u1o=r(Ztt,"BigBirdModel"),Ztt.forEach(t),b1o=r(gLe," (BigBird model)"),gLe.forEach(t),v1o=i($),Cp=n($,"LI",{});var hLe=s(Cp);kle=n(hLe,"STRONG",{});var eat=s(kle);F1o=r(eat,"bigbird_pegasus"),eat.forEach(t),T1o=r(hLe," \u2014 "),_N=n(hLe,"A",{href:!0});var oat=s(_N);M1o=r(oat,"BigBirdPegasusModel"),oat.forEach(t),E1o=r(hLe," (BigBird-Pegasus model)"),hLe.forEach(t),C1o=i($),wp=n($,"LI",{});var pLe=s(wp);Sle=n(pLe,"STRONG",{});var rat=s(Sle);w1o=r(rat,"blenderbot"),rat.forEach(t),A1o=r(pLe," \u2014 "),uN=n(pLe,"A",{href:!0});var tat=s(uN);L1o=r(tat,"BlenderbotModel"),tat.forEach(t),y1o=r(pLe," (Blenderbot model)"),pLe.forEach(t),x1o=i($),Ap=n($,"LI",{});var _Le=s(Ap);Rle=n(_Le,"STRONG",{});var aat=s(Rle);$1o=r(aat,"blenderbot-small"),aat.forEach(t),k1o=r(_Le," \u2014 "),bN=n(_Le,"A",{href:!0});var nat=s(bN);S1o=r(nat,"BlenderbotSmallModel"),nat.forEach(t),R1o=r(_Le," (BlenderbotSmall model)"),_Le.forEach(t),P1o=i($),Lp=n($,"LI",{});var uLe=s(Lp);Ple=n(uLe,"STRONG",{});var sat=s(Ple);B1o=r(sat,"bloom"),sat.forEach(t),I1o=r(uLe," \u2014 "),vN=n(uLe,"A",{href:!0});var lat=s(vN);N1o=r(lat,"BloomModel"),lat.forEach(t),q1o=r(uLe," (BLOOM model)"),uLe.forEach(t),j1o=i($),yp=n($,"LI",{});var bLe=s(yp);Ble=n(bLe,"STRONG",{});var iat=s(Ble);D1o=r(iat,"camembert"),iat.forEach(t),G1o=r(bLe," \u2014 "),FN=n(bLe,"A",{href:!0});var dat=s(FN);O1o=r(dat,"CamembertModel"),dat.forEach(t),V1o=r(bLe," (CamemBERT model)"),bLe.forEach(t),X1o=i($),xp=n($,"LI",{});var vLe=s(xp);Ile=n(vLe,"STRONG",{});var cat=s(Ile);z1o=r(cat,"canine"),cat.forEach(t),W1o=r(vLe," \u2014 "),TN=n(vLe,"A",{href:!0});var fat=s(TN);Q1o=r(fat,"CanineModel"),fat.forEach(t),H1o=r(vLe," (CANINE model)"),vLe.forEach(t),U1o=i($),$p=n($,"LI",{});var FLe=s($p);Nle=n(FLe,"STRONG",{});var mat=s(Nle);J1o=r(mat,"clip"),mat.forEach(t),Y1o=r(FLe," \u2014 "),MN=n(FLe,"A",{href:!0});var gat=s(MN);K1o=r(gat,"CLIPModel"),gat.forEach(t),Z1o=r(FLe," (CLIP model)"),FLe.forEach(t),ebo=i($),kp=n($,"LI",{});var TLe=s(kp);qle=n(TLe,"STRONG",{});var hat=s(qle);obo=r(hat,"convbert"),hat.forEach(t),rbo=r(TLe," \u2014 "),EN=n(TLe,"A",{href:!0});var pat=s(EN);tbo=r(pat,"ConvBertModel"),pat.forEach(t),abo=r(TLe," (ConvBERT model)"),TLe.forEach(t),nbo=i($),Sp=n($,"LI",{});var MLe=s(Sp);jle=n(MLe,"STRONG",{});var _at=s(jle);sbo=r(_at,"convnext"),_at.forEach(t),lbo=r(MLe," \u2014 "),CN=n(MLe,"A",{href:!0});var uat=s(CN);ibo=r(uat,"ConvNextModel"),uat.forEach(t),dbo=r(MLe," (ConvNeXT model)"),MLe.forEach(t),cbo=i($),Rp=n($,"LI",{});var ELe=s(Rp);Dle=n(ELe,"STRONG",{});var bat=s(Dle);fbo=r(bat,"ctrl"),bat.forEach(t),mbo=r(ELe," \u2014 "),wN=n(ELe,"A",{href:!0});var vat=s(wN);gbo=r(vat,"CTRLModel"),vat.forEach(t),hbo=r(ELe," (CTRL model)"),ELe.forEach(t),pbo=i($),Pp=n($,"LI",{});var CLe=s(Pp);Gle=n(CLe,"STRONG",{});var Fat=s(Gle);_bo=r(Fat,"cvt"),Fat.forEach(t),ubo=r(CLe," \u2014 "),AN=n(CLe,"A",{href:!0});var Tat=s(AN);bbo=r(Tat,"CvtModel"),Tat.forEach(t),vbo=r(CLe," (CvT model)"),CLe.forEach(t),Fbo=i($),Bp=n($,"LI",{});var wLe=s(Bp);Ole=n(wLe,"STRONG",{});var Mat=s(Ole);Tbo=r(Mat,"data2vec-audio"),Mat.forEach(t),Mbo=r(wLe," \u2014 "),LN=n(wLe,"A",{href:!0});var Eat=s(LN);Ebo=r(Eat,"Data2VecAudioModel"),Eat.forEach(t),Cbo=r(wLe," (Data2VecAudio model)"),wLe.forEach(t),wbo=i($),Ip=n($,"LI",{});var ALe=s(Ip);Vle=n(ALe,"STRONG",{});var Cat=s(Vle);Abo=r(Cat,"data2vec-text"),Cat.forEach(t),Lbo=r(ALe," \u2014 "),yN=n(ALe,"A",{href:!0});var wat=s(yN);ybo=r(wat,"Data2VecTextModel"),wat.forEach(t),xbo=r(ALe," (Data2VecText model)"),ALe.forEach(t),$bo=i($),Np=n($,"LI",{});var LLe=s(Np);Xle=n(LLe,"STRONG",{});var Aat=s(Xle);kbo=r(Aat,"data2vec-vision"),Aat.forEach(t),Sbo=r(LLe," \u2014 "),xN=n(LLe,"A",{href:!0});var Lat=s(xN);Rbo=r(Lat,"Data2VecVisionModel"),Lat.forEach(t),Pbo=r(LLe," (Data2VecVision model)"),LLe.forEach(t),Bbo=i($),qp=n($,"LI",{});var yLe=s(qp);zle=n(yLe,"STRONG",{});var yat=s(zle);Ibo=r(yat,"deberta"),yat.forEach(t),Nbo=r(yLe," \u2014 "),$N=n(yLe,"A",{href:!0});var xat=s($N);qbo=r(xat,"DebertaModel"),xat.forEach(t),jbo=r(yLe," (DeBERTa model)"),yLe.forEach(t),Dbo=i($),jp=n($,"LI",{});var xLe=s(jp);Wle=n(xLe,"STRONG",{});var $at=s(Wle);Gbo=r($at,"deberta-v2"),$at.forEach(t),Obo=r(xLe," \u2014 "),kN=n(xLe,"A",{href:!0});var kat=s(kN);Vbo=r(kat,"DebertaV2Model"),kat.forEach(t),Xbo=r(xLe," (DeBERTa-v2 model)"),xLe.forEach(t),zbo=i($),Dp=n($,"LI",{});var $Le=s(Dp);Qle=n($Le,"STRONG",{});var Sat=s(Qle);Wbo=r(Sat,"decision_transformer"),Sat.forEach(t),Qbo=r($Le," \u2014 "),SN=n($Le,"A",{href:!0});var Rat=s(SN);Hbo=r(Rat,"DecisionTransformerModel"),Rat.forEach(t),Ubo=r($Le," (Decision Transformer model)"),$Le.forEach(t),Jbo=i($),Gp=n($,"LI",{});var kLe=s(Gp);Hle=n(kLe,"STRONG",{});var Pat=s(Hle);Ybo=r(Pat,"deit"),Pat.forEach(t),Kbo=r(kLe," \u2014 "),RN=n(kLe,"A",{href:!0});var Bat=s(RN);Zbo=r(Bat,"DeiTModel"),Bat.forEach(t),e2o=r(kLe," (DeiT model)"),kLe.forEach(t),o2o=i($),Op=n($,"LI",{});var SLe=s(Op);Ule=n(SLe,"STRONG",{});var Iat=s(Ule);r2o=r(Iat,"detr"),Iat.forEach(t),t2o=r(SLe," \u2014 "),PN=n(SLe,"A",{href:!0});var Nat=s(PN);a2o=r(Nat,"DetrModel"),Nat.forEach(t),n2o=r(SLe," (DETR model)"),SLe.forEach(t),s2o=i($),Vp=n($,"LI",{});var RLe=s(Vp);Jle=n(RLe,"STRONG",{});var qat=s(Jle);l2o=r(qat,"distilbert"),qat.forEach(t),i2o=r(RLe," \u2014 "),BN=n(RLe,"A",{href:!0});var jat=s(BN);d2o=r(jat,"DistilBertModel"),jat.forEach(t),c2o=r(RLe," (DistilBERT model)"),RLe.forEach(t),f2o=i($),Xp=n($,"LI",{});var PLe=s(Xp);Yle=n(PLe,"STRONG",{});var Dat=s(Yle);m2o=r(Dat,"dpr"),Dat.forEach(t),g2o=r(PLe," \u2014 "),IN=n(PLe,"A",{href:!0});var Gat=s(IN);h2o=r(Gat,"DPRQuestionEncoder"),Gat.forEach(t),p2o=r(PLe," (DPR model)"),PLe.forEach(t),_2o=i($),zp=n($,"LI",{});var BLe=s(zp);Kle=n(BLe,"STRONG",{});var Oat=s(Kle);u2o=r(Oat,"dpt"),Oat.forEach(t),b2o=r(BLe," \u2014 "),NN=n(BLe,"A",{href:!0});var Vat=s(NN);v2o=r(Vat,"DPTModel"),Vat.forEach(t),F2o=r(BLe," (DPT model)"),BLe.forEach(t),T2o=i($),Wp=n($,"LI",{});var ILe=s(Wp);Zle=n(ILe,"STRONG",{});var Xat=s(Zle);M2o=r(Xat,"electra"),Xat.forEach(t),E2o=r(ILe," \u2014 "),qN=n(ILe,"A",{href:!0});var zat=s(qN);C2o=r(zat,"ElectraModel"),zat.forEach(t),w2o=r(ILe," (ELECTRA model)"),ILe.forEach(t),A2o=i($),Qp=n($,"LI",{});var NLe=s(Qp);eie=n(NLe,"STRONG",{});var Wat=s(eie);L2o=r(Wat,"flaubert"),Wat.forEach(t),y2o=r(NLe," \u2014 "),jN=n(NLe,"A",{href:!0});var Qat=s(jN);x2o=r(Qat,"FlaubertModel"),Qat.forEach(t),$2o=r(NLe," (FlauBERT model)"),NLe.forEach(t),k2o=i($),Hp=n($,"LI",{});var qLe=s(Hp);oie=n(qLe,"STRONG",{});var Hat=s(oie);S2o=r(Hat,"flava"),Hat.forEach(t),R2o=r(qLe," \u2014 "),DN=n(qLe,"A",{href:!0});var Uat=s(DN);P2o=r(Uat,"FlavaModel"),Uat.forEach(t),B2o=r(qLe," (FLAVA model)"),qLe.forEach(t),I2o=i($),Up=n($,"LI",{});var jLe=s(Up);rie=n(jLe,"STRONG",{});var Jat=s(rie);N2o=r(Jat,"fnet"),Jat.forEach(t),q2o=r(jLe," \u2014 "),GN=n(jLe,"A",{href:!0});var Yat=s(GN);j2o=r(Yat,"FNetModel"),Yat.forEach(t),D2o=r(jLe," (FNet model)"),jLe.forEach(t),G2o=i($),Jp=n($,"LI",{});var DLe=s(Jp);tie=n(DLe,"STRONG",{});var Kat=s(tie);O2o=r(Kat,"fsmt"),Kat.forEach(t),V2o=r(DLe," \u2014 "),ON=n(DLe,"A",{href:!0});var Zat=s(ON);X2o=r(Zat,"FSMTModel"),Zat.forEach(t),z2o=r(DLe," (FairSeq Machine-Translation model)"),DLe.forEach(t),W2o=i($),Ps=n($,"LI",{});var fk=s(Ps);aie=n(fk,"STRONG",{});var ent=s(aie);Q2o=r(ent,"funnel"),ent.forEach(t),H2o=r(fk," \u2014 "),VN=n(fk,"A",{href:!0});var ont=s(VN);U2o=r(ont,"FunnelModel"),ont.forEach(t),J2o=r(fk," or "),XN=n(fk,"A",{href:!0});var rnt=s(XN);Y2o=r(rnt,"FunnelBaseModel"),rnt.forEach(t),K2o=r(fk," (Funnel Transformer model)"),fk.forEach(t),Z2o=i($),Yp=n($,"LI",{});var GLe=s(Yp);nie=n(GLe,"STRONG",{});var tnt=s(nie);e4o=r(tnt,"glpn"),tnt.forEach(t),o4o=r(GLe," \u2014 "),zN=n(GLe,"A",{href:!0});var ant=s(zN);r4o=r(ant,"GLPNModel"),ant.forEach(t),t4o=r(GLe," (GLPN model)"),GLe.forEach(t),a4o=i($),Kp=n($,"LI",{});var OLe=s(Kp);sie=n(OLe,"STRONG",{});var nnt=s(sie);n4o=r(nnt,"gpt2"),nnt.forEach(t),s4o=r(OLe," \u2014 "),WN=n(OLe,"A",{href:!0});var snt=s(WN);l4o=r(snt,"GPT2Model"),snt.forEach(t),i4o=r(OLe," (OpenAI GPT-2 model)"),OLe.forEach(t),d4o=i($),Zp=n($,"LI",{});var VLe=s(Zp);lie=n(VLe,"STRONG",{});var lnt=s(lie);c4o=r(lnt,"gpt_neo"),lnt.forEach(t),f4o=r(VLe," \u2014 "),QN=n(VLe,"A",{href:!0});var int=s(QN);m4o=r(int,"GPTNeoModel"),int.forEach(t),g4o=r(VLe," (GPT Neo model)"),VLe.forEach(t),h4o=i($),e_=n($,"LI",{});var XLe=s(e_);iie=n(XLe,"STRONG",{});var dnt=s(iie);p4o=r(dnt,"gpt_neox"),dnt.forEach(t),_4o=r(XLe," \u2014 "),HN=n(XLe,"A",{href:!0});var cnt=s(HN);u4o=r(cnt,"GPTNeoXModel"),cnt.forEach(t),b4o=r(XLe," (GPT NeoX model)"),XLe.forEach(t),v4o=i($),o_=n($,"LI",{});var zLe=s(o_);die=n(zLe,"STRONG",{});var fnt=s(die);F4o=r(fnt,"gptj"),fnt.forEach(t),T4o=r(zLe," \u2014 "),UN=n(zLe,"A",{href:!0});var mnt=s(UN);M4o=r(mnt,"GPTJModel"),mnt.forEach(t),E4o=r(zLe," (GPT-J model)"),zLe.forEach(t),C4o=i($),r_=n($,"LI",{});var WLe=s(r_);cie=n(WLe,"STRONG",{});var gnt=s(cie);w4o=r(gnt,"hubert"),gnt.forEach(t),A4o=r(WLe," \u2014 "),JN=n(WLe,"A",{href:!0});var hnt=s(JN);L4o=r(hnt,"HubertModel"),hnt.forEach(t),y4o=r(WLe," (Hubert model)"),WLe.forEach(t),x4o=i($),t_=n($,"LI",{});var QLe=s(t_);fie=n(QLe,"STRONG",{});var pnt=s(fie);$4o=r(pnt,"ibert"),pnt.forEach(t),k4o=r(QLe," \u2014 "),YN=n(QLe,"A",{href:!0});var _nt=s(YN);S4o=r(_nt,"IBertModel"),_nt.forEach(t),R4o=r(QLe," (I-BERT model)"),QLe.forEach(t),P4o=i($),a_=n($,"LI",{});var HLe=s(a_);mie=n(HLe,"STRONG",{});var unt=s(mie);B4o=r(unt,"imagegpt"),unt.forEach(t),I4o=r(HLe," \u2014 "),KN=n(HLe,"A",{href:!0});var bnt=s(KN);N4o=r(bnt,"ImageGPTModel"),bnt.forEach(t),q4o=r(HLe," (ImageGPT model)"),HLe.forEach(t),j4o=i($),n_=n($,"LI",{});var ULe=s(n_);gie=n(ULe,"STRONG",{});var vnt=s(gie);D4o=r(vnt,"layoutlm"),vnt.forEach(t),G4o=r(ULe," \u2014 "),ZN=n(ULe,"A",{href:!0});var Fnt=s(ZN);O4o=r(Fnt,"LayoutLMModel"),Fnt.forEach(t),V4o=r(ULe," (LayoutLM model)"),ULe.forEach(t),X4o=i($),s_=n($,"LI",{});var JLe=s(s_);hie=n(JLe,"STRONG",{});var Tnt=s(hie);z4o=r(Tnt,"layoutlmv2"),Tnt.forEach(t),W4o=r(JLe," \u2014 "),eq=n(JLe,"A",{href:!0});var Mnt=s(eq);Q4o=r(Mnt,"LayoutLMv2Model"),Mnt.forEach(t),H4o=r(JLe," (LayoutLMv2 model)"),JLe.forEach(t),U4o=i($),l_=n($,"LI",{});var YLe=s(l_);pie=n(YLe,"STRONG",{});var Ent=s(pie);J4o=r(Ent,"layoutlmv3"),Ent.forEach(t),Y4o=r(YLe," \u2014 "),oq=n(YLe,"A",{href:!0});var Cnt=s(oq);K4o=r(Cnt,"LayoutLMv3Model"),Cnt.forEach(t),Z4o=r(YLe," (LayoutLMv3 model)"),YLe.forEach(t),evo=i($),i_=n($,"LI",{});var KLe=s(i_);_ie=n(KLe,"STRONG",{});var wnt=s(_ie);ovo=r(wnt,"led"),wnt.forEach(t),rvo=r(KLe," \u2014 "),rq=n(KLe,"A",{href:!0});var Ant=s(rq);tvo=r(Ant,"LEDModel"),Ant.forEach(t),avo=r(KLe," (LED model)"),KLe.forEach(t),nvo=i($),d_=n($,"LI",{});var ZLe=s(d_);uie=n(ZLe,"STRONG",{});var Lnt=s(uie);svo=r(Lnt,"levit"),Lnt.forEach(t),lvo=r(ZLe," \u2014 "),tq=n(ZLe,"A",{href:!0});var ynt=s(tq);ivo=r(ynt,"LevitModel"),ynt.forEach(t),dvo=r(ZLe," (LeViT model)"),ZLe.forEach(t),cvo=i($),c_=n($,"LI",{});var eye=s(c_);bie=n(eye,"STRONG",{});var xnt=s(bie);fvo=r(xnt,"longformer"),xnt.forEach(t),mvo=r(eye," \u2014 "),aq=n(eye,"A",{href:!0});var $nt=s(aq);gvo=r($nt,"LongformerModel"),$nt.forEach(t),hvo=r(eye," (Longformer model)"),eye.forEach(t),pvo=i($),f_=n($,"LI",{});var oye=s(f_);vie=n(oye,"STRONG",{});var knt=s(vie);_vo=r(knt,"luke"),knt.forEach(t),uvo=r(oye," \u2014 "),nq=n(oye,"A",{href:!0});var Snt=s(nq);bvo=r(Snt,"LukeModel"),Snt.forEach(t),vvo=r(oye," (LUKE model)"),oye.forEach(t),Fvo=i($),m_=n($,"LI",{});var rye=s(m_);Fie=n(rye,"STRONG",{});var Rnt=s(Fie);Tvo=r(Rnt,"lxmert"),Rnt.forEach(t),Mvo=r(rye," \u2014 "),sq=n(rye,"A",{href:!0});var Pnt=s(sq);Evo=r(Pnt,"LxmertModel"),Pnt.forEach(t),Cvo=r(rye," (LXMERT model)"),rye.forEach(t),wvo=i($),g_=n($,"LI",{});var tye=s(g_);Tie=n(tye,"STRONG",{});var Bnt=s(Tie);Avo=r(Bnt,"m2m_100"),Bnt.forEach(t),Lvo=r(tye," \u2014 "),lq=n(tye,"A",{href:!0});var Int=s(lq);yvo=r(Int,"M2M100Model"),Int.forEach(t),xvo=r(tye," (M2M100 model)"),tye.forEach(t),$vo=i($),h_=n($,"LI",{});var aye=s(h_);Mie=n(aye,"STRONG",{});var Nnt=s(Mie);kvo=r(Nnt,"marian"),Nnt.forEach(t),Svo=r(aye," \u2014 "),iq=n(aye,"A",{href:!0});var qnt=s(iq);Rvo=r(qnt,"MarianModel"),qnt.forEach(t),Pvo=r(aye," (Marian model)"),aye.forEach(t),Bvo=i($),p_=n($,"LI",{});var nye=s(p_);Eie=n(nye,"STRONG",{});var jnt=s(Eie);Ivo=r(jnt,"maskformer"),jnt.forEach(t),Nvo=r(nye," \u2014 "),dq=n(nye,"A",{href:!0});var Dnt=s(dq);qvo=r(Dnt,"MaskFormerModel"),Dnt.forEach(t),jvo=r(nye," (MaskFormer model)"),nye.forEach(t),Dvo=i($),__=n($,"LI",{});var sye=s(__);Cie=n(sye,"STRONG",{});var Gnt=s(Cie);Gvo=r(Gnt,"mbart"),Gnt.forEach(t),Ovo=r(sye," \u2014 "),cq=n(sye,"A",{href:!0});var Ont=s(cq);Vvo=r(Ont,"MBartModel"),Ont.forEach(t),Xvo=r(sye," (mBART model)"),sye.forEach(t),zvo=i($),u_=n($,"LI",{});var lye=s(u_);wie=n(lye,"STRONG",{});var Vnt=s(wie);Wvo=r(Vnt,"mctct"),Vnt.forEach(t),Qvo=r(lye," \u2014 "),fq=n(lye,"A",{href:!0});var Xnt=s(fq);Hvo=r(Xnt,"MCTCTModel"),Xnt.forEach(t),Uvo=r(lye," (M-CTC-T model)"),lye.forEach(t),Jvo=i($),b_=n($,"LI",{});var iye=s(b_);Aie=n(iye,"STRONG",{});var znt=s(Aie);Yvo=r(znt,"megatron-bert"),znt.forEach(t),Kvo=r(iye," \u2014 "),mq=n(iye,"A",{href:!0});var Wnt=s(mq);Zvo=r(Wnt,"MegatronBertModel"),Wnt.forEach(t),e5o=r(iye," (Megatron-BERT model)"),iye.forEach(t),o5o=i($),v_=n($,"LI",{});var dye=s(v_);Lie=n(dye,"STRONG",{});var Qnt=s(Lie);r5o=r(Qnt,"mobilebert"),Qnt.forEach(t),t5o=r(dye," \u2014 "),gq=n(dye,"A",{href:!0});var Hnt=s(gq);a5o=r(Hnt,"MobileBertModel"),Hnt.forEach(t),n5o=r(dye," (MobileBERT model)"),dye.forEach(t),s5o=i($),F_=n($,"LI",{});var cye=s(F_);yie=n(cye,"STRONG",{});var Unt=s(yie);l5o=r(Unt,"mobilevit"),Unt.forEach(t),i5o=r(cye," \u2014 "),hq=n(cye,"A",{href:!0});var Jnt=s(hq);d5o=r(Jnt,"MobileViTModel"),Jnt.forEach(t),c5o=r(cye," (MobileViT model)"),cye.forEach(t),f5o=i($),T_=n($,"LI",{});var fye=s(T_);xie=n(fye,"STRONG",{});var Ynt=s(xie);m5o=r(Ynt,"mpnet"),Ynt.forEach(t),g5o=r(fye," \u2014 "),pq=n(fye,"A",{href:!0});var Knt=s(pq);h5o=r(Knt,"MPNetModel"),Knt.forEach(t),p5o=r(fye," (MPNet model)"),fye.forEach(t),_5o=i($),M_=n($,"LI",{});var mye=s(M_);$ie=n(mye,"STRONG",{});var Znt=s($ie);u5o=r(Znt,"mt5"),Znt.forEach(t),b5o=r(mye," \u2014 "),_q=n(mye,"A",{href:!0});var est=s(_q);v5o=r(est,"MT5Model"),est.forEach(t),F5o=r(mye," (MT5 model)"),mye.forEach(t),T5o=i($),E_=n($,"LI",{});var gye=s(E_);kie=n(gye,"STRONG",{});var ost=s(kie);M5o=r(ost,"nystromformer"),ost.forEach(t),E5o=r(gye," \u2014 "),uq=n(gye,"A",{href:!0});var rst=s(uq);C5o=r(rst,"NystromformerModel"),rst.forEach(t),w5o=r(gye," (Nystr\xF6mformer model)"),gye.forEach(t),A5o=i($),C_=n($,"LI",{});var hye=s(C_);Sie=n(hye,"STRONG",{});var tst=s(Sie);L5o=r(tst,"openai-gpt"),tst.forEach(t),y5o=r(hye," \u2014 "),bq=n(hye,"A",{href:!0});var ast=s(bq);x5o=r(ast,"OpenAIGPTModel"),ast.forEach(t),$5o=r(hye," (OpenAI GPT model)"),hye.forEach(t),k5o=i($),w_=n($,"LI",{});var pye=s(w_);Rie=n(pye,"STRONG",{});var nst=s(Rie);S5o=r(nst,"opt"),nst.forEach(t),R5o=r(pye," \u2014 "),vq=n(pye,"A",{href:!0});var sst=s(vq);P5o=r(sst,"OPTModel"),sst.forEach(t),B5o=r(pye," (OPT model)"),pye.forEach(t),I5o=i($),A_=n($,"LI",{});var _ye=s(A_);Pie=n(_ye,"STRONG",{});var lst=s(Pie);N5o=r(lst,"pegasus"),lst.forEach(t),q5o=r(_ye," \u2014 "),Fq=n(_ye,"A",{href:!0});var ist=s(Fq);j5o=r(ist,"PegasusModel"),ist.forEach(t),D5o=r(_ye," (Pegasus model)"),_ye.forEach(t),G5o=i($),L_=n($,"LI",{});var uye=s(L_);Bie=n(uye,"STRONG",{});var dst=s(Bie);O5o=r(dst,"perceiver"),dst.forEach(t),V5o=r(uye," \u2014 "),Tq=n(uye,"A",{href:!0});var cst=s(Tq);X5o=r(cst,"PerceiverModel"),cst.forEach(t),z5o=r(uye," (Perceiver model)"),uye.forEach(t),W5o=i($),y_=n($,"LI",{});var bye=s(y_);Iie=n(bye,"STRONG",{});var fst=s(Iie);Q5o=r(fst,"plbart"),fst.forEach(t),H5o=r(bye," \u2014 "),Mq=n(bye,"A",{href:!0});var mst=s(Mq);U5o=r(mst,"PLBartModel"),mst.forEach(t),J5o=r(bye," (PLBart model)"),bye.forEach(t),Y5o=i($),x_=n($,"LI",{});var vye=s(x_);Nie=n(vye,"STRONG",{});var gst=s(Nie);K5o=r(gst,"poolformer"),gst.forEach(t),Z5o=r(vye," \u2014 "),Eq=n(vye,"A",{href:!0});var hst=s(Eq);e3o=r(hst,"PoolFormerModel"),hst.forEach(t),o3o=r(vye," (PoolFormer model)"),vye.forEach(t),r3o=i($),$_=n($,"LI",{});var Fye=s($_);qie=n(Fye,"STRONG",{});var pst=s(qie);t3o=r(pst,"prophetnet"),pst.forEach(t),a3o=r(Fye," \u2014 "),Cq=n(Fye,"A",{href:!0});var _st=s(Cq);n3o=r(_st,"ProphetNetModel"),_st.forEach(t),s3o=r(Fye," (ProphetNet model)"),Fye.forEach(t),l3o=i($),k_=n($,"LI",{});var Tye=s(k_);jie=n(Tye,"STRONG",{});var ust=s(jie);i3o=r(ust,"qdqbert"),ust.forEach(t),d3o=r(Tye," \u2014 "),wq=n(Tye,"A",{href:!0});var bst=s(wq);c3o=r(bst,"QDQBertModel"),bst.forEach(t),f3o=r(Tye," (QDQBert model)"),Tye.forEach(t),m3o=i($),S_=n($,"LI",{});var Mye=s(S_);Die=n(Mye,"STRONG",{});var vst=s(Die);g3o=r(vst,"reformer"),vst.forEach(t),h3o=r(Mye," \u2014 "),Aq=n(Mye,"A",{href:!0});var Fst=s(Aq);p3o=r(Fst,"ReformerModel"),Fst.forEach(t),_3o=r(Mye," (Reformer model)"),Mye.forEach(t),u3o=i($),R_=n($,"LI",{});var Eye=s(R_);Gie=n(Eye,"STRONG",{});var Tst=s(Gie);b3o=r(Tst,"regnet"),Tst.forEach(t),v3o=r(Eye," \u2014 "),Lq=n(Eye,"A",{href:!0});var Mst=s(Lq);F3o=r(Mst,"RegNetModel"),Mst.forEach(t),T3o=r(Eye," (RegNet model)"),Eye.forEach(t),M3o=i($),P_=n($,"LI",{});var Cye=s(P_);Oie=n(Cye,"STRONG",{});var Est=s(Oie);E3o=r(Est,"rembert"),Est.forEach(t),C3o=r(Cye," \u2014 "),yq=n(Cye,"A",{href:!0});var Cst=s(yq);w3o=r(Cst,"RemBertModel"),Cst.forEach(t),A3o=r(Cye," (RemBERT model)"),Cye.forEach(t),L3o=i($),B_=n($,"LI",{});var wye=s(B_);Vie=n(wye,"STRONG",{});var wst=s(Vie);y3o=r(wst,"resnet"),wst.forEach(t),x3o=r(wye," \u2014 "),xq=n(wye,"A",{href:!0});var Ast=s(xq);$3o=r(Ast,"ResNetModel"),Ast.forEach(t),k3o=r(wye," (ResNet model)"),wye.forEach(t),S3o=i($),I_=n($,"LI",{});var Aye=s(I_);Xie=n(Aye,"STRONG",{});var Lst=s(Xie);R3o=r(Lst,"retribert"),Lst.forEach(t),P3o=r(Aye," \u2014 "),$q=n(Aye,"A",{href:!0});var yst=s($q);B3o=r(yst,"RetriBertModel"),yst.forEach(t),I3o=r(Aye," (RetriBERT model)"),Aye.forEach(t),N3o=i($),N_=n($,"LI",{});var Lye=s(N_);zie=n(Lye,"STRONG",{});var xst=s(zie);q3o=r(xst,"roberta"),xst.forEach(t),j3o=r(Lye," \u2014 "),kq=n(Lye,"A",{href:!0});var $st=s(kq);D3o=r($st,"RobertaModel"),$st.forEach(t),G3o=r(Lye," (RoBERTa model)"),Lye.forEach(t),O3o=i($),q_=n($,"LI",{});var yye=s(q_);Wie=n(yye,"STRONG",{});var kst=s(Wie);V3o=r(kst,"roformer"),kst.forEach(t),X3o=r(yye," \u2014 "),Sq=n(yye,"A",{href:!0});var Sst=s(Sq);z3o=r(Sst,"RoFormerModel"),Sst.forEach(t),W3o=r(yye," (RoFormer model)"),yye.forEach(t),Q3o=i($),j_=n($,"LI",{});var xye=s(j_);Qie=n(xye,"STRONG",{});var Rst=s(Qie);H3o=r(Rst,"segformer"),Rst.forEach(t),U3o=r(xye," \u2014 "),Rq=n(xye,"A",{href:!0});var Pst=s(Rq);J3o=r(Pst,"SegformerModel"),Pst.forEach(t),Y3o=r(xye," (SegFormer model)"),xye.forEach(t),K3o=i($),D_=n($,"LI",{});var $ye=s(D_);Hie=n($ye,"STRONG",{});var Bst=s(Hie);Z3o=r(Bst,"sew"),Bst.forEach(t),eFo=r($ye," \u2014 "),Pq=n($ye,"A",{href:!0});var Ist=s(Pq);oFo=r(Ist,"SEWModel"),Ist.forEach(t),rFo=r($ye," (SEW model)"),$ye.forEach(t),tFo=i($),G_=n($,"LI",{});var kye=s(G_);Uie=n(kye,"STRONG",{});var Nst=s(Uie);aFo=r(Nst,"sew-d"),Nst.forEach(t),nFo=r(kye," \u2014 "),Bq=n(kye,"A",{href:!0});var qst=s(Bq);sFo=r(qst,"SEWDModel"),qst.forEach(t),lFo=r(kye," (SEW-D model)"),kye.forEach(t),iFo=i($),O_=n($,"LI",{});var Sye=s(O_);Jie=n(Sye,"STRONG",{});var jst=s(Jie);dFo=r(jst,"speech_to_text"),jst.forEach(t),cFo=r(Sye," \u2014 "),Iq=n(Sye,"A",{href:!0});var Dst=s(Iq);fFo=r(Dst,"Speech2TextModel"),Dst.forEach(t),mFo=r(Sye," (Speech2Text model)"),Sye.forEach(t),gFo=i($),V_=n($,"LI",{});var Rye=s(V_);Yie=n(Rye,"STRONG",{});var Gst=s(Yie);hFo=r(Gst,"splinter"),Gst.forEach(t),pFo=r(Rye," \u2014 "),Nq=n(Rye,"A",{href:!0});var Ost=s(Nq);_Fo=r(Ost,"SplinterModel"),Ost.forEach(t),uFo=r(Rye," (Splinter model)"),Rye.forEach(t),bFo=i($),X_=n($,"LI",{});var Pye=s(X_);Kie=n(Pye,"STRONG",{});var Vst=s(Kie);vFo=r(Vst,"squeezebert"),Vst.forEach(t),FFo=r(Pye," \u2014 "),qq=n(Pye,"A",{href:!0});var Xst=s(qq);TFo=r(Xst,"SqueezeBertModel"),Xst.forEach(t),MFo=r(Pye," (SqueezeBERT model)"),Pye.forEach(t),EFo=i($),z_=n($,"LI",{});var Bye=s(z_);Zie=n(Bye,"STRONG",{});var zst=s(Zie);CFo=r(zst,"swin"),zst.forEach(t),wFo=r(Bye," \u2014 "),jq=n(Bye,"A",{href:!0});var Wst=s(jq);AFo=r(Wst,"SwinModel"),Wst.forEach(t),LFo=r(Bye," (Swin Transformer model)"),Bye.forEach(t),yFo=i($),W_=n($,"LI",{});var Iye=s(W_);ede=n(Iye,"STRONG",{});var Qst=s(ede);xFo=r(Qst,"t5"),Qst.forEach(t),$Fo=r(Iye," \u2014 "),Dq=n(Iye,"A",{href:!0});var Hst=s(Dq);kFo=r(Hst,"T5Model"),Hst.forEach(t),SFo=r(Iye," (T5 model)"),Iye.forEach(t),RFo=i($),Q_=n($,"LI",{});var Nye=s(Q_);ode=n(Nye,"STRONG",{});var Ust=s(ode);PFo=r(Ust,"tapas"),Ust.forEach(t),BFo=r(Nye," \u2014 "),Gq=n(Nye,"A",{href:!0});var Jst=s(Gq);IFo=r(Jst,"TapasModel"),Jst.forEach(t),NFo=r(Nye," (TAPAS model)"),Nye.forEach(t),qFo=i($),H_=n($,"LI",{});var qye=s(H_);rde=n(qye,"STRONG",{});var Yst=s(rde);jFo=r(Yst,"trajectory_transformer"),Yst.forEach(t),DFo=r(qye," \u2014 "),Oq=n(qye,"A",{href:!0});var Kst=s(Oq);GFo=r(Kst,"TrajectoryTransformerModel"),Kst.forEach(t),OFo=r(qye," (Trajectory Transformer model)"),qye.forEach(t),VFo=i($),U_=n($,"LI",{});var jye=s(U_);tde=n(jye,"STRONG",{});var Zst=s(tde);XFo=r(Zst,"transfo-xl"),Zst.forEach(t),zFo=r(jye," \u2014 "),Vq=n(jye,"A",{href:!0});var elt=s(Vq);WFo=r(elt,"TransfoXLModel"),elt.forEach(t),QFo=r(jye," (Transformer-XL model)"),jye.forEach(t),HFo=i($),J_=n($,"LI",{});var Dye=s(J_);ade=n(Dye,"STRONG",{});var olt=s(ade);UFo=r(olt,"unispeech"),olt.forEach(t),JFo=r(Dye," \u2014 "),Xq=n(Dye,"A",{href:!0});var rlt=s(Xq);YFo=r(rlt,"UniSpeechModel"),rlt.forEach(t),KFo=r(Dye," (UniSpeech model)"),Dye.forEach(t),ZFo=i($),Y_=n($,"LI",{});var Gye=s(Y_);nde=n(Gye,"STRONG",{});var tlt=s(nde);eTo=r(tlt,"unispeech-sat"),tlt.forEach(t),oTo=r(Gye," \u2014 "),zq=n(Gye,"A",{href:!0});var alt=s(zq);rTo=r(alt,"UniSpeechSatModel"),alt.forEach(t),tTo=r(Gye," (UniSpeechSat model)"),Gye.forEach(t),aTo=i($),K_=n($,"LI",{});var Oye=s(K_);sde=n(Oye,"STRONG",{});var nlt=s(sde);nTo=r(nlt,"van"),nlt.forEach(t),sTo=r(Oye," \u2014 "),Wq=n(Oye,"A",{href:!0});var slt=s(Wq);lTo=r(slt,"VanModel"),slt.forEach(t),iTo=r(Oye," (VAN model)"),Oye.forEach(t),dTo=i($),Z_=n($,"LI",{});var Vye=s(Z_);lde=n(Vye,"STRONG",{});var llt=s(lde);cTo=r(llt,"vilt"),llt.forEach(t),fTo=r(Vye," \u2014 "),Qq=n(Vye,"A",{href:!0});var ilt=s(Qq);mTo=r(ilt,"ViltModel"),ilt.forEach(t),gTo=r(Vye," (ViLT model)"),Vye.forEach(t),hTo=i($),eu=n($,"LI",{});var Xye=s(eu);ide=n(Xye,"STRONG",{});var dlt=s(ide);pTo=r(dlt,"vision-text-dual-encoder"),dlt.forEach(t),_To=r(Xye," \u2014 "),Hq=n(Xye,"A",{href:!0});var clt=s(Hq);uTo=r(clt,"VisionTextDualEncoderModel"),clt.forEach(t),bTo=r(Xye," (VisionTextDualEncoder model)"),Xye.forEach(t),vTo=i($),ou=n($,"LI",{});var zye=s(ou);dde=n(zye,"STRONG",{});var flt=s(dde);FTo=r(flt,"visual_bert"),flt.forEach(t),TTo=r(zye," \u2014 "),Uq=n(zye,"A",{href:!0});var mlt=s(Uq);MTo=r(mlt,"VisualBertModel"),mlt.forEach(t),ETo=r(zye," (VisualBERT model)"),zye.forEach(t),CTo=i($),ru=n($,"LI",{});var Wye=s(ru);cde=n(Wye,"STRONG",{});var glt=s(cde);wTo=r(glt,"vit"),glt.forEach(t),ATo=r(Wye," \u2014 "),Jq=n(Wye,"A",{href:!0});var hlt=s(Jq);LTo=r(hlt,"ViTModel"),hlt.forEach(t),yTo=r(Wye," (ViT model)"),Wye.forEach(t),xTo=i($),tu=n($,"LI",{});var Qye=s(tu);fde=n(Qye,"STRONG",{});var plt=s(fde);$To=r(plt,"vit_mae"),plt.forEach(t),kTo=r(Qye," \u2014 "),Yq=n(Qye,"A",{href:!0});var _lt=s(Yq);STo=r(_lt,"ViTMAEModel"),_lt.forEach(t),RTo=r(Qye," (ViTMAE model)"),Qye.forEach(t),PTo=i($),au=n($,"LI",{});var Hye=s(au);mde=n(Hye,"STRONG",{});var ult=s(mde);BTo=r(ult,"wav2vec2"),ult.forEach(t),ITo=r(Hye," \u2014 "),Kq=n(Hye,"A",{href:!0});var blt=s(Kq);NTo=r(blt,"Wav2Vec2Model"),blt.forEach(t),qTo=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),jTo=i($),nu=n($,"LI",{});var Uye=s(nu);gde=n(Uye,"STRONG",{});var vlt=s(gde);DTo=r(vlt,"wav2vec2-conformer"),vlt.forEach(t),GTo=r(Uye," \u2014 "),Zq=n(Uye,"A",{href:!0});var Flt=s(Zq);OTo=r(Flt,"Wav2Vec2ConformerModel"),Flt.forEach(t),VTo=r(Uye," (Wav2Vec2-Conformer model)"),Uye.forEach(t),XTo=i($),su=n($,"LI",{});var Jye=s(su);hde=n(Jye,"STRONG",{});var Tlt=s(hde);zTo=r(Tlt,"wavlm"),Tlt.forEach(t),WTo=r(Jye," \u2014 "),ej=n(Jye,"A",{href:!0});var Mlt=s(ej);QTo=r(Mlt,"WavLMModel"),Mlt.forEach(t),HTo=r(Jye," (WavLM model)"),Jye.forEach(t),UTo=i($),lu=n($,"LI",{});var Yye=s(lu);pde=n(Yye,"STRONG",{});var Elt=s(pde);JTo=r(Elt,"xglm"),Elt.forEach(t),YTo=r(Yye," \u2014 "),oj=n(Yye,"A",{href:!0});var Clt=s(oj);KTo=r(Clt,"XGLMModel"),Clt.forEach(t),ZTo=r(Yye," (XGLM model)"),Yye.forEach(t),e7o=i($),iu=n($,"LI",{});var Kye=s(iu);_de=n(Kye,"STRONG",{});var wlt=s(_de);o7o=r(wlt,"xlm"),wlt.forEach(t),r7o=r(Kye," \u2014 "),rj=n(Kye,"A",{href:!0});var Alt=s(rj);t7o=r(Alt,"XLMModel"),Alt.forEach(t),a7o=r(Kye," (XLM model)"),Kye.forEach(t),n7o=i($),du=n($,"LI",{});var Zye=s(du);ude=n(Zye,"STRONG",{});var Llt=s(ude);s7o=r(Llt,"xlm-prophetnet"),Llt.forEach(t),l7o=r(Zye," \u2014 "),tj=n(Zye,"A",{href:!0});var ylt=s(tj);i7o=r(ylt,"XLMProphetNetModel"),ylt.forEach(t),d7o=r(Zye," (XLM-ProphetNet model)"),Zye.forEach(t),c7o=i($),cu=n($,"LI",{});var e8e=s(cu);bde=n(e8e,"STRONG",{});var xlt=s(bde);f7o=r(xlt,"xlm-roberta"),xlt.forEach(t),m7o=r(e8e," \u2014 "),aj=n(e8e,"A",{href:!0});var $lt=s(aj);g7o=r($lt,"XLMRobertaModel"),$lt.forEach(t),h7o=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),p7o=i($),fu=n($,"LI",{});var o8e=s(fu);vde=n(o8e,"STRONG",{});var klt=s(vde);_7o=r(klt,"xlm-roberta-xl"),klt.forEach(t),u7o=r(o8e," \u2014 "),nj=n(o8e,"A",{href:!0});var Slt=s(nj);b7o=r(Slt,"XLMRobertaXLModel"),Slt.forEach(t),v7o=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),F7o=i($),mu=n($,"LI",{});var r8e=s(mu);Fde=n(r8e,"STRONG",{});var Rlt=s(Fde);T7o=r(Rlt,"xlnet"),Rlt.forEach(t),M7o=r(r8e," \u2014 "),sj=n(r8e,"A",{href:!0});var Plt=s(sj);E7o=r(Plt,"XLNetModel"),Plt.forEach(t),C7o=r(r8e," (XLNet model)"),r8e.forEach(t),w7o=i($),gu=n($,"LI",{});var t8e=s(gu);Tde=n(t8e,"STRONG",{});var Blt=s(Tde);A7o=r(Blt,"yolos"),Blt.forEach(t),L7o=r(t8e," \u2014 "),lj=n(t8e,"A",{href:!0});var Ilt=s(lj);y7o=r(Ilt,"YolosModel"),Ilt.forEach(t),x7o=r(t8e," (YOLOS model)"),t8e.forEach(t),$7o=i($),hu=n($,"LI",{});var a8e=s(hu);Mde=n(a8e,"STRONG",{});var Nlt=s(Mde);k7o=r(Nlt,"yoso"),Nlt.forEach(t),S7o=r(a8e," \u2014 "),ij=n(a8e,"A",{href:!0});var qlt=s(ij);R7o=r(qlt,"YosoModel"),qlt.forEach(t),P7o=r(a8e," (YOSO model)"),a8e.forEach(t),$.forEach(t),B7o=i(ra),pu=n(ra,"P",{});var n8e=s(pu);I7o=r(n8e,"The model is set in evaluation mode by default using "),Ede=n(n8e,"CODE",{});var jlt=s(Ede);N7o=r(jlt,"model.eval()"),jlt.forEach(t),q7o=r(n8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(n8e,"CODE",{});var Dlt=s(Cde);j7o=r(Dlt,"model.train()"),Dlt.forEach(t),n8e.forEach(t),D7o=i(ra),T(_u.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Kje=i(f),$i=n(f,"H2",{class:!0});var rOe=s($i);uu=n(rOe,"A",{id:!0,class:!0,href:!0});var Glt=s(uu);wde=n(Glt,"SPAN",{});var Olt=s(wde);T(LL.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),G7o=i(rOe),Ade=n(rOe,"SPAN",{});var Vlt=s(Ade);O7o=r(Vlt,"AutoModelForPreTraining"),Vlt.forEach(t),rOe.forEach(t),Zje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(yL.$$.fragment,Vs),V7o=i(Vs),ki=n(Vs,"P",{});var fee=s(ki);X7o=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dj=n(fee,"A",{href:!0});var Xlt=s(dj);z7o=r(Xlt,"from_pretrained()"),Xlt.forEach(t),W7o=r(fee," class method or the "),cj=n(fee,"A",{href:!0});var zlt=s(cj);Q7o=r(zlt,"from_config()"),zlt.forEach(t),H7o=r(fee,` class
method.`),fee.forEach(t),U7o=i(Vs),xL=n(Vs,"P",{});var tOe=s(xL);J7o=r(tOe,"This class cannot be instantiated directly using "),Lde=n(tOe,"CODE",{});var Wlt=s(Lde);Y7o=r(Wlt,"__init__()"),Wlt.forEach(t),K7o=r(tOe," (throws an error)."),tOe.forEach(t),Z7o=i(Vs),nt=n(Vs,"DIV",{class:!0});var t6=s(nt);T($L.$$.fragment,t6),eMo=i(t6),yde=n(t6,"P",{});var Qlt=s(yde);oMo=r(Qlt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qlt.forEach(t),rMo=i(t6),Si=n(t6,"P",{});var mee=s(Si);tMo=r(mee,`Note:
Loading a model from its configuration file does `),xde=n(mee,"STRONG",{});var Hlt=s(xde);aMo=r(Hlt,"not"),Hlt.forEach(t),nMo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(mee,"A",{href:!0});var Ult=s(fj);sMo=r(Ult,"from_pretrained()"),Ult.forEach(t),lMo=r(mee," to load the model weights."),mee.forEach(t),iMo=i(t6),T(bu.$$.fragment,t6),t6.forEach(t),dMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ta=s(Ye);T(kL.$$.fragment,ta),cMo=i(ta),$de=n(ta,"P",{});var Jlt=s($de);fMo=r(Jlt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jlt.forEach(t),mMo=i(ta),$a=n(ta,"P",{});var a6=s($a);gMo=r(a6,"The model class to instantiate is selected based on the "),kde=n(a6,"CODE",{});var Ylt=s(kde);hMo=r(Ylt,"model_type"),Ylt.forEach(t),pMo=r(a6,` property of the config object (either
passed as an argument or loaded from `),Sde=n(a6,"CODE",{});var Klt=s(Sde);_Mo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),uMo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(a6,"CODE",{});var Zlt=s(Rde);bMo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),vMo=r(a6,":"),a6.forEach(t),FMo=i(ta),G=n(ta,"UL",{});var O=s(G);vu=n(O,"LI",{});var s8e=s(vu);Pde=n(s8e,"STRONG",{});var eit=s(Pde);TMo=r(eit,"albert"),eit.forEach(t),MMo=r(s8e," \u2014 "),mj=n(s8e,"A",{href:!0});var oit=s(mj);EMo=r(oit,"AlbertForPreTraining"),oit.forEach(t),CMo=r(s8e," (ALBERT model)"),s8e.forEach(t),wMo=i(O),Fu=n(O,"LI",{});var l8e=s(Fu);Bde=n(l8e,"STRONG",{});var rit=s(Bde);AMo=r(rit,"bart"),rit.forEach(t),LMo=r(l8e," \u2014 "),gj=n(l8e,"A",{href:!0});var tit=s(gj);yMo=r(tit,"BartForConditionalGeneration"),tit.forEach(t),xMo=r(l8e," (BART model)"),l8e.forEach(t),$Mo=i(O),Tu=n(O,"LI",{});var i8e=s(Tu);Ide=n(i8e,"STRONG",{});var ait=s(Ide);kMo=r(ait,"bert"),ait.forEach(t),SMo=r(i8e," \u2014 "),hj=n(i8e,"A",{href:!0});var nit=s(hj);RMo=r(nit,"BertForPreTraining"),nit.forEach(t),PMo=r(i8e," (BERT model)"),i8e.forEach(t),BMo=i(O),Mu=n(O,"LI",{});var d8e=s(Mu);Nde=n(d8e,"STRONG",{});var sit=s(Nde);IMo=r(sit,"big_bird"),sit.forEach(t),NMo=r(d8e," \u2014 "),pj=n(d8e,"A",{href:!0});var lit=s(pj);qMo=r(lit,"BigBirdForPreTraining"),lit.forEach(t),jMo=r(d8e," (BigBird model)"),d8e.forEach(t),DMo=i(O),Eu=n(O,"LI",{});var c8e=s(Eu);qde=n(c8e,"STRONG",{});var iit=s(qde);GMo=r(iit,"bloom"),iit.forEach(t),OMo=r(c8e," \u2014 "),_j=n(c8e,"A",{href:!0});var dit=s(_j);VMo=r(dit,"BloomForCausalLM"),dit.forEach(t),XMo=r(c8e," (BLOOM model)"),c8e.forEach(t),zMo=i(O),Cu=n(O,"LI",{});var f8e=s(Cu);jde=n(f8e,"STRONG",{});var cit=s(jde);WMo=r(cit,"camembert"),cit.forEach(t),QMo=r(f8e," \u2014 "),uj=n(f8e,"A",{href:!0});var fit=s(uj);HMo=r(fit,"CamembertForMaskedLM"),fit.forEach(t),UMo=r(f8e," (CamemBERT model)"),f8e.forEach(t),JMo=i(O),wu=n(O,"LI",{});var m8e=s(wu);Dde=n(m8e,"STRONG",{});var mit=s(Dde);YMo=r(mit,"ctrl"),mit.forEach(t),KMo=r(m8e," \u2014 "),bj=n(m8e,"A",{href:!0});var git=s(bj);ZMo=r(git,"CTRLLMHeadModel"),git.forEach(t),eEo=r(m8e," (CTRL model)"),m8e.forEach(t),oEo=i(O),Au=n(O,"LI",{});var g8e=s(Au);Gde=n(g8e,"STRONG",{});var hit=s(Gde);rEo=r(hit,"data2vec-text"),hit.forEach(t),tEo=r(g8e," \u2014 "),vj=n(g8e,"A",{href:!0});var pit=s(vj);aEo=r(pit,"Data2VecTextForMaskedLM"),pit.forEach(t),nEo=r(g8e," (Data2VecText model)"),g8e.forEach(t),sEo=i(O),Lu=n(O,"LI",{});var h8e=s(Lu);Ode=n(h8e,"STRONG",{});var _it=s(Ode);lEo=r(_it,"deberta"),_it.forEach(t),iEo=r(h8e," \u2014 "),Fj=n(h8e,"A",{href:!0});var uit=s(Fj);dEo=r(uit,"DebertaForMaskedLM"),uit.forEach(t),cEo=r(h8e," (DeBERTa model)"),h8e.forEach(t),fEo=i(O),yu=n(O,"LI",{});var p8e=s(yu);Vde=n(p8e,"STRONG",{});var bit=s(Vde);mEo=r(bit,"deberta-v2"),bit.forEach(t),gEo=r(p8e," \u2014 "),Tj=n(p8e,"A",{href:!0});var vit=s(Tj);hEo=r(vit,"DebertaV2ForMaskedLM"),vit.forEach(t),pEo=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),_Eo=i(O),xu=n(O,"LI",{});var _8e=s(xu);Xde=n(_8e,"STRONG",{});var Fit=s(Xde);uEo=r(Fit,"distilbert"),Fit.forEach(t),bEo=r(_8e," \u2014 "),Mj=n(_8e,"A",{href:!0});var Tit=s(Mj);vEo=r(Tit,"DistilBertForMaskedLM"),Tit.forEach(t),FEo=r(_8e," (DistilBERT model)"),_8e.forEach(t),TEo=i(O),$u=n(O,"LI",{});var u8e=s($u);zde=n(u8e,"STRONG",{});var Mit=s(zde);MEo=r(Mit,"electra"),Mit.forEach(t),EEo=r(u8e," \u2014 "),Ej=n(u8e,"A",{href:!0});var Eit=s(Ej);CEo=r(Eit,"ElectraForPreTraining"),Eit.forEach(t),wEo=r(u8e," (ELECTRA model)"),u8e.forEach(t),AEo=i(O),ku=n(O,"LI",{});var b8e=s(ku);Wde=n(b8e,"STRONG",{});var Cit=s(Wde);LEo=r(Cit,"flaubert"),Cit.forEach(t),yEo=r(b8e," \u2014 "),Cj=n(b8e,"A",{href:!0});var wit=s(Cj);xEo=r(wit,"FlaubertWithLMHeadModel"),wit.forEach(t),$Eo=r(b8e," (FlauBERT model)"),b8e.forEach(t),kEo=i(O),Su=n(O,"LI",{});var v8e=s(Su);Qde=n(v8e,"STRONG",{});var Ait=s(Qde);SEo=r(Ait,"flava"),Ait.forEach(t),REo=r(v8e," \u2014 "),wj=n(v8e,"A",{href:!0});var Lit=s(wj);PEo=r(Lit,"FlavaForPreTraining"),Lit.forEach(t),BEo=r(v8e," (FLAVA model)"),v8e.forEach(t),IEo=i(O),Ru=n(O,"LI",{});var F8e=s(Ru);Hde=n(F8e,"STRONG",{});var yit=s(Hde);NEo=r(yit,"fnet"),yit.forEach(t),qEo=r(F8e," \u2014 "),Aj=n(F8e,"A",{href:!0});var xit=s(Aj);jEo=r(xit,"FNetForPreTraining"),xit.forEach(t),DEo=r(F8e," (FNet model)"),F8e.forEach(t),GEo=i(O),Pu=n(O,"LI",{});var T8e=s(Pu);Ude=n(T8e,"STRONG",{});var $it=s(Ude);OEo=r($it,"fsmt"),$it.forEach(t),VEo=r(T8e," \u2014 "),Lj=n(T8e,"A",{href:!0});var kit=s(Lj);XEo=r(kit,"FSMTForConditionalGeneration"),kit.forEach(t),zEo=r(T8e," (FairSeq Machine-Translation model)"),T8e.forEach(t),WEo=i(O),Bu=n(O,"LI",{});var M8e=s(Bu);Jde=n(M8e,"STRONG",{});var Sit=s(Jde);QEo=r(Sit,"funnel"),Sit.forEach(t),HEo=r(M8e," \u2014 "),yj=n(M8e,"A",{href:!0});var Rit=s(yj);UEo=r(Rit,"FunnelForPreTraining"),Rit.forEach(t),JEo=r(M8e," (Funnel Transformer model)"),M8e.forEach(t),YEo=i(O),Iu=n(O,"LI",{});var E8e=s(Iu);Yde=n(E8e,"STRONG",{});var Pit=s(Yde);KEo=r(Pit,"gpt2"),Pit.forEach(t),ZEo=r(E8e," \u2014 "),xj=n(E8e,"A",{href:!0});var Bit=s(xj);eCo=r(Bit,"GPT2LMHeadModel"),Bit.forEach(t),oCo=r(E8e," (OpenAI GPT-2 model)"),E8e.forEach(t),rCo=i(O),Nu=n(O,"LI",{});var C8e=s(Nu);Kde=n(C8e,"STRONG",{});var Iit=s(Kde);tCo=r(Iit,"ibert"),Iit.forEach(t),aCo=r(C8e," \u2014 "),$j=n(C8e,"A",{href:!0});var Nit=s($j);nCo=r(Nit,"IBertForMaskedLM"),Nit.forEach(t),sCo=r(C8e," (I-BERT model)"),C8e.forEach(t),lCo=i(O),qu=n(O,"LI",{});var w8e=s(qu);Zde=n(w8e,"STRONG",{});var qit=s(Zde);iCo=r(qit,"layoutlm"),qit.forEach(t),dCo=r(w8e," \u2014 "),kj=n(w8e,"A",{href:!0});var jit=s(kj);cCo=r(jit,"LayoutLMForMaskedLM"),jit.forEach(t),fCo=r(w8e," (LayoutLM model)"),w8e.forEach(t),mCo=i(O),ju=n(O,"LI",{});var A8e=s(ju);ece=n(A8e,"STRONG",{});var Dit=s(ece);gCo=r(Dit,"longformer"),Dit.forEach(t),hCo=r(A8e," \u2014 "),Sj=n(A8e,"A",{href:!0});var Git=s(Sj);pCo=r(Git,"LongformerForMaskedLM"),Git.forEach(t),_Co=r(A8e," (Longformer model)"),A8e.forEach(t),uCo=i(O),Du=n(O,"LI",{});var L8e=s(Du);oce=n(L8e,"STRONG",{});var Oit=s(oce);bCo=r(Oit,"lxmert"),Oit.forEach(t),vCo=r(L8e," \u2014 "),Rj=n(L8e,"A",{href:!0});var Vit=s(Rj);FCo=r(Vit,"LxmertForPreTraining"),Vit.forEach(t),TCo=r(L8e," (LXMERT model)"),L8e.forEach(t),MCo=i(O),Gu=n(O,"LI",{});var y8e=s(Gu);rce=n(y8e,"STRONG",{});var Xit=s(rce);ECo=r(Xit,"megatron-bert"),Xit.forEach(t),CCo=r(y8e," \u2014 "),Pj=n(y8e,"A",{href:!0});var zit=s(Pj);wCo=r(zit,"MegatronBertForPreTraining"),zit.forEach(t),ACo=r(y8e," (Megatron-BERT model)"),y8e.forEach(t),LCo=i(O),Ou=n(O,"LI",{});var x8e=s(Ou);tce=n(x8e,"STRONG",{});var Wit=s(tce);yCo=r(Wit,"mobilebert"),Wit.forEach(t),xCo=r(x8e," \u2014 "),Bj=n(x8e,"A",{href:!0});var Qit=s(Bj);$Co=r(Qit,"MobileBertForPreTraining"),Qit.forEach(t),kCo=r(x8e," (MobileBERT model)"),x8e.forEach(t),SCo=i(O),Vu=n(O,"LI",{});var $8e=s(Vu);ace=n($8e,"STRONG",{});var Hit=s(ace);RCo=r(Hit,"mpnet"),Hit.forEach(t),PCo=r($8e," \u2014 "),Ij=n($8e,"A",{href:!0});var Uit=s(Ij);BCo=r(Uit,"MPNetForMaskedLM"),Uit.forEach(t),ICo=r($8e," (MPNet model)"),$8e.forEach(t),NCo=i(O),Xu=n(O,"LI",{});var k8e=s(Xu);nce=n(k8e,"STRONG",{});var Jit=s(nce);qCo=r(Jit,"openai-gpt"),Jit.forEach(t),jCo=r(k8e," \u2014 "),Nj=n(k8e,"A",{href:!0});var Yit=s(Nj);DCo=r(Yit,"OpenAIGPTLMHeadModel"),Yit.forEach(t),GCo=r(k8e," (OpenAI GPT model)"),k8e.forEach(t),OCo=i(O),zu=n(O,"LI",{});var S8e=s(zu);sce=n(S8e,"STRONG",{});var Kit=s(sce);VCo=r(Kit,"retribert"),Kit.forEach(t),XCo=r(S8e," \u2014 "),qj=n(S8e,"A",{href:!0});var Zit=s(qj);zCo=r(Zit,"RetriBertModel"),Zit.forEach(t),WCo=r(S8e," (RetriBERT model)"),S8e.forEach(t),QCo=i(O),Wu=n(O,"LI",{});var R8e=s(Wu);lce=n(R8e,"STRONG",{});var edt=s(lce);HCo=r(edt,"roberta"),edt.forEach(t),UCo=r(R8e," \u2014 "),jj=n(R8e,"A",{href:!0});var odt=s(jj);JCo=r(odt,"RobertaForMaskedLM"),odt.forEach(t),YCo=r(R8e," (RoBERTa model)"),R8e.forEach(t),KCo=i(O),Qu=n(O,"LI",{});var P8e=s(Qu);ice=n(P8e,"STRONG",{});var rdt=s(ice);ZCo=r(rdt,"splinter"),rdt.forEach(t),e0o=r(P8e," \u2014 "),Dj=n(P8e,"A",{href:!0});var tdt=s(Dj);o0o=r(tdt,"SplinterForPreTraining"),tdt.forEach(t),r0o=r(P8e," (Splinter model)"),P8e.forEach(t),t0o=i(O),Hu=n(O,"LI",{});var B8e=s(Hu);dce=n(B8e,"STRONG",{});var adt=s(dce);a0o=r(adt,"squeezebert"),adt.forEach(t),n0o=r(B8e," \u2014 "),Gj=n(B8e,"A",{href:!0});var ndt=s(Gj);s0o=r(ndt,"SqueezeBertForMaskedLM"),ndt.forEach(t),l0o=r(B8e," (SqueezeBERT model)"),B8e.forEach(t),i0o=i(O),Uu=n(O,"LI",{});var I8e=s(Uu);cce=n(I8e,"STRONG",{});var sdt=s(cce);d0o=r(sdt,"t5"),sdt.forEach(t),c0o=r(I8e," \u2014 "),Oj=n(I8e,"A",{href:!0});var ldt=s(Oj);f0o=r(ldt,"T5ForConditionalGeneration"),ldt.forEach(t),m0o=r(I8e," (T5 model)"),I8e.forEach(t),g0o=i(O),Ju=n(O,"LI",{});var N8e=s(Ju);fce=n(N8e,"STRONG",{});var idt=s(fce);h0o=r(idt,"tapas"),idt.forEach(t),p0o=r(N8e," \u2014 "),Vj=n(N8e,"A",{href:!0});var ddt=s(Vj);_0o=r(ddt,"TapasForMaskedLM"),ddt.forEach(t),u0o=r(N8e," (TAPAS model)"),N8e.forEach(t),b0o=i(O),Yu=n(O,"LI",{});var q8e=s(Yu);mce=n(q8e,"STRONG",{});var cdt=s(mce);v0o=r(cdt,"transfo-xl"),cdt.forEach(t),F0o=r(q8e," \u2014 "),Xj=n(q8e,"A",{href:!0});var fdt=s(Xj);T0o=r(fdt,"TransfoXLLMHeadModel"),fdt.forEach(t),M0o=r(q8e," (Transformer-XL model)"),q8e.forEach(t),E0o=i(O),Ku=n(O,"LI",{});var j8e=s(Ku);gce=n(j8e,"STRONG",{});var mdt=s(gce);C0o=r(mdt,"unispeech"),mdt.forEach(t),w0o=r(j8e," \u2014 "),zj=n(j8e,"A",{href:!0});var gdt=s(zj);A0o=r(gdt,"UniSpeechForPreTraining"),gdt.forEach(t),L0o=r(j8e," (UniSpeech model)"),j8e.forEach(t),y0o=i(O),Zu=n(O,"LI",{});var D8e=s(Zu);hce=n(D8e,"STRONG",{});var hdt=s(hce);x0o=r(hdt,"unispeech-sat"),hdt.forEach(t),$0o=r(D8e," \u2014 "),Wj=n(D8e,"A",{href:!0});var pdt=s(Wj);k0o=r(pdt,"UniSpeechSatForPreTraining"),pdt.forEach(t),S0o=r(D8e," (UniSpeechSat model)"),D8e.forEach(t),R0o=i(O),e1=n(O,"LI",{});var G8e=s(e1);pce=n(G8e,"STRONG",{});var _dt=s(pce);P0o=r(_dt,"visual_bert"),_dt.forEach(t),B0o=r(G8e," \u2014 "),Qj=n(G8e,"A",{href:!0});var udt=s(Qj);I0o=r(udt,"VisualBertForPreTraining"),udt.forEach(t),N0o=r(G8e," (VisualBERT model)"),G8e.forEach(t),q0o=i(O),o1=n(O,"LI",{});var O8e=s(o1);_ce=n(O8e,"STRONG",{});var bdt=s(_ce);j0o=r(bdt,"vit_mae"),bdt.forEach(t),D0o=r(O8e," \u2014 "),Hj=n(O8e,"A",{href:!0});var vdt=s(Hj);G0o=r(vdt,"ViTMAEForPreTraining"),vdt.forEach(t),O0o=r(O8e," (ViTMAE model)"),O8e.forEach(t),V0o=i(O),r1=n(O,"LI",{});var V8e=s(r1);uce=n(V8e,"STRONG",{});var Fdt=s(uce);X0o=r(Fdt,"wav2vec2"),Fdt.forEach(t),z0o=r(V8e," \u2014 "),Uj=n(V8e,"A",{href:!0});var Tdt=s(Uj);W0o=r(Tdt,"Wav2Vec2ForPreTraining"),Tdt.forEach(t),Q0o=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),H0o=i(O),t1=n(O,"LI",{});var X8e=s(t1);bce=n(X8e,"STRONG",{});var Mdt=s(bce);U0o=r(Mdt,"wav2vec2-conformer"),Mdt.forEach(t),J0o=r(X8e," \u2014 "),Jj=n(X8e,"A",{href:!0});var Edt=s(Jj);Y0o=r(Edt,"Wav2Vec2ConformerForPreTraining"),Edt.forEach(t),K0o=r(X8e," (Wav2Vec2-Conformer model)"),X8e.forEach(t),Z0o=i(O),a1=n(O,"LI",{});var z8e=s(a1);vce=n(z8e,"STRONG",{});var Cdt=s(vce);ewo=r(Cdt,"xlm"),Cdt.forEach(t),owo=r(z8e," \u2014 "),Yj=n(z8e,"A",{href:!0});var wdt=s(Yj);rwo=r(wdt,"XLMWithLMHeadModel"),wdt.forEach(t),two=r(z8e," (XLM model)"),z8e.forEach(t),awo=i(O),n1=n(O,"LI",{});var W8e=s(n1);Fce=n(W8e,"STRONG",{});var Adt=s(Fce);nwo=r(Adt,"xlm-roberta"),Adt.forEach(t),swo=r(W8e," \u2014 "),Kj=n(W8e,"A",{href:!0});var Ldt=s(Kj);lwo=r(Ldt,"XLMRobertaForMaskedLM"),Ldt.forEach(t),iwo=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),dwo=i(O),s1=n(O,"LI",{});var Q8e=s(s1);Tce=n(Q8e,"STRONG",{});var ydt=s(Tce);cwo=r(ydt,"xlm-roberta-xl"),ydt.forEach(t),fwo=r(Q8e," \u2014 "),Zj=n(Q8e,"A",{href:!0});var xdt=s(Zj);mwo=r(xdt,"XLMRobertaXLForMaskedLM"),xdt.forEach(t),gwo=r(Q8e," (XLM-RoBERTa-XL model)"),Q8e.forEach(t),hwo=i(O),l1=n(O,"LI",{});var H8e=s(l1);Mce=n(H8e,"STRONG",{});var $dt=s(Mce);pwo=r($dt,"xlnet"),$dt.forEach(t),_wo=r(H8e," \u2014 "),eD=n(H8e,"A",{href:!0});var kdt=s(eD);uwo=r(kdt,"XLNetLMHeadModel"),kdt.forEach(t),bwo=r(H8e," (XLNet model)"),H8e.forEach(t),O.forEach(t),vwo=i(ta),i1=n(ta,"P",{});var U8e=s(i1);Fwo=r(U8e,"The model is set in evaluation mode by default using "),Ece=n(U8e,"CODE",{});var Sdt=s(Ece);Two=r(Sdt,"model.eval()"),Sdt.forEach(t),Mwo=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(U8e,"CODE",{});var Rdt=s(Cce);Ewo=r(Rdt,"model.train()"),Rdt.forEach(t),U8e.forEach(t),Cwo=i(ta),T(d1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),eDe=i(f),Ri=n(f,"H2",{class:!0});var aOe=s(Ri);c1=n(aOe,"A",{id:!0,class:!0,href:!0});var Pdt=s(c1);wce=n(Pdt,"SPAN",{});var Bdt=s(wce);T(SL.$$.fragment,Bdt),Bdt.forEach(t),Pdt.forEach(t),wwo=i(aOe),Ace=n(aOe,"SPAN",{});var Idt=s(Ace);Awo=r(Idt,"AutoModelForCausalLM"),Idt.forEach(t),aOe.forEach(t),oDe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(RL.$$.fragment,Xs),Lwo=i(Xs),Pi=n(Xs,"P",{});var gee=s(Pi);ywo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oD=n(gee,"A",{href:!0});var Ndt=s(oD);xwo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),$wo=r(gee," class method or the "),rD=n(gee,"A",{href:!0});var qdt=s(rD);kwo=r(qdt,"from_config()"),qdt.forEach(t),Swo=r(gee,` class
method.`),gee.forEach(t),Rwo=i(Xs),PL=n(Xs,"P",{});var nOe=s(PL);Pwo=r(nOe,"This class cannot be instantiated directly using "),Lce=n(nOe,"CODE",{});var jdt=s(Lce);Bwo=r(jdt,"__init__()"),jdt.forEach(t),Iwo=r(nOe," (throws an error)."),nOe.forEach(t),Nwo=i(Xs),st=n(Xs,"DIV",{class:!0});var n6=s(st);T(BL.$$.fragment,n6),qwo=i(n6),yce=n(n6,"P",{});var Ddt=s(yce);jwo=r(Ddt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ddt.forEach(t),Dwo=i(n6),Bi=n(n6,"P",{});var hee=s(Bi);Gwo=r(hee,`Note:
Loading a model from its configuration file does `),xce=n(hee,"STRONG",{});var Gdt=s(xce);Owo=r(Gdt,"not"),Gdt.forEach(t),Vwo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=n(hee,"A",{href:!0});var Odt=s(tD);Xwo=r(Odt,"from_pretrained()"),Odt.forEach(t),zwo=r(hee," to load the model weights."),hee.forEach(t),Wwo=i(n6),T(f1.$$.fragment,n6),n6.forEach(t),Qwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var aa=s(Ke);T(IL.$$.fragment,aa),Hwo=i(aa),$ce=n(aa,"P",{});var Vdt=s($ce);Uwo=r(Vdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vdt.forEach(t),Jwo=i(aa),ka=n(aa,"P",{});var s6=s(ka);Ywo=r(s6,"The model class to instantiate is selected based on the "),kce=n(s6,"CODE",{});var Xdt=s(kce);Kwo=r(Xdt,"model_type"),Xdt.forEach(t),Zwo=r(s6,` property of the config object (either
passed as an argument or loaded from `),Sce=n(s6,"CODE",{});var zdt=s(Sce);e6o=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),o6o=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(s6,"CODE",{});var Wdt=s(Rce);r6o=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),t6o=r(s6,":"),s6.forEach(t),a6o=i(aa),z=n(aa,"UL",{});var W=s(z);m1=n(W,"LI",{});var J8e=s(m1);Pce=n(J8e,"STRONG",{});var Qdt=s(Pce);n6o=r(Qdt,"bart"),Qdt.forEach(t),s6o=r(J8e," \u2014 "),aD=n(J8e,"A",{href:!0});var Hdt=s(aD);l6o=r(Hdt,"BartForCausalLM"),Hdt.forEach(t),i6o=r(J8e," (BART model)"),J8e.forEach(t),d6o=i(W),g1=n(W,"LI",{});var Y8e=s(g1);Bce=n(Y8e,"STRONG",{});var Udt=s(Bce);c6o=r(Udt,"bert"),Udt.forEach(t),f6o=r(Y8e," \u2014 "),nD=n(Y8e,"A",{href:!0});var Jdt=s(nD);m6o=r(Jdt,"BertLMHeadModel"),Jdt.forEach(t),g6o=r(Y8e," (BERT model)"),Y8e.forEach(t),h6o=i(W),h1=n(W,"LI",{});var K8e=s(h1);Ice=n(K8e,"STRONG",{});var Ydt=s(Ice);p6o=r(Ydt,"bert-generation"),Ydt.forEach(t),_6o=r(K8e," \u2014 "),sD=n(K8e,"A",{href:!0});var Kdt=s(sD);u6o=r(Kdt,"BertGenerationDecoder"),Kdt.forEach(t),b6o=r(K8e," (Bert Generation model)"),K8e.forEach(t),v6o=i(W),p1=n(W,"LI",{});var Z8e=s(p1);Nce=n(Z8e,"STRONG",{});var Zdt=s(Nce);F6o=r(Zdt,"big_bird"),Zdt.forEach(t),T6o=r(Z8e," \u2014 "),lD=n(Z8e,"A",{href:!0});var ect=s(lD);M6o=r(ect,"BigBirdForCausalLM"),ect.forEach(t),E6o=r(Z8e," (BigBird model)"),Z8e.forEach(t),C6o=i(W),_1=n(W,"LI",{});var e9e=s(_1);qce=n(e9e,"STRONG",{});var oct=s(qce);w6o=r(oct,"bigbird_pegasus"),oct.forEach(t),A6o=r(e9e," \u2014 "),iD=n(e9e,"A",{href:!0});var rct=s(iD);L6o=r(rct,"BigBirdPegasusForCausalLM"),rct.forEach(t),y6o=r(e9e," (BigBird-Pegasus model)"),e9e.forEach(t),x6o=i(W),u1=n(W,"LI",{});var o9e=s(u1);jce=n(o9e,"STRONG",{});var tct=s(jce);$6o=r(tct,"blenderbot"),tct.forEach(t),k6o=r(o9e," \u2014 "),dD=n(o9e,"A",{href:!0});var act=s(dD);S6o=r(act,"BlenderbotForCausalLM"),act.forEach(t),R6o=r(o9e," (Blenderbot model)"),o9e.forEach(t),P6o=i(W),b1=n(W,"LI",{});var r9e=s(b1);Dce=n(r9e,"STRONG",{});var nct=s(Dce);B6o=r(nct,"blenderbot-small"),nct.forEach(t),I6o=r(r9e," \u2014 "),cD=n(r9e,"A",{href:!0});var sct=s(cD);N6o=r(sct,"BlenderbotSmallForCausalLM"),sct.forEach(t),q6o=r(r9e," (BlenderbotSmall model)"),r9e.forEach(t),j6o=i(W),v1=n(W,"LI",{});var t9e=s(v1);Gce=n(t9e,"STRONG",{});var lct=s(Gce);D6o=r(lct,"bloom"),lct.forEach(t),G6o=r(t9e," \u2014 "),fD=n(t9e,"A",{href:!0});var ict=s(fD);O6o=r(ict,"BloomForCausalLM"),ict.forEach(t),V6o=r(t9e," (BLOOM model)"),t9e.forEach(t),X6o=i(W),F1=n(W,"LI",{});var a9e=s(F1);Oce=n(a9e,"STRONG",{});var dct=s(Oce);z6o=r(dct,"camembert"),dct.forEach(t),W6o=r(a9e," \u2014 "),mD=n(a9e,"A",{href:!0});var cct=s(mD);Q6o=r(cct,"CamembertForCausalLM"),cct.forEach(t),H6o=r(a9e," (CamemBERT model)"),a9e.forEach(t),U6o=i(W),T1=n(W,"LI",{});var n9e=s(T1);Vce=n(n9e,"STRONG",{});var fct=s(Vce);J6o=r(fct,"ctrl"),fct.forEach(t),Y6o=r(n9e," \u2014 "),gD=n(n9e,"A",{href:!0});var mct=s(gD);K6o=r(mct,"CTRLLMHeadModel"),mct.forEach(t),Z6o=r(n9e," (CTRL model)"),n9e.forEach(t),eAo=i(W),M1=n(W,"LI",{});var s9e=s(M1);Xce=n(s9e,"STRONG",{});var gct=s(Xce);oAo=r(gct,"data2vec-text"),gct.forEach(t),rAo=r(s9e," \u2014 "),hD=n(s9e,"A",{href:!0});var hct=s(hD);tAo=r(hct,"Data2VecTextForCausalLM"),hct.forEach(t),aAo=r(s9e," (Data2VecText model)"),s9e.forEach(t),nAo=i(W),E1=n(W,"LI",{});var l9e=s(E1);zce=n(l9e,"STRONG",{});var pct=s(zce);sAo=r(pct,"electra"),pct.forEach(t),lAo=r(l9e," \u2014 "),pD=n(l9e,"A",{href:!0});var _ct=s(pD);iAo=r(_ct,"ElectraForCausalLM"),_ct.forEach(t),dAo=r(l9e," (ELECTRA model)"),l9e.forEach(t),cAo=i(W),C1=n(W,"LI",{});var i9e=s(C1);Wce=n(i9e,"STRONG",{});var uct=s(Wce);fAo=r(uct,"gpt2"),uct.forEach(t),mAo=r(i9e," \u2014 "),_D=n(i9e,"A",{href:!0});var bct=s(_D);gAo=r(bct,"GPT2LMHeadModel"),bct.forEach(t),hAo=r(i9e," (OpenAI GPT-2 model)"),i9e.forEach(t),pAo=i(W),w1=n(W,"LI",{});var d9e=s(w1);Qce=n(d9e,"STRONG",{});var vct=s(Qce);_Ao=r(vct,"gpt_neo"),vct.forEach(t),uAo=r(d9e," \u2014 "),uD=n(d9e,"A",{href:!0});var Fct=s(uD);bAo=r(Fct,"GPTNeoForCausalLM"),Fct.forEach(t),vAo=r(d9e," (GPT Neo model)"),d9e.forEach(t),FAo=i(W),A1=n(W,"LI",{});var c9e=s(A1);Hce=n(c9e,"STRONG",{});var Tct=s(Hce);TAo=r(Tct,"gpt_neox"),Tct.forEach(t),MAo=r(c9e," \u2014 "),bD=n(c9e,"A",{href:!0});var Mct=s(bD);EAo=r(Mct,"GPTNeoXForCausalLM"),Mct.forEach(t),CAo=r(c9e," (GPT NeoX model)"),c9e.forEach(t),wAo=i(W),L1=n(W,"LI",{});var f9e=s(L1);Uce=n(f9e,"STRONG",{});var Ect=s(Uce);AAo=r(Ect,"gptj"),Ect.forEach(t),LAo=r(f9e," \u2014 "),vD=n(f9e,"A",{href:!0});var Cct=s(vD);yAo=r(Cct,"GPTJForCausalLM"),Cct.forEach(t),xAo=r(f9e," (GPT-J model)"),f9e.forEach(t),$Ao=i(W),y1=n(W,"LI",{});var m9e=s(y1);Jce=n(m9e,"STRONG",{});var wct=s(Jce);kAo=r(wct,"marian"),wct.forEach(t),SAo=r(m9e," \u2014 "),FD=n(m9e,"A",{href:!0});var Act=s(FD);RAo=r(Act,"MarianForCausalLM"),Act.forEach(t),PAo=r(m9e," (Marian model)"),m9e.forEach(t),BAo=i(W),x1=n(W,"LI",{});var g9e=s(x1);Yce=n(g9e,"STRONG",{});var Lct=s(Yce);IAo=r(Lct,"mbart"),Lct.forEach(t),NAo=r(g9e," \u2014 "),TD=n(g9e,"A",{href:!0});var yct=s(TD);qAo=r(yct,"MBartForCausalLM"),yct.forEach(t),jAo=r(g9e," (mBART model)"),g9e.forEach(t),DAo=i(W),$1=n(W,"LI",{});var h9e=s($1);Kce=n(h9e,"STRONG",{});var xct=s(Kce);GAo=r(xct,"megatron-bert"),xct.forEach(t),OAo=r(h9e," \u2014 "),MD=n(h9e,"A",{href:!0});var $ct=s(MD);VAo=r($ct,"MegatronBertForCausalLM"),$ct.forEach(t),XAo=r(h9e," (Megatron-BERT model)"),h9e.forEach(t),zAo=i(W),k1=n(W,"LI",{});var p9e=s(k1);Zce=n(p9e,"STRONG",{});var kct=s(Zce);WAo=r(kct,"openai-gpt"),kct.forEach(t),QAo=r(p9e," \u2014 "),ED=n(p9e,"A",{href:!0});var Sct=s(ED);HAo=r(Sct,"OpenAIGPTLMHeadModel"),Sct.forEach(t),UAo=r(p9e," (OpenAI GPT model)"),p9e.forEach(t),JAo=i(W),S1=n(W,"LI",{});var _9e=s(S1);efe=n(_9e,"STRONG",{});var Rct=s(efe);YAo=r(Rct,"opt"),Rct.forEach(t),KAo=r(_9e," \u2014 "),CD=n(_9e,"A",{href:!0});var Pct=s(CD);ZAo=r(Pct,"OPTForCausalLM"),Pct.forEach(t),eLo=r(_9e," (OPT model)"),_9e.forEach(t),oLo=i(W),R1=n(W,"LI",{});var u9e=s(R1);ofe=n(u9e,"STRONG",{});var Bct=s(ofe);rLo=r(Bct,"pegasus"),Bct.forEach(t),tLo=r(u9e," \u2014 "),wD=n(u9e,"A",{href:!0});var Ict=s(wD);aLo=r(Ict,"PegasusForCausalLM"),Ict.forEach(t),nLo=r(u9e," (Pegasus model)"),u9e.forEach(t),sLo=i(W),P1=n(W,"LI",{});var b9e=s(P1);rfe=n(b9e,"STRONG",{});var Nct=s(rfe);lLo=r(Nct,"plbart"),Nct.forEach(t),iLo=r(b9e," \u2014 "),AD=n(b9e,"A",{href:!0});var qct=s(AD);dLo=r(qct,"PLBartForCausalLM"),qct.forEach(t),cLo=r(b9e," (PLBart model)"),b9e.forEach(t),fLo=i(W),B1=n(W,"LI",{});var v9e=s(B1);tfe=n(v9e,"STRONG",{});var jct=s(tfe);mLo=r(jct,"prophetnet"),jct.forEach(t),gLo=r(v9e," \u2014 "),LD=n(v9e,"A",{href:!0});var Dct=s(LD);hLo=r(Dct,"ProphetNetForCausalLM"),Dct.forEach(t),pLo=r(v9e," (ProphetNet model)"),v9e.forEach(t),_Lo=i(W),I1=n(W,"LI",{});var F9e=s(I1);afe=n(F9e,"STRONG",{});var Gct=s(afe);uLo=r(Gct,"qdqbert"),Gct.forEach(t),bLo=r(F9e," \u2014 "),yD=n(F9e,"A",{href:!0});var Oct=s(yD);vLo=r(Oct,"QDQBertLMHeadModel"),Oct.forEach(t),FLo=r(F9e," (QDQBert model)"),F9e.forEach(t),TLo=i(W),N1=n(W,"LI",{});var T9e=s(N1);nfe=n(T9e,"STRONG",{});var Vct=s(nfe);MLo=r(Vct,"reformer"),Vct.forEach(t),ELo=r(T9e," \u2014 "),xD=n(T9e,"A",{href:!0});var Xct=s(xD);CLo=r(Xct,"ReformerModelWithLMHead"),Xct.forEach(t),wLo=r(T9e," (Reformer model)"),T9e.forEach(t),ALo=i(W),q1=n(W,"LI",{});var M9e=s(q1);sfe=n(M9e,"STRONG",{});var zct=s(sfe);LLo=r(zct,"rembert"),zct.forEach(t),yLo=r(M9e," \u2014 "),$D=n(M9e,"A",{href:!0});var Wct=s($D);xLo=r(Wct,"RemBertForCausalLM"),Wct.forEach(t),$Lo=r(M9e," (RemBERT model)"),M9e.forEach(t),kLo=i(W),j1=n(W,"LI",{});var E9e=s(j1);lfe=n(E9e,"STRONG",{});var Qct=s(lfe);SLo=r(Qct,"roberta"),Qct.forEach(t),RLo=r(E9e," \u2014 "),kD=n(E9e,"A",{href:!0});var Hct=s(kD);PLo=r(Hct,"RobertaForCausalLM"),Hct.forEach(t),BLo=r(E9e," (RoBERTa model)"),E9e.forEach(t),ILo=i(W),D1=n(W,"LI",{});var C9e=s(D1);ife=n(C9e,"STRONG",{});var Uct=s(ife);NLo=r(Uct,"roformer"),Uct.forEach(t),qLo=r(C9e," \u2014 "),SD=n(C9e,"A",{href:!0});var Jct=s(SD);jLo=r(Jct,"RoFormerForCausalLM"),Jct.forEach(t),DLo=r(C9e," (RoFormer model)"),C9e.forEach(t),GLo=i(W),G1=n(W,"LI",{});var w9e=s(G1);dfe=n(w9e,"STRONG",{});var Yct=s(dfe);OLo=r(Yct,"speech_to_text_2"),Yct.forEach(t),VLo=r(w9e," \u2014 "),RD=n(w9e,"A",{href:!0});var Kct=s(RD);XLo=r(Kct,"Speech2Text2ForCausalLM"),Kct.forEach(t),zLo=r(w9e," (Speech2Text2 model)"),w9e.forEach(t),WLo=i(W),O1=n(W,"LI",{});var A9e=s(O1);cfe=n(A9e,"STRONG",{});var Zct=s(cfe);QLo=r(Zct,"transfo-xl"),Zct.forEach(t),HLo=r(A9e," \u2014 "),PD=n(A9e,"A",{href:!0});var eft=s(PD);ULo=r(eft,"TransfoXLLMHeadModel"),eft.forEach(t),JLo=r(A9e," (Transformer-XL model)"),A9e.forEach(t),YLo=i(W),V1=n(W,"LI",{});var L9e=s(V1);ffe=n(L9e,"STRONG",{});var oft=s(ffe);KLo=r(oft,"trocr"),oft.forEach(t),ZLo=r(L9e," \u2014 "),BD=n(L9e,"A",{href:!0});var rft=s(BD);eyo=r(rft,"TrOCRForCausalLM"),rft.forEach(t),oyo=r(L9e," (TrOCR model)"),L9e.forEach(t),ryo=i(W),X1=n(W,"LI",{});var y9e=s(X1);mfe=n(y9e,"STRONG",{});var tft=s(mfe);tyo=r(tft,"xglm"),tft.forEach(t),ayo=r(y9e," \u2014 "),ID=n(y9e,"A",{href:!0});var aft=s(ID);nyo=r(aft,"XGLMForCausalLM"),aft.forEach(t),syo=r(y9e," (XGLM model)"),y9e.forEach(t),lyo=i(W),z1=n(W,"LI",{});var x9e=s(z1);gfe=n(x9e,"STRONG",{});var nft=s(gfe);iyo=r(nft,"xlm"),nft.forEach(t),dyo=r(x9e," \u2014 "),ND=n(x9e,"A",{href:!0});var sft=s(ND);cyo=r(sft,"XLMWithLMHeadModel"),sft.forEach(t),fyo=r(x9e," (XLM model)"),x9e.forEach(t),myo=i(W),W1=n(W,"LI",{});var $9e=s(W1);hfe=n($9e,"STRONG",{});var lft=s(hfe);gyo=r(lft,"xlm-prophetnet"),lft.forEach(t),hyo=r($9e," \u2014 "),qD=n($9e,"A",{href:!0});var ift=s(qD);pyo=r(ift,"XLMProphetNetForCausalLM"),ift.forEach(t),_yo=r($9e," (XLM-ProphetNet model)"),$9e.forEach(t),uyo=i(W),Q1=n(W,"LI",{});var k9e=s(Q1);pfe=n(k9e,"STRONG",{});var dft=s(pfe);byo=r(dft,"xlm-roberta"),dft.forEach(t),vyo=r(k9e," \u2014 "),jD=n(k9e,"A",{href:!0});var cft=s(jD);Fyo=r(cft,"XLMRobertaForCausalLM"),cft.forEach(t),Tyo=r(k9e," (XLM-RoBERTa model)"),k9e.forEach(t),Myo=i(W),H1=n(W,"LI",{});var S9e=s(H1);_fe=n(S9e,"STRONG",{});var fft=s(_fe);Eyo=r(fft,"xlm-roberta-xl"),fft.forEach(t),Cyo=r(S9e," \u2014 "),DD=n(S9e,"A",{href:!0});var mft=s(DD);wyo=r(mft,"XLMRobertaXLForCausalLM"),mft.forEach(t),Ayo=r(S9e," (XLM-RoBERTa-XL model)"),S9e.forEach(t),Lyo=i(W),U1=n(W,"LI",{});var R9e=s(U1);ufe=n(R9e,"STRONG",{});var gft=s(ufe);yyo=r(gft,"xlnet"),gft.forEach(t),xyo=r(R9e," \u2014 "),GD=n(R9e,"A",{href:!0});var hft=s(GD);$yo=r(hft,"XLNetLMHeadModel"),hft.forEach(t),kyo=r(R9e," (XLNet model)"),R9e.forEach(t),W.forEach(t),Syo=i(aa),J1=n(aa,"P",{});var P9e=s(J1);Ryo=r(P9e,"The model is set in evaluation mode by default using "),bfe=n(P9e,"CODE",{});var pft=s(bfe);Pyo=r(pft,"model.eval()"),pft.forEach(t),Byo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(P9e,"CODE",{});var _ft=s(vfe);Iyo=r(_ft,"model.train()"),_ft.forEach(t),P9e.forEach(t),Nyo=i(aa),T(Y1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),rDe=i(f),Ii=n(f,"H2",{class:!0});var sOe=s(Ii);K1=n(sOe,"A",{id:!0,class:!0,href:!0});var uft=s(K1);Ffe=n(uft,"SPAN",{});var bft=s(Ffe);T(NL.$$.fragment,bft),bft.forEach(t),uft.forEach(t),qyo=i(sOe),Tfe=n(sOe,"SPAN",{});var vft=s(Tfe);jyo=r(vft,"AutoModelForMaskedLM"),vft.forEach(t),sOe.forEach(t),tDe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(qL.$$.fragment,zs),Dyo=i(zs),Ni=n(zs,"P",{});var pee=s(Ni);Gyo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OD=n(pee,"A",{href:!0});var Fft=s(OD);Oyo=r(Fft,"from_pretrained()"),Fft.forEach(t),Vyo=r(pee," class method or the "),VD=n(pee,"A",{href:!0});var Tft=s(VD);Xyo=r(Tft,"from_config()"),Tft.forEach(t),zyo=r(pee,` class
method.`),pee.forEach(t),Wyo=i(zs),jL=n(zs,"P",{});var lOe=s(jL);Qyo=r(lOe,"This class cannot be instantiated directly using "),Mfe=n(lOe,"CODE",{});var Mft=s(Mfe);Hyo=r(Mft,"__init__()"),Mft.forEach(t),Uyo=r(lOe," (throws an error)."),lOe.forEach(t),Jyo=i(zs),lt=n(zs,"DIV",{class:!0});var l6=s(lt);T(DL.$$.fragment,l6),Yyo=i(l6),Efe=n(l6,"P",{});var Eft=s(Efe);Kyo=r(Eft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Eft.forEach(t),Zyo=i(l6),qi=n(l6,"P",{});var _ee=s(qi);e8o=r(_ee,`Note:
Loading a model from its configuration file does `),Cfe=n(_ee,"STRONG",{});var Cft=s(Cfe);o8o=r(Cft,"not"),Cft.forEach(t),r8o=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(_ee,"A",{href:!0});var wft=s(XD);t8o=r(wft,"from_pretrained()"),wft.forEach(t),a8o=r(_ee," to load the model weights."),_ee.forEach(t),n8o=i(l6),T(Z1.$$.fragment,l6),l6.forEach(t),s8o=i(zs),Ze=n(zs,"DIV",{class:!0});var na=s(Ze);T(GL.$$.fragment,na),l8o=i(na),wfe=n(na,"P",{});var Aft=s(wfe);i8o=r(Aft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Aft.forEach(t),d8o=i(na),Sa=n(na,"P",{});var i6=s(Sa);c8o=r(i6,"The model class to instantiate is selected based on the "),Afe=n(i6,"CODE",{});var Lft=s(Afe);f8o=r(Lft,"model_type"),Lft.forEach(t),m8o=r(i6,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(i6,"CODE",{});var yft=s(Lfe);g8o=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),h8o=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(i6,"CODE",{});var xft=s(yfe);p8o=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),_8o=r(i6,":"),i6.forEach(t),u8o=i(na),Q=n(na,"UL",{});var H=s(Q);eb=n(H,"LI",{});var B9e=s(eb);xfe=n(B9e,"STRONG",{});var $ft=s(xfe);b8o=r($ft,"albert"),$ft.forEach(t),v8o=r(B9e," \u2014 "),zD=n(B9e,"A",{href:!0});var kft=s(zD);F8o=r(kft,"AlbertForMaskedLM"),kft.forEach(t),T8o=r(B9e," (ALBERT model)"),B9e.forEach(t),M8o=i(H),ob=n(H,"LI",{});var I9e=s(ob);$fe=n(I9e,"STRONG",{});var Sft=s($fe);E8o=r(Sft,"bart"),Sft.forEach(t),C8o=r(I9e," \u2014 "),WD=n(I9e,"A",{href:!0});var Rft=s(WD);w8o=r(Rft,"BartForConditionalGeneration"),Rft.forEach(t),A8o=r(I9e," (BART model)"),I9e.forEach(t),L8o=i(H),rb=n(H,"LI",{});var N9e=s(rb);kfe=n(N9e,"STRONG",{});var Pft=s(kfe);y8o=r(Pft,"bert"),Pft.forEach(t),x8o=r(N9e," \u2014 "),QD=n(N9e,"A",{href:!0});var Bft=s(QD);$8o=r(Bft,"BertForMaskedLM"),Bft.forEach(t),k8o=r(N9e," (BERT model)"),N9e.forEach(t),S8o=i(H),tb=n(H,"LI",{});var q9e=s(tb);Sfe=n(q9e,"STRONG",{});var Ift=s(Sfe);R8o=r(Ift,"big_bird"),Ift.forEach(t),P8o=r(q9e," \u2014 "),HD=n(q9e,"A",{href:!0});var Nft=s(HD);B8o=r(Nft,"BigBirdForMaskedLM"),Nft.forEach(t),I8o=r(q9e," (BigBird model)"),q9e.forEach(t),N8o=i(H),ab=n(H,"LI",{});var j9e=s(ab);Rfe=n(j9e,"STRONG",{});var qft=s(Rfe);q8o=r(qft,"camembert"),qft.forEach(t),j8o=r(j9e," \u2014 "),UD=n(j9e,"A",{href:!0});var jft=s(UD);D8o=r(jft,"CamembertForMaskedLM"),jft.forEach(t),G8o=r(j9e," (CamemBERT model)"),j9e.forEach(t),O8o=i(H),nb=n(H,"LI",{});var D9e=s(nb);Pfe=n(D9e,"STRONG",{});var Dft=s(Pfe);V8o=r(Dft,"convbert"),Dft.forEach(t),X8o=r(D9e," \u2014 "),JD=n(D9e,"A",{href:!0});var Gft=s(JD);z8o=r(Gft,"ConvBertForMaskedLM"),Gft.forEach(t),W8o=r(D9e," (ConvBERT model)"),D9e.forEach(t),Q8o=i(H),sb=n(H,"LI",{});var G9e=s(sb);Bfe=n(G9e,"STRONG",{});var Oft=s(Bfe);H8o=r(Oft,"data2vec-text"),Oft.forEach(t),U8o=r(G9e," \u2014 "),YD=n(G9e,"A",{href:!0});var Vft=s(YD);J8o=r(Vft,"Data2VecTextForMaskedLM"),Vft.forEach(t),Y8o=r(G9e," (Data2VecText model)"),G9e.forEach(t),K8o=i(H),lb=n(H,"LI",{});var O9e=s(lb);Ife=n(O9e,"STRONG",{});var Xft=s(Ife);Z8o=r(Xft,"deberta"),Xft.forEach(t),e9o=r(O9e," \u2014 "),KD=n(O9e,"A",{href:!0});var zft=s(KD);o9o=r(zft,"DebertaForMaskedLM"),zft.forEach(t),r9o=r(O9e," (DeBERTa model)"),O9e.forEach(t),t9o=i(H),ib=n(H,"LI",{});var V9e=s(ib);Nfe=n(V9e,"STRONG",{});var Wft=s(Nfe);a9o=r(Wft,"deberta-v2"),Wft.forEach(t),n9o=r(V9e," \u2014 "),ZD=n(V9e,"A",{href:!0});var Qft=s(ZD);s9o=r(Qft,"DebertaV2ForMaskedLM"),Qft.forEach(t),l9o=r(V9e," (DeBERTa-v2 model)"),V9e.forEach(t),i9o=i(H),db=n(H,"LI",{});var X9e=s(db);qfe=n(X9e,"STRONG",{});var Hft=s(qfe);d9o=r(Hft,"distilbert"),Hft.forEach(t),c9o=r(X9e," \u2014 "),eG=n(X9e,"A",{href:!0});var Uft=s(eG);f9o=r(Uft,"DistilBertForMaskedLM"),Uft.forEach(t),m9o=r(X9e," (DistilBERT model)"),X9e.forEach(t),g9o=i(H),cb=n(H,"LI",{});var z9e=s(cb);jfe=n(z9e,"STRONG",{});var Jft=s(jfe);h9o=r(Jft,"electra"),Jft.forEach(t),p9o=r(z9e," \u2014 "),oG=n(z9e,"A",{href:!0});var Yft=s(oG);_9o=r(Yft,"ElectraForMaskedLM"),Yft.forEach(t),u9o=r(z9e," (ELECTRA model)"),z9e.forEach(t),b9o=i(H),fb=n(H,"LI",{});var W9e=s(fb);Dfe=n(W9e,"STRONG",{});var Kft=s(Dfe);v9o=r(Kft,"flaubert"),Kft.forEach(t),F9o=r(W9e," \u2014 "),rG=n(W9e,"A",{href:!0});var Zft=s(rG);T9o=r(Zft,"FlaubertWithLMHeadModel"),Zft.forEach(t),M9o=r(W9e," (FlauBERT model)"),W9e.forEach(t),E9o=i(H),mb=n(H,"LI",{});var Q9e=s(mb);Gfe=n(Q9e,"STRONG",{});var emt=s(Gfe);C9o=r(emt,"fnet"),emt.forEach(t),w9o=r(Q9e," \u2014 "),tG=n(Q9e,"A",{href:!0});var omt=s(tG);A9o=r(omt,"FNetForMaskedLM"),omt.forEach(t),L9o=r(Q9e," (FNet model)"),Q9e.forEach(t),y9o=i(H),gb=n(H,"LI",{});var H9e=s(gb);Ofe=n(H9e,"STRONG",{});var rmt=s(Ofe);x9o=r(rmt,"funnel"),rmt.forEach(t),$9o=r(H9e," \u2014 "),aG=n(H9e,"A",{href:!0});var tmt=s(aG);k9o=r(tmt,"FunnelForMaskedLM"),tmt.forEach(t),S9o=r(H9e," (Funnel Transformer model)"),H9e.forEach(t),R9o=i(H),hb=n(H,"LI",{});var U9e=s(hb);Vfe=n(U9e,"STRONG",{});var amt=s(Vfe);P9o=r(amt,"ibert"),amt.forEach(t),B9o=r(U9e," \u2014 "),nG=n(U9e,"A",{href:!0});var nmt=s(nG);I9o=r(nmt,"IBertForMaskedLM"),nmt.forEach(t),N9o=r(U9e," (I-BERT model)"),U9e.forEach(t),q9o=i(H),pb=n(H,"LI",{});var J9e=s(pb);Xfe=n(J9e,"STRONG",{});var smt=s(Xfe);j9o=r(smt,"layoutlm"),smt.forEach(t),D9o=r(J9e," \u2014 "),sG=n(J9e,"A",{href:!0});var lmt=s(sG);G9o=r(lmt,"LayoutLMForMaskedLM"),lmt.forEach(t),O9o=r(J9e," (LayoutLM model)"),J9e.forEach(t),V9o=i(H),_b=n(H,"LI",{});var Y9e=s(_b);zfe=n(Y9e,"STRONG",{});var imt=s(zfe);X9o=r(imt,"longformer"),imt.forEach(t),z9o=r(Y9e," \u2014 "),lG=n(Y9e,"A",{href:!0});var dmt=s(lG);W9o=r(dmt,"LongformerForMaskedLM"),dmt.forEach(t),Q9o=r(Y9e," (Longformer model)"),Y9e.forEach(t),H9o=i(H),ub=n(H,"LI",{});var K9e=s(ub);Wfe=n(K9e,"STRONG",{});var cmt=s(Wfe);U9o=r(cmt,"luke"),cmt.forEach(t),J9o=r(K9e," \u2014 "),iG=n(K9e,"A",{href:!0});var fmt=s(iG);Y9o=r(fmt,"LukeForMaskedLM"),fmt.forEach(t),K9o=r(K9e," (LUKE model)"),K9e.forEach(t),Z9o=i(H),bb=n(H,"LI",{});var Z9e=s(bb);Qfe=n(Z9e,"STRONG",{});var mmt=s(Qfe);exo=r(mmt,"mbart"),mmt.forEach(t),oxo=r(Z9e," \u2014 "),dG=n(Z9e,"A",{href:!0});var gmt=s(dG);rxo=r(gmt,"MBartForConditionalGeneration"),gmt.forEach(t),txo=r(Z9e," (mBART model)"),Z9e.forEach(t),axo=i(H),vb=n(H,"LI",{});var exe=s(vb);Hfe=n(exe,"STRONG",{});var hmt=s(Hfe);nxo=r(hmt,"megatron-bert"),hmt.forEach(t),sxo=r(exe," \u2014 "),cG=n(exe,"A",{href:!0});var pmt=s(cG);lxo=r(pmt,"MegatronBertForMaskedLM"),pmt.forEach(t),ixo=r(exe," (Megatron-BERT model)"),exe.forEach(t),dxo=i(H),Fb=n(H,"LI",{});var oxe=s(Fb);Ufe=n(oxe,"STRONG",{});var _mt=s(Ufe);cxo=r(_mt,"mobilebert"),_mt.forEach(t),fxo=r(oxe," \u2014 "),fG=n(oxe,"A",{href:!0});var umt=s(fG);mxo=r(umt,"MobileBertForMaskedLM"),umt.forEach(t),gxo=r(oxe," (MobileBERT model)"),oxe.forEach(t),hxo=i(H),Tb=n(H,"LI",{});var rxe=s(Tb);Jfe=n(rxe,"STRONG",{});var bmt=s(Jfe);pxo=r(bmt,"mpnet"),bmt.forEach(t),_xo=r(rxe," \u2014 "),mG=n(rxe,"A",{href:!0});var vmt=s(mG);uxo=r(vmt,"MPNetForMaskedLM"),vmt.forEach(t),bxo=r(rxe," (MPNet model)"),rxe.forEach(t),vxo=i(H),Mb=n(H,"LI",{});var txe=s(Mb);Yfe=n(txe,"STRONG",{});var Fmt=s(Yfe);Fxo=r(Fmt,"nystromformer"),Fmt.forEach(t),Txo=r(txe," \u2014 "),gG=n(txe,"A",{href:!0});var Tmt=s(gG);Mxo=r(Tmt,"NystromformerForMaskedLM"),Tmt.forEach(t),Exo=r(txe," (Nystr\xF6mformer model)"),txe.forEach(t),Cxo=i(H),Eb=n(H,"LI",{});var axe=s(Eb);Kfe=n(axe,"STRONG",{});var Mmt=s(Kfe);wxo=r(Mmt,"perceiver"),Mmt.forEach(t),Axo=r(axe," \u2014 "),hG=n(axe,"A",{href:!0});var Emt=s(hG);Lxo=r(Emt,"PerceiverForMaskedLM"),Emt.forEach(t),yxo=r(axe," (Perceiver model)"),axe.forEach(t),xxo=i(H),Cb=n(H,"LI",{});var nxe=s(Cb);Zfe=n(nxe,"STRONG",{});var Cmt=s(Zfe);$xo=r(Cmt,"qdqbert"),Cmt.forEach(t),kxo=r(nxe," \u2014 "),pG=n(nxe,"A",{href:!0});var wmt=s(pG);Sxo=r(wmt,"QDQBertForMaskedLM"),wmt.forEach(t),Rxo=r(nxe," (QDQBert model)"),nxe.forEach(t),Pxo=i(H),wb=n(H,"LI",{});var sxe=s(wb);eme=n(sxe,"STRONG",{});var Amt=s(eme);Bxo=r(Amt,"reformer"),Amt.forEach(t),Ixo=r(sxe," \u2014 "),_G=n(sxe,"A",{href:!0});var Lmt=s(_G);Nxo=r(Lmt,"ReformerForMaskedLM"),Lmt.forEach(t),qxo=r(sxe," (Reformer model)"),sxe.forEach(t),jxo=i(H),Ab=n(H,"LI",{});var lxe=s(Ab);ome=n(lxe,"STRONG",{});var ymt=s(ome);Dxo=r(ymt,"rembert"),ymt.forEach(t),Gxo=r(lxe," \u2014 "),uG=n(lxe,"A",{href:!0});var xmt=s(uG);Oxo=r(xmt,"RemBertForMaskedLM"),xmt.forEach(t),Vxo=r(lxe," (RemBERT model)"),lxe.forEach(t),Xxo=i(H),Lb=n(H,"LI",{});var ixe=s(Lb);rme=n(ixe,"STRONG",{});var $mt=s(rme);zxo=r($mt,"roberta"),$mt.forEach(t),Wxo=r(ixe," \u2014 "),bG=n(ixe,"A",{href:!0});var kmt=s(bG);Qxo=r(kmt,"RobertaForMaskedLM"),kmt.forEach(t),Hxo=r(ixe," (RoBERTa model)"),ixe.forEach(t),Uxo=i(H),yb=n(H,"LI",{});var dxe=s(yb);tme=n(dxe,"STRONG",{});var Smt=s(tme);Jxo=r(Smt,"roformer"),Smt.forEach(t),Yxo=r(dxe," \u2014 "),vG=n(dxe,"A",{href:!0});var Rmt=s(vG);Kxo=r(Rmt,"RoFormerForMaskedLM"),Rmt.forEach(t),Zxo=r(dxe," (RoFormer model)"),dxe.forEach(t),e$o=i(H),xb=n(H,"LI",{});var cxe=s(xb);ame=n(cxe,"STRONG",{});var Pmt=s(ame);o$o=r(Pmt,"squeezebert"),Pmt.forEach(t),r$o=r(cxe," \u2014 "),FG=n(cxe,"A",{href:!0});var Bmt=s(FG);t$o=r(Bmt,"SqueezeBertForMaskedLM"),Bmt.forEach(t),a$o=r(cxe," (SqueezeBERT model)"),cxe.forEach(t),n$o=i(H),$b=n(H,"LI",{});var fxe=s($b);nme=n(fxe,"STRONG",{});var Imt=s(nme);s$o=r(Imt,"tapas"),Imt.forEach(t),l$o=r(fxe," \u2014 "),TG=n(fxe,"A",{href:!0});var Nmt=s(TG);i$o=r(Nmt,"TapasForMaskedLM"),Nmt.forEach(t),d$o=r(fxe," (TAPAS model)"),fxe.forEach(t),c$o=i(H),kb=n(H,"LI",{});var mxe=s(kb);sme=n(mxe,"STRONG",{});var qmt=s(sme);f$o=r(qmt,"wav2vec2"),qmt.forEach(t),m$o=r(mxe," \u2014 "),lme=n(mxe,"CODE",{});var jmt=s(lme);g$o=r(jmt,"Wav2Vec2ForMaskedLM"),jmt.forEach(t),h$o=r(mxe," (Wav2Vec2 model)"),mxe.forEach(t),p$o=i(H),Sb=n(H,"LI",{});var gxe=s(Sb);ime=n(gxe,"STRONG",{});var Dmt=s(ime);_$o=r(Dmt,"xlm"),Dmt.forEach(t),u$o=r(gxe," \u2014 "),MG=n(gxe,"A",{href:!0});var Gmt=s(MG);b$o=r(Gmt,"XLMWithLMHeadModel"),Gmt.forEach(t),v$o=r(gxe," (XLM model)"),gxe.forEach(t),F$o=i(H),Rb=n(H,"LI",{});var hxe=s(Rb);dme=n(hxe,"STRONG",{});var Omt=s(dme);T$o=r(Omt,"xlm-roberta"),Omt.forEach(t),M$o=r(hxe," \u2014 "),EG=n(hxe,"A",{href:!0});var Vmt=s(EG);E$o=r(Vmt,"XLMRobertaForMaskedLM"),Vmt.forEach(t),C$o=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),w$o=i(H),Pb=n(H,"LI",{});var pxe=s(Pb);cme=n(pxe,"STRONG",{});var Xmt=s(cme);A$o=r(Xmt,"xlm-roberta-xl"),Xmt.forEach(t),L$o=r(pxe," \u2014 "),CG=n(pxe,"A",{href:!0});var zmt=s(CG);y$o=r(zmt,"XLMRobertaXLForMaskedLM"),zmt.forEach(t),x$o=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),$$o=i(H),Bb=n(H,"LI",{});var _xe=s(Bb);fme=n(_xe,"STRONG",{});var Wmt=s(fme);k$o=r(Wmt,"yoso"),Wmt.forEach(t),S$o=r(_xe," \u2014 "),wG=n(_xe,"A",{href:!0});var Qmt=s(wG);R$o=r(Qmt,"YosoForMaskedLM"),Qmt.forEach(t),P$o=r(_xe," (YOSO model)"),_xe.forEach(t),H.forEach(t),B$o=i(na),Ib=n(na,"P",{});var uxe=s(Ib);I$o=r(uxe,"The model is set in evaluation mode by default using "),mme=n(uxe,"CODE",{});var Hmt=s(mme);N$o=r(Hmt,"model.eval()"),Hmt.forEach(t),q$o=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(uxe,"CODE",{});var Umt=s(gme);j$o=r(Umt,"model.train()"),Umt.forEach(t),uxe.forEach(t),D$o=i(na),T(Nb.$$.fragment,na),na.forEach(t),zs.forEach(t),aDe=i(f),ji=n(f,"H2",{class:!0});var iOe=s(ji);qb=n(iOe,"A",{id:!0,class:!0,href:!0});var Jmt=s(qb);hme=n(Jmt,"SPAN",{});var Ymt=s(hme);T(OL.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),G$o=i(iOe),pme=n(iOe,"SPAN",{});var Kmt=s(pme);O$o=r(Kmt,"AutoModelForSeq2SeqLM"),Kmt.forEach(t),iOe.forEach(t),nDe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(VL.$$.fragment,Ws),V$o=i(Ws),Di=n(Ws,"P",{});var uee=s(Di);X$o=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AG=n(uee,"A",{href:!0});var Zmt=s(AG);z$o=r(Zmt,"from_pretrained()"),Zmt.forEach(t),W$o=r(uee," class method or the "),LG=n(uee,"A",{href:!0});var egt=s(LG);Q$o=r(egt,"from_config()"),egt.forEach(t),H$o=r(uee,` class
method.`),uee.forEach(t),U$o=i(Ws),XL=n(Ws,"P",{});var dOe=s(XL);J$o=r(dOe,"This class cannot be instantiated directly using "),_me=n(dOe,"CODE",{});var ogt=s(_me);Y$o=r(ogt,"__init__()"),ogt.forEach(t),K$o=r(dOe," (throws an error)."),dOe.forEach(t),Z$o=i(Ws),it=n(Ws,"DIV",{class:!0});var d6=s(it);T(zL.$$.fragment,d6),eko=i(d6),ume=n(d6,"P",{});var rgt=s(ume);oko=r(rgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rgt.forEach(t),rko=i(d6),Gi=n(d6,"P",{});var bee=s(Gi);tko=r(bee,`Note:
Loading a model from its configuration file does `),bme=n(bee,"STRONG",{});var tgt=s(bme);ako=r(tgt,"not"),tgt.forEach(t),nko=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(bee,"A",{href:!0});var agt=s(yG);sko=r(agt,"from_pretrained()"),agt.forEach(t),lko=r(bee," to load the model weights."),bee.forEach(t),iko=i(d6),T(jb.$$.fragment,d6),d6.forEach(t),dko=i(Ws),eo=n(Ws,"DIV",{class:!0});var sa=s(eo);T(WL.$$.fragment,sa),cko=i(sa),vme=n(sa,"P",{});var ngt=s(vme);fko=r(ngt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ngt.forEach(t),mko=i(sa),Ra=n(sa,"P",{});var c6=s(Ra);gko=r(c6,"The model class to instantiate is selected based on the "),Fme=n(c6,"CODE",{});var sgt=s(Fme);hko=r(sgt,"model_type"),sgt.forEach(t),pko=r(c6,` property of the config object (either
passed as an argument or loaded from `),Tme=n(c6,"CODE",{});var lgt=s(Tme);_ko=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),uko=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(c6,"CODE",{});var igt=s(Mme);bko=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),vko=r(c6,":"),c6.forEach(t),Fko=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);Db=n(Fe,"LI",{});var bxe=s(Db);Eme=n(bxe,"STRONG",{});var dgt=s(Eme);Tko=r(dgt,"bart"),dgt.forEach(t),Mko=r(bxe," \u2014 "),xG=n(bxe,"A",{href:!0});var cgt=s(xG);Eko=r(cgt,"BartForConditionalGeneration"),cgt.forEach(t),Cko=r(bxe," (BART model)"),bxe.forEach(t),wko=i(Fe),Gb=n(Fe,"LI",{});var vxe=s(Gb);Cme=n(vxe,"STRONG",{});var fgt=s(Cme);Ako=r(fgt,"bigbird_pegasus"),fgt.forEach(t),Lko=r(vxe," \u2014 "),$G=n(vxe,"A",{href:!0});var mgt=s($G);yko=r(mgt,"BigBirdPegasusForConditionalGeneration"),mgt.forEach(t),xko=r(vxe," (BigBird-Pegasus model)"),vxe.forEach(t),$ko=i(Fe),Ob=n(Fe,"LI",{});var Fxe=s(Ob);wme=n(Fxe,"STRONG",{});var ggt=s(wme);kko=r(ggt,"blenderbot"),ggt.forEach(t),Sko=r(Fxe," \u2014 "),kG=n(Fxe,"A",{href:!0});var hgt=s(kG);Rko=r(hgt,"BlenderbotForConditionalGeneration"),hgt.forEach(t),Pko=r(Fxe," (Blenderbot model)"),Fxe.forEach(t),Bko=i(Fe),Vb=n(Fe,"LI",{});var Txe=s(Vb);Ame=n(Txe,"STRONG",{});var pgt=s(Ame);Iko=r(pgt,"blenderbot-small"),pgt.forEach(t),Nko=r(Txe," \u2014 "),SG=n(Txe,"A",{href:!0});var _gt=s(SG);qko=r(_gt,"BlenderbotSmallForConditionalGeneration"),_gt.forEach(t),jko=r(Txe," (BlenderbotSmall model)"),Txe.forEach(t),Dko=i(Fe),Xb=n(Fe,"LI",{});var Mxe=s(Xb);Lme=n(Mxe,"STRONG",{});var ugt=s(Lme);Gko=r(ugt,"encoder-decoder"),ugt.forEach(t),Oko=r(Mxe," \u2014 "),RG=n(Mxe,"A",{href:!0});var bgt=s(RG);Vko=r(bgt,"EncoderDecoderModel"),bgt.forEach(t),Xko=r(Mxe," (Encoder decoder model)"),Mxe.forEach(t),zko=i(Fe),zb=n(Fe,"LI",{});var Exe=s(zb);yme=n(Exe,"STRONG",{});var vgt=s(yme);Wko=r(vgt,"fsmt"),vgt.forEach(t),Qko=r(Exe," \u2014 "),PG=n(Exe,"A",{href:!0});var Fgt=s(PG);Hko=r(Fgt,"FSMTForConditionalGeneration"),Fgt.forEach(t),Uko=r(Exe," (FairSeq Machine-Translation model)"),Exe.forEach(t),Jko=i(Fe),Wb=n(Fe,"LI",{});var Cxe=s(Wb);xme=n(Cxe,"STRONG",{});var Tgt=s(xme);Yko=r(Tgt,"led"),Tgt.forEach(t),Kko=r(Cxe," \u2014 "),BG=n(Cxe,"A",{href:!0});var Mgt=s(BG);Zko=r(Mgt,"LEDForConditionalGeneration"),Mgt.forEach(t),eSo=r(Cxe," (LED model)"),Cxe.forEach(t),oSo=i(Fe),Qb=n(Fe,"LI",{});var wxe=s(Qb);$me=n(wxe,"STRONG",{});var Egt=s($me);rSo=r(Egt,"m2m_100"),Egt.forEach(t),tSo=r(wxe," \u2014 "),IG=n(wxe,"A",{href:!0});var Cgt=s(IG);aSo=r(Cgt,"M2M100ForConditionalGeneration"),Cgt.forEach(t),nSo=r(wxe," (M2M100 model)"),wxe.forEach(t),sSo=i(Fe),Hb=n(Fe,"LI",{});var Axe=s(Hb);kme=n(Axe,"STRONG",{});var wgt=s(kme);lSo=r(wgt,"marian"),wgt.forEach(t),iSo=r(Axe," \u2014 "),NG=n(Axe,"A",{href:!0});var Agt=s(NG);dSo=r(Agt,"MarianMTModel"),Agt.forEach(t),cSo=r(Axe," (Marian model)"),Axe.forEach(t),fSo=i(Fe),Ub=n(Fe,"LI",{});var Lxe=s(Ub);Sme=n(Lxe,"STRONG",{});var Lgt=s(Sme);mSo=r(Lgt,"mbart"),Lgt.forEach(t),gSo=r(Lxe," \u2014 "),qG=n(Lxe,"A",{href:!0});var ygt=s(qG);hSo=r(ygt,"MBartForConditionalGeneration"),ygt.forEach(t),pSo=r(Lxe," (mBART model)"),Lxe.forEach(t),_So=i(Fe),Jb=n(Fe,"LI",{});var yxe=s(Jb);Rme=n(yxe,"STRONG",{});var xgt=s(Rme);uSo=r(xgt,"mt5"),xgt.forEach(t),bSo=r(yxe," \u2014 "),jG=n(yxe,"A",{href:!0});var $gt=s(jG);vSo=r($gt,"MT5ForConditionalGeneration"),$gt.forEach(t),FSo=r(yxe," (MT5 model)"),yxe.forEach(t),TSo=i(Fe),Yb=n(Fe,"LI",{});var xxe=s(Yb);Pme=n(xxe,"STRONG",{});var kgt=s(Pme);MSo=r(kgt,"pegasus"),kgt.forEach(t),ESo=r(xxe," \u2014 "),DG=n(xxe,"A",{href:!0});var Sgt=s(DG);CSo=r(Sgt,"PegasusForConditionalGeneration"),Sgt.forEach(t),wSo=r(xxe," (Pegasus model)"),xxe.forEach(t),ASo=i(Fe),Kb=n(Fe,"LI",{});var $xe=s(Kb);Bme=n($xe,"STRONG",{});var Rgt=s(Bme);LSo=r(Rgt,"plbart"),Rgt.forEach(t),ySo=r($xe," \u2014 "),GG=n($xe,"A",{href:!0});var Pgt=s(GG);xSo=r(Pgt,"PLBartForConditionalGeneration"),Pgt.forEach(t),$So=r($xe," (PLBart model)"),$xe.forEach(t),kSo=i(Fe),Zb=n(Fe,"LI",{});var kxe=s(Zb);Ime=n(kxe,"STRONG",{});var Bgt=s(Ime);SSo=r(Bgt,"prophetnet"),Bgt.forEach(t),RSo=r(kxe," \u2014 "),OG=n(kxe,"A",{href:!0});var Igt=s(OG);PSo=r(Igt,"ProphetNetForConditionalGeneration"),Igt.forEach(t),BSo=r(kxe," (ProphetNet model)"),kxe.forEach(t),ISo=i(Fe),e2=n(Fe,"LI",{});var Sxe=s(e2);Nme=n(Sxe,"STRONG",{});var Ngt=s(Nme);NSo=r(Ngt,"t5"),Ngt.forEach(t),qSo=r(Sxe," \u2014 "),VG=n(Sxe,"A",{href:!0});var qgt=s(VG);jSo=r(qgt,"T5ForConditionalGeneration"),qgt.forEach(t),DSo=r(Sxe," (T5 model)"),Sxe.forEach(t),GSo=i(Fe),o2=n(Fe,"LI",{});var Rxe=s(o2);qme=n(Rxe,"STRONG",{});var jgt=s(qme);OSo=r(jgt,"xlm-prophetnet"),jgt.forEach(t),VSo=r(Rxe," \u2014 "),XG=n(Rxe,"A",{href:!0});var Dgt=s(XG);XSo=r(Dgt,"XLMProphetNetForConditionalGeneration"),Dgt.forEach(t),zSo=r(Rxe," (XLM-ProphetNet model)"),Rxe.forEach(t),Fe.forEach(t),WSo=i(sa),r2=n(sa,"P",{});var Pxe=s(r2);QSo=r(Pxe,"The model is set in evaluation mode by default using "),jme=n(Pxe,"CODE",{});var Ggt=s(jme);HSo=r(Ggt,"model.eval()"),Ggt.forEach(t),USo=r(Pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(Pxe,"CODE",{});var Ogt=s(Dme);JSo=r(Ogt,"model.train()"),Ogt.forEach(t),Pxe.forEach(t),YSo=i(sa),T(t2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),sDe=i(f),Oi=n(f,"H2",{class:!0});var cOe=s(Oi);a2=n(cOe,"A",{id:!0,class:!0,href:!0});var Vgt=s(a2);Gme=n(Vgt,"SPAN",{});var Xgt=s(Gme);T(QL.$$.fragment,Xgt),Xgt.forEach(t),Vgt.forEach(t),KSo=i(cOe),Ome=n(cOe,"SPAN",{});var zgt=s(Ome);ZSo=r(zgt,"AutoModelForSequenceClassification"),zgt.forEach(t),cOe.forEach(t),lDe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(HL.$$.fragment,Qs),eRo=i(Qs),Vi=n(Qs,"P",{});var vee=s(Vi);oRo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zG=n(vee,"A",{href:!0});var Wgt=s(zG);rRo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),tRo=r(vee," class method or the "),WG=n(vee,"A",{href:!0});var Qgt=s(WG);aRo=r(Qgt,"from_config()"),Qgt.forEach(t),nRo=r(vee,` class
method.`),vee.forEach(t),sRo=i(Qs),UL=n(Qs,"P",{});var fOe=s(UL);lRo=r(fOe,"This class cannot be instantiated directly using "),Vme=n(fOe,"CODE",{});var Hgt=s(Vme);iRo=r(Hgt,"__init__()"),Hgt.forEach(t),dRo=r(fOe," (throws an error)."),fOe.forEach(t),cRo=i(Qs),dt=n(Qs,"DIV",{class:!0});var f6=s(dt);T(JL.$$.fragment,f6),fRo=i(f6),Xme=n(f6,"P",{});var Ugt=s(Xme);mRo=r(Ugt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ugt.forEach(t),gRo=i(f6),Xi=n(f6,"P",{});var Fee=s(Xi);hRo=r(Fee,`Note:
Loading a model from its configuration file does `),zme=n(Fee,"STRONG",{});var Jgt=s(zme);pRo=r(Jgt,"not"),Jgt.forEach(t),_Ro=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(Fee,"A",{href:!0});var Ygt=s(QG);uRo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),bRo=r(Fee," to load the model weights."),Fee.forEach(t),vRo=i(f6),T(n2.$$.fragment,f6),f6.forEach(t),FRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var la=s(oo);T(YL.$$.fragment,la),TRo=i(la),Wme=n(la,"P",{});var Kgt=s(Wme);MRo=r(Kgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kgt.forEach(t),ERo=i(la),Pa=n(la,"P",{});var m6=s(Pa);CRo=r(m6,"The model class to instantiate is selected based on the "),Qme=n(m6,"CODE",{});var Zgt=s(Qme);wRo=r(Zgt,"model_type"),Zgt.forEach(t),ARo=r(m6,` property of the config object (either
passed as an argument or loaded from `),Hme=n(m6,"CODE",{});var eht=s(Hme);LRo=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),yRo=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(m6,"CODE",{});var oht=s(Ume);xRo=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),$Ro=r(m6,":"),m6.forEach(t),kRo=i(la),N=n(la,"UL",{});var j=s(N);s2=n(j,"LI",{});var Bxe=s(s2);Jme=n(Bxe,"STRONG",{});var rht=s(Jme);SRo=r(rht,"albert"),rht.forEach(t),RRo=r(Bxe," \u2014 "),HG=n(Bxe,"A",{href:!0});var tht=s(HG);PRo=r(tht,"AlbertForSequenceClassification"),tht.forEach(t),BRo=r(Bxe," (ALBERT model)"),Bxe.forEach(t),IRo=i(j),l2=n(j,"LI",{});var Ixe=s(l2);Yme=n(Ixe,"STRONG",{});var aht=s(Yme);NRo=r(aht,"bart"),aht.forEach(t),qRo=r(Ixe," \u2014 "),UG=n(Ixe,"A",{href:!0});var nht=s(UG);jRo=r(nht,"BartForSequenceClassification"),nht.forEach(t),DRo=r(Ixe," (BART model)"),Ixe.forEach(t),GRo=i(j),i2=n(j,"LI",{});var Nxe=s(i2);Kme=n(Nxe,"STRONG",{});var sht=s(Kme);ORo=r(sht,"bert"),sht.forEach(t),VRo=r(Nxe," \u2014 "),JG=n(Nxe,"A",{href:!0});var lht=s(JG);XRo=r(lht,"BertForSequenceClassification"),lht.forEach(t),zRo=r(Nxe," (BERT model)"),Nxe.forEach(t),WRo=i(j),d2=n(j,"LI",{});var qxe=s(d2);Zme=n(qxe,"STRONG",{});var iht=s(Zme);QRo=r(iht,"big_bird"),iht.forEach(t),HRo=r(qxe," \u2014 "),YG=n(qxe,"A",{href:!0});var dht=s(YG);URo=r(dht,"BigBirdForSequenceClassification"),dht.forEach(t),JRo=r(qxe," (BigBird model)"),qxe.forEach(t),YRo=i(j),c2=n(j,"LI",{});var jxe=s(c2);ege=n(jxe,"STRONG",{});var cht=s(ege);KRo=r(cht,"bigbird_pegasus"),cht.forEach(t),ZRo=r(jxe," \u2014 "),KG=n(jxe,"A",{href:!0});var fht=s(KG);ePo=r(fht,"BigBirdPegasusForSequenceClassification"),fht.forEach(t),oPo=r(jxe," (BigBird-Pegasus model)"),jxe.forEach(t),rPo=i(j),f2=n(j,"LI",{});var Dxe=s(f2);oge=n(Dxe,"STRONG",{});var mht=s(oge);tPo=r(mht,"camembert"),mht.forEach(t),aPo=r(Dxe," \u2014 "),ZG=n(Dxe,"A",{href:!0});var ght=s(ZG);nPo=r(ght,"CamembertForSequenceClassification"),ght.forEach(t),sPo=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),lPo=i(j),m2=n(j,"LI",{});var Gxe=s(m2);rge=n(Gxe,"STRONG",{});var hht=s(rge);iPo=r(hht,"canine"),hht.forEach(t),dPo=r(Gxe," \u2014 "),eO=n(Gxe,"A",{href:!0});var pht=s(eO);cPo=r(pht,"CanineForSequenceClassification"),pht.forEach(t),fPo=r(Gxe," (CANINE model)"),Gxe.forEach(t),mPo=i(j),g2=n(j,"LI",{});var Oxe=s(g2);tge=n(Oxe,"STRONG",{});var _ht=s(tge);gPo=r(_ht,"convbert"),_ht.forEach(t),hPo=r(Oxe," \u2014 "),oO=n(Oxe,"A",{href:!0});var uht=s(oO);pPo=r(uht,"ConvBertForSequenceClassification"),uht.forEach(t),_Po=r(Oxe," (ConvBERT model)"),Oxe.forEach(t),uPo=i(j),h2=n(j,"LI",{});var Vxe=s(h2);age=n(Vxe,"STRONG",{});var bht=s(age);bPo=r(bht,"ctrl"),bht.forEach(t),vPo=r(Vxe," \u2014 "),rO=n(Vxe,"A",{href:!0});var vht=s(rO);FPo=r(vht,"CTRLForSequenceClassification"),vht.forEach(t),TPo=r(Vxe," (CTRL model)"),Vxe.forEach(t),MPo=i(j),p2=n(j,"LI",{});var Xxe=s(p2);nge=n(Xxe,"STRONG",{});var Fht=s(nge);EPo=r(Fht,"data2vec-text"),Fht.forEach(t),CPo=r(Xxe," \u2014 "),tO=n(Xxe,"A",{href:!0});var Tht=s(tO);wPo=r(Tht,"Data2VecTextForSequenceClassification"),Tht.forEach(t),APo=r(Xxe," (Data2VecText model)"),Xxe.forEach(t),LPo=i(j),_2=n(j,"LI",{});var zxe=s(_2);sge=n(zxe,"STRONG",{});var Mht=s(sge);yPo=r(Mht,"deberta"),Mht.forEach(t),xPo=r(zxe," \u2014 "),aO=n(zxe,"A",{href:!0});var Eht=s(aO);$Po=r(Eht,"DebertaForSequenceClassification"),Eht.forEach(t),kPo=r(zxe," (DeBERTa model)"),zxe.forEach(t),SPo=i(j),u2=n(j,"LI",{});var Wxe=s(u2);lge=n(Wxe,"STRONG",{});var Cht=s(lge);RPo=r(Cht,"deberta-v2"),Cht.forEach(t),PPo=r(Wxe," \u2014 "),nO=n(Wxe,"A",{href:!0});var wht=s(nO);BPo=r(wht,"DebertaV2ForSequenceClassification"),wht.forEach(t),IPo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),NPo=i(j),b2=n(j,"LI",{});var Qxe=s(b2);ige=n(Qxe,"STRONG",{});var Aht=s(ige);qPo=r(Aht,"distilbert"),Aht.forEach(t),jPo=r(Qxe," \u2014 "),sO=n(Qxe,"A",{href:!0});var Lht=s(sO);DPo=r(Lht,"DistilBertForSequenceClassification"),Lht.forEach(t),GPo=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),OPo=i(j),v2=n(j,"LI",{});var Hxe=s(v2);dge=n(Hxe,"STRONG",{});var yht=s(dge);VPo=r(yht,"electra"),yht.forEach(t),XPo=r(Hxe," \u2014 "),lO=n(Hxe,"A",{href:!0});var xht=s(lO);zPo=r(xht,"ElectraForSequenceClassification"),xht.forEach(t),WPo=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),QPo=i(j),F2=n(j,"LI",{});var Uxe=s(F2);cge=n(Uxe,"STRONG",{});var $ht=s(cge);HPo=r($ht,"flaubert"),$ht.forEach(t),UPo=r(Uxe," \u2014 "),iO=n(Uxe,"A",{href:!0});var kht=s(iO);JPo=r(kht,"FlaubertForSequenceClassification"),kht.forEach(t),YPo=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),KPo=i(j),T2=n(j,"LI",{});var Jxe=s(T2);fge=n(Jxe,"STRONG",{});var Sht=s(fge);ZPo=r(Sht,"fnet"),Sht.forEach(t),eBo=r(Jxe," \u2014 "),dO=n(Jxe,"A",{href:!0});var Rht=s(dO);oBo=r(Rht,"FNetForSequenceClassification"),Rht.forEach(t),rBo=r(Jxe," (FNet model)"),Jxe.forEach(t),tBo=i(j),M2=n(j,"LI",{});var Yxe=s(M2);mge=n(Yxe,"STRONG",{});var Pht=s(mge);aBo=r(Pht,"funnel"),Pht.forEach(t),nBo=r(Yxe," \u2014 "),cO=n(Yxe,"A",{href:!0});var Bht=s(cO);sBo=r(Bht,"FunnelForSequenceClassification"),Bht.forEach(t),lBo=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),iBo=i(j),E2=n(j,"LI",{});var Kxe=s(E2);gge=n(Kxe,"STRONG",{});var Iht=s(gge);dBo=r(Iht,"gpt2"),Iht.forEach(t),cBo=r(Kxe," \u2014 "),fO=n(Kxe,"A",{href:!0});var Nht=s(fO);fBo=r(Nht,"GPT2ForSequenceClassification"),Nht.forEach(t),mBo=r(Kxe," (OpenAI GPT-2 model)"),Kxe.forEach(t),gBo=i(j),C2=n(j,"LI",{});var Zxe=s(C2);hge=n(Zxe,"STRONG",{});var qht=s(hge);hBo=r(qht,"gpt_neo"),qht.forEach(t),pBo=r(Zxe," \u2014 "),mO=n(Zxe,"A",{href:!0});var jht=s(mO);_Bo=r(jht,"GPTNeoForSequenceClassification"),jht.forEach(t),uBo=r(Zxe," (GPT Neo model)"),Zxe.forEach(t),bBo=i(j),w2=n(j,"LI",{});var e$e=s(w2);pge=n(e$e,"STRONG",{});var Dht=s(pge);vBo=r(Dht,"gptj"),Dht.forEach(t),FBo=r(e$e," \u2014 "),gO=n(e$e,"A",{href:!0});var Ght=s(gO);TBo=r(Ght,"GPTJForSequenceClassification"),Ght.forEach(t),MBo=r(e$e," (GPT-J model)"),e$e.forEach(t),EBo=i(j),A2=n(j,"LI",{});var o$e=s(A2);_ge=n(o$e,"STRONG",{});var Oht=s(_ge);CBo=r(Oht,"ibert"),Oht.forEach(t),wBo=r(o$e," \u2014 "),hO=n(o$e,"A",{href:!0});var Vht=s(hO);ABo=r(Vht,"IBertForSequenceClassification"),Vht.forEach(t),LBo=r(o$e," (I-BERT model)"),o$e.forEach(t),yBo=i(j),L2=n(j,"LI",{});var r$e=s(L2);uge=n(r$e,"STRONG",{});var Xht=s(uge);xBo=r(Xht,"layoutlm"),Xht.forEach(t),$Bo=r(r$e," \u2014 "),pO=n(r$e,"A",{href:!0});var zht=s(pO);kBo=r(zht,"LayoutLMForSequenceClassification"),zht.forEach(t),SBo=r(r$e," (LayoutLM model)"),r$e.forEach(t),RBo=i(j),y2=n(j,"LI",{});var t$e=s(y2);bge=n(t$e,"STRONG",{});var Wht=s(bge);PBo=r(Wht,"layoutlmv2"),Wht.forEach(t),BBo=r(t$e," \u2014 "),_O=n(t$e,"A",{href:!0});var Qht=s(_O);IBo=r(Qht,"LayoutLMv2ForSequenceClassification"),Qht.forEach(t),NBo=r(t$e," (LayoutLMv2 model)"),t$e.forEach(t),qBo=i(j),x2=n(j,"LI",{});var a$e=s(x2);vge=n(a$e,"STRONG",{});var Hht=s(vge);jBo=r(Hht,"layoutlmv3"),Hht.forEach(t),DBo=r(a$e," \u2014 "),uO=n(a$e,"A",{href:!0});var Uht=s(uO);GBo=r(Uht,"LayoutLMv3ForSequenceClassification"),Uht.forEach(t),OBo=r(a$e," (LayoutLMv3 model)"),a$e.forEach(t),VBo=i(j),$2=n(j,"LI",{});var n$e=s($2);Fge=n(n$e,"STRONG",{});var Jht=s(Fge);XBo=r(Jht,"led"),Jht.forEach(t),zBo=r(n$e," \u2014 "),bO=n(n$e,"A",{href:!0});var Yht=s(bO);WBo=r(Yht,"LEDForSequenceClassification"),Yht.forEach(t),QBo=r(n$e," (LED model)"),n$e.forEach(t),HBo=i(j),k2=n(j,"LI",{});var s$e=s(k2);Tge=n(s$e,"STRONG",{});var Kht=s(Tge);UBo=r(Kht,"longformer"),Kht.forEach(t),JBo=r(s$e," \u2014 "),vO=n(s$e,"A",{href:!0});var Zht=s(vO);YBo=r(Zht,"LongformerForSequenceClassification"),Zht.forEach(t),KBo=r(s$e," (Longformer model)"),s$e.forEach(t),ZBo=i(j),S2=n(j,"LI",{});var l$e=s(S2);Mge=n(l$e,"STRONG",{});var ept=s(Mge);eIo=r(ept,"mbart"),ept.forEach(t),oIo=r(l$e," \u2014 "),FO=n(l$e,"A",{href:!0});var opt=s(FO);rIo=r(opt,"MBartForSequenceClassification"),opt.forEach(t),tIo=r(l$e," (mBART model)"),l$e.forEach(t),aIo=i(j),R2=n(j,"LI",{});var i$e=s(R2);Ege=n(i$e,"STRONG",{});var rpt=s(Ege);nIo=r(rpt,"megatron-bert"),rpt.forEach(t),sIo=r(i$e," \u2014 "),TO=n(i$e,"A",{href:!0});var tpt=s(TO);lIo=r(tpt,"MegatronBertForSequenceClassification"),tpt.forEach(t),iIo=r(i$e," (Megatron-BERT model)"),i$e.forEach(t),dIo=i(j),P2=n(j,"LI",{});var d$e=s(P2);Cge=n(d$e,"STRONG",{});var apt=s(Cge);cIo=r(apt,"mobilebert"),apt.forEach(t),fIo=r(d$e," \u2014 "),MO=n(d$e,"A",{href:!0});var npt=s(MO);mIo=r(npt,"MobileBertForSequenceClassification"),npt.forEach(t),gIo=r(d$e," (MobileBERT model)"),d$e.forEach(t),hIo=i(j),B2=n(j,"LI",{});var c$e=s(B2);wge=n(c$e,"STRONG",{});var spt=s(wge);pIo=r(spt,"mpnet"),spt.forEach(t),_Io=r(c$e," \u2014 "),EO=n(c$e,"A",{href:!0});var lpt=s(EO);uIo=r(lpt,"MPNetForSequenceClassification"),lpt.forEach(t),bIo=r(c$e," (MPNet model)"),c$e.forEach(t),vIo=i(j),I2=n(j,"LI",{});var f$e=s(I2);Age=n(f$e,"STRONG",{});var ipt=s(Age);FIo=r(ipt,"nystromformer"),ipt.forEach(t),TIo=r(f$e," \u2014 "),CO=n(f$e,"A",{href:!0});var dpt=s(CO);MIo=r(dpt,"NystromformerForSequenceClassification"),dpt.forEach(t),EIo=r(f$e," (Nystr\xF6mformer model)"),f$e.forEach(t),CIo=i(j),N2=n(j,"LI",{});var m$e=s(N2);Lge=n(m$e,"STRONG",{});var cpt=s(Lge);wIo=r(cpt,"openai-gpt"),cpt.forEach(t),AIo=r(m$e," \u2014 "),wO=n(m$e,"A",{href:!0});var fpt=s(wO);LIo=r(fpt,"OpenAIGPTForSequenceClassification"),fpt.forEach(t),yIo=r(m$e," (OpenAI GPT model)"),m$e.forEach(t),xIo=i(j),q2=n(j,"LI",{});var g$e=s(q2);yge=n(g$e,"STRONG",{});var mpt=s(yge);$Io=r(mpt,"perceiver"),mpt.forEach(t),kIo=r(g$e," \u2014 "),AO=n(g$e,"A",{href:!0});var gpt=s(AO);SIo=r(gpt,"PerceiverForSequenceClassification"),gpt.forEach(t),RIo=r(g$e," (Perceiver model)"),g$e.forEach(t),PIo=i(j),j2=n(j,"LI",{});var h$e=s(j2);xge=n(h$e,"STRONG",{});var hpt=s(xge);BIo=r(hpt,"plbart"),hpt.forEach(t),IIo=r(h$e," \u2014 "),LO=n(h$e,"A",{href:!0});var ppt=s(LO);NIo=r(ppt,"PLBartForSequenceClassification"),ppt.forEach(t),qIo=r(h$e," (PLBart model)"),h$e.forEach(t),jIo=i(j),D2=n(j,"LI",{});var p$e=s(D2);$ge=n(p$e,"STRONG",{});var _pt=s($ge);DIo=r(_pt,"qdqbert"),_pt.forEach(t),GIo=r(p$e," \u2014 "),yO=n(p$e,"A",{href:!0});var upt=s(yO);OIo=r(upt,"QDQBertForSequenceClassification"),upt.forEach(t),VIo=r(p$e," (QDQBert model)"),p$e.forEach(t),XIo=i(j),G2=n(j,"LI",{});var _$e=s(G2);kge=n(_$e,"STRONG",{});var bpt=s(kge);zIo=r(bpt,"reformer"),bpt.forEach(t),WIo=r(_$e," \u2014 "),xO=n(_$e,"A",{href:!0});var vpt=s(xO);QIo=r(vpt,"ReformerForSequenceClassification"),vpt.forEach(t),HIo=r(_$e," (Reformer model)"),_$e.forEach(t),UIo=i(j),O2=n(j,"LI",{});var u$e=s(O2);Sge=n(u$e,"STRONG",{});var Fpt=s(Sge);JIo=r(Fpt,"rembert"),Fpt.forEach(t),YIo=r(u$e," \u2014 "),$O=n(u$e,"A",{href:!0});var Tpt=s($O);KIo=r(Tpt,"RemBertForSequenceClassification"),Tpt.forEach(t),ZIo=r(u$e," (RemBERT model)"),u$e.forEach(t),eNo=i(j),V2=n(j,"LI",{});var b$e=s(V2);Rge=n(b$e,"STRONG",{});var Mpt=s(Rge);oNo=r(Mpt,"roberta"),Mpt.forEach(t),rNo=r(b$e," \u2014 "),kO=n(b$e,"A",{href:!0});var Ept=s(kO);tNo=r(Ept,"RobertaForSequenceClassification"),Ept.forEach(t),aNo=r(b$e," (RoBERTa model)"),b$e.forEach(t),nNo=i(j),X2=n(j,"LI",{});var v$e=s(X2);Pge=n(v$e,"STRONG",{});var Cpt=s(Pge);sNo=r(Cpt,"roformer"),Cpt.forEach(t),lNo=r(v$e," \u2014 "),SO=n(v$e,"A",{href:!0});var wpt=s(SO);iNo=r(wpt,"RoFormerForSequenceClassification"),wpt.forEach(t),dNo=r(v$e," (RoFormer model)"),v$e.forEach(t),cNo=i(j),z2=n(j,"LI",{});var F$e=s(z2);Bge=n(F$e,"STRONG",{});var Apt=s(Bge);fNo=r(Apt,"squeezebert"),Apt.forEach(t),mNo=r(F$e," \u2014 "),RO=n(F$e,"A",{href:!0});var Lpt=s(RO);gNo=r(Lpt,"SqueezeBertForSequenceClassification"),Lpt.forEach(t),hNo=r(F$e," (SqueezeBERT model)"),F$e.forEach(t),pNo=i(j),W2=n(j,"LI",{});var T$e=s(W2);Ige=n(T$e,"STRONG",{});var ypt=s(Ige);_No=r(ypt,"tapas"),ypt.forEach(t),uNo=r(T$e," \u2014 "),PO=n(T$e,"A",{href:!0});var xpt=s(PO);bNo=r(xpt,"TapasForSequenceClassification"),xpt.forEach(t),vNo=r(T$e," (TAPAS model)"),T$e.forEach(t),FNo=i(j),Q2=n(j,"LI",{});var M$e=s(Q2);Nge=n(M$e,"STRONG",{});var $pt=s(Nge);TNo=r($pt,"transfo-xl"),$pt.forEach(t),MNo=r(M$e," \u2014 "),BO=n(M$e,"A",{href:!0});var kpt=s(BO);ENo=r(kpt,"TransfoXLForSequenceClassification"),kpt.forEach(t),CNo=r(M$e," (Transformer-XL model)"),M$e.forEach(t),wNo=i(j),H2=n(j,"LI",{});var E$e=s(H2);qge=n(E$e,"STRONG",{});var Spt=s(qge);ANo=r(Spt,"xlm"),Spt.forEach(t),LNo=r(E$e," \u2014 "),IO=n(E$e,"A",{href:!0});var Rpt=s(IO);yNo=r(Rpt,"XLMForSequenceClassification"),Rpt.forEach(t),xNo=r(E$e," (XLM model)"),E$e.forEach(t),$No=i(j),U2=n(j,"LI",{});var C$e=s(U2);jge=n(C$e,"STRONG",{});var Ppt=s(jge);kNo=r(Ppt,"xlm-roberta"),Ppt.forEach(t),SNo=r(C$e," \u2014 "),NO=n(C$e,"A",{href:!0});var Bpt=s(NO);RNo=r(Bpt,"XLMRobertaForSequenceClassification"),Bpt.forEach(t),PNo=r(C$e," (XLM-RoBERTa model)"),C$e.forEach(t),BNo=i(j),J2=n(j,"LI",{});var w$e=s(J2);Dge=n(w$e,"STRONG",{});var Ipt=s(Dge);INo=r(Ipt,"xlm-roberta-xl"),Ipt.forEach(t),NNo=r(w$e," \u2014 "),qO=n(w$e,"A",{href:!0});var Npt=s(qO);qNo=r(Npt,"XLMRobertaXLForSequenceClassification"),Npt.forEach(t),jNo=r(w$e," (XLM-RoBERTa-XL model)"),w$e.forEach(t),DNo=i(j),Y2=n(j,"LI",{});var A$e=s(Y2);Gge=n(A$e,"STRONG",{});var qpt=s(Gge);GNo=r(qpt,"xlnet"),qpt.forEach(t),ONo=r(A$e," \u2014 "),jO=n(A$e,"A",{href:!0});var jpt=s(jO);VNo=r(jpt,"XLNetForSequenceClassification"),jpt.forEach(t),XNo=r(A$e," (XLNet model)"),A$e.forEach(t),zNo=i(j),K2=n(j,"LI",{});var L$e=s(K2);Oge=n(L$e,"STRONG",{});var Dpt=s(Oge);WNo=r(Dpt,"yoso"),Dpt.forEach(t),QNo=r(L$e," \u2014 "),DO=n(L$e,"A",{href:!0});var Gpt=s(DO);HNo=r(Gpt,"YosoForSequenceClassification"),Gpt.forEach(t),UNo=r(L$e," (YOSO model)"),L$e.forEach(t),j.forEach(t),JNo=i(la),Z2=n(la,"P",{});var y$e=s(Z2);YNo=r(y$e,"The model is set in evaluation mode by default using "),Vge=n(y$e,"CODE",{});var Opt=s(Vge);KNo=r(Opt,"model.eval()"),Opt.forEach(t),ZNo=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(y$e,"CODE",{});var Vpt=s(Xge);eqo=r(Vpt,"model.train()"),Vpt.forEach(t),y$e.forEach(t),oqo=i(la),T(e4.$$.fragment,la),la.forEach(t),Qs.forEach(t),iDe=i(f),zi=n(f,"H2",{class:!0});var mOe=s(zi);o4=n(mOe,"A",{id:!0,class:!0,href:!0});var Xpt=s(o4);zge=n(Xpt,"SPAN",{});var zpt=s(zge);T(KL.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),rqo=i(mOe),Wge=n(mOe,"SPAN",{});var Wpt=s(Wge);tqo=r(Wpt,"AutoModelForMultipleChoice"),Wpt.forEach(t),mOe.forEach(t),dDe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(ZL.$$.fragment,Hs),aqo=i(Hs),Wi=n(Hs,"P",{});var Tee=s(Wi);nqo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GO=n(Tee,"A",{href:!0});var Qpt=s(GO);sqo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),lqo=r(Tee," class method or the "),OO=n(Tee,"A",{href:!0});var Hpt=s(OO);iqo=r(Hpt,"from_config()"),Hpt.forEach(t),dqo=r(Tee,` class
method.`),Tee.forEach(t),cqo=i(Hs),ey=n(Hs,"P",{});var gOe=s(ey);fqo=r(gOe,"This class cannot be instantiated directly using "),Qge=n(gOe,"CODE",{});var Upt=s(Qge);mqo=r(Upt,"__init__()"),Upt.forEach(t),gqo=r(gOe," (throws an error)."),gOe.forEach(t),hqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var g6=s(ct);T(oy.$$.fragment,g6),pqo=i(g6),Hge=n(g6,"P",{});var Jpt=s(Hge);_qo=r(Jpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jpt.forEach(t),uqo=i(g6),Qi=n(g6,"P",{});var Mee=s(Qi);bqo=r(Mee,`Note:
Loading a model from its configuration file does `),Uge=n(Mee,"STRONG",{});var Ypt=s(Uge);vqo=r(Ypt,"not"),Ypt.forEach(t),Fqo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(Mee,"A",{href:!0});var Kpt=s(VO);Tqo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),Mqo=r(Mee," to load the model weights."),Mee.forEach(t),Eqo=i(g6),T(r4.$$.fragment,g6),g6.forEach(t),Cqo=i(Hs),ro=n(Hs,"DIV",{class:!0});var ia=s(ro);T(ry.$$.fragment,ia),wqo=i(ia),Jge=n(ia,"P",{});var Zpt=s(Jge);Aqo=r(Zpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zpt.forEach(t),Lqo=i(ia),Ba=n(ia,"P",{});var h6=s(Ba);yqo=r(h6,"The model class to instantiate is selected based on the "),Yge=n(h6,"CODE",{});var e_t=s(Yge);xqo=r(e_t,"model_type"),e_t.forEach(t),$qo=r(h6,` property of the config object (either
passed as an argument or loaded from `),Kge=n(h6,"CODE",{});var o_t=s(Kge);kqo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Sqo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(h6,"CODE",{});var r_t=s(Zge);Rqo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),Pqo=r(h6,":"),h6.forEach(t),Bqo=i(ia),Z=n(ia,"UL",{});var ee=s(Z);t4=n(ee,"LI",{});var x$e=s(t4);ehe=n(x$e,"STRONG",{});var t_t=s(ehe);Iqo=r(t_t,"albert"),t_t.forEach(t),Nqo=r(x$e," \u2014 "),XO=n(x$e,"A",{href:!0});var a_t=s(XO);qqo=r(a_t,"AlbertForMultipleChoice"),a_t.forEach(t),jqo=r(x$e," (ALBERT model)"),x$e.forEach(t),Dqo=i(ee),a4=n(ee,"LI",{});var $$e=s(a4);ohe=n($$e,"STRONG",{});var n_t=s(ohe);Gqo=r(n_t,"bert"),n_t.forEach(t),Oqo=r($$e," \u2014 "),zO=n($$e,"A",{href:!0});var s_t=s(zO);Vqo=r(s_t,"BertForMultipleChoice"),s_t.forEach(t),Xqo=r($$e," (BERT model)"),$$e.forEach(t),zqo=i(ee),n4=n(ee,"LI",{});var k$e=s(n4);rhe=n(k$e,"STRONG",{});var l_t=s(rhe);Wqo=r(l_t,"big_bird"),l_t.forEach(t),Qqo=r(k$e," \u2014 "),WO=n(k$e,"A",{href:!0});var i_t=s(WO);Hqo=r(i_t,"BigBirdForMultipleChoice"),i_t.forEach(t),Uqo=r(k$e," (BigBird model)"),k$e.forEach(t),Jqo=i(ee),s4=n(ee,"LI",{});var S$e=s(s4);the=n(S$e,"STRONG",{});var d_t=s(the);Yqo=r(d_t,"camembert"),d_t.forEach(t),Kqo=r(S$e," \u2014 "),QO=n(S$e,"A",{href:!0});var c_t=s(QO);Zqo=r(c_t,"CamembertForMultipleChoice"),c_t.forEach(t),ejo=r(S$e," (CamemBERT model)"),S$e.forEach(t),ojo=i(ee),l4=n(ee,"LI",{});var R$e=s(l4);ahe=n(R$e,"STRONG",{});var f_t=s(ahe);rjo=r(f_t,"canine"),f_t.forEach(t),tjo=r(R$e," \u2014 "),HO=n(R$e,"A",{href:!0});var m_t=s(HO);ajo=r(m_t,"CanineForMultipleChoice"),m_t.forEach(t),njo=r(R$e," (CANINE model)"),R$e.forEach(t),sjo=i(ee),i4=n(ee,"LI",{});var P$e=s(i4);nhe=n(P$e,"STRONG",{});var g_t=s(nhe);ljo=r(g_t,"convbert"),g_t.forEach(t),ijo=r(P$e," \u2014 "),UO=n(P$e,"A",{href:!0});var h_t=s(UO);djo=r(h_t,"ConvBertForMultipleChoice"),h_t.forEach(t),cjo=r(P$e," (ConvBERT model)"),P$e.forEach(t),fjo=i(ee),d4=n(ee,"LI",{});var B$e=s(d4);she=n(B$e,"STRONG",{});var p_t=s(she);mjo=r(p_t,"data2vec-text"),p_t.forEach(t),gjo=r(B$e," \u2014 "),JO=n(B$e,"A",{href:!0});var __t=s(JO);hjo=r(__t,"Data2VecTextForMultipleChoice"),__t.forEach(t),pjo=r(B$e," (Data2VecText model)"),B$e.forEach(t),_jo=i(ee),c4=n(ee,"LI",{});var I$e=s(c4);lhe=n(I$e,"STRONG",{});var u_t=s(lhe);ujo=r(u_t,"deberta-v2"),u_t.forEach(t),bjo=r(I$e," \u2014 "),YO=n(I$e,"A",{href:!0});var b_t=s(YO);vjo=r(b_t,"DebertaV2ForMultipleChoice"),b_t.forEach(t),Fjo=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),Tjo=i(ee),f4=n(ee,"LI",{});var N$e=s(f4);ihe=n(N$e,"STRONG",{});var v_t=s(ihe);Mjo=r(v_t,"distilbert"),v_t.forEach(t),Ejo=r(N$e," \u2014 "),KO=n(N$e,"A",{href:!0});var F_t=s(KO);Cjo=r(F_t,"DistilBertForMultipleChoice"),F_t.forEach(t),wjo=r(N$e," (DistilBERT model)"),N$e.forEach(t),Ajo=i(ee),m4=n(ee,"LI",{});var q$e=s(m4);dhe=n(q$e,"STRONG",{});var T_t=s(dhe);Ljo=r(T_t,"electra"),T_t.forEach(t),yjo=r(q$e," \u2014 "),ZO=n(q$e,"A",{href:!0});var M_t=s(ZO);xjo=r(M_t,"ElectraForMultipleChoice"),M_t.forEach(t),$jo=r(q$e," (ELECTRA model)"),q$e.forEach(t),kjo=i(ee),g4=n(ee,"LI",{});var j$e=s(g4);che=n(j$e,"STRONG",{});var E_t=s(che);Sjo=r(E_t,"flaubert"),E_t.forEach(t),Rjo=r(j$e," \u2014 "),eV=n(j$e,"A",{href:!0});var C_t=s(eV);Pjo=r(C_t,"FlaubertForMultipleChoice"),C_t.forEach(t),Bjo=r(j$e," (FlauBERT model)"),j$e.forEach(t),Ijo=i(ee),h4=n(ee,"LI",{});var D$e=s(h4);fhe=n(D$e,"STRONG",{});var w_t=s(fhe);Njo=r(w_t,"fnet"),w_t.forEach(t),qjo=r(D$e," \u2014 "),oV=n(D$e,"A",{href:!0});var A_t=s(oV);jjo=r(A_t,"FNetForMultipleChoice"),A_t.forEach(t),Djo=r(D$e," (FNet model)"),D$e.forEach(t),Gjo=i(ee),p4=n(ee,"LI",{});var G$e=s(p4);mhe=n(G$e,"STRONG",{});var L_t=s(mhe);Ojo=r(L_t,"funnel"),L_t.forEach(t),Vjo=r(G$e," \u2014 "),rV=n(G$e,"A",{href:!0});var y_t=s(rV);Xjo=r(y_t,"FunnelForMultipleChoice"),y_t.forEach(t),zjo=r(G$e," (Funnel Transformer model)"),G$e.forEach(t),Wjo=i(ee),_4=n(ee,"LI",{});var O$e=s(_4);ghe=n(O$e,"STRONG",{});var x_t=s(ghe);Qjo=r(x_t,"ibert"),x_t.forEach(t),Hjo=r(O$e," \u2014 "),tV=n(O$e,"A",{href:!0});var $_t=s(tV);Ujo=r($_t,"IBertForMultipleChoice"),$_t.forEach(t),Jjo=r(O$e," (I-BERT model)"),O$e.forEach(t),Yjo=i(ee),u4=n(ee,"LI",{});var V$e=s(u4);hhe=n(V$e,"STRONG",{});var k_t=s(hhe);Kjo=r(k_t,"longformer"),k_t.forEach(t),Zjo=r(V$e," \u2014 "),aV=n(V$e,"A",{href:!0});var S_t=s(aV);eDo=r(S_t,"LongformerForMultipleChoice"),S_t.forEach(t),oDo=r(V$e," (Longformer model)"),V$e.forEach(t),rDo=i(ee),b4=n(ee,"LI",{});var X$e=s(b4);phe=n(X$e,"STRONG",{});var R_t=s(phe);tDo=r(R_t,"megatron-bert"),R_t.forEach(t),aDo=r(X$e," \u2014 "),nV=n(X$e,"A",{href:!0});var P_t=s(nV);nDo=r(P_t,"MegatronBertForMultipleChoice"),P_t.forEach(t),sDo=r(X$e," (Megatron-BERT model)"),X$e.forEach(t),lDo=i(ee),v4=n(ee,"LI",{});var z$e=s(v4);_he=n(z$e,"STRONG",{});var B_t=s(_he);iDo=r(B_t,"mobilebert"),B_t.forEach(t),dDo=r(z$e," \u2014 "),sV=n(z$e,"A",{href:!0});var I_t=s(sV);cDo=r(I_t,"MobileBertForMultipleChoice"),I_t.forEach(t),fDo=r(z$e," (MobileBERT model)"),z$e.forEach(t),mDo=i(ee),F4=n(ee,"LI",{});var W$e=s(F4);uhe=n(W$e,"STRONG",{});var N_t=s(uhe);gDo=r(N_t,"mpnet"),N_t.forEach(t),hDo=r(W$e," \u2014 "),lV=n(W$e,"A",{href:!0});var q_t=s(lV);pDo=r(q_t,"MPNetForMultipleChoice"),q_t.forEach(t),_Do=r(W$e," (MPNet model)"),W$e.forEach(t),uDo=i(ee),T4=n(ee,"LI",{});var Q$e=s(T4);bhe=n(Q$e,"STRONG",{});var j_t=s(bhe);bDo=r(j_t,"nystromformer"),j_t.forEach(t),vDo=r(Q$e," \u2014 "),iV=n(Q$e,"A",{href:!0});var D_t=s(iV);FDo=r(D_t,"NystromformerForMultipleChoice"),D_t.forEach(t),TDo=r(Q$e," (Nystr\xF6mformer model)"),Q$e.forEach(t),MDo=i(ee),M4=n(ee,"LI",{});var H$e=s(M4);vhe=n(H$e,"STRONG",{});var G_t=s(vhe);EDo=r(G_t,"qdqbert"),G_t.forEach(t),CDo=r(H$e," \u2014 "),dV=n(H$e,"A",{href:!0});var O_t=s(dV);wDo=r(O_t,"QDQBertForMultipleChoice"),O_t.forEach(t),ADo=r(H$e," (QDQBert model)"),H$e.forEach(t),LDo=i(ee),E4=n(ee,"LI",{});var U$e=s(E4);Fhe=n(U$e,"STRONG",{});var V_t=s(Fhe);yDo=r(V_t,"rembert"),V_t.forEach(t),xDo=r(U$e," \u2014 "),cV=n(U$e,"A",{href:!0});var X_t=s(cV);$Do=r(X_t,"RemBertForMultipleChoice"),X_t.forEach(t),kDo=r(U$e," (RemBERT model)"),U$e.forEach(t),SDo=i(ee),C4=n(ee,"LI",{});var J$e=s(C4);The=n(J$e,"STRONG",{});var z_t=s(The);RDo=r(z_t,"roberta"),z_t.forEach(t),PDo=r(J$e," \u2014 "),fV=n(J$e,"A",{href:!0});var W_t=s(fV);BDo=r(W_t,"RobertaForMultipleChoice"),W_t.forEach(t),IDo=r(J$e," (RoBERTa model)"),J$e.forEach(t),NDo=i(ee),w4=n(ee,"LI",{});var Y$e=s(w4);Mhe=n(Y$e,"STRONG",{});var Q_t=s(Mhe);qDo=r(Q_t,"roformer"),Q_t.forEach(t),jDo=r(Y$e," \u2014 "),mV=n(Y$e,"A",{href:!0});var H_t=s(mV);DDo=r(H_t,"RoFormerForMultipleChoice"),H_t.forEach(t),GDo=r(Y$e," (RoFormer model)"),Y$e.forEach(t),ODo=i(ee),A4=n(ee,"LI",{});var K$e=s(A4);Ehe=n(K$e,"STRONG",{});var U_t=s(Ehe);VDo=r(U_t,"squeezebert"),U_t.forEach(t),XDo=r(K$e," \u2014 "),gV=n(K$e,"A",{href:!0});var J_t=s(gV);zDo=r(J_t,"SqueezeBertForMultipleChoice"),J_t.forEach(t),WDo=r(K$e," (SqueezeBERT model)"),K$e.forEach(t),QDo=i(ee),L4=n(ee,"LI",{});var Z$e=s(L4);Che=n(Z$e,"STRONG",{});var Y_t=s(Che);HDo=r(Y_t,"xlm"),Y_t.forEach(t),UDo=r(Z$e," \u2014 "),hV=n(Z$e,"A",{href:!0});var K_t=s(hV);JDo=r(K_t,"XLMForMultipleChoice"),K_t.forEach(t),YDo=r(Z$e," (XLM model)"),Z$e.forEach(t),KDo=i(ee),y4=n(ee,"LI",{});var eke=s(y4);whe=n(eke,"STRONG",{});var Z_t=s(whe);ZDo=r(Z_t,"xlm-roberta"),Z_t.forEach(t),eGo=r(eke," \u2014 "),pV=n(eke,"A",{href:!0});var eut=s(pV);oGo=r(eut,"XLMRobertaForMultipleChoice"),eut.forEach(t),rGo=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),tGo=i(ee),x4=n(ee,"LI",{});var oke=s(x4);Ahe=n(oke,"STRONG",{});var out=s(Ahe);aGo=r(out,"xlm-roberta-xl"),out.forEach(t),nGo=r(oke," \u2014 "),_V=n(oke,"A",{href:!0});var rut=s(_V);sGo=r(rut,"XLMRobertaXLForMultipleChoice"),rut.forEach(t),lGo=r(oke," (XLM-RoBERTa-XL model)"),oke.forEach(t),iGo=i(ee),$4=n(ee,"LI",{});var rke=s($4);Lhe=n(rke,"STRONG",{});var tut=s(Lhe);dGo=r(tut,"xlnet"),tut.forEach(t),cGo=r(rke," \u2014 "),uV=n(rke,"A",{href:!0});var aut=s(uV);fGo=r(aut,"XLNetForMultipleChoice"),aut.forEach(t),mGo=r(rke," (XLNet model)"),rke.forEach(t),gGo=i(ee),k4=n(ee,"LI",{});var tke=s(k4);yhe=n(tke,"STRONG",{});var nut=s(yhe);hGo=r(nut,"yoso"),nut.forEach(t),pGo=r(tke," \u2014 "),bV=n(tke,"A",{href:!0});var sut=s(bV);_Go=r(sut,"YosoForMultipleChoice"),sut.forEach(t),uGo=r(tke," (YOSO model)"),tke.forEach(t),ee.forEach(t),bGo=i(ia),S4=n(ia,"P",{});var ake=s(S4);vGo=r(ake,"The model is set in evaluation mode by default using "),xhe=n(ake,"CODE",{});var lut=s(xhe);FGo=r(lut,"model.eval()"),lut.forEach(t),TGo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(ake,"CODE",{});var iut=s($he);MGo=r(iut,"model.train()"),iut.forEach(t),ake.forEach(t),EGo=i(ia),T(R4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),cDe=i(f),Hi=n(f,"H2",{class:!0});var hOe=s(Hi);P4=n(hOe,"A",{id:!0,class:!0,href:!0});var dut=s(P4);khe=n(dut,"SPAN",{});var cut=s(khe);T(ty.$$.fragment,cut),cut.forEach(t),dut.forEach(t),CGo=i(hOe),She=n(hOe,"SPAN",{});var fut=s(She);wGo=r(fut,"AutoModelForNextSentencePrediction"),fut.forEach(t),hOe.forEach(t),fDe=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(ay.$$.fragment,Us),AGo=i(Us),Ui=n(Us,"P",{});var Eee=s(Ui);LGo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vV=n(Eee,"A",{href:!0});var mut=s(vV);yGo=r(mut,"from_pretrained()"),mut.forEach(t),xGo=r(Eee," class method or the "),FV=n(Eee,"A",{href:!0});var gut=s(FV);$Go=r(gut,"from_config()"),gut.forEach(t),kGo=r(Eee,` class
method.`),Eee.forEach(t),SGo=i(Us),ny=n(Us,"P",{});var pOe=s(ny);RGo=r(pOe,"This class cannot be instantiated directly using "),Rhe=n(pOe,"CODE",{});var hut=s(Rhe);PGo=r(hut,"__init__()"),hut.forEach(t),BGo=r(pOe," (throws an error)."),pOe.forEach(t),IGo=i(Us),ft=n(Us,"DIV",{class:!0});var p6=s(ft);T(sy.$$.fragment,p6),NGo=i(p6),Phe=n(p6,"P",{});var put=s(Phe);qGo=r(put,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),put.forEach(t),jGo=i(p6),Ji=n(p6,"P",{});var Cee=s(Ji);DGo=r(Cee,`Note:
Loading a model from its configuration file does `),Bhe=n(Cee,"STRONG",{});var _ut=s(Bhe);GGo=r(_ut,"not"),_ut.forEach(t),OGo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(Cee,"A",{href:!0});var uut=s(TV);VGo=r(uut,"from_pretrained()"),uut.forEach(t),XGo=r(Cee," to load the model weights."),Cee.forEach(t),zGo=i(p6),T(B4.$$.fragment,p6),p6.forEach(t),WGo=i(Us),to=n(Us,"DIV",{class:!0});var da=s(to);T(ly.$$.fragment,da),QGo=i(da),Ihe=n(da,"P",{});var but=s(Ihe);HGo=r(but,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),but.forEach(t),UGo=i(da),Ia=n(da,"P",{});var _6=s(Ia);JGo=r(_6,"The model class to instantiate is selected based on the "),Nhe=n(_6,"CODE",{});var vut=s(Nhe);YGo=r(vut,"model_type"),vut.forEach(t),KGo=r(_6,` property of the config object (either
passed as an argument or loaded from `),qhe=n(_6,"CODE",{});var Fut=s(qhe);ZGo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),eOo=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(_6,"CODE",{});var Tut=s(jhe);oOo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),rOo=r(_6,":"),_6.forEach(t),tOo=i(da),Yr=n(da,"UL",{});var Js=s(Yr);I4=n(Js,"LI",{});var nke=s(I4);Dhe=n(nke,"STRONG",{});var Mut=s(Dhe);aOo=r(Mut,"bert"),Mut.forEach(t),nOo=r(nke," \u2014 "),MV=n(nke,"A",{href:!0});var Eut=s(MV);sOo=r(Eut,"BertForNextSentencePrediction"),Eut.forEach(t),lOo=r(nke," (BERT model)"),nke.forEach(t),iOo=i(Js),N4=n(Js,"LI",{});var ske=s(N4);Ghe=n(ske,"STRONG",{});var Cut=s(Ghe);dOo=r(Cut,"fnet"),Cut.forEach(t),cOo=r(ske," \u2014 "),EV=n(ske,"A",{href:!0});var wut=s(EV);fOo=r(wut,"FNetForNextSentencePrediction"),wut.forEach(t),mOo=r(ske," (FNet model)"),ske.forEach(t),gOo=i(Js),q4=n(Js,"LI",{});var lke=s(q4);Ohe=n(lke,"STRONG",{});var Aut=s(Ohe);hOo=r(Aut,"megatron-bert"),Aut.forEach(t),pOo=r(lke," \u2014 "),CV=n(lke,"A",{href:!0});var Lut=s(CV);_Oo=r(Lut,"MegatronBertForNextSentencePrediction"),Lut.forEach(t),uOo=r(lke," (Megatron-BERT model)"),lke.forEach(t),bOo=i(Js),j4=n(Js,"LI",{});var ike=s(j4);Vhe=n(ike,"STRONG",{});var yut=s(Vhe);vOo=r(yut,"mobilebert"),yut.forEach(t),FOo=r(ike," \u2014 "),wV=n(ike,"A",{href:!0});var xut=s(wV);TOo=r(xut,"MobileBertForNextSentencePrediction"),xut.forEach(t),MOo=r(ike," (MobileBERT model)"),ike.forEach(t),EOo=i(Js),D4=n(Js,"LI",{});var dke=s(D4);Xhe=n(dke,"STRONG",{});var $ut=s(Xhe);COo=r($ut,"qdqbert"),$ut.forEach(t),wOo=r(dke," \u2014 "),AV=n(dke,"A",{href:!0});var kut=s(AV);AOo=r(kut,"QDQBertForNextSentencePrediction"),kut.forEach(t),LOo=r(dke," (QDQBert model)"),dke.forEach(t),Js.forEach(t),yOo=i(da),G4=n(da,"P",{});var cke=s(G4);xOo=r(cke,"The model is set in evaluation mode by default using "),zhe=n(cke,"CODE",{});var Sut=s(zhe);$Oo=r(Sut,"model.eval()"),Sut.forEach(t),kOo=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(cke,"CODE",{});var Rut=s(Whe);SOo=r(Rut,"model.train()"),Rut.forEach(t),cke.forEach(t),ROo=i(da),T(O4.$$.fragment,da),da.forEach(t),Us.forEach(t),mDe=i(f),Yi=n(f,"H2",{class:!0});var _Oe=s(Yi);V4=n(_Oe,"A",{id:!0,class:!0,href:!0});var Put=s(V4);Qhe=n(Put,"SPAN",{});var But=s(Qhe);T(iy.$$.fragment,But),But.forEach(t),Put.forEach(t),POo=i(_Oe),Hhe=n(_Oe,"SPAN",{});var Iut=s(Hhe);BOo=r(Iut,"AutoModelForTokenClassification"),Iut.forEach(t),_Oe.forEach(t),gDe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(dy.$$.fragment,Ys),IOo=i(Ys),Ki=n(Ys,"P",{});var wee=s(Ki);NOo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LV=n(wee,"A",{href:!0});var Nut=s(LV);qOo=r(Nut,"from_pretrained()"),Nut.forEach(t),jOo=r(wee," class method or the "),yV=n(wee,"A",{href:!0});var qut=s(yV);DOo=r(qut,"from_config()"),qut.forEach(t),GOo=r(wee,` class
method.`),wee.forEach(t),OOo=i(Ys),cy=n(Ys,"P",{});var uOe=s(cy);VOo=r(uOe,"This class cannot be instantiated directly using "),Uhe=n(uOe,"CODE",{});var jut=s(Uhe);XOo=r(jut,"__init__()"),jut.forEach(t),zOo=r(uOe," (throws an error)."),uOe.forEach(t),WOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var u6=s(mt);T(fy.$$.fragment,u6),QOo=i(u6),Jhe=n(u6,"P",{});var Dut=s(Jhe);HOo=r(Dut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dut.forEach(t),UOo=i(u6),Zi=n(u6,"P",{});var Aee=s(Zi);JOo=r(Aee,`Note:
Loading a model from its configuration file does `),Yhe=n(Aee,"STRONG",{});var Gut=s(Yhe);YOo=r(Gut,"not"),Gut.forEach(t),KOo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(Aee,"A",{href:!0});var Out=s(xV);ZOo=r(Out,"from_pretrained()"),Out.forEach(t),eVo=r(Aee," to load the model weights."),Aee.forEach(t),oVo=i(u6),T(X4.$$.fragment,u6),u6.forEach(t),rVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var ca=s(ao);T(my.$$.fragment,ca),tVo=i(ca),Khe=n(ca,"P",{});var Vut=s(Khe);aVo=r(Vut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vut.forEach(t),nVo=i(ca),Na=n(ca,"P",{});var b6=s(Na);sVo=r(b6,"The model class to instantiate is selected based on the "),Zhe=n(b6,"CODE",{});var Xut=s(Zhe);lVo=r(Xut,"model_type"),Xut.forEach(t),iVo=r(b6,` property of the config object (either
passed as an argument or loaded from `),epe=n(b6,"CODE",{});var zut=s(epe);dVo=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),cVo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(b6,"CODE",{});var Wut=s(ope);fVo=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),mVo=r(b6,":"),b6.forEach(t),gVo=i(ca),U=n(ca,"UL",{});var J=s(U);z4=n(J,"LI",{});var fke=s(z4);rpe=n(fke,"STRONG",{});var Qut=s(rpe);hVo=r(Qut,"albert"),Qut.forEach(t),pVo=r(fke," \u2014 "),$V=n(fke,"A",{href:!0});var Hut=s($V);_Vo=r(Hut,"AlbertForTokenClassification"),Hut.forEach(t),uVo=r(fke," (ALBERT model)"),fke.forEach(t),bVo=i(J),W4=n(J,"LI",{});var mke=s(W4);tpe=n(mke,"STRONG",{});var Uut=s(tpe);vVo=r(Uut,"bert"),Uut.forEach(t),FVo=r(mke," \u2014 "),kV=n(mke,"A",{href:!0});var Jut=s(kV);TVo=r(Jut,"BertForTokenClassification"),Jut.forEach(t),MVo=r(mke," (BERT model)"),mke.forEach(t),EVo=i(J),Q4=n(J,"LI",{});var gke=s(Q4);ape=n(gke,"STRONG",{});var Yut=s(ape);CVo=r(Yut,"big_bird"),Yut.forEach(t),wVo=r(gke," \u2014 "),SV=n(gke,"A",{href:!0});var Kut=s(SV);AVo=r(Kut,"BigBirdForTokenClassification"),Kut.forEach(t),LVo=r(gke," (BigBird model)"),gke.forEach(t),yVo=i(J),H4=n(J,"LI",{});var hke=s(H4);npe=n(hke,"STRONG",{});var Zut=s(npe);xVo=r(Zut,"camembert"),Zut.forEach(t),$Vo=r(hke," \u2014 "),RV=n(hke,"A",{href:!0});var e1t=s(RV);kVo=r(e1t,"CamembertForTokenClassification"),e1t.forEach(t),SVo=r(hke," (CamemBERT model)"),hke.forEach(t),RVo=i(J),U4=n(J,"LI",{});var pke=s(U4);spe=n(pke,"STRONG",{});var o1t=s(spe);PVo=r(o1t,"canine"),o1t.forEach(t),BVo=r(pke," \u2014 "),PV=n(pke,"A",{href:!0});var r1t=s(PV);IVo=r(r1t,"CanineForTokenClassification"),r1t.forEach(t),NVo=r(pke," (CANINE model)"),pke.forEach(t),qVo=i(J),J4=n(J,"LI",{});var _ke=s(J4);lpe=n(_ke,"STRONG",{});var t1t=s(lpe);jVo=r(t1t,"convbert"),t1t.forEach(t),DVo=r(_ke," \u2014 "),BV=n(_ke,"A",{href:!0});var a1t=s(BV);GVo=r(a1t,"ConvBertForTokenClassification"),a1t.forEach(t),OVo=r(_ke," (ConvBERT model)"),_ke.forEach(t),VVo=i(J),Y4=n(J,"LI",{});var uke=s(Y4);ipe=n(uke,"STRONG",{});var n1t=s(ipe);XVo=r(n1t,"data2vec-text"),n1t.forEach(t),zVo=r(uke," \u2014 "),IV=n(uke,"A",{href:!0});var s1t=s(IV);WVo=r(s1t,"Data2VecTextForTokenClassification"),s1t.forEach(t),QVo=r(uke," (Data2VecText model)"),uke.forEach(t),HVo=i(J),K4=n(J,"LI",{});var bke=s(K4);dpe=n(bke,"STRONG",{});var l1t=s(dpe);UVo=r(l1t,"deberta"),l1t.forEach(t),JVo=r(bke," \u2014 "),NV=n(bke,"A",{href:!0});var i1t=s(NV);YVo=r(i1t,"DebertaForTokenClassification"),i1t.forEach(t),KVo=r(bke," (DeBERTa model)"),bke.forEach(t),ZVo=i(J),Z4=n(J,"LI",{});var vke=s(Z4);cpe=n(vke,"STRONG",{});var d1t=s(cpe);eXo=r(d1t,"deberta-v2"),d1t.forEach(t),oXo=r(vke," \u2014 "),qV=n(vke,"A",{href:!0});var c1t=s(qV);rXo=r(c1t,"DebertaV2ForTokenClassification"),c1t.forEach(t),tXo=r(vke," (DeBERTa-v2 model)"),vke.forEach(t),aXo=i(J),ev=n(J,"LI",{});var Fke=s(ev);fpe=n(Fke,"STRONG",{});var f1t=s(fpe);nXo=r(f1t,"distilbert"),f1t.forEach(t),sXo=r(Fke," \u2014 "),jV=n(Fke,"A",{href:!0});var m1t=s(jV);lXo=r(m1t,"DistilBertForTokenClassification"),m1t.forEach(t),iXo=r(Fke," (DistilBERT model)"),Fke.forEach(t),dXo=i(J),ov=n(J,"LI",{});var Tke=s(ov);mpe=n(Tke,"STRONG",{});var g1t=s(mpe);cXo=r(g1t,"electra"),g1t.forEach(t),fXo=r(Tke," \u2014 "),DV=n(Tke,"A",{href:!0});var h1t=s(DV);mXo=r(h1t,"ElectraForTokenClassification"),h1t.forEach(t),gXo=r(Tke," (ELECTRA model)"),Tke.forEach(t),hXo=i(J),rv=n(J,"LI",{});var Mke=s(rv);gpe=n(Mke,"STRONG",{});var p1t=s(gpe);pXo=r(p1t,"flaubert"),p1t.forEach(t),_Xo=r(Mke," \u2014 "),GV=n(Mke,"A",{href:!0});var _1t=s(GV);uXo=r(_1t,"FlaubertForTokenClassification"),_1t.forEach(t),bXo=r(Mke," (FlauBERT model)"),Mke.forEach(t),vXo=i(J),tv=n(J,"LI",{});var Eke=s(tv);hpe=n(Eke,"STRONG",{});var u1t=s(hpe);FXo=r(u1t,"fnet"),u1t.forEach(t),TXo=r(Eke," \u2014 "),OV=n(Eke,"A",{href:!0});var b1t=s(OV);MXo=r(b1t,"FNetForTokenClassification"),b1t.forEach(t),EXo=r(Eke," (FNet model)"),Eke.forEach(t),CXo=i(J),av=n(J,"LI",{});var Cke=s(av);ppe=n(Cke,"STRONG",{});var v1t=s(ppe);wXo=r(v1t,"funnel"),v1t.forEach(t),AXo=r(Cke," \u2014 "),VV=n(Cke,"A",{href:!0});var F1t=s(VV);LXo=r(F1t,"FunnelForTokenClassification"),F1t.forEach(t),yXo=r(Cke," (Funnel Transformer model)"),Cke.forEach(t),xXo=i(J),nv=n(J,"LI",{});var wke=s(nv);_pe=n(wke,"STRONG",{});var T1t=s(_pe);$Xo=r(T1t,"gpt2"),T1t.forEach(t),kXo=r(wke," \u2014 "),XV=n(wke,"A",{href:!0});var M1t=s(XV);SXo=r(M1t,"GPT2ForTokenClassification"),M1t.forEach(t),RXo=r(wke," (OpenAI GPT-2 model)"),wke.forEach(t),PXo=i(J),sv=n(J,"LI",{});var Ake=s(sv);upe=n(Ake,"STRONG",{});var E1t=s(upe);BXo=r(E1t,"ibert"),E1t.forEach(t),IXo=r(Ake," \u2014 "),zV=n(Ake,"A",{href:!0});var C1t=s(zV);NXo=r(C1t,"IBertForTokenClassification"),C1t.forEach(t),qXo=r(Ake," (I-BERT model)"),Ake.forEach(t),jXo=i(J),lv=n(J,"LI",{});var Lke=s(lv);bpe=n(Lke,"STRONG",{});var w1t=s(bpe);DXo=r(w1t,"layoutlm"),w1t.forEach(t),GXo=r(Lke," \u2014 "),WV=n(Lke,"A",{href:!0});var A1t=s(WV);OXo=r(A1t,"LayoutLMForTokenClassification"),A1t.forEach(t),VXo=r(Lke," (LayoutLM model)"),Lke.forEach(t),XXo=i(J),iv=n(J,"LI",{});var yke=s(iv);vpe=n(yke,"STRONG",{});var L1t=s(vpe);zXo=r(L1t,"layoutlmv2"),L1t.forEach(t),WXo=r(yke," \u2014 "),QV=n(yke,"A",{href:!0});var y1t=s(QV);QXo=r(y1t,"LayoutLMv2ForTokenClassification"),y1t.forEach(t),HXo=r(yke," (LayoutLMv2 model)"),yke.forEach(t),UXo=i(J),dv=n(J,"LI",{});var xke=s(dv);Fpe=n(xke,"STRONG",{});var x1t=s(Fpe);JXo=r(x1t,"layoutlmv3"),x1t.forEach(t),YXo=r(xke," \u2014 "),HV=n(xke,"A",{href:!0});var $1t=s(HV);KXo=r($1t,"LayoutLMv3ForTokenClassification"),$1t.forEach(t),ZXo=r(xke," (LayoutLMv3 model)"),xke.forEach(t),ezo=i(J),cv=n(J,"LI",{});var $ke=s(cv);Tpe=n($ke,"STRONG",{});var k1t=s(Tpe);ozo=r(k1t,"longformer"),k1t.forEach(t),rzo=r($ke," \u2014 "),UV=n($ke,"A",{href:!0});var S1t=s(UV);tzo=r(S1t,"LongformerForTokenClassification"),S1t.forEach(t),azo=r($ke," (Longformer model)"),$ke.forEach(t),nzo=i(J),fv=n(J,"LI",{});var kke=s(fv);Mpe=n(kke,"STRONG",{});var R1t=s(Mpe);szo=r(R1t,"megatron-bert"),R1t.forEach(t),lzo=r(kke," \u2014 "),JV=n(kke,"A",{href:!0});var P1t=s(JV);izo=r(P1t,"MegatronBertForTokenClassification"),P1t.forEach(t),dzo=r(kke," (Megatron-BERT model)"),kke.forEach(t),czo=i(J),mv=n(J,"LI",{});var Ske=s(mv);Epe=n(Ske,"STRONG",{});var B1t=s(Epe);fzo=r(B1t,"mobilebert"),B1t.forEach(t),mzo=r(Ske," \u2014 "),YV=n(Ske,"A",{href:!0});var I1t=s(YV);gzo=r(I1t,"MobileBertForTokenClassification"),I1t.forEach(t),hzo=r(Ske," (MobileBERT model)"),Ske.forEach(t),pzo=i(J),gv=n(J,"LI",{});var Rke=s(gv);Cpe=n(Rke,"STRONG",{});var N1t=s(Cpe);_zo=r(N1t,"mpnet"),N1t.forEach(t),uzo=r(Rke," \u2014 "),KV=n(Rke,"A",{href:!0});var q1t=s(KV);bzo=r(q1t,"MPNetForTokenClassification"),q1t.forEach(t),vzo=r(Rke," (MPNet model)"),Rke.forEach(t),Fzo=i(J),hv=n(J,"LI",{});var Pke=s(hv);wpe=n(Pke,"STRONG",{});var j1t=s(wpe);Tzo=r(j1t,"nystromformer"),j1t.forEach(t),Mzo=r(Pke," \u2014 "),ZV=n(Pke,"A",{href:!0});var D1t=s(ZV);Ezo=r(D1t,"NystromformerForTokenClassification"),D1t.forEach(t),Czo=r(Pke," (Nystr\xF6mformer model)"),Pke.forEach(t),wzo=i(J),pv=n(J,"LI",{});var Bke=s(pv);Ape=n(Bke,"STRONG",{});var G1t=s(Ape);Azo=r(G1t,"qdqbert"),G1t.forEach(t),Lzo=r(Bke," \u2014 "),eX=n(Bke,"A",{href:!0});var O1t=s(eX);yzo=r(O1t,"QDQBertForTokenClassification"),O1t.forEach(t),xzo=r(Bke," (QDQBert model)"),Bke.forEach(t),$zo=i(J),_v=n(J,"LI",{});var Ike=s(_v);Lpe=n(Ike,"STRONG",{});var V1t=s(Lpe);kzo=r(V1t,"rembert"),V1t.forEach(t),Szo=r(Ike," \u2014 "),oX=n(Ike,"A",{href:!0});var X1t=s(oX);Rzo=r(X1t,"RemBertForTokenClassification"),X1t.forEach(t),Pzo=r(Ike," (RemBERT model)"),Ike.forEach(t),Bzo=i(J),uv=n(J,"LI",{});var Nke=s(uv);ype=n(Nke,"STRONG",{});var z1t=s(ype);Izo=r(z1t,"roberta"),z1t.forEach(t),Nzo=r(Nke," \u2014 "),rX=n(Nke,"A",{href:!0});var W1t=s(rX);qzo=r(W1t,"RobertaForTokenClassification"),W1t.forEach(t),jzo=r(Nke," (RoBERTa model)"),Nke.forEach(t),Dzo=i(J),bv=n(J,"LI",{});var qke=s(bv);xpe=n(qke,"STRONG",{});var Q1t=s(xpe);Gzo=r(Q1t,"roformer"),Q1t.forEach(t),Ozo=r(qke," \u2014 "),tX=n(qke,"A",{href:!0});var H1t=s(tX);Vzo=r(H1t,"RoFormerForTokenClassification"),H1t.forEach(t),Xzo=r(qke," (RoFormer model)"),qke.forEach(t),zzo=i(J),vv=n(J,"LI",{});var jke=s(vv);$pe=n(jke,"STRONG",{});var U1t=s($pe);Wzo=r(U1t,"squeezebert"),U1t.forEach(t),Qzo=r(jke," \u2014 "),aX=n(jke,"A",{href:!0});var J1t=s(aX);Hzo=r(J1t,"SqueezeBertForTokenClassification"),J1t.forEach(t),Uzo=r(jke," (SqueezeBERT model)"),jke.forEach(t),Jzo=i(J),Fv=n(J,"LI",{});var Dke=s(Fv);kpe=n(Dke,"STRONG",{});var Y1t=s(kpe);Yzo=r(Y1t,"xlm"),Y1t.forEach(t),Kzo=r(Dke," \u2014 "),nX=n(Dke,"A",{href:!0});var K1t=s(nX);Zzo=r(K1t,"XLMForTokenClassification"),K1t.forEach(t),eWo=r(Dke," (XLM model)"),Dke.forEach(t),oWo=i(J),Tv=n(J,"LI",{});var Gke=s(Tv);Spe=n(Gke,"STRONG",{});var Z1t=s(Spe);rWo=r(Z1t,"xlm-roberta"),Z1t.forEach(t),tWo=r(Gke," \u2014 "),sX=n(Gke,"A",{href:!0});var ebt=s(sX);aWo=r(ebt,"XLMRobertaForTokenClassification"),ebt.forEach(t),nWo=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),sWo=i(J),Mv=n(J,"LI",{});var Oke=s(Mv);Rpe=n(Oke,"STRONG",{});var obt=s(Rpe);lWo=r(obt,"xlm-roberta-xl"),obt.forEach(t),iWo=r(Oke," \u2014 "),lX=n(Oke,"A",{href:!0});var rbt=s(lX);dWo=r(rbt,"XLMRobertaXLForTokenClassification"),rbt.forEach(t),cWo=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),fWo=i(J),Ev=n(J,"LI",{});var Vke=s(Ev);Ppe=n(Vke,"STRONG",{});var tbt=s(Ppe);mWo=r(tbt,"xlnet"),tbt.forEach(t),gWo=r(Vke," \u2014 "),iX=n(Vke,"A",{href:!0});var abt=s(iX);hWo=r(abt,"XLNetForTokenClassification"),abt.forEach(t),pWo=r(Vke," (XLNet model)"),Vke.forEach(t),_Wo=i(J),Cv=n(J,"LI",{});var Xke=s(Cv);Bpe=n(Xke,"STRONG",{});var nbt=s(Bpe);uWo=r(nbt,"yoso"),nbt.forEach(t),bWo=r(Xke," \u2014 "),dX=n(Xke,"A",{href:!0});var sbt=s(dX);vWo=r(sbt,"YosoForTokenClassification"),sbt.forEach(t),FWo=r(Xke," (YOSO model)"),Xke.forEach(t),J.forEach(t),TWo=i(ca),wv=n(ca,"P",{});var zke=s(wv);MWo=r(zke,"The model is set in evaluation mode by default using "),Ipe=n(zke,"CODE",{});var lbt=s(Ipe);EWo=r(lbt,"model.eval()"),lbt.forEach(t),CWo=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(zke,"CODE",{});var ibt=s(Npe);wWo=r(ibt,"model.train()"),ibt.forEach(t),zke.forEach(t),AWo=i(ca),T(Av.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),hDe=i(f),ed=n(f,"H2",{class:!0});var bOe=s(ed);Lv=n(bOe,"A",{id:!0,class:!0,href:!0});var dbt=s(Lv);qpe=n(dbt,"SPAN",{});var cbt=s(qpe);T(gy.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),LWo=i(bOe),jpe=n(bOe,"SPAN",{});var fbt=s(jpe);yWo=r(fbt,"AutoModelForQuestionAnswering"),fbt.forEach(t),bOe.forEach(t),pDe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(hy.$$.fragment,Ks),xWo=i(Ks),od=n(Ks,"P",{});var Lee=s(od);$Wo=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cX=n(Lee,"A",{href:!0});var mbt=s(cX);kWo=r(mbt,"from_pretrained()"),mbt.forEach(t),SWo=r(Lee," class method or the "),fX=n(Lee,"A",{href:!0});var gbt=s(fX);RWo=r(gbt,"from_config()"),gbt.forEach(t),PWo=r(Lee,` class
method.`),Lee.forEach(t),BWo=i(Ks),py=n(Ks,"P",{});var vOe=s(py);IWo=r(vOe,"This class cannot be instantiated directly using "),Dpe=n(vOe,"CODE",{});var hbt=s(Dpe);NWo=r(hbt,"__init__()"),hbt.forEach(t),qWo=r(vOe," (throws an error)."),vOe.forEach(t),jWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var v6=s(gt);T(_y.$$.fragment,v6),DWo=i(v6),Gpe=n(v6,"P",{});var pbt=s(Gpe);GWo=r(pbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pbt.forEach(t),OWo=i(v6),rd=n(v6,"P",{});var yee=s(rd);VWo=r(yee,`Note:
Loading a model from its configuration file does `),Ope=n(yee,"STRONG",{});var _bt=s(Ope);XWo=r(_bt,"not"),_bt.forEach(t),zWo=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(yee,"A",{href:!0});var ubt=s(mX);WWo=r(ubt,"from_pretrained()"),ubt.forEach(t),QWo=r(yee," to load the model weights."),yee.forEach(t),HWo=i(v6),T(yv.$$.fragment,v6),v6.forEach(t),UWo=i(Ks),no=n(Ks,"DIV",{class:!0});var fa=s(no);T(uy.$$.fragment,fa),JWo=i(fa),Vpe=n(fa,"P",{});var bbt=s(Vpe);YWo=r(bbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bbt.forEach(t),KWo=i(fa),qa=n(fa,"P",{});var F6=s(qa);ZWo=r(F6,"The model class to instantiate is selected based on the "),Xpe=n(F6,"CODE",{});var vbt=s(Xpe);eQo=r(vbt,"model_type"),vbt.forEach(t),oQo=r(F6,` property of the config object (either
passed as an argument or loaded from `),zpe=n(F6,"CODE",{});var Fbt=s(zpe);rQo=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),tQo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(F6,"CODE",{});var Tbt=s(Wpe);aQo=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),nQo=r(F6,":"),F6.forEach(t),sQo=i(fa),V=n(fa,"UL",{});var X=s(V);xv=n(X,"LI",{});var Wke=s(xv);Qpe=n(Wke,"STRONG",{});var Mbt=s(Qpe);lQo=r(Mbt,"albert"),Mbt.forEach(t),iQo=r(Wke," \u2014 "),gX=n(Wke,"A",{href:!0});var Ebt=s(gX);dQo=r(Ebt,"AlbertForQuestionAnswering"),Ebt.forEach(t),cQo=r(Wke," (ALBERT model)"),Wke.forEach(t),fQo=i(X),$v=n(X,"LI",{});var Qke=s($v);Hpe=n(Qke,"STRONG",{});var Cbt=s(Hpe);mQo=r(Cbt,"bart"),Cbt.forEach(t),gQo=r(Qke," \u2014 "),hX=n(Qke,"A",{href:!0});var wbt=s(hX);hQo=r(wbt,"BartForQuestionAnswering"),wbt.forEach(t),pQo=r(Qke," (BART model)"),Qke.forEach(t),_Qo=i(X),kv=n(X,"LI",{});var Hke=s(kv);Upe=n(Hke,"STRONG",{});var Abt=s(Upe);uQo=r(Abt,"bert"),Abt.forEach(t),bQo=r(Hke," \u2014 "),pX=n(Hke,"A",{href:!0});var Lbt=s(pX);vQo=r(Lbt,"BertForQuestionAnswering"),Lbt.forEach(t),FQo=r(Hke," (BERT model)"),Hke.forEach(t),TQo=i(X),Sv=n(X,"LI",{});var Uke=s(Sv);Jpe=n(Uke,"STRONG",{});var ybt=s(Jpe);MQo=r(ybt,"big_bird"),ybt.forEach(t),EQo=r(Uke," \u2014 "),_X=n(Uke,"A",{href:!0});var xbt=s(_X);CQo=r(xbt,"BigBirdForQuestionAnswering"),xbt.forEach(t),wQo=r(Uke," (BigBird model)"),Uke.forEach(t),AQo=i(X),Rv=n(X,"LI",{});var Jke=s(Rv);Ype=n(Jke,"STRONG",{});var $bt=s(Ype);LQo=r($bt,"bigbird_pegasus"),$bt.forEach(t),yQo=r(Jke," \u2014 "),uX=n(Jke,"A",{href:!0});var kbt=s(uX);xQo=r(kbt,"BigBirdPegasusForQuestionAnswering"),kbt.forEach(t),$Qo=r(Jke," (BigBird-Pegasus model)"),Jke.forEach(t),kQo=i(X),Pv=n(X,"LI",{});var Yke=s(Pv);Kpe=n(Yke,"STRONG",{});var Sbt=s(Kpe);SQo=r(Sbt,"camembert"),Sbt.forEach(t),RQo=r(Yke," \u2014 "),bX=n(Yke,"A",{href:!0});var Rbt=s(bX);PQo=r(Rbt,"CamembertForQuestionAnswering"),Rbt.forEach(t),BQo=r(Yke," (CamemBERT model)"),Yke.forEach(t),IQo=i(X),Bv=n(X,"LI",{});var Kke=s(Bv);Zpe=n(Kke,"STRONG",{});var Pbt=s(Zpe);NQo=r(Pbt,"canine"),Pbt.forEach(t),qQo=r(Kke," \u2014 "),vX=n(Kke,"A",{href:!0});var Bbt=s(vX);jQo=r(Bbt,"CanineForQuestionAnswering"),Bbt.forEach(t),DQo=r(Kke," (CANINE model)"),Kke.forEach(t),GQo=i(X),Iv=n(X,"LI",{});var Zke=s(Iv);e_e=n(Zke,"STRONG",{});var Ibt=s(e_e);OQo=r(Ibt,"convbert"),Ibt.forEach(t),VQo=r(Zke," \u2014 "),FX=n(Zke,"A",{href:!0});var Nbt=s(FX);XQo=r(Nbt,"ConvBertForQuestionAnswering"),Nbt.forEach(t),zQo=r(Zke," (ConvBERT model)"),Zke.forEach(t),WQo=i(X),Nv=n(X,"LI",{});var eSe=s(Nv);o_e=n(eSe,"STRONG",{});var qbt=s(o_e);QQo=r(qbt,"data2vec-text"),qbt.forEach(t),HQo=r(eSe," \u2014 "),TX=n(eSe,"A",{href:!0});var jbt=s(TX);UQo=r(jbt,"Data2VecTextForQuestionAnswering"),jbt.forEach(t),JQo=r(eSe," (Data2VecText model)"),eSe.forEach(t),YQo=i(X),qv=n(X,"LI",{});var oSe=s(qv);r_e=n(oSe,"STRONG",{});var Dbt=s(r_e);KQo=r(Dbt,"deberta"),Dbt.forEach(t),ZQo=r(oSe," \u2014 "),MX=n(oSe,"A",{href:!0});var Gbt=s(MX);eHo=r(Gbt,"DebertaForQuestionAnswering"),Gbt.forEach(t),oHo=r(oSe," (DeBERTa model)"),oSe.forEach(t),rHo=i(X),jv=n(X,"LI",{});var rSe=s(jv);t_e=n(rSe,"STRONG",{});var Obt=s(t_e);tHo=r(Obt,"deberta-v2"),Obt.forEach(t),aHo=r(rSe," \u2014 "),EX=n(rSe,"A",{href:!0});var Vbt=s(EX);nHo=r(Vbt,"DebertaV2ForQuestionAnswering"),Vbt.forEach(t),sHo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),lHo=i(X),Dv=n(X,"LI",{});var tSe=s(Dv);a_e=n(tSe,"STRONG",{});var Xbt=s(a_e);iHo=r(Xbt,"distilbert"),Xbt.forEach(t),dHo=r(tSe," \u2014 "),CX=n(tSe,"A",{href:!0});var zbt=s(CX);cHo=r(zbt,"DistilBertForQuestionAnswering"),zbt.forEach(t),fHo=r(tSe," (DistilBERT model)"),tSe.forEach(t),mHo=i(X),Gv=n(X,"LI",{});var aSe=s(Gv);n_e=n(aSe,"STRONG",{});var Wbt=s(n_e);gHo=r(Wbt,"electra"),Wbt.forEach(t),hHo=r(aSe," \u2014 "),wX=n(aSe,"A",{href:!0});var Qbt=s(wX);pHo=r(Qbt,"ElectraForQuestionAnswering"),Qbt.forEach(t),_Ho=r(aSe," (ELECTRA model)"),aSe.forEach(t),uHo=i(X),Ov=n(X,"LI",{});var nSe=s(Ov);s_e=n(nSe,"STRONG",{});var Hbt=s(s_e);bHo=r(Hbt,"flaubert"),Hbt.forEach(t),vHo=r(nSe," \u2014 "),AX=n(nSe,"A",{href:!0});var Ubt=s(AX);FHo=r(Ubt,"FlaubertForQuestionAnsweringSimple"),Ubt.forEach(t),THo=r(nSe," (FlauBERT model)"),nSe.forEach(t),MHo=i(X),Vv=n(X,"LI",{});var sSe=s(Vv);l_e=n(sSe,"STRONG",{});var Jbt=s(l_e);EHo=r(Jbt,"fnet"),Jbt.forEach(t),CHo=r(sSe," \u2014 "),LX=n(sSe,"A",{href:!0});var Ybt=s(LX);wHo=r(Ybt,"FNetForQuestionAnswering"),Ybt.forEach(t),AHo=r(sSe," (FNet model)"),sSe.forEach(t),LHo=i(X),Xv=n(X,"LI",{});var lSe=s(Xv);i_e=n(lSe,"STRONG",{});var Kbt=s(i_e);yHo=r(Kbt,"funnel"),Kbt.forEach(t),xHo=r(lSe," \u2014 "),yX=n(lSe,"A",{href:!0});var Zbt=s(yX);$Ho=r(Zbt,"FunnelForQuestionAnswering"),Zbt.forEach(t),kHo=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),SHo=i(X),zv=n(X,"LI",{});var iSe=s(zv);d_e=n(iSe,"STRONG",{});var e2t=s(d_e);RHo=r(e2t,"gptj"),e2t.forEach(t),PHo=r(iSe," \u2014 "),xX=n(iSe,"A",{href:!0});var o2t=s(xX);BHo=r(o2t,"GPTJForQuestionAnswering"),o2t.forEach(t),IHo=r(iSe," (GPT-J model)"),iSe.forEach(t),NHo=i(X),Wv=n(X,"LI",{});var dSe=s(Wv);c_e=n(dSe,"STRONG",{});var r2t=s(c_e);qHo=r(r2t,"ibert"),r2t.forEach(t),jHo=r(dSe," \u2014 "),$X=n(dSe,"A",{href:!0});var t2t=s($X);DHo=r(t2t,"IBertForQuestionAnswering"),t2t.forEach(t),GHo=r(dSe," (I-BERT model)"),dSe.forEach(t),OHo=i(X),Qv=n(X,"LI",{});var cSe=s(Qv);f_e=n(cSe,"STRONG",{});var a2t=s(f_e);VHo=r(a2t,"layoutlmv2"),a2t.forEach(t),XHo=r(cSe," \u2014 "),kX=n(cSe,"A",{href:!0});var n2t=s(kX);zHo=r(n2t,"LayoutLMv2ForQuestionAnswering"),n2t.forEach(t),WHo=r(cSe," (LayoutLMv2 model)"),cSe.forEach(t),QHo=i(X),Hv=n(X,"LI",{});var fSe=s(Hv);m_e=n(fSe,"STRONG",{});var s2t=s(m_e);HHo=r(s2t,"layoutlmv3"),s2t.forEach(t),UHo=r(fSe," \u2014 "),SX=n(fSe,"A",{href:!0});var l2t=s(SX);JHo=r(l2t,"LayoutLMv3ForQuestionAnswering"),l2t.forEach(t),YHo=r(fSe," (LayoutLMv3 model)"),fSe.forEach(t),KHo=i(X),Uv=n(X,"LI",{});var mSe=s(Uv);g_e=n(mSe,"STRONG",{});var i2t=s(g_e);ZHo=r(i2t,"led"),i2t.forEach(t),eUo=r(mSe," \u2014 "),RX=n(mSe,"A",{href:!0});var d2t=s(RX);oUo=r(d2t,"LEDForQuestionAnswering"),d2t.forEach(t),rUo=r(mSe," (LED model)"),mSe.forEach(t),tUo=i(X),Jv=n(X,"LI",{});var gSe=s(Jv);h_e=n(gSe,"STRONG",{});var c2t=s(h_e);aUo=r(c2t,"longformer"),c2t.forEach(t),nUo=r(gSe," \u2014 "),PX=n(gSe,"A",{href:!0});var f2t=s(PX);sUo=r(f2t,"LongformerForQuestionAnswering"),f2t.forEach(t),lUo=r(gSe," (Longformer model)"),gSe.forEach(t),iUo=i(X),Yv=n(X,"LI",{});var hSe=s(Yv);p_e=n(hSe,"STRONG",{});var m2t=s(p_e);dUo=r(m2t,"lxmert"),m2t.forEach(t),cUo=r(hSe," \u2014 "),BX=n(hSe,"A",{href:!0});var g2t=s(BX);fUo=r(g2t,"LxmertForQuestionAnswering"),g2t.forEach(t),mUo=r(hSe," (LXMERT model)"),hSe.forEach(t),gUo=i(X),Kv=n(X,"LI",{});var pSe=s(Kv);__e=n(pSe,"STRONG",{});var h2t=s(__e);hUo=r(h2t,"mbart"),h2t.forEach(t),pUo=r(pSe," \u2014 "),IX=n(pSe,"A",{href:!0});var p2t=s(IX);_Uo=r(p2t,"MBartForQuestionAnswering"),p2t.forEach(t),uUo=r(pSe," (mBART model)"),pSe.forEach(t),bUo=i(X),Zv=n(X,"LI",{});var _Se=s(Zv);u_e=n(_Se,"STRONG",{});var _2t=s(u_e);vUo=r(_2t,"megatron-bert"),_2t.forEach(t),FUo=r(_Se," \u2014 "),NX=n(_Se,"A",{href:!0});var u2t=s(NX);TUo=r(u2t,"MegatronBertForQuestionAnswering"),u2t.forEach(t),MUo=r(_Se," (Megatron-BERT model)"),_Se.forEach(t),EUo=i(X),e5=n(X,"LI",{});var uSe=s(e5);b_e=n(uSe,"STRONG",{});var b2t=s(b_e);CUo=r(b2t,"mobilebert"),b2t.forEach(t),wUo=r(uSe," \u2014 "),qX=n(uSe,"A",{href:!0});var v2t=s(qX);AUo=r(v2t,"MobileBertForQuestionAnswering"),v2t.forEach(t),LUo=r(uSe," (MobileBERT model)"),uSe.forEach(t),yUo=i(X),o5=n(X,"LI",{});var bSe=s(o5);v_e=n(bSe,"STRONG",{});var F2t=s(v_e);xUo=r(F2t,"mpnet"),F2t.forEach(t),$Uo=r(bSe," \u2014 "),jX=n(bSe,"A",{href:!0});var T2t=s(jX);kUo=r(T2t,"MPNetForQuestionAnswering"),T2t.forEach(t),SUo=r(bSe," (MPNet model)"),bSe.forEach(t),RUo=i(X),r5=n(X,"LI",{});var vSe=s(r5);F_e=n(vSe,"STRONG",{});var M2t=s(F_e);PUo=r(M2t,"nystromformer"),M2t.forEach(t),BUo=r(vSe," \u2014 "),DX=n(vSe,"A",{href:!0});var E2t=s(DX);IUo=r(E2t,"NystromformerForQuestionAnswering"),E2t.forEach(t),NUo=r(vSe," (Nystr\xF6mformer model)"),vSe.forEach(t),qUo=i(X),t5=n(X,"LI",{});var FSe=s(t5);T_e=n(FSe,"STRONG",{});var C2t=s(T_e);jUo=r(C2t,"qdqbert"),C2t.forEach(t),DUo=r(FSe," \u2014 "),GX=n(FSe,"A",{href:!0});var w2t=s(GX);GUo=r(w2t,"QDQBertForQuestionAnswering"),w2t.forEach(t),OUo=r(FSe," (QDQBert model)"),FSe.forEach(t),VUo=i(X),a5=n(X,"LI",{});var TSe=s(a5);M_e=n(TSe,"STRONG",{});var A2t=s(M_e);XUo=r(A2t,"reformer"),A2t.forEach(t),zUo=r(TSe," \u2014 "),OX=n(TSe,"A",{href:!0});var L2t=s(OX);WUo=r(L2t,"ReformerForQuestionAnswering"),L2t.forEach(t),QUo=r(TSe," (Reformer model)"),TSe.forEach(t),HUo=i(X),n5=n(X,"LI",{});var MSe=s(n5);E_e=n(MSe,"STRONG",{});var y2t=s(E_e);UUo=r(y2t,"rembert"),y2t.forEach(t),JUo=r(MSe," \u2014 "),VX=n(MSe,"A",{href:!0});var x2t=s(VX);YUo=r(x2t,"RemBertForQuestionAnswering"),x2t.forEach(t),KUo=r(MSe," (RemBERT model)"),MSe.forEach(t),ZUo=i(X),s5=n(X,"LI",{});var ESe=s(s5);C_e=n(ESe,"STRONG",{});var $2t=s(C_e);eJo=r($2t,"roberta"),$2t.forEach(t),oJo=r(ESe," \u2014 "),XX=n(ESe,"A",{href:!0});var k2t=s(XX);rJo=r(k2t,"RobertaForQuestionAnswering"),k2t.forEach(t),tJo=r(ESe," (RoBERTa model)"),ESe.forEach(t),aJo=i(X),l5=n(X,"LI",{});var CSe=s(l5);w_e=n(CSe,"STRONG",{});var S2t=s(w_e);nJo=r(S2t,"roformer"),S2t.forEach(t),sJo=r(CSe," \u2014 "),zX=n(CSe,"A",{href:!0});var R2t=s(zX);lJo=r(R2t,"RoFormerForQuestionAnswering"),R2t.forEach(t),iJo=r(CSe," (RoFormer model)"),CSe.forEach(t),dJo=i(X),i5=n(X,"LI",{});var wSe=s(i5);A_e=n(wSe,"STRONG",{});var P2t=s(A_e);cJo=r(P2t,"splinter"),P2t.forEach(t),fJo=r(wSe," \u2014 "),WX=n(wSe,"A",{href:!0});var B2t=s(WX);mJo=r(B2t,"SplinterForQuestionAnswering"),B2t.forEach(t),gJo=r(wSe," (Splinter model)"),wSe.forEach(t),hJo=i(X),d5=n(X,"LI",{});var ASe=s(d5);L_e=n(ASe,"STRONG",{});var I2t=s(L_e);pJo=r(I2t,"squeezebert"),I2t.forEach(t),_Jo=r(ASe," \u2014 "),QX=n(ASe,"A",{href:!0});var N2t=s(QX);uJo=r(N2t,"SqueezeBertForQuestionAnswering"),N2t.forEach(t),bJo=r(ASe," (SqueezeBERT model)"),ASe.forEach(t),vJo=i(X),c5=n(X,"LI",{});var LSe=s(c5);y_e=n(LSe,"STRONG",{});var q2t=s(y_e);FJo=r(q2t,"xlm"),q2t.forEach(t),TJo=r(LSe," \u2014 "),HX=n(LSe,"A",{href:!0});var j2t=s(HX);MJo=r(j2t,"XLMForQuestionAnsweringSimple"),j2t.forEach(t),EJo=r(LSe," (XLM model)"),LSe.forEach(t),CJo=i(X),f5=n(X,"LI",{});var ySe=s(f5);x_e=n(ySe,"STRONG",{});var D2t=s(x_e);wJo=r(D2t,"xlm-roberta"),D2t.forEach(t),AJo=r(ySe," \u2014 "),UX=n(ySe,"A",{href:!0});var G2t=s(UX);LJo=r(G2t,"XLMRobertaForQuestionAnswering"),G2t.forEach(t),yJo=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),xJo=i(X),m5=n(X,"LI",{});var xSe=s(m5);$_e=n(xSe,"STRONG",{});var O2t=s($_e);$Jo=r(O2t,"xlm-roberta-xl"),O2t.forEach(t),kJo=r(xSe," \u2014 "),JX=n(xSe,"A",{href:!0});var V2t=s(JX);SJo=r(V2t,"XLMRobertaXLForQuestionAnswering"),V2t.forEach(t),RJo=r(xSe," (XLM-RoBERTa-XL model)"),xSe.forEach(t),PJo=i(X),g5=n(X,"LI",{});var $Se=s(g5);k_e=n($Se,"STRONG",{});var X2t=s(k_e);BJo=r(X2t,"xlnet"),X2t.forEach(t),IJo=r($Se," \u2014 "),YX=n($Se,"A",{href:!0});var z2t=s(YX);NJo=r(z2t,"XLNetForQuestionAnsweringSimple"),z2t.forEach(t),qJo=r($Se," (XLNet model)"),$Se.forEach(t),jJo=i(X),h5=n(X,"LI",{});var kSe=s(h5);S_e=n(kSe,"STRONG",{});var W2t=s(S_e);DJo=r(W2t,"yoso"),W2t.forEach(t),GJo=r(kSe," \u2014 "),KX=n(kSe,"A",{href:!0});var Q2t=s(KX);OJo=r(Q2t,"YosoForQuestionAnswering"),Q2t.forEach(t),VJo=r(kSe," (YOSO model)"),kSe.forEach(t),X.forEach(t),XJo=i(fa),p5=n(fa,"P",{});var SSe=s(p5);zJo=r(SSe,"The model is set in evaluation mode by default using "),R_e=n(SSe,"CODE",{});var H2t=s(R_e);WJo=r(H2t,"model.eval()"),H2t.forEach(t),QJo=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(SSe,"CODE",{});var U2t=s(P_e);HJo=r(U2t,"model.train()"),U2t.forEach(t),SSe.forEach(t),UJo=i(fa),T(_5.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),_De=i(f),td=n(f,"H2",{class:!0});var FOe=s(td);u5=n(FOe,"A",{id:!0,class:!0,href:!0});var J2t=s(u5);B_e=n(J2t,"SPAN",{});var Y2t=s(B_e);T(by.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),JJo=i(FOe),I_e=n(FOe,"SPAN",{});var K2t=s(I_e);YJo=r(K2t,"AutoModelForTableQuestionAnswering"),K2t.forEach(t),FOe.forEach(t),uDe=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(vy.$$.fragment,Zs),KJo=i(Zs),ad=n(Zs,"P",{});var xee=s(ad);ZJo=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZX=n(xee,"A",{href:!0});var Z2t=s(ZX);eYo=r(Z2t,"from_pretrained()"),Z2t.forEach(t),oYo=r(xee," class method or the "),ez=n(xee,"A",{href:!0});var e4t=s(ez);rYo=r(e4t,"from_config()"),e4t.forEach(t),tYo=r(xee,` class
method.`),xee.forEach(t),aYo=i(Zs),Fy=n(Zs,"P",{});var TOe=s(Fy);nYo=r(TOe,"This class cannot be instantiated directly using "),N_e=n(TOe,"CODE",{});var o4t=s(N_e);sYo=r(o4t,"__init__()"),o4t.forEach(t),lYo=r(TOe," (throws an error)."),TOe.forEach(t),iYo=i(Zs),ht=n(Zs,"DIV",{class:!0});var T6=s(ht);T(Ty.$$.fragment,T6),dYo=i(T6),q_e=n(T6,"P",{});var r4t=s(q_e);cYo=r(r4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r4t.forEach(t),fYo=i(T6),nd=n(T6,"P",{});var $ee=s(nd);mYo=r($ee,`Note:
Loading a model from its configuration file does `),j_e=n($ee,"STRONG",{});var t4t=s(j_e);gYo=r(t4t,"not"),t4t.forEach(t),hYo=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n($ee,"A",{href:!0});var a4t=s(oz);pYo=r(a4t,"from_pretrained()"),a4t.forEach(t),_Yo=r($ee," to load the model weights."),$ee.forEach(t),uYo=i(T6),T(b5.$$.fragment,T6),T6.forEach(t),bYo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(My.$$.fragment,ma),vYo=i(ma),D_e=n(ma,"P",{});var n4t=s(D_e);FYo=r(n4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n4t.forEach(t),TYo=i(ma),ja=n(ma,"P",{});var M6=s(ja);MYo=r(M6,"The model class to instantiate is selected based on the "),G_e=n(M6,"CODE",{});var s4t=s(G_e);EYo=r(s4t,"model_type"),s4t.forEach(t),CYo=r(M6,` property of the config object (either
passed as an argument or loaded from `),O_e=n(M6,"CODE",{});var l4t=s(O_e);wYo=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),AYo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(M6,"CODE",{});var i4t=s(V_e);LYo=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),yYo=r(M6,":"),M6.forEach(t),xYo=i(ma),X_e=n(ma,"UL",{});var d4t=s(X_e);v5=n(d4t,"LI",{});var RSe=s(v5);z_e=n(RSe,"STRONG",{});var c4t=s(z_e);$Yo=r(c4t,"tapas"),c4t.forEach(t),kYo=r(RSe," \u2014 "),rz=n(RSe,"A",{href:!0});var f4t=s(rz);SYo=r(f4t,"TapasForQuestionAnswering"),f4t.forEach(t),RYo=r(RSe," (TAPAS model)"),RSe.forEach(t),d4t.forEach(t),PYo=i(ma),F5=n(ma,"P",{});var PSe=s(F5);BYo=r(PSe,"The model is set in evaluation mode by default using "),W_e=n(PSe,"CODE",{});var m4t=s(W_e);IYo=r(m4t,"model.eval()"),m4t.forEach(t),NYo=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(PSe,"CODE",{});var g4t=s(Q_e);qYo=r(g4t,"model.train()"),g4t.forEach(t),PSe.forEach(t),jYo=i(ma),T(T5.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),bDe=i(f),sd=n(f,"H2",{class:!0});var MOe=s(sd);M5=n(MOe,"A",{id:!0,class:!0,href:!0});var h4t=s(M5);H_e=n(h4t,"SPAN",{});var p4t=s(H_e);T(Ey.$$.fragment,p4t),p4t.forEach(t),h4t.forEach(t),DYo=i(MOe),U_e=n(MOe,"SPAN",{});var _4t=s(U_e);GYo=r(_4t,"AutoModelForImageClassification"),_4t.forEach(t),MOe.forEach(t),vDe=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(Cy.$$.fragment,el),OYo=i(el),ld=n(el,"P",{});var kee=s(ld);VYo=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tz=n(kee,"A",{href:!0});var u4t=s(tz);XYo=r(u4t,"from_pretrained()"),u4t.forEach(t),zYo=r(kee," class method or the "),az=n(kee,"A",{href:!0});var b4t=s(az);WYo=r(b4t,"from_config()"),b4t.forEach(t),QYo=r(kee,` class
method.`),kee.forEach(t),HYo=i(el),wy=n(el,"P",{});var EOe=s(wy);UYo=r(EOe,"This class cannot be instantiated directly using "),J_e=n(EOe,"CODE",{});var v4t=s(J_e);JYo=r(v4t,"__init__()"),v4t.forEach(t),YYo=r(EOe," (throws an error)."),EOe.forEach(t),KYo=i(el),pt=n(el,"DIV",{class:!0});var E6=s(pt);T(Ay.$$.fragment,E6),ZYo=i(E6),Y_e=n(E6,"P",{});var F4t=s(Y_e);eKo=r(F4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F4t.forEach(t),oKo=i(E6),id=n(E6,"P",{});var See=s(id);rKo=r(See,`Note:
Loading a model from its configuration file does `),K_e=n(See,"STRONG",{});var T4t=s(K_e);tKo=r(T4t,"not"),T4t.forEach(t),aKo=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(See,"A",{href:!0});var M4t=s(nz);nKo=r(M4t,"from_pretrained()"),M4t.forEach(t),sKo=r(See," to load the model weights."),See.forEach(t),lKo=i(E6),T(E5.$$.fragment,E6),E6.forEach(t),iKo=i(el),lo=n(el,"DIV",{class:!0});var ga=s(lo);T(Ly.$$.fragment,ga),dKo=i(ga),Z_e=n(ga,"P",{});var E4t=s(Z_e);cKo=r(E4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E4t.forEach(t),fKo=i(ga),Da=n(ga,"P",{});var C6=s(Da);mKo=r(C6,"The model class to instantiate is selected based on the "),eue=n(C6,"CODE",{});var C4t=s(eue);gKo=r(C4t,"model_type"),C4t.forEach(t),hKo=r(C6,` property of the config object (either
passed as an argument or loaded from `),oue=n(C6,"CODE",{});var w4t=s(oue);pKo=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),_Ko=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(C6,"CODE",{});var A4t=s(rue);uKo=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),bKo=r(C6,":"),C6.forEach(t),vKo=i(ga),ue=n(ga,"UL",{});var Te=s(ue);C5=n(Te,"LI",{});var BSe=s(C5);tue=n(BSe,"STRONG",{});var L4t=s(tue);FKo=r(L4t,"beit"),L4t.forEach(t),TKo=r(BSe," \u2014 "),sz=n(BSe,"A",{href:!0});var y4t=s(sz);MKo=r(y4t,"BeitForImageClassification"),y4t.forEach(t),EKo=r(BSe," (BEiT model)"),BSe.forEach(t),CKo=i(Te),w5=n(Te,"LI",{});var ISe=s(w5);aue=n(ISe,"STRONG",{});var x4t=s(aue);wKo=r(x4t,"convnext"),x4t.forEach(t),AKo=r(ISe," \u2014 "),lz=n(ISe,"A",{href:!0});var $4t=s(lz);LKo=r($4t,"ConvNextForImageClassification"),$4t.forEach(t),yKo=r(ISe," (ConvNeXT model)"),ISe.forEach(t),xKo=i(Te),A5=n(Te,"LI",{});var NSe=s(A5);nue=n(NSe,"STRONG",{});var k4t=s(nue);$Ko=r(k4t,"cvt"),k4t.forEach(t),kKo=r(NSe," \u2014 "),iz=n(NSe,"A",{href:!0});var S4t=s(iz);SKo=r(S4t,"CvtForImageClassification"),S4t.forEach(t),RKo=r(NSe," (CvT model)"),NSe.forEach(t),PKo=i(Te),L5=n(Te,"LI",{});var qSe=s(L5);sue=n(qSe,"STRONG",{});var R4t=s(sue);BKo=r(R4t,"data2vec-vision"),R4t.forEach(t),IKo=r(qSe," \u2014 "),dz=n(qSe,"A",{href:!0});var P4t=s(dz);NKo=r(P4t,"Data2VecVisionForImageClassification"),P4t.forEach(t),qKo=r(qSe," (Data2VecVision model)"),qSe.forEach(t),jKo=i(Te),Bs=n(Te,"LI",{});var mk=s(Bs);lue=n(mk,"STRONG",{});var B4t=s(lue);DKo=r(B4t,"deit"),B4t.forEach(t),GKo=r(mk," \u2014 "),cz=n(mk,"A",{href:!0});var I4t=s(cz);OKo=r(I4t,"DeiTForImageClassification"),I4t.forEach(t),VKo=r(mk," or "),fz=n(mk,"A",{href:!0});var N4t=s(fz);XKo=r(N4t,"DeiTForImageClassificationWithTeacher"),N4t.forEach(t),zKo=r(mk," (DeiT model)"),mk.forEach(t),WKo=i(Te),y5=n(Te,"LI",{});var jSe=s(y5);iue=n(jSe,"STRONG",{});var q4t=s(iue);QKo=r(q4t,"imagegpt"),q4t.forEach(t),HKo=r(jSe," \u2014 "),mz=n(jSe,"A",{href:!0});var j4t=s(mz);UKo=r(j4t,"ImageGPTForImageClassification"),j4t.forEach(t),JKo=r(jSe," (ImageGPT model)"),jSe.forEach(t),YKo=i(Te),Is=n(Te,"LI",{});var gk=s(Is);due=n(gk,"STRONG",{});var D4t=s(due);KKo=r(D4t,"levit"),D4t.forEach(t),ZKo=r(gk," \u2014 "),gz=n(gk,"A",{href:!0});var G4t=s(gz);eZo=r(G4t,"LevitForImageClassification"),G4t.forEach(t),oZo=r(gk," or "),hz=n(gk,"A",{href:!0});var O4t=s(hz);rZo=r(O4t,"LevitForImageClassificationWithTeacher"),O4t.forEach(t),tZo=r(gk," (LeViT model)"),gk.forEach(t),aZo=i(Te),x5=n(Te,"LI",{});var DSe=s(x5);cue=n(DSe,"STRONG",{});var V4t=s(cue);nZo=r(V4t,"mobilevit"),V4t.forEach(t),sZo=r(DSe," \u2014 "),pz=n(DSe,"A",{href:!0});var X4t=s(pz);lZo=r(X4t,"MobileViTForImageClassification"),X4t.forEach(t),iZo=r(DSe," (MobileViT model)"),DSe.forEach(t),dZo=i(Te),_t=n(Te,"LI",{});var _f=s(_t);fue=n(_f,"STRONG",{});var z4t=s(fue);cZo=r(z4t,"perceiver"),z4t.forEach(t),fZo=r(_f," \u2014 "),_z=n(_f,"A",{href:!0});var W4t=s(_z);mZo=r(W4t,"PerceiverForImageClassificationLearned"),W4t.forEach(t),gZo=r(_f," or "),uz=n(_f,"A",{href:!0});var Q4t=s(uz);hZo=r(Q4t,"PerceiverForImageClassificationFourier"),Q4t.forEach(t),pZo=r(_f," or "),bz=n(_f,"A",{href:!0});var H4t=s(bz);_Zo=r(H4t,"PerceiverForImageClassificationConvProcessing"),H4t.forEach(t),uZo=r(_f," (Perceiver model)"),_f.forEach(t),bZo=i(Te),$5=n(Te,"LI",{});var GSe=s($5);mue=n(GSe,"STRONG",{});var U4t=s(mue);vZo=r(U4t,"poolformer"),U4t.forEach(t),FZo=r(GSe," \u2014 "),vz=n(GSe,"A",{href:!0});var J4t=s(vz);TZo=r(J4t,"PoolFormerForImageClassification"),J4t.forEach(t),MZo=r(GSe," (PoolFormer model)"),GSe.forEach(t),EZo=i(Te),k5=n(Te,"LI",{});var OSe=s(k5);gue=n(OSe,"STRONG",{});var Y4t=s(gue);CZo=r(Y4t,"regnet"),Y4t.forEach(t),wZo=r(OSe," \u2014 "),Fz=n(OSe,"A",{href:!0});var K4t=s(Fz);AZo=r(K4t,"RegNetForImageClassification"),K4t.forEach(t),LZo=r(OSe," (RegNet model)"),OSe.forEach(t),yZo=i(Te),S5=n(Te,"LI",{});var VSe=s(S5);hue=n(VSe,"STRONG",{});var Z4t=s(hue);xZo=r(Z4t,"resnet"),Z4t.forEach(t),$Zo=r(VSe," \u2014 "),Tz=n(VSe,"A",{href:!0});var evt=s(Tz);kZo=r(evt,"ResNetForImageClassification"),evt.forEach(t),SZo=r(VSe," (ResNet model)"),VSe.forEach(t),RZo=i(Te),R5=n(Te,"LI",{});var XSe=s(R5);pue=n(XSe,"STRONG",{});var ovt=s(pue);PZo=r(ovt,"segformer"),ovt.forEach(t),BZo=r(XSe," \u2014 "),Mz=n(XSe,"A",{href:!0});var rvt=s(Mz);IZo=r(rvt,"SegformerForImageClassification"),rvt.forEach(t),NZo=r(XSe," (SegFormer model)"),XSe.forEach(t),qZo=i(Te),P5=n(Te,"LI",{});var zSe=s(P5);_ue=n(zSe,"STRONG",{});var tvt=s(_ue);jZo=r(tvt,"swin"),tvt.forEach(t),DZo=r(zSe," \u2014 "),Ez=n(zSe,"A",{href:!0});var avt=s(Ez);GZo=r(avt,"SwinForImageClassification"),avt.forEach(t),OZo=r(zSe," (Swin Transformer model)"),zSe.forEach(t),VZo=i(Te),B5=n(Te,"LI",{});var WSe=s(B5);uue=n(WSe,"STRONG",{});var nvt=s(uue);XZo=r(nvt,"van"),nvt.forEach(t),zZo=r(WSe," \u2014 "),Cz=n(WSe,"A",{href:!0});var svt=s(Cz);WZo=r(svt,"VanForImageClassification"),svt.forEach(t),QZo=r(WSe," (VAN model)"),WSe.forEach(t),HZo=i(Te),I5=n(Te,"LI",{});var QSe=s(I5);bue=n(QSe,"STRONG",{});var lvt=s(bue);UZo=r(lvt,"vit"),lvt.forEach(t),JZo=r(QSe," \u2014 "),wz=n(QSe,"A",{href:!0});var ivt=s(wz);YZo=r(ivt,"ViTForImageClassification"),ivt.forEach(t),KZo=r(QSe," (ViT model)"),QSe.forEach(t),Te.forEach(t),ZZo=i(ga),N5=n(ga,"P",{});var HSe=s(N5);eer=r(HSe,"The model is set in evaluation mode by default using "),vue=n(HSe,"CODE",{});var dvt=s(vue);oer=r(dvt,"model.eval()"),dvt.forEach(t),rer=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(HSe,"CODE",{});var cvt=s(Fue);ter=r(cvt,"model.train()"),cvt.forEach(t),HSe.forEach(t),aer=i(ga),T(q5.$$.fragment,ga),ga.forEach(t),el.forEach(t),FDe=i(f),dd=n(f,"H2",{class:!0});var COe=s(dd);j5=n(COe,"A",{id:!0,class:!0,href:!0});var fvt=s(j5);Tue=n(fvt,"SPAN",{});var mvt=s(Tue);T(yy.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),ner=i(COe),Mue=n(COe,"SPAN",{});var gvt=s(Mue);ser=r(gvt,"AutoModelForVision2Seq"),gvt.forEach(t),COe.forEach(t),TDe=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(xy.$$.fragment,ol),ler=i(ol),cd=n(ol,"P",{});var Ree=s(cd);ier=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Az=n(Ree,"A",{href:!0});var hvt=s(Az);der=r(hvt,"from_pretrained()"),hvt.forEach(t),cer=r(Ree," class method or the "),Lz=n(Ree,"A",{href:!0});var pvt=s(Lz);fer=r(pvt,"from_config()"),pvt.forEach(t),mer=r(Ree,` class
method.`),Ree.forEach(t),ger=i(ol),$y=n(ol,"P",{});var wOe=s($y);her=r(wOe,"This class cannot be instantiated directly using "),Eue=n(wOe,"CODE",{});var _vt=s(Eue);per=r(_vt,"__init__()"),_vt.forEach(t),_er=r(wOe," (throws an error)."),wOe.forEach(t),uer=i(ol),ut=n(ol,"DIV",{class:!0});var w6=s(ut);T(ky.$$.fragment,w6),ber=i(w6),Cue=n(w6,"P",{});var uvt=s(Cue);ver=r(uvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uvt.forEach(t),Fer=i(w6),fd=n(w6,"P",{});var Pee=s(fd);Ter=r(Pee,`Note:
Loading a model from its configuration file does `),wue=n(Pee,"STRONG",{});var bvt=s(wue);Mer=r(bvt,"not"),bvt.forEach(t),Eer=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Pee,"A",{href:!0});var vvt=s(yz);Cer=r(vvt,"from_pretrained()"),vvt.forEach(t),wer=r(Pee," to load the model weights."),Pee.forEach(t),Aer=i(w6),T(D5.$$.fragment,w6),w6.forEach(t),Ler=i(ol),io=n(ol,"DIV",{class:!0});var ha=s(io);T(Sy.$$.fragment,ha),yer=i(ha),Aue=n(ha,"P",{});var Fvt=s(Aue);xer=r(Fvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fvt.forEach(t),$er=i(ha),Ga=n(ha,"P",{});var A6=s(Ga);ker=r(A6,"The model class to instantiate is selected based on the "),Lue=n(A6,"CODE",{});var Tvt=s(Lue);Ser=r(Tvt,"model_type"),Tvt.forEach(t),Rer=r(A6,` property of the config object (either
passed as an argument or loaded from `),yue=n(A6,"CODE",{});var Mvt=s(yue);Per=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),Ber=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(A6,"CODE",{});var Evt=s(xue);Ier=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),Ner=r(A6,":"),A6.forEach(t),qer=i(ha),$ue=n(ha,"UL",{});var Cvt=s($ue);G5=n(Cvt,"LI",{});var USe=s(G5);kue=n(USe,"STRONG",{});var wvt=s(kue);jer=r(wvt,"vision-encoder-decoder"),wvt.forEach(t),Der=r(USe," \u2014 "),xz=n(USe,"A",{href:!0});var Avt=s(xz);Ger=r(Avt,"VisionEncoderDecoderModel"),Avt.forEach(t),Oer=r(USe," (Vision Encoder decoder model)"),USe.forEach(t),Cvt.forEach(t),Ver=i(ha),O5=n(ha,"P",{});var JSe=s(O5);Xer=r(JSe,"The model is set in evaluation mode by default using "),Sue=n(JSe,"CODE",{});var Lvt=s(Sue);zer=r(Lvt,"model.eval()"),Lvt.forEach(t),Wer=r(JSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(JSe,"CODE",{});var yvt=s(Rue);Qer=r(yvt,"model.train()"),yvt.forEach(t),JSe.forEach(t),Her=i(ha),T(V5.$$.fragment,ha),ha.forEach(t),ol.forEach(t),MDe=i(f),md=n(f,"H2",{class:!0});var AOe=s(md);X5=n(AOe,"A",{id:!0,class:!0,href:!0});var xvt=s(X5);Pue=n(xvt,"SPAN",{});var $vt=s(Pue);T(Ry.$$.fragment,$vt),$vt.forEach(t),xvt.forEach(t),Uer=i(AOe),Bue=n(AOe,"SPAN",{});var kvt=s(Bue);Jer=r(kvt,"AutoModelForAudioClassification"),kvt.forEach(t),AOe.forEach(t),EDe=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(Py.$$.fragment,rl),Yer=i(rl),gd=n(rl,"P",{});var Bee=s(gd);Ker=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$z=n(Bee,"A",{href:!0});var Svt=s($z);Zer=r(Svt,"from_pretrained()"),Svt.forEach(t),eor=r(Bee," class method or the "),kz=n(Bee,"A",{href:!0});var Rvt=s(kz);oor=r(Rvt,"from_config()"),Rvt.forEach(t),ror=r(Bee,` class
method.`),Bee.forEach(t),tor=i(rl),By=n(rl,"P",{});var LOe=s(By);aor=r(LOe,"This class cannot be instantiated directly using "),Iue=n(LOe,"CODE",{});var Pvt=s(Iue);nor=r(Pvt,"__init__()"),Pvt.forEach(t),sor=r(LOe," (throws an error)."),LOe.forEach(t),lor=i(rl),bt=n(rl,"DIV",{class:!0});var L6=s(bt);T(Iy.$$.fragment,L6),ior=i(L6),Nue=n(L6,"P",{});var Bvt=s(Nue);dor=r(Bvt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bvt.forEach(t),cor=i(L6),hd=n(L6,"P",{});var Iee=s(hd);mor=r(Iee,`Note:
Loading a model from its configuration file does `),que=n(Iee,"STRONG",{});var Ivt=s(que);gor=r(Ivt,"not"),Ivt.forEach(t),hor=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(Iee,"A",{href:!0});var Nvt=s(Sz);por=r(Nvt,"from_pretrained()"),Nvt.forEach(t),_or=r(Iee," to load the model weights."),Iee.forEach(t),uor=i(L6),T(z5.$$.fragment,L6),L6.forEach(t),bor=i(rl),co=n(rl,"DIV",{class:!0});var pa=s(co);T(Ny.$$.fragment,pa),vor=i(pa),jue=n(pa,"P",{});var qvt=s(jue);For=r(qvt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qvt.forEach(t),Tor=i(pa),Oa=n(pa,"P",{});var y6=s(Oa);Mor=r(y6,"The model class to instantiate is selected based on the "),Due=n(y6,"CODE",{});var jvt=s(Due);Eor=r(jvt,"model_type"),jvt.forEach(t),Cor=r(y6,` property of the config object (either
passed as an argument or loaded from `),Gue=n(y6,"CODE",{});var Dvt=s(Gue);wor=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Aor=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(y6,"CODE",{});var Gvt=s(Oue);Lor=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),yor=r(y6,":"),y6.forEach(t),xor=i(pa),Re=n(pa,"UL",{});var Xe=s(Re);W5=n(Xe,"LI",{});var YSe=s(W5);Vue=n(YSe,"STRONG",{});var Ovt=s(Vue);$or=r(Ovt,"data2vec-audio"),Ovt.forEach(t),kor=r(YSe," \u2014 "),Rz=n(YSe,"A",{href:!0});var Vvt=s(Rz);Sor=r(Vvt,"Data2VecAudioForSequenceClassification"),Vvt.forEach(t),Ror=r(YSe," (Data2VecAudio model)"),YSe.forEach(t),Por=i(Xe),Q5=n(Xe,"LI",{});var KSe=s(Q5);Xue=n(KSe,"STRONG",{});var Xvt=s(Xue);Bor=r(Xvt,"hubert"),Xvt.forEach(t),Ior=r(KSe," \u2014 "),Pz=n(KSe,"A",{href:!0});var zvt=s(Pz);Nor=r(zvt,"HubertForSequenceClassification"),zvt.forEach(t),qor=r(KSe," (Hubert model)"),KSe.forEach(t),jor=i(Xe),H5=n(Xe,"LI",{});var ZSe=s(H5);zue=n(ZSe,"STRONG",{});var Wvt=s(zue);Dor=r(Wvt,"sew"),Wvt.forEach(t),Gor=r(ZSe," \u2014 "),Bz=n(ZSe,"A",{href:!0});var Qvt=s(Bz);Oor=r(Qvt,"SEWForSequenceClassification"),Qvt.forEach(t),Vor=r(ZSe," (SEW model)"),ZSe.forEach(t),Xor=i(Xe),U5=n(Xe,"LI",{});var eRe=s(U5);Wue=n(eRe,"STRONG",{});var Hvt=s(Wue);zor=r(Hvt,"sew-d"),Hvt.forEach(t),Wor=r(eRe," \u2014 "),Iz=n(eRe,"A",{href:!0});var Uvt=s(Iz);Qor=r(Uvt,"SEWDForSequenceClassification"),Uvt.forEach(t),Hor=r(eRe," (SEW-D model)"),eRe.forEach(t),Uor=i(Xe),J5=n(Xe,"LI",{});var oRe=s(J5);Que=n(oRe,"STRONG",{});var Jvt=s(Que);Jor=r(Jvt,"unispeech"),Jvt.forEach(t),Yor=r(oRe," \u2014 "),Nz=n(oRe,"A",{href:!0});var Yvt=s(Nz);Kor=r(Yvt,"UniSpeechForSequenceClassification"),Yvt.forEach(t),Zor=r(oRe," (UniSpeech model)"),oRe.forEach(t),err=i(Xe),Y5=n(Xe,"LI",{});var rRe=s(Y5);Hue=n(rRe,"STRONG",{});var Kvt=s(Hue);orr=r(Kvt,"unispeech-sat"),Kvt.forEach(t),rrr=r(rRe," \u2014 "),qz=n(rRe,"A",{href:!0});var Zvt=s(qz);trr=r(Zvt,"UniSpeechSatForSequenceClassification"),Zvt.forEach(t),arr=r(rRe," (UniSpeechSat model)"),rRe.forEach(t),nrr=i(Xe),K5=n(Xe,"LI",{});var tRe=s(K5);Uue=n(tRe,"STRONG",{});var e5t=s(Uue);srr=r(e5t,"wav2vec2"),e5t.forEach(t),lrr=r(tRe," \u2014 "),jz=n(tRe,"A",{href:!0});var o5t=s(jz);irr=r(o5t,"Wav2Vec2ForSequenceClassification"),o5t.forEach(t),drr=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),crr=i(Xe),Z5=n(Xe,"LI",{});var aRe=s(Z5);Jue=n(aRe,"STRONG",{});var r5t=s(Jue);frr=r(r5t,"wav2vec2-conformer"),r5t.forEach(t),mrr=r(aRe," \u2014 "),Dz=n(aRe,"A",{href:!0});var t5t=s(Dz);grr=r(t5t,"Wav2Vec2ConformerForSequenceClassification"),t5t.forEach(t),hrr=r(aRe," (Wav2Vec2-Conformer model)"),aRe.forEach(t),prr=i(Xe),e3=n(Xe,"LI",{});var nRe=s(e3);Yue=n(nRe,"STRONG",{});var a5t=s(Yue);_rr=r(a5t,"wavlm"),a5t.forEach(t),urr=r(nRe," \u2014 "),Gz=n(nRe,"A",{href:!0});var n5t=s(Gz);brr=r(n5t,"WavLMForSequenceClassification"),n5t.forEach(t),vrr=r(nRe," (WavLM model)"),nRe.forEach(t),Xe.forEach(t),Frr=i(pa),o3=n(pa,"P",{});var sRe=s(o3);Trr=r(sRe,"The model is set in evaluation mode by default using "),Kue=n(sRe,"CODE",{});var s5t=s(Kue);Mrr=r(s5t,"model.eval()"),s5t.forEach(t),Err=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(sRe,"CODE",{});var l5t=s(Zue);Crr=r(l5t,"model.train()"),l5t.forEach(t),sRe.forEach(t),wrr=i(pa),T(r3.$$.fragment,pa),pa.forEach(t),rl.forEach(t),CDe=i(f),pd=n(f,"H2",{class:!0});var yOe=s(pd);t3=n(yOe,"A",{id:!0,class:!0,href:!0});var i5t=s(t3);e1e=n(i5t,"SPAN",{});var d5t=s(e1e);T(qy.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),Arr=i(yOe),o1e=n(yOe,"SPAN",{});var c5t=s(o1e);Lrr=r(c5t,"AutoModelForAudioFrameClassification"),c5t.forEach(t),yOe.forEach(t),wDe=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(jy.$$.fragment,tl),yrr=i(tl),_d=n(tl,"P",{});var Nee=s(_d);xrr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Oz=n(Nee,"A",{href:!0});var f5t=s(Oz);$rr=r(f5t,"from_pretrained()"),f5t.forEach(t),krr=r(Nee," class method or the "),Vz=n(Nee,"A",{href:!0});var m5t=s(Vz);Srr=r(m5t,"from_config()"),m5t.forEach(t),Rrr=r(Nee,` class
method.`),Nee.forEach(t),Prr=i(tl),Dy=n(tl,"P",{});var xOe=s(Dy);Brr=r(xOe,"This class cannot be instantiated directly using "),r1e=n(xOe,"CODE",{});var g5t=s(r1e);Irr=r(g5t,"__init__()"),g5t.forEach(t),Nrr=r(xOe," (throws an error)."),xOe.forEach(t),qrr=i(tl),vt=n(tl,"DIV",{class:!0});var x6=s(vt);T(Gy.$$.fragment,x6),jrr=i(x6),t1e=n(x6,"P",{});var h5t=s(t1e);Drr=r(h5t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),h5t.forEach(t),Grr=i(x6),ud=n(x6,"P",{});var qee=s(ud);Orr=r(qee,`Note:
Loading a model from its configuration file does `),a1e=n(qee,"STRONG",{});var p5t=s(a1e);Vrr=r(p5t,"not"),p5t.forEach(t),Xrr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(qee,"A",{href:!0});var _5t=s(Xz);zrr=r(_5t,"from_pretrained()"),_5t.forEach(t),Wrr=r(qee," to load the model weights."),qee.forEach(t),Qrr=i(x6),T(a3.$$.fragment,x6),x6.forEach(t),Hrr=i(tl),fo=n(tl,"DIV",{class:!0});var _a=s(fo);T(Oy.$$.fragment,_a),Urr=i(_a),n1e=n(_a,"P",{});var u5t=s(n1e);Jrr=r(u5t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),u5t.forEach(t),Yrr=i(_a),Va=n(_a,"P",{});var $6=s(Va);Krr=r($6,"The model class to instantiate is selected based on the "),s1e=n($6,"CODE",{});var b5t=s(s1e);Zrr=r(b5t,"model_type"),b5t.forEach(t),etr=r($6,` property of the config object (either
passed as an argument or loaded from `),l1e=n($6,"CODE",{});var v5t=s(l1e);otr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),rtr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n($6,"CODE",{});var F5t=s(i1e);ttr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),atr=r($6,":"),$6.forEach(t),ntr=i(_a),Kr=n(_a,"UL",{});var al=s(Kr);n3=n(al,"LI",{});var lRe=s(n3);d1e=n(lRe,"STRONG",{});var T5t=s(d1e);str=r(T5t,"data2vec-audio"),T5t.forEach(t),ltr=r(lRe," \u2014 "),zz=n(lRe,"A",{href:!0});var M5t=s(zz);itr=r(M5t,"Data2VecAudioForAudioFrameClassification"),M5t.forEach(t),dtr=r(lRe," (Data2VecAudio model)"),lRe.forEach(t),ctr=i(al),s3=n(al,"LI",{});var iRe=s(s3);c1e=n(iRe,"STRONG",{});var E5t=s(c1e);ftr=r(E5t,"unispeech-sat"),E5t.forEach(t),mtr=r(iRe," \u2014 "),Wz=n(iRe,"A",{href:!0});var C5t=s(Wz);gtr=r(C5t,"UniSpeechSatForAudioFrameClassification"),C5t.forEach(t),htr=r(iRe," (UniSpeechSat model)"),iRe.forEach(t),ptr=i(al),l3=n(al,"LI",{});var dRe=s(l3);f1e=n(dRe,"STRONG",{});var w5t=s(f1e);_tr=r(w5t,"wav2vec2"),w5t.forEach(t),utr=r(dRe," \u2014 "),Qz=n(dRe,"A",{href:!0});var A5t=s(Qz);btr=r(A5t,"Wav2Vec2ForAudioFrameClassification"),A5t.forEach(t),vtr=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),Ftr=i(al),i3=n(al,"LI",{});var cRe=s(i3);m1e=n(cRe,"STRONG",{});var L5t=s(m1e);Ttr=r(L5t,"wav2vec2-conformer"),L5t.forEach(t),Mtr=r(cRe," \u2014 "),Hz=n(cRe,"A",{href:!0});var y5t=s(Hz);Etr=r(y5t,"Wav2Vec2ConformerForAudioFrameClassification"),y5t.forEach(t),Ctr=r(cRe," (Wav2Vec2-Conformer model)"),cRe.forEach(t),wtr=i(al),d3=n(al,"LI",{});var fRe=s(d3);g1e=n(fRe,"STRONG",{});var x5t=s(g1e);Atr=r(x5t,"wavlm"),x5t.forEach(t),Ltr=r(fRe," \u2014 "),Uz=n(fRe,"A",{href:!0});var $5t=s(Uz);ytr=r($5t,"WavLMForAudioFrameClassification"),$5t.forEach(t),xtr=r(fRe," (WavLM model)"),fRe.forEach(t),al.forEach(t),$tr=i(_a),c3=n(_a,"P",{});var mRe=s(c3);ktr=r(mRe,"The model is set in evaluation mode by default using "),h1e=n(mRe,"CODE",{});var k5t=s(h1e);Str=r(k5t,"model.eval()"),k5t.forEach(t),Rtr=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(mRe,"CODE",{});var S5t=s(p1e);Ptr=r(S5t,"model.train()"),S5t.forEach(t),mRe.forEach(t),Btr=i(_a),T(f3.$$.fragment,_a),_a.forEach(t),tl.forEach(t),ADe=i(f),bd=n(f,"H2",{class:!0});var $Oe=s(bd);m3=n($Oe,"A",{id:!0,class:!0,href:!0});var R5t=s(m3);_1e=n(R5t,"SPAN",{});var P5t=s(_1e);T(Vy.$$.fragment,P5t),P5t.forEach(t),R5t.forEach(t),Itr=i($Oe),u1e=n($Oe,"SPAN",{});var B5t=s(u1e);Ntr=r(B5t,"AutoModelForCTC"),B5t.forEach(t),$Oe.forEach(t),LDe=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(Xy.$$.fragment,nl),qtr=i(nl),vd=n(nl,"P",{});var jee=s(vd);jtr=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jz=n(jee,"A",{href:!0});var I5t=s(Jz);Dtr=r(I5t,"from_pretrained()"),I5t.forEach(t),Gtr=r(jee," class method or the "),Yz=n(jee,"A",{href:!0});var N5t=s(Yz);Otr=r(N5t,"from_config()"),N5t.forEach(t),Vtr=r(jee,` class
method.`),jee.forEach(t),Xtr=i(nl),zy=n(nl,"P",{});var kOe=s(zy);ztr=r(kOe,"This class cannot be instantiated directly using "),b1e=n(kOe,"CODE",{});var q5t=s(b1e);Wtr=r(q5t,"__init__()"),q5t.forEach(t),Qtr=r(kOe," (throws an error)."),kOe.forEach(t),Htr=i(nl),Ft=n(nl,"DIV",{class:!0});var k6=s(Ft);T(Wy.$$.fragment,k6),Utr=i(k6),v1e=n(k6,"P",{});var j5t=s(v1e);Jtr=r(j5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),j5t.forEach(t),Ytr=i(k6),Fd=n(k6,"P",{});var Dee=s(Fd);Ktr=r(Dee,`Note:
Loading a model from its configuration file does `),F1e=n(Dee,"STRONG",{});var D5t=s(F1e);Ztr=r(D5t,"not"),D5t.forEach(t),ear=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(Dee,"A",{href:!0});var G5t=s(Kz);oar=r(G5t,"from_pretrained()"),G5t.forEach(t),rar=r(Dee," to load the model weights."),Dee.forEach(t),tar=i(k6),T(g3.$$.fragment,k6),k6.forEach(t),aar=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(Qy.$$.fragment,ua),nar=i(ua),T1e=n(ua,"P",{});var O5t=s(T1e);sar=r(O5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),O5t.forEach(t),lar=i(ua),Xa=n(ua,"P",{});var S6=s(Xa);iar=r(S6,"The model class to instantiate is selected based on the "),M1e=n(S6,"CODE",{});var V5t=s(M1e);dar=r(V5t,"model_type"),V5t.forEach(t),car=r(S6,` property of the config object (either
passed as an argument or loaded from `),E1e=n(S6,"CODE",{});var X5t=s(E1e);far=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),mar=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(S6,"CODE",{});var z5t=s(C1e);gar=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),har=r(S6,":"),S6.forEach(t),par=i(ua),Le=n(ua,"UL",{});var Be=s(Le);h3=n(Be,"LI",{});var gRe=s(h3);w1e=n(gRe,"STRONG",{});var W5t=s(w1e);_ar=r(W5t,"data2vec-audio"),W5t.forEach(t),uar=r(gRe," \u2014 "),Zz=n(gRe,"A",{href:!0});var Q5t=s(Zz);bar=r(Q5t,"Data2VecAudioForCTC"),Q5t.forEach(t),Far=r(gRe," (Data2VecAudio model)"),gRe.forEach(t),Tar=i(Be),p3=n(Be,"LI",{});var hRe=s(p3);A1e=n(hRe,"STRONG",{});var H5t=s(A1e);Mar=r(H5t,"hubert"),H5t.forEach(t),Ear=r(hRe," \u2014 "),eW=n(hRe,"A",{href:!0});var U5t=s(eW);Car=r(U5t,"HubertForCTC"),U5t.forEach(t),war=r(hRe," (Hubert model)"),hRe.forEach(t),Aar=i(Be),_3=n(Be,"LI",{});var pRe=s(_3);L1e=n(pRe,"STRONG",{});var J5t=s(L1e);Lar=r(J5t,"mctct"),J5t.forEach(t),yar=r(pRe," \u2014 "),oW=n(pRe,"A",{href:!0});var Y5t=s(oW);xar=r(Y5t,"MCTCTForCTC"),Y5t.forEach(t),$ar=r(pRe," (M-CTC-T model)"),pRe.forEach(t),kar=i(Be),u3=n(Be,"LI",{});var _Re=s(u3);y1e=n(_Re,"STRONG",{});var K5t=s(y1e);Sar=r(K5t,"sew"),K5t.forEach(t),Rar=r(_Re," \u2014 "),rW=n(_Re,"A",{href:!0});var Z5t=s(rW);Par=r(Z5t,"SEWForCTC"),Z5t.forEach(t),Bar=r(_Re," (SEW model)"),_Re.forEach(t),Iar=i(Be),b3=n(Be,"LI",{});var uRe=s(b3);x1e=n(uRe,"STRONG",{});var e3t=s(x1e);Nar=r(e3t,"sew-d"),e3t.forEach(t),qar=r(uRe," \u2014 "),tW=n(uRe,"A",{href:!0});var o3t=s(tW);jar=r(o3t,"SEWDForCTC"),o3t.forEach(t),Dar=r(uRe," (SEW-D model)"),uRe.forEach(t),Gar=i(Be),v3=n(Be,"LI",{});var bRe=s(v3);$1e=n(bRe,"STRONG",{});var r3t=s($1e);Oar=r(r3t,"unispeech"),r3t.forEach(t),Var=r(bRe," \u2014 "),aW=n(bRe,"A",{href:!0});var t3t=s(aW);Xar=r(t3t,"UniSpeechForCTC"),t3t.forEach(t),zar=r(bRe," (UniSpeech model)"),bRe.forEach(t),War=i(Be),F3=n(Be,"LI",{});var vRe=s(F3);k1e=n(vRe,"STRONG",{});var a3t=s(k1e);Qar=r(a3t,"unispeech-sat"),a3t.forEach(t),Har=r(vRe," \u2014 "),nW=n(vRe,"A",{href:!0});var n3t=s(nW);Uar=r(n3t,"UniSpeechSatForCTC"),n3t.forEach(t),Jar=r(vRe," (UniSpeechSat model)"),vRe.forEach(t),Yar=i(Be),T3=n(Be,"LI",{});var FRe=s(T3);S1e=n(FRe,"STRONG",{});var s3t=s(S1e);Kar=r(s3t,"wav2vec2"),s3t.forEach(t),Zar=r(FRe," \u2014 "),sW=n(FRe,"A",{href:!0});var l3t=s(sW);enr=r(l3t,"Wav2Vec2ForCTC"),l3t.forEach(t),onr=r(FRe," (Wav2Vec2 model)"),FRe.forEach(t),rnr=i(Be),M3=n(Be,"LI",{});var TRe=s(M3);R1e=n(TRe,"STRONG",{});var i3t=s(R1e);tnr=r(i3t,"wav2vec2-conformer"),i3t.forEach(t),anr=r(TRe," \u2014 "),lW=n(TRe,"A",{href:!0});var d3t=s(lW);nnr=r(d3t,"Wav2Vec2ConformerForCTC"),d3t.forEach(t),snr=r(TRe," (Wav2Vec2-Conformer model)"),TRe.forEach(t),lnr=i(Be),E3=n(Be,"LI",{});var MRe=s(E3);P1e=n(MRe,"STRONG",{});var c3t=s(P1e);inr=r(c3t,"wavlm"),c3t.forEach(t),dnr=r(MRe," \u2014 "),iW=n(MRe,"A",{href:!0});var f3t=s(iW);cnr=r(f3t,"WavLMForCTC"),f3t.forEach(t),fnr=r(MRe," (WavLM model)"),MRe.forEach(t),Be.forEach(t),mnr=i(ua),C3=n(ua,"P",{});var ERe=s(C3);gnr=r(ERe,"The model is set in evaluation mode by default using "),B1e=n(ERe,"CODE",{});var m3t=s(B1e);hnr=r(m3t,"model.eval()"),m3t.forEach(t),pnr=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(ERe,"CODE",{});var g3t=s(I1e);_nr=r(g3t,"model.train()"),g3t.forEach(t),ERe.forEach(t),unr=i(ua),T(w3.$$.fragment,ua),ua.forEach(t),nl.forEach(t),yDe=i(f),Td=n(f,"H2",{class:!0});var SOe=s(Td);A3=n(SOe,"A",{id:!0,class:!0,href:!0});var h3t=s(A3);N1e=n(h3t,"SPAN",{});var p3t=s(N1e);T(Hy.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),bnr=i(SOe),q1e=n(SOe,"SPAN",{});var _3t=s(q1e);vnr=r(_3t,"AutoModelForSpeechSeq2Seq"),_3t.forEach(t),SOe.forEach(t),xDe=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Uy.$$.fragment,sl),Fnr=i(sl),Md=n(sl,"P",{});var Gee=s(Md);Tnr=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dW=n(Gee,"A",{href:!0});var u3t=s(dW);Mnr=r(u3t,"from_pretrained()"),u3t.forEach(t),Enr=r(Gee," class method or the "),cW=n(Gee,"A",{href:!0});var b3t=s(cW);Cnr=r(b3t,"from_config()"),b3t.forEach(t),wnr=r(Gee,` class
method.`),Gee.forEach(t),Anr=i(sl),Jy=n(sl,"P",{});var ROe=s(Jy);Lnr=r(ROe,"This class cannot be instantiated directly using "),j1e=n(ROe,"CODE",{});var v3t=s(j1e);ynr=r(v3t,"__init__()"),v3t.forEach(t),xnr=r(ROe," (throws an error)."),ROe.forEach(t),$nr=i(sl),Tt=n(sl,"DIV",{class:!0});var R6=s(Tt);T(Yy.$$.fragment,R6),knr=i(R6),D1e=n(R6,"P",{});var F3t=s(D1e);Snr=r(F3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),F3t.forEach(t),Rnr=i(R6),Ed=n(R6,"P",{});var Oee=s(Ed);Pnr=r(Oee,`Note:
Loading a model from its configuration file does `),G1e=n(Oee,"STRONG",{});var T3t=s(G1e);Bnr=r(T3t,"not"),T3t.forEach(t),Inr=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Oee,"A",{href:!0});var M3t=s(fW);Nnr=r(M3t,"from_pretrained()"),M3t.forEach(t),qnr=r(Oee," to load the model weights."),Oee.forEach(t),jnr=i(R6),T(L3.$$.fragment,R6),R6.forEach(t),Dnr=i(sl),go=n(sl,"DIV",{class:!0});var ba=s(go);T(Ky.$$.fragment,ba),Gnr=i(ba),O1e=n(ba,"P",{});var E3t=s(O1e);Onr=r(E3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),E3t.forEach(t),Vnr=i(ba),za=n(ba,"P",{});var P6=s(za);Xnr=r(P6,"The model class to instantiate is selected based on the "),V1e=n(P6,"CODE",{});var C3t=s(V1e);znr=r(C3t,"model_type"),C3t.forEach(t),Wnr=r(P6,` property of the config object (either
passed as an argument or loaded from `),X1e=n(P6,"CODE",{});var w3t=s(X1e);Qnr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),Hnr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(P6,"CODE",{});var A3t=s(z1e);Unr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),Jnr=r(P6,":"),P6.forEach(t),Ynr=i(ba),Zy=n(ba,"UL",{});var POe=s(Zy);y3=n(POe,"LI",{});var CRe=s(y3);W1e=n(CRe,"STRONG",{});var L3t=s(W1e);Knr=r(L3t,"speech-encoder-decoder"),L3t.forEach(t),Znr=r(CRe," \u2014 "),mW=n(CRe,"A",{href:!0});var y3t=s(mW);esr=r(y3t,"SpeechEncoderDecoderModel"),y3t.forEach(t),osr=r(CRe," (Speech Encoder decoder model)"),CRe.forEach(t),rsr=i(POe),x3=n(POe,"LI",{});var wRe=s(x3);Q1e=n(wRe,"STRONG",{});var x3t=s(Q1e);tsr=r(x3t,"speech_to_text"),x3t.forEach(t),asr=r(wRe," \u2014 "),gW=n(wRe,"A",{href:!0});var $3t=s(gW);nsr=r($3t,"Speech2TextForConditionalGeneration"),$3t.forEach(t),ssr=r(wRe," (Speech2Text model)"),wRe.forEach(t),POe.forEach(t),lsr=i(ba),$3=n(ba,"P",{});var ARe=s($3);isr=r(ARe,"The model is set in evaluation mode by default using "),H1e=n(ARe,"CODE",{});var k3t=s(H1e);dsr=r(k3t,"model.eval()"),k3t.forEach(t),csr=r(ARe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=n(ARe,"CODE",{});var S3t=s(U1e);fsr=r(S3t,"model.train()"),S3t.forEach(t),ARe.forEach(t),msr=i(ba),T(k3.$$.fragment,ba),ba.forEach(t),sl.forEach(t),$De=i(f),Cd=n(f,"H2",{class:!0});var BOe=s(Cd);S3=n(BOe,"A",{id:!0,class:!0,href:!0});var R3t=s(S3);J1e=n(R3t,"SPAN",{});var P3t=s(J1e);T(e8.$$.fragment,P3t),P3t.forEach(t),R3t.forEach(t),gsr=i(BOe),Y1e=n(BOe,"SPAN",{});var B3t=s(Y1e);hsr=r(B3t,"AutoModelForAudioXVector"),B3t.forEach(t),BOe.forEach(t),kDe=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(o8.$$.fragment,ll),psr=i(ll),wd=n(ll,"P",{});var Vee=s(wd);_sr=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hW=n(Vee,"A",{href:!0});var I3t=s(hW);usr=r(I3t,"from_pretrained()"),I3t.forEach(t),bsr=r(Vee," class method or the "),pW=n(Vee,"A",{href:!0});var N3t=s(pW);vsr=r(N3t,"from_config()"),N3t.forEach(t),Fsr=r(Vee,` class
method.`),Vee.forEach(t),Tsr=i(ll),r8=n(ll,"P",{});var IOe=s(r8);Msr=r(IOe,"This class cannot be instantiated directly using "),K1e=n(IOe,"CODE",{});var q3t=s(K1e);Esr=r(q3t,"__init__()"),q3t.forEach(t),Csr=r(IOe," (throws an error)."),IOe.forEach(t),wsr=i(ll),Mt=n(ll,"DIV",{class:!0});var B6=s(Mt);T(t8.$$.fragment,B6),Asr=i(B6),Z1e=n(B6,"P",{});var j3t=s(Z1e);Lsr=r(j3t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),j3t.forEach(t),ysr=i(B6),Ad=n(B6,"P",{});var Xee=s(Ad);xsr=r(Xee,`Note:
Loading a model from its configuration file does `),ebe=n(Xee,"STRONG",{});var D3t=s(ebe);$sr=r(D3t,"not"),D3t.forEach(t),ksr=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(Xee,"A",{href:!0});var G3t=s(_W);Ssr=r(G3t,"from_pretrained()"),G3t.forEach(t),Rsr=r(Xee," to load the model weights."),Xee.forEach(t),Psr=i(B6),T(R3.$$.fragment,B6),B6.forEach(t),Bsr=i(ll),ho=n(ll,"DIV",{class:!0});var va=s(ho);T(a8.$$.fragment,va),Isr=i(va),obe=n(va,"P",{});var O3t=s(obe);Nsr=r(O3t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),O3t.forEach(t),qsr=i(va),Wa=n(va,"P",{});var I6=s(Wa);jsr=r(I6,"The model class to instantiate is selected based on the "),rbe=n(I6,"CODE",{});var V3t=s(rbe);Dsr=r(V3t,"model_type"),V3t.forEach(t),Gsr=r(I6,` property of the config object (either
passed as an argument or loaded from `),tbe=n(I6,"CODE",{});var X3t=s(tbe);Osr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Vsr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(I6,"CODE",{});var z3t=s(abe);Xsr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),zsr=r(I6,":"),I6.forEach(t),Wsr=i(va),Zr=n(va,"UL",{});var il=s(Zr);P3=n(il,"LI",{});var LRe=s(P3);nbe=n(LRe,"STRONG",{});var W3t=s(nbe);Qsr=r(W3t,"data2vec-audio"),W3t.forEach(t),Hsr=r(LRe," \u2014 "),uW=n(LRe,"A",{href:!0});var Q3t=s(uW);Usr=r(Q3t,"Data2VecAudioForXVector"),Q3t.forEach(t),Jsr=r(LRe," (Data2VecAudio model)"),LRe.forEach(t),Ysr=i(il),B3=n(il,"LI",{});var yRe=s(B3);sbe=n(yRe,"STRONG",{});var H3t=s(sbe);Ksr=r(H3t,"unispeech-sat"),H3t.forEach(t),Zsr=r(yRe," \u2014 "),bW=n(yRe,"A",{href:!0});var U3t=s(bW);elr=r(U3t,"UniSpeechSatForXVector"),U3t.forEach(t),olr=r(yRe," (UniSpeechSat model)"),yRe.forEach(t),rlr=i(il),I3=n(il,"LI",{});var xRe=s(I3);lbe=n(xRe,"STRONG",{});var J3t=s(lbe);tlr=r(J3t,"wav2vec2"),J3t.forEach(t),alr=r(xRe," \u2014 "),vW=n(xRe,"A",{href:!0});var Y3t=s(vW);nlr=r(Y3t,"Wav2Vec2ForXVector"),Y3t.forEach(t),slr=r(xRe," (Wav2Vec2 model)"),xRe.forEach(t),llr=i(il),N3=n(il,"LI",{});var $Re=s(N3);ibe=n($Re,"STRONG",{});var K3t=s(ibe);ilr=r(K3t,"wav2vec2-conformer"),K3t.forEach(t),dlr=r($Re," \u2014 "),FW=n($Re,"A",{href:!0});var Z3t=s(FW);clr=r(Z3t,"Wav2Vec2ConformerForXVector"),Z3t.forEach(t),flr=r($Re," (Wav2Vec2-Conformer model)"),$Re.forEach(t),mlr=i(il),q3=n(il,"LI",{});var kRe=s(q3);dbe=n(kRe,"STRONG",{});var eFt=s(dbe);glr=r(eFt,"wavlm"),eFt.forEach(t),hlr=r(kRe," \u2014 "),TW=n(kRe,"A",{href:!0});var oFt=s(TW);plr=r(oFt,"WavLMForXVector"),oFt.forEach(t),_lr=r(kRe," (WavLM model)"),kRe.forEach(t),il.forEach(t),ulr=i(va),j3=n(va,"P",{});var SRe=s(j3);blr=r(SRe,"The model is set in evaluation mode by default using "),cbe=n(SRe,"CODE",{});var rFt=s(cbe);vlr=r(rFt,"model.eval()"),rFt.forEach(t),Flr=r(SRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(SRe,"CODE",{});var tFt=s(fbe);Tlr=r(tFt,"model.train()"),tFt.forEach(t),SRe.forEach(t),Mlr=i(va),T(D3.$$.fragment,va),va.forEach(t),ll.forEach(t),SDe=i(f),Ld=n(f,"H2",{class:!0});var NOe=s(Ld);G3=n(NOe,"A",{id:!0,class:!0,href:!0});var aFt=s(G3);mbe=n(aFt,"SPAN",{});var nFt=s(mbe);T(n8.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),Elr=i(NOe),gbe=n(NOe,"SPAN",{});var sFt=s(gbe);Clr=r(sFt,"AutoModelForMaskedImageModeling"),sFt.forEach(t),NOe.forEach(t),RDe=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(s8.$$.fragment,dl),wlr=i(dl),yd=n(dl,"P",{});var zee=s(yd);Alr=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MW=n(zee,"A",{href:!0});var lFt=s(MW);Llr=r(lFt,"from_pretrained()"),lFt.forEach(t),ylr=r(zee," class method or the "),EW=n(zee,"A",{href:!0});var iFt=s(EW);xlr=r(iFt,"from_config()"),iFt.forEach(t),$lr=r(zee,` class
method.`),zee.forEach(t),klr=i(dl),l8=n(dl,"P",{});var qOe=s(l8);Slr=r(qOe,"This class cannot be instantiated directly using "),hbe=n(qOe,"CODE",{});var dFt=s(hbe);Rlr=r(dFt,"__init__()"),dFt.forEach(t),Plr=r(qOe," (throws an error)."),qOe.forEach(t),Blr=i(dl),Et=n(dl,"DIV",{class:!0});var N6=s(Et);T(i8.$$.fragment,N6),Ilr=i(N6),pbe=n(N6,"P",{});var cFt=s(pbe);Nlr=r(cFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cFt.forEach(t),qlr=i(N6),xd=n(N6,"P",{});var Wee=s(xd);jlr=r(Wee,`Note:
Loading a model from its configuration file does `),_be=n(Wee,"STRONG",{});var fFt=s(_be);Dlr=r(fFt,"not"),fFt.forEach(t),Glr=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(Wee,"A",{href:!0});var mFt=s(CW);Olr=r(mFt,"from_pretrained()"),mFt.forEach(t),Vlr=r(Wee," to load the model weights."),Wee.forEach(t),Xlr=i(N6),T(O3.$$.fragment,N6),N6.forEach(t),zlr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(d8.$$.fragment,Fa),Wlr=i(Fa),ube=n(Fa,"P",{});var gFt=s(ube);Qlr=r(gFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),gFt.forEach(t),Hlr=i(Fa),Qa=n(Fa,"P",{});var q6=s(Qa);Ulr=r(q6,"The model class to instantiate is selected based on the "),bbe=n(q6,"CODE",{});var hFt=s(bbe);Jlr=r(hFt,"model_type"),hFt.forEach(t),Ylr=r(q6,` property of the config object (either
passed as an argument or loaded from `),vbe=n(q6,"CODE",{});var pFt=s(vbe);Klr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),Zlr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(q6,"CODE",{});var _Ft=s(Fbe);eir=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),oir=r(q6,":"),q6.forEach(t),rir=i(Fa),$d=n(Fa,"UL",{});var Qee=s($d);V3=n(Qee,"LI",{});var RRe=s(V3);Tbe=n(RRe,"STRONG",{});var uFt=s(Tbe);tir=r(uFt,"deit"),uFt.forEach(t),air=r(RRe," \u2014 "),wW=n(RRe,"A",{href:!0});var bFt=s(wW);nir=r(bFt,"DeiTForMaskedImageModeling"),bFt.forEach(t),sir=r(RRe," (DeiT model)"),RRe.forEach(t),lir=i(Qee),X3=n(Qee,"LI",{});var PRe=s(X3);Mbe=n(PRe,"STRONG",{});var vFt=s(Mbe);iir=r(vFt,"swin"),vFt.forEach(t),dir=r(PRe," \u2014 "),AW=n(PRe,"A",{href:!0});var FFt=s(AW);cir=r(FFt,"SwinForMaskedImageModeling"),FFt.forEach(t),fir=r(PRe," (Swin Transformer model)"),PRe.forEach(t),mir=i(Qee),z3=n(Qee,"LI",{});var BRe=s(z3);Ebe=n(BRe,"STRONG",{});var TFt=s(Ebe);gir=r(TFt,"vit"),TFt.forEach(t),hir=r(BRe," \u2014 "),LW=n(BRe,"A",{href:!0});var MFt=s(LW);pir=r(MFt,"ViTForMaskedImageModeling"),MFt.forEach(t),_ir=r(BRe," (ViT model)"),BRe.forEach(t),Qee.forEach(t),uir=i(Fa),W3=n(Fa,"P",{});var IRe=s(W3);bir=r(IRe,"The model is set in evaluation mode by default using "),Cbe=n(IRe,"CODE",{});var EFt=s(Cbe);vir=r(EFt,"model.eval()"),EFt.forEach(t),Fir=r(IRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=n(IRe,"CODE",{});var CFt=s(wbe);Tir=r(CFt,"model.train()"),CFt.forEach(t),IRe.forEach(t),Mir=i(Fa),T(Q3.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),PDe=i(f),kd=n(f,"H2",{class:!0});var jOe=s(kd);H3=n(jOe,"A",{id:!0,class:!0,href:!0});var wFt=s(H3);Abe=n(wFt,"SPAN",{});var AFt=s(Abe);T(c8.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),Eir=i(jOe),Lbe=n(jOe,"SPAN",{});var LFt=s(Lbe);Cir=r(LFt,"AutoModelForObjectDetection"),LFt.forEach(t),jOe.forEach(t),BDe=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(f8.$$.fragment,cl),wir=i(cl),Sd=n(cl,"P",{});var Hee=s(Sd);Air=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yW=n(Hee,"A",{href:!0});var yFt=s(yW);Lir=r(yFt,"from_pretrained()"),yFt.forEach(t),yir=r(Hee," class method or the "),xW=n(Hee,"A",{href:!0});var xFt=s(xW);xir=r(xFt,"from_config()"),xFt.forEach(t),$ir=r(Hee,` class
method.`),Hee.forEach(t),kir=i(cl),m8=n(cl,"P",{});var DOe=s(m8);Sir=r(DOe,"This class cannot be instantiated directly using "),ybe=n(DOe,"CODE",{});var $Ft=s(ybe);Rir=r($Ft,"__init__()"),$Ft.forEach(t),Pir=r(DOe," (throws an error)."),DOe.forEach(t),Bir=i(cl),Ct=n(cl,"DIV",{class:!0});var j6=s(Ct);T(g8.$$.fragment,j6),Iir=i(j6),xbe=n(j6,"P",{});var kFt=s(xbe);Nir=r(kFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kFt.forEach(t),qir=i(j6),Rd=n(j6,"P",{});var Uee=s(Rd);jir=r(Uee,`Note:
Loading a model from its configuration file does `),$be=n(Uee,"STRONG",{});var SFt=s($be);Dir=r(SFt,"not"),SFt.forEach(t),Gir=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Uee,"A",{href:!0});var RFt=s($W);Oir=r(RFt,"from_pretrained()"),RFt.forEach(t),Vir=r(Uee," to load the model weights."),Uee.forEach(t),Xir=i(j6),T(U3.$$.fragment,j6),j6.forEach(t),zir=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(h8.$$.fragment,Ta),Wir=i(Ta),kbe=n(Ta,"P",{});var PFt=s(kbe);Qir=r(PFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PFt.forEach(t),Hir=i(Ta),Ha=n(Ta,"P",{});var D6=s(Ha);Uir=r(D6,"The model class to instantiate is selected based on the "),Sbe=n(D6,"CODE",{});var BFt=s(Sbe);Jir=r(BFt,"model_type"),BFt.forEach(t),Yir=r(D6,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(D6,"CODE",{});var IFt=s(Rbe);Kir=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),Zir=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(D6,"CODE",{});var NFt=s(Pbe);edr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),odr=r(D6,":"),D6.forEach(t),rdr=i(Ta),p8=n(Ta,"UL",{});var GOe=s(p8);J3=n(GOe,"LI",{});var NRe=s(J3);Bbe=n(NRe,"STRONG",{});var qFt=s(Bbe);tdr=r(qFt,"detr"),qFt.forEach(t),adr=r(NRe," \u2014 "),kW=n(NRe,"A",{href:!0});var jFt=s(kW);ndr=r(jFt,"DetrForObjectDetection"),jFt.forEach(t),sdr=r(NRe," (DETR model)"),NRe.forEach(t),ldr=i(GOe),Y3=n(GOe,"LI",{});var qRe=s(Y3);Ibe=n(qRe,"STRONG",{});var DFt=s(Ibe);idr=r(DFt,"yolos"),DFt.forEach(t),ddr=r(qRe," \u2014 "),SW=n(qRe,"A",{href:!0});var GFt=s(SW);cdr=r(GFt,"YolosForObjectDetection"),GFt.forEach(t),fdr=r(qRe," (YOLOS model)"),qRe.forEach(t),GOe.forEach(t),mdr=i(Ta),K3=n(Ta,"P",{});var jRe=s(K3);gdr=r(jRe,"The model is set in evaluation mode by default using "),Nbe=n(jRe,"CODE",{});var OFt=s(Nbe);hdr=r(OFt,"model.eval()"),OFt.forEach(t),pdr=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(jRe,"CODE",{});var VFt=s(qbe);_dr=r(VFt,"model.train()"),VFt.forEach(t),jRe.forEach(t),udr=i(Ta),T(Z3.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),IDe=i(f),Pd=n(f,"H2",{class:!0});var OOe=s(Pd);eF=n(OOe,"A",{id:!0,class:!0,href:!0});var XFt=s(eF);jbe=n(XFt,"SPAN",{});var zFt=s(jbe);T(_8.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),bdr=i(OOe),Dbe=n(OOe,"SPAN",{});var WFt=s(Dbe);vdr=r(WFt,"AutoModelForImageSegmentation"),WFt.forEach(t),OOe.forEach(t),NDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(u8.$$.fragment,fl),Fdr=i(fl),Bd=n(fl,"P",{});var Jee=s(Bd);Tdr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RW=n(Jee,"A",{href:!0});var QFt=s(RW);Mdr=r(QFt,"from_pretrained()"),QFt.forEach(t),Edr=r(Jee," class method or the "),PW=n(Jee,"A",{href:!0});var HFt=s(PW);Cdr=r(HFt,"from_config()"),HFt.forEach(t),wdr=r(Jee,` class
method.`),Jee.forEach(t),Adr=i(fl),b8=n(fl,"P",{});var VOe=s(b8);Ldr=r(VOe,"This class cannot be instantiated directly using "),Gbe=n(VOe,"CODE",{});var UFt=s(Gbe);ydr=r(UFt,"__init__()"),UFt.forEach(t),xdr=r(VOe," (throws an error)."),VOe.forEach(t),$dr=i(fl),wt=n(fl,"DIV",{class:!0});var G6=s(wt);T(v8.$$.fragment,G6),kdr=i(G6),Obe=n(G6,"P",{});var JFt=s(Obe);Sdr=r(JFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JFt.forEach(t),Rdr=i(G6),Id=n(G6,"P",{});var Yee=s(Id);Pdr=r(Yee,`Note:
Loading a model from its configuration file does `),Vbe=n(Yee,"STRONG",{});var YFt=s(Vbe);Bdr=r(YFt,"not"),YFt.forEach(t),Idr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Yee,"A",{href:!0});var KFt=s(BW);Ndr=r(KFt,"from_pretrained()"),KFt.forEach(t),qdr=r(Yee," to load the model weights."),Yee.forEach(t),jdr=i(G6),T(oF.$$.fragment,G6),G6.forEach(t),Ddr=i(fl),uo=n(fl,"DIV",{class:!0});var Ma=s(uo);T(F8.$$.fragment,Ma),Gdr=i(Ma),Xbe=n(Ma,"P",{});var ZFt=s(Xbe);Odr=r(ZFt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ZFt.forEach(t),Vdr=i(Ma),Ua=n(Ma,"P",{});var O6=s(Ua);Xdr=r(O6,"The model class to instantiate is selected based on the "),zbe=n(O6,"CODE",{});var eTt=s(zbe);zdr=r(eTt,"model_type"),eTt.forEach(t),Wdr=r(O6,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(O6,"CODE",{});var oTt=s(Wbe);Qdr=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),Hdr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(O6,"CODE",{});var rTt=s(Qbe);Udr=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),Jdr=r(O6,":"),O6.forEach(t),Ydr=i(Ma),Hbe=n(Ma,"UL",{});var tTt=s(Hbe);rF=n(tTt,"LI",{});var DRe=s(rF);Ube=n(DRe,"STRONG",{});var aTt=s(Ube);Kdr=r(aTt,"detr"),aTt.forEach(t),Zdr=r(DRe," \u2014 "),IW=n(DRe,"A",{href:!0});var nTt=s(IW);ecr=r(nTt,"DetrForSegmentation"),nTt.forEach(t),ocr=r(DRe," (DETR model)"),DRe.forEach(t),tTt.forEach(t),rcr=i(Ma),tF=n(Ma,"P",{});var GRe=s(tF);tcr=r(GRe,"The model is set in evaluation mode by default using "),Jbe=n(GRe,"CODE",{});var sTt=s(Jbe);acr=r(sTt,"model.eval()"),sTt.forEach(t),ncr=r(GRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(GRe,"CODE",{});var lTt=s(Ybe);scr=r(lTt,"model.train()"),lTt.forEach(t),GRe.forEach(t),lcr=i(Ma),T(aF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),qDe=i(f),Nd=n(f,"H2",{class:!0});var XOe=s(Nd);nF=n(XOe,"A",{id:!0,class:!0,href:!0});var iTt=s(nF);Kbe=n(iTt,"SPAN",{});var dTt=s(Kbe);T(T8.$$.fragment,dTt),dTt.forEach(t),iTt.forEach(t),icr=i(XOe),Zbe=n(XOe,"SPAN",{});var cTt=s(Zbe);dcr=r(cTt,"AutoModelForSemanticSegmentation"),cTt.forEach(t),XOe.forEach(t),jDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(M8.$$.fragment,ml),ccr=i(ml),qd=n(ml,"P",{});var Kee=s(qd);fcr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NW=n(Kee,"A",{href:!0});var fTt=s(NW);mcr=r(fTt,"from_pretrained()"),fTt.forEach(t),gcr=r(Kee," class method or the "),qW=n(Kee,"A",{href:!0});var mTt=s(qW);hcr=r(mTt,"from_config()"),mTt.forEach(t),pcr=r(Kee,` class
method.`),Kee.forEach(t),_cr=i(ml),E8=n(ml,"P",{});var zOe=s(E8);ucr=r(zOe,"This class cannot be instantiated directly using "),e2e=n(zOe,"CODE",{});var gTt=s(e2e);bcr=r(gTt,"__init__()"),gTt.forEach(t),vcr=r(zOe," (throws an error)."),zOe.forEach(t),Fcr=i(ml),At=n(ml,"DIV",{class:!0});var V6=s(At);T(C8.$$.fragment,V6),Tcr=i(V6),o2e=n(V6,"P",{});var hTt=s(o2e);Mcr=r(hTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hTt.forEach(t),Ecr=i(V6),jd=n(V6,"P",{});var Zee=s(jd);Ccr=r(Zee,`Note:
Loading a model from its configuration file does `),r2e=n(Zee,"STRONG",{});var pTt=s(r2e);wcr=r(pTt,"not"),pTt.forEach(t),Acr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Zee,"A",{href:!0});var _Tt=s(jW);Lcr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),ycr=r(Zee," to load the model weights."),Zee.forEach(t),xcr=i(V6),T(sF.$$.fragment,V6),V6.forEach(t),$cr=i(ml),bo=n(ml,"DIV",{class:!0});var Ea=s(bo);T(w8.$$.fragment,Ea),kcr=i(Ea),t2e=n(Ea,"P",{});var uTt=s(t2e);Scr=r(uTt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uTt.forEach(t),Rcr=i(Ea),Ja=n(Ea,"P",{});var X6=s(Ja);Pcr=r(X6,"The model class to instantiate is selected based on the "),a2e=n(X6,"CODE",{});var bTt=s(a2e);Bcr=r(bTt,"model_type"),bTt.forEach(t),Icr=r(X6,` property of the config object (either
passed as an argument or loaded from `),n2e=n(X6,"CODE",{});var vTt=s(n2e);Ncr=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),qcr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(X6,"CODE",{});var FTt=s(s2e);jcr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),Dcr=r(X6,":"),X6.forEach(t),Gcr=i(Ea),et=n(Ea,"UL",{});var gl=s(et);lF=n(gl,"LI",{});var ORe=s(lF);l2e=n(ORe,"STRONG",{});var TTt=s(l2e);Ocr=r(TTt,"beit"),TTt.forEach(t),Vcr=r(ORe," \u2014 "),DW=n(ORe,"A",{href:!0});var MTt=s(DW);Xcr=r(MTt,"BeitForSemanticSegmentation"),MTt.forEach(t),zcr=r(ORe," (BEiT model)"),ORe.forEach(t),Wcr=i(gl),iF=n(gl,"LI",{});var VRe=s(iF);i2e=n(VRe,"STRONG",{});var ETt=s(i2e);Qcr=r(ETt,"data2vec-vision"),ETt.forEach(t),Hcr=r(VRe," \u2014 "),GW=n(VRe,"A",{href:!0});var CTt=s(GW);Ucr=r(CTt,"Data2VecVisionForSemanticSegmentation"),CTt.forEach(t),Jcr=r(VRe," (Data2VecVision model)"),VRe.forEach(t),Ycr=i(gl),dF=n(gl,"LI",{});var XRe=s(dF);d2e=n(XRe,"STRONG",{});var wTt=s(d2e);Kcr=r(wTt,"dpt"),wTt.forEach(t),Zcr=r(XRe," \u2014 "),OW=n(XRe,"A",{href:!0});var ATt=s(OW);efr=r(ATt,"DPTForSemanticSegmentation"),ATt.forEach(t),ofr=r(XRe," (DPT model)"),XRe.forEach(t),rfr=i(gl),cF=n(gl,"LI",{});var zRe=s(cF);c2e=n(zRe,"STRONG",{});var LTt=s(c2e);tfr=r(LTt,"mobilevit"),LTt.forEach(t),afr=r(zRe," \u2014 "),VW=n(zRe,"A",{href:!0});var yTt=s(VW);nfr=r(yTt,"MobileViTForSemanticSegmentation"),yTt.forEach(t),sfr=r(zRe," (MobileViT model)"),zRe.forEach(t),lfr=i(gl),fF=n(gl,"LI",{});var WRe=s(fF);f2e=n(WRe,"STRONG",{});var xTt=s(f2e);ifr=r(xTt,"segformer"),xTt.forEach(t),dfr=r(WRe," \u2014 "),XW=n(WRe,"A",{href:!0});var $Tt=s(XW);cfr=r($Tt,"SegformerForSemanticSegmentation"),$Tt.forEach(t),ffr=r(WRe," (SegFormer model)"),WRe.forEach(t),gl.forEach(t),mfr=i(Ea),mF=n(Ea,"P",{});var QRe=s(mF);gfr=r(QRe,"The model is set in evaluation mode by default using "),m2e=n(QRe,"CODE",{});var kTt=s(m2e);hfr=r(kTt,"model.eval()"),kTt.forEach(t),pfr=r(QRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(QRe,"CODE",{});var STt=s(g2e);_fr=r(STt,"model.train()"),STt.forEach(t),QRe.forEach(t),ufr=i(Ea),T(gF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),DDe=i(f),Dd=n(f,"H2",{class:!0});var WOe=s(Dd);hF=n(WOe,"A",{id:!0,class:!0,href:!0});var RTt=s(hF);h2e=n(RTt,"SPAN",{});var PTt=s(h2e);T(A8.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),bfr=i(WOe),p2e=n(WOe,"SPAN",{});var BTt=s(p2e);vfr=r(BTt,"AutoModelForInstanceSegmentation"),BTt.forEach(t),WOe.forEach(t),GDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(L8.$$.fragment,hl),Ffr=i(hl),Gd=n(hl,"P",{});var eoe=s(Gd);Tfr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zW=n(eoe,"A",{href:!0});var ITt=s(zW);Mfr=r(ITt,"from_pretrained()"),ITt.forEach(t),Efr=r(eoe," class method or the "),WW=n(eoe,"A",{href:!0});var NTt=s(WW);Cfr=r(NTt,"from_config()"),NTt.forEach(t),wfr=r(eoe,` class
method.`),eoe.forEach(t),Afr=i(hl),y8=n(hl,"P",{});var QOe=s(y8);Lfr=r(QOe,"This class cannot be instantiated directly using "),_2e=n(QOe,"CODE",{});var qTt=s(_2e);yfr=r(qTt,"__init__()"),qTt.forEach(t),xfr=r(QOe," (throws an error)."),QOe.forEach(t),$fr=i(hl),Lt=n(hl,"DIV",{class:!0});var z6=s(Lt);T(x8.$$.fragment,z6),kfr=i(z6),u2e=n(z6,"P",{});var jTt=s(u2e);Sfr=r(jTt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jTt.forEach(t),Rfr=i(z6),Od=n(z6,"P",{});var ooe=s(Od);Pfr=r(ooe,`Note:
Loading a model from its configuration file does `),b2e=n(ooe,"STRONG",{});var DTt=s(b2e);Bfr=r(DTt,"not"),DTt.forEach(t),Ifr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(ooe,"A",{href:!0});var GTt=s(QW);Nfr=r(GTt,"from_pretrained()"),GTt.forEach(t),qfr=r(ooe," to load the model weights."),ooe.forEach(t),jfr=i(z6),T(pF.$$.fragment,z6),z6.forEach(t),Dfr=i(hl),vo=n(hl,"DIV",{class:!0});var Ca=s(vo);T($8.$$.fragment,Ca),Gfr=i(Ca),v2e=n(Ca,"P",{});var OTt=s(v2e);Ofr=r(OTt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),OTt.forEach(t),Vfr=i(Ca),Ya=n(Ca,"P",{});var W6=s(Ya);Xfr=r(W6,"The model class to instantiate is selected based on the "),F2e=n(W6,"CODE",{});var VTt=s(F2e);zfr=r(VTt,"model_type"),VTt.forEach(t),Wfr=r(W6,` property of the config object (either
passed as an argument or loaded from `),T2e=n(W6,"CODE",{});var XTt=s(T2e);Qfr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),Hfr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(W6,"CODE",{});var zTt=s(M2e);Ufr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),Jfr=r(W6,":"),W6.forEach(t),Yfr=i(Ca),E2e=n(Ca,"UL",{});var WTt=s(E2e);_F=n(WTt,"LI",{});var HRe=s(_F);C2e=n(HRe,"STRONG",{});var QTt=s(C2e);Kfr=r(QTt,"maskformer"),QTt.forEach(t),Zfr=r(HRe," \u2014 "),HW=n(HRe,"A",{href:!0});var HTt=s(HW);emr=r(HTt,"MaskFormerForInstanceSegmentation"),HTt.forEach(t),omr=r(HRe," (MaskFormer model)"),HRe.forEach(t),WTt.forEach(t),rmr=i(Ca),uF=n(Ca,"P",{});var URe=s(uF);tmr=r(URe,"The model is set in evaluation mode by default using "),w2e=n(URe,"CODE",{});var UTt=s(w2e);amr=r(UTt,"model.eval()"),UTt.forEach(t),nmr=r(URe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(URe,"CODE",{});var JTt=s(A2e);smr=r(JTt,"model.train()"),JTt.forEach(t),URe.forEach(t),lmr=i(Ca),T(bF.$$.fragment,Ca),Ca.forEach(t),hl.forEach(t),ODe=i(f),Vd=n(f,"H2",{class:!0});var HOe=s(Vd);vF=n(HOe,"A",{id:!0,class:!0,href:!0});var YTt=s(vF);L2e=n(YTt,"SPAN",{});var KTt=s(L2e);T(k8.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),imr=i(HOe),y2e=n(HOe,"SPAN",{});var ZTt=s(y2e);dmr=r(ZTt,"TFAutoModel"),ZTt.forEach(t),HOe.forEach(t),VDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(S8.$$.fragment,pl),cmr=i(pl),Xd=n(pl,"P",{});var roe=s(Xd);fmr=r(roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UW=n(roe,"A",{href:!0});var e7t=s(UW);mmr=r(e7t,"from_pretrained()"),e7t.forEach(t),gmr=r(roe," class method or the "),JW=n(roe,"A",{href:!0});var o7t=s(JW);hmr=r(o7t,"from_config()"),o7t.forEach(t),pmr=r(roe,` class
method.`),roe.forEach(t),_mr=i(pl),R8=n(pl,"P",{});var UOe=s(R8);umr=r(UOe,"This class cannot be instantiated directly using "),x2e=n(UOe,"CODE",{});var r7t=s(x2e);bmr=r(r7t,"__init__()"),r7t.forEach(t),vmr=r(UOe," (throws an error)."),UOe.forEach(t),Fmr=i(pl),yt=n(pl,"DIV",{class:!0});var Q6=s(yt);T(P8.$$.fragment,Q6),Tmr=i(Q6),$2e=n(Q6,"P",{});var t7t=s($2e);Mmr=r(t7t,"Instantiates one of the base model classes of the library from a configuration."),t7t.forEach(t),Emr=i(Q6),zd=n(Q6,"P",{});var toe=s(zd);Cmr=r(toe,`Note:
Loading a model from its configuration file does `),k2e=n(toe,"STRONG",{});var a7t=s(k2e);wmr=r(a7t,"not"),a7t.forEach(t),Amr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(toe,"A",{href:!0});var n7t=s(YW);Lmr=r(n7t,"from_pretrained()"),n7t.forEach(t),ymr=r(toe," to load the model weights."),toe.forEach(t),xmr=i(Q6),T(FF.$$.fragment,Q6),Q6.forEach(t),$mr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(B8.$$.fragment,_l),kmr=i(_l),S2e=n(_l,"P",{});var s7t=s(S2e);Smr=r(s7t,"Instantiate one of the base model classes of the library from a pretrained model."),s7t.forEach(t),Rmr=i(_l),Ka=n(_l,"P",{});var H6=s(Ka);Pmr=r(H6,"The model class to instantiate is selected based on the "),R2e=n(H6,"CODE",{});var l7t=s(R2e);Bmr=r(l7t,"model_type"),l7t.forEach(t),Imr=r(H6,` property of the config object (either
passed as an argument or loaded from `),P2e=n(H6,"CODE",{});var i7t=s(P2e);Nmr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),qmr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(H6,"CODE",{});var d7t=s(B2e);jmr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),Dmr=r(H6,":"),H6.forEach(t),Gmr=i(_l),q=n(_l,"UL",{});var D=s(q);TF=n(D,"LI",{});var JRe=s(TF);I2e=n(JRe,"STRONG",{});var c7t=s(I2e);Omr=r(c7t,"albert"),c7t.forEach(t),Vmr=r(JRe," \u2014 "),KW=n(JRe,"A",{href:!0});var f7t=s(KW);Xmr=r(f7t,"TFAlbertModel"),f7t.forEach(t),zmr=r(JRe," (ALBERT model)"),JRe.forEach(t),Wmr=i(D),MF=n(D,"LI",{});var YRe=s(MF);N2e=n(YRe,"STRONG",{});var m7t=s(N2e);Qmr=r(m7t,"bart"),m7t.forEach(t),Hmr=r(YRe," \u2014 "),ZW=n(YRe,"A",{href:!0});var g7t=s(ZW);Umr=r(g7t,"TFBartModel"),g7t.forEach(t),Jmr=r(YRe," (BART model)"),YRe.forEach(t),Ymr=i(D),EF=n(D,"LI",{});var KRe=s(EF);q2e=n(KRe,"STRONG",{});var h7t=s(q2e);Kmr=r(h7t,"bert"),h7t.forEach(t),Zmr=r(KRe," \u2014 "),eQ=n(KRe,"A",{href:!0});var p7t=s(eQ);egr=r(p7t,"TFBertModel"),p7t.forEach(t),ogr=r(KRe," (BERT model)"),KRe.forEach(t),rgr=i(D),CF=n(D,"LI",{});var ZRe=s(CF);j2e=n(ZRe,"STRONG",{});var _7t=s(j2e);tgr=r(_7t,"blenderbot"),_7t.forEach(t),agr=r(ZRe," \u2014 "),oQ=n(ZRe,"A",{href:!0});var u7t=s(oQ);ngr=r(u7t,"TFBlenderbotModel"),u7t.forEach(t),sgr=r(ZRe," (Blenderbot model)"),ZRe.forEach(t),lgr=i(D),wF=n(D,"LI",{});var ePe=s(wF);D2e=n(ePe,"STRONG",{});var b7t=s(D2e);igr=r(b7t,"blenderbot-small"),b7t.forEach(t),dgr=r(ePe," \u2014 "),rQ=n(ePe,"A",{href:!0});var v7t=s(rQ);cgr=r(v7t,"TFBlenderbotSmallModel"),v7t.forEach(t),fgr=r(ePe," (BlenderbotSmall model)"),ePe.forEach(t),mgr=i(D),AF=n(D,"LI",{});var oPe=s(AF);G2e=n(oPe,"STRONG",{});var F7t=s(G2e);ggr=r(F7t,"camembert"),F7t.forEach(t),hgr=r(oPe," \u2014 "),tQ=n(oPe,"A",{href:!0});var T7t=s(tQ);pgr=r(T7t,"TFCamembertModel"),T7t.forEach(t),_gr=r(oPe," (CamemBERT model)"),oPe.forEach(t),ugr=i(D),LF=n(D,"LI",{});var rPe=s(LF);O2e=n(rPe,"STRONG",{});var M7t=s(O2e);bgr=r(M7t,"clip"),M7t.forEach(t),vgr=r(rPe," \u2014 "),aQ=n(rPe,"A",{href:!0});var E7t=s(aQ);Fgr=r(E7t,"TFCLIPModel"),E7t.forEach(t),Tgr=r(rPe," (CLIP model)"),rPe.forEach(t),Mgr=i(D),yF=n(D,"LI",{});var tPe=s(yF);V2e=n(tPe,"STRONG",{});var C7t=s(V2e);Egr=r(C7t,"convbert"),C7t.forEach(t),Cgr=r(tPe," \u2014 "),nQ=n(tPe,"A",{href:!0});var w7t=s(nQ);wgr=r(w7t,"TFConvBertModel"),w7t.forEach(t),Agr=r(tPe," (ConvBERT model)"),tPe.forEach(t),Lgr=i(D),xF=n(D,"LI",{});var aPe=s(xF);X2e=n(aPe,"STRONG",{});var A7t=s(X2e);ygr=r(A7t,"convnext"),A7t.forEach(t),xgr=r(aPe," \u2014 "),sQ=n(aPe,"A",{href:!0});var L7t=s(sQ);$gr=r(L7t,"TFConvNextModel"),L7t.forEach(t),kgr=r(aPe," (ConvNeXT model)"),aPe.forEach(t),Sgr=i(D),$F=n(D,"LI",{});var nPe=s($F);z2e=n(nPe,"STRONG",{});var y7t=s(z2e);Rgr=r(y7t,"ctrl"),y7t.forEach(t),Pgr=r(nPe," \u2014 "),lQ=n(nPe,"A",{href:!0});var x7t=s(lQ);Bgr=r(x7t,"TFCTRLModel"),x7t.forEach(t),Igr=r(nPe," (CTRL model)"),nPe.forEach(t),Ngr=i(D),kF=n(D,"LI",{});var sPe=s(kF);W2e=n(sPe,"STRONG",{});var $7t=s(W2e);qgr=r($7t,"data2vec-vision"),$7t.forEach(t),jgr=r(sPe," \u2014 "),iQ=n(sPe,"A",{href:!0});var k7t=s(iQ);Dgr=r(k7t,"TFData2VecVisionModel"),k7t.forEach(t),Ggr=r(sPe," (Data2VecVision model)"),sPe.forEach(t),Ogr=i(D),SF=n(D,"LI",{});var lPe=s(SF);Q2e=n(lPe,"STRONG",{});var S7t=s(Q2e);Vgr=r(S7t,"deberta"),S7t.forEach(t),Xgr=r(lPe," \u2014 "),dQ=n(lPe,"A",{href:!0});var R7t=s(dQ);zgr=r(R7t,"TFDebertaModel"),R7t.forEach(t),Wgr=r(lPe," (DeBERTa model)"),lPe.forEach(t),Qgr=i(D),RF=n(D,"LI",{});var iPe=s(RF);H2e=n(iPe,"STRONG",{});var P7t=s(H2e);Hgr=r(P7t,"deberta-v2"),P7t.forEach(t),Ugr=r(iPe," \u2014 "),cQ=n(iPe,"A",{href:!0});var B7t=s(cQ);Jgr=r(B7t,"TFDebertaV2Model"),B7t.forEach(t),Ygr=r(iPe," (DeBERTa-v2 model)"),iPe.forEach(t),Kgr=i(D),PF=n(D,"LI",{});var dPe=s(PF);U2e=n(dPe,"STRONG",{});var I7t=s(U2e);Zgr=r(I7t,"distilbert"),I7t.forEach(t),ehr=r(dPe," \u2014 "),fQ=n(dPe,"A",{href:!0});var N7t=s(fQ);ohr=r(N7t,"TFDistilBertModel"),N7t.forEach(t),rhr=r(dPe," (DistilBERT model)"),dPe.forEach(t),thr=i(D),BF=n(D,"LI",{});var cPe=s(BF);J2e=n(cPe,"STRONG",{});var q7t=s(J2e);ahr=r(q7t,"dpr"),q7t.forEach(t),nhr=r(cPe," \u2014 "),mQ=n(cPe,"A",{href:!0});var j7t=s(mQ);shr=r(j7t,"TFDPRQuestionEncoder"),j7t.forEach(t),lhr=r(cPe," (DPR model)"),cPe.forEach(t),ihr=i(D),IF=n(D,"LI",{});var fPe=s(IF);Y2e=n(fPe,"STRONG",{});var D7t=s(Y2e);dhr=r(D7t,"electra"),D7t.forEach(t),chr=r(fPe," \u2014 "),gQ=n(fPe,"A",{href:!0});var G7t=s(gQ);fhr=r(G7t,"TFElectraModel"),G7t.forEach(t),mhr=r(fPe," (ELECTRA model)"),fPe.forEach(t),ghr=i(D),NF=n(D,"LI",{});var mPe=s(NF);K2e=n(mPe,"STRONG",{});var O7t=s(K2e);hhr=r(O7t,"flaubert"),O7t.forEach(t),phr=r(mPe," \u2014 "),hQ=n(mPe,"A",{href:!0});var V7t=s(hQ);_hr=r(V7t,"TFFlaubertModel"),V7t.forEach(t),uhr=r(mPe," (FlauBERT model)"),mPe.forEach(t),bhr=i(D),Ns=n(D,"LI",{});var hk=s(Ns);Z2e=n(hk,"STRONG",{});var X7t=s(Z2e);vhr=r(X7t,"funnel"),X7t.forEach(t),Fhr=r(hk," \u2014 "),pQ=n(hk,"A",{href:!0});var z7t=s(pQ);Thr=r(z7t,"TFFunnelModel"),z7t.forEach(t),Mhr=r(hk," or "),_Q=n(hk,"A",{href:!0});var W7t=s(_Q);Ehr=r(W7t,"TFFunnelBaseModel"),W7t.forEach(t),Chr=r(hk," (Funnel Transformer model)"),hk.forEach(t),whr=i(D),qF=n(D,"LI",{});var gPe=s(qF);e4e=n(gPe,"STRONG",{});var Q7t=s(e4e);Ahr=r(Q7t,"gpt2"),Q7t.forEach(t),Lhr=r(gPe," \u2014 "),uQ=n(gPe,"A",{href:!0});var H7t=s(uQ);yhr=r(H7t,"TFGPT2Model"),H7t.forEach(t),xhr=r(gPe," (OpenAI GPT-2 model)"),gPe.forEach(t),$hr=i(D),jF=n(D,"LI",{});var hPe=s(jF);o4e=n(hPe,"STRONG",{});var U7t=s(o4e);khr=r(U7t,"gptj"),U7t.forEach(t),Shr=r(hPe," \u2014 "),bQ=n(hPe,"A",{href:!0});var J7t=s(bQ);Rhr=r(J7t,"TFGPTJModel"),J7t.forEach(t),Phr=r(hPe," (GPT-J model)"),hPe.forEach(t),Bhr=i(D),DF=n(D,"LI",{});var pPe=s(DF);r4e=n(pPe,"STRONG",{});var Y7t=s(r4e);Ihr=r(Y7t,"hubert"),Y7t.forEach(t),Nhr=r(pPe," \u2014 "),vQ=n(pPe,"A",{href:!0});var K7t=s(vQ);qhr=r(K7t,"TFHubertModel"),K7t.forEach(t),jhr=r(pPe," (Hubert model)"),pPe.forEach(t),Dhr=i(D),GF=n(D,"LI",{});var _Pe=s(GF);t4e=n(_Pe,"STRONG",{});var Z7t=s(t4e);Ghr=r(Z7t,"layoutlm"),Z7t.forEach(t),Ohr=r(_Pe," \u2014 "),FQ=n(_Pe,"A",{href:!0});var eMt=s(FQ);Vhr=r(eMt,"TFLayoutLMModel"),eMt.forEach(t),Xhr=r(_Pe," (LayoutLM model)"),_Pe.forEach(t),zhr=i(D),OF=n(D,"LI",{});var uPe=s(OF);a4e=n(uPe,"STRONG",{});var oMt=s(a4e);Whr=r(oMt,"led"),oMt.forEach(t),Qhr=r(uPe," \u2014 "),TQ=n(uPe,"A",{href:!0});var rMt=s(TQ);Hhr=r(rMt,"TFLEDModel"),rMt.forEach(t),Uhr=r(uPe," (LED model)"),uPe.forEach(t),Jhr=i(D),VF=n(D,"LI",{});var bPe=s(VF);n4e=n(bPe,"STRONG",{});var tMt=s(n4e);Yhr=r(tMt,"longformer"),tMt.forEach(t),Khr=r(bPe," \u2014 "),MQ=n(bPe,"A",{href:!0});var aMt=s(MQ);Zhr=r(aMt,"TFLongformerModel"),aMt.forEach(t),epr=r(bPe," (Longformer model)"),bPe.forEach(t),opr=i(D),XF=n(D,"LI",{});var vPe=s(XF);s4e=n(vPe,"STRONG",{});var nMt=s(s4e);rpr=r(nMt,"lxmert"),nMt.forEach(t),tpr=r(vPe," \u2014 "),EQ=n(vPe,"A",{href:!0});var sMt=s(EQ);apr=r(sMt,"TFLxmertModel"),sMt.forEach(t),npr=r(vPe," (LXMERT model)"),vPe.forEach(t),spr=i(D),zF=n(D,"LI",{});var FPe=s(zF);l4e=n(FPe,"STRONG",{});var lMt=s(l4e);lpr=r(lMt,"marian"),lMt.forEach(t),ipr=r(FPe," \u2014 "),CQ=n(FPe,"A",{href:!0});var iMt=s(CQ);dpr=r(iMt,"TFMarianModel"),iMt.forEach(t),cpr=r(FPe," (Marian model)"),FPe.forEach(t),fpr=i(D),WF=n(D,"LI",{});var TPe=s(WF);i4e=n(TPe,"STRONG",{});var dMt=s(i4e);mpr=r(dMt,"mbart"),dMt.forEach(t),gpr=r(TPe," \u2014 "),wQ=n(TPe,"A",{href:!0});var cMt=s(wQ);hpr=r(cMt,"TFMBartModel"),cMt.forEach(t),ppr=r(TPe," (mBART model)"),TPe.forEach(t),_pr=i(D),QF=n(D,"LI",{});var MPe=s(QF);d4e=n(MPe,"STRONG",{});var fMt=s(d4e);upr=r(fMt,"mobilebert"),fMt.forEach(t),bpr=r(MPe," \u2014 "),AQ=n(MPe,"A",{href:!0});var mMt=s(AQ);vpr=r(mMt,"TFMobileBertModel"),mMt.forEach(t),Fpr=r(MPe," (MobileBERT model)"),MPe.forEach(t),Tpr=i(D),HF=n(D,"LI",{});var EPe=s(HF);c4e=n(EPe,"STRONG",{});var gMt=s(c4e);Mpr=r(gMt,"mpnet"),gMt.forEach(t),Epr=r(EPe," \u2014 "),LQ=n(EPe,"A",{href:!0});var hMt=s(LQ);Cpr=r(hMt,"TFMPNetModel"),hMt.forEach(t),wpr=r(EPe," (MPNet model)"),EPe.forEach(t),Apr=i(D),UF=n(D,"LI",{});var CPe=s(UF);f4e=n(CPe,"STRONG",{});var pMt=s(f4e);Lpr=r(pMt,"mt5"),pMt.forEach(t),ypr=r(CPe," \u2014 "),yQ=n(CPe,"A",{href:!0});var _Mt=s(yQ);xpr=r(_Mt,"TFMT5Model"),_Mt.forEach(t),$pr=r(CPe," (MT5 model)"),CPe.forEach(t),kpr=i(D),JF=n(D,"LI",{});var wPe=s(JF);m4e=n(wPe,"STRONG",{});var uMt=s(m4e);Spr=r(uMt,"openai-gpt"),uMt.forEach(t),Rpr=r(wPe," \u2014 "),xQ=n(wPe,"A",{href:!0});var bMt=s(xQ);Ppr=r(bMt,"TFOpenAIGPTModel"),bMt.forEach(t),Bpr=r(wPe," (OpenAI GPT model)"),wPe.forEach(t),Ipr=i(D),YF=n(D,"LI",{});var APe=s(YF);g4e=n(APe,"STRONG",{});var vMt=s(g4e);Npr=r(vMt,"opt"),vMt.forEach(t),qpr=r(APe," \u2014 "),$Q=n(APe,"A",{href:!0});var FMt=s($Q);jpr=r(FMt,"TFOPTModel"),FMt.forEach(t),Dpr=r(APe," (OPT model)"),APe.forEach(t),Gpr=i(D),KF=n(D,"LI",{});var LPe=s(KF);h4e=n(LPe,"STRONG",{});var TMt=s(h4e);Opr=r(TMt,"pegasus"),TMt.forEach(t),Vpr=r(LPe," \u2014 "),kQ=n(LPe,"A",{href:!0});var MMt=s(kQ);Xpr=r(MMt,"TFPegasusModel"),MMt.forEach(t),zpr=r(LPe," (Pegasus model)"),LPe.forEach(t),Wpr=i(D),ZF=n(D,"LI",{});var yPe=s(ZF);p4e=n(yPe,"STRONG",{});var EMt=s(p4e);Qpr=r(EMt,"rembert"),EMt.forEach(t),Hpr=r(yPe," \u2014 "),SQ=n(yPe,"A",{href:!0});var CMt=s(SQ);Upr=r(CMt,"TFRemBertModel"),CMt.forEach(t),Jpr=r(yPe," (RemBERT model)"),yPe.forEach(t),Ypr=i(D),eT=n(D,"LI",{});var xPe=s(eT);_4e=n(xPe,"STRONG",{});var wMt=s(_4e);Kpr=r(wMt,"roberta"),wMt.forEach(t),Zpr=r(xPe," \u2014 "),RQ=n(xPe,"A",{href:!0});var AMt=s(RQ);e_r=r(AMt,"TFRobertaModel"),AMt.forEach(t),o_r=r(xPe," (RoBERTa model)"),xPe.forEach(t),r_r=i(D),oT=n(D,"LI",{});var $Pe=s(oT);u4e=n($Pe,"STRONG",{});var LMt=s(u4e);t_r=r(LMt,"roformer"),LMt.forEach(t),a_r=r($Pe," \u2014 "),PQ=n($Pe,"A",{href:!0});var yMt=s(PQ);n_r=r(yMt,"TFRoFormerModel"),yMt.forEach(t),s_r=r($Pe," (RoFormer model)"),$Pe.forEach(t),l_r=i(D),rT=n(D,"LI",{});var kPe=s(rT);b4e=n(kPe,"STRONG",{});var xMt=s(b4e);i_r=r(xMt,"speech_to_text"),xMt.forEach(t),d_r=r(kPe," \u2014 "),BQ=n(kPe,"A",{href:!0});var $Mt=s(BQ);c_r=r($Mt,"TFSpeech2TextModel"),$Mt.forEach(t),f_r=r(kPe," (Speech2Text model)"),kPe.forEach(t),m_r=i(D),tT=n(D,"LI",{});var SPe=s(tT);v4e=n(SPe,"STRONG",{});var kMt=s(v4e);g_r=r(kMt,"swin"),kMt.forEach(t),h_r=r(SPe," \u2014 "),IQ=n(SPe,"A",{href:!0});var SMt=s(IQ);p_r=r(SMt,"TFSwinModel"),SMt.forEach(t),__r=r(SPe," (Swin Transformer model)"),SPe.forEach(t),u_r=i(D),aT=n(D,"LI",{});var RPe=s(aT);F4e=n(RPe,"STRONG",{});var RMt=s(F4e);b_r=r(RMt,"t5"),RMt.forEach(t),v_r=r(RPe," \u2014 "),NQ=n(RPe,"A",{href:!0});var PMt=s(NQ);F_r=r(PMt,"TFT5Model"),PMt.forEach(t),T_r=r(RPe," (T5 model)"),RPe.forEach(t),M_r=i(D),nT=n(D,"LI",{});var PPe=s(nT);T4e=n(PPe,"STRONG",{});var BMt=s(T4e);E_r=r(BMt,"tapas"),BMt.forEach(t),C_r=r(PPe," \u2014 "),qQ=n(PPe,"A",{href:!0});var IMt=s(qQ);w_r=r(IMt,"TFTapasModel"),IMt.forEach(t),A_r=r(PPe," (TAPAS model)"),PPe.forEach(t),L_r=i(D),sT=n(D,"LI",{});var BPe=s(sT);M4e=n(BPe,"STRONG",{});var NMt=s(M4e);y_r=r(NMt,"transfo-xl"),NMt.forEach(t),x_r=r(BPe," \u2014 "),jQ=n(BPe,"A",{href:!0});var qMt=s(jQ);$_r=r(qMt,"TFTransfoXLModel"),qMt.forEach(t),k_r=r(BPe," (Transformer-XL model)"),BPe.forEach(t),S_r=i(D),lT=n(D,"LI",{});var IPe=s(lT);E4e=n(IPe,"STRONG",{});var jMt=s(E4e);R_r=r(jMt,"vit"),jMt.forEach(t),P_r=r(IPe," \u2014 "),DQ=n(IPe,"A",{href:!0});var DMt=s(DQ);B_r=r(DMt,"TFViTModel"),DMt.forEach(t),I_r=r(IPe," (ViT model)"),IPe.forEach(t),N_r=i(D),iT=n(D,"LI",{});var NPe=s(iT);C4e=n(NPe,"STRONG",{});var GMt=s(C4e);q_r=r(GMt,"vit_mae"),GMt.forEach(t),j_r=r(NPe," \u2014 "),GQ=n(NPe,"A",{href:!0});var OMt=s(GQ);D_r=r(OMt,"TFViTMAEModel"),OMt.forEach(t),G_r=r(NPe," (ViTMAE model)"),NPe.forEach(t),O_r=i(D),dT=n(D,"LI",{});var qPe=s(dT);w4e=n(qPe,"STRONG",{});var VMt=s(w4e);V_r=r(VMt,"wav2vec2"),VMt.forEach(t),X_r=r(qPe," \u2014 "),OQ=n(qPe,"A",{href:!0});var XMt=s(OQ);z_r=r(XMt,"TFWav2Vec2Model"),XMt.forEach(t),W_r=r(qPe," (Wav2Vec2 model)"),qPe.forEach(t),Q_r=i(D),cT=n(D,"LI",{});var jPe=s(cT);A4e=n(jPe,"STRONG",{});var zMt=s(A4e);H_r=r(zMt,"xlm"),zMt.forEach(t),U_r=r(jPe," \u2014 "),VQ=n(jPe,"A",{href:!0});var WMt=s(VQ);J_r=r(WMt,"TFXLMModel"),WMt.forEach(t),Y_r=r(jPe," (XLM model)"),jPe.forEach(t),K_r=i(D),fT=n(D,"LI",{});var DPe=s(fT);L4e=n(DPe,"STRONG",{});var QMt=s(L4e);Z_r=r(QMt,"xlm-roberta"),QMt.forEach(t),eur=r(DPe," \u2014 "),XQ=n(DPe,"A",{href:!0});var HMt=s(XQ);our=r(HMt,"TFXLMRobertaModel"),HMt.forEach(t),rur=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),tur=i(D),mT=n(D,"LI",{});var GPe=s(mT);y4e=n(GPe,"STRONG",{});var UMt=s(y4e);aur=r(UMt,"xlnet"),UMt.forEach(t),nur=r(GPe," \u2014 "),zQ=n(GPe,"A",{href:!0});var JMt=s(zQ);sur=r(JMt,"TFXLNetModel"),JMt.forEach(t),lur=r(GPe," (XLNet model)"),GPe.forEach(t),D.forEach(t),iur=i(_l),T(gT.$$.fragment,_l),_l.forEach(t),pl.forEach(t),XDe=i(f),Wd=n(f,"H2",{class:!0});var JOe=s(Wd);hT=n(JOe,"A",{id:!0,class:!0,href:!0});var YMt=s(hT);x4e=n(YMt,"SPAN",{});var KMt=s(x4e);T(I8.$$.fragment,KMt),KMt.forEach(t),YMt.forEach(t),dur=i(JOe),$4e=n(JOe,"SPAN",{});var ZMt=s($4e);cur=r(ZMt,"TFAutoModelForPreTraining"),ZMt.forEach(t),JOe.forEach(t),zDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(N8.$$.fragment,ul),fur=i(ul),Qd=n(ul,"P",{});var aoe=s(Qd);mur=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WQ=n(aoe,"A",{href:!0});var eEt=s(WQ);gur=r(eEt,"from_pretrained()"),eEt.forEach(t),hur=r(aoe," class method or the "),QQ=n(aoe,"A",{href:!0});var oEt=s(QQ);pur=r(oEt,"from_config()"),oEt.forEach(t),_ur=r(aoe,` class
method.`),aoe.forEach(t),uur=i(ul),q8=n(ul,"P",{});var YOe=s(q8);bur=r(YOe,"This class cannot be instantiated directly using "),k4e=n(YOe,"CODE",{});var rEt=s(k4e);vur=r(rEt,"__init__()"),rEt.forEach(t),Fur=r(YOe," (throws an error)."),YOe.forEach(t),Tur=i(ul),xt=n(ul,"DIV",{class:!0});var U6=s(xt);T(j8.$$.fragment,U6),Mur=i(U6),S4e=n(U6,"P",{});var tEt=s(S4e);Eur=r(tEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tEt.forEach(t),Cur=i(U6),Hd=n(U6,"P",{});var noe=s(Hd);wur=r(noe,`Note:
Loading a model from its configuration file does `),R4e=n(noe,"STRONG",{});var aEt=s(R4e);Aur=r(aEt,"not"),aEt.forEach(t),Lur=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(noe,"A",{href:!0});var nEt=s(HQ);yur=r(nEt,"from_pretrained()"),nEt.forEach(t),xur=r(noe," to load the model weights."),noe.forEach(t),$ur=i(U6),T(pT.$$.fragment,U6),U6.forEach(t),kur=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(D8.$$.fragment,bl),Sur=i(bl),P4e=n(bl,"P",{});var sEt=s(P4e);Rur=r(sEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sEt.forEach(t),Pur=i(bl),Za=n(bl,"P",{});var J6=s(Za);Bur=r(J6,"The model class to instantiate is selected based on the "),B4e=n(J6,"CODE",{});var lEt=s(B4e);Iur=r(lEt,"model_type"),lEt.forEach(t),Nur=r(J6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(J6,"CODE",{});var iEt=s(I4e);qur=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),jur=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(J6,"CODE",{});var dEt=s(N4e);Dur=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),Gur=r(J6,":"),J6.forEach(t),Our=i(bl),se=n(bl,"UL",{});var le=s(se);_T=n(le,"LI",{});var OPe=s(_T);q4e=n(OPe,"STRONG",{});var cEt=s(q4e);Vur=r(cEt,"albert"),cEt.forEach(t),Xur=r(OPe," \u2014 "),UQ=n(OPe,"A",{href:!0});var fEt=s(UQ);zur=r(fEt,"TFAlbertForPreTraining"),fEt.forEach(t),Wur=r(OPe," (ALBERT model)"),OPe.forEach(t),Qur=i(le),uT=n(le,"LI",{});var VPe=s(uT);j4e=n(VPe,"STRONG",{});var mEt=s(j4e);Hur=r(mEt,"bart"),mEt.forEach(t),Uur=r(VPe," \u2014 "),JQ=n(VPe,"A",{href:!0});var gEt=s(JQ);Jur=r(gEt,"TFBartForConditionalGeneration"),gEt.forEach(t),Yur=r(VPe," (BART model)"),VPe.forEach(t),Kur=i(le),bT=n(le,"LI",{});var XPe=s(bT);D4e=n(XPe,"STRONG",{});var hEt=s(D4e);Zur=r(hEt,"bert"),hEt.forEach(t),e1r=r(XPe," \u2014 "),YQ=n(XPe,"A",{href:!0});var pEt=s(YQ);o1r=r(pEt,"TFBertForPreTraining"),pEt.forEach(t),r1r=r(XPe," (BERT model)"),XPe.forEach(t),t1r=i(le),vT=n(le,"LI",{});var zPe=s(vT);G4e=n(zPe,"STRONG",{});var _Et=s(G4e);a1r=r(_Et,"camembert"),_Et.forEach(t),n1r=r(zPe," \u2014 "),KQ=n(zPe,"A",{href:!0});var uEt=s(KQ);s1r=r(uEt,"TFCamembertForMaskedLM"),uEt.forEach(t),l1r=r(zPe," (CamemBERT model)"),zPe.forEach(t),i1r=i(le),FT=n(le,"LI",{});var WPe=s(FT);O4e=n(WPe,"STRONG",{});var bEt=s(O4e);d1r=r(bEt,"ctrl"),bEt.forEach(t),c1r=r(WPe," \u2014 "),ZQ=n(WPe,"A",{href:!0});var vEt=s(ZQ);f1r=r(vEt,"TFCTRLLMHeadModel"),vEt.forEach(t),m1r=r(WPe," (CTRL model)"),WPe.forEach(t),g1r=i(le),TT=n(le,"LI",{});var QPe=s(TT);V4e=n(QPe,"STRONG",{});var FEt=s(V4e);h1r=r(FEt,"distilbert"),FEt.forEach(t),p1r=r(QPe," \u2014 "),eH=n(QPe,"A",{href:!0});var TEt=s(eH);_1r=r(TEt,"TFDistilBertForMaskedLM"),TEt.forEach(t),u1r=r(QPe," (DistilBERT model)"),QPe.forEach(t),b1r=i(le),MT=n(le,"LI",{});var HPe=s(MT);X4e=n(HPe,"STRONG",{});var MEt=s(X4e);v1r=r(MEt,"electra"),MEt.forEach(t),F1r=r(HPe," \u2014 "),oH=n(HPe,"A",{href:!0});var EEt=s(oH);T1r=r(EEt,"TFElectraForPreTraining"),EEt.forEach(t),M1r=r(HPe," (ELECTRA model)"),HPe.forEach(t),E1r=i(le),ET=n(le,"LI",{});var UPe=s(ET);z4e=n(UPe,"STRONG",{});var CEt=s(z4e);C1r=r(CEt,"flaubert"),CEt.forEach(t),w1r=r(UPe," \u2014 "),rH=n(UPe,"A",{href:!0});var wEt=s(rH);A1r=r(wEt,"TFFlaubertWithLMHeadModel"),wEt.forEach(t),L1r=r(UPe," (FlauBERT model)"),UPe.forEach(t),y1r=i(le),CT=n(le,"LI",{});var JPe=s(CT);W4e=n(JPe,"STRONG",{});var AEt=s(W4e);x1r=r(AEt,"funnel"),AEt.forEach(t),$1r=r(JPe," \u2014 "),tH=n(JPe,"A",{href:!0});var LEt=s(tH);k1r=r(LEt,"TFFunnelForPreTraining"),LEt.forEach(t),S1r=r(JPe," (Funnel Transformer model)"),JPe.forEach(t),R1r=i(le),wT=n(le,"LI",{});var YPe=s(wT);Q4e=n(YPe,"STRONG",{});var yEt=s(Q4e);P1r=r(yEt,"gpt2"),yEt.forEach(t),B1r=r(YPe," \u2014 "),aH=n(YPe,"A",{href:!0});var xEt=s(aH);I1r=r(xEt,"TFGPT2LMHeadModel"),xEt.forEach(t),N1r=r(YPe," (OpenAI GPT-2 model)"),YPe.forEach(t),q1r=i(le),AT=n(le,"LI",{});var KPe=s(AT);H4e=n(KPe,"STRONG",{});var $Et=s(H4e);j1r=r($Et,"layoutlm"),$Et.forEach(t),D1r=r(KPe," \u2014 "),nH=n(KPe,"A",{href:!0});var kEt=s(nH);G1r=r(kEt,"TFLayoutLMForMaskedLM"),kEt.forEach(t),O1r=r(KPe," (LayoutLM model)"),KPe.forEach(t),V1r=i(le),LT=n(le,"LI",{});var ZPe=s(LT);U4e=n(ZPe,"STRONG",{});var SEt=s(U4e);X1r=r(SEt,"lxmert"),SEt.forEach(t),z1r=r(ZPe," \u2014 "),sH=n(ZPe,"A",{href:!0});var REt=s(sH);W1r=r(REt,"TFLxmertForPreTraining"),REt.forEach(t),Q1r=r(ZPe," (LXMERT model)"),ZPe.forEach(t),H1r=i(le),yT=n(le,"LI",{});var eBe=s(yT);J4e=n(eBe,"STRONG",{});var PEt=s(J4e);U1r=r(PEt,"mobilebert"),PEt.forEach(t),J1r=r(eBe," \u2014 "),lH=n(eBe,"A",{href:!0});var BEt=s(lH);Y1r=r(BEt,"TFMobileBertForPreTraining"),BEt.forEach(t),K1r=r(eBe," (MobileBERT model)"),eBe.forEach(t),Z1r=i(le),xT=n(le,"LI",{});var oBe=s(xT);Y4e=n(oBe,"STRONG",{});var IEt=s(Y4e);ebr=r(IEt,"mpnet"),IEt.forEach(t),obr=r(oBe," \u2014 "),iH=n(oBe,"A",{href:!0});var NEt=s(iH);rbr=r(NEt,"TFMPNetForMaskedLM"),NEt.forEach(t),tbr=r(oBe," (MPNet model)"),oBe.forEach(t),abr=i(le),$T=n(le,"LI",{});var rBe=s($T);K4e=n(rBe,"STRONG",{});var qEt=s(K4e);nbr=r(qEt,"openai-gpt"),qEt.forEach(t),sbr=r(rBe," \u2014 "),dH=n(rBe,"A",{href:!0});var jEt=s(dH);lbr=r(jEt,"TFOpenAIGPTLMHeadModel"),jEt.forEach(t),ibr=r(rBe," (OpenAI GPT model)"),rBe.forEach(t),dbr=i(le),kT=n(le,"LI",{});var tBe=s(kT);Z4e=n(tBe,"STRONG",{});var DEt=s(Z4e);cbr=r(DEt,"roberta"),DEt.forEach(t),fbr=r(tBe," \u2014 "),cH=n(tBe,"A",{href:!0});var GEt=s(cH);mbr=r(GEt,"TFRobertaForMaskedLM"),GEt.forEach(t),gbr=r(tBe," (RoBERTa model)"),tBe.forEach(t),hbr=i(le),ST=n(le,"LI",{});var aBe=s(ST);eve=n(aBe,"STRONG",{});var OEt=s(eve);pbr=r(OEt,"t5"),OEt.forEach(t),_br=r(aBe," \u2014 "),fH=n(aBe,"A",{href:!0});var VEt=s(fH);ubr=r(VEt,"TFT5ForConditionalGeneration"),VEt.forEach(t),bbr=r(aBe," (T5 model)"),aBe.forEach(t),vbr=i(le),RT=n(le,"LI",{});var nBe=s(RT);ove=n(nBe,"STRONG",{});var XEt=s(ove);Fbr=r(XEt,"tapas"),XEt.forEach(t),Tbr=r(nBe," \u2014 "),mH=n(nBe,"A",{href:!0});var zEt=s(mH);Mbr=r(zEt,"TFTapasForMaskedLM"),zEt.forEach(t),Ebr=r(nBe," (TAPAS model)"),nBe.forEach(t),Cbr=i(le),PT=n(le,"LI",{});var sBe=s(PT);rve=n(sBe,"STRONG",{});var WEt=s(rve);wbr=r(WEt,"transfo-xl"),WEt.forEach(t),Abr=r(sBe," \u2014 "),gH=n(sBe,"A",{href:!0});var QEt=s(gH);Lbr=r(QEt,"TFTransfoXLLMHeadModel"),QEt.forEach(t),ybr=r(sBe," (Transformer-XL model)"),sBe.forEach(t),xbr=i(le),BT=n(le,"LI",{});var lBe=s(BT);tve=n(lBe,"STRONG",{});var HEt=s(tve);$br=r(HEt,"vit_mae"),HEt.forEach(t),kbr=r(lBe," \u2014 "),hH=n(lBe,"A",{href:!0});var UEt=s(hH);Sbr=r(UEt,"TFViTMAEForPreTraining"),UEt.forEach(t),Rbr=r(lBe," (ViTMAE model)"),lBe.forEach(t),Pbr=i(le),IT=n(le,"LI",{});var iBe=s(IT);ave=n(iBe,"STRONG",{});var JEt=s(ave);Bbr=r(JEt,"xlm"),JEt.forEach(t),Ibr=r(iBe," \u2014 "),pH=n(iBe,"A",{href:!0});var YEt=s(pH);Nbr=r(YEt,"TFXLMWithLMHeadModel"),YEt.forEach(t),qbr=r(iBe," (XLM model)"),iBe.forEach(t),jbr=i(le),NT=n(le,"LI",{});var dBe=s(NT);nve=n(dBe,"STRONG",{});var KEt=s(nve);Dbr=r(KEt,"xlm-roberta"),KEt.forEach(t),Gbr=r(dBe," \u2014 "),_H=n(dBe,"A",{href:!0});var ZEt=s(_H);Obr=r(ZEt,"TFXLMRobertaForMaskedLM"),ZEt.forEach(t),Vbr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),Xbr=i(le),qT=n(le,"LI",{});var cBe=s(qT);sve=n(cBe,"STRONG",{});var eCt=s(sve);zbr=r(eCt,"xlnet"),eCt.forEach(t),Wbr=r(cBe," \u2014 "),uH=n(cBe,"A",{href:!0});var oCt=s(uH);Qbr=r(oCt,"TFXLNetLMHeadModel"),oCt.forEach(t),Hbr=r(cBe," (XLNet model)"),cBe.forEach(t),le.forEach(t),Ubr=i(bl),T(jT.$$.fragment,bl),bl.forEach(t),ul.forEach(t),WDe=i(f),Ud=n(f,"H2",{class:!0});var KOe=s(Ud);DT=n(KOe,"A",{id:!0,class:!0,href:!0});var rCt=s(DT);lve=n(rCt,"SPAN",{});var tCt=s(lve);T(G8.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),Jbr=i(KOe),ive=n(KOe,"SPAN",{});var aCt=s(ive);Ybr=r(aCt,"TFAutoModelForCausalLM"),aCt.forEach(t),KOe.forEach(t),QDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(O8.$$.fragment,vl),Kbr=i(vl),Jd=n(vl,"P",{});var soe=s(Jd);Zbr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bH=n(soe,"A",{href:!0});var nCt=s(bH);e2r=r(nCt,"from_pretrained()"),nCt.forEach(t),o2r=r(soe," class method or the "),vH=n(soe,"A",{href:!0});var sCt=s(vH);r2r=r(sCt,"from_config()"),sCt.forEach(t),t2r=r(soe,` class
method.`),soe.forEach(t),a2r=i(vl),V8=n(vl,"P",{});var ZOe=s(V8);n2r=r(ZOe,"This class cannot be instantiated directly using "),dve=n(ZOe,"CODE",{});var lCt=s(dve);s2r=r(lCt,"__init__()"),lCt.forEach(t),l2r=r(ZOe," (throws an error)."),ZOe.forEach(t),i2r=i(vl),$t=n(vl,"DIV",{class:!0});var Y6=s($t);T(X8.$$.fragment,Y6),d2r=i(Y6),cve=n(Y6,"P",{});var iCt=s(cve);c2r=r(iCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCt.forEach(t),f2r=i(Y6),Yd=n(Y6,"P",{});var loe=s(Yd);m2r=r(loe,`Note:
Loading a model from its configuration file does `),fve=n(loe,"STRONG",{});var dCt=s(fve);g2r=r(dCt,"not"),dCt.forEach(t),h2r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(loe,"A",{href:!0});var cCt=s(FH);p2r=r(cCt,"from_pretrained()"),cCt.forEach(t),_2r=r(loe," to load the model weights."),loe.forEach(t),u2r=i(Y6),T(GT.$$.fragment,Y6),Y6.forEach(t),b2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(z8.$$.fragment,Fl),v2r=i(Fl),mve=n(Fl,"P",{});var fCt=s(mve);F2r=r(fCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fCt.forEach(t),T2r=i(Fl),en=n(Fl,"P",{});var K6=s(en);M2r=r(K6,"The model class to instantiate is selected based on the "),gve=n(K6,"CODE",{});var mCt=s(gve);E2r=r(mCt,"model_type"),mCt.forEach(t),C2r=r(K6,` property of the config object (either
passed as an argument or loaded from `),hve=n(K6,"CODE",{});var gCt=s(hve);w2r=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),A2r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(K6,"CODE",{});var hCt=s(pve);L2r=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),y2r=r(K6,":"),K6.forEach(t),x2r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);OT=n(Ce,"LI",{});var fBe=s(OT);_ve=n(fBe,"STRONG",{});var pCt=s(_ve);$2r=r(pCt,"bert"),pCt.forEach(t),k2r=r(fBe," \u2014 "),TH=n(fBe,"A",{href:!0});var _Ct=s(TH);S2r=r(_Ct,"TFBertLMHeadModel"),_Ct.forEach(t),R2r=r(fBe," (BERT model)"),fBe.forEach(t),P2r=i(Ce),VT=n(Ce,"LI",{});var mBe=s(VT);uve=n(mBe,"STRONG",{});var uCt=s(uve);B2r=r(uCt,"camembert"),uCt.forEach(t),I2r=r(mBe," \u2014 "),MH=n(mBe,"A",{href:!0});var bCt=s(MH);N2r=r(bCt,"TFCamembertForCausalLM"),bCt.forEach(t),q2r=r(mBe," (CamemBERT model)"),mBe.forEach(t),j2r=i(Ce),XT=n(Ce,"LI",{});var gBe=s(XT);bve=n(gBe,"STRONG",{});var vCt=s(bve);D2r=r(vCt,"ctrl"),vCt.forEach(t),G2r=r(gBe," \u2014 "),EH=n(gBe,"A",{href:!0});var FCt=s(EH);O2r=r(FCt,"TFCTRLLMHeadModel"),FCt.forEach(t),V2r=r(gBe," (CTRL model)"),gBe.forEach(t),X2r=i(Ce),zT=n(Ce,"LI",{});var hBe=s(zT);vve=n(hBe,"STRONG",{});var TCt=s(vve);z2r=r(TCt,"gpt2"),TCt.forEach(t),W2r=r(hBe," \u2014 "),CH=n(hBe,"A",{href:!0});var MCt=s(CH);Q2r=r(MCt,"TFGPT2LMHeadModel"),MCt.forEach(t),H2r=r(hBe," (OpenAI GPT-2 model)"),hBe.forEach(t),U2r=i(Ce),WT=n(Ce,"LI",{});var pBe=s(WT);Fve=n(pBe,"STRONG",{});var ECt=s(Fve);J2r=r(ECt,"gptj"),ECt.forEach(t),Y2r=r(pBe," \u2014 "),wH=n(pBe,"A",{href:!0});var CCt=s(wH);K2r=r(CCt,"TFGPTJForCausalLM"),CCt.forEach(t),Z2r=r(pBe," (GPT-J model)"),pBe.forEach(t),e4r=i(Ce),QT=n(Ce,"LI",{});var _Be=s(QT);Tve=n(_Be,"STRONG",{});var wCt=s(Tve);o4r=r(wCt,"openai-gpt"),wCt.forEach(t),r4r=r(_Be," \u2014 "),AH=n(_Be,"A",{href:!0});var ACt=s(AH);t4r=r(ACt,"TFOpenAIGPTLMHeadModel"),ACt.forEach(t),a4r=r(_Be," (OpenAI GPT model)"),_Be.forEach(t),n4r=i(Ce),HT=n(Ce,"LI",{});var uBe=s(HT);Mve=n(uBe,"STRONG",{});var LCt=s(Mve);s4r=r(LCt,"opt"),LCt.forEach(t),l4r=r(uBe," \u2014 "),LH=n(uBe,"A",{href:!0});var yCt=s(LH);i4r=r(yCt,"TFOPTForCausalLM"),yCt.forEach(t),d4r=r(uBe," (OPT model)"),uBe.forEach(t),c4r=i(Ce),UT=n(Ce,"LI",{});var bBe=s(UT);Eve=n(bBe,"STRONG",{});var xCt=s(Eve);f4r=r(xCt,"rembert"),xCt.forEach(t),m4r=r(bBe," \u2014 "),yH=n(bBe,"A",{href:!0});var $Ct=s(yH);g4r=r($Ct,"TFRemBertForCausalLM"),$Ct.forEach(t),h4r=r(bBe," (RemBERT model)"),bBe.forEach(t),p4r=i(Ce),JT=n(Ce,"LI",{});var vBe=s(JT);Cve=n(vBe,"STRONG",{});var kCt=s(Cve);_4r=r(kCt,"roberta"),kCt.forEach(t),u4r=r(vBe," \u2014 "),xH=n(vBe,"A",{href:!0});var SCt=s(xH);b4r=r(SCt,"TFRobertaForCausalLM"),SCt.forEach(t),v4r=r(vBe," (RoBERTa model)"),vBe.forEach(t),F4r=i(Ce),YT=n(Ce,"LI",{});var FBe=s(YT);wve=n(FBe,"STRONG",{});var RCt=s(wve);T4r=r(RCt,"roformer"),RCt.forEach(t),M4r=r(FBe," \u2014 "),$H=n(FBe,"A",{href:!0});var PCt=s($H);E4r=r(PCt,"TFRoFormerForCausalLM"),PCt.forEach(t),C4r=r(FBe," (RoFormer model)"),FBe.forEach(t),w4r=i(Ce),KT=n(Ce,"LI",{});var TBe=s(KT);Ave=n(TBe,"STRONG",{});var BCt=s(Ave);A4r=r(BCt,"transfo-xl"),BCt.forEach(t),L4r=r(TBe," \u2014 "),kH=n(TBe,"A",{href:!0});var ICt=s(kH);y4r=r(ICt,"TFTransfoXLLMHeadModel"),ICt.forEach(t),x4r=r(TBe," (Transformer-XL model)"),TBe.forEach(t),$4r=i(Ce),ZT=n(Ce,"LI",{});var MBe=s(ZT);Lve=n(MBe,"STRONG",{});var NCt=s(Lve);k4r=r(NCt,"xlm"),NCt.forEach(t),S4r=r(MBe," \u2014 "),SH=n(MBe,"A",{href:!0});var qCt=s(SH);R4r=r(qCt,"TFXLMWithLMHeadModel"),qCt.forEach(t),P4r=r(MBe," (XLM model)"),MBe.forEach(t),B4r=i(Ce),e7=n(Ce,"LI",{});var EBe=s(e7);yve=n(EBe,"STRONG",{});var jCt=s(yve);I4r=r(jCt,"xlnet"),jCt.forEach(t),N4r=r(EBe," \u2014 "),RH=n(EBe,"A",{href:!0});var DCt=s(RH);q4r=r(DCt,"TFXLNetLMHeadModel"),DCt.forEach(t),j4r=r(EBe," (XLNet model)"),EBe.forEach(t),Ce.forEach(t),D4r=i(Fl),T(o7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),HDe=i(f),Kd=n(f,"H2",{class:!0});var eVe=s(Kd);r7=n(eVe,"A",{id:!0,class:!0,href:!0});var GCt=s(r7);xve=n(GCt,"SPAN",{});var OCt=s(xve);T(W8.$$.fragment,OCt),OCt.forEach(t),GCt.forEach(t),G4r=i(eVe),$ve=n(eVe,"SPAN",{});var VCt=s($ve);O4r=r(VCt,"TFAutoModelForImageClassification"),VCt.forEach(t),eVe.forEach(t),UDe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(Q8.$$.fragment,Tl),V4r=i(Tl),Zd=n(Tl,"P",{});var ioe=s(Zd);X4r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PH=n(ioe,"A",{href:!0});var XCt=s(PH);z4r=r(XCt,"from_pretrained()"),XCt.forEach(t),W4r=r(ioe," class method or the "),BH=n(ioe,"A",{href:!0});var zCt=s(BH);Q4r=r(zCt,"from_config()"),zCt.forEach(t),H4r=r(ioe,` class
method.`),ioe.forEach(t),U4r=i(Tl),H8=n(Tl,"P",{});var oVe=s(H8);J4r=r(oVe,"This class cannot be instantiated directly using "),kve=n(oVe,"CODE",{});var WCt=s(kve);Y4r=r(WCt,"__init__()"),WCt.forEach(t),K4r=r(oVe," (throws an error)."),oVe.forEach(t),Z4r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Z6=s(kt);T(U8.$$.fragment,Z6),evr=i(Z6),Sve=n(Z6,"P",{});var QCt=s(Sve);ovr=r(QCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QCt.forEach(t),rvr=i(Z6),ec=n(Z6,"P",{});var doe=s(ec);tvr=r(doe,`Note:
Loading a model from its configuration file does `),Rve=n(doe,"STRONG",{});var HCt=s(Rve);avr=r(HCt,"not"),HCt.forEach(t),nvr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(doe,"A",{href:!0});var UCt=s(IH);svr=r(UCt,"from_pretrained()"),UCt.forEach(t),lvr=r(doe," to load the model weights."),doe.forEach(t),ivr=i(Z6),T(t7.$$.fragment,Z6),Z6.forEach(t),dvr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(J8.$$.fragment,Ml),cvr=i(Ml),Pve=n(Ml,"P",{});var JCt=s(Pve);fvr=r(JCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JCt.forEach(t),mvr=i(Ml),on=n(Ml,"P",{});var eA=s(on);gvr=r(eA,"The model class to instantiate is selected based on the "),Bve=n(eA,"CODE",{});var YCt=s(Bve);hvr=r(YCt,"model_type"),YCt.forEach(t),pvr=r(eA,` property of the config object (either
passed as an argument or loaded from `),Ive=n(eA,"CODE",{});var KCt=s(Ive);_vr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),uvr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(eA,"CODE",{});var ZCt=s(Nve);bvr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),vvr=r(eA,":"),eA.forEach(t),Fvr=i(Ml),rn=n(Ml,"UL",{});var oA=s(rn);a7=n(oA,"LI",{});var CBe=s(a7);qve=n(CBe,"STRONG",{});var e0t=s(qve);Tvr=r(e0t,"convnext"),e0t.forEach(t),Mvr=r(CBe," \u2014 "),NH=n(CBe,"A",{href:!0});var o0t=s(NH);Evr=r(o0t,"TFConvNextForImageClassification"),o0t.forEach(t),Cvr=r(CBe," (ConvNeXT model)"),CBe.forEach(t),wvr=i(oA),n7=n(oA,"LI",{});var wBe=s(n7);jve=n(wBe,"STRONG",{});var r0t=s(jve);Avr=r(r0t,"data2vec-vision"),r0t.forEach(t),Lvr=r(wBe," \u2014 "),qH=n(wBe,"A",{href:!0});var t0t=s(qH);yvr=r(t0t,"TFData2VecVisionForImageClassification"),t0t.forEach(t),xvr=r(wBe," (Data2VecVision model)"),wBe.forEach(t),$vr=i(oA),s7=n(oA,"LI",{});var ABe=s(s7);Dve=n(ABe,"STRONG",{});var a0t=s(Dve);kvr=r(a0t,"swin"),a0t.forEach(t),Svr=r(ABe," \u2014 "),jH=n(ABe,"A",{href:!0});var n0t=s(jH);Rvr=r(n0t,"TFSwinForImageClassification"),n0t.forEach(t),Pvr=r(ABe," (Swin Transformer model)"),ABe.forEach(t),Bvr=i(oA),l7=n(oA,"LI",{});var LBe=s(l7);Gve=n(LBe,"STRONG",{});var s0t=s(Gve);Ivr=r(s0t,"vit"),s0t.forEach(t),Nvr=r(LBe," \u2014 "),DH=n(LBe,"A",{href:!0});var l0t=s(DH);qvr=r(l0t,"TFViTForImageClassification"),l0t.forEach(t),jvr=r(LBe," (ViT model)"),LBe.forEach(t),oA.forEach(t),Dvr=i(Ml),T(i7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),JDe=i(f),oc=n(f,"H2",{class:!0});var rVe=s(oc);d7=n(rVe,"A",{id:!0,class:!0,href:!0});var i0t=s(d7);Ove=n(i0t,"SPAN",{});var d0t=s(Ove);T(Y8.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),Gvr=i(rVe),Vve=n(rVe,"SPAN",{});var c0t=s(Vve);Ovr=r(c0t,"TFAutoModelForMaskedLM"),c0t.forEach(t),rVe.forEach(t),YDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(K8.$$.fragment,El),Vvr=i(El),rc=n(El,"P",{});var coe=s(rc);Xvr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GH=n(coe,"A",{href:!0});var f0t=s(GH);zvr=r(f0t,"from_pretrained()"),f0t.forEach(t),Wvr=r(coe," class method or the "),OH=n(coe,"A",{href:!0});var m0t=s(OH);Qvr=r(m0t,"from_config()"),m0t.forEach(t),Hvr=r(coe,` class
method.`),coe.forEach(t),Uvr=i(El),Z8=n(El,"P",{});var tVe=s(Z8);Jvr=r(tVe,"This class cannot be instantiated directly using "),Xve=n(tVe,"CODE",{});var g0t=s(Xve);Yvr=r(g0t,"__init__()"),g0t.forEach(t),Kvr=r(tVe," (throws an error)."),tVe.forEach(t),Zvr=i(El),St=n(El,"DIV",{class:!0});var rA=s(St);T(e9.$$.fragment,rA),e5r=i(rA),zve=n(rA,"P",{});var h0t=s(zve);o5r=r(h0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h0t.forEach(t),r5r=i(rA),tc=n(rA,"P",{});var foe=s(tc);t5r=r(foe,`Note:
Loading a model from its configuration file does `),Wve=n(foe,"STRONG",{});var p0t=s(Wve);a5r=r(p0t,"not"),p0t.forEach(t),n5r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(foe,"A",{href:!0});var _0t=s(VH);s5r=r(_0t,"from_pretrained()"),_0t.forEach(t),l5r=r(foe," to load the model weights."),foe.forEach(t),i5r=i(rA),T(c7.$$.fragment,rA),rA.forEach(t),d5r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(o9.$$.fragment,Cl),c5r=i(Cl),Qve=n(Cl,"P",{});var u0t=s(Qve);f5r=r(u0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u0t.forEach(t),m5r=i(Cl),tn=n(Cl,"P",{});var tA=s(tn);g5r=r(tA,"The model class to instantiate is selected based on the "),Hve=n(tA,"CODE",{});var b0t=s(Hve);h5r=r(b0t,"model_type"),b0t.forEach(t),p5r=r(tA,` property of the config object (either
passed as an argument or loaded from `),Uve=n(tA,"CODE",{});var v0t=s(Uve);_5r=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),u5r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(tA,"CODE",{});var F0t=s(Jve);b5r=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),v5r=r(tA,":"),tA.forEach(t),F5r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);f7=n(fe,"LI",{});var yBe=s(f7);Yve=n(yBe,"STRONG",{});var T0t=s(Yve);T5r=r(T0t,"albert"),T0t.forEach(t),M5r=r(yBe," \u2014 "),XH=n(yBe,"A",{href:!0});var M0t=s(XH);E5r=r(M0t,"TFAlbertForMaskedLM"),M0t.forEach(t),C5r=r(yBe," (ALBERT model)"),yBe.forEach(t),w5r=i(fe),m7=n(fe,"LI",{});var xBe=s(m7);Kve=n(xBe,"STRONG",{});var E0t=s(Kve);A5r=r(E0t,"bert"),E0t.forEach(t),L5r=r(xBe," \u2014 "),zH=n(xBe,"A",{href:!0});var C0t=s(zH);y5r=r(C0t,"TFBertForMaskedLM"),C0t.forEach(t),x5r=r(xBe," (BERT model)"),xBe.forEach(t),$5r=i(fe),g7=n(fe,"LI",{});var $Be=s(g7);Zve=n($Be,"STRONG",{});var w0t=s(Zve);k5r=r(w0t,"camembert"),w0t.forEach(t),S5r=r($Be," \u2014 "),WH=n($Be,"A",{href:!0});var A0t=s(WH);R5r=r(A0t,"TFCamembertForMaskedLM"),A0t.forEach(t),P5r=r($Be," (CamemBERT model)"),$Be.forEach(t),B5r=i(fe),h7=n(fe,"LI",{});var kBe=s(h7);e5e=n(kBe,"STRONG",{});var L0t=s(e5e);I5r=r(L0t,"convbert"),L0t.forEach(t),N5r=r(kBe," \u2014 "),QH=n(kBe,"A",{href:!0});var y0t=s(QH);q5r=r(y0t,"TFConvBertForMaskedLM"),y0t.forEach(t),j5r=r(kBe," (ConvBERT model)"),kBe.forEach(t),D5r=i(fe),p7=n(fe,"LI",{});var SBe=s(p7);o5e=n(SBe,"STRONG",{});var x0t=s(o5e);G5r=r(x0t,"deberta"),x0t.forEach(t),O5r=r(SBe," \u2014 "),HH=n(SBe,"A",{href:!0});var $0t=s(HH);V5r=r($0t,"TFDebertaForMaskedLM"),$0t.forEach(t),X5r=r(SBe," (DeBERTa model)"),SBe.forEach(t),z5r=i(fe),_7=n(fe,"LI",{});var RBe=s(_7);r5e=n(RBe,"STRONG",{});var k0t=s(r5e);W5r=r(k0t,"deberta-v2"),k0t.forEach(t),Q5r=r(RBe," \u2014 "),UH=n(RBe,"A",{href:!0});var S0t=s(UH);H5r=r(S0t,"TFDebertaV2ForMaskedLM"),S0t.forEach(t),U5r=r(RBe," (DeBERTa-v2 model)"),RBe.forEach(t),J5r=i(fe),u7=n(fe,"LI",{});var PBe=s(u7);t5e=n(PBe,"STRONG",{});var R0t=s(t5e);Y5r=r(R0t,"distilbert"),R0t.forEach(t),K5r=r(PBe," \u2014 "),JH=n(PBe,"A",{href:!0});var P0t=s(JH);Z5r=r(P0t,"TFDistilBertForMaskedLM"),P0t.forEach(t),e3r=r(PBe," (DistilBERT model)"),PBe.forEach(t),o3r=i(fe),b7=n(fe,"LI",{});var BBe=s(b7);a5e=n(BBe,"STRONG",{});var B0t=s(a5e);r3r=r(B0t,"electra"),B0t.forEach(t),t3r=r(BBe," \u2014 "),YH=n(BBe,"A",{href:!0});var I0t=s(YH);a3r=r(I0t,"TFElectraForMaskedLM"),I0t.forEach(t),n3r=r(BBe," (ELECTRA model)"),BBe.forEach(t),s3r=i(fe),v7=n(fe,"LI",{});var IBe=s(v7);n5e=n(IBe,"STRONG",{});var N0t=s(n5e);l3r=r(N0t,"flaubert"),N0t.forEach(t),i3r=r(IBe," \u2014 "),KH=n(IBe,"A",{href:!0});var q0t=s(KH);d3r=r(q0t,"TFFlaubertWithLMHeadModel"),q0t.forEach(t),c3r=r(IBe," (FlauBERT model)"),IBe.forEach(t),f3r=i(fe),F7=n(fe,"LI",{});var NBe=s(F7);s5e=n(NBe,"STRONG",{});var j0t=s(s5e);m3r=r(j0t,"funnel"),j0t.forEach(t),g3r=r(NBe," \u2014 "),ZH=n(NBe,"A",{href:!0});var D0t=s(ZH);h3r=r(D0t,"TFFunnelForMaskedLM"),D0t.forEach(t),p3r=r(NBe," (Funnel Transformer model)"),NBe.forEach(t),_3r=i(fe),T7=n(fe,"LI",{});var qBe=s(T7);l5e=n(qBe,"STRONG",{});var G0t=s(l5e);u3r=r(G0t,"layoutlm"),G0t.forEach(t),b3r=r(qBe," \u2014 "),eU=n(qBe,"A",{href:!0});var O0t=s(eU);v3r=r(O0t,"TFLayoutLMForMaskedLM"),O0t.forEach(t),F3r=r(qBe," (LayoutLM model)"),qBe.forEach(t),T3r=i(fe),M7=n(fe,"LI",{});var jBe=s(M7);i5e=n(jBe,"STRONG",{});var V0t=s(i5e);M3r=r(V0t,"longformer"),V0t.forEach(t),E3r=r(jBe," \u2014 "),oU=n(jBe,"A",{href:!0});var X0t=s(oU);C3r=r(X0t,"TFLongformerForMaskedLM"),X0t.forEach(t),w3r=r(jBe," (Longformer model)"),jBe.forEach(t),A3r=i(fe),E7=n(fe,"LI",{});var DBe=s(E7);d5e=n(DBe,"STRONG",{});var z0t=s(d5e);L3r=r(z0t,"mobilebert"),z0t.forEach(t),y3r=r(DBe," \u2014 "),rU=n(DBe,"A",{href:!0});var W0t=s(rU);x3r=r(W0t,"TFMobileBertForMaskedLM"),W0t.forEach(t),$3r=r(DBe," (MobileBERT model)"),DBe.forEach(t),k3r=i(fe),C7=n(fe,"LI",{});var GBe=s(C7);c5e=n(GBe,"STRONG",{});var Q0t=s(c5e);S3r=r(Q0t,"mpnet"),Q0t.forEach(t),R3r=r(GBe," \u2014 "),tU=n(GBe,"A",{href:!0});var H0t=s(tU);P3r=r(H0t,"TFMPNetForMaskedLM"),H0t.forEach(t),B3r=r(GBe," (MPNet model)"),GBe.forEach(t),I3r=i(fe),w7=n(fe,"LI",{});var OBe=s(w7);f5e=n(OBe,"STRONG",{});var U0t=s(f5e);N3r=r(U0t,"rembert"),U0t.forEach(t),q3r=r(OBe," \u2014 "),aU=n(OBe,"A",{href:!0});var J0t=s(aU);j3r=r(J0t,"TFRemBertForMaskedLM"),J0t.forEach(t),D3r=r(OBe," (RemBERT model)"),OBe.forEach(t),G3r=i(fe),A7=n(fe,"LI",{});var VBe=s(A7);m5e=n(VBe,"STRONG",{});var Y0t=s(m5e);O3r=r(Y0t,"roberta"),Y0t.forEach(t),V3r=r(VBe," \u2014 "),nU=n(VBe,"A",{href:!0});var K0t=s(nU);X3r=r(K0t,"TFRobertaForMaskedLM"),K0t.forEach(t),z3r=r(VBe," (RoBERTa model)"),VBe.forEach(t),W3r=i(fe),L7=n(fe,"LI",{});var XBe=s(L7);g5e=n(XBe,"STRONG",{});var Z0t=s(g5e);Q3r=r(Z0t,"roformer"),Z0t.forEach(t),H3r=r(XBe," \u2014 "),sU=n(XBe,"A",{href:!0});var ewt=s(sU);U3r=r(ewt,"TFRoFormerForMaskedLM"),ewt.forEach(t),J3r=r(XBe," (RoFormer model)"),XBe.forEach(t),Y3r=i(fe),y7=n(fe,"LI",{});var zBe=s(y7);h5e=n(zBe,"STRONG",{});var owt=s(h5e);K3r=r(owt,"tapas"),owt.forEach(t),Z3r=r(zBe," \u2014 "),lU=n(zBe,"A",{href:!0});var rwt=s(lU);eFr=r(rwt,"TFTapasForMaskedLM"),rwt.forEach(t),oFr=r(zBe," (TAPAS model)"),zBe.forEach(t),rFr=i(fe),x7=n(fe,"LI",{});var WBe=s(x7);p5e=n(WBe,"STRONG",{});var twt=s(p5e);tFr=r(twt,"xlm"),twt.forEach(t),aFr=r(WBe," \u2014 "),iU=n(WBe,"A",{href:!0});var awt=s(iU);nFr=r(awt,"TFXLMWithLMHeadModel"),awt.forEach(t),sFr=r(WBe," (XLM model)"),WBe.forEach(t),lFr=i(fe),$7=n(fe,"LI",{});var QBe=s($7);_5e=n(QBe,"STRONG",{});var nwt=s(_5e);iFr=r(nwt,"xlm-roberta"),nwt.forEach(t),dFr=r(QBe," \u2014 "),dU=n(QBe,"A",{href:!0});var swt=s(dU);cFr=r(swt,"TFXLMRobertaForMaskedLM"),swt.forEach(t),fFr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),fe.forEach(t),mFr=i(Cl),T(k7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),KDe=i(f),ac=n(f,"H2",{class:!0});var aVe=s(ac);S7=n(aVe,"A",{id:!0,class:!0,href:!0});var lwt=s(S7);u5e=n(lwt,"SPAN",{});var iwt=s(u5e);T(r9.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),gFr=i(aVe),b5e=n(aVe,"SPAN",{});var dwt=s(b5e);hFr=r(dwt,"TFAutoModelForSeq2SeqLM"),dwt.forEach(t),aVe.forEach(t),ZDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(t9.$$.fragment,wl),pFr=i(wl),nc=n(wl,"P",{});var moe=s(nc);_Fr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cU=n(moe,"A",{href:!0});var cwt=s(cU);uFr=r(cwt,"from_pretrained()"),cwt.forEach(t),bFr=r(moe," class method or the "),fU=n(moe,"A",{href:!0});var fwt=s(fU);vFr=r(fwt,"from_config()"),fwt.forEach(t),FFr=r(moe,` class
method.`),moe.forEach(t),TFr=i(wl),a9=n(wl,"P",{});var nVe=s(a9);MFr=r(nVe,"This class cannot be instantiated directly using "),v5e=n(nVe,"CODE",{});var mwt=s(v5e);EFr=r(mwt,"__init__()"),mwt.forEach(t),CFr=r(nVe," (throws an error)."),nVe.forEach(t),wFr=i(wl),Rt=n(wl,"DIV",{class:!0});var aA=s(Rt);T(n9.$$.fragment,aA),AFr=i(aA),F5e=n(aA,"P",{});var gwt=s(F5e);LFr=r(gwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gwt.forEach(t),yFr=i(aA),sc=n(aA,"P",{});var goe=s(sc);xFr=r(goe,`Note:
Loading a model from its configuration file does `),T5e=n(goe,"STRONG",{});var hwt=s(T5e);$Fr=r(hwt,"not"),hwt.forEach(t),kFr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(goe,"A",{href:!0});var pwt=s(mU);SFr=r(pwt,"from_pretrained()"),pwt.forEach(t),RFr=r(goe," to load the model weights."),goe.forEach(t),PFr=i(aA),T(R7.$$.fragment,aA),aA.forEach(t),BFr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(s9.$$.fragment,Al),IFr=i(Al),M5e=n(Al,"P",{});var _wt=s(M5e);NFr=r(_wt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_wt.forEach(t),qFr=i(Al),an=n(Al,"P",{});var nA=s(an);jFr=r(nA,"The model class to instantiate is selected based on the "),E5e=n(nA,"CODE",{});var uwt=s(E5e);DFr=r(uwt,"model_type"),uwt.forEach(t),GFr=r(nA,` property of the config object (either
passed as an argument or loaded from `),C5e=n(nA,"CODE",{});var bwt=s(C5e);OFr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),VFr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(nA,"CODE",{});var vwt=s(w5e);XFr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),zFr=r(nA,":"),nA.forEach(t),WFr=i(Al),ye=n(Al,"UL",{});var Ie=s(ye);P7=n(Ie,"LI",{});var HBe=s(P7);A5e=n(HBe,"STRONG",{});var Fwt=s(A5e);QFr=r(Fwt,"bart"),Fwt.forEach(t),HFr=r(HBe," \u2014 "),gU=n(HBe,"A",{href:!0});var Twt=s(gU);UFr=r(Twt,"TFBartForConditionalGeneration"),Twt.forEach(t),JFr=r(HBe," (BART model)"),HBe.forEach(t),YFr=i(Ie),B7=n(Ie,"LI",{});var UBe=s(B7);L5e=n(UBe,"STRONG",{});var Mwt=s(L5e);KFr=r(Mwt,"blenderbot"),Mwt.forEach(t),ZFr=r(UBe," \u2014 "),hU=n(UBe,"A",{href:!0});var Ewt=s(hU);eTr=r(Ewt,"TFBlenderbotForConditionalGeneration"),Ewt.forEach(t),oTr=r(UBe," (Blenderbot model)"),UBe.forEach(t),rTr=i(Ie),I7=n(Ie,"LI",{});var JBe=s(I7);y5e=n(JBe,"STRONG",{});var Cwt=s(y5e);tTr=r(Cwt,"blenderbot-small"),Cwt.forEach(t),aTr=r(JBe," \u2014 "),pU=n(JBe,"A",{href:!0});var wwt=s(pU);nTr=r(wwt,"TFBlenderbotSmallForConditionalGeneration"),wwt.forEach(t),sTr=r(JBe," (BlenderbotSmall model)"),JBe.forEach(t),lTr=i(Ie),N7=n(Ie,"LI",{});var YBe=s(N7);x5e=n(YBe,"STRONG",{});var Awt=s(x5e);iTr=r(Awt,"encoder-decoder"),Awt.forEach(t),dTr=r(YBe," \u2014 "),_U=n(YBe,"A",{href:!0});var Lwt=s(_U);cTr=r(Lwt,"TFEncoderDecoderModel"),Lwt.forEach(t),fTr=r(YBe," (Encoder decoder model)"),YBe.forEach(t),mTr=i(Ie),q7=n(Ie,"LI",{});var KBe=s(q7);$5e=n(KBe,"STRONG",{});var ywt=s($5e);gTr=r(ywt,"led"),ywt.forEach(t),hTr=r(KBe," \u2014 "),uU=n(KBe,"A",{href:!0});var xwt=s(uU);pTr=r(xwt,"TFLEDForConditionalGeneration"),xwt.forEach(t),_Tr=r(KBe," (LED model)"),KBe.forEach(t),uTr=i(Ie),j7=n(Ie,"LI",{});var ZBe=s(j7);k5e=n(ZBe,"STRONG",{});var $wt=s(k5e);bTr=r($wt,"marian"),$wt.forEach(t),vTr=r(ZBe," \u2014 "),bU=n(ZBe,"A",{href:!0});var kwt=s(bU);FTr=r(kwt,"TFMarianMTModel"),kwt.forEach(t),TTr=r(ZBe," (Marian model)"),ZBe.forEach(t),MTr=i(Ie),D7=n(Ie,"LI",{});var eIe=s(D7);S5e=n(eIe,"STRONG",{});var Swt=s(S5e);ETr=r(Swt,"mbart"),Swt.forEach(t),CTr=r(eIe," \u2014 "),vU=n(eIe,"A",{href:!0});var Rwt=s(vU);wTr=r(Rwt,"TFMBartForConditionalGeneration"),Rwt.forEach(t),ATr=r(eIe," (mBART model)"),eIe.forEach(t),LTr=i(Ie),G7=n(Ie,"LI",{});var oIe=s(G7);R5e=n(oIe,"STRONG",{});var Pwt=s(R5e);yTr=r(Pwt,"mt5"),Pwt.forEach(t),xTr=r(oIe," \u2014 "),FU=n(oIe,"A",{href:!0});var Bwt=s(FU);$Tr=r(Bwt,"TFMT5ForConditionalGeneration"),Bwt.forEach(t),kTr=r(oIe," (MT5 model)"),oIe.forEach(t),STr=i(Ie),O7=n(Ie,"LI",{});var rIe=s(O7);P5e=n(rIe,"STRONG",{});var Iwt=s(P5e);RTr=r(Iwt,"pegasus"),Iwt.forEach(t),PTr=r(rIe," \u2014 "),TU=n(rIe,"A",{href:!0});var Nwt=s(TU);BTr=r(Nwt,"TFPegasusForConditionalGeneration"),Nwt.forEach(t),ITr=r(rIe," (Pegasus model)"),rIe.forEach(t),NTr=i(Ie),V7=n(Ie,"LI",{});var tIe=s(V7);B5e=n(tIe,"STRONG",{});var qwt=s(B5e);qTr=r(qwt,"t5"),qwt.forEach(t),jTr=r(tIe," \u2014 "),MU=n(tIe,"A",{href:!0});var jwt=s(MU);DTr=r(jwt,"TFT5ForConditionalGeneration"),jwt.forEach(t),GTr=r(tIe," (T5 model)"),tIe.forEach(t),Ie.forEach(t),OTr=i(Al),T(X7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),eGe=i(f),lc=n(f,"H2",{class:!0});var sVe=s(lc);z7=n(sVe,"A",{id:!0,class:!0,href:!0});var Dwt=s(z7);I5e=n(Dwt,"SPAN",{});var Gwt=s(I5e);T(l9.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),VTr=i(sVe),N5e=n(sVe,"SPAN",{});var Owt=s(N5e);XTr=r(Owt,"TFAutoModelForSequenceClassification"),Owt.forEach(t),sVe.forEach(t),oGe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(i9.$$.fragment,Ll),zTr=i(Ll),ic=n(Ll,"P",{});var hoe=s(ic);WTr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EU=n(hoe,"A",{href:!0});var Vwt=s(EU);QTr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),HTr=r(hoe," class method or the "),CU=n(hoe,"A",{href:!0});var Xwt=s(CU);UTr=r(Xwt,"from_config()"),Xwt.forEach(t),JTr=r(hoe,` class
method.`),hoe.forEach(t),YTr=i(Ll),d9=n(Ll,"P",{});var lVe=s(d9);KTr=r(lVe,"This class cannot be instantiated directly using "),q5e=n(lVe,"CODE",{});var zwt=s(q5e);ZTr=r(zwt,"__init__()"),zwt.forEach(t),e7r=r(lVe," (throws an error)."),lVe.forEach(t),o7r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var sA=s(Pt);T(c9.$$.fragment,sA),r7r=i(sA),j5e=n(sA,"P",{});var Wwt=s(j5e);t7r=r(Wwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wwt.forEach(t),a7r=i(sA),dc=n(sA,"P",{});var poe=s(dc);n7r=r(poe,`Note:
Loading a model from its configuration file does `),D5e=n(poe,"STRONG",{});var Qwt=s(D5e);s7r=r(Qwt,"not"),Qwt.forEach(t),l7r=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(poe,"A",{href:!0});var Hwt=s(wU);i7r=r(Hwt,"from_pretrained()"),Hwt.forEach(t),d7r=r(poe," to load the model weights."),poe.forEach(t),c7r=i(sA),T(W7.$$.fragment,sA),sA.forEach(t),f7r=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(f9.$$.fragment,yl),m7r=i(yl),G5e=n(yl,"P",{});var Uwt=s(G5e);g7r=r(Uwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uwt.forEach(t),h7r=i(yl),nn=n(yl,"P",{});var lA=s(nn);p7r=r(lA,"The model class to instantiate is selected based on the "),O5e=n(lA,"CODE",{});var Jwt=s(O5e);_7r=r(Jwt,"model_type"),Jwt.forEach(t),u7r=r(lA,` property of the config object (either
passed as an argument or loaded from `),V5e=n(lA,"CODE",{});var Ywt=s(V5e);b7r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),v7r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(lA,"CODE",{});var Kwt=s(X5e);F7r=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),T7r=r(lA,":"),lA.forEach(t),M7r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);Q7=n(ae,"LI",{});var aIe=s(Q7);z5e=n(aIe,"STRONG",{});var Zwt=s(z5e);E7r=r(Zwt,"albert"),Zwt.forEach(t),C7r=r(aIe," \u2014 "),AU=n(aIe,"A",{href:!0});var e6t=s(AU);w7r=r(e6t,"TFAlbertForSequenceClassification"),e6t.forEach(t),A7r=r(aIe," (ALBERT model)"),aIe.forEach(t),L7r=i(ae),H7=n(ae,"LI",{});var nIe=s(H7);W5e=n(nIe,"STRONG",{});var o6t=s(W5e);y7r=r(o6t,"bert"),o6t.forEach(t),x7r=r(nIe," \u2014 "),LU=n(nIe,"A",{href:!0});var r6t=s(LU);$7r=r(r6t,"TFBertForSequenceClassification"),r6t.forEach(t),k7r=r(nIe," (BERT model)"),nIe.forEach(t),S7r=i(ae),U7=n(ae,"LI",{});var sIe=s(U7);Q5e=n(sIe,"STRONG",{});var t6t=s(Q5e);R7r=r(t6t,"camembert"),t6t.forEach(t),P7r=r(sIe," \u2014 "),yU=n(sIe,"A",{href:!0});var a6t=s(yU);B7r=r(a6t,"TFCamembertForSequenceClassification"),a6t.forEach(t),I7r=r(sIe," (CamemBERT model)"),sIe.forEach(t),N7r=i(ae),J7=n(ae,"LI",{});var lIe=s(J7);H5e=n(lIe,"STRONG",{});var n6t=s(H5e);q7r=r(n6t,"convbert"),n6t.forEach(t),j7r=r(lIe," \u2014 "),xU=n(lIe,"A",{href:!0});var s6t=s(xU);D7r=r(s6t,"TFConvBertForSequenceClassification"),s6t.forEach(t),G7r=r(lIe," (ConvBERT model)"),lIe.forEach(t),O7r=i(ae),Y7=n(ae,"LI",{});var iIe=s(Y7);U5e=n(iIe,"STRONG",{});var l6t=s(U5e);V7r=r(l6t,"ctrl"),l6t.forEach(t),X7r=r(iIe," \u2014 "),$U=n(iIe,"A",{href:!0});var i6t=s($U);z7r=r(i6t,"TFCTRLForSequenceClassification"),i6t.forEach(t),W7r=r(iIe," (CTRL model)"),iIe.forEach(t),Q7r=i(ae),K7=n(ae,"LI",{});var dIe=s(K7);J5e=n(dIe,"STRONG",{});var d6t=s(J5e);H7r=r(d6t,"deberta"),d6t.forEach(t),U7r=r(dIe," \u2014 "),kU=n(dIe,"A",{href:!0});var c6t=s(kU);J7r=r(c6t,"TFDebertaForSequenceClassification"),c6t.forEach(t),Y7r=r(dIe," (DeBERTa model)"),dIe.forEach(t),K7r=i(ae),Z7=n(ae,"LI",{});var cIe=s(Z7);Y5e=n(cIe,"STRONG",{});var f6t=s(Y5e);Z7r=r(f6t,"deberta-v2"),f6t.forEach(t),eMr=r(cIe," \u2014 "),SU=n(cIe,"A",{href:!0});var m6t=s(SU);oMr=r(m6t,"TFDebertaV2ForSequenceClassification"),m6t.forEach(t),rMr=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),tMr=i(ae),eM=n(ae,"LI",{});var fIe=s(eM);K5e=n(fIe,"STRONG",{});var g6t=s(K5e);aMr=r(g6t,"distilbert"),g6t.forEach(t),nMr=r(fIe," \u2014 "),RU=n(fIe,"A",{href:!0});var h6t=s(RU);sMr=r(h6t,"TFDistilBertForSequenceClassification"),h6t.forEach(t),lMr=r(fIe," (DistilBERT model)"),fIe.forEach(t),iMr=i(ae),oM=n(ae,"LI",{});var mIe=s(oM);Z5e=n(mIe,"STRONG",{});var p6t=s(Z5e);dMr=r(p6t,"electra"),p6t.forEach(t),cMr=r(mIe," \u2014 "),PU=n(mIe,"A",{href:!0});var _6t=s(PU);fMr=r(_6t,"TFElectraForSequenceClassification"),_6t.forEach(t),mMr=r(mIe," (ELECTRA model)"),mIe.forEach(t),gMr=i(ae),rM=n(ae,"LI",{});var gIe=s(rM);e3e=n(gIe,"STRONG",{});var u6t=s(e3e);hMr=r(u6t,"flaubert"),u6t.forEach(t),pMr=r(gIe," \u2014 "),BU=n(gIe,"A",{href:!0});var b6t=s(BU);_Mr=r(b6t,"TFFlaubertForSequenceClassification"),b6t.forEach(t),uMr=r(gIe," (FlauBERT model)"),gIe.forEach(t),bMr=i(ae),tM=n(ae,"LI",{});var hIe=s(tM);o3e=n(hIe,"STRONG",{});var v6t=s(o3e);vMr=r(v6t,"funnel"),v6t.forEach(t),FMr=r(hIe," \u2014 "),IU=n(hIe,"A",{href:!0});var F6t=s(IU);TMr=r(F6t,"TFFunnelForSequenceClassification"),F6t.forEach(t),MMr=r(hIe," (Funnel Transformer model)"),hIe.forEach(t),EMr=i(ae),aM=n(ae,"LI",{});var pIe=s(aM);r3e=n(pIe,"STRONG",{});var T6t=s(r3e);CMr=r(T6t,"gpt2"),T6t.forEach(t),wMr=r(pIe," \u2014 "),NU=n(pIe,"A",{href:!0});var M6t=s(NU);AMr=r(M6t,"TFGPT2ForSequenceClassification"),M6t.forEach(t),LMr=r(pIe," (OpenAI GPT-2 model)"),pIe.forEach(t),yMr=i(ae),nM=n(ae,"LI",{});var _Ie=s(nM);t3e=n(_Ie,"STRONG",{});var E6t=s(t3e);xMr=r(E6t,"gptj"),E6t.forEach(t),$Mr=r(_Ie," \u2014 "),qU=n(_Ie,"A",{href:!0});var C6t=s(qU);kMr=r(C6t,"TFGPTJForSequenceClassification"),C6t.forEach(t),SMr=r(_Ie," (GPT-J model)"),_Ie.forEach(t),RMr=i(ae),sM=n(ae,"LI",{});var uIe=s(sM);a3e=n(uIe,"STRONG",{});var w6t=s(a3e);PMr=r(w6t,"layoutlm"),w6t.forEach(t),BMr=r(uIe," \u2014 "),jU=n(uIe,"A",{href:!0});var A6t=s(jU);IMr=r(A6t,"TFLayoutLMForSequenceClassification"),A6t.forEach(t),NMr=r(uIe," (LayoutLM model)"),uIe.forEach(t),qMr=i(ae),lM=n(ae,"LI",{});var bIe=s(lM);n3e=n(bIe,"STRONG",{});var L6t=s(n3e);jMr=r(L6t,"longformer"),L6t.forEach(t),DMr=r(bIe," \u2014 "),DU=n(bIe,"A",{href:!0});var y6t=s(DU);GMr=r(y6t,"TFLongformerForSequenceClassification"),y6t.forEach(t),OMr=r(bIe," (Longformer model)"),bIe.forEach(t),VMr=i(ae),iM=n(ae,"LI",{});var vIe=s(iM);s3e=n(vIe,"STRONG",{});var x6t=s(s3e);XMr=r(x6t,"mobilebert"),x6t.forEach(t),zMr=r(vIe," \u2014 "),GU=n(vIe,"A",{href:!0});var $6t=s(GU);WMr=r($6t,"TFMobileBertForSequenceClassification"),$6t.forEach(t),QMr=r(vIe," (MobileBERT model)"),vIe.forEach(t),HMr=i(ae),dM=n(ae,"LI",{});var FIe=s(dM);l3e=n(FIe,"STRONG",{});var k6t=s(l3e);UMr=r(k6t,"mpnet"),k6t.forEach(t),JMr=r(FIe," \u2014 "),OU=n(FIe,"A",{href:!0});var S6t=s(OU);YMr=r(S6t,"TFMPNetForSequenceClassification"),S6t.forEach(t),KMr=r(FIe," (MPNet model)"),FIe.forEach(t),ZMr=i(ae),cM=n(ae,"LI",{});var TIe=s(cM);i3e=n(TIe,"STRONG",{});var R6t=s(i3e);eEr=r(R6t,"openai-gpt"),R6t.forEach(t),oEr=r(TIe," \u2014 "),VU=n(TIe,"A",{href:!0});var P6t=s(VU);rEr=r(P6t,"TFOpenAIGPTForSequenceClassification"),P6t.forEach(t),tEr=r(TIe," (OpenAI GPT model)"),TIe.forEach(t),aEr=i(ae),fM=n(ae,"LI",{});var MIe=s(fM);d3e=n(MIe,"STRONG",{});var B6t=s(d3e);nEr=r(B6t,"rembert"),B6t.forEach(t),sEr=r(MIe," \u2014 "),XU=n(MIe,"A",{href:!0});var I6t=s(XU);lEr=r(I6t,"TFRemBertForSequenceClassification"),I6t.forEach(t),iEr=r(MIe," (RemBERT model)"),MIe.forEach(t),dEr=i(ae),mM=n(ae,"LI",{});var EIe=s(mM);c3e=n(EIe,"STRONG",{});var N6t=s(c3e);cEr=r(N6t,"roberta"),N6t.forEach(t),fEr=r(EIe," \u2014 "),zU=n(EIe,"A",{href:!0});var q6t=s(zU);mEr=r(q6t,"TFRobertaForSequenceClassification"),q6t.forEach(t),gEr=r(EIe," (RoBERTa model)"),EIe.forEach(t),hEr=i(ae),gM=n(ae,"LI",{});var CIe=s(gM);f3e=n(CIe,"STRONG",{});var j6t=s(f3e);pEr=r(j6t,"roformer"),j6t.forEach(t),_Er=r(CIe," \u2014 "),WU=n(CIe,"A",{href:!0});var D6t=s(WU);uEr=r(D6t,"TFRoFormerForSequenceClassification"),D6t.forEach(t),bEr=r(CIe," (RoFormer model)"),CIe.forEach(t),vEr=i(ae),hM=n(ae,"LI",{});var wIe=s(hM);m3e=n(wIe,"STRONG",{});var G6t=s(m3e);FEr=r(G6t,"tapas"),G6t.forEach(t),TEr=r(wIe," \u2014 "),QU=n(wIe,"A",{href:!0});var O6t=s(QU);MEr=r(O6t,"TFTapasForSequenceClassification"),O6t.forEach(t),EEr=r(wIe," (TAPAS model)"),wIe.forEach(t),CEr=i(ae),pM=n(ae,"LI",{});var AIe=s(pM);g3e=n(AIe,"STRONG",{});var V6t=s(g3e);wEr=r(V6t,"transfo-xl"),V6t.forEach(t),AEr=r(AIe," \u2014 "),HU=n(AIe,"A",{href:!0});var X6t=s(HU);LEr=r(X6t,"TFTransfoXLForSequenceClassification"),X6t.forEach(t),yEr=r(AIe," (Transformer-XL model)"),AIe.forEach(t),xEr=i(ae),_M=n(ae,"LI",{});var LIe=s(_M);h3e=n(LIe,"STRONG",{});var z6t=s(h3e);$Er=r(z6t,"xlm"),z6t.forEach(t),kEr=r(LIe," \u2014 "),UU=n(LIe,"A",{href:!0});var W6t=s(UU);SEr=r(W6t,"TFXLMForSequenceClassification"),W6t.forEach(t),REr=r(LIe," (XLM model)"),LIe.forEach(t),PEr=i(ae),uM=n(ae,"LI",{});var yIe=s(uM);p3e=n(yIe,"STRONG",{});var Q6t=s(p3e);BEr=r(Q6t,"xlm-roberta"),Q6t.forEach(t),IEr=r(yIe," \u2014 "),JU=n(yIe,"A",{href:!0});var H6t=s(JU);NEr=r(H6t,"TFXLMRobertaForSequenceClassification"),H6t.forEach(t),qEr=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),jEr=i(ae),bM=n(ae,"LI",{});var xIe=s(bM);_3e=n(xIe,"STRONG",{});var U6t=s(_3e);DEr=r(U6t,"xlnet"),U6t.forEach(t),GEr=r(xIe," \u2014 "),YU=n(xIe,"A",{href:!0});var J6t=s(YU);OEr=r(J6t,"TFXLNetForSequenceClassification"),J6t.forEach(t),VEr=r(xIe," (XLNet model)"),xIe.forEach(t),ae.forEach(t),XEr=i(yl),T(vM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),rGe=i(f),cc=n(f,"H2",{class:!0});var iVe=s(cc);FM=n(iVe,"A",{id:!0,class:!0,href:!0});var Y6t=s(FM);u3e=n(Y6t,"SPAN",{});var K6t=s(u3e);T(m9.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),zEr=i(iVe),b3e=n(iVe,"SPAN",{});var Z6t=s(b3e);WEr=r(Z6t,"TFAutoModelForMultipleChoice"),Z6t.forEach(t),iVe.forEach(t),tGe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(g9.$$.fragment,xl),QEr=i(xl),fc=n(xl,"P",{});var _oe=s(fc);HEr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KU=n(_oe,"A",{href:!0});var eAt=s(KU);UEr=r(eAt,"from_pretrained()"),eAt.forEach(t),JEr=r(_oe," class method or the "),ZU=n(_oe,"A",{href:!0});var oAt=s(ZU);YEr=r(oAt,"from_config()"),oAt.forEach(t),KEr=r(_oe,` class
method.`),_oe.forEach(t),ZEr=i(xl),h9=n(xl,"P",{});var dVe=s(h9);eCr=r(dVe,"This class cannot be instantiated directly using "),v3e=n(dVe,"CODE",{});var rAt=s(v3e);oCr=r(rAt,"__init__()"),rAt.forEach(t),rCr=r(dVe," (throws an error)."),dVe.forEach(t),tCr=i(xl),Bt=n(xl,"DIV",{class:!0});var iA=s(Bt);T(p9.$$.fragment,iA),aCr=i(iA),F3e=n(iA,"P",{});var tAt=s(F3e);nCr=r(tAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tAt.forEach(t),sCr=i(iA),mc=n(iA,"P",{});var uoe=s(mc);lCr=r(uoe,`Note:
Loading a model from its configuration file does `),T3e=n(uoe,"STRONG",{});var aAt=s(T3e);iCr=r(aAt,"not"),aAt.forEach(t),dCr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(uoe,"A",{href:!0});var nAt=s(eJ);cCr=r(nAt,"from_pretrained()"),nAt.forEach(t),fCr=r(uoe," to load the model weights."),uoe.forEach(t),mCr=i(iA),T(TM.$$.fragment,iA),iA.forEach(t),gCr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(_9.$$.fragment,$l),hCr=i($l),M3e=n($l,"P",{});var sAt=s(M3e);pCr=r(sAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sAt.forEach(t),_Cr=i($l),sn=n($l,"P",{});var dA=s(sn);uCr=r(dA,"The model class to instantiate is selected based on the "),E3e=n(dA,"CODE",{});var lAt=s(E3e);bCr=r(lAt,"model_type"),lAt.forEach(t),vCr=r(dA,` property of the config object (either
passed as an argument or loaded from `),C3e=n(dA,"CODE",{});var iAt=s(C3e);FCr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),TCr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(dA,"CODE",{});var dAt=s(w3e);MCr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),ECr=r(dA,":"),dA.forEach(t),CCr=i($l),pe=n($l,"UL",{});var ve=s(pe);MM=n(ve,"LI",{});var $Ie=s(MM);A3e=n($Ie,"STRONG",{});var cAt=s(A3e);wCr=r(cAt,"albert"),cAt.forEach(t),ACr=r($Ie," \u2014 "),oJ=n($Ie,"A",{href:!0});var fAt=s(oJ);LCr=r(fAt,"TFAlbertForMultipleChoice"),fAt.forEach(t),yCr=r($Ie," (ALBERT model)"),$Ie.forEach(t),xCr=i(ve),EM=n(ve,"LI",{});var kIe=s(EM);L3e=n(kIe,"STRONG",{});var mAt=s(L3e);$Cr=r(mAt,"bert"),mAt.forEach(t),kCr=r(kIe," \u2014 "),rJ=n(kIe,"A",{href:!0});var gAt=s(rJ);SCr=r(gAt,"TFBertForMultipleChoice"),gAt.forEach(t),RCr=r(kIe," (BERT model)"),kIe.forEach(t),PCr=i(ve),CM=n(ve,"LI",{});var SIe=s(CM);y3e=n(SIe,"STRONG",{});var hAt=s(y3e);BCr=r(hAt,"camembert"),hAt.forEach(t),ICr=r(SIe," \u2014 "),tJ=n(SIe,"A",{href:!0});var pAt=s(tJ);NCr=r(pAt,"TFCamembertForMultipleChoice"),pAt.forEach(t),qCr=r(SIe," (CamemBERT model)"),SIe.forEach(t),jCr=i(ve),wM=n(ve,"LI",{});var RIe=s(wM);x3e=n(RIe,"STRONG",{});var _At=s(x3e);DCr=r(_At,"convbert"),_At.forEach(t),GCr=r(RIe," \u2014 "),aJ=n(RIe,"A",{href:!0});var uAt=s(aJ);OCr=r(uAt,"TFConvBertForMultipleChoice"),uAt.forEach(t),VCr=r(RIe," (ConvBERT model)"),RIe.forEach(t),XCr=i(ve),AM=n(ve,"LI",{});var PIe=s(AM);$3e=n(PIe,"STRONG",{});var bAt=s($3e);zCr=r(bAt,"distilbert"),bAt.forEach(t),WCr=r(PIe," \u2014 "),nJ=n(PIe,"A",{href:!0});var vAt=s(nJ);QCr=r(vAt,"TFDistilBertForMultipleChoice"),vAt.forEach(t),HCr=r(PIe," (DistilBERT model)"),PIe.forEach(t),UCr=i(ve),LM=n(ve,"LI",{});var BIe=s(LM);k3e=n(BIe,"STRONG",{});var FAt=s(k3e);JCr=r(FAt,"electra"),FAt.forEach(t),YCr=r(BIe," \u2014 "),sJ=n(BIe,"A",{href:!0});var TAt=s(sJ);KCr=r(TAt,"TFElectraForMultipleChoice"),TAt.forEach(t),ZCr=r(BIe," (ELECTRA model)"),BIe.forEach(t),e0r=i(ve),yM=n(ve,"LI",{});var IIe=s(yM);S3e=n(IIe,"STRONG",{});var MAt=s(S3e);o0r=r(MAt,"flaubert"),MAt.forEach(t),r0r=r(IIe," \u2014 "),lJ=n(IIe,"A",{href:!0});var EAt=s(lJ);t0r=r(EAt,"TFFlaubertForMultipleChoice"),EAt.forEach(t),a0r=r(IIe," (FlauBERT model)"),IIe.forEach(t),n0r=i(ve),xM=n(ve,"LI",{});var NIe=s(xM);R3e=n(NIe,"STRONG",{});var CAt=s(R3e);s0r=r(CAt,"funnel"),CAt.forEach(t),l0r=r(NIe," \u2014 "),iJ=n(NIe,"A",{href:!0});var wAt=s(iJ);i0r=r(wAt,"TFFunnelForMultipleChoice"),wAt.forEach(t),d0r=r(NIe," (Funnel Transformer model)"),NIe.forEach(t),c0r=i(ve),$M=n(ve,"LI",{});var qIe=s($M);P3e=n(qIe,"STRONG",{});var AAt=s(P3e);f0r=r(AAt,"longformer"),AAt.forEach(t),m0r=r(qIe," \u2014 "),dJ=n(qIe,"A",{href:!0});var LAt=s(dJ);g0r=r(LAt,"TFLongformerForMultipleChoice"),LAt.forEach(t),h0r=r(qIe," (Longformer model)"),qIe.forEach(t),p0r=i(ve),kM=n(ve,"LI",{});var jIe=s(kM);B3e=n(jIe,"STRONG",{});var yAt=s(B3e);_0r=r(yAt,"mobilebert"),yAt.forEach(t),u0r=r(jIe," \u2014 "),cJ=n(jIe,"A",{href:!0});var xAt=s(cJ);b0r=r(xAt,"TFMobileBertForMultipleChoice"),xAt.forEach(t),v0r=r(jIe," (MobileBERT model)"),jIe.forEach(t),F0r=i(ve),SM=n(ve,"LI",{});var DIe=s(SM);I3e=n(DIe,"STRONG",{});var $At=s(I3e);T0r=r($At,"mpnet"),$At.forEach(t),M0r=r(DIe," \u2014 "),fJ=n(DIe,"A",{href:!0});var kAt=s(fJ);E0r=r(kAt,"TFMPNetForMultipleChoice"),kAt.forEach(t),C0r=r(DIe," (MPNet model)"),DIe.forEach(t),w0r=i(ve),RM=n(ve,"LI",{});var GIe=s(RM);N3e=n(GIe,"STRONG",{});var SAt=s(N3e);A0r=r(SAt,"rembert"),SAt.forEach(t),L0r=r(GIe," \u2014 "),mJ=n(GIe,"A",{href:!0});var RAt=s(mJ);y0r=r(RAt,"TFRemBertForMultipleChoice"),RAt.forEach(t),x0r=r(GIe," (RemBERT model)"),GIe.forEach(t),$0r=i(ve),PM=n(ve,"LI",{});var OIe=s(PM);q3e=n(OIe,"STRONG",{});var PAt=s(q3e);k0r=r(PAt,"roberta"),PAt.forEach(t),S0r=r(OIe," \u2014 "),gJ=n(OIe,"A",{href:!0});var BAt=s(gJ);R0r=r(BAt,"TFRobertaForMultipleChoice"),BAt.forEach(t),P0r=r(OIe," (RoBERTa model)"),OIe.forEach(t),B0r=i(ve),BM=n(ve,"LI",{});var VIe=s(BM);j3e=n(VIe,"STRONG",{});var IAt=s(j3e);I0r=r(IAt,"roformer"),IAt.forEach(t),N0r=r(VIe," \u2014 "),hJ=n(VIe,"A",{href:!0});var NAt=s(hJ);q0r=r(NAt,"TFRoFormerForMultipleChoice"),NAt.forEach(t),j0r=r(VIe," (RoFormer model)"),VIe.forEach(t),D0r=i(ve),IM=n(ve,"LI",{});var XIe=s(IM);D3e=n(XIe,"STRONG",{});var qAt=s(D3e);G0r=r(qAt,"xlm"),qAt.forEach(t),O0r=r(XIe," \u2014 "),pJ=n(XIe,"A",{href:!0});var jAt=s(pJ);V0r=r(jAt,"TFXLMForMultipleChoice"),jAt.forEach(t),X0r=r(XIe," (XLM model)"),XIe.forEach(t),z0r=i(ve),NM=n(ve,"LI",{});var zIe=s(NM);G3e=n(zIe,"STRONG",{});var DAt=s(G3e);W0r=r(DAt,"xlm-roberta"),DAt.forEach(t),Q0r=r(zIe," \u2014 "),_J=n(zIe,"A",{href:!0});var GAt=s(_J);H0r=r(GAt,"TFXLMRobertaForMultipleChoice"),GAt.forEach(t),U0r=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),J0r=i(ve),qM=n(ve,"LI",{});var WIe=s(qM);O3e=n(WIe,"STRONG",{});var OAt=s(O3e);Y0r=r(OAt,"xlnet"),OAt.forEach(t),K0r=r(WIe," \u2014 "),uJ=n(WIe,"A",{href:!0});var VAt=s(uJ);Z0r=r(VAt,"TFXLNetForMultipleChoice"),VAt.forEach(t),ewr=r(WIe," (XLNet model)"),WIe.forEach(t),ve.forEach(t),owr=i($l),T(jM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),aGe=i(f),gc=n(f,"H2",{class:!0});var cVe=s(gc);DM=n(cVe,"A",{id:!0,class:!0,href:!0});var XAt=s(DM);V3e=n(XAt,"SPAN",{});var zAt=s(V3e);T(u9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),rwr=i(cVe),X3e=n(cVe,"SPAN",{});var WAt=s(X3e);twr=r(WAt,"TFAutoModelForNextSentencePrediction"),WAt.forEach(t),cVe.forEach(t),nGe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(b9.$$.fragment,kl),awr=i(kl),hc=n(kl,"P",{});var boe=s(hc);nwr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bJ=n(boe,"A",{href:!0});var QAt=s(bJ);swr=r(QAt,"from_pretrained()"),QAt.forEach(t),lwr=r(boe," class method or the "),vJ=n(boe,"A",{href:!0});var HAt=s(vJ);iwr=r(HAt,"from_config()"),HAt.forEach(t),dwr=r(boe,` class
method.`),boe.forEach(t),cwr=i(kl),v9=n(kl,"P",{});var fVe=s(v9);fwr=r(fVe,"This class cannot be instantiated directly using "),z3e=n(fVe,"CODE",{});var UAt=s(z3e);mwr=r(UAt,"__init__()"),UAt.forEach(t),gwr=r(fVe," (throws an error)."),fVe.forEach(t),hwr=i(kl),It=n(kl,"DIV",{class:!0});var cA=s(It);T(F9.$$.fragment,cA),pwr=i(cA),W3e=n(cA,"P",{});var JAt=s(W3e);_wr=r(JAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JAt.forEach(t),uwr=i(cA),pc=n(cA,"P",{});var voe=s(pc);bwr=r(voe,`Note:
Loading a model from its configuration file does `),Q3e=n(voe,"STRONG",{});var YAt=s(Q3e);vwr=r(YAt,"not"),YAt.forEach(t),Fwr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(voe,"A",{href:!0});var KAt=s(FJ);Twr=r(KAt,"from_pretrained()"),KAt.forEach(t),Mwr=r(voe," to load the model weights."),voe.forEach(t),Ewr=i(cA),T(GM.$$.fragment,cA),cA.forEach(t),Cwr=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(T9.$$.fragment,Sl),wwr=i(Sl),H3e=n(Sl,"P",{});var ZAt=s(H3e);Awr=r(ZAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZAt.forEach(t),Lwr=i(Sl),ln=n(Sl,"P",{});var fA=s(ln);ywr=r(fA,"The model class to instantiate is selected based on the "),U3e=n(fA,"CODE",{});var eLt=s(U3e);xwr=r(eLt,"model_type"),eLt.forEach(t),$wr=r(fA,` property of the config object (either
passed as an argument or loaded from `),J3e=n(fA,"CODE",{});var oLt=s(J3e);kwr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),Swr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(fA,"CODE",{});var rLt=s(Y3e);Rwr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),Pwr=r(fA,":"),fA.forEach(t),Bwr=i(Sl),M9=n(Sl,"UL",{});var mVe=s(M9);OM=n(mVe,"LI",{});var QIe=s(OM);K3e=n(QIe,"STRONG",{});var tLt=s(K3e);Iwr=r(tLt,"bert"),tLt.forEach(t),Nwr=r(QIe," \u2014 "),TJ=n(QIe,"A",{href:!0});var aLt=s(TJ);qwr=r(aLt,"TFBertForNextSentencePrediction"),aLt.forEach(t),jwr=r(QIe," (BERT model)"),QIe.forEach(t),Dwr=i(mVe),VM=n(mVe,"LI",{});var HIe=s(VM);Z3e=n(HIe,"STRONG",{});var nLt=s(Z3e);Gwr=r(nLt,"mobilebert"),nLt.forEach(t),Owr=r(HIe," \u2014 "),MJ=n(HIe,"A",{href:!0});var sLt=s(MJ);Vwr=r(sLt,"TFMobileBertForNextSentencePrediction"),sLt.forEach(t),Xwr=r(HIe," (MobileBERT model)"),HIe.forEach(t),mVe.forEach(t),zwr=i(Sl),T(XM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),sGe=i(f),_c=n(f,"H2",{class:!0});var gVe=s(_c);zM=n(gVe,"A",{id:!0,class:!0,href:!0});var lLt=s(zM);eFe=n(lLt,"SPAN",{});var iLt=s(eFe);T(E9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),Wwr=i(gVe),oFe=n(gVe,"SPAN",{});var dLt=s(oFe);Qwr=r(dLt,"TFAutoModelForTableQuestionAnswering"),dLt.forEach(t),gVe.forEach(t),lGe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(C9.$$.fragment,Rl),Hwr=i(Rl),uc=n(Rl,"P",{});var Foe=s(uc);Uwr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EJ=n(Foe,"A",{href:!0});var cLt=s(EJ);Jwr=r(cLt,"from_pretrained()"),cLt.forEach(t),Ywr=r(Foe," class method or the "),CJ=n(Foe,"A",{href:!0});var fLt=s(CJ);Kwr=r(fLt,"from_config()"),fLt.forEach(t),Zwr=r(Foe,` class
method.`),Foe.forEach(t),e6r=i(Rl),w9=n(Rl,"P",{});var hVe=s(w9);o6r=r(hVe,"This class cannot be instantiated directly using "),rFe=n(hVe,"CODE",{});var mLt=s(rFe);r6r=r(mLt,"__init__()"),mLt.forEach(t),t6r=r(hVe," (throws an error)."),hVe.forEach(t),a6r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var mA=s(Nt);T(A9.$$.fragment,mA),n6r=i(mA),tFe=n(mA,"P",{});var gLt=s(tFe);s6r=r(gLt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gLt.forEach(t),l6r=i(mA),bc=n(mA,"P",{});var Toe=s(bc);i6r=r(Toe,`Note:
Loading a model from its configuration file does `),aFe=n(Toe,"STRONG",{});var hLt=s(aFe);d6r=r(hLt,"not"),hLt.forEach(t),c6r=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(Toe,"A",{href:!0});var pLt=s(wJ);f6r=r(pLt,"from_pretrained()"),pLt.forEach(t),m6r=r(Toe," to load the model weights."),Toe.forEach(t),g6r=i(mA),T(WM.$$.fragment,mA),mA.forEach(t),h6r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(L9.$$.fragment,Pl),p6r=i(Pl),nFe=n(Pl,"P",{});var _Lt=s(nFe);_6r=r(_Lt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Lt.forEach(t),u6r=i(Pl),dn=n(Pl,"P",{});var gA=s(dn);b6r=r(gA,"The model class to instantiate is selected based on the "),sFe=n(gA,"CODE",{});var uLt=s(sFe);v6r=r(uLt,"model_type"),uLt.forEach(t),F6r=r(gA,` property of the config object (either
passed as an argument or loaded from `),lFe=n(gA,"CODE",{});var bLt=s(lFe);T6r=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),M6r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(gA,"CODE",{});var vLt=s(iFe);E6r=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),C6r=r(gA,":"),gA.forEach(t),w6r=i(Pl),dFe=n(Pl,"UL",{});var FLt=s(dFe);QM=n(FLt,"LI",{});var UIe=s(QM);cFe=n(UIe,"STRONG",{});var TLt=s(cFe);A6r=r(TLt,"tapas"),TLt.forEach(t),L6r=r(UIe," \u2014 "),AJ=n(UIe,"A",{href:!0});var MLt=s(AJ);y6r=r(MLt,"TFTapasForQuestionAnswering"),MLt.forEach(t),x6r=r(UIe," (TAPAS model)"),UIe.forEach(t),FLt.forEach(t),$6r=i(Pl),T(HM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),iGe=i(f),vc=n(f,"H2",{class:!0});var pVe=s(vc);UM=n(pVe,"A",{id:!0,class:!0,href:!0});var ELt=s(UM);fFe=n(ELt,"SPAN",{});var CLt=s(fFe);T(y9.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),k6r=i(pVe),mFe=n(pVe,"SPAN",{});var wLt=s(mFe);S6r=r(wLt,"TFAutoModelForTokenClassification"),wLt.forEach(t),pVe.forEach(t),dGe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(x9.$$.fragment,Bl),R6r=i(Bl),Fc=n(Bl,"P",{});var Moe=s(Fc);P6r=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LJ=n(Moe,"A",{href:!0});var ALt=s(LJ);B6r=r(ALt,"from_pretrained()"),ALt.forEach(t),I6r=r(Moe," class method or the "),yJ=n(Moe,"A",{href:!0});var LLt=s(yJ);N6r=r(LLt,"from_config()"),LLt.forEach(t),q6r=r(Moe,` class
method.`),Moe.forEach(t),j6r=i(Bl),$9=n(Bl,"P",{});var _Ve=s($9);D6r=r(_Ve,"This class cannot be instantiated directly using "),gFe=n(_Ve,"CODE",{});var yLt=s(gFe);G6r=r(yLt,"__init__()"),yLt.forEach(t),O6r=r(_Ve," (throws an error)."),_Ve.forEach(t),V6r=i(Bl),qt=n(Bl,"DIV",{class:!0});var hA=s(qt);T(k9.$$.fragment,hA),X6r=i(hA),hFe=n(hA,"P",{});var xLt=s(hFe);z6r=r(xLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xLt.forEach(t),W6r=i(hA),Tc=n(hA,"P",{});var Eoe=s(Tc);Q6r=r(Eoe,`Note:
Loading a model from its configuration file does `),pFe=n(Eoe,"STRONG",{});var $Lt=s(pFe);H6r=r($Lt,"not"),$Lt.forEach(t),U6r=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Eoe,"A",{href:!0});var kLt=s(xJ);J6r=r(kLt,"from_pretrained()"),kLt.forEach(t),Y6r=r(Eoe," to load the model weights."),Eoe.forEach(t),K6r=i(hA),T(JM.$$.fragment,hA),hA.forEach(t),Z6r=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(S9.$$.fragment,Il),eAr=i(Il),_Fe=n(Il,"P",{});var SLt=s(_Fe);oAr=r(SLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SLt.forEach(t),rAr=i(Il),cn=n(Il,"P",{});var pA=s(cn);tAr=r(pA,"The model class to instantiate is selected based on the "),uFe=n(pA,"CODE",{});var RLt=s(uFe);aAr=r(RLt,"model_type"),RLt.forEach(t),nAr=r(pA,` property of the config object (either
passed as an argument or loaded from `),bFe=n(pA,"CODE",{});var PLt=s(bFe);sAr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),lAr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(pA,"CODE",{});var BLt=s(vFe);iAr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),dAr=r(pA,":"),pA.forEach(t),cAr=i(Il),de=n(Il,"UL",{});var me=s(de);YM=n(me,"LI",{});var JIe=s(YM);FFe=n(JIe,"STRONG",{});var ILt=s(FFe);fAr=r(ILt,"albert"),ILt.forEach(t),mAr=r(JIe," \u2014 "),$J=n(JIe,"A",{href:!0});var NLt=s($J);gAr=r(NLt,"TFAlbertForTokenClassification"),NLt.forEach(t),hAr=r(JIe," (ALBERT model)"),JIe.forEach(t),pAr=i(me),KM=n(me,"LI",{});var YIe=s(KM);TFe=n(YIe,"STRONG",{});var qLt=s(TFe);_Ar=r(qLt,"bert"),qLt.forEach(t),uAr=r(YIe," \u2014 "),kJ=n(YIe,"A",{href:!0});var jLt=s(kJ);bAr=r(jLt,"TFBertForTokenClassification"),jLt.forEach(t),vAr=r(YIe," (BERT model)"),YIe.forEach(t),FAr=i(me),ZM=n(me,"LI",{});var KIe=s(ZM);MFe=n(KIe,"STRONG",{});var DLt=s(MFe);TAr=r(DLt,"camembert"),DLt.forEach(t),MAr=r(KIe," \u2014 "),SJ=n(KIe,"A",{href:!0});var GLt=s(SJ);EAr=r(GLt,"TFCamembertForTokenClassification"),GLt.forEach(t),CAr=r(KIe," (CamemBERT model)"),KIe.forEach(t),wAr=i(me),eE=n(me,"LI",{});var ZIe=s(eE);EFe=n(ZIe,"STRONG",{});var OLt=s(EFe);AAr=r(OLt,"convbert"),OLt.forEach(t),LAr=r(ZIe," \u2014 "),RJ=n(ZIe,"A",{href:!0});var VLt=s(RJ);yAr=r(VLt,"TFConvBertForTokenClassification"),VLt.forEach(t),xAr=r(ZIe," (ConvBERT model)"),ZIe.forEach(t),$Ar=i(me),oE=n(me,"LI",{});var eNe=s(oE);CFe=n(eNe,"STRONG",{});var XLt=s(CFe);kAr=r(XLt,"deberta"),XLt.forEach(t),SAr=r(eNe," \u2014 "),PJ=n(eNe,"A",{href:!0});var zLt=s(PJ);RAr=r(zLt,"TFDebertaForTokenClassification"),zLt.forEach(t),PAr=r(eNe," (DeBERTa model)"),eNe.forEach(t),BAr=i(me),rE=n(me,"LI",{});var oNe=s(rE);wFe=n(oNe,"STRONG",{});var WLt=s(wFe);IAr=r(WLt,"deberta-v2"),WLt.forEach(t),NAr=r(oNe," \u2014 "),BJ=n(oNe,"A",{href:!0});var QLt=s(BJ);qAr=r(QLt,"TFDebertaV2ForTokenClassification"),QLt.forEach(t),jAr=r(oNe," (DeBERTa-v2 model)"),oNe.forEach(t),DAr=i(me),tE=n(me,"LI",{});var rNe=s(tE);AFe=n(rNe,"STRONG",{});var HLt=s(AFe);GAr=r(HLt,"distilbert"),HLt.forEach(t),OAr=r(rNe," \u2014 "),IJ=n(rNe,"A",{href:!0});var ULt=s(IJ);VAr=r(ULt,"TFDistilBertForTokenClassification"),ULt.forEach(t),XAr=r(rNe," (DistilBERT model)"),rNe.forEach(t),zAr=i(me),aE=n(me,"LI",{});var tNe=s(aE);LFe=n(tNe,"STRONG",{});var JLt=s(LFe);WAr=r(JLt,"electra"),JLt.forEach(t),QAr=r(tNe," \u2014 "),NJ=n(tNe,"A",{href:!0});var YLt=s(NJ);HAr=r(YLt,"TFElectraForTokenClassification"),YLt.forEach(t),UAr=r(tNe," (ELECTRA model)"),tNe.forEach(t),JAr=i(me),nE=n(me,"LI",{});var aNe=s(nE);yFe=n(aNe,"STRONG",{});var KLt=s(yFe);YAr=r(KLt,"flaubert"),KLt.forEach(t),KAr=r(aNe," \u2014 "),qJ=n(aNe,"A",{href:!0});var ZLt=s(qJ);ZAr=r(ZLt,"TFFlaubertForTokenClassification"),ZLt.forEach(t),eLr=r(aNe," (FlauBERT model)"),aNe.forEach(t),oLr=i(me),sE=n(me,"LI",{});var nNe=s(sE);xFe=n(nNe,"STRONG",{});var eyt=s(xFe);rLr=r(eyt,"funnel"),eyt.forEach(t),tLr=r(nNe," \u2014 "),jJ=n(nNe,"A",{href:!0});var oyt=s(jJ);aLr=r(oyt,"TFFunnelForTokenClassification"),oyt.forEach(t),nLr=r(nNe," (Funnel Transformer model)"),nNe.forEach(t),sLr=i(me),lE=n(me,"LI",{});var sNe=s(lE);$Fe=n(sNe,"STRONG",{});var ryt=s($Fe);lLr=r(ryt,"layoutlm"),ryt.forEach(t),iLr=r(sNe," \u2014 "),DJ=n(sNe,"A",{href:!0});var tyt=s(DJ);dLr=r(tyt,"TFLayoutLMForTokenClassification"),tyt.forEach(t),cLr=r(sNe," (LayoutLM model)"),sNe.forEach(t),fLr=i(me),iE=n(me,"LI",{});var lNe=s(iE);kFe=n(lNe,"STRONG",{});var ayt=s(kFe);mLr=r(ayt,"longformer"),ayt.forEach(t),gLr=r(lNe," \u2014 "),GJ=n(lNe,"A",{href:!0});var nyt=s(GJ);hLr=r(nyt,"TFLongformerForTokenClassification"),nyt.forEach(t),pLr=r(lNe," (Longformer model)"),lNe.forEach(t),_Lr=i(me),dE=n(me,"LI",{});var iNe=s(dE);SFe=n(iNe,"STRONG",{});var syt=s(SFe);uLr=r(syt,"mobilebert"),syt.forEach(t),bLr=r(iNe," \u2014 "),OJ=n(iNe,"A",{href:!0});var lyt=s(OJ);vLr=r(lyt,"TFMobileBertForTokenClassification"),lyt.forEach(t),FLr=r(iNe," (MobileBERT model)"),iNe.forEach(t),TLr=i(me),cE=n(me,"LI",{});var dNe=s(cE);RFe=n(dNe,"STRONG",{});var iyt=s(RFe);MLr=r(iyt,"mpnet"),iyt.forEach(t),ELr=r(dNe," \u2014 "),VJ=n(dNe,"A",{href:!0});var dyt=s(VJ);CLr=r(dyt,"TFMPNetForTokenClassification"),dyt.forEach(t),wLr=r(dNe," (MPNet model)"),dNe.forEach(t),ALr=i(me),fE=n(me,"LI",{});var cNe=s(fE);PFe=n(cNe,"STRONG",{});var cyt=s(PFe);LLr=r(cyt,"rembert"),cyt.forEach(t),yLr=r(cNe," \u2014 "),XJ=n(cNe,"A",{href:!0});var fyt=s(XJ);xLr=r(fyt,"TFRemBertForTokenClassification"),fyt.forEach(t),$Lr=r(cNe," (RemBERT model)"),cNe.forEach(t),kLr=i(me),mE=n(me,"LI",{});var fNe=s(mE);BFe=n(fNe,"STRONG",{});var myt=s(BFe);SLr=r(myt,"roberta"),myt.forEach(t),RLr=r(fNe," \u2014 "),zJ=n(fNe,"A",{href:!0});var gyt=s(zJ);PLr=r(gyt,"TFRobertaForTokenClassification"),gyt.forEach(t),BLr=r(fNe," (RoBERTa model)"),fNe.forEach(t),ILr=i(me),gE=n(me,"LI",{});var mNe=s(gE);IFe=n(mNe,"STRONG",{});var hyt=s(IFe);NLr=r(hyt,"roformer"),hyt.forEach(t),qLr=r(mNe," \u2014 "),WJ=n(mNe,"A",{href:!0});var pyt=s(WJ);jLr=r(pyt,"TFRoFormerForTokenClassification"),pyt.forEach(t),DLr=r(mNe," (RoFormer model)"),mNe.forEach(t),GLr=i(me),hE=n(me,"LI",{});var gNe=s(hE);NFe=n(gNe,"STRONG",{});var _yt=s(NFe);OLr=r(_yt,"xlm"),_yt.forEach(t),VLr=r(gNe," \u2014 "),QJ=n(gNe,"A",{href:!0});var uyt=s(QJ);XLr=r(uyt,"TFXLMForTokenClassification"),uyt.forEach(t),zLr=r(gNe," (XLM model)"),gNe.forEach(t),WLr=i(me),pE=n(me,"LI",{});var hNe=s(pE);qFe=n(hNe,"STRONG",{});var byt=s(qFe);QLr=r(byt,"xlm-roberta"),byt.forEach(t),HLr=r(hNe," \u2014 "),HJ=n(hNe,"A",{href:!0});var vyt=s(HJ);ULr=r(vyt,"TFXLMRobertaForTokenClassification"),vyt.forEach(t),JLr=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),YLr=i(me),_E=n(me,"LI",{});var pNe=s(_E);jFe=n(pNe,"STRONG",{});var Fyt=s(jFe);KLr=r(Fyt,"xlnet"),Fyt.forEach(t),ZLr=r(pNe," \u2014 "),UJ=n(pNe,"A",{href:!0});var Tyt=s(UJ);eyr=r(Tyt,"TFXLNetForTokenClassification"),Tyt.forEach(t),oyr=r(pNe," (XLNet model)"),pNe.forEach(t),me.forEach(t),ryr=i(Il),T(uE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),cGe=i(f),Mc=n(f,"H2",{class:!0});var uVe=s(Mc);bE=n(uVe,"A",{id:!0,class:!0,href:!0});var Myt=s(bE);DFe=n(Myt,"SPAN",{});var Eyt=s(DFe);T(R9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),tyr=i(uVe),GFe=n(uVe,"SPAN",{});var Cyt=s(GFe);ayr=r(Cyt,"TFAutoModelForQuestionAnswering"),Cyt.forEach(t),uVe.forEach(t),fGe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(P9.$$.fragment,Nl),nyr=i(Nl),Ec=n(Nl,"P",{});var Coe=s(Ec);syr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=n(Coe,"A",{href:!0});var wyt=s(JJ);lyr=r(wyt,"from_pretrained()"),wyt.forEach(t),iyr=r(Coe," class method or the "),YJ=n(Coe,"A",{href:!0});var Ayt=s(YJ);dyr=r(Ayt,"from_config()"),Ayt.forEach(t),cyr=r(Coe,` class
method.`),Coe.forEach(t),fyr=i(Nl),B9=n(Nl,"P",{});var bVe=s(B9);myr=r(bVe,"This class cannot be instantiated directly using "),OFe=n(bVe,"CODE",{});var Lyt=s(OFe);gyr=r(Lyt,"__init__()"),Lyt.forEach(t),hyr=r(bVe," (throws an error)."),bVe.forEach(t),pyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var _A=s(jt);T(I9.$$.fragment,_A),_yr=i(_A),VFe=n(_A,"P",{});var yyt=s(VFe);uyr=r(yyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yyt.forEach(t),byr=i(_A),Cc=n(_A,"P",{});var woe=s(Cc);vyr=r(woe,`Note:
Loading a model from its configuration file does `),XFe=n(woe,"STRONG",{});var xyt=s(XFe);Fyr=r(xyt,"not"),xyt.forEach(t),Tyr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(woe,"A",{href:!0});var $yt=s(KJ);Myr=r($yt,"from_pretrained()"),$yt.forEach(t),Eyr=r(woe," to load the model weights."),woe.forEach(t),Cyr=i(_A),T(vE.$$.fragment,_A),_A.forEach(t),wyr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(N9.$$.fragment,ql),Ayr=i(ql),zFe=n(ql,"P",{});var kyt=s(zFe);Lyr=r(kyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kyt.forEach(t),yyr=i(ql),fn=n(ql,"P",{});var uA=s(fn);xyr=r(uA,"The model class to instantiate is selected based on the "),WFe=n(uA,"CODE",{});var Syt=s(WFe);$yr=r(Syt,"model_type"),Syt.forEach(t),kyr=r(uA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(uA,"CODE",{});var Ryt=s(QFe);Syr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),Ryr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(uA,"CODE",{});var Pyt=s(HFe);Pyr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),Byr=r(uA,":"),uA.forEach(t),Iyr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);FE=n(ge,"LI",{});var _Ne=s(FE);UFe=n(_Ne,"STRONG",{});var Byt=s(UFe);Nyr=r(Byt,"albert"),Byt.forEach(t),qyr=r(_Ne," \u2014 "),ZJ=n(_Ne,"A",{href:!0});var Iyt=s(ZJ);jyr=r(Iyt,"TFAlbertForQuestionAnswering"),Iyt.forEach(t),Dyr=r(_Ne," (ALBERT model)"),_Ne.forEach(t),Gyr=i(ge),TE=n(ge,"LI",{});var uNe=s(TE);JFe=n(uNe,"STRONG",{});var Nyt=s(JFe);Oyr=r(Nyt,"bert"),Nyt.forEach(t),Vyr=r(uNe," \u2014 "),eY=n(uNe,"A",{href:!0});var qyt=s(eY);Xyr=r(qyt,"TFBertForQuestionAnswering"),qyt.forEach(t),zyr=r(uNe," (BERT model)"),uNe.forEach(t),Wyr=i(ge),ME=n(ge,"LI",{});var bNe=s(ME);YFe=n(bNe,"STRONG",{});var jyt=s(YFe);Qyr=r(jyt,"camembert"),jyt.forEach(t),Hyr=r(bNe," \u2014 "),oY=n(bNe,"A",{href:!0});var Dyt=s(oY);Uyr=r(Dyt,"TFCamembertForQuestionAnswering"),Dyt.forEach(t),Jyr=r(bNe," (CamemBERT model)"),bNe.forEach(t),Yyr=i(ge),EE=n(ge,"LI",{});var vNe=s(EE);KFe=n(vNe,"STRONG",{});var Gyt=s(KFe);Kyr=r(Gyt,"convbert"),Gyt.forEach(t),Zyr=r(vNe," \u2014 "),rY=n(vNe,"A",{href:!0});var Oyt=s(rY);e8r=r(Oyt,"TFConvBertForQuestionAnswering"),Oyt.forEach(t),o8r=r(vNe," (ConvBERT model)"),vNe.forEach(t),r8r=i(ge),CE=n(ge,"LI",{});var FNe=s(CE);ZFe=n(FNe,"STRONG",{});var Vyt=s(ZFe);t8r=r(Vyt,"deberta"),Vyt.forEach(t),a8r=r(FNe," \u2014 "),tY=n(FNe,"A",{href:!0});var Xyt=s(tY);n8r=r(Xyt,"TFDebertaForQuestionAnswering"),Xyt.forEach(t),s8r=r(FNe," (DeBERTa model)"),FNe.forEach(t),l8r=i(ge),wE=n(ge,"LI",{});var TNe=s(wE);eTe=n(TNe,"STRONG",{});var zyt=s(eTe);i8r=r(zyt,"deberta-v2"),zyt.forEach(t),d8r=r(TNe," \u2014 "),aY=n(TNe,"A",{href:!0});var Wyt=s(aY);c8r=r(Wyt,"TFDebertaV2ForQuestionAnswering"),Wyt.forEach(t),f8r=r(TNe," (DeBERTa-v2 model)"),TNe.forEach(t),m8r=i(ge),AE=n(ge,"LI",{});var MNe=s(AE);oTe=n(MNe,"STRONG",{});var Qyt=s(oTe);g8r=r(Qyt,"distilbert"),Qyt.forEach(t),h8r=r(MNe," \u2014 "),nY=n(MNe,"A",{href:!0});var Hyt=s(nY);p8r=r(Hyt,"TFDistilBertForQuestionAnswering"),Hyt.forEach(t),_8r=r(MNe," (DistilBERT model)"),MNe.forEach(t),u8r=i(ge),LE=n(ge,"LI",{});var ENe=s(LE);rTe=n(ENe,"STRONG",{});var Uyt=s(rTe);b8r=r(Uyt,"electra"),Uyt.forEach(t),v8r=r(ENe," \u2014 "),sY=n(ENe,"A",{href:!0});var Jyt=s(sY);F8r=r(Jyt,"TFElectraForQuestionAnswering"),Jyt.forEach(t),T8r=r(ENe," (ELECTRA model)"),ENe.forEach(t),M8r=i(ge),yE=n(ge,"LI",{});var CNe=s(yE);tTe=n(CNe,"STRONG",{});var Yyt=s(tTe);E8r=r(Yyt,"flaubert"),Yyt.forEach(t),C8r=r(CNe," \u2014 "),lY=n(CNe,"A",{href:!0});var Kyt=s(lY);w8r=r(Kyt,"TFFlaubertForQuestionAnsweringSimple"),Kyt.forEach(t),A8r=r(CNe," (FlauBERT model)"),CNe.forEach(t),L8r=i(ge),xE=n(ge,"LI",{});var wNe=s(xE);aTe=n(wNe,"STRONG",{});var Zyt=s(aTe);y8r=r(Zyt,"funnel"),Zyt.forEach(t),x8r=r(wNe," \u2014 "),iY=n(wNe,"A",{href:!0});var e8t=s(iY);$8r=r(e8t,"TFFunnelForQuestionAnswering"),e8t.forEach(t),k8r=r(wNe," (Funnel Transformer model)"),wNe.forEach(t),S8r=i(ge),$E=n(ge,"LI",{});var ANe=s($E);nTe=n(ANe,"STRONG",{});var o8t=s(nTe);R8r=r(o8t,"gptj"),o8t.forEach(t),P8r=r(ANe," \u2014 "),dY=n(ANe,"A",{href:!0});var r8t=s(dY);B8r=r(r8t,"TFGPTJForQuestionAnswering"),r8t.forEach(t),I8r=r(ANe," (GPT-J model)"),ANe.forEach(t),N8r=i(ge),kE=n(ge,"LI",{});var LNe=s(kE);sTe=n(LNe,"STRONG",{});var t8t=s(sTe);q8r=r(t8t,"longformer"),t8t.forEach(t),j8r=r(LNe," \u2014 "),cY=n(LNe,"A",{href:!0});var a8t=s(cY);D8r=r(a8t,"TFLongformerForQuestionAnswering"),a8t.forEach(t),G8r=r(LNe," (Longformer model)"),LNe.forEach(t),O8r=i(ge),SE=n(ge,"LI",{});var yNe=s(SE);lTe=n(yNe,"STRONG",{});var n8t=s(lTe);V8r=r(n8t,"mobilebert"),n8t.forEach(t),X8r=r(yNe," \u2014 "),fY=n(yNe,"A",{href:!0});var s8t=s(fY);z8r=r(s8t,"TFMobileBertForQuestionAnswering"),s8t.forEach(t),W8r=r(yNe," (MobileBERT model)"),yNe.forEach(t),Q8r=i(ge),RE=n(ge,"LI",{});var xNe=s(RE);iTe=n(xNe,"STRONG",{});var l8t=s(iTe);H8r=r(l8t,"mpnet"),l8t.forEach(t),U8r=r(xNe," \u2014 "),mY=n(xNe,"A",{href:!0});var i8t=s(mY);J8r=r(i8t,"TFMPNetForQuestionAnswering"),i8t.forEach(t),Y8r=r(xNe," (MPNet model)"),xNe.forEach(t),K8r=i(ge),PE=n(ge,"LI",{});var $Ne=s(PE);dTe=n($Ne,"STRONG",{});var d8t=s(dTe);Z8r=r(d8t,"rembert"),d8t.forEach(t),e9r=r($Ne," \u2014 "),gY=n($Ne,"A",{href:!0});var c8t=s(gY);o9r=r(c8t,"TFRemBertForQuestionAnswering"),c8t.forEach(t),r9r=r($Ne," (RemBERT model)"),$Ne.forEach(t),t9r=i(ge),BE=n(ge,"LI",{});var kNe=s(BE);cTe=n(kNe,"STRONG",{});var f8t=s(cTe);a9r=r(f8t,"roberta"),f8t.forEach(t),n9r=r(kNe," \u2014 "),hY=n(kNe,"A",{href:!0});var m8t=s(hY);s9r=r(m8t,"TFRobertaForQuestionAnswering"),m8t.forEach(t),l9r=r(kNe," (RoBERTa model)"),kNe.forEach(t),i9r=i(ge),IE=n(ge,"LI",{});var SNe=s(IE);fTe=n(SNe,"STRONG",{});var g8t=s(fTe);d9r=r(g8t,"roformer"),g8t.forEach(t),c9r=r(SNe," \u2014 "),pY=n(SNe,"A",{href:!0});var h8t=s(pY);f9r=r(h8t,"TFRoFormerForQuestionAnswering"),h8t.forEach(t),m9r=r(SNe," (RoFormer model)"),SNe.forEach(t),g9r=i(ge),NE=n(ge,"LI",{});var RNe=s(NE);mTe=n(RNe,"STRONG",{});var p8t=s(mTe);h9r=r(p8t,"xlm"),p8t.forEach(t),p9r=r(RNe," \u2014 "),_Y=n(RNe,"A",{href:!0});var _8t=s(_Y);_9r=r(_8t,"TFXLMForQuestionAnsweringSimple"),_8t.forEach(t),u9r=r(RNe," (XLM model)"),RNe.forEach(t),b9r=i(ge),qE=n(ge,"LI",{});var PNe=s(qE);gTe=n(PNe,"STRONG",{});var u8t=s(gTe);v9r=r(u8t,"xlm-roberta"),u8t.forEach(t),F9r=r(PNe," \u2014 "),uY=n(PNe,"A",{href:!0});var b8t=s(uY);T9r=r(b8t,"TFXLMRobertaForQuestionAnswering"),b8t.forEach(t),M9r=r(PNe," (XLM-RoBERTa model)"),PNe.forEach(t),E9r=i(ge),jE=n(ge,"LI",{});var BNe=s(jE);hTe=n(BNe,"STRONG",{});var v8t=s(hTe);C9r=r(v8t,"xlnet"),v8t.forEach(t),w9r=r(BNe," \u2014 "),bY=n(BNe,"A",{href:!0});var F8t=s(bY);A9r=r(F8t,"TFXLNetForQuestionAnsweringSimple"),F8t.forEach(t),L9r=r(BNe," (XLNet model)"),BNe.forEach(t),ge.forEach(t),y9r=i(ql),T(DE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),mGe=i(f),wc=n(f,"H2",{class:!0});var vVe=s(wc);GE=n(vVe,"A",{id:!0,class:!0,href:!0});var T8t=s(GE);pTe=n(T8t,"SPAN",{});var M8t=s(pTe);T(q9.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),x9r=i(vVe),_Te=n(vVe,"SPAN",{});var E8t=s(_Te);$9r=r(E8t,"TFAutoModelForVision2Seq"),E8t.forEach(t),vVe.forEach(t),gGe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(j9.$$.fragment,jl),k9r=i(jl),Ac=n(jl,"P",{});var Aoe=s(Ac);S9r=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vY=n(Aoe,"A",{href:!0});var C8t=s(vY);R9r=r(C8t,"from_pretrained()"),C8t.forEach(t),P9r=r(Aoe," class method or the "),FY=n(Aoe,"A",{href:!0});var w8t=s(FY);B9r=r(w8t,"from_config()"),w8t.forEach(t),I9r=r(Aoe,` class
method.`),Aoe.forEach(t),N9r=i(jl),D9=n(jl,"P",{});var FVe=s(D9);q9r=r(FVe,"This class cannot be instantiated directly using "),uTe=n(FVe,"CODE",{});var A8t=s(uTe);j9r=r(A8t,"__init__()"),A8t.forEach(t),D9r=r(FVe," (throws an error)."),FVe.forEach(t),G9r=i(jl),Dt=n(jl,"DIV",{class:!0});var bA=s(Dt);T(G9.$$.fragment,bA),O9r=i(bA),bTe=n(bA,"P",{});var L8t=s(bTe);V9r=r(L8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),L8t.forEach(t),X9r=i(bA),Lc=n(bA,"P",{});var Loe=s(Lc);z9r=r(Loe,`Note:
Loading a model from its configuration file does `),vTe=n(Loe,"STRONG",{});var y8t=s(vTe);W9r=r(y8t,"not"),y8t.forEach(t),Q9r=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Loe,"A",{href:!0});var x8t=s(TY);H9r=r(x8t,"from_pretrained()"),x8t.forEach(t),U9r=r(Loe," to load the model weights."),Loe.forEach(t),J9r=i(bA),T(OE.$$.fragment,bA),bA.forEach(t),Y9r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(O9.$$.fragment,Dl),K9r=i(Dl),FTe=n(Dl,"P",{});var $8t=s(FTe);Z9r=r($8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$8t.forEach(t),exr=i(Dl),mn=n(Dl,"P",{});var vA=s(mn);oxr=r(vA,"The model class to instantiate is selected based on the "),TTe=n(vA,"CODE",{});var k8t=s(TTe);rxr=r(k8t,"model_type"),k8t.forEach(t),txr=r(vA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(vA,"CODE",{});var S8t=s(MTe);axr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),nxr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(vA,"CODE",{});var R8t=s(ETe);sxr=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),lxr=r(vA,":"),vA.forEach(t),ixr=i(Dl),CTe=n(Dl,"UL",{});var P8t=s(CTe);VE=n(P8t,"LI",{});var INe=s(VE);wTe=n(INe,"STRONG",{});var B8t=s(wTe);dxr=r(B8t,"vision-encoder-decoder"),B8t.forEach(t),cxr=r(INe," \u2014 "),MY=n(INe,"A",{href:!0});var I8t=s(MY);fxr=r(I8t,"TFVisionEncoderDecoderModel"),I8t.forEach(t),mxr=r(INe," (Vision Encoder decoder model)"),INe.forEach(t),P8t.forEach(t),gxr=i(Dl),T(XE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),hGe=i(f),yc=n(f,"H2",{class:!0});var TVe=s(yc);zE=n(TVe,"A",{id:!0,class:!0,href:!0});var N8t=s(zE);ATe=n(N8t,"SPAN",{});var q8t=s(ATe);T(V9.$$.fragment,q8t),q8t.forEach(t),N8t.forEach(t),hxr=i(TVe),LTe=n(TVe,"SPAN",{});var j8t=s(LTe);pxr=r(j8t,"TFAutoModelForSpeechSeq2Seq"),j8t.forEach(t),TVe.forEach(t),pGe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(X9.$$.fragment,Gl),_xr=i(Gl),xc=n(Gl,"P",{});var yoe=s(xc);uxr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EY=n(yoe,"A",{href:!0});var D8t=s(EY);bxr=r(D8t,"from_pretrained()"),D8t.forEach(t),vxr=r(yoe," class method or the "),CY=n(yoe,"A",{href:!0});var G8t=s(CY);Fxr=r(G8t,"from_config()"),G8t.forEach(t),Txr=r(yoe,` class
method.`),yoe.forEach(t),Mxr=i(Gl),z9=n(Gl,"P",{});var MVe=s(z9);Exr=r(MVe,"This class cannot be instantiated directly using "),yTe=n(MVe,"CODE",{});var O8t=s(yTe);Cxr=r(O8t,"__init__()"),O8t.forEach(t),wxr=r(MVe," (throws an error)."),MVe.forEach(t),Axr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var FA=s(Gt);T(W9.$$.fragment,FA),Lxr=i(FA),xTe=n(FA,"P",{});var V8t=s(xTe);yxr=r(V8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V8t.forEach(t),xxr=i(FA),$c=n(FA,"P",{});var xoe=s($c);$xr=r(xoe,`Note:
Loading a model from its configuration file does `),$Te=n(xoe,"STRONG",{});var X8t=s($Te);kxr=r(X8t,"not"),X8t.forEach(t),Sxr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(xoe,"A",{href:!0});var z8t=s(wY);Rxr=r(z8t,"from_pretrained()"),z8t.forEach(t),Pxr=r(xoe," to load the model weights."),xoe.forEach(t),Bxr=i(FA),T(WE.$$.fragment,FA),FA.forEach(t),Ixr=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(Q9.$$.fragment,Ol),Nxr=i(Ol),kTe=n(Ol,"P",{});var W8t=s(kTe);qxr=r(W8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W8t.forEach(t),jxr=i(Ol),gn=n(Ol,"P",{});var TA=s(gn);Dxr=r(TA,"The model class to instantiate is selected based on the "),STe=n(TA,"CODE",{});var Q8t=s(STe);Gxr=r(Q8t,"model_type"),Q8t.forEach(t),Oxr=r(TA,` property of the config object (either
passed as an argument or loaded from `),RTe=n(TA,"CODE",{});var H8t=s(RTe);Vxr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),Xxr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(TA,"CODE",{});var U8t=s(PTe);zxr=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),Wxr=r(TA,":"),TA.forEach(t),Qxr=i(Ol),BTe=n(Ol,"UL",{});var J8t=s(BTe);QE=n(J8t,"LI",{});var NNe=s(QE);ITe=n(NNe,"STRONG",{});var Y8t=s(ITe);Hxr=r(Y8t,"speech_to_text"),Y8t.forEach(t),Uxr=r(NNe," \u2014 "),AY=n(NNe,"A",{href:!0});var K8t=s(AY);Jxr=r(K8t,"TFSpeech2TextForConditionalGeneration"),K8t.forEach(t),Yxr=r(NNe," (Speech2Text model)"),NNe.forEach(t),J8t.forEach(t),Kxr=i(Ol),T(HE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),_Ge=i(f),kc=n(f,"H2",{class:!0});var EVe=s(kc);UE=n(EVe,"A",{id:!0,class:!0,href:!0});var Z8t=s(UE);NTe=n(Z8t,"SPAN",{});var e9t=s(NTe);T(H9.$$.fragment,e9t),e9t.forEach(t),Z8t.forEach(t),Zxr=i(EVe),qTe=n(EVe,"SPAN",{});var o9t=s(qTe);e$r=r(o9t,"FlaxAutoModel"),o9t.forEach(t),EVe.forEach(t),uGe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(U9.$$.fragment,Vl),o$r=i(Vl),Sc=n(Vl,"P",{});var $oe=s(Sc);r$r=r($oe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LY=n($oe,"A",{href:!0});var r9t=s(LY);t$r=r(r9t,"from_pretrained()"),r9t.forEach(t),a$r=r($oe," class method or the "),yY=n($oe,"A",{href:!0});var t9t=s(yY);n$r=r(t9t,"from_config()"),t9t.forEach(t),s$r=r($oe,` class
method.`),$oe.forEach(t),l$r=i(Vl),J9=n(Vl,"P",{});var CVe=s(J9);i$r=r(CVe,"This class cannot be instantiated directly using "),jTe=n(CVe,"CODE",{});var a9t=s(jTe);d$r=r(a9t,"__init__()"),a9t.forEach(t),c$r=r(CVe," (throws an error)."),CVe.forEach(t),f$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var MA=s(Ot);T(Y9.$$.fragment,MA),m$r=i(MA),DTe=n(MA,"P",{});var n9t=s(DTe);g$r=r(n9t,"Instantiates one of the base model classes of the library from a configuration."),n9t.forEach(t),h$r=i(MA),Rc=n(MA,"P",{});var koe=s(Rc);p$r=r(koe,`Note:
Loading a model from its configuration file does `),GTe=n(koe,"STRONG",{});var s9t=s(GTe);_$r=r(s9t,"not"),s9t.forEach(t),u$r=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(koe,"A",{href:!0});var l9t=s(xY);b$r=r(l9t,"from_pretrained()"),l9t.forEach(t),v$r=r(koe," to load the model weights."),koe.forEach(t),F$r=i(MA),T(JE.$$.fragment,MA),MA.forEach(t),T$r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(K9.$$.fragment,Xl),M$r=i(Xl),OTe=n(Xl,"P",{});var i9t=s(OTe);E$r=r(i9t,"Instantiate one of the base model classes of the library from a pretrained model."),i9t.forEach(t),C$r=i(Xl),hn=n(Xl,"P",{});var EA=s(hn);w$r=r(EA,"The model class to instantiate is selected based on the "),VTe=n(EA,"CODE",{});var d9t=s(VTe);A$r=r(d9t,"model_type"),d9t.forEach(t),L$r=r(EA,` property of the config object (either
passed as an argument or loaded from `),XTe=n(EA,"CODE",{});var c9t=s(XTe);y$r=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),x$r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(EA,"CODE",{});var f9t=s(zTe);$$r=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),k$r=r(EA,":"),EA.forEach(t),S$r=i(Xl),re=n(Xl,"UL",{});var ne=s(re);YE=n(ne,"LI",{});var qNe=s(YE);WTe=n(qNe,"STRONG",{});var m9t=s(WTe);R$r=r(m9t,"albert"),m9t.forEach(t),P$r=r(qNe," \u2014 "),$Y=n(qNe,"A",{href:!0});var g9t=s($Y);B$r=r(g9t,"FlaxAlbertModel"),g9t.forEach(t),I$r=r(qNe," (ALBERT model)"),qNe.forEach(t),N$r=i(ne),KE=n(ne,"LI",{});var jNe=s(KE);QTe=n(jNe,"STRONG",{});var h9t=s(QTe);q$r=r(h9t,"bart"),h9t.forEach(t),j$r=r(jNe," \u2014 "),kY=n(jNe,"A",{href:!0});var p9t=s(kY);D$r=r(p9t,"FlaxBartModel"),p9t.forEach(t),G$r=r(jNe," (BART model)"),jNe.forEach(t),O$r=i(ne),ZE=n(ne,"LI",{});var DNe=s(ZE);HTe=n(DNe,"STRONG",{});var _9t=s(HTe);V$r=r(_9t,"beit"),_9t.forEach(t),X$r=r(DNe," \u2014 "),SY=n(DNe,"A",{href:!0});var u9t=s(SY);z$r=r(u9t,"FlaxBeitModel"),u9t.forEach(t),W$r=r(DNe," (BEiT model)"),DNe.forEach(t),Q$r=i(ne),eC=n(ne,"LI",{});var GNe=s(eC);UTe=n(GNe,"STRONG",{});var b9t=s(UTe);H$r=r(b9t,"bert"),b9t.forEach(t),U$r=r(GNe," \u2014 "),RY=n(GNe,"A",{href:!0});var v9t=s(RY);J$r=r(v9t,"FlaxBertModel"),v9t.forEach(t),Y$r=r(GNe," (BERT model)"),GNe.forEach(t),K$r=i(ne),oC=n(ne,"LI",{});var ONe=s(oC);JTe=n(ONe,"STRONG",{});var F9t=s(JTe);Z$r=r(F9t,"big_bird"),F9t.forEach(t),ekr=r(ONe," \u2014 "),PY=n(ONe,"A",{href:!0});var T9t=s(PY);okr=r(T9t,"FlaxBigBirdModel"),T9t.forEach(t),rkr=r(ONe," (BigBird model)"),ONe.forEach(t),tkr=i(ne),rC=n(ne,"LI",{});var VNe=s(rC);YTe=n(VNe,"STRONG",{});var M9t=s(YTe);akr=r(M9t,"blenderbot"),M9t.forEach(t),nkr=r(VNe," \u2014 "),BY=n(VNe,"A",{href:!0});var E9t=s(BY);skr=r(E9t,"FlaxBlenderbotModel"),E9t.forEach(t),lkr=r(VNe," (Blenderbot model)"),VNe.forEach(t),ikr=i(ne),tC=n(ne,"LI",{});var XNe=s(tC);KTe=n(XNe,"STRONG",{});var C9t=s(KTe);dkr=r(C9t,"blenderbot-small"),C9t.forEach(t),ckr=r(XNe," \u2014 "),IY=n(XNe,"A",{href:!0});var w9t=s(IY);fkr=r(w9t,"FlaxBlenderbotSmallModel"),w9t.forEach(t),mkr=r(XNe," (BlenderbotSmall model)"),XNe.forEach(t),gkr=i(ne),aC=n(ne,"LI",{});var zNe=s(aC);ZTe=n(zNe,"STRONG",{});var A9t=s(ZTe);hkr=r(A9t,"clip"),A9t.forEach(t),pkr=r(zNe," \u2014 "),NY=n(zNe,"A",{href:!0});var L9t=s(NY);_kr=r(L9t,"FlaxCLIPModel"),L9t.forEach(t),ukr=r(zNe," (CLIP model)"),zNe.forEach(t),bkr=i(ne),nC=n(ne,"LI",{});var WNe=s(nC);e7e=n(WNe,"STRONG",{});var y9t=s(e7e);vkr=r(y9t,"distilbert"),y9t.forEach(t),Fkr=r(WNe," \u2014 "),qY=n(WNe,"A",{href:!0});var x9t=s(qY);Tkr=r(x9t,"FlaxDistilBertModel"),x9t.forEach(t),Mkr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Ekr=i(ne),sC=n(ne,"LI",{});var QNe=s(sC);o7e=n(QNe,"STRONG",{});var $9t=s(o7e);Ckr=r($9t,"electra"),$9t.forEach(t),wkr=r(QNe," \u2014 "),jY=n(QNe,"A",{href:!0});var k9t=s(jY);Akr=r(k9t,"FlaxElectraModel"),k9t.forEach(t),Lkr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ykr=i(ne),lC=n(ne,"LI",{});var HNe=s(lC);r7e=n(HNe,"STRONG",{});var S9t=s(r7e);xkr=r(S9t,"gpt2"),S9t.forEach(t),$kr=r(HNe," \u2014 "),DY=n(HNe,"A",{href:!0});var R9t=s(DY);kkr=r(R9t,"FlaxGPT2Model"),R9t.forEach(t),Skr=r(HNe," (OpenAI GPT-2 model)"),HNe.forEach(t),Rkr=i(ne),iC=n(ne,"LI",{});var UNe=s(iC);t7e=n(UNe,"STRONG",{});var P9t=s(t7e);Pkr=r(P9t,"gpt_neo"),P9t.forEach(t),Bkr=r(UNe," \u2014 "),GY=n(UNe,"A",{href:!0});var B9t=s(GY);Ikr=r(B9t,"FlaxGPTNeoModel"),B9t.forEach(t),Nkr=r(UNe," (GPT Neo model)"),UNe.forEach(t),qkr=i(ne),dC=n(ne,"LI",{});var JNe=s(dC);a7e=n(JNe,"STRONG",{});var I9t=s(a7e);jkr=r(I9t,"gptj"),I9t.forEach(t),Dkr=r(JNe," \u2014 "),OY=n(JNe,"A",{href:!0});var N9t=s(OY);Gkr=r(N9t,"FlaxGPTJModel"),N9t.forEach(t),Okr=r(JNe," (GPT-J model)"),JNe.forEach(t),Vkr=i(ne),cC=n(ne,"LI",{});var YNe=s(cC);n7e=n(YNe,"STRONG",{});var q9t=s(n7e);Xkr=r(q9t,"marian"),q9t.forEach(t),zkr=r(YNe," \u2014 "),VY=n(YNe,"A",{href:!0});var j9t=s(VY);Wkr=r(j9t,"FlaxMarianModel"),j9t.forEach(t),Qkr=r(YNe," (Marian model)"),YNe.forEach(t),Hkr=i(ne),fC=n(ne,"LI",{});var KNe=s(fC);s7e=n(KNe,"STRONG",{});var D9t=s(s7e);Ukr=r(D9t,"mbart"),D9t.forEach(t),Jkr=r(KNe," \u2014 "),XY=n(KNe,"A",{href:!0});var G9t=s(XY);Ykr=r(G9t,"FlaxMBartModel"),G9t.forEach(t),Kkr=r(KNe," (mBART model)"),KNe.forEach(t),Zkr=i(ne),mC=n(ne,"LI",{});var ZNe=s(mC);l7e=n(ZNe,"STRONG",{});var O9t=s(l7e);eSr=r(O9t,"mt5"),O9t.forEach(t),oSr=r(ZNe," \u2014 "),zY=n(ZNe,"A",{href:!0});var V9t=s(zY);rSr=r(V9t,"FlaxMT5Model"),V9t.forEach(t),tSr=r(ZNe," (MT5 model)"),ZNe.forEach(t),aSr=i(ne),gC=n(ne,"LI",{});var eqe=s(gC);i7e=n(eqe,"STRONG",{});var X9t=s(i7e);nSr=r(X9t,"opt"),X9t.forEach(t),sSr=r(eqe," \u2014 "),WY=n(eqe,"A",{href:!0});var z9t=s(WY);lSr=r(z9t,"FlaxOPTModel"),z9t.forEach(t),iSr=r(eqe," (OPT model)"),eqe.forEach(t),dSr=i(ne),hC=n(ne,"LI",{});var oqe=s(hC);d7e=n(oqe,"STRONG",{});var W9t=s(d7e);cSr=r(W9t,"pegasus"),W9t.forEach(t),fSr=r(oqe," \u2014 "),QY=n(oqe,"A",{href:!0});var Q9t=s(QY);mSr=r(Q9t,"FlaxPegasusModel"),Q9t.forEach(t),gSr=r(oqe," (Pegasus model)"),oqe.forEach(t),hSr=i(ne),pC=n(ne,"LI",{});var rqe=s(pC);c7e=n(rqe,"STRONG",{});var H9t=s(c7e);pSr=r(H9t,"roberta"),H9t.forEach(t),_Sr=r(rqe," \u2014 "),HY=n(rqe,"A",{href:!0});var U9t=s(HY);uSr=r(U9t,"FlaxRobertaModel"),U9t.forEach(t),bSr=r(rqe," (RoBERTa model)"),rqe.forEach(t),vSr=i(ne),_C=n(ne,"LI",{});var tqe=s(_C);f7e=n(tqe,"STRONG",{});var J9t=s(f7e);FSr=r(J9t,"roformer"),J9t.forEach(t),TSr=r(tqe," \u2014 "),UY=n(tqe,"A",{href:!0});var Y9t=s(UY);MSr=r(Y9t,"FlaxRoFormerModel"),Y9t.forEach(t),ESr=r(tqe," (RoFormer model)"),tqe.forEach(t),CSr=i(ne),uC=n(ne,"LI",{});var aqe=s(uC);m7e=n(aqe,"STRONG",{});var K9t=s(m7e);wSr=r(K9t,"t5"),K9t.forEach(t),ASr=r(aqe," \u2014 "),JY=n(aqe,"A",{href:!0});var Z9t=s(JY);LSr=r(Z9t,"FlaxT5Model"),Z9t.forEach(t),ySr=r(aqe," (T5 model)"),aqe.forEach(t),xSr=i(ne),bC=n(ne,"LI",{});var nqe=s(bC);g7e=n(nqe,"STRONG",{});var ext=s(g7e);$Sr=r(ext,"vision-text-dual-encoder"),ext.forEach(t),kSr=r(nqe," \u2014 "),YY=n(nqe,"A",{href:!0});var oxt=s(YY);SSr=r(oxt,"FlaxVisionTextDualEncoderModel"),oxt.forEach(t),RSr=r(nqe," (VisionTextDualEncoder model)"),nqe.forEach(t),PSr=i(ne),vC=n(ne,"LI",{});var sqe=s(vC);h7e=n(sqe,"STRONG",{});var rxt=s(h7e);BSr=r(rxt,"vit"),rxt.forEach(t),ISr=r(sqe," \u2014 "),KY=n(sqe,"A",{href:!0});var txt=s(KY);NSr=r(txt,"FlaxViTModel"),txt.forEach(t),qSr=r(sqe," (ViT model)"),sqe.forEach(t),jSr=i(ne),FC=n(ne,"LI",{});var lqe=s(FC);p7e=n(lqe,"STRONG",{});var axt=s(p7e);DSr=r(axt,"wav2vec2"),axt.forEach(t),GSr=r(lqe," \u2014 "),ZY=n(lqe,"A",{href:!0});var nxt=s(ZY);OSr=r(nxt,"FlaxWav2Vec2Model"),nxt.forEach(t),VSr=r(lqe," (Wav2Vec2 model)"),lqe.forEach(t),XSr=i(ne),TC=n(ne,"LI",{});var iqe=s(TC);_7e=n(iqe,"STRONG",{});var sxt=s(_7e);zSr=r(sxt,"xglm"),sxt.forEach(t),WSr=r(iqe," \u2014 "),eK=n(iqe,"A",{href:!0});var lxt=s(eK);QSr=r(lxt,"FlaxXGLMModel"),lxt.forEach(t),HSr=r(iqe," (XGLM model)"),iqe.forEach(t),USr=i(ne),MC=n(ne,"LI",{});var dqe=s(MC);u7e=n(dqe,"STRONG",{});var ixt=s(u7e);JSr=r(ixt,"xlm-roberta"),ixt.forEach(t),YSr=r(dqe," \u2014 "),oK=n(dqe,"A",{href:!0});var dxt=s(oK);KSr=r(dxt,"FlaxXLMRobertaModel"),dxt.forEach(t),ZSr=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),ne.forEach(t),eRr=i(Xl),T(EC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),bGe=i(f),Pc=n(f,"H2",{class:!0});var wVe=s(Pc);CC=n(wVe,"A",{id:!0,class:!0,href:!0});var cxt=s(CC);b7e=n(cxt,"SPAN",{});var fxt=s(b7e);T(Z9.$$.fragment,fxt),fxt.forEach(t),cxt.forEach(t),oRr=i(wVe),v7e=n(wVe,"SPAN",{});var mxt=s(v7e);rRr=r(mxt,"FlaxAutoModelForCausalLM"),mxt.forEach(t),wVe.forEach(t),vGe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(ex.$$.fragment,zl),tRr=i(zl),Bc=n(zl,"P",{});var Soe=s(Bc);aRr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rK=n(Soe,"A",{href:!0});var gxt=s(rK);nRr=r(gxt,"from_pretrained()"),gxt.forEach(t),sRr=r(Soe," class method or the "),tK=n(Soe,"A",{href:!0});var hxt=s(tK);lRr=r(hxt,"from_config()"),hxt.forEach(t),iRr=r(Soe,` class
method.`),Soe.forEach(t),dRr=i(zl),ox=n(zl,"P",{});var AVe=s(ox);cRr=r(AVe,"This class cannot be instantiated directly using "),F7e=n(AVe,"CODE",{});var pxt=s(F7e);fRr=r(pxt,"__init__()"),pxt.forEach(t),mRr=r(AVe," (throws an error)."),AVe.forEach(t),gRr=i(zl),Vt=n(zl,"DIV",{class:!0});var CA=s(Vt);T(rx.$$.fragment,CA),hRr=i(CA),T7e=n(CA,"P",{});var _xt=s(T7e);pRr=r(_xt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_xt.forEach(t),_Rr=i(CA),Ic=n(CA,"P",{});var Roe=s(Ic);uRr=r(Roe,`Note:
Loading a model from its configuration file does `),M7e=n(Roe,"STRONG",{});var uxt=s(M7e);bRr=r(uxt,"not"),uxt.forEach(t),vRr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(Roe,"A",{href:!0});var bxt=s(aK);FRr=r(bxt,"from_pretrained()"),bxt.forEach(t),TRr=r(Roe," to load the model weights."),Roe.forEach(t),MRr=i(CA),T(wC.$$.fragment,CA),CA.forEach(t),ERr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(tx.$$.fragment,Wl),CRr=i(Wl),E7e=n(Wl,"P",{});var vxt=s(E7e);wRr=r(vxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vxt.forEach(t),ARr=i(Wl),pn=n(Wl,"P",{});var wA=s(pn);LRr=r(wA,"The model class to instantiate is selected based on the "),C7e=n(wA,"CODE",{});var Fxt=s(C7e);yRr=r(Fxt,"model_type"),Fxt.forEach(t),xRr=r(wA,` property of the config object (either
passed as an argument or loaded from `),w7e=n(wA,"CODE",{});var Txt=s(w7e);$Rr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),kRr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(wA,"CODE",{});var Mxt=s(A7e);SRr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),RRr=r(wA,":"),wA.forEach(t),PRr=i(Wl),xe=n(Wl,"UL",{});var Ne=s(xe);AC=n(Ne,"LI",{});var cqe=s(AC);L7e=n(cqe,"STRONG",{});var Ext=s(L7e);BRr=r(Ext,"bart"),Ext.forEach(t),IRr=r(cqe," \u2014 "),nK=n(cqe,"A",{href:!0});var Cxt=s(nK);NRr=r(Cxt,"FlaxBartForCausalLM"),Cxt.forEach(t),qRr=r(cqe," (BART model)"),cqe.forEach(t),jRr=i(Ne),LC=n(Ne,"LI",{});var fqe=s(LC);y7e=n(fqe,"STRONG",{});var wxt=s(y7e);DRr=r(wxt,"bert"),wxt.forEach(t),GRr=r(fqe," \u2014 "),sK=n(fqe,"A",{href:!0});var Axt=s(sK);ORr=r(Axt,"FlaxBertForCausalLM"),Axt.forEach(t),VRr=r(fqe," (BERT model)"),fqe.forEach(t),XRr=i(Ne),yC=n(Ne,"LI",{});var mqe=s(yC);x7e=n(mqe,"STRONG",{});var Lxt=s(x7e);zRr=r(Lxt,"big_bird"),Lxt.forEach(t),WRr=r(mqe," \u2014 "),lK=n(mqe,"A",{href:!0});var yxt=s(lK);QRr=r(yxt,"FlaxBigBirdForCausalLM"),yxt.forEach(t),HRr=r(mqe," (BigBird model)"),mqe.forEach(t),URr=i(Ne),xC=n(Ne,"LI",{});var gqe=s(xC);$7e=n(gqe,"STRONG",{});var xxt=s($7e);JRr=r(xxt,"electra"),xxt.forEach(t),YRr=r(gqe," \u2014 "),iK=n(gqe,"A",{href:!0});var $xt=s(iK);KRr=r($xt,"FlaxElectraForCausalLM"),$xt.forEach(t),ZRr=r(gqe," (ELECTRA model)"),gqe.forEach(t),ePr=i(Ne),$C=n(Ne,"LI",{});var hqe=s($C);k7e=n(hqe,"STRONG",{});var kxt=s(k7e);oPr=r(kxt,"gpt2"),kxt.forEach(t),rPr=r(hqe," \u2014 "),dK=n(hqe,"A",{href:!0});var Sxt=s(dK);tPr=r(Sxt,"FlaxGPT2LMHeadModel"),Sxt.forEach(t),aPr=r(hqe," (OpenAI GPT-2 model)"),hqe.forEach(t),nPr=i(Ne),kC=n(Ne,"LI",{});var pqe=s(kC);S7e=n(pqe,"STRONG",{});var Rxt=s(S7e);sPr=r(Rxt,"gpt_neo"),Rxt.forEach(t),lPr=r(pqe," \u2014 "),cK=n(pqe,"A",{href:!0});var Pxt=s(cK);iPr=r(Pxt,"FlaxGPTNeoForCausalLM"),Pxt.forEach(t),dPr=r(pqe," (GPT Neo model)"),pqe.forEach(t),cPr=i(Ne),SC=n(Ne,"LI",{});var _qe=s(SC);R7e=n(_qe,"STRONG",{});var Bxt=s(R7e);fPr=r(Bxt,"gptj"),Bxt.forEach(t),mPr=r(_qe," \u2014 "),fK=n(_qe,"A",{href:!0});var Ixt=s(fK);gPr=r(Ixt,"FlaxGPTJForCausalLM"),Ixt.forEach(t),hPr=r(_qe," (GPT-J model)"),_qe.forEach(t),pPr=i(Ne),RC=n(Ne,"LI",{});var uqe=s(RC);P7e=n(uqe,"STRONG",{});var Nxt=s(P7e);_Pr=r(Nxt,"opt"),Nxt.forEach(t),uPr=r(uqe," \u2014 "),mK=n(uqe,"A",{href:!0});var qxt=s(mK);bPr=r(qxt,"FlaxOPTForCausalLM"),qxt.forEach(t),vPr=r(uqe," (OPT model)"),uqe.forEach(t),FPr=i(Ne),PC=n(Ne,"LI",{});var bqe=s(PC);B7e=n(bqe,"STRONG",{});var jxt=s(B7e);TPr=r(jxt,"roberta"),jxt.forEach(t),MPr=r(bqe," \u2014 "),gK=n(bqe,"A",{href:!0});var Dxt=s(gK);EPr=r(Dxt,"FlaxRobertaForCausalLM"),Dxt.forEach(t),CPr=r(bqe," (RoBERTa model)"),bqe.forEach(t),wPr=i(Ne),BC=n(Ne,"LI",{});var vqe=s(BC);I7e=n(vqe,"STRONG",{});var Gxt=s(I7e);APr=r(Gxt,"xglm"),Gxt.forEach(t),LPr=r(vqe," \u2014 "),hK=n(vqe,"A",{href:!0});var Oxt=s(hK);yPr=r(Oxt,"FlaxXGLMForCausalLM"),Oxt.forEach(t),xPr=r(vqe," (XGLM model)"),vqe.forEach(t),Ne.forEach(t),$Pr=i(Wl),T(IC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),FGe=i(f),Nc=n(f,"H2",{class:!0});var LVe=s(Nc);NC=n(LVe,"A",{id:!0,class:!0,href:!0});var Vxt=s(NC);N7e=n(Vxt,"SPAN",{});var Xxt=s(N7e);T(ax.$$.fragment,Xxt),Xxt.forEach(t),Vxt.forEach(t),kPr=i(LVe),q7e=n(LVe,"SPAN",{});var zxt=s(q7e);SPr=r(zxt,"FlaxAutoModelForPreTraining"),zxt.forEach(t),LVe.forEach(t),TGe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(nx.$$.fragment,Ql),RPr=i(Ql),qc=n(Ql,"P",{});var Poe=s(qc);PPr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=n(Poe,"A",{href:!0});var Wxt=s(pK);BPr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),IPr=r(Poe," class method or the "),_K=n(Poe,"A",{href:!0});var Qxt=s(_K);NPr=r(Qxt,"from_config()"),Qxt.forEach(t),qPr=r(Poe,` class
method.`),Poe.forEach(t),jPr=i(Ql),sx=n(Ql,"P",{});var yVe=s(sx);DPr=r(yVe,"This class cannot be instantiated directly using "),j7e=n(yVe,"CODE",{});var Hxt=s(j7e);GPr=r(Hxt,"__init__()"),Hxt.forEach(t),OPr=r(yVe," (throws an error)."),yVe.forEach(t),VPr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var AA=s(Xt);T(lx.$$.fragment,AA),XPr=i(AA),D7e=n(AA,"P",{});var Uxt=s(D7e);zPr=r(Uxt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uxt.forEach(t),WPr=i(AA),jc=n(AA,"P",{});var Boe=s(jc);QPr=r(Boe,`Note:
Loading a model from its configuration file does `),G7e=n(Boe,"STRONG",{});var Jxt=s(G7e);HPr=r(Jxt,"not"),Jxt.forEach(t),UPr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Boe,"A",{href:!0});var Yxt=s(uK);JPr=r(Yxt,"from_pretrained()"),Yxt.forEach(t),YPr=r(Boe," to load the model weights."),Boe.forEach(t),KPr=i(AA),T(qC.$$.fragment,AA),AA.forEach(t),ZPr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(ix.$$.fragment,Hl),eBr=i(Hl),O7e=n(Hl,"P",{});var Kxt=s(O7e);oBr=r(Kxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kxt.forEach(t),rBr=i(Hl),_n=n(Hl,"P",{});var LA=s(_n);tBr=r(LA,"The model class to instantiate is selected based on the "),V7e=n(LA,"CODE",{});var Zxt=s(V7e);aBr=r(Zxt,"model_type"),Zxt.forEach(t),nBr=r(LA,` property of the config object (either
passed as an argument or loaded from `),X7e=n(LA,"CODE",{});var e$t=s(X7e);sBr=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),lBr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(LA,"CODE",{});var o$t=s(z7e);iBr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),dBr=r(LA,":"),LA.forEach(t),cBr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);jC=n(we,"LI",{});var Fqe=s(jC);W7e=n(Fqe,"STRONG",{});var r$t=s(W7e);fBr=r(r$t,"albert"),r$t.forEach(t),mBr=r(Fqe," \u2014 "),bK=n(Fqe,"A",{href:!0});var t$t=s(bK);gBr=r(t$t,"FlaxAlbertForPreTraining"),t$t.forEach(t),hBr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),pBr=i(we),DC=n(we,"LI",{});var Tqe=s(DC);Q7e=n(Tqe,"STRONG",{});var a$t=s(Q7e);_Br=r(a$t,"bart"),a$t.forEach(t),uBr=r(Tqe," \u2014 "),vK=n(Tqe,"A",{href:!0});var n$t=s(vK);bBr=r(n$t,"FlaxBartForConditionalGeneration"),n$t.forEach(t),vBr=r(Tqe," (BART model)"),Tqe.forEach(t),FBr=i(we),GC=n(we,"LI",{});var Mqe=s(GC);H7e=n(Mqe,"STRONG",{});var s$t=s(H7e);TBr=r(s$t,"bert"),s$t.forEach(t),MBr=r(Mqe," \u2014 "),FK=n(Mqe,"A",{href:!0});var l$t=s(FK);EBr=r(l$t,"FlaxBertForPreTraining"),l$t.forEach(t),CBr=r(Mqe," (BERT model)"),Mqe.forEach(t),wBr=i(we),OC=n(we,"LI",{});var Eqe=s(OC);U7e=n(Eqe,"STRONG",{});var i$t=s(U7e);ABr=r(i$t,"big_bird"),i$t.forEach(t),LBr=r(Eqe," \u2014 "),TK=n(Eqe,"A",{href:!0});var d$t=s(TK);yBr=r(d$t,"FlaxBigBirdForPreTraining"),d$t.forEach(t),xBr=r(Eqe," (BigBird model)"),Eqe.forEach(t),$Br=i(we),VC=n(we,"LI",{});var Cqe=s(VC);J7e=n(Cqe,"STRONG",{});var c$t=s(J7e);kBr=r(c$t,"electra"),c$t.forEach(t),SBr=r(Cqe," \u2014 "),MK=n(Cqe,"A",{href:!0});var f$t=s(MK);RBr=r(f$t,"FlaxElectraForPreTraining"),f$t.forEach(t),PBr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),BBr=i(we),XC=n(we,"LI",{});var wqe=s(XC);Y7e=n(wqe,"STRONG",{});var m$t=s(Y7e);IBr=r(m$t,"mbart"),m$t.forEach(t),NBr=r(wqe," \u2014 "),EK=n(wqe,"A",{href:!0});var g$t=s(EK);qBr=r(g$t,"FlaxMBartForConditionalGeneration"),g$t.forEach(t),jBr=r(wqe," (mBART model)"),wqe.forEach(t),DBr=i(we),zC=n(we,"LI",{});var Aqe=s(zC);K7e=n(Aqe,"STRONG",{});var h$t=s(K7e);GBr=r(h$t,"mt5"),h$t.forEach(t),OBr=r(Aqe," \u2014 "),CK=n(Aqe,"A",{href:!0});var p$t=s(CK);VBr=r(p$t,"FlaxMT5ForConditionalGeneration"),p$t.forEach(t),XBr=r(Aqe," (MT5 model)"),Aqe.forEach(t),zBr=i(we),WC=n(we,"LI",{});var Lqe=s(WC);Z7e=n(Lqe,"STRONG",{});var _$t=s(Z7e);WBr=r(_$t,"roberta"),_$t.forEach(t),QBr=r(Lqe," \u2014 "),wK=n(Lqe,"A",{href:!0});var u$t=s(wK);HBr=r(u$t,"FlaxRobertaForMaskedLM"),u$t.forEach(t),UBr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),JBr=i(we),QC=n(we,"LI",{});var yqe=s(QC);eMe=n(yqe,"STRONG",{});var b$t=s(eMe);YBr=r(b$t,"roformer"),b$t.forEach(t),KBr=r(yqe," \u2014 "),AK=n(yqe,"A",{href:!0});var v$t=s(AK);ZBr=r(v$t,"FlaxRoFormerForMaskedLM"),v$t.forEach(t),eIr=r(yqe," (RoFormer model)"),yqe.forEach(t),oIr=i(we),HC=n(we,"LI",{});var xqe=s(HC);oMe=n(xqe,"STRONG",{});var F$t=s(oMe);rIr=r(F$t,"t5"),F$t.forEach(t),tIr=r(xqe," \u2014 "),LK=n(xqe,"A",{href:!0});var T$t=s(LK);aIr=r(T$t,"FlaxT5ForConditionalGeneration"),T$t.forEach(t),nIr=r(xqe," (T5 model)"),xqe.forEach(t),sIr=i(we),UC=n(we,"LI",{});var $qe=s(UC);rMe=n($qe,"STRONG",{});var M$t=s(rMe);lIr=r(M$t,"wav2vec2"),M$t.forEach(t),iIr=r($qe," \u2014 "),yK=n($qe,"A",{href:!0});var E$t=s(yK);dIr=r(E$t,"FlaxWav2Vec2ForPreTraining"),E$t.forEach(t),cIr=r($qe," (Wav2Vec2 model)"),$qe.forEach(t),fIr=i(we),JC=n(we,"LI",{});var kqe=s(JC);tMe=n(kqe,"STRONG",{});var C$t=s(tMe);mIr=r(C$t,"xlm-roberta"),C$t.forEach(t),gIr=r(kqe," \u2014 "),xK=n(kqe,"A",{href:!0});var w$t=s(xK);hIr=r(w$t,"FlaxXLMRobertaForMaskedLM"),w$t.forEach(t),pIr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),we.forEach(t),_Ir=i(Hl),T(YC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),MGe=i(f),Dc=n(f,"H2",{class:!0});var xVe=s(Dc);KC=n(xVe,"A",{id:!0,class:!0,href:!0});var A$t=s(KC);aMe=n(A$t,"SPAN",{});var L$t=s(aMe);T(dx.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),uIr=i(xVe),nMe=n(xVe,"SPAN",{});var y$t=s(nMe);bIr=r(y$t,"FlaxAutoModelForMaskedLM"),y$t.forEach(t),xVe.forEach(t),EGe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(cx.$$.fragment,Ul),vIr=i(Ul),Gc=n(Ul,"P",{});var Ioe=s(Gc);FIr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$K=n(Ioe,"A",{href:!0});var x$t=s($K);TIr=r(x$t,"from_pretrained()"),x$t.forEach(t),MIr=r(Ioe," class method or the "),kK=n(Ioe,"A",{href:!0});var $$t=s(kK);EIr=r($$t,"from_config()"),$$t.forEach(t),CIr=r(Ioe,` class
method.`),Ioe.forEach(t),wIr=i(Ul),fx=n(Ul,"P",{});var $Ve=s(fx);AIr=r($Ve,"This class cannot be instantiated directly using "),sMe=n($Ve,"CODE",{});var k$t=s(sMe);LIr=r(k$t,"__init__()"),k$t.forEach(t),yIr=r($Ve," (throws an error)."),$Ve.forEach(t),xIr=i(Ul),zt=n(Ul,"DIV",{class:!0});var yA=s(zt);T(mx.$$.fragment,yA),$Ir=i(yA),lMe=n(yA,"P",{});var S$t=s(lMe);kIr=r(S$t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S$t.forEach(t),SIr=i(yA),Oc=n(yA,"P",{});var Noe=s(Oc);RIr=r(Noe,`Note:
Loading a model from its configuration file does `),iMe=n(Noe,"STRONG",{});var R$t=s(iMe);PIr=r(R$t,"not"),R$t.forEach(t),BIr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(Noe,"A",{href:!0});var P$t=s(SK);IIr=r(P$t,"from_pretrained()"),P$t.forEach(t),NIr=r(Noe," to load the model weights."),Noe.forEach(t),qIr=i(yA),T(ZC.$$.fragment,yA),yA.forEach(t),jIr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(gx.$$.fragment,Jl),DIr=i(Jl),dMe=n(Jl,"P",{});var B$t=s(dMe);GIr=r(B$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B$t.forEach(t),OIr=i(Jl),un=n(Jl,"P",{});var xA=s(un);VIr=r(xA,"The model class to instantiate is selected based on the "),cMe=n(xA,"CODE",{});var I$t=s(cMe);XIr=r(I$t,"model_type"),I$t.forEach(t),zIr=r(xA,` property of the config object (either
passed as an argument or loaded from `),fMe=n(xA,"CODE",{});var N$t=s(fMe);WIr=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),QIr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(xA,"CODE",{});var q$t=s(mMe);HIr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),UIr=r(xA,":"),xA.forEach(t),JIr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);e0=n(qe,"LI",{});var Sqe=s(e0);gMe=n(Sqe,"STRONG",{});var j$t=s(gMe);YIr=r(j$t,"albert"),j$t.forEach(t),KIr=r(Sqe," \u2014 "),RK=n(Sqe,"A",{href:!0});var D$t=s(RK);ZIr=r(D$t,"FlaxAlbertForMaskedLM"),D$t.forEach(t),eNr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),oNr=i(qe),o0=n(qe,"LI",{});var Rqe=s(o0);hMe=n(Rqe,"STRONG",{});var G$t=s(hMe);rNr=r(G$t,"bart"),G$t.forEach(t),tNr=r(Rqe," \u2014 "),PK=n(Rqe,"A",{href:!0});var O$t=s(PK);aNr=r(O$t,"FlaxBartForConditionalGeneration"),O$t.forEach(t),nNr=r(Rqe," (BART model)"),Rqe.forEach(t),sNr=i(qe),r0=n(qe,"LI",{});var Pqe=s(r0);pMe=n(Pqe,"STRONG",{});var V$t=s(pMe);lNr=r(V$t,"bert"),V$t.forEach(t),iNr=r(Pqe," \u2014 "),BK=n(Pqe,"A",{href:!0});var X$t=s(BK);dNr=r(X$t,"FlaxBertForMaskedLM"),X$t.forEach(t),cNr=r(Pqe," (BERT model)"),Pqe.forEach(t),fNr=i(qe),t0=n(qe,"LI",{});var Bqe=s(t0);_Me=n(Bqe,"STRONG",{});var z$t=s(_Me);mNr=r(z$t,"big_bird"),z$t.forEach(t),gNr=r(Bqe," \u2014 "),IK=n(Bqe,"A",{href:!0});var W$t=s(IK);hNr=r(W$t,"FlaxBigBirdForMaskedLM"),W$t.forEach(t),pNr=r(Bqe," (BigBird model)"),Bqe.forEach(t),_Nr=i(qe),a0=n(qe,"LI",{});var Iqe=s(a0);uMe=n(Iqe,"STRONG",{});var Q$t=s(uMe);uNr=r(Q$t,"distilbert"),Q$t.forEach(t),bNr=r(Iqe," \u2014 "),NK=n(Iqe,"A",{href:!0});var H$t=s(NK);vNr=r(H$t,"FlaxDistilBertForMaskedLM"),H$t.forEach(t),FNr=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),TNr=i(qe),n0=n(qe,"LI",{});var Nqe=s(n0);bMe=n(Nqe,"STRONG",{});var U$t=s(bMe);MNr=r(U$t,"electra"),U$t.forEach(t),ENr=r(Nqe," \u2014 "),qK=n(Nqe,"A",{href:!0});var J$t=s(qK);CNr=r(J$t,"FlaxElectraForMaskedLM"),J$t.forEach(t),wNr=r(Nqe," (ELECTRA model)"),Nqe.forEach(t),ANr=i(qe),s0=n(qe,"LI",{});var qqe=s(s0);vMe=n(qqe,"STRONG",{});var Y$t=s(vMe);LNr=r(Y$t,"mbart"),Y$t.forEach(t),yNr=r(qqe," \u2014 "),jK=n(qqe,"A",{href:!0});var K$t=s(jK);xNr=r(K$t,"FlaxMBartForConditionalGeneration"),K$t.forEach(t),$Nr=r(qqe," (mBART model)"),qqe.forEach(t),kNr=i(qe),l0=n(qe,"LI",{});var jqe=s(l0);FMe=n(jqe,"STRONG",{});var Z$t=s(FMe);SNr=r(Z$t,"roberta"),Z$t.forEach(t),RNr=r(jqe," \u2014 "),DK=n(jqe,"A",{href:!0});var ekt=s(DK);PNr=r(ekt,"FlaxRobertaForMaskedLM"),ekt.forEach(t),BNr=r(jqe," (RoBERTa model)"),jqe.forEach(t),INr=i(qe),i0=n(qe,"LI",{});var Dqe=s(i0);TMe=n(Dqe,"STRONG",{});var okt=s(TMe);NNr=r(okt,"roformer"),okt.forEach(t),qNr=r(Dqe," \u2014 "),GK=n(Dqe,"A",{href:!0});var rkt=s(GK);jNr=r(rkt,"FlaxRoFormerForMaskedLM"),rkt.forEach(t),DNr=r(Dqe," (RoFormer model)"),Dqe.forEach(t),GNr=i(qe),d0=n(qe,"LI",{});var Gqe=s(d0);MMe=n(Gqe,"STRONG",{});var tkt=s(MMe);ONr=r(tkt,"xlm-roberta"),tkt.forEach(t),VNr=r(Gqe," \u2014 "),OK=n(Gqe,"A",{href:!0});var akt=s(OK);XNr=r(akt,"FlaxXLMRobertaForMaskedLM"),akt.forEach(t),zNr=r(Gqe," (XLM-RoBERTa model)"),Gqe.forEach(t),qe.forEach(t),WNr=i(Jl),T(c0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),CGe=i(f),Vc=n(f,"H2",{class:!0});var kVe=s(Vc);f0=n(kVe,"A",{id:!0,class:!0,href:!0});var nkt=s(f0);EMe=n(nkt,"SPAN",{});var skt=s(EMe);T(hx.$$.fragment,skt),skt.forEach(t),nkt.forEach(t),QNr=i(kVe),CMe=n(kVe,"SPAN",{});var lkt=s(CMe);HNr=r(lkt,"FlaxAutoModelForSeq2SeqLM"),lkt.forEach(t),kVe.forEach(t),wGe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(px.$$.fragment,Yl),UNr=i(Yl),Xc=n(Yl,"P",{});var qoe=s(Xc);JNr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VK=n(qoe,"A",{href:!0});var ikt=s(VK);YNr=r(ikt,"from_pretrained()"),ikt.forEach(t),KNr=r(qoe," class method or the "),XK=n(qoe,"A",{href:!0});var dkt=s(XK);ZNr=r(dkt,"from_config()"),dkt.forEach(t),eqr=r(qoe,` class
method.`),qoe.forEach(t),oqr=i(Yl),_x=n(Yl,"P",{});var SVe=s(_x);rqr=r(SVe,"This class cannot be instantiated directly using "),wMe=n(SVe,"CODE",{});var ckt=s(wMe);tqr=r(ckt,"__init__()"),ckt.forEach(t),aqr=r(SVe," (throws an error)."),SVe.forEach(t),nqr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var $A=s(Wt);T(ux.$$.fragment,$A),sqr=i($A),AMe=n($A,"P",{});var fkt=s(AMe);lqr=r(fkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fkt.forEach(t),iqr=i($A),zc=n($A,"P",{});var joe=s(zc);dqr=r(joe,`Note:
Loading a model from its configuration file does `),LMe=n(joe,"STRONG",{});var mkt=s(LMe);cqr=r(mkt,"not"),mkt.forEach(t),fqr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(joe,"A",{href:!0});var gkt=s(zK);mqr=r(gkt,"from_pretrained()"),gkt.forEach(t),gqr=r(joe," to load the model weights."),joe.forEach(t),hqr=i($A),T(m0.$$.fragment,$A),$A.forEach(t),pqr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(bx.$$.fragment,Kl),_qr=i(Kl),yMe=n(Kl,"P",{});var hkt=s(yMe);uqr=r(hkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hkt.forEach(t),bqr=i(Kl),bn=n(Kl,"P",{});var kA=s(bn);vqr=r(kA,"The model class to instantiate is selected based on the "),xMe=n(kA,"CODE",{});var pkt=s(xMe);Fqr=r(pkt,"model_type"),pkt.forEach(t),Tqr=r(kA,` property of the config object (either
passed as an argument or loaded from `),$Me=n(kA,"CODE",{});var _kt=s($Me);Mqr=r(_kt,"pretrained_model_name_or_path"),_kt.forEach(t),Eqr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(kA,"CODE",{});var ukt=s(kMe);Cqr=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),wqr=r(kA,":"),kA.forEach(t),Aqr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);g0=n(ze,"LI",{});var Oqe=s(g0);SMe=n(Oqe,"STRONG",{});var bkt=s(SMe);Lqr=r(bkt,"bart"),bkt.forEach(t),yqr=r(Oqe," \u2014 "),WK=n(Oqe,"A",{href:!0});var vkt=s(WK);xqr=r(vkt,"FlaxBartForConditionalGeneration"),vkt.forEach(t),$qr=r(Oqe," (BART model)"),Oqe.forEach(t),kqr=i(ze),h0=n(ze,"LI",{});var Vqe=s(h0);RMe=n(Vqe,"STRONG",{});var Fkt=s(RMe);Sqr=r(Fkt,"blenderbot"),Fkt.forEach(t),Rqr=r(Vqe," \u2014 "),QK=n(Vqe,"A",{href:!0});var Tkt=s(QK);Pqr=r(Tkt,"FlaxBlenderbotForConditionalGeneration"),Tkt.forEach(t),Bqr=r(Vqe," (Blenderbot model)"),Vqe.forEach(t),Iqr=i(ze),p0=n(ze,"LI",{});var Xqe=s(p0);PMe=n(Xqe,"STRONG",{});var Mkt=s(PMe);Nqr=r(Mkt,"blenderbot-small"),Mkt.forEach(t),qqr=r(Xqe," \u2014 "),HK=n(Xqe,"A",{href:!0});var Ekt=s(HK);jqr=r(Ekt,"FlaxBlenderbotSmallForConditionalGeneration"),Ekt.forEach(t),Dqr=r(Xqe," (BlenderbotSmall model)"),Xqe.forEach(t),Gqr=i(ze),_0=n(ze,"LI",{});var zqe=s(_0);BMe=n(zqe,"STRONG",{});var Ckt=s(BMe);Oqr=r(Ckt,"encoder-decoder"),Ckt.forEach(t),Vqr=r(zqe," \u2014 "),UK=n(zqe,"A",{href:!0});var wkt=s(UK);Xqr=r(wkt,"FlaxEncoderDecoderModel"),wkt.forEach(t),zqr=r(zqe," (Encoder decoder model)"),zqe.forEach(t),Wqr=i(ze),u0=n(ze,"LI",{});var Wqe=s(u0);IMe=n(Wqe,"STRONG",{});var Akt=s(IMe);Qqr=r(Akt,"marian"),Akt.forEach(t),Hqr=r(Wqe," \u2014 "),JK=n(Wqe,"A",{href:!0});var Lkt=s(JK);Uqr=r(Lkt,"FlaxMarianMTModel"),Lkt.forEach(t),Jqr=r(Wqe," (Marian model)"),Wqe.forEach(t),Yqr=i(ze),b0=n(ze,"LI",{});var Qqe=s(b0);NMe=n(Qqe,"STRONG",{});var ykt=s(NMe);Kqr=r(ykt,"mbart"),ykt.forEach(t),Zqr=r(Qqe," \u2014 "),YK=n(Qqe,"A",{href:!0});var xkt=s(YK);ejr=r(xkt,"FlaxMBartForConditionalGeneration"),xkt.forEach(t),ojr=r(Qqe," (mBART model)"),Qqe.forEach(t),rjr=i(ze),v0=n(ze,"LI",{});var Hqe=s(v0);qMe=n(Hqe,"STRONG",{});var $kt=s(qMe);tjr=r($kt,"mt5"),$kt.forEach(t),ajr=r(Hqe," \u2014 "),KK=n(Hqe,"A",{href:!0});var kkt=s(KK);njr=r(kkt,"FlaxMT5ForConditionalGeneration"),kkt.forEach(t),sjr=r(Hqe," (MT5 model)"),Hqe.forEach(t),ljr=i(ze),F0=n(ze,"LI",{});var Uqe=s(F0);jMe=n(Uqe,"STRONG",{});var Skt=s(jMe);ijr=r(Skt,"pegasus"),Skt.forEach(t),djr=r(Uqe," \u2014 "),ZK=n(Uqe,"A",{href:!0});var Rkt=s(ZK);cjr=r(Rkt,"FlaxPegasusForConditionalGeneration"),Rkt.forEach(t),fjr=r(Uqe," (Pegasus model)"),Uqe.forEach(t),mjr=i(ze),T0=n(ze,"LI",{});var Jqe=s(T0);DMe=n(Jqe,"STRONG",{});var Pkt=s(DMe);gjr=r(Pkt,"t5"),Pkt.forEach(t),hjr=r(Jqe," \u2014 "),eZ=n(Jqe,"A",{href:!0});var Bkt=s(eZ);pjr=r(Bkt,"FlaxT5ForConditionalGeneration"),Bkt.forEach(t),_jr=r(Jqe," (T5 model)"),Jqe.forEach(t),ze.forEach(t),ujr=i(Kl),T(M0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),AGe=i(f),Wc=n(f,"H2",{class:!0});var RVe=s(Wc);E0=n(RVe,"A",{id:!0,class:!0,href:!0});var Ikt=s(E0);GMe=n(Ikt,"SPAN",{});var Nkt=s(GMe);T(vx.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),bjr=i(RVe),OMe=n(RVe,"SPAN",{});var qkt=s(OMe);vjr=r(qkt,"FlaxAutoModelForSequenceClassification"),qkt.forEach(t),RVe.forEach(t),LGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Fx.$$.fragment,Zl),Fjr=i(Zl),Qc=n(Zl,"P",{});var Doe=s(Qc);Tjr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oZ=n(Doe,"A",{href:!0});var jkt=s(oZ);Mjr=r(jkt,"from_pretrained()"),jkt.forEach(t),Ejr=r(Doe," class method or the "),rZ=n(Doe,"A",{href:!0});var Dkt=s(rZ);Cjr=r(Dkt,"from_config()"),Dkt.forEach(t),wjr=r(Doe,` class
method.`),Doe.forEach(t),Ajr=i(Zl),Tx=n(Zl,"P",{});var PVe=s(Tx);Ljr=r(PVe,"This class cannot be instantiated directly using "),VMe=n(PVe,"CODE",{});var Gkt=s(VMe);yjr=r(Gkt,"__init__()"),Gkt.forEach(t),xjr=r(PVe," (throws an error)."),PVe.forEach(t),$jr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var SA=s(Qt);T(Mx.$$.fragment,SA),kjr=i(SA),XMe=n(SA,"P",{});var Okt=s(XMe);Sjr=r(Okt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Okt.forEach(t),Rjr=i(SA),Hc=n(SA,"P",{});var Goe=s(Hc);Pjr=r(Goe,`Note:
Loading a model from its configuration file does `),zMe=n(Goe,"STRONG",{});var Vkt=s(zMe);Bjr=r(Vkt,"not"),Vkt.forEach(t),Ijr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Goe,"A",{href:!0});var Xkt=s(tZ);Njr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),qjr=r(Goe," to load the model weights."),Goe.forEach(t),jjr=i(SA),T(C0.$$.fragment,SA),SA.forEach(t),Djr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(Ex.$$.fragment,ei),Gjr=i(ei),WMe=n(ei,"P",{});var zkt=s(WMe);Ojr=r(zkt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zkt.forEach(t),Vjr=i(ei),vn=n(ei,"P",{});var RA=s(vn);Xjr=r(RA,"The model class to instantiate is selected based on the "),QMe=n(RA,"CODE",{});var Wkt=s(QMe);zjr=r(Wkt,"model_type"),Wkt.forEach(t),Wjr=r(RA,` property of the config object (either
passed as an argument or loaded from `),HMe=n(RA,"CODE",{});var Qkt=s(HMe);Qjr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),Hjr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(RA,"CODE",{});var Hkt=s(UMe);Ujr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),Jjr=r(RA,":"),RA.forEach(t),Yjr=i(ei),ke=n(ei,"UL",{});var je=s(ke);w0=n(je,"LI",{});var Yqe=s(w0);JMe=n(Yqe,"STRONG",{});var Ukt=s(JMe);Kjr=r(Ukt,"albert"),Ukt.forEach(t),Zjr=r(Yqe," \u2014 "),aZ=n(Yqe,"A",{href:!0});var Jkt=s(aZ);eDr=r(Jkt,"FlaxAlbertForSequenceClassification"),Jkt.forEach(t),oDr=r(Yqe," (ALBERT model)"),Yqe.forEach(t),rDr=i(je),A0=n(je,"LI",{});var Kqe=s(A0);YMe=n(Kqe,"STRONG",{});var Ykt=s(YMe);tDr=r(Ykt,"bart"),Ykt.forEach(t),aDr=r(Kqe," \u2014 "),nZ=n(Kqe,"A",{href:!0});var Kkt=s(nZ);nDr=r(Kkt,"FlaxBartForSequenceClassification"),Kkt.forEach(t),sDr=r(Kqe," (BART model)"),Kqe.forEach(t),lDr=i(je),L0=n(je,"LI",{});var Zqe=s(L0);KMe=n(Zqe,"STRONG",{});var Zkt=s(KMe);iDr=r(Zkt,"bert"),Zkt.forEach(t),dDr=r(Zqe," \u2014 "),sZ=n(Zqe,"A",{href:!0});var eSt=s(sZ);cDr=r(eSt,"FlaxBertForSequenceClassification"),eSt.forEach(t),fDr=r(Zqe," (BERT model)"),Zqe.forEach(t),mDr=i(je),y0=n(je,"LI",{});var eje=s(y0);ZMe=n(eje,"STRONG",{});var oSt=s(ZMe);gDr=r(oSt,"big_bird"),oSt.forEach(t),hDr=r(eje," \u2014 "),lZ=n(eje,"A",{href:!0});var rSt=s(lZ);pDr=r(rSt,"FlaxBigBirdForSequenceClassification"),rSt.forEach(t),_Dr=r(eje," (BigBird model)"),eje.forEach(t),uDr=i(je),x0=n(je,"LI",{});var oje=s(x0);eEe=n(oje,"STRONG",{});var tSt=s(eEe);bDr=r(tSt,"distilbert"),tSt.forEach(t),vDr=r(oje," \u2014 "),iZ=n(oje,"A",{href:!0});var aSt=s(iZ);FDr=r(aSt,"FlaxDistilBertForSequenceClassification"),aSt.forEach(t),TDr=r(oje," (DistilBERT model)"),oje.forEach(t),MDr=i(je),$0=n(je,"LI",{});var rje=s($0);oEe=n(rje,"STRONG",{});var nSt=s(oEe);EDr=r(nSt,"electra"),nSt.forEach(t),CDr=r(rje," \u2014 "),dZ=n(rje,"A",{href:!0});var sSt=s(dZ);wDr=r(sSt,"FlaxElectraForSequenceClassification"),sSt.forEach(t),ADr=r(rje," (ELECTRA model)"),rje.forEach(t),LDr=i(je),k0=n(je,"LI",{});var tje=s(k0);rEe=n(tje,"STRONG",{});var lSt=s(rEe);yDr=r(lSt,"mbart"),lSt.forEach(t),xDr=r(tje," \u2014 "),cZ=n(tje,"A",{href:!0});var iSt=s(cZ);$Dr=r(iSt,"FlaxMBartForSequenceClassification"),iSt.forEach(t),kDr=r(tje," (mBART model)"),tje.forEach(t),SDr=i(je),S0=n(je,"LI",{});var aje=s(S0);tEe=n(aje,"STRONG",{});var dSt=s(tEe);RDr=r(dSt,"roberta"),dSt.forEach(t),PDr=r(aje," \u2014 "),fZ=n(aje,"A",{href:!0});var cSt=s(fZ);BDr=r(cSt,"FlaxRobertaForSequenceClassification"),cSt.forEach(t),IDr=r(aje," (RoBERTa model)"),aje.forEach(t),NDr=i(je),R0=n(je,"LI",{});var nje=s(R0);aEe=n(nje,"STRONG",{});var fSt=s(aEe);qDr=r(fSt,"roformer"),fSt.forEach(t),jDr=r(nje," \u2014 "),mZ=n(nje,"A",{href:!0});var mSt=s(mZ);DDr=r(mSt,"FlaxRoFormerForSequenceClassification"),mSt.forEach(t),GDr=r(nje," (RoFormer model)"),nje.forEach(t),ODr=i(je),P0=n(je,"LI",{});var sje=s(P0);nEe=n(sje,"STRONG",{});var gSt=s(nEe);VDr=r(gSt,"xlm-roberta"),gSt.forEach(t),XDr=r(sje," \u2014 "),gZ=n(sje,"A",{href:!0});var hSt=s(gZ);zDr=r(hSt,"FlaxXLMRobertaForSequenceClassification"),hSt.forEach(t),WDr=r(sje," (XLM-RoBERTa model)"),sje.forEach(t),je.forEach(t),QDr=i(ei),T(B0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),yGe=i(f),Uc=n(f,"H2",{class:!0});var BVe=s(Uc);I0=n(BVe,"A",{id:!0,class:!0,href:!0});var pSt=s(I0);sEe=n(pSt,"SPAN",{});var _St=s(sEe);T(Cx.$$.fragment,_St),_St.forEach(t),pSt.forEach(t),HDr=i(BVe),lEe=n(BVe,"SPAN",{});var uSt=s(lEe);UDr=r(uSt,"FlaxAutoModelForQuestionAnswering"),uSt.forEach(t),BVe.forEach(t),xGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(wx.$$.fragment,oi),JDr=i(oi),Jc=n(oi,"P",{});var Ooe=s(Jc);YDr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hZ=n(Ooe,"A",{href:!0});var bSt=s(hZ);KDr=r(bSt,"from_pretrained()"),bSt.forEach(t),ZDr=r(Ooe," class method or the "),pZ=n(Ooe,"A",{href:!0});var vSt=s(pZ);eGr=r(vSt,"from_config()"),vSt.forEach(t),oGr=r(Ooe,` class
method.`),Ooe.forEach(t),rGr=i(oi),Ax=n(oi,"P",{});var IVe=s(Ax);tGr=r(IVe,"This class cannot be instantiated directly using "),iEe=n(IVe,"CODE",{});var FSt=s(iEe);aGr=r(FSt,"__init__()"),FSt.forEach(t),nGr=r(IVe," (throws an error)."),IVe.forEach(t),sGr=i(oi),Ht=n(oi,"DIV",{class:!0});var PA=s(Ht);T(Lx.$$.fragment,PA),lGr=i(PA),dEe=n(PA,"P",{});var TSt=s(dEe);iGr=r(TSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TSt.forEach(t),dGr=i(PA),Yc=n(PA,"P",{});var Voe=s(Yc);cGr=r(Voe,`Note:
Loading a model from its configuration file does `),cEe=n(Voe,"STRONG",{});var MSt=s(cEe);fGr=r(MSt,"not"),MSt.forEach(t),mGr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Voe,"A",{href:!0});var ESt=s(_Z);gGr=r(ESt,"from_pretrained()"),ESt.forEach(t),hGr=r(Voe," to load the model weights."),Voe.forEach(t),pGr=i(PA),T(N0.$$.fragment,PA),PA.forEach(t),_Gr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(yx.$$.fragment,ri),uGr=i(ri),fEe=n(ri,"P",{});var CSt=s(fEe);bGr=r(CSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CSt.forEach(t),vGr=i(ri),Fn=n(ri,"P",{});var BA=s(Fn);FGr=r(BA,"The model class to instantiate is selected based on the "),mEe=n(BA,"CODE",{});var wSt=s(mEe);TGr=r(wSt,"model_type"),wSt.forEach(t),MGr=r(BA,` property of the config object (either
passed as an argument or loaded from `),gEe=n(BA,"CODE",{});var ASt=s(gEe);EGr=r(ASt,"pretrained_model_name_or_path"),ASt.forEach(t),CGr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(BA,"CODE",{});var LSt=s(hEe);wGr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),AGr=r(BA,":"),BA.forEach(t),LGr=i(ri),Se=n(ri,"UL",{});var De=s(Se);q0=n(De,"LI",{});var lje=s(q0);pEe=n(lje,"STRONG",{});var ySt=s(pEe);yGr=r(ySt,"albert"),ySt.forEach(t),xGr=r(lje," \u2014 "),uZ=n(lje,"A",{href:!0});var xSt=s(uZ);$Gr=r(xSt,"FlaxAlbertForQuestionAnswering"),xSt.forEach(t),kGr=r(lje," (ALBERT model)"),lje.forEach(t),SGr=i(De),j0=n(De,"LI",{});var ije=s(j0);_Ee=n(ije,"STRONG",{});var $St=s(_Ee);RGr=r($St,"bart"),$St.forEach(t),PGr=r(ije," \u2014 "),bZ=n(ije,"A",{href:!0});var kSt=s(bZ);BGr=r(kSt,"FlaxBartForQuestionAnswering"),kSt.forEach(t),IGr=r(ije," (BART model)"),ije.forEach(t),NGr=i(De),D0=n(De,"LI",{});var dje=s(D0);uEe=n(dje,"STRONG",{});var SSt=s(uEe);qGr=r(SSt,"bert"),SSt.forEach(t),jGr=r(dje," \u2014 "),vZ=n(dje,"A",{href:!0});var RSt=s(vZ);DGr=r(RSt,"FlaxBertForQuestionAnswering"),RSt.forEach(t),GGr=r(dje," (BERT model)"),dje.forEach(t),OGr=i(De),G0=n(De,"LI",{});var cje=s(G0);bEe=n(cje,"STRONG",{});var PSt=s(bEe);VGr=r(PSt,"big_bird"),PSt.forEach(t),XGr=r(cje," \u2014 "),FZ=n(cje,"A",{href:!0});var BSt=s(FZ);zGr=r(BSt,"FlaxBigBirdForQuestionAnswering"),BSt.forEach(t),WGr=r(cje," (BigBird model)"),cje.forEach(t),QGr=i(De),O0=n(De,"LI",{});var fje=s(O0);vEe=n(fje,"STRONG",{});var ISt=s(vEe);HGr=r(ISt,"distilbert"),ISt.forEach(t),UGr=r(fje," \u2014 "),TZ=n(fje,"A",{href:!0});var NSt=s(TZ);JGr=r(NSt,"FlaxDistilBertForQuestionAnswering"),NSt.forEach(t),YGr=r(fje," (DistilBERT model)"),fje.forEach(t),KGr=i(De),V0=n(De,"LI",{});var mje=s(V0);FEe=n(mje,"STRONG",{});var qSt=s(FEe);ZGr=r(qSt,"electra"),qSt.forEach(t),eOr=r(mje," \u2014 "),MZ=n(mje,"A",{href:!0});var jSt=s(MZ);oOr=r(jSt,"FlaxElectraForQuestionAnswering"),jSt.forEach(t),rOr=r(mje," (ELECTRA model)"),mje.forEach(t),tOr=i(De),X0=n(De,"LI",{});var gje=s(X0);TEe=n(gje,"STRONG",{});var DSt=s(TEe);aOr=r(DSt,"mbart"),DSt.forEach(t),nOr=r(gje," \u2014 "),EZ=n(gje,"A",{href:!0});var GSt=s(EZ);sOr=r(GSt,"FlaxMBartForQuestionAnswering"),GSt.forEach(t),lOr=r(gje," (mBART model)"),gje.forEach(t),iOr=i(De),z0=n(De,"LI",{});var hje=s(z0);MEe=n(hje,"STRONG",{});var OSt=s(MEe);dOr=r(OSt,"roberta"),OSt.forEach(t),cOr=r(hje," \u2014 "),CZ=n(hje,"A",{href:!0});var VSt=s(CZ);fOr=r(VSt,"FlaxRobertaForQuestionAnswering"),VSt.forEach(t),mOr=r(hje," (RoBERTa model)"),hje.forEach(t),gOr=i(De),W0=n(De,"LI",{});var pje=s(W0);EEe=n(pje,"STRONG",{});var XSt=s(EEe);hOr=r(XSt,"roformer"),XSt.forEach(t),pOr=r(pje," \u2014 "),wZ=n(pje,"A",{href:!0});var zSt=s(wZ);_Or=r(zSt,"FlaxRoFormerForQuestionAnswering"),zSt.forEach(t),uOr=r(pje," (RoFormer model)"),pje.forEach(t),bOr=i(De),Q0=n(De,"LI",{});var _je=s(Q0);CEe=n(_je,"STRONG",{});var WSt=s(CEe);vOr=r(WSt,"xlm-roberta"),WSt.forEach(t),FOr=r(_je," \u2014 "),AZ=n(_je,"A",{href:!0});var QSt=s(AZ);TOr=r(QSt,"FlaxXLMRobertaForQuestionAnswering"),QSt.forEach(t),MOr=r(_je," (XLM-RoBERTa model)"),_je.forEach(t),De.forEach(t),EOr=i(ri),T(H0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),$Ge=i(f),Kc=n(f,"H2",{class:!0});var NVe=s(Kc);U0=n(NVe,"A",{id:!0,class:!0,href:!0});var HSt=s(U0);wEe=n(HSt,"SPAN",{});var USt=s(wEe);T(xx.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),COr=i(NVe),AEe=n(NVe,"SPAN",{});var JSt=s(AEe);wOr=r(JSt,"FlaxAutoModelForTokenClassification"),JSt.forEach(t),NVe.forEach(t),kGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T($x.$$.fragment,ti),AOr=i(ti),Zc=n(ti,"P",{});var Xoe=s(Zc);LOr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LZ=n(Xoe,"A",{href:!0});var YSt=s(LZ);yOr=r(YSt,"from_pretrained()"),YSt.forEach(t),xOr=r(Xoe," class method or the "),yZ=n(Xoe,"A",{href:!0});var KSt=s(yZ);$Or=r(KSt,"from_config()"),KSt.forEach(t),kOr=r(Xoe,` class
method.`),Xoe.forEach(t),SOr=i(ti),kx=n(ti,"P",{});var qVe=s(kx);ROr=r(qVe,"This class cannot be instantiated directly using "),LEe=n(qVe,"CODE",{});var ZSt=s(LEe);POr=r(ZSt,"__init__()"),ZSt.forEach(t),BOr=r(qVe," (throws an error)."),qVe.forEach(t),IOr=i(ti),Ut=n(ti,"DIV",{class:!0});var IA=s(Ut);T(Sx.$$.fragment,IA),NOr=i(IA),yEe=n(IA,"P",{});var eRt=s(yEe);qOr=r(eRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eRt.forEach(t),jOr=i(IA),ef=n(IA,"P",{});var zoe=s(ef);DOr=r(zoe,`Note:
Loading a model from its configuration file does `),xEe=n(zoe,"STRONG",{});var oRt=s(xEe);GOr=r(oRt,"not"),oRt.forEach(t),OOr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(zoe,"A",{href:!0});var rRt=s(xZ);VOr=r(rRt,"from_pretrained()"),rRt.forEach(t),XOr=r(zoe," to load the model weights."),zoe.forEach(t),zOr=i(IA),T(J0.$$.fragment,IA),IA.forEach(t),WOr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Rx.$$.fragment,ai),QOr=i(ai),$Ee=n(ai,"P",{});var tRt=s($Ee);HOr=r(tRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tRt.forEach(t),UOr=i(ai),Tn=n(ai,"P",{});var NA=s(Tn);JOr=r(NA,"The model class to instantiate is selected based on the "),kEe=n(NA,"CODE",{});var aRt=s(kEe);YOr=r(aRt,"model_type"),aRt.forEach(t),KOr=r(NA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(NA,"CODE",{});var nRt=s(SEe);ZOr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),eVr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(NA,"CODE",{});var sRt=s(REe);oVr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),rVr=r(NA,":"),NA.forEach(t),tVr=i(ai),Oe=n(ai,"UL",{});var Fo=s(Oe);Y0=n(Fo,"LI",{});var uje=s(Y0);PEe=n(uje,"STRONG",{});var lRt=s(PEe);aVr=r(lRt,"albert"),lRt.forEach(t),nVr=r(uje," \u2014 "),$Z=n(uje,"A",{href:!0});var iRt=s($Z);sVr=r(iRt,"FlaxAlbertForTokenClassification"),iRt.forEach(t),lVr=r(uje," (ALBERT model)"),uje.forEach(t),iVr=i(Fo),K0=n(Fo,"LI",{});var bje=s(K0);BEe=n(bje,"STRONG",{});var dRt=s(BEe);dVr=r(dRt,"bert"),dRt.forEach(t),cVr=r(bje," \u2014 "),kZ=n(bje,"A",{href:!0});var cRt=s(kZ);fVr=r(cRt,"FlaxBertForTokenClassification"),cRt.forEach(t),mVr=r(bje," (BERT model)"),bje.forEach(t),gVr=i(Fo),Z0=n(Fo,"LI",{});var vje=s(Z0);IEe=n(vje,"STRONG",{});var fRt=s(IEe);hVr=r(fRt,"big_bird"),fRt.forEach(t),pVr=r(vje," \u2014 "),SZ=n(vje,"A",{href:!0});var mRt=s(SZ);_Vr=r(mRt,"FlaxBigBirdForTokenClassification"),mRt.forEach(t),uVr=r(vje," (BigBird model)"),vje.forEach(t),bVr=i(Fo),ew=n(Fo,"LI",{});var Fje=s(ew);NEe=n(Fje,"STRONG",{});var gRt=s(NEe);vVr=r(gRt,"distilbert"),gRt.forEach(t),FVr=r(Fje," \u2014 "),RZ=n(Fje,"A",{href:!0});var hRt=s(RZ);TVr=r(hRt,"FlaxDistilBertForTokenClassification"),hRt.forEach(t),MVr=r(Fje," (DistilBERT model)"),Fje.forEach(t),EVr=i(Fo),ow=n(Fo,"LI",{});var Tje=s(ow);qEe=n(Tje,"STRONG",{});var pRt=s(qEe);CVr=r(pRt,"electra"),pRt.forEach(t),wVr=r(Tje," \u2014 "),PZ=n(Tje,"A",{href:!0});var _Rt=s(PZ);AVr=r(_Rt,"FlaxElectraForTokenClassification"),_Rt.forEach(t),LVr=r(Tje," (ELECTRA model)"),Tje.forEach(t),yVr=i(Fo),rw=n(Fo,"LI",{});var Mje=s(rw);jEe=n(Mje,"STRONG",{});var uRt=s(jEe);xVr=r(uRt,"roberta"),uRt.forEach(t),$Vr=r(Mje," \u2014 "),BZ=n(Mje,"A",{href:!0});var bRt=s(BZ);kVr=r(bRt,"FlaxRobertaForTokenClassification"),bRt.forEach(t),SVr=r(Mje," (RoBERTa model)"),Mje.forEach(t),RVr=i(Fo),tw=n(Fo,"LI",{});var Eje=s(tw);DEe=n(Eje,"STRONG",{});var vRt=s(DEe);PVr=r(vRt,"roformer"),vRt.forEach(t),BVr=r(Eje," \u2014 "),IZ=n(Eje,"A",{href:!0});var FRt=s(IZ);IVr=r(FRt,"FlaxRoFormerForTokenClassification"),FRt.forEach(t),NVr=r(Eje," (RoFormer model)"),Eje.forEach(t),qVr=i(Fo),aw=n(Fo,"LI",{});var Cje=s(aw);GEe=n(Cje,"STRONG",{});var TRt=s(GEe);jVr=r(TRt,"xlm-roberta"),TRt.forEach(t),DVr=r(Cje," \u2014 "),NZ=n(Cje,"A",{href:!0});var MRt=s(NZ);GVr=r(MRt,"FlaxXLMRobertaForTokenClassification"),MRt.forEach(t),OVr=r(Cje," (XLM-RoBERTa model)"),Cje.forEach(t),Fo.forEach(t),VVr=i(ai),T(nw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),SGe=i(f),of=n(f,"H2",{class:!0});var jVe=s(of);sw=n(jVe,"A",{id:!0,class:!0,href:!0});var ERt=s(sw);OEe=n(ERt,"SPAN",{});var CRt=s(OEe);T(Px.$$.fragment,CRt),CRt.forEach(t),ERt.forEach(t),XVr=i(jVe),VEe=n(jVe,"SPAN",{});var wRt=s(VEe);zVr=r(wRt,"FlaxAutoModelForMultipleChoice"),wRt.forEach(t),jVe.forEach(t),RGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Bx.$$.fragment,ni),WVr=i(ni),rf=n(ni,"P",{});var Woe=s(rf);QVr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qZ=n(Woe,"A",{href:!0});var ARt=s(qZ);HVr=r(ARt,"from_pretrained()"),ARt.forEach(t),UVr=r(Woe," class method or the "),jZ=n(Woe,"A",{href:!0});var LRt=s(jZ);JVr=r(LRt,"from_config()"),LRt.forEach(t),YVr=r(Woe,` class
method.`),Woe.forEach(t),KVr=i(ni),Ix=n(ni,"P",{});var DVe=s(Ix);ZVr=r(DVe,"This class cannot be instantiated directly using "),XEe=n(DVe,"CODE",{});var yRt=s(XEe);eXr=r(yRt,"__init__()"),yRt.forEach(t),oXr=r(DVe," (throws an error)."),DVe.forEach(t),rXr=i(ni),Jt=n(ni,"DIV",{class:!0});var qA=s(Jt);T(Nx.$$.fragment,qA),tXr=i(qA),zEe=n(qA,"P",{});var xRt=s(zEe);aXr=r(xRt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xRt.forEach(t),nXr=i(qA),tf=n(qA,"P",{});var Qoe=s(tf);sXr=r(Qoe,`Note:
Loading a model from its configuration file does `),WEe=n(Qoe,"STRONG",{});var $Rt=s(WEe);lXr=r($Rt,"not"),$Rt.forEach(t),iXr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Qoe,"A",{href:!0});var kRt=s(DZ);dXr=r(kRt,"from_pretrained()"),kRt.forEach(t),cXr=r(Qoe," to load the model weights."),Qoe.forEach(t),fXr=i(qA),T(lw.$$.fragment,qA),qA.forEach(t),mXr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(qx.$$.fragment,si),gXr=i(si),QEe=n(si,"P",{});var SRt=s(QEe);hXr=r(SRt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SRt.forEach(t),pXr=i(si),Mn=n(si,"P",{});var jA=s(Mn);_Xr=r(jA,"The model class to instantiate is selected based on the "),HEe=n(jA,"CODE",{});var RRt=s(HEe);uXr=r(RRt,"model_type"),RRt.forEach(t),bXr=r(jA,` property of the config object (either
passed as an argument or loaded from `),UEe=n(jA,"CODE",{});var PRt=s(UEe);vXr=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),FXr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(jA,"CODE",{});var BRt=s(JEe);TXr=r(BRt,"pretrained_model_name_or_path"),BRt.forEach(t),MXr=r(jA,":"),jA.forEach(t),EXr=i(si),Ve=n(si,"UL",{});var To=s(Ve);iw=n(To,"LI",{});var wje=s(iw);YEe=n(wje,"STRONG",{});var IRt=s(YEe);CXr=r(IRt,"albert"),IRt.forEach(t),wXr=r(wje," \u2014 "),GZ=n(wje,"A",{href:!0});var NRt=s(GZ);AXr=r(NRt,"FlaxAlbertForMultipleChoice"),NRt.forEach(t),LXr=r(wje," (ALBERT model)"),wje.forEach(t),yXr=i(To),dw=n(To,"LI",{});var Aje=s(dw);KEe=n(Aje,"STRONG",{});var qRt=s(KEe);xXr=r(qRt,"bert"),qRt.forEach(t),$Xr=r(Aje," \u2014 "),OZ=n(Aje,"A",{href:!0});var jRt=s(OZ);kXr=r(jRt,"FlaxBertForMultipleChoice"),jRt.forEach(t),SXr=r(Aje," (BERT model)"),Aje.forEach(t),RXr=i(To),cw=n(To,"LI",{});var Lje=s(cw);ZEe=n(Lje,"STRONG",{});var DRt=s(ZEe);PXr=r(DRt,"big_bird"),DRt.forEach(t),BXr=r(Lje," \u2014 "),VZ=n(Lje,"A",{href:!0});var GRt=s(VZ);IXr=r(GRt,"FlaxBigBirdForMultipleChoice"),GRt.forEach(t),NXr=r(Lje," (BigBird model)"),Lje.forEach(t),qXr=i(To),fw=n(To,"LI",{});var yje=s(fw);eCe=n(yje,"STRONG",{});var ORt=s(eCe);jXr=r(ORt,"distilbert"),ORt.forEach(t),DXr=r(yje," \u2014 "),XZ=n(yje,"A",{href:!0});var VRt=s(XZ);GXr=r(VRt,"FlaxDistilBertForMultipleChoice"),VRt.forEach(t),OXr=r(yje," (DistilBERT model)"),yje.forEach(t),VXr=i(To),mw=n(To,"LI",{});var xje=s(mw);oCe=n(xje,"STRONG",{});var XRt=s(oCe);XXr=r(XRt,"electra"),XRt.forEach(t),zXr=r(xje," \u2014 "),zZ=n(xje,"A",{href:!0});var zRt=s(zZ);WXr=r(zRt,"FlaxElectraForMultipleChoice"),zRt.forEach(t),QXr=r(xje," (ELECTRA model)"),xje.forEach(t),HXr=i(To),gw=n(To,"LI",{});var $je=s(gw);rCe=n($je,"STRONG",{});var WRt=s(rCe);UXr=r(WRt,"roberta"),WRt.forEach(t),JXr=r($je," \u2014 "),WZ=n($je,"A",{href:!0});var QRt=s(WZ);YXr=r(QRt,"FlaxRobertaForMultipleChoice"),QRt.forEach(t),KXr=r($je," (RoBERTa model)"),$je.forEach(t),ZXr=i(To),hw=n(To,"LI",{});var kje=s(hw);tCe=n(kje,"STRONG",{});var HRt=s(tCe);ezr=r(HRt,"roformer"),HRt.forEach(t),ozr=r(kje," \u2014 "),QZ=n(kje,"A",{href:!0});var URt=s(QZ);rzr=r(URt,"FlaxRoFormerForMultipleChoice"),URt.forEach(t),tzr=r(kje," (RoFormer model)"),kje.forEach(t),azr=i(To),pw=n(To,"LI",{});var Sje=s(pw);aCe=n(Sje,"STRONG",{});var JRt=s(aCe);nzr=r(JRt,"xlm-roberta"),JRt.forEach(t),szr=r(Sje," \u2014 "),HZ=n(Sje,"A",{href:!0});var YRt=s(HZ);lzr=r(YRt,"FlaxXLMRobertaForMultipleChoice"),YRt.forEach(t),izr=r(Sje," (XLM-RoBERTa model)"),Sje.forEach(t),To.forEach(t),dzr=i(si),T(_w.$$.fragment,si),si.forEach(t),ni.forEach(t),PGe=i(f),af=n(f,"H2",{class:!0});var GVe=s(af);uw=n(GVe,"A",{id:!0,class:!0,href:!0});var KRt=s(uw);nCe=n(KRt,"SPAN",{});var ZRt=s(nCe);T(jx.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),czr=i(GVe),sCe=n(GVe,"SPAN",{});var ePt=s(sCe);fzr=r(ePt,"FlaxAutoModelForNextSentencePrediction"),ePt.forEach(t),GVe.forEach(t),BGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Dx.$$.fragment,li),mzr=i(li),nf=n(li,"P",{});var Hoe=s(nf);gzr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UZ=n(Hoe,"A",{href:!0});var oPt=s(UZ);hzr=r(oPt,"from_pretrained()"),oPt.forEach(t),pzr=r(Hoe," class method or the "),JZ=n(Hoe,"A",{href:!0});var rPt=s(JZ);_zr=r(rPt,"from_config()"),rPt.forEach(t),uzr=r(Hoe,` class
method.`),Hoe.forEach(t),bzr=i(li),Gx=n(li,"P",{});var OVe=s(Gx);vzr=r(OVe,"This class cannot be instantiated directly using "),lCe=n(OVe,"CODE",{});var tPt=s(lCe);Fzr=r(tPt,"__init__()"),tPt.forEach(t),Tzr=r(OVe," (throws an error)."),OVe.forEach(t),Mzr=i(li),Yt=n(li,"DIV",{class:!0});var DA=s(Yt);T(Ox.$$.fragment,DA),Ezr=i(DA),iCe=n(DA,"P",{});var aPt=s(iCe);Czr=r(aPt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aPt.forEach(t),wzr=i(DA),sf=n(DA,"P",{});var Uoe=s(sf);Azr=r(Uoe,`Note:
Loading a model from its configuration file does `),dCe=n(Uoe,"STRONG",{});var nPt=s(dCe);Lzr=r(nPt,"not"),nPt.forEach(t),yzr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(Uoe,"A",{href:!0});var sPt=s(YZ);xzr=r(sPt,"from_pretrained()"),sPt.forEach(t),$zr=r(Uoe," to load the model weights."),Uoe.forEach(t),kzr=i(DA),T(bw.$$.fragment,DA),DA.forEach(t),Szr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Vx.$$.fragment,ii),Rzr=i(ii),cCe=n(ii,"P",{});var lPt=s(cCe);Pzr=r(lPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lPt.forEach(t),Bzr=i(ii),En=n(ii,"P",{});var GA=s(En);Izr=r(GA,"The model class to instantiate is selected based on the "),fCe=n(GA,"CODE",{});var iPt=s(fCe);Nzr=r(iPt,"model_type"),iPt.forEach(t),qzr=r(GA,` property of the config object (either
passed as an argument or loaded from `),mCe=n(GA,"CODE",{});var dPt=s(mCe);jzr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),Dzr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(GA,"CODE",{});var cPt=s(gCe);Gzr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),Ozr=r(GA,":"),GA.forEach(t),Vzr=i(ii),hCe=n(ii,"UL",{});var fPt=s(hCe);vw=n(fPt,"LI",{});var Rje=s(vw);pCe=n(Rje,"STRONG",{});var mPt=s(pCe);Xzr=r(mPt,"bert"),mPt.forEach(t),zzr=r(Rje," \u2014 "),KZ=n(Rje,"A",{href:!0});var gPt=s(KZ);Wzr=r(gPt,"FlaxBertForNextSentencePrediction"),gPt.forEach(t),Qzr=r(Rje," (BERT model)"),Rje.forEach(t),fPt.forEach(t),Hzr=i(ii),T(Fw.$$.fragment,ii),ii.forEach(t),li.forEach(t),IGe=i(f),lf=n(f,"H2",{class:!0});var VVe=s(lf);Tw=n(VVe,"A",{id:!0,class:!0,href:!0});var hPt=s(Tw);_Ce=n(hPt,"SPAN",{});var pPt=s(_Ce);T(Xx.$$.fragment,pPt),pPt.forEach(t),hPt.forEach(t),Uzr=i(VVe),uCe=n(VVe,"SPAN",{});var _Pt=s(uCe);Jzr=r(_Pt,"FlaxAutoModelForImageClassification"),_Pt.forEach(t),VVe.forEach(t),NGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(zx.$$.fragment,di),Yzr=i(di),df=n(di,"P",{});var Joe=s(df);Kzr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZZ=n(Joe,"A",{href:!0});var uPt=s(ZZ);Zzr=r(uPt,"from_pretrained()"),uPt.forEach(t),eWr=r(Joe," class method or the "),eee=n(Joe,"A",{href:!0});var bPt=s(eee);oWr=r(bPt,"from_config()"),bPt.forEach(t),rWr=r(Joe,` class
method.`),Joe.forEach(t),tWr=i(di),Wx=n(di,"P",{});var XVe=s(Wx);aWr=r(XVe,"This class cannot be instantiated directly using "),bCe=n(XVe,"CODE",{});var vPt=s(bCe);nWr=r(vPt,"__init__()"),vPt.forEach(t),sWr=r(XVe," (throws an error)."),XVe.forEach(t),lWr=i(di),Kt=n(di,"DIV",{class:!0});var OA=s(Kt);T(Qx.$$.fragment,OA),iWr=i(OA),vCe=n(OA,"P",{});var FPt=s(vCe);dWr=r(FPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FPt.forEach(t),cWr=i(OA),cf=n(OA,"P",{});var Yoe=s(cf);fWr=r(Yoe,`Note:
Loading a model from its configuration file does `),FCe=n(Yoe,"STRONG",{});var TPt=s(FCe);mWr=r(TPt,"not"),TPt.forEach(t),gWr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Yoe,"A",{href:!0});var MPt=s(oee);hWr=r(MPt,"from_pretrained()"),MPt.forEach(t),pWr=r(Yoe," to load the model weights."),Yoe.forEach(t),_Wr=i(OA),T(Mw.$$.fragment,OA),OA.forEach(t),uWr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Hx.$$.fragment,ci),bWr=i(ci),TCe=n(ci,"P",{});var EPt=s(TCe);vWr=r(EPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EPt.forEach(t),FWr=i(ci),Cn=n(ci,"P",{});var VA=s(Cn);TWr=r(VA,"The model class to instantiate is selected based on the "),MCe=n(VA,"CODE",{});var CPt=s(MCe);MWr=r(CPt,"model_type"),CPt.forEach(t),EWr=r(VA,` property of the config object (either
passed as an argument or loaded from `),ECe=n(VA,"CODE",{});var wPt=s(ECe);CWr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),wWr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(VA,"CODE",{});var APt=s(CCe);AWr=r(APt,"pretrained_model_name_or_path"),APt.forEach(t),LWr=r(VA,":"),VA.forEach(t),yWr=i(ci),Ux=n(ci,"UL",{});var zVe=s(Ux);Ew=n(zVe,"LI",{});var Pje=s(Ew);wCe=n(Pje,"STRONG",{});var LPt=s(wCe);xWr=r(LPt,"beit"),LPt.forEach(t),$Wr=r(Pje," \u2014 "),ree=n(Pje,"A",{href:!0});var yPt=s(ree);kWr=r(yPt,"FlaxBeitForImageClassification"),yPt.forEach(t),SWr=r(Pje," (BEiT model)"),Pje.forEach(t),RWr=i(zVe),Cw=n(zVe,"LI",{});var Bje=s(Cw);ACe=n(Bje,"STRONG",{});var xPt=s(ACe);PWr=r(xPt,"vit"),xPt.forEach(t),BWr=r(Bje," \u2014 "),tee=n(Bje,"A",{href:!0});var $Pt=s(tee);IWr=r($Pt,"FlaxViTForImageClassification"),$Pt.forEach(t),NWr=r(Bje," (ViT model)"),Bje.forEach(t),zVe.forEach(t),qWr=i(ci),T(ww.$$.fragment,ci),ci.forEach(t),di.forEach(t),qGe=i(f),ff=n(f,"H2",{class:!0});var WVe=s(ff);Aw=n(WVe,"A",{id:!0,class:!0,href:!0});var kPt=s(Aw);LCe=n(kPt,"SPAN",{});var SPt=s(LCe);T(Jx.$$.fragment,SPt),SPt.forEach(t),kPt.forEach(t),jWr=i(WVe),yCe=n(WVe,"SPAN",{});var RPt=s(yCe);DWr=r(RPt,"FlaxAutoModelForVision2Seq"),RPt.forEach(t),WVe.forEach(t),jGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Yx.$$.fragment,fi),GWr=i(fi),mf=n(fi,"P",{});var Koe=s(mf);OWr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aee=n(Koe,"A",{href:!0});var PPt=s(aee);VWr=r(PPt,"from_pretrained()"),PPt.forEach(t),XWr=r(Koe," class method or the "),nee=n(Koe,"A",{href:!0});var BPt=s(nee);zWr=r(BPt,"from_config()"),BPt.forEach(t),WWr=r(Koe,` class
method.`),Koe.forEach(t),QWr=i(fi),Kx=n(fi,"P",{});var QVe=s(Kx);HWr=r(QVe,"This class cannot be instantiated directly using "),xCe=n(QVe,"CODE",{});var IPt=s(xCe);UWr=r(IPt,"__init__()"),IPt.forEach(t),JWr=r(QVe," (throws an error)."),QVe.forEach(t),YWr=i(fi),Zt=n(fi,"DIV",{class:!0});var XA=s(Zt);T(Zx.$$.fragment,XA),KWr=i(XA),$Ce=n(XA,"P",{});var NPt=s($Ce);ZWr=r(NPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NPt.forEach(t),eQr=i(XA),gf=n(XA,"P",{});var Zoe=s(gf);oQr=r(Zoe,`Note:
Loading a model from its configuration file does `),kCe=n(Zoe,"STRONG",{});var qPt=s(kCe);rQr=r(qPt,"not"),qPt.forEach(t),tQr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(Zoe,"A",{href:!0});var jPt=s(see);aQr=r(jPt,"from_pretrained()"),jPt.forEach(t),nQr=r(Zoe," to load the model weights."),Zoe.forEach(t),sQr=i(XA),T(Lw.$$.fragment,XA),XA.forEach(t),lQr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(e$.$$.fragment,mi),iQr=i(mi),SCe=n(mi,"P",{});var DPt=s(SCe);dQr=r(DPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DPt.forEach(t),cQr=i(mi),wn=n(mi,"P",{});var zA=s(wn);fQr=r(zA,"The model class to instantiate is selected based on the "),RCe=n(zA,"CODE",{});var GPt=s(RCe);mQr=r(GPt,"model_type"),GPt.forEach(t),gQr=r(zA,` property of the config object (either
passed as an argument or loaded from `),PCe=n(zA,"CODE",{});var OPt=s(PCe);hQr=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),pQr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=n(zA,"CODE",{});var VPt=s(BCe);_Qr=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),uQr=r(zA,":"),zA.forEach(t),bQr=i(mi),ICe=n(mi,"UL",{});var XPt=s(ICe);yw=n(XPt,"LI",{});var Ije=s(yw);NCe=n(Ije,"STRONG",{});var zPt=s(NCe);vQr=r(zPt,"vision-encoder-decoder"),zPt.forEach(t),FQr=r(Ije," \u2014 "),lee=n(Ije,"A",{href:!0});var WPt=s(lee);TQr=r(WPt,"FlaxVisionEncoderDecoderModel"),WPt.forEach(t),MQr=r(Ije," (Vision Encoder decoder model)"),Ije.forEach(t),XPt.forEach(t),EQr=i(mi),T(xw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(JIt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(Tk,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Mk,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(Ek,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(Ck,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(wk,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(Ak,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Lk,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(yk,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(xk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($k,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(kk,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig"),c(Sk,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(Rk,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(Pk,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(Bk,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(Ik,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(Nk,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(qk,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(jk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Dk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Gk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ok,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(Vk,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Xk,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(zk,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c(Wk,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(Qk,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Hk,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c(Uk,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c(Jk,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(Yk,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Kk,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Zk,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(eS,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(oS,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kg,"id","transformers.AutoTokenizer"),c(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoFeatureExtractor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"id","transformers.AutoProcessor"),c(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_p,"id","transformers.AutoModel"),c(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_p,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomModel"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uu,"id","transformers.AutoModelForPreTraining"),c(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForCausalLM"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForMaskedLM"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qb,"id","transformers.AutoModelForSeq2SeqLM"),c(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForSequenceClassification"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.AutoModelForMultipleChoice"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForNextSentencePrediction"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.AutoModelForTokenClassification"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForQuestionAnswering"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.AutoModelForTableQuestionAnswering"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.AutoModelForImageClassification"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.AutoModelForVision2Seq"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.AutoModelForAudioFrameClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForCTC"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTForCTC"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForAudioXVector"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.AutoModelForMaskedImageModeling"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.AutoModelForObjectDetection"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForImageSegmentation"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForSemanticSegmentation"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForInstanceSegmentation"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.TFAutoModel"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.TFAutoModelForPreTraining"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForCausalLM"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.TFAutoModelForImageClassification"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.TFAutoModelForMaskedLM"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.TFAutoModelForSequenceClassification"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForMultipleChoice"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForTokenClassification"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForQuestionAnswering"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForVision2Seq"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModel"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForCausalLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForPreTraining"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForMaskedLM"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForTokenClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(SZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(RZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(BZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(NZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(qZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(OZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(VZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(XZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(zZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(WZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(QZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(HZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForImageClassification"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(tee,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(aee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,tt,u),e(tt,hi),e(tt,pi),e(pi,WA),e(tt,bf),b(f,Ge,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,QA),e(We,yn),e(We,xn),e(xn,HA),e(We,ui),e(We,$n),e($n,UA),e(We,bi),b(f,vf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,pk),e(Ae,vi),e(vi,_k),e(Ae,uk),b(f,Eo,u),b(f,Aa,u),e(Aa,bk),e(Aa,Ff),e(Ff,vk),e(Aa,HVe),b(f,Nje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,ere),M(JA,ere,null),e(Fi,UVe),e(Fi,ore),e(ore,JVe),b(f,qje,u),b(f,kn,u),e(kn,YVe),e(kn,rre),e(rre,KVe),e(kn,ZVe),e(kn,tre),e(tre,eXe),e(kn,oXe),b(f,jje,u),M(YA,f,u),b(f,Dje,u),b(f,Fk,u),e(Fk,rXe),b(f,Gje,u),M(Mf,f,u),b(f,Oje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,are),M(KA,are,null),e(Ti,tXe),e(Ti,nre),e(nre,aXe),b(f,Vje,u),b(f,Co,u),M(ZA,Co,null),e(Co,nXe),e(Co,eL),e(eL,sXe),e(eL,Tk),e(Tk,lXe),e(eL,iXe),e(Co,dXe),e(Co,oL),e(oL,cXe),e(oL,sre),e(sre,fXe),e(oL,mXe),e(Co,gXe),e(Co,Er),M(rL,Er,null),e(Er,hXe),e(Er,lre),e(lre,pXe),e(Er,_Xe),e(Er,Mi),e(Mi,uXe),e(Mi,ire),e(ire,bXe),e(Mi,vXe),e(Mi,dre),e(dre,FXe),e(Mi,TXe),e(Er,MXe),e(Er,A),e(A,Cf),e(Cf,cre),e(cre,EXe),e(Cf,CXe),e(Cf,Mk),e(Mk,wXe),e(Cf,AXe),e(A,LXe),e(A,wf),e(wf,fre),e(fre,yXe),e(wf,xXe),e(wf,Ek),e(Ek,$Xe),e(wf,kXe),e(A,SXe),e(A,Af),e(Af,mre),e(mre,RXe),e(Af,PXe),e(Af,Ck),e(Ck,BXe),e(Af,IXe),e(A,NXe),e(A,Lf),e(Lf,gre),e(gre,qXe),e(Lf,jXe),e(Lf,wk),e(wk,DXe),e(Lf,GXe),e(A,OXe),e(A,yf),e(yf,hre),e(hre,VXe),e(yf,XXe),e(yf,Ak),e(Ak,zXe),e(yf,WXe),e(A,QXe),e(A,xf),e(xf,pre),e(pre,HXe),e(xf,UXe),e(xf,Lk),e(Lk,JXe),e(xf,YXe),e(A,KXe),e(A,$f),e($f,_re),e(_re,ZXe),e($f,eze),e($f,yk),e(yk,oze),e($f,rze),e(A,tze),e(A,kf),e(kf,ure),e(ure,aze),e(kf,nze),e(kf,xk),e(xk,sze),e(kf,lze),e(A,ize),e(A,Sf),e(Sf,bre),e(bre,dze),e(Sf,cze),e(Sf,$k),e($k,fze),e(Sf,mze),e(A,gze),e(A,Rf),e(Rf,vre),e(vre,hze),e(Rf,pze),e(Rf,kk),e(kk,_ze),e(Rf,uze),e(A,bze),e(A,Pf),e(Pf,Fre),e(Fre,vze),e(Pf,Fze),e(Pf,Sk),e(Sk,Tze),e(Pf,Mze),e(A,Eze),e(A,Bf),e(Bf,Tre),e(Tre,Cze),e(Bf,wze),e(Bf,Rk),e(Rk,Aze),e(Bf,Lze),e(A,yze),e(A,If),e(If,Mre),e(Mre,xze),e(If,$ze),e(If,Pk),e(Pk,kze),e(If,Sze),e(A,Rze),e(A,Nf),e(Nf,Ere),e(Ere,Pze),e(Nf,Bze),e(Nf,Bk),e(Bk,Ize),e(Nf,Nze),e(A,qze),e(A,qf),e(qf,Cre),e(Cre,jze),e(qf,Dze),e(qf,Ik),e(Ik,Gze),e(qf,Oze),e(A,Vze),e(A,jf),e(jf,wre),e(wre,Xze),e(jf,zze),e(jf,Nk),e(Nk,Wze),e(jf,Qze),e(A,Hze),e(A,Df),e(Df,Are),e(Are,Uze),e(Df,Jze),e(Df,qk),e(qk,Yze),e(Df,Kze),e(A,Zze),e(A,Gf),e(Gf,Lre),e(Lre,eWe),e(Gf,oWe),e(Gf,jk),e(jk,rWe),e(Gf,tWe),e(A,aWe),e(A,Of),e(Of,yre),e(yre,nWe),e(Of,sWe),e(Of,Dk),e(Dk,lWe),e(Of,iWe),e(A,dWe),e(A,Vf),e(Vf,xre),e(xre,cWe),e(Vf,fWe),e(Vf,Gk),e(Gk,mWe),e(Vf,gWe),e(A,hWe),e(A,Xf),e(Xf,$re),e($re,pWe),e(Xf,_We),e(Xf,Ok),e(Ok,uWe),e(Xf,bWe),e(A,vWe),e(A,zf),e(zf,kre),e(kre,FWe),e(zf,TWe),e(zf,Vk),e(Vk,MWe),e(zf,EWe),e(A,CWe),e(A,Wf),e(Wf,Sre),e(Sre,wWe),e(Wf,AWe),e(Wf,Xk),e(Xk,LWe),e(Wf,yWe),e(A,xWe),e(A,Qf),e(Qf,Rre),e(Rre,$We),e(Qf,kWe),e(Qf,zk),e(zk,SWe),e(Qf,RWe),e(A,PWe),e(A,Hf),e(Hf,Pre),e(Pre,BWe),e(Hf,IWe),e(Hf,Wk),e(Wk,NWe),e(Hf,qWe),e(A,jWe),e(A,Uf),e(Uf,Bre),e(Bre,DWe),e(Uf,GWe),e(Uf,Qk),e(Qk,OWe),e(Uf,VWe),e(A,XWe),e(A,Jf),e(Jf,Ire),e(Ire,zWe),e(Jf,WWe),e(Jf,Hk),e(Hk,QWe),e(Jf,HWe),e(A,UWe),e(A,Yf),e(Yf,Nre),e(Nre,JWe),e(Yf,YWe),e(Yf,Uk),e(Uk,KWe),e(Yf,ZWe),e(A,eQe),e(A,Kf),e(Kf,qre),e(qre,oQe),e(Kf,rQe),e(Kf,Jk),e(Jk,tQe),e(Kf,aQe),e(A,nQe),e(A,Zf),e(Zf,jre),e(jre,sQe),e(Zf,lQe),e(Zf,Yk),e(Yk,iQe),e(Zf,dQe),e(A,cQe),e(A,em),e(em,Dre),e(Dre,fQe),e(em,mQe),e(em,Kk),e(Kk,gQe),e(em,hQe),e(A,pQe),e(A,om),e(om,Gre),e(Gre,_Qe),e(om,uQe),e(om,Zk),e(Zk,bQe),e(om,vQe),e(A,FQe),e(A,rm),e(rm,Ore),e(Ore,TQe),e(rm,MQe),e(rm,eS),e(eS,EQe),e(rm,CQe),e(A,wQe),e(A,tm),e(tm,Vre),e(Vre,AQe),e(tm,LQe),e(tm,oS),e(oS,yQe),e(tm,xQe),e(A,$Qe),e(A,am),e(am,Xre),e(Xre,kQe),e(am,SQe),e(am,rS),e(rS,RQe),e(am,PQe),e(A,BQe),e(A,nm),e(nm,zre),e(zre,IQe),e(nm,NQe),e(nm,tS),e(tS,qQe),e(nm,jQe),e(A,DQe),e(A,sm),e(sm,Wre),e(Wre,GQe),e(sm,OQe),e(sm,aS),e(aS,VQe),e(sm,XQe),e(A,zQe),e(A,lm),e(lm,Qre),e(Qre,WQe),e(lm,QQe),e(lm,nS),e(nS,HQe),e(lm,UQe),e(A,JQe),e(A,im),e(im,Hre),e(Hre,YQe),e(im,KQe),e(im,sS),e(sS,ZQe),e(im,eHe),e(A,oHe),e(A,dm),e(dm,Ure),e(Ure,rHe),e(dm,tHe),e(dm,lS),e(lS,aHe),e(dm,nHe),e(A,sHe),e(A,cm),e(cm,Jre),e(Jre,lHe),e(cm,iHe),e(cm,iS),e(iS,dHe),e(cm,cHe),e(A,fHe),e(A,fm),e(fm,Yre),e(Yre,mHe),e(fm,gHe),e(fm,dS),e(dS,hHe),e(fm,pHe),e(A,_He),e(A,mm),e(mm,Kre),e(Kre,uHe),e(mm,bHe),e(mm,cS),e(cS,vHe),e(mm,FHe),e(A,THe),e(A,gm),e(gm,Zre),e(Zre,MHe),e(gm,EHe),e(gm,fS),e(fS,CHe),e(gm,wHe),e(A,AHe),e(A,hm),e(hm,ete),e(ete,LHe),e(hm,yHe),e(hm,mS),e(mS,xHe),e(hm,$He),e(A,kHe),e(A,pm),e(pm,ote),e(ote,SHe),e(pm,RHe),e(pm,gS),e(gS,PHe),e(pm,BHe),e(A,IHe),e(A,_m),e(_m,rte),e(rte,NHe),e(_m,qHe),e(_m,hS),e(hS,jHe),e(_m,DHe),e(A,GHe),e(A,um),e(um,tte),e(tte,OHe),e(um,VHe),e(um,pS),e(pS,XHe),e(um,zHe),e(A,WHe),e(A,bm),e(bm,ate),e(ate,QHe),e(bm,HHe),e(bm,_S),e(_S,UHe),e(bm,JHe),e(A,YHe),e(A,vm),e(vm,nte),e(nte,KHe),e(vm,ZHe),e(vm,uS),e(uS,eUe),e(vm,oUe),e(A,rUe),e(A,Fm),e(Fm,ste),e(ste,tUe),e(Fm,aUe),e(Fm,bS),e(bS,nUe),e(Fm,sUe),e(A,lUe),e(A,Tm),e(Tm,lte),e(lte,iUe),e(Tm,dUe),e(Tm,vS),e(vS,cUe),e(Tm,fUe),e(A,mUe),e(A,Mm),e(Mm,ite),e(ite,gUe),e(Mm,hUe),e(Mm,FS),e(FS,pUe),e(Mm,_Ue),e(A,uUe),e(A,Em),e(Em,dte),e(dte,bUe),e(Em,vUe),e(Em,TS),e(TS,FUe),e(Em,TUe),e(A,MUe),e(A,Cm),e(Cm,cte),e(cte,EUe),e(Cm,CUe),e(Cm,MS),e(MS,wUe),e(Cm,AUe),e(A,LUe),e(A,wm),e(wm,fte),e(fte,yUe),e(wm,xUe),e(wm,ES),e(ES,$Ue),e(wm,kUe),e(A,SUe),e(A,Am),e(Am,mte),e(mte,RUe),e(Am,PUe),e(Am,CS),e(CS,BUe),e(Am,IUe),e(A,NUe),e(A,Lm),e(Lm,gte),e(gte,qUe),e(Lm,jUe),e(Lm,wS),e(wS,DUe),e(Lm,GUe),e(A,OUe),e(A,ym),e(ym,hte),e(hte,VUe),e(ym,XUe),e(ym,AS),e(AS,zUe),e(ym,WUe),e(A,QUe),e(A,xm),e(xm,pte),e(pte,HUe),e(xm,UUe),e(xm,LS),e(LS,JUe),e(xm,YUe),e(A,KUe),e(A,$m),e($m,_te),e(_te,ZUe),e($m,eJe),e($m,yS),e(yS,oJe),e($m,rJe),e(A,tJe),e(A,km),e(km,ute),e(ute,aJe),e(km,nJe),e(km,xS),e(xS,sJe),e(km,lJe),e(A,iJe),e(A,Sm),e(Sm,bte),e(bte,dJe),e(Sm,cJe),e(Sm,$S),e($S,fJe),e(Sm,mJe),e(A,gJe),e(A,Rm),e(Rm,vte),e(vte,hJe),e(Rm,pJe),e(Rm,kS),e(kS,_Je),e(Rm,uJe),e(A,bJe),e(A,Pm),e(Pm,Fte),e(Fte,vJe),e(Pm,FJe),e(Pm,SS),e(SS,TJe),e(Pm,MJe),e(A,EJe),e(A,Bm),e(Bm,Tte),e(Tte,CJe),e(Bm,wJe),e(Bm,RS),e(RS,AJe),e(Bm,LJe),e(A,yJe),e(A,Im),e(Im,Mte),e(Mte,xJe),e(Im,$Je),e(Im,PS),e(PS,kJe),e(Im,SJe),e(A,RJe),e(A,Nm),e(Nm,Ete),e(Ete,PJe),e(Nm,BJe),e(Nm,BS),e(BS,IJe),e(Nm,NJe),e(A,qJe),e(A,qm),e(qm,Cte),e(Cte,jJe),e(qm,DJe),e(qm,IS),e(IS,GJe),e(qm,OJe),e(A,VJe),e(A,jm),e(jm,wte),e(wte,XJe),e(jm,zJe),e(jm,NS),e(NS,WJe),e(jm,QJe),e(A,HJe),e(A,Dm),e(Dm,Ate),e(Ate,UJe),e(Dm,JJe),e(Dm,qS),e(qS,YJe),e(Dm,KJe),e(A,ZJe),e(A,Gm),e(Gm,Lte),e(Lte,eYe),e(Gm,oYe),e(Gm,jS),e(jS,rYe),e(Gm,tYe),e(A,aYe),e(A,Om),e(Om,yte),e(yte,nYe),e(Om,sYe),e(Om,DS),e(DS,lYe),e(Om,iYe),e(A,dYe),e(A,Vm),e(Vm,xte),e(xte,cYe),e(Vm,fYe),e(Vm,GS),e(GS,mYe),e(Vm,gYe),e(A,hYe),e(A,Xm),e(Xm,$te),e($te,pYe),e(Xm,_Ye),e(Xm,OS),e(OS,uYe),e(Xm,bYe),e(A,vYe),e(A,zm),e(zm,kte),e(kte,FYe),e(zm,TYe),e(zm,VS),e(VS,MYe),e(zm,EYe),e(A,CYe),e(A,Wm),e(Wm,Ste),e(Ste,wYe),e(Wm,AYe),e(Wm,XS),e(XS,LYe),e(Wm,yYe),e(A,xYe),e(A,Qm),e(Qm,Rte),e(Rte,$Ye),e(Qm,kYe),e(Qm,zS),e(zS,SYe),e(Qm,RYe),e(A,PYe),e(A,Hm),e(Hm,Pte),e(Pte,BYe),e(Hm,IYe),e(Hm,WS),e(WS,NYe),e(Hm,qYe),e(A,jYe),e(A,Um),e(Um,Bte),e(Bte,DYe),e(Um,GYe),e(Um,QS),e(QS,OYe),e(Um,VYe),e(A,XYe),e(A,Jm),e(Jm,Ite),e(Ite,zYe),e(Jm,WYe),e(Jm,HS),e(HS,QYe),e(Jm,HYe),e(A,UYe),e(A,Ym),e(Ym,Nte),e(Nte,JYe),e(Ym,YYe),e(Ym,US),e(US,KYe),e(Ym,ZYe),e(A,eKe),e(A,Km),e(Km,qte),e(qte,oKe),e(Km,rKe),e(Km,JS),e(JS,tKe),e(Km,aKe),e(A,nKe),e(A,Zm),e(Zm,jte),e(jte,sKe),e(Zm,lKe),e(Zm,YS),e(YS,iKe),e(Zm,dKe),e(A,cKe),e(A,eg),e(eg,Dte),e(Dte,fKe),e(eg,mKe),e(eg,KS),e(KS,gKe),e(eg,hKe),e(A,pKe),e(A,og),e(og,Gte),e(Gte,_Ke),e(og,uKe),e(og,ZS),e(ZS,bKe),e(og,vKe),e(A,FKe),e(A,rg),e(rg,Ote),e(Ote,TKe),e(rg,MKe),e(rg,eR),e(eR,EKe),e(rg,CKe),e(A,wKe),e(A,tg),e(tg,Vte),e(Vte,AKe),e(tg,LKe),e(tg,oR),e(oR,yKe),e(tg,xKe),e(A,$Ke),e(A,ag),e(ag,Xte),e(Xte,kKe),e(ag,SKe),e(ag,rR),e(rR,RKe),e(ag,PKe),e(A,BKe),e(A,ng),e(ng,zte),e(zte,IKe),e(ng,NKe),e(ng,tR),e(tR,qKe),e(ng,jKe),e(A,DKe),e(A,sg),e(sg,Wte),e(Wte,GKe),e(sg,OKe),e(sg,aR),e(aR,VKe),e(sg,XKe),e(A,zKe),e(A,lg),e(lg,Qte),e(Qte,WKe),e(lg,QKe),e(lg,nR),e(nR,HKe),e(lg,UKe),e(A,JKe),e(A,ig),e(ig,Hte),e(Hte,YKe),e(ig,KKe),e(ig,sR),e(sR,ZKe),e(ig,eZe),e(A,oZe),e(A,dg),e(dg,Ute),e(Ute,rZe),e(dg,tZe),e(dg,lR),e(lR,aZe),e(dg,nZe),e(A,sZe),e(A,cg),e(cg,Jte),e(Jte,lZe),e(cg,iZe),e(cg,iR),e(iR,dZe),e(cg,cZe),e(A,fZe),e(A,fg),e(fg,Yte),e(Yte,mZe),e(fg,gZe),e(fg,dR),e(dR,hZe),e(fg,pZe),e(A,_Ze),e(A,mg),e(mg,Kte),e(Kte,uZe),e(mg,bZe),e(mg,cR),e(cR,vZe),e(mg,FZe),e(A,TZe),e(A,gg),e(gg,Zte),e(Zte,MZe),e(gg,EZe),e(gg,fR),e(fR,CZe),e(gg,wZe),e(A,AZe),e(A,hg),e(hg,eae),e(eae,LZe),e(hg,yZe),e(hg,mR),e(mR,xZe),e(hg,$Ze),e(A,kZe),e(A,pg),e(pg,oae),e(oae,SZe),e(pg,RZe),e(pg,gR),e(gR,PZe),e(pg,BZe),e(A,IZe),e(A,_g),e(_g,rae),e(rae,NZe),e(_g,qZe),e(_g,hR),e(hR,jZe),e(_g,DZe),e(A,GZe),e(A,ug),e(ug,tae),e(tae,OZe),e(ug,VZe),e(ug,pR),e(pR,XZe),e(ug,zZe),e(A,WZe),e(A,bg),e(bg,aae),e(aae,QZe),e(bg,HZe),e(bg,_R),e(_R,UZe),e(bg,JZe),e(A,YZe),e(A,vg),e(vg,nae),e(nae,KZe),e(vg,ZZe),e(vg,uR),e(uR,eeo),e(vg,oeo),e(A,reo),e(A,Fg),e(Fg,sae),e(sae,teo),e(Fg,aeo),e(Fg,bR),e(bR,neo),e(Fg,seo),e(A,leo),e(A,Tg),e(Tg,lae),e(lae,ieo),e(Tg,deo),e(Tg,vR),e(vR,ceo),e(Tg,feo),e(A,meo),e(A,Mg),e(Mg,iae),e(iae,geo),e(Mg,heo),e(Mg,FR),e(FR,peo),e(Mg,_eo),e(A,ueo),e(A,Eg),e(Eg,dae),e(dae,beo),e(Eg,veo),e(Eg,TR),e(TR,Feo),e(Eg,Teo),e(A,Meo),e(A,Cg),e(Cg,cae),e(cae,Eeo),e(Cg,Ceo),e(Cg,MR),e(MR,weo),e(Cg,Aeo),e(A,Leo),e(A,wg),e(wg,fae),e(fae,yeo),e(wg,xeo),e(wg,ER),e(ER,$eo),e(wg,keo),e(A,Seo),e(A,Ag),e(Ag,mae),e(mae,Reo),e(Ag,Peo),e(Ag,CR),e(CR,Beo),e(Ag,Ieo),e(A,Neo),e(A,Lg),e(Lg,gae),e(gae,qeo),e(Lg,jeo),e(Lg,wR),e(wR,Deo),e(Lg,Geo),e(A,Oeo),e(A,yg),e(yg,hae),e(hae,Veo),e(yg,Xeo),e(yg,AR),e(AR,zeo),e(yg,Weo),e(Er,Qeo),M(xg,Er,null),e(Co,Heo),e(Co,$g),M(tL,$g,null),e($g,Ueo),e($g,pae),e(pae,Jeo),b(f,Xje,u),b(f,Ei,u),e(Ei,kg),e(kg,_ae),M(aL,_ae,null),e(Ei,Yeo),e(Ei,uae),e(uae,Keo),b(f,zje,u),b(f,wo,u),M(nL,wo,null),e(wo,Zeo),e(wo,sL),e(sL,eoo),e(sL,LR),e(LR,ooo),e(sL,roo),e(wo,too),e(wo,lL),e(lL,aoo),e(lL,bae),e(bae,noo),e(lL,soo),e(wo,loo),e(wo,Cr),M(iL,Cr,null),e(Cr,ioo),e(Cr,vae),e(vae,doo),e(Cr,coo),e(Cr,La),e(La,foo),e(La,Fae),e(Fae,moo),e(La,goo),e(La,Tae),e(Tae,hoo),e(La,poo),e(La,Mae),e(Mae,_oo),e(La,uoo),e(Cr,boo),e(Cr,k),e(k,Sn),e(Sn,Eae),e(Eae,voo),e(Sn,Foo),e(Sn,yR),e(yR,Too),e(Sn,Moo),e(Sn,xR),e(xR,Eoo),e(Sn,Coo),e(k,woo),e(k,Rn),e(Rn,Cae),e(Cae,Aoo),e(Rn,Loo),e(Rn,$R),e($R,yoo),e(Rn,xoo),e(Rn,kR),e(kR,$oo),e(Rn,koo),e(k,Soo),e(k,Pn),e(Pn,wae),e(wae,Roo),e(Pn,Poo),e(Pn,SR),e(SR,Boo),e(Pn,Ioo),e(Pn,RR),e(RR,Noo),e(Pn,qoo),e(k,joo),e(k,Sg),e(Sg,Aae),e(Aae,Doo),e(Sg,Goo),e(Sg,PR),e(PR,Ooo),e(Sg,Voo),e(k,Xoo),e(k,Bn),e(Bn,Lae),e(Lae,zoo),e(Bn,Woo),e(Bn,BR),e(BR,Qoo),e(Bn,Hoo),e(Bn,IR),e(IR,Uoo),e(Bn,Joo),e(k,Yoo),e(k,Rg),e(Rg,yae),e(yae,Koo),e(Rg,Zoo),e(Rg,NR),e(NR,ero),e(Rg,oro),e(k,rro),e(k,Pg),e(Pg,xae),e(xae,tro),e(Pg,aro),e(Pg,qR),e(qR,nro),e(Pg,sro),e(k,lro),e(k,Bg),e(Bg,$ae),e($ae,iro),e(Bg,dro),e(Bg,jR),e(jR,cro),e(Bg,fro),e(k,mro),e(k,In),e(In,kae),e(kae,gro),e(In,hro),e(In,DR),e(DR,pro),e(In,_ro),e(In,GR),e(GR,uro),e(In,bro),e(k,vro),e(k,Nn),e(Nn,Sae),e(Sae,Fro),e(Nn,Tro),e(Nn,OR),e(OR,Mro),e(Nn,Ero),e(Nn,VR),e(VR,Cro),e(Nn,wro),e(k,Aro),e(k,qn),e(qn,Rae),e(Rae,Lro),e(qn,yro),e(qn,XR),e(XR,xro),e(qn,$ro),e(qn,zR),e(zR,kro),e(qn,Sro),e(k,Rro),e(k,Ig),e(Ig,Pae),e(Pae,Pro),e(Ig,Bro),e(Ig,WR),e(WR,Iro),e(Ig,Nro),e(k,qro),e(k,Ng),e(Ng,Bae),e(Bae,jro),e(Ng,Dro),e(Ng,QR),e(QR,Gro),e(Ng,Oro),e(k,Vro),e(k,qg),e(qg,Iae),e(Iae,Xro),e(qg,zro),e(qg,HR),e(HR,Wro),e(qg,Qro),e(k,Hro),e(k,jn),e(jn,Nae),e(Nae,Uro),e(jn,Jro),e(jn,UR),e(UR,Yro),e(jn,Kro),e(jn,JR),e(JR,Zro),e(jn,eto),e(k,oto),e(k,jg),e(jg,qae),e(qae,rto),e(jg,tto),e(jg,YR),e(YR,ato),e(jg,nto),e(k,sto),e(k,Dn),e(Dn,jae),e(jae,lto),e(Dn,ito),e(Dn,KR),e(KR,dto),e(Dn,cto),e(Dn,ZR),e(ZR,fto),e(Dn,mto),e(k,gto),e(k,Gn),e(Gn,Dae),e(Dae,hto),e(Gn,pto),e(Gn,eP),e(eP,_to),e(Gn,uto),e(Gn,oP),e(oP,bto),e(Gn,vto),e(k,Fto),e(k,On),e(On,Gae),e(Gae,Tto),e(On,Mto),e(On,rP),e(rP,Eto),e(On,Cto),e(On,tP),e(tP,wto),e(On,Ato),e(k,Lto),e(k,Dg),e(Dg,Oae),e(Oae,yto),e(Dg,xto),e(Dg,aP),e(aP,$to),e(Dg,kto),e(k,Sto),e(k,Vn),e(Vn,Vae),e(Vae,Rto),e(Vn,Pto),e(Vn,nP),e(nP,Bto),e(Vn,Ito),e(Vn,sP),e(sP,Nto),e(Vn,qto),e(k,jto),e(k,Xn),e(Xn,Xae),e(Xae,Dto),e(Xn,Gto),e(Xn,lP),e(lP,Oto),e(Xn,Vto),e(Xn,iP),e(iP,Xto),e(Xn,zto),e(k,Wto),e(k,zn),e(zn,zae),e(zae,Qto),e(zn,Hto),e(zn,dP),e(dP,Uto),e(zn,Jto),e(zn,cP),e(cP,Yto),e(zn,Kto),e(k,Zto),e(k,Wn),e(Wn,Wae),e(Wae,eao),e(Wn,oao),e(Wn,fP),e(fP,rao),e(Wn,tao),e(Wn,mP),e(mP,aao),e(Wn,nao),e(k,sao),e(k,Qn),e(Qn,Qae),e(Qae,lao),e(Qn,iao),e(Qn,gP),e(gP,dao),e(Qn,cao),e(Qn,hP),e(hP,fao),e(Qn,mao),e(k,gao),e(k,Hn),e(Hn,Hae),e(Hae,hao),e(Hn,pao),e(Hn,pP),e(pP,_ao),e(Hn,uao),e(Hn,_P),e(_P,bao),e(Hn,vao),e(k,Fao),e(k,Gg),e(Gg,Uae),e(Uae,Tao),e(Gg,Mao),e(Gg,uP),e(uP,Eao),e(Gg,Cao),e(k,wao),e(k,Un),e(Un,Jae),e(Jae,Aao),e(Un,Lao),e(Un,bP),e(bP,yao),e(Un,xao),e(Un,vP),e(vP,$ao),e(Un,kao),e(k,Sao),e(k,Og),e(Og,Yae),e(Yae,Rao),e(Og,Pao),e(Og,FP),e(FP,Bao),e(Og,Iao),e(k,Nao),e(k,Jn),e(Jn,Kae),e(Kae,qao),e(Jn,jao),e(Jn,TP),e(TP,Dao),e(Jn,Gao),e(Jn,MP),e(MP,Oao),e(Jn,Vao),e(k,Xao),e(k,Yn),e(Yn,Zae),e(Zae,zao),e(Yn,Wao),e(Yn,EP),e(EP,Qao),e(Yn,Hao),e(Yn,CP),e(CP,Uao),e(Yn,Jao),e(k,Yao),e(k,Kn),e(Kn,ene),e(ene,Kao),e(Kn,Zao),e(Kn,wP),e(wP,eno),e(Kn,ono),e(Kn,AP),e(AP,rno),e(Kn,tno),e(k,ano),e(k,Vg),e(Vg,one),e(one,nno),e(Vg,sno),e(Vg,LP),e(LP,lno),e(Vg,ino),e(k,dno),e(k,Zn),e(Zn,rne),e(rne,cno),e(Zn,fno),e(Zn,yP),e(yP,mno),e(Zn,gno),e(Zn,xP),e(xP,hno),e(Zn,pno),e(k,_no),e(k,es),e(es,tne),e(tne,uno),e(es,bno),e(es,$P),e($P,vno),e(es,Fno),e(es,kP),e(kP,Tno),e(es,Mno),e(k,Eno),e(k,Xg),e(Xg,ane),e(ane,Cno),e(Xg,wno),e(Xg,SP),e(SP,Ano),e(Xg,Lno),e(k,yno),e(k,os),e(os,nne),e(nne,xno),e(os,$no),e(os,RP),e(RP,kno),e(os,Sno),e(os,PP),e(PP,Rno),e(os,Pno),e(k,Bno),e(k,rs),e(rs,sne),e(sne,Ino),e(rs,Nno),e(rs,BP),e(BP,qno),e(rs,jno),e(rs,IP),e(IP,Dno),e(rs,Gno),e(k,Ono),e(k,ts),e(ts,lne),e(lne,Vno),e(ts,Xno),e(ts,NP),e(NP,zno),e(ts,Wno),e(ts,qP),e(qP,Qno),e(ts,Hno),e(k,Uno),e(k,as),e(as,ine),e(ine,Jno),e(as,Yno),e(as,jP),e(jP,Kno),e(as,Zno),e(as,DP),e(DP,eso),e(as,oso),e(k,rso),e(k,ns),e(ns,dne),e(dne,tso),e(ns,aso),e(ns,GP),e(GP,nso),e(ns,sso),e(ns,OP),e(OP,lso),e(ns,iso),e(k,dso),e(k,ss),e(ss,cne),e(cne,cso),e(ss,fso),e(ss,VP),e(VP,mso),e(ss,gso),e(ss,XP),e(XP,hso),e(ss,pso),e(k,_so),e(k,ls),e(ls,fne),e(fne,uso),e(ls,bso),e(ls,zP),e(zP,vso),e(ls,Fso),e(ls,WP),e(WP,Tso),e(ls,Mso),e(k,Eso),e(k,zg),e(zg,mne),e(mne,Cso),e(zg,wso),e(zg,QP),e(QP,Aso),e(zg,Lso),e(k,yso),e(k,is),e(is,gne),e(gne,xso),e(is,$so),e(is,HP),e(HP,kso),e(is,Sso),e(is,UP),e(UP,Rso),e(is,Pso),e(k,Bso),e(k,Wg),e(Wg,hne),e(hne,Iso),e(Wg,Nso),e(Wg,JP),e(JP,qso),e(Wg,jso),e(k,Dso),e(k,Qg),e(Qg,pne),e(pne,Gso),e(Qg,Oso),e(Qg,YP),e(YP,Vso),e(Qg,Xso),e(k,zso),e(k,ds),e(ds,_ne),e(_ne,Wso),e(ds,Qso),e(ds,KP),e(KP,Hso),e(ds,Uso),e(ds,ZP),e(ZP,Jso),e(ds,Yso),e(k,Kso),e(k,cs),e(cs,une),e(une,Zso),e(cs,elo),e(cs,eB),e(eB,olo),e(cs,rlo),e(cs,oB),e(oB,tlo),e(cs,alo),e(k,nlo),e(k,fs),e(fs,bne),e(bne,slo),e(fs,llo),e(fs,rB),e(rB,ilo),e(fs,dlo),e(fs,tB),e(tB,clo),e(fs,flo),e(k,mlo),e(k,Hg),e(Hg,vne),e(vne,glo),e(Hg,hlo),e(Hg,aB),e(aB,plo),e(Hg,_lo),e(k,ulo),e(k,ms),e(ms,Fne),e(Fne,blo),e(ms,vlo),e(ms,nB),e(nB,Flo),e(ms,Tlo),e(ms,sB),e(sB,Mlo),e(ms,Elo),e(k,Clo),e(k,gs),e(gs,Tne),e(Tne,wlo),e(gs,Alo),e(gs,lB),e(lB,Llo),e(gs,ylo),e(gs,iB),e(iB,xlo),e(gs,$lo),e(k,klo),e(k,hs),e(hs,Mne),e(Mne,Slo),e(hs,Rlo),e(hs,dB),e(dB,Plo),e(hs,Blo),e(hs,cB),e(cB,Ilo),e(hs,Nlo),e(k,qlo),e(k,ps),e(ps,Ene),e(Ene,jlo),e(ps,Dlo),e(ps,fB),e(fB,Glo),e(ps,Olo),e(ps,mB),e(mB,Vlo),e(ps,Xlo),e(k,zlo),e(k,_s),e(_s,Cne),e(Cne,Wlo),e(_s,Qlo),e(_s,gB),e(gB,Hlo),e(_s,Ulo),e(_s,hB),e(hB,Jlo),e(_s,Ylo),e(k,Klo),e(k,Ug),e(Ug,wne),e(wne,Zlo),e(Ug,eio),e(Ug,pB),e(pB,oio),e(Ug,rio),e(k,tio),e(k,us),e(us,Ane),e(Ane,aio),e(us,nio),e(us,_B),e(_B,sio),e(us,lio),e(us,uB),e(uB,iio),e(us,dio),e(k,cio),e(k,Jg),e(Jg,Lne),e(Lne,fio),e(Jg,mio),e(Jg,bB),e(bB,gio),e(Jg,hio),e(k,pio),e(k,Yg),e(Yg,yne),e(yne,_io),e(Yg,uio),e(Yg,vB),e(vB,bio),e(Yg,vio),e(k,Fio),e(k,Kg),e(Kg,xne),e(xne,Tio),e(Kg,Mio),e(Kg,FB),e(FB,Eio),e(Kg,Cio),e(k,wio),e(k,Zg),e(Zg,$ne),e($ne,Aio),e(Zg,Lio),e(Zg,TB),e(TB,yio),e(Zg,xio),e(k,$io),e(k,bs),e(bs,kne),e(kne,kio),e(bs,Sio),e(bs,MB),e(MB,Rio),e(bs,Pio),e(bs,EB),e(EB,Bio),e(bs,Iio),e(k,Nio),e(k,eh),e(eh,Sne),e(Sne,qio),e(eh,jio),e(eh,CB),e(CB,Dio),e(eh,Gio),e(k,Oio),e(k,vs),e(vs,Rne),e(Rne,Vio),e(vs,Xio),e(vs,wB),e(wB,zio),e(vs,Wio),e(vs,AB),e(AB,Qio),e(vs,Hio),e(k,Uio),e(k,Fs),e(Fs,Pne),e(Pne,Jio),e(Fs,Yio),e(Fs,LB),e(LB,Kio),e(Fs,Zio),e(Fs,yB),e(yB,edo),e(Fs,odo),e(k,rdo),e(k,Ts),e(Ts,Bne),e(Bne,tdo),e(Ts,ado),e(Ts,xB),e(xB,ndo),e(Ts,sdo),e(Ts,$B),e($B,ldo),e(Ts,ido),e(k,ddo),e(k,Ms),e(Ms,Ine),e(Ine,cdo),e(Ms,fdo),e(Ms,kB),e(kB,mdo),e(Ms,gdo),e(Ms,SB),e(SB,hdo),e(Ms,pdo),e(k,_do),e(k,Es),e(Es,Nne),e(Nne,udo),e(Es,bdo),e(Es,RB),e(RB,vdo),e(Es,Fdo),e(Es,PB),e(PB,Tdo),e(Es,Mdo),e(k,Edo),e(k,Cs),e(Cs,qne),e(qne,Cdo),e(Cs,wdo),e(Cs,BB),e(BB,Ado),e(Cs,Ldo),e(Cs,IB),e(IB,ydo),e(Cs,xdo),e(k,$do),e(k,oh),e(oh,jne),e(jne,kdo),e(oh,Sdo),e(oh,NB),e(NB,Rdo),e(oh,Pdo),e(k,Bdo),e(k,rh),e(rh,Dne),e(Dne,Ido),e(rh,Ndo),e(rh,qB),e(qB,qdo),e(rh,jdo),e(k,Ddo),e(k,ws),e(ws,Gne),e(Gne,Gdo),e(ws,Odo),e(ws,jB),e(jB,Vdo),e(ws,Xdo),e(ws,DB),e(DB,zdo),e(ws,Wdo),e(k,Qdo),e(k,As),e(As,One),e(One,Hdo),e(As,Udo),e(As,GB),e(GB,Jdo),e(As,Ydo),e(As,OB),e(OB,Kdo),e(As,Zdo),e(k,eco),e(k,Ls),e(Ls,Vne),e(Vne,oco),e(Ls,rco),e(Ls,VB),e(VB,tco),e(Ls,aco),e(Ls,XB),e(XB,nco),e(Ls,sco),e(k,lco),e(k,th),e(th,Xne),e(Xne,ico),e(th,dco),e(th,zB),e(zB,cco),e(th,fco),e(k,mco),e(k,ah),e(ah,zne),e(zne,gco),e(ah,hco),e(ah,WB),e(WB,pco),e(ah,_co),e(k,uco),e(k,nh),e(nh,Wne),e(Wne,bco),e(nh,vco),e(nh,QB),e(QB,Fco),e(nh,Tco),e(k,Mco),e(k,ys),e(ys,Qne),e(Qne,Eco),e(ys,Cco),e(ys,HB),e(HB,wco),e(ys,Aco),e(ys,UB),e(UB,Lco),e(ys,yco),e(k,xco),e(k,sh),e(sh,Hne),e(Hne,$co),e(sh,kco),e(sh,JB),e(JB,Sco),e(sh,Rco),e(k,Pco),e(k,lh),e(lh,Une),e(Une,Bco),e(lh,Ico),e(lh,YB),e(YB,Nco),e(lh,qco),e(k,jco),e(k,ih),e(ih,Jne),e(Jne,Dco),e(ih,Gco),e(ih,KB),e(KB,Oco),e(ih,Vco),e(k,Xco),e(k,xs),e(xs,Yne),e(Yne,zco),e(xs,Wco),e(xs,ZB),e(ZB,Qco),e(xs,Hco),e(xs,eI),e(eI,Uco),e(xs,Jco),e(k,Yco),e(k,dh),e(dh,Kne),e(Kne,Kco),e(dh,Zco),e(dh,oI),e(oI,efo),e(dh,ofo),e(k,rfo),e(k,ch),e(ch,Zne),e(Zne,tfo),e(ch,afo),e(ch,rI),e(rI,nfo),e(ch,sfo),e(k,lfo),e(k,$s),e($s,ese),e(ese,ifo),e($s,dfo),e($s,tI),e(tI,cfo),e($s,ffo),e($s,aI),e(aI,mfo),e($s,gfo),e(k,hfo),e(k,ks),e(ks,ose),e(ose,pfo),e(ks,_fo),e(ks,nI),e(nI,ufo),e(ks,bfo),e(ks,sI),e(sI,vfo),e(ks,Ffo),e(k,Tfo),e(k,Ss),e(Ss,rse),e(rse,Mfo),e(Ss,Efo),e(Ss,lI),e(lI,Cfo),e(Ss,wfo),e(Ss,iI),e(iI,Afo),e(Ss,Lfo),e(k,yfo),e(k,Rs),e(Rs,tse),e(tse,xfo),e(Rs,$fo),e(Rs,dI),e(dI,kfo),e(Rs,Sfo),e(Rs,cI),e(cI,Rfo),e(Rs,Pfo),e(Cr,Bfo),M(fh,Cr,null),e(wo,Ifo),e(wo,mh),M(dL,mh,null),e(mh,Nfo),e(mh,ase),e(ase,qfo),b(f,Wje,u),b(f,Ci,u),e(Ci,gh),e(gh,nse),M(cL,nse,null),e(Ci,jfo),e(Ci,sse),e(sse,Dfo),b(f,Qje,u),b(f,Ao,u),M(fL,Ao,null),e(Ao,Gfo),e(Ao,mL),e(mL,Ofo),e(mL,fI),e(fI,Vfo),e(mL,Xfo),e(Ao,zfo),e(Ao,gL),e(gL,Wfo),e(gL,lse),e(lse,Qfo),e(gL,Hfo),e(Ao,Ufo),e(Ao,He),M(hL,He,null),e(He,Jfo),e(He,ise),e(ise,Yfo),e(He,Kfo),e(He,ya),e(ya,Zfo),e(ya,dse),e(dse,emo),e(ya,omo),e(ya,cse),e(cse,rmo),e(ya,tmo),e(ya,fse),e(fse,amo),e(ya,nmo),e(He,smo),e(He,Y),e(Y,hh),e(hh,mse),e(mse,lmo),e(hh,imo),e(hh,mI),e(mI,dmo),e(hh,cmo),e(Y,fmo),e(Y,ph),e(ph,gse),e(gse,mmo),e(ph,gmo),e(ph,gI),e(gI,hmo),e(ph,pmo),e(Y,_mo),e(Y,_h),e(_h,hse),e(hse,umo),e(_h,bmo),e(_h,hI),e(hI,vmo),e(_h,Fmo),e(Y,Tmo),e(Y,uh),e(uh,pse),e(pse,Mmo),e(uh,Emo),e(uh,pI),e(pI,Cmo),e(uh,wmo),e(Y,Amo),e(Y,bh),e(bh,_se),e(_se,Lmo),e(bh,ymo),e(bh,_I),e(_I,xmo),e(bh,$mo),e(Y,kmo),e(Y,vh),e(vh,use),e(use,Smo),e(vh,Rmo),e(vh,uI),e(uI,Pmo),e(vh,Bmo),e(Y,Imo),e(Y,Fh),e(Fh,bse),e(bse,Nmo),e(Fh,qmo),e(Fh,bI),e(bI,jmo),e(Fh,Dmo),e(Y,Gmo),e(Y,Th),e(Th,vse),e(vse,Omo),e(Th,Vmo),e(Th,vI),e(vI,Xmo),e(Th,zmo),e(Y,Wmo),e(Y,Mh),e(Mh,Fse),e(Fse,Qmo),e(Mh,Hmo),e(Mh,FI),e(FI,Umo),e(Mh,Jmo),e(Y,Ymo),e(Y,Eh),e(Eh,Tse),e(Tse,Kmo),e(Eh,Zmo),e(Eh,TI),e(TI,ego),e(Eh,ogo),e(Y,rgo),e(Y,Ch),e(Ch,Mse),e(Mse,tgo),e(Ch,ago),e(Ch,MI),e(MI,ngo),e(Ch,sgo),e(Y,lgo),e(Y,wh),e(wh,Ese),e(Ese,igo),e(wh,dgo),e(wh,EI),e(EI,cgo),e(wh,fgo),e(Y,mgo),e(Y,Ah),e(Ah,Cse),e(Cse,ggo),e(Ah,hgo),e(Ah,CI),e(CI,pgo),e(Ah,_go),e(Y,ugo),e(Y,Lh),e(Lh,wse),e(wse,bgo),e(Lh,vgo),e(Lh,wI),e(wI,Fgo),e(Lh,Tgo),e(Y,Mgo),e(Y,yh),e(yh,Ase),e(Ase,Ego),e(yh,Cgo),e(yh,AI),e(AI,wgo),e(yh,Ago),e(Y,Lgo),e(Y,xh),e(xh,Lse),e(Lse,ygo),e(xh,xgo),e(xh,LI),e(LI,$go),e(xh,kgo),e(Y,Sgo),e(Y,$h),e($h,yse),e(yse,Rgo),e($h,Pgo),e($h,yI),e(yI,Bgo),e($h,Igo),e(Y,Ngo),e(Y,kh),e(kh,xse),e(xse,qgo),e(kh,jgo),e(kh,xI),e(xI,Dgo),e(kh,Ggo),e(Y,Ogo),e(Y,Sh),e(Sh,$se),e($se,Vgo),e(Sh,Xgo),e(Sh,$I),e($I,zgo),e(Sh,Wgo),e(Y,Qgo),e(Y,Rh),e(Rh,kse),e(kse,Hgo),e(Rh,Ugo),e(Rh,kI),e(kI,Jgo),e(Rh,Ygo),e(Y,Kgo),e(Y,Ph),e(Ph,Sse),e(Sse,Zgo),e(Ph,eho),e(Ph,SI),e(SI,oho),e(Ph,rho),e(Y,tho),e(Y,Bh),e(Bh,Rse),e(Rse,aho),e(Bh,nho),e(Bh,RI),e(RI,sho),e(Bh,lho),e(Y,iho),e(Y,Ih),e(Ih,Pse),e(Pse,dho),e(Ih,cho),e(Ih,PI),e(PI,fho),e(Ih,mho),e(Y,gho),e(Y,Nh),e(Nh,Bse),e(Bse,hho),e(Nh,pho),e(Nh,BI),e(BI,_ho),e(Nh,uho),e(Y,bho),e(Y,qh),e(qh,Ise),e(Ise,vho),e(qh,Fho),e(qh,II),e(II,Tho),e(qh,Mho),e(Y,Eho),e(Y,jh),e(jh,Nse),e(Nse,Cho),e(jh,who),e(jh,NI),e(NI,Aho),e(jh,Lho),e(Y,yho),e(Y,Dh),e(Dh,qse),e(qse,xho),e(Dh,$ho),e(Dh,qI),e(qI,kho),e(Dh,Sho),e(Y,Rho),e(Y,Gh),e(Gh,jse),e(jse,Pho),e(Gh,Bho),e(Gh,jI),e(jI,Iho),e(Gh,Nho),e(Y,qho),e(Y,Oh),e(Oh,Dse),e(Dse,jho),e(Oh,Dho),e(Oh,DI),e(DI,Gho),e(Oh,Oho),e(Y,Vho),e(Y,Vh),e(Vh,Gse),e(Gse,Xho),e(Vh,zho),e(Vh,GI),e(GI,Who),e(Vh,Qho),e(Y,Hho),e(Y,Xh),e(Xh,Ose),e(Ose,Uho),e(Xh,Jho),e(Xh,OI),e(OI,Yho),e(Xh,Kho),e(Y,Zho),e(Y,zh),e(zh,Vse),e(Vse,epo),e(zh,opo),e(zh,VI),e(VI,rpo),e(zh,tpo),e(He,apo),M(Wh,He,null),e(He,npo),M(Qh,He,null),e(Ao,spo),e(Ao,Hh),M(pL,Hh,null),e(Hh,lpo),e(Hh,Xse),e(Xse,ipo),b(f,Hje,u),b(f,wi,u),e(wi,Uh),e(Uh,zse),M(_L,zse,null),e(wi,dpo),e(wi,Wse),e(Wse,cpo),b(f,Uje,u),b(f,Lo,u),M(uL,Lo,null),e(Lo,fpo),e(Lo,bL),e(bL,mpo),e(bL,XI),e(XI,gpo),e(bL,hpo),e(Lo,ppo),e(Lo,vL),e(vL,_po),e(vL,Qse),e(Qse,upo),e(vL,bpo),e(Lo,vpo),e(Lo,Ue),M(FL,Ue,null),e(Ue,Fpo),e(Ue,Hse),e(Hse,Tpo),e(Ue,Mpo),e(Ue,Ai),e(Ai,Epo),e(Ai,Use),e(Use,Cpo),e(Ai,wpo),e(Ai,Jse),e(Jse,Apo),e(Ai,Lpo),e(Ue,ypo),e(Ue,he),e(he,Jh),e(Jh,Yse),e(Yse,xpo),e(Jh,$po),e(Jh,zI),e(zI,kpo),e(Jh,Spo),e(he,Rpo),e(he,Yh),e(Yh,Kse),e(Kse,Ppo),e(Yh,Bpo),e(Yh,Zse),e(Zse,Ipo),e(Yh,Npo),e(he,qpo),e(he,Kh),e(Kh,ele),e(ele,jpo),e(Kh,Dpo),e(Kh,WI),e(WI,Gpo),e(Kh,Opo),e(he,Vpo),e(he,Zh),e(Zh,ole),e(ole,Xpo),e(Zh,zpo),e(Zh,QI),e(QI,Wpo),e(Zh,Qpo),e(he,Hpo),e(he,ep),e(ep,rle),e(rle,Upo),e(ep,Jpo),e(ep,HI),e(HI,Ypo),e(ep,Kpo),e(he,Zpo),e(he,op),e(op,tle),e(tle,e_o),e(op,o_o),e(op,UI),e(UI,r_o),e(op,t_o),e(he,a_o),e(he,rp),e(rp,ale),e(ale,n_o),e(rp,s_o),e(rp,JI),e(JI,l_o),e(rp,i_o),e(he,d_o),e(he,tp),e(tp,nle),e(nle,c_o),e(tp,f_o),e(tp,YI),e(YI,m_o),e(tp,g_o),e(he,h_o),e(he,ap),e(ap,sle),e(sle,p_o),e(ap,__o),e(ap,KI),e(KI,u_o),e(ap,b_o),e(he,v_o),e(he,np),e(np,lle),e(lle,F_o),e(np,T_o),e(np,ZI),e(ZI,M_o),e(np,E_o),e(he,C_o),e(he,sp),e(sp,ile),e(ile,w_o),e(sp,A_o),e(sp,eN),e(eN,L_o),e(sp,y_o),e(he,x_o),e(he,lp),e(lp,dle),e(dle,$_o),e(lp,k_o),e(lp,oN),e(oN,S_o),e(lp,R_o),e(he,P_o),e(he,ip),e(ip,cle),e(cle,B_o),e(ip,I_o),e(ip,rN),e(rN,N_o),e(ip,q_o),e(he,j_o),e(he,dp),e(dp,fle),e(fle,D_o),e(dp,G_o),e(dp,tN),e(tN,O_o),e(dp,V_o),e(he,X_o),e(he,cp),e(cp,mle),e(mle,z_o),e(cp,W_o),e(cp,aN),e(aN,Q_o),e(cp,H_o),e(he,U_o),e(he,fp),e(fp,gle),e(gle,J_o),e(fp,Y_o),e(fp,nN),e(nN,K_o),e(fp,Z_o),e(he,euo),e(he,mp),e(mp,hle),e(hle,ouo),e(mp,ruo),e(mp,sN),e(sN,tuo),e(mp,auo),e(Ue,nuo),M(gp,Ue,null),e(Ue,suo),M(hp,Ue,null),e(Lo,luo),e(Lo,pp),M(TL,pp,null),e(pp,iuo),e(pp,ple),e(ple,duo),b(f,Jje,u),b(f,Li,u),e(Li,_p),e(_p,_le),M(ML,_le,null),e(Li,cuo),e(Li,ule),e(ule,fuo),b(f,Yje,u),b(f,yo,u),M(EL,yo,null),e(yo,muo),e(yo,yi),e(yi,guo),e(yi,lN),e(lN,huo),e(yi,puo),e(yi,iN),e(iN,_uo),e(yi,uuo),e(yo,buo),e(yo,CL),e(CL,vuo),e(CL,ble),e(ble,Fuo),e(CL,Tuo),e(yo,Muo),e(yo,at),M(wL,at,null),e(at,Euo),e(at,vle),e(vle,Cuo),e(at,wuo),e(at,xi),e(xi,Auo),e(xi,Fle),e(Fle,Luo),e(xi,yuo),e(xi,dN),e(dN,xuo),e(xi,$uo),e(at,kuo),M(up,at,null),e(yo,Suo),e(yo,Je),M(AL,Je,null),e(Je,Ruo),e(Je,Tle),e(Tle,Puo),e(Je,Buo),e(Je,xa),e(xa,Iuo),e(xa,Mle),e(Mle,Nuo),e(xa,quo),e(xa,Ele),e(Ele,juo),e(xa,Duo),e(xa,Cle),e(Cle,Guo),e(xa,Ouo),e(Je,Vuo),e(Je,y),e(y,bp),e(bp,wle),e(wle,Xuo),e(bp,zuo),e(bp,cN),e(cN,Wuo),e(bp,Quo),e(y,Huo),e(y,vp),e(vp,Ale),e(Ale,Uuo),e(vp,Juo),e(vp,fN),e(fN,Yuo),e(vp,Kuo),e(y,Zuo),e(y,Fp),e(Fp,Lle),e(Lle,e1o),e(Fp,o1o),e(Fp,mN),e(mN,r1o),e(Fp,t1o),e(y,a1o),e(y,Tp),e(Tp,yle),e(yle,n1o),e(Tp,s1o),e(Tp,gN),e(gN,l1o),e(Tp,i1o),e(y,d1o),e(y,Mp),e(Mp,xle),e(xle,c1o),e(Mp,f1o),e(Mp,hN),e(hN,m1o),e(Mp,g1o),e(y,h1o),e(y,Ep),e(Ep,$le),e($le,p1o),e(Ep,_1o),e(Ep,pN),e(pN,u1o),e(Ep,b1o),e(y,v1o),e(y,Cp),e(Cp,kle),e(kle,F1o),e(Cp,T1o),e(Cp,_N),e(_N,M1o),e(Cp,E1o),e(y,C1o),e(y,wp),e(wp,Sle),e(Sle,w1o),e(wp,A1o),e(wp,uN),e(uN,L1o),e(wp,y1o),e(y,x1o),e(y,Ap),e(Ap,Rle),e(Rle,$1o),e(Ap,k1o),e(Ap,bN),e(bN,S1o),e(Ap,R1o),e(y,P1o),e(y,Lp),e(Lp,Ple),e(Ple,B1o),e(Lp,I1o),e(Lp,vN),e(vN,N1o),e(Lp,q1o),e(y,j1o),e(y,yp),e(yp,Ble),e(Ble,D1o),e(yp,G1o),e(yp,FN),e(FN,O1o),e(yp,V1o),e(y,X1o),e(y,xp),e(xp,Ile),e(Ile,z1o),e(xp,W1o),e(xp,TN),e(TN,Q1o),e(xp,H1o),e(y,U1o),e(y,$p),e($p,Nle),e(Nle,J1o),e($p,Y1o),e($p,MN),e(MN,K1o),e($p,Z1o),e(y,ebo),e(y,kp),e(kp,qle),e(qle,obo),e(kp,rbo),e(kp,EN),e(EN,tbo),e(kp,abo),e(y,nbo),e(y,Sp),e(Sp,jle),e(jle,sbo),e(Sp,lbo),e(Sp,CN),e(CN,ibo),e(Sp,dbo),e(y,cbo),e(y,Rp),e(Rp,Dle),e(Dle,fbo),e(Rp,mbo),e(Rp,wN),e(wN,gbo),e(Rp,hbo),e(y,pbo),e(y,Pp),e(Pp,Gle),e(Gle,_bo),e(Pp,ubo),e(Pp,AN),e(AN,bbo),e(Pp,vbo),e(y,Fbo),e(y,Bp),e(Bp,Ole),e(Ole,Tbo),e(Bp,Mbo),e(Bp,LN),e(LN,Ebo),e(Bp,Cbo),e(y,wbo),e(y,Ip),e(Ip,Vle),e(Vle,Abo),e(Ip,Lbo),e(Ip,yN),e(yN,ybo),e(Ip,xbo),e(y,$bo),e(y,Np),e(Np,Xle),e(Xle,kbo),e(Np,Sbo),e(Np,xN),e(xN,Rbo),e(Np,Pbo),e(y,Bbo),e(y,qp),e(qp,zle),e(zle,Ibo),e(qp,Nbo),e(qp,$N),e($N,qbo),e(qp,jbo),e(y,Dbo),e(y,jp),e(jp,Wle),e(Wle,Gbo),e(jp,Obo),e(jp,kN),e(kN,Vbo),e(jp,Xbo),e(y,zbo),e(y,Dp),e(Dp,Qle),e(Qle,Wbo),e(Dp,Qbo),e(Dp,SN),e(SN,Hbo),e(Dp,Ubo),e(y,Jbo),e(y,Gp),e(Gp,Hle),e(Hle,Ybo),e(Gp,Kbo),e(Gp,RN),e(RN,Zbo),e(Gp,e2o),e(y,o2o),e(y,Op),e(Op,Ule),e(Ule,r2o),e(Op,t2o),e(Op,PN),e(PN,a2o),e(Op,n2o),e(y,s2o),e(y,Vp),e(Vp,Jle),e(Jle,l2o),e(Vp,i2o),e(Vp,BN),e(BN,d2o),e(Vp,c2o),e(y,f2o),e(y,Xp),e(Xp,Yle),e(Yle,m2o),e(Xp,g2o),e(Xp,IN),e(IN,h2o),e(Xp,p2o),e(y,_2o),e(y,zp),e(zp,Kle),e(Kle,u2o),e(zp,b2o),e(zp,NN),e(NN,v2o),e(zp,F2o),e(y,T2o),e(y,Wp),e(Wp,Zle),e(Zle,M2o),e(Wp,E2o),e(Wp,qN),e(qN,C2o),e(Wp,w2o),e(y,A2o),e(y,Qp),e(Qp,eie),e(eie,L2o),e(Qp,y2o),e(Qp,jN),e(jN,x2o),e(Qp,$2o),e(y,k2o),e(y,Hp),e(Hp,oie),e(oie,S2o),e(Hp,R2o),e(Hp,DN),e(DN,P2o),e(Hp,B2o),e(y,I2o),e(y,Up),e(Up,rie),e(rie,N2o),e(Up,q2o),e(Up,GN),e(GN,j2o),e(Up,D2o),e(y,G2o),e(y,Jp),e(Jp,tie),e(tie,O2o),e(Jp,V2o),e(Jp,ON),e(ON,X2o),e(Jp,z2o),e(y,W2o),e(y,Ps),e(Ps,aie),e(aie,Q2o),e(Ps,H2o),e(Ps,VN),e(VN,U2o),e(Ps,J2o),e(Ps,XN),e(XN,Y2o),e(Ps,K2o),e(y,Z2o),e(y,Yp),e(Yp,nie),e(nie,e4o),e(Yp,o4o),e(Yp,zN),e(zN,r4o),e(Yp,t4o),e(y,a4o),e(y,Kp),e(Kp,sie),e(sie,n4o),e(Kp,s4o),e(Kp,WN),e(WN,l4o),e(Kp,i4o),e(y,d4o),e(y,Zp),e(Zp,lie),e(lie,c4o),e(Zp,f4o),e(Zp,QN),e(QN,m4o),e(Zp,g4o),e(y,h4o),e(y,e_),e(e_,iie),e(iie,p4o),e(e_,_4o),e(e_,HN),e(HN,u4o),e(e_,b4o),e(y,v4o),e(y,o_),e(o_,die),e(die,F4o),e(o_,T4o),e(o_,UN),e(UN,M4o),e(o_,E4o),e(y,C4o),e(y,r_),e(r_,cie),e(cie,w4o),e(r_,A4o),e(r_,JN),e(JN,L4o),e(r_,y4o),e(y,x4o),e(y,t_),e(t_,fie),e(fie,$4o),e(t_,k4o),e(t_,YN),e(YN,S4o),e(t_,R4o),e(y,P4o),e(y,a_),e(a_,mie),e(mie,B4o),e(a_,I4o),e(a_,KN),e(KN,N4o),e(a_,q4o),e(y,j4o),e(y,n_),e(n_,gie),e(gie,D4o),e(n_,G4o),e(n_,ZN),e(ZN,O4o),e(n_,V4o),e(y,X4o),e(y,s_),e(s_,hie),e(hie,z4o),e(s_,W4o),e(s_,eq),e(eq,Q4o),e(s_,H4o),e(y,U4o),e(y,l_),e(l_,pie),e(pie,J4o),e(l_,Y4o),e(l_,oq),e(oq,K4o),e(l_,Z4o),e(y,evo),e(y,i_),e(i_,_ie),e(_ie,ovo),e(i_,rvo),e(i_,rq),e(rq,tvo),e(i_,avo),e(y,nvo),e(y,d_),e(d_,uie),e(uie,svo),e(d_,lvo),e(d_,tq),e(tq,ivo),e(d_,dvo),e(y,cvo),e(y,c_),e(c_,bie),e(bie,fvo),e(c_,mvo),e(c_,aq),e(aq,gvo),e(c_,hvo),e(y,pvo),e(y,f_),e(f_,vie),e(vie,_vo),e(f_,uvo),e(f_,nq),e(nq,bvo),e(f_,vvo),e(y,Fvo),e(y,m_),e(m_,Fie),e(Fie,Tvo),e(m_,Mvo),e(m_,sq),e(sq,Evo),e(m_,Cvo),e(y,wvo),e(y,g_),e(g_,Tie),e(Tie,Avo),e(g_,Lvo),e(g_,lq),e(lq,yvo),e(g_,xvo),e(y,$vo),e(y,h_),e(h_,Mie),e(Mie,kvo),e(h_,Svo),e(h_,iq),e(iq,Rvo),e(h_,Pvo),e(y,Bvo),e(y,p_),e(p_,Eie),e(Eie,Ivo),e(p_,Nvo),e(p_,dq),e(dq,qvo),e(p_,jvo),e(y,Dvo),e(y,__),e(__,Cie),e(Cie,Gvo),e(__,Ovo),e(__,cq),e(cq,Vvo),e(__,Xvo),e(y,zvo),e(y,u_),e(u_,wie),e(wie,Wvo),e(u_,Qvo),e(u_,fq),e(fq,Hvo),e(u_,Uvo),e(y,Jvo),e(y,b_),e(b_,Aie),e(Aie,Yvo),e(b_,Kvo),e(b_,mq),e(mq,Zvo),e(b_,e5o),e(y,o5o),e(y,v_),e(v_,Lie),e(Lie,r5o),e(v_,t5o),e(v_,gq),e(gq,a5o),e(v_,n5o),e(y,s5o),e(y,F_),e(F_,yie),e(yie,l5o),e(F_,i5o),e(F_,hq),e(hq,d5o),e(F_,c5o),e(y,f5o),e(y,T_),e(T_,xie),e(xie,m5o),e(T_,g5o),e(T_,pq),e(pq,h5o),e(T_,p5o),e(y,_5o),e(y,M_),e(M_,$ie),e($ie,u5o),e(M_,b5o),e(M_,_q),e(_q,v5o),e(M_,F5o),e(y,T5o),e(y,E_),e(E_,kie),e(kie,M5o),e(E_,E5o),e(E_,uq),e(uq,C5o),e(E_,w5o),e(y,A5o),e(y,C_),e(C_,Sie),e(Sie,L5o),e(C_,y5o),e(C_,bq),e(bq,x5o),e(C_,$5o),e(y,k5o),e(y,w_),e(w_,Rie),e(Rie,S5o),e(w_,R5o),e(w_,vq),e(vq,P5o),e(w_,B5o),e(y,I5o),e(y,A_),e(A_,Pie),e(Pie,N5o),e(A_,q5o),e(A_,Fq),e(Fq,j5o),e(A_,D5o),e(y,G5o),e(y,L_),e(L_,Bie),e(Bie,O5o),e(L_,V5o),e(L_,Tq),e(Tq,X5o),e(L_,z5o),e(y,W5o),e(y,y_),e(y_,Iie),e(Iie,Q5o),e(y_,H5o),e(y_,Mq),e(Mq,U5o),e(y_,J5o),e(y,Y5o),e(y,x_),e(x_,Nie),e(Nie,K5o),e(x_,Z5o),e(x_,Eq),e(Eq,e3o),e(x_,o3o),e(y,r3o),e(y,$_),e($_,qie),e(qie,t3o),e($_,a3o),e($_,Cq),e(Cq,n3o),e($_,s3o),e(y,l3o),e(y,k_),e(k_,jie),e(jie,i3o),e(k_,d3o),e(k_,wq),e(wq,c3o),e(k_,f3o),e(y,m3o),e(y,S_),e(S_,Die),e(Die,g3o),e(S_,h3o),e(S_,Aq),e(Aq,p3o),e(S_,_3o),e(y,u3o),e(y,R_),e(R_,Gie),e(Gie,b3o),e(R_,v3o),e(R_,Lq),e(Lq,F3o),e(R_,T3o),e(y,M3o),e(y,P_),e(P_,Oie),e(Oie,E3o),e(P_,C3o),e(P_,yq),e(yq,w3o),e(P_,A3o),e(y,L3o),e(y,B_),e(B_,Vie),e(Vie,y3o),e(B_,x3o),e(B_,xq),e(xq,$3o),e(B_,k3o),e(y,S3o),e(y,I_),e(I_,Xie),e(Xie,R3o),e(I_,P3o),e(I_,$q),e($q,B3o),e(I_,I3o),e(y,N3o),e(y,N_),e(N_,zie),e(zie,q3o),e(N_,j3o),e(N_,kq),e(kq,D3o),e(N_,G3o),e(y,O3o),e(y,q_),e(q_,Wie),e(Wie,V3o),e(q_,X3o),e(q_,Sq),e(Sq,z3o),e(q_,W3o),e(y,Q3o),e(y,j_),e(j_,Qie),e(Qie,H3o),e(j_,U3o),e(j_,Rq),e(Rq,J3o),e(j_,Y3o),e(y,K3o),e(y,D_),e(D_,Hie),e(Hie,Z3o),e(D_,eFo),e(D_,Pq),e(Pq,oFo),e(D_,rFo),e(y,tFo),e(y,G_),e(G_,Uie),e(Uie,aFo),e(G_,nFo),e(G_,Bq),e(Bq,sFo),e(G_,lFo),e(y,iFo),e(y,O_),e(O_,Jie),e(Jie,dFo),e(O_,cFo),e(O_,Iq),e(Iq,fFo),e(O_,mFo),e(y,gFo),e(y,V_),e(V_,Yie),e(Yie,hFo),e(V_,pFo),e(V_,Nq),e(Nq,_Fo),e(V_,uFo),e(y,bFo),e(y,X_),e(X_,Kie),e(Kie,vFo),e(X_,FFo),e(X_,qq),e(qq,TFo),e(X_,MFo),e(y,EFo),e(y,z_),e(z_,Zie),e(Zie,CFo),e(z_,wFo),e(z_,jq),e(jq,AFo),e(z_,LFo),e(y,yFo),e(y,W_),e(W_,ede),e(ede,xFo),e(W_,$Fo),e(W_,Dq),e(Dq,kFo),e(W_,SFo),e(y,RFo),e(y,Q_),e(Q_,ode),e(ode,PFo),e(Q_,BFo),e(Q_,Gq),e(Gq,IFo),e(Q_,NFo),e(y,qFo),e(y,H_),e(H_,rde),e(rde,jFo),e(H_,DFo),e(H_,Oq),e(Oq,GFo),e(H_,OFo),e(y,VFo),e(y,U_),e(U_,tde),e(tde,XFo),e(U_,zFo),e(U_,Vq),e(Vq,WFo),e(U_,QFo),e(y,HFo),e(y,J_),e(J_,ade),e(ade,UFo),e(J_,JFo),e(J_,Xq),e(Xq,YFo),e(J_,KFo),e(y,ZFo),e(y,Y_),e(Y_,nde),e(nde,eTo),e(Y_,oTo),e(Y_,zq),e(zq,rTo),e(Y_,tTo),e(y,aTo),e(y,K_),e(K_,sde),e(sde,nTo),e(K_,sTo),e(K_,Wq),e(Wq,lTo),e(K_,iTo),e(y,dTo),e(y,Z_),e(Z_,lde),e(lde,cTo),e(Z_,fTo),e(Z_,Qq),e(Qq,mTo),e(Z_,gTo),e(y,hTo),e(y,eu),e(eu,ide),e(ide,pTo),e(eu,_To),e(eu,Hq),e(Hq,uTo),e(eu,bTo),e(y,vTo),e(y,ou),e(ou,dde),e(dde,FTo),e(ou,TTo),e(ou,Uq),e(Uq,MTo),e(ou,ETo),e(y,CTo),e(y,ru),e(ru,cde),e(cde,wTo),e(ru,ATo),e(ru,Jq),e(Jq,LTo),e(ru,yTo),e(y,xTo),e(y,tu),e(tu,fde),e(fde,$To),e(tu,kTo),e(tu,Yq),e(Yq,STo),e(tu,RTo),e(y,PTo),e(y,au),e(au,mde),e(mde,BTo),e(au,ITo),e(au,Kq),e(Kq,NTo),e(au,qTo),e(y,jTo),e(y,nu),e(nu,gde),e(gde,DTo),e(nu,GTo),e(nu,Zq),e(Zq,OTo),e(nu,VTo),e(y,XTo),e(y,su),e(su,hde),e(hde,zTo),e(su,WTo),e(su,ej),e(ej,QTo),e(su,HTo),e(y,UTo),e(y,lu),e(lu,pde),e(pde,JTo),e(lu,YTo),e(lu,oj),e(oj,KTo),e(lu,ZTo),e(y,e7o),e(y,iu),e(iu,_de),e(_de,o7o),e(iu,r7o),e(iu,rj),e(rj,t7o),e(iu,a7o),e(y,n7o),e(y,du),e(du,ude),e(ude,s7o),e(du,l7o),e(du,tj),e(tj,i7o),e(du,d7o),e(y,c7o),e(y,cu),e(cu,bde),e(bde,f7o),e(cu,m7o),e(cu,aj),e(aj,g7o),e(cu,h7o),e(y,p7o),e(y,fu),e(fu,vde),e(vde,_7o),e(fu,u7o),e(fu,nj),e(nj,b7o),e(fu,v7o),e(y,F7o),e(y,mu),e(mu,Fde),e(Fde,T7o),e(mu,M7o),e(mu,sj),e(sj,E7o),e(mu,C7o),e(y,w7o),e(y,gu),e(gu,Tde),e(Tde,A7o),e(gu,L7o),e(gu,lj),e(lj,y7o),e(gu,x7o),e(y,$7o),e(y,hu),e(hu,Mde),e(Mde,k7o),e(hu,S7o),e(hu,ij),e(ij,R7o),e(hu,P7o),e(Je,B7o),e(Je,pu),e(pu,I7o),e(pu,Ede),e(Ede,N7o),e(pu,q7o),e(pu,Cde),e(Cde,j7o),e(Je,D7o),M(_u,Je,null),b(f,Kje,u),b(f,$i,u),e($i,uu),e(uu,wde),M(LL,wde,null),e($i,G7o),e($i,Ade),e(Ade,O7o),b(f,Zje,u),b(f,xo,u),M(yL,xo,null),e(xo,V7o),e(xo,ki),e(ki,X7o),e(ki,dj),e(dj,z7o),e(ki,W7o),e(ki,cj),e(cj,Q7o),e(ki,H7o),e(xo,U7o),e(xo,xL),e(xL,J7o),e(xL,Lde),e(Lde,Y7o),e(xL,K7o),e(xo,Z7o),e(xo,nt),M($L,nt,null),e(nt,eMo),e(nt,yde),e(yde,oMo),e(nt,rMo),e(nt,Si),e(Si,tMo),e(Si,xde),e(xde,aMo),e(Si,nMo),e(Si,fj),e(fj,sMo),e(Si,lMo),e(nt,iMo),M(bu,nt,null),e(xo,dMo),e(xo,Ye),M(kL,Ye,null),e(Ye,cMo),e(Ye,$de),e($de,fMo),e(Ye,mMo),e(Ye,$a),e($a,gMo),e($a,kde),e(kde,hMo),e($a,pMo),e($a,Sde),e(Sde,_Mo),e($a,uMo),e($a,Rde),e(Rde,bMo),e($a,vMo),e(Ye,FMo),e(Ye,G),e(G,vu),e(vu,Pde),e(Pde,TMo),e(vu,MMo),e(vu,mj),e(mj,EMo),e(vu,CMo),e(G,wMo),e(G,Fu),e(Fu,Bde),e(Bde,AMo),e(Fu,LMo),e(Fu,gj),e(gj,yMo),e(Fu,xMo),e(G,$Mo),e(G,Tu),e(Tu,Ide),e(Ide,kMo),e(Tu,SMo),e(Tu,hj),e(hj,RMo),e(Tu,PMo),e(G,BMo),e(G,Mu),e(Mu,Nde),e(Nde,IMo),e(Mu,NMo),e(Mu,pj),e(pj,qMo),e(Mu,jMo),e(G,DMo),e(G,Eu),e(Eu,qde),e(qde,GMo),e(Eu,OMo),e(Eu,_j),e(_j,VMo),e(Eu,XMo),e(G,zMo),e(G,Cu),e(Cu,jde),e(jde,WMo),e(Cu,QMo),e(Cu,uj),e(uj,HMo),e(Cu,UMo),e(G,JMo),e(G,wu),e(wu,Dde),e(Dde,YMo),e(wu,KMo),e(wu,bj),e(bj,ZMo),e(wu,eEo),e(G,oEo),e(G,Au),e(Au,Gde),e(Gde,rEo),e(Au,tEo),e(Au,vj),e(vj,aEo),e(Au,nEo),e(G,sEo),e(G,Lu),e(Lu,Ode),e(Ode,lEo),e(Lu,iEo),e(Lu,Fj),e(Fj,dEo),e(Lu,cEo),e(G,fEo),e(G,yu),e(yu,Vde),e(Vde,mEo),e(yu,gEo),e(yu,Tj),e(Tj,hEo),e(yu,pEo),e(G,_Eo),e(G,xu),e(xu,Xde),e(Xde,uEo),e(xu,bEo),e(xu,Mj),e(Mj,vEo),e(xu,FEo),e(G,TEo),e(G,$u),e($u,zde),e(zde,MEo),e($u,EEo),e($u,Ej),e(Ej,CEo),e($u,wEo),e(G,AEo),e(G,ku),e(ku,Wde),e(Wde,LEo),e(ku,yEo),e(ku,Cj),e(Cj,xEo),e(ku,$Eo),e(G,kEo),e(G,Su),e(Su,Qde),e(Qde,SEo),e(Su,REo),e(Su,wj),e(wj,PEo),e(Su,BEo),e(G,IEo),e(G,Ru),e(Ru,Hde),e(Hde,NEo),e(Ru,qEo),e(Ru,Aj),e(Aj,jEo),e(Ru,DEo),e(G,GEo),e(G,Pu),e(Pu,Ude),e(Ude,OEo),e(Pu,VEo),e(Pu,Lj),e(Lj,XEo),e(Pu,zEo),e(G,WEo),e(G,Bu),e(Bu,Jde),e(Jde,QEo),e(Bu,HEo),e(Bu,yj),e(yj,UEo),e(Bu,JEo),e(G,YEo),e(G,Iu),e(Iu,Yde),e(Yde,KEo),e(Iu,ZEo),e(Iu,xj),e(xj,eCo),e(Iu,oCo),e(G,rCo),e(G,Nu),e(Nu,Kde),e(Kde,tCo),e(Nu,aCo),e(Nu,$j),e($j,nCo),e(Nu,sCo),e(G,lCo),e(G,qu),e(qu,Zde),e(Zde,iCo),e(qu,dCo),e(qu,kj),e(kj,cCo),e(qu,fCo),e(G,mCo),e(G,ju),e(ju,ece),e(ece,gCo),e(ju,hCo),e(ju,Sj),e(Sj,pCo),e(ju,_Co),e(G,uCo),e(G,Du),e(Du,oce),e(oce,bCo),e(Du,vCo),e(Du,Rj),e(Rj,FCo),e(Du,TCo),e(G,MCo),e(G,Gu),e(Gu,rce),e(rce,ECo),e(Gu,CCo),e(Gu,Pj),e(Pj,wCo),e(Gu,ACo),e(G,LCo),e(G,Ou),e(Ou,tce),e(tce,yCo),e(Ou,xCo),e(Ou,Bj),e(Bj,$Co),e(Ou,kCo),e(G,SCo),e(G,Vu),e(Vu,ace),e(ace,RCo),e(Vu,PCo),e(Vu,Ij),e(Ij,BCo),e(Vu,ICo),e(G,NCo),e(G,Xu),e(Xu,nce),e(nce,qCo),e(Xu,jCo),e(Xu,Nj),e(Nj,DCo),e(Xu,GCo),e(G,OCo),e(G,zu),e(zu,sce),e(sce,VCo),e(zu,XCo),e(zu,qj),e(qj,zCo),e(zu,WCo),e(G,QCo),e(G,Wu),e(Wu,lce),e(lce,HCo),e(Wu,UCo),e(Wu,jj),e(jj,JCo),e(Wu,YCo),e(G,KCo),e(G,Qu),e(Qu,ice),e(ice,ZCo),e(Qu,e0o),e(Qu,Dj),e(Dj,o0o),e(Qu,r0o),e(G,t0o),e(G,Hu),e(Hu,dce),e(dce,a0o),e(Hu,n0o),e(Hu,Gj),e(Gj,s0o),e(Hu,l0o),e(G,i0o),e(G,Uu),e(Uu,cce),e(cce,d0o),e(Uu,c0o),e(Uu,Oj),e(Oj,f0o),e(Uu,m0o),e(G,g0o),e(G,Ju),e(Ju,fce),e(fce,h0o),e(Ju,p0o),e(Ju,Vj),e(Vj,_0o),e(Ju,u0o),e(G,b0o),e(G,Yu),e(Yu,mce),e(mce,v0o),e(Yu,F0o),e(Yu,Xj),e(Xj,T0o),e(Yu,M0o),e(G,E0o),e(G,Ku),e(Ku,gce),e(gce,C0o),e(Ku,w0o),e(Ku,zj),e(zj,A0o),e(Ku,L0o),e(G,y0o),e(G,Zu),e(Zu,hce),e(hce,x0o),e(Zu,$0o),e(Zu,Wj),e(Wj,k0o),e(Zu,S0o),e(G,R0o),e(G,e1),e(e1,pce),e(pce,P0o),e(e1,B0o),e(e1,Qj),e(Qj,I0o),e(e1,N0o),e(G,q0o),e(G,o1),e(o1,_ce),e(_ce,j0o),e(o1,D0o),e(o1,Hj),e(Hj,G0o),e(o1,O0o),e(G,V0o),e(G,r1),e(r1,uce),e(uce,X0o),e(r1,z0o),e(r1,Uj),e(Uj,W0o),e(r1,Q0o),e(G,H0o),e(G,t1),e(t1,bce),e(bce,U0o),e(t1,J0o),e(t1,Jj),e(Jj,Y0o),e(t1,K0o),e(G,Z0o),e(G,a1),e(a1,vce),e(vce,ewo),e(a1,owo),e(a1,Yj),e(Yj,rwo),e(a1,two),e(G,awo),e(G,n1),e(n1,Fce),e(Fce,nwo),e(n1,swo),e(n1,Kj),e(Kj,lwo),e(n1,iwo),e(G,dwo),e(G,s1),e(s1,Tce),e(Tce,cwo),e(s1,fwo),e(s1,Zj),e(Zj,mwo),e(s1,gwo),e(G,hwo),e(G,l1),e(l1,Mce),e(Mce,pwo),e(l1,_wo),e(l1,eD),e(eD,uwo),e(l1,bwo),e(Ye,vwo),e(Ye,i1),e(i1,Fwo),e(i1,Ece),e(Ece,Two),e(i1,Mwo),e(i1,Cce),e(Cce,Ewo),e(Ye,Cwo),M(d1,Ye,null),b(f,eDe,u),b(f,Ri,u),e(Ri,c1),e(c1,wce),M(SL,wce,null),e(Ri,wwo),e(Ri,Ace),e(Ace,Awo),b(f,oDe,u),b(f,$o,u),M(RL,$o,null),e($o,Lwo),e($o,Pi),e(Pi,ywo),e(Pi,oD),e(oD,xwo),e(Pi,$wo),e(Pi,rD),e(rD,kwo),e(Pi,Swo),e($o,Rwo),e($o,PL),e(PL,Pwo),e(PL,Lce),e(Lce,Bwo),e(PL,Iwo),e($o,Nwo),e($o,st),M(BL,st,null),e(st,qwo),e(st,yce),e(yce,jwo),e(st,Dwo),e(st,Bi),e(Bi,Gwo),e(Bi,xce),e(xce,Owo),e(Bi,Vwo),e(Bi,tD),e(tD,Xwo),e(Bi,zwo),e(st,Wwo),M(f1,st,null),e($o,Qwo),e($o,Ke),M(IL,Ke,null),e(Ke,Hwo),e(Ke,$ce),e($ce,Uwo),e(Ke,Jwo),e(Ke,ka),e(ka,Ywo),e(ka,kce),e(kce,Kwo),e(ka,Zwo),e(ka,Sce),e(Sce,e6o),e(ka,o6o),e(ka,Rce),e(Rce,r6o),e(ka,t6o),e(Ke,a6o),e(Ke,z),e(z,m1),e(m1,Pce),e(Pce,n6o),e(m1,s6o),e(m1,aD),e(aD,l6o),e(m1,i6o),e(z,d6o),e(z,g1),e(g1,Bce),e(Bce,c6o),e(g1,f6o),e(g1,nD),e(nD,m6o),e(g1,g6o),e(z,h6o),e(z,h1),e(h1,Ice),e(Ice,p6o),e(h1,_6o),e(h1,sD),e(sD,u6o),e(h1,b6o),e(z,v6o),e(z,p1),e(p1,Nce),e(Nce,F6o),e(p1,T6o),e(p1,lD),e(lD,M6o),e(p1,E6o),e(z,C6o),e(z,_1),e(_1,qce),e(qce,w6o),e(_1,A6o),e(_1,iD),e(iD,L6o),e(_1,y6o),e(z,x6o),e(z,u1),e(u1,jce),e(jce,$6o),e(u1,k6o),e(u1,dD),e(dD,S6o),e(u1,R6o),e(z,P6o),e(z,b1),e(b1,Dce),e(Dce,B6o),e(b1,I6o),e(b1,cD),e(cD,N6o),e(b1,q6o),e(z,j6o),e(z,v1),e(v1,Gce),e(Gce,D6o),e(v1,G6o),e(v1,fD),e(fD,O6o),e(v1,V6o),e(z,X6o),e(z,F1),e(F1,Oce),e(Oce,z6o),e(F1,W6o),e(F1,mD),e(mD,Q6o),e(F1,H6o),e(z,U6o),e(z,T1),e(T1,Vce),e(Vce,J6o),e(T1,Y6o),e(T1,gD),e(gD,K6o),e(T1,Z6o),e(z,eAo),e(z,M1),e(M1,Xce),e(Xce,oAo),e(M1,rAo),e(M1,hD),e(hD,tAo),e(M1,aAo),e(z,nAo),e(z,E1),e(E1,zce),e(zce,sAo),e(E1,lAo),e(E1,pD),e(pD,iAo),e(E1,dAo),e(z,cAo),e(z,C1),e(C1,Wce),e(Wce,fAo),e(C1,mAo),e(C1,_D),e(_D,gAo),e(C1,hAo),e(z,pAo),e(z,w1),e(w1,Qce),e(Qce,_Ao),e(w1,uAo),e(w1,uD),e(uD,bAo),e(w1,vAo),e(z,FAo),e(z,A1),e(A1,Hce),e(Hce,TAo),e(A1,MAo),e(A1,bD),e(bD,EAo),e(A1,CAo),e(z,wAo),e(z,L1),e(L1,Uce),e(Uce,AAo),e(L1,LAo),e(L1,vD),e(vD,yAo),e(L1,xAo),e(z,$Ao),e(z,y1),e(y1,Jce),e(Jce,kAo),e(y1,SAo),e(y1,FD),e(FD,RAo),e(y1,PAo),e(z,BAo),e(z,x1),e(x1,Yce),e(Yce,IAo),e(x1,NAo),e(x1,TD),e(TD,qAo),e(x1,jAo),e(z,DAo),e(z,$1),e($1,Kce),e(Kce,GAo),e($1,OAo),e($1,MD),e(MD,VAo),e($1,XAo),e(z,zAo),e(z,k1),e(k1,Zce),e(Zce,WAo),e(k1,QAo),e(k1,ED),e(ED,HAo),e(k1,UAo),e(z,JAo),e(z,S1),e(S1,efe),e(efe,YAo),e(S1,KAo),e(S1,CD),e(CD,ZAo),e(S1,eLo),e(z,oLo),e(z,R1),e(R1,ofe),e(ofe,rLo),e(R1,tLo),e(R1,wD),e(wD,aLo),e(R1,nLo),e(z,sLo),e(z,P1),e(P1,rfe),e(rfe,lLo),e(P1,iLo),e(P1,AD),e(AD,dLo),e(P1,cLo),e(z,fLo),e(z,B1),e(B1,tfe),e(tfe,mLo),e(B1,gLo),e(B1,LD),e(LD,hLo),e(B1,pLo),e(z,_Lo),e(z,I1),e(I1,afe),e(afe,uLo),e(I1,bLo),e(I1,yD),e(yD,vLo),e(I1,FLo),e(z,TLo),e(z,N1),e(N1,nfe),e(nfe,MLo),e(N1,ELo),e(N1,xD),e(xD,CLo),e(N1,wLo),e(z,ALo),e(z,q1),e(q1,sfe),e(sfe,LLo),e(q1,yLo),e(q1,$D),e($D,xLo),e(q1,$Lo),e(z,kLo),e(z,j1),e(j1,lfe),e(lfe,SLo),e(j1,RLo),e(j1,kD),e(kD,PLo),e(j1,BLo),e(z,ILo),e(z,D1),e(D1,ife),e(ife,NLo),e(D1,qLo),e(D1,SD),e(SD,jLo),e(D1,DLo),e(z,GLo),e(z,G1),e(G1,dfe),e(dfe,OLo),e(G1,VLo),e(G1,RD),e(RD,XLo),e(G1,zLo),e(z,WLo),e(z,O1),e(O1,cfe),e(cfe,QLo),e(O1,HLo),e(O1,PD),e(PD,ULo),e(O1,JLo),e(z,YLo),e(z,V1),e(V1,ffe),e(ffe,KLo),e(V1,ZLo),e(V1,BD),e(BD,eyo),e(V1,oyo),e(z,ryo),e(z,X1),e(X1,mfe),e(mfe,tyo),e(X1,ayo),e(X1,ID),e(ID,nyo),e(X1,syo),e(z,lyo),e(z,z1),e(z1,gfe),e(gfe,iyo),e(z1,dyo),e(z1,ND),e(ND,cyo),e(z1,fyo),e(z,myo),e(z,W1),e(W1,hfe),e(hfe,gyo),e(W1,hyo),e(W1,qD),e(qD,pyo),e(W1,_yo),e(z,uyo),e(z,Q1),e(Q1,pfe),e(pfe,byo),e(Q1,vyo),e(Q1,jD),e(jD,Fyo),e(Q1,Tyo),e(z,Myo),e(z,H1),e(H1,_fe),e(_fe,Eyo),e(H1,Cyo),e(H1,DD),e(DD,wyo),e(H1,Ayo),e(z,Lyo),e(z,U1),e(U1,ufe),e(ufe,yyo),e(U1,xyo),e(U1,GD),e(GD,$yo),e(U1,kyo),e(Ke,Syo),e(Ke,J1),e(J1,Ryo),e(J1,bfe),e(bfe,Pyo),e(J1,Byo),e(J1,vfe),e(vfe,Iyo),e(Ke,Nyo),M(Y1,Ke,null),b(f,rDe,u),b(f,Ii,u),e(Ii,K1),e(K1,Ffe),M(NL,Ffe,null),e(Ii,qyo),e(Ii,Tfe),e(Tfe,jyo),b(f,tDe,u),b(f,ko,u),M(qL,ko,null),e(ko,Dyo),e(ko,Ni),e(Ni,Gyo),e(Ni,OD),e(OD,Oyo),e(Ni,Vyo),e(Ni,VD),e(VD,Xyo),e(Ni,zyo),e(ko,Wyo),e(ko,jL),e(jL,Qyo),e(jL,Mfe),e(Mfe,Hyo),e(jL,Uyo),e(ko,Jyo),e(ko,lt),M(DL,lt,null),e(lt,Yyo),e(lt,Efe),e(Efe,Kyo),e(lt,Zyo),e(lt,qi),e(qi,e8o),e(qi,Cfe),e(Cfe,o8o),e(qi,r8o),e(qi,XD),e(XD,t8o),e(qi,a8o),e(lt,n8o),M(Z1,lt,null),e(ko,s8o),e(ko,Ze),M(GL,Ze,null),e(Ze,l8o),e(Ze,wfe),e(wfe,i8o),e(Ze,d8o),e(Ze,Sa),e(Sa,c8o),e(Sa,Afe),e(Afe,f8o),e(Sa,m8o),e(Sa,Lfe),e(Lfe,g8o),e(Sa,h8o),e(Sa,yfe),e(yfe,p8o),e(Sa,_8o),e(Ze,u8o),e(Ze,Q),e(Q,eb),e(eb,xfe),e(xfe,b8o),e(eb,v8o),e(eb,zD),e(zD,F8o),e(eb,T8o),e(Q,M8o),e(Q,ob),e(ob,$fe),e($fe,E8o),e(ob,C8o),e(ob,WD),e(WD,w8o),e(ob,A8o),e(Q,L8o),e(Q,rb),e(rb,kfe),e(kfe,y8o),e(rb,x8o),e(rb,QD),e(QD,$8o),e(rb,k8o),e(Q,S8o),e(Q,tb),e(tb,Sfe),e(Sfe,R8o),e(tb,P8o),e(tb,HD),e(HD,B8o),e(tb,I8o),e(Q,N8o),e(Q,ab),e(ab,Rfe),e(Rfe,q8o),e(ab,j8o),e(ab,UD),e(UD,D8o),e(ab,G8o),e(Q,O8o),e(Q,nb),e(nb,Pfe),e(Pfe,V8o),e(nb,X8o),e(nb,JD),e(JD,z8o),e(nb,W8o),e(Q,Q8o),e(Q,sb),e(sb,Bfe),e(Bfe,H8o),e(sb,U8o),e(sb,YD),e(YD,J8o),e(sb,Y8o),e(Q,K8o),e(Q,lb),e(lb,Ife),e(Ife,Z8o),e(lb,e9o),e(lb,KD),e(KD,o9o),e(lb,r9o),e(Q,t9o),e(Q,ib),e(ib,Nfe),e(Nfe,a9o),e(ib,n9o),e(ib,ZD),e(ZD,s9o),e(ib,l9o),e(Q,i9o),e(Q,db),e(db,qfe),e(qfe,d9o),e(db,c9o),e(db,eG),e(eG,f9o),e(db,m9o),e(Q,g9o),e(Q,cb),e(cb,jfe),e(jfe,h9o),e(cb,p9o),e(cb,oG),e(oG,_9o),e(cb,u9o),e(Q,b9o),e(Q,fb),e(fb,Dfe),e(Dfe,v9o),e(fb,F9o),e(fb,rG),e(rG,T9o),e(fb,M9o),e(Q,E9o),e(Q,mb),e(mb,Gfe),e(Gfe,C9o),e(mb,w9o),e(mb,tG),e(tG,A9o),e(mb,L9o),e(Q,y9o),e(Q,gb),e(gb,Ofe),e(Ofe,x9o),e(gb,$9o),e(gb,aG),e(aG,k9o),e(gb,S9o),e(Q,R9o),e(Q,hb),e(hb,Vfe),e(Vfe,P9o),e(hb,B9o),e(hb,nG),e(nG,I9o),e(hb,N9o),e(Q,q9o),e(Q,pb),e(pb,Xfe),e(Xfe,j9o),e(pb,D9o),e(pb,sG),e(sG,G9o),e(pb,O9o),e(Q,V9o),e(Q,_b),e(_b,zfe),e(zfe,X9o),e(_b,z9o),e(_b,lG),e(lG,W9o),e(_b,Q9o),e(Q,H9o),e(Q,ub),e(ub,Wfe),e(Wfe,U9o),e(ub,J9o),e(ub,iG),e(iG,Y9o),e(ub,K9o),e(Q,Z9o),e(Q,bb),e(bb,Qfe),e(Qfe,exo),e(bb,oxo),e(bb,dG),e(dG,rxo),e(bb,txo),e(Q,axo),e(Q,vb),e(vb,Hfe),e(Hfe,nxo),e(vb,sxo),e(vb,cG),e(cG,lxo),e(vb,ixo),e(Q,dxo),e(Q,Fb),e(Fb,Ufe),e(Ufe,cxo),e(Fb,fxo),e(Fb,fG),e(fG,mxo),e(Fb,gxo),e(Q,hxo),e(Q,Tb),e(Tb,Jfe),e(Jfe,pxo),e(Tb,_xo),e(Tb,mG),e(mG,uxo),e(Tb,bxo),e(Q,vxo),e(Q,Mb),e(Mb,Yfe),e(Yfe,Fxo),e(Mb,Txo),e(Mb,gG),e(gG,Mxo),e(Mb,Exo),e(Q,Cxo),e(Q,Eb),e(Eb,Kfe),e(Kfe,wxo),e(Eb,Axo),e(Eb,hG),e(hG,Lxo),e(Eb,yxo),e(Q,xxo),e(Q,Cb),e(Cb,Zfe),e(Zfe,$xo),e(Cb,kxo),e(Cb,pG),e(pG,Sxo),e(Cb,Rxo),e(Q,Pxo),e(Q,wb),e(wb,eme),e(eme,Bxo),e(wb,Ixo),e(wb,_G),e(_G,Nxo),e(wb,qxo),e(Q,jxo),e(Q,Ab),e(Ab,ome),e(ome,Dxo),e(Ab,Gxo),e(Ab,uG),e(uG,Oxo),e(Ab,Vxo),e(Q,Xxo),e(Q,Lb),e(Lb,rme),e(rme,zxo),e(Lb,Wxo),e(Lb,bG),e(bG,Qxo),e(Lb,Hxo),e(Q,Uxo),e(Q,yb),e(yb,tme),e(tme,Jxo),e(yb,Yxo),e(yb,vG),e(vG,Kxo),e(yb,Zxo),e(Q,e$o),e(Q,xb),e(xb,ame),e(ame,o$o),e(xb,r$o),e(xb,FG),e(FG,t$o),e(xb,a$o),e(Q,n$o),e(Q,$b),e($b,nme),e(nme,s$o),e($b,l$o),e($b,TG),e(TG,i$o),e($b,d$o),e(Q,c$o),e(Q,kb),e(kb,sme),e(sme,f$o),e(kb,m$o),e(kb,lme),e(lme,g$o),e(kb,h$o),e(Q,p$o),e(Q,Sb),e(Sb,ime),e(ime,_$o),e(Sb,u$o),e(Sb,MG),e(MG,b$o),e(Sb,v$o),e(Q,F$o),e(Q,Rb),e(Rb,dme),e(dme,T$o),e(Rb,M$o),e(Rb,EG),e(EG,E$o),e(Rb,C$o),e(Q,w$o),e(Q,Pb),e(Pb,cme),e(cme,A$o),e(Pb,L$o),e(Pb,CG),e(CG,y$o),e(Pb,x$o),e(Q,$$o),e(Q,Bb),e(Bb,fme),e(fme,k$o),e(Bb,S$o),e(Bb,wG),e(wG,R$o),e(Bb,P$o),e(Ze,B$o),e(Ze,Ib),e(Ib,I$o),e(Ib,mme),e(mme,N$o),e(Ib,q$o),e(Ib,gme),e(gme,j$o),e(Ze,D$o),M(Nb,Ze,null),b(f,aDe,u),b(f,ji,u),e(ji,qb),e(qb,hme),M(OL,hme,null),e(ji,G$o),e(ji,pme),e(pme,O$o),b(f,nDe,u),b(f,So,u),M(VL,So,null),e(So,V$o),e(So,Di),e(Di,X$o),e(Di,AG),e(AG,z$o),e(Di,W$o),e(Di,LG),e(LG,Q$o),e(Di,H$o),e(So,U$o),e(So,XL),e(XL,J$o),e(XL,_me),e(_me,Y$o),e(XL,K$o),e(So,Z$o),e(So,it),M(zL,it,null),e(it,eko),e(it,ume),e(ume,oko),e(it,rko),e(it,Gi),e(Gi,tko),e(Gi,bme),e(bme,ako),e(Gi,nko),e(Gi,yG),e(yG,sko),e(Gi,lko),e(it,iko),M(jb,it,null),e(So,dko),e(So,eo),M(WL,eo,null),e(eo,cko),e(eo,vme),e(vme,fko),e(eo,mko),e(eo,Ra),e(Ra,gko),e(Ra,Fme),e(Fme,hko),e(Ra,pko),e(Ra,Tme),e(Tme,_ko),e(Ra,uko),e(Ra,Mme),e(Mme,bko),e(Ra,vko),e(eo,Fko),e(eo,_e),e(_e,Db),e(Db,Eme),e(Eme,Tko),e(Db,Mko),e(Db,xG),e(xG,Eko),e(Db,Cko),e(_e,wko),e(_e,Gb),e(Gb,Cme),e(Cme,Ako),e(Gb,Lko),e(Gb,$G),e($G,yko),e(Gb,xko),e(_e,$ko),e(_e,Ob),e(Ob,wme),e(wme,kko),e(Ob,Sko),e(Ob,kG),e(kG,Rko),e(Ob,Pko),e(_e,Bko),e(_e,Vb),e(Vb,Ame),e(Ame,Iko),e(Vb,Nko),e(Vb,SG),e(SG,qko),e(Vb,jko),e(_e,Dko),e(_e,Xb),e(Xb,Lme),e(Lme,Gko),e(Xb,Oko),e(Xb,RG),e(RG,Vko),e(Xb,Xko),e(_e,zko),e(_e,zb),e(zb,yme),e(yme,Wko),e(zb,Qko),e(zb,PG),e(PG,Hko),e(zb,Uko),e(_e,Jko),e(_e,Wb),e(Wb,xme),e(xme,Yko),e(Wb,Kko),e(Wb,BG),e(BG,Zko),e(Wb,eSo),e(_e,oSo),e(_e,Qb),e(Qb,$me),e($me,rSo),e(Qb,tSo),e(Qb,IG),e(IG,aSo),e(Qb,nSo),e(_e,sSo),e(_e,Hb),e(Hb,kme),e(kme,lSo),e(Hb,iSo),e(Hb,NG),e(NG,dSo),e(Hb,cSo),e(_e,fSo),e(_e,Ub),e(Ub,Sme),e(Sme,mSo),e(Ub,gSo),e(Ub,qG),e(qG,hSo),e(Ub,pSo),e(_e,_So),e(_e,Jb),e(Jb,Rme),e(Rme,uSo),e(Jb,bSo),e(Jb,jG),e(jG,vSo),e(Jb,FSo),e(_e,TSo),e(_e,Yb),e(Yb,Pme),e(Pme,MSo),e(Yb,ESo),e(Yb,DG),e(DG,CSo),e(Yb,wSo),e(_e,ASo),e(_e,Kb),e(Kb,Bme),e(Bme,LSo),e(Kb,ySo),e(Kb,GG),e(GG,xSo),e(Kb,$So),e(_e,kSo),e(_e,Zb),e(Zb,Ime),e(Ime,SSo),e(Zb,RSo),e(Zb,OG),e(OG,PSo),e(Zb,BSo),e(_e,ISo),e(_e,e2),e(e2,Nme),e(Nme,NSo),e(e2,qSo),e(e2,VG),e(VG,jSo),e(e2,DSo),e(_e,GSo),e(_e,o2),e(o2,qme),e(qme,OSo),e(o2,VSo),e(o2,XG),e(XG,XSo),e(o2,zSo),e(eo,WSo),e(eo,r2),e(r2,QSo),e(r2,jme),e(jme,HSo),e(r2,USo),e(r2,Dme),e(Dme,JSo),e(eo,YSo),M(t2,eo,null),b(f,sDe,u),b(f,Oi,u),e(Oi,a2),e(a2,Gme),M(QL,Gme,null),e(Oi,KSo),e(Oi,Ome),e(Ome,ZSo),b(f,lDe,u),b(f,Ro,u),M(HL,Ro,null),e(Ro,eRo),e(Ro,Vi),e(Vi,oRo),e(Vi,zG),e(zG,rRo),e(Vi,tRo),e(Vi,WG),e(WG,aRo),e(Vi,nRo),e(Ro,sRo),e(Ro,UL),e(UL,lRo),e(UL,Vme),e(Vme,iRo),e(UL,dRo),e(Ro,cRo),e(Ro,dt),M(JL,dt,null),e(dt,fRo),e(dt,Xme),e(Xme,mRo),e(dt,gRo),e(dt,Xi),e(Xi,hRo),e(Xi,zme),e(zme,pRo),e(Xi,_Ro),e(Xi,QG),e(QG,uRo),e(Xi,bRo),e(dt,vRo),M(n2,dt,null),e(Ro,FRo),e(Ro,oo),M(YL,oo,null),e(oo,TRo),e(oo,Wme),e(Wme,MRo),e(oo,ERo),e(oo,Pa),e(Pa,CRo),e(Pa,Qme),e(Qme,wRo),e(Pa,ARo),e(Pa,Hme),e(Hme,LRo),e(Pa,yRo),e(Pa,Ume),e(Ume,xRo),e(Pa,$Ro),e(oo,kRo),e(oo,N),e(N,s2),e(s2,Jme),e(Jme,SRo),e(s2,RRo),e(s2,HG),e(HG,PRo),e(s2,BRo),e(N,IRo),e(N,l2),e(l2,Yme),e(Yme,NRo),e(l2,qRo),e(l2,UG),e(UG,jRo),e(l2,DRo),e(N,GRo),e(N,i2),e(i2,Kme),e(Kme,ORo),e(i2,VRo),e(i2,JG),e(JG,XRo),e(i2,zRo),e(N,WRo),e(N,d2),e(d2,Zme),e(Zme,QRo),e(d2,HRo),e(d2,YG),e(YG,URo),e(d2,JRo),e(N,YRo),e(N,c2),e(c2,ege),e(ege,KRo),e(c2,ZRo),e(c2,KG),e(KG,ePo),e(c2,oPo),e(N,rPo),e(N,f2),e(f2,oge),e(oge,tPo),e(f2,aPo),e(f2,ZG),e(ZG,nPo),e(f2,sPo),e(N,lPo),e(N,m2),e(m2,rge),e(rge,iPo),e(m2,dPo),e(m2,eO),e(eO,cPo),e(m2,fPo),e(N,mPo),e(N,g2),e(g2,tge),e(tge,gPo),e(g2,hPo),e(g2,oO),e(oO,pPo),e(g2,_Po),e(N,uPo),e(N,h2),e(h2,age),e(age,bPo),e(h2,vPo),e(h2,rO),e(rO,FPo),e(h2,TPo),e(N,MPo),e(N,p2),e(p2,nge),e(nge,EPo),e(p2,CPo),e(p2,tO),e(tO,wPo),e(p2,APo),e(N,LPo),e(N,_2),e(_2,sge),e(sge,yPo),e(_2,xPo),e(_2,aO),e(aO,$Po),e(_2,kPo),e(N,SPo),e(N,u2),e(u2,lge),e(lge,RPo),e(u2,PPo),e(u2,nO),e(nO,BPo),e(u2,IPo),e(N,NPo),e(N,b2),e(b2,ige),e(ige,qPo),e(b2,jPo),e(b2,sO),e(sO,DPo),e(b2,GPo),e(N,OPo),e(N,v2),e(v2,dge),e(dge,VPo),e(v2,XPo),e(v2,lO),e(lO,zPo),e(v2,WPo),e(N,QPo),e(N,F2),e(F2,cge),e(cge,HPo),e(F2,UPo),e(F2,iO),e(iO,JPo),e(F2,YPo),e(N,KPo),e(N,T2),e(T2,fge),e(fge,ZPo),e(T2,eBo),e(T2,dO),e(dO,oBo),e(T2,rBo),e(N,tBo),e(N,M2),e(M2,mge),e(mge,aBo),e(M2,nBo),e(M2,cO),e(cO,sBo),e(M2,lBo),e(N,iBo),e(N,E2),e(E2,gge),e(gge,dBo),e(E2,cBo),e(E2,fO),e(fO,fBo),e(E2,mBo),e(N,gBo),e(N,C2),e(C2,hge),e(hge,hBo),e(C2,pBo),e(C2,mO),e(mO,_Bo),e(C2,uBo),e(N,bBo),e(N,w2),e(w2,pge),e(pge,vBo),e(w2,FBo),e(w2,gO),e(gO,TBo),e(w2,MBo),e(N,EBo),e(N,A2),e(A2,_ge),e(_ge,CBo),e(A2,wBo),e(A2,hO),e(hO,ABo),e(A2,LBo),e(N,yBo),e(N,L2),e(L2,uge),e(uge,xBo),e(L2,$Bo),e(L2,pO),e(pO,kBo),e(L2,SBo),e(N,RBo),e(N,y2),e(y2,bge),e(bge,PBo),e(y2,BBo),e(y2,_O),e(_O,IBo),e(y2,NBo),e(N,qBo),e(N,x2),e(x2,vge),e(vge,jBo),e(x2,DBo),e(x2,uO),e(uO,GBo),e(x2,OBo),e(N,VBo),e(N,$2),e($2,Fge),e(Fge,XBo),e($2,zBo),e($2,bO),e(bO,WBo),e($2,QBo),e(N,HBo),e(N,k2),e(k2,Tge),e(Tge,UBo),e(k2,JBo),e(k2,vO),e(vO,YBo),e(k2,KBo),e(N,ZBo),e(N,S2),e(S2,Mge),e(Mge,eIo),e(S2,oIo),e(S2,FO),e(FO,rIo),e(S2,tIo),e(N,aIo),e(N,R2),e(R2,Ege),e(Ege,nIo),e(R2,sIo),e(R2,TO),e(TO,lIo),e(R2,iIo),e(N,dIo),e(N,P2),e(P2,Cge),e(Cge,cIo),e(P2,fIo),e(P2,MO),e(MO,mIo),e(P2,gIo),e(N,hIo),e(N,B2),e(B2,wge),e(wge,pIo),e(B2,_Io),e(B2,EO),e(EO,uIo),e(B2,bIo),e(N,vIo),e(N,I2),e(I2,Age),e(Age,FIo),e(I2,TIo),e(I2,CO),e(CO,MIo),e(I2,EIo),e(N,CIo),e(N,N2),e(N2,Lge),e(Lge,wIo),e(N2,AIo),e(N2,wO),e(wO,LIo),e(N2,yIo),e(N,xIo),e(N,q2),e(q2,yge),e(yge,$Io),e(q2,kIo),e(q2,AO),e(AO,SIo),e(q2,RIo),e(N,PIo),e(N,j2),e(j2,xge),e(xge,BIo),e(j2,IIo),e(j2,LO),e(LO,NIo),e(j2,qIo),e(N,jIo),e(N,D2),e(D2,$ge),e($ge,DIo),e(D2,GIo),e(D2,yO),e(yO,OIo),e(D2,VIo),e(N,XIo),e(N,G2),e(G2,kge),e(kge,zIo),e(G2,WIo),e(G2,xO),e(xO,QIo),e(G2,HIo),e(N,UIo),e(N,O2),e(O2,Sge),e(Sge,JIo),e(O2,YIo),e(O2,$O),e($O,KIo),e(O2,ZIo),e(N,eNo),e(N,V2),e(V2,Rge),e(Rge,oNo),e(V2,rNo),e(V2,kO),e(kO,tNo),e(V2,aNo),e(N,nNo),e(N,X2),e(X2,Pge),e(Pge,sNo),e(X2,lNo),e(X2,SO),e(SO,iNo),e(X2,dNo),e(N,cNo),e(N,z2),e(z2,Bge),e(Bge,fNo),e(z2,mNo),e(z2,RO),e(RO,gNo),e(z2,hNo),e(N,pNo),e(N,W2),e(W2,Ige),e(Ige,_No),e(W2,uNo),e(W2,PO),e(PO,bNo),e(W2,vNo),e(N,FNo),e(N,Q2),e(Q2,Nge),e(Nge,TNo),e(Q2,MNo),e(Q2,BO),e(BO,ENo),e(Q2,CNo),e(N,wNo),e(N,H2),e(H2,qge),e(qge,ANo),e(H2,LNo),e(H2,IO),e(IO,yNo),e(H2,xNo),e(N,$No),e(N,U2),e(U2,jge),e(jge,kNo),e(U2,SNo),e(U2,NO),e(NO,RNo),e(U2,PNo),e(N,BNo),e(N,J2),e(J2,Dge),e(Dge,INo),e(J2,NNo),e(J2,qO),e(qO,qNo),e(J2,jNo),e(N,DNo),e(N,Y2),e(Y2,Gge),e(Gge,GNo),e(Y2,ONo),e(Y2,jO),e(jO,VNo),e(Y2,XNo),e(N,zNo),e(N,K2),e(K2,Oge),e(Oge,WNo),e(K2,QNo),e(K2,DO),e(DO,HNo),e(K2,UNo),e(oo,JNo),e(oo,Z2),e(Z2,YNo),e(Z2,Vge),e(Vge,KNo),e(Z2,ZNo),e(Z2,Xge),e(Xge,eqo),e(oo,oqo),M(e4,oo,null),b(f,iDe,u),b(f,zi,u),e(zi,o4),e(o4,zge),M(KL,zge,null),e(zi,rqo),e(zi,Wge),e(Wge,tqo),b(f,dDe,u),b(f,Po,u),M(ZL,Po,null),e(Po,aqo),e(Po,Wi),e(Wi,nqo),e(Wi,GO),e(GO,sqo),e(Wi,lqo),e(Wi,OO),e(OO,iqo),e(Wi,dqo),e(Po,cqo),e(Po,ey),e(ey,fqo),e(ey,Qge),e(Qge,mqo),e(ey,gqo),e(Po,hqo),e(Po,ct),M(oy,ct,null),e(ct,pqo),e(ct,Hge),e(Hge,_qo),e(ct,uqo),e(ct,Qi),e(Qi,bqo),e(Qi,Uge),e(Uge,vqo),e(Qi,Fqo),e(Qi,VO),e(VO,Tqo),e(Qi,Mqo),e(ct,Eqo),M(r4,ct,null),e(Po,Cqo),e(Po,ro),M(ry,ro,null),e(ro,wqo),e(ro,Jge),e(Jge,Aqo),e(ro,Lqo),e(ro,Ba),e(Ba,yqo),e(Ba,Yge),e(Yge,xqo),e(Ba,$qo),e(Ba,Kge),e(Kge,kqo),e(Ba,Sqo),e(Ba,Zge),e(Zge,Rqo),e(Ba,Pqo),e(ro,Bqo),e(ro,Z),e(Z,t4),e(t4,ehe),e(ehe,Iqo),e(t4,Nqo),e(t4,XO),e(XO,qqo),e(t4,jqo),e(Z,Dqo),e(Z,a4),e(a4,ohe),e(ohe,Gqo),e(a4,Oqo),e(a4,zO),e(zO,Vqo),e(a4,Xqo),e(Z,zqo),e(Z,n4),e(n4,rhe),e(rhe,Wqo),e(n4,Qqo),e(n4,WO),e(WO,Hqo),e(n4,Uqo),e(Z,Jqo),e(Z,s4),e(s4,the),e(the,Yqo),e(s4,Kqo),e(s4,QO),e(QO,Zqo),e(s4,ejo),e(Z,ojo),e(Z,l4),e(l4,ahe),e(ahe,rjo),e(l4,tjo),e(l4,HO),e(HO,ajo),e(l4,njo),e(Z,sjo),e(Z,i4),e(i4,nhe),e(nhe,ljo),e(i4,ijo),e(i4,UO),e(UO,djo),e(i4,cjo),e(Z,fjo),e(Z,d4),e(d4,she),e(she,mjo),e(d4,gjo),e(d4,JO),e(JO,hjo),e(d4,pjo),e(Z,_jo),e(Z,c4),e(c4,lhe),e(lhe,ujo),e(c4,bjo),e(c4,YO),e(YO,vjo),e(c4,Fjo),e(Z,Tjo),e(Z,f4),e(f4,ihe),e(ihe,Mjo),e(f4,Ejo),e(f4,KO),e(KO,Cjo),e(f4,wjo),e(Z,Ajo),e(Z,m4),e(m4,dhe),e(dhe,Ljo),e(m4,yjo),e(m4,ZO),e(ZO,xjo),e(m4,$jo),e(Z,kjo),e(Z,g4),e(g4,che),e(che,Sjo),e(g4,Rjo),e(g4,eV),e(eV,Pjo),e(g4,Bjo),e(Z,Ijo),e(Z,h4),e(h4,fhe),e(fhe,Njo),e(h4,qjo),e(h4,oV),e(oV,jjo),e(h4,Djo),e(Z,Gjo),e(Z,p4),e(p4,mhe),e(mhe,Ojo),e(p4,Vjo),e(p4,rV),e(rV,Xjo),e(p4,zjo),e(Z,Wjo),e(Z,_4),e(_4,ghe),e(ghe,Qjo),e(_4,Hjo),e(_4,tV),e(tV,Ujo),e(_4,Jjo),e(Z,Yjo),e(Z,u4),e(u4,hhe),e(hhe,Kjo),e(u4,Zjo),e(u4,aV),e(aV,eDo),e(u4,oDo),e(Z,rDo),e(Z,b4),e(b4,phe),e(phe,tDo),e(b4,aDo),e(b4,nV),e(nV,nDo),e(b4,sDo),e(Z,lDo),e(Z,v4),e(v4,_he),e(_he,iDo),e(v4,dDo),e(v4,sV),e(sV,cDo),e(v4,fDo),e(Z,mDo),e(Z,F4),e(F4,uhe),e(uhe,gDo),e(F4,hDo),e(F4,lV),e(lV,pDo),e(F4,_Do),e(Z,uDo),e(Z,T4),e(T4,bhe),e(bhe,bDo),e(T4,vDo),e(T4,iV),e(iV,FDo),e(T4,TDo),e(Z,MDo),e(Z,M4),e(M4,vhe),e(vhe,EDo),e(M4,CDo),e(M4,dV),e(dV,wDo),e(M4,ADo),e(Z,LDo),e(Z,E4),e(E4,Fhe),e(Fhe,yDo),e(E4,xDo),e(E4,cV),e(cV,$Do),e(E4,kDo),e(Z,SDo),e(Z,C4),e(C4,The),e(The,RDo),e(C4,PDo),e(C4,fV),e(fV,BDo),e(C4,IDo),e(Z,NDo),e(Z,w4),e(w4,Mhe),e(Mhe,qDo),e(w4,jDo),e(w4,mV),e(mV,DDo),e(w4,GDo),e(Z,ODo),e(Z,A4),e(A4,Ehe),e(Ehe,VDo),e(A4,XDo),e(A4,gV),e(gV,zDo),e(A4,WDo),e(Z,QDo),e(Z,L4),e(L4,Che),e(Che,HDo),e(L4,UDo),e(L4,hV),e(hV,JDo),e(L4,YDo),e(Z,KDo),e(Z,y4),e(y4,whe),e(whe,ZDo),e(y4,eGo),e(y4,pV),e(pV,oGo),e(y4,rGo),e(Z,tGo),e(Z,x4),e(x4,Ahe),e(Ahe,aGo),e(x4,nGo),e(x4,_V),e(_V,sGo),e(x4,lGo),e(Z,iGo),e(Z,$4),e($4,Lhe),e(Lhe,dGo),e($4,cGo),e($4,uV),e(uV,fGo),e($4,mGo),e(Z,gGo),e(Z,k4),e(k4,yhe),e(yhe,hGo),e(k4,pGo),e(k4,bV),e(bV,_Go),e(k4,uGo),e(ro,bGo),e(ro,S4),e(S4,vGo),e(S4,xhe),e(xhe,FGo),e(S4,TGo),e(S4,$he),e($he,MGo),e(ro,EGo),M(R4,ro,null),b(f,cDe,u),b(f,Hi,u),e(Hi,P4),e(P4,khe),M(ty,khe,null),e(Hi,CGo),e(Hi,She),e(She,wGo),b(f,fDe,u),b(f,Bo,u),M(ay,Bo,null),e(Bo,AGo),e(Bo,Ui),e(Ui,LGo),e(Ui,vV),e(vV,yGo),e(Ui,xGo),e(Ui,FV),e(FV,$Go),e(Ui,kGo),e(Bo,SGo),e(Bo,ny),e(ny,RGo),e(ny,Rhe),e(Rhe,PGo),e(ny,BGo),e(Bo,IGo),e(Bo,ft),M(sy,ft,null),e(ft,NGo),e(ft,Phe),e(Phe,qGo),e(ft,jGo),e(ft,Ji),e(Ji,DGo),e(Ji,Bhe),e(Bhe,GGo),e(Ji,OGo),e(Ji,TV),e(TV,VGo),e(Ji,XGo),e(ft,zGo),M(B4,ft,null),e(Bo,WGo),e(Bo,to),M(ly,to,null),e(to,QGo),e(to,Ihe),e(Ihe,HGo),e(to,UGo),e(to,Ia),e(Ia,JGo),e(Ia,Nhe),e(Nhe,YGo),e(Ia,KGo),e(Ia,qhe),e(qhe,ZGo),e(Ia,eOo),e(Ia,jhe),e(jhe,oOo),e(Ia,rOo),e(to,tOo),e(to,Yr),e(Yr,I4),e(I4,Dhe),e(Dhe,aOo),e(I4,nOo),e(I4,MV),e(MV,sOo),e(I4,lOo),e(Yr,iOo),e(Yr,N4),e(N4,Ghe),e(Ghe,dOo),e(N4,cOo),e(N4,EV),e(EV,fOo),e(N4,mOo),e(Yr,gOo),e(Yr,q4),e(q4,Ohe),e(Ohe,hOo),e(q4,pOo),e(q4,CV),e(CV,_Oo),e(q4,uOo),e(Yr,bOo),e(Yr,j4),e(j4,Vhe),e(Vhe,vOo),e(j4,FOo),e(j4,wV),e(wV,TOo),e(j4,MOo),e(Yr,EOo),e(Yr,D4),e(D4,Xhe),e(Xhe,COo),e(D4,wOo),e(D4,AV),e(AV,AOo),e(D4,LOo),e(to,yOo),e(to,G4),e(G4,xOo),e(G4,zhe),e(zhe,$Oo),e(G4,kOo),e(G4,Whe),e(Whe,SOo),e(to,ROo),M(O4,to,null),b(f,mDe,u),b(f,Yi,u),e(Yi,V4),e(V4,Qhe),M(iy,Qhe,null),e(Yi,POo),e(Yi,Hhe),e(Hhe,BOo),b(f,gDe,u),b(f,Io,u),M(dy,Io,null),e(Io,IOo),e(Io,Ki),e(Ki,NOo),e(Ki,LV),e(LV,qOo),e(Ki,jOo),e(Ki,yV),e(yV,DOo),e(Ki,GOo),e(Io,OOo),e(Io,cy),e(cy,VOo),e(cy,Uhe),e(Uhe,XOo),e(cy,zOo),e(Io,WOo),e(Io,mt),M(fy,mt,null),e(mt,QOo),e(mt,Jhe),e(Jhe,HOo),e(mt,UOo),e(mt,Zi),e(Zi,JOo),e(Zi,Yhe),e(Yhe,YOo),e(Zi,KOo),e(Zi,xV),e(xV,ZOo),e(Zi,eVo),e(mt,oVo),M(X4,mt,null),e(Io,rVo),e(Io,ao),M(my,ao,null),e(ao,tVo),e(ao,Khe),e(Khe,aVo),e(ao,nVo),e(ao,Na),e(Na,sVo),e(Na,Zhe),e(Zhe,lVo),e(Na,iVo),e(Na,epe),e(epe,dVo),e(Na,cVo),e(Na,ope),e(ope,fVo),e(Na,mVo),e(ao,gVo),e(ao,U),e(U,z4),e(z4,rpe),e(rpe,hVo),e(z4,pVo),e(z4,$V),e($V,_Vo),e(z4,uVo),e(U,bVo),e(U,W4),e(W4,tpe),e(tpe,vVo),e(W4,FVo),e(W4,kV),e(kV,TVo),e(W4,MVo),e(U,EVo),e(U,Q4),e(Q4,ape),e(ape,CVo),e(Q4,wVo),e(Q4,SV),e(SV,AVo),e(Q4,LVo),e(U,yVo),e(U,H4),e(H4,npe),e(npe,xVo),e(H4,$Vo),e(H4,RV),e(RV,kVo),e(H4,SVo),e(U,RVo),e(U,U4),e(U4,spe),e(spe,PVo),e(U4,BVo),e(U4,PV),e(PV,IVo),e(U4,NVo),e(U,qVo),e(U,J4),e(J4,lpe),e(lpe,jVo),e(J4,DVo),e(J4,BV),e(BV,GVo),e(J4,OVo),e(U,VVo),e(U,Y4),e(Y4,ipe),e(ipe,XVo),e(Y4,zVo),e(Y4,IV),e(IV,WVo),e(Y4,QVo),e(U,HVo),e(U,K4),e(K4,dpe),e(dpe,UVo),e(K4,JVo),e(K4,NV),e(NV,YVo),e(K4,KVo),e(U,ZVo),e(U,Z4),e(Z4,cpe),e(cpe,eXo),e(Z4,oXo),e(Z4,qV),e(qV,rXo),e(Z4,tXo),e(U,aXo),e(U,ev),e(ev,fpe),e(fpe,nXo),e(ev,sXo),e(ev,jV),e(jV,lXo),e(ev,iXo),e(U,dXo),e(U,ov),e(ov,mpe),e(mpe,cXo),e(ov,fXo),e(ov,DV),e(DV,mXo),e(ov,gXo),e(U,hXo),e(U,rv),e(rv,gpe),e(gpe,pXo),e(rv,_Xo),e(rv,GV),e(GV,uXo),e(rv,bXo),e(U,vXo),e(U,tv),e(tv,hpe),e(hpe,FXo),e(tv,TXo),e(tv,OV),e(OV,MXo),e(tv,EXo),e(U,CXo),e(U,av),e(av,ppe),e(ppe,wXo),e(av,AXo),e(av,VV),e(VV,LXo),e(av,yXo),e(U,xXo),e(U,nv),e(nv,_pe),e(_pe,$Xo),e(nv,kXo),e(nv,XV),e(XV,SXo),e(nv,RXo),e(U,PXo),e(U,sv),e(sv,upe),e(upe,BXo),e(sv,IXo),e(sv,zV),e(zV,NXo),e(sv,qXo),e(U,jXo),e(U,lv),e(lv,bpe),e(bpe,DXo),e(lv,GXo),e(lv,WV),e(WV,OXo),e(lv,VXo),e(U,XXo),e(U,iv),e(iv,vpe),e(vpe,zXo),e(iv,WXo),e(iv,QV),e(QV,QXo),e(iv,HXo),e(U,UXo),e(U,dv),e(dv,Fpe),e(Fpe,JXo),e(dv,YXo),e(dv,HV),e(HV,KXo),e(dv,ZXo),e(U,ezo),e(U,cv),e(cv,Tpe),e(Tpe,ozo),e(cv,rzo),e(cv,UV),e(UV,tzo),e(cv,azo),e(U,nzo),e(U,fv),e(fv,Mpe),e(Mpe,szo),e(fv,lzo),e(fv,JV),e(JV,izo),e(fv,dzo),e(U,czo),e(U,mv),e(mv,Epe),e(Epe,fzo),e(mv,mzo),e(mv,YV),e(YV,gzo),e(mv,hzo),e(U,pzo),e(U,gv),e(gv,Cpe),e(Cpe,_zo),e(gv,uzo),e(gv,KV),e(KV,bzo),e(gv,vzo),e(U,Fzo),e(U,hv),e(hv,wpe),e(wpe,Tzo),e(hv,Mzo),e(hv,ZV),e(ZV,Ezo),e(hv,Czo),e(U,wzo),e(U,pv),e(pv,Ape),e(Ape,Azo),e(pv,Lzo),e(pv,eX),e(eX,yzo),e(pv,xzo),e(U,$zo),e(U,_v),e(_v,Lpe),e(Lpe,kzo),e(_v,Szo),e(_v,oX),e(oX,Rzo),e(_v,Pzo),e(U,Bzo),e(U,uv),e(uv,ype),e(ype,Izo),e(uv,Nzo),e(uv,rX),e(rX,qzo),e(uv,jzo),e(U,Dzo),e(U,bv),e(bv,xpe),e(xpe,Gzo),e(bv,Ozo),e(bv,tX),e(tX,Vzo),e(bv,Xzo),e(U,zzo),e(U,vv),e(vv,$pe),e($pe,Wzo),e(vv,Qzo),e(vv,aX),e(aX,Hzo),e(vv,Uzo),e(U,Jzo),e(U,Fv),e(Fv,kpe),e(kpe,Yzo),e(Fv,Kzo),e(Fv,nX),e(nX,Zzo),e(Fv,eWo),e(U,oWo),e(U,Tv),e(Tv,Spe),e(Spe,rWo),e(Tv,tWo),e(Tv,sX),e(sX,aWo),e(Tv,nWo),e(U,sWo),e(U,Mv),e(Mv,Rpe),e(Rpe,lWo),e(Mv,iWo),e(Mv,lX),e(lX,dWo),e(Mv,cWo),e(U,fWo),e(U,Ev),e(Ev,Ppe),e(Ppe,mWo),e(Ev,gWo),e(Ev,iX),e(iX,hWo),e(Ev,pWo),e(U,_Wo),e(U,Cv),e(Cv,Bpe),e(Bpe,uWo),e(Cv,bWo),e(Cv,dX),e(dX,vWo),e(Cv,FWo),e(ao,TWo),e(ao,wv),e(wv,MWo),e(wv,Ipe),e(Ipe,EWo),e(wv,CWo),e(wv,Npe),e(Npe,wWo),e(ao,AWo),M(Av,ao,null),b(f,hDe,u),b(f,ed,u),e(ed,Lv),e(Lv,qpe),M(gy,qpe,null),e(ed,LWo),e(ed,jpe),e(jpe,yWo),b(f,pDe,u),b(f,No,u),M(hy,No,null),e(No,xWo),e(No,od),e(od,$Wo),e(od,cX),e(cX,kWo),e(od,SWo),e(od,fX),e(fX,RWo),e(od,PWo),e(No,BWo),e(No,py),e(py,IWo),e(py,Dpe),e(Dpe,NWo),e(py,qWo),e(No,jWo),e(No,gt),M(_y,gt,null),e(gt,DWo),e(gt,Gpe),e(Gpe,GWo),e(gt,OWo),e(gt,rd),e(rd,VWo),e(rd,Ope),e(Ope,XWo),e(rd,zWo),e(rd,mX),e(mX,WWo),e(rd,QWo),e(gt,HWo),M(yv,gt,null),e(No,UWo),e(No,no),M(uy,no,null),e(no,JWo),e(no,Vpe),e(Vpe,YWo),e(no,KWo),e(no,qa),e(qa,ZWo),e(qa,Xpe),e(Xpe,eQo),e(qa,oQo),e(qa,zpe),e(zpe,rQo),e(qa,tQo),e(qa,Wpe),e(Wpe,aQo),e(qa,nQo),e(no,sQo),e(no,V),e(V,xv),e(xv,Qpe),e(Qpe,lQo),e(xv,iQo),e(xv,gX),e(gX,dQo),e(xv,cQo),e(V,fQo),e(V,$v),e($v,Hpe),e(Hpe,mQo),e($v,gQo),e($v,hX),e(hX,hQo),e($v,pQo),e(V,_Qo),e(V,kv),e(kv,Upe),e(Upe,uQo),e(kv,bQo),e(kv,pX),e(pX,vQo),e(kv,FQo),e(V,TQo),e(V,Sv),e(Sv,Jpe),e(Jpe,MQo),e(Sv,EQo),e(Sv,_X),e(_X,CQo),e(Sv,wQo),e(V,AQo),e(V,Rv),e(Rv,Ype),e(Ype,LQo),e(Rv,yQo),e(Rv,uX),e(uX,xQo),e(Rv,$Qo),e(V,kQo),e(V,Pv),e(Pv,Kpe),e(Kpe,SQo),e(Pv,RQo),e(Pv,bX),e(bX,PQo),e(Pv,BQo),e(V,IQo),e(V,Bv),e(Bv,Zpe),e(Zpe,NQo),e(Bv,qQo),e(Bv,vX),e(vX,jQo),e(Bv,DQo),e(V,GQo),e(V,Iv),e(Iv,e_e),e(e_e,OQo),e(Iv,VQo),e(Iv,FX),e(FX,XQo),e(Iv,zQo),e(V,WQo),e(V,Nv),e(Nv,o_e),e(o_e,QQo),e(Nv,HQo),e(Nv,TX),e(TX,UQo),e(Nv,JQo),e(V,YQo),e(V,qv),e(qv,r_e),e(r_e,KQo),e(qv,ZQo),e(qv,MX),e(MX,eHo),e(qv,oHo),e(V,rHo),e(V,jv),e(jv,t_e),e(t_e,tHo),e(jv,aHo),e(jv,EX),e(EX,nHo),e(jv,sHo),e(V,lHo),e(V,Dv),e(Dv,a_e),e(a_e,iHo),e(Dv,dHo),e(Dv,CX),e(CX,cHo),e(Dv,fHo),e(V,mHo),e(V,Gv),e(Gv,n_e),e(n_e,gHo),e(Gv,hHo),e(Gv,wX),e(wX,pHo),e(Gv,_Ho),e(V,uHo),e(V,Ov),e(Ov,s_e),e(s_e,bHo),e(Ov,vHo),e(Ov,AX),e(AX,FHo),e(Ov,THo),e(V,MHo),e(V,Vv),e(Vv,l_e),e(l_e,EHo),e(Vv,CHo),e(Vv,LX),e(LX,wHo),e(Vv,AHo),e(V,LHo),e(V,Xv),e(Xv,i_e),e(i_e,yHo),e(Xv,xHo),e(Xv,yX),e(yX,$Ho),e(Xv,kHo),e(V,SHo),e(V,zv),e(zv,d_e),e(d_e,RHo),e(zv,PHo),e(zv,xX),e(xX,BHo),e(zv,IHo),e(V,NHo),e(V,Wv),e(Wv,c_e),e(c_e,qHo),e(Wv,jHo),e(Wv,$X),e($X,DHo),e(Wv,GHo),e(V,OHo),e(V,Qv),e(Qv,f_e),e(f_e,VHo),e(Qv,XHo),e(Qv,kX),e(kX,zHo),e(Qv,WHo),e(V,QHo),e(V,Hv),e(Hv,m_e),e(m_e,HHo),e(Hv,UHo),e(Hv,SX),e(SX,JHo),e(Hv,YHo),e(V,KHo),e(V,Uv),e(Uv,g_e),e(g_e,ZHo),e(Uv,eUo),e(Uv,RX),e(RX,oUo),e(Uv,rUo),e(V,tUo),e(V,Jv),e(Jv,h_e),e(h_e,aUo),e(Jv,nUo),e(Jv,PX),e(PX,sUo),e(Jv,lUo),e(V,iUo),e(V,Yv),e(Yv,p_e),e(p_e,dUo),e(Yv,cUo),e(Yv,BX),e(BX,fUo),e(Yv,mUo),e(V,gUo),e(V,Kv),e(Kv,__e),e(__e,hUo),e(Kv,pUo),e(Kv,IX),e(IX,_Uo),e(Kv,uUo),e(V,bUo),e(V,Zv),e(Zv,u_e),e(u_e,vUo),e(Zv,FUo),e(Zv,NX),e(NX,TUo),e(Zv,MUo),e(V,EUo),e(V,e5),e(e5,b_e),e(b_e,CUo),e(e5,wUo),e(e5,qX),e(qX,AUo),e(e5,LUo),e(V,yUo),e(V,o5),e(o5,v_e),e(v_e,xUo),e(o5,$Uo),e(o5,jX),e(jX,kUo),e(o5,SUo),e(V,RUo),e(V,r5),e(r5,F_e),e(F_e,PUo),e(r5,BUo),e(r5,DX),e(DX,IUo),e(r5,NUo),e(V,qUo),e(V,t5),e(t5,T_e),e(T_e,jUo),e(t5,DUo),e(t5,GX),e(GX,GUo),e(t5,OUo),e(V,VUo),e(V,a5),e(a5,M_e),e(M_e,XUo),e(a5,zUo),e(a5,OX),e(OX,WUo),e(a5,QUo),e(V,HUo),e(V,n5),e(n5,E_e),e(E_e,UUo),e(n5,JUo),e(n5,VX),e(VX,YUo),e(n5,KUo),e(V,ZUo),e(V,s5),e(s5,C_e),e(C_e,eJo),e(s5,oJo),e(s5,XX),e(XX,rJo),e(s5,tJo),e(V,aJo),e(V,l5),e(l5,w_e),e(w_e,nJo),e(l5,sJo),e(l5,zX),e(zX,lJo),e(l5,iJo),e(V,dJo),e(V,i5),e(i5,A_e),e(A_e,cJo),e(i5,fJo),e(i5,WX),e(WX,mJo),e(i5,gJo),e(V,hJo),e(V,d5),e(d5,L_e),e(L_e,pJo),e(d5,_Jo),e(d5,QX),e(QX,uJo),e(d5,bJo),e(V,vJo),e(V,c5),e(c5,y_e),e(y_e,FJo),e(c5,TJo),e(c5,HX),e(HX,MJo),e(c5,EJo),e(V,CJo),e(V,f5),e(f5,x_e),e(x_e,wJo),e(f5,AJo),e(f5,UX),e(UX,LJo),e(f5,yJo),e(V,xJo),e(V,m5),e(m5,$_e),e($_e,$Jo),e(m5,kJo),e(m5,JX),e(JX,SJo),e(m5,RJo),e(V,PJo),e(V,g5),e(g5,k_e),e(k_e,BJo),e(g5,IJo),e(g5,YX),e(YX,NJo),e(g5,qJo),e(V,jJo),e(V,h5),e(h5,S_e),e(S_e,DJo),e(h5,GJo),e(h5,KX),e(KX,OJo),e(h5,VJo),e(no,XJo),e(no,p5),e(p5,zJo),e(p5,R_e),e(R_e,WJo),e(p5,QJo),e(p5,P_e),e(P_e,HJo),e(no,UJo),M(_5,no,null),b(f,_De,u),b(f,td,u),e(td,u5),e(u5,B_e),M(by,B_e,null),e(td,JJo),e(td,I_e),e(I_e,YJo),b(f,uDe,u),b(f,qo,u),M(vy,qo,null),e(qo,KJo),e(qo,ad),e(ad,ZJo),e(ad,ZX),e(ZX,eYo),e(ad,oYo),e(ad,ez),e(ez,rYo),e(ad,tYo),e(qo,aYo),e(qo,Fy),e(Fy,nYo),e(Fy,N_e),e(N_e,sYo),e(Fy,lYo),e(qo,iYo),e(qo,ht),M(Ty,ht,null),e(ht,dYo),e(ht,q_e),e(q_e,cYo),e(ht,fYo),e(ht,nd),e(nd,mYo),e(nd,j_e),e(j_e,gYo),e(nd,hYo),e(nd,oz),e(oz,pYo),e(nd,_Yo),e(ht,uYo),M(b5,ht,null),e(qo,bYo),e(qo,so),M(My,so,null),e(so,vYo),e(so,D_e),e(D_e,FYo),e(so,TYo),e(so,ja),e(ja,MYo),e(ja,G_e),e(G_e,EYo),e(ja,CYo),e(ja,O_e),e(O_e,wYo),e(ja,AYo),e(ja,V_e),e(V_e,LYo),e(ja,yYo),e(so,xYo),e(so,X_e),e(X_e,v5),e(v5,z_e),e(z_e,$Yo),e(v5,kYo),e(v5,rz),e(rz,SYo),e(v5,RYo),e(so,PYo),e(so,F5),e(F5,BYo),e(F5,W_e),e(W_e,IYo),e(F5,NYo),e(F5,Q_e),e(Q_e,qYo),e(so,jYo),M(T5,so,null),b(f,bDe,u),b(f,sd,u),e(sd,M5),e(M5,H_e),M(Ey,H_e,null),e(sd,DYo),e(sd,U_e),e(U_e,GYo),b(f,vDe,u),b(f,jo,u),M(Cy,jo,null),e(jo,OYo),e(jo,ld),e(ld,VYo),e(ld,tz),e(tz,XYo),e(ld,zYo),e(ld,az),e(az,WYo),e(ld,QYo),e(jo,HYo),e(jo,wy),e(wy,UYo),e(wy,J_e),e(J_e,JYo),e(wy,YYo),e(jo,KYo),e(jo,pt),M(Ay,pt,null),e(pt,ZYo),e(pt,Y_e),e(Y_e,eKo),e(pt,oKo),e(pt,id),e(id,rKo),e(id,K_e),e(K_e,tKo),e(id,aKo),e(id,nz),e(nz,nKo),e(id,sKo),e(pt,lKo),M(E5,pt,null),e(jo,iKo),e(jo,lo),M(Ly,lo,null),e(lo,dKo),e(lo,Z_e),e(Z_e,cKo),e(lo,fKo),e(lo,Da),e(Da,mKo),e(Da,eue),e(eue,gKo),e(Da,hKo),e(Da,oue),e(oue,pKo),e(Da,_Ko),e(Da,rue),e(rue,uKo),e(Da,bKo),e(lo,vKo),e(lo,ue),e(ue,C5),e(C5,tue),e(tue,FKo),e(C5,TKo),e(C5,sz),e(sz,MKo),e(C5,EKo),e(ue,CKo),e(ue,w5),e(w5,aue),e(aue,wKo),e(w5,AKo),e(w5,lz),e(lz,LKo),e(w5,yKo),e(ue,xKo),e(ue,A5),e(A5,nue),e(nue,$Ko),e(A5,kKo),e(A5,iz),e(iz,SKo),e(A5,RKo),e(ue,PKo),e(ue,L5),e(L5,sue),e(sue,BKo),e(L5,IKo),e(L5,dz),e(dz,NKo),e(L5,qKo),e(ue,jKo),e(ue,Bs),e(Bs,lue),e(lue,DKo),e(Bs,GKo),e(Bs,cz),e(cz,OKo),e(Bs,VKo),e(Bs,fz),e(fz,XKo),e(Bs,zKo),e(ue,WKo),e(ue,y5),e(y5,iue),e(iue,QKo),e(y5,HKo),e(y5,mz),e(mz,UKo),e(y5,JKo),e(ue,YKo),e(ue,Is),e(Is,due),e(due,KKo),e(Is,ZKo),e(Is,gz),e(gz,eZo),e(Is,oZo),e(Is,hz),e(hz,rZo),e(Is,tZo),e(ue,aZo),e(ue,x5),e(x5,cue),e(cue,nZo),e(x5,sZo),e(x5,pz),e(pz,lZo),e(x5,iZo),e(ue,dZo),e(ue,_t),e(_t,fue),e(fue,cZo),e(_t,fZo),e(_t,_z),e(_z,mZo),e(_t,gZo),e(_t,uz),e(uz,hZo),e(_t,pZo),e(_t,bz),e(bz,_Zo),e(_t,uZo),e(ue,bZo),e(ue,$5),e($5,mue),e(mue,vZo),e($5,FZo),e($5,vz),e(vz,TZo),e($5,MZo),e(ue,EZo),e(ue,k5),e(k5,gue),e(gue,CZo),e(k5,wZo),e(k5,Fz),e(Fz,AZo),e(k5,LZo),e(ue,yZo),e(ue,S5),e(S5,hue),e(hue,xZo),e(S5,$Zo),e(S5,Tz),e(Tz,kZo),e(S5,SZo),e(ue,RZo),e(ue,R5),e(R5,pue),e(pue,PZo),e(R5,BZo),e(R5,Mz),e(Mz,IZo),e(R5,NZo),e(ue,qZo),e(ue,P5),e(P5,_ue),e(_ue,jZo),e(P5,DZo),e(P5,Ez),e(Ez,GZo),e(P5,OZo),e(ue,VZo),e(ue,B5),e(B5,uue),e(uue,XZo),e(B5,zZo),e(B5,Cz),e(Cz,WZo),e(B5,QZo),e(ue,HZo),e(ue,I5),e(I5,bue),e(bue,UZo),e(I5,JZo),e(I5,wz),e(wz,YZo),e(I5,KZo),e(lo,ZZo),e(lo,N5),e(N5,eer),e(N5,vue),e(vue,oer),e(N5,rer),e(N5,Fue),e(Fue,ter),e(lo,aer),M(q5,lo,null),b(f,FDe,u),b(f,dd,u),e(dd,j5),e(j5,Tue),M(yy,Tue,null),e(dd,ner),e(dd,Mue),e(Mue,ser),b(f,TDe,u),b(f,Do,u),M(xy,Do,null),e(Do,ler),e(Do,cd),e(cd,ier),e(cd,Az),e(Az,der),e(cd,cer),e(cd,Lz),e(Lz,fer),e(cd,mer),e(Do,ger),e(Do,$y),e($y,her),e($y,Eue),e(Eue,per),e($y,_er),e(Do,uer),e(Do,ut),M(ky,ut,null),e(ut,ber),e(ut,Cue),e(Cue,ver),e(ut,Fer),e(ut,fd),e(fd,Ter),e(fd,wue),e(wue,Mer),e(fd,Eer),e(fd,yz),e(yz,Cer),e(fd,wer),e(ut,Aer),M(D5,ut,null),e(Do,Ler),e(Do,io),M(Sy,io,null),e(io,yer),e(io,Aue),e(Aue,xer),e(io,$er),e(io,Ga),e(Ga,ker),e(Ga,Lue),e(Lue,Ser),e(Ga,Rer),e(Ga,yue),e(yue,Per),e(Ga,Ber),e(Ga,xue),e(xue,Ier),e(Ga,Ner),e(io,qer),e(io,$ue),e($ue,G5),e(G5,kue),e(kue,jer),e(G5,Der),e(G5,xz),e(xz,Ger),e(G5,Oer),e(io,Ver),e(io,O5),e(O5,Xer),e(O5,Sue),e(Sue,zer),e(O5,Wer),e(O5,Rue),e(Rue,Qer),e(io,Her),M(V5,io,null),b(f,MDe,u),b(f,md,u),e(md,X5),e(X5,Pue),M(Ry,Pue,null),e(md,Uer),e(md,Bue),e(Bue,Jer),b(f,EDe,u),b(f,Go,u),M(Py,Go,null),e(Go,Yer),e(Go,gd),e(gd,Ker),e(gd,$z),e($z,Zer),e(gd,eor),e(gd,kz),e(kz,oor),e(gd,ror),e(Go,tor),e(Go,By),e(By,aor),e(By,Iue),e(Iue,nor),e(By,sor),e(Go,lor),e(Go,bt),M(Iy,bt,null),e(bt,ior),e(bt,Nue),e(Nue,dor),e(bt,cor),e(bt,hd),e(hd,mor),e(hd,que),e(que,gor),e(hd,hor),e(hd,Sz),e(Sz,por),e(hd,_or),e(bt,uor),M(z5,bt,null),e(Go,bor),e(Go,co),M(Ny,co,null),e(co,vor),e(co,jue),e(jue,For),e(co,Tor),e(co,Oa),e(Oa,Mor),e(Oa,Due),e(Due,Eor),e(Oa,Cor),e(Oa,Gue),e(Gue,wor),e(Oa,Aor),e(Oa,Oue),e(Oue,Lor),e(Oa,yor),e(co,xor),e(co,Re),e(Re,W5),e(W5,Vue),e(Vue,$or),e(W5,kor),e(W5,Rz),e(Rz,Sor),e(W5,Ror),e(Re,Por),e(Re,Q5),e(Q5,Xue),e(Xue,Bor),e(Q5,Ior),e(Q5,Pz),e(Pz,Nor),e(Q5,qor),e(Re,jor),e(Re,H5),e(H5,zue),e(zue,Dor),e(H5,Gor),e(H5,Bz),e(Bz,Oor),e(H5,Vor),e(Re,Xor),e(Re,U5),e(U5,Wue),e(Wue,zor),e(U5,Wor),e(U5,Iz),e(Iz,Qor),e(U5,Hor),e(Re,Uor),e(Re,J5),e(J5,Que),e(Que,Jor),e(J5,Yor),e(J5,Nz),e(Nz,Kor),e(J5,Zor),e(Re,err),e(Re,Y5),e(Y5,Hue),e(Hue,orr),e(Y5,rrr),e(Y5,qz),e(qz,trr),e(Y5,arr),e(Re,nrr),e(Re,K5),e(K5,Uue),e(Uue,srr),e(K5,lrr),e(K5,jz),e(jz,irr),e(K5,drr),e(Re,crr),e(Re,Z5),e(Z5,Jue),e(Jue,frr),e(Z5,mrr),e(Z5,Dz),e(Dz,grr),e(Z5,hrr),e(Re,prr),e(Re,e3),e(e3,Yue),e(Yue,_rr),e(e3,urr),e(e3,Gz),e(Gz,brr),e(e3,vrr),e(co,Frr),e(co,o3),e(o3,Trr),e(o3,Kue),e(Kue,Mrr),e(o3,Err),e(o3,Zue),e(Zue,Crr),e(co,wrr),M(r3,co,null),b(f,CDe,u),b(f,pd,u),e(pd,t3),e(t3,e1e),M(qy,e1e,null),e(pd,Arr),e(pd,o1e),e(o1e,Lrr),b(f,wDe,u),b(f,Oo,u),M(jy,Oo,null),e(Oo,yrr),e(Oo,_d),e(_d,xrr),e(_d,Oz),e(Oz,$rr),e(_d,krr),e(_d,Vz),e(Vz,Srr),e(_d,Rrr),e(Oo,Prr),e(Oo,Dy),e(Dy,Brr),e(Dy,r1e),e(r1e,Irr),e(Dy,Nrr),e(Oo,qrr),e(Oo,vt),M(Gy,vt,null),e(vt,jrr),e(vt,t1e),e(t1e,Drr),e(vt,Grr),e(vt,ud),e(ud,Orr),e(ud,a1e),e(a1e,Vrr),e(ud,Xrr),e(ud,Xz),e(Xz,zrr),e(ud,Wrr),e(vt,Qrr),M(a3,vt,null),e(Oo,Hrr),e(Oo,fo),M(Oy,fo,null),e(fo,Urr),e(fo,n1e),e(n1e,Jrr),e(fo,Yrr),e(fo,Va),e(Va,Krr),e(Va,s1e),e(s1e,Zrr),e(Va,etr),e(Va,l1e),e(l1e,otr),e(Va,rtr),e(Va,i1e),e(i1e,ttr),e(Va,atr),e(fo,ntr),e(fo,Kr),e(Kr,n3),e(n3,d1e),e(d1e,str),e(n3,ltr),e(n3,zz),e(zz,itr),e(n3,dtr),e(Kr,ctr),e(Kr,s3),e(s3,c1e),e(c1e,ftr),e(s3,mtr),e(s3,Wz),e(Wz,gtr),e(s3,htr),e(Kr,ptr),e(Kr,l3),e(l3,f1e),e(f1e,_tr),e(l3,utr),e(l3,Qz),e(Qz,btr),e(l3,vtr),e(Kr,Ftr),e(Kr,i3),e(i3,m1e),e(m1e,Ttr),e(i3,Mtr),e(i3,Hz),e(Hz,Etr),e(i3,Ctr),e(Kr,wtr),e(Kr,d3),e(d3,g1e),e(g1e,Atr),e(d3,Ltr),e(d3,Uz),e(Uz,ytr),e(d3,xtr),e(fo,$tr),e(fo,c3),e(c3,ktr),e(c3,h1e),e(h1e,Str),e(c3,Rtr),e(c3,p1e),e(p1e,Ptr),e(fo,Btr),M(f3,fo,null),b(f,ADe,u),b(f,bd,u),e(bd,m3),e(m3,_1e),M(Vy,_1e,null),e(bd,Itr),e(bd,u1e),e(u1e,Ntr),b(f,LDe,u),b(f,Vo,u),M(Xy,Vo,null),e(Vo,qtr),e(Vo,vd),e(vd,jtr),e(vd,Jz),e(Jz,Dtr),e(vd,Gtr),e(vd,Yz),e(Yz,Otr),e(vd,Vtr),e(Vo,Xtr),e(Vo,zy),e(zy,ztr),e(zy,b1e),e(b1e,Wtr),e(zy,Qtr),e(Vo,Htr),e(Vo,Ft),M(Wy,Ft,null),e(Ft,Utr),e(Ft,v1e),e(v1e,Jtr),e(Ft,Ytr),e(Ft,Fd),e(Fd,Ktr),e(Fd,F1e),e(F1e,Ztr),e(Fd,ear),e(Fd,Kz),e(Kz,oar),e(Fd,rar),e(Ft,tar),M(g3,Ft,null),e(Vo,aar),e(Vo,mo),M(Qy,mo,null),e(mo,nar),e(mo,T1e),e(T1e,sar),e(mo,lar),e(mo,Xa),e(Xa,iar),e(Xa,M1e),e(M1e,dar),e(Xa,car),e(Xa,E1e),e(E1e,far),e(Xa,mar),e(Xa,C1e),e(C1e,gar),e(Xa,har),e(mo,par),e(mo,Le),e(Le,h3),e(h3,w1e),e(w1e,_ar),e(h3,uar),e(h3,Zz),e(Zz,bar),e(h3,Far),e(Le,Tar),e(Le,p3),e(p3,A1e),e(A1e,Mar),e(p3,Ear),e(p3,eW),e(eW,Car),e(p3,war),e(Le,Aar),e(Le,_3),e(_3,L1e),e(L1e,Lar),e(_3,yar),e(_3,oW),e(oW,xar),e(_3,$ar),e(Le,kar),e(Le,u3),e(u3,y1e),e(y1e,Sar),e(u3,Rar),e(u3,rW),e(rW,Par),e(u3,Bar),e(Le,Iar),e(Le,b3),e(b3,x1e),e(x1e,Nar),e(b3,qar),e(b3,tW),e(tW,jar),e(b3,Dar),e(Le,Gar),e(Le,v3),e(v3,$1e),e($1e,Oar),e(v3,Var),e(v3,aW),e(aW,Xar),e(v3,zar),e(Le,War),e(Le,F3),e(F3,k1e),e(k1e,Qar),e(F3,Har),e(F3,nW),e(nW,Uar),e(F3,Jar),e(Le,Yar),e(Le,T3),e(T3,S1e),e(S1e,Kar),e(T3,Zar),e(T3,sW),e(sW,enr),e(T3,onr),e(Le,rnr),e(Le,M3),e(M3,R1e),e(R1e,tnr),e(M3,anr),e(M3,lW),e(lW,nnr),e(M3,snr),e(Le,lnr),e(Le,E3),e(E3,P1e),e(P1e,inr),e(E3,dnr),e(E3,iW),e(iW,cnr),e(E3,fnr),e(mo,mnr),e(mo,C3),e(C3,gnr),e(C3,B1e),e(B1e,hnr),e(C3,pnr),e(C3,I1e),e(I1e,_nr),e(mo,unr),M(w3,mo,null),b(f,yDe,u),b(f,Td,u),e(Td,A3),e(A3,N1e),M(Hy,N1e,null),e(Td,bnr),e(Td,q1e),e(q1e,vnr),b(f,xDe,u),b(f,Xo,u),M(Uy,Xo,null),e(Xo,Fnr),e(Xo,Md),e(Md,Tnr),e(Md,dW),e(dW,Mnr),e(Md,Enr),e(Md,cW),e(cW,Cnr),e(Md,wnr),e(Xo,Anr),e(Xo,Jy),e(Jy,Lnr),e(Jy,j1e),e(j1e,ynr),e(Jy,xnr),e(Xo,$nr),e(Xo,Tt),M(Yy,Tt,null),e(Tt,knr),e(Tt,D1e),e(D1e,Snr),e(Tt,Rnr),e(Tt,Ed),e(Ed,Pnr),e(Ed,G1e),e(G1e,Bnr),e(Ed,Inr),e(Ed,fW),e(fW,Nnr),e(Ed,qnr),e(Tt,jnr),M(L3,Tt,null),e(Xo,Dnr),e(Xo,go),M(Ky,go,null),e(go,Gnr),e(go,O1e),e(O1e,Onr),e(go,Vnr),e(go,za),e(za,Xnr),e(za,V1e),e(V1e,znr),e(za,Wnr),e(za,X1e),e(X1e,Qnr),e(za,Hnr),e(za,z1e),e(z1e,Unr),e(za,Jnr),e(go,Ynr),e(go,Zy),e(Zy,y3),e(y3,W1e),e(W1e,Knr),e(y3,Znr),e(y3,mW),e(mW,esr),e(y3,osr),e(Zy,rsr),e(Zy,x3),e(x3,Q1e),e(Q1e,tsr),e(x3,asr),e(x3,gW),e(gW,nsr),e(x3,ssr),e(go,lsr),e(go,$3),e($3,isr),e($3,H1e),e(H1e,dsr),e($3,csr),e($3,U1e),e(U1e,fsr),e(go,msr),M(k3,go,null),b(f,$De,u),b(f,Cd,u),e(Cd,S3),e(S3,J1e),M(e8,J1e,null),e(Cd,gsr),e(Cd,Y1e),e(Y1e,hsr),b(f,kDe,u),b(f,zo,u),M(o8,zo,null),e(zo,psr),e(zo,wd),e(wd,_sr),e(wd,hW),e(hW,usr),e(wd,bsr),e(wd,pW),e(pW,vsr),e(wd,Fsr),e(zo,Tsr),e(zo,r8),e(r8,Msr),e(r8,K1e),e(K1e,Esr),e(r8,Csr),e(zo,wsr),e(zo,Mt),M(t8,Mt,null),e(Mt,Asr),e(Mt,Z1e),e(Z1e,Lsr),e(Mt,ysr),e(Mt,Ad),e(Ad,xsr),e(Ad,ebe),e(ebe,$sr),e(Ad,ksr),e(Ad,_W),e(_W,Ssr),e(Ad,Rsr),e(Mt,Psr),M(R3,Mt,null),e(zo,Bsr),e(zo,ho),M(a8,ho,null),e(ho,Isr),e(ho,obe),e(obe,Nsr),e(ho,qsr),e(ho,Wa),e(Wa,jsr),e(Wa,rbe),e(rbe,Dsr),e(Wa,Gsr),e(Wa,tbe),e(tbe,Osr),e(Wa,Vsr),e(Wa,abe),e(abe,Xsr),e(Wa,zsr),e(ho,Wsr),e(ho,Zr),e(Zr,P3),e(P3,nbe),e(nbe,Qsr),e(P3,Hsr),e(P3,uW),e(uW,Usr),e(P3,Jsr),e(Zr,Ysr),e(Zr,B3),e(B3,sbe),e(sbe,Ksr),e(B3,Zsr),e(B3,bW),e(bW,elr),e(B3,olr),e(Zr,rlr),e(Zr,I3),e(I3,lbe),e(lbe,tlr),e(I3,alr),e(I3,vW),e(vW,nlr),e(I3,slr),e(Zr,llr),e(Zr,N3),e(N3,ibe),e(ibe,ilr),e(N3,dlr),e(N3,FW),e(FW,clr),e(N3,flr),e(Zr,mlr),e(Zr,q3),e(q3,dbe),e(dbe,glr),e(q3,hlr),e(q3,TW),e(TW,plr),e(q3,_lr),e(ho,ulr),e(ho,j3),e(j3,blr),e(j3,cbe),e(cbe,vlr),e(j3,Flr),e(j3,fbe),e(fbe,Tlr),e(ho,Mlr),M(D3,ho,null),b(f,SDe,u),b(f,Ld,u),e(Ld,G3),e(G3,mbe),M(n8,mbe,null),e(Ld,Elr),e(Ld,gbe),e(gbe,Clr),b(f,RDe,u),b(f,Wo,u),M(s8,Wo,null),e(Wo,wlr),e(Wo,yd),e(yd,Alr),e(yd,MW),e(MW,Llr),e(yd,ylr),e(yd,EW),e(EW,xlr),e(yd,$lr),e(Wo,klr),e(Wo,l8),e(l8,Slr),e(l8,hbe),e(hbe,Rlr),e(l8,Plr),e(Wo,Blr),e(Wo,Et),M(i8,Et,null),e(Et,Ilr),e(Et,pbe),e(pbe,Nlr),e(Et,qlr),e(Et,xd),e(xd,jlr),e(xd,_be),e(_be,Dlr),e(xd,Glr),e(xd,CW),e(CW,Olr),e(xd,Vlr),e(Et,Xlr),M(O3,Et,null),e(Wo,zlr),e(Wo,po),M(d8,po,null),e(po,Wlr),e(po,ube),e(ube,Qlr),e(po,Hlr),e(po,Qa),e(Qa,Ulr),e(Qa,bbe),e(bbe,Jlr),e(Qa,Ylr),e(Qa,vbe),e(vbe,Klr),e(Qa,Zlr),e(Qa,Fbe),e(Fbe,eir),e(Qa,oir),e(po,rir),e(po,$d),e($d,V3),e(V3,Tbe),e(Tbe,tir),e(V3,air),e(V3,wW),e(wW,nir),e(V3,sir),e($d,lir),e($d,X3),e(X3,Mbe),e(Mbe,iir),e(X3,dir),e(X3,AW),e(AW,cir),e(X3,fir),e($d,mir),e($d,z3),e(z3,Ebe),e(Ebe,gir),e(z3,hir),e(z3,LW),e(LW,pir),e(z3,_ir),e(po,uir),e(po,W3),e(W3,bir),e(W3,Cbe),e(Cbe,vir),e(W3,Fir),e(W3,wbe),e(wbe,Tir),e(po,Mir),M(Q3,po,null),b(f,PDe,u),b(f,kd,u),e(kd,H3),e(H3,Abe),M(c8,Abe,null),e(kd,Eir),e(kd,Lbe),e(Lbe,Cir),b(f,BDe,u),b(f,Qo,u),M(f8,Qo,null),e(Qo,wir),e(Qo,Sd),e(Sd,Air),e(Sd,yW),e(yW,Lir),e(Sd,yir),e(Sd,xW),e(xW,xir),e(Sd,$ir),e(Qo,kir),e(Qo,m8),e(m8,Sir),e(m8,ybe),e(ybe,Rir),e(m8,Pir),e(Qo,Bir),e(Qo,Ct),M(g8,Ct,null),e(Ct,Iir),e(Ct,xbe),e(xbe,Nir),e(Ct,qir),e(Ct,Rd),e(Rd,jir),e(Rd,$be),e($be,Dir),e(Rd,Gir),e(Rd,$W),e($W,Oir),e(Rd,Vir),e(Ct,Xir),M(U3,Ct,null),e(Qo,zir),e(Qo,_o),M(h8,_o,null),e(_o,Wir),e(_o,kbe),e(kbe,Qir),e(_o,Hir),e(_o,Ha),e(Ha,Uir),e(Ha,Sbe),e(Sbe,Jir),e(Ha,Yir),e(Ha,Rbe),e(Rbe,Kir),e(Ha,Zir),e(Ha,Pbe),e(Pbe,edr),e(Ha,odr),e(_o,rdr),e(_o,p8),e(p8,J3),e(J3,Bbe),e(Bbe,tdr),e(J3,adr),e(J3,kW),e(kW,ndr),e(J3,sdr),e(p8,ldr),e(p8,Y3),e(Y3,Ibe),e(Ibe,idr),e(Y3,ddr),e(Y3,SW),e(SW,cdr),e(Y3,fdr),e(_o,mdr),e(_o,K3),e(K3,gdr),e(K3,Nbe),e(Nbe,hdr),e(K3,pdr),e(K3,qbe),e(qbe,_dr),e(_o,udr),M(Z3,_o,null),b(f,IDe,u),b(f,Pd,u),e(Pd,eF),e(eF,jbe),M(_8,jbe,null),e(Pd,bdr),e(Pd,Dbe),e(Dbe,vdr),b(f,NDe,u),b(f,Ho,u),M(u8,Ho,null),e(Ho,Fdr),e(Ho,Bd),e(Bd,Tdr),e(Bd,RW),e(RW,Mdr),e(Bd,Edr),e(Bd,PW),e(PW,Cdr),e(Bd,wdr),e(Ho,Adr),e(Ho,b8),e(b8,Ldr),e(b8,Gbe),e(Gbe,ydr),e(b8,xdr),e(Ho,$dr),e(Ho,wt),M(v8,wt,null),e(wt,kdr),e(wt,Obe),e(Obe,Sdr),e(wt,Rdr),e(wt,Id),e(Id,Pdr),e(Id,Vbe),e(Vbe,Bdr),e(Id,Idr),e(Id,BW),e(BW,Ndr),e(Id,qdr),e(wt,jdr),M(oF,wt,null),e(Ho,Ddr),e(Ho,uo),M(F8,uo,null),e(uo,Gdr),e(uo,Xbe),e(Xbe,Odr),e(uo,Vdr),e(uo,Ua),e(Ua,Xdr),e(Ua,zbe),e(zbe,zdr),e(Ua,Wdr),e(Ua,Wbe),e(Wbe,Qdr),e(Ua,Hdr),e(Ua,Qbe),e(Qbe,Udr),e(Ua,Jdr),e(uo,Ydr),e(uo,Hbe),e(Hbe,rF),e(rF,Ube),e(Ube,Kdr),e(rF,Zdr),e(rF,IW),e(IW,ecr),e(rF,ocr),e(uo,rcr),e(uo,tF),e(tF,tcr),e(tF,Jbe),e(Jbe,acr),e(tF,ncr),e(tF,Ybe),e(Ybe,scr),e(uo,lcr),M(aF,uo,null),b(f,qDe,u),b(f,Nd,u),e(Nd,nF),e(nF,Kbe),M(T8,Kbe,null),e(Nd,icr),e(Nd,Zbe),e(Zbe,dcr),b(f,jDe,u),b(f,Uo,u),M(M8,Uo,null),e(Uo,ccr),e(Uo,qd),e(qd,fcr),e(qd,NW),e(NW,mcr),e(qd,gcr),e(qd,qW),e(qW,hcr),e(qd,pcr),e(Uo,_cr),e(Uo,E8),e(E8,ucr),e(E8,e2e),e(e2e,bcr),e(E8,vcr),e(Uo,Fcr),e(Uo,At),M(C8,At,null),e(At,Tcr),e(At,o2e),e(o2e,Mcr),e(At,Ecr),e(At,jd),e(jd,Ccr),e(jd,r2e),e(r2e,wcr),e(jd,Acr),e(jd,jW),e(jW,Lcr),e(jd,ycr),e(At,xcr),M(sF,At,null),e(Uo,$cr),e(Uo,bo),M(w8,bo,null),e(bo,kcr),e(bo,t2e),e(t2e,Scr),e(bo,Rcr),e(bo,Ja),e(Ja,Pcr),e(Ja,a2e),e(a2e,Bcr),e(Ja,Icr),e(Ja,n2e),e(n2e,Ncr),e(Ja,qcr),e(Ja,s2e),e(s2e,jcr),e(Ja,Dcr),e(bo,Gcr),e(bo,et),e(et,lF),e(lF,l2e),e(l2e,Ocr),e(lF,Vcr),e(lF,DW),e(DW,Xcr),e(lF,zcr),e(et,Wcr),e(et,iF),e(iF,i2e),e(i2e,Qcr),e(iF,Hcr),e(iF,GW),e(GW,Ucr),e(iF,Jcr),e(et,Ycr),e(et,dF),e(dF,d2e),e(d2e,Kcr),e(dF,Zcr),e(dF,OW),e(OW,efr),e(dF,ofr),e(et,rfr),e(et,cF),e(cF,c2e),e(c2e,tfr),e(cF,afr),e(cF,VW),e(VW,nfr),e(cF,sfr),e(et,lfr),e(et,fF),e(fF,f2e),e(f2e,ifr),e(fF,dfr),e(fF,XW),e(XW,cfr),e(fF,ffr),e(bo,mfr),e(bo,mF),e(mF,gfr),e(mF,m2e),e(m2e,hfr),e(mF,pfr),e(mF,g2e),e(g2e,_fr),e(bo,ufr),M(gF,bo,null),b(f,DDe,u),b(f,Dd,u),e(Dd,hF),e(hF,h2e),M(A8,h2e,null),e(Dd,bfr),e(Dd,p2e),e(p2e,vfr),b(f,GDe,u),b(f,Jo,u),M(L8,Jo,null),e(Jo,Ffr),e(Jo,Gd),e(Gd,Tfr),e(Gd,zW),e(zW,Mfr),e(Gd,Efr),e(Gd,WW),e(WW,Cfr),e(Gd,wfr),e(Jo,Afr),e(Jo,y8),e(y8,Lfr),e(y8,_2e),e(_2e,yfr),e(y8,xfr),e(Jo,$fr),e(Jo,Lt),M(x8,Lt,null),e(Lt,kfr),e(Lt,u2e),e(u2e,Sfr),e(Lt,Rfr),e(Lt,Od),e(Od,Pfr),e(Od,b2e),e(b2e,Bfr),e(Od,Ifr),e(Od,QW),e(QW,Nfr),e(Od,qfr),e(Lt,jfr),M(pF,Lt,null),e(Jo,Dfr),e(Jo,vo),M($8,vo,null),e(vo,Gfr),e(vo,v2e),e(v2e,Ofr),e(vo,Vfr),e(vo,Ya),e(Ya,Xfr),e(Ya,F2e),e(F2e,zfr),e(Ya,Wfr),e(Ya,T2e),e(T2e,Qfr),e(Ya,Hfr),e(Ya,M2e),e(M2e,Ufr),e(Ya,Jfr),e(vo,Yfr),e(vo,E2e),e(E2e,_F),e(_F,C2e),e(C2e,Kfr),e(_F,Zfr),e(_F,HW),e(HW,emr),e(_F,omr),e(vo,rmr),e(vo,uF),e(uF,tmr),e(uF,w2e),e(w2e,amr),e(uF,nmr),e(uF,A2e),e(A2e,smr),e(vo,lmr),M(bF,vo,null),b(f,ODe,u),b(f,Vd,u),e(Vd,vF),e(vF,L2e),M(k8,L2e,null),e(Vd,imr),e(Vd,y2e),e(y2e,dmr),b(f,VDe,u),b(f,Yo,u),M(S8,Yo,null),e(Yo,cmr),e(Yo,Xd),e(Xd,fmr),e(Xd,UW),e(UW,mmr),e(Xd,gmr),e(Xd,JW),e(JW,hmr),e(Xd,pmr),e(Yo,_mr),e(Yo,R8),e(R8,umr),e(R8,x2e),e(x2e,bmr),e(R8,vmr),e(Yo,Fmr),e(Yo,yt),M(P8,yt,null),e(yt,Tmr),e(yt,$2e),e($2e,Mmr),e(yt,Emr),e(yt,zd),e(zd,Cmr),e(zd,k2e),e(k2e,wmr),e(zd,Amr),e(zd,YW),e(YW,Lmr),e(zd,ymr),e(yt,xmr),M(FF,yt,null),e(Yo,$mr),e(Yo,wr),M(B8,wr,null),e(wr,kmr),e(wr,S2e),e(S2e,Smr),e(wr,Rmr),e(wr,Ka),e(Ka,Pmr),e(Ka,R2e),e(R2e,Bmr),e(Ka,Imr),e(Ka,P2e),e(P2e,Nmr),e(Ka,qmr),e(Ka,B2e),e(B2e,jmr),e(Ka,Dmr),e(wr,Gmr),e(wr,q),e(q,TF),e(TF,I2e),e(I2e,Omr),e(TF,Vmr),e(TF,KW),e(KW,Xmr),e(TF,zmr),e(q,Wmr),e(q,MF),e(MF,N2e),e(N2e,Qmr),e(MF,Hmr),e(MF,ZW),e(ZW,Umr),e(MF,Jmr),e(q,Ymr),e(q,EF),e(EF,q2e),e(q2e,Kmr),e(EF,Zmr),e(EF,eQ),e(eQ,egr),e(EF,ogr),e(q,rgr),e(q,CF),e(CF,j2e),e(j2e,tgr),e(CF,agr),e(CF,oQ),e(oQ,ngr),e(CF,sgr),e(q,lgr),e(q,wF),e(wF,D2e),e(D2e,igr),e(wF,dgr),e(wF,rQ),e(rQ,cgr),e(wF,fgr),e(q,mgr),e(q,AF),e(AF,G2e),e(G2e,ggr),e(AF,hgr),e(AF,tQ),e(tQ,pgr),e(AF,_gr),e(q,ugr),e(q,LF),e(LF,O2e),e(O2e,bgr),e(LF,vgr),e(LF,aQ),e(aQ,Fgr),e(LF,Tgr),e(q,Mgr),e(q,yF),e(yF,V2e),e(V2e,Egr),e(yF,Cgr),e(yF,nQ),e(nQ,wgr),e(yF,Agr),e(q,Lgr),e(q,xF),e(xF,X2e),e(X2e,ygr),e(xF,xgr),e(xF,sQ),e(sQ,$gr),e(xF,kgr),e(q,Sgr),e(q,$F),e($F,z2e),e(z2e,Rgr),e($F,Pgr),e($F,lQ),e(lQ,Bgr),e($F,Igr),e(q,Ngr),e(q,kF),e(kF,W2e),e(W2e,qgr),e(kF,jgr),e(kF,iQ),e(iQ,Dgr),e(kF,Ggr),e(q,Ogr),e(q,SF),e(SF,Q2e),e(Q2e,Vgr),e(SF,Xgr),e(SF,dQ),e(dQ,zgr),e(SF,Wgr),e(q,Qgr),e(q,RF),e(RF,H2e),e(H2e,Hgr),e(RF,Ugr),e(RF,cQ),e(cQ,Jgr),e(RF,Ygr),e(q,Kgr),e(q,PF),e(PF,U2e),e(U2e,Zgr),e(PF,ehr),e(PF,fQ),e(fQ,ohr),e(PF,rhr),e(q,thr),e(q,BF),e(BF,J2e),e(J2e,ahr),e(BF,nhr),e(BF,mQ),e(mQ,shr),e(BF,lhr),e(q,ihr),e(q,IF),e(IF,Y2e),e(Y2e,dhr),e(IF,chr),e(IF,gQ),e(gQ,fhr),e(IF,mhr),e(q,ghr),e(q,NF),e(NF,K2e),e(K2e,hhr),e(NF,phr),e(NF,hQ),e(hQ,_hr),e(NF,uhr),e(q,bhr),e(q,Ns),e(Ns,Z2e),e(Z2e,vhr),e(Ns,Fhr),e(Ns,pQ),e(pQ,Thr),e(Ns,Mhr),e(Ns,_Q),e(_Q,Ehr),e(Ns,Chr),e(q,whr),e(q,qF),e(qF,e4e),e(e4e,Ahr),e(qF,Lhr),e(qF,uQ),e(uQ,yhr),e(qF,xhr),e(q,$hr),e(q,jF),e(jF,o4e),e(o4e,khr),e(jF,Shr),e(jF,bQ),e(bQ,Rhr),e(jF,Phr),e(q,Bhr),e(q,DF),e(DF,r4e),e(r4e,Ihr),e(DF,Nhr),e(DF,vQ),e(vQ,qhr),e(DF,jhr),e(q,Dhr),e(q,GF),e(GF,t4e),e(t4e,Ghr),e(GF,Ohr),e(GF,FQ),e(FQ,Vhr),e(GF,Xhr),e(q,zhr),e(q,OF),e(OF,a4e),e(a4e,Whr),e(OF,Qhr),e(OF,TQ),e(TQ,Hhr),e(OF,Uhr),e(q,Jhr),e(q,VF),e(VF,n4e),e(n4e,Yhr),e(VF,Khr),e(VF,MQ),e(MQ,Zhr),e(VF,epr),e(q,opr),e(q,XF),e(XF,s4e),e(s4e,rpr),e(XF,tpr),e(XF,EQ),e(EQ,apr),e(XF,npr),e(q,spr),e(q,zF),e(zF,l4e),e(l4e,lpr),e(zF,ipr),e(zF,CQ),e(CQ,dpr),e(zF,cpr),e(q,fpr),e(q,WF),e(WF,i4e),e(i4e,mpr),e(WF,gpr),e(WF,wQ),e(wQ,hpr),e(WF,ppr),e(q,_pr),e(q,QF),e(QF,d4e),e(d4e,upr),e(QF,bpr),e(QF,AQ),e(AQ,vpr),e(QF,Fpr),e(q,Tpr),e(q,HF),e(HF,c4e),e(c4e,Mpr),e(HF,Epr),e(HF,LQ),e(LQ,Cpr),e(HF,wpr),e(q,Apr),e(q,UF),e(UF,f4e),e(f4e,Lpr),e(UF,ypr),e(UF,yQ),e(yQ,xpr),e(UF,$pr),e(q,kpr),e(q,JF),e(JF,m4e),e(m4e,Spr),e(JF,Rpr),e(JF,xQ),e(xQ,Ppr),e(JF,Bpr),e(q,Ipr),e(q,YF),e(YF,g4e),e(g4e,Npr),e(YF,qpr),e(YF,$Q),e($Q,jpr),e(YF,Dpr),e(q,Gpr),e(q,KF),e(KF,h4e),e(h4e,Opr),e(KF,Vpr),e(KF,kQ),e(kQ,Xpr),e(KF,zpr),e(q,Wpr),e(q,ZF),e(ZF,p4e),e(p4e,Qpr),e(ZF,Hpr),e(ZF,SQ),e(SQ,Upr),e(ZF,Jpr),e(q,Ypr),e(q,eT),e(eT,_4e),e(_4e,Kpr),e(eT,Zpr),e(eT,RQ),e(RQ,e_r),e(eT,o_r),e(q,r_r),e(q,oT),e(oT,u4e),e(u4e,t_r),e(oT,a_r),e(oT,PQ),e(PQ,n_r),e(oT,s_r),e(q,l_r),e(q,rT),e(rT,b4e),e(b4e,i_r),e(rT,d_r),e(rT,BQ),e(BQ,c_r),e(rT,f_r),e(q,m_r),e(q,tT),e(tT,v4e),e(v4e,g_r),e(tT,h_r),e(tT,IQ),e(IQ,p_r),e(tT,__r),e(q,u_r),e(q,aT),e(aT,F4e),e(F4e,b_r),e(aT,v_r),e(aT,NQ),e(NQ,F_r),e(aT,T_r),e(q,M_r),e(q,nT),e(nT,T4e),e(T4e,E_r),e(nT,C_r),e(nT,qQ),e(qQ,w_r),e(nT,A_r),e(q,L_r),e(q,sT),e(sT,M4e),e(M4e,y_r),e(sT,x_r),e(sT,jQ),e(jQ,$_r),e(sT,k_r),e(q,S_r),e(q,lT),e(lT,E4e),e(E4e,R_r),e(lT,P_r),e(lT,DQ),e(DQ,B_r),e(lT,I_r),e(q,N_r),e(q,iT),e(iT,C4e),e(C4e,q_r),e(iT,j_r),e(iT,GQ),e(GQ,D_r),e(iT,G_r),e(q,O_r),e(q,dT),e(dT,w4e),e(w4e,V_r),e(dT,X_r),e(dT,OQ),e(OQ,z_r),e(dT,W_r),e(q,Q_r),e(q,cT),e(cT,A4e),e(A4e,H_r),e(cT,U_r),e(cT,VQ),e(VQ,J_r),e(cT,Y_r),e(q,K_r),e(q,fT),e(fT,L4e),e(L4e,Z_r),e(fT,eur),e(fT,XQ),e(XQ,our),e(fT,rur),e(q,tur),e(q,mT),e(mT,y4e),e(y4e,aur),e(mT,nur),e(mT,zQ),e(zQ,sur),e(mT,lur),e(wr,iur),M(gT,wr,null),b(f,XDe,u),b(f,Wd,u),e(Wd,hT),e(hT,x4e),M(I8,x4e,null),e(Wd,dur),e(Wd,$4e),e($4e,cur),b(f,zDe,u),b(f,Ko,u),M(N8,Ko,null),e(Ko,fur),e(Ko,Qd),e(Qd,mur),e(Qd,WQ),e(WQ,gur),e(Qd,hur),e(Qd,QQ),e(QQ,pur),e(Qd,_ur),e(Ko,uur),e(Ko,q8),e(q8,bur),e(q8,k4e),e(k4e,vur),e(q8,Fur),e(Ko,Tur),e(Ko,xt),M(j8,xt,null),e(xt,Mur),e(xt,S4e),e(S4e,Eur),e(xt,Cur),e(xt,Hd),e(Hd,wur),e(Hd,R4e),e(R4e,Aur),e(Hd,Lur),e(Hd,HQ),e(HQ,yur),e(Hd,xur),e(xt,$ur),M(pT,xt,null),e(Ko,kur),e(Ko,Ar),M(D8,Ar,null),e(Ar,Sur),e(Ar,P4e),e(P4e,Rur),e(Ar,Pur),e(Ar,Za),e(Za,Bur),e(Za,B4e),e(B4e,Iur),e(Za,Nur),e(Za,I4e),e(I4e,qur),e(Za,jur),e(Za,N4e),e(N4e,Dur),e(Za,Gur),e(Ar,Our),e(Ar,se),e(se,_T),e(_T,q4e),e(q4e,Vur),e(_T,Xur),e(_T,UQ),e(UQ,zur),e(_T,Wur),e(se,Qur),e(se,uT),e(uT,j4e),e(j4e,Hur),e(uT,Uur),e(uT,JQ),e(JQ,Jur),e(uT,Yur),e(se,Kur),e(se,bT),e(bT,D4e),e(D4e,Zur),e(bT,e1r),e(bT,YQ),e(YQ,o1r),e(bT,r1r),e(se,t1r),e(se,vT),e(vT,G4e),e(G4e,a1r),e(vT,n1r),e(vT,KQ),e(KQ,s1r),e(vT,l1r),e(se,i1r),e(se,FT),e(FT,O4e),e(O4e,d1r),e(FT,c1r),e(FT,ZQ),e(ZQ,f1r),e(FT,m1r),e(se,g1r),e(se,TT),e(TT,V4e),e(V4e,h1r),e(TT,p1r),e(TT,eH),e(eH,_1r),e(TT,u1r),e(se,b1r),e(se,MT),e(MT,X4e),e(X4e,v1r),e(MT,F1r),e(MT,oH),e(oH,T1r),e(MT,M1r),e(se,E1r),e(se,ET),e(ET,z4e),e(z4e,C1r),e(ET,w1r),e(ET,rH),e(rH,A1r),e(ET,L1r),e(se,y1r),e(se,CT),e(CT,W4e),e(W4e,x1r),e(CT,$1r),e(CT,tH),e(tH,k1r),e(CT,S1r),e(se,R1r),e(se,wT),e(wT,Q4e),e(Q4e,P1r),e(wT,B1r),e(wT,aH),e(aH,I1r),e(wT,N1r),e(se,q1r),e(se,AT),e(AT,H4e),e(H4e,j1r),e(AT,D1r),e(AT,nH),e(nH,G1r),e(AT,O1r),e(se,V1r),e(se,LT),e(LT,U4e),e(U4e,X1r),e(LT,z1r),e(LT,sH),e(sH,W1r),e(LT,Q1r),e(se,H1r),e(se,yT),e(yT,J4e),e(J4e,U1r),e(yT,J1r),e(yT,lH),e(lH,Y1r),e(yT,K1r),e(se,Z1r),e(se,xT),e(xT,Y4e),e(Y4e,ebr),e(xT,obr),e(xT,iH),e(iH,rbr),e(xT,tbr),e(se,abr),e(se,$T),e($T,K4e),e(K4e,nbr),e($T,sbr),e($T,dH),e(dH,lbr),e($T,ibr),e(se,dbr),e(se,kT),e(kT,Z4e),e(Z4e,cbr),e(kT,fbr),e(kT,cH),e(cH,mbr),e(kT,gbr),e(se,hbr),e(se,ST),e(ST,eve),e(eve,pbr),e(ST,_br),e(ST,fH),e(fH,ubr),e(ST,bbr),e(se,vbr),e(se,RT),e(RT,ove),e(ove,Fbr),e(RT,Tbr),e(RT,mH),e(mH,Mbr),e(RT,Ebr),e(se,Cbr),e(se,PT),e(PT,rve),e(rve,wbr),e(PT,Abr),e(PT,gH),e(gH,Lbr),e(PT,ybr),e(se,xbr),e(se,BT),e(BT,tve),e(tve,$br),e(BT,kbr),e(BT,hH),e(hH,Sbr),e(BT,Rbr),e(se,Pbr),e(se,IT),e(IT,ave),e(ave,Bbr),e(IT,Ibr),e(IT,pH),e(pH,Nbr),e(IT,qbr),e(se,jbr),e(se,NT),e(NT,nve),e(nve,Dbr),e(NT,Gbr),e(NT,_H),e(_H,Obr),e(NT,Vbr),e(se,Xbr),e(se,qT),e(qT,sve),e(sve,zbr),e(qT,Wbr),e(qT,uH),e(uH,Qbr),e(qT,Hbr),e(Ar,Ubr),M(jT,Ar,null),b(f,WDe,u),b(f,Ud,u),e(Ud,DT),e(DT,lve),M(G8,lve,null),e(Ud,Jbr),e(Ud,ive),e(ive,Ybr),b(f,QDe,u),b(f,Zo,u),M(O8,Zo,null),e(Zo,Kbr),e(Zo,Jd),e(Jd,Zbr),e(Jd,bH),e(bH,e2r),e(Jd,o2r),e(Jd,vH),e(vH,r2r),e(Jd,t2r),e(Zo,a2r),e(Zo,V8),e(V8,n2r),e(V8,dve),e(dve,s2r),e(V8,l2r),e(Zo,i2r),e(Zo,$t),M(X8,$t,null),e($t,d2r),e($t,cve),e(cve,c2r),e($t,f2r),e($t,Yd),e(Yd,m2r),e(Yd,fve),e(fve,g2r),e(Yd,h2r),e(Yd,FH),e(FH,p2r),e(Yd,_2r),e($t,u2r),M(GT,$t,null),e(Zo,b2r),e(Zo,Lr),M(z8,Lr,null),e(Lr,v2r),e(Lr,mve),e(mve,F2r),e(Lr,T2r),e(Lr,en),e(en,M2r),e(en,gve),e(gve,E2r),e(en,C2r),e(en,hve),e(hve,w2r),e(en,A2r),e(en,pve),e(pve,L2r),e(en,y2r),e(Lr,x2r),e(Lr,Me),e(Me,OT),e(OT,_ve),e(_ve,$2r),e(OT,k2r),e(OT,TH),e(TH,S2r),e(OT,R2r),e(Me,P2r),e(Me,VT),e(VT,uve),e(uve,B2r),e(VT,I2r),e(VT,MH),e(MH,N2r),e(VT,q2r),e(Me,j2r),e(Me,XT),e(XT,bve),e(bve,D2r),e(XT,G2r),e(XT,EH),e(EH,O2r),e(XT,V2r),e(Me,X2r),e(Me,zT),e(zT,vve),e(vve,z2r),e(zT,W2r),e(zT,CH),e(CH,Q2r),e(zT,H2r),e(Me,U2r),e(Me,WT),e(WT,Fve),e(Fve,J2r),e(WT,Y2r),e(WT,wH),e(wH,K2r),e(WT,Z2r),e(Me,e4r),e(Me,QT),e(QT,Tve),e(Tve,o4r),e(QT,r4r),e(QT,AH),e(AH,t4r),e(QT,a4r),e(Me,n4r),e(Me,HT),e(HT,Mve),e(Mve,s4r),e(HT,l4r),e(HT,LH),e(LH,i4r),e(HT,d4r),e(Me,c4r),e(Me,UT),e(UT,Eve),e(Eve,f4r),e(UT,m4r),e(UT,yH),e(yH,g4r),e(UT,h4r),e(Me,p4r),e(Me,JT),e(JT,Cve),e(Cve,_4r),e(JT,u4r),e(JT,xH),e(xH,b4r),e(JT,v4r),e(Me,F4r),e(Me,YT),e(YT,wve),e(wve,T4r),e(YT,M4r),e(YT,$H),e($H,E4r),e(YT,C4r),e(Me,w4r),e(Me,KT),e(KT,Ave),e(Ave,A4r),e(KT,L4r),e(KT,kH),e(kH,y4r),e(KT,x4r),e(Me,$4r),e(Me,ZT),e(ZT,Lve),e(Lve,k4r),e(ZT,S4r),e(ZT,SH),e(SH,R4r),e(ZT,P4r),e(Me,B4r),e(Me,e7),e(e7,yve),e(yve,I4r),e(e7,N4r),e(e7,RH),e(RH,q4r),e(e7,j4r),e(Lr,D4r),M(o7,Lr,null),b(f,HDe,u),b(f,Kd,u),e(Kd,r7),e(r7,xve),M(W8,xve,null),e(Kd,G4r),e(Kd,$ve),e($ve,O4r),b(f,UDe,u),b(f,er,u),M(Q8,er,null),e(er,V4r),e(er,Zd),e(Zd,X4r),e(Zd,PH),e(PH,z4r),e(Zd,W4r),e(Zd,BH),e(BH,Q4r),e(Zd,H4r),e(er,U4r),e(er,H8),e(H8,J4r),e(H8,kve),e(kve,Y4r),e(H8,K4r),e(er,Z4r),e(er,kt),M(U8,kt,null),e(kt,evr),e(kt,Sve),e(Sve,ovr),e(kt,rvr),e(kt,ec),e(ec,tvr),e(ec,Rve),e(Rve,avr),e(ec,nvr),e(ec,IH),e(IH,svr),e(ec,lvr),e(kt,ivr),M(t7,kt,null),e(er,dvr),e(er,yr),M(J8,yr,null),e(yr,cvr),e(yr,Pve),e(Pve,fvr),e(yr,mvr),e(yr,on),e(on,gvr),e(on,Bve),e(Bve,hvr),e(on,pvr),e(on,Ive),e(Ive,_vr),e(on,uvr),e(on,Nve),e(Nve,bvr),e(on,vvr),e(yr,Fvr),e(yr,rn),e(rn,a7),e(a7,qve),e(qve,Tvr),e(a7,Mvr),e(a7,NH),e(NH,Evr),e(a7,Cvr),e(rn,wvr),e(rn,n7),e(n7,jve),e(jve,Avr),e(n7,Lvr),e(n7,qH),e(qH,yvr),e(n7,xvr),e(rn,$vr),e(rn,s7),e(s7,Dve),e(Dve,kvr),e(s7,Svr),e(s7,jH),e(jH,Rvr),e(s7,Pvr),e(rn,Bvr),e(rn,l7),e(l7,Gve),e(Gve,Ivr),e(l7,Nvr),e(l7,DH),e(DH,qvr),e(l7,jvr),e(yr,Dvr),M(i7,yr,null),b(f,JDe,u),b(f,oc,u),e(oc,d7),e(d7,Ove),M(Y8,Ove,null),e(oc,Gvr),e(oc,Vve),e(Vve,Ovr),b(f,YDe,u),b(f,or,u),M(K8,or,null),e(or,Vvr),e(or,rc),e(rc,Xvr),e(rc,GH),e(GH,zvr),e(rc,Wvr),e(rc,OH),e(OH,Qvr),e(rc,Hvr),e(or,Uvr),e(or,Z8),e(Z8,Jvr),e(Z8,Xve),e(Xve,Yvr),e(Z8,Kvr),e(or,Zvr),e(or,St),M(e9,St,null),e(St,e5r),e(St,zve),e(zve,o5r),e(St,r5r),e(St,tc),e(tc,t5r),e(tc,Wve),e(Wve,a5r),e(tc,n5r),e(tc,VH),e(VH,s5r),e(tc,l5r),e(St,i5r),M(c7,St,null),e(or,d5r),e(or,xr),M(o9,xr,null),e(xr,c5r),e(xr,Qve),e(Qve,f5r),e(xr,m5r),e(xr,tn),e(tn,g5r),e(tn,Hve),e(Hve,h5r),e(tn,p5r),e(tn,Uve),e(Uve,_5r),e(tn,u5r),e(tn,Jve),e(Jve,b5r),e(tn,v5r),e(xr,F5r),e(xr,ie),e(ie,f7),e(f7,Yve),e(Yve,T5r),e(f7,M5r),e(f7,XH),e(XH,E5r),e(f7,C5r),e(ie,w5r),e(ie,m7),e(m7,Kve),e(Kve,A5r),e(m7,L5r),e(m7,zH),e(zH,y5r),e(m7,x5r),e(ie,$5r),e(ie,g7),e(g7,Zve),e(Zve,k5r),e(g7,S5r),e(g7,WH),e(WH,R5r),e(g7,P5r),e(ie,B5r),e(ie,h7),e(h7,e5e),e(e5e,I5r),e(h7,N5r),e(h7,QH),e(QH,q5r),e(h7,j5r),e(ie,D5r),e(ie,p7),e(p7,o5e),e(o5e,G5r),e(p7,O5r),e(p7,HH),e(HH,V5r),e(p7,X5r),e(ie,z5r),e(ie,_7),e(_7,r5e),e(r5e,W5r),e(_7,Q5r),e(_7,UH),e(UH,H5r),e(_7,U5r),e(ie,J5r),e(ie,u7),e(u7,t5e),e(t5e,Y5r),e(u7,K5r),e(u7,JH),e(JH,Z5r),e(u7,e3r),e(ie,o3r),e(ie,b7),e(b7,a5e),e(a5e,r3r),e(b7,t3r),e(b7,YH),e(YH,a3r),e(b7,n3r),e(ie,s3r),e(ie,v7),e(v7,n5e),e(n5e,l3r),e(v7,i3r),e(v7,KH),e(KH,d3r),e(v7,c3r),e(ie,f3r),e(ie,F7),e(F7,s5e),e(s5e,m3r),e(F7,g3r),e(F7,ZH),e(ZH,h3r),e(F7,p3r),e(ie,_3r),e(ie,T7),e(T7,l5e),e(l5e,u3r),e(T7,b3r),e(T7,eU),e(eU,v3r),e(T7,F3r),e(ie,T3r),e(ie,M7),e(M7,i5e),e(i5e,M3r),e(M7,E3r),e(M7,oU),e(oU,C3r),e(M7,w3r),e(ie,A3r),e(ie,E7),e(E7,d5e),e(d5e,L3r),e(E7,y3r),e(E7,rU),e(rU,x3r),e(E7,$3r),e(ie,k3r),e(ie,C7),e(C7,c5e),e(c5e,S3r),e(C7,R3r),e(C7,tU),e(tU,P3r),e(C7,B3r),e(ie,I3r),e(ie,w7),e(w7,f5e),e(f5e,N3r),e(w7,q3r),e(w7,aU),e(aU,j3r),e(w7,D3r),e(ie,G3r),e(ie,A7),e(A7,m5e),e(m5e,O3r),e(A7,V3r),e(A7,nU),e(nU,X3r),e(A7,z3r),e(ie,W3r),e(ie,L7),e(L7,g5e),e(g5e,Q3r),e(L7,H3r),e(L7,sU),e(sU,U3r),e(L7,J3r),e(ie,Y3r),e(ie,y7),e(y7,h5e),e(h5e,K3r),e(y7,Z3r),e(y7,lU),e(lU,eFr),e(y7,oFr),e(ie,rFr),e(ie,x7),e(x7,p5e),e(p5e,tFr),e(x7,aFr),e(x7,iU),e(iU,nFr),e(x7,sFr),e(ie,lFr),e(ie,$7),e($7,_5e),e(_5e,iFr),e($7,dFr),e($7,dU),e(dU,cFr),e($7,fFr),e(xr,mFr),M(k7,xr,null),b(f,KDe,u),b(f,ac,u),e(ac,S7),e(S7,u5e),M(r9,u5e,null),e(ac,gFr),e(ac,b5e),e(b5e,hFr),b(f,ZDe,u),b(f,rr,u),M(t9,rr,null),e(rr,pFr),e(rr,nc),e(nc,_Fr),e(nc,cU),e(cU,uFr),e(nc,bFr),e(nc,fU),e(fU,vFr),e(nc,FFr),e(rr,TFr),e(rr,a9),e(a9,MFr),e(a9,v5e),e(v5e,EFr),e(a9,CFr),e(rr,wFr),e(rr,Rt),M(n9,Rt,null),e(Rt,AFr),e(Rt,F5e),e(F5e,LFr),e(Rt,yFr),e(Rt,sc),e(sc,xFr),e(sc,T5e),e(T5e,$Fr),e(sc,kFr),e(sc,mU),e(mU,SFr),e(sc,RFr),e(Rt,PFr),M(R7,Rt,null),e(rr,BFr),e(rr,$r),M(s9,$r,null),e($r,IFr),e($r,M5e),e(M5e,NFr),e($r,qFr),e($r,an),e(an,jFr),e(an,E5e),e(E5e,DFr),e(an,GFr),e(an,C5e),e(C5e,OFr),e(an,VFr),e(an,w5e),e(w5e,XFr),e(an,zFr),e($r,WFr),e($r,ye),e(ye,P7),e(P7,A5e),e(A5e,QFr),e(P7,HFr),e(P7,gU),e(gU,UFr),e(P7,JFr),e(ye,YFr),e(ye,B7),e(B7,L5e),e(L5e,KFr),e(B7,ZFr),e(B7,hU),e(hU,eTr),e(B7,oTr),e(ye,rTr),e(ye,I7),e(I7,y5e),e(y5e,tTr),e(I7,aTr),e(I7,pU),e(pU,nTr),e(I7,sTr),e(ye,lTr),e(ye,N7),e(N7,x5e),e(x5e,iTr),e(N7,dTr),e(N7,_U),e(_U,cTr),e(N7,fTr),e(ye,mTr),e(ye,q7),e(q7,$5e),e($5e,gTr),e(q7,hTr),e(q7,uU),e(uU,pTr),e(q7,_Tr),e(ye,uTr),e(ye,j7),e(j7,k5e),e(k5e,bTr),e(j7,vTr),e(j7,bU),e(bU,FTr),e(j7,TTr),e(ye,MTr),e(ye,D7),e(D7,S5e),e(S5e,ETr),e(D7,CTr),e(D7,vU),e(vU,wTr),e(D7,ATr),e(ye,LTr),e(ye,G7),e(G7,R5e),e(R5e,yTr),e(G7,xTr),e(G7,FU),e(FU,$Tr),e(G7,kTr),e(ye,STr),e(ye,O7),e(O7,P5e),e(P5e,RTr),e(O7,PTr),e(O7,TU),e(TU,BTr),e(O7,ITr),e(ye,NTr),e(ye,V7),e(V7,B5e),e(B5e,qTr),e(V7,jTr),e(V7,MU),e(MU,DTr),e(V7,GTr),e($r,OTr),M(X7,$r,null),b(f,eGe,u),b(f,lc,u),e(lc,z7),e(z7,I5e),M(l9,I5e,null),e(lc,VTr),e(lc,N5e),e(N5e,XTr),b(f,oGe,u),b(f,tr,u),M(i9,tr,null),e(tr,zTr),e(tr,ic),e(ic,WTr),e(ic,EU),e(EU,QTr),e(ic,HTr),e(ic,CU),e(CU,UTr),e(ic,JTr),e(tr,YTr),e(tr,d9),e(d9,KTr),e(d9,q5e),e(q5e,ZTr),e(d9,e7r),e(tr,o7r),e(tr,Pt),M(c9,Pt,null),e(Pt,r7r),e(Pt,j5e),e(j5e,t7r),e(Pt,a7r),e(Pt,dc),e(dc,n7r),e(dc,D5e),e(D5e,s7r),e(dc,l7r),e(dc,wU),e(wU,i7r),e(dc,d7r),e(Pt,c7r),M(W7,Pt,null),e(tr,f7r),e(tr,kr),M(f9,kr,null),e(kr,m7r),e(kr,G5e),e(G5e,g7r),e(kr,h7r),e(kr,nn),e(nn,p7r),e(nn,O5e),e(O5e,_7r),e(nn,u7r),e(nn,V5e),e(V5e,b7r),e(nn,v7r),e(nn,X5e),e(X5e,F7r),e(nn,T7r),e(kr,M7r),e(kr,oe),e(oe,Q7),e(Q7,z5e),e(z5e,E7r),e(Q7,C7r),e(Q7,AU),e(AU,w7r),e(Q7,A7r),e(oe,L7r),e(oe,H7),e(H7,W5e),e(W5e,y7r),e(H7,x7r),e(H7,LU),e(LU,$7r),e(H7,k7r),e(oe,S7r),e(oe,U7),e(U7,Q5e),e(Q5e,R7r),e(U7,P7r),e(U7,yU),e(yU,B7r),e(U7,I7r),e(oe,N7r),e(oe,J7),e(J7,H5e),e(H5e,q7r),e(J7,j7r),e(J7,xU),e(xU,D7r),e(J7,G7r),e(oe,O7r),e(oe,Y7),e(Y7,U5e),e(U5e,V7r),e(Y7,X7r),e(Y7,$U),e($U,z7r),e(Y7,W7r),e(oe,Q7r),e(oe,K7),e(K7,J5e),e(J5e,H7r),e(K7,U7r),e(K7,kU),e(kU,J7r),e(K7,Y7r),e(oe,K7r),e(oe,Z7),e(Z7,Y5e),e(Y5e,Z7r),e(Z7,eMr),e(Z7,SU),e(SU,oMr),e(Z7,rMr),e(oe,tMr),e(oe,eM),e(eM,K5e),e(K5e,aMr),e(eM,nMr),e(eM,RU),e(RU,sMr),e(eM,lMr),e(oe,iMr),e(oe,oM),e(oM,Z5e),e(Z5e,dMr),e(oM,cMr),e(oM,PU),e(PU,fMr),e(oM,mMr),e(oe,gMr),e(oe,rM),e(rM,e3e),e(e3e,hMr),e(rM,pMr),e(rM,BU),e(BU,_Mr),e(rM,uMr),e(oe,bMr),e(oe,tM),e(tM,o3e),e(o3e,vMr),e(tM,FMr),e(tM,IU),e(IU,TMr),e(tM,MMr),e(oe,EMr),e(oe,aM),e(aM,r3e),e(r3e,CMr),e(aM,wMr),e(aM,NU),e(NU,AMr),e(aM,LMr),e(oe,yMr),e(oe,nM),e(nM,t3e),e(t3e,xMr),e(nM,$Mr),e(nM,qU),e(qU,kMr),e(nM,SMr),e(oe,RMr),e(oe,sM),e(sM,a3e),e(a3e,PMr),e(sM,BMr),e(sM,jU),e(jU,IMr),e(sM,NMr),e(oe,qMr),e(oe,lM),e(lM,n3e),e(n3e,jMr),e(lM,DMr),e(lM,DU),e(DU,GMr),e(lM,OMr),e(oe,VMr),e(oe,iM),e(iM,s3e),e(s3e,XMr),e(iM,zMr),e(iM,GU),e(GU,WMr),e(iM,QMr),e(oe,HMr),e(oe,dM),e(dM,l3e),e(l3e,UMr),e(dM,JMr),e(dM,OU),e(OU,YMr),e(dM,KMr),e(oe,ZMr),e(oe,cM),e(cM,i3e),e(i3e,eEr),e(cM,oEr),e(cM,VU),e(VU,rEr),e(cM,tEr),e(oe,aEr),e(oe,fM),e(fM,d3e),e(d3e,nEr),e(fM,sEr),e(fM,XU),e(XU,lEr),e(fM,iEr),e(oe,dEr),e(oe,mM),e(mM,c3e),e(c3e,cEr),e(mM,fEr),e(mM,zU),e(zU,mEr),e(mM,gEr),e(oe,hEr),e(oe,gM),e(gM,f3e),e(f3e,pEr),e(gM,_Er),e(gM,WU),e(WU,uEr),e(gM,bEr),e(oe,vEr),e(oe,hM),e(hM,m3e),e(m3e,FEr),e(hM,TEr),e(hM,QU),e(QU,MEr),e(hM,EEr),e(oe,CEr),e(oe,pM),e(pM,g3e),e(g3e,wEr),e(pM,AEr),e(pM,HU),e(HU,LEr),e(pM,yEr),e(oe,xEr),e(oe,_M),e(_M,h3e),e(h3e,$Er),e(_M,kEr),e(_M,UU),e(UU,SEr),e(_M,REr),e(oe,PEr),e(oe,uM),e(uM,p3e),e(p3e,BEr),e(uM,IEr),e(uM,JU),e(JU,NEr),e(uM,qEr),e(oe,jEr),e(oe,bM),e(bM,_3e),e(_3e,DEr),e(bM,GEr),e(bM,YU),e(YU,OEr),e(bM,VEr),e(kr,XEr),M(vM,kr,null),b(f,rGe,u),b(f,cc,u),e(cc,FM),e(FM,u3e),M(m9,u3e,null),e(cc,zEr),e(cc,b3e),e(b3e,WEr),b(f,tGe,u),b(f,ar,u),M(g9,ar,null),e(ar,QEr),e(ar,fc),e(fc,HEr),e(fc,KU),e(KU,UEr),e(fc,JEr),e(fc,ZU),e(ZU,YEr),e(fc,KEr),e(ar,ZEr),e(ar,h9),e(h9,eCr),e(h9,v3e),e(v3e,oCr),e(h9,rCr),e(ar,tCr),e(ar,Bt),M(p9,Bt,null),e(Bt,aCr),e(Bt,F3e),e(F3e,nCr),e(Bt,sCr),e(Bt,mc),e(mc,lCr),e(mc,T3e),e(T3e,iCr),e(mc,dCr),e(mc,eJ),e(eJ,cCr),e(mc,fCr),e(Bt,mCr),M(TM,Bt,null),e(ar,gCr),e(ar,Sr),M(_9,Sr,null),e(Sr,hCr),e(Sr,M3e),e(M3e,pCr),e(Sr,_Cr),e(Sr,sn),e(sn,uCr),e(sn,E3e),e(E3e,bCr),e(sn,vCr),e(sn,C3e),e(C3e,FCr),e(sn,TCr),e(sn,w3e),e(w3e,MCr),e(sn,ECr),e(Sr,CCr),e(Sr,pe),e(pe,MM),e(MM,A3e),e(A3e,wCr),e(MM,ACr),e(MM,oJ),e(oJ,LCr),e(MM,yCr),e(pe,xCr),e(pe,EM),e(EM,L3e),e(L3e,$Cr),e(EM,kCr),e(EM,rJ),e(rJ,SCr),e(EM,RCr),e(pe,PCr),e(pe,CM),e(CM,y3e),e(y3e,BCr),e(CM,ICr),e(CM,tJ),e(tJ,NCr),e(CM,qCr),e(pe,jCr),e(pe,wM),e(wM,x3e),e(x3e,DCr),e(wM,GCr),e(wM,aJ),e(aJ,OCr),e(wM,VCr),e(pe,XCr),e(pe,AM),e(AM,$3e),e($3e,zCr),e(AM,WCr),e(AM,nJ),e(nJ,QCr),e(AM,HCr),e(pe,UCr),e(pe,LM),e(LM,k3e),e(k3e,JCr),e(LM,YCr),e(LM,sJ),e(sJ,KCr),e(LM,ZCr),e(pe,e0r),e(pe,yM),e(yM,S3e),e(S3e,o0r),e(yM,r0r),e(yM,lJ),e(lJ,t0r),e(yM,a0r),e(pe,n0r),e(pe,xM),e(xM,R3e),e(R3e,s0r),e(xM,l0r),e(xM,iJ),e(iJ,i0r),e(xM,d0r),e(pe,c0r),e(pe,$M),e($M,P3e),e(P3e,f0r),e($M,m0r),e($M,dJ),e(dJ,g0r),e($M,h0r),e(pe,p0r),e(pe,kM),e(kM,B3e),e(B3e,_0r),e(kM,u0r),e(kM,cJ),e(cJ,b0r),e(kM,v0r),e(pe,F0r),e(pe,SM),e(SM,I3e),e(I3e,T0r),e(SM,M0r),e(SM,fJ),e(fJ,E0r),e(SM,C0r),e(pe,w0r),e(pe,RM),e(RM,N3e),e(N3e,A0r),e(RM,L0r),e(RM,mJ),e(mJ,y0r),e(RM,x0r),e(pe,$0r),e(pe,PM),e(PM,q3e),e(q3e,k0r),e(PM,S0r),e(PM,gJ),e(gJ,R0r),e(PM,P0r),e(pe,B0r),e(pe,BM),e(BM,j3e),e(j3e,I0r),e(BM,N0r),e(BM,hJ),e(hJ,q0r),e(BM,j0r),e(pe,D0r),e(pe,IM),e(IM,D3e),e(D3e,G0r),e(IM,O0r),e(IM,pJ),e(pJ,V0r),e(IM,X0r),e(pe,z0r),e(pe,NM),e(NM,G3e),e(G3e,W0r),e(NM,Q0r),e(NM,_J),e(_J,H0r),e(NM,U0r),e(pe,J0r),e(pe,qM),e(qM,O3e),e(O3e,Y0r),e(qM,K0r),e(qM,uJ),e(uJ,Z0r),e(qM,ewr),e(Sr,owr),M(jM,Sr,null),b(f,aGe,u),b(f,gc,u),e(gc,DM),e(DM,V3e),M(u9,V3e,null),e(gc,rwr),e(gc,X3e),e(X3e,twr),b(f,nGe,u),b(f,nr,u),M(b9,nr,null),e(nr,awr),e(nr,hc),e(hc,nwr),e(hc,bJ),e(bJ,swr),e(hc,lwr),e(hc,vJ),e(vJ,iwr),e(hc,dwr),e(nr,cwr),e(nr,v9),e(v9,fwr),e(v9,z3e),e(z3e,mwr),e(v9,gwr),e(nr,hwr),e(nr,It),M(F9,It,null),e(It,pwr),e(It,W3e),e(W3e,_wr),e(It,uwr),e(It,pc),e(pc,bwr),e(pc,Q3e),e(Q3e,vwr),e(pc,Fwr),e(pc,FJ),e(FJ,Twr),e(pc,Mwr),e(It,Ewr),M(GM,It,null),e(nr,Cwr),e(nr,Rr),M(T9,Rr,null),e(Rr,wwr),e(Rr,H3e),e(H3e,Awr),e(Rr,Lwr),e(Rr,ln),e(ln,ywr),e(ln,U3e),e(U3e,xwr),e(ln,$wr),e(ln,J3e),e(J3e,kwr),e(ln,Swr),e(ln,Y3e),e(Y3e,Rwr),e(ln,Pwr),e(Rr,Bwr),e(Rr,M9),e(M9,OM),e(OM,K3e),e(K3e,Iwr),e(OM,Nwr),e(OM,TJ),e(TJ,qwr),e(OM,jwr),e(M9,Dwr),e(M9,VM),e(VM,Z3e),e(Z3e,Gwr),e(VM,Owr),e(VM,MJ),e(MJ,Vwr),e(VM,Xwr),e(Rr,zwr),M(XM,Rr,null),b(f,sGe,u),b(f,_c,u),e(_c,zM),e(zM,eFe),M(E9,eFe,null),e(_c,Wwr),e(_c,oFe),e(oFe,Qwr),b(f,lGe,u),b(f,sr,u),M(C9,sr,null),e(sr,Hwr),e(sr,uc),e(uc,Uwr),e(uc,EJ),e(EJ,Jwr),e(uc,Ywr),e(uc,CJ),e(CJ,Kwr),e(uc,Zwr),e(sr,e6r),e(sr,w9),e(w9,o6r),e(w9,rFe),e(rFe,r6r),e(w9,t6r),e(sr,a6r),e(sr,Nt),M(A9,Nt,null),e(Nt,n6r),e(Nt,tFe),e(tFe,s6r),e(Nt,l6r),e(Nt,bc),e(bc,i6r),e(bc,aFe),e(aFe,d6r),e(bc,c6r),e(bc,wJ),e(wJ,f6r),e(bc,m6r),e(Nt,g6r),M(WM,Nt,null),e(sr,h6r),e(sr,Pr),M(L9,Pr,null),e(Pr,p6r),e(Pr,nFe),e(nFe,_6r),e(Pr,u6r),e(Pr,dn),e(dn,b6r),e(dn,sFe),e(sFe,v6r),e(dn,F6r),e(dn,lFe),e(lFe,T6r),e(dn,M6r),e(dn,iFe),e(iFe,E6r),e(dn,C6r),e(Pr,w6r),e(Pr,dFe),e(dFe,QM),e(QM,cFe),e(cFe,A6r),e(QM,L6r),e(QM,AJ),e(AJ,y6r),e(QM,x6r),e(Pr,$6r),M(HM,Pr,null),b(f,iGe,u),b(f,vc,u),e(vc,UM),e(UM,fFe),M(y9,fFe,null),e(vc,k6r),e(vc,mFe),e(mFe,S6r),b(f,dGe,u),b(f,lr,u),M(x9,lr,null),e(lr,R6r),e(lr,Fc),e(Fc,P6r),e(Fc,LJ),e(LJ,B6r),e(Fc,I6r),e(Fc,yJ),e(yJ,N6r),e(Fc,q6r),e(lr,j6r),e(lr,$9),e($9,D6r),e($9,gFe),e(gFe,G6r),e($9,O6r),e(lr,V6r),e(lr,qt),M(k9,qt,null),e(qt,X6r),e(qt,hFe),e(hFe,z6r),e(qt,W6r),e(qt,Tc),e(Tc,Q6r),e(Tc,pFe),e(pFe,H6r),e(Tc,U6r),e(Tc,xJ),e(xJ,J6r),e(Tc,Y6r),e(qt,K6r),M(JM,qt,null),e(lr,Z6r),e(lr,Br),M(S9,Br,null),e(Br,eAr),e(Br,_Fe),e(_Fe,oAr),e(Br,rAr),e(Br,cn),e(cn,tAr),e(cn,uFe),e(uFe,aAr),e(cn,nAr),e(cn,bFe),e(bFe,sAr),e(cn,lAr),e(cn,vFe),e(vFe,iAr),e(cn,dAr),e(Br,cAr),e(Br,de),e(de,YM),e(YM,FFe),e(FFe,fAr),e(YM,mAr),e(YM,$J),e($J,gAr),e(YM,hAr),e(de,pAr),e(de,KM),e(KM,TFe),e(TFe,_Ar),e(KM,uAr),e(KM,kJ),e(kJ,bAr),e(KM,vAr),e(de,FAr),e(de,ZM),e(ZM,MFe),e(MFe,TAr),e(ZM,MAr),e(ZM,SJ),e(SJ,EAr),e(ZM,CAr),e(de,wAr),e(de,eE),e(eE,EFe),e(EFe,AAr),e(eE,LAr),e(eE,RJ),e(RJ,yAr),e(eE,xAr),e(de,$Ar),e(de,oE),e(oE,CFe),e(CFe,kAr),e(oE,SAr),e(oE,PJ),e(PJ,RAr),e(oE,PAr),e(de,BAr),e(de,rE),e(rE,wFe),e(wFe,IAr),e(rE,NAr),e(rE,BJ),e(BJ,qAr),e(rE,jAr),e(de,DAr),e(de,tE),e(tE,AFe),e(AFe,GAr),e(tE,OAr),e(tE,IJ),e(IJ,VAr),e(tE,XAr),e(de,zAr),e(de,aE),e(aE,LFe),e(LFe,WAr),e(aE,QAr),e(aE,NJ),e(NJ,HAr),e(aE,UAr),e(de,JAr),e(de,nE),e(nE,yFe),e(yFe,YAr),e(nE,KAr),e(nE,qJ),e(qJ,ZAr),e(nE,eLr),e(de,oLr),e(de,sE),e(sE,xFe),e(xFe,rLr),e(sE,tLr),e(sE,jJ),e(jJ,aLr),e(sE,nLr),e(de,sLr),e(de,lE),e(lE,$Fe),e($Fe,lLr),e(lE,iLr),e(lE,DJ),e(DJ,dLr),e(lE,cLr),e(de,fLr),e(de,iE),e(iE,kFe),e(kFe,mLr),e(iE,gLr),e(iE,GJ),e(GJ,hLr),e(iE,pLr),e(de,_Lr),e(de,dE),e(dE,SFe),e(SFe,uLr),e(dE,bLr),e(dE,OJ),e(OJ,vLr),e(dE,FLr),e(de,TLr),e(de,cE),e(cE,RFe),e(RFe,MLr),e(cE,ELr),e(cE,VJ),e(VJ,CLr),e(cE,wLr),e(de,ALr),e(de,fE),e(fE,PFe),e(PFe,LLr),e(fE,yLr),e(fE,XJ),e(XJ,xLr),e(fE,$Lr),e(de,kLr),e(de,mE),e(mE,BFe),e(BFe,SLr),e(mE,RLr),e(mE,zJ),e(zJ,PLr),e(mE,BLr),e(de,ILr),e(de,gE),e(gE,IFe),e(IFe,NLr),e(gE,qLr),e(gE,WJ),e(WJ,jLr),e(gE,DLr),e(de,GLr),e(de,hE),e(hE,NFe),e(NFe,OLr),e(hE,VLr),e(hE,QJ),e(QJ,XLr),e(hE,zLr),e(de,WLr),e(de,pE),e(pE,qFe),e(qFe,QLr),e(pE,HLr),e(pE,HJ),e(HJ,ULr),e(pE,JLr),e(de,YLr),e(de,_E),e(_E,jFe),e(jFe,KLr),e(_E,ZLr),e(_E,UJ),e(UJ,eyr),e(_E,oyr),e(Br,ryr),M(uE,Br,null),b(f,cGe,u),b(f,Mc,u),e(Mc,bE),e(bE,DFe),M(R9,DFe,null),e(Mc,tyr),e(Mc,GFe),e(GFe,ayr),b(f,fGe,u),b(f,ir,u),M(P9,ir,null),e(ir,nyr),e(ir,Ec),e(Ec,syr),e(Ec,JJ),e(JJ,lyr),e(Ec,iyr),e(Ec,YJ),e(YJ,dyr),e(Ec,cyr),e(ir,fyr),e(ir,B9),e(B9,myr),e(B9,OFe),e(OFe,gyr),e(B9,hyr),e(ir,pyr),e(ir,jt),M(I9,jt,null),e(jt,_yr),e(jt,VFe),e(VFe,uyr),e(jt,byr),e(jt,Cc),e(Cc,vyr),e(Cc,XFe),e(XFe,Fyr),e(Cc,Tyr),e(Cc,KJ),e(KJ,Myr),e(Cc,Eyr),e(jt,Cyr),M(vE,jt,null),e(ir,wyr),e(ir,Ir),M(N9,Ir,null),e(Ir,Ayr),e(Ir,zFe),e(zFe,Lyr),e(Ir,yyr),e(Ir,fn),e(fn,xyr),e(fn,WFe),e(WFe,$yr),e(fn,kyr),e(fn,QFe),e(QFe,Syr),e(fn,Ryr),e(fn,HFe),e(HFe,Pyr),e(fn,Byr),e(Ir,Iyr),e(Ir,ce),e(ce,FE),e(FE,UFe),e(UFe,Nyr),e(FE,qyr),e(FE,ZJ),e(ZJ,jyr),e(FE,Dyr),e(ce,Gyr),e(ce,TE),e(TE,JFe),e(JFe,Oyr),e(TE,Vyr),e(TE,eY),e(eY,Xyr),e(TE,zyr),e(ce,Wyr),e(ce,ME),e(ME,YFe),e(YFe,Qyr),e(ME,Hyr),e(ME,oY),e(oY,Uyr),e(ME,Jyr),e(ce,Yyr),e(ce,EE),e(EE,KFe),e(KFe,Kyr),e(EE,Zyr),e(EE,rY),e(rY,e8r),e(EE,o8r),e(ce,r8r),e(ce,CE),e(CE,ZFe),e(ZFe,t8r),e(CE,a8r),e(CE,tY),e(tY,n8r),e(CE,s8r),e(ce,l8r),e(ce,wE),e(wE,eTe),e(eTe,i8r),e(wE,d8r),e(wE,aY),e(aY,c8r),e(wE,f8r),e(ce,m8r),e(ce,AE),e(AE,oTe),e(oTe,g8r),e(AE,h8r),e(AE,nY),e(nY,p8r),e(AE,_8r),e(ce,u8r),e(ce,LE),e(LE,rTe),e(rTe,b8r),e(LE,v8r),e(LE,sY),e(sY,F8r),e(LE,T8r),e(ce,M8r),e(ce,yE),e(yE,tTe),e(tTe,E8r),e(yE,C8r),e(yE,lY),e(lY,w8r),e(yE,A8r),e(ce,L8r),e(ce,xE),e(xE,aTe),e(aTe,y8r),e(xE,x8r),e(xE,iY),e(iY,$8r),e(xE,k8r),e(ce,S8r),e(ce,$E),e($E,nTe),e(nTe,R8r),e($E,P8r),e($E,dY),e(dY,B8r),e($E,I8r),e(ce,N8r),e(ce,kE),e(kE,sTe),e(sTe,q8r),e(kE,j8r),e(kE,cY),e(cY,D8r),e(kE,G8r),e(ce,O8r),e(ce,SE),e(SE,lTe),e(lTe,V8r),e(SE,X8r),e(SE,fY),e(fY,z8r),e(SE,W8r),e(ce,Q8r),e(ce,RE),e(RE,iTe),e(iTe,H8r),e(RE,U8r),e(RE,mY),e(mY,J8r),e(RE,Y8r),e(ce,K8r),e(ce,PE),e(PE,dTe),e(dTe,Z8r),e(PE,e9r),e(PE,gY),e(gY,o9r),e(PE,r9r),e(ce,t9r),e(ce,BE),e(BE,cTe),e(cTe,a9r),e(BE,n9r),e(BE,hY),e(hY,s9r),e(BE,l9r),e(ce,i9r),e(ce,IE),e(IE,fTe),e(fTe,d9r),e(IE,c9r),e(IE,pY),e(pY,f9r),e(IE,m9r),e(ce,g9r),e(ce,NE),e(NE,mTe),e(mTe,h9r),e(NE,p9r),e(NE,_Y),e(_Y,_9r),e(NE,u9r),e(ce,b9r),e(ce,qE),e(qE,gTe),e(gTe,v9r),e(qE,F9r),e(qE,uY),e(uY,T9r),e(qE,M9r),e(ce,E9r),e(ce,jE),e(jE,hTe),e(hTe,C9r),e(jE,w9r),e(jE,bY),e(bY,A9r),e(jE,L9r),e(Ir,y9r),M(DE,Ir,null),b(f,mGe,u),b(f,wc,u),e(wc,GE),e(GE,pTe),M(q9,pTe,null),e(wc,x9r),e(wc,_Te),e(_Te,$9r),b(f,gGe,u),b(f,dr,u),M(j9,dr,null),e(dr,k9r),e(dr,Ac),e(Ac,S9r),e(Ac,vY),e(vY,R9r),e(Ac,P9r),e(Ac,FY),e(FY,B9r),e(Ac,I9r),e(dr,N9r),e(dr,D9),e(D9,q9r),e(D9,uTe),e(uTe,j9r),e(D9,D9r),e(dr,G9r),e(dr,Dt),M(G9,Dt,null),e(Dt,O9r),e(Dt,bTe),e(bTe,V9r),e(Dt,X9r),e(Dt,Lc),e(Lc,z9r),e(Lc,vTe),e(vTe,W9r),e(Lc,Q9r),e(Lc,TY),e(TY,H9r),e(Lc,U9r),e(Dt,J9r),M(OE,Dt,null),e(dr,Y9r),e(dr,Nr),M(O9,Nr,null),e(Nr,K9r),e(Nr,FTe),e(FTe,Z9r),e(Nr,exr),e(Nr,mn),e(mn,oxr),e(mn,TTe),e(TTe,rxr),e(mn,txr),e(mn,MTe),e(MTe,axr),e(mn,nxr),e(mn,ETe),e(ETe,sxr),e(mn,lxr),e(Nr,ixr),e(Nr,CTe),e(CTe,VE),e(VE,wTe),e(wTe,dxr),e(VE,cxr),e(VE,MY),e(MY,fxr),e(VE,mxr),e(Nr,gxr),M(XE,Nr,null),b(f,hGe,u),b(f,yc,u),e(yc,zE),e(zE,ATe),M(V9,ATe,null),e(yc,hxr),e(yc,LTe),e(LTe,pxr),b(f,pGe,u),b(f,cr,u),M(X9,cr,null),e(cr,_xr),e(cr,xc),e(xc,uxr),e(xc,EY),e(EY,bxr),e(xc,vxr),e(xc,CY),e(CY,Fxr),e(xc,Txr),e(cr,Mxr),e(cr,z9),e(z9,Exr),e(z9,yTe),e(yTe,Cxr),e(z9,wxr),e(cr,Axr),e(cr,Gt),M(W9,Gt,null),e(Gt,Lxr),e(Gt,xTe),e(xTe,yxr),e(Gt,xxr),e(Gt,$c),e($c,$xr),e($c,$Te),e($Te,kxr),e($c,Sxr),e($c,wY),e(wY,Rxr),e($c,Pxr),e(Gt,Bxr),M(WE,Gt,null),e(cr,Ixr),e(cr,qr),M(Q9,qr,null),e(qr,Nxr),e(qr,kTe),e(kTe,qxr),e(qr,jxr),e(qr,gn),e(gn,Dxr),e(gn,STe),e(STe,Gxr),e(gn,Oxr),e(gn,RTe),e(RTe,Vxr),e(gn,Xxr),e(gn,PTe),e(PTe,zxr),e(gn,Wxr),e(qr,Qxr),e(qr,BTe),e(BTe,QE),e(QE,ITe),e(ITe,Hxr),e(QE,Uxr),e(QE,AY),e(AY,Jxr),e(QE,Yxr),e(qr,Kxr),M(HE,qr,null),b(f,_Ge,u),b(f,kc,u),e(kc,UE),e(UE,NTe),M(H9,NTe,null),e(kc,Zxr),e(kc,qTe),e(qTe,e$r),b(f,uGe,u),b(f,fr,u),M(U9,fr,null),e(fr,o$r),e(fr,Sc),e(Sc,r$r),e(Sc,LY),e(LY,t$r),e(Sc,a$r),e(Sc,yY),e(yY,n$r),e(Sc,s$r),e(fr,l$r),e(fr,J9),e(J9,i$r),e(J9,jTe),e(jTe,d$r),e(J9,c$r),e(fr,f$r),e(fr,Ot),M(Y9,Ot,null),e(Ot,m$r),e(Ot,DTe),e(DTe,g$r),e(Ot,h$r),e(Ot,Rc),e(Rc,p$r),e(Rc,GTe),e(GTe,_$r),e(Rc,u$r),e(Rc,xY),e(xY,b$r),e(Rc,v$r),e(Ot,F$r),M(JE,Ot,null),e(fr,T$r),e(fr,jr),M(K9,jr,null),e(jr,M$r),e(jr,OTe),e(OTe,E$r),e(jr,C$r),e(jr,hn),e(hn,w$r),e(hn,VTe),e(VTe,A$r),e(hn,L$r),e(hn,XTe),e(XTe,y$r),e(hn,x$r),e(hn,zTe),e(zTe,$$r),e(hn,k$r),e(jr,S$r),e(jr,re),e(re,YE),e(YE,WTe),e(WTe,R$r),e(YE,P$r),e(YE,$Y),e($Y,B$r),e(YE,I$r),e(re,N$r),e(re,KE),e(KE,QTe),e(QTe,q$r),e(KE,j$r),e(KE,kY),e(kY,D$r),e(KE,G$r),e(re,O$r),e(re,ZE),e(ZE,HTe),e(HTe,V$r),e(ZE,X$r),e(ZE,SY),e(SY,z$r),e(ZE,W$r),e(re,Q$r),e(re,eC),e(eC,UTe),e(UTe,H$r),e(eC,U$r),e(eC,RY),e(RY,J$r),e(eC,Y$r),e(re,K$r),e(re,oC),e(oC,JTe),e(JTe,Z$r),e(oC,ekr),e(oC,PY),e(PY,okr),e(oC,rkr),e(re,tkr),e(re,rC),e(rC,YTe),e(YTe,akr),e(rC,nkr),e(rC,BY),e(BY,skr),e(rC,lkr),e(re,ikr),e(re,tC),e(tC,KTe),e(KTe,dkr),e(tC,ckr),e(tC,IY),e(IY,fkr),e(tC,mkr),e(re,gkr),e(re,aC),e(aC,ZTe),e(ZTe,hkr),e(aC,pkr),e(aC,NY),e(NY,_kr),e(aC,ukr),e(re,bkr),e(re,nC),e(nC,e7e),e(e7e,vkr),e(nC,Fkr),e(nC,qY),e(qY,Tkr),e(nC,Mkr),e(re,Ekr),e(re,sC),e(sC,o7e),e(o7e,Ckr),e(sC,wkr),e(sC,jY),e(jY,Akr),e(sC,Lkr),e(re,ykr),e(re,lC),e(lC,r7e),e(r7e,xkr),e(lC,$kr),e(lC,DY),e(DY,kkr),e(lC,Skr),e(re,Rkr),e(re,iC),e(iC,t7e),e(t7e,Pkr),e(iC,Bkr),e(iC,GY),e(GY,Ikr),e(iC,Nkr),e(re,qkr),e(re,dC),e(dC,a7e),e(a7e,jkr),e(dC,Dkr),e(dC,OY),e(OY,Gkr),e(dC,Okr),e(re,Vkr),e(re,cC),e(cC,n7e),e(n7e,Xkr),e(cC,zkr),e(cC,VY),e(VY,Wkr),e(cC,Qkr),e(re,Hkr),e(re,fC),e(fC,s7e),e(s7e,Ukr),e(fC,Jkr),e(fC,XY),e(XY,Ykr),e(fC,Kkr),e(re,Zkr),e(re,mC),e(mC,l7e),e(l7e,eSr),e(mC,oSr),e(mC,zY),e(zY,rSr),e(mC,tSr),e(re,aSr),e(re,gC),e(gC,i7e),e(i7e,nSr),e(gC,sSr),e(gC,WY),e(WY,lSr),e(gC,iSr),e(re,dSr),e(re,hC),e(hC,d7e),e(d7e,cSr),e(hC,fSr),e(hC,QY),e(QY,mSr),e(hC,gSr),e(re,hSr),e(re,pC),e(pC,c7e),e(c7e,pSr),e(pC,_Sr),e(pC,HY),e(HY,uSr),e(pC,bSr),e(re,vSr),e(re,_C),e(_C,f7e),e(f7e,FSr),e(_C,TSr),e(_C,UY),e(UY,MSr),e(_C,ESr),e(re,CSr),e(re,uC),e(uC,m7e),e(m7e,wSr),e(uC,ASr),e(uC,JY),e(JY,LSr),e(uC,ySr),e(re,xSr),e(re,bC),e(bC,g7e),e(g7e,$Sr),e(bC,kSr),e(bC,YY),e(YY,SSr),e(bC,RSr),e(re,PSr),e(re,vC),e(vC,h7e),e(h7e,BSr),e(vC,ISr),e(vC,KY),e(KY,NSr),e(vC,qSr),e(re,jSr),e(re,FC),e(FC,p7e),e(p7e,DSr),e(FC,GSr),e(FC,ZY),e(ZY,OSr),e(FC,VSr),e(re,XSr),e(re,TC),e(TC,_7e),e(_7e,zSr),e(TC,WSr),e(TC,eK),e(eK,QSr),e(TC,HSr),e(re,USr),e(re,MC),e(MC,u7e),e(u7e,JSr),e(MC,YSr),e(MC,oK),e(oK,KSr),e(MC,ZSr),e(jr,eRr),M(EC,jr,null),b(f,bGe,u),b(f,Pc,u),e(Pc,CC),e(CC,b7e),M(Z9,b7e,null),e(Pc,oRr),e(Pc,v7e),e(v7e,rRr),b(f,vGe,u),b(f,mr,u),M(ex,mr,null),e(mr,tRr),e(mr,Bc),e(Bc,aRr),e(Bc,rK),e(rK,nRr),e(Bc,sRr),e(Bc,tK),e(tK,lRr),e(Bc,iRr),e(mr,dRr),e(mr,ox),e(ox,cRr),e(ox,F7e),e(F7e,fRr),e(ox,mRr),e(mr,gRr),e(mr,Vt),M(rx,Vt,null),e(Vt,hRr),e(Vt,T7e),e(T7e,pRr),e(Vt,_Rr),e(Vt,Ic),e(Ic,uRr),e(Ic,M7e),e(M7e,bRr),e(Ic,vRr),e(Ic,aK),e(aK,FRr),e(Ic,TRr),e(Vt,MRr),M(wC,Vt,null),e(mr,ERr),e(mr,Dr),M(tx,Dr,null),e(Dr,CRr),e(Dr,E7e),e(E7e,wRr),e(Dr,ARr),e(Dr,pn),e(pn,LRr),e(pn,C7e),e(C7e,yRr),e(pn,xRr),e(pn,w7e),e(w7e,$Rr),e(pn,kRr),e(pn,A7e),e(A7e,SRr),e(pn,RRr),e(Dr,PRr),e(Dr,xe),e(xe,AC),e(AC,L7e),e(L7e,BRr),e(AC,IRr),e(AC,nK),e(nK,NRr),e(AC,qRr),e(xe,jRr),e(xe,LC),e(LC,y7e),e(y7e,DRr),e(LC,GRr),e(LC,sK),e(sK,ORr),e(LC,VRr),e(xe,XRr),e(xe,yC),e(yC,x7e),e(x7e,zRr),e(yC,WRr),e(yC,lK),e(lK,QRr),e(yC,HRr),e(xe,URr),e(xe,xC),e(xC,$7e),e($7e,JRr),e(xC,YRr),e(xC,iK),e(iK,KRr),e(xC,ZRr),e(xe,ePr),e(xe,$C),e($C,k7e),e(k7e,oPr),e($C,rPr),e($C,dK),e(dK,tPr),e($C,aPr),e(xe,nPr),e(xe,kC),e(kC,S7e),e(S7e,sPr),e(kC,lPr),e(kC,cK),e(cK,iPr),e(kC,dPr),e(xe,cPr),e(xe,SC),e(SC,R7e),e(R7e,fPr),e(SC,mPr),e(SC,fK),e(fK,gPr),e(SC,hPr),e(xe,pPr),e(xe,RC),e(RC,P7e),e(P7e,_Pr),e(RC,uPr),e(RC,mK),e(mK,bPr),e(RC,vPr),e(xe,FPr),e(xe,PC),e(PC,B7e),e(B7e,TPr),e(PC,MPr),e(PC,gK),e(gK,EPr),e(PC,CPr),e(xe,wPr),e(xe,BC),e(BC,I7e),e(I7e,APr),e(BC,LPr),e(BC,hK),e(hK,yPr),e(BC,xPr),e(Dr,$Pr),M(IC,Dr,null),b(f,FGe,u),b(f,Nc,u),e(Nc,NC),e(NC,N7e),M(ax,N7e,null),e(Nc,kPr),e(Nc,q7e),e(q7e,SPr),b(f,TGe,u),b(f,gr,u),M(nx,gr,null),e(gr,RPr),e(gr,qc),e(qc,PPr),e(qc,pK),e(pK,BPr),e(qc,IPr),e(qc,_K),e(_K,NPr),e(qc,qPr),e(gr,jPr),e(gr,sx),e(sx,DPr),e(sx,j7e),e(j7e,GPr),e(sx,OPr),e(gr,VPr),e(gr,Xt),M(lx,Xt,null),e(Xt,XPr),e(Xt,D7e),e(D7e,zPr),e(Xt,WPr),e(Xt,jc),e(jc,QPr),e(jc,G7e),e(G7e,HPr),e(jc,UPr),e(jc,uK),e(uK,JPr),e(jc,YPr),e(Xt,KPr),M(qC,Xt,null),e(gr,ZPr),e(gr,Gr),M(ix,Gr,null),e(Gr,eBr),e(Gr,O7e),e(O7e,oBr),e(Gr,rBr),e(Gr,_n),e(_n,tBr),e(_n,V7e),e(V7e,aBr),e(_n,nBr),e(_n,X7e),e(X7e,sBr),e(_n,lBr),e(_n,z7e),e(z7e,iBr),e(_n,dBr),e(Gr,cBr),e(Gr,Ee),e(Ee,jC),e(jC,W7e),e(W7e,fBr),e(jC,mBr),e(jC,bK),e(bK,gBr),e(jC,hBr),e(Ee,pBr),e(Ee,DC),e(DC,Q7e),e(Q7e,_Br),e(DC,uBr),e(DC,vK),e(vK,bBr),e(DC,vBr),e(Ee,FBr),e(Ee,GC),e(GC,H7e),e(H7e,TBr),e(GC,MBr),e(GC,FK),e(FK,EBr),e(GC,CBr),e(Ee,wBr),e(Ee,OC),e(OC,U7e),e(U7e,ABr),e(OC,LBr),e(OC,TK),e(TK,yBr),e(OC,xBr),e(Ee,$Br),e(Ee,VC),e(VC,J7e),e(J7e,kBr),e(VC,SBr),e(VC,MK),e(MK,RBr),e(VC,PBr),e(Ee,BBr),e(Ee,XC),e(XC,Y7e),e(Y7e,IBr),e(XC,NBr),e(XC,EK),e(EK,qBr),e(XC,jBr),e(Ee,DBr),e(Ee,zC),e(zC,K7e),e(K7e,GBr),e(zC,OBr),e(zC,CK),e(CK,VBr),e(zC,XBr),e(Ee,zBr),e(Ee,WC),e(WC,Z7e),e(Z7e,WBr),e(WC,QBr),e(WC,wK),e(wK,HBr),e(WC,UBr),e(Ee,JBr),e(Ee,QC),e(QC,eMe),e(eMe,YBr),e(QC,KBr),e(QC,AK),e(AK,ZBr),e(QC,eIr),e(Ee,oIr),e(Ee,HC),e(HC,oMe),e(oMe,rIr),e(HC,tIr),e(HC,LK),e(LK,aIr),e(HC,nIr),e(Ee,sIr),e(Ee,UC),e(UC,rMe),e(rMe,lIr),e(UC,iIr),e(UC,yK),e(yK,dIr),e(UC,cIr),e(Ee,fIr),e(Ee,JC),e(JC,tMe),e(tMe,mIr),e(JC,gIr),e(JC,xK),e(xK,hIr),e(JC,pIr),e(Gr,_Ir),M(YC,Gr,null),b(f,MGe,u),b(f,Dc,u),e(Dc,KC),e(KC,aMe),M(dx,aMe,null),e(Dc,uIr),e(Dc,nMe),e(nMe,bIr),b(f,EGe,u),b(f,hr,u),M(cx,hr,null),e(hr,vIr),e(hr,Gc),e(Gc,FIr),e(Gc,$K),e($K,TIr),e(Gc,MIr),e(Gc,kK),e(kK,EIr),e(Gc,CIr),e(hr,wIr),e(hr,fx),e(fx,AIr),e(fx,sMe),e(sMe,LIr),e(fx,yIr),e(hr,xIr),e(hr,zt),M(mx,zt,null),e(zt,$Ir),e(zt,lMe),e(lMe,kIr),e(zt,SIr),e(zt,Oc),e(Oc,RIr),e(Oc,iMe),e(iMe,PIr),e(Oc,BIr),e(Oc,SK),e(SK,IIr),e(Oc,NIr),e(zt,qIr),M(ZC,zt,null),e(hr,jIr),e(hr,Or),M(gx,Or,null),e(Or,DIr),e(Or,dMe),e(dMe,GIr),e(Or,OIr),e(Or,un),e(un,VIr),e(un,cMe),e(cMe,XIr),e(un,zIr),e(un,fMe),e(fMe,WIr),e(un,QIr),e(un,mMe),e(mMe,HIr),e(un,UIr),e(Or,JIr),e(Or,$e),e($e,e0),e(e0,gMe),e(gMe,YIr),e(e0,KIr),e(e0,RK),e(RK,ZIr),e(e0,eNr),e($e,oNr),e($e,o0),e(o0,hMe),e(hMe,rNr),e(o0,tNr),e(o0,PK),e(PK,aNr),e(o0,nNr),e($e,sNr),e($e,r0),e(r0,pMe),e(pMe,lNr),e(r0,iNr),e(r0,BK),e(BK,dNr),e(r0,cNr),e($e,fNr),e($e,t0),e(t0,_Me),e(_Me,mNr),e(t0,gNr),e(t0,IK),e(IK,hNr),e(t0,pNr),e($e,_Nr),e($e,a0),e(a0,uMe),e(uMe,uNr),e(a0,bNr),e(a0,NK),e(NK,vNr),e(a0,FNr),e($e,TNr),e($e,n0),e(n0,bMe),e(bMe,MNr),e(n0,ENr),e(n0,qK),e(qK,CNr),e(n0,wNr),e($e,ANr),e($e,s0),e(s0,vMe),e(vMe,LNr),e(s0,yNr),e(s0,jK),e(jK,xNr),e(s0,$Nr),e($e,kNr),e($e,l0),e(l0,FMe),e(FMe,SNr),e(l0,RNr),e(l0,DK),e(DK,PNr),e(l0,BNr),e($e,INr),e($e,i0),e(i0,TMe),e(TMe,NNr),e(i0,qNr),e(i0,GK),e(GK,jNr),e(i0,DNr),e($e,GNr),e($e,d0),e(d0,MMe),e(MMe,ONr),e(d0,VNr),e(d0,OK),e(OK,XNr),e(d0,zNr),e(Or,WNr),M(c0,Or,null),b(f,CGe,u),b(f,Vc,u),e(Vc,f0),e(f0,EMe),M(hx,EMe,null),e(Vc,QNr),e(Vc,CMe),e(CMe,HNr),b(f,wGe,u),b(f,pr,u),M(px,pr,null),e(pr,UNr),e(pr,Xc),e(Xc,JNr),e(Xc,VK),e(VK,YNr),e(Xc,KNr),e(Xc,XK),e(XK,ZNr),e(Xc,eqr),e(pr,oqr),e(pr,_x),e(_x,rqr),e(_x,wMe),e(wMe,tqr),e(_x,aqr),e(pr,nqr),e(pr,Wt),M(ux,Wt,null),e(Wt,sqr),e(Wt,AMe),e(AMe,lqr),e(Wt,iqr),e(Wt,zc),e(zc,dqr),e(zc,LMe),e(LMe,cqr),e(zc,fqr),e(zc,zK),e(zK,mqr),e(zc,gqr),e(Wt,hqr),M(m0,Wt,null),e(pr,pqr),e(pr,Vr),M(bx,Vr,null),e(Vr,_qr),e(Vr,yMe),e(yMe,uqr),e(Vr,bqr),e(Vr,bn),e(bn,vqr),e(bn,xMe),e(xMe,Fqr),e(bn,Tqr),e(bn,$Me),e($Me,Mqr),e(bn,Eqr),e(bn,kMe),e(kMe,Cqr),e(bn,wqr),e(Vr,Aqr),e(Vr,Pe),e(Pe,g0),e(g0,SMe),e(SMe,Lqr),e(g0,yqr),e(g0,WK),e(WK,xqr),e(g0,$qr),e(Pe,kqr),e(Pe,h0),e(h0,RMe),e(RMe,Sqr),e(h0,Rqr),e(h0,QK),e(QK,Pqr),e(h0,Bqr),e(Pe,Iqr),e(Pe,p0),e(p0,PMe),e(PMe,Nqr),e(p0,qqr),e(p0,HK),e(HK,jqr),e(p0,Dqr),e(Pe,Gqr),e(Pe,_0),e(_0,BMe),e(BMe,Oqr),e(_0,Vqr),e(_0,UK),e(UK,Xqr),e(_0,zqr),e(Pe,Wqr),e(Pe,u0),e(u0,IMe),e(IMe,Qqr),e(u0,Hqr),e(u0,JK),e(JK,Uqr),e(u0,Jqr),e(Pe,Yqr),e(Pe,b0),e(b0,NMe),e(NMe,Kqr),e(b0,Zqr),e(b0,YK),e(YK,ejr),e(b0,ojr),e(Pe,rjr),e(Pe,v0),e(v0,qMe),e(qMe,tjr),e(v0,ajr),e(v0,KK),e(KK,njr),e(v0,sjr),e(Pe,ljr),e(Pe,F0),e(F0,jMe),e(jMe,ijr),e(F0,djr),e(F0,ZK),e(ZK,cjr),e(F0,fjr),e(Pe,mjr),e(Pe,T0),e(T0,DMe),e(DMe,gjr),e(T0,hjr),e(T0,eZ),e(eZ,pjr),e(T0,_jr),e(Vr,ujr),M(M0,Vr,null),b(f,AGe,u),b(f,Wc,u),e(Wc,E0),e(E0,GMe),M(vx,GMe,null),e(Wc,bjr),e(Wc,OMe),e(OMe,vjr),b(f,LGe,u),b(f,_r,u),M(Fx,_r,null),e(_r,Fjr),e(_r,Qc),e(Qc,Tjr),e(Qc,oZ),e(oZ,Mjr),e(Qc,Ejr),e(Qc,rZ),e(rZ,Cjr),e(Qc,wjr),e(_r,Ajr),e(_r,Tx),e(Tx,Ljr),e(Tx,VMe),e(VMe,yjr),e(Tx,xjr),e(_r,$jr),e(_r,Qt),M(Mx,Qt,null),e(Qt,kjr),e(Qt,XMe),e(XMe,Sjr),e(Qt,Rjr),e(Qt,Hc),e(Hc,Pjr),e(Hc,zMe),e(zMe,Bjr),e(Hc,Ijr),e(Hc,tZ),e(tZ,Njr),e(Hc,qjr),e(Qt,jjr),M(C0,Qt,null),e(_r,Djr),e(_r,Xr),M(Ex,Xr,null),e(Xr,Gjr),e(Xr,WMe),e(WMe,Ojr),e(Xr,Vjr),e(Xr,vn),e(vn,Xjr),e(vn,QMe),e(QMe,zjr),e(vn,Wjr),e(vn,HMe),e(HMe,Qjr),e(vn,Hjr),e(vn,UMe),e(UMe,Ujr),e(vn,Jjr),e(Xr,Yjr),e(Xr,ke),e(ke,w0),e(w0,JMe),e(JMe,Kjr),e(w0,Zjr),e(w0,aZ),e(aZ,eDr),e(w0,oDr),e(ke,rDr),e(ke,A0),e(A0,YMe),e(YMe,tDr),e(A0,aDr),e(A0,nZ),e(nZ,nDr),e(A0,sDr),e(ke,lDr),e(ke,L0),e(L0,KMe),e(KMe,iDr),e(L0,dDr),e(L0,sZ),e(sZ,cDr),e(L0,fDr),e(ke,mDr),e(ke,y0),e(y0,ZMe),e(ZMe,gDr),e(y0,hDr),e(y0,lZ),e(lZ,pDr),e(y0,_Dr),e(ke,uDr),e(ke,x0),e(x0,eEe),e(eEe,bDr),e(x0,vDr),e(x0,iZ),e(iZ,FDr),e(x0,TDr),e(ke,MDr),e(ke,$0),e($0,oEe),e(oEe,EDr),e($0,CDr),e($0,dZ),e(dZ,wDr),e($0,ADr),e(ke,LDr),e(ke,k0),e(k0,rEe),e(rEe,yDr),e(k0,xDr),e(k0,cZ),e(cZ,$Dr),e(k0,kDr),e(ke,SDr),e(ke,S0),e(S0,tEe),e(tEe,RDr),e(S0,PDr),e(S0,fZ),e(fZ,BDr),e(S0,IDr),e(ke,NDr),e(ke,R0),e(R0,aEe),e(aEe,qDr),e(R0,jDr),e(R0,mZ),e(mZ,DDr),e(R0,GDr),e(ke,ODr),e(ke,P0),e(P0,nEe),e(nEe,VDr),e(P0,XDr),e(P0,gZ),e(gZ,zDr),e(P0,WDr),e(Xr,QDr),M(B0,Xr,null),b(f,yGe,u),b(f,Uc,u),e(Uc,I0),e(I0,sEe),M(Cx,sEe,null),e(Uc,HDr),e(Uc,lEe),e(lEe,UDr),b(f,xGe,u),b(f,ur,u),M(wx,ur,null),e(ur,JDr),e(ur,Jc),e(Jc,YDr),e(Jc,hZ),e(hZ,KDr),e(Jc,ZDr),e(Jc,pZ),e(pZ,eGr),e(Jc,oGr),e(ur,rGr),e(ur,Ax),e(Ax,tGr),e(Ax,iEe),e(iEe,aGr),e(Ax,nGr),e(ur,sGr),e(ur,Ht),M(Lx,Ht,null),e(Ht,lGr),e(Ht,dEe),e(dEe,iGr),e(Ht,dGr),e(Ht,Yc),e(Yc,cGr),e(Yc,cEe),e(cEe,fGr),e(Yc,mGr),e(Yc,_Z),e(_Z,gGr),e(Yc,hGr),e(Ht,pGr),M(N0,Ht,null),e(ur,_Gr),e(ur,zr),M(yx,zr,null),e(zr,uGr),e(zr,fEe),e(fEe,bGr),e(zr,vGr),e(zr,Fn),e(Fn,FGr),e(Fn,mEe),e(mEe,TGr),e(Fn,MGr),e(Fn,gEe),e(gEe,EGr),e(Fn,CGr),e(Fn,hEe),e(hEe,wGr),e(Fn,AGr),e(zr,LGr),e(zr,Se),e(Se,q0),e(q0,pEe),e(pEe,yGr),e(q0,xGr),e(q0,uZ),e(uZ,$Gr),e(q0,kGr),e(Se,SGr),e(Se,j0),e(j0,_Ee),e(_Ee,RGr),e(j0,PGr),e(j0,bZ),e(bZ,BGr),e(j0,IGr),e(Se,NGr),e(Se,D0),e(D0,uEe),e(uEe,qGr),e(D0,jGr),e(D0,vZ),e(vZ,DGr),e(D0,GGr),e(Se,OGr),e(Se,G0),e(G0,bEe),e(bEe,VGr),e(G0,XGr),e(G0,FZ),e(FZ,zGr),e(G0,WGr),e(Se,QGr),e(Se,O0),e(O0,vEe),e(vEe,HGr),e(O0,UGr),e(O0,TZ),e(TZ,JGr),e(O0,YGr),e(Se,KGr),e(Se,V0),e(V0,FEe),e(FEe,ZGr),e(V0,eOr),e(V0,MZ),e(MZ,oOr),e(V0,rOr),e(Se,tOr),e(Se,X0),e(X0,TEe),e(TEe,aOr),e(X0,nOr),e(X0,EZ),e(EZ,sOr),e(X0,lOr),e(Se,iOr),e(Se,z0),e(z0,MEe),e(MEe,dOr),e(z0,cOr),e(z0,CZ),e(CZ,fOr),e(z0,mOr),e(Se,gOr),e(Se,W0),e(W0,EEe),e(EEe,hOr),e(W0,pOr),e(W0,wZ),e(wZ,_Or),e(W0,uOr),e(Se,bOr),e(Se,Q0),e(Q0,CEe),e(CEe,vOr),e(Q0,FOr),e(Q0,AZ),e(AZ,TOr),e(Q0,MOr),e(zr,EOr),M(H0,zr,null),b(f,$Ge,u),b(f,Kc,u),e(Kc,U0),e(U0,wEe),M(xx,wEe,null),e(Kc,COr),e(Kc,AEe),e(AEe,wOr),b(f,kGe,u),b(f,br,u),M($x,br,null),e(br,AOr),e(br,Zc),e(Zc,LOr),e(Zc,LZ),e(LZ,yOr),e(Zc,xOr),e(Zc,yZ),e(yZ,$Or),e(Zc,kOr),e(br,SOr),e(br,kx),e(kx,ROr),e(kx,LEe),e(LEe,POr),e(kx,BOr),e(br,IOr),e(br,Ut),M(Sx,Ut,null),e(Ut,NOr),e(Ut,yEe),e(yEe,qOr),e(Ut,jOr),e(Ut,ef),e(ef,DOr),e(ef,xEe),e(xEe,GOr),e(ef,OOr),e(ef,xZ),e(xZ,VOr),e(ef,XOr),e(Ut,zOr),M(J0,Ut,null),e(br,WOr),e(br,Wr),M(Rx,Wr,null),e(Wr,QOr),e(Wr,$Ee),e($Ee,HOr),e(Wr,UOr),e(Wr,Tn),e(Tn,JOr),e(Tn,kEe),e(kEe,YOr),e(Tn,KOr),e(Tn,SEe),e(SEe,ZOr),e(Tn,eVr),e(Tn,REe),e(REe,oVr),e(Tn,rVr),e(Wr,tVr),e(Wr,Oe),e(Oe,Y0),e(Y0,PEe),e(PEe,aVr),e(Y0,nVr),e(Y0,$Z),e($Z,sVr),e(Y0,lVr),e(Oe,iVr),e(Oe,K0),e(K0,BEe),e(BEe,dVr),e(K0,cVr),e(K0,kZ),e(kZ,fVr),e(K0,mVr),e(Oe,gVr),e(Oe,Z0),e(Z0,IEe),e(IEe,hVr),e(Z0,pVr),e(Z0,SZ),e(SZ,_Vr),e(Z0,uVr),e(Oe,bVr),e(Oe,ew),e(ew,NEe),e(NEe,vVr),e(ew,FVr),e(ew,RZ),e(RZ,TVr),e(ew,MVr),e(Oe,EVr),e(Oe,ow),e(ow,qEe),e(qEe,CVr),e(ow,wVr),e(ow,PZ),e(PZ,AVr),e(ow,LVr),e(Oe,yVr),e(Oe,rw),e(rw,jEe),e(jEe,xVr),e(rw,$Vr),e(rw,BZ),e(BZ,kVr),e(rw,SVr),e(Oe,RVr),e(Oe,tw),e(tw,DEe),e(DEe,PVr),e(tw,BVr),e(tw,IZ),e(IZ,IVr),e(tw,NVr),e(Oe,qVr),e(Oe,aw),e(aw,GEe),e(GEe,jVr),e(aw,DVr),e(aw,NZ),e(NZ,GVr),e(aw,OVr),e(Wr,VVr),M(nw,Wr,null),b(f,SGe,u),b(f,of,u),e(of,sw),e(sw,OEe),M(Px,OEe,null),e(of,XVr),e(of,VEe),e(VEe,zVr),b(f,RGe,u),b(f,vr,u),M(Bx,vr,null),e(vr,WVr),e(vr,rf),e(rf,QVr),e(rf,qZ),e(qZ,HVr),e(rf,UVr),e(rf,jZ),e(jZ,JVr),e(rf,YVr),e(vr,KVr),e(vr,Ix),e(Ix,ZVr),e(Ix,XEe),e(XEe,eXr),e(Ix,oXr),e(vr,rXr),e(vr,Jt),M(Nx,Jt,null),e(Jt,tXr),e(Jt,zEe),e(zEe,aXr),e(Jt,nXr),e(Jt,tf),e(tf,sXr),e(tf,WEe),e(WEe,lXr),e(tf,iXr),e(tf,DZ),e(DZ,dXr),e(tf,cXr),e(Jt,fXr),M(lw,Jt,null),e(vr,mXr),e(vr,Qr),M(qx,Qr,null),e(Qr,gXr),e(Qr,QEe),e(QEe,hXr),e(Qr,pXr),e(Qr,Mn),e(Mn,_Xr),e(Mn,HEe),e(HEe,uXr),e(Mn,bXr),e(Mn,UEe),e(UEe,vXr),e(Mn,FXr),e(Mn,JEe),e(JEe,TXr),e(Mn,MXr),e(Qr,EXr),e(Qr,Ve),e(Ve,iw),e(iw,YEe),e(YEe,CXr),e(iw,wXr),e(iw,GZ),e(GZ,AXr),e(iw,LXr),e(Ve,yXr),e(Ve,dw),e(dw,KEe),e(KEe,xXr),e(dw,$Xr),e(dw,OZ),e(OZ,kXr),e(dw,SXr),e(Ve,RXr),e(Ve,cw),e(cw,ZEe),e(ZEe,PXr),e(cw,BXr),e(cw,VZ),e(VZ,IXr),e(cw,NXr),e(Ve,qXr),e(Ve,fw),e(fw,eCe),e(eCe,jXr),e(fw,DXr),e(fw,XZ),e(XZ,GXr),e(fw,OXr),e(Ve,VXr),e(Ve,mw),e(mw,oCe),e(oCe,XXr),e(mw,zXr),e(mw,zZ),e(zZ,WXr),e(mw,QXr),e(Ve,HXr),e(Ve,gw),e(gw,rCe),e(rCe,UXr),e(gw,JXr),e(gw,WZ),e(WZ,YXr),e(gw,KXr),e(Ve,ZXr),e(Ve,hw),e(hw,tCe),e(tCe,ezr),e(hw,ozr),e(hw,QZ),e(QZ,rzr),e(hw,tzr),e(Ve,azr),e(Ve,pw),e(pw,aCe),e(aCe,nzr),e(pw,szr),e(pw,HZ),e(HZ,lzr),e(pw,izr),e(Qr,dzr),M(_w,Qr,null),b(f,PGe,u),b(f,af,u),e(af,uw),e(uw,nCe),M(jx,nCe,null),e(af,czr),e(af,sCe),e(sCe,fzr),b(f,BGe,u),b(f,Fr,u),M(Dx,Fr,null),e(Fr,mzr),e(Fr,nf),e(nf,gzr),e(nf,UZ),e(UZ,hzr),e(nf,pzr),e(nf,JZ),e(JZ,_zr),e(nf,uzr),e(Fr,bzr),e(Fr,Gx),e(Gx,vzr),e(Gx,lCe),e(lCe,Fzr),e(Gx,Tzr),e(Fr,Mzr),e(Fr,Yt),M(Ox,Yt,null),e(Yt,Ezr),e(Yt,iCe),e(iCe,Czr),e(Yt,wzr),e(Yt,sf),e(sf,Azr),e(sf,dCe),e(dCe,Lzr),e(sf,yzr),e(sf,YZ),e(YZ,xzr),e(sf,$zr),e(Yt,kzr),M(bw,Yt,null),e(Fr,Szr),e(Fr,Hr),M(Vx,Hr,null),e(Hr,Rzr),e(Hr,cCe),e(cCe,Pzr),e(Hr,Bzr),e(Hr,En),e(En,Izr),e(En,fCe),e(fCe,Nzr),e(En,qzr),e(En,mCe),e(mCe,jzr),e(En,Dzr),e(En,gCe),e(gCe,Gzr),e(En,Ozr),e(Hr,Vzr),e(Hr,hCe),e(hCe,vw),e(vw,pCe),e(pCe,Xzr),e(vw,zzr),e(vw,KZ),e(KZ,Wzr),e(vw,Qzr),e(Hr,Hzr),M(Fw,Hr,null),b(f,IGe,u),b(f,lf,u),e(lf,Tw),e(Tw,_Ce),M(Xx,_Ce,null),e(lf,Uzr),e(lf,uCe),e(uCe,Jzr),b(f,NGe,u),b(f,Tr,u),M(zx,Tr,null),e(Tr,Yzr),e(Tr,df),e(df,Kzr),e(df,ZZ),e(ZZ,Zzr),e(df,eWr),e(df,eee),e(eee,oWr),e(df,rWr),e(Tr,tWr),e(Tr,Wx),e(Wx,aWr),e(Wx,bCe),e(bCe,nWr),e(Wx,sWr),e(Tr,lWr),e(Tr,Kt),M(Qx,Kt,null),e(Kt,iWr),e(Kt,vCe),e(vCe,dWr),e(Kt,cWr),e(Kt,cf),e(cf,fWr),e(cf,FCe),e(FCe,mWr),e(cf,gWr),e(cf,oee),e(oee,hWr),e(cf,pWr),e(Kt,_Wr),M(Mw,Kt,null),e(Tr,uWr),e(Tr,Ur),M(Hx,Ur,null),e(Ur,bWr),e(Ur,TCe),e(TCe,vWr),e(Ur,FWr),e(Ur,Cn),e(Cn,TWr),e(Cn,MCe),e(MCe,MWr),e(Cn,EWr),e(Cn,ECe),e(ECe,CWr),e(Cn,wWr),e(Cn,CCe),e(CCe,AWr),e(Cn,LWr),e(Ur,yWr),e(Ur,Ux),e(Ux,Ew),e(Ew,wCe),e(wCe,xWr),e(Ew,$Wr),e(Ew,ree),e(ree,kWr),e(Ew,SWr),e(Ux,RWr),e(Ux,Cw),e(Cw,ACe),e(ACe,PWr),e(Cw,BWr),e(Cw,tee),e(tee,IWr),e(Cw,NWr),e(Ur,qWr),M(ww,Ur,null),b(f,qGe,u),b(f,ff,u),e(ff,Aw),e(Aw,LCe),M(Jx,LCe,null),e(ff,jWr),e(ff,yCe),e(yCe,DWr),b(f,jGe,u),b(f,Mr,u),M(Yx,Mr,null),e(Mr,GWr),e(Mr,mf),e(mf,OWr),e(mf,aee),e(aee,VWr),e(mf,XWr),e(mf,nee),e(nee,zWr),e(mf,WWr),e(Mr,QWr),e(Mr,Kx),e(Kx,HWr),e(Kx,xCe),e(xCe,UWr),e(Kx,JWr),e(Mr,YWr),e(Mr,Zt),M(Zx,Zt,null),e(Zt,KWr),e(Zt,$Ce),e($Ce,ZWr),e(Zt,eQr),e(Zt,gf),e(gf,oQr),e(gf,kCe),e(kCe,rQr),e(gf,tQr),e(gf,see),e(see,aQr),e(gf,nQr),e(Zt,sQr),M(Lw,Zt,null),e(Mr,lQr),e(Mr,Jr),M(e$,Jr,null),e(Jr,iQr),e(Jr,SCe),e(SCe,dQr),e(Jr,cQr),e(Jr,wn),e(wn,fQr),e(wn,RCe),e(RCe,mQr),e(wn,gQr),e(wn,PCe),e(PCe,hQr),e(wn,pQr),e(wn,BCe),e(BCe,_Qr),e(wn,uQr),e(Jr,bQr),e(Jr,ICe),e(ICe,yw),e(yw,NCe),e(NCe,vQr),e(yw,FQr),e(yw,lee),e(lee,TQr),e(yw,MQr),e(Jr,EQr),M(xw,Jr,null),DGe=!0},p(f,[u]){const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),Mf.$set(o$);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),xg.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),fh.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),Wh.$set(DCe);const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),Qh.$set(r$);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),gp.$set(GCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),hp.$set(An);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),up.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),_u.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),bu.$set(XCe);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),d1.$set(t$);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),f1.$set(zCe);const a$={};u&2&&(a$.$$scope={dirty:u,ctx:f}),Y1.$set(a$);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),Z1.$set(WCe);const n$={};u&2&&(n$.$$scope={dirty:u,ctx:f}),Nb.$set(n$);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),jb.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),t2.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),n2.$set(UCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),e4.$set(hf);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),r4.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),R4.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),B4.$set(KCe);const s$={};u&2&&(s$.$$scope={dirty:u,ctx:f}),O4.$set(s$);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),X4.$set(ZCe);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),Av.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),yv.$set(o0e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),_5.$set(ot);const l$={};u&2&&(l$.$$scope={dirty:u,ctx:f}),b5.$set(l$);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),T5.$set(r0e);const i$={};u&2&&(i$.$$scope={dirty:u,ctx:f}),E5.$set(i$);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),q5.$set(t0e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),D5.$set(rt);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),V5.$set(a0e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),z5.$set(pf);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),r3.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),a3.$set(s0e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),f3.$set(L);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),g3.$set($w);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),w3.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),L3.$set(i0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),k3.$set(kw);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),R3.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),D3.$set(c0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),O3.$set(Sw);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),Q3.$set(f0e);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),U3.$set(m0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),Z3.$set(Rw);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),oF.$set(g0e);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),aF.$set(h0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),sF.$set(Pw);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),gF.$set(p0e);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),pF.$set(_0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),bF.$set(Bw);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),FF.$set(u0e);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),gT.$set(b0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),pT.$set(Iw);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),jT.$set(v0e);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),GT.$set(F0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),o7.$set(Nw);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),t7.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),i7.$set(M0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),c7.$set(qw);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),k7.$set(E0e);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),R7.$set(C0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),X7.$set(jw);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),W7.$set(w0e);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),vM.$set(A0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),TM.$set(Dw);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),jM.$set(L0e);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),GM.$set(y0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),XM.$set(Gw);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),WM.$set(x0e);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),HM.$set($0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),JM.$set(Ow);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),uE.$set(k0e);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),vE.$set(S0e);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),DE.$set(Vw);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),OE.$set(R0e);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),XE.$set(P0e);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),WE.$set(Xw);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),HE.$set(B0e);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),JE.$set(I0e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),EC.$set(zw);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),wC.$set(N0e);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),IC.$set(q0e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),qC.$set(Ww);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),YC.$set(j0e);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),ZC.$set(D0e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),c0.$set(Qw);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),m0.$set(G0e);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),M0.$set(O0e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),C0.$set(Hw);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),B0.$set(V0e);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),N0.$set(X0e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),H0.$set(Uw);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),J0.$set(z0e);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),nw.$set(W0e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),lw.$set(Jw);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),_w.$set(Q0e);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),bw.$set(H0e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),Fw.$set(Yw);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),Mw.$set(U0e);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),ww.$set(J0e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),Lw.$set(Kw);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),xw.$set(Y0e)},i(f){DGe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(Mf.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(rL.$$.fragment,f),E(xg.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(iL.$$.fragment,f),E(fh.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(hL.$$.fragment,f),E(Wh.$$.fragment,f),E(Qh.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(FL.$$.fragment,f),E(gp.$$.fragment,f),E(hp.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(up.$$.fragment,f),E(AL.$$.fragment,f),E(_u.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(bu.$$.fragment,f),E(kL.$$.fragment,f),E(d1.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(f1.$$.fragment,f),E(IL.$$.fragment,f),E(Y1.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(Z1.$$.fragment,f),E(GL.$$.fragment,f),E(Nb.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(jb.$$.fragment,f),E(WL.$$.fragment,f),E(t2.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(n2.$$.fragment,f),E(YL.$$.fragment,f),E(e4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(r4.$$.fragment,f),E(ry.$$.fragment,f),E(R4.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(B4.$$.fragment,f),E(ly.$$.fragment,f),E(O4.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(X4.$$.fragment,f),E(my.$$.fragment,f),E(Av.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(yv.$$.fragment,f),E(uy.$$.fragment,f),E(_5.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(b5.$$.fragment,f),E(My.$$.fragment,f),E(T5.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(E5.$$.fragment,f),E(Ly.$$.fragment,f),E(q5.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(D5.$$.fragment,f),E(Sy.$$.fragment,f),E(V5.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(z5.$$.fragment,f),E(Ny.$$.fragment,f),E(r3.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(a3.$$.fragment,f),E(Oy.$$.fragment,f),E(f3.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(g3.$$.fragment,f),E(Qy.$$.fragment,f),E(w3.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(L3.$$.fragment,f),E(Ky.$$.fragment,f),E(k3.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(R3.$$.fragment,f),E(a8.$$.fragment,f),E(D3.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(O3.$$.fragment,f),E(d8.$$.fragment,f),E(Q3.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(U3.$$.fragment,f),E(h8.$$.fragment,f),E(Z3.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(oF.$$.fragment,f),E(F8.$$.fragment,f),E(aF.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(sF.$$.fragment,f),E(w8.$$.fragment,f),E(gF.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(pF.$$.fragment,f),E($8.$$.fragment,f),E(bF.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(FF.$$.fragment,f),E(B8.$$.fragment,f),E(gT.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(pT.$$.fragment,f),E(D8.$$.fragment,f),E(jT.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(GT.$$.fragment,f),E(z8.$$.fragment,f),E(o7.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(t7.$$.fragment,f),E(J8.$$.fragment,f),E(i7.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(c7.$$.fragment,f),E(o9.$$.fragment,f),E(k7.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(R7.$$.fragment,f),E(s9.$$.fragment,f),E(X7.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(W7.$$.fragment,f),E(f9.$$.fragment,f),E(vM.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(TM.$$.fragment,f),E(_9.$$.fragment,f),E(jM.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(GM.$$.fragment,f),E(T9.$$.fragment,f),E(XM.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(WM.$$.fragment,f),E(L9.$$.fragment,f),E(HM.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(JM.$$.fragment,f),E(S9.$$.fragment,f),E(uE.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(vE.$$.fragment,f),E(N9.$$.fragment,f),E(DE.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(OE.$$.fragment,f),E(O9.$$.fragment,f),E(XE.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(WE.$$.fragment,f),E(Q9.$$.fragment,f),E(HE.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(JE.$$.fragment,f),E(K9.$$.fragment,f),E(EC.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(wC.$$.fragment,f),E(tx.$$.fragment,f),E(IC.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(qC.$$.fragment,f),E(ix.$$.fragment,f),E(YC.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(ZC.$$.fragment,f),E(gx.$$.fragment,f),E(c0.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(m0.$$.fragment,f),E(bx.$$.fragment,f),E(M0.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(C0.$$.fragment,f),E(Ex.$$.fragment,f),E(B0.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(N0.$$.fragment,f),E(yx.$$.fragment,f),E(H0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(J0.$$.fragment,f),E(Rx.$$.fragment,f),E(nw.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(lw.$$.fragment,f),E(qx.$$.fragment,f),E(_w.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(bw.$$.fragment,f),E(Vx.$$.fragment,f),E(Fw.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Mw.$$.fragment,f),E(Hx.$$.fragment,f),E(ww.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(Lw.$$.fragment,f),E(e$.$$.fragment,f),E(xw.$$.fragment,f),DGe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(Mf.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(rL.$$.fragment,f),C(xg.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(iL.$$.fragment,f),C(fh.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(hL.$$.fragment,f),C(Wh.$$.fragment,f),C(Qh.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(FL.$$.fragment,f),C(gp.$$.fragment,f),C(hp.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(up.$$.fragment,f),C(AL.$$.fragment,f),C(_u.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(bu.$$.fragment,f),C(kL.$$.fragment,f),C(d1.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(f1.$$.fragment,f),C(IL.$$.fragment,f),C(Y1.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(Z1.$$.fragment,f),C(GL.$$.fragment,f),C(Nb.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(jb.$$.fragment,f),C(WL.$$.fragment,f),C(t2.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(n2.$$.fragment,f),C(YL.$$.fragment,f),C(e4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(r4.$$.fragment,f),C(ry.$$.fragment,f),C(R4.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(B4.$$.fragment,f),C(ly.$$.fragment,f),C(O4.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(X4.$$.fragment,f),C(my.$$.fragment,f),C(Av.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(yv.$$.fragment,f),C(uy.$$.fragment,f),C(_5.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(b5.$$.fragment,f),C(My.$$.fragment,f),C(T5.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(E5.$$.fragment,f),C(Ly.$$.fragment,f),C(q5.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(D5.$$.fragment,f),C(Sy.$$.fragment,f),C(V5.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(z5.$$.fragment,f),C(Ny.$$.fragment,f),C(r3.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(a3.$$.fragment,f),C(Oy.$$.fragment,f),C(f3.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(g3.$$.fragment,f),C(Qy.$$.fragment,f),C(w3.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(L3.$$.fragment,f),C(Ky.$$.fragment,f),C(k3.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(R3.$$.fragment,f),C(a8.$$.fragment,f),C(D3.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(O3.$$.fragment,f),C(d8.$$.fragment,f),C(Q3.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(U3.$$.fragment,f),C(h8.$$.fragment,f),C(Z3.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(oF.$$.fragment,f),C(F8.$$.fragment,f),C(aF.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(sF.$$.fragment,f),C(w8.$$.fragment,f),C(gF.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(pF.$$.fragment,f),C($8.$$.fragment,f),C(bF.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(FF.$$.fragment,f),C(B8.$$.fragment,f),C(gT.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(pT.$$.fragment,f),C(D8.$$.fragment,f),C(jT.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(GT.$$.fragment,f),C(z8.$$.fragment,f),C(o7.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(t7.$$.fragment,f),C(J8.$$.fragment,f),C(i7.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(c7.$$.fragment,f),C(o9.$$.fragment,f),C(k7.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(R7.$$.fragment,f),C(s9.$$.fragment,f),C(X7.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(W7.$$.fragment,f),C(f9.$$.fragment,f),C(vM.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(TM.$$.fragment,f),C(_9.$$.fragment,f),C(jM.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(GM.$$.fragment,f),C(T9.$$.fragment,f),C(XM.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(WM.$$.fragment,f),C(L9.$$.fragment,f),C(HM.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(JM.$$.fragment,f),C(S9.$$.fragment,f),C(uE.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(vE.$$.fragment,f),C(N9.$$.fragment,f),C(DE.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(OE.$$.fragment,f),C(O9.$$.fragment,f),C(XE.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(WE.$$.fragment,f),C(Q9.$$.fragment,f),C(HE.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(JE.$$.fragment,f),C(K9.$$.fragment,f),C(EC.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(wC.$$.fragment,f),C(tx.$$.fragment,f),C(IC.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(qC.$$.fragment,f),C(ix.$$.fragment,f),C(YC.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(ZC.$$.fragment,f),C(gx.$$.fragment,f),C(c0.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(m0.$$.fragment,f),C(bx.$$.fragment,f),C(M0.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(C0.$$.fragment,f),C(Ex.$$.fragment,f),C(B0.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(N0.$$.fragment,f),C(yx.$$.fragment,f),C(H0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(J0.$$.fragment,f),C(Rx.$$.fragment,f),C(nw.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(lw.$$.fragment,f),C(qx.$$.fragment,f),C(_w.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(bw.$$.fragment,f),C(Vx.$$.fragment,f),C(Fw.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Mw.$$.fragment,f),C(Hx.$$.fragment,f),C(ww.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(Lw.$$.fragment,f),C(e$.$$.fragment,f),C(xw.$$.fragment,f),DGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(tt),f&&t(Ge),f&&t(We),f&&t(vf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(Nje),f&&t(Fi),w(JA),f&&t(qje),f&&t(kn),f&&t(jje),w(YA,f),f&&t(Dje),f&&t(Fk),f&&t(Gje),w(Mf,f),f&&t(Oje),f&&t(Ti),w(KA),f&&t(Vje),f&&t(Co),w(ZA),w(rL),w(xg),w(tL),f&&t(Xje),f&&t(Ei),w(aL),f&&t(zje),f&&t(wo),w(nL),w(iL),w(fh),w(dL),f&&t(Wje),f&&t(Ci),w(cL),f&&t(Qje),f&&t(Ao),w(fL),w(hL),w(Wh),w(Qh),w(pL),f&&t(Hje),f&&t(wi),w(_L),f&&t(Uje),f&&t(Lo),w(uL),w(FL),w(gp),w(hp),w(TL),f&&t(Jje),f&&t(Li),w(ML),f&&t(Yje),f&&t(yo),w(EL),w(wL),w(up),w(AL),w(_u),f&&t(Kje),f&&t($i),w(LL),f&&t(Zje),f&&t(xo),w(yL),w($L),w(bu),w(kL),w(d1),f&&t(eDe),f&&t(Ri),w(SL),f&&t(oDe),f&&t($o),w(RL),w(BL),w(f1),w(IL),w(Y1),f&&t(rDe),f&&t(Ii),w(NL),f&&t(tDe),f&&t(ko),w(qL),w(DL),w(Z1),w(GL),w(Nb),f&&t(aDe),f&&t(ji),w(OL),f&&t(nDe),f&&t(So),w(VL),w(zL),w(jb),w(WL),w(t2),f&&t(sDe),f&&t(Oi),w(QL),f&&t(lDe),f&&t(Ro),w(HL),w(JL),w(n2),w(YL),w(e4),f&&t(iDe),f&&t(zi),w(KL),f&&t(dDe),f&&t(Po),w(ZL),w(oy),w(r4),w(ry),w(R4),f&&t(cDe),f&&t(Hi),w(ty),f&&t(fDe),f&&t(Bo),w(ay),w(sy),w(B4),w(ly),w(O4),f&&t(mDe),f&&t(Yi),w(iy),f&&t(gDe),f&&t(Io),w(dy),w(fy),w(X4),w(my),w(Av),f&&t(hDe),f&&t(ed),w(gy),f&&t(pDe),f&&t(No),w(hy),w(_y),w(yv),w(uy),w(_5),f&&t(_De),f&&t(td),w(by),f&&t(uDe),f&&t(qo),w(vy),w(Ty),w(b5),w(My),w(T5),f&&t(bDe),f&&t(sd),w(Ey),f&&t(vDe),f&&t(jo),w(Cy),w(Ay),w(E5),w(Ly),w(q5),f&&t(FDe),f&&t(dd),w(yy),f&&t(TDe),f&&t(Do),w(xy),w(ky),w(D5),w(Sy),w(V5),f&&t(MDe),f&&t(md),w(Ry),f&&t(EDe),f&&t(Go),w(Py),w(Iy),w(z5),w(Ny),w(r3),f&&t(CDe),f&&t(pd),w(qy),f&&t(wDe),f&&t(Oo),w(jy),w(Gy),w(a3),w(Oy),w(f3),f&&t(ADe),f&&t(bd),w(Vy),f&&t(LDe),f&&t(Vo),w(Xy),w(Wy),w(g3),w(Qy),w(w3),f&&t(yDe),f&&t(Td),w(Hy),f&&t(xDe),f&&t(Xo),w(Uy),w(Yy),w(L3),w(Ky),w(k3),f&&t($De),f&&t(Cd),w(e8),f&&t(kDe),f&&t(zo),w(o8),w(t8),w(R3),w(a8),w(D3),f&&t(SDe),f&&t(Ld),w(n8),f&&t(RDe),f&&t(Wo),w(s8),w(i8),w(O3),w(d8),w(Q3),f&&t(PDe),f&&t(kd),w(c8),f&&t(BDe),f&&t(Qo),w(f8),w(g8),w(U3),w(h8),w(Z3),f&&t(IDe),f&&t(Pd),w(_8),f&&t(NDe),f&&t(Ho),w(u8),w(v8),w(oF),w(F8),w(aF),f&&t(qDe),f&&t(Nd),w(T8),f&&t(jDe),f&&t(Uo),w(M8),w(C8),w(sF),w(w8),w(gF),f&&t(DDe),f&&t(Dd),w(A8),f&&t(GDe),f&&t(Jo),w(L8),w(x8),w(pF),w($8),w(bF),f&&t(ODe),f&&t(Vd),w(k8),f&&t(VDe),f&&t(Yo),w(S8),w(P8),w(FF),w(B8),w(gT),f&&t(XDe),f&&t(Wd),w(I8),f&&t(zDe),f&&t(Ko),w(N8),w(j8),w(pT),w(D8),w(jT),f&&t(WDe),f&&t(Ud),w(G8),f&&t(QDe),f&&t(Zo),w(O8),w(X8),w(GT),w(z8),w(o7),f&&t(HDe),f&&t(Kd),w(W8),f&&t(UDe),f&&t(er),w(Q8),w(U8),w(t7),w(J8),w(i7),f&&t(JDe),f&&t(oc),w(Y8),f&&t(YDe),f&&t(or),w(K8),w(e9),w(c7),w(o9),w(k7),f&&t(KDe),f&&t(ac),w(r9),f&&t(ZDe),f&&t(rr),w(t9),w(n9),w(R7),w(s9),w(X7),f&&t(eGe),f&&t(lc),w(l9),f&&t(oGe),f&&t(tr),w(i9),w(c9),w(W7),w(f9),w(vM),f&&t(rGe),f&&t(cc),w(m9),f&&t(tGe),f&&t(ar),w(g9),w(p9),w(TM),w(_9),w(jM),f&&t(aGe),f&&t(gc),w(u9),f&&t(nGe),f&&t(nr),w(b9),w(F9),w(GM),w(T9),w(XM),f&&t(sGe),f&&t(_c),w(E9),f&&t(lGe),f&&t(sr),w(C9),w(A9),w(WM),w(L9),w(HM),f&&t(iGe),f&&t(vc),w(y9),f&&t(dGe),f&&t(lr),w(x9),w(k9),w(JM),w(S9),w(uE),f&&t(cGe),f&&t(Mc),w(R9),f&&t(fGe),f&&t(ir),w(P9),w(I9),w(vE),w(N9),w(DE),f&&t(mGe),f&&t(wc),w(q9),f&&t(gGe),f&&t(dr),w(j9),w(G9),w(OE),w(O9),w(XE),f&&t(hGe),f&&t(yc),w(V9),f&&t(pGe),f&&t(cr),w(X9),w(W9),w(WE),w(Q9),w(HE),f&&t(_Ge),f&&t(kc),w(H9),f&&t(uGe),f&&t(fr),w(U9),w(Y9),w(JE),w(K9),w(EC),f&&t(bGe),f&&t(Pc),w(Z9),f&&t(vGe),f&&t(mr),w(ex),w(rx),w(wC),w(tx),w(IC),f&&t(FGe),f&&t(Nc),w(ax),f&&t(TGe),f&&t(gr),w(nx),w(lx),w(qC),w(ix),w(YC),f&&t(MGe),f&&t(Dc),w(dx),f&&t(EGe),f&&t(hr),w(cx),w(mx),w(ZC),w(gx),w(c0),f&&t(CGe),f&&t(Vc),w(hx),f&&t(wGe),f&&t(pr),w(px),w(ux),w(m0),w(bx),w(M0),f&&t(AGe),f&&t(Wc),w(vx),f&&t(LGe),f&&t(_r),w(Fx),w(Mx),w(C0),w(Ex),w(B0),f&&t(yGe),f&&t(Uc),w(Cx),f&&t(xGe),f&&t(ur),w(wx),w(Lx),w(N0),w(yx),w(H0),f&&t($Ge),f&&t(Kc),w(xx),f&&t(kGe),f&&t(br),w($x),w(Sx),w(J0),w(Rx),w(nw),f&&t(SGe),f&&t(of),w(Px),f&&t(RGe),f&&t(vr),w(Bx),w(Nx),w(lw),w(qx),w(_w),f&&t(PGe),f&&t(af),w(jx),f&&t(BGe),f&&t(Fr),w(Dx),w(Ox),w(bw),w(Vx),w(Fw),f&&t(IGe),f&&t(lf),w(Xx),f&&t(NGe),f&&t(Tr),w(zx),w(Qx),w(Mw),w(Hx),w(ww),f&&t(qGe),f&&t(ff),w(Jx),f&&t(jGe),f&&t(Mr),w(Yx),w(Zx),w(Lw),w(e$),w(xw)}}}const JIt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function YIt(x){return YPt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aNt extends QPt{constructor(g){super();HPt(this,g,YIt,UIt,UPt,{})}}export{aNt as default,JIt as metadata};
