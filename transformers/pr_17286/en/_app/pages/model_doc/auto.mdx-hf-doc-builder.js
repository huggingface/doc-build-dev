import{S as _Bt,i as bBt,s as vBt,e as a,k as l,w as F,t as o,M as FBt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as TBt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as WQr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function MBt(L){let g,v,p,m,u,d,h,Eo,vi,Af,at,Fi,Ti,oA,yf,Ge,We,Mi,Sn,rA,Rn,Pn,tA,Ei,Bn,aA,Ci,Lf,La;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),vi=a("code"),Af=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Fi=a("code"),Ti=o('"new-model"'),oA=o(")."),yf=l(),Ge=a("p"),We=o("Likewise, if your "),Mi=a("code"),Sn=o("NewModel"),rA=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),tA=o(`, make sure its
`),Ei=a("code"),Bn=o("config_class"),aA=o(` attribute is set to the same class you use when registering the model (here
`),Ci=a("code"),Lf=o("NewModelConfig"),La=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var $k=s(p);m=r($k,"NewModelConfig"),$k.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var wi=s(d);h=r(wi,"PretrainedConfig"),wi.forEach(t),Eo=r(Ae,`, make sure its
`),vi=n(Ae,"CODE",{});var kk=s(vi);Af=r(kk,"model_type"),kk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Fi=n(Ae,"CODE",{});var Sk=s(Fi);Ti=r(Sk,'"new-model"'),Sk.forEach(t),oA=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Ge=n(Qe,"P",{});var Co=s(Ge);We=r(Co,"Likewise, if your "),Mi=n(Co,"CODE",{});var xa=s(Mi);Sn=r(xa,"NewModel"),xa.forEach(t),rA=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Rk=s(Rn);Pn=r(Rk,"PreTrainedModel"),Rk.forEach(t),tA=r(Co,`, make sure its
`),Ei=n(Co,"CODE",{});var xf=s(Ei);Bn=r(xf,"config_class"),xf.forEach(t),aA=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ci=n(Co,"CODE",{});var Pk=s(Ci);Lf=r(Pk,"NewModelConfig"),Pk.forEach(t),La=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,vi),e(vi,Af),e(g,at),e(g,Fi),e(Fi,Ti),e(g,oA),b(Qe,yf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,Mi),e(Mi,Sn),e(Ge,rA),e(Ge,Rn),e(Rn,Pn),e(Ge,tA),e(Ge,Ei),e(Ei,Bn),e(Ge,aA),e(Ge,Ci),e(Ci,Lf),e(Ge,La)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Ge)}}}function EBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ABt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function LBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $It(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Nt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TNt(L){let g,v,p,m,u,d,h,Eo,vi,Af,at,Fi,Ti,oA,yf,Ge,We,Mi,Sn,rA,Rn,Pn,tA,Ei,Bn,aA,Ci,Lf,La,Qe,Ae,$k,wi,kk,Sk,Co,xa,Rk,xf,Pk,cXe,Uje,Ai,$f,hre,nA,fXe,pre,mXe,Jje,In,gXe,ure,hXe,pXe,_re,uXe,_Xe,Yje,sA,Kje,Bk,bXe,Zje,kf,eDe,yi,Sf,bre,lA,vXe,vre,FXe,oDe,wo,iA,TXe,dA,MXe,Ik,EXe,CXe,wXe,cA,AXe,Fre,yXe,LXe,xXe,wr,fA,$Xe,Tre,kXe,SXe,Li,RXe,Mre,PXe,BXe,Ere,IXe,NXe,qXe,A,Rf,Cre,jXe,DXe,Nk,GXe,OXe,VXe,Pf,wre,XXe,zXe,qk,WXe,QXe,HXe,Bf,Are,UXe,JXe,jk,YXe,KXe,ZXe,If,yre,eze,oze,Dk,rze,tze,aze,Nf,Lre,nze,sze,Gk,lze,ize,dze,qf,xre,cze,fze,Ok,mze,gze,hze,jf,$re,pze,uze,Vk,_ze,bze,vze,Df,kre,Fze,Tze,Xk,Mze,Eze,Cze,Gf,Sre,wze,Aze,zk,yze,Lze,xze,Of,Rre,$ze,kze,Wk,Sze,Rze,Pze,Vf,Pre,Bze,Ize,Qk,Nze,qze,jze,Xf,Bre,Dze,Gze,Hk,Oze,Vze,Xze,zf,Ire,zze,Wze,Uk,Qze,Hze,Uze,Wf,Nre,Jze,Yze,Jk,Kze,Zze,eWe,Qf,qre,oWe,rWe,Yk,tWe,aWe,nWe,Hf,jre,sWe,lWe,Kk,iWe,dWe,cWe,Uf,Dre,fWe,mWe,Zk,gWe,hWe,pWe,Jf,Gre,uWe,_We,eS,bWe,vWe,FWe,Yf,Ore,TWe,MWe,oS,EWe,CWe,wWe,Kf,Vre,AWe,yWe,rS,LWe,xWe,$We,Zf,Xre,kWe,SWe,tS,RWe,PWe,BWe,em,zre,IWe,NWe,aS,qWe,jWe,DWe,om,Wre,GWe,OWe,nS,VWe,XWe,zWe,rm,Qre,WWe,QWe,sS,HWe,UWe,JWe,tm,Hre,YWe,KWe,lS,ZWe,eQe,oQe,am,Ure,rQe,tQe,iS,aQe,nQe,sQe,nm,Jre,lQe,iQe,dS,dQe,cQe,fQe,sm,Yre,mQe,gQe,cS,hQe,pQe,uQe,lm,Kre,_Qe,bQe,fS,vQe,FQe,TQe,im,Zre,MQe,EQe,mS,CQe,wQe,AQe,dm,ete,yQe,LQe,gS,xQe,$Qe,kQe,cm,ote,SQe,RQe,hS,PQe,BQe,IQe,fm,rte,NQe,qQe,pS,jQe,DQe,GQe,mm,tte,OQe,VQe,uS,XQe,zQe,WQe,gm,ate,QQe,HQe,_S,UQe,JQe,YQe,hm,nte,KQe,ZQe,bS,eHe,oHe,rHe,pm,ste,tHe,aHe,vS,nHe,sHe,lHe,um,lte,iHe,dHe,FS,cHe,fHe,mHe,_m,ite,gHe,hHe,TS,pHe,uHe,_He,bm,dte,bHe,vHe,MS,FHe,THe,MHe,vm,cte,EHe,CHe,ES,wHe,AHe,yHe,Fm,fte,LHe,xHe,CS,$He,kHe,SHe,Tm,mte,RHe,PHe,wS,BHe,IHe,NHe,Mm,gte,qHe,jHe,AS,DHe,GHe,OHe,Em,hte,VHe,XHe,yS,zHe,WHe,QHe,Cm,pte,HHe,UHe,LS,JHe,YHe,KHe,wm,ute,ZHe,eUe,xS,oUe,rUe,tUe,Am,_te,aUe,nUe,$S,sUe,lUe,iUe,ym,bte,dUe,cUe,kS,fUe,mUe,gUe,Lm,vte,hUe,pUe,SS,uUe,_Ue,bUe,xm,Fte,vUe,FUe,RS,TUe,MUe,EUe,$m,Tte,CUe,wUe,PS,AUe,yUe,LUe,km,Mte,xUe,$Ue,BS,kUe,SUe,RUe,Sm,Ete,PUe,BUe,IS,IUe,NUe,qUe,Rm,Cte,jUe,DUe,NS,GUe,OUe,VUe,Pm,wte,XUe,zUe,qS,WUe,QUe,HUe,Bm,Ate,UUe,JUe,jS,YUe,KUe,ZUe,Im,yte,eJe,oJe,DS,rJe,tJe,aJe,Nm,Lte,nJe,sJe,GS,lJe,iJe,dJe,qm,xte,cJe,fJe,OS,mJe,gJe,hJe,jm,$te,pJe,uJe,VS,_Je,bJe,vJe,Dm,kte,FJe,TJe,XS,MJe,EJe,CJe,Gm,Ste,wJe,AJe,zS,yJe,LJe,xJe,Om,Rte,$Je,kJe,WS,SJe,RJe,PJe,Vm,Pte,BJe,IJe,QS,NJe,qJe,jJe,Xm,Bte,DJe,GJe,HS,OJe,VJe,XJe,zm,Ite,zJe,WJe,US,QJe,HJe,UJe,Wm,Nte,JJe,YJe,JS,KJe,ZJe,eYe,Qm,qte,oYe,rYe,YS,tYe,aYe,nYe,Hm,jte,sYe,lYe,KS,iYe,dYe,cYe,Um,Dte,fYe,mYe,ZS,gYe,hYe,pYe,Jm,Gte,uYe,_Ye,eR,bYe,vYe,FYe,Ym,Ote,TYe,MYe,oR,EYe,CYe,wYe,Km,Vte,AYe,yYe,rR,LYe,xYe,$Ye,Zm,Xte,kYe,SYe,tR,RYe,PYe,BYe,eg,zte,IYe,NYe,aR,qYe,jYe,DYe,og,Wte,GYe,OYe,nR,VYe,XYe,zYe,rg,Qte,WYe,QYe,sR,HYe,UYe,JYe,tg,Hte,YYe,KYe,lR,ZYe,eKe,oKe,ag,Ute,rKe,tKe,iR,aKe,nKe,sKe,ng,Jte,lKe,iKe,dR,dKe,cKe,fKe,sg,Yte,mKe,gKe,cR,hKe,pKe,uKe,lg,Kte,_Ke,bKe,fR,vKe,FKe,TKe,ig,Zte,MKe,EKe,mR,CKe,wKe,AKe,dg,eae,yKe,LKe,gR,xKe,$Ke,kKe,cg,oae,SKe,RKe,hR,PKe,BKe,IKe,fg,rae,NKe,qKe,pR,jKe,DKe,GKe,mg,tae,OKe,VKe,uR,XKe,zKe,WKe,gg,aae,QKe,HKe,_R,UKe,JKe,YKe,hg,nae,KKe,ZKe,bR,eZe,oZe,rZe,pg,sae,tZe,aZe,vR,nZe,sZe,lZe,ug,lae,iZe,dZe,FR,cZe,fZe,mZe,_g,iae,gZe,hZe,TR,pZe,uZe,_Ze,bg,dae,bZe,vZe,MR,FZe,TZe,MZe,vg,cae,EZe,CZe,ER,wZe,AZe,yZe,Fg,fae,LZe,xZe,CR,$Ze,kZe,SZe,Tg,mae,RZe,PZe,wR,BZe,IZe,NZe,Mg,gae,qZe,jZe,AR,DZe,GZe,OZe,Eg,hae,VZe,XZe,yR,zZe,WZe,QZe,Cg,pae,HZe,UZe,LR,JZe,YZe,KZe,wg,uae,ZZe,eeo,xR,oeo,reo,teo,Ag,_ae,aeo,neo,$R,seo,leo,ieo,yg,bae,deo,ceo,kR,feo,meo,geo,Lg,vae,heo,peo,SR,ueo,_eo,beo,xg,Fae,veo,Feo,RR,Teo,Meo,Eeo,$g,Tae,Ceo,weo,PR,Aeo,yeo,Leo,kg,Mae,xeo,$eo,BR,keo,Seo,Reo,Sg,Eae,Peo,Beo,IR,Ieo,Neo,qeo,Rg,Cae,jeo,Deo,NR,Geo,Oeo,Veo,Pg,wae,Xeo,zeo,qR,Weo,Qeo,Heo,Bg,Aae,Ueo,Jeo,jR,Yeo,Keo,Zeo,Ig,eoo,Ng,mA,ooo,yae,roo,rDe,xi,qg,Lae,gA,too,xae,aoo,tDe,Ao,hA,noo,pA,soo,DR,loo,ioo,doo,uA,coo,$ae,foo,moo,goo,Ar,_A,hoo,kae,poo,uoo,$a,_oo,Sae,boo,voo,Rae,Foo,Too,Pae,Moo,Eoo,Coo,k,Nn,Bae,woo,Aoo,GR,yoo,Loo,OR,xoo,$oo,koo,qn,Iae,Soo,Roo,VR,Poo,Boo,XR,Ioo,Noo,qoo,jn,Nae,joo,Doo,zR,Goo,Ooo,WR,Voo,Xoo,zoo,jg,qae,Woo,Qoo,QR,Hoo,Uoo,Joo,Dn,jae,Yoo,Koo,HR,Zoo,ero,UR,oro,rro,tro,Dg,Dae,aro,nro,JR,sro,lro,iro,Gg,Gae,dro,cro,YR,fro,mro,gro,Og,Oae,hro,pro,KR,uro,_ro,bro,Gn,Vae,vro,Fro,ZR,Tro,Mro,eP,Ero,Cro,wro,On,Xae,Aro,yro,oP,Lro,xro,rP,$ro,kro,Sro,Vn,zae,Rro,Pro,tP,Bro,Iro,aP,Nro,qro,jro,Vg,Wae,Dro,Gro,nP,Oro,Vro,Xro,Xg,Qae,zro,Wro,sP,Qro,Hro,Uro,Xn,Hae,Jro,Yro,lP,Kro,Zro,iP,eto,oto,rto,zg,Uae,tto,ato,dP,nto,sto,lto,zn,Jae,ito,dto,cP,cto,fto,fP,mto,gto,hto,Wn,Yae,pto,uto,mP,_to,bto,gP,vto,Fto,Tto,Qn,Kae,Mto,Eto,hP,Cto,wto,pP,Ato,yto,Lto,Wg,Zae,xto,$to,uP,kto,Sto,Rto,Hn,ene,Pto,Bto,_P,Ito,Nto,bP,qto,jto,Dto,Un,one,Gto,Oto,vP,Vto,Xto,FP,zto,Wto,Qto,Jn,rne,Hto,Uto,TP,Jto,Yto,MP,Kto,Zto,eao,Yn,tne,oao,rao,EP,tao,aao,CP,nao,sao,lao,Kn,ane,iao,dao,wP,cao,fao,AP,mao,gao,hao,Zn,nne,pao,uao,yP,_ao,bao,LP,vao,Fao,Tao,Qg,sne,Mao,Eao,xP,Cao,wao,Aao,es,lne,yao,Lao,$P,xao,$ao,kP,kao,Sao,Rao,Hg,ine,Pao,Bao,SP,Iao,Nao,qao,os,dne,jao,Dao,RP,Gao,Oao,PP,Vao,Xao,zao,rs,cne,Wao,Qao,BP,Hao,Uao,IP,Jao,Yao,Kao,ts,fne,Zao,eno,NP,ono,rno,qP,tno,ano,nno,Ug,mne,sno,lno,jP,ino,dno,cno,as,gne,fno,mno,DP,gno,hno,GP,pno,uno,_no,ns,hne,bno,vno,OP,Fno,Tno,VP,Mno,Eno,Cno,Jg,pne,wno,Ano,XP,yno,Lno,xno,ss,une,$no,kno,zP,Sno,Rno,WP,Pno,Bno,Ino,ls,_ne,Nno,qno,QP,jno,Dno,HP,Gno,Ono,Vno,is,bne,Xno,zno,UP,Wno,Qno,JP,Hno,Uno,Jno,ds,vne,Yno,Kno,YP,Zno,eso,KP,oso,rso,tso,cs,Fne,aso,nso,ZP,sso,lso,eB,iso,dso,cso,fs,Tne,fso,mso,oB,gso,hso,rB,pso,uso,_so,ms,Mne,bso,vso,tB,Fso,Tso,aB,Mso,Eso,Cso,Yg,Ene,wso,Aso,nB,yso,Lso,xso,gs,Cne,$so,kso,sB,Sso,Rso,lB,Pso,Bso,Iso,Kg,wne,Nso,qso,iB,jso,Dso,Gso,Zg,Ane,Oso,Vso,dB,Xso,zso,Wso,hs,yne,Qso,Hso,cB,Uso,Jso,fB,Yso,Kso,Zso,ps,Lne,elo,olo,mB,rlo,tlo,gB,alo,nlo,slo,us,xne,llo,ilo,hB,dlo,clo,pB,flo,mlo,glo,eh,$ne,hlo,plo,uB,ulo,_lo,blo,_s,kne,vlo,Flo,_B,Tlo,Mlo,bB,Elo,Clo,wlo,bs,Sne,Alo,ylo,vB,Llo,xlo,FB,$lo,klo,Slo,vs,Rne,Rlo,Plo,TB,Blo,Ilo,MB,Nlo,qlo,jlo,Fs,Pne,Dlo,Glo,EB,Olo,Vlo,CB,Xlo,zlo,Wlo,Ts,Bne,Qlo,Hlo,wB,Ulo,Jlo,AB,Ylo,Klo,Zlo,oh,Ine,eio,oio,yB,rio,tio,aio,Ms,Nne,nio,sio,LB,lio,iio,xB,dio,cio,fio,rh,qne,mio,gio,$B,hio,pio,uio,th,jne,_io,bio,kB,vio,Fio,Tio,ah,Dne,Mio,Eio,SB,Cio,wio,Aio,nh,Gne,yio,Lio,RB,xio,$io,kio,Es,One,Sio,Rio,PB,Pio,Bio,BB,Iio,Nio,qio,sh,Vne,jio,Dio,IB,Gio,Oio,Vio,Cs,Xne,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,ws,zne,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,As,Wne,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,ys,Qne,fdo,mdo,VB,gdo,hdo,XB,pdo,udo,_do,Ls,Hne,bdo,vdo,zB,Fdo,Tdo,WB,Mdo,Edo,Cdo,xs,Une,wdo,Ado,QB,ydo,Ldo,HB,xdo,$do,kdo,lh,Jne,Sdo,Rdo,UB,Pdo,Bdo,Ido,ih,Yne,Ndo,qdo,JB,jdo,Ddo,Gdo,$s,Kne,Odo,Vdo,YB,Xdo,zdo,KB,Wdo,Qdo,Hdo,ks,Zne,Udo,Jdo,ZB,Ydo,Kdo,eI,Zdo,eco,oco,Ss,ese,rco,tco,oI,aco,nco,rI,sco,lco,ico,dh,ose,dco,cco,tI,fco,mco,gco,ch,rse,hco,pco,aI,uco,_co,bco,fh,tse,vco,Fco,nI,Tco,Mco,Eco,Rs,ase,Cco,wco,sI,Aco,yco,lI,Lco,xco,$co,Ps,nse,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,mh,sse,qco,jco,cI,Dco,Gco,Oco,gh,lse,Vco,Xco,fI,zco,Wco,Qco,hh,ise,Hco,Uco,mI,Jco,Yco,Kco,Bs,dse,Zco,efo,gI,ofo,rfo,hI,tfo,afo,nfo,ph,cse,sfo,lfo,pI,ifo,dfo,cfo,uh,fse,ffo,mfo,uI,gfo,hfo,pfo,Is,mse,ufo,_fo,_I,bfo,vfo,bI,Ffo,Tfo,Mfo,Ns,gse,Efo,Cfo,vI,wfo,Afo,FI,yfo,Lfo,xfo,qs,hse,$fo,kfo,TI,Sfo,Rfo,MI,Pfo,Bfo,Ifo,js,pse,Nfo,qfo,EI,jfo,Dfo,CI,Gfo,Ofo,Vfo,_h,Xfo,bh,bA,zfo,use,Wfo,aDe,$i,vh,_se,vA,Qfo,bse,Hfo,nDe,yo,FA,Ufo,TA,Jfo,wI,Yfo,Kfo,Zfo,MA,emo,vse,omo,rmo,tmo,He,EA,amo,Fse,nmo,smo,ka,lmo,Tse,imo,dmo,Mse,cmo,fmo,Ese,mmo,gmo,hmo,Y,Fh,Cse,pmo,umo,AI,_mo,bmo,vmo,Th,wse,Fmo,Tmo,yI,Mmo,Emo,Cmo,Mh,Ase,wmo,Amo,LI,ymo,Lmo,xmo,Eh,yse,$mo,kmo,xI,Smo,Rmo,Pmo,Ch,Lse,Bmo,Imo,$I,Nmo,qmo,jmo,wh,xse,Dmo,Gmo,kI,Omo,Vmo,Xmo,Ah,$se,zmo,Wmo,SI,Qmo,Hmo,Umo,yh,kse,Jmo,Ymo,RI,Kmo,Zmo,ego,Lh,Sse,ogo,rgo,PI,tgo,ago,ngo,xh,Rse,sgo,lgo,BI,igo,dgo,cgo,$h,Pse,fgo,mgo,II,ggo,hgo,pgo,kh,Bse,ugo,_go,NI,bgo,vgo,Fgo,Sh,Ise,Tgo,Mgo,qI,Ego,Cgo,wgo,Rh,Nse,Ago,ygo,jI,Lgo,xgo,$go,Ph,qse,kgo,Sgo,DI,Rgo,Pgo,Bgo,Bh,jse,Igo,Ngo,GI,qgo,jgo,Dgo,Ih,Dse,Ggo,Ogo,OI,Vgo,Xgo,zgo,Nh,Gse,Wgo,Qgo,VI,Hgo,Ugo,Jgo,qh,Ose,Ygo,Kgo,XI,Zgo,eho,oho,jh,Vse,rho,tho,zI,aho,nho,sho,Dh,Xse,lho,iho,WI,dho,cho,fho,Gh,zse,mho,gho,QI,hho,pho,uho,Oh,Wse,_ho,bho,HI,vho,Fho,Tho,Vh,Qse,Mho,Eho,UI,Cho,who,Aho,Xh,Hse,yho,Lho,JI,xho,$ho,kho,zh,Use,Sho,Rho,YI,Pho,Bho,Iho,Wh,Jse,Nho,qho,KI,jho,Dho,Gho,Qh,Yse,Oho,Vho,ZI,Xho,zho,Who,Hh,Kse,Qho,Hho,eN,Uho,Jho,Yho,Uh,Zse,Kho,Zho,oN,epo,opo,rpo,Jh,ele,tpo,apo,rN,npo,spo,lpo,Yh,ole,ipo,dpo,tN,cpo,fpo,mpo,Kh,gpo,Zh,hpo,ep,CA,ppo,rle,upo,sDe,ki,op,tle,wA,_po,ale,bpo,lDe,Lo,AA,vpo,yA,Fpo,aN,Tpo,Mpo,Epo,LA,Cpo,nle,wpo,Apo,ypo,Ue,xA,Lpo,sle,xpo,$po,Si,kpo,lle,Spo,Rpo,ile,Ppo,Bpo,Ipo,he,rp,dle,Npo,qpo,nN,jpo,Dpo,Gpo,tp,cle,Opo,Vpo,fle,Xpo,zpo,Wpo,ap,mle,Qpo,Hpo,sN,Upo,Jpo,Ypo,np,gle,Kpo,Zpo,lN,euo,ouo,ruo,sp,hle,tuo,auo,iN,nuo,suo,luo,lp,ple,iuo,duo,dN,cuo,fuo,muo,ip,ule,guo,huo,cN,puo,uuo,_uo,dp,_le,buo,vuo,fN,Fuo,Tuo,Muo,cp,ble,Euo,Cuo,mN,wuo,Auo,yuo,fp,vle,Luo,xuo,gN,$uo,kuo,Suo,mp,Fle,Ruo,Puo,hN,Buo,Iuo,Nuo,gp,Tle,quo,juo,pN,Duo,Guo,Ouo,hp,Mle,Vuo,Xuo,uN,zuo,Wuo,Quo,pp,Ele,Huo,Uuo,_N,Juo,Yuo,Kuo,up,Cle,Zuo,e_o,bN,o_o,r_o,t_o,_p,wle,a_o,n_o,vN,s_o,l_o,i_o,bp,Ale,d_o,c_o,FN,f_o,m_o,g_o,vp,h_o,Fp,p_o,Tp,$A,u_o,yle,__o,iDe,Ri,Mp,Lle,kA,b_o,xle,v_o,dDe,xo,SA,F_o,Pi,T_o,TN,M_o,E_o,MN,C_o,w_o,A_o,RA,y_o,$le,L_o,x_o,$_o,nt,PA,k_o,kle,S_o,R_o,Bi,P_o,Sle,B_o,I_o,EN,N_o,q_o,j_o,Ep,D_o,Je,BA,G_o,Rle,O_o,V_o,Sa,X_o,Ple,z_o,W_o,Ble,Q_o,H_o,Ile,U_o,J_o,Y_o,x,Cp,Nle,K_o,Z_o,CN,e2o,o2o,r2o,wp,qle,t2o,a2o,wN,n2o,s2o,l2o,Ap,jle,i2o,d2o,AN,c2o,f2o,m2o,yp,Dle,g2o,h2o,yN,p2o,u2o,_2o,Lp,Gle,b2o,v2o,LN,F2o,T2o,M2o,xp,Ole,E2o,C2o,xN,w2o,A2o,y2o,$p,Vle,L2o,x2o,$N,$2o,k2o,S2o,kp,Xle,R2o,P2o,kN,B2o,I2o,N2o,Sp,zle,q2o,j2o,SN,D2o,G2o,O2o,Rp,Wle,V2o,X2o,RN,z2o,W2o,Q2o,Pp,Qle,H2o,U2o,PN,J2o,Y2o,K2o,Bp,Hle,Z2o,e1o,BN,o1o,r1o,t1o,Ip,Ule,a1o,n1o,IN,s1o,l1o,i1o,Np,Jle,d1o,c1o,NN,f1o,m1o,g1o,qp,Yle,h1o,p1o,qN,u1o,_1o,b1o,jp,Kle,v1o,F1o,jN,T1o,M1o,E1o,Dp,Zle,C1o,w1o,DN,A1o,y1o,L1o,Gp,eie,x1o,$1o,GN,k1o,S1o,R1o,Op,oie,P1o,B1o,ON,I1o,N1o,q1o,Vp,rie,j1o,D1o,VN,G1o,O1o,V1o,Xp,tie,X1o,z1o,XN,W1o,Q1o,H1o,zp,aie,U1o,J1o,zN,Y1o,K1o,Z1o,Wp,nie,ebo,obo,WN,rbo,tbo,abo,Qp,sie,nbo,sbo,QN,lbo,ibo,dbo,Hp,lie,cbo,fbo,HN,mbo,gbo,hbo,Up,iie,pbo,ubo,UN,_bo,bbo,vbo,Jp,die,Fbo,Tbo,JN,Mbo,Ebo,Cbo,Yp,cie,wbo,Abo,YN,ybo,Lbo,xbo,Kp,fie,$bo,kbo,KN,Sbo,Rbo,Pbo,Zp,mie,Bbo,Ibo,ZN,Nbo,qbo,jbo,eu,gie,Dbo,Gbo,eq,Obo,Vbo,Xbo,ou,hie,zbo,Wbo,oq,Qbo,Hbo,Ubo,Ds,pie,Jbo,Ybo,rq,Kbo,Zbo,tq,evo,ovo,rvo,ru,uie,tvo,avo,aq,nvo,svo,lvo,tu,_ie,ivo,dvo,nq,cvo,fvo,mvo,au,bie,gvo,hvo,sq,pvo,uvo,_vo,nu,vie,bvo,vvo,lq,Fvo,Tvo,Mvo,su,Fie,Evo,Cvo,iq,wvo,Avo,yvo,lu,Tie,Lvo,xvo,dq,$vo,kvo,Svo,iu,Mie,Rvo,Pvo,cq,Bvo,Ivo,Nvo,du,Eie,qvo,jvo,fq,Dvo,Gvo,Ovo,cu,Cie,Vvo,Xvo,mq,zvo,Wvo,Qvo,fu,wie,Hvo,Uvo,gq,Jvo,Yvo,Kvo,mu,Aie,Zvo,eFo,hq,oFo,rFo,tFo,gu,yie,aFo,nFo,pq,sFo,lFo,iFo,hu,Lie,dFo,cFo,uq,fFo,mFo,gFo,pu,xie,hFo,pFo,_q,uFo,_Fo,bFo,uu,$ie,vFo,FFo,bq,TFo,MFo,EFo,_u,kie,CFo,wFo,vq,AFo,yFo,LFo,bu,Sie,xFo,$Fo,Fq,kFo,SFo,RFo,vu,Rie,PFo,BFo,Tq,IFo,NFo,qFo,Fu,Pie,jFo,DFo,Mq,GFo,OFo,VFo,Tu,Bie,XFo,zFo,Eq,WFo,QFo,HFo,Mu,Iie,UFo,JFo,Cq,YFo,KFo,ZFo,Eu,Nie,e6o,o6o,wq,r6o,t6o,a6o,Cu,qie,n6o,s6o,Aq,l6o,i6o,d6o,wu,jie,c6o,f6o,yq,m6o,g6o,h6o,Au,Die,p6o,u6o,Lq,_6o,b6o,v6o,yu,Gie,F6o,T6o,xq,M6o,E6o,C6o,Lu,Oie,w6o,A6o,$q,y6o,L6o,x6o,xu,Vie,$6o,k6o,kq,S6o,R6o,P6o,$u,Xie,B6o,I6o,Sq,N6o,q6o,j6o,ku,zie,D6o,G6o,Rq,O6o,V6o,X6o,Su,Wie,z6o,W6o,Pq,Q6o,H6o,U6o,Ru,Qie,J6o,Y6o,Bq,K6o,Z6o,eTo,Pu,Hie,oTo,rTo,Iq,tTo,aTo,nTo,Bu,Uie,sTo,lTo,Nq,iTo,dTo,cTo,Iu,Jie,fTo,mTo,qq,gTo,hTo,pTo,Nu,Yie,uTo,_To,jq,bTo,vTo,FTo,qu,Kie,TTo,MTo,Dq,ETo,CTo,wTo,ju,Zie,ATo,yTo,Gq,LTo,xTo,$To,Du,ede,kTo,STo,Oq,RTo,PTo,BTo,Gu,ode,ITo,NTo,Vq,qTo,jTo,DTo,Ou,rde,GTo,OTo,Xq,VTo,XTo,zTo,Vu,tde,WTo,QTo,zq,HTo,UTo,JTo,Xu,ade,YTo,KTo,Wq,ZTo,e7o,o7o,zu,nde,r7o,t7o,Qq,a7o,n7o,s7o,Wu,sde,l7o,i7o,Hq,d7o,c7o,f7o,Qu,lde,m7o,g7o,Uq,h7o,p7o,u7o,Hu,ide,_7o,b7o,Jq,v7o,F7o,T7o,Uu,dde,M7o,E7o,Yq,C7o,w7o,A7o,Ju,cde,y7o,L7o,Kq,x7o,$7o,k7o,Yu,fde,S7o,R7o,Zq,P7o,B7o,I7o,Ku,mde,N7o,q7o,ej,j7o,D7o,G7o,Zu,gde,O7o,V7o,oj,X7o,z7o,W7o,e_,hde,Q7o,H7o,rj,U7o,J7o,Y7o,o_,pde,K7o,Z7o,tj,e8o,o8o,r8o,r_,ude,t8o,a8o,aj,n8o,s8o,l8o,t_,_de,i8o,d8o,nj,c8o,f8o,m8o,a_,bde,g8o,h8o,sj,p8o,u8o,_8o,n_,vde,b8o,v8o,lj,F8o,T8o,M8o,s_,Fde,E8o,C8o,ij,w8o,A8o,y8o,l_,Tde,L8o,x8o,dj,$8o,k8o,S8o,i_,Mde,R8o,P8o,cj,B8o,I8o,N8o,d_,Ede,q8o,j8o,fj,D8o,G8o,O8o,c_,Cde,V8o,X8o,mj,z8o,W8o,Q8o,f_,wde,H8o,U8o,gj,J8o,Y8o,K8o,m_,Ade,Z8o,eMo,hj,oMo,rMo,tMo,g_,yde,aMo,nMo,pj,sMo,lMo,iMo,h_,Lde,dMo,cMo,uj,fMo,mMo,gMo,p_,xde,hMo,pMo,_j,uMo,_Mo,bMo,u_,$de,vMo,FMo,bj,TMo,MMo,EMo,__,kde,CMo,wMo,vj,AMo,yMo,LMo,b_,Sde,xMo,$Mo,Fj,kMo,SMo,RMo,v_,PMo,Rde,BMo,IMo,Pde,NMo,qMo,F_,cDe,Ii,T_,Bde,IA,jMo,Ide,DMo,fDe,$o,NA,GMo,Ni,OMo,Tj,VMo,XMo,Mj,zMo,WMo,QMo,qA,HMo,Nde,UMo,JMo,YMo,st,jA,KMo,qde,ZMo,e4o,qi,o4o,jde,r4o,t4o,Ej,a4o,n4o,s4o,M_,l4o,Ye,DA,i4o,Dde,d4o,c4o,Ra,f4o,Gde,m4o,g4o,Ode,h4o,p4o,Vde,u4o,_4o,b4o,G,E_,Xde,v4o,F4o,Cj,T4o,M4o,E4o,C_,zde,C4o,w4o,wj,A4o,y4o,L4o,w_,Wde,x4o,$4o,Aj,k4o,S4o,R4o,A_,Qde,P4o,B4o,yj,I4o,N4o,q4o,y_,Hde,j4o,D4o,Lj,G4o,O4o,V4o,L_,Ude,X4o,z4o,xj,W4o,Q4o,H4o,x_,Jde,U4o,J4o,$j,Y4o,K4o,Z4o,$_,Yde,eEo,oEo,kj,rEo,tEo,aEo,k_,Kde,nEo,sEo,Sj,lEo,iEo,dEo,S_,Zde,cEo,fEo,Rj,mEo,gEo,hEo,R_,ece,pEo,uEo,Pj,_Eo,bEo,vEo,P_,oce,FEo,TEo,Bj,MEo,EEo,CEo,B_,rce,wEo,AEo,Ij,yEo,LEo,xEo,I_,tce,$Eo,kEo,Nj,SEo,REo,PEo,N_,ace,BEo,IEo,qj,NEo,qEo,jEo,q_,nce,DEo,GEo,jj,OEo,VEo,XEo,j_,sce,zEo,WEo,Dj,QEo,HEo,UEo,D_,lce,JEo,YEo,Gj,KEo,ZEo,eCo,G_,ice,oCo,rCo,Oj,tCo,aCo,nCo,O_,dce,sCo,lCo,Vj,iCo,dCo,cCo,V_,cce,fCo,mCo,Xj,gCo,hCo,pCo,X_,fce,uCo,_Co,zj,bCo,vCo,FCo,z_,mce,TCo,MCo,Wj,ECo,CCo,wCo,W_,gce,ACo,yCo,Qj,LCo,xCo,$Co,Q_,hce,kCo,SCo,Hj,RCo,PCo,BCo,H_,pce,ICo,NCo,Uj,qCo,jCo,DCo,U_,uce,GCo,OCo,Jj,VCo,XCo,zCo,J_,_ce,WCo,QCo,Yj,HCo,UCo,JCo,Y_,bce,YCo,KCo,Kj,ZCo,e5o,o5o,K_,vce,r5o,t5o,Zj,a5o,n5o,s5o,Z_,Fce,l5o,i5o,eD,d5o,c5o,f5o,e2,Tce,m5o,g5o,oD,h5o,p5o,u5o,o2,Mce,_5o,b5o,rD,v5o,F5o,T5o,r2,Ece,M5o,E5o,tD,C5o,w5o,A5o,t2,Cce,y5o,L5o,aD,x5o,$5o,k5o,a2,wce,S5o,R5o,nD,P5o,B5o,I5o,n2,Ace,N5o,q5o,sD,j5o,D5o,G5o,s2,yce,O5o,V5o,lD,X5o,z5o,W5o,l2,Lce,Q5o,H5o,iD,U5o,J5o,Y5o,i2,xce,K5o,Z5o,dD,e3o,o3o,r3o,d2,$ce,t3o,a3o,cD,n3o,s3o,l3o,c2,kce,i3o,d3o,fD,c3o,f3o,m3o,f2,g3o,Sce,h3o,p3o,Rce,u3o,_3o,m2,mDe,ji,g2,Pce,GA,b3o,Bce,v3o,gDe,ko,OA,F3o,Di,T3o,mD,M3o,E3o,gD,C3o,w3o,A3o,VA,y3o,Ice,L3o,x3o,$3o,lt,XA,k3o,Nce,S3o,R3o,Gi,P3o,qce,B3o,I3o,hD,N3o,q3o,j3o,h2,D3o,Ke,zA,G3o,jce,O3o,V3o,Pa,X3o,Dce,z3o,W3o,Gce,Q3o,H3o,Oce,U3o,J3o,Y3o,z,p2,Vce,K3o,Z3o,pD,ewo,owo,rwo,u2,Xce,two,awo,uD,nwo,swo,lwo,_2,zce,iwo,dwo,_D,cwo,fwo,mwo,b2,Wce,gwo,hwo,bD,pwo,uwo,_wo,v2,Qce,bwo,vwo,vD,Fwo,Two,Mwo,F2,Hce,Ewo,Cwo,FD,wwo,Awo,ywo,T2,Uce,Lwo,xwo,TD,$wo,kwo,Swo,M2,Jce,Rwo,Pwo,MD,Bwo,Iwo,Nwo,E2,Yce,qwo,jwo,ED,Dwo,Gwo,Owo,C2,Kce,Vwo,Xwo,CD,zwo,Wwo,Qwo,w2,Zce,Hwo,Uwo,wD,Jwo,Ywo,Kwo,A2,efe,Zwo,e0o,AD,o0o,r0o,t0o,y2,ofe,a0o,n0o,yD,s0o,l0o,i0o,L2,rfe,d0o,c0o,LD,f0o,m0o,g0o,x2,tfe,h0o,p0o,xD,u0o,_0o,b0o,$2,afe,v0o,F0o,$D,T0o,M0o,E0o,k2,nfe,C0o,w0o,kD,A0o,y0o,L0o,S2,sfe,x0o,$0o,SD,k0o,S0o,R0o,R2,lfe,P0o,B0o,RD,I0o,N0o,q0o,P2,ife,j0o,D0o,PD,G0o,O0o,V0o,B2,dfe,X0o,z0o,BD,W0o,Q0o,H0o,I2,cfe,U0o,J0o,ID,Y0o,K0o,Z0o,N2,ffe,eAo,oAo,ND,rAo,tAo,aAo,q2,mfe,nAo,sAo,qD,lAo,iAo,dAo,j2,gfe,cAo,fAo,jD,mAo,gAo,hAo,D2,hfe,pAo,uAo,DD,_Ao,bAo,vAo,G2,pfe,FAo,TAo,GD,MAo,EAo,CAo,O2,ufe,wAo,AAo,OD,yAo,LAo,xAo,V2,_fe,$Ao,kAo,VD,SAo,RAo,PAo,X2,bfe,BAo,IAo,XD,NAo,qAo,jAo,z2,vfe,DAo,GAo,zD,OAo,VAo,XAo,W2,Ffe,zAo,WAo,WD,QAo,HAo,UAo,Q2,Tfe,JAo,YAo,QD,KAo,ZAo,eyo,H2,Mfe,oyo,ryo,HD,tyo,ayo,nyo,U2,Efe,syo,lyo,UD,iyo,dyo,cyo,J2,Cfe,fyo,myo,JD,gyo,hyo,pyo,Y2,wfe,uyo,_yo,YD,byo,vyo,Fyo,K2,Tyo,Afe,Myo,Eyo,yfe,Cyo,wyo,Z2,hDe,Oi,e1,Lfe,WA,Ayo,xfe,yyo,pDe,So,QA,Lyo,Vi,xyo,KD,$yo,kyo,ZD,Syo,Ryo,Pyo,HA,Byo,$fe,Iyo,Nyo,qyo,it,UA,jyo,kfe,Dyo,Gyo,Xi,Oyo,Sfe,Vyo,Xyo,eG,zyo,Wyo,Qyo,o1,Hyo,Ze,JA,Uyo,Rfe,Jyo,Yyo,Ba,Kyo,Pfe,Zyo,eLo,Bfe,oLo,rLo,Ife,tLo,aLo,nLo,W,r1,Nfe,sLo,lLo,oG,iLo,dLo,cLo,t1,qfe,fLo,mLo,rG,gLo,hLo,pLo,a1,jfe,uLo,_Lo,tG,bLo,vLo,FLo,n1,Dfe,TLo,MLo,aG,ELo,CLo,wLo,s1,Gfe,ALo,yLo,nG,LLo,xLo,$Lo,l1,Ofe,kLo,SLo,sG,RLo,PLo,BLo,i1,Vfe,ILo,NLo,lG,qLo,jLo,DLo,d1,Xfe,GLo,OLo,iG,VLo,XLo,zLo,c1,zfe,WLo,QLo,dG,HLo,ULo,JLo,f1,Wfe,YLo,KLo,cG,ZLo,e9o,o9o,m1,Qfe,r9o,t9o,fG,a9o,n9o,s9o,g1,Hfe,l9o,i9o,mG,d9o,c9o,f9o,h1,Ufe,m9o,g9o,gG,h9o,p9o,u9o,p1,Jfe,_9o,b9o,hG,v9o,F9o,T9o,u1,Yfe,M9o,E9o,pG,C9o,w9o,A9o,_1,Kfe,y9o,L9o,uG,x9o,$9o,k9o,b1,Zfe,S9o,R9o,_G,P9o,B9o,I9o,v1,eme,N9o,q9o,bG,j9o,D9o,G9o,F1,ome,O9o,V9o,vG,X9o,z9o,W9o,T1,rme,Q9o,H9o,FG,U9o,J9o,Y9o,M1,tme,K9o,Z9o,TG,exo,oxo,rxo,E1,ame,txo,axo,MG,nxo,sxo,lxo,C1,nme,ixo,dxo,EG,cxo,fxo,mxo,w1,sme,gxo,hxo,CG,pxo,uxo,_xo,A1,lme,bxo,vxo,wG,Fxo,Txo,Mxo,y1,ime,Exo,Cxo,AG,wxo,Axo,yxo,L1,dme,Lxo,xxo,yG,$xo,kxo,Sxo,x1,cme,Rxo,Pxo,LG,Bxo,Ixo,Nxo,$1,fme,qxo,jxo,xG,Dxo,Gxo,Oxo,k1,mme,Vxo,Xxo,$G,zxo,Wxo,Qxo,S1,gme,Hxo,Uxo,kG,Jxo,Yxo,Kxo,R1,hme,Zxo,e$o,pme,o$o,r$o,t$o,P1,ume,a$o,n$o,SG,s$o,l$o,i$o,B1,_me,d$o,c$o,RG,f$o,m$o,g$o,I1,bme,h$o,p$o,PG,u$o,_$o,b$o,N1,vme,v$o,F$o,BG,T$o,M$o,E$o,q1,C$o,Fme,w$o,A$o,Tme,y$o,L$o,j1,uDe,zi,D1,Mme,YA,x$o,Eme,$$o,_De,Ro,KA,k$o,Wi,S$o,IG,R$o,P$o,NG,B$o,I$o,N$o,ZA,q$o,Cme,j$o,D$o,G$o,dt,ey,O$o,wme,V$o,X$o,Qi,z$o,Ame,W$o,Q$o,qG,H$o,U$o,J$o,G1,Y$o,eo,oy,K$o,yme,Z$o,eko,Ia,oko,Lme,rko,tko,xme,ako,nko,$me,sko,lko,iko,ue,O1,kme,dko,cko,jG,fko,mko,gko,V1,Sme,hko,pko,DG,uko,_ko,bko,X1,Rme,vko,Fko,GG,Tko,Mko,Eko,z1,Pme,Cko,wko,OG,Ako,yko,Lko,W1,Bme,xko,$ko,VG,kko,Sko,Rko,Q1,Ime,Pko,Bko,XG,Iko,Nko,qko,H1,Nme,jko,Dko,zG,Gko,Oko,Vko,U1,qme,Xko,zko,WG,Wko,Qko,Hko,J1,jme,Uko,Jko,QG,Yko,Kko,Zko,Y1,Dme,eSo,oSo,HG,rSo,tSo,aSo,K1,Gme,nSo,sSo,UG,lSo,iSo,dSo,Z1,Ome,cSo,fSo,JG,mSo,gSo,hSo,eb,Vme,pSo,uSo,YG,_So,bSo,vSo,ob,Xme,FSo,TSo,KG,MSo,ESo,CSo,rb,zme,wSo,ASo,ZG,ySo,LSo,xSo,tb,Wme,$So,kSo,eO,SSo,RSo,PSo,ab,BSo,Qme,ISo,NSo,Hme,qSo,jSo,nb,bDe,Hi,sb,Ume,ry,DSo,Jme,GSo,vDe,Po,ty,OSo,Ui,VSo,oO,XSo,zSo,rO,WSo,QSo,HSo,ay,USo,Yme,JSo,YSo,KSo,ct,ny,ZSo,Kme,eRo,oRo,Ji,rRo,Zme,tRo,aRo,tO,nRo,sRo,lRo,lb,iRo,oo,sy,dRo,ege,cRo,fRo,Na,mRo,oge,gRo,hRo,rge,pRo,uRo,tge,_Ro,bRo,vRo,N,ib,age,FRo,TRo,aO,MRo,ERo,CRo,db,nge,wRo,ARo,nO,yRo,LRo,xRo,cb,sge,$Ro,kRo,sO,SRo,RRo,PRo,fb,lge,BRo,IRo,lO,NRo,qRo,jRo,mb,ige,DRo,GRo,iO,ORo,VRo,XRo,gb,dge,zRo,WRo,dO,QRo,HRo,URo,hb,cge,JRo,YRo,cO,KRo,ZRo,ePo,pb,fge,oPo,rPo,fO,tPo,aPo,nPo,ub,mge,sPo,lPo,mO,iPo,dPo,cPo,_b,gge,fPo,mPo,gO,gPo,hPo,pPo,bb,hge,uPo,_Po,hO,bPo,vPo,FPo,vb,pge,TPo,MPo,pO,EPo,CPo,wPo,Fb,uge,APo,yPo,uO,LPo,xPo,$Po,Tb,_ge,kPo,SPo,_O,RPo,PPo,BPo,Mb,bge,IPo,NPo,bO,qPo,jPo,DPo,Eb,vge,GPo,OPo,vO,VPo,XPo,zPo,Cb,Fge,WPo,QPo,FO,HPo,UPo,JPo,wb,Tge,YPo,KPo,TO,ZPo,eBo,oBo,Ab,Mge,rBo,tBo,MO,aBo,nBo,sBo,yb,Ege,lBo,iBo,EO,dBo,cBo,fBo,Lb,Cge,mBo,gBo,CO,hBo,pBo,uBo,xb,wge,_Bo,bBo,wO,vBo,FBo,TBo,$b,Age,MBo,EBo,AO,CBo,wBo,ABo,kb,yge,yBo,LBo,yO,xBo,$Bo,kBo,Sb,Lge,SBo,RBo,LO,PBo,BBo,IBo,Rb,xge,NBo,qBo,xO,jBo,DBo,GBo,Pb,$ge,OBo,VBo,$O,XBo,zBo,WBo,Bb,kge,QBo,HBo,kO,UBo,JBo,YBo,Ib,Sge,KBo,ZBo,SO,eIo,oIo,rIo,Nb,Rge,tIo,aIo,RO,nIo,sIo,lIo,qb,Pge,iIo,dIo,PO,cIo,fIo,mIo,jb,Bge,gIo,hIo,BO,pIo,uIo,_Io,Db,Ige,bIo,vIo,IO,FIo,TIo,MIo,Gb,Nge,EIo,CIo,NO,wIo,AIo,yIo,Ob,qge,LIo,xIo,qO,$Io,kIo,SIo,Vb,jge,RIo,PIo,jO,BIo,IIo,NIo,Xb,Dge,qIo,jIo,DO,DIo,GIo,OIo,zb,Gge,VIo,XIo,GO,zIo,WIo,QIo,Wb,Oge,HIo,UIo,OO,JIo,YIo,KIo,Qb,Vge,ZIo,eNo,VO,oNo,rNo,tNo,Hb,Xge,aNo,nNo,XO,sNo,lNo,iNo,Ub,zge,dNo,cNo,zO,fNo,mNo,gNo,Jb,Wge,hNo,pNo,WO,uNo,_No,bNo,Yb,Qge,vNo,FNo,QO,TNo,MNo,ENo,Kb,Hge,CNo,wNo,HO,ANo,yNo,LNo,Zb,Uge,xNo,$No,UO,kNo,SNo,RNo,ev,Jge,PNo,BNo,JO,INo,NNo,qNo,ov,jNo,Yge,DNo,GNo,Kge,ONo,VNo,rv,FDe,Yi,tv,Zge,ly,XNo,ehe,zNo,TDe,Bo,iy,WNo,Ki,QNo,YO,HNo,UNo,KO,JNo,YNo,KNo,dy,ZNo,ohe,eqo,oqo,rqo,ft,cy,tqo,rhe,aqo,nqo,Zi,sqo,the,lqo,iqo,ZO,dqo,cqo,fqo,av,mqo,ro,fy,gqo,ahe,hqo,pqo,qa,uqo,nhe,_qo,bqo,she,vqo,Fqo,lhe,Tqo,Mqo,Eqo,Z,nv,ihe,Cqo,wqo,eV,Aqo,yqo,Lqo,sv,dhe,xqo,$qo,oV,kqo,Sqo,Rqo,lv,che,Pqo,Bqo,rV,Iqo,Nqo,qqo,iv,fhe,jqo,Dqo,tV,Gqo,Oqo,Vqo,dv,mhe,Xqo,zqo,aV,Wqo,Qqo,Hqo,cv,ghe,Uqo,Jqo,nV,Yqo,Kqo,Zqo,fv,hhe,ejo,ojo,sV,rjo,tjo,ajo,mv,phe,njo,sjo,lV,ljo,ijo,djo,gv,uhe,cjo,fjo,iV,mjo,gjo,hjo,hv,_he,pjo,ujo,dV,_jo,bjo,vjo,pv,bhe,Fjo,Tjo,cV,Mjo,Ejo,Cjo,uv,vhe,wjo,Ajo,fV,yjo,Ljo,xjo,_v,Fhe,$jo,kjo,mV,Sjo,Rjo,Pjo,bv,The,Bjo,Ijo,gV,Njo,qjo,jjo,vv,Mhe,Djo,Gjo,hV,Ojo,Vjo,Xjo,Fv,Ehe,zjo,Wjo,pV,Qjo,Hjo,Ujo,Tv,Che,Jjo,Yjo,uV,Kjo,Zjo,eDo,Mv,whe,oDo,rDo,_V,tDo,aDo,nDo,Ev,Ahe,sDo,lDo,bV,iDo,dDo,cDo,Cv,yhe,fDo,mDo,vV,gDo,hDo,pDo,wv,Lhe,uDo,_Do,FV,bDo,vDo,FDo,Av,xhe,TDo,MDo,TV,EDo,CDo,wDo,yv,$he,ADo,yDo,MV,LDo,xDo,$Do,Lv,khe,kDo,SDo,EV,RDo,PDo,BDo,xv,She,IDo,NDo,CV,qDo,jDo,DDo,$v,Rhe,GDo,ODo,wV,VDo,XDo,zDo,kv,Phe,WDo,QDo,AV,HDo,UDo,JDo,Sv,Bhe,YDo,KDo,yV,ZDo,eGo,oGo,Rv,Ihe,rGo,tGo,LV,aGo,nGo,sGo,Pv,lGo,Nhe,iGo,dGo,qhe,cGo,fGo,Bv,MDe,ed,Iv,jhe,my,mGo,Dhe,gGo,EDe,Io,gy,hGo,od,pGo,xV,uGo,_Go,$V,bGo,vGo,FGo,hy,TGo,Ghe,MGo,EGo,CGo,mt,py,wGo,Ohe,AGo,yGo,rd,LGo,Vhe,xGo,$Go,kV,kGo,SGo,RGo,Nv,PGo,to,uy,BGo,Xhe,IGo,NGo,ja,qGo,zhe,jGo,DGo,Whe,GGo,OGo,Qhe,VGo,XGo,zGo,Zr,qv,Hhe,WGo,QGo,SV,HGo,UGo,JGo,jv,Uhe,YGo,KGo,RV,ZGo,eOo,oOo,Dv,Jhe,rOo,tOo,PV,aOo,nOo,sOo,Gv,Yhe,lOo,iOo,BV,dOo,cOo,fOo,Ov,Khe,mOo,gOo,IV,hOo,pOo,uOo,Vv,_Oo,Zhe,bOo,vOo,epe,FOo,TOo,Xv,CDe,td,zv,ope,_y,MOo,rpe,EOo,wDe,No,by,COo,ad,wOo,NV,AOo,yOo,qV,LOo,xOo,$Oo,vy,kOo,tpe,SOo,ROo,POo,gt,Fy,BOo,ape,IOo,NOo,nd,qOo,npe,jOo,DOo,jV,GOo,OOo,VOo,Wv,XOo,ao,Ty,zOo,spe,WOo,QOo,Da,HOo,lpe,UOo,JOo,ipe,YOo,KOo,dpe,ZOo,eVo,oVo,U,Qv,cpe,rVo,tVo,DV,aVo,nVo,sVo,Hv,fpe,lVo,iVo,GV,dVo,cVo,fVo,Uv,mpe,mVo,gVo,OV,hVo,pVo,uVo,Jv,gpe,_Vo,bVo,VV,vVo,FVo,TVo,Yv,hpe,MVo,EVo,XV,CVo,wVo,AVo,Kv,ppe,yVo,LVo,zV,xVo,$Vo,kVo,Zv,upe,SVo,RVo,WV,PVo,BVo,IVo,eF,_pe,NVo,qVo,QV,jVo,DVo,GVo,oF,bpe,OVo,VVo,HV,XVo,zVo,WVo,rF,vpe,QVo,HVo,UV,UVo,JVo,YVo,tF,Fpe,KVo,ZVo,JV,eXo,oXo,rXo,aF,Tpe,tXo,aXo,YV,nXo,sXo,lXo,nF,Mpe,iXo,dXo,KV,cXo,fXo,mXo,sF,Epe,gXo,hXo,ZV,pXo,uXo,_Xo,lF,Cpe,bXo,vXo,eX,FXo,TXo,MXo,iF,wpe,EXo,CXo,oX,wXo,AXo,yXo,dF,Ape,LXo,xXo,rX,$Xo,kXo,SXo,cF,ype,RXo,PXo,tX,BXo,IXo,NXo,fF,Lpe,qXo,jXo,aX,DXo,GXo,OXo,mF,xpe,VXo,XXo,nX,zXo,WXo,QXo,gF,$pe,HXo,UXo,sX,JXo,YXo,KXo,hF,kpe,ZXo,ezo,lX,ozo,rzo,tzo,pF,Spe,azo,nzo,iX,szo,lzo,izo,uF,Rpe,dzo,czo,dX,fzo,mzo,gzo,_F,Ppe,hzo,pzo,cX,uzo,_zo,bzo,bF,Bpe,vzo,Fzo,fX,Tzo,Mzo,Ezo,vF,Ipe,Czo,wzo,mX,Azo,yzo,Lzo,FF,Npe,xzo,$zo,gX,kzo,Szo,Rzo,TF,qpe,Pzo,Bzo,hX,Izo,Nzo,qzo,MF,jpe,jzo,Dzo,pX,Gzo,Ozo,Vzo,EF,Dpe,Xzo,zzo,uX,Wzo,Qzo,Hzo,CF,Gpe,Uzo,Jzo,_X,Yzo,Kzo,Zzo,wF,Ope,eWo,oWo,bX,rWo,tWo,aWo,AF,Vpe,nWo,sWo,vX,lWo,iWo,dWo,yF,cWo,Xpe,fWo,mWo,zpe,gWo,hWo,LF,ADe,sd,xF,Wpe,My,pWo,Qpe,uWo,yDe,qo,Ey,_Wo,ld,bWo,FX,vWo,FWo,TX,TWo,MWo,EWo,Cy,CWo,Hpe,wWo,AWo,yWo,ht,wy,LWo,Upe,xWo,$Wo,id,kWo,Jpe,SWo,RWo,MX,PWo,BWo,IWo,$F,NWo,no,Ay,qWo,Ype,jWo,DWo,Ga,GWo,Kpe,OWo,VWo,Zpe,XWo,zWo,eue,WWo,QWo,HWo,V,kF,oue,UWo,JWo,EX,YWo,KWo,ZWo,SF,rue,eQo,oQo,CX,rQo,tQo,aQo,RF,tue,nQo,sQo,wX,lQo,iQo,dQo,PF,aue,cQo,fQo,AX,mQo,gQo,hQo,BF,nue,pQo,uQo,yX,_Qo,bQo,vQo,IF,sue,FQo,TQo,LX,MQo,EQo,CQo,NF,lue,wQo,AQo,xX,yQo,LQo,xQo,qF,iue,$Qo,kQo,$X,SQo,RQo,PQo,jF,due,BQo,IQo,kX,NQo,qQo,jQo,DF,cue,DQo,GQo,SX,OQo,VQo,XQo,GF,fue,zQo,WQo,RX,QQo,HQo,UQo,OF,mue,JQo,YQo,PX,KQo,ZQo,eHo,VF,gue,oHo,rHo,BX,tHo,aHo,nHo,XF,hue,sHo,lHo,IX,iHo,dHo,cHo,zF,pue,fHo,mHo,NX,gHo,hHo,pHo,WF,uue,uHo,_Ho,qX,bHo,vHo,FHo,QF,_ue,THo,MHo,jX,EHo,CHo,wHo,HF,bue,AHo,yHo,DX,LHo,xHo,$Ho,UF,vue,kHo,SHo,GX,RHo,PHo,BHo,JF,Fue,IHo,NHo,OX,qHo,jHo,DHo,YF,Tue,GHo,OHo,VX,VHo,XHo,zHo,KF,Mue,WHo,QHo,XX,HHo,UHo,JHo,ZF,Eue,YHo,KHo,zX,ZHo,eUo,oUo,e6,Cue,rUo,tUo,WX,aUo,nUo,sUo,o6,wue,lUo,iUo,QX,dUo,cUo,fUo,r6,Aue,mUo,gUo,HX,hUo,pUo,uUo,t6,yue,_Uo,bUo,UX,vUo,FUo,TUo,a6,Lue,MUo,EUo,JX,CUo,wUo,AUo,n6,xue,yUo,LUo,YX,xUo,$Uo,kUo,s6,$ue,SUo,RUo,KX,PUo,BUo,IUo,l6,kue,NUo,qUo,ZX,jUo,DUo,GUo,i6,Sue,OUo,VUo,ez,XUo,zUo,WUo,d6,Rue,QUo,HUo,oz,UUo,JUo,YUo,c6,Pue,KUo,ZUo,rz,eJo,oJo,rJo,f6,Bue,tJo,aJo,tz,nJo,sJo,lJo,m6,Iue,iJo,dJo,az,cJo,fJo,mJo,g6,Nue,gJo,hJo,nz,pJo,uJo,_Jo,h6,que,bJo,vJo,sz,FJo,TJo,MJo,p6,jue,EJo,CJo,lz,wJo,AJo,yJo,u6,Due,LJo,xJo,iz,$Jo,kJo,SJo,_6,RJo,Gue,PJo,BJo,Oue,IJo,NJo,b6,LDe,dd,v6,Vue,yy,qJo,Xue,jJo,xDe,jo,Ly,DJo,cd,GJo,dz,OJo,VJo,cz,XJo,zJo,WJo,xy,QJo,zue,HJo,UJo,JJo,pt,$y,YJo,Wue,KJo,ZJo,fd,eYo,Que,oYo,rYo,fz,tYo,aYo,nYo,F6,sYo,so,ky,lYo,Hue,iYo,dYo,Oa,cYo,Uue,fYo,mYo,Jue,gYo,hYo,Yue,pYo,uYo,_Yo,Kue,T6,Zue,bYo,vYo,mz,FYo,TYo,MYo,M6,EYo,e_e,CYo,wYo,o_e,AYo,yYo,E6,$De,md,C6,r_e,Sy,LYo,t_e,xYo,kDe,Do,Ry,$Yo,gd,kYo,gz,SYo,RYo,hz,PYo,BYo,IYo,Py,NYo,a_e,qYo,jYo,DYo,ut,By,GYo,n_e,OYo,VYo,hd,XYo,s_e,zYo,WYo,pz,QYo,HYo,UYo,w6,JYo,lo,Iy,YYo,l_e,KYo,ZYo,Va,eKo,i_e,oKo,rKo,d_e,tKo,aKo,c_e,nKo,sKo,lKo,ve,A6,f_e,iKo,dKo,uz,cKo,fKo,mKo,y6,m_e,gKo,hKo,_z,pKo,uKo,_Ko,L6,g_e,bKo,vKo,bz,FKo,TKo,MKo,x6,h_e,EKo,CKo,vz,wKo,AKo,yKo,Gs,p_e,LKo,xKo,Fz,$Ko,kKo,Tz,SKo,RKo,PKo,$6,u_e,BKo,IKo,Mz,NKo,qKo,jKo,Os,__e,DKo,GKo,Ez,OKo,VKo,Cz,XKo,zKo,WKo,_t,b_e,QKo,HKo,wz,UKo,JKo,Az,YKo,KKo,yz,ZKo,eZo,oZo,k6,v_e,rZo,tZo,Lz,aZo,nZo,sZo,S6,F_e,lZo,iZo,xz,dZo,cZo,fZo,R6,T_e,mZo,gZo,$z,hZo,pZo,uZo,P6,M_e,_Zo,bZo,kz,vZo,FZo,TZo,B6,E_e,MZo,EZo,Sz,CZo,wZo,AZo,I6,C_e,yZo,LZo,Rz,xZo,$Zo,kZo,N6,w_e,SZo,RZo,Pz,PZo,BZo,IZo,q6,NZo,A_e,qZo,jZo,y_e,DZo,GZo,j6,SDe,pd,D6,L_e,Ny,OZo,x_e,VZo,RDe,Go,qy,XZo,ud,zZo,Bz,WZo,QZo,Iz,HZo,UZo,JZo,jy,YZo,$_e,KZo,ZZo,eer,bt,Dy,oer,k_e,rer,ter,_d,aer,S_e,ner,ser,Nz,ler,ier,der,G6,cer,io,Gy,fer,R_e,mer,ger,Xa,her,P_e,per,uer,B_e,_er,ber,I_e,ver,Fer,Ter,N_e,O6,q_e,Mer,Eer,qz,Cer,wer,Aer,V6,yer,j_e,Ler,xer,D_e,$er,ker,X6,PDe,bd,z6,G_e,Oy,Ser,O_e,Rer,BDe,Oo,Vy,Per,vd,Ber,jz,Ier,Ner,Dz,qer,jer,Der,Xy,Ger,V_e,Oer,Ver,Xer,vt,zy,zer,X_e,Wer,Qer,Fd,Her,z_e,Uer,Jer,Gz,Yer,Ker,Zer,W6,eor,co,Wy,oor,W_e,ror,tor,za,aor,Q_e,nor,sor,H_e,lor,ior,U_e,dor,cor,mor,J_e,Q6,Y_e,gor,hor,Oz,por,uor,_or,H6,bor,K_e,vor,For,Z_e,Tor,Mor,U6,IDe,Td,J6,e2e,Qy,Eor,o2e,Cor,NDe,Vo,Hy,wor,Md,Aor,Vz,yor,Lor,Xz,xor,$or,kor,Uy,Sor,r2e,Ror,Por,Bor,Ft,Jy,Ior,t2e,Nor,qor,Ed,jor,a2e,Dor,Gor,zz,Oor,Vor,Xor,Y6,zor,fo,Yy,Wor,n2e,Qor,Hor,Wa,Uor,s2e,Jor,Yor,l2e,Kor,Zor,i2e,err,orr,rrr,Re,K6,d2e,trr,arr,Wz,nrr,srr,lrr,Z6,c2e,irr,drr,Qz,crr,frr,mrr,eT,f2e,grr,hrr,Hz,prr,urr,_rr,oT,m2e,brr,vrr,Uz,Frr,Trr,Mrr,rT,g2e,Err,Crr,Jz,wrr,Arr,yrr,tT,h2e,Lrr,xrr,Yz,$rr,krr,Srr,aT,p2e,Rrr,Prr,Kz,Brr,Irr,Nrr,nT,u2e,qrr,jrr,Zz,Drr,Grr,Orr,sT,_2e,Vrr,Xrr,eW,zrr,Wrr,Qrr,lT,Hrr,b2e,Urr,Jrr,v2e,Yrr,Krr,iT,qDe,Cd,dT,F2e,Ky,Zrr,T2e,etr,jDe,Xo,Zy,otr,wd,rtr,oW,ttr,atr,rW,ntr,str,ltr,eL,itr,M2e,dtr,ctr,ftr,Tt,oL,mtr,E2e,gtr,htr,Ad,ptr,C2e,utr,_tr,tW,btr,vtr,Ftr,cT,Ttr,mo,rL,Mtr,w2e,Etr,Ctr,Qa,wtr,A2e,Atr,ytr,y2e,Ltr,xtr,L2e,$tr,ktr,Str,et,fT,x2e,Rtr,Ptr,aW,Btr,Itr,Ntr,mT,$2e,qtr,jtr,nW,Dtr,Gtr,Otr,gT,k2e,Vtr,Xtr,sW,ztr,Wtr,Qtr,hT,S2e,Htr,Utr,lW,Jtr,Ytr,Ktr,pT,R2e,Ztr,ear,iW,oar,rar,tar,uT,aar,P2e,nar,sar,B2e,lar,iar,_T,DDe,yd,bT,I2e,tL,dar,N2e,car,GDe,zo,aL,far,Ld,mar,dW,gar,har,cW,par,uar,_ar,nL,bar,q2e,Far,Tar,Mar,Mt,sL,Ear,j2e,Car,war,xd,Aar,D2e,yar,Lar,fW,xar,$ar,kar,vT,Sar,go,lL,Rar,G2e,Par,Bar,Ha,Iar,O2e,Nar,qar,V2e,jar,Dar,X2e,Gar,Oar,Var,ye,FT,z2e,Xar,zar,mW,War,Qar,Har,TT,W2e,Uar,Jar,gW,Yar,Kar,Zar,MT,Q2e,enr,onr,hW,rnr,tnr,anr,ET,H2e,nnr,snr,pW,lnr,inr,dnr,CT,U2e,cnr,fnr,uW,mnr,gnr,hnr,wT,J2e,pnr,unr,_W,_nr,bnr,vnr,AT,Y2e,Fnr,Tnr,bW,Mnr,Enr,Cnr,yT,K2e,wnr,Anr,vW,ynr,Lnr,xnr,LT,Z2e,$nr,knr,FW,Snr,Rnr,Pnr,xT,e1e,Bnr,Inr,TW,Nnr,qnr,jnr,$T,Dnr,o1e,Gnr,Onr,r1e,Vnr,Xnr,kT,ODe,$d,ST,t1e,iL,znr,a1e,Wnr,VDe,Wo,dL,Qnr,kd,Hnr,MW,Unr,Jnr,EW,Ynr,Knr,Znr,cL,esr,n1e,osr,rsr,tsr,Et,fL,asr,s1e,nsr,ssr,Sd,lsr,l1e,isr,dsr,CW,csr,fsr,msr,RT,gsr,ho,mL,hsr,i1e,psr,usr,Ua,_sr,d1e,bsr,vsr,c1e,Fsr,Tsr,f1e,Msr,Esr,Csr,gL,PT,m1e,wsr,Asr,wW,ysr,Lsr,xsr,BT,g1e,$sr,ksr,AW,Ssr,Rsr,Psr,IT,Bsr,h1e,Isr,Nsr,p1e,qsr,jsr,NT,XDe,Rd,qT,u1e,hL,Dsr,_1e,Gsr,zDe,Qo,pL,Osr,Pd,Vsr,yW,Xsr,zsr,LW,Wsr,Qsr,Hsr,uL,Usr,b1e,Jsr,Ysr,Ksr,Ct,_L,Zsr,v1e,elr,olr,Bd,rlr,F1e,tlr,alr,xW,nlr,slr,llr,jT,ilr,po,bL,dlr,T1e,clr,flr,Ja,mlr,M1e,glr,hlr,E1e,plr,ulr,C1e,_lr,blr,vlr,ot,DT,w1e,Flr,Tlr,$W,Mlr,Elr,Clr,GT,A1e,wlr,Alr,kW,ylr,Llr,xlr,OT,y1e,$lr,klr,SW,Slr,Rlr,Plr,VT,L1e,Blr,Ilr,RW,Nlr,qlr,jlr,XT,x1e,Dlr,Glr,PW,Olr,Vlr,Xlr,zT,zlr,$1e,Wlr,Qlr,k1e,Hlr,Ulr,WT,WDe,Id,QT,S1e,vL,Jlr,R1e,Ylr,QDe,Ho,FL,Klr,Nd,Zlr,BW,eir,oir,IW,rir,tir,air,TL,nir,P1e,sir,lir,iir,wt,ML,dir,B1e,cir,fir,qd,mir,I1e,gir,hir,NW,pir,uir,_ir,HT,bir,uo,EL,vir,N1e,Fir,Tir,Ya,Mir,q1e,Eir,Cir,j1e,wir,Air,D1e,yir,Lir,xir,jd,UT,G1e,$ir,kir,qW,Sir,Rir,Pir,JT,O1e,Bir,Iir,jW,Nir,qir,jir,YT,V1e,Dir,Gir,DW,Oir,Vir,Xir,KT,zir,X1e,Wir,Qir,z1e,Hir,Uir,ZT,HDe,Dd,e7,W1e,CL,Jir,Q1e,Yir,UDe,Uo,wL,Kir,Gd,Zir,GW,edr,odr,OW,rdr,tdr,adr,AL,ndr,H1e,sdr,ldr,idr,At,yL,ddr,U1e,cdr,fdr,Od,mdr,J1e,gdr,hdr,VW,pdr,udr,_dr,o7,bdr,_o,LL,vdr,Y1e,Fdr,Tdr,Ka,Mdr,K1e,Edr,Cdr,Z1e,wdr,Adr,ebe,ydr,Ldr,xdr,xL,r7,obe,$dr,kdr,XW,Sdr,Rdr,Pdr,t7,rbe,Bdr,Idr,zW,Ndr,qdr,jdr,a7,Ddr,tbe,Gdr,Odr,abe,Vdr,Xdr,n7,JDe,Vd,s7,nbe,$L,zdr,sbe,Wdr,YDe,Jo,kL,Qdr,Xd,Hdr,WW,Udr,Jdr,QW,Ydr,Kdr,Zdr,SL,ecr,lbe,ocr,rcr,tcr,yt,RL,acr,ibe,ncr,scr,zd,lcr,dbe,icr,dcr,HW,ccr,fcr,mcr,l7,gcr,bo,PL,hcr,cbe,pcr,ucr,Za,_cr,fbe,bcr,vcr,mbe,Fcr,Tcr,gbe,Mcr,Ecr,Ccr,hbe,i7,pbe,wcr,Acr,UW,ycr,Lcr,xcr,d7,$cr,ube,kcr,Scr,_be,Rcr,Pcr,c7,KDe,Wd,f7,bbe,BL,Bcr,vbe,Icr,ZDe,Yo,IL,Ncr,Qd,qcr,JW,jcr,Dcr,YW,Gcr,Ocr,Vcr,NL,Xcr,Fbe,zcr,Wcr,Qcr,Lt,qL,Hcr,Tbe,Ucr,Jcr,Hd,Ycr,Mbe,Kcr,Zcr,KW,efr,ofr,rfr,m7,tfr,vo,jL,afr,Ebe,nfr,sfr,en,lfr,Cbe,ifr,dfr,wbe,cfr,ffr,Abe,mfr,gfr,hfr,on,g7,ybe,pfr,ufr,ZW,_fr,bfr,vfr,h7,Lbe,Ffr,Tfr,eQ,Mfr,Efr,Cfr,p7,xbe,wfr,Afr,oQ,yfr,Lfr,xfr,u7,$be,$fr,kfr,rQ,Sfr,Rfr,Pfr,_7,Bfr,kbe,Ifr,Nfr,Sbe,qfr,jfr,b7,eGe,Ud,v7,Rbe,DL,Dfr,Pbe,Gfr,oGe,Ko,GL,Ofr,Jd,Vfr,tQ,Xfr,zfr,aQ,Wfr,Qfr,Hfr,OL,Ufr,Bbe,Jfr,Yfr,Kfr,xt,VL,Zfr,Ibe,emr,omr,Yd,rmr,Nbe,tmr,amr,nQ,nmr,smr,lmr,F7,imr,Fo,XL,dmr,qbe,cmr,fmr,rn,mmr,jbe,gmr,hmr,Dbe,pmr,umr,Gbe,_mr,bmr,vmr,Obe,T7,Vbe,Fmr,Tmr,sQ,Mmr,Emr,Cmr,M7,wmr,Xbe,Amr,ymr,zbe,Lmr,xmr,E7,rGe,Kd,C7,Wbe,zL,$mr,Qbe,kmr,tGe,Zo,WL,Smr,Zd,Rmr,lQ,Pmr,Bmr,iQ,Imr,Nmr,qmr,QL,jmr,Hbe,Dmr,Gmr,Omr,$t,HL,Vmr,Ube,Xmr,zmr,ec,Wmr,Jbe,Qmr,Hmr,dQ,Umr,Jmr,Ymr,w7,Kmr,yr,UL,Zmr,Ybe,egr,ogr,tn,rgr,Kbe,tgr,agr,Zbe,ngr,sgr,eve,lgr,igr,dgr,q,A7,ove,cgr,fgr,cQ,mgr,ggr,hgr,y7,rve,pgr,ugr,fQ,_gr,bgr,vgr,L7,tve,Fgr,Tgr,mQ,Mgr,Egr,Cgr,x7,ave,wgr,Agr,gQ,ygr,Lgr,xgr,$7,nve,$gr,kgr,hQ,Sgr,Rgr,Pgr,k7,sve,Bgr,Igr,pQ,Ngr,qgr,jgr,S7,lve,Dgr,Ggr,uQ,Ogr,Vgr,Xgr,R7,ive,zgr,Wgr,_Q,Qgr,Hgr,Ugr,P7,dve,Jgr,Ygr,bQ,Kgr,Zgr,ehr,B7,cve,ohr,rhr,vQ,thr,ahr,nhr,I7,fve,shr,lhr,FQ,ihr,dhr,chr,N7,mve,fhr,mhr,TQ,ghr,hhr,phr,q7,gve,uhr,_hr,MQ,bhr,vhr,Fhr,j7,hve,Thr,Mhr,EQ,Ehr,Chr,whr,D7,pve,Ahr,yhr,CQ,Lhr,xhr,$hr,G7,uve,khr,Shr,wQ,Rhr,Phr,Bhr,O7,_ve,Ihr,Nhr,AQ,qhr,jhr,Dhr,Vs,bve,Ghr,Ohr,yQ,Vhr,Xhr,LQ,zhr,Whr,Qhr,V7,vve,Hhr,Uhr,xQ,Jhr,Yhr,Khr,X7,Fve,Zhr,epr,$Q,opr,rpr,tpr,z7,Tve,apr,npr,kQ,spr,lpr,ipr,W7,Mve,dpr,cpr,SQ,fpr,mpr,gpr,Q7,Eve,hpr,ppr,RQ,upr,_pr,bpr,H7,Cve,vpr,Fpr,PQ,Tpr,Mpr,Epr,U7,wve,Cpr,wpr,BQ,Apr,ypr,Lpr,J7,Ave,xpr,$pr,IQ,kpr,Spr,Rpr,Y7,yve,Ppr,Bpr,NQ,Ipr,Npr,qpr,K7,Lve,jpr,Dpr,qQ,Gpr,Opr,Vpr,Z7,xve,Xpr,zpr,jQ,Wpr,Qpr,Hpr,e8,$ve,Upr,Jpr,DQ,Ypr,Kpr,Zpr,o8,kve,eur,our,GQ,rur,tur,aur,r8,Sve,nur,sur,OQ,lur,iur,dur,t8,Rve,cur,fur,VQ,mur,gur,hur,a8,Pve,pur,uur,XQ,_ur,bur,vur,n8,Bve,Fur,Tur,zQ,Mur,Eur,Cur,s8,Ive,wur,Aur,WQ,yur,Lur,xur,l8,Nve,$ur,kur,QQ,Sur,Rur,Pur,i8,qve,Bur,Iur,HQ,Nur,qur,jur,d8,jve,Dur,Gur,UQ,Our,Vur,Xur,c8,Dve,zur,Wur,JQ,Qur,Hur,Uur,f8,Gve,Jur,Yur,YQ,Kur,Zur,e_r,m8,Ove,o_r,r_r,KQ,t_r,a_r,n_r,g8,Vve,s_r,l_r,ZQ,i_r,d_r,c_r,h8,Xve,f_r,m_r,eH,g_r,h_r,p_r,p8,zve,u_r,__r,oH,b_r,v_r,F_r,u8,Wve,T_r,M_r,rH,E_r,C_r,w_r,_8,Qve,A_r,y_r,tH,L_r,x_r,$_r,b8,aGe,oc,v8,Hve,JL,k_r,Uve,S_r,nGe,er,YL,R_r,rc,P_r,aH,B_r,I_r,nH,N_r,q_r,j_r,KL,D_r,Jve,G_r,O_r,V_r,kt,ZL,X_r,Yve,z_r,W_r,tc,Q_r,Kve,H_r,U_r,sH,J_r,Y_r,K_r,F8,Z_r,Lr,e9,e2r,Zve,o2r,r2r,an,t2r,eFe,a2r,n2r,oFe,s2r,l2r,rFe,i2r,d2r,c2r,se,T8,tFe,f2r,m2r,lH,g2r,h2r,p2r,M8,aFe,u2r,_2r,iH,b2r,v2r,F2r,E8,nFe,T2r,M2r,dH,E2r,C2r,w2r,C8,sFe,A2r,y2r,cH,L2r,x2r,$2r,w8,lFe,k2r,S2r,fH,R2r,P2r,B2r,A8,iFe,I2r,N2r,mH,q2r,j2r,D2r,y8,dFe,G2r,O2r,gH,V2r,X2r,z2r,L8,cFe,W2r,Q2r,hH,H2r,U2r,J2r,x8,fFe,Y2r,K2r,pH,Z2r,e1r,o1r,$8,mFe,r1r,t1r,uH,a1r,n1r,s1r,k8,gFe,l1r,i1r,_H,d1r,c1r,f1r,S8,hFe,m1r,g1r,bH,h1r,p1r,u1r,R8,pFe,_1r,b1r,vH,v1r,F1r,T1r,P8,uFe,M1r,E1r,FH,C1r,w1r,A1r,B8,_Fe,y1r,L1r,TH,x1r,$1r,k1r,I8,bFe,S1r,R1r,MH,P1r,B1r,I1r,N8,vFe,N1r,q1r,EH,j1r,D1r,G1r,q8,FFe,O1r,V1r,CH,X1r,z1r,W1r,j8,TFe,Q1r,H1r,wH,U1r,J1r,Y1r,D8,MFe,K1r,Z1r,AH,ebr,obr,rbr,G8,EFe,tbr,abr,yH,nbr,sbr,lbr,O8,CFe,ibr,dbr,LH,cbr,fbr,mbr,V8,wFe,gbr,hbr,xH,pbr,ubr,_br,X8,sGe,ac,z8,AFe,o9,bbr,yFe,vbr,lGe,or,r9,Fbr,nc,Tbr,$H,Mbr,Ebr,kH,Cbr,wbr,Abr,t9,ybr,LFe,Lbr,xbr,$br,St,a9,kbr,xFe,Sbr,Rbr,sc,Pbr,$Fe,Bbr,Ibr,SH,Nbr,qbr,jbr,W8,Dbr,xr,n9,Gbr,kFe,Obr,Vbr,nn,Xbr,SFe,zbr,Wbr,RFe,Qbr,Hbr,PFe,Ubr,Jbr,Ybr,Me,Q8,BFe,Kbr,Zbr,RH,evr,ovr,rvr,H8,IFe,tvr,avr,PH,nvr,svr,lvr,U8,NFe,ivr,dvr,BH,cvr,fvr,mvr,J8,qFe,gvr,hvr,IH,pvr,uvr,_vr,Y8,jFe,bvr,vvr,NH,Fvr,Tvr,Mvr,K8,DFe,Evr,Cvr,qH,wvr,Avr,yvr,Z8,GFe,Lvr,xvr,jH,$vr,kvr,Svr,eM,OFe,Rvr,Pvr,DH,Bvr,Ivr,Nvr,oM,VFe,qvr,jvr,GH,Dvr,Gvr,Ovr,rM,XFe,Vvr,Xvr,OH,zvr,Wvr,Qvr,tM,zFe,Hvr,Uvr,VH,Jvr,Yvr,Kvr,aM,WFe,Zvr,eFr,XH,oFr,rFr,tFr,nM,QFe,aFr,nFr,zH,sFr,lFr,iFr,sM,iGe,lc,lM,HFe,s9,dFr,UFe,cFr,dGe,rr,l9,fFr,ic,mFr,WH,gFr,hFr,QH,pFr,uFr,_Fr,i9,bFr,JFe,vFr,FFr,TFr,Rt,d9,MFr,YFe,EFr,CFr,dc,wFr,KFe,AFr,yFr,HH,LFr,xFr,$Fr,iM,kFr,$r,c9,SFr,ZFe,RFr,PFr,sn,BFr,e6e,IFr,NFr,o6e,qFr,jFr,r6e,DFr,GFr,OFr,ln,dM,t6e,VFr,XFr,UH,zFr,WFr,QFr,cM,a6e,HFr,UFr,JH,JFr,YFr,KFr,fM,n6e,ZFr,e6r,YH,o6r,r6r,t6r,mM,s6e,a6r,n6r,KH,s6r,l6r,i6r,gM,cGe,cc,hM,l6e,f9,d6r,i6e,c6r,fGe,tr,m9,f6r,fc,m6r,ZH,g6r,h6r,eU,p6r,u6r,_6r,g9,b6r,d6e,v6r,F6r,T6r,Pt,h9,M6r,c6e,E6r,C6r,mc,w6r,f6e,A6r,y6r,oU,L6r,x6r,$6r,pM,k6r,kr,p9,S6r,m6e,R6r,P6r,dn,B6r,g6e,I6r,N6r,h6e,q6r,j6r,p6e,D6r,G6r,O6r,ie,uM,u6e,V6r,X6r,rU,z6r,W6r,Q6r,_M,_6e,H6r,U6r,tU,J6r,Y6r,K6r,bM,b6e,Z6r,eTr,aU,oTr,rTr,tTr,vM,v6e,aTr,nTr,nU,sTr,lTr,iTr,FM,F6e,dTr,cTr,sU,fTr,mTr,gTr,TM,T6e,hTr,pTr,lU,uTr,_Tr,bTr,MM,M6e,vTr,FTr,iU,TTr,MTr,ETr,EM,E6e,CTr,wTr,dU,ATr,yTr,LTr,CM,C6e,xTr,$Tr,cU,kTr,STr,RTr,wM,w6e,PTr,BTr,fU,ITr,NTr,qTr,AM,A6e,jTr,DTr,mU,GTr,OTr,VTr,yM,y6e,XTr,zTr,gU,WTr,QTr,HTr,LM,L6e,UTr,JTr,hU,YTr,KTr,ZTr,xM,x6e,e7r,o7r,pU,r7r,t7r,a7r,$M,$6e,n7r,s7r,uU,l7r,i7r,d7r,kM,k6e,c7r,f7r,_U,m7r,g7r,h7r,SM,S6e,p7r,u7r,bU,_7r,b7r,v7r,RM,R6e,F7r,T7r,vU,M7r,E7r,C7r,PM,P6e,w7r,A7r,FU,y7r,L7r,x7r,BM,B6e,$7r,k7r,TU,S7r,R7r,P7r,IM,mGe,gc,NM,I6e,u9,B7r,N6e,I7r,gGe,ar,_9,N7r,hc,q7r,MU,j7r,D7r,EU,G7r,O7r,V7r,b9,X7r,q6e,z7r,W7r,Q7r,Bt,v9,H7r,j6e,U7r,J7r,pc,Y7r,D6e,K7r,Z7r,CU,e8r,o8r,r8r,qM,t8r,Sr,F9,a8r,G6e,n8r,s8r,cn,l8r,O6e,i8r,d8r,V6e,c8r,f8r,X6e,m8r,g8r,h8r,Le,jM,z6e,p8r,u8r,wU,_8r,b8r,v8r,DM,W6e,F8r,T8r,AU,M8r,E8r,C8r,GM,Q6e,w8r,A8r,yU,y8r,L8r,x8r,OM,H6e,$8r,k8r,LU,S8r,R8r,P8r,VM,U6e,B8r,I8r,xU,N8r,q8r,j8r,XM,J6e,D8r,G8r,$U,O8r,V8r,X8r,zM,Y6e,z8r,W8r,kU,Q8r,H8r,U8r,WM,K6e,J8r,Y8r,SU,K8r,Z8r,eMr,QM,Z6e,oMr,rMr,RU,tMr,aMr,nMr,HM,eTe,sMr,lMr,PU,iMr,dMr,cMr,UM,hGe,uc,JM,oTe,T9,fMr,rTe,mMr,pGe,nr,M9,gMr,_c,hMr,BU,pMr,uMr,IU,_Mr,bMr,vMr,E9,FMr,tTe,TMr,MMr,EMr,It,C9,CMr,aTe,wMr,AMr,bc,yMr,nTe,LMr,xMr,NU,$Mr,kMr,SMr,YM,RMr,Rr,w9,PMr,sTe,BMr,IMr,fn,NMr,lTe,qMr,jMr,iTe,DMr,GMr,dTe,OMr,VMr,XMr,re,KM,cTe,zMr,WMr,qU,QMr,HMr,UMr,ZM,fTe,JMr,YMr,jU,KMr,ZMr,e4r,e4,mTe,o4r,r4r,DU,t4r,a4r,n4r,o4,gTe,s4r,l4r,GU,i4r,d4r,c4r,r4,hTe,f4r,m4r,OU,g4r,h4r,p4r,t4,pTe,u4r,_4r,VU,b4r,v4r,F4r,a4,uTe,T4r,M4r,XU,E4r,C4r,w4r,n4,_Te,A4r,y4r,zU,L4r,x4r,$4r,s4,bTe,k4r,S4r,WU,R4r,P4r,B4r,l4,vTe,I4r,N4r,QU,q4r,j4r,D4r,i4,FTe,G4r,O4r,HU,V4r,X4r,z4r,d4,TTe,W4r,Q4r,UU,H4r,U4r,J4r,c4,MTe,Y4r,K4r,JU,Z4r,eEr,oEr,f4,ETe,rEr,tEr,YU,aEr,nEr,sEr,m4,CTe,lEr,iEr,KU,dEr,cEr,fEr,g4,wTe,mEr,gEr,ZU,hEr,pEr,uEr,h4,ATe,_Er,bEr,eJ,vEr,FEr,TEr,p4,yTe,MEr,EEr,oJ,CEr,wEr,AEr,u4,LTe,yEr,LEr,rJ,xEr,$Er,kEr,_4,xTe,SEr,REr,tJ,PEr,BEr,IEr,b4,$Te,NEr,qEr,aJ,jEr,DEr,GEr,v4,kTe,OEr,VEr,nJ,XEr,zEr,WEr,F4,STe,QEr,HEr,sJ,UEr,JEr,YEr,T4,RTe,KEr,ZEr,lJ,eCr,oCr,rCr,M4,PTe,tCr,aCr,iJ,nCr,sCr,lCr,E4,BTe,iCr,dCr,dJ,cCr,fCr,mCr,C4,uGe,vc,w4,ITe,A9,gCr,NTe,hCr,_Ge,sr,y9,pCr,Fc,uCr,cJ,_Cr,bCr,fJ,vCr,FCr,TCr,L9,MCr,qTe,ECr,CCr,wCr,Nt,x9,ACr,jTe,yCr,LCr,Tc,xCr,DTe,$Cr,kCr,mJ,SCr,RCr,PCr,A4,BCr,Pr,$9,ICr,GTe,NCr,qCr,mn,jCr,OTe,DCr,GCr,VTe,OCr,VCr,XTe,XCr,zCr,WCr,pe,y4,zTe,QCr,HCr,gJ,UCr,JCr,YCr,L4,WTe,KCr,ZCr,hJ,e5r,o5r,r5r,x4,QTe,t5r,a5r,pJ,n5r,s5r,l5r,$4,HTe,i5r,d5r,uJ,c5r,f5r,m5r,k4,UTe,g5r,h5r,_J,p5r,u5r,_5r,S4,JTe,b5r,v5r,bJ,F5r,T5r,M5r,R4,YTe,E5r,C5r,vJ,w5r,A5r,y5r,P4,KTe,L5r,x5r,FJ,$5r,k5r,S5r,B4,ZTe,R5r,P5r,TJ,B5r,I5r,N5r,I4,e7e,q5r,j5r,MJ,D5r,G5r,O5r,N4,o7e,V5r,X5r,EJ,z5r,W5r,Q5r,q4,r7e,H5r,U5r,CJ,J5r,Y5r,K5r,j4,t7e,Z5r,e3r,wJ,o3r,r3r,t3r,D4,a7e,a3r,n3r,AJ,s3r,l3r,i3r,G4,n7e,d3r,c3r,yJ,f3r,m3r,g3r,O4,s7e,h3r,p3r,LJ,u3r,_3r,b3r,V4,l7e,v3r,F3r,xJ,T3r,M3r,E3r,X4,bGe,Mc,z4,i7e,k9,C3r,d7e,w3r,vGe,lr,S9,A3r,Ec,y3r,$J,L3r,x3r,kJ,$3r,k3r,S3r,R9,R3r,c7e,P3r,B3r,I3r,qt,P9,N3r,f7e,q3r,j3r,Cc,D3r,m7e,G3r,O3r,SJ,V3r,X3r,z3r,W4,W3r,Br,B9,Q3r,g7e,H3r,U3r,gn,J3r,h7e,Y3r,K3r,p7e,Z3r,ewr,u7e,owr,rwr,twr,I9,Q4,_7e,awr,nwr,RJ,swr,lwr,iwr,H4,b7e,dwr,cwr,PJ,fwr,mwr,gwr,U4,FGe,wc,J4,v7e,N9,hwr,F7e,pwr,TGe,ir,q9,uwr,Ac,_wr,BJ,bwr,vwr,IJ,Fwr,Twr,Mwr,j9,Ewr,T7e,Cwr,wwr,Awr,jt,D9,ywr,M7e,Lwr,xwr,yc,$wr,E7e,kwr,Swr,NJ,Rwr,Pwr,Bwr,Y4,Iwr,Ir,G9,Nwr,C7e,qwr,jwr,hn,Dwr,w7e,Gwr,Owr,A7e,Vwr,Xwr,y7e,zwr,Wwr,Qwr,L7e,K4,x7e,Hwr,Uwr,qJ,Jwr,Ywr,Kwr,Z4,MGe,Lc,eE,$7e,O9,Zwr,k7e,e0r,EGe,dr,V9,o0r,xc,r0r,jJ,t0r,a0r,DJ,n0r,s0r,l0r,X9,i0r,S7e,d0r,c0r,f0r,Dt,z9,m0r,R7e,g0r,h0r,$c,p0r,P7e,u0r,_0r,GJ,b0r,v0r,F0r,oE,T0r,Nr,W9,M0r,B7e,E0r,C0r,pn,w0r,I7e,A0r,y0r,N7e,L0r,x0r,q7e,$0r,k0r,S0r,de,rE,j7e,R0r,P0r,OJ,B0r,I0r,N0r,tE,D7e,q0r,j0r,VJ,D0r,G0r,O0r,aE,G7e,V0r,X0r,XJ,z0r,W0r,Q0r,nE,O7e,H0r,U0r,zJ,J0r,Y0r,K0r,sE,V7e,Z0r,eAr,WJ,oAr,rAr,tAr,lE,X7e,aAr,nAr,QJ,sAr,lAr,iAr,iE,z7e,dAr,cAr,HJ,fAr,mAr,gAr,dE,W7e,hAr,pAr,UJ,uAr,_Ar,bAr,cE,Q7e,vAr,FAr,JJ,TAr,MAr,EAr,fE,H7e,CAr,wAr,YJ,AAr,yAr,LAr,mE,U7e,xAr,$Ar,KJ,kAr,SAr,RAr,gE,J7e,PAr,BAr,ZJ,IAr,NAr,qAr,hE,Y7e,jAr,DAr,eY,GAr,OAr,VAr,pE,K7e,XAr,zAr,oY,WAr,QAr,HAr,uE,Z7e,UAr,JAr,rY,YAr,KAr,ZAr,_E,e8e,eyr,oyr,tY,ryr,tyr,ayr,bE,o8e,nyr,syr,aY,lyr,iyr,dyr,vE,r8e,cyr,fyr,nY,myr,gyr,hyr,FE,t8e,pyr,uyr,sY,_yr,byr,vyr,TE,a8e,Fyr,Tyr,lY,Myr,Eyr,Cyr,ME,CGe,kc,EE,n8e,Q9,wyr,s8e,Ayr,wGe,cr,H9,yyr,Sc,Lyr,iY,xyr,$yr,dY,kyr,Syr,Ryr,U9,Pyr,l8e,Byr,Iyr,Nyr,Gt,J9,qyr,i8e,jyr,Dyr,Rc,Gyr,d8e,Oyr,Vyr,cY,Xyr,zyr,Wyr,CE,Qyr,qr,Y9,Hyr,c8e,Uyr,Jyr,un,Yyr,f8e,Kyr,Zyr,m8e,eLr,oLr,g8e,rLr,tLr,aLr,ce,wE,h8e,nLr,sLr,fY,lLr,iLr,dLr,AE,p8e,cLr,fLr,mY,mLr,gLr,hLr,yE,u8e,pLr,uLr,gY,_Lr,bLr,vLr,LE,_8e,FLr,TLr,hY,MLr,ELr,CLr,xE,b8e,wLr,ALr,pY,yLr,LLr,xLr,$E,v8e,$Lr,kLr,uY,SLr,RLr,PLr,kE,F8e,BLr,ILr,_Y,NLr,qLr,jLr,SE,T8e,DLr,GLr,bY,OLr,VLr,XLr,RE,M8e,zLr,WLr,vY,QLr,HLr,ULr,PE,E8e,JLr,YLr,FY,KLr,ZLr,e9r,BE,C8e,o9r,r9r,TY,t9r,a9r,n9r,IE,w8e,s9r,l9r,MY,i9r,d9r,c9r,NE,A8e,f9r,m9r,EY,g9r,h9r,p9r,qE,y8e,u9r,_9r,CY,b9r,v9r,F9r,jE,L8e,T9r,M9r,wY,E9r,C9r,w9r,DE,x8e,A9r,y9r,AY,L9r,x9r,$9r,GE,$8e,k9r,S9r,yY,R9r,P9r,B9r,OE,k8e,I9r,N9r,LY,q9r,j9r,D9r,VE,S8e,G9r,O9r,xY,V9r,X9r,z9r,XE,R8e,W9r,Q9r,$Y,H9r,U9r,J9r,zE,AGe,Pc,WE,P8e,K9,Y9r,B8e,K9r,yGe,fr,Z9,Z9r,Bc,exr,kY,oxr,rxr,SY,txr,axr,nxr,ex,sxr,I8e,lxr,ixr,dxr,Ot,ox,cxr,N8e,fxr,mxr,Ic,gxr,q8e,hxr,pxr,RY,uxr,_xr,bxr,QE,vxr,jr,rx,Fxr,j8e,Txr,Mxr,_n,Exr,D8e,Cxr,wxr,G8e,Axr,yxr,O8e,Lxr,xxr,$xr,V8e,HE,X8e,kxr,Sxr,PY,Rxr,Pxr,Bxr,UE,LGe,Nc,JE,z8e,tx,Ixr,W8e,Nxr,xGe,mr,ax,qxr,qc,jxr,BY,Dxr,Gxr,IY,Oxr,Vxr,Xxr,nx,zxr,Q8e,Wxr,Qxr,Hxr,Vt,sx,Uxr,H8e,Jxr,Yxr,jc,Kxr,U8e,Zxr,e$r,NY,o$r,r$r,t$r,YE,a$r,Dr,lx,n$r,J8e,s$r,l$r,bn,i$r,Y8e,d$r,c$r,K8e,f$r,m$r,Z8e,g$r,h$r,p$r,eMe,KE,oMe,u$r,_$r,qY,b$r,v$r,F$r,ZE,$Ge,Dc,eC,rMe,ix,T$r,tMe,M$r,kGe,gr,dx,E$r,Gc,C$r,jY,w$r,A$r,DY,y$r,L$r,x$r,cx,$$r,aMe,k$r,S$r,R$r,Xt,fx,P$r,nMe,B$r,I$r,Oc,N$r,sMe,q$r,j$r,GY,D$r,G$r,O$r,oC,V$r,Gr,mx,X$r,lMe,z$r,W$r,vn,Q$r,iMe,H$r,U$r,dMe,J$r,Y$r,cMe,K$r,Z$r,ekr,te,rC,fMe,okr,rkr,OY,tkr,akr,nkr,tC,mMe,skr,lkr,VY,ikr,dkr,ckr,aC,gMe,fkr,mkr,XY,gkr,hkr,pkr,nC,hMe,ukr,_kr,zY,bkr,vkr,Fkr,sC,pMe,Tkr,Mkr,WY,Ekr,Ckr,wkr,lC,uMe,Akr,ykr,QY,Lkr,xkr,$kr,iC,_Me,kkr,Skr,HY,Rkr,Pkr,Bkr,dC,bMe,Ikr,Nkr,UY,qkr,jkr,Dkr,cC,vMe,Gkr,Okr,JY,Vkr,Xkr,zkr,fC,FMe,Wkr,Qkr,YY,Hkr,Ukr,Jkr,mC,TMe,Ykr,Kkr,KY,Zkr,eSr,oSr,gC,MMe,rSr,tSr,ZY,aSr,nSr,sSr,hC,EMe,lSr,iSr,eK,dSr,cSr,fSr,pC,CMe,mSr,gSr,oK,hSr,pSr,uSr,uC,wMe,_Sr,bSr,rK,vSr,FSr,TSr,_C,AMe,MSr,ESr,tK,CSr,wSr,ASr,bC,yMe,ySr,LSr,aK,xSr,$Sr,kSr,vC,LMe,SSr,RSr,nK,PSr,BSr,ISr,FC,xMe,NSr,qSr,sK,jSr,DSr,GSr,TC,$Me,OSr,VSr,lK,XSr,zSr,WSr,MC,kMe,QSr,HSr,iK,USr,JSr,YSr,EC,SMe,KSr,ZSr,dK,eRr,oRr,rRr,CC,RMe,tRr,aRr,cK,nRr,sRr,lRr,wC,PMe,iRr,dRr,fK,cRr,fRr,mRr,AC,BMe,gRr,hRr,mK,pRr,uRr,_Rr,yC,IMe,bRr,vRr,gK,FRr,TRr,MRr,LC,SGe,Vc,xC,NMe,gx,ERr,qMe,CRr,RGe,hr,hx,wRr,Xc,ARr,hK,yRr,LRr,pK,xRr,$Rr,kRr,px,SRr,jMe,RRr,PRr,BRr,zt,ux,IRr,DMe,NRr,qRr,zc,jRr,GMe,DRr,GRr,uK,ORr,VRr,XRr,$C,zRr,Or,_x,WRr,OMe,QRr,HRr,Fn,URr,VMe,JRr,YRr,XMe,KRr,ZRr,zMe,ePr,oPr,rPr,xe,kC,WMe,tPr,aPr,_K,nPr,sPr,lPr,SC,QMe,iPr,dPr,bK,cPr,fPr,mPr,RC,HMe,gPr,hPr,vK,pPr,uPr,_Pr,PC,UMe,bPr,vPr,FK,FPr,TPr,MPr,BC,JMe,EPr,CPr,TK,wPr,APr,yPr,IC,YMe,LPr,xPr,MK,$Pr,kPr,SPr,NC,KMe,RPr,PPr,EK,BPr,IPr,NPr,qC,ZMe,qPr,jPr,CK,DPr,GPr,OPr,jC,e4e,VPr,XPr,wK,zPr,WPr,QPr,DC,o4e,HPr,UPr,AK,JPr,YPr,KPr,GC,PGe,Wc,OC,r4e,bx,ZPr,t4e,eBr,BGe,pr,vx,oBr,Qc,rBr,yK,tBr,aBr,LK,nBr,sBr,lBr,Fx,iBr,a4e,dBr,cBr,fBr,Wt,Tx,mBr,n4e,gBr,hBr,Hc,pBr,s4e,uBr,_Br,xK,bBr,vBr,FBr,VC,TBr,Vr,Mx,MBr,l4e,EBr,CBr,Tn,wBr,i4e,ABr,yBr,d4e,LBr,xBr,c4e,$Br,kBr,SBr,Ee,XC,f4e,RBr,PBr,$K,BBr,IBr,NBr,zC,m4e,qBr,jBr,kK,DBr,GBr,OBr,WC,g4e,VBr,XBr,SK,zBr,WBr,QBr,QC,h4e,HBr,UBr,RK,JBr,YBr,KBr,HC,p4e,ZBr,eIr,PK,oIr,rIr,tIr,UC,u4e,aIr,nIr,BK,sIr,lIr,iIr,JC,_4e,dIr,cIr,IK,fIr,mIr,gIr,YC,b4e,hIr,pIr,NK,uIr,_Ir,bIr,KC,v4e,vIr,FIr,qK,TIr,MIr,EIr,ZC,F4e,CIr,wIr,jK,AIr,yIr,LIr,e5,T4e,xIr,$Ir,DK,kIr,SIr,RIr,o5,M4e,PIr,BIr,GK,IIr,NIr,qIr,r5,IGe,Uc,t5,E4e,Ex,jIr,C4e,DIr,NGe,ur,Cx,GIr,Jc,OIr,OK,VIr,XIr,VK,zIr,WIr,QIr,wx,HIr,w4e,UIr,JIr,YIr,Qt,Ax,KIr,A4e,ZIr,eNr,Yc,oNr,y4e,rNr,tNr,XK,aNr,nNr,sNr,a5,lNr,Xr,yx,iNr,L4e,dNr,cNr,Mn,fNr,x4e,mNr,gNr,$4e,hNr,pNr,k4e,uNr,_Nr,bNr,$e,n5,S4e,vNr,FNr,zK,TNr,MNr,ENr,s5,R4e,CNr,wNr,WK,ANr,yNr,LNr,l5,P4e,xNr,$Nr,QK,kNr,SNr,RNr,i5,B4e,PNr,BNr,HK,INr,NNr,qNr,d5,I4e,jNr,DNr,UK,GNr,ONr,VNr,c5,N4e,XNr,zNr,JK,WNr,QNr,HNr,f5,q4e,UNr,JNr,YK,YNr,KNr,ZNr,m5,j4e,eqr,oqr,KK,rqr,tqr,aqr,g5,D4e,nqr,sqr,ZK,lqr,iqr,dqr,h5,G4e,cqr,fqr,eZ,mqr,gqr,hqr,p5,qGe,Kc,u5,O4e,Lx,pqr,V4e,uqr,jGe,_r,xx,_qr,Zc,bqr,oZ,vqr,Fqr,rZ,Tqr,Mqr,Eqr,$x,Cqr,X4e,wqr,Aqr,yqr,Ht,kx,Lqr,z4e,xqr,$qr,ef,kqr,W4e,Sqr,Rqr,tZ,Pqr,Bqr,Iqr,_5,Nqr,zr,Sx,qqr,Q4e,jqr,Dqr,En,Gqr,H4e,Oqr,Vqr,U4e,Xqr,zqr,J4e,Wqr,Qqr,Hqr,Pe,b5,Y4e,Uqr,Jqr,aZ,Yqr,Kqr,Zqr,v5,K4e,ejr,ojr,nZ,rjr,tjr,ajr,F5,Z4e,njr,sjr,sZ,ljr,ijr,djr,T5,eEe,cjr,fjr,lZ,mjr,gjr,hjr,M5,oEe,pjr,ujr,iZ,_jr,bjr,vjr,E5,rEe,Fjr,Tjr,dZ,Mjr,Ejr,Cjr,C5,tEe,wjr,Ajr,cZ,yjr,Ljr,xjr,w5,aEe,$jr,kjr,fZ,Sjr,Rjr,Pjr,A5,nEe,Bjr,Ijr,mZ,Njr,qjr,jjr,y5,DGe,of,L5,sEe,Rx,Djr,lEe,Gjr,GGe,br,Px,Ojr,rf,Vjr,gZ,Xjr,zjr,hZ,Wjr,Qjr,Hjr,Bx,Ujr,iEe,Jjr,Yjr,Kjr,Ut,Ix,Zjr,dEe,eDr,oDr,tf,rDr,cEe,tDr,aDr,pZ,nDr,sDr,lDr,x5,iDr,Wr,Nx,dDr,fEe,cDr,fDr,Cn,mDr,mEe,gDr,hDr,gEe,pDr,uDr,hEe,_Dr,bDr,vDr,ke,$5,pEe,FDr,TDr,uZ,MDr,EDr,CDr,k5,uEe,wDr,ADr,_Z,yDr,LDr,xDr,S5,_Ee,$Dr,kDr,bZ,SDr,RDr,PDr,R5,bEe,BDr,IDr,vZ,NDr,qDr,jDr,P5,vEe,DDr,GDr,FZ,ODr,VDr,XDr,B5,FEe,zDr,WDr,TZ,QDr,HDr,UDr,I5,TEe,JDr,YDr,MZ,KDr,ZDr,eGr,N5,MEe,oGr,rGr,EZ,tGr,aGr,nGr,q5,EEe,sGr,lGr,CZ,iGr,dGr,cGr,j5,CEe,fGr,mGr,wZ,gGr,hGr,pGr,D5,OGe,af,G5,wEe,qx,uGr,AEe,_Gr,VGe,vr,jx,bGr,nf,vGr,AZ,FGr,TGr,yZ,MGr,EGr,CGr,Dx,wGr,yEe,AGr,yGr,LGr,Jt,Gx,xGr,LEe,$Gr,kGr,sf,SGr,xEe,RGr,PGr,LZ,BGr,IGr,NGr,O5,qGr,Qr,Ox,jGr,$Ee,DGr,GGr,wn,OGr,kEe,VGr,XGr,SEe,zGr,WGr,REe,QGr,HGr,UGr,Se,V5,PEe,JGr,YGr,xZ,KGr,ZGr,eOr,X5,BEe,oOr,rOr,$Z,tOr,aOr,nOr,z5,IEe,sOr,lOr,kZ,iOr,dOr,cOr,W5,NEe,fOr,mOr,SZ,gOr,hOr,pOr,Q5,qEe,uOr,_Or,RZ,bOr,vOr,FOr,H5,jEe,TOr,MOr,PZ,EOr,COr,wOr,U5,DEe,AOr,yOr,BZ,LOr,xOr,$Or,J5,GEe,kOr,SOr,IZ,ROr,POr,BOr,Y5,OEe,IOr,NOr,NZ,qOr,jOr,DOr,K5,VEe,GOr,OOr,qZ,VOr,XOr,zOr,Z5,XGe,lf,e3,XEe,Vx,WOr,zEe,QOr,zGe,Fr,Xx,HOr,df,UOr,jZ,JOr,YOr,DZ,KOr,ZOr,eVr,zx,oVr,WEe,rVr,tVr,aVr,Yt,Wx,nVr,QEe,sVr,lVr,cf,iVr,HEe,dVr,cVr,GZ,fVr,mVr,gVr,o3,hVr,Hr,Qx,pVr,UEe,uVr,_Vr,An,bVr,JEe,vVr,FVr,YEe,TVr,MVr,KEe,EVr,CVr,wVr,Oe,r3,ZEe,AVr,yVr,OZ,LVr,xVr,$Vr,t3,eCe,kVr,SVr,VZ,RVr,PVr,BVr,a3,oCe,IVr,NVr,XZ,qVr,jVr,DVr,n3,rCe,GVr,OVr,zZ,VVr,XVr,zVr,s3,tCe,WVr,QVr,WZ,HVr,UVr,JVr,l3,aCe,YVr,KVr,QZ,ZVr,eXr,oXr,i3,nCe,rXr,tXr,HZ,aXr,nXr,sXr,d3,sCe,lXr,iXr,UZ,dXr,cXr,fXr,c3,WGe,ff,f3,lCe,Hx,mXr,iCe,gXr,QGe,Tr,Ux,hXr,mf,pXr,JZ,uXr,_Xr,YZ,bXr,vXr,FXr,Jx,TXr,dCe,MXr,EXr,CXr,Kt,Yx,wXr,cCe,AXr,yXr,gf,LXr,fCe,xXr,$Xr,KZ,kXr,SXr,RXr,m3,PXr,Ur,Kx,BXr,mCe,IXr,NXr,yn,qXr,gCe,jXr,DXr,hCe,GXr,OXr,pCe,VXr,XXr,zXr,Ve,g3,uCe,WXr,QXr,ZZ,HXr,UXr,JXr,h3,_Ce,YXr,KXr,eee,ZXr,ezr,ozr,p3,bCe,rzr,tzr,oee,azr,nzr,szr,u3,vCe,lzr,izr,ree,dzr,czr,fzr,_3,FCe,mzr,gzr,tee,hzr,pzr,uzr,b3,TCe,_zr,bzr,aee,vzr,Fzr,Tzr,v3,MCe,Mzr,Ezr,nee,Czr,wzr,Azr,F3,ECe,yzr,Lzr,see,xzr,$zr,kzr,T3,HGe,hf,M3,CCe,Zx,Szr,wCe,Rzr,UGe,Mr,e$,Pzr,pf,Bzr,lee,Izr,Nzr,iee,qzr,jzr,Dzr,o$,Gzr,ACe,Ozr,Vzr,Xzr,Zt,r$,zzr,yCe,Wzr,Qzr,uf,Hzr,LCe,Uzr,Jzr,dee,Yzr,Kzr,Zzr,E3,eWr,Jr,t$,oWr,xCe,rWr,tWr,Ln,aWr,$Ce,nWr,sWr,kCe,lWr,iWr,SCe,dWr,cWr,fWr,RCe,C3,PCe,mWr,gWr,cee,hWr,pWr,uWr,w3,JGe,_f,A3,BCe,a$,_Wr,ICe,bWr,YGe,Er,n$,vWr,bf,FWr,fee,TWr,MWr,mee,EWr,CWr,wWr,s$,AWr,NCe,yWr,LWr,xWr,ea,l$,$Wr,qCe,kWr,SWr,vf,RWr,jCe,PWr,BWr,gee,IWr,NWr,qWr,y3,jWr,Yr,i$,DWr,DCe,GWr,OWr,xn,VWr,GCe,XWr,zWr,OCe,WWr,QWr,VCe,HWr,UWr,JWr,d$,L3,XCe,YWr,KWr,hee,ZWr,eQr,oQr,x3,zCe,rQr,tQr,pee,aQr,nQr,sQr,$3,KGe,Ff,k3,WCe,c$,lQr,QCe,iQr,ZGe,Cr,f$,dQr,Tf,cQr,uee,fQr,mQr,_ee,gQr,hQr,pQr,m$,uQr,HCe,_Qr,bQr,vQr,oa,g$,FQr,UCe,TQr,MQr,Mf,EQr,JCe,CQr,wQr,bee,AQr,yQr,LQr,S3,xQr,Kr,h$,$Qr,YCe,kQr,SQr,$n,RQr,KCe,PQr,BQr,ZCe,IQr,NQr,e5e,qQr,jQr,DQr,o5e,R3,r5e,GQr,OQr,vee,VQr,XQr,zQr,P3,eOe;return d=new oe({}),La=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nA=new oe({}),sA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),kf=new WQr({props:{warning:!0,$$slots:{default:[MBt]},$$scope:{ctx:L}}}),lA=new oe({}),iA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L590"}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L613"}}),Ig=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:L}}}),mA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L736"}}),gA=new oe({}),hA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L391"}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17286/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L405"}}),_h=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[CBt]},$$scope:{ctx:L}}}),bA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L604"}}),vA=new oe({}),FA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),Kh=new WQr({props:{$$slots:{default:[wBt]},$$scope:{ctx:L}}}),Zh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[ABt]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),wA=new oe({}),AA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L88"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L102"}}),vp=new WQr({props:{$$slots:{default:[yBt]},$$scope:{ctx:L}}}),Fp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L255"}}),kA=new oe({}),SA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L751"}}),PA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Ep=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[xBt]},$$scope:{ctx:L}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),F_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[$Bt]},$$scope:{ctx:L}}}),IA=new oe({}),NA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L758"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),M_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[kBt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),m2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[SBt]},$$scope:{ctx:L}}}),GA=new oe({}),OA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L773"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),h2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[RBt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PBt]},$$scope:{ctx:L}}}),WA=new oe({}),QA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L780"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[BBt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[IBt]},$$scope:{ctx:L}}}),YA=new oe({}),KA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L787"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[NBt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qBt]},$$scope:{ctx:L}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L796"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[jBt]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DBt]},$$scope:{ctx:L}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L841"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[GBt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[OBt]},$$scope:{ctx:L}}}),my=new oe({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L848"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VBt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XBt]},$$scope:{ctx:L}}}),_y=new oe({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L834"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[zBt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WBt]},$$scope:{ctx:L}}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L805"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QBt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[HBt]},$$scope:{ctx:L}}}),yy=new oe({}),Ly=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L812"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[UBt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[JBt]},$$scope:{ctx:L}}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L857"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[YBt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[KBt]},$$scope:{ctx:L}}}),Ny=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L896"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ZBt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[eIt]},$$scope:{ctx:L}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L823"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[oIt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[rIt]},$$scope:{ctx:L}}}),Qy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L903"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[tIt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[aIt]},$$scope:{ctx:L}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L926"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[nIt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[sIt]},$$scope:{ctx:L}}}),tL=new oe({}),aL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L910"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[lIt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[iIt]},$$scope:{ctx:L}}}),iL=new oe({}),dL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L917"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[dIt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[cIt]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L935"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[fIt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[mIt]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L942"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[gIt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[hIt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L889"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[pIt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[uIt]},$$scope:{ctx:L}}}),$L=new oe({}),kL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L864"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[_It]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[bIt]},$$scope:{ctx:L}}}),BL=new oe({}),IL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L871"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[vIt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[FIt]},$$scope:{ctx:L}}}),DL=new oe({}),GL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L880"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[TIt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[MIt]},$$scope:{ctx:L}}}),zL=new oe({}),WL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[EIt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[CIt]},$$scope:{ctx:L}}}),JL=new oe({}),YL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[wIt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[AIt]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),a9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[yIt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[LIt]},$$scope:{ctx:L}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[xIt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$It]},$$scope:{ctx:L}}}),f9=new oe({}),m9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[kIt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SIt]},$$scope:{ctx:L}}}),u9=new oe({}),_9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RIt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PIt]},$$scope:{ctx:L}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BIt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IIt]},$$scope:{ctx:L}}}),A9=new oe({}),y9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[NIt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qIt]},$$scope:{ctx:L}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jIt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DIt]},$$scope:{ctx:L}}}),N9=new oe({}),q9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),D9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[GIt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[OIt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[VIt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XIt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zIt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WIt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[QIt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[HIt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[UIt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[JIt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[YIt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[KIt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ZIt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[eNt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[oNt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rNt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[tNt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aNt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nNt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sNt]},$$scope:{ctx:L}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[lNt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iNt]},$$scope:{ctx:L}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dNt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cNt]},$$scope:{ctx:L}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[fNt]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mNt]},$$scope:{ctx:L}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gNt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hNt]},$$scope:{ctx:L}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pNt]},$$scope:{ctx:L}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uNt]},$$scope:{ctx:L}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[_Nt]},$$scope:{ctx:L}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bNt]},$$scope:{ctx:L}}}),c$=new oe({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[vNt]},$$scope:{ctx:L}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FNt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),vi=o("Auto Classes"),Af=l(),at=a("p"),Fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=a("code"),oA=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),Mi=o("Instantiating one of "),Sn=a("a"),rA=o("AutoConfig"),Rn=o(", "),Pn=a("a"),tA=o("AutoModel"),Ei=o(`, and
`),Bn=a("a"),aA=o("AutoTokenizer"),Ci=o(" will directly create a class of the relevant architecture. For instance"),Lf=l(),F(La.$$.fragment),Qe=l(),Ae=a("p"),$k=o("will create a model that is an instance of "),wi=a("a"),kk=o("BertModel"),Sk=o("."),Co=l(),xa=a("p"),Rk=o("There is one class of "),xf=a("code"),Pk=o("AutoModel"),cXe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Uje=l(),Ai=a("h2"),$f=a("a"),hre=a("span"),F(nA.$$.fragment),fXe=l(),pre=a("span"),mXe=o("Extending the Auto Classes"),Jje=l(),In=a("p"),gXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ure=a("code"),hXe=o("NewModel"),pXe=o(", make sure you have a "),_re=a("code"),uXe=o("NewModelConfig"),_Xe=o(` then you can add those to the auto
classes like this:`),Yje=l(),F(sA.$$.fragment),Kje=l(),Bk=a("p"),bXe=o("You will then be able to use the auto classes like you would usually do!"),Zje=l(),F(kf.$$.fragment),eDe=l(),yi=a("h2"),Sf=a("a"),bre=a("span"),F(lA.$$.fragment),vXe=l(),vre=a("span"),FXe=o("AutoConfig"),oDe=l(),wo=a("div"),F(iA.$$.fragment),TXe=l(),dA=a("p"),MXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ik=a("a"),EXe=o("from_pretrained()"),CXe=o(" class method."),wXe=l(),cA=a("p"),AXe=o("This class cannot be instantiated directly using "),Fre=a("code"),yXe=o("__init__()"),LXe=o(" (throws an error)."),xXe=l(),wr=a("div"),F(fA.$$.fragment),$Xe=l(),Tre=a("p"),kXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SXe=l(),Li=a("p"),RXe=o("The configuration class to instantiate is selected based on the "),Mre=a("code"),PXe=o("model_type"),BXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ere=a("code"),IXe=o("pretrained_model_name_or_path"),NXe=o(":"),qXe=l(),A=a("ul"),Rf=a("li"),Cre=a("strong"),jXe=o("albert"),DXe=o(" \u2014 "),Nk=a("a"),GXe=o("AlbertConfig"),OXe=o(" (ALBERT model)"),VXe=l(),Pf=a("li"),wre=a("strong"),XXe=o("bart"),zXe=o(" \u2014 "),qk=a("a"),WXe=o("BartConfig"),QXe=o(" (BART model)"),HXe=l(),Bf=a("li"),Are=a("strong"),UXe=o("beit"),JXe=o(" \u2014 "),jk=a("a"),YXe=o("BeitConfig"),KXe=o(" (BEiT model)"),ZXe=l(),If=a("li"),yre=a("strong"),eze=o("bert"),oze=o(" \u2014 "),Dk=a("a"),rze=o("BertConfig"),tze=o(" (BERT model)"),aze=l(),Nf=a("li"),Lre=a("strong"),nze=o("bert-generation"),sze=o(" \u2014 "),Gk=a("a"),lze=o("BertGenerationConfig"),ize=o(" (Bert Generation model)"),dze=l(),qf=a("li"),xre=a("strong"),cze=o("big_bird"),fze=o(" \u2014 "),Ok=a("a"),mze=o("BigBirdConfig"),gze=o(" (BigBird model)"),hze=l(),jf=a("li"),$re=a("strong"),pze=o("bigbird_pegasus"),uze=o(" \u2014 "),Vk=a("a"),_ze=o("BigBirdPegasusConfig"),bze=o(" (BigBird-Pegasus model)"),vze=l(),Df=a("li"),kre=a("strong"),Fze=o("blenderbot"),Tze=o(" \u2014 "),Xk=a("a"),Mze=o("BlenderbotConfig"),Eze=o(" (Blenderbot model)"),Cze=l(),Gf=a("li"),Sre=a("strong"),wze=o("blenderbot-small"),Aze=o(" \u2014 "),zk=a("a"),yze=o("BlenderbotSmallConfig"),Lze=o(" (BlenderbotSmall model)"),xze=l(),Of=a("li"),Rre=a("strong"),$ze=o("camembert"),kze=o(" \u2014 "),Wk=a("a"),Sze=o("CamembertConfig"),Rze=o(" (CamemBERT model)"),Pze=l(),Vf=a("li"),Pre=a("strong"),Bze=o("canine"),Ize=o(" \u2014 "),Qk=a("a"),Nze=o("CanineConfig"),qze=o(" (CANINE model)"),jze=l(),Xf=a("li"),Bre=a("strong"),Dze=o("clip"),Gze=o(" \u2014 "),Hk=a("a"),Oze=o("CLIPConfig"),Vze=o(" (CLIP model)"),Xze=l(),zf=a("li"),Ire=a("strong"),zze=o("convbert"),Wze=o(" \u2014 "),Uk=a("a"),Qze=o("ConvBertConfig"),Hze=o(" (ConvBERT model)"),Uze=l(),Wf=a("li"),Nre=a("strong"),Jze=o("convnext"),Yze=o(" \u2014 "),Jk=a("a"),Kze=o("ConvNextConfig"),Zze=o(" (ConvNeXT model)"),eWe=l(),Qf=a("li"),qre=a("strong"),oWe=o("ctrl"),rWe=o(" \u2014 "),Yk=a("a"),tWe=o("CTRLConfig"),aWe=o(" (CTRL model)"),nWe=l(),Hf=a("li"),jre=a("strong"),sWe=o("cvt"),lWe=o(" \u2014 "),Kk=a("a"),iWe=o("CvtConfig"),dWe=o(" (CvT model)"),cWe=l(),Uf=a("li"),Dre=a("strong"),fWe=o("data2vec-audio"),mWe=o(" \u2014 "),Zk=a("a"),gWe=o("Data2VecAudioConfig"),hWe=o(" (Data2VecAudio model)"),pWe=l(),Jf=a("li"),Gre=a("strong"),uWe=o("data2vec-text"),_We=o(" \u2014 "),eS=a("a"),bWe=o("Data2VecTextConfig"),vWe=o(" (Data2VecText model)"),FWe=l(),Yf=a("li"),Ore=a("strong"),TWe=o("data2vec-vision"),MWe=o(" \u2014 "),oS=a("a"),EWe=o("Data2VecVisionConfig"),CWe=o(" (Data2VecVision model)"),wWe=l(),Kf=a("li"),Vre=a("strong"),AWe=o("deberta"),yWe=o(" \u2014 "),rS=a("a"),LWe=o("DebertaConfig"),xWe=o(" (DeBERTa model)"),$We=l(),Zf=a("li"),Xre=a("strong"),kWe=o("deberta-v2"),SWe=o(" \u2014 "),tS=a("a"),RWe=o("DebertaV2Config"),PWe=o(" (DeBERTa-v2 model)"),BWe=l(),em=a("li"),zre=a("strong"),IWe=o("decision_transformer"),NWe=o(" \u2014 "),aS=a("a"),qWe=o("DecisionTransformerConfig"),jWe=o(" (Decision Transformer model)"),DWe=l(),om=a("li"),Wre=a("strong"),GWe=o("deit"),OWe=o(" \u2014 "),nS=a("a"),VWe=o("DeiTConfig"),XWe=o(" (DeiT model)"),zWe=l(),rm=a("li"),Qre=a("strong"),WWe=o("detr"),QWe=o(" \u2014 "),sS=a("a"),HWe=o("DetrConfig"),UWe=o(" (DETR model)"),JWe=l(),tm=a("li"),Hre=a("strong"),YWe=o("distilbert"),KWe=o(" \u2014 "),lS=a("a"),ZWe=o("DistilBertConfig"),eQe=o(" (DistilBERT model)"),oQe=l(),am=a("li"),Ure=a("strong"),rQe=o("dpr"),tQe=o(" \u2014 "),iS=a("a"),aQe=o("DPRConfig"),nQe=o(" (DPR model)"),sQe=l(),nm=a("li"),Jre=a("strong"),lQe=o("dpt"),iQe=o(" \u2014 "),dS=a("a"),dQe=o("DPTConfig"),cQe=o(" (DPT model)"),fQe=l(),sm=a("li"),Yre=a("strong"),mQe=o("electra"),gQe=o(" \u2014 "),cS=a("a"),hQe=o("ElectraConfig"),pQe=o(" (ELECTRA model)"),uQe=l(),lm=a("li"),Kre=a("strong"),_Qe=o("encoder-decoder"),bQe=o(" \u2014 "),fS=a("a"),vQe=o("EncoderDecoderConfig"),FQe=o(" (Encoder decoder model)"),TQe=l(),im=a("li"),Zre=a("strong"),MQe=o("flaubert"),EQe=o(" \u2014 "),mS=a("a"),CQe=o("FlaubertConfig"),wQe=o(" (FlauBERT model)"),AQe=l(),dm=a("li"),ete=a("strong"),yQe=o("flava"),LQe=o(" \u2014 "),gS=a("a"),xQe=o("FlavaConfig"),$Qe=o(" (FLAVA model)"),kQe=l(),cm=a("li"),ote=a("strong"),SQe=o("fnet"),RQe=o(" \u2014 "),hS=a("a"),PQe=o("FNetConfig"),BQe=o(" (FNet model)"),IQe=l(),fm=a("li"),rte=a("strong"),NQe=o("fsmt"),qQe=o(" \u2014 "),pS=a("a"),jQe=o("FSMTConfig"),DQe=o(" (FairSeq Machine-Translation model)"),GQe=l(),mm=a("li"),tte=a("strong"),OQe=o("funnel"),VQe=o(" \u2014 "),uS=a("a"),XQe=o("FunnelConfig"),zQe=o(" (Funnel Transformer model)"),WQe=l(),gm=a("li"),ate=a("strong"),QQe=o("glpn"),HQe=o(" \u2014 "),_S=a("a"),UQe=o("GLPNConfig"),JQe=o(" (GLPN model)"),YQe=l(),hm=a("li"),nte=a("strong"),KQe=o("gpt2"),ZQe=o(" \u2014 "),bS=a("a"),eHe=o("GPT2Config"),oHe=o(" (OpenAI GPT-2 model)"),rHe=l(),pm=a("li"),ste=a("strong"),tHe=o("gpt_neo"),aHe=o(" \u2014 "),vS=a("a"),nHe=o("GPTNeoConfig"),sHe=o(" (GPT Neo model)"),lHe=l(),um=a("li"),lte=a("strong"),iHe=o("gpt_neox"),dHe=o(" \u2014 "),FS=a("a"),cHe=o("GPTNeoXConfig"),fHe=o(" (GPT NeoX model)"),mHe=l(),_m=a("li"),ite=a("strong"),gHe=o("gptj"),hHe=o(" \u2014 "),TS=a("a"),pHe=o("GPTJConfig"),uHe=o(" (GPT-J model)"),_He=l(),bm=a("li"),dte=a("strong"),bHe=o("hubert"),vHe=o(" \u2014 "),MS=a("a"),FHe=o("HubertConfig"),THe=o(" (Hubert model)"),MHe=l(),vm=a("li"),cte=a("strong"),EHe=o("ibert"),CHe=o(" \u2014 "),ES=a("a"),wHe=o("IBertConfig"),AHe=o(" (I-BERT model)"),yHe=l(),Fm=a("li"),fte=a("strong"),LHe=o("imagegpt"),xHe=o(" \u2014 "),CS=a("a"),$He=o("ImageGPTConfig"),kHe=o(" (ImageGPT model)"),SHe=l(),Tm=a("li"),mte=a("strong"),RHe=o("layoutlm"),PHe=o(" \u2014 "),wS=a("a"),BHe=o("LayoutLMConfig"),IHe=o(" (LayoutLM model)"),NHe=l(),Mm=a("li"),gte=a("strong"),qHe=o("layoutlmv2"),jHe=o(" \u2014 "),AS=a("a"),DHe=o("LayoutLMv2Config"),GHe=o(" (LayoutLMv2 model)"),OHe=l(),Em=a("li"),hte=a("strong"),VHe=o("layoutlmv3"),XHe=o(" \u2014 "),yS=a("a"),zHe=o("LayoutLMv3Config"),WHe=o(" (LayoutLMv3 model)"),QHe=l(),Cm=a("li"),pte=a("strong"),HHe=o("led"),UHe=o(" \u2014 "),LS=a("a"),JHe=o("LEDConfig"),YHe=o(" (LED model)"),KHe=l(),wm=a("li"),ute=a("strong"),ZHe=o("levit"),eUe=o(" \u2014 "),xS=a("a"),oUe=o("LevitConfig"),rUe=o(" (LeViT model)"),tUe=l(),Am=a("li"),_te=a("strong"),aUe=o("longformer"),nUe=o(" \u2014 "),$S=a("a"),sUe=o("LongformerConfig"),lUe=o(" (Longformer model)"),iUe=l(),ym=a("li"),bte=a("strong"),dUe=o("luke"),cUe=o(" \u2014 "),kS=a("a"),fUe=o("LukeConfig"),mUe=o(" (LUKE model)"),gUe=l(),Lm=a("li"),vte=a("strong"),hUe=o("lxmert"),pUe=o(" \u2014 "),SS=a("a"),uUe=o("LxmertConfig"),_Ue=o(" (LXMERT model)"),bUe=l(),xm=a("li"),Fte=a("strong"),vUe=o("m2m_100"),FUe=o(" \u2014 "),RS=a("a"),TUe=o("M2M100Config"),MUe=o(" (M2M100 model)"),EUe=l(),$m=a("li"),Tte=a("strong"),CUe=o("marian"),wUe=o(" \u2014 "),PS=a("a"),AUe=o("MarianConfig"),yUe=o(" (Marian model)"),LUe=l(),km=a("li"),Mte=a("strong"),xUe=o("maskformer"),$Ue=o(" \u2014 "),BS=a("a"),kUe=o("MaskFormerConfig"),SUe=o(" (MaskFormer model)"),RUe=l(),Sm=a("li"),Ete=a("strong"),PUe=o("mbart"),BUe=o(" \u2014 "),IS=a("a"),IUe=o("MBartConfig"),NUe=o(" (mBART model)"),qUe=l(),Rm=a("li"),Cte=a("strong"),jUe=o("mctct"),DUe=o(" \u2014 "),NS=a("a"),GUe=o("MCTCTConfig"),OUe=o(" (M-CTC-T model)"),VUe=l(),Pm=a("li"),wte=a("strong"),XUe=o("megatron-bert"),zUe=o(" \u2014 "),qS=a("a"),WUe=o("MegatronBertConfig"),QUe=o(" (Megatron-BERT model)"),HUe=l(),Bm=a("li"),Ate=a("strong"),UUe=o("mobilebert"),JUe=o(" \u2014 "),jS=a("a"),YUe=o("MobileBertConfig"),KUe=o(" (MobileBERT model)"),ZUe=l(),Im=a("li"),yte=a("strong"),eJe=o("mpnet"),oJe=o(" \u2014 "),DS=a("a"),rJe=o("MPNetConfig"),tJe=o(" (MPNet model)"),aJe=l(),Nm=a("li"),Lte=a("strong"),nJe=o("mt5"),sJe=o(" \u2014 "),GS=a("a"),lJe=o("MT5Config"),iJe=o(" (MT5 model)"),dJe=l(),qm=a("li"),xte=a("strong"),cJe=o("nystromformer"),fJe=o(" \u2014 "),OS=a("a"),mJe=o("NystromformerConfig"),gJe=o(" (Nystr\xF6mformer model)"),hJe=l(),jm=a("li"),$te=a("strong"),pJe=o("openai-gpt"),uJe=o(" \u2014 "),VS=a("a"),_Je=o("OpenAIGPTConfig"),bJe=o(" (OpenAI GPT model)"),vJe=l(),Dm=a("li"),kte=a("strong"),FJe=o("opt"),TJe=o(" \u2014 "),XS=a("a"),MJe=o("OPTConfig"),EJe=o(" (OPT model)"),CJe=l(),Gm=a("li"),Ste=a("strong"),wJe=o("pegasus"),AJe=o(" \u2014 "),zS=a("a"),yJe=o("PegasusConfig"),LJe=o(" (Pegasus model)"),xJe=l(),Om=a("li"),Rte=a("strong"),$Je=o("perceiver"),kJe=o(" \u2014 "),WS=a("a"),SJe=o("PerceiverConfig"),RJe=o(" (Perceiver model)"),PJe=l(),Vm=a("li"),Pte=a("strong"),BJe=o("plbart"),IJe=o(" \u2014 "),QS=a("a"),NJe=o("PLBartConfig"),qJe=o(" (PLBart model)"),jJe=l(),Xm=a("li"),Bte=a("strong"),DJe=o("poolformer"),GJe=o(" \u2014 "),HS=a("a"),OJe=o("PoolFormerConfig"),VJe=o(" (PoolFormer model)"),XJe=l(),zm=a("li"),Ite=a("strong"),zJe=o("prophetnet"),WJe=o(" \u2014 "),US=a("a"),QJe=o("ProphetNetConfig"),HJe=o(" (ProphetNet model)"),UJe=l(),Wm=a("li"),Nte=a("strong"),JJe=o("qdqbert"),YJe=o(" \u2014 "),JS=a("a"),KJe=o("QDQBertConfig"),ZJe=o(" (QDQBert model)"),eYe=l(),Qm=a("li"),qte=a("strong"),oYe=o("rag"),rYe=o(" \u2014 "),YS=a("a"),tYe=o("RagConfig"),aYe=o(" (RAG model)"),nYe=l(),Hm=a("li"),jte=a("strong"),sYe=o("realm"),lYe=o(" \u2014 "),KS=a("a"),iYe=o("RealmConfig"),dYe=o(" (REALM model)"),cYe=l(),Um=a("li"),Dte=a("strong"),fYe=o("reformer"),mYe=o(" \u2014 "),ZS=a("a"),gYe=o("ReformerConfig"),hYe=o(" (Reformer model)"),pYe=l(),Jm=a("li"),Gte=a("strong"),uYe=o("regnet"),_Ye=o(" \u2014 "),eR=a("a"),bYe=o("RegNetConfig"),vYe=o(" (RegNet model)"),FYe=l(),Ym=a("li"),Ote=a("strong"),TYe=o("rembert"),MYe=o(" \u2014 "),oR=a("a"),EYe=o("RemBertConfig"),CYe=o(" (RemBERT model)"),wYe=l(),Km=a("li"),Vte=a("strong"),AYe=o("resnet"),yYe=o(" \u2014 "),rR=a("a"),LYe=o("ResNetConfig"),xYe=o(" (ResNet model)"),$Ye=l(),Zm=a("li"),Xte=a("strong"),kYe=o("retribert"),SYe=o(" \u2014 "),tR=a("a"),RYe=o("RetriBertConfig"),PYe=o(" (RetriBERT model)"),BYe=l(),eg=a("li"),zte=a("strong"),IYe=o("roberta"),NYe=o(" \u2014 "),aR=a("a"),qYe=o("RobertaConfig"),jYe=o(" (RoBERTa model)"),DYe=l(),og=a("li"),Wte=a("strong"),GYe=o("roformer"),OYe=o(" \u2014 "),nR=a("a"),VYe=o("RoFormerConfig"),XYe=o(" (RoFormer model)"),zYe=l(),rg=a("li"),Qte=a("strong"),WYe=o("segformer"),QYe=o(" \u2014 "),sR=a("a"),HYe=o("SegformerConfig"),UYe=o(" (SegFormer model)"),JYe=l(),tg=a("li"),Hte=a("strong"),YYe=o("sew"),KYe=o(" \u2014 "),lR=a("a"),ZYe=o("SEWConfig"),eKe=o(" (SEW model)"),oKe=l(),ag=a("li"),Ute=a("strong"),rKe=o("sew-d"),tKe=o(" \u2014 "),iR=a("a"),aKe=o("SEWDConfig"),nKe=o(" (SEW-D model)"),sKe=l(),ng=a("li"),Jte=a("strong"),lKe=o("speech-encoder-decoder"),iKe=o(" \u2014 "),dR=a("a"),dKe=o("SpeechEncoderDecoderConfig"),cKe=o(" (Speech Encoder decoder model)"),fKe=l(),sg=a("li"),Yte=a("strong"),mKe=o("speech_to_text"),gKe=o(" \u2014 "),cR=a("a"),hKe=o("Speech2TextConfig"),pKe=o(" (Speech2Text model)"),uKe=l(),lg=a("li"),Kte=a("strong"),_Ke=o("speech_to_text_2"),bKe=o(" \u2014 "),fR=a("a"),vKe=o("Speech2Text2Config"),FKe=o(" (Speech2Text2 model)"),TKe=l(),ig=a("li"),Zte=a("strong"),MKe=o("splinter"),EKe=o(" \u2014 "),mR=a("a"),CKe=o("SplinterConfig"),wKe=o(" (Splinter model)"),AKe=l(),dg=a("li"),eae=a("strong"),yKe=o("squeezebert"),LKe=o(" \u2014 "),gR=a("a"),xKe=o("SqueezeBertConfig"),$Ke=o(" (SqueezeBERT model)"),kKe=l(),cg=a("li"),oae=a("strong"),SKe=o("swin"),RKe=o(" \u2014 "),hR=a("a"),PKe=o("SwinConfig"),BKe=o(" (Swin Transformer model)"),IKe=l(),fg=a("li"),rae=a("strong"),NKe=o("t5"),qKe=o(" \u2014 "),pR=a("a"),jKe=o("T5Config"),DKe=o(" (T5 model)"),GKe=l(),mg=a("li"),tae=a("strong"),OKe=o("tapas"),VKe=o(" \u2014 "),uR=a("a"),XKe=o("TapasConfig"),zKe=o(" (TAPAS model)"),WKe=l(),gg=a("li"),aae=a("strong"),QKe=o("trajectory_transformer"),HKe=o(" \u2014 "),_R=a("a"),UKe=o("TrajectoryTransformerConfig"),JKe=o(" (Trajectory Transformer model)"),YKe=l(),hg=a("li"),nae=a("strong"),KKe=o("transfo-xl"),ZKe=o(" \u2014 "),bR=a("a"),eZe=o("TransfoXLConfig"),oZe=o(" (Transformer-XL model)"),rZe=l(),pg=a("li"),sae=a("strong"),tZe=o("trocr"),aZe=o(" \u2014 "),vR=a("a"),nZe=o("TrOCRConfig"),sZe=o(" (TrOCR model)"),lZe=l(),ug=a("li"),lae=a("strong"),iZe=o("unispeech"),dZe=o(" \u2014 "),FR=a("a"),cZe=o("UniSpeechConfig"),fZe=o(" (UniSpeech model)"),mZe=l(),_g=a("li"),iae=a("strong"),gZe=o("unispeech-sat"),hZe=o(" \u2014 "),TR=a("a"),pZe=o("UniSpeechSatConfig"),uZe=o(" (UniSpeechSat model)"),_Ze=l(),bg=a("li"),dae=a("strong"),bZe=o("van"),vZe=o(" \u2014 "),MR=a("a"),FZe=o("VanConfig"),TZe=o(" (VAN model)"),MZe=l(),vg=a("li"),cae=a("strong"),EZe=o("vilt"),CZe=o(" \u2014 "),ER=a("a"),wZe=o("ViltConfig"),AZe=o(" (ViLT model)"),yZe=l(),Fg=a("li"),fae=a("strong"),LZe=o("vision-encoder-decoder"),xZe=o(" \u2014 "),CR=a("a"),$Ze=o("VisionEncoderDecoderConfig"),kZe=o(" (Vision Encoder decoder model)"),SZe=l(),Tg=a("li"),mae=a("strong"),RZe=o("vision-text-dual-encoder"),PZe=o(" \u2014 "),wR=a("a"),BZe=o("VisionTextDualEncoderConfig"),IZe=o(" (VisionTextDualEncoder model)"),NZe=l(),Mg=a("li"),gae=a("strong"),qZe=o("visual_bert"),jZe=o(" \u2014 "),AR=a("a"),DZe=o("VisualBertConfig"),GZe=o(" (VisualBERT model)"),OZe=l(),Eg=a("li"),hae=a("strong"),VZe=o("vit"),XZe=o(" \u2014 "),yR=a("a"),zZe=o("ViTConfig"),WZe=o(" (ViT model)"),QZe=l(),Cg=a("li"),pae=a("strong"),HZe=o("vit_mae"),UZe=o(" \u2014 "),LR=a("a"),JZe=o("ViTMAEConfig"),YZe=o(" (ViTMAE model)"),KZe=l(),wg=a("li"),uae=a("strong"),ZZe=o("wav2vec2"),eeo=o(" \u2014 "),xR=a("a"),oeo=o("Wav2Vec2Config"),reo=o(" (Wav2Vec2 model)"),teo=l(),Ag=a("li"),_ae=a("strong"),aeo=o("wav2vec2-conformer"),neo=o(" \u2014 "),$R=a("a"),seo=o("Wav2Vec2ConformerConfig"),leo=o(" (Wav2Vec2-Conformer model)"),ieo=l(),yg=a("li"),bae=a("strong"),deo=o("wavlm"),ceo=o(" \u2014 "),kR=a("a"),feo=o("WavLMConfig"),meo=o(" (WavLM model)"),geo=l(),Lg=a("li"),vae=a("strong"),heo=o("xglm"),peo=o(" \u2014 "),SR=a("a"),ueo=o("XGLMConfig"),_eo=o(" (XGLM model)"),beo=l(),xg=a("li"),Fae=a("strong"),veo=o("xlm"),Feo=o(" \u2014 "),RR=a("a"),Teo=o("XLMConfig"),Meo=o(" (XLM model)"),Eeo=l(),$g=a("li"),Tae=a("strong"),Ceo=o("xlm-prophetnet"),weo=o(" \u2014 "),PR=a("a"),Aeo=o("XLMProphetNetConfig"),yeo=o(" (XLM-ProphetNet model)"),Leo=l(),kg=a("li"),Mae=a("strong"),xeo=o("xlm-roberta"),$eo=o(" \u2014 "),BR=a("a"),keo=o("XLMRobertaConfig"),Seo=o(" (XLM-RoBERTa model)"),Reo=l(),Sg=a("li"),Eae=a("strong"),Peo=o("xlm-roberta-xl"),Beo=o(" \u2014 "),IR=a("a"),Ieo=o("XLMRobertaXLConfig"),Neo=o(" (XLM-RoBERTa-XL model)"),qeo=l(),Rg=a("li"),Cae=a("strong"),jeo=o("xlnet"),Deo=o(" \u2014 "),NR=a("a"),Geo=o("XLNetConfig"),Oeo=o(" (XLNet model)"),Veo=l(),Pg=a("li"),wae=a("strong"),Xeo=o("yolos"),zeo=o(" \u2014 "),qR=a("a"),Weo=o("YolosConfig"),Qeo=o(" (YOLOS model)"),Heo=l(),Bg=a("li"),Aae=a("strong"),Ueo=o("yoso"),Jeo=o(" \u2014 "),jR=a("a"),Yeo=o("YosoConfig"),Keo=o(" (YOSO model)"),Zeo=l(),F(Ig.$$.fragment),eoo=l(),Ng=a("div"),F(mA.$$.fragment),ooo=l(),yae=a("p"),roo=o("Register a new configuration for this class."),rDe=l(),xi=a("h2"),qg=a("a"),Lae=a("span"),F(gA.$$.fragment),too=l(),xae=a("span"),aoo=o("AutoTokenizer"),tDe=l(),Ao=a("div"),F(hA.$$.fragment),noo=l(),pA=a("p"),soo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DR=a("a"),loo=o("AutoTokenizer.from_pretrained()"),ioo=o(" class method."),doo=l(),uA=a("p"),coo=o("This class cannot be instantiated directly using "),$ae=a("code"),foo=o("__init__()"),moo=o(" (throws an error)."),goo=l(),Ar=a("div"),F(_A.$$.fragment),hoo=l(),kae=a("p"),poo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uoo=l(),$a=a("p"),_oo=o("The tokenizer class to instantiate is selected based on the "),Sae=a("code"),boo=o("model_type"),voo=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),Foo=o("pretrained_model_name_or_path"),Too=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=a("code"),Moo=o("pretrained_model_name_or_path"),Eoo=o(":"),Coo=l(),k=a("ul"),Nn=a("li"),Bae=a("strong"),woo=o("albert"),Aoo=o(" \u2014 "),GR=a("a"),yoo=o("AlbertTokenizer"),Loo=o(" or "),OR=a("a"),xoo=o("AlbertTokenizerFast"),$oo=o(" (ALBERT model)"),koo=l(),qn=a("li"),Iae=a("strong"),Soo=o("bart"),Roo=o(" \u2014 "),VR=a("a"),Poo=o("BartTokenizer"),Boo=o(" or "),XR=a("a"),Ioo=o("BartTokenizerFast"),Noo=o(" (BART model)"),qoo=l(),jn=a("li"),Nae=a("strong"),joo=o("barthez"),Doo=o(" \u2014 "),zR=a("a"),Goo=o("BarthezTokenizer"),Ooo=o(" or "),WR=a("a"),Voo=o("BarthezTokenizerFast"),Xoo=o(" (BARThez model)"),zoo=l(),jg=a("li"),qae=a("strong"),Woo=o("bartpho"),Qoo=o(" \u2014 "),QR=a("a"),Hoo=o("BartphoTokenizer"),Uoo=o(" (BARTpho model)"),Joo=l(),Dn=a("li"),jae=a("strong"),Yoo=o("bert"),Koo=o(" \u2014 "),HR=a("a"),Zoo=o("BertTokenizer"),ero=o(" or "),UR=a("a"),oro=o("BertTokenizerFast"),rro=o(" (BERT model)"),tro=l(),Dg=a("li"),Dae=a("strong"),aro=o("bert-generation"),nro=o(" \u2014 "),JR=a("a"),sro=o("BertGenerationTokenizer"),lro=o(" (Bert Generation model)"),iro=l(),Gg=a("li"),Gae=a("strong"),dro=o("bert-japanese"),cro=o(" \u2014 "),YR=a("a"),fro=o("BertJapaneseTokenizer"),mro=o(" (BertJapanese model)"),gro=l(),Og=a("li"),Oae=a("strong"),hro=o("bertweet"),pro=o(" \u2014 "),KR=a("a"),uro=o("BertweetTokenizer"),_ro=o(" (BERTweet model)"),bro=l(),Gn=a("li"),Vae=a("strong"),vro=o("big_bird"),Fro=o(" \u2014 "),ZR=a("a"),Tro=o("BigBirdTokenizer"),Mro=o(" or "),eP=a("a"),Ero=o("BigBirdTokenizerFast"),Cro=o(" (BigBird model)"),wro=l(),On=a("li"),Xae=a("strong"),Aro=o("bigbird_pegasus"),yro=o(" \u2014 "),oP=a("a"),Lro=o("PegasusTokenizer"),xro=o(" or "),rP=a("a"),$ro=o("PegasusTokenizerFast"),kro=o(" (BigBird-Pegasus model)"),Sro=l(),Vn=a("li"),zae=a("strong"),Rro=o("blenderbot"),Pro=o(" \u2014 "),tP=a("a"),Bro=o("BlenderbotTokenizer"),Iro=o(" or "),aP=a("a"),Nro=o("BlenderbotTokenizerFast"),qro=o(" (Blenderbot model)"),jro=l(),Vg=a("li"),Wae=a("strong"),Dro=o("blenderbot-small"),Gro=o(" \u2014 "),nP=a("a"),Oro=o("BlenderbotSmallTokenizer"),Vro=o(" (BlenderbotSmall model)"),Xro=l(),Xg=a("li"),Qae=a("strong"),zro=o("byt5"),Wro=o(" \u2014 "),sP=a("a"),Qro=o("ByT5Tokenizer"),Hro=o(" (ByT5 model)"),Uro=l(),Xn=a("li"),Hae=a("strong"),Jro=o("camembert"),Yro=o(" \u2014 "),lP=a("a"),Kro=o("CamembertTokenizer"),Zro=o(" or "),iP=a("a"),eto=o("CamembertTokenizerFast"),oto=o(" (CamemBERT model)"),rto=l(),zg=a("li"),Uae=a("strong"),tto=o("canine"),ato=o(" \u2014 "),dP=a("a"),nto=o("CanineTokenizer"),sto=o(" (CANINE model)"),lto=l(),zn=a("li"),Jae=a("strong"),ito=o("clip"),dto=o(" \u2014 "),cP=a("a"),cto=o("CLIPTokenizer"),fto=o(" or "),fP=a("a"),mto=o("CLIPTokenizerFast"),gto=o(" (CLIP model)"),hto=l(),Wn=a("li"),Yae=a("strong"),pto=o("convbert"),uto=o(" \u2014 "),mP=a("a"),_to=o("ConvBertTokenizer"),bto=o(" or "),gP=a("a"),vto=o("ConvBertTokenizerFast"),Fto=o(" (ConvBERT model)"),Tto=l(),Qn=a("li"),Kae=a("strong"),Mto=o("cpm"),Eto=o(" \u2014 "),hP=a("a"),Cto=o("CpmTokenizer"),wto=o(" or "),pP=a("a"),Ato=o("CpmTokenizerFast"),yto=o(" (CPM model)"),Lto=l(),Wg=a("li"),Zae=a("strong"),xto=o("ctrl"),$to=o(" \u2014 "),uP=a("a"),kto=o("CTRLTokenizer"),Sto=o(" (CTRL model)"),Rto=l(),Hn=a("li"),ene=a("strong"),Pto=o("data2vec-text"),Bto=o(" \u2014 "),_P=a("a"),Ito=o("RobertaTokenizer"),Nto=o(" or "),bP=a("a"),qto=o("RobertaTokenizerFast"),jto=o(" (Data2VecText model)"),Dto=l(),Un=a("li"),one=a("strong"),Gto=o("deberta"),Oto=o(" \u2014 "),vP=a("a"),Vto=o("DebertaTokenizer"),Xto=o(" or "),FP=a("a"),zto=o("DebertaTokenizerFast"),Wto=o(" (DeBERTa model)"),Qto=l(),Jn=a("li"),rne=a("strong"),Hto=o("deberta-v2"),Uto=o(" \u2014 "),TP=a("a"),Jto=o("DebertaV2Tokenizer"),Yto=o(" or "),MP=a("a"),Kto=o("DebertaV2TokenizerFast"),Zto=o(" (DeBERTa-v2 model)"),eao=l(),Yn=a("li"),tne=a("strong"),oao=o("distilbert"),rao=o(" \u2014 "),EP=a("a"),tao=o("DistilBertTokenizer"),aao=o(" or "),CP=a("a"),nao=o("DistilBertTokenizerFast"),sao=o(" (DistilBERT model)"),lao=l(),Kn=a("li"),ane=a("strong"),iao=o("dpr"),dao=o(" \u2014 "),wP=a("a"),cao=o("DPRQuestionEncoderTokenizer"),fao=o(" or "),AP=a("a"),mao=o("DPRQuestionEncoderTokenizerFast"),gao=o(" (DPR model)"),hao=l(),Zn=a("li"),nne=a("strong"),pao=o("electra"),uao=o(" \u2014 "),yP=a("a"),_ao=o("ElectraTokenizer"),bao=o(" or "),LP=a("a"),vao=o("ElectraTokenizerFast"),Fao=o(" (ELECTRA model)"),Tao=l(),Qg=a("li"),sne=a("strong"),Mao=o("flaubert"),Eao=o(" \u2014 "),xP=a("a"),Cao=o("FlaubertTokenizer"),wao=o(" (FlauBERT model)"),Aao=l(),es=a("li"),lne=a("strong"),yao=o("fnet"),Lao=o(" \u2014 "),$P=a("a"),xao=o("FNetTokenizer"),$ao=o(" or "),kP=a("a"),kao=o("FNetTokenizerFast"),Sao=o(" (FNet model)"),Rao=l(),Hg=a("li"),ine=a("strong"),Pao=o("fsmt"),Bao=o(" \u2014 "),SP=a("a"),Iao=o("FSMTTokenizer"),Nao=o(" (FairSeq Machine-Translation model)"),qao=l(),os=a("li"),dne=a("strong"),jao=o("funnel"),Dao=o(" \u2014 "),RP=a("a"),Gao=o("FunnelTokenizer"),Oao=o(" or "),PP=a("a"),Vao=o("FunnelTokenizerFast"),Xao=o(" (Funnel Transformer model)"),zao=l(),rs=a("li"),cne=a("strong"),Wao=o("gpt2"),Qao=o(" \u2014 "),BP=a("a"),Hao=o("GPT2Tokenizer"),Uao=o(" or "),IP=a("a"),Jao=o("GPT2TokenizerFast"),Yao=o(" (OpenAI GPT-2 model)"),Kao=l(),ts=a("li"),fne=a("strong"),Zao=o("gpt_neo"),eno=o(" \u2014 "),NP=a("a"),ono=o("GPT2Tokenizer"),rno=o(" or "),qP=a("a"),tno=o("GPT2TokenizerFast"),ano=o(" (GPT Neo model)"),nno=l(),Ug=a("li"),mne=a("strong"),sno=o("gpt_neox"),lno=o(" \u2014 "),jP=a("a"),ino=o("GPTNeoXTokenizerFast"),dno=o(" (GPT NeoX model)"),cno=l(),as=a("li"),gne=a("strong"),fno=o("gptj"),mno=o(" \u2014 "),DP=a("a"),gno=o("GPT2Tokenizer"),hno=o(" or "),GP=a("a"),pno=o("GPT2TokenizerFast"),uno=o(" (GPT-J model)"),_no=l(),ns=a("li"),hne=a("strong"),bno=o("herbert"),vno=o(" \u2014 "),OP=a("a"),Fno=o("HerbertTokenizer"),Tno=o(" or "),VP=a("a"),Mno=o("HerbertTokenizerFast"),Eno=o(" (HerBERT model)"),Cno=l(),Jg=a("li"),pne=a("strong"),wno=o("hubert"),Ano=o(" \u2014 "),XP=a("a"),yno=o("Wav2Vec2CTCTokenizer"),Lno=o(" (Hubert model)"),xno=l(),ss=a("li"),une=a("strong"),$no=o("ibert"),kno=o(" \u2014 "),zP=a("a"),Sno=o("RobertaTokenizer"),Rno=o(" or "),WP=a("a"),Pno=o("RobertaTokenizerFast"),Bno=o(" (I-BERT model)"),Ino=l(),ls=a("li"),_ne=a("strong"),Nno=o("layoutlm"),qno=o(" \u2014 "),QP=a("a"),jno=o("LayoutLMTokenizer"),Dno=o(" or "),HP=a("a"),Gno=o("LayoutLMTokenizerFast"),Ono=o(" (LayoutLM model)"),Vno=l(),is=a("li"),bne=a("strong"),Xno=o("layoutlmv2"),zno=o(" \u2014 "),UP=a("a"),Wno=o("LayoutLMv2Tokenizer"),Qno=o(" or "),JP=a("a"),Hno=o("LayoutLMv2TokenizerFast"),Uno=o(" (LayoutLMv2 model)"),Jno=l(),ds=a("li"),vne=a("strong"),Yno=o("layoutlmv3"),Kno=o(" \u2014 "),YP=a("a"),Zno=o("LayoutLMv3Tokenizer"),eso=o(" or "),KP=a("a"),oso=o("LayoutLMv3TokenizerFast"),rso=o(" (LayoutLMv3 model)"),tso=l(),cs=a("li"),Fne=a("strong"),aso=o("layoutxlm"),nso=o(" \u2014 "),ZP=a("a"),sso=o("LayoutXLMTokenizer"),lso=o(" or "),eB=a("a"),iso=o("LayoutXLMTokenizerFast"),dso=o(" (LayoutXLM model)"),cso=l(),fs=a("li"),Tne=a("strong"),fso=o("led"),mso=o(" \u2014 "),oB=a("a"),gso=o("LEDTokenizer"),hso=o(" or "),rB=a("a"),pso=o("LEDTokenizerFast"),uso=o(" (LED model)"),_so=l(),ms=a("li"),Mne=a("strong"),bso=o("longformer"),vso=o(" \u2014 "),tB=a("a"),Fso=o("LongformerTokenizer"),Tso=o(" or "),aB=a("a"),Mso=o("LongformerTokenizerFast"),Eso=o(" (Longformer model)"),Cso=l(),Yg=a("li"),Ene=a("strong"),wso=o("luke"),Aso=o(" \u2014 "),nB=a("a"),yso=o("LukeTokenizer"),Lso=o(" (LUKE model)"),xso=l(),gs=a("li"),Cne=a("strong"),$so=o("lxmert"),kso=o(" \u2014 "),sB=a("a"),Sso=o("LxmertTokenizer"),Rso=o(" or "),lB=a("a"),Pso=o("LxmertTokenizerFast"),Bso=o(" (LXMERT model)"),Iso=l(),Kg=a("li"),wne=a("strong"),Nso=o("m2m_100"),qso=o(" \u2014 "),iB=a("a"),jso=o("M2M100Tokenizer"),Dso=o(" (M2M100 model)"),Gso=l(),Zg=a("li"),Ane=a("strong"),Oso=o("marian"),Vso=o(" \u2014 "),dB=a("a"),Xso=o("MarianTokenizer"),zso=o(" (Marian model)"),Wso=l(),hs=a("li"),yne=a("strong"),Qso=o("mbart"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("MBartTokenizer"),Jso=o(" or "),fB=a("a"),Yso=o("MBartTokenizerFast"),Kso=o(" (mBART model)"),Zso=l(),ps=a("li"),Lne=a("strong"),elo=o("mbart50"),olo=o(" \u2014 "),mB=a("a"),rlo=o("MBart50Tokenizer"),tlo=o(" or "),gB=a("a"),alo=o("MBart50TokenizerFast"),nlo=o(" (mBART-50 model)"),slo=l(),us=a("li"),xne=a("strong"),llo=o("megatron-bert"),ilo=o(" \u2014 "),hB=a("a"),dlo=o("BertTokenizer"),clo=o(" or "),pB=a("a"),flo=o("BertTokenizerFast"),mlo=o(" (Megatron-BERT model)"),glo=l(),eh=a("li"),$ne=a("strong"),hlo=o("mluke"),plo=o(" \u2014 "),uB=a("a"),ulo=o("MLukeTokenizer"),_lo=o(" (mLUKE model)"),blo=l(),_s=a("li"),kne=a("strong"),vlo=o("mobilebert"),Flo=o(" \u2014 "),_B=a("a"),Tlo=o("MobileBertTokenizer"),Mlo=o(" or "),bB=a("a"),Elo=o("MobileBertTokenizerFast"),Clo=o(" (MobileBERT model)"),wlo=l(),bs=a("li"),Sne=a("strong"),Alo=o("mpnet"),ylo=o(" \u2014 "),vB=a("a"),Llo=o("MPNetTokenizer"),xlo=o(" or "),FB=a("a"),$lo=o("MPNetTokenizerFast"),klo=o(" (MPNet model)"),Slo=l(),vs=a("li"),Rne=a("strong"),Rlo=o("mt5"),Plo=o(" \u2014 "),TB=a("a"),Blo=o("MT5Tokenizer"),Ilo=o(" or "),MB=a("a"),Nlo=o("MT5TokenizerFast"),qlo=o(" (MT5 model)"),jlo=l(),Fs=a("li"),Pne=a("strong"),Dlo=o("nystromformer"),Glo=o(" \u2014 "),EB=a("a"),Olo=o("AlbertTokenizer"),Vlo=o(" or "),CB=a("a"),Xlo=o("AlbertTokenizerFast"),zlo=o(" (Nystr\xF6mformer model)"),Wlo=l(),Ts=a("li"),Bne=a("strong"),Qlo=o("openai-gpt"),Hlo=o(" \u2014 "),wB=a("a"),Ulo=o("OpenAIGPTTokenizer"),Jlo=o(" or "),AB=a("a"),Ylo=o("OpenAIGPTTokenizerFast"),Klo=o(" (OpenAI GPT model)"),Zlo=l(),oh=a("li"),Ine=a("strong"),eio=o("opt"),oio=o(" \u2014 "),yB=a("a"),rio=o("GPT2Tokenizer"),tio=o(" (OPT model)"),aio=l(),Ms=a("li"),Nne=a("strong"),nio=o("pegasus"),sio=o(" \u2014 "),LB=a("a"),lio=o("PegasusTokenizer"),iio=o(" or "),xB=a("a"),dio=o("PegasusTokenizerFast"),cio=o(" (Pegasus model)"),fio=l(),rh=a("li"),qne=a("strong"),mio=o("perceiver"),gio=o(" \u2014 "),$B=a("a"),hio=o("PerceiverTokenizer"),pio=o(" (Perceiver model)"),uio=l(),th=a("li"),jne=a("strong"),_io=o("phobert"),bio=o(" \u2014 "),kB=a("a"),vio=o("PhobertTokenizer"),Fio=o(" (PhoBERT model)"),Tio=l(),ah=a("li"),Dne=a("strong"),Mio=o("plbart"),Eio=o(" \u2014 "),SB=a("a"),Cio=o("PLBartTokenizer"),wio=o(" (PLBart model)"),Aio=l(),nh=a("li"),Gne=a("strong"),yio=o("prophetnet"),Lio=o(" \u2014 "),RB=a("a"),xio=o("ProphetNetTokenizer"),$io=o(" (ProphetNet model)"),kio=l(),Es=a("li"),One=a("strong"),Sio=o("qdqbert"),Rio=o(" \u2014 "),PB=a("a"),Pio=o("BertTokenizer"),Bio=o(" or "),BB=a("a"),Iio=o("BertTokenizerFast"),Nio=o(" (QDQBert model)"),qio=l(),sh=a("li"),Vne=a("strong"),jio=o("rag"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("RagTokenizer"),Oio=o(" (RAG model)"),Vio=l(),Cs=a("li"),Xne=a("strong"),Xio=o("realm"),zio=o(" \u2014 "),NB=a("a"),Wio=o("RealmTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("RealmTokenizerFast"),Uio=o(" (REALM model)"),Jio=l(),ws=a("li"),zne=a("strong"),Yio=o("reformer"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("ReformerTokenizer"),edo=o(" or "),DB=a("a"),odo=o("ReformerTokenizerFast"),rdo=o(" (Reformer model)"),tdo=l(),As=a("li"),Wne=a("strong"),ado=o("rembert"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("RemBertTokenizer"),ldo=o(" or "),OB=a("a"),ido=o("RemBertTokenizerFast"),ddo=o(" (RemBERT model)"),cdo=l(),ys=a("li"),Qne=a("strong"),fdo=o("retribert"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("RetriBertTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("RetriBertTokenizerFast"),udo=o(" (RetriBERT model)"),_do=l(),Ls=a("li"),Hne=a("strong"),bdo=o("roberta"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("RobertaTokenizer"),Tdo=o(" or "),WB=a("a"),Mdo=o("RobertaTokenizerFast"),Edo=o(" (RoBERTa model)"),Cdo=l(),xs=a("li"),Une=a("strong"),wdo=o("roformer"),Ado=o(" \u2014 "),QB=a("a"),ydo=o("RoFormerTokenizer"),Ldo=o(" or "),HB=a("a"),xdo=o("RoFormerTokenizerFast"),$do=o(" (RoFormer model)"),kdo=l(),lh=a("li"),Jne=a("strong"),Sdo=o("speech_to_text"),Rdo=o(" \u2014 "),UB=a("a"),Pdo=o("Speech2TextTokenizer"),Bdo=o(" (Speech2Text model)"),Ido=l(),ih=a("li"),Yne=a("strong"),Ndo=o("speech_to_text_2"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("Speech2Text2Tokenizer"),Ddo=o(" (Speech2Text2 model)"),Gdo=l(),$s=a("li"),Kne=a("strong"),Odo=o("splinter"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("SplinterTokenizer"),zdo=o(" or "),KB=a("a"),Wdo=o("SplinterTokenizerFast"),Qdo=o(" (Splinter model)"),Hdo=l(),ks=a("li"),Zne=a("strong"),Udo=o("squeezebert"),Jdo=o(" \u2014 "),ZB=a("a"),Ydo=o("SqueezeBertTokenizer"),Kdo=o(" or "),eI=a("a"),Zdo=o("SqueezeBertTokenizerFast"),eco=o(" (SqueezeBERT model)"),oco=l(),Ss=a("li"),ese=a("strong"),rco=o("t5"),tco=o(" \u2014 "),oI=a("a"),aco=o("T5Tokenizer"),nco=o(" or "),rI=a("a"),sco=o("T5TokenizerFast"),lco=o(" (T5 model)"),ico=l(),dh=a("li"),ose=a("strong"),dco=o("tapas"),cco=o(" \u2014 "),tI=a("a"),fco=o("TapasTokenizer"),mco=o(" (TAPAS model)"),gco=l(),ch=a("li"),rse=a("strong"),hco=o("tapex"),pco=o(" \u2014 "),aI=a("a"),uco=o("TapexTokenizer"),_co=o(" (TAPEX model)"),bco=l(),fh=a("li"),tse=a("strong"),vco=o("transfo-xl"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("TransfoXLTokenizer"),Mco=o(" (Transformer-XL model)"),Eco=l(),Rs=a("li"),ase=a("strong"),Cco=o("vilt"),wco=o(" \u2014 "),sI=a("a"),Aco=o("BertTokenizer"),yco=o(" or "),lI=a("a"),Lco=o("BertTokenizerFast"),xco=o(" (ViLT model)"),$co=l(),Ps=a("li"),nse=a("strong"),kco=o("visual_bert"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("BertTokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("BertTokenizerFast"),Ico=o(" (VisualBERT model)"),Nco=l(),mh=a("li"),sse=a("strong"),qco=o("wav2vec2"),jco=o(" \u2014 "),cI=a("a"),Dco=o("Wav2Vec2CTCTokenizer"),Gco=o(" (Wav2Vec2 model)"),Oco=l(),gh=a("li"),lse=a("strong"),Vco=o("wav2vec2-conformer"),Xco=o(" \u2014 "),fI=a("a"),zco=o("Wav2Vec2CTCTokenizer"),Wco=o(" (Wav2Vec2-Conformer model)"),Qco=l(),hh=a("li"),ise=a("strong"),Hco=o("wav2vec2_phoneme"),Uco=o(" \u2014 "),mI=a("a"),Jco=o("Wav2Vec2PhonemeCTCTokenizer"),Yco=o(" (Wav2Vec2Phoneme model)"),Kco=l(),Bs=a("li"),dse=a("strong"),Zco=o("xglm"),efo=o(" \u2014 "),gI=a("a"),ofo=o("XGLMTokenizer"),rfo=o(" or "),hI=a("a"),tfo=o("XGLMTokenizerFast"),afo=o(" (XGLM model)"),nfo=l(),ph=a("li"),cse=a("strong"),sfo=o("xlm"),lfo=o(" \u2014 "),pI=a("a"),ifo=o("XLMTokenizer"),dfo=o(" (XLM model)"),cfo=l(),uh=a("li"),fse=a("strong"),ffo=o("xlm-prophetnet"),mfo=o(" \u2014 "),uI=a("a"),gfo=o("XLMProphetNetTokenizer"),hfo=o(" (XLM-ProphetNet model)"),pfo=l(),Is=a("li"),mse=a("strong"),ufo=o("xlm-roberta"),_fo=o(" \u2014 "),_I=a("a"),bfo=o("XLMRobertaTokenizer"),vfo=o(" or "),bI=a("a"),Ffo=o("XLMRobertaTokenizerFast"),Tfo=o(" (XLM-RoBERTa model)"),Mfo=l(),Ns=a("li"),gse=a("strong"),Efo=o("xlm-roberta-xl"),Cfo=o(" \u2014 "),vI=a("a"),wfo=o("RobertaTokenizer"),Afo=o(" or "),FI=a("a"),yfo=o("RobertaTokenizerFast"),Lfo=o(" (XLM-RoBERTa-XL model)"),xfo=l(),qs=a("li"),hse=a("strong"),$fo=o("xlnet"),kfo=o(" \u2014 "),TI=a("a"),Sfo=o("XLNetTokenizer"),Rfo=o(" or "),MI=a("a"),Pfo=o("XLNetTokenizerFast"),Bfo=o(" (XLNet model)"),Ifo=l(),js=a("li"),pse=a("strong"),Nfo=o("yoso"),qfo=o(" \u2014 "),EI=a("a"),jfo=o("AlbertTokenizer"),Dfo=o(" or "),CI=a("a"),Gfo=o("AlbertTokenizerFast"),Ofo=o(" (YOSO model)"),Vfo=l(),F(_h.$$.fragment),Xfo=l(),bh=a("div"),F(bA.$$.fragment),zfo=l(),use=a("p"),Wfo=o("Register a new tokenizer in this mapping."),aDe=l(),$i=a("h2"),vh=a("a"),_se=a("span"),F(vA.$$.fragment),Qfo=l(),bse=a("span"),Hfo=o("AutoFeatureExtractor"),nDe=l(),yo=a("div"),F(FA.$$.fragment),Ufo=l(),TA=a("p"),Jfo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wI=a("a"),Yfo=o("AutoFeatureExtractor.from_pretrained()"),Kfo=o(" class method."),Zfo=l(),MA=a("p"),emo=o("This class cannot be instantiated directly using "),vse=a("code"),omo=o("__init__()"),rmo=o(" (throws an error)."),tmo=l(),He=a("div"),F(EA.$$.fragment),amo=l(),Fse=a("p"),nmo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),smo=l(),ka=a("p"),lmo=o("The feature extractor class to instantiate is selected based on the "),Tse=a("code"),imo=o("model_type"),dmo=o(` property of the config object
(either passed as an argument or loaded from `),Mse=a("code"),cmo=o("pretrained_model_name_or_path"),fmo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ese=a("code"),mmo=o("pretrained_model_name_or_path"),gmo=o(":"),hmo=l(),Y=a("ul"),Fh=a("li"),Cse=a("strong"),pmo=o("beit"),umo=o(" \u2014 "),AI=a("a"),_mo=o("BeitFeatureExtractor"),bmo=o(" (BEiT model)"),vmo=l(),Th=a("li"),wse=a("strong"),Fmo=o("clip"),Tmo=o(" \u2014 "),yI=a("a"),Mmo=o("CLIPFeatureExtractor"),Emo=o(" (CLIP model)"),Cmo=l(),Mh=a("li"),Ase=a("strong"),wmo=o("convnext"),Amo=o(" \u2014 "),LI=a("a"),ymo=o("ConvNextFeatureExtractor"),Lmo=o(" (ConvNeXT model)"),xmo=l(),Eh=a("li"),yse=a("strong"),$mo=o("cvt"),kmo=o(" \u2014 "),xI=a("a"),Smo=o("ConvNextFeatureExtractor"),Rmo=o(" (CvT model)"),Pmo=l(),Ch=a("li"),Lse=a("strong"),Bmo=o("data2vec-audio"),Imo=o(" \u2014 "),$I=a("a"),Nmo=o("Wav2Vec2FeatureExtractor"),qmo=o(" (Data2VecAudio model)"),jmo=l(),wh=a("li"),xse=a("strong"),Dmo=o("data2vec-vision"),Gmo=o(" \u2014 "),kI=a("a"),Omo=o("BeitFeatureExtractor"),Vmo=o(" (Data2VecVision model)"),Xmo=l(),Ah=a("li"),$se=a("strong"),zmo=o("deit"),Wmo=o(" \u2014 "),SI=a("a"),Qmo=o("DeiTFeatureExtractor"),Hmo=o(" (DeiT model)"),Umo=l(),yh=a("li"),kse=a("strong"),Jmo=o("detr"),Ymo=o(" \u2014 "),RI=a("a"),Kmo=o("DetrFeatureExtractor"),Zmo=o(" (DETR model)"),ego=l(),Lh=a("li"),Sse=a("strong"),ogo=o("dpt"),rgo=o(" \u2014 "),PI=a("a"),tgo=o("DPTFeatureExtractor"),ago=o(" (DPT model)"),ngo=l(),xh=a("li"),Rse=a("strong"),sgo=o("flava"),lgo=o(" \u2014 "),BI=a("a"),igo=o("FlavaFeatureExtractor"),dgo=o(" (FLAVA model)"),cgo=l(),$h=a("li"),Pse=a("strong"),fgo=o("glpn"),mgo=o(" \u2014 "),II=a("a"),ggo=o("GLPNFeatureExtractor"),hgo=o(" (GLPN model)"),pgo=l(),kh=a("li"),Bse=a("strong"),ugo=o("hubert"),_go=o(" \u2014 "),NI=a("a"),bgo=o("Wav2Vec2FeatureExtractor"),vgo=o(" (Hubert model)"),Fgo=l(),Sh=a("li"),Ise=a("strong"),Tgo=o("imagegpt"),Mgo=o(" \u2014 "),qI=a("a"),Ego=o("ImageGPTFeatureExtractor"),Cgo=o(" (ImageGPT model)"),wgo=l(),Rh=a("li"),Nse=a("strong"),Ago=o("layoutlmv2"),ygo=o(" \u2014 "),jI=a("a"),Lgo=o("LayoutLMv2FeatureExtractor"),xgo=o(" (LayoutLMv2 model)"),$go=l(),Ph=a("li"),qse=a("strong"),kgo=o("layoutlmv3"),Sgo=o(" \u2014 "),DI=a("a"),Rgo=o("LayoutLMv3FeatureExtractor"),Pgo=o(" (LayoutLMv3 model)"),Bgo=l(),Bh=a("li"),jse=a("strong"),Igo=o("levit"),Ngo=o(" \u2014 "),GI=a("a"),qgo=o("LevitFeatureExtractor"),jgo=o(" (LeViT model)"),Dgo=l(),Ih=a("li"),Dse=a("strong"),Ggo=o("maskformer"),Ogo=o(" \u2014 "),OI=a("a"),Vgo=o("MaskFormerFeatureExtractor"),Xgo=o(" (MaskFormer model)"),zgo=l(),Nh=a("li"),Gse=a("strong"),Wgo=o("mctct"),Qgo=o(" \u2014 "),VI=a("a"),Hgo=o("MCTCTFeatureExtractor"),Ugo=o(" (M-CTC-T model)"),Jgo=l(),qh=a("li"),Ose=a("strong"),Ygo=o("perceiver"),Kgo=o(" \u2014 "),XI=a("a"),Zgo=o("PerceiverFeatureExtractor"),eho=o(" (Perceiver model)"),oho=l(),jh=a("li"),Vse=a("strong"),rho=o("poolformer"),tho=o(" \u2014 "),zI=a("a"),aho=o("PoolFormerFeatureExtractor"),nho=o(" (PoolFormer model)"),sho=l(),Dh=a("li"),Xse=a("strong"),lho=o("regnet"),iho=o(" \u2014 "),WI=a("a"),dho=o("ConvNextFeatureExtractor"),cho=o(" (RegNet model)"),fho=l(),Gh=a("li"),zse=a("strong"),mho=o("resnet"),gho=o(" \u2014 "),QI=a("a"),hho=o("ConvNextFeatureExtractor"),pho=o(" (ResNet model)"),uho=l(),Oh=a("li"),Wse=a("strong"),_ho=o("segformer"),bho=o(" \u2014 "),HI=a("a"),vho=o("SegformerFeatureExtractor"),Fho=o(" (SegFormer model)"),Tho=l(),Vh=a("li"),Qse=a("strong"),Mho=o("speech_to_text"),Eho=o(" \u2014 "),UI=a("a"),Cho=o("Speech2TextFeatureExtractor"),who=o(" (Speech2Text model)"),Aho=l(),Xh=a("li"),Hse=a("strong"),yho=o("swin"),Lho=o(" \u2014 "),JI=a("a"),xho=o("ViTFeatureExtractor"),$ho=o(" (Swin Transformer model)"),kho=l(),zh=a("li"),Use=a("strong"),Sho=o("van"),Rho=o(" \u2014 "),YI=a("a"),Pho=o("ConvNextFeatureExtractor"),Bho=o(" (VAN model)"),Iho=l(),Wh=a("li"),Jse=a("strong"),Nho=o("vilt"),qho=o(" \u2014 "),KI=a("a"),jho=o("ViltFeatureExtractor"),Dho=o(" (ViLT model)"),Gho=l(),Qh=a("li"),Yse=a("strong"),Oho=o("vit"),Vho=o(" \u2014 "),ZI=a("a"),Xho=o("ViTFeatureExtractor"),zho=o(" (ViT model)"),Who=l(),Hh=a("li"),Kse=a("strong"),Qho=o("vit_mae"),Hho=o(" \u2014 "),eN=a("a"),Uho=o("ViTFeatureExtractor"),Jho=o(" (ViTMAE model)"),Yho=l(),Uh=a("li"),Zse=a("strong"),Kho=o("wav2vec2"),Zho=o(" \u2014 "),oN=a("a"),epo=o("Wav2Vec2FeatureExtractor"),opo=o(" (Wav2Vec2 model)"),rpo=l(),Jh=a("li"),ele=a("strong"),tpo=o("wav2vec2-conformer"),apo=o(" \u2014 "),rN=a("a"),npo=o("Wav2Vec2FeatureExtractor"),spo=o(" (Wav2Vec2-Conformer model)"),lpo=l(),Yh=a("li"),ole=a("strong"),ipo=o("yolos"),dpo=o(" \u2014 "),tN=a("a"),cpo=o("YolosFeatureExtractor"),fpo=o(" (YOLOS model)"),mpo=l(),F(Kh.$$.fragment),gpo=l(),F(Zh.$$.fragment),hpo=l(),ep=a("div"),F(CA.$$.fragment),ppo=l(),rle=a("p"),upo=o("Register a new feature extractor for this class."),sDe=l(),ki=a("h2"),op=a("a"),tle=a("span"),F(wA.$$.fragment),_po=l(),ale=a("span"),bpo=o("AutoProcessor"),lDe=l(),Lo=a("div"),F(AA.$$.fragment),vpo=l(),yA=a("p"),Fpo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aN=a("a"),Tpo=o("AutoProcessor.from_pretrained()"),Mpo=o(" class method."),Epo=l(),LA=a("p"),Cpo=o("This class cannot be instantiated directly using "),nle=a("code"),wpo=o("__init__()"),Apo=o(" (throws an error)."),ypo=l(),Ue=a("div"),F(xA.$$.fragment),Lpo=l(),sle=a("p"),xpo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$po=l(),Si=a("p"),kpo=o("The processor class to instantiate is selected based on the "),lle=a("code"),Spo=o("model_type"),Rpo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),Ppo=o("pretrained_model_name_or_path"),Bpo=o(" if possible):"),Ipo=l(),he=a("ul"),rp=a("li"),dle=a("strong"),Npo=o("clip"),qpo=o(" \u2014 "),nN=a("a"),jpo=o("CLIPProcessor"),Dpo=o(" (CLIP model)"),Gpo=l(),tp=a("li"),cle=a("strong"),Opo=o("flava"),Vpo=o(" \u2014 "),fle=a("code"),Xpo=o("FLAVAProcessor"),zpo=o(" (FLAVA model)"),Wpo=l(),ap=a("li"),mle=a("strong"),Qpo=o("layoutlmv2"),Hpo=o(" \u2014 "),sN=a("a"),Upo=o("LayoutLMv2Processor"),Jpo=o(" (LayoutLMv2 model)"),Ypo=l(),np=a("li"),gle=a("strong"),Kpo=o("layoutlmv3"),Zpo=o(" \u2014 "),lN=a("a"),euo=o("LayoutLMv3Processor"),ouo=o(" (LayoutLMv3 model)"),ruo=l(),sp=a("li"),hle=a("strong"),tuo=o("layoutxlm"),auo=o(" \u2014 "),iN=a("a"),nuo=o("LayoutXLMProcessor"),suo=o(" (LayoutXLM model)"),luo=l(),lp=a("li"),ple=a("strong"),iuo=o("sew"),duo=o(" \u2014 "),dN=a("a"),cuo=o("Wav2Vec2Processor"),fuo=o(" (SEW model)"),muo=l(),ip=a("li"),ule=a("strong"),guo=o("sew-d"),huo=o(" \u2014 "),cN=a("a"),puo=o("Wav2Vec2Processor"),uuo=o(" (SEW-D model)"),_uo=l(),dp=a("li"),_le=a("strong"),buo=o("speech_to_text"),vuo=o(" \u2014 "),fN=a("a"),Fuo=o("Speech2TextProcessor"),Tuo=o(" (Speech2Text model)"),Muo=l(),cp=a("li"),ble=a("strong"),Euo=o("speech_to_text_2"),Cuo=o(" \u2014 "),mN=a("a"),wuo=o("Speech2Text2Processor"),Auo=o(" (Speech2Text2 model)"),yuo=l(),fp=a("li"),vle=a("strong"),Luo=o("trocr"),xuo=o(" \u2014 "),gN=a("a"),$uo=o("TrOCRProcessor"),kuo=o(" (TrOCR model)"),Suo=l(),mp=a("li"),Fle=a("strong"),Ruo=o("unispeech"),Puo=o(" \u2014 "),hN=a("a"),Buo=o("Wav2Vec2Processor"),Iuo=o(" (UniSpeech model)"),Nuo=l(),gp=a("li"),Tle=a("strong"),quo=o("unispeech-sat"),juo=o(" \u2014 "),pN=a("a"),Duo=o("Wav2Vec2Processor"),Guo=o(" (UniSpeechSat model)"),Ouo=l(),hp=a("li"),Mle=a("strong"),Vuo=o("vilt"),Xuo=o(" \u2014 "),uN=a("a"),zuo=o("ViltProcessor"),Wuo=o(" (ViLT model)"),Quo=l(),pp=a("li"),Ele=a("strong"),Huo=o("vision-text-dual-encoder"),Uuo=o(" \u2014 "),_N=a("a"),Juo=o("VisionTextDualEncoderProcessor"),Yuo=o(" (VisionTextDualEncoder model)"),Kuo=l(),up=a("li"),Cle=a("strong"),Zuo=o("wav2vec2"),e_o=o(" \u2014 "),bN=a("a"),o_o=o("Wav2Vec2Processor"),r_o=o(" (Wav2Vec2 model)"),t_o=l(),_p=a("li"),wle=a("strong"),a_o=o("wav2vec2-conformer"),n_o=o(" \u2014 "),vN=a("a"),s_o=o("Wav2Vec2Processor"),l_o=o(" (Wav2Vec2-Conformer model)"),i_o=l(),bp=a("li"),Ale=a("strong"),d_o=o("wavlm"),c_o=o(" \u2014 "),FN=a("a"),f_o=o("Wav2Vec2Processor"),m_o=o(" (WavLM model)"),g_o=l(),F(vp.$$.fragment),h_o=l(),F(Fp.$$.fragment),p_o=l(),Tp=a("div"),F($A.$$.fragment),u_o=l(),yle=a("p"),__o=o("Register a new processor for this class."),iDe=l(),Ri=a("h2"),Mp=a("a"),Lle=a("span"),F(kA.$$.fragment),b_o=l(),xle=a("span"),v_o=o("AutoModel"),dDe=l(),xo=a("div"),F(SA.$$.fragment),F_o=l(),Pi=a("p"),T_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TN=a("a"),M_o=o("from_pretrained()"),E_o=o(" class method or the "),MN=a("a"),C_o=o("from_config()"),w_o=o(` class
method.`),A_o=l(),RA=a("p"),y_o=o("This class cannot be instantiated directly using "),$le=a("code"),L_o=o("__init__()"),x_o=o(" (throws an error)."),$_o=l(),nt=a("div"),F(PA.$$.fragment),k_o=l(),kle=a("p"),S_o=o("Instantiates one of the base model classes of the library from a configuration."),R_o=l(),Bi=a("p"),P_o=o(`Note:
Loading a model from its configuration file does `),Sle=a("strong"),B_o=o("not"),I_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=a("a"),N_o=o("from_pretrained()"),q_o=o(" to load the model weights."),j_o=l(),F(Ep.$$.fragment),D_o=l(),Je=a("div"),F(BA.$$.fragment),G_o=l(),Rle=a("p"),O_o=o("Instantiate one of the base model classes of the library from a pretrained model."),V_o=l(),Sa=a("p"),X_o=o("The model class to instantiate is selected based on the "),Ple=a("code"),z_o=o("model_type"),W_o=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),Q_o=o("pretrained_model_name_or_path"),H_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),U_o=o("pretrained_model_name_or_path"),J_o=o(":"),Y_o=l(),x=a("ul"),Cp=a("li"),Nle=a("strong"),K_o=o("albert"),Z_o=o(" \u2014 "),CN=a("a"),e2o=o("AlbertModel"),o2o=o(" (ALBERT model)"),r2o=l(),wp=a("li"),qle=a("strong"),t2o=o("bart"),a2o=o(" \u2014 "),wN=a("a"),n2o=o("BartModel"),s2o=o(" (BART model)"),l2o=l(),Ap=a("li"),jle=a("strong"),i2o=o("beit"),d2o=o(" \u2014 "),AN=a("a"),c2o=o("BeitModel"),f2o=o(" (BEiT model)"),m2o=l(),yp=a("li"),Dle=a("strong"),g2o=o("bert"),h2o=o(" \u2014 "),yN=a("a"),p2o=o("BertModel"),u2o=o(" (BERT model)"),_2o=l(),Lp=a("li"),Gle=a("strong"),b2o=o("bert-generation"),v2o=o(" \u2014 "),LN=a("a"),F2o=o("BertGenerationEncoder"),T2o=o(" (Bert Generation model)"),M2o=l(),xp=a("li"),Ole=a("strong"),E2o=o("big_bird"),C2o=o(" \u2014 "),xN=a("a"),w2o=o("BigBirdModel"),A2o=o(" (BigBird model)"),y2o=l(),$p=a("li"),Vle=a("strong"),L2o=o("bigbird_pegasus"),x2o=o(" \u2014 "),$N=a("a"),$2o=o("BigBirdPegasusModel"),k2o=o(" (BigBird-Pegasus model)"),S2o=l(),kp=a("li"),Xle=a("strong"),R2o=o("blenderbot"),P2o=o(" \u2014 "),kN=a("a"),B2o=o("BlenderbotModel"),I2o=o(" (Blenderbot model)"),N2o=l(),Sp=a("li"),zle=a("strong"),q2o=o("blenderbot-small"),j2o=o(" \u2014 "),SN=a("a"),D2o=o("BlenderbotSmallModel"),G2o=o(" (BlenderbotSmall model)"),O2o=l(),Rp=a("li"),Wle=a("strong"),V2o=o("camembert"),X2o=o(" \u2014 "),RN=a("a"),z2o=o("CamembertModel"),W2o=o(" (CamemBERT model)"),Q2o=l(),Pp=a("li"),Qle=a("strong"),H2o=o("canine"),U2o=o(" \u2014 "),PN=a("a"),J2o=o("CanineModel"),Y2o=o(" (CANINE model)"),K2o=l(),Bp=a("li"),Hle=a("strong"),Z2o=o("clip"),e1o=o(" \u2014 "),BN=a("a"),o1o=o("CLIPModel"),r1o=o(" (CLIP model)"),t1o=l(),Ip=a("li"),Ule=a("strong"),a1o=o("convbert"),n1o=o(" \u2014 "),IN=a("a"),s1o=o("ConvBertModel"),l1o=o(" (ConvBERT model)"),i1o=l(),Np=a("li"),Jle=a("strong"),d1o=o("convnext"),c1o=o(" \u2014 "),NN=a("a"),f1o=o("ConvNextModel"),m1o=o(" (ConvNeXT model)"),g1o=l(),qp=a("li"),Yle=a("strong"),h1o=o("ctrl"),p1o=o(" \u2014 "),qN=a("a"),u1o=o("CTRLModel"),_1o=o(" (CTRL model)"),b1o=l(),jp=a("li"),Kle=a("strong"),v1o=o("cvt"),F1o=o(" \u2014 "),jN=a("a"),T1o=o("CvtModel"),M1o=o(" (CvT model)"),E1o=l(),Dp=a("li"),Zle=a("strong"),C1o=o("data2vec-audio"),w1o=o(" \u2014 "),DN=a("a"),A1o=o("Data2VecAudioModel"),y1o=o(" (Data2VecAudio model)"),L1o=l(),Gp=a("li"),eie=a("strong"),x1o=o("data2vec-text"),$1o=o(" \u2014 "),GN=a("a"),k1o=o("Data2VecTextModel"),S1o=o(" (Data2VecText model)"),R1o=l(),Op=a("li"),oie=a("strong"),P1o=o("data2vec-vision"),B1o=o(" \u2014 "),ON=a("a"),I1o=o("Data2VecVisionModel"),N1o=o(" (Data2VecVision model)"),q1o=l(),Vp=a("li"),rie=a("strong"),j1o=o("deberta"),D1o=o(" \u2014 "),VN=a("a"),G1o=o("DebertaModel"),O1o=o(" (DeBERTa model)"),V1o=l(),Xp=a("li"),tie=a("strong"),X1o=o("deberta-v2"),z1o=o(" \u2014 "),XN=a("a"),W1o=o("DebertaV2Model"),Q1o=o(" (DeBERTa-v2 model)"),H1o=l(),zp=a("li"),aie=a("strong"),U1o=o("decision_transformer"),J1o=o(" \u2014 "),zN=a("a"),Y1o=o("DecisionTransformerModel"),K1o=o(" (Decision Transformer model)"),Z1o=l(),Wp=a("li"),nie=a("strong"),ebo=o("deit"),obo=o(" \u2014 "),WN=a("a"),rbo=o("DeiTModel"),tbo=o(" (DeiT model)"),abo=l(),Qp=a("li"),sie=a("strong"),nbo=o("detr"),sbo=o(" \u2014 "),QN=a("a"),lbo=o("DetrModel"),ibo=o(" (DETR model)"),dbo=l(),Hp=a("li"),lie=a("strong"),cbo=o("distilbert"),fbo=o(" \u2014 "),HN=a("a"),mbo=o("DistilBertModel"),gbo=o(" (DistilBERT model)"),hbo=l(),Up=a("li"),iie=a("strong"),pbo=o("dpr"),ubo=o(" \u2014 "),UN=a("a"),_bo=o("DPRQuestionEncoder"),bbo=o(" (DPR model)"),vbo=l(),Jp=a("li"),die=a("strong"),Fbo=o("dpt"),Tbo=o(" \u2014 "),JN=a("a"),Mbo=o("DPTModel"),Ebo=o(" (DPT model)"),Cbo=l(),Yp=a("li"),cie=a("strong"),wbo=o("electra"),Abo=o(" \u2014 "),YN=a("a"),ybo=o("ElectraModel"),Lbo=o(" (ELECTRA model)"),xbo=l(),Kp=a("li"),fie=a("strong"),$bo=o("flaubert"),kbo=o(" \u2014 "),KN=a("a"),Sbo=o("FlaubertModel"),Rbo=o(" (FlauBERT model)"),Pbo=l(),Zp=a("li"),mie=a("strong"),Bbo=o("flava"),Ibo=o(" \u2014 "),ZN=a("a"),Nbo=o("FlavaModel"),qbo=o(" (FLAVA model)"),jbo=l(),eu=a("li"),gie=a("strong"),Dbo=o("fnet"),Gbo=o(" \u2014 "),eq=a("a"),Obo=o("FNetModel"),Vbo=o(" (FNet model)"),Xbo=l(),ou=a("li"),hie=a("strong"),zbo=o("fsmt"),Wbo=o(" \u2014 "),oq=a("a"),Qbo=o("FSMTModel"),Hbo=o(" (FairSeq Machine-Translation model)"),Ubo=l(),Ds=a("li"),pie=a("strong"),Jbo=o("funnel"),Ybo=o(" \u2014 "),rq=a("a"),Kbo=o("FunnelModel"),Zbo=o(" or "),tq=a("a"),evo=o("FunnelBaseModel"),ovo=o(" (Funnel Transformer model)"),rvo=l(),ru=a("li"),uie=a("strong"),tvo=o("glpn"),avo=o(" \u2014 "),aq=a("a"),nvo=o("GLPNModel"),svo=o(" (GLPN model)"),lvo=l(),tu=a("li"),_ie=a("strong"),ivo=o("gpt2"),dvo=o(" \u2014 "),nq=a("a"),cvo=o("GPT2Model"),fvo=o(" (OpenAI GPT-2 model)"),mvo=l(),au=a("li"),bie=a("strong"),gvo=o("gpt_neo"),hvo=o(" \u2014 "),sq=a("a"),pvo=o("GPTNeoModel"),uvo=o(" (GPT Neo model)"),_vo=l(),nu=a("li"),vie=a("strong"),bvo=o("gpt_neox"),vvo=o(" \u2014 "),lq=a("a"),Fvo=o("GPTNeoXModel"),Tvo=o(" (GPT NeoX model)"),Mvo=l(),su=a("li"),Fie=a("strong"),Evo=o("gptj"),Cvo=o(" \u2014 "),iq=a("a"),wvo=o("GPTJModel"),Avo=o(" (GPT-J model)"),yvo=l(),lu=a("li"),Tie=a("strong"),Lvo=o("hubert"),xvo=o(" \u2014 "),dq=a("a"),$vo=o("HubertModel"),kvo=o(" (Hubert model)"),Svo=l(),iu=a("li"),Mie=a("strong"),Rvo=o("ibert"),Pvo=o(" \u2014 "),cq=a("a"),Bvo=o("IBertModel"),Ivo=o(" (I-BERT model)"),Nvo=l(),du=a("li"),Eie=a("strong"),qvo=o("imagegpt"),jvo=o(" \u2014 "),fq=a("a"),Dvo=o("ImageGPTModel"),Gvo=o(" (ImageGPT model)"),Ovo=l(),cu=a("li"),Cie=a("strong"),Vvo=o("layoutlm"),Xvo=o(" \u2014 "),mq=a("a"),zvo=o("LayoutLMModel"),Wvo=o(" (LayoutLM model)"),Qvo=l(),fu=a("li"),wie=a("strong"),Hvo=o("layoutlmv2"),Uvo=o(" \u2014 "),gq=a("a"),Jvo=o("LayoutLMv2Model"),Yvo=o(" (LayoutLMv2 model)"),Kvo=l(),mu=a("li"),Aie=a("strong"),Zvo=o("layoutlmv3"),eFo=o(" \u2014 "),hq=a("a"),oFo=o("LayoutLMv3Model"),rFo=o(" (LayoutLMv3 model)"),tFo=l(),gu=a("li"),yie=a("strong"),aFo=o("led"),nFo=o(" \u2014 "),pq=a("a"),sFo=o("LEDModel"),lFo=o(" (LED model)"),iFo=l(),hu=a("li"),Lie=a("strong"),dFo=o("levit"),cFo=o(" \u2014 "),uq=a("a"),fFo=o("LevitModel"),mFo=o(" (LeViT model)"),gFo=l(),pu=a("li"),xie=a("strong"),hFo=o("longformer"),pFo=o(" \u2014 "),_q=a("a"),uFo=o("LongformerModel"),_Fo=o(" (Longformer model)"),bFo=l(),uu=a("li"),$ie=a("strong"),vFo=o("luke"),FFo=o(" \u2014 "),bq=a("a"),TFo=o("LukeModel"),MFo=o(" (LUKE model)"),EFo=l(),_u=a("li"),kie=a("strong"),CFo=o("lxmert"),wFo=o(" \u2014 "),vq=a("a"),AFo=o("LxmertModel"),yFo=o(" (LXMERT model)"),LFo=l(),bu=a("li"),Sie=a("strong"),xFo=o("m2m_100"),$Fo=o(" \u2014 "),Fq=a("a"),kFo=o("M2M100Model"),SFo=o(" (M2M100 model)"),RFo=l(),vu=a("li"),Rie=a("strong"),PFo=o("marian"),BFo=o(" \u2014 "),Tq=a("a"),IFo=o("MarianModel"),NFo=o(" (Marian model)"),qFo=l(),Fu=a("li"),Pie=a("strong"),jFo=o("maskformer"),DFo=o(" \u2014 "),Mq=a("a"),GFo=o("MaskFormerModel"),OFo=o(" (MaskFormer model)"),VFo=l(),Tu=a("li"),Bie=a("strong"),XFo=o("mbart"),zFo=o(" \u2014 "),Eq=a("a"),WFo=o("MBartModel"),QFo=o(" (mBART model)"),HFo=l(),Mu=a("li"),Iie=a("strong"),UFo=o("mctct"),JFo=o(" \u2014 "),Cq=a("a"),YFo=o("MCTCTModel"),KFo=o(" (M-CTC-T model)"),ZFo=l(),Eu=a("li"),Nie=a("strong"),e6o=o("megatron-bert"),o6o=o(" \u2014 "),wq=a("a"),r6o=o("MegatronBertModel"),t6o=o(" (Megatron-BERT model)"),a6o=l(),Cu=a("li"),qie=a("strong"),n6o=o("mobilebert"),s6o=o(" \u2014 "),Aq=a("a"),l6o=o("MobileBertModel"),i6o=o(" (MobileBERT model)"),d6o=l(),wu=a("li"),jie=a("strong"),c6o=o("mpnet"),f6o=o(" \u2014 "),yq=a("a"),m6o=o("MPNetModel"),g6o=o(" (MPNet model)"),h6o=l(),Au=a("li"),Die=a("strong"),p6o=o("mt5"),u6o=o(" \u2014 "),Lq=a("a"),_6o=o("MT5Model"),b6o=o(" (MT5 model)"),v6o=l(),yu=a("li"),Gie=a("strong"),F6o=o("nystromformer"),T6o=o(" \u2014 "),xq=a("a"),M6o=o("NystromformerModel"),E6o=o(" (Nystr\xF6mformer model)"),C6o=l(),Lu=a("li"),Oie=a("strong"),w6o=o("openai-gpt"),A6o=o(" \u2014 "),$q=a("a"),y6o=o("OpenAIGPTModel"),L6o=o(" (OpenAI GPT model)"),x6o=l(),xu=a("li"),Vie=a("strong"),$6o=o("opt"),k6o=o(" \u2014 "),kq=a("a"),S6o=o("OPTModel"),R6o=o(" (OPT model)"),P6o=l(),$u=a("li"),Xie=a("strong"),B6o=o("pegasus"),I6o=o(" \u2014 "),Sq=a("a"),N6o=o("PegasusModel"),q6o=o(" (Pegasus model)"),j6o=l(),ku=a("li"),zie=a("strong"),D6o=o("perceiver"),G6o=o(" \u2014 "),Rq=a("a"),O6o=o("PerceiverModel"),V6o=o(" (Perceiver model)"),X6o=l(),Su=a("li"),Wie=a("strong"),z6o=o("plbart"),W6o=o(" \u2014 "),Pq=a("a"),Q6o=o("PLBartModel"),H6o=o(" (PLBart model)"),U6o=l(),Ru=a("li"),Qie=a("strong"),J6o=o("poolformer"),Y6o=o(" \u2014 "),Bq=a("a"),K6o=o("PoolFormerModel"),Z6o=o(" (PoolFormer model)"),eTo=l(),Pu=a("li"),Hie=a("strong"),oTo=o("prophetnet"),rTo=o(" \u2014 "),Iq=a("a"),tTo=o("ProphetNetModel"),aTo=o(" (ProphetNet model)"),nTo=l(),Bu=a("li"),Uie=a("strong"),sTo=o("qdqbert"),lTo=o(" \u2014 "),Nq=a("a"),iTo=o("QDQBertModel"),dTo=o(" (QDQBert model)"),cTo=l(),Iu=a("li"),Jie=a("strong"),fTo=o("reformer"),mTo=o(" \u2014 "),qq=a("a"),gTo=o("ReformerModel"),hTo=o(" (Reformer model)"),pTo=l(),Nu=a("li"),Yie=a("strong"),uTo=o("regnet"),_To=o(" \u2014 "),jq=a("a"),bTo=o("RegNetModel"),vTo=o(" (RegNet model)"),FTo=l(),qu=a("li"),Kie=a("strong"),TTo=o("rembert"),MTo=o(" \u2014 "),Dq=a("a"),ETo=o("RemBertModel"),CTo=o(" (RemBERT model)"),wTo=l(),ju=a("li"),Zie=a("strong"),ATo=o("resnet"),yTo=o(" \u2014 "),Gq=a("a"),LTo=o("ResNetModel"),xTo=o(" (ResNet model)"),$To=l(),Du=a("li"),ede=a("strong"),kTo=o("retribert"),STo=o(" \u2014 "),Oq=a("a"),RTo=o("RetriBertModel"),PTo=o(" (RetriBERT model)"),BTo=l(),Gu=a("li"),ode=a("strong"),ITo=o("roberta"),NTo=o(" \u2014 "),Vq=a("a"),qTo=o("RobertaModel"),jTo=o(" (RoBERTa model)"),DTo=l(),Ou=a("li"),rde=a("strong"),GTo=o("roformer"),OTo=o(" \u2014 "),Xq=a("a"),VTo=o("RoFormerModel"),XTo=o(" (RoFormer model)"),zTo=l(),Vu=a("li"),tde=a("strong"),WTo=o("segformer"),QTo=o(" \u2014 "),zq=a("a"),HTo=o("SegformerModel"),UTo=o(" (SegFormer model)"),JTo=l(),Xu=a("li"),ade=a("strong"),YTo=o("sew"),KTo=o(" \u2014 "),Wq=a("a"),ZTo=o("SEWModel"),e7o=o(" (SEW model)"),o7o=l(),zu=a("li"),nde=a("strong"),r7o=o("sew-d"),t7o=o(" \u2014 "),Qq=a("a"),a7o=o("SEWDModel"),n7o=o(" (SEW-D model)"),s7o=l(),Wu=a("li"),sde=a("strong"),l7o=o("speech_to_text"),i7o=o(" \u2014 "),Hq=a("a"),d7o=o("Speech2TextModel"),c7o=o(" (Speech2Text model)"),f7o=l(),Qu=a("li"),lde=a("strong"),m7o=o("splinter"),g7o=o(" \u2014 "),Uq=a("a"),h7o=o("SplinterModel"),p7o=o(" (Splinter model)"),u7o=l(),Hu=a("li"),ide=a("strong"),_7o=o("squeezebert"),b7o=o(" \u2014 "),Jq=a("a"),v7o=o("SqueezeBertModel"),F7o=o(" (SqueezeBERT model)"),T7o=l(),Uu=a("li"),dde=a("strong"),M7o=o("swin"),E7o=o(" \u2014 "),Yq=a("a"),C7o=o("SwinModel"),w7o=o(" (Swin Transformer model)"),A7o=l(),Ju=a("li"),cde=a("strong"),y7o=o("t5"),L7o=o(" \u2014 "),Kq=a("a"),x7o=o("T5Model"),$7o=o(" (T5 model)"),k7o=l(),Yu=a("li"),fde=a("strong"),S7o=o("tapas"),R7o=o(" \u2014 "),Zq=a("a"),P7o=o("TapasModel"),B7o=o(" (TAPAS model)"),I7o=l(),Ku=a("li"),mde=a("strong"),N7o=o("trajectory_transformer"),q7o=o(" \u2014 "),ej=a("a"),j7o=o("TrajectoryTransformerModel"),D7o=o(" (Trajectory Transformer model)"),G7o=l(),Zu=a("li"),gde=a("strong"),O7o=o("transfo-xl"),V7o=o(" \u2014 "),oj=a("a"),X7o=o("TransfoXLModel"),z7o=o(" (Transformer-XL model)"),W7o=l(),e_=a("li"),hde=a("strong"),Q7o=o("unispeech"),H7o=o(" \u2014 "),rj=a("a"),U7o=o("UniSpeechModel"),J7o=o(" (UniSpeech model)"),Y7o=l(),o_=a("li"),pde=a("strong"),K7o=o("unispeech-sat"),Z7o=o(" \u2014 "),tj=a("a"),e8o=o("UniSpeechSatModel"),o8o=o(" (UniSpeechSat model)"),r8o=l(),r_=a("li"),ude=a("strong"),t8o=o("van"),a8o=o(" \u2014 "),aj=a("a"),n8o=o("VanModel"),s8o=o(" (VAN model)"),l8o=l(),t_=a("li"),_de=a("strong"),i8o=o("vilt"),d8o=o(" \u2014 "),nj=a("a"),c8o=o("ViltModel"),f8o=o(" (ViLT model)"),m8o=l(),a_=a("li"),bde=a("strong"),g8o=o("vision-text-dual-encoder"),h8o=o(" \u2014 "),sj=a("a"),p8o=o("VisionTextDualEncoderModel"),u8o=o(" (VisionTextDualEncoder model)"),_8o=l(),n_=a("li"),vde=a("strong"),b8o=o("visual_bert"),v8o=o(" \u2014 "),lj=a("a"),F8o=o("VisualBertModel"),T8o=o(" (VisualBERT model)"),M8o=l(),s_=a("li"),Fde=a("strong"),E8o=o("vit"),C8o=o(" \u2014 "),ij=a("a"),w8o=o("ViTModel"),A8o=o(" (ViT model)"),y8o=l(),l_=a("li"),Tde=a("strong"),L8o=o("vit_mae"),x8o=o(" \u2014 "),dj=a("a"),$8o=o("ViTMAEModel"),k8o=o(" (ViTMAE model)"),S8o=l(),i_=a("li"),Mde=a("strong"),R8o=o("wav2vec2"),P8o=o(" \u2014 "),cj=a("a"),B8o=o("Wav2Vec2Model"),I8o=o(" (Wav2Vec2 model)"),N8o=l(),d_=a("li"),Ede=a("strong"),q8o=o("wav2vec2-conformer"),j8o=o(" \u2014 "),fj=a("a"),D8o=o("Wav2Vec2ConformerModel"),G8o=o(" (Wav2Vec2-Conformer model)"),O8o=l(),c_=a("li"),Cde=a("strong"),V8o=o("wavlm"),X8o=o(" \u2014 "),mj=a("a"),z8o=o("WavLMModel"),W8o=o(" (WavLM model)"),Q8o=l(),f_=a("li"),wde=a("strong"),H8o=o("xglm"),U8o=o(" \u2014 "),gj=a("a"),J8o=o("XGLMModel"),Y8o=o(" (XGLM model)"),K8o=l(),m_=a("li"),Ade=a("strong"),Z8o=o("xlm"),eMo=o(" \u2014 "),hj=a("a"),oMo=o("XLMModel"),rMo=o(" (XLM model)"),tMo=l(),g_=a("li"),yde=a("strong"),aMo=o("xlm-prophetnet"),nMo=o(" \u2014 "),pj=a("a"),sMo=o("XLMProphetNetModel"),lMo=o(" (XLM-ProphetNet model)"),iMo=l(),h_=a("li"),Lde=a("strong"),dMo=o("xlm-roberta"),cMo=o(" \u2014 "),uj=a("a"),fMo=o("XLMRobertaModel"),mMo=o(" (XLM-RoBERTa model)"),gMo=l(),p_=a("li"),xde=a("strong"),hMo=o("xlm-roberta-xl"),pMo=o(" \u2014 "),_j=a("a"),uMo=o("XLMRobertaXLModel"),_Mo=o(" (XLM-RoBERTa-XL model)"),bMo=l(),u_=a("li"),$de=a("strong"),vMo=o("xlnet"),FMo=o(" \u2014 "),bj=a("a"),TMo=o("XLNetModel"),MMo=o(" (XLNet model)"),EMo=l(),__=a("li"),kde=a("strong"),CMo=o("yolos"),wMo=o(" \u2014 "),vj=a("a"),AMo=o("YolosModel"),yMo=o(" (YOLOS model)"),LMo=l(),b_=a("li"),Sde=a("strong"),xMo=o("yoso"),$Mo=o(" \u2014 "),Fj=a("a"),kMo=o("YosoModel"),SMo=o(" (YOSO model)"),RMo=l(),v_=a("p"),PMo=o("The model is set in evaluation mode by default using "),Rde=a("code"),BMo=o("model.eval()"),IMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),NMo=o("model.train()"),qMo=l(),F(F_.$$.fragment),cDe=l(),Ii=a("h2"),T_=a("a"),Bde=a("span"),F(IA.$$.fragment),jMo=l(),Ide=a("span"),DMo=o("AutoModelForPreTraining"),fDe=l(),$o=a("div"),F(NA.$$.fragment),GMo=l(),Ni=a("p"),OMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tj=a("a"),VMo=o("from_pretrained()"),XMo=o(" class method or the "),Mj=a("a"),zMo=o("from_config()"),WMo=o(` class
method.`),QMo=l(),qA=a("p"),HMo=o("This class cannot be instantiated directly using "),Nde=a("code"),UMo=o("__init__()"),JMo=o(" (throws an error)."),YMo=l(),st=a("div"),F(jA.$$.fragment),KMo=l(),qde=a("p"),ZMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e4o=l(),qi=a("p"),o4o=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),r4o=o("not"),t4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=a("a"),a4o=o("from_pretrained()"),n4o=o(" to load the model weights."),s4o=l(),F(M_.$$.fragment),l4o=l(),Ye=a("div"),F(DA.$$.fragment),i4o=l(),Dde=a("p"),d4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c4o=l(),Ra=a("p"),f4o=o("The model class to instantiate is selected based on the "),Gde=a("code"),m4o=o("model_type"),g4o=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),h4o=o("pretrained_model_name_or_path"),p4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),u4o=o("pretrained_model_name_or_path"),_4o=o(":"),b4o=l(),G=a("ul"),E_=a("li"),Xde=a("strong"),v4o=o("albert"),F4o=o(" \u2014 "),Cj=a("a"),T4o=o("AlbertForPreTraining"),M4o=o(" (ALBERT model)"),E4o=l(),C_=a("li"),zde=a("strong"),C4o=o("bart"),w4o=o(" \u2014 "),wj=a("a"),A4o=o("BartForConditionalGeneration"),y4o=o(" (BART model)"),L4o=l(),w_=a("li"),Wde=a("strong"),x4o=o("bert"),$4o=o(" \u2014 "),Aj=a("a"),k4o=o("BertForPreTraining"),S4o=o(" (BERT model)"),R4o=l(),A_=a("li"),Qde=a("strong"),P4o=o("big_bird"),B4o=o(" \u2014 "),yj=a("a"),I4o=o("BigBirdForPreTraining"),N4o=o(" (BigBird model)"),q4o=l(),y_=a("li"),Hde=a("strong"),j4o=o("camembert"),D4o=o(" \u2014 "),Lj=a("a"),G4o=o("CamembertForMaskedLM"),O4o=o(" (CamemBERT model)"),V4o=l(),L_=a("li"),Ude=a("strong"),X4o=o("ctrl"),z4o=o(" \u2014 "),xj=a("a"),W4o=o("CTRLLMHeadModel"),Q4o=o(" (CTRL model)"),H4o=l(),x_=a("li"),Jde=a("strong"),U4o=o("data2vec-text"),J4o=o(" \u2014 "),$j=a("a"),Y4o=o("Data2VecTextForMaskedLM"),K4o=o(" (Data2VecText model)"),Z4o=l(),$_=a("li"),Yde=a("strong"),eEo=o("deberta"),oEo=o(" \u2014 "),kj=a("a"),rEo=o("DebertaForMaskedLM"),tEo=o(" (DeBERTa model)"),aEo=l(),k_=a("li"),Kde=a("strong"),nEo=o("deberta-v2"),sEo=o(" \u2014 "),Sj=a("a"),lEo=o("DebertaV2ForMaskedLM"),iEo=o(" (DeBERTa-v2 model)"),dEo=l(),S_=a("li"),Zde=a("strong"),cEo=o("distilbert"),fEo=o(" \u2014 "),Rj=a("a"),mEo=o("DistilBertForMaskedLM"),gEo=o(" (DistilBERT model)"),hEo=l(),R_=a("li"),ece=a("strong"),pEo=o("electra"),uEo=o(" \u2014 "),Pj=a("a"),_Eo=o("ElectraForPreTraining"),bEo=o(" (ELECTRA model)"),vEo=l(),P_=a("li"),oce=a("strong"),FEo=o("flaubert"),TEo=o(" \u2014 "),Bj=a("a"),MEo=o("FlaubertWithLMHeadModel"),EEo=o(" (FlauBERT model)"),CEo=l(),B_=a("li"),rce=a("strong"),wEo=o("flava"),AEo=o(" \u2014 "),Ij=a("a"),yEo=o("FlavaForPreTraining"),LEo=o(" (FLAVA model)"),xEo=l(),I_=a("li"),tce=a("strong"),$Eo=o("fnet"),kEo=o(" \u2014 "),Nj=a("a"),SEo=o("FNetForPreTraining"),REo=o(" (FNet model)"),PEo=l(),N_=a("li"),ace=a("strong"),BEo=o("fsmt"),IEo=o(" \u2014 "),qj=a("a"),NEo=o("FSMTForConditionalGeneration"),qEo=o(" (FairSeq Machine-Translation model)"),jEo=l(),q_=a("li"),nce=a("strong"),DEo=o("funnel"),GEo=o(" \u2014 "),jj=a("a"),OEo=o("FunnelForPreTraining"),VEo=o(" (Funnel Transformer model)"),XEo=l(),j_=a("li"),sce=a("strong"),zEo=o("gpt2"),WEo=o(" \u2014 "),Dj=a("a"),QEo=o("GPT2LMHeadModel"),HEo=o(" (OpenAI GPT-2 model)"),UEo=l(),D_=a("li"),lce=a("strong"),JEo=o("ibert"),YEo=o(" \u2014 "),Gj=a("a"),KEo=o("IBertForMaskedLM"),ZEo=o(" (I-BERT model)"),eCo=l(),G_=a("li"),ice=a("strong"),oCo=o("layoutlm"),rCo=o(" \u2014 "),Oj=a("a"),tCo=o("LayoutLMForMaskedLM"),aCo=o(" (LayoutLM model)"),nCo=l(),O_=a("li"),dce=a("strong"),sCo=o("longformer"),lCo=o(" \u2014 "),Vj=a("a"),iCo=o("LongformerForMaskedLM"),dCo=o(" (Longformer model)"),cCo=l(),V_=a("li"),cce=a("strong"),fCo=o("lxmert"),mCo=o(" \u2014 "),Xj=a("a"),gCo=o("LxmertForPreTraining"),hCo=o(" (LXMERT model)"),pCo=l(),X_=a("li"),fce=a("strong"),uCo=o("megatron-bert"),_Co=o(" \u2014 "),zj=a("a"),bCo=o("MegatronBertForPreTraining"),vCo=o(" (Megatron-BERT model)"),FCo=l(),z_=a("li"),mce=a("strong"),TCo=o("mobilebert"),MCo=o(" \u2014 "),Wj=a("a"),ECo=o("MobileBertForPreTraining"),CCo=o(" (MobileBERT model)"),wCo=l(),W_=a("li"),gce=a("strong"),ACo=o("mpnet"),yCo=o(" \u2014 "),Qj=a("a"),LCo=o("MPNetForMaskedLM"),xCo=o(" (MPNet model)"),$Co=l(),Q_=a("li"),hce=a("strong"),kCo=o("openai-gpt"),SCo=o(" \u2014 "),Hj=a("a"),RCo=o("OpenAIGPTLMHeadModel"),PCo=o(" (OpenAI GPT model)"),BCo=l(),H_=a("li"),pce=a("strong"),ICo=o("retribert"),NCo=o(" \u2014 "),Uj=a("a"),qCo=o("RetriBertModel"),jCo=o(" (RetriBERT model)"),DCo=l(),U_=a("li"),uce=a("strong"),GCo=o("roberta"),OCo=o(" \u2014 "),Jj=a("a"),VCo=o("RobertaForMaskedLM"),XCo=o(" (RoBERTa model)"),zCo=l(),J_=a("li"),_ce=a("strong"),WCo=o("splinter"),QCo=o(" \u2014 "),Yj=a("a"),HCo=o("SplinterForPreTraining"),UCo=o(" (Splinter model)"),JCo=l(),Y_=a("li"),bce=a("strong"),YCo=o("squeezebert"),KCo=o(" \u2014 "),Kj=a("a"),ZCo=o("SqueezeBertForMaskedLM"),e5o=o(" (SqueezeBERT model)"),o5o=l(),K_=a("li"),vce=a("strong"),r5o=o("t5"),t5o=o(" \u2014 "),Zj=a("a"),a5o=o("T5ForConditionalGeneration"),n5o=o(" (T5 model)"),s5o=l(),Z_=a("li"),Fce=a("strong"),l5o=o("tapas"),i5o=o(" \u2014 "),eD=a("a"),d5o=o("TapasForMaskedLM"),c5o=o(" (TAPAS model)"),f5o=l(),e2=a("li"),Tce=a("strong"),m5o=o("transfo-xl"),g5o=o(" \u2014 "),oD=a("a"),h5o=o("TransfoXLLMHeadModel"),p5o=o(" (Transformer-XL model)"),u5o=l(),o2=a("li"),Mce=a("strong"),_5o=o("unispeech"),b5o=o(" \u2014 "),rD=a("a"),v5o=o("UniSpeechForPreTraining"),F5o=o(" (UniSpeech model)"),T5o=l(),r2=a("li"),Ece=a("strong"),M5o=o("unispeech-sat"),E5o=o(" \u2014 "),tD=a("a"),C5o=o("UniSpeechSatForPreTraining"),w5o=o(" (UniSpeechSat model)"),A5o=l(),t2=a("li"),Cce=a("strong"),y5o=o("visual_bert"),L5o=o(" \u2014 "),aD=a("a"),x5o=o("VisualBertForPreTraining"),$5o=o(" (VisualBERT model)"),k5o=l(),a2=a("li"),wce=a("strong"),S5o=o("vit_mae"),R5o=o(" \u2014 "),nD=a("a"),P5o=o("ViTMAEForPreTraining"),B5o=o(" (ViTMAE model)"),I5o=l(),n2=a("li"),Ace=a("strong"),N5o=o("wav2vec2"),q5o=o(" \u2014 "),sD=a("a"),j5o=o("Wav2Vec2ForPreTraining"),D5o=o(" (Wav2Vec2 model)"),G5o=l(),s2=a("li"),yce=a("strong"),O5o=o("wav2vec2-conformer"),V5o=o(" \u2014 "),lD=a("a"),X5o=o("Wav2Vec2ConformerForPreTraining"),z5o=o(" (Wav2Vec2-Conformer model)"),W5o=l(),l2=a("li"),Lce=a("strong"),Q5o=o("xlm"),H5o=o(" \u2014 "),iD=a("a"),U5o=o("XLMWithLMHeadModel"),J5o=o(" (XLM model)"),Y5o=l(),i2=a("li"),xce=a("strong"),K5o=o("xlm-roberta"),Z5o=o(" \u2014 "),dD=a("a"),e3o=o("XLMRobertaForMaskedLM"),o3o=o(" (XLM-RoBERTa model)"),r3o=l(),d2=a("li"),$ce=a("strong"),t3o=o("xlm-roberta-xl"),a3o=o(" \u2014 "),cD=a("a"),n3o=o("XLMRobertaXLForMaskedLM"),s3o=o(" (XLM-RoBERTa-XL model)"),l3o=l(),c2=a("li"),kce=a("strong"),i3o=o("xlnet"),d3o=o(" \u2014 "),fD=a("a"),c3o=o("XLNetLMHeadModel"),f3o=o(" (XLNet model)"),m3o=l(),f2=a("p"),g3o=o("The model is set in evaluation mode by default using "),Sce=a("code"),h3o=o("model.eval()"),p3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),u3o=o("model.train()"),_3o=l(),F(m2.$$.fragment),mDe=l(),ji=a("h2"),g2=a("a"),Pce=a("span"),F(GA.$$.fragment),b3o=l(),Bce=a("span"),v3o=o("AutoModelForCausalLM"),gDe=l(),ko=a("div"),F(OA.$$.fragment),F3o=l(),Di=a("p"),T3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mD=a("a"),M3o=o("from_pretrained()"),E3o=o(" class method or the "),gD=a("a"),C3o=o("from_config()"),w3o=o(` class
method.`),A3o=l(),VA=a("p"),y3o=o("This class cannot be instantiated directly using "),Ice=a("code"),L3o=o("__init__()"),x3o=o(" (throws an error)."),$3o=l(),lt=a("div"),F(XA.$$.fragment),k3o=l(),Nce=a("p"),S3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R3o=l(),Gi=a("p"),P3o=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),B3o=o("not"),I3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=a("a"),N3o=o("from_pretrained()"),q3o=o(" to load the model weights."),j3o=l(),F(h2.$$.fragment),D3o=l(),Ke=a("div"),F(zA.$$.fragment),G3o=l(),jce=a("p"),O3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V3o=l(),Pa=a("p"),X3o=o("The model class to instantiate is selected based on the "),Dce=a("code"),z3o=o("model_type"),W3o=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),Q3o=o("pretrained_model_name_or_path"),H3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),U3o=o("pretrained_model_name_or_path"),J3o=o(":"),Y3o=l(),z=a("ul"),p2=a("li"),Vce=a("strong"),K3o=o("bart"),Z3o=o(" \u2014 "),pD=a("a"),ewo=o("BartForCausalLM"),owo=o(" (BART model)"),rwo=l(),u2=a("li"),Xce=a("strong"),two=o("bert"),awo=o(" \u2014 "),uD=a("a"),nwo=o("BertLMHeadModel"),swo=o(" (BERT model)"),lwo=l(),_2=a("li"),zce=a("strong"),iwo=o("bert-generation"),dwo=o(" \u2014 "),_D=a("a"),cwo=o("BertGenerationDecoder"),fwo=o(" (Bert Generation model)"),mwo=l(),b2=a("li"),Wce=a("strong"),gwo=o("big_bird"),hwo=o(" \u2014 "),bD=a("a"),pwo=o("BigBirdForCausalLM"),uwo=o(" (BigBird model)"),_wo=l(),v2=a("li"),Qce=a("strong"),bwo=o("bigbird_pegasus"),vwo=o(" \u2014 "),vD=a("a"),Fwo=o("BigBirdPegasusForCausalLM"),Two=o(" (BigBird-Pegasus model)"),Mwo=l(),F2=a("li"),Hce=a("strong"),Ewo=o("blenderbot"),Cwo=o(" \u2014 "),FD=a("a"),wwo=o("BlenderbotForCausalLM"),Awo=o(" (Blenderbot model)"),ywo=l(),T2=a("li"),Uce=a("strong"),Lwo=o("blenderbot-small"),xwo=o(" \u2014 "),TD=a("a"),$wo=o("BlenderbotSmallForCausalLM"),kwo=o(" (BlenderbotSmall model)"),Swo=l(),M2=a("li"),Jce=a("strong"),Rwo=o("camembert"),Pwo=o(" \u2014 "),MD=a("a"),Bwo=o("CamembertForCausalLM"),Iwo=o(" (CamemBERT model)"),Nwo=l(),E2=a("li"),Yce=a("strong"),qwo=o("ctrl"),jwo=o(" \u2014 "),ED=a("a"),Dwo=o("CTRLLMHeadModel"),Gwo=o(" (CTRL model)"),Owo=l(),C2=a("li"),Kce=a("strong"),Vwo=o("data2vec-text"),Xwo=o(" \u2014 "),CD=a("a"),zwo=o("Data2VecTextForCausalLM"),Wwo=o(" (Data2VecText model)"),Qwo=l(),w2=a("li"),Zce=a("strong"),Hwo=o("electra"),Uwo=o(" \u2014 "),wD=a("a"),Jwo=o("ElectraForCausalLM"),Ywo=o(" (ELECTRA model)"),Kwo=l(),A2=a("li"),efe=a("strong"),Zwo=o("gpt2"),e0o=o(" \u2014 "),AD=a("a"),o0o=o("GPT2LMHeadModel"),r0o=o(" (OpenAI GPT-2 model)"),t0o=l(),y2=a("li"),ofe=a("strong"),a0o=o("gpt_neo"),n0o=o(" \u2014 "),yD=a("a"),s0o=o("GPTNeoForCausalLM"),l0o=o(" (GPT Neo model)"),i0o=l(),L2=a("li"),rfe=a("strong"),d0o=o("gpt_neox"),c0o=o(" \u2014 "),LD=a("a"),f0o=o("GPTNeoXForCausalLM"),m0o=o(" (GPT NeoX model)"),g0o=l(),x2=a("li"),tfe=a("strong"),h0o=o("gptj"),p0o=o(" \u2014 "),xD=a("a"),u0o=o("GPTJForCausalLM"),_0o=o(" (GPT-J model)"),b0o=l(),$2=a("li"),afe=a("strong"),v0o=o("marian"),F0o=o(" \u2014 "),$D=a("a"),T0o=o("MarianForCausalLM"),M0o=o(" (Marian model)"),E0o=l(),k2=a("li"),nfe=a("strong"),C0o=o("mbart"),w0o=o(" \u2014 "),kD=a("a"),A0o=o("MBartForCausalLM"),y0o=o(" (mBART model)"),L0o=l(),S2=a("li"),sfe=a("strong"),x0o=o("megatron-bert"),$0o=o(" \u2014 "),SD=a("a"),k0o=o("MegatronBertForCausalLM"),S0o=o(" (Megatron-BERT model)"),R0o=l(),R2=a("li"),lfe=a("strong"),P0o=o("openai-gpt"),B0o=o(" \u2014 "),RD=a("a"),I0o=o("OpenAIGPTLMHeadModel"),N0o=o(" (OpenAI GPT model)"),q0o=l(),P2=a("li"),ife=a("strong"),j0o=o("opt"),D0o=o(" \u2014 "),PD=a("a"),G0o=o("OPTForCausalLM"),O0o=o(" (OPT model)"),V0o=l(),B2=a("li"),dfe=a("strong"),X0o=o("pegasus"),z0o=o(" \u2014 "),BD=a("a"),W0o=o("PegasusForCausalLM"),Q0o=o(" (Pegasus model)"),H0o=l(),I2=a("li"),cfe=a("strong"),U0o=o("plbart"),J0o=o(" \u2014 "),ID=a("a"),Y0o=o("PLBartForCausalLM"),K0o=o(" (PLBart model)"),Z0o=l(),N2=a("li"),ffe=a("strong"),eAo=o("prophetnet"),oAo=o(" \u2014 "),ND=a("a"),rAo=o("ProphetNetForCausalLM"),tAo=o(" (ProphetNet model)"),aAo=l(),q2=a("li"),mfe=a("strong"),nAo=o("qdqbert"),sAo=o(" \u2014 "),qD=a("a"),lAo=o("QDQBertLMHeadModel"),iAo=o(" (QDQBert model)"),dAo=l(),j2=a("li"),gfe=a("strong"),cAo=o("reformer"),fAo=o(" \u2014 "),jD=a("a"),mAo=o("ReformerModelWithLMHead"),gAo=o(" (Reformer model)"),hAo=l(),D2=a("li"),hfe=a("strong"),pAo=o("rembert"),uAo=o(" \u2014 "),DD=a("a"),_Ao=o("RemBertForCausalLM"),bAo=o(" (RemBERT model)"),vAo=l(),G2=a("li"),pfe=a("strong"),FAo=o("roberta"),TAo=o(" \u2014 "),GD=a("a"),MAo=o("RobertaForCausalLM"),EAo=o(" (RoBERTa model)"),CAo=l(),O2=a("li"),ufe=a("strong"),wAo=o("roformer"),AAo=o(" \u2014 "),OD=a("a"),yAo=o("RoFormerForCausalLM"),LAo=o(" (RoFormer model)"),xAo=l(),V2=a("li"),_fe=a("strong"),$Ao=o("speech_to_text_2"),kAo=o(" \u2014 "),VD=a("a"),SAo=o("Speech2Text2ForCausalLM"),RAo=o(" (Speech2Text2 model)"),PAo=l(),X2=a("li"),bfe=a("strong"),BAo=o("transfo-xl"),IAo=o(" \u2014 "),XD=a("a"),NAo=o("TransfoXLLMHeadModel"),qAo=o(" (Transformer-XL model)"),jAo=l(),z2=a("li"),vfe=a("strong"),DAo=o("trocr"),GAo=o(" \u2014 "),zD=a("a"),OAo=o("TrOCRForCausalLM"),VAo=o(" (TrOCR model)"),XAo=l(),W2=a("li"),Ffe=a("strong"),zAo=o("xglm"),WAo=o(" \u2014 "),WD=a("a"),QAo=o("XGLMForCausalLM"),HAo=o(" (XGLM model)"),UAo=l(),Q2=a("li"),Tfe=a("strong"),JAo=o("xlm"),YAo=o(" \u2014 "),QD=a("a"),KAo=o("XLMWithLMHeadModel"),ZAo=o(" (XLM model)"),eyo=l(),H2=a("li"),Mfe=a("strong"),oyo=o("xlm-prophetnet"),ryo=o(" \u2014 "),HD=a("a"),tyo=o("XLMProphetNetForCausalLM"),ayo=o(" (XLM-ProphetNet model)"),nyo=l(),U2=a("li"),Efe=a("strong"),syo=o("xlm-roberta"),lyo=o(" \u2014 "),UD=a("a"),iyo=o("XLMRobertaForCausalLM"),dyo=o(" (XLM-RoBERTa model)"),cyo=l(),J2=a("li"),Cfe=a("strong"),fyo=o("xlm-roberta-xl"),myo=o(" \u2014 "),JD=a("a"),gyo=o("XLMRobertaXLForCausalLM"),hyo=o(" (XLM-RoBERTa-XL model)"),pyo=l(),Y2=a("li"),wfe=a("strong"),uyo=o("xlnet"),_yo=o(" \u2014 "),YD=a("a"),byo=o("XLNetLMHeadModel"),vyo=o(" (XLNet model)"),Fyo=l(),K2=a("p"),Tyo=o("The model is set in evaluation mode by default using "),Afe=a("code"),Myo=o("model.eval()"),Eyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),Cyo=o("model.train()"),wyo=l(),F(Z2.$$.fragment),hDe=l(),Oi=a("h2"),e1=a("a"),Lfe=a("span"),F(WA.$$.fragment),Ayo=l(),xfe=a("span"),yyo=o("AutoModelForMaskedLM"),pDe=l(),So=a("div"),F(QA.$$.fragment),Lyo=l(),Vi=a("p"),xyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KD=a("a"),$yo=o("from_pretrained()"),kyo=o(" class method or the "),ZD=a("a"),Syo=o("from_config()"),Ryo=o(` class
method.`),Pyo=l(),HA=a("p"),Byo=o("This class cannot be instantiated directly using "),$fe=a("code"),Iyo=o("__init__()"),Nyo=o(" (throws an error)."),qyo=l(),it=a("div"),F(UA.$$.fragment),jyo=l(),kfe=a("p"),Dyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gyo=l(),Xi=a("p"),Oyo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),Vyo=o("not"),Xyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),zyo=o("from_pretrained()"),Wyo=o(" to load the model weights."),Qyo=l(),F(o1.$$.fragment),Hyo=l(),Ze=a("div"),F(JA.$$.fragment),Uyo=l(),Rfe=a("p"),Jyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yyo=l(),Ba=a("p"),Kyo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),Zyo=o("model_type"),eLo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),oLo=o("pretrained_model_name_or_path"),rLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),tLo=o("pretrained_model_name_or_path"),aLo=o(":"),nLo=l(),W=a("ul"),r1=a("li"),Nfe=a("strong"),sLo=o("albert"),lLo=o(" \u2014 "),oG=a("a"),iLo=o("AlbertForMaskedLM"),dLo=o(" (ALBERT model)"),cLo=l(),t1=a("li"),qfe=a("strong"),fLo=o("bart"),mLo=o(" \u2014 "),rG=a("a"),gLo=o("BartForConditionalGeneration"),hLo=o(" (BART model)"),pLo=l(),a1=a("li"),jfe=a("strong"),uLo=o("bert"),_Lo=o(" \u2014 "),tG=a("a"),bLo=o("BertForMaskedLM"),vLo=o(" (BERT model)"),FLo=l(),n1=a("li"),Dfe=a("strong"),TLo=o("big_bird"),MLo=o(" \u2014 "),aG=a("a"),ELo=o("BigBirdForMaskedLM"),CLo=o(" (BigBird model)"),wLo=l(),s1=a("li"),Gfe=a("strong"),ALo=o("camembert"),yLo=o(" \u2014 "),nG=a("a"),LLo=o("CamembertForMaskedLM"),xLo=o(" (CamemBERT model)"),$Lo=l(),l1=a("li"),Ofe=a("strong"),kLo=o("convbert"),SLo=o(" \u2014 "),sG=a("a"),RLo=o("ConvBertForMaskedLM"),PLo=o(" (ConvBERT model)"),BLo=l(),i1=a("li"),Vfe=a("strong"),ILo=o("data2vec-text"),NLo=o(" \u2014 "),lG=a("a"),qLo=o("Data2VecTextForMaskedLM"),jLo=o(" (Data2VecText model)"),DLo=l(),d1=a("li"),Xfe=a("strong"),GLo=o("deberta"),OLo=o(" \u2014 "),iG=a("a"),VLo=o("DebertaForMaskedLM"),XLo=o(" (DeBERTa model)"),zLo=l(),c1=a("li"),zfe=a("strong"),WLo=o("deberta-v2"),QLo=o(" \u2014 "),dG=a("a"),HLo=o("DebertaV2ForMaskedLM"),ULo=o(" (DeBERTa-v2 model)"),JLo=l(),f1=a("li"),Wfe=a("strong"),YLo=o("distilbert"),KLo=o(" \u2014 "),cG=a("a"),ZLo=o("DistilBertForMaskedLM"),e9o=o(" (DistilBERT model)"),o9o=l(),m1=a("li"),Qfe=a("strong"),r9o=o("electra"),t9o=o(" \u2014 "),fG=a("a"),a9o=o("ElectraForMaskedLM"),n9o=o(" (ELECTRA model)"),s9o=l(),g1=a("li"),Hfe=a("strong"),l9o=o("flaubert"),i9o=o(" \u2014 "),mG=a("a"),d9o=o("FlaubertWithLMHeadModel"),c9o=o(" (FlauBERT model)"),f9o=l(),h1=a("li"),Ufe=a("strong"),m9o=o("fnet"),g9o=o(" \u2014 "),gG=a("a"),h9o=o("FNetForMaskedLM"),p9o=o(" (FNet model)"),u9o=l(),p1=a("li"),Jfe=a("strong"),_9o=o("funnel"),b9o=o(" \u2014 "),hG=a("a"),v9o=o("FunnelForMaskedLM"),F9o=o(" (Funnel Transformer model)"),T9o=l(),u1=a("li"),Yfe=a("strong"),M9o=o("ibert"),E9o=o(" \u2014 "),pG=a("a"),C9o=o("IBertForMaskedLM"),w9o=o(" (I-BERT model)"),A9o=l(),_1=a("li"),Kfe=a("strong"),y9o=o("layoutlm"),L9o=o(" \u2014 "),uG=a("a"),x9o=o("LayoutLMForMaskedLM"),$9o=o(" (LayoutLM model)"),k9o=l(),b1=a("li"),Zfe=a("strong"),S9o=o("longformer"),R9o=o(" \u2014 "),_G=a("a"),P9o=o("LongformerForMaskedLM"),B9o=o(" (Longformer model)"),I9o=l(),v1=a("li"),eme=a("strong"),N9o=o("luke"),q9o=o(" \u2014 "),bG=a("a"),j9o=o("LukeForMaskedLM"),D9o=o(" (LUKE model)"),G9o=l(),F1=a("li"),ome=a("strong"),O9o=o("mbart"),V9o=o(" \u2014 "),vG=a("a"),X9o=o("MBartForConditionalGeneration"),z9o=o(" (mBART model)"),W9o=l(),T1=a("li"),rme=a("strong"),Q9o=o("megatron-bert"),H9o=o(" \u2014 "),FG=a("a"),U9o=o("MegatronBertForMaskedLM"),J9o=o(" (Megatron-BERT model)"),Y9o=l(),M1=a("li"),tme=a("strong"),K9o=o("mobilebert"),Z9o=o(" \u2014 "),TG=a("a"),exo=o("MobileBertForMaskedLM"),oxo=o(" (MobileBERT model)"),rxo=l(),E1=a("li"),ame=a("strong"),txo=o("mpnet"),axo=o(" \u2014 "),MG=a("a"),nxo=o("MPNetForMaskedLM"),sxo=o(" (MPNet model)"),lxo=l(),C1=a("li"),nme=a("strong"),ixo=o("nystromformer"),dxo=o(" \u2014 "),EG=a("a"),cxo=o("NystromformerForMaskedLM"),fxo=o(" (Nystr\xF6mformer model)"),mxo=l(),w1=a("li"),sme=a("strong"),gxo=o("perceiver"),hxo=o(" \u2014 "),CG=a("a"),pxo=o("PerceiverForMaskedLM"),uxo=o(" (Perceiver model)"),_xo=l(),A1=a("li"),lme=a("strong"),bxo=o("qdqbert"),vxo=o(" \u2014 "),wG=a("a"),Fxo=o("QDQBertForMaskedLM"),Txo=o(" (QDQBert model)"),Mxo=l(),y1=a("li"),ime=a("strong"),Exo=o("reformer"),Cxo=o(" \u2014 "),AG=a("a"),wxo=o("ReformerForMaskedLM"),Axo=o(" (Reformer model)"),yxo=l(),L1=a("li"),dme=a("strong"),Lxo=o("rembert"),xxo=o(" \u2014 "),yG=a("a"),$xo=o("RemBertForMaskedLM"),kxo=o(" (RemBERT model)"),Sxo=l(),x1=a("li"),cme=a("strong"),Rxo=o("roberta"),Pxo=o(" \u2014 "),LG=a("a"),Bxo=o("RobertaForMaskedLM"),Ixo=o(" (RoBERTa model)"),Nxo=l(),$1=a("li"),fme=a("strong"),qxo=o("roformer"),jxo=o(" \u2014 "),xG=a("a"),Dxo=o("RoFormerForMaskedLM"),Gxo=o(" (RoFormer model)"),Oxo=l(),k1=a("li"),mme=a("strong"),Vxo=o("squeezebert"),Xxo=o(" \u2014 "),$G=a("a"),zxo=o("SqueezeBertForMaskedLM"),Wxo=o(" (SqueezeBERT model)"),Qxo=l(),S1=a("li"),gme=a("strong"),Hxo=o("tapas"),Uxo=o(" \u2014 "),kG=a("a"),Jxo=o("TapasForMaskedLM"),Yxo=o(" (TAPAS model)"),Kxo=l(),R1=a("li"),hme=a("strong"),Zxo=o("wav2vec2"),e$o=o(" \u2014 "),pme=a("code"),o$o=o("Wav2Vec2ForMaskedLM"),r$o=o(" (Wav2Vec2 model)"),t$o=l(),P1=a("li"),ume=a("strong"),a$o=o("xlm"),n$o=o(" \u2014 "),SG=a("a"),s$o=o("XLMWithLMHeadModel"),l$o=o(" (XLM model)"),i$o=l(),B1=a("li"),_me=a("strong"),d$o=o("xlm-roberta"),c$o=o(" \u2014 "),RG=a("a"),f$o=o("XLMRobertaForMaskedLM"),m$o=o(" (XLM-RoBERTa model)"),g$o=l(),I1=a("li"),bme=a("strong"),h$o=o("xlm-roberta-xl"),p$o=o(" \u2014 "),PG=a("a"),u$o=o("XLMRobertaXLForMaskedLM"),_$o=o(" (XLM-RoBERTa-XL model)"),b$o=l(),N1=a("li"),vme=a("strong"),v$o=o("yoso"),F$o=o(" \u2014 "),BG=a("a"),T$o=o("YosoForMaskedLM"),M$o=o(" (YOSO model)"),E$o=l(),q1=a("p"),C$o=o("The model is set in evaluation mode by default using "),Fme=a("code"),w$o=o("model.eval()"),A$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),y$o=o("model.train()"),L$o=l(),F(j1.$$.fragment),uDe=l(),zi=a("h2"),D1=a("a"),Mme=a("span"),F(YA.$$.fragment),x$o=l(),Eme=a("span"),$$o=o("AutoModelForSeq2SeqLM"),_De=l(),Ro=a("div"),F(KA.$$.fragment),k$o=l(),Wi=a("p"),S$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IG=a("a"),R$o=o("from_pretrained()"),P$o=o(" class method or the "),NG=a("a"),B$o=o("from_config()"),I$o=o(` class
method.`),N$o=l(),ZA=a("p"),q$o=o("This class cannot be instantiated directly using "),Cme=a("code"),j$o=o("__init__()"),D$o=o(" (throws an error)."),G$o=l(),dt=a("div"),F(ey.$$.fragment),O$o=l(),wme=a("p"),V$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X$o=l(),Qi=a("p"),z$o=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),W$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),H$o=o("from_pretrained()"),U$o=o(" to load the model weights."),J$o=l(),F(G1.$$.fragment),Y$o=l(),eo=a("div"),F(oy.$$.fragment),K$o=l(),yme=a("p"),Z$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eko=l(),Ia=a("p"),oko=o("The model class to instantiate is selected based on the "),Lme=a("code"),rko=o("model_type"),tko=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),sko=o("pretrained_model_name_or_path"),lko=o(":"),iko=l(),ue=a("ul"),O1=a("li"),kme=a("strong"),dko=o("bart"),cko=o(" \u2014 "),jG=a("a"),fko=o("BartForConditionalGeneration"),mko=o(" (BART model)"),gko=l(),V1=a("li"),Sme=a("strong"),hko=o("bigbird_pegasus"),pko=o(" \u2014 "),DG=a("a"),uko=o("BigBirdPegasusForConditionalGeneration"),_ko=o(" (BigBird-Pegasus model)"),bko=l(),X1=a("li"),Rme=a("strong"),vko=o("blenderbot"),Fko=o(" \u2014 "),GG=a("a"),Tko=o("BlenderbotForConditionalGeneration"),Mko=o(" (Blenderbot model)"),Eko=l(),z1=a("li"),Pme=a("strong"),Cko=o("blenderbot-small"),wko=o(" \u2014 "),OG=a("a"),Ako=o("BlenderbotSmallForConditionalGeneration"),yko=o(" (BlenderbotSmall model)"),Lko=l(),W1=a("li"),Bme=a("strong"),xko=o("encoder-decoder"),$ko=o(" \u2014 "),VG=a("a"),kko=o("EncoderDecoderModel"),Sko=o(" (Encoder decoder model)"),Rko=l(),Q1=a("li"),Ime=a("strong"),Pko=o("fsmt"),Bko=o(" \u2014 "),XG=a("a"),Iko=o("FSMTForConditionalGeneration"),Nko=o(" (FairSeq Machine-Translation model)"),qko=l(),H1=a("li"),Nme=a("strong"),jko=o("led"),Dko=o(" \u2014 "),zG=a("a"),Gko=o("LEDForConditionalGeneration"),Oko=o(" (LED model)"),Vko=l(),U1=a("li"),qme=a("strong"),Xko=o("m2m_100"),zko=o(" \u2014 "),WG=a("a"),Wko=o("M2M100ForConditionalGeneration"),Qko=o(" (M2M100 model)"),Hko=l(),J1=a("li"),jme=a("strong"),Uko=o("marian"),Jko=o(" \u2014 "),QG=a("a"),Yko=o("MarianMTModel"),Kko=o(" (Marian model)"),Zko=l(),Y1=a("li"),Dme=a("strong"),eSo=o("mbart"),oSo=o(" \u2014 "),HG=a("a"),rSo=o("MBartForConditionalGeneration"),tSo=o(" (mBART model)"),aSo=l(),K1=a("li"),Gme=a("strong"),nSo=o("mt5"),sSo=o(" \u2014 "),UG=a("a"),lSo=o("MT5ForConditionalGeneration"),iSo=o(" (MT5 model)"),dSo=l(),Z1=a("li"),Ome=a("strong"),cSo=o("pegasus"),fSo=o(" \u2014 "),JG=a("a"),mSo=o("PegasusForConditionalGeneration"),gSo=o(" (Pegasus model)"),hSo=l(),eb=a("li"),Vme=a("strong"),pSo=o("plbart"),uSo=o(" \u2014 "),YG=a("a"),_So=o("PLBartForConditionalGeneration"),bSo=o(" (PLBart model)"),vSo=l(),ob=a("li"),Xme=a("strong"),FSo=o("prophetnet"),TSo=o(" \u2014 "),KG=a("a"),MSo=o("ProphetNetForConditionalGeneration"),ESo=o(" (ProphetNet model)"),CSo=l(),rb=a("li"),zme=a("strong"),wSo=o("t5"),ASo=o(" \u2014 "),ZG=a("a"),ySo=o("T5ForConditionalGeneration"),LSo=o(" (T5 model)"),xSo=l(),tb=a("li"),Wme=a("strong"),$So=o("xlm-prophetnet"),kSo=o(" \u2014 "),eO=a("a"),SSo=o("XLMProphetNetForConditionalGeneration"),RSo=o(" (XLM-ProphetNet model)"),PSo=l(),ab=a("p"),BSo=o("The model is set in evaluation mode by default using "),Qme=a("code"),ISo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),qSo=o("model.train()"),jSo=l(),F(nb.$$.fragment),bDe=l(),Hi=a("h2"),sb=a("a"),Ume=a("span"),F(ry.$$.fragment),DSo=l(),Jme=a("span"),GSo=o("AutoModelForSequenceClassification"),vDe=l(),Po=a("div"),F(ty.$$.fragment),OSo=l(),Ui=a("p"),VSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oO=a("a"),XSo=o("from_pretrained()"),zSo=o(" class method or the "),rO=a("a"),WSo=o("from_config()"),QSo=o(` class
method.`),HSo=l(),ay=a("p"),USo=o("This class cannot be instantiated directly using "),Yme=a("code"),JSo=o("__init__()"),YSo=o(" (throws an error)."),KSo=l(),ct=a("div"),F(ny.$$.fragment),ZSo=l(),Kme=a("p"),eRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oRo=l(),Ji=a("p"),rRo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),tRo=o("not"),aRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),nRo=o("from_pretrained()"),sRo=o(" to load the model weights."),lRo=l(),F(lb.$$.fragment),iRo=l(),oo=a("div"),F(sy.$$.fragment),dRo=l(),ege=a("p"),cRo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fRo=l(),Na=a("p"),mRo=o("The model class to instantiate is selected based on the "),oge=a("code"),gRo=o("model_type"),hRo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),pRo=o("pretrained_model_name_or_path"),uRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(":"),vRo=l(),N=a("ul"),ib=a("li"),age=a("strong"),FRo=o("albert"),TRo=o(" \u2014 "),aO=a("a"),MRo=o("AlbertForSequenceClassification"),ERo=o(" (ALBERT model)"),CRo=l(),db=a("li"),nge=a("strong"),wRo=o("bart"),ARo=o(" \u2014 "),nO=a("a"),yRo=o("BartForSequenceClassification"),LRo=o(" (BART model)"),xRo=l(),cb=a("li"),sge=a("strong"),$Ro=o("bert"),kRo=o(" \u2014 "),sO=a("a"),SRo=o("BertForSequenceClassification"),RRo=o(" (BERT model)"),PRo=l(),fb=a("li"),lge=a("strong"),BRo=o("big_bird"),IRo=o(" \u2014 "),lO=a("a"),NRo=o("BigBirdForSequenceClassification"),qRo=o(" (BigBird model)"),jRo=l(),mb=a("li"),ige=a("strong"),DRo=o("bigbird_pegasus"),GRo=o(" \u2014 "),iO=a("a"),ORo=o("BigBirdPegasusForSequenceClassification"),VRo=o(" (BigBird-Pegasus model)"),XRo=l(),gb=a("li"),dge=a("strong"),zRo=o("camembert"),WRo=o(" \u2014 "),dO=a("a"),QRo=o("CamembertForSequenceClassification"),HRo=o(" (CamemBERT model)"),URo=l(),hb=a("li"),cge=a("strong"),JRo=o("canine"),YRo=o(" \u2014 "),cO=a("a"),KRo=o("CanineForSequenceClassification"),ZRo=o(" (CANINE model)"),ePo=l(),pb=a("li"),fge=a("strong"),oPo=o("convbert"),rPo=o(" \u2014 "),fO=a("a"),tPo=o("ConvBertForSequenceClassification"),aPo=o(" (ConvBERT model)"),nPo=l(),ub=a("li"),mge=a("strong"),sPo=o("ctrl"),lPo=o(" \u2014 "),mO=a("a"),iPo=o("CTRLForSequenceClassification"),dPo=o(" (CTRL model)"),cPo=l(),_b=a("li"),gge=a("strong"),fPo=o("data2vec-text"),mPo=o(" \u2014 "),gO=a("a"),gPo=o("Data2VecTextForSequenceClassification"),hPo=o(" (Data2VecText model)"),pPo=l(),bb=a("li"),hge=a("strong"),uPo=o("deberta"),_Po=o(" \u2014 "),hO=a("a"),bPo=o("DebertaForSequenceClassification"),vPo=o(" (DeBERTa model)"),FPo=l(),vb=a("li"),pge=a("strong"),TPo=o("deberta-v2"),MPo=o(" \u2014 "),pO=a("a"),EPo=o("DebertaV2ForSequenceClassification"),CPo=o(" (DeBERTa-v2 model)"),wPo=l(),Fb=a("li"),uge=a("strong"),APo=o("distilbert"),yPo=o(" \u2014 "),uO=a("a"),LPo=o("DistilBertForSequenceClassification"),xPo=o(" (DistilBERT model)"),$Po=l(),Tb=a("li"),_ge=a("strong"),kPo=o("electra"),SPo=o(" \u2014 "),_O=a("a"),RPo=o("ElectraForSequenceClassification"),PPo=o(" (ELECTRA model)"),BPo=l(),Mb=a("li"),bge=a("strong"),IPo=o("flaubert"),NPo=o(" \u2014 "),bO=a("a"),qPo=o("FlaubertForSequenceClassification"),jPo=o(" (FlauBERT model)"),DPo=l(),Eb=a("li"),vge=a("strong"),GPo=o("fnet"),OPo=o(" \u2014 "),vO=a("a"),VPo=o("FNetForSequenceClassification"),XPo=o(" (FNet model)"),zPo=l(),Cb=a("li"),Fge=a("strong"),WPo=o("funnel"),QPo=o(" \u2014 "),FO=a("a"),HPo=o("FunnelForSequenceClassification"),UPo=o(" (Funnel Transformer model)"),JPo=l(),wb=a("li"),Tge=a("strong"),YPo=o("gpt2"),KPo=o(" \u2014 "),TO=a("a"),ZPo=o("GPT2ForSequenceClassification"),eBo=o(" (OpenAI GPT-2 model)"),oBo=l(),Ab=a("li"),Mge=a("strong"),rBo=o("gpt_neo"),tBo=o(" \u2014 "),MO=a("a"),aBo=o("GPTNeoForSequenceClassification"),nBo=o(" (GPT Neo model)"),sBo=l(),yb=a("li"),Ege=a("strong"),lBo=o("gptj"),iBo=o(" \u2014 "),EO=a("a"),dBo=o("GPTJForSequenceClassification"),cBo=o(" (GPT-J model)"),fBo=l(),Lb=a("li"),Cge=a("strong"),mBo=o("ibert"),gBo=o(" \u2014 "),CO=a("a"),hBo=o("IBertForSequenceClassification"),pBo=o(" (I-BERT model)"),uBo=l(),xb=a("li"),wge=a("strong"),_Bo=o("layoutlm"),bBo=o(" \u2014 "),wO=a("a"),vBo=o("LayoutLMForSequenceClassification"),FBo=o(" (LayoutLM model)"),TBo=l(),$b=a("li"),Age=a("strong"),MBo=o("layoutlmv2"),EBo=o(" \u2014 "),AO=a("a"),CBo=o("LayoutLMv2ForSequenceClassification"),wBo=o(" (LayoutLMv2 model)"),ABo=l(),kb=a("li"),yge=a("strong"),yBo=o("layoutlmv3"),LBo=o(" \u2014 "),yO=a("a"),xBo=o("LayoutLMv3ForSequenceClassification"),$Bo=o(" (LayoutLMv3 model)"),kBo=l(),Sb=a("li"),Lge=a("strong"),SBo=o("led"),RBo=o(" \u2014 "),LO=a("a"),PBo=o("LEDForSequenceClassification"),BBo=o(" (LED model)"),IBo=l(),Rb=a("li"),xge=a("strong"),NBo=o("longformer"),qBo=o(" \u2014 "),xO=a("a"),jBo=o("LongformerForSequenceClassification"),DBo=o(" (Longformer model)"),GBo=l(),Pb=a("li"),$ge=a("strong"),OBo=o("mbart"),VBo=o(" \u2014 "),$O=a("a"),XBo=o("MBartForSequenceClassification"),zBo=o(" (mBART model)"),WBo=l(),Bb=a("li"),kge=a("strong"),QBo=o("megatron-bert"),HBo=o(" \u2014 "),kO=a("a"),UBo=o("MegatronBertForSequenceClassification"),JBo=o(" (Megatron-BERT model)"),YBo=l(),Ib=a("li"),Sge=a("strong"),KBo=o("mobilebert"),ZBo=o(" \u2014 "),SO=a("a"),eIo=o("MobileBertForSequenceClassification"),oIo=o(" (MobileBERT model)"),rIo=l(),Nb=a("li"),Rge=a("strong"),tIo=o("mpnet"),aIo=o(" \u2014 "),RO=a("a"),nIo=o("MPNetForSequenceClassification"),sIo=o(" (MPNet model)"),lIo=l(),qb=a("li"),Pge=a("strong"),iIo=o("nystromformer"),dIo=o(" \u2014 "),PO=a("a"),cIo=o("NystromformerForSequenceClassification"),fIo=o(" (Nystr\xF6mformer model)"),mIo=l(),jb=a("li"),Bge=a("strong"),gIo=o("openai-gpt"),hIo=o(" \u2014 "),BO=a("a"),pIo=o("OpenAIGPTForSequenceClassification"),uIo=o(" (OpenAI GPT model)"),_Io=l(),Db=a("li"),Ige=a("strong"),bIo=o("perceiver"),vIo=o(" \u2014 "),IO=a("a"),FIo=o("PerceiverForSequenceClassification"),TIo=o(" (Perceiver model)"),MIo=l(),Gb=a("li"),Nge=a("strong"),EIo=o("plbart"),CIo=o(" \u2014 "),NO=a("a"),wIo=o("PLBartForSequenceClassification"),AIo=o(" (PLBart model)"),yIo=l(),Ob=a("li"),qge=a("strong"),LIo=o("qdqbert"),xIo=o(" \u2014 "),qO=a("a"),$Io=o("QDQBertForSequenceClassification"),kIo=o(" (QDQBert model)"),SIo=l(),Vb=a("li"),jge=a("strong"),RIo=o("reformer"),PIo=o(" \u2014 "),jO=a("a"),BIo=o("ReformerForSequenceClassification"),IIo=o(" (Reformer model)"),NIo=l(),Xb=a("li"),Dge=a("strong"),qIo=o("rembert"),jIo=o(" \u2014 "),DO=a("a"),DIo=o("RemBertForSequenceClassification"),GIo=o(" (RemBERT model)"),OIo=l(),zb=a("li"),Gge=a("strong"),VIo=o("roberta"),XIo=o(" \u2014 "),GO=a("a"),zIo=o("RobertaForSequenceClassification"),WIo=o(" (RoBERTa model)"),QIo=l(),Wb=a("li"),Oge=a("strong"),HIo=o("roformer"),UIo=o(" \u2014 "),OO=a("a"),JIo=o("RoFormerForSequenceClassification"),YIo=o(" (RoFormer model)"),KIo=l(),Qb=a("li"),Vge=a("strong"),ZIo=o("squeezebert"),eNo=o(" \u2014 "),VO=a("a"),oNo=o("SqueezeBertForSequenceClassification"),rNo=o(" (SqueezeBERT model)"),tNo=l(),Hb=a("li"),Xge=a("strong"),aNo=o("tapas"),nNo=o(" \u2014 "),XO=a("a"),sNo=o("TapasForSequenceClassification"),lNo=o(" (TAPAS model)"),iNo=l(),Ub=a("li"),zge=a("strong"),dNo=o("transfo-xl"),cNo=o(" \u2014 "),zO=a("a"),fNo=o("TransfoXLForSequenceClassification"),mNo=o(" (Transformer-XL model)"),gNo=l(),Jb=a("li"),Wge=a("strong"),hNo=o("xlm"),pNo=o(" \u2014 "),WO=a("a"),uNo=o("XLMForSequenceClassification"),_No=o(" (XLM model)"),bNo=l(),Yb=a("li"),Qge=a("strong"),vNo=o("xlm-roberta"),FNo=o(" \u2014 "),QO=a("a"),TNo=o("XLMRobertaForSequenceClassification"),MNo=o(" (XLM-RoBERTa model)"),ENo=l(),Kb=a("li"),Hge=a("strong"),CNo=o("xlm-roberta-xl"),wNo=o(" \u2014 "),HO=a("a"),ANo=o("XLMRobertaXLForSequenceClassification"),yNo=o(" (XLM-RoBERTa-XL model)"),LNo=l(),Zb=a("li"),Uge=a("strong"),xNo=o("xlnet"),$No=o(" \u2014 "),UO=a("a"),kNo=o("XLNetForSequenceClassification"),SNo=o(" (XLNet model)"),RNo=l(),ev=a("li"),Jge=a("strong"),PNo=o("yoso"),BNo=o(" \u2014 "),JO=a("a"),INo=o("YosoForSequenceClassification"),NNo=o(" (YOSO model)"),qNo=l(),ov=a("p"),jNo=o("The model is set in evaluation mode by default using "),Yge=a("code"),DNo=o("model.eval()"),GNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),ONo=o("model.train()"),VNo=l(),F(rv.$$.fragment),FDe=l(),Yi=a("h2"),tv=a("a"),Zge=a("span"),F(ly.$$.fragment),XNo=l(),ehe=a("span"),zNo=o("AutoModelForMultipleChoice"),TDe=l(),Bo=a("div"),F(iy.$$.fragment),WNo=l(),Ki=a("p"),QNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YO=a("a"),HNo=o("from_pretrained()"),UNo=o(" class method or the "),KO=a("a"),JNo=o("from_config()"),YNo=o(` class
method.`),KNo=l(),dy=a("p"),ZNo=o("This class cannot be instantiated directly using "),ohe=a("code"),eqo=o("__init__()"),oqo=o(" (throws an error)."),rqo=l(),ft=a("div"),F(cy.$$.fragment),tqo=l(),rhe=a("p"),aqo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nqo=l(),Zi=a("p"),sqo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),lqo=o("not"),iqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),dqo=o("from_pretrained()"),cqo=o(" to load the model weights."),fqo=l(),F(av.$$.fragment),mqo=l(),ro=a("div"),F(fy.$$.fragment),gqo=l(),ahe=a("p"),hqo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pqo=l(),qa=a("p"),uqo=o("The model class to instantiate is selected based on the "),nhe=a("code"),_qo=o("model_type"),bqo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),vqo=o("pretrained_model_name_or_path"),Fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),Tqo=o("pretrained_model_name_or_path"),Mqo=o(":"),Eqo=l(),Z=a("ul"),nv=a("li"),ihe=a("strong"),Cqo=o("albert"),wqo=o(" \u2014 "),eV=a("a"),Aqo=o("AlbertForMultipleChoice"),yqo=o(" (ALBERT model)"),Lqo=l(),sv=a("li"),dhe=a("strong"),xqo=o("bert"),$qo=o(" \u2014 "),oV=a("a"),kqo=o("BertForMultipleChoice"),Sqo=o(" (BERT model)"),Rqo=l(),lv=a("li"),che=a("strong"),Pqo=o("big_bird"),Bqo=o(" \u2014 "),rV=a("a"),Iqo=o("BigBirdForMultipleChoice"),Nqo=o(" (BigBird model)"),qqo=l(),iv=a("li"),fhe=a("strong"),jqo=o("camembert"),Dqo=o(" \u2014 "),tV=a("a"),Gqo=o("CamembertForMultipleChoice"),Oqo=o(" (CamemBERT model)"),Vqo=l(),dv=a("li"),mhe=a("strong"),Xqo=o("canine"),zqo=o(" \u2014 "),aV=a("a"),Wqo=o("CanineForMultipleChoice"),Qqo=o(" (CANINE model)"),Hqo=l(),cv=a("li"),ghe=a("strong"),Uqo=o("convbert"),Jqo=o(" \u2014 "),nV=a("a"),Yqo=o("ConvBertForMultipleChoice"),Kqo=o(" (ConvBERT model)"),Zqo=l(),fv=a("li"),hhe=a("strong"),ejo=o("data2vec-text"),ojo=o(" \u2014 "),sV=a("a"),rjo=o("Data2VecTextForMultipleChoice"),tjo=o(" (Data2VecText model)"),ajo=l(),mv=a("li"),phe=a("strong"),njo=o("deberta-v2"),sjo=o(" \u2014 "),lV=a("a"),ljo=o("DebertaV2ForMultipleChoice"),ijo=o(" (DeBERTa-v2 model)"),djo=l(),gv=a("li"),uhe=a("strong"),cjo=o("distilbert"),fjo=o(" \u2014 "),iV=a("a"),mjo=o("DistilBertForMultipleChoice"),gjo=o(" (DistilBERT model)"),hjo=l(),hv=a("li"),_he=a("strong"),pjo=o("electra"),ujo=o(" \u2014 "),dV=a("a"),_jo=o("ElectraForMultipleChoice"),bjo=o(" (ELECTRA model)"),vjo=l(),pv=a("li"),bhe=a("strong"),Fjo=o("flaubert"),Tjo=o(" \u2014 "),cV=a("a"),Mjo=o("FlaubertForMultipleChoice"),Ejo=o(" (FlauBERT model)"),Cjo=l(),uv=a("li"),vhe=a("strong"),wjo=o("fnet"),Ajo=o(" \u2014 "),fV=a("a"),yjo=o("FNetForMultipleChoice"),Ljo=o(" (FNet model)"),xjo=l(),_v=a("li"),Fhe=a("strong"),$jo=o("funnel"),kjo=o(" \u2014 "),mV=a("a"),Sjo=o("FunnelForMultipleChoice"),Rjo=o(" (Funnel Transformer model)"),Pjo=l(),bv=a("li"),The=a("strong"),Bjo=o("ibert"),Ijo=o(" \u2014 "),gV=a("a"),Njo=o("IBertForMultipleChoice"),qjo=o(" (I-BERT model)"),jjo=l(),vv=a("li"),Mhe=a("strong"),Djo=o("longformer"),Gjo=o(" \u2014 "),hV=a("a"),Ojo=o("LongformerForMultipleChoice"),Vjo=o(" (Longformer model)"),Xjo=l(),Fv=a("li"),Ehe=a("strong"),zjo=o("megatron-bert"),Wjo=o(" \u2014 "),pV=a("a"),Qjo=o("MegatronBertForMultipleChoice"),Hjo=o(" (Megatron-BERT model)"),Ujo=l(),Tv=a("li"),Che=a("strong"),Jjo=o("mobilebert"),Yjo=o(" \u2014 "),uV=a("a"),Kjo=o("MobileBertForMultipleChoice"),Zjo=o(" (MobileBERT model)"),eDo=l(),Mv=a("li"),whe=a("strong"),oDo=o("mpnet"),rDo=o(" \u2014 "),_V=a("a"),tDo=o("MPNetForMultipleChoice"),aDo=o(" (MPNet model)"),nDo=l(),Ev=a("li"),Ahe=a("strong"),sDo=o("nystromformer"),lDo=o(" \u2014 "),bV=a("a"),iDo=o("NystromformerForMultipleChoice"),dDo=o(" (Nystr\xF6mformer model)"),cDo=l(),Cv=a("li"),yhe=a("strong"),fDo=o("qdqbert"),mDo=o(" \u2014 "),vV=a("a"),gDo=o("QDQBertForMultipleChoice"),hDo=o(" (QDQBert model)"),pDo=l(),wv=a("li"),Lhe=a("strong"),uDo=o("rembert"),_Do=o(" \u2014 "),FV=a("a"),bDo=o("RemBertForMultipleChoice"),vDo=o(" (RemBERT model)"),FDo=l(),Av=a("li"),xhe=a("strong"),TDo=o("roberta"),MDo=o(" \u2014 "),TV=a("a"),EDo=o("RobertaForMultipleChoice"),CDo=o(" (RoBERTa model)"),wDo=l(),yv=a("li"),$he=a("strong"),ADo=o("roformer"),yDo=o(" \u2014 "),MV=a("a"),LDo=o("RoFormerForMultipleChoice"),xDo=o(" (RoFormer model)"),$Do=l(),Lv=a("li"),khe=a("strong"),kDo=o("squeezebert"),SDo=o(" \u2014 "),EV=a("a"),RDo=o("SqueezeBertForMultipleChoice"),PDo=o(" (SqueezeBERT model)"),BDo=l(),xv=a("li"),She=a("strong"),IDo=o("xlm"),NDo=o(" \u2014 "),CV=a("a"),qDo=o("XLMForMultipleChoice"),jDo=o(" (XLM model)"),DDo=l(),$v=a("li"),Rhe=a("strong"),GDo=o("xlm-roberta"),ODo=o(" \u2014 "),wV=a("a"),VDo=o("XLMRobertaForMultipleChoice"),XDo=o(" (XLM-RoBERTa model)"),zDo=l(),kv=a("li"),Phe=a("strong"),WDo=o("xlm-roberta-xl"),QDo=o(" \u2014 "),AV=a("a"),HDo=o("XLMRobertaXLForMultipleChoice"),UDo=o(" (XLM-RoBERTa-XL model)"),JDo=l(),Sv=a("li"),Bhe=a("strong"),YDo=o("xlnet"),KDo=o(" \u2014 "),yV=a("a"),ZDo=o("XLNetForMultipleChoice"),eGo=o(" (XLNet model)"),oGo=l(),Rv=a("li"),Ihe=a("strong"),rGo=o("yoso"),tGo=o(" \u2014 "),LV=a("a"),aGo=o("YosoForMultipleChoice"),nGo=o(" (YOSO model)"),sGo=l(),Pv=a("p"),lGo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),iGo=o("model.eval()"),dGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),cGo=o("model.train()"),fGo=l(),F(Bv.$$.fragment),MDe=l(),ed=a("h2"),Iv=a("a"),jhe=a("span"),F(my.$$.fragment),mGo=l(),Dhe=a("span"),gGo=o("AutoModelForNextSentencePrediction"),EDe=l(),Io=a("div"),F(gy.$$.fragment),hGo=l(),od=a("p"),pGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xV=a("a"),uGo=o("from_pretrained()"),_Go=o(" class method or the "),$V=a("a"),bGo=o("from_config()"),vGo=o(` class
method.`),FGo=l(),hy=a("p"),TGo=o("This class cannot be instantiated directly using "),Ghe=a("code"),MGo=o("__init__()"),EGo=o(" (throws an error)."),CGo=l(),mt=a("div"),F(py.$$.fragment),wGo=l(),Ohe=a("p"),AGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yGo=l(),rd=a("p"),LGo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),xGo=o("not"),$Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),kGo=o("from_pretrained()"),SGo=o(" to load the model weights."),RGo=l(),F(Nv.$$.fragment),PGo=l(),to=a("div"),F(uy.$$.fragment),BGo=l(),Xhe=a("p"),IGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NGo=l(),ja=a("p"),qGo=o("The model class to instantiate is selected based on the "),zhe=a("code"),jGo=o("model_type"),DGo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),GGo=o("pretrained_model_name_or_path"),OGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),VGo=o("pretrained_model_name_or_path"),XGo=o(":"),zGo=l(),Zr=a("ul"),qv=a("li"),Hhe=a("strong"),WGo=o("bert"),QGo=o(" \u2014 "),SV=a("a"),HGo=o("BertForNextSentencePrediction"),UGo=o(" (BERT model)"),JGo=l(),jv=a("li"),Uhe=a("strong"),YGo=o("fnet"),KGo=o(" \u2014 "),RV=a("a"),ZGo=o("FNetForNextSentencePrediction"),eOo=o(" (FNet model)"),oOo=l(),Dv=a("li"),Jhe=a("strong"),rOo=o("megatron-bert"),tOo=o(" \u2014 "),PV=a("a"),aOo=o("MegatronBertForNextSentencePrediction"),nOo=o(" (Megatron-BERT model)"),sOo=l(),Gv=a("li"),Yhe=a("strong"),lOo=o("mobilebert"),iOo=o(" \u2014 "),BV=a("a"),dOo=o("MobileBertForNextSentencePrediction"),cOo=o(" (MobileBERT model)"),fOo=l(),Ov=a("li"),Khe=a("strong"),mOo=o("qdqbert"),gOo=o(" \u2014 "),IV=a("a"),hOo=o("QDQBertForNextSentencePrediction"),pOo=o(" (QDQBert model)"),uOo=l(),Vv=a("p"),_Oo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),FOo=o("model.train()"),TOo=l(),F(Xv.$$.fragment),CDe=l(),td=a("h2"),zv=a("a"),ope=a("span"),F(_y.$$.fragment),MOo=l(),rpe=a("span"),EOo=o("AutoModelForTokenClassification"),wDe=l(),No=a("div"),F(by.$$.fragment),COo=l(),ad=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NV=a("a"),AOo=o("from_pretrained()"),yOo=o(" class method or the "),qV=a("a"),LOo=o("from_config()"),xOo=o(` class
method.`),$Oo=l(),vy=a("p"),kOo=o("This class cannot be instantiated directly using "),tpe=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),POo=l(),gt=a("div"),F(Fy.$$.fragment),BOo=l(),ape=a("p"),IOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NOo=l(),nd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),jOo=o("not"),DOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),GOo=o("from_pretrained()"),OOo=o(" to load the model weights."),VOo=l(),F(Wv.$$.fragment),XOo=l(),ao=a("div"),F(Ty.$$.fragment),zOo=l(),spe=a("p"),WOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QOo=l(),Da=a("p"),HOo=o("The model class to instantiate is selected based on the "),lpe=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),U=a("ul"),Qv=a("li"),cpe=a("strong"),rVo=o("albert"),tVo=o(" \u2014 "),DV=a("a"),aVo=o("AlbertForTokenClassification"),nVo=o(" (ALBERT model)"),sVo=l(),Hv=a("li"),fpe=a("strong"),lVo=o("bert"),iVo=o(" \u2014 "),GV=a("a"),dVo=o("BertForTokenClassification"),cVo=o(" (BERT model)"),fVo=l(),Uv=a("li"),mpe=a("strong"),mVo=o("big_bird"),gVo=o(" \u2014 "),OV=a("a"),hVo=o("BigBirdForTokenClassification"),pVo=o(" (BigBird model)"),uVo=l(),Jv=a("li"),gpe=a("strong"),_Vo=o("camembert"),bVo=o(" \u2014 "),VV=a("a"),vVo=o("CamembertForTokenClassification"),FVo=o(" (CamemBERT model)"),TVo=l(),Yv=a("li"),hpe=a("strong"),MVo=o("canine"),EVo=o(" \u2014 "),XV=a("a"),CVo=o("CanineForTokenClassification"),wVo=o(" (CANINE model)"),AVo=l(),Kv=a("li"),ppe=a("strong"),yVo=o("convbert"),LVo=o(" \u2014 "),zV=a("a"),xVo=o("ConvBertForTokenClassification"),$Vo=o(" (ConvBERT model)"),kVo=l(),Zv=a("li"),upe=a("strong"),SVo=o("data2vec-text"),RVo=o(" \u2014 "),WV=a("a"),PVo=o("Data2VecTextForTokenClassification"),BVo=o(" (Data2VecText model)"),IVo=l(),eF=a("li"),_pe=a("strong"),NVo=o("deberta"),qVo=o(" \u2014 "),QV=a("a"),jVo=o("DebertaForTokenClassification"),DVo=o(" (DeBERTa model)"),GVo=l(),oF=a("li"),bpe=a("strong"),OVo=o("deberta-v2"),VVo=o(" \u2014 "),HV=a("a"),XVo=o("DebertaV2ForTokenClassification"),zVo=o(" (DeBERTa-v2 model)"),WVo=l(),rF=a("li"),vpe=a("strong"),QVo=o("distilbert"),HVo=o(" \u2014 "),UV=a("a"),UVo=o("DistilBertForTokenClassification"),JVo=o(" (DistilBERT model)"),YVo=l(),tF=a("li"),Fpe=a("strong"),KVo=o("electra"),ZVo=o(" \u2014 "),JV=a("a"),eXo=o("ElectraForTokenClassification"),oXo=o(" (ELECTRA model)"),rXo=l(),aF=a("li"),Tpe=a("strong"),tXo=o("flaubert"),aXo=o(" \u2014 "),YV=a("a"),nXo=o("FlaubertForTokenClassification"),sXo=o(" (FlauBERT model)"),lXo=l(),nF=a("li"),Mpe=a("strong"),iXo=o("fnet"),dXo=o(" \u2014 "),KV=a("a"),cXo=o("FNetForTokenClassification"),fXo=o(" (FNet model)"),mXo=l(),sF=a("li"),Epe=a("strong"),gXo=o("funnel"),hXo=o(" \u2014 "),ZV=a("a"),pXo=o("FunnelForTokenClassification"),uXo=o(" (Funnel Transformer model)"),_Xo=l(),lF=a("li"),Cpe=a("strong"),bXo=o("gpt2"),vXo=o(" \u2014 "),eX=a("a"),FXo=o("GPT2ForTokenClassification"),TXo=o(" (OpenAI GPT-2 model)"),MXo=l(),iF=a("li"),wpe=a("strong"),EXo=o("ibert"),CXo=o(" \u2014 "),oX=a("a"),wXo=o("IBertForTokenClassification"),AXo=o(" (I-BERT model)"),yXo=l(),dF=a("li"),Ape=a("strong"),LXo=o("layoutlm"),xXo=o(" \u2014 "),rX=a("a"),$Xo=o("LayoutLMForTokenClassification"),kXo=o(" (LayoutLM model)"),SXo=l(),cF=a("li"),ype=a("strong"),RXo=o("layoutlmv2"),PXo=o(" \u2014 "),tX=a("a"),BXo=o("LayoutLMv2ForTokenClassification"),IXo=o(" (LayoutLMv2 model)"),NXo=l(),fF=a("li"),Lpe=a("strong"),qXo=o("layoutlmv3"),jXo=o(" \u2014 "),aX=a("a"),DXo=o("LayoutLMv3ForTokenClassification"),GXo=o(" (LayoutLMv3 model)"),OXo=l(),mF=a("li"),xpe=a("strong"),VXo=o("longformer"),XXo=o(" \u2014 "),nX=a("a"),zXo=o("LongformerForTokenClassification"),WXo=o(" (Longformer model)"),QXo=l(),gF=a("li"),$pe=a("strong"),HXo=o("megatron-bert"),UXo=o(" \u2014 "),sX=a("a"),JXo=o("MegatronBertForTokenClassification"),YXo=o(" (Megatron-BERT model)"),KXo=l(),hF=a("li"),kpe=a("strong"),ZXo=o("mobilebert"),ezo=o(" \u2014 "),lX=a("a"),ozo=o("MobileBertForTokenClassification"),rzo=o(" (MobileBERT model)"),tzo=l(),pF=a("li"),Spe=a("strong"),azo=o("mpnet"),nzo=o(" \u2014 "),iX=a("a"),szo=o("MPNetForTokenClassification"),lzo=o(" (MPNet model)"),izo=l(),uF=a("li"),Rpe=a("strong"),dzo=o("nystromformer"),czo=o(" \u2014 "),dX=a("a"),fzo=o("NystromformerForTokenClassification"),mzo=o(" (Nystr\xF6mformer model)"),gzo=l(),_F=a("li"),Ppe=a("strong"),hzo=o("qdqbert"),pzo=o(" \u2014 "),cX=a("a"),uzo=o("QDQBertForTokenClassification"),_zo=o(" (QDQBert model)"),bzo=l(),bF=a("li"),Bpe=a("strong"),vzo=o("rembert"),Fzo=o(" \u2014 "),fX=a("a"),Tzo=o("RemBertForTokenClassification"),Mzo=o(" (RemBERT model)"),Ezo=l(),vF=a("li"),Ipe=a("strong"),Czo=o("roberta"),wzo=o(" \u2014 "),mX=a("a"),Azo=o("RobertaForTokenClassification"),yzo=o(" (RoBERTa model)"),Lzo=l(),FF=a("li"),Npe=a("strong"),xzo=o("roformer"),$zo=o(" \u2014 "),gX=a("a"),kzo=o("RoFormerForTokenClassification"),Szo=o(" (RoFormer model)"),Rzo=l(),TF=a("li"),qpe=a("strong"),Pzo=o("squeezebert"),Bzo=o(" \u2014 "),hX=a("a"),Izo=o("SqueezeBertForTokenClassification"),Nzo=o(" (SqueezeBERT model)"),qzo=l(),MF=a("li"),jpe=a("strong"),jzo=o("xlm"),Dzo=o(" \u2014 "),pX=a("a"),Gzo=o("XLMForTokenClassification"),Ozo=o(" (XLM model)"),Vzo=l(),EF=a("li"),Dpe=a("strong"),Xzo=o("xlm-roberta"),zzo=o(" \u2014 "),uX=a("a"),Wzo=o("XLMRobertaForTokenClassification"),Qzo=o(" (XLM-RoBERTa model)"),Hzo=l(),CF=a("li"),Gpe=a("strong"),Uzo=o("xlm-roberta-xl"),Jzo=o(" \u2014 "),_X=a("a"),Yzo=o("XLMRobertaXLForTokenClassification"),Kzo=o(" (XLM-RoBERTa-XL model)"),Zzo=l(),wF=a("li"),Ope=a("strong"),eWo=o("xlnet"),oWo=o(" \u2014 "),bX=a("a"),rWo=o("XLNetForTokenClassification"),tWo=o(" (XLNet model)"),aWo=l(),AF=a("li"),Vpe=a("strong"),nWo=o("yoso"),sWo=o(" \u2014 "),vX=a("a"),lWo=o("YosoForTokenClassification"),iWo=o(" (YOSO model)"),dWo=l(),yF=a("p"),cWo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),fWo=o("model.eval()"),mWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),gWo=o("model.train()"),hWo=l(),F(LF.$$.fragment),ADe=l(),sd=a("h2"),xF=a("a"),Wpe=a("span"),F(My.$$.fragment),pWo=l(),Qpe=a("span"),uWo=o("AutoModelForQuestionAnswering"),yDe=l(),qo=a("div"),F(Ey.$$.fragment),_Wo=l(),ld=a("p"),bWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FX=a("a"),vWo=o("from_pretrained()"),FWo=o(" class method or the "),TX=a("a"),TWo=o("from_config()"),MWo=o(` class
method.`),EWo=l(),Cy=a("p"),CWo=o("This class cannot be instantiated directly using "),Hpe=a("code"),wWo=o("__init__()"),AWo=o(" (throws an error)."),yWo=l(),ht=a("div"),F(wy.$$.fragment),LWo=l(),Upe=a("p"),xWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Wo=l(),id=a("p"),kWo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),SWo=o("not"),RWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),PWo=o("from_pretrained()"),BWo=o(" to load the model weights."),IWo=l(),F($F.$$.fragment),NWo=l(),no=a("div"),F(Ay.$$.fragment),qWo=l(),Ype=a("p"),jWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DWo=l(),Ga=a("p"),GWo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),OWo=o("model_type"),VWo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),WWo=o("pretrained_model_name_or_path"),QWo=o(":"),HWo=l(),V=a("ul"),kF=a("li"),oue=a("strong"),UWo=o("albert"),JWo=o(" \u2014 "),EX=a("a"),YWo=o("AlbertForQuestionAnswering"),KWo=o(" (ALBERT model)"),ZWo=l(),SF=a("li"),rue=a("strong"),eQo=o("bart"),oQo=o(" \u2014 "),CX=a("a"),rQo=o("BartForQuestionAnswering"),tQo=o(" (BART model)"),aQo=l(),RF=a("li"),tue=a("strong"),nQo=o("bert"),sQo=o(" \u2014 "),wX=a("a"),lQo=o("BertForQuestionAnswering"),iQo=o(" (BERT model)"),dQo=l(),PF=a("li"),aue=a("strong"),cQo=o("big_bird"),fQo=o(" \u2014 "),AX=a("a"),mQo=o("BigBirdForQuestionAnswering"),gQo=o(" (BigBird model)"),hQo=l(),BF=a("li"),nue=a("strong"),pQo=o("bigbird_pegasus"),uQo=o(" \u2014 "),yX=a("a"),_Qo=o("BigBirdPegasusForQuestionAnswering"),bQo=o(" (BigBird-Pegasus model)"),vQo=l(),IF=a("li"),sue=a("strong"),FQo=o("camembert"),TQo=o(" \u2014 "),LX=a("a"),MQo=o("CamembertForQuestionAnswering"),EQo=o(" (CamemBERT model)"),CQo=l(),NF=a("li"),lue=a("strong"),wQo=o("canine"),AQo=o(" \u2014 "),xX=a("a"),yQo=o("CanineForQuestionAnswering"),LQo=o(" (CANINE model)"),xQo=l(),qF=a("li"),iue=a("strong"),$Qo=o("convbert"),kQo=o(" \u2014 "),$X=a("a"),SQo=o("ConvBertForQuestionAnswering"),RQo=o(" (ConvBERT model)"),PQo=l(),jF=a("li"),due=a("strong"),BQo=o("data2vec-text"),IQo=o(" \u2014 "),kX=a("a"),NQo=o("Data2VecTextForQuestionAnswering"),qQo=o(" (Data2VecText model)"),jQo=l(),DF=a("li"),cue=a("strong"),DQo=o("deberta"),GQo=o(" \u2014 "),SX=a("a"),OQo=o("DebertaForQuestionAnswering"),VQo=o(" (DeBERTa model)"),XQo=l(),GF=a("li"),fue=a("strong"),zQo=o("deberta-v2"),WQo=o(" \u2014 "),RX=a("a"),QQo=o("DebertaV2ForQuestionAnswering"),HQo=o(" (DeBERTa-v2 model)"),UQo=l(),OF=a("li"),mue=a("strong"),JQo=o("distilbert"),YQo=o(" \u2014 "),PX=a("a"),KQo=o("DistilBertForQuestionAnswering"),ZQo=o(" (DistilBERT model)"),eHo=l(),VF=a("li"),gue=a("strong"),oHo=o("electra"),rHo=o(" \u2014 "),BX=a("a"),tHo=o("ElectraForQuestionAnswering"),aHo=o(" (ELECTRA model)"),nHo=l(),XF=a("li"),hue=a("strong"),sHo=o("flaubert"),lHo=o(" \u2014 "),IX=a("a"),iHo=o("FlaubertForQuestionAnsweringSimple"),dHo=o(" (FlauBERT model)"),cHo=l(),zF=a("li"),pue=a("strong"),fHo=o("fnet"),mHo=o(" \u2014 "),NX=a("a"),gHo=o("FNetForQuestionAnswering"),hHo=o(" (FNet model)"),pHo=l(),WF=a("li"),uue=a("strong"),uHo=o("funnel"),_Ho=o(" \u2014 "),qX=a("a"),bHo=o("FunnelForQuestionAnswering"),vHo=o(" (Funnel Transformer model)"),FHo=l(),QF=a("li"),_ue=a("strong"),THo=o("gptj"),MHo=o(" \u2014 "),jX=a("a"),EHo=o("GPTJForQuestionAnswering"),CHo=o(" (GPT-J model)"),wHo=l(),HF=a("li"),bue=a("strong"),AHo=o("ibert"),yHo=o(" \u2014 "),DX=a("a"),LHo=o("IBertForQuestionAnswering"),xHo=o(" (I-BERT model)"),$Ho=l(),UF=a("li"),vue=a("strong"),kHo=o("layoutlmv2"),SHo=o(" \u2014 "),GX=a("a"),RHo=o("LayoutLMv2ForQuestionAnswering"),PHo=o(" (LayoutLMv2 model)"),BHo=l(),JF=a("li"),Fue=a("strong"),IHo=o("layoutlmv3"),NHo=o(" \u2014 "),OX=a("a"),qHo=o("LayoutLMv3ForQuestionAnswering"),jHo=o(" (LayoutLMv3 model)"),DHo=l(),YF=a("li"),Tue=a("strong"),GHo=o("led"),OHo=o(" \u2014 "),VX=a("a"),VHo=o("LEDForQuestionAnswering"),XHo=o(" (LED model)"),zHo=l(),KF=a("li"),Mue=a("strong"),WHo=o("longformer"),QHo=o(" \u2014 "),XX=a("a"),HHo=o("LongformerForQuestionAnswering"),UHo=o(" (Longformer model)"),JHo=l(),ZF=a("li"),Eue=a("strong"),YHo=o("lxmert"),KHo=o(" \u2014 "),zX=a("a"),ZHo=o("LxmertForQuestionAnswering"),eUo=o(" (LXMERT model)"),oUo=l(),e6=a("li"),Cue=a("strong"),rUo=o("mbart"),tUo=o(" \u2014 "),WX=a("a"),aUo=o("MBartForQuestionAnswering"),nUo=o(" (mBART model)"),sUo=l(),o6=a("li"),wue=a("strong"),lUo=o("megatron-bert"),iUo=o(" \u2014 "),QX=a("a"),dUo=o("MegatronBertForQuestionAnswering"),cUo=o(" (Megatron-BERT model)"),fUo=l(),r6=a("li"),Aue=a("strong"),mUo=o("mobilebert"),gUo=o(" \u2014 "),HX=a("a"),hUo=o("MobileBertForQuestionAnswering"),pUo=o(" (MobileBERT model)"),uUo=l(),t6=a("li"),yue=a("strong"),_Uo=o("mpnet"),bUo=o(" \u2014 "),UX=a("a"),vUo=o("MPNetForQuestionAnswering"),FUo=o(" (MPNet model)"),TUo=l(),a6=a("li"),Lue=a("strong"),MUo=o("nystromformer"),EUo=o(" \u2014 "),JX=a("a"),CUo=o("NystromformerForQuestionAnswering"),wUo=o(" (Nystr\xF6mformer model)"),AUo=l(),n6=a("li"),xue=a("strong"),yUo=o("qdqbert"),LUo=o(" \u2014 "),YX=a("a"),xUo=o("QDQBertForQuestionAnswering"),$Uo=o(" (QDQBert model)"),kUo=l(),s6=a("li"),$ue=a("strong"),SUo=o("reformer"),RUo=o(" \u2014 "),KX=a("a"),PUo=o("ReformerForQuestionAnswering"),BUo=o(" (Reformer model)"),IUo=l(),l6=a("li"),kue=a("strong"),NUo=o("rembert"),qUo=o(" \u2014 "),ZX=a("a"),jUo=o("RemBertForQuestionAnswering"),DUo=o(" (RemBERT model)"),GUo=l(),i6=a("li"),Sue=a("strong"),OUo=o("roberta"),VUo=o(" \u2014 "),ez=a("a"),XUo=o("RobertaForQuestionAnswering"),zUo=o(" (RoBERTa model)"),WUo=l(),d6=a("li"),Rue=a("strong"),QUo=o("roformer"),HUo=o(" \u2014 "),oz=a("a"),UUo=o("RoFormerForQuestionAnswering"),JUo=o(" (RoFormer model)"),YUo=l(),c6=a("li"),Pue=a("strong"),KUo=o("splinter"),ZUo=o(" \u2014 "),rz=a("a"),eJo=o("SplinterForQuestionAnswering"),oJo=o(" (Splinter model)"),rJo=l(),f6=a("li"),Bue=a("strong"),tJo=o("squeezebert"),aJo=o(" \u2014 "),tz=a("a"),nJo=o("SqueezeBertForQuestionAnswering"),sJo=o(" (SqueezeBERT model)"),lJo=l(),m6=a("li"),Iue=a("strong"),iJo=o("xlm"),dJo=o(" \u2014 "),az=a("a"),cJo=o("XLMForQuestionAnsweringSimple"),fJo=o(" (XLM model)"),mJo=l(),g6=a("li"),Nue=a("strong"),gJo=o("xlm-roberta"),hJo=o(" \u2014 "),nz=a("a"),pJo=o("XLMRobertaForQuestionAnswering"),uJo=o(" (XLM-RoBERTa model)"),_Jo=l(),h6=a("li"),que=a("strong"),bJo=o("xlm-roberta-xl"),vJo=o(" \u2014 "),sz=a("a"),FJo=o("XLMRobertaXLForQuestionAnswering"),TJo=o(" (XLM-RoBERTa-XL model)"),MJo=l(),p6=a("li"),jue=a("strong"),EJo=o("xlnet"),CJo=o(" \u2014 "),lz=a("a"),wJo=o("XLNetForQuestionAnsweringSimple"),AJo=o(" (XLNet model)"),yJo=l(),u6=a("li"),Due=a("strong"),LJo=o("yoso"),xJo=o(" \u2014 "),iz=a("a"),$Jo=o("YosoForQuestionAnswering"),kJo=o(" (YOSO model)"),SJo=l(),_6=a("p"),RJo=o("The model is set in evaluation mode by default using "),Gue=a("code"),PJo=o("model.eval()"),BJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),IJo=o("model.train()"),NJo=l(),F(b6.$$.fragment),LDe=l(),dd=a("h2"),v6=a("a"),Vue=a("span"),F(yy.$$.fragment),qJo=l(),Xue=a("span"),jJo=o("AutoModelForTableQuestionAnswering"),xDe=l(),jo=a("div"),F(Ly.$$.fragment),DJo=l(),cd=a("p"),GJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=a("a"),OJo=o("from_pretrained()"),VJo=o(" class method or the "),cz=a("a"),XJo=o("from_config()"),zJo=o(` class
method.`),WJo=l(),xy=a("p"),QJo=o("This class cannot be instantiated directly using "),zue=a("code"),HJo=o("__init__()"),UJo=o(" (throws an error)."),JJo=l(),pt=a("div"),F($y.$$.fragment),YJo=l(),Wue=a("p"),KJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZJo=l(),fd=a("p"),eYo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),oYo=o("not"),rYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),tYo=o("from_pretrained()"),aYo=o(" to load the model weights."),nYo=l(),F(F6.$$.fragment),sYo=l(),so=a("div"),F(ky.$$.fragment),lYo=l(),Hue=a("p"),iYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dYo=l(),Oa=a("p"),cYo=o("The model class to instantiate is selected based on the "),Uue=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),pYo=o("pretrained_model_name_or_path"),uYo=o(":"),_Yo=l(),Kue=a("ul"),T6=a("li"),Zue=a("strong"),bYo=o("tapas"),vYo=o(" \u2014 "),mz=a("a"),FYo=o("TapasForQuestionAnswering"),TYo=o(" (TAPAS model)"),MYo=l(),M6=a("p"),EYo=o("The model is set in evaluation mode by default using "),e_e=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),AYo=o("model.train()"),yYo=l(),F(E6.$$.fragment),$De=l(),md=a("h2"),C6=a("a"),r_e=a("span"),F(Sy.$$.fragment),LYo=l(),t_e=a("span"),xYo=o("AutoModelForImageClassification"),kDe=l(),Do=a("div"),F(Ry.$$.fragment),$Yo=l(),gd=a("p"),kYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gz=a("a"),SYo=o("from_pretrained()"),RYo=o(" class method or the "),hz=a("a"),PYo=o("from_config()"),BYo=o(` class
method.`),IYo=l(),Py=a("p"),NYo=o("This class cannot be instantiated directly using "),a_e=a("code"),qYo=o("__init__()"),jYo=o(" (throws an error)."),DYo=l(),ut=a("div"),F(By.$$.fragment),GYo=l(),n_e=a("p"),OYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VYo=l(),hd=a("p"),XYo=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),zYo=o("not"),WYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),QYo=o("from_pretrained()"),HYo=o(" to load the model weights."),UYo=l(),F(w6.$$.fragment),JYo=l(),lo=a("div"),F(Iy.$$.fragment),YYo=l(),l_e=a("p"),KYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZYo=l(),Va=a("p"),eKo=o("The model class to instantiate is selected based on the "),i_e=a("code"),oKo=o("model_type"),rKo=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(":"),lKo=l(),ve=a("ul"),A6=a("li"),f_e=a("strong"),iKo=o("beit"),dKo=o(" \u2014 "),uz=a("a"),cKo=o("BeitForImageClassification"),fKo=o(" (BEiT model)"),mKo=l(),y6=a("li"),m_e=a("strong"),gKo=o("convnext"),hKo=o(" \u2014 "),_z=a("a"),pKo=o("ConvNextForImageClassification"),uKo=o(" (ConvNeXT model)"),_Ko=l(),L6=a("li"),g_e=a("strong"),bKo=o("cvt"),vKo=o(" \u2014 "),bz=a("a"),FKo=o("CvtForImageClassification"),TKo=o(" (CvT model)"),MKo=l(),x6=a("li"),h_e=a("strong"),EKo=o("data2vec-vision"),CKo=o(" \u2014 "),vz=a("a"),wKo=o("Data2VecVisionForImageClassification"),AKo=o(" (Data2VecVision model)"),yKo=l(),Gs=a("li"),p_e=a("strong"),LKo=o("deit"),xKo=o(" \u2014 "),Fz=a("a"),$Ko=o("DeiTForImageClassification"),kKo=o(" or "),Tz=a("a"),SKo=o("DeiTForImageClassificationWithTeacher"),RKo=o(" (DeiT model)"),PKo=l(),$6=a("li"),u_e=a("strong"),BKo=o("imagegpt"),IKo=o(" \u2014 "),Mz=a("a"),NKo=o("ImageGPTForImageClassification"),qKo=o(" (ImageGPT model)"),jKo=l(),Os=a("li"),__e=a("strong"),DKo=o("levit"),GKo=o(" \u2014 "),Ez=a("a"),OKo=o("LevitForImageClassification"),VKo=o(" or "),Cz=a("a"),XKo=o("LevitForImageClassificationWithTeacher"),zKo=o(" (LeViT model)"),WKo=l(),_t=a("li"),b_e=a("strong"),QKo=o("perceiver"),HKo=o(" \u2014 "),wz=a("a"),UKo=o("PerceiverForImageClassificationLearned"),JKo=o(" or "),Az=a("a"),YKo=o("PerceiverForImageClassificationFourier"),KKo=o(" or "),yz=a("a"),ZKo=o("PerceiverForImageClassificationConvProcessing"),eZo=o(" (Perceiver model)"),oZo=l(),k6=a("li"),v_e=a("strong"),rZo=o("poolformer"),tZo=o(" \u2014 "),Lz=a("a"),aZo=o("PoolFormerForImageClassification"),nZo=o(" (PoolFormer model)"),sZo=l(),S6=a("li"),F_e=a("strong"),lZo=o("regnet"),iZo=o(" \u2014 "),xz=a("a"),dZo=o("RegNetForImageClassification"),cZo=o(" (RegNet model)"),fZo=l(),R6=a("li"),T_e=a("strong"),mZo=o("resnet"),gZo=o(" \u2014 "),$z=a("a"),hZo=o("ResNetForImageClassification"),pZo=o(" (ResNet model)"),uZo=l(),P6=a("li"),M_e=a("strong"),_Zo=o("segformer"),bZo=o(" \u2014 "),kz=a("a"),vZo=o("SegformerForImageClassification"),FZo=o(" (SegFormer model)"),TZo=l(),B6=a("li"),E_e=a("strong"),MZo=o("swin"),EZo=o(" \u2014 "),Sz=a("a"),CZo=o("SwinForImageClassification"),wZo=o(" (Swin Transformer model)"),AZo=l(),I6=a("li"),C_e=a("strong"),yZo=o("van"),LZo=o(" \u2014 "),Rz=a("a"),xZo=o("VanForImageClassification"),$Zo=o(" (VAN model)"),kZo=l(),N6=a("li"),w_e=a("strong"),SZo=o("vit"),RZo=o(" \u2014 "),Pz=a("a"),PZo=o("ViTForImageClassification"),BZo=o(" (ViT model)"),IZo=l(),q6=a("p"),NZo=o("The model is set in evaluation mode by default using "),A_e=a("code"),qZo=o("model.eval()"),jZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),DZo=o("model.train()"),GZo=l(),F(j6.$$.fragment),SDe=l(),pd=a("h2"),D6=a("a"),L_e=a("span"),F(Ny.$$.fragment),OZo=l(),x_e=a("span"),VZo=o("AutoModelForVision2Seq"),RDe=l(),Go=a("div"),F(qy.$$.fragment),XZo=l(),ud=a("p"),zZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bz=a("a"),WZo=o("from_pretrained()"),QZo=o(" class method or the "),Iz=a("a"),HZo=o("from_config()"),UZo=o(` class
method.`),JZo=l(),jy=a("p"),YZo=o("This class cannot be instantiated directly using "),$_e=a("code"),KZo=o("__init__()"),ZZo=o(" (throws an error)."),eer=l(),bt=a("div"),F(Dy.$$.fragment),oer=l(),k_e=a("p"),rer=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ter=l(),_d=a("p"),aer=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),ner=o("not"),ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),ler=o("from_pretrained()"),ier=o(" to load the model weights."),der=l(),F(G6.$$.fragment),cer=l(),io=a("div"),F(Gy.$$.fragment),fer=l(),R_e=a("p"),mer=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ger=l(),Xa=a("p"),her=o("The model class to instantiate is selected based on the "),P_e=a("code"),per=o("model_type"),uer=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),_er=o("pretrained_model_name_or_path"),ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(":"),Ter=l(),N_e=a("ul"),O6=a("li"),q_e=a("strong"),Mer=o("vision-encoder-decoder"),Eer=o(" \u2014 "),qz=a("a"),Cer=o("VisionEncoderDecoderModel"),wer=o(" (Vision Encoder decoder model)"),Aer=l(),V6=a("p"),yer=o("The model is set in evaluation mode by default using "),j_e=a("code"),Ler=o("model.eval()"),xer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),$er=o("model.train()"),ker=l(),F(X6.$$.fragment),PDe=l(),bd=a("h2"),z6=a("a"),G_e=a("span"),F(Oy.$$.fragment),Ser=l(),O_e=a("span"),Rer=o("AutoModelForVisualQuestionAnswering"),BDe=l(),Oo=a("div"),F(Vy.$$.fragment),Per=l(),vd=a("p"),Ber=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jz=a("a"),Ier=o("from_pretrained()"),Ner=o(" class method or the "),Dz=a("a"),qer=o("from_config()"),jer=o(` class
method.`),Der=l(),Xy=a("p"),Ger=o("This class cannot be instantiated directly using "),V_e=a("code"),Oer=o("__init__()"),Ver=o(" (throws an error)."),Xer=l(),vt=a("div"),F(zy.$$.fragment),zer=l(),X_e=a("p"),Wer=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Qer=l(),Fd=a("p"),Her=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),Uer=o("not"),Jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),Yer=o("from_pretrained()"),Ker=o(" to load the model weights."),Zer=l(),F(W6.$$.fragment),eor=l(),co=a("div"),F(Wy.$$.fragment),oor=l(),W_e=a("p"),ror=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),tor=l(),za=a("p"),aor=o("The model class to instantiate is selected based on the "),Q_e=a("code"),nor=o("model_type"),sor=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),dor=o("pretrained_model_name_or_path"),cor=o(":"),mor=l(),J_e=a("ul"),Q6=a("li"),Y_e=a("strong"),gor=o("vilt"),hor=o(" \u2014 "),Oz=a("a"),por=o("ViltForQuestionAnswering"),uor=o(" (ViLT model)"),_or=l(),H6=a("p"),bor=o("The model is set in evaluation mode by default using "),K_e=a("code"),vor=o("model.eval()"),For=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Tor=o("model.train()"),Mor=l(),F(U6.$$.fragment),IDe=l(),Td=a("h2"),J6=a("a"),e2e=a("span"),F(Qy.$$.fragment),Eor=l(),o2e=a("span"),Cor=o("AutoModelForAudioClassification"),NDe=l(),Vo=a("div"),F(Hy.$$.fragment),wor=l(),Md=a("p"),Aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Vz=a("a"),yor=o("from_pretrained()"),Lor=o(" class method or the "),Xz=a("a"),xor=o("from_config()"),$or=o(` class
method.`),kor=l(),Uy=a("p"),Sor=o("This class cannot be instantiated directly using "),r2e=a("code"),Ror=o("__init__()"),Por=o(" (throws an error)."),Bor=l(),Ft=a("div"),F(Jy.$$.fragment),Ior=l(),t2e=a("p"),Nor=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qor=l(),Ed=a("p"),jor=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),Dor=o("not"),Gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Oor=o("from_pretrained()"),Vor=o(" to load the model weights."),Xor=l(),F(Y6.$$.fragment),zor=l(),fo=a("div"),F(Yy.$$.fragment),Wor=l(),n2e=a("p"),Qor=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Hor=l(),Wa=a("p"),Uor=o("The model class to instantiate is selected based on the "),s2e=a("code"),Jor=o("model_type"),Yor=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),err=o("pretrained_model_name_or_path"),orr=o(":"),rrr=l(),Re=a("ul"),K6=a("li"),d2e=a("strong"),trr=o("data2vec-audio"),arr=o(" \u2014 "),Wz=a("a"),nrr=o("Data2VecAudioForSequenceClassification"),srr=o(" (Data2VecAudio model)"),lrr=l(),Z6=a("li"),c2e=a("strong"),irr=o("hubert"),drr=o(" \u2014 "),Qz=a("a"),crr=o("HubertForSequenceClassification"),frr=o(" (Hubert model)"),mrr=l(),eT=a("li"),f2e=a("strong"),grr=o("sew"),hrr=o(" \u2014 "),Hz=a("a"),prr=o("SEWForSequenceClassification"),urr=o(" (SEW model)"),_rr=l(),oT=a("li"),m2e=a("strong"),brr=o("sew-d"),vrr=o(" \u2014 "),Uz=a("a"),Frr=o("SEWDForSequenceClassification"),Trr=o(" (SEW-D model)"),Mrr=l(),rT=a("li"),g2e=a("strong"),Err=o("unispeech"),Crr=o(" \u2014 "),Jz=a("a"),wrr=o("UniSpeechForSequenceClassification"),Arr=o(" (UniSpeech model)"),yrr=l(),tT=a("li"),h2e=a("strong"),Lrr=o("unispeech-sat"),xrr=o(" \u2014 "),Yz=a("a"),$rr=o("UniSpeechSatForSequenceClassification"),krr=o(" (UniSpeechSat model)"),Srr=l(),aT=a("li"),p2e=a("strong"),Rrr=o("wav2vec2"),Prr=o(" \u2014 "),Kz=a("a"),Brr=o("Wav2Vec2ForSequenceClassification"),Irr=o(" (Wav2Vec2 model)"),Nrr=l(),nT=a("li"),u2e=a("strong"),qrr=o("wav2vec2-conformer"),jrr=o(" \u2014 "),Zz=a("a"),Drr=o("Wav2Vec2ConformerForSequenceClassification"),Grr=o(" (Wav2Vec2-Conformer model)"),Orr=l(),sT=a("li"),_2e=a("strong"),Vrr=o("wavlm"),Xrr=o(" \u2014 "),eW=a("a"),zrr=o("WavLMForSequenceClassification"),Wrr=o(" (WavLM model)"),Qrr=l(),lT=a("p"),Hrr=o("The model is set in evaluation mode by default using "),b2e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),Yrr=o("model.train()"),Krr=l(),F(iT.$$.fragment),qDe=l(),Cd=a("h2"),dT=a("a"),F2e=a("span"),F(Ky.$$.fragment),Zrr=l(),T2e=a("span"),etr=o("AutoModelForAudioFrameClassification"),jDe=l(),Xo=a("div"),F(Zy.$$.fragment),otr=l(),wd=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oW=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),rW=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),eL=a("p"),itr=o("This class cannot be instantiated directly using "),M2e=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),ftr=l(),Tt=a("div"),F(oL.$$.fragment),mtr=l(),E2e=a("p"),gtr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),htr=l(),Ad=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),utr=o("not"),_tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(cT.$$.fragment),Ttr=l(),mo=a("div"),F(rL.$$.fragment),Mtr=l(),w2e=a("p"),Etr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ctr=l(),Qa=a("p"),wtr=o("The model class to instantiate is selected based on the "),A2e=a("code"),Atr=o("model_type"),ytr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),et=a("ul"),fT=a("li"),x2e=a("strong"),Rtr=o("data2vec-audio"),Ptr=o(" \u2014 "),aW=a("a"),Btr=o("Data2VecAudioForAudioFrameClassification"),Itr=o(" (Data2VecAudio model)"),Ntr=l(),mT=a("li"),$2e=a("strong"),qtr=o("unispeech-sat"),jtr=o(" \u2014 "),nW=a("a"),Dtr=o("UniSpeechSatForAudioFrameClassification"),Gtr=o(" (UniSpeechSat model)"),Otr=l(),gT=a("li"),k2e=a("strong"),Vtr=o("wav2vec2"),Xtr=o(" \u2014 "),sW=a("a"),ztr=o("Wav2Vec2ForAudioFrameClassification"),Wtr=o(" (Wav2Vec2 model)"),Qtr=l(),hT=a("li"),S2e=a("strong"),Htr=o("wav2vec2-conformer"),Utr=o(" \u2014 "),lW=a("a"),Jtr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ytr=o(" (Wav2Vec2-Conformer model)"),Ktr=l(),pT=a("li"),R2e=a("strong"),Ztr=o("wavlm"),ear=o(" \u2014 "),iW=a("a"),oar=o("WavLMForAudioFrameClassification"),rar=o(" (WavLM model)"),tar=l(),uT=a("p"),aar=o("The model is set in evaluation mode by default using "),P2e=a("code"),nar=o("model.eval()"),sar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),lar=o("model.train()"),iar=l(),F(_T.$$.fragment),DDe=l(),yd=a("h2"),bT=a("a"),I2e=a("span"),F(tL.$$.fragment),dar=l(),N2e=a("span"),car=o("AutoModelForCTC"),GDe=l(),zo=a("div"),F(aL.$$.fragment),far=l(),Ld=a("p"),mar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dW=a("a"),gar=o("from_pretrained()"),har=o(" class method or the "),cW=a("a"),par=o("from_config()"),uar=o(` class
method.`),_ar=l(),nL=a("p"),bar=o("This class cannot be instantiated directly using "),q2e=a("code"),Far=o("__init__()"),Tar=o(" (throws an error)."),Mar=l(),Mt=a("div"),F(sL.$$.fragment),Ear=l(),j2e=a("p"),Car=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),war=l(),xd=a("p"),Aar=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),yar=o("not"),Lar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),xar=o("from_pretrained()"),$ar=o(" to load the model weights."),kar=l(),F(vT.$$.fragment),Sar=l(),go=a("div"),F(lL.$$.fragment),Rar=l(),G2e=a("p"),Par=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Bar=l(),Ha=a("p"),Iar=o("The model class to instantiate is selected based on the "),O2e=a("code"),Nar=o("model_type"),qar=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),Gar=o("pretrained_model_name_or_path"),Oar=o(":"),Var=l(),ye=a("ul"),FT=a("li"),z2e=a("strong"),Xar=o("data2vec-audio"),zar=o(" \u2014 "),mW=a("a"),War=o("Data2VecAudioForCTC"),Qar=o(" (Data2VecAudio model)"),Har=l(),TT=a("li"),W2e=a("strong"),Uar=o("hubert"),Jar=o(" \u2014 "),gW=a("a"),Yar=o("HubertForCTC"),Kar=o(" (Hubert model)"),Zar=l(),MT=a("li"),Q2e=a("strong"),enr=o("mctct"),onr=o(" \u2014 "),hW=a("a"),rnr=o("MCTCTForCTC"),tnr=o(" (M-CTC-T model)"),anr=l(),ET=a("li"),H2e=a("strong"),nnr=o("sew"),snr=o(" \u2014 "),pW=a("a"),lnr=o("SEWForCTC"),inr=o(" (SEW model)"),dnr=l(),CT=a("li"),U2e=a("strong"),cnr=o("sew-d"),fnr=o(" \u2014 "),uW=a("a"),mnr=o("SEWDForCTC"),gnr=o(" (SEW-D model)"),hnr=l(),wT=a("li"),J2e=a("strong"),pnr=o("unispeech"),unr=o(" \u2014 "),_W=a("a"),_nr=o("UniSpeechForCTC"),bnr=o(" (UniSpeech model)"),vnr=l(),AT=a("li"),Y2e=a("strong"),Fnr=o("unispeech-sat"),Tnr=o(" \u2014 "),bW=a("a"),Mnr=o("UniSpeechSatForCTC"),Enr=o(" (UniSpeechSat model)"),Cnr=l(),yT=a("li"),K2e=a("strong"),wnr=o("wav2vec2"),Anr=o(" \u2014 "),vW=a("a"),ynr=o("Wav2Vec2ForCTC"),Lnr=o(" (Wav2Vec2 model)"),xnr=l(),LT=a("li"),Z2e=a("strong"),$nr=o("wav2vec2-conformer"),knr=o(" \u2014 "),FW=a("a"),Snr=o("Wav2Vec2ConformerForCTC"),Rnr=o(" (Wav2Vec2-Conformer model)"),Pnr=l(),xT=a("li"),e1e=a("strong"),Bnr=o("wavlm"),Inr=o(" \u2014 "),TW=a("a"),Nnr=o("WavLMForCTC"),qnr=o(" (WavLM model)"),jnr=l(),$T=a("p"),Dnr=o("The model is set in evaluation mode by default using "),o1e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(kT.$$.fragment),ODe=l(),$d=a("h2"),ST=a("a"),t1e=a("span"),F(iL.$$.fragment),znr=l(),a1e=a("span"),Wnr=o("AutoModelForSpeechSeq2Seq"),VDe=l(),Wo=a("div"),F(dL.$$.fragment),Qnr=l(),kd=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),EW=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),cL=a("p"),esr=o("This class cannot be instantiated directly using "),n1e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Et=a("div"),F(fL.$$.fragment),asr=l(),s1e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ssr=l(),Sd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(RT.$$.fragment),gsr=l(),ho=a("div"),F(mL.$$.fragment),hsr=l(),i1e=a("p"),psr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),usr=l(),Ua=a("p"),_sr=o("The model class to instantiate is selected based on the "),d1e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),gL=a("ul"),PT=a("li"),m1e=a("strong"),wsr=o("speech-encoder-decoder"),Asr=o(" \u2014 "),wW=a("a"),ysr=o("SpeechEncoderDecoderModel"),Lsr=o(" (Speech Encoder decoder model)"),xsr=l(),BT=a("li"),g1e=a("strong"),$sr=o("speech_to_text"),ksr=o(" \u2014 "),AW=a("a"),Ssr=o("Speech2TextForConditionalGeneration"),Rsr=o(" (Speech2Text model)"),Psr=l(),IT=a("p"),Bsr=o("The model is set in evaluation mode by default using "),h1e=a("code"),Isr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),qsr=o("model.train()"),jsr=l(),F(NT.$$.fragment),XDe=l(),Rd=a("h2"),qT=a("a"),u1e=a("span"),F(hL.$$.fragment),Dsr=l(),_1e=a("span"),Gsr=o("AutoModelForAudioXVector"),zDe=l(),Qo=a("div"),F(pL.$$.fragment),Osr=l(),Pd=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),LW=a("a"),Wsr=o("from_config()"),Qsr=o(` class
method.`),Hsr=l(),uL=a("p"),Usr=o("This class cannot be instantiated directly using "),b1e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),Ct=a("div"),F(_L.$$.fragment),Zsr=l(),v1e=a("p"),elr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),olr=l(),Bd=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(jT.$$.fragment),ilr=l(),po=a("div"),F(bL.$$.fragment),dlr=l(),T1e=a("p"),clr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),flr=l(),Ja=a("p"),mlr=o("The model class to instantiate is selected based on the "),M1e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),plr=o("pretrained_model_name_or_path"),ulr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),_lr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),ot=a("ul"),DT=a("li"),w1e=a("strong"),Flr=o("data2vec-audio"),Tlr=o(" \u2014 "),$W=a("a"),Mlr=o("Data2VecAudioForXVector"),Elr=o(" (Data2VecAudio model)"),Clr=l(),GT=a("li"),A1e=a("strong"),wlr=o("unispeech-sat"),Alr=o(" \u2014 "),kW=a("a"),ylr=o("UniSpeechSatForXVector"),Llr=o(" (UniSpeechSat model)"),xlr=l(),OT=a("li"),y1e=a("strong"),$lr=o("wav2vec2"),klr=o(" \u2014 "),SW=a("a"),Slr=o("Wav2Vec2ForXVector"),Rlr=o(" (Wav2Vec2 model)"),Plr=l(),VT=a("li"),L1e=a("strong"),Blr=o("wav2vec2-conformer"),Ilr=o(" \u2014 "),RW=a("a"),Nlr=o("Wav2Vec2ConformerForXVector"),qlr=o(" (Wav2Vec2-Conformer model)"),jlr=l(),XT=a("li"),x1e=a("strong"),Dlr=o("wavlm"),Glr=o(" \u2014 "),PW=a("a"),Olr=o("WavLMForXVector"),Vlr=o(" (WavLM model)"),Xlr=l(),zT=a("p"),zlr=o("The model is set in evaluation mode by default using "),$1e=a("code"),Wlr=o("model.eval()"),Qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),Hlr=o("model.train()"),Ulr=l(),F(WT.$$.fragment),WDe=l(),Id=a("h2"),QT=a("a"),S1e=a("span"),F(vL.$$.fragment),Jlr=l(),R1e=a("span"),Ylr=o("AutoModelForMaskedImageModeling"),QDe=l(),Ho=a("div"),F(FL.$$.fragment),Klr=l(),Nd=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BW=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),IW=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),TL=a("p"),nir=o("This class cannot be instantiated directly using "),P1e=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),wt=a("div"),F(ML.$$.fragment),dir=l(),B1e=a("p"),cir=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fir=l(),qd=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),pir=o("from_pretrained()"),uir=o(" to load the model weights."),_ir=l(),F(HT.$$.fragment),bir=l(),uo=a("div"),F(EL.$$.fragment),vir=l(),N1e=a("p"),Fir=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tir=l(),Ya=a("p"),Mir=o("The model class to instantiate is selected based on the "),q1e=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(":"),xir=l(),jd=a("ul"),UT=a("li"),G1e=a("strong"),$ir=o("deit"),kir=o(" \u2014 "),qW=a("a"),Sir=o("DeiTForMaskedImageModeling"),Rir=o(" (DeiT model)"),Pir=l(),JT=a("li"),O1e=a("strong"),Bir=o("swin"),Iir=o(" \u2014 "),jW=a("a"),Nir=o("SwinForMaskedImageModeling"),qir=o(" (Swin Transformer model)"),jir=l(),YT=a("li"),V1e=a("strong"),Dir=o("vit"),Gir=o(" \u2014 "),DW=a("a"),Oir=o("ViTForMaskedImageModeling"),Vir=o(" (ViT model)"),Xir=l(),KT=a("p"),zir=o("The model is set in evaluation mode by default using "),X1e=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Hir=o("model.train()"),Uir=l(),F(ZT.$$.fragment),HDe=l(),Dd=a("h2"),e7=a("a"),W1e=a("span"),F(CL.$$.fragment),Jir=l(),Q1e=a("span"),Yir=o("AutoModelForObjectDetection"),UDe=l(),Uo=a("div"),F(wL.$$.fragment),Kir=l(),Gd=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),GW=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),OW=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),AL=a("p"),ndr=o("This class cannot be instantiated directly using "),H1e=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),At=a("div"),F(yL.$$.fragment),ddr=l(),U1e=a("p"),cdr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fdr=l(),Od=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),pdr=o("from_pretrained()"),udr=o(" to load the model weights."),_dr=l(),F(o7.$$.fragment),bdr=l(),_o=a("div"),F(LL.$$.fragment),vdr=l(),Y1e=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Tdr=l(),Ka=a("p"),Mdr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),xL=a("ul"),r7=a("li"),obe=a("strong"),$dr=o("detr"),kdr=o(" \u2014 "),XW=a("a"),Sdr=o("DetrForObjectDetection"),Rdr=o(" (DETR model)"),Pdr=l(),t7=a("li"),rbe=a("strong"),Bdr=o("yolos"),Idr=o(" \u2014 "),zW=a("a"),Ndr=o("YolosForObjectDetection"),qdr=o(" (YOLOS model)"),jdr=l(),a7=a("p"),Ddr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Gdr=o("model.eval()"),Odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),Vdr=o("model.train()"),Xdr=l(),F(n7.$$.fragment),JDe=l(),Vd=a("h2"),s7=a("a"),nbe=a("span"),F($L.$$.fragment),zdr=l(),sbe=a("span"),Wdr=o("AutoModelForImageSegmentation"),YDe=l(),Jo=a("div"),F(kL.$$.fragment),Qdr=l(),Xd=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),QW=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),SL=a("p"),ecr=o("This class cannot be instantiated directly using "),lbe=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),yt=a("div"),F(RL.$$.fragment),acr=l(),ibe=a("p"),ncr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),scr=l(),zd=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),F(l7.$$.fragment),gcr=l(),bo=a("div"),F(PL.$$.fragment),hcr=l(),cbe=a("p"),pcr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ucr=l(),Za=a("p"),_cr=o("The model class to instantiate is selected based on the "),fbe=a("code"),bcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(":"),Ccr=l(),hbe=a("ul"),i7=a("li"),pbe=a("strong"),wcr=o("detr"),Acr=o(" \u2014 "),UW=a("a"),ycr=o("DetrForSegmentation"),Lcr=o(" (DETR model)"),xcr=l(),d7=a("p"),$cr=o("The model is set in evaluation mode by default using "),ube=a("code"),kcr=o("model.eval()"),Scr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Rcr=o("model.train()"),Pcr=l(),F(c7.$$.fragment),KDe=l(),Wd=a("h2"),f7=a("a"),bbe=a("span"),F(BL.$$.fragment),Bcr=l(),vbe=a("span"),Icr=o("AutoModelForSemanticSegmentation"),ZDe=l(),Yo=a("div"),F(IL.$$.fragment),Ncr=l(),Qd=a("p"),qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),JW=a("a"),jcr=o("from_pretrained()"),Dcr=o(" class method or the "),YW=a("a"),Gcr=o("from_config()"),Ocr=o(` class
method.`),Vcr=l(),NL=a("p"),Xcr=o("This class cannot be instantiated directly using "),Fbe=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),Lt=a("div"),F(qL.$$.fragment),Hcr=l(),Tbe=a("p"),Ucr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jcr=l(),Hd=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),efr=o("from_pretrained()"),ofr=o(" to load the model weights."),rfr=l(),F(m7.$$.fragment),tfr=l(),vo=a("div"),F(jL.$$.fragment),afr=l(),Ebe=a("p"),nfr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sfr=l(),en=a("p"),lfr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),cfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),on=a("ul"),g7=a("li"),ybe=a("strong"),pfr=o("beit"),ufr=o(" \u2014 "),ZW=a("a"),_fr=o("BeitForSemanticSegmentation"),bfr=o(" (BEiT model)"),vfr=l(),h7=a("li"),Lbe=a("strong"),Ffr=o("data2vec-vision"),Tfr=o(" \u2014 "),eQ=a("a"),Mfr=o("Data2VecVisionForSemanticSegmentation"),Efr=o(" (Data2VecVision model)"),Cfr=l(),p7=a("li"),xbe=a("strong"),wfr=o("dpt"),Afr=o(" \u2014 "),oQ=a("a"),yfr=o("DPTForSemanticSegmentation"),Lfr=o(" (DPT model)"),xfr=l(),u7=a("li"),$be=a("strong"),$fr=o("segformer"),kfr=o(" \u2014 "),rQ=a("a"),Sfr=o("SegformerForSemanticSegmentation"),Rfr=o(" (SegFormer model)"),Pfr=l(),_7=a("p"),Bfr=o("The model is set in evaluation mode by default using "),kbe=a("code"),Ifr=o("model.eval()"),Nfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),qfr=o("model.train()"),jfr=l(),F(b7.$$.fragment),eGe=l(),Ud=a("h2"),v7=a("a"),Rbe=a("span"),F(DL.$$.fragment),Dfr=l(),Pbe=a("span"),Gfr=o("AutoModelForInstanceSegmentation"),oGe=l(),Ko=a("div"),F(GL.$$.fragment),Ofr=l(),Jd=a("p"),Vfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tQ=a("a"),Xfr=o("from_pretrained()"),zfr=o(" class method or the "),aQ=a("a"),Wfr=o("from_config()"),Qfr=o(` class
method.`),Hfr=l(),OL=a("p"),Ufr=o("This class cannot be instantiated directly using "),Bbe=a("code"),Jfr=o("__init__()"),Yfr=o(" (throws an error)."),Kfr=l(),xt=a("div"),F(VL.$$.fragment),Zfr=l(),Ibe=a("p"),emr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),omr=l(),Yd=a("p"),rmr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),tmr=o("not"),amr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),nmr=o("from_pretrained()"),smr=o(" to load the model weights."),lmr=l(),F(F7.$$.fragment),imr=l(),Fo=a("div"),F(XL.$$.fragment),dmr=l(),qbe=a("p"),cmr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fmr=l(),rn=a("p"),mmr=o("The model class to instantiate is selected based on the "),jbe=a("code"),gmr=o("model_type"),hmr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),pmr=o("pretrained_model_name_or_path"),umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),_mr=o("pretrained_model_name_or_path"),bmr=o(":"),vmr=l(),Obe=a("ul"),T7=a("li"),Vbe=a("strong"),Fmr=o("maskformer"),Tmr=o(" \u2014 "),sQ=a("a"),Mmr=o("MaskFormerForInstanceSegmentation"),Emr=o(" (MaskFormer model)"),Cmr=l(),M7=a("p"),wmr=o("The model is set in evaluation mode by default using "),Xbe=a("code"),Amr=o("model.eval()"),ymr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=a("code"),Lmr=o("model.train()"),xmr=l(),F(E7.$$.fragment),rGe=l(),Kd=a("h2"),C7=a("a"),Wbe=a("span"),F(zL.$$.fragment),$mr=l(),Qbe=a("span"),kmr=o("TFAutoModel"),tGe=l(),Zo=a("div"),F(WL.$$.fragment),Smr=l(),Zd=a("p"),Rmr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lQ=a("a"),Pmr=o("from_pretrained()"),Bmr=o(" class method or the "),iQ=a("a"),Imr=o("from_config()"),Nmr=o(` class
method.`),qmr=l(),QL=a("p"),jmr=o("This class cannot be instantiated directly using "),Hbe=a("code"),Dmr=o("__init__()"),Gmr=o(" (throws an error)."),Omr=l(),$t=a("div"),F(HL.$$.fragment),Vmr=l(),Ube=a("p"),Xmr=o("Instantiates one of the base model classes of the library from a configuration."),zmr=l(),ec=a("p"),Wmr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),Qmr=o("not"),Hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),Umr=o("from_pretrained()"),Jmr=o(" to load the model weights."),Ymr=l(),F(w7.$$.fragment),Kmr=l(),yr=a("div"),F(UL.$$.fragment),Zmr=l(),Ybe=a("p"),egr=o("Instantiate one of the base model classes of the library from a pretrained model."),ogr=l(),tn=a("p"),rgr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),tgr=o("model_type"),agr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),ngr=o("pretrained_model_name_or_path"),sgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(":"),dgr=l(),q=a("ul"),A7=a("li"),ove=a("strong"),cgr=o("albert"),fgr=o(" \u2014 "),cQ=a("a"),mgr=o("TFAlbertModel"),ggr=o(" (ALBERT model)"),hgr=l(),y7=a("li"),rve=a("strong"),pgr=o("bart"),ugr=o(" \u2014 "),fQ=a("a"),_gr=o("TFBartModel"),bgr=o(" (BART model)"),vgr=l(),L7=a("li"),tve=a("strong"),Fgr=o("bert"),Tgr=o(" \u2014 "),mQ=a("a"),Mgr=o("TFBertModel"),Egr=o(" (BERT model)"),Cgr=l(),x7=a("li"),ave=a("strong"),wgr=o("blenderbot"),Agr=o(" \u2014 "),gQ=a("a"),ygr=o("TFBlenderbotModel"),Lgr=o(" (Blenderbot model)"),xgr=l(),$7=a("li"),nve=a("strong"),$gr=o("blenderbot-small"),kgr=o(" \u2014 "),hQ=a("a"),Sgr=o("TFBlenderbotSmallModel"),Rgr=o(" (BlenderbotSmall model)"),Pgr=l(),k7=a("li"),sve=a("strong"),Bgr=o("camembert"),Igr=o(" \u2014 "),pQ=a("a"),Ngr=o("TFCamembertModel"),qgr=o(" (CamemBERT model)"),jgr=l(),S7=a("li"),lve=a("strong"),Dgr=o("clip"),Ggr=o(" \u2014 "),uQ=a("a"),Ogr=o("TFCLIPModel"),Vgr=o(" (CLIP model)"),Xgr=l(),R7=a("li"),ive=a("strong"),zgr=o("convbert"),Wgr=o(" \u2014 "),_Q=a("a"),Qgr=o("TFConvBertModel"),Hgr=o(" (ConvBERT model)"),Ugr=l(),P7=a("li"),dve=a("strong"),Jgr=o("convnext"),Ygr=o(" \u2014 "),bQ=a("a"),Kgr=o("TFConvNextModel"),Zgr=o(" (ConvNeXT model)"),ehr=l(),B7=a("li"),cve=a("strong"),ohr=o("ctrl"),rhr=o(" \u2014 "),vQ=a("a"),thr=o("TFCTRLModel"),ahr=o(" (CTRL model)"),nhr=l(),I7=a("li"),fve=a("strong"),shr=o("data2vec-vision"),lhr=o(" \u2014 "),FQ=a("a"),ihr=o("TFData2VecVisionModel"),dhr=o(" (Data2VecVision model)"),chr=l(),N7=a("li"),mve=a("strong"),fhr=o("deberta"),mhr=o(" \u2014 "),TQ=a("a"),ghr=o("TFDebertaModel"),hhr=o(" (DeBERTa model)"),phr=l(),q7=a("li"),gve=a("strong"),uhr=o("deberta-v2"),_hr=o(" \u2014 "),MQ=a("a"),bhr=o("TFDebertaV2Model"),vhr=o(" (DeBERTa-v2 model)"),Fhr=l(),j7=a("li"),hve=a("strong"),Thr=o("distilbert"),Mhr=o(" \u2014 "),EQ=a("a"),Ehr=o("TFDistilBertModel"),Chr=o(" (DistilBERT model)"),whr=l(),D7=a("li"),pve=a("strong"),Ahr=o("dpr"),yhr=o(" \u2014 "),CQ=a("a"),Lhr=o("TFDPRQuestionEncoder"),xhr=o(" (DPR model)"),$hr=l(),G7=a("li"),uve=a("strong"),khr=o("electra"),Shr=o(" \u2014 "),wQ=a("a"),Rhr=o("TFElectraModel"),Phr=o(" (ELECTRA model)"),Bhr=l(),O7=a("li"),_ve=a("strong"),Ihr=o("flaubert"),Nhr=o(" \u2014 "),AQ=a("a"),qhr=o("TFFlaubertModel"),jhr=o(" (FlauBERT model)"),Dhr=l(),Vs=a("li"),bve=a("strong"),Ghr=o("funnel"),Ohr=o(" \u2014 "),yQ=a("a"),Vhr=o("TFFunnelModel"),Xhr=o(" or "),LQ=a("a"),zhr=o("TFFunnelBaseModel"),Whr=o(" (Funnel Transformer model)"),Qhr=l(),V7=a("li"),vve=a("strong"),Hhr=o("gpt2"),Uhr=o(" \u2014 "),xQ=a("a"),Jhr=o("TFGPT2Model"),Yhr=o(" (OpenAI GPT-2 model)"),Khr=l(),X7=a("li"),Fve=a("strong"),Zhr=o("gptj"),epr=o(" \u2014 "),$Q=a("a"),opr=o("TFGPTJModel"),rpr=o(" (GPT-J model)"),tpr=l(),z7=a("li"),Tve=a("strong"),apr=o("hubert"),npr=o(" \u2014 "),kQ=a("a"),spr=o("TFHubertModel"),lpr=o(" (Hubert model)"),ipr=l(),W7=a("li"),Mve=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),SQ=a("a"),fpr=o("TFLayoutLMModel"),mpr=o(" (LayoutLM model)"),gpr=l(),Q7=a("li"),Eve=a("strong"),hpr=o("led"),ppr=o(" \u2014 "),RQ=a("a"),upr=o("TFLEDModel"),_pr=o(" (LED model)"),bpr=l(),H7=a("li"),Cve=a("strong"),vpr=o("longformer"),Fpr=o(" \u2014 "),PQ=a("a"),Tpr=o("TFLongformerModel"),Mpr=o(" (Longformer model)"),Epr=l(),U7=a("li"),wve=a("strong"),Cpr=o("lxmert"),wpr=o(" \u2014 "),BQ=a("a"),Apr=o("TFLxmertModel"),ypr=o(" (LXMERT model)"),Lpr=l(),J7=a("li"),Ave=a("strong"),xpr=o("marian"),$pr=o(" \u2014 "),IQ=a("a"),kpr=o("TFMarianModel"),Spr=o(" (Marian model)"),Rpr=l(),Y7=a("li"),yve=a("strong"),Ppr=o("mbart"),Bpr=o(" \u2014 "),NQ=a("a"),Ipr=o("TFMBartModel"),Npr=o(" (mBART model)"),qpr=l(),K7=a("li"),Lve=a("strong"),jpr=o("mobilebert"),Dpr=o(" \u2014 "),qQ=a("a"),Gpr=o("TFMobileBertModel"),Opr=o(" (MobileBERT model)"),Vpr=l(),Z7=a("li"),xve=a("strong"),Xpr=o("mpnet"),zpr=o(" \u2014 "),jQ=a("a"),Wpr=o("TFMPNetModel"),Qpr=o(" (MPNet model)"),Hpr=l(),e8=a("li"),$ve=a("strong"),Upr=o("mt5"),Jpr=o(" \u2014 "),DQ=a("a"),Ypr=o("TFMT5Model"),Kpr=o(" (MT5 model)"),Zpr=l(),o8=a("li"),kve=a("strong"),eur=o("openai-gpt"),our=o(" \u2014 "),GQ=a("a"),rur=o("TFOpenAIGPTModel"),tur=o(" (OpenAI GPT model)"),aur=l(),r8=a("li"),Sve=a("strong"),nur=o("opt"),sur=o(" \u2014 "),OQ=a("a"),lur=o("TFOPTModel"),iur=o(" (OPT model)"),dur=l(),t8=a("li"),Rve=a("strong"),cur=o("pegasus"),fur=o(" \u2014 "),VQ=a("a"),mur=o("TFPegasusModel"),gur=o(" (Pegasus model)"),hur=l(),a8=a("li"),Pve=a("strong"),pur=o("rembert"),uur=o(" \u2014 "),XQ=a("a"),_ur=o("TFRemBertModel"),bur=o(" (RemBERT model)"),vur=l(),n8=a("li"),Bve=a("strong"),Fur=o("roberta"),Tur=o(" \u2014 "),zQ=a("a"),Mur=o("TFRobertaModel"),Eur=o(" (RoBERTa model)"),Cur=l(),s8=a("li"),Ive=a("strong"),wur=o("roformer"),Aur=o(" \u2014 "),WQ=a("a"),yur=o("TFRoFormerModel"),Lur=o(" (RoFormer model)"),xur=l(),l8=a("li"),Nve=a("strong"),$ur=o("speech_to_text"),kur=o(" \u2014 "),QQ=a("a"),Sur=o("TFSpeech2TextModel"),Rur=o(" (Speech2Text model)"),Pur=l(),i8=a("li"),qve=a("strong"),Bur=o("swin"),Iur=o(" \u2014 "),HQ=a("a"),Nur=o("TFSwinModel"),qur=o(" (Swin Transformer model)"),jur=l(),d8=a("li"),jve=a("strong"),Dur=o("t5"),Gur=o(" \u2014 "),UQ=a("a"),Our=o("TFT5Model"),Vur=o(" (T5 model)"),Xur=l(),c8=a("li"),Dve=a("strong"),zur=o("tapas"),Wur=o(" \u2014 "),JQ=a("a"),Qur=o("TFTapasModel"),Hur=o(" (TAPAS model)"),Uur=l(),f8=a("li"),Gve=a("strong"),Jur=o("transfo-xl"),Yur=o(" \u2014 "),YQ=a("a"),Kur=o("TFTransfoXLModel"),Zur=o(" (Transformer-XL model)"),e_r=l(),m8=a("li"),Ove=a("strong"),o_r=o("vit"),r_r=o(" \u2014 "),KQ=a("a"),t_r=o("TFViTModel"),a_r=o(" (ViT model)"),n_r=l(),g8=a("li"),Vve=a("strong"),s_r=o("vit_mae"),l_r=o(" \u2014 "),ZQ=a("a"),i_r=o("TFViTMAEModel"),d_r=o(" (ViTMAE model)"),c_r=l(),h8=a("li"),Xve=a("strong"),f_r=o("wav2vec2"),m_r=o(" \u2014 "),eH=a("a"),g_r=o("TFWav2Vec2Model"),h_r=o(" (Wav2Vec2 model)"),p_r=l(),p8=a("li"),zve=a("strong"),u_r=o("xlm"),__r=o(" \u2014 "),oH=a("a"),b_r=o("TFXLMModel"),v_r=o(" (XLM model)"),F_r=l(),u8=a("li"),Wve=a("strong"),T_r=o("xlm-roberta"),M_r=o(" \u2014 "),rH=a("a"),E_r=o("TFXLMRobertaModel"),C_r=o(" (XLM-RoBERTa model)"),w_r=l(),_8=a("li"),Qve=a("strong"),A_r=o("xlnet"),y_r=o(" \u2014 "),tH=a("a"),L_r=o("TFXLNetModel"),x_r=o(" (XLNet model)"),$_r=l(),F(b8.$$.fragment),aGe=l(),oc=a("h2"),v8=a("a"),Hve=a("span"),F(JL.$$.fragment),k_r=l(),Uve=a("span"),S_r=o("TFAutoModelForPreTraining"),nGe=l(),er=a("div"),F(YL.$$.fragment),R_r=l(),rc=a("p"),P_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aH=a("a"),B_r=o("from_pretrained()"),I_r=o(" class method or the "),nH=a("a"),N_r=o("from_config()"),q_r=o(` class
method.`),j_r=l(),KL=a("p"),D_r=o("This class cannot be instantiated directly using "),Jve=a("code"),G_r=o("__init__()"),O_r=o(" (throws an error)."),V_r=l(),kt=a("div"),F(ZL.$$.fragment),X_r=l(),Yve=a("p"),z_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W_r=l(),tc=a("p"),Q_r=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),H_r=o("not"),U_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),J_r=o("from_pretrained()"),Y_r=o(" to load the model weights."),K_r=l(),F(F8.$$.fragment),Z_r=l(),Lr=a("div"),F(e9.$$.fragment),e2r=l(),Zve=a("p"),o2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r2r=l(),an=a("p"),t2r=o("The model class to instantiate is selected based on the "),eFe=a("code"),a2r=o("model_type"),n2r=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(":"),c2r=l(),se=a("ul"),T8=a("li"),tFe=a("strong"),f2r=o("albert"),m2r=o(" \u2014 "),lH=a("a"),g2r=o("TFAlbertForPreTraining"),h2r=o(" (ALBERT model)"),p2r=l(),M8=a("li"),aFe=a("strong"),u2r=o("bart"),_2r=o(" \u2014 "),iH=a("a"),b2r=o("TFBartForConditionalGeneration"),v2r=o(" (BART model)"),F2r=l(),E8=a("li"),nFe=a("strong"),T2r=o("bert"),M2r=o(" \u2014 "),dH=a("a"),E2r=o("TFBertForPreTraining"),C2r=o(" (BERT model)"),w2r=l(),C8=a("li"),sFe=a("strong"),A2r=o("camembert"),y2r=o(" \u2014 "),cH=a("a"),L2r=o("TFCamembertForMaskedLM"),x2r=o(" (CamemBERT model)"),$2r=l(),w8=a("li"),lFe=a("strong"),k2r=o("ctrl"),S2r=o(" \u2014 "),fH=a("a"),R2r=o("TFCTRLLMHeadModel"),P2r=o(" (CTRL model)"),B2r=l(),A8=a("li"),iFe=a("strong"),I2r=o("distilbert"),N2r=o(" \u2014 "),mH=a("a"),q2r=o("TFDistilBertForMaskedLM"),j2r=o(" (DistilBERT model)"),D2r=l(),y8=a("li"),dFe=a("strong"),G2r=o("electra"),O2r=o(" \u2014 "),gH=a("a"),V2r=o("TFElectraForPreTraining"),X2r=o(" (ELECTRA model)"),z2r=l(),L8=a("li"),cFe=a("strong"),W2r=o("flaubert"),Q2r=o(" \u2014 "),hH=a("a"),H2r=o("TFFlaubertWithLMHeadModel"),U2r=o(" (FlauBERT model)"),J2r=l(),x8=a("li"),fFe=a("strong"),Y2r=o("funnel"),K2r=o(" \u2014 "),pH=a("a"),Z2r=o("TFFunnelForPreTraining"),e1r=o(" (Funnel Transformer model)"),o1r=l(),$8=a("li"),mFe=a("strong"),r1r=o("gpt2"),t1r=o(" \u2014 "),uH=a("a"),a1r=o("TFGPT2LMHeadModel"),n1r=o(" (OpenAI GPT-2 model)"),s1r=l(),k8=a("li"),gFe=a("strong"),l1r=o("layoutlm"),i1r=o(" \u2014 "),_H=a("a"),d1r=o("TFLayoutLMForMaskedLM"),c1r=o(" (LayoutLM model)"),f1r=l(),S8=a("li"),hFe=a("strong"),m1r=o("lxmert"),g1r=o(" \u2014 "),bH=a("a"),h1r=o("TFLxmertForPreTraining"),p1r=o(" (LXMERT model)"),u1r=l(),R8=a("li"),pFe=a("strong"),_1r=o("mobilebert"),b1r=o(" \u2014 "),vH=a("a"),v1r=o("TFMobileBertForPreTraining"),F1r=o(" (MobileBERT model)"),T1r=l(),P8=a("li"),uFe=a("strong"),M1r=o("mpnet"),E1r=o(" \u2014 "),FH=a("a"),C1r=o("TFMPNetForMaskedLM"),w1r=o(" (MPNet model)"),A1r=l(),B8=a("li"),_Fe=a("strong"),y1r=o("openai-gpt"),L1r=o(" \u2014 "),TH=a("a"),x1r=o("TFOpenAIGPTLMHeadModel"),$1r=o(" (OpenAI GPT model)"),k1r=l(),I8=a("li"),bFe=a("strong"),S1r=o("roberta"),R1r=o(" \u2014 "),MH=a("a"),P1r=o("TFRobertaForMaskedLM"),B1r=o(" (RoBERTa model)"),I1r=l(),N8=a("li"),vFe=a("strong"),N1r=o("t5"),q1r=o(" \u2014 "),EH=a("a"),j1r=o("TFT5ForConditionalGeneration"),D1r=o(" (T5 model)"),G1r=l(),q8=a("li"),FFe=a("strong"),O1r=o("tapas"),V1r=o(" \u2014 "),CH=a("a"),X1r=o("TFTapasForMaskedLM"),z1r=o(" (TAPAS model)"),W1r=l(),j8=a("li"),TFe=a("strong"),Q1r=o("transfo-xl"),H1r=o(" \u2014 "),wH=a("a"),U1r=o("TFTransfoXLLMHeadModel"),J1r=o(" (Transformer-XL model)"),Y1r=l(),D8=a("li"),MFe=a("strong"),K1r=o("vit_mae"),Z1r=o(" \u2014 "),AH=a("a"),ebr=o("TFViTMAEForPreTraining"),obr=o(" (ViTMAE model)"),rbr=l(),G8=a("li"),EFe=a("strong"),tbr=o("xlm"),abr=o(" \u2014 "),yH=a("a"),nbr=o("TFXLMWithLMHeadModel"),sbr=o(" (XLM model)"),lbr=l(),O8=a("li"),CFe=a("strong"),ibr=o("xlm-roberta"),dbr=o(" \u2014 "),LH=a("a"),cbr=o("TFXLMRobertaForMaskedLM"),fbr=o(" (XLM-RoBERTa model)"),mbr=l(),V8=a("li"),wFe=a("strong"),gbr=o("xlnet"),hbr=o(" \u2014 "),xH=a("a"),pbr=o("TFXLNetLMHeadModel"),ubr=o(" (XLNet model)"),_br=l(),F(X8.$$.fragment),sGe=l(),ac=a("h2"),z8=a("a"),AFe=a("span"),F(o9.$$.fragment),bbr=l(),yFe=a("span"),vbr=o("TFAutoModelForCausalLM"),lGe=l(),or=a("div"),F(r9.$$.fragment),Fbr=l(),nc=a("p"),Tbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$H=a("a"),Mbr=o("from_pretrained()"),Ebr=o(" class method or the "),kH=a("a"),Cbr=o("from_config()"),wbr=o(` class
method.`),Abr=l(),t9=a("p"),ybr=o("This class cannot be instantiated directly using "),LFe=a("code"),Lbr=o("__init__()"),xbr=o(" (throws an error)."),$br=l(),St=a("div"),F(a9.$$.fragment),kbr=l(),xFe=a("p"),Sbr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rbr=l(),sc=a("p"),Pbr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),Bbr=o("not"),Ibr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Nbr=o("from_pretrained()"),qbr=o(" to load the model weights."),jbr=l(),F(W8.$$.fragment),Dbr=l(),xr=a("div"),F(n9.$$.fragment),Gbr=l(),kFe=a("p"),Obr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vbr=l(),nn=a("p"),Xbr=o("The model class to instantiate is selected based on the "),SFe=a("code"),zbr=o("model_type"),Wbr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),Qbr=o("pretrained_model_name_or_path"),Hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(":"),Ybr=l(),Me=a("ul"),Q8=a("li"),BFe=a("strong"),Kbr=o("bert"),Zbr=o(" \u2014 "),RH=a("a"),evr=o("TFBertLMHeadModel"),ovr=o(" (BERT model)"),rvr=l(),H8=a("li"),IFe=a("strong"),tvr=o("camembert"),avr=o(" \u2014 "),PH=a("a"),nvr=o("TFCamembertForCausalLM"),svr=o(" (CamemBERT model)"),lvr=l(),U8=a("li"),NFe=a("strong"),ivr=o("ctrl"),dvr=o(" \u2014 "),BH=a("a"),cvr=o("TFCTRLLMHeadModel"),fvr=o(" (CTRL model)"),mvr=l(),J8=a("li"),qFe=a("strong"),gvr=o("gpt2"),hvr=o(" \u2014 "),IH=a("a"),pvr=o("TFGPT2LMHeadModel"),uvr=o(" (OpenAI GPT-2 model)"),_vr=l(),Y8=a("li"),jFe=a("strong"),bvr=o("gptj"),vvr=o(" \u2014 "),NH=a("a"),Fvr=o("TFGPTJForCausalLM"),Tvr=o(" (GPT-J model)"),Mvr=l(),K8=a("li"),DFe=a("strong"),Evr=o("openai-gpt"),Cvr=o(" \u2014 "),qH=a("a"),wvr=o("TFOpenAIGPTLMHeadModel"),Avr=o(" (OpenAI GPT model)"),yvr=l(),Z8=a("li"),GFe=a("strong"),Lvr=o("opt"),xvr=o(" \u2014 "),jH=a("a"),$vr=o("TFOPTForCausalLM"),kvr=o(" (OPT model)"),Svr=l(),eM=a("li"),OFe=a("strong"),Rvr=o("rembert"),Pvr=o(" \u2014 "),DH=a("a"),Bvr=o("TFRemBertForCausalLM"),Ivr=o(" (RemBERT model)"),Nvr=l(),oM=a("li"),VFe=a("strong"),qvr=o("roberta"),jvr=o(" \u2014 "),GH=a("a"),Dvr=o("TFRobertaForCausalLM"),Gvr=o(" (RoBERTa model)"),Ovr=l(),rM=a("li"),XFe=a("strong"),Vvr=o("roformer"),Xvr=o(" \u2014 "),OH=a("a"),zvr=o("TFRoFormerForCausalLM"),Wvr=o(" (RoFormer model)"),Qvr=l(),tM=a("li"),zFe=a("strong"),Hvr=o("transfo-xl"),Uvr=o(" \u2014 "),VH=a("a"),Jvr=o("TFTransfoXLLMHeadModel"),Yvr=o(" (Transformer-XL model)"),Kvr=l(),aM=a("li"),WFe=a("strong"),Zvr=o("xlm"),eFr=o(" \u2014 "),XH=a("a"),oFr=o("TFXLMWithLMHeadModel"),rFr=o(" (XLM model)"),tFr=l(),nM=a("li"),QFe=a("strong"),aFr=o("xlnet"),nFr=o(" \u2014 "),zH=a("a"),sFr=o("TFXLNetLMHeadModel"),lFr=o(" (XLNet model)"),iFr=l(),F(sM.$$.fragment),iGe=l(),lc=a("h2"),lM=a("a"),HFe=a("span"),F(s9.$$.fragment),dFr=l(),UFe=a("span"),cFr=o("TFAutoModelForImageClassification"),dGe=l(),rr=a("div"),F(l9.$$.fragment),fFr=l(),ic=a("p"),mFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WH=a("a"),gFr=o("from_pretrained()"),hFr=o(" class method or the "),QH=a("a"),pFr=o("from_config()"),uFr=o(` class
method.`),_Fr=l(),i9=a("p"),bFr=o("This class cannot be instantiated directly using "),JFe=a("code"),vFr=o("__init__()"),FFr=o(" (throws an error)."),TFr=l(),Rt=a("div"),F(d9.$$.fragment),MFr=l(),YFe=a("p"),EFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CFr=l(),dc=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),AFr=o("not"),yFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),LFr=o("from_pretrained()"),xFr=o(" to load the model weights."),$Fr=l(),F(iM.$$.fragment),kFr=l(),$r=a("div"),F(c9.$$.fragment),SFr=l(),ZFe=a("p"),RFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PFr=l(),sn=a("p"),BFr=o("The model class to instantiate is selected based on the "),e6e=a("code"),IFr=o("model_type"),NFr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),qFr=o("pretrained_model_name_or_path"),jFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),DFr=o("pretrained_model_name_or_path"),GFr=o(":"),OFr=l(),ln=a("ul"),dM=a("li"),t6e=a("strong"),VFr=o("convnext"),XFr=o(" \u2014 "),UH=a("a"),zFr=o("TFConvNextForImageClassification"),WFr=o(" (ConvNeXT model)"),QFr=l(),cM=a("li"),a6e=a("strong"),HFr=o("data2vec-vision"),UFr=o(" \u2014 "),JH=a("a"),JFr=o("TFData2VecVisionForImageClassification"),YFr=o(" (Data2VecVision model)"),KFr=l(),fM=a("li"),n6e=a("strong"),ZFr=o("swin"),e6r=o(" \u2014 "),YH=a("a"),o6r=o("TFSwinForImageClassification"),r6r=o(" (Swin Transformer model)"),t6r=l(),mM=a("li"),s6e=a("strong"),a6r=o("vit"),n6r=o(" \u2014 "),KH=a("a"),s6r=o("TFViTForImageClassification"),l6r=o(" (ViT model)"),i6r=l(),F(gM.$$.fragment),cGe=l(),cc=a("h2"),hM=a("a"),l6e=a("span"),F(f9.$$.fragment),d6r=l(),i6e=a("span"),c6r=o("TFAutoModelForMaskedLM"),fGe=l(),tr=a("div"),F(m9.$$.fragment),f6r=l(),fc=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZH=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),eU=a("a"),p6r=o("from_config()"),u6r=o(` class
method.`),_6r=l(),g9=a("p"),b6r=o("This class cannot be instantiated directly using "),d6e=a("code"),v6r=o("__init__()"),F6r=o(" (throws an error)."),T6r=l(),Pt=a("div"),F(h9.$$.fragment),M6r=l(),c6e=a("p"),E6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C6r=l(),mc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),A6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),L6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),F(pM.$$.fragment),k6r=l(),kr=a("div"),F(p9.$$.fragment),S6r=l(),m6e=a("p"),R6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P6r=l(),dn=a("p"),B6r=o("The model class to instantiate is selected based on the "),g6e=a("code"),I6r=o("model_type"),N6r=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),q6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),ie=a("ul"),uM=a("li"),u6e=a("strong"),V6r=o("albert"),X6r=o(" \u2014 "),rU=a("a"),z6r=o("TFAlbertForMaskedLM"),W6r=o(" (ALBERT model)"),Q6r=l(),_M=a("li"),_6e=a("strong"),H6r=o("bert"),U6r=o(" \u2014 "),tU=a("a"),J6r=o("TFBertForMaskedLM"),Y6r=o(" (BERT model)"),K6r=l(),bM=a("li"),b6e=a("strong"),Z6r=o("camembert"),eTr=o(" \u2014 "),aU=a("a"),oTr=o("TFCamembertForMaskedLM"),rTr=o(" (CamemBERT model)"),tTr=l(),vM=a("li"),v6e=a("strong"),aTr=o("convbert"),nTr=o(" \u2014 "),nU=a("a"),sTr=o("TFConvBertForMaskedLM"),lTr=o(" (ConvBERT model)"),iTr=l(),FM=a("li"),F6e=a("strong"),dTr=o("deberta"),cTr=o(" \u2014 "),sU=a("a"),fTr=o("TFDebertaForMaskedLM"),mTr=o(" (DeBERTa model)"),gTr=l(),TM=a("li"),T6e=a("strong"),hTr=o("deberta-v2"),pTr=o(" \u2014 "),lU=a("a"),uTr=o("TFDebertaV2ForMaskedLM"),_Tr=o(" (DeBERTa-v2 model)"),bTr=l(),MM=a("li"),M6e=a("strong"),vTr=o("distilbert"),FTr=o(" \u2014 "),iU=a("a"),TTr=o("TFDistilBertForMaskedLM"),MTr=o(" (DistilBERT model)"),ETr=l(),EM=a("li"),E6e=a("strong"),CTr=o("electra"),wTr=o(" \u2014 "),dU=a("a"),ATr=o("TFElectraForMaskedLM"),yTr=o(" (ELECTRA model)"),LTr=l(),CM=a("li"),C6e=a("strong"),xTr=o("flaubert"),$Tr=o(" \u2014 "),cU=a("a"),kTr=o("TFFlaubertWithLMHeadModel"),STr=o(" (FlauBERT model)"),RTr=l(),wM=a("li"),w6e=a("strong"),PTr=o("funnel"),BTr=o(" \u2014 "),fU=a("a"),ITr=o("TFFunnelForMaskedLM"),NTr=o(" (Funnel Transformer model)"),qTr=l(),AM=a("li"),A6e=a("strong"),jTr=o("layoutlm"),DTr=o(" \u2014 "),mU=a("a"),GTr=o("TFLayoutLMForMaskedLM"),OTr=o(" (LayoutLM model)"),VTr=l(),yM=a("li"),y6e=a("strong"),XTr=o("longformer"),zTr=o(" \u2014 "),gU=a("a"),WTr=o("TFLongformerForMaskedLM"),QTr=o(" (Longformer model)"),HTr=l(),LM=a("li"),L6e=a("strong"),UTr=o("mobilebert"),JTr=o(" \u2014 "),hU=a("a"),YTr=o("TFMobileBertForMaskedLM"),KTr=o(" (MobileBERT model)"),ZTr=l(),xM=a("li"),x6e=a("strong"),e7r=o("mpnet"),o7r=o(" \u2014 "),pU=a("a"),r7r=o("TFMPNetForMaskedLM"),t7r=o(" (MPNet model)"),a7r=l(),$M=a("li"),$6e=a("strong"),n7r=o("rembert"),s7r=o(" \u2014 "),uU=a("a"),l7r=o("TFRemBertForMaskedLM"),i7r=o(" (RemBERT model)"),d7r=l(),kM=a("li"),k6e=a("strong"),c7r=o("roberta"),f7r=o(" \u2014 "),_U=a("a"),m7r=o("TFRobertaForMaskedLM"),g7r=o(" (RoBERTa model)"),h7r=l(),SM=a("li"),S6e=a("strong"),p7r=o("roformer"),u7r=o(" \u2014 "),bU=a("a"),_7r=o("TFRoFormerForMaskedLM"),b7r=o(" (RoFormer model)"),v7r=l(),RM=a("li"),R6e=a("strong"),F7r=o("tapas"),T7r=o(" \u2014 "),vU=a("a"),M7r=o("TFTapasForMaskedLM"),E7r=o(" (TAPAS model)"),C7r=l(),PM=a("li"),P6e=a("strong"),w7r=o("xlm"),A7r=o(" \u2014 "),FU=a("a"),y7r=o("TFXLMWithLMHeadModel"),L7r=o(" (XLM model)"),x7r=l(),BM=a("li"),B6e=a("strong"),$7r=o("xlm-roberta"),k7r=o(" \u2014 "),TU=a("a"),S7r=o("TFXLMRobertaForMaskedLM"),R7r=o(" (XLM-RoBERTa model)"),P7r=l(),F(IM.$$.fragment),mGe=l(),gc=a("h2"),NM=a("a"),I6e=a("span"),F(u9.$$.fragment),B7r=l(),N6e=a("span"),I7r=o("TFAutoModelForSeq2SeqLM"),gGe=l(),ar=a("div"),F(_9.$$.fragment),N7r=l(),hc=a("p"),q7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MU=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),EU=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),b9=a("p"),X7r=o("This class cannot be instantiated directly using "),q6e=a("code"),z7r=o("__init__()"),W7r=o(" (throws an error)."),Q7r=l(),Bt=a("div"),F(v9.$$.fragment),H7r=l(),j6e=a("p"),U7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J7r=l(),pc=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(qM.$$.fragment),t8r=l(),Sr=a("div"),F(F9.$$.fragment),a8r=l(),G6e=a("p"),n8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s8r=l(),cn=a("p"),l8r=o("The model class to instantiate is selected based on the "),O6e=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),Le=a("ul"),jM=a("li"),z6e=a("strong"),p8r=o("bart"),u8r=o(" \u2014 "),wU=a("a"),_8r=o("TFBartForConditionalGeneration"),b8r=o(" (BART model)"),v8r=l(),DM=a("li"),W6e=a("strong"),F8r=o("blenderbot"),T8r=o(" \u2014 "),AU=a("a"),M8r=o("TFBlenderbotForConditionalGeneration"),E8r=o(" (Blenderbot model)"),C8r=l(),GM=a("li"),Q6e=a("strong"),w8r=o("blenderbot-small"),A8r=o(" \u2014 "),yU=a("a"),y8r=o("TFBlenderbotSmallForConditionalGeneration"),L8r=o(" (BlenderbotSmall model)"),x8r=l(),OM=a("li"),H6e=a("strong"),$8r=o("encoder-decoder"),k8r=o(" \u2014 "),LU=a("a"),S8r=o("TFEncoderDecoderModel"),R8r=o(" (Encoder decoder model)"),P8r=l(),VM=a("li"),U6e=a("strong"),B8r=o("led"),I8r=o(" \u2014 "),xU=a("a"),N8r=o("TFLEDForConditionalGeneration"),q8r=o(" (LED model)"),j8r=l(),XM=a("li"),J6e=a("strong"),D8r=o("marian"),G8r=o(" \u2014 "),$U=a("a"),O8r=o("TFMarianMTModel"),V8r=o(" (Marian model)"),X8r=l(),zM=a("li"),Y6e=a("strong"),z8r=o("mbart"),W8r=o(" \u2014 "),kU=a("a"),Q8r=o("TFMBartForConditionalGeneration"),H8r=o(" (mBART model)"),U8r=l(),WM=a("li"),K6e=a("strong"),J8r=o("mt5"),Y8r=o(" \u2014 "),SU=a("a"),K8r=o("TFMT5ForConditionalGeneration"),Z8r=o(" (MT5 model)"),eMr=l(),QM=a("li"),Z6e=a("strong"),oMr=o("pegasus"),rMr=o(" \u2014 "),RU=a("a"),tMr=o("TFPegasusForConditionalGeneration"),aMr=o(" (Pegasus model)"),nMr=l(),HM=a("li"),eTe=a("strong"),sMr=o("t5"),lMr=o(" \u2014 "),PU=a("a"),iMr=o("TFT5ForConditionalGeneration"),dMr=o(" (T5 model)"),cMr=l(),F(UM.$$.fragment),hGe=l(),uc=a("h2"),JM=a("a"),oTe=a("span"),F(T9.$$.fragment),fMr=l(),rTe=a("span"),mMr=o("TFAutoModelForSequenceClassification"),pGe=l(),nr=a("div"),F(M9.$$.fragment),gMr=l(),_c=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BU=a("a"),pMr=o("from_pretrained()"),uMr=o(" class method or the "),IU=a("a"),_Mr=o("from_config()"),bMr=o(` class
method.`),vMr=l(),E9=a("p"),FMr=o("This class cannot be instantiated directly using "),tTe=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),It=a("div"),F(C9.$$.fragment),CMr=l(),aTe=a("p"),wMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AMr=l(),bc=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),LMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(YM.$$.fragment),RMr=l(),Rr=a("div"),F(w9.$$.fragment),PMr=l(),sTe=a("p"),BMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IMr=l(),fn=a("p"),NMr=o("The model class to instantiate is selected based on the "),lTe=a("code"),qMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),re=a("ul"),KM=a("li"),cTe=a("strong"),zMr=o("albert"),WMr=o(" \u2014 "),qU=a("a"),QMr=o("TFAlbertForSequenceClassification"),HMr=o(" (ALBERT model)"),UMr=l(),ZM=a("li"),fTe=a("strong"),JMr=o("bert"),YMr=o(" \u2014 "),jU=a("a"),KMr=o("TFBertForSequenceClassification"),ZMr=o(" (BERT model)"),e4r=l(),e4=a("li"),mTe=a("strong"),o4r=o("camembert"),r4r=o(" \u2014 "),DU=a("a"),t4r=o("TFCamembertForSequenceClassification"),a4r=o(" (CamemBERT model)"),n4r=l(),o4=a("li"),gTe=a("strong"),s4r=o("convbert"),l4r=o(" \u2014 "),GU=a("a"),i4r=o("TFConvBertForSequenceClassification"),d4r=o(" (ConvBERT model)"),c4r=l(),r4=a("li"),hTe=a("strong"),f4r=o("ctrl"),m4r=o(" \u2014 "),OU=a("a"),g4r=o("TFCTRLForSequenceClassification"),h4r=o(" (CTRL model)"),p4r=l(),t4=a("li"),pTe=a("strong"),u4r=o("deberta"),_4r=o(" \u2014 "),VU=a("a"),b4r=o("TFDebertaForSequenceClassification"),v4r=o(" (DeBERTa model)"),F4r=l(),a4=a("li"),uTe=a("strong"),T4r=o("deberta-v2"),M4r=o(" \u2014 "),XU=a("a"),E4r=o("TFDebertaV2ForSequenceClassification"),C4r=o(" (DeBERTa-v2 model)"),w4r=l(),n4=a("li"),_Te=a("strong"),A4r=o("distilbert"),y4r=o(" \u2014 "),zU=a("a"),L4r=o("TFDistilBertForSequenceClassification"),x4r=o(" (DistilBERT model)"),$4r=l(),s4=a("li"),bTe=a("strong"),k4r=o("electra"),S4r=o(" \u2014 "),WU=a("a"),R4r=o("TFElectraForSequenceClassification"),P4r=o(" (ELECTRA model)"),B4r=l(),l4=a("li"),vTe=a("strong"),I4r=o("flaubert"),N4r=o(" \u2014 "),QU=a("a"),q4r=o("TFFlaubertForSequenceClassification"),j4r=o(" (FlauBERT model)"),D4r=l(),i4=a("li"),FTe=a("strong"),G4r=o("funnel"),O4r=o(" \u2014 "),HU=a("a"),V4r=o("TFFunnelForSequenceClassification"),X4r=o(" (Funnel Transformer model)"),z4r=l(),d4=a("li"),TTe=a("strong"),W4r=o("gpt2"),Q4r=o(" \u2014 "),UU=a("a"),H4r=o("TFGPT2ForSequenceClassification"),U4r=o(" (OpenAI GPT-2 model)"),J4r=l(),c4=a("li"),MTe=a("strong"),Y4r=o("gptj"),K4r=o(" \u2014 "),JU=a("a"),Z4r=o("TFGPTJForSequenceClassification"),eEr=o(" (GPT-J model)"),oEr=l(),f4=a("li"),ETe=a("strong"),rEr=o("layoutlm"),tEr=o(" \u2014 "),YU=a("a"),aEr=o("TFLayoutLMForSequenceClassification"),nEr=o(" (LayoutLM model)"),sEr=l(),m4=a("li"),CTe=a("strong"),lEr=o("longformer"),iEr=o(" \u2014 "),KU=a("a"),dEr=o("TFLongformerForSequenceClassification"),cEr=o(" (Longformer model)"),fEr=l(),g4=a("li"),wTe=a("strong"),mEr=o("mobilebert"),gEr=o(" \u2014 "),ZU=a("a"),hEr=o("TFMobileBertForSequenceClassification"),pEr=o(" (MobileBERT model)"),uEr=l(),h4=a("li"),ATe=a("strong"),_Er=o("mpnet"),bEr=o(" \u2014 "),eJ=a("a"),vEr=o("TFMPNetForSequenceClassification"),FEr=o(" (MPNet model)"),TEr=l(),p4=a("li"),yTe=a("strong"),MEr=o("openai-gpt"),EEr=o(" \u2014 "),oJ=a("a"),CEr=o("TFOpenAIGPTForSequenceClassification"),wEr=o(" (OpenAI GPT model)"),AEr=l(),u4=a("li"),LTe=a("strong"),yEr=o("rembert"),LEr=o(" \u2014 "),rJ=a("a"),xEr=o("TFRemBertForSequenceClassification"),$Er=o(" (RemBERT model)"),kEr=l(),_4=a("li"),xTe=a("strong"),SEr=o("roberta"),REr=o(" \u2014 "),tJ=a("a"),PEr=o("TFRobertaForSequenceClassification"),BEr=o(" (RoBERTa model)"),IEr=l(),b4=a("li"),$Te=a("strong"),NEr=o("roformer"),qEr=o(" \u2014 "),aJ=a("a"),jEr=o("TFRoFormerForSequenceClassification"),DEr=o(" (RoFormer model)"),GEr=l(),v4=a("li"),kTe=a("strong"),OEr=o("tapas"),VEr=o(" \u2014 "),nJ=a("a"),XEr=o("TFTapasForSequenceClassification"),zEr=o(" (TAPAS model)"),WEr=l(),F4=a("li"),STe=a("strong"),QEr=o("transfo-xl"),HEr=o(" \u2014 "),sJ=a("a"),UEr=o("TFTransfoXLForSequenceClassification"),JEr=o(" (Transformer-XL model)"),YEr=l(),T4=a("li"),RTe=a("strong"),KEr=o("xlm"),ZEr=o(" \u2014 "),lJ=a("a"),eCr=o("TFXLMForSequenceClassification"),oCr=o(" (XLM model)"),rCr=l(),M4=a("li"),PTe=a("strong"),tCr=o("xlm-roberta"),aCr=o(" \u2014 "),iJ=a("a"),nCr=o("TFXLMRobertaForSequenceClassification"),sCr=o(" (XLM-RoBERTa model)"),lCr=l(),E4=a("li"),BTe=a("strong"),iCr=o("xlnet"),dCr=o(" \u2014 "),dJ=a("a"),cCr=o("TFXLNetForSequenceClassification"),fCr=o(" (XLNet model)"),mCr=l(),F(C4.$$.fragment),uGe=l(),vc=a("h2"),w4=a("a"),ITe=a("span"),F(A9.$$.fragment),gCr=l(),NTe=a("span"),hCr=o("TFAutoModelForMultipleChoice"),_Ge=l(),sr=a("div"),F(y9.$$.fragment),pCr=l(),Fc=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cJ=a("a"),_Cr=o("from_pretrained()"),bCr=o(" class method or the "),fJ=a("a"),vCr=o("from_config()"),FCr=o(` class
method.`),TCr=l(),L9=a("p"),MCr=o("This class cannot be instantiated directly using "),qTe=a("code"),ECr=o("__init__()"),CCr=o(" (throws an error)."),wCr=l(),Nt=a("div"),F(x9.$$.fragment),ACr=l(),jTe=a("p"),yCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LCr=l(),Tc=a("p"),xCr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),$Cr=o("not"),kCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),SCr=o("from_pretrained()"),RCr=o(" to load the model weights."),PCr=l(),F(A4.$$.fragment),BCr=l(),Pr=a("div"),F($9.$$.fragment),ICr=l(),GTe=a("p"),NCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qCr=l(),mn=a("p"),jCr=o("The model class to instantiate is selected based on the "),OTe=a("code"),DCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(":"),WCr=l(),pe=a("ul"),y4=a("li"),zTe=a("strong"),QCr=o("albert"),HCr=o(" \u2014 "),gJ=a("a"),UCr=o("TFAlbertForMultipleChoice"),JCr=o(" (ALBERT model)"),YCr=l(),L4=a("li"),WTe=a("strong"),KCr=o("bert"),ZCr=o(" \u2014 "),hJ=a("a"),e5r=o("TFBertForMultipleChoice"),o5r=o(" (BERT model)"),r5r=l(),x4=a("li"),QTe=a("strong"),t5r=o("camembert"),a5r=o(" \u2014 "),pJ=a("a"),n5r=o("TFCamembertForMultipleChoice"),s5r=o(" (CamemBERT model)"),l5r=l(),$4=a("li"),HTe=a("strong"),i5r=o("convbert"),d5r=o(" \u2014 "),uJ=a("a"),c5r=o("TFConvBertForMultipleChoice"),f5r=o(" (ConvBERT model)"),m5r=l(),k4=a("li"),UTe=a("strong"),g5r=o("distilbert"),h5r=o(" \u2014 "),_J=a("a"),p5r=o("TFDistilBertForMultipleChoice"),u5r=o(" (DistilBERT model)"),_5r=l(),S4=a("li"),JTe=a("strong"),b5r=o("electra"),v5r=o(" \u2014 "),bJ=a("a"),F5r=o("TFElectraForMultipleChoice"),T5r=o(" (ELECTRA model)"),M5r=l(),R4=a("li"),YTe=a("strong"),E5r=o("flaubert"),C5r=o(" \u2014 "),vJ=a("a"),w5r=o("TFFlaubertForMultipleChoice"),A5r=o(" (FlauBERT model)"),y5r=l(),P4=a("li"),KTe=a("strong"),L5r=o("funnel"),x5r=o(" \u2014 "),FJ=a("a"),$5r=o("TFFunnelForMultipleChoice"),k5r=o(" (Funnel Transformer model)"),S5r=l(),B4=a("li"),ZTe=a("strong"),R5r=o("longformer"),P5r=o(" \u2014 "),TJ=a("a"),B5r=o("TFLongformerForMultipleChoice"),I5r=o(" (Longformer model)"),N5r=l(),I4=a("li"),e7e=a("strong"),q5r=o("mobilebert"),j5r=o(" \u2014 "),MJ=a("a"),D5r=o("TFMobileBertForMultipleChoice"),G5r=o(" (MobileBERT model)"),O5r=l(),N4=a("li"),o7e=a("strong"),V5r=o("mpnet"),X5r=o(" \u2014 "),EJ=a("a"),z5r=o("TFMPNetForMultipleChoice"),W5r=o(" (MPNet model)"),Q5r=l(),q4=a("li"),r7e=a("strong"),H5r=o("rembert"),U5r=o(" \u2014 "),CJ=a("a"),J5r=o("TFRemBertForMultipleChoice"),Y5r=o(" (RemBERT model)"),K5r=l(),j4=a("li"),t7e=a("strong"),Z5r=o("roberta"),e3r=o(" \u2014 "),wJ=a("a"),o3r=o("TFRobertaForMultipleChoice"),r3r=o(" (RoBERTa model)"),t3r=l(),D4=a("li"),a7e=a("strong"),a3r=o("roformer"),n3r=o(" \u2014 "),AJ=a("a"),s3r=o("TFRoFormerForMultipleChoice"),l3r=o(" (RoFormer model)"),i3r=l(),G4=a("li"),n7e=a("strong"),d3r=o("xlm"),c3r=o(" \u2014 "),yJ=a("a"),f3r=o("TFXLMForMultipleChoice"),m3r=o(" (XLM model)"),g3r=l(),O4=a("li"),s7e=a("strong"),h3r=o("xlm-roberta"),p3r=o(" \u2014 "),LJ=a("a"),u3r=o("TFXLMRobertaForMultipleChoice"),_3r=o(" (XLM-RoBERTa model)"),b3r=l(),V4=a("li"),l7e=a("strong"),v3r=o("xlnet"),F3r=o(" \u2014 "),xJ=a("a"),T3r=o("TFXLNetForMultipleChoice"),M3r=o(" (XLNet model)"),E3r=l(),F(X4.$$.fragment),bGe=l(),Mc=a("h2"),z4=a("a"),i7e=a("span"),F(k9.$$.fragment),C3r=l(),d7e=a("span"),w3r=o("TFAutoModelForNextSentencePrediction"),vGe=l(),lr=a("div"),F(S9.$$.fragment),A3r=l(),Ec=a("p"),y3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$J=a("a"),L3r=o("from_pretrained()"),x3r=o(" class method or the "),kJ=a("a"),$3r=o("from_config()"),k3r=o(` class
method.`),S3r=l(),R9=a("p"),R3r=o("This class cannot be instantiated directly using "),c7e=a("code"),P3r=o("__init__()"),B3r=o(" (throws an error)."),I3r=l(),qt=a("div"),F(P9.$$.fragment),N3r=l(),f7e=a("p"),q3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j3r=l(),Cc=a("p"),D3r=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),G3r=o("not"),O3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),V3r=o("from_pretrained()"),X3r=o(" to load the model weights."),z3r=l(),F(W4.$$.fragment),W3r=l(),Br=a("div"),F(B9.$$.fragment),Q3r=l(),g7e=a("p"),H3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U3r=l(),gn=a("p"),J3r=o("The model class to instantiate is selected based on the "),h7e=a("code"),Y3r=o("model_type"),K3r=o(` property of the config object (either
passed as an argument or loaded from `),p7e=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(":"),twr=l(),I9=a("ul"),Q4=a("li"),_7e=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),RJ=a("a"),swr=o("TFBertForNextSentencePrediction"),lwr=o(" (BERT model)"),iwr=l(),H4=a("li"),b7e=a("strong"),dwr=o("mobilebert"),cwr=o(" \u2014 "),PJ=a("a"),fwr=o("TFMobileBertForNextSentencePrediction"),mwr=o(" (MobileBERT model)"),gwr=l(),F(U4.$$.fragment),FGe=l(),wc=a("h2"),J4=a("a"),v7e=a("span"),F(N9.$$.fragment),hwr=l(),F7e=a("span"),pwr=o("TFAutoModelForTableQuestionAnswering"),TGe=l(),ir=a("div"),F(q9.$$.fragment),uwr=l(),Ac=a("p"),_wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BJ=a("a"),bwr=o("from_pretrained()"),vwr=o(" class method or the "),IJ=a("a"),Fwr=o("from_config()"),Twr=o(` class
method.`),Mwr=l(),j9=a("p"),Ewr=o("This class cannot be instantiated directly using "),T7e=a("code"),Cwr=o("__init__()"),wwr=o(" (throws an error)."),Awr=l(),jt=a("div"),F(D9.$$.fragment),ywr=l(),M7e=a("p"),Lwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xwr=l(),yc=a("p"),$wr=o(`Note:
Loading a model from its configuration file does `),E7e=a("strong"),kwr=o("not"),Swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),Rwr=o("from_pretrained()"),Pwr=o(" to load the model weights."),Bwr=l(),F(Y4.$$.fragment),Iwr=l(),Ir=a("div"),F(G9.$$.fragment),Nwr=l(),C7e=a("p"),qwr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jwr=l(),hn=a("p"),Dwr=o("The model class to instantiate is selected based on the "),w7e=a("code"),Gwr=o("model_type"),Owr=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),zwr=o("pretrained_model_name_or_path"),Wwr=o(":"),Qwr=l(),L7e=a("ul"),K4=a("li"),x7e=a("strong"),Hwr=o("tapas"),Uwr=o(" \u2014 "),qJ=a("a"),Jwr=o("TFTapasForQuestionAnswering"),Ywr=o(" (TAPAS model)"),Kwr=l(),F(Z4.$$.fragment),MGe=l(),Lc=a("h2"),eE=a("a"),$7e=a("span"),F(O9.$$.fragment),Zwr=l(),k7e=a("span"),e0r=o("TFAutoModelForTokenClassification"),EGe=l(),dr=a("div"),F(V9.$$.fragment),o0r=l(),xc=a("p"),r0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jJ=a("a"),t0r=o("from_pretrained()"),a0r=o(" class method or the "),DJ=a("a"),n0r=o("from_config()"),s0r=o(` class
method.`),l0r=l(),X9=a("p"),i0r=o("This class cannot be instantiated directly using "),S7e=a("code"),d0r=o("__init__()"),c0r=o(" (throws an error)."),f0r=l(),Dt=a("div"),F(z9.$$.fragment),m0r=l(),R7e=a("p"),g0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0r=l(),$c=a("p"),p0r=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),u0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),b0r=o("from_pretrained()"),v0r=o(" to load the model weights."),F0r=l(),F(oE.$$.fragment),T0r=l(),Nr=a("div"),F(W9.$$.fragment),M0r=l(),B7e=a("p"),E0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0r=l(),pn=a("p"),w0r=o("The model class to instantiate is selected based on the "),I7e=a("code"),A0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),$0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),de=a("ul"),rE=a("li"),j7e=a("strong"),R0r=o("albert"),P0r=o(" \u2014 "),OJ=a("a"),B0r=o("TFAlbertForTokenClassification"),I0r=o(" (ALBERT model)"),N0r=l(),tE=a("li"),D7e=a("strong"),q0r=o("bert"),j0r=o(" \u2014 "),VJ=a("a"),D0r=o("TFBertForTokenClassification"),G0r=o(" (BERT model)"),O0r=l(),aE=a("li"),G7e=a("strong"),V0r=o("camembert"),X0r=o(" \u2014 "),XJ=a("a"),z0r=o("TFCamembertForTokenClassification"),W0r=o(" (CamemBERT model)"),Q0r=l(),nE=a("li"),O7e=a("strong"),H0r=o("convbert"),U0r=o(" \u2014 "),zJ=a("a"),J0r=o("TFConvBertForTokenClassification"),Y0r=o(" (ConvBERT model)"),K0r=l(),sE=a("li"),V7e=a("strong"),Z0r=o("deberta"),eAr=o(" \u2014 "),WJ=a("a"),oAr=o("TFDebertaForTokenClassification"),rAr=o(" (DeBERTa model)"),tAr=l(),lE=a("li"),X7e=a("strong"),aAr=o("deberta-v2"),nAr=o(" \u2014 "),QJ=a("a"),sAr=o("TFDebertaV2ForTokenClassification"),lAr=o(" (DeBERTa-v2 model)"),iAr=l(),iE=a("li"),z7e=a("strong"),dAr=o("distilbert"),cAr=o(" \u2014 "),HJ=a("a"),fAr=o("TFDistilBertForTokenClassification"),mAr=o(" (DistilBERT model)"),gAr=l(),dE=a("li"),W7e=a("strong"),hAr=o("electra"),pAr=o(" \u2014 "),UJ=a("a"),uAr=o("TFElectraForTokenClassification"),_Ar=o(" (ELECTRA model)"),bAr=l(),cE=a("li"),Q7e=a("strong"),vAr=o("flaubert"),FAr=o(" \u2014 "),JJ=a("a"),TAr=o("TFFlaubertForTokenClassification"),MAr=o(" (FlauBERT model)"),EAr=l(),fE=a("li"),H7e=a("strong"),CAr=o("funnel"),wAr=o(" \u2014 "),YJ=a("a"),AAr=o("TFFunnelForTokenClassification"),yAr=o(" (Funnel Transformer model)"),LAr=l(),mE=a("li"),U7e=a("strong"),xAr=o("layoutlm"),$Ar=o(" \u2014 "),KJ=a("a"),kAr=o("TFLayoutLMForTokenClassification"),SAr=o(" (LayoutLM model)"),RAr=l(),gE=a("li"),J7e=a("strong"),PAr=o("longformer"),BAr=o(" \u2014 "),ZJ=a("a"),IAr=o("TFLongformerForTokenClassification"),NAr=o(" (Longformer model)"),qAr=l(),hE=a("li"),Y7e=a("strong"),jAr=o("mobilebert"),DAr=o(" \u2014 "),eY=a("a"),GAr=o("TFMobileBertForTokenClassification"),OAr=o(" (MobileBERT model)"),VAr=l(),pE=a("li"),K7e=a("strong"),XAr=o("mpnet"),zAr=o(" \u2014 "),oY=a("a"),WAr=o("TFMPNetForTokenClassification"),QAr=o(" (MPNet model)"),HAr=l(),uE=a("li"),Z7e=a("strong"),UAr=o("rembert"),JAr=o(" \u2014 "),rY=a("a"),YAr=o("TFRemBertForTokenClassification"),KAr=o(" (RemBERT model)"),ZAr=l(),_E=a("li"),e8e=a("strong"),eyr=o("roberta"),oyr=o(" \u2014 "),tY=a("a"),ryr=o("TFRobertaForTokenClassification"),tyr=o(" (RoBERTa model)"),ayr=l(),bE=a("li"),o8e=a("strong"),nyr=o("roformer"),syr=o(" \u2014 "),aY=a("a"),lyr=o("TFRoFormerForTokenClassification"),iyr=o(" (RoFormer model)"),dyr=l(),vE=a("li"),r8e=a("strong"),cyr=o("xlm"),fyr=o(" \u2014 "),nY=a("a"),myr=o("TFXLMForTokenClassification"),gyr=o(" (XLM model)"),hyr=l(),FE=a("li"),t8e=a("strong"),pyr=o("xlm-roberta"),uyr=o(" \u2014 "),sY=a("a"),_yr=o("TFXLMRobertaForTokenClassification"),byr=o(" (XLM-RoBERTa model)"),vyr=l(),TE=a("li"),a8e=a("strong"),Fyr=o("xlnet"),Tyr=o(" \u2014 "),lY=a("a"),Myr=o("TFXLNetForTokenClassification"),Eyr=o(" (XLNet model)"),Cyr=l(),F(ME.$$.fragment),CGe=l(),kc=a("h2"),EE=a("a"),n8e=a("span"),F(Q9.$$.fragment),wyr=l(),s8e=a("span"),Ayr=o("TFAutoModelForQuestionAnswering"),wGe=l(),cr=a("div"),F(H9.$$.fragment),yyr=l(),Sc=a("p"),Lyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iY=a("a"),xyr=o("from_pretrained()"),$yr=o(" class method or the "),dY=a("a"),kyr=o("from_config()"),Syr=o(` class
method.`),Ryr=l(),U9=a("p"),Pyr=o("This class cannot be instantiated directly using "),l8e=a("code"),Byr=o("__init__()"),Iyr=o(" (throws an error)."),Nyr=l(),Gt=a("div"),F(J9.$$.fragment),qyr=l(),i8e=a("p"),jyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dyr=l(),Rc=a("p"),Gyr=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),Oyr=o("not"),Vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),Xyr=o("from_pretrained()"),zyr=o(" to load the model weights."),Wyr=l(),F(CE.$$.fragment),Qyr=l(),qr=a("div"),F(Y9.$$.fragment),Hyr=l(),c8e=a("p"),Uyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jyr=l(),un=a("p"),Yyr=o("The model class to instantiate is selected based on the "),f8e=a("code"),Kyr=o("model_type"),Zyr=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),eLr=o("pretrained_model_name_or_path"),oLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(":"),aLr=l(),ce=a("ul"),wE=a("li"),h8e=a("strong"),nLr=o("albert"),sLr=o(" \u2014 "),fY=a("a"),lLr=o("TFAlbertForQuestionAnswering"),iLr=o(" (ALBERT model)"),dLr=l(),AE=a("li"),p8e=a("strong"),cLr=o("bert"),fLr=o(" \u2014 "),mY=a("a"),mLr=o("TFBertForQuestionAnswering"),gLr=o(" (BERT model)"),hLr=l(),yE=a("li"),u8e=a("strong"),pLr=o("camembert"),uLr=o(" \u2014 "),gY=a("a"),_Lr=o("TFCamembertForQuestionAnswering"),bLr=o(" (CamemBERT model)"),vLr=l(),LE=a("li"),_8e=a("strong"),FLr=o("convbert"),TLr=o(" \u2014 "),hY=a("a"),MLr=o("TFConvBertForQuestionAnswering"),ELr=o(" (ConvBERT model)"),CLr=l(),xE=a("li"),b8e=a("strong"),wLr=o("deberta"),ALr=o(" \u2014 "),pY=a("a"),yLr=o("TFDebertaForQuestionAnswering"),LLr=o(" (DeBERTa model)"),xLr=l(),$E=a("li"),v8e=a("strong"),$Lr=o("deberta-v2"),kLr=o(" \u2014 "),uY=a("a"),SLr=o("TFDebertaV2ForQuestionAnswering"),RLr=o(" (DeBERTa-v2 model)"),PLr=l(),kE=a("li"),F8e=a("strong"),BLr=o("distilbert"),ILr=o(" \u2014 "),_Y=a("a"),NLr=o("TFDistilBertForQuestionAnswering"),qLr=o(" (DistilBERT model)"),jLr=l(),SE=a("li"),T8e=a("strong"),DLr=o("electra"),GLr=o(" \u2014 "),bY=a("a"),OLr=o("TFElectraForQuestionAnswering"),VLr=o(" (ELECTRA model)"),XLr=l(),RE=a("li"),M8e=a("strong"),zLr=o("flaubert"),WLr=o(" \u2014 "),vY=a("a"),QLr=o("TFFlaubertForQuestionAnsweringSimple"),HLr=o(" (FlauBERT model)"),ULr=l(),PE=a("li"),E8e=a("strong"),JLr=o("funnel"),YLr=o(" \u2014 "),FY=a("a"),KLr=o("TFFunnelForQuestionAnswering"),ZLr=o(" (Funnel Transformer model)"),e9r=l(),BE=a("li"),C8e=a("strong"),o9r=o("gptj"),r9r=o(" \u2014 "),TY=a("a"),t9r=o("TFGPTJForQuestionAnswering"),a9r=o(" (GPT-J model)"),n9r=l(),IE=a("li"),w8e=a("strong"),s9r=o("longformer"),l9r=o(" \u2014 "),MY=a("a"),i9r=o("TFLongformerForQuestionAnswering"),d9r=o(" (Longformer model)"),c9r=l(),NE=a("li"),A8e=a("strong"),f9r=o("mobilebert"),m9r=o(" \u2014 "),EY=a("a"),g9r=o("TFMobileBertForQuestionAnswering"),h9r=o(" (MobileBERT model)"),p9r=l(),qE=a("li"),y8e=a("strong"),u9r=o("mpnet"),_9r=o(" \u2014 "),CY=a("a"),b9r=o("TFMPNetForQuestionAnswering"),v9r=o(" (MPNet model)"),F9r=l(),jE=a("li"),L8e=a("strong"),T9r=o("rembert"),M9r=o(" \u2014 "),wY=a("a"),E9r=o("TFRemBertForQuestionAnswering"),C9r=o(" (RemBERT model)"),w9r=l(),DE=a("li"),x8e=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),AY=a("a"),L9r=o("TFRobertaForQuestionAnswering"),x9r=o(" (RoBERTa model)"),$9r=l(),GE=a("li"),$8e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),yY=a("a"),R9r=o("TFRoFormerForQuestionAnswering"),P9r=o(" (RoFormer model)"),B9r=l(),OE=a("li"),k8e=a("strong"),I9r=o("xlm"),N9r=o(" \u2014 "),LY=a("a"),q9r=o("TFXLMForQuestionAnsweringSimple"),j9r=o(" (XLM model)"),D9r=l(),VE=a("li"),S8e=a("strong"),G9r=o("xlm-roberta"),O9r=o(" \u2014 "),xY=a("a"),V9r=o("TFXLMRobertaForQuestionAnswering"),X9r=o(" (XLM-RoBERTa model)"),z9r=l(),XE=a("li"),R8e=a("strong"),W9r=o("xlnet"),Q9r=o(" \u2014 "),$Y=a("a"),H9r=o("TFXLNetForQuestionAnsweringSimple"),U9r=o(" (XLNet model)"),J9r=l(),F(zE.$$.fragment),AGe=l(),Pc=a("h2"),WE=a("a"),P8e=a("span"),F(K9.$$.fragment),Y9r=l(),B8e=a("span"),K9r=o("TFAutoModelForVision2Seq"),yGe=l(),fr=a("div"),F(Z9.$$.fragment),Z9r=l(),Bc=a("p"),exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kY=a("a"),oxr=o("from_pretrained()"),rxr=o(" class method or the "),SY=a("a"),txr=o("from_config()"),axr=o(` class
method.`),nxr=l(),ex=a("p"),sxr=o("This class cannot be instantiated directly using "),I8e=a("code"),lxr=o("__init__()"),ixr=o(" (throws an error)."),dxr=l(),Ot=a("div"),F(ox.$$.fragment),cxr=l(),N8e=a("p"),fxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mxr=l(),Ic=a("p"),gxr=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),hxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),uxr=o("from_pretrained()"),_xr=o(" to load the model weights."),bxr=l(),F(QE.$$.fragment),vxr=l(),jr=a("div"),F(rx.$$.fragment),Fxr=l(),j8e=a("p"),Txr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mxr=l(),_n=a("p"),Exr=o("The model class to instantiate is selected based on the "),D8e=a("code"),Cxr=o("model_type"),wxr=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),Axr=o("pretrained_model_name_or_path"),yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),Lxr=o("pretrained_model_name_or_path"),xxr=o(":"),$xr=l(),V8e=a("ul"),HE=a("li"),X8e=a("strong"),kxr=o("vision-encoder-decoder"),Sxr=o(" \u2014 "),PY=a("a"),Rxr=o("TFVisionEncoderDecoderModel"),Pxr=o(" (Vision Encoder decoder model)"),Bxr=l(),F(UE.$$.fragment),LGe=l(),Nc=a("h2"),JE=a("a"),z8e=a("span"),F(tx.$$.fragment),Ixr=l(),W8e=a("span"),Nxr=o("TFAutoModelForSpeechSeq2Seq"),xGe=l(),mr=a("div"),F(ax.$$.fragment),qxr=l(),qc=a("p"),jxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BY=a("a"),Dxr=o("from_pretrained()"),Gxr=o(" class method or the "),IY=a("a"),Oxr=o("from_config()"),Vxr=o(` class
method.`),Xxr=l(),nx=a("p"),zxr=o("This class cannot be instantiated directly using "),Q8e=a("code"),Wxr=o("__init__()"),Qxr=o(" (throws an error)."),Hxr=l(),Vt=a("div"),F(sx.$$.fragment),Uxr=l(),H8e=a("p"),Jxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yxr=l(),jc=a("p"),Kxr=o(`Note:
Loading a model from its configuration file does `),U8e=a("strong"),Zxr=o("not"),e$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),o$r=o("from_pretrained()"),r$r=o(" to load the model weights."),t$r=l(),F(YE.$$.fragment),a$r=l(),Dr=a("div"),F(lx.$$.fragment),n$r=l(),J8e=a("p"),s$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l$r=l(),bn=a("p"),i$r=o("The model class to instantiate is selected based on the "),Y8e=a("code"),d$r=o("model_type"),c$r=o(` property of the config object (either
passed as an argument or loaded from `),K8e=a("code"),f$r=o("pretrained_model_name_or_path"),m$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z8e=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(":"),p$r=l(),eMe=a("ul"),KE=a("li"),oMe=a("strong"),u$r=o("speech_to_text"),_$r=o(" \u2014 "),qY=a("a"),b$r=o("TFSpeech2TextForConditionalGeneration"),v$r=o(" (Speech2Text model)"),F$r=l(),F(ZE.$$.fragment),$Ge=l(),Dc=a("h2"),eC=a("a"),rMe=a("span"),F(ix.$$.fragment),T$r=l(),tMe=a("span"),M$r=o("FlaxAutoModel"),kGe=l(),gr=a("div"),F(dx.$$.fragment),E$r=l(),Gc=a("p"),C$r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jY=a("a"),w$r=o("from_pretrained()"),A$r=o(" class method or the "),DY=a("a"),y$r=o("from_config()"),L$r=o(` class
method.`),x$r=l(),cx=a("p"),$$r=o("This class cannot be instantiated directly using "),aMe=a("code"),k$r=o("__init__()"),S$r=o(" (throws an error)."),R$r=l(),Xt=a("div"),F(fx.$$.fragment),P$r=l(),nMe=a("p"),B$r=o("Instantiates one of the base model classes of the library from a configuration."),I$r=l(),Oc=a("p"),N$r=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),q$r=o("not"),j$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),D$r=o("from_pretrained()"),G$r=o(" to load the model weights."),O$r=l(),F(oC.$$.fragment),V$r=l(),Gr=a("div"),F(mx.$$.fragment),X$r=l(),lMe=a("p"),z$r=o("Instantiate one of the base model classes of the library from a pretrained model."),W$r=l(),vn=a("p"),Q$r=o("The model class to instantiate is selected based on the "),iMe=a("code"),H$r=o("model_type"),U$r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(":"),ekr=l(),te=a("ul"),rC=a("li"),fMe=a("strong"),okr=o("albert"),rkr=o(" \u2014 "),OY=a("a"),tkr=o("FlaxAlbertModel"),akr=o(" (ALBERT model)"),nkr=l(),tC=a("li"),mMe=a("strong"),skr=o("bart"),lkr=o(" \u2014 "),VY=a("a"),ikr=o("FlaxBartModel"),dkr=o(" (BART model)"),ckr=l(),aC=a("li"),gMe=a("strong"),fkr=o("beit"),mkr=o(" \u2014 "),XY=a("a"),gkr=o("FlaxBeitModel"),hkr=o(" (BEiT model)"),pkr=l(),nC=a("li"),hMe=a("strong"),ukr=o("bert"),_kr=o(" \u2014 "),zY=a("a"),bkr=o("FlaxBertModel"),vkr=o(" (BERT model)"),Fkr=l(),sC=a("li"),pMe=a("strong"),Tkr=o("big_bird"),Mkr=o(" \u2014 "),WY=a("a"),Ekr=o("FlaxBigBirdModel"),Ckr=o(" (BigBird model)"),wkr=l(),lC=a("li"),uMe=a("strong"),Akr=o("blenderbot"),ykr=o(" \u2014 "),QY=a("a"),Lkr=o("FlaxBlenderbotModel"),xkr=o(" (Blenderbot model)"),$kr=l(),iC=a("li"),_Me=a("strong"),kkr=o("blenderbot-small"),Skr=o(" \u2014 "),HY=a("a"),Rkr=o("FlaxBlenderbotSmallModel"),Pkr=o(" (BlenderbotSmall model)"),Bkr=l(),dC=a("li"),bMe=a("strong"),Ikr=o("clip"),Nkr=o(" \u2014 "),UY=a("a"),qkr=o("FlaxCLIPModel"),jkr=o(" (CLIP model)"),Dkr=l(),cC=a("li"),vMe=a("strong"),Gkr=o("distilbert"),Okr=o(" \u2014 "),JY=a("a"),Vkr=o("FlaxDistilBertModel"),Xkr=o(" (DistilBERT model)"),zkr=l(),fC=a("li"),FMe=a("strong"),Wkr=o("electra"),Qkr=o(" \u2014 "),YY=a("a"),Hkr=o("FlaxElectraModel"),Ukr=o(" (ELECTRA model)"),Jkr=l(),mC=a("li"),TMe=a("strong"),Ykr=o("gpt2"),Kkr=o(" \u2014 "),KY=a("a"),Zkr=o("FlaxGPT2Model"),eSr=o(" (OpenAI GPT-2 model)"),oSr=l(),gC=a("li"),MMe=a("strong"),rSr=o("gpt_neo"),tSr=o(" \u2014 "),ZY=a("a"),aSr=o("FlaxGPTNeoModel"),nSr=o(" (GPT Neo model)"),sSr=l(),hC=a("li"),EMe=a("strong"),lSr=o("gptj"),iSr=o(" \u2014 "),eK=a("a"),dSr=o("FlaxGPTJModel"),cSr=o(" (GPT-J model)"),fSr=l(),pC=a("li"),CMe=a("strong"),mSr=o("marian"),gSr=o(" \u2014 "),oK=a("a"),hSr=o("FlaxMarianModel"),pSr=o(" (Marian model)"),uSr=l(),uC=a("li"),wMe=a("strong"),_Sr=o("mbart"),bSr=o(" \u2014 "),rK=a("a"),vSr=o("FlaxMBartModel"),FSr=o(" (mBART model)"),TSr=l(),_C=a("li"),AMe=a("strong"),MSr=o("mt5"),ESr=o(" \u2014 "),tK=a("a"),CSr=o("FlaxMT5Model"),wSr=o(" (MT5 model)"),ASr=l(),bC=a("li"),yMe=a("strong"),ySr=o("opt"),LSr=o(" \u2014 "),aK=a("a"),xSr=o("FlaxOPTModel"),$Sr=o(" (OPT model)"),kSr=l(),vC=a("li"),LMe=a("strong"),SSr=o("pegasus"),RSr=o(" \u2014 "),nK=a("a"),PSr=o("FlaxPegasusModel"),BSr=o(" (Pegasus model)"),ISr=l(),FC=a("li"),xMe=a("strong"),NSr=o("roberta"),qSr=o(" \u2014 "),sK=a("a"),jSr=o("FlaxRobertaModel"),DSr=o(" (RoBERTa model)"),GSr=l(),TC=a("li"),$Me=a("strong"),OSr=o("roformer"),VSr=o(" \u2014 "),lK=a("a"),XSr=o("FlaxRoFormerModel"),zSr=o(" (RoFormer model)"),WSr=l(),MC=a("li"),kMe=a("strong"),QSr=o("t5"),HSr=o(" \u2014 "),iK=a("a"),USr=o("FlaxT5Model"),JSr=o(" (T5 model)"),YSr=l(),EC=a("li"),SMe=a("strong"),KSr=o("vision-text-dual-encoder"),ZSr=o(" \u2014 "),dK=a("a"),eRr=o("FlaxVisionTextDualEncoderModel"),oRr=o(" (VisionTextDualEncoder model)"),rRr=l(),CC=a("li"),RMe=a("strong"),tRr=o("vit"),aRr=o(" \u2014 "),cK=a("a"),nRr=o("FlaxViTModel"),sRr=o(" (ViT model)"),lRr=l(),wC=a("li"),PMe=a("strong"),iRr=o("wav2vec2"),dRr=o(" \u2014 "),fK=a("a"),cRr=o("FlaxWav2Vec2Model"),fRr=o(" (Wav2Vec2 model)"),mRr=l(),AC=a("li"),BMe=a("strong"),gRr=o("xglm"),hRr=o(" \u2014 "),mK=a("a"),pRr=o("FlaxXGLMModel"),uRr=o(" (XGLM model)"),_Rr=l(),yC=a("li"),IMe=a("strong"),bRr=o("xlm-roberta"),vRr=o(" \u2014 "),gK=a("a"),FRr=o("FlaxXLMRobertaModel"),TRr=o(" (XLM-RoBERTa model)"),MRr=l(),F(LC.$$.fragment),SGe=l(),Vc=a("h2"),xC=a("a"),NMe=a("span"),F(gx.$$.fragment),ERr=l(),qMe=a("span"),CRr=o("FlaxAutoModelForCausalLM"),RGe=l(),hr=a("div"),F(hx.$$.fragment),wRr=l(),Xc=a("p"),ARr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hK=a("a"),yRr=o("from_pretrained()"),LRr=o(" class method or the "),pK=a("a"),xRr=o("from_config()"),$Rr=o(` class
method.`),kRr=l(),px=a("p"),SRr=o("This class cannot be instantiated directly using "),jMe=a("code"),RRr=o("__init__()"),PRr=o(" (throws an error)."),BRr=l(),zt=a("div"),F(ux.$$.fragment),IRr=l(),DMe=a("p"),NRr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qRr=l(),zc=a("p"),jRr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),DRr=o("not"),GRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),ORr=o("from_pretrained()"),VRr=o(" to load the model weights."),XRr=l(),F($C.$$.fragment),zRr=l(),Or=a("div"),F(_x.$$.fragment),WRr=l(),OMe=a("p"),QRr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HRr=l(),Fn=a("p"),URr=o("The model class to instantiate is selected based on the "),VMe=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),xe=a("ul"),kC=a("li"),WMe=a("strong"),tPr=o("bart"),aPr=o(" \u2014 "),_K=a("a"),nPr=o("FlaxBartForCausalLM"),sPr=o(" (BART model)"),lPr=l(),SC=a("li"),QMe=a("strong"),iPr=o("bert"),dPr=o(" \u2014 "),bK=a("a"),cPr=o("FlaxBertForCausalLM"),fPr=o(" (BERT model)"),mPr=l(),RC=a("li"),HMe=a("strong"),gPr=o("big_bird"),hPr=o(" \u2014 "),vK=a("a"),pPr=o("FlaxBigBirdForCausalLM"),uPr=o(" (BigBird model)"),_Pr=l(),PC=a("li"),UMe=a("strong"),bPr=o("electra"),vPr=o(" \u2014 "),FK=a("a"),FPr=o("FlaxElectraForCausalLM"),TPr=o(" (ELECTRA model)"),MPr=l(),BC=a("li"),JMe=a("strong"),EPr=o("gpt2"),CPr=o(" \u2014 "),TK=a("a"),wPr=o("FlaxGPT2LMHeadModel"),APr=o(" (OpenAI GPT-2 model)"),yPr=l(),IC=a("li"),YMe=a("strong"),LPr=o("gpt_neo"),xPr=o(" \u2014 "),MK=a("a"),$Pr=o("FlaxGPTNeoForCausalLM"),kPr=o(" (GPT Neo model)"),SPr=l(),NC=a("li"),KMe=a("strong"),RPr=o("gptj"),PPr=o(" \u2014 "),EK=a("a"),BPr=o("FlaxGPTJForCausalLM"),IPr=o(" (GPT-J model)"),NPr=l(),qC=a("li"),ZMe=a("strong"),qPr=o("opt"),jPr=o(" \u2014 "),CK=a("a"),DPr=o("FlaxOPTForCausalLM"),GPr=o(" (OPT model)"),OPr=l(),jC=a("li"),e4e=a("strong"),VPr=o("roberta"),XPr=o(" \u2014 "),wK=a("a"),zPr=o("FlaxRobertaForCausalLM"),WPr=o(" (RoBERTa model)"),QPr=l(),DC=a("li"),o4e=a("strong"),HPr=o("xglm"),UPr=o(" \u2014 "),AK=a("a"),JPr=o("FlaxXGLMForCausalLM"),YPr=o(" (XGLM model)"),KPr=l(),F(GC.$$.fragment),PGe=l(),Wc=a("h2"),OC=a("a"),r4e=a("span"),F(bx.$$.fragment),ZPr=l(),t4e=a("span"),eBr=o("FlaxAutoModelForPreTraining"),BGe=l(),pr=a("div"),F(vx.$$.fragment),oBr=l(),Qc=a("p"),rBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yK=a("a"),tBr=o("from_pretrained()"),aBr=o(" class method or the "),LK=a("a"),nBr=o("from_config()"),sBr=o(` class
method.`),lBr=l(),Fx=a("p"),iBr=o("This class cannot be instantiated directly using "),a4e=a("code"),dBr=o("__init__()"),cBr=o(" (throws an error)."),fBr=l(),Wt=a("div"),F(Tx.$$.fragment),mBr=l(),n4e=a("p"),gBr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hBr=l(),Hc=a("p"),pBr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),uBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),bBr=o("from_pretrained()"),vBr=o(" to load the model weights."),FBr=l(),F(VC.$$.fragment),TBr=l(),Vr=a("div"),F(Mx.$$.fragment),MBr=l(),l4e=a("p"),EBr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CBr=l(),Tn=a("p"),wBr=o("The model class to instantiate is selected based on the "),i4e=a("code"),ABr=o("model_type"),yBr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),LBr=o("pretrained_model_name_or_path"),xBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),$Br=o("pretrained_model_name_or_path"),kBr=o(":"),SBr=l(),Ee=a("ul"),XC=a("li"),f4e=a("strong"),RBr=o("albert"),PBr=o(" \u2014 "),$K=a("a"),BBr=o("FlaxAlbertForPreTraining"),IBr=o(" (ALBERT model)"),NBr=l(),zC=a("li"),m4e=a("strong"),qBr=o("bart"),jBr=o(" \u2014 "),kK=a("a"),DBr=o("FlaxBartForConditionalGeneration"),GBr=o(" (BART model)"),OBr=l(),WC=a("li"),g4e=a("strong"),VBr=o("bert"),XBr=o(" \u2014 "),SK=a("a"),zBr=o("FlaxBertForPreTraining"),WBr=o(" (BERT model)"),QBr=l(),QC=a("li"),h4e=a("strong"),HBr=o("big_bird"),UBr=o(" \u2014 "),RK=a("a"),JBr=o("FlaxBigBirdForPreTraining"),YBr=o(" (BigBird model)"),KBr=l(),HC=a("li"),p4e=a("strong"),ZBr=o("electra"),eIr=o(" \u2014 "),PK=a("a"),oIr=o("FlaxElectraForPreTraining"),rIr=o(" (ELECTRA model)"),tIr=l(),UC=a("li"),u4e=a("strong"),aIr=o("mbart"),nIr=o(" \u2014 "),BK=a("a"),sIr=o("FlaxMBartForConditionalGeneration"),lIr=o(" (mBART model)"),iIr=l(),JC=a("li"),_4e=a("strong"),dIr=o("mt5"),cIr=o(" \u2014 "),IK=a("a"),fIr=o("FlaxMT5ForConditionalGeneration"),mIr=o(" (MT5 model)"),gIr=l(),YC=a("li"),b4e=a("strong"),hIr=o("roberta"),pIr=o(" \u2014 "),NK=a("a"),uIr=o("FlaxRobertaForMaskedLM"),_Ir=o(" (RoBERTa model)"),bIr=l(),KC=a("li"),v4e=a("strong"),vIr=o("roformer"),FIr=o(" \u2014 "),qK=a("a"),TIr=o("FlaxRoFormerForMaskedLM"),MIr=o(" (RoFormer model)"),EIr=l(),ZC=a("li"),F4e=a("strong"),CIr=o("t5"),wIr=o(" \u2014 "),jK=a("a"),AIr=o("FlaxT5ForConditionalGeneration"),yIr=o(" (T5 model)"),LIr=l(),e5=a("li"),T4e=a("strong"),xIr=o("wav2vec2"),$Ir=o(" \u2014 "),DK=a("a"),kIr=o("FlaxWav2Vec2ForPreTraining"),SIr=o(" (Wav2Vec2 model)"),RIr=l(),o5=a("li"),M4e=a("strong"),PIr=o("xlm-roberta"),BIr=o(" \u2014 "),GK=a("a"),IIr=o("FlaxXLMRobertaForMaskedLM"),NIr=o(" (XLM-RoBERTa model)"),qIr=l(),F(r5.$$.fragment),IGe=l(),Uc=a("h2"),t5=a("a"),E4e=a("span"),F(Ex.$$.fragment),jIr=l(),C4e=a("span"),DIr=o("FlaxAutoModelForMaskedLM"),NGe=l(),ur=a("div"),F(Cx.$$.fragment),GIr=l(),Jc=a("p"),OIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OK=a("a"),VIr=o("from_pretrained()"),XIr=o(" class method or the "),VK=a("a"),zIr=o("from_config()"),WIr=o(` class
method.`),QIr=l(),wx=a("p"),HIr=o("This class cannot be instantiated directly using "),w4e=a("code"),UIr=o("__init__()"),JIr=o(" (throws an error)."),YIr=l(),Qt=a("div"),F(Ax.$$.fragment),KIr=l(),A4e=a("p"),ZIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eNr=l(),Yc=a("p"),oNr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),rNr=o("not"),tNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),aNr=o("from_pretrained()"),nNr=o(" to load the model weights."),sNr=l(),F(a5.$$.fragment),lNr=l(),Xr=a("div"),F(yx.$$.fragment),iNr=l(),L4e=a("p"),dNr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cNr=l(),Mn=a("p"),fNr=o("The model class to instantiate is selected based on the "),x4e=a("code"),mNr=o("model_type"),gNr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),hNr=o("pretrained_model_name_or_path"),pNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),uNr=o("pretrained_model_name_or_path"),_Nr=o(":"),bNr=l(),$e=a("ul"),n5=a("li"),S4e=a("strong"),vNr=o("albert"),FNr=o(" \u2014 "),zK=a("a"),TNr=o("FlaxAlbertForMaskedLM"),MNr=o(" (ALBERT model)"),ENr=l(),s5=a("li"),R4e=a("strong"),CNr=o("bart"),wNr=o(" \u2014 "),WK=a("a"),ANr=o("FlaxBartForConditionalGeneration"),yNr=o(" (BART model)"),LNr=l(),l5=a("li"),P4e=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),QK=a("a"),kNr=o("FlaxBertForMaskedLM"),SNr=o(" (BERT model)"),RNr=l(),i5=a("li"),B4e=a("strong"),PNr=o("big_bird"),BNr=o(" \u2014 "),HK=a("a"),INr=o("FlaxBigBirdForMaskedLM"),NNr=o(" (BigBird model)"),qNr=l(),d5=a("li"),I4e=a("strong"),jNr=o("distilbert"),DNr=o(" \u2014 "),UK=a("a"),GNr=o("FlaxDistilBertForMaskedLM"),ONr=o(" (DistilBERT model)"),VNr=l(),c5=a("li"),N4e=a("strong"),XNr=o("electra"),zNr=o(" \u2014 "),JK=a("a"),WNr=o("FlaxElectraForMaskedLM"),QNr=o(" (ELECTRA model)"),HNr=l(),f5=a("li"),q4e=a("strong"),UNr=o("mbart"),JNr=o(" \u2014 "),YK=a("a"),YNr=o("FlaxMBartForConditionalGeneration"),KNr=o(" (mBART model)"),ZNr=l(),m5=a("li"),j4e=a("strong"),eqr=o("roberta"),oqr=o(" \u2014 "),KK=a("a"),rqr=o("FlaxRobertaForMaskedLM"),tqr=o(" (RoBERTa model)"),aqr=l(),g5=a("li"),D4e=a("strong"),nqr=o("roformer"),sqr=o(" \u2014 "),ZK=a("a"),lqr=o("FlaxRoFormerForMaskedLM"),iqr=o(" (RoFormer model)"),dqr=l(),h5=a("li"),G4e=a("strong"),cqr=o("xlm-roberta"),fqr=o(" \u2014 "),eZ=a("a"),mqr=o("FlaxXLMRobertaForMaskedLM"),gqr=o(" (XLM-RoBERTa model)"),hqr=l(),F(p5.$$.fragment),qGe=l(),Kc=a("h2"),u5=a("a"),O4e=a("span"),F(Lx.$$.fragment),pqr=l(),V4e=a("span"),uqr=o("FlaxAutoModelForSeq2SeqLM"),jGe=l(),_r=a("div"),F(xx.$$.fragment),_qr=l(),Zc=a("p"),bqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oZ=a("a"),vqr=o("from_pretrained()"),Fqr=o(" class method or the "),rZ=a("a"),Tqr=o("from_config()"),Mqr=o(` class
method.`),Eqr=l(),$x=a("p"),Cqr=o("This class cannot be instantiated directly using "),X4e=a("code"),wqr=o("__init__()"),Aqr=o(" (throws an error)."),yqr=l(),Ht=a("div"),F(kx.$$.fragment),Lqr=l(),z4e=a("p"),xqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$qr=l(),ef=a("p"),kqr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),Sqr=o("not"),Rqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" to load the model weights."),Iqr=l(),F(_5.$$.fragment),Nqr=l(),zr=a("div"),F(Sx.$$.fragment),qqr=l(),Q4e=a("p"),jqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dqr=l(),En=a("p"),Gqr=o("The model class to instantiate is selected based on the "),H4e=a("code"),Oqr=o("model_type"),Vqr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),Wqr=o("pretrained_model_name_or_path"),Qqr=o(":"),Hqr=l(),Pe=a("ul"),b5=a("li"),Y4e=a("strong"),Uqr=o("bart"),Jqr=o(" \u2014 "),aZ=a("a"),Yqr=o("FlaxBartForConditionalGeneration"),Kqr=o(" (BART model)"),Zqr=l(),v5=a("li"),K4e=a("strong"),ejr=o("blenderbot"),ojr=o(" \u2014 "),nZ=a("a"),rjr=o("FlaxBlenderbotForConditionalGeneration"),tjr=o(" (Blenderbot model)"),ajr=l(),F5=a("li"),Z4e=a("strong"),njr=o("blenderbot-small"),sjr=o(" \u2014 "),sZ=a("a"),ljr=o("FlaxBlenderbotSmallForConditionalGeneration"),ijr=o(" (BlenderbotSmall model)"),djr=l(),T5=a("li"),eEe=a("strong"),cjr=o("encoder-decoder"),fjr=o(" \u2014 "),lZ=a("a"),mjr=o("FlaxEncoderDecoderModel"),gjr=o(" (Encoder decoder model)"),hjr=l(),M5=a("li"),oEe=a("strong"),pjr=o("marian"),ujr=o(" \u2014 "),iZ=a("a"),_jr=o("FlaxMarianMTModel"),bjr=o(" (Marian model)"),vjr=l(),E5=a("li"),rEe=a("strong"),Fjr=o("mbart"),Tjr=o(" \u2014 "),dZ=a("a"),Mjr=o("FlaxMBartForConditionalGeneration"),Ejr=o(" (mBART model)"),Cjr=l(),C5=a("li"),tEe=a("strong"),wjr=o("mt5"),Ajr=o(" \u2014 "),cZ=a("a"),yjr=o("FlaxMT5ForConditionalGeneration"),Ljr=o(" (MT5 model)"),xjr=l(),w5=a("li"),aEe=a("strong"),$jr=o("pegasus"),kjr=o(" \u2014 "),fZ=a("a"),Sjr=o("FlaxPegasusForConditionalGeneration"),Rjr=o(" (Pegasus model)"),Pjr=l(),A5=a("li"),nEe=a("strong"),Bjr=o("t5"),Ijr=o(" \u2014 "),mZ=a("a"),Njr=o("FlaxT5ForConditionalGeneration"),qjr=o(" (T5 model)"),jjr=l(),F(y5.$$.fragment),DGe=l(),of=a("h2"),L5=a("a"),sEe=a("span"),F(Rx.$$.fragment),Djr=l(),lEe=a("span"),Gjr=o("FlaxAutoModelForSequenceClassification"),GGe=l(),br=a("div"),F(Px.$$.fragment),Ojr=l(),rf=a("p"),Vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gZ=a("a"),Xjr=o("from_pretrained()"),zjr=o(" class method or the "),hZ=a("a"),Wjr=o("from_config()"),Qjr=o(` class
method.`),Hjr=l(),Bx=a("p"),Ujr=o("This class cannot be instantiated directly using "),iEe=a("code"),Jjr=o("__init__()"),Yjr=o(" (throws an error)."),Kjr=l(),Ut=a("div"),F(Ix.$$.fragment),Zjr=l(),dEe=a("p"),eDr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oDr=l(),tf=a("p"),rDr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),tDr=o("not"),aDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),nDr=o("from_pretrained()"),sDr=o(" to load the model weights."),lDr=l(),F(x5.$$.fragment),iDr=l(),Wr=a("div"),F(Nx.$$.fragment),dDr=l(),fEe=a("p"),cDr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fDr=l(),Cn=a("p"),mDr=o("The model class to instantiate is selected based on the "),mEe=a("code"),gDr=o("model_type"),hDr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),pDr=o("pretrained_model_name_or_path"),uDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),_Dr=o("pretrained_model_name_or_path"),bDr=o(":"),vDr=l(),ke=a("ul"),$5=a("li"),pEe=a("strong"),FDr=o("albert"),TDr=o(" \u2014 "),uZ=a("a"),MDr=o("FlaxAlbertForSequenceClassification"),EDr=o(" (ALBERT model)"),CDr=l(),k5=a("li"),uEe=a("strong"),wDr=o("bart"),ADr=o(" \u2014 "),_Z=a("a"),yDr=o("FlaxBartForSequenceClassification"),LDr=o(" (BART model)"),xDr=l(),S5=a("li"),_Ee=a("strong"),$Dr=o("bert"),kDr=o(" \u2014 "),bZ=a("a"),SDr=o("FlaxBertForSequenceClassification"),RDr=o(" (BERT model)"),PDr=l(),R5=a("li"),bEe=a("strong"),BDr=o("big_bird"),IDr=o(" \u2014 "),vZ=a("a"),NDr=o("FlaxBigBirdForSequenceClassification"),qDr=o(" (BigBird model)"),jDr=l(),P5=a("li"),vEe=a("strong"),DDr=o("distilbert"),GDr=o(" \u2014 "),FZ=a("a"),ODr=o("FlaxDistilBertForSequenceClassification"),VDr=o(" (DistilBERT model)"),XDr=l(),B5=a("li"),FEe=a("strong"),zDr=o("electra"),WDr=o(" \u2014 "),TZ=a("a"),QDr=o("FlaxElectraForSequenceClassification"),HDr=o(" (ELECTRA model)"),UDr=l(),I5=a("li"),TEe=a("strong"),JDr=o("mbart"),YDr=o(" \u2014 "),MZ=a("a"),KDr=o("FlaxMBartForSequenceClassification"),ZDr=o(" (mBART model)"),eGr=l(),N5=a("li"),MEe=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),EZ=a("a"),tGr=o("FlaxRobertaForSequenceClassification"),aGr=o(" (RoBERTa model)"),nGr=l(),q5=a("li"),EEe=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),CZ=a("a"),iGr=o("FlaxRoFormerForSequenceClassification"),dGr=o(" (RoFormer model)"),cGr=l(),j5=a("li"),CEe=a("strong"),fGr=o("xlm-roberta"),mGr=o(" \u2014 "),wZ=a("a"),gGr=o("FlaxXLMRobertaForSequenceClassification"),hGr=o(" (XLM-RoBERTa model)"),pGr=l(),F(D5.$$.fragment),OGe=l(),af=a("h2"),G5=a("a"),wEe=a("span"),F(qx.$$.fragment),uGr=l(),AEe=a("span"),_Gr=o("FlaxAutoModelForQuestionAnswering"),VGe=l(),vr=a("div"),F(jx.$$.fragment),bGr=l(),nf=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),yZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),Dx=a("p"),wGr=o("This class cannot be instantiated directly using "),yEe=a("code"),AGr=o("__init__()"),yGr=o(" (throws an error)."),LGr=l(),Jt=a("div"),F(Gx.$$.fragment),xGr=l(),LEe=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kGr=l(),sf=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),NGr=l(),F(O5.$$.fragment),qGr=l(),Qr=a("div"),F(Ox.$$.fragment),jGr=l(),$Ee=a("p"),DGr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GGr=l(),wn=a("p"),OGr=o("The model class to instantiate is selected based on the "),kEe=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),Se=a("ul"),V5=a("li"),PEe=a("strong"),JGr=o("albert"),YGr=o(" \u2014 "),xZ=a("a"),KGr=o("FlaxAlbertForQuestionAnswering"),ZGr=o(" (ALBERT model)"),eOr=l(),X5=a("li"),BEe=a("strong"),oOr=o("bart"),rOr=o(" \u2014 "),$Z=a("a"),tOr=o("FlaxBartForQuestionAnswering"),aOr=o(" (BART model)"),nOr=l(),z5=a("li"),IEe=a("strong"),sOr=o("bert"),lOr=o(" \u2014 "),kZ=a("a"),iOr=o("FlaxBertForQuestionAnswering"),dOr=o(" (BERT model)"),cOr=l(),W5=a("li"),NEe=a("strong"),fOr=o("big_bird"),mOr=o(" \u2014 "),SZ=a("a"),gOr=o("FlaxBigBirdForQuestionAnswering"),hOr=o(" (BigBird model)"),pOr=l(),Q5=a("li"),qEe=a("strong"),uOr=o("distilbert"),_Or=o(" \u2014 "),RZ=a("a"),bOr=o("FlaxDistilBertForQuestionAnswering"),vOr=o(" (DistilBERT model)"),FOr=l(),H5=a("li"),jEe=a("strong"),TOr=o("electra"),MOr=o(" \u2014 "),PZ=a("a"),EOr=o("FlaxElectraForQuestionAnswering"),COr=o(" (ELECTRA model)"),wOr=l(),U5=a("li"),DEe=a("strong"),AOr=o("mbart"),yOr=o(" \u2014 "),BZ=a("a"),LOr=o("FlaxMBartForQuestionAnswering"),xOr=o(" (mBART model)"),$Or=l(),J5=a("li"),GEe=a("strong"),kOr=o("roberta"),SOr=o(" \u2014 "),IZ=a("a"),ROr=o("FlaxRobertaForQuestionAnswering"),POr=o(" (RoBERTa model)"),BOr=l(),Y5=a("li"),OEe=a("strong"),IOr=o("roformer"),NOr=o(" \u2014 "),NZ=a("a"),qOr=o("FlaxRoFormerForQuestionAnswering"),jOr=o(" (RoFormer model)"),DOr=l(),K5=a("li"),VEe=a("strong"),GOr=o("xlm-roberta"),OOr=o(" \u2014 "),qZ=a("a"),VOr=o("FlaxXLMRobertaForQuestionAnswering"),XOr=o(" (XLM-RoBERTa model)"),zOr=l(),F(Z5.$$.fragment),XGe=l(),lf=a("h2"),e3=a("a"),XEe=a("span"),F(Vx.$$.fragment),WOr=l(),zEe=a("span"),QOr=o("FlaxAutoModelForTokenClassification"),zGe=l(),Fr=a("div"),F(Xx.$$.fragment),HOr=l(),df=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),DZ=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),zx=a("p"),oVr=o("This class cannot be instantiated directly using "),WEe=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Yt=a("div"),F(Wx.$$.fragment),nVr=l(),QEe=a("p"),sVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lVr=l(),cf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(o3.$$.fragment),hVr=l(),Hr=a("div"),F(Qx.$$.fragment),pVr=l(),UEe=a("p"),uVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Vr=l(),An=a("p"),bVr=o("The model class to instantiate is selected based on the "),JEe=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),Oe=a("ul"),r3=a("li"),ZEe=a("strong"),AVr=o("albert"),yVr=o(" \u2014 "),OZ=a("a"),LVr=o("FlaxAlbertForTokenClassification"),xVr=o(" (ALBERT model)"),$Vr=l(),t3=a("li"),eCe=a("strong"),kVr=o("bert"),SVr=o(" \u2014 "),VZ=a("a"),RVr=o("FlaxBertForTokenClassification"),PVr=o(" (BERT model)"),BVr=l(),a3=a("li"),oCe=a("strong"),IVr=o("big_bird"),NVr=o(" \u2014 "),XZ=a("a"),qVr=o("FlaxBigBirdForTokenClassification"),jVr=o(" (BigBird model)"),DVr=l(),n3=a("li"),rCe=a("strong"),GVr=o("distilbert"),OVr=o(" \u2014 "),zZ=a("a"),VVr=o("FlaxDistilBertForTokenClassification"),XVr=o(" (DistilBERT model)"),zVr=l(),s3=a("li"),tCe=a("strong"),WVr=o("electra"),QVr=o(" \u2014 "),WZ=a("a"),HVr=o("FlaxElectraForTokenClassification"),UVr=o(" (ELECTRA model)"),JVr=l(),l3=a("li"),aCe=a("strong"),YVr=o("roberta"),KVr=o(" \u2014 "),QZ=a("a"),ZVr=o("FlaxRobertaForTokenClassification"),eXr=o(" (RoBERTa model)"),oXr=l(),i3=a("li"),nCe=a("strong"),rXr=o("roformer"),tXr=o(" \u2014 "),HZ=a("a"),aXr=o("FlaxRoFormerForTokenClassification"),nXr=o(" (RoFormer model)"),sXr=l(),d3=a("li"),sCe=a("strong"),lXr=o("xlm-roberta"),iXr=o(" \u2014 "),UZ=a("a"),dXr=o("FlaxXLMRobertaForTokenClassification"),cXr=o(" (XLM-RoBERTa model)"),fXr=l(),F(c3.$$.fragment),WGe=l(),ff=a("h2"),f3=a("a"),lCe=a("span"),F(Hx.$$.fragment),mXr=l(),iCe=a("span"),gXr=o("FlaxAutoModelForMultipleChoice"),QGe=l(),Tr=a("div"),F(Ux.$$.fragment),hXr=l(),mf=a("p"),pXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JZ=a("a"),uXr=o("from_pretrained()"),_Xr=o(" class method or the "),YZ=a("a"),bXr=o("from_config()"),vXr=o(` class
method.`),FXr=l(),Jx=a("p"),TXr=o("This class cannot be instantiated directly using "),dCe=a("code"),MXr=o("__init__()"),EXr=o(" (throws an error)."),CXr=l(),Kt=a("div"),F(Yx.$$.fragment),wXr=l(),cCe=a("p"),AXr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yXr=l(),gf=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),xXr=o("not"),$Xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),kXr=o("from_pretrained()"),SXr=o(" to load the model weights."),RXr=l(),F(m3.$$.fragment),PXr=l(),Ur=a("div"),F(Kx.$$.fragment),BXr=l(),mCe=a("p"),IXr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NXr=l(),yn=a("p"),qXr=o("The model class to instantiate is selected based on the "),gCe=a("code"),jXr=o("model_type"),DXr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),GXr=o("pretrained_model_name_or_path"),OXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),VXr=o("pretrained_model_name_or_path"),XXr=o(":"),zXr=l(),Ve=a("ul"),g3=a("li"),uCe=a("strong"),WXr=o("albert"),QXr=o(" \u2014 "),ZZ=a("a"),HXr=o("FlaxAlbertForMultipleChoice"),UXr=o(" (ALBERT model)"),JXr=l(),h3=a("li"),_Ce=a("strong"),YXr=o("bert"),KXr=o(" \u2014 "),eee=a("a"),ZXr=o("FlaxBertForMultipleChoice"),ezr=o(" (BERT model)"),ozr=l(),p3=a("li"),bCe=a("strong"),rzr=o("big_bird"),tzr=o(" \u2014 "),oee=a("a"),azr=o("FlaxBigBirdForMultipleChoice"),nzr=o(" (BigBird model)"),szr=l(),u3=a("li"),vCe=a("strong"),lzr=o("distilbert"),izr=o(" \u2014 "),ree=a("a"),dzr=o("FlaxDistilBertForMultipleChoice"),czr=o(" (DistilBERT model)"),fzr=l(),_3=a("li"),FCe=a("strong"),mzr=o("electra"),gzr=o(" \u2014 "),tee=a("a"),hzr=o("FlaxElectraForMultipleChoice"),pzr=o(" (ELECTRA model)"),uzr=l(),b3=a("li"),TCe=a("strong"),_zr=o("roberta"),bzr=o(" \u2014 "),aee=a("a"),vzr=o("FlaxRobertaForMultipleChoice"),Fzr=o(" (RoBERTa model)"),Tzr=l(),v3=a("li"),MCe=a("strong"),Mzr=o("roformer"),Ezr=o(" \u2014 "),nee=a("a"),Czr=o("FlaxRoFormerForMultipleChoice"),wzr=o(" (RoFormer model)"),Azr=l(),F3=a("li"),ECe=a("strong"),yzr=o("xlm-roberta"),Lzr=o(" \u2014 "),see=a("a"),xzr=o("FlaxXLMRobertaForMultipleChoice"),$zr=o(" (XLM-RoBERTa model)"),kzr=l(),F(T3.$$.fragment),HGe=l(),hf=a("h2"),M3=a("a"),CCe=a("span"),F(Zx.$$.fragment),Szr=l(),wCe=a("span"),Rzr=o("FlaxAutoModelForNextSentencePrediction"),UGe=l(),Mr=a("div"),F(e$.$$.fragment),Pzr=l(),pf=a("p"),Bzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lee=a("a"),Izr=o("from_pretrained()"),Nzr=o(" class method or the "),iee=a("a"),qzr=o("from_config()"),jzr=o(` class
method.`),Dzr=l(),o$=a("p"),Gzr=o("This class cannot be instantiated directly using "),ACe=a("code"),Ozr=o("__init__()"),Vzr=o(" (throws an error)."),Xzr=l(),Zt=a("div"),F(r$.$$.fragment),zzr=l(),yCe=a("p"),Wzr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qzr=l(),uf=a("p"),Hzr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),Uzr=o("not"),Jzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),Yzr=o("from_pretrained()"),Kzr=o(" to load the model weights."),Zzr=l(),F(E3.$$.fragment),eWr=l(),Jr=a("div"),F(t$.$$.fragment),oWr=l(),xCe=a("p"),rWr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tWr=l(),Ln=a("p"),aWr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),nWr=o("model_type"),sWr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),lWr=o("pretrained_model_name_or_path"),iWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),dWr=o("pretrained_model_name_or_path"),cWr=o(":"),fWr=l(),RCe=a("ul"),C3=a("li"),PCe=a("strong"),mWr=o("bert"),gWr=o(" \u2014 "),cee=a("a"),hWr=o("FlaxBertForNextSentencePrediction"),pWr=o(" (BERT model)"),uWr=l(),F(w3.$$.fragment),JGe=l(),_f=a("h2"),A3=a("a"),BCe=a("span"),F(a$.$$.fragment),_Wr=l(),ICe=a("span"),bWr=o("FlaxAutoModelForImageClassification"),YGe=l(),Er=a("div"),F(n$.$$.fragment),vWr=l(),bf=a("p"),FWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fee=a("a"),TWr=o("from_pretrained()"),MWr=o(" class method or the "),mee=a("a"),EWr=o("from_config()"),CWr=o(` class
method.`),wWr=l(),s$=a("p"),AWr=o("This class cannot be instantiated directly using "),NCe=a("code"),yWr=o("__init__()"),LWr=o(" (throws an error)."),xWr=l(),ea=a("div"),F(l$.$$.fragment),$Wr=l(),qCe=a("p"),kWr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SWr=l(),vf=a("p"),RWr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),PWr=o("not"),BWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),IWr=o("from_pretrained()"),NWr=o(" to load the model weights."),qWr=l(),F(y3.$$.fragment),jWr=l(),Yr=a("div"),F(i$.$$.fragment),DWr=l(),DCe=a("p"),GWr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OWr=l(),xn=a("p"),VWr=o("The model class to instantiate is selected based on the "),GCe=a("code"),XWr=o("model_type"),zWr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),WWr=o("pretrained_model_name_or_path"),QWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(":"),JWr=l(),d$=a("ul"),L3=a("li"),XCe=a("strong"),YWr=o("beit"),KWr=o(" \u2014 "),hee=a("a"),ZWr=o("FlaxBeitForImageClassification"),eQr=o(" (BEiT model)"),oQr=l(),x3=a("li"),zCe=a("strong"),rQr=o("vit"),tQr=o(" \u2014 "),pee=a("a"),aQr=o("FlaxViTForImageClassification"),nQr=o(" (ViT model)"),sQr=l(),F($3.$$.fragment),KGe=l(),Ff=a("h2"),k3=a("a"),WCe=a("span"),F(c$.$$.fragment),lQr=l(),QCe=a("span"),iQr=o("FlaxAutoModelForVision2Seq"),ZGe=l(),Cr=a("div"),F(f$.$$.fragment),dQr=l(),Tf=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uee=a("a"),fQr=o("from_pretrained()"),mQr=o(" class method or the "),_ee=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),pQr=l(),m$=a("p"),uQr=o("This class cannot be instantiated directly using "),HCe=a("code"),_Qr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),oa=a("div"),F(g$.$$.fragment),FQr=l(),UCe=a("p"),TQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MQr=l(),Mf=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),AQr=o("from_pretrained()"),yQr=o(" to load the model weights."),LQr=l(),F(S3.$$.fragment),xQr=l(),Kr=a("div"),F(h$.$$.fragment),$Qr=l(),YCe=a("p"),kQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SQr=l(),$n=a("p"),RQr=o("The model class to instantiate is selected based on the "),KCe=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),o5e=a("ul"),R3=a("li"),r5e=a("strong"),GQr=o("vision-encoder-decoder"),OQr=o(" \u2014 "),vee=a("a"),VQr=o("FlaxVisionEncoderDecoderModel"),XQr=o(" (Vision Encoder decoder model)"),zQr=l(),F(P3.$$.fragment),this.h()},l(f){const _=FBt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var p$=s(p);m=n(p$,"A",{id:!0,class:!0,href:!0});var t5e=s(m);u=n(t5e,"SPAN",{});var a5e=s(u);T(d.$$.fragment,a5e),a5e.forEach(t),t5e.forEach(t),h=i(p$),Eo=n(p$,"SPAN",{});var n5e=s(Eo);vi=r(n5e,"Auto Classes"),n5e.forEach(t),p$.forEach(t),Af=i(f),at=n(f,"P",{});var u$=s(at);Fi=r(u$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=n(u$,"CODE",{});var s5e=s(Ti);oA=r(s5e,"from_pretrained()"),s5e.forEach(t),yf=r(u$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),u$.forEach(t),Ge=i(f),We=n(f,"P",{});var kn=s(We);Mi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var l5e=s(Sn);rA=r(l5e,"AutoConfig"),l5e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var i5e=s(Pn);tA=r(i5e,"AutoModel"),i5e.forEach(t),Ei=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var d5e=s(Bn);aA=r(d5e,"AutoTokenizer"),d5e.forEach(t),Ci=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),Lf=i(f),T(La.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var _$=s(Ae);$k=r(_$,"will create a model that is an instance of "),wi=n(_$,"A",{href:!0});var c5e=s(wi);kk=r(c5e,"BertModel"),c5e.forEach(t),Sk=r(_$,"."),_$.forEach(t),Co=i(f),xa=n(f,"P",{});var b$=s(xa);Rk=r(b$,"There is one class of "),xf=n(b$,"CODE",{});var f5e=s(xf);Pk=r(f5e,"AutoModel"),f5e.forEach(t),cXe=r(b$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),b$.forEach(t),Uje=i(f),Ai=n(f,"H2",{class:!0});var v$=s(Ai);$f=n(v$,"A",{id:!0,class:!0,href:!0});var m5e=s($f);hre=n(m5e,"SPAN",{});var g5e=s(hre);T(nA.$$.fragment,g5e),g5e.forEach(t),m5e.forEach(t),fXe=i(v$),pre=n(v$,"SPAN",{});var h5e=s(pre);mXe=r(h5e,"Extending the Auto Classes"),h5e.forEach(t),v$.forEach(t),Jje=i(f),In=n(f,"P",{});var Ef=s(In);gXe=r(Ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ure=n(Ef,"CODE",{});var p5e=s(ure);hXe=r(p5e,"NewModel"),p5e.forEach(t),pXe=r(Ef,", make sure you have a "),_re=n(Ef,"CODE",{});var u5e=s(_re);uXe=r(u5e,"NewModelConfig"),u5e.forEach(t),_Xe=r(Ef,` then you can add those to the auto
classes like this:`),Ef.forEach(t),Yje=i(f),T(sA.$$.fragment,f),Kje=i(f),Bk=n(f,"P",{});var _5e=s(Bk);bXe=r(_5e,"You will then be able to use the auto classes like you would usually do!"),_5e.forEach(t),Zje=i(f),T(kf.$$.fragment,f),eDe=i(f),yi=n(f,"H2",{class:!0});var F$=s(yi);Sf=n(F$,"A",{id:!0,class:!0,href:!0});var b5e=s(Sf);bre=n(b5e,"SPAN",{});var v5e=s(bre);T(lA.$$.fragment,v5e),v5e.forEach(t),b5e.forEach(t),vXe=i(F$),vre=n(F$,"SPAN",{});var F5e=s(vre);FXe=r(F5e,"AutoConfig"),F5e.forEach(t),F$.forEach(t),oDe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(iA.$$.fragment,rt),TXe=i(rt),dA=n(rt,"P",{});var T$=s(dA);MXe=r(T$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ik=n(T$,"A",{href:!0});var T5e=s(Ik);EXe=r(T5e,"from_pretrained()"),T5e.forEach(t),CXe=r(T$," class method."),T$.forEach(t),wXe=i(rt),cA=n(rt,"P",{});var M$=s(cA);AXe=r(M$,"This class cannot be instantiated directly using "),Fre=n(M$,"CODE",{});var M5e=s(Fre);yXe=r(M5e,"__init__()"),M5e.forEach(t),LXe=r(M$," (throws an error)."),M$.forEach(t),xXe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(fA.$$.fragment,tt),$Xe=i(tt),Tre=n(tt,"P",{});var E5e=s(Tre);kXe=r(E5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),E5e.forEach(t),SXe=i(tt),Li=n(tt,"P",{});var Cf=s(Li);RXe=r(Cf,"The configuration class to instantiate is selected based on the "),Mre=n(Cf,"CODE",{});var C5e=s(Mre);PXe=r(C5e,"model_type"),C5e.forEach(t),BXe=r(Cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ere=n(Cf,"CODE",{});var w5e=s(Ere);IXe=r(w5e,"pretrained_model_name_or_path"),w5e.forEach(t),NXe=r(Cf,":"),Cf.forEach(t),qXe=i(tt),A=n(tt,"UL",{});var y=s(A);Rf=n(y,"LI",{});var B3=s(Rf);Cre=n(B3,"STRONG",{});var A5e=s(Cre);jXe=r(A5e,"albert"),A5e.forEach(t),DXe=r(B3," \u2014 "),Nk=n(B3,"A",{href:!0});var y5e=s(Nk);GXe=r(y5e,"AlbertConfig"),y5e.forEach(t),OXe=r(B3," (ALBERT model)"),B3.forEach(t),VXe=i(y),Pf=n(y,"LI",{});var I3=s(Pf);wre=n(I3,"STRONG",{});var L5e=s(wre);XXe=r(L5e,"bart"),L5e.forEach(t),zXe=r(I3," \u2014 "),qk=n(I3,"A",{href:!0});var x5e=s(qk);WXe=r(x5e,"BartConfig"),x5e.forEach(t),QXe=r(I3," (BART model)"),I3.forEach(t),HXe=i(y),Bf=n(y,"LI",{});var N3=s(Bf);Are=n(N3,"STRONG",{});var $5e=s(Are);UXe=r($5e,"beit"),$5e.forEach(t),JXe=r(N3," \u2014 "),jk=n(N3,"A",{href:!0});var k5e=s(jk);YXe=r(k5e,"BeitConfig"),k5e.forEach(t),KXe=r(N3," (BEiT model)"),N3.forEach(t),ZXe=i(y),If=n(y,"LI",{});var q3=s(If);yre=n(q3,"STRONG",{});var S5e=s(yre);eze=r(S5e,"bert"),S5e.forEach(t),oze=r(q3," \u2014 "),Dk=n(q3,"A",{href:!0});var R5e=s(Dk);rze=r(R5e,"BertConfig"),R5e.forEach(t),tze=r(q3," (BERT model)"),q3.forEach(t),aze=i(y),Nf=n(y,"LI",{});var j3=s(Nf);Lre=n(j3,"STRONG",{});var P5e=s(Lre);nze=r(P5e,"bert-generation"),P5e.forEach(t),sze=r(j3," \u2014 "),Gk=n(j3,"A",{href:!0});var B5e=s(Gk);lze=r(B5e,"BertGenerationConfig"),B5e.forEach(t),ize=r(j3," (Bert Generation model)"),j3.forEach(t),dze=i(y),qf=n(y,"LI",{});var D3=s(qf);xre=n(D3,"STRONG",{});var I5e=s(xre);cze=r(I5e,"big_bird"),I5e.forEach(t),fze=r(D3," \u2014 "),Ok=n(D3,"A",{href:!0});var N5e=s(Ok);mze=r(N5e,"BigBirdConfig"),N5e.forEach(t),gze=r(D3," (BigBird model)"),D3.forEach(t),hze=i(y),jf=n(y,"LI",{});var G3=s(jf);$re=n(G3,"STRONG",{});var q5e=s($re);pze=r(q5e,"bigbird_pegasus"),q5e.forEach(t),uze=r(G3," \u2014 "),Vk=n(G3,"A",{href:!0});var j5e=s(Vk);_ze=r(j5e,"BigBirdPegasusConfig"),j5e.forEach(t),bze=r(G3," (BigBird-Pegasus model)"),G3.forEach(t),vze=i(y),Df=n(y,"LI",{});var O3=s(Df);kre=n(O3,"STRONG",{});var D5e=s(kre);Fze=r(D5e,"blenderbot"),D5e.forEach(t),Tze=r(O3," \u2014 "),Xk=n(O3,"A",{href:!0});var G5e=s(Xk);Mze=r(G5e,"BlenderbotConfig"),G5e.forEach(t),Eze=r(O3," (Blenderbot model)"),O3.forEach(t),Cze=i(y),Gf=n(y,"LI",{});var V3=s(Gf);Sre=n(V3,"STRONG",{});var O5e=s(Sre);wze=r(O5e,"blenderbot-small"),O5e.forEach(t),Aze=r(V3," \u2014 "),zk=n(V3,"A",{href:!0});var V5e=s(zk);yze=r(V5e,"BlenderbotSmallConfig"),V5e.forEach(t),Lze=r(V3," (BlenderbotSmall model)"),V3.forEach(t),xze=i(y),Of=n(y,"LI",{});var X3=s(Of);Rre=n(X3,"STRONG",{});var X5e=s(Rre);$ze=r(X5e,"camembert"),X5e.forEach(t),kze=r(X3," \u2014 "),Wk=n(X3,"A",{href:!0});var z5e=s(Wk);Sze=r(z5e,"CamembertConfig"),z5e.forEach(t),Rze=r(X3," (CamemBERT model)"),X3.forEach(t),Pze=i(y),Vf=n(y,"LI",{});var z3=s(Vf);Pre=n(z3,"STRONG",{});var W5e=s(Pre);Bze=r(W5e,"canine"),W5e.forEach(t),Ize=r(z3," \u2014 "),Qk=n(z3,"A",{href:!0});var Q5e=s(Qk);Nze=r(Q5e,"CanineConfig"),Q5e.forEach(t),qze=r(z3," (CANINE model)"),z3.forEach(t),jze=i(y),Xf=n(y,"LI",{});var W3=s(Xf);Bre=n(W3,"STRONG",{});var H5e=s(Bre);Dze=r(H5e,"clip"),H5e.forEach(t),Gze=r(W3," \u2014 "),Hk=n(W3,"A",{href:!0});var U5e=s(Hk);Oze=r(U5e,"CLIPConfig"),U5e.forEach(t),Vze=r(W3," (CLIP model)"),W3.forEach(t),Xze=i(y),zf=n(y,"LI",{});var Q3=s(zf);Ire=n(Q3,"STRONG",{});var J5e=s(Ire);zze=r(J5e,"convbert"),J5e.forEach(t),Wze=r(Q3," \u2014 "),Uk=n(Q3,"A",{href:!0});var Y5e=s(Uk);Qze=r(Y5e,"ConvBertConfig"),Y5e.forEach(t),Hze=r(Q3," (ConvBERT model)"),Q3.forEach(t),Uze=i(y),Wf=n(y,"LI",{});var H3=s(Wf);Nre=n(H3,"STRONG",{});var K5e=s(Nre);Jze=r(K5e,"convnext"),K5e.forEach(t),Yze=r(H3," \u2014 "),Jk=n(H3,"A",{href:!0});var Z5e=s(Jk);Kze=r(Z5e,"ConvNextConfig"),Z5e.forEach(t),Zze=r(H3," (ConvNeXT model)"),H3.forEach(t),eWe=i(y),Qf=n(y,"LI",{});var U3=s(Qf);qre=n(U3,"STRONG",{});var e3e=s(qre);oWe=r(e3e,"ctrl"),e3e.forEach(t),rWe=r(U3," \u2014 "),Yk=n(U3,"A",{href:!0});var o3e=s(Yk);tWe=r(o3e,"CTRLConfig"),o3e.forEach(t),aWe=r(U3," (CTRL model)"),U3.forEach(t),nWe=i(y),Hf=n(y,"LI",{});var J3=s(Hf);jre=n(J3,"STRONG",{});var r3e=s(jre);sWe=r(r3e,"cvt"),r3e.forEach(t),lWe=r(J3," \u2014 "),Kk=n(J3,"A",{href:!0});var t3e=s(Kk);iWe=r(t3e,"CvtConfig"),t3e.forEach(t),dWe=r(J3," (CvT model)"),J3.forEach(t),cWe=i(y),Uf=n(y,"LI",{});var Y3=s(Uf);Dre=n(Y3,"STRONG",{});var a3e=s(Dre);fWe=r(a3e,"data2vec-audio"),a3e.forEach(t),mWe=r(Y3," \u2014 "),Zk=n(Y3,"A",{href:!0});var n3e=s(Zk);gWe=r(n3e,"Data2VecAudioConfig"),n3e.forEach(t),hWe=r(Y3," (Data2VecAudio model)"),Y3.forEach(t),pWe=i(y),Jf=n(y,"LI",{});var K3=s(Jf);Gre=n(K3,"STRONG",{});var s3e=s(Gre);uWe=r(s3e,"data2vec-text"),s3e.forEach(t),_We=r(K3," \u2014 "),eS=n(K3,"A",{href:!0});var l3e=s(eS);bWe=r(l3e,"Data2VecTextConfig"),l3e.forEach(t),vWe=r(K3," (Data2VecText model)"),K3.forEach(t),FWe=i(y),Yf=n(y,"LI",{});var Z3=s(Yf);Ore=n(Z3,"STRONG",{});var i3e=s(Ore);TWe=r(i3e,"data2vec-vision"),i3e.forEach(t),MWe=r(Z3," \u2014 "),oS=n(Z3,"A",{href:!0});var d3e=s(oS);EWe=r(d3e,"Data2VecVisionConfig"),d3e.forEach(t),CWe=r(Z3," (Data2VecVision model)"),Z3.forEach(t),wWe=i(y),Kf=n(y,"LI",{});var ew=s(Kf);Vre=n(ew,"STRONG",{});var c3e=s(Vre);AWe=r(c3e,"deberta"),c3e.forEach(t),yWe=r(ew," \u2014 "),rS=n(ew,"A",{href:!0});var f3e=s(rS);LWe=r(f3e,"DebertaConfig"),f3e.forEach(t),xWe=r(ew," (DeBERTa model)"),ew.forEach(t),$We=i(y),Zf=n(y,"LI",{});var ow=s(Zf);Xre=n(ow,"STRONG",{});var m3e=s(Xre);kWe=r(m3e,"deberta-v2"),m3e.forEach(t),SWe=r(ow," \u2014 "),tS=n(ow,"A",{href:!0});var g3e=s(tS);RWe=r(g3e,"DebertaV2Config"),g3e.forEach(t),PWe=r(ow," (DeBERTa-v2 model)"),ow.forEach(t),BWe=i(y),em=n(y,"LI",{});var rw=s(em);zre=n(rw,"STRONG",{});var h3e=s(zre);IWe=r(h3e,"decision_transformer"),h3e.forEach(t),NWe=r(rw," \u2014 "),aS=n(rw,"A",{href:!0});var p3e=s(aS);qWe=r(p3e,"DecisionTransformerConfig"),p3e.forEach(t),jWe=r(rw," (Decision Transformer model)"),rw.forEach(t),DWe=i(y),om=n(y,"LI",{});var tw=s(om);Wre=n(tw,"STRONG",{});var u3e=s(Wre);GWe=r(u3e,"deit"),u3e.forEach(t),OWe=r(tw," \u2014 "),nS=n(tw,"A",{href:!0});var _3e=s(nS);VWe=r(_3e,"DeiTConfig"),_3e.forEach(t),XWe=r(tw," (DeiT model)"),tw.forEach(t),zWe=i(y),rm=n(y,"LI",{});var aw=s(rm);Qre=n(aw,"STRONG",{});var QQr=s(Qre);WWe=r(QQr,"detr"),QQr.forEach(t),QWe=r(aw," \u2014 "),sS=n(aw,"A",{href:!0});var HQr=s(sS);HWe=r(HQr,"DetrConfig"),HQr.forEach(t),UWe=r(aw," (DETR model)"),aw.forEach(t),JWe=i(y),tm=n(y,"LI",{});var b3e=s(tm);Hre=n(b3e,"STRONG",{});var UQr=s(Hre);YWe=r(UQr,"distilbert"),UQr.forEach(t),KWe=r(b3e," \u2014 "),lS=n(b3e,"A",{href:!0});var JQr=s(lS);ZWe=r(JQr,"DistilBertConfig"),JQr.forEach(t),eQe=r(b3e," (DistilBERT model)"),b3e.forEach(t),oQe=i(y),am=n(y,"LI",{});var v3e=s(am);Ure=n(v3e,"STRONG",{});var YQr=s(Ure);rQe=r(YQr,"dpr"),YQr.forEach(t),tQe=r(v3e," \u2014 "),iS=n(v3e,"A",{href:!0});var KQr=s(iS);aQe=r(KQr,"DPRConfig"),KQr.forEach(t),nQe=r(v3e," (DPR model)"),v3e.forEach(t),sQe=i(y),nm=n(y,"LI",{});var F3e=s(nm);Jre=n(F3e,"STRONG",{});var ZQr=s(Jre);lQe=r(ZQr,"dpt"),ZQr.forEach(t),iQe=r(F3e," \u2014 "),dS=n(F3e,"A",{href:!0});var eHr=s(dS);dQe=r(eHr,"DPTConfig"),eHr.forEach(t),cQe=r(F3e," (DPT model)"),F3e.forEach(t),fQe=i(y),sm=n(y,"LI",{});var T3e=s(sm);Yre=n(T3e,"STRONG",{});var oHr=s(Yre);mQe=r(oHr,"electra"),oHr.forEach(t),gQe=r(T3e," \u2014 "),cS=n(T3e,"A",{href:!0});var rHr=s(cS);hQe=r(rHr,"ElectraConfig"),rHr.forEach(t),pQe=r(T3e," (ELECTRA model)"),T3e.forEach(t),uQe=i(y),lm=n(y,"LI",{});var M3e=s(lm);Kre=n(M3e,"STRONG",{});var tHr=s(Kre);_Qe=r(tHr,"encoder-decoder"),tHr.forEach(t),bQe=r(M3e," \u2014 "),fS=n(M3e,"A",{href:!0});var aHr=s(fS);vQe=r(aHr,"EncoderDecoderConfig"),aHr.forEach(t),FQe=r(M3e," (Encoder decoder model)"),M3e.forEach(t),TQe=i(y),im=n(y,"LI",{});var E3e=s(im);Zre=n(E3e,"STRONG",{});var nHr=s(Zre);MQe=r(nHr,"flaubert"),nHr.forEach(t),EQe=r(E3e," \u2014 "),mS=n(E3e,"A",{href:!0});var sHr=s(mS);CQe=r(sHr,"FlaubertConfig"),sHr.forEach(t),wQe=r(E3e," (FlauBERT model)"),E3e.forEach(t),AQe=i(y),dm=n(y,"LI",{});var C3e=s(dm);ete=n(C3e,"STRONG",{});var lHr=s(ete);yQe=r(lHr,"flava"),lHr.forEach(t),LQe=r(C3e," \u2014 "),gS=n(C3e,"A",{href:!0});var iHr=s(gS);xQe=r(iHr,"FlavaConfig"),iHr.forEach(t),$Qe=r(C3e," (FLAVA model)"),C3e.forEach(t),kQe=i(y),cm=n(y,"LI",{});var w3e=s(cm);ote=n(w3e,"STRONG",{});var dHr=s(ote);SQe=r(dHr,"fnet"),dHr.forEach(t),RQe=r(w3e," \u2014 "),hS=n(w3e,"A",{href:!0});var cHr=s(hS);PQe=r(cHr,"FNetConfig"),cHr.forEach(t),BQe=r(w3e," (FNet model)"),w3e.forEach(t),IQe=i(y),fm=n(y,"LI",{});var A3e=s(fm);rte=n(A3e,"STRONG",{});var fHr=s(rte);NQe=r(fHr,"fsmt"),fHr.forEach(t),qQe=r(A3e," \u2014 "),pS=n(A3e,"A",{href:!0});var mHr=s(pS);jQe=r(mHr,"FSMTConfig"),mHr.forEach(t),DQe=r(A3e," (FairSeq Machine-Translation model)"),A3e.forEach(t),GQe=i(y),mm=n(y,"LI",{});var y3e=s(mm);tte=n(y3e,"STRONG",{});var gHr=s(tte);OQe=r(gHr,"funnel"),gHr.forEach(t),VQe=r(y3e," \u2014 "),uS=n(y3e,"A",{href:!0});var hHr=s(uS);XQe=r(hHr,"FunnelConfig"),hHr.forEach(t),zQe=r(y3e," (Funnel Transformer model)"),y3e.forEach(t),WQe=i(y),gm=n(y,"LI",{});var L3e=s(gm);ate=n(L3e,"STRONG",{});var pHr=s(ate);QQe=r(pHr,"glpn"),pHr.forEach(t),HQe=r(L3e," \u2014 "),_S=n(L3e,"A",{href:!0});var uHr=s(_S);UQe=r(uHr,"GLPNConfig"),uHr.forEach(t),JQe=r(L3e," (GLPN model)"),L3e.forEach(t),YQe=i(y),hm=n(y,"LI",{});var x3e=s(hm);nte=n(x3e,"STRONG",{});var _Hr=s(nte);KQe=r(_Hr,"gpt2"),_Hr.forEach(t),ZQe=r(x3e," \u2014 "),bS=n(x3e,"A",{href:!0});var bHr=s(bS);eHe=r(bHr,"GPT2Config"),bHr.forEach(t),oHe=r(x3e," (OpenAI GPT-2 model)"),x3e.forEach(t),rHe=i(y),pm=n(y,"LI",{});var $3e=s(pm);ste=n($3e,"STRONG",{});var vHr=s(ste);tHe=r(vHr,"gpt_neo"),vHr.forEach(t),aHe=r($3e," \u2014 "),vS=n($3e,"A",{href:!0});var FHr=s(vS);nHe=r(FHr,"GPTNeoConfig"),FHr.forEach(t),sHe=r($3e," (GPT Neo model)"),$3e.forEach(t),lHe=i(y),um=n(y,"LI",{});var k3e=s(um);lte=n(k3e,"STRONG",{});var THr=s(lte);iHe=r(THr,"gpt_neox"),THr.forEach(t),dHe=r(k3e," \u2014 "),FS=n(k3e,"A",{href:!0});var MHr=s(FS);cHe=r(MHr,"GPTNeoXConfig"),MHr.forEach(t),fHe=r(k3e," (GPT NeoX model)"),k3e.forEach(t),mHe=i(y),_m=n(y,"LI",{});var S3e=s(_m);ite=n(S3e,"STRONG",{});var EHr=s(ite);gHe=r(EHr,"gptj"),EHr.forEach(t),hHe=r(S3e," \u2014 "),TS=n(S3e,"A",{href:!0});var CHr=s(TS);pHe=r(CHr,"GPTJConfig"),CHr.forEach(t),uHe=r(S3e," (GPT-J model)"),S3e.forEach(t),_He=i(y),bm=n(y,"LI",{});var R3e=s(bm);dte=n(R3e,"STRONG",{});var wHr=s(dte);bHe=r(wHr,"hubert"),wHr.forEach(t),vHe=r(R3e," \u2014 "),MS=n(R3e,"A",{href:!0});var AHr=s(MS);FHe=r(AHr,"HubertConfig"),AHr.forEach(t),THe=r(R3e," (Hubert model)"),R3e.forEach(t),MHe=i(y),vm=n(y,"LI",{});var P3e=s(vm);cte=n(P3e,"STRONG",{});var yHr=s(cte);EHe=r(yHr,"ibert"),yHr.forEach(t),CHe=r(P3e," \u2014 "),ES=n(P3e,"A",{href:!0});var LHr=s(ES);wHe=r(LHr,"IBertConfig"),LHr.forEach(t),AHe=r(P3e," (I-BERT model)"),P3e.forEach(t),yHe=i(y),Fm=n(y,"LI",{});var B3e=s(Fm);fte=n(B3e,"STRONG",{});var xHr=s(fte);LHe=r(xHr,"imagegpt"),xHr.forEach(t),xHe=r(B3e," \u2014 "),CS=n(B3e,"A",{href:!0});var $Hr=s(CS);$He=r($Hr,"ImageGPTConfig"),$Hr.forEach(t),kHe=r(B3e," (ImageGPT model)"),B3e.forEach(t),SHe=i(y),Tm=n(y,"LI",{});var I3e=s(Tm);mte=n(I3e,"STRONG",{});var kHr=s(mte);RHe=r(kHr,"layoutlm"),kHr.forEach(t),PHe=r(I3e," \u2014 "),wS=n(I3e,"A",{href:!0});var SHr=s(wS);BHe=r(SHr,"LayoutLMConfig"),SHr.forEach(t),IHe=r(I3e," (LayoutLM model)"),I3e.forEach(t),NHe=i(y),Mm=n(y,"LI",{});var N3e=s(Mm);gte=n(N3e,"STRONG",{});var RHr=s(gte);qHe=r(RHr,"layoutlmv2"),RHr.forEach(t),jHe=r(N3e," \u2014 "),AS=n(N3e,"A",{href:!0});var PHr=s(AS);DHe=r(PHr,"LayoutLMv2Config"),PHr.forEach(t),GHe=r(N3e," (LayoutLMv2 model)"),N3e.forEach(t),OHe=i(y),Em=n(y,"LI",{});var q3e=s(Em);hte=n(q3e,"STRONG",{});var BHr=s(hte);VHe=r(BHr,"layoutlmv3"),BHr.forEach(t),XHe=r(q3e," \u2014 "),yS=n(q3e,"A",{href:!0});var IHr=s(yS);zHe=r(IHr,"LayoutLMv3Config"),IHr.forEach(t),WHe=r(q3e," (LayoutLMv3 model)"),q3e.forEach(t),QHe=i(y),Cm=n(y,"LI",{});var j3e=s(Cm);pte=n(j3e,"STRONG",{});var NHr=s(pte);HHe=r(NHr,"led"),NHr.forEach(t),UHe=r(j3e," \u2014 "),LS=n(j3e,"A",{href:!0});var qHr=s(LS);JHe=r(qHr,"LEDConfig"),qHr.forEach(t),YHe=r(j3e," (LED model)"),j3e.forEach(t),KHe=i(y),wm=n(y,"LI",{});var D3e=s(wm);ute=n(D3e,"STRONG",{});var jHr=s(ute);ZHe=r(jHr,"levit"),jHr.forEach(t),eUe=r(D3e," \u2014 "),xS=n(D3e,"A",{href:!0});var DHr=s(xS);oUe=r(DHr,"LevitConfig"),DHr.forEach(t),rUe=r(D3e," (LeViT model)"),D3e.forEach(t),tUe=i(y),Am=n(y,"LI",{});var G3e=s(Am);_te=n(G3e,"STRONG",{});var GHr=s(_te);aUe=r(GHr,"longformer"),GHr.forEach(t),nUe=r(G3e," \u2014 "),$S=n(G3e,"A",{href:!0});var OHr=s($S);sUe=r(OHr,"LongformerConfig"),OHr.forEach(t),lUe=r(G3e," (Longformer model)"),G3e.forEach(t),iUe=i(y),ym=n(y,"LI",{});var O3e=s(ym);bte=n(O3e,"STRONG",{});var VHr=s(bte);dUe=r(VHr,"luke"),VHr.forEach(t),cUe=r(O3e," \u2014 "),kS=n(O3e,"A",{href:!0});var XHr=s(kS);fUe=r(XHr,"LukeConfig"),XHr.forEach(t),mUe=r(O3e," (LUKE model)"),O3e.forEach(t),gUe=i(y),Lm=n(y,"LI",{});var V3e=s(Lm);vte=n(V3e,"STRONG",{});var zHr=s(vte);hUe=r(zHr,"lxmert"),zHr.forEach(t),pUe=r(V3e," \u2014 "),SS=n(V3e,"A",{href:!0});var WHr=s(SS);uUe=r(WHr,"LxmertConfig"),WHr.forEach(t),_Ue=r(V3e," (LXMERT model)"),V3e.forEach(t),bUe=i(y),xm=n(y,"LI",{});var X3e=s(xm);Fte=n(X3e,"STRONG",{});var QHr=s(Fte);vUe=r(QHr,"m2m_100"),QHr.forEach(t),FUe=r(X3e," \u2014 "),RS=n(X3e,"A",{href:!0});var HHr=s(RS);TUe=r(HHr,"M2M100Config"),HHr.forEach(t),MUe=r(X3e," (M2M100 model)"),X3e.forEach(t),EUe=i(y),$m=n(y,"LI",{});var z3e=s($m);Tte=n(z3e,"STRONG",{});var UHr=s(Tte);CUe=r(UHr,"marian"),UHr.forEach(t),wUe=r(z3e," \u2014 "),PS=n(z3e,"A",{href:!0});var JHr=s(PS);AUe=r(JHr,"MarianConfig"),JHr.forEach(t),yUe=r(z3e," (Marian model)"),z3e.forEach(t),LUe=i(y),km=n(y,"LI",{});var W3e=s(km);Mte=n(W3e,"STRONG",{});var YHr=s(Mte);xUe=r(YHr,"maskformer"),YHr.forEach(t),$Ue=r(W3e," \u2014 "),BS=n(W3e,"A",{href:!0});var KHr=s(BS);kUe=r(KHr,"MaskFormerConfig"),KHr.forEach(t),SUe=r(W3e," (MaskFormer model)"),W3e.forEach(t),RUe=i(y),Sm=n(y,"LI",{});var Q3e=s(Sm);Ete=n(Q3e,"STRONG",{});var ZHr=s(Ete);PUe=r(ZHr,"mbart"),ZHr.forEach(t),BUe=r(Q3e," \u2014 "),IS=n(Q3e,"A",{href:!0});var eUr=s(IS);IUe=r(eUr,"MBartConfig"),eUr.forEach(t),NUe=r(Q3e," (mBART model)"),Q3e.forEach(t),qUe=i(y),Rm=n(y,"LI",{});var H3e=s(Rm);Cte=n(H3e,"STRONG",{});var oUr=s(Cte);jUe=r(oUr,"mctct"),oUr.forEach(t),DUe=r(H3e," \u2014 "),NS=n(H3e,"A",{href:!0});var rUr=s(NS);GUe=r(rUr,"MCTCTConfig"),rUr.forEach(t),OUe=r(H3e," (M-CTC-T model)"),H3e.forEach(t),VUe=i(y),Pm=n(y,"LI",{});var U3e=s(Pm);wte=n(U3e,"STRONG",{});var tUr=s(wte);XUe=r(tUr,"megatron-bert"),tUr.forEach(t),zUe=r(U3e," \u2014 "),qS=n(U3e,"A",{href:!0});var aUr=s(qS);WUe=r(aUr,"MegatronBertConfig"),aUr.forEach(t),QUe=r(U3e," (Megatron-BERT model)"),U3e.forEach(t),HUe=i(y),Bm=n(y,"LI",{});var J3e=s(Bm);Ate=n(J3e,"STRONG",{});var nUr=s(Ate);UUe=r(nUr,"mobilebert"),nUr.forEach(t),JUe=r(J3e," \u2014 "),jS=n(J3e,"A",{href:!0});var sUr=s(jS);YUe=r(sUr,"MobileBertConfig"),sUr.forEach(t),KUe=r(J3e," (MobileBERT model)"),J3e.forEach(t),ZUe=i(y),Im=n(y,"LI",{});var Y3e=s(Im);yte=n(Y3e,"STRONG",{});var lUr=s(yte);eJe=r(lUr,"mpnet"),lUr.forEach(t),oJe=r(Y3e," \u2014 "),DS=n(Y3e,"A",{href:!0});var iUr=s(DS);rJe=r(iUr,"MPNetConfig"),iUr.forEach(t),tJe=r(Y3e," (MPNet model)"),Y3e.forEach(t),aJe=i(y),Nm=n(y,"LI",{});var K3e=s(Nm);Lte=n(K3e,"STRONG",{});var dUr=s(Lte);nJe=r(dUr,"mt5"),dUr.forEach(t),sJe=r(K3e," \u2014 "),GS=n(K3e,"A",{href:!0});var cUr=s(GS);lJe=r(cUr,"MT5Config"),cUr.forEach(t),iJe=r(K3e," (MT5 model)"),K3e.forEach(t),dJe=i(y),qm=n(y,"LI",{});var Z3e=s(qm);xte=n(Z3e,"STRONG",{});var fUr=s(xte);cJe=r(fUr,"nystromformer"),fUr.forEach(t),fJe=r(Z3e," \u2014 "),OS=n(Z3e,"A",{href:!0});var mUr=s(OS);mJe=r(mUr,"NystromformerConfig"),mUr.forEach(t),gJe=r(Z3e," (Nystr\xF6mformer model)"),Z3e.forEach(t),hJe=i(y),jm=n(y,"LI",{});var ewe=s(jm);$te=n(ewe,"STRONG",{});var gUr=s($te);pJe=r(gUr,"openai-gpt"),gUr.forEach(t),uJe=r(ewe," \u2014 "),VS=n(ewe,"A",{href:!0});var hUr=s(VS);_Je=r(hUr,"OpenAIGPTConfig"),hUr.forEach(t),bJe=r(ewe," (OpenAI GPT model)"),ewe.forEach(t),vJe=i(y),Dm=n(y,"LI",{});var owe=s(Dm);kte=n(owe,"STRONG",{});var pUr=s(kte);FJe=r(pUr,"opt"),pUr.forEach(t),TJe=r(owe," \u2014 "),XS=n(owe,"A",{href:!0});var uUr=s(XS);MJe=r(uUr,"OPTConfig"),uUr.forEach(t),EJe=r(owe," (OPT model)"),owe.forEach(t),CJe=i(y),Gm=n(y,"LI",{});var rwe=s(Gm);Ste=n(rwe,"STRONG",{});var _Ur=s(Ste);wJe=r(_Ur,"pegasus"),_Ur.forEach(t),AJe=r(rwe," \u2014 "),zS=n(rwe,"A",{href:!0});var bUr=s(zS);yJe=r(bUr,"PegasusConfig"),bUr.forEach(t),LJe=r(rwe," (Pegasus model)"),rwe.forEach(t),xJe=i(y),Om=n(y,"LI",{});var twe=s(Om);Rte=n(twe,"STRONG",{});var vUr=s(Rte);$Je=r(vUr,"perceiver"),vUr.forEach(t),kJe=r(twe," \u2014 "),WS=n(twe,"A",{href:!0});var FUr=s(WS);SJe=r(FUr,"PerceiverConfig"),FUr.forEach(t),RJe=r(twe," (Perceiver model)"),twe.forEach(t),PJe=i(y),Vm=n(y,"LI",{});var awe=s(Vm);Pte=n(awe,"STRONG",{});var TUr=s(Pte);BJe=r(TUr,"plbart"),TUr.forEach(t),IJe=r(awe," \u2014 "),QS=n(awe,"A",{href:!0});var MUr=s(QS);NJe=r(MUr,"PLBartConfig"),MUr.forEach(t),qJe=r(awe," (PLBart model)"),awe.forEach(t),jJe=i(y),Xm=n(y,"LI",{});var nwe=s(Xm);Bte=n(nwe,"STRONG",{});var EUr=s(Bte);DJe=r(EUr,"poolformer"),EUr.forEach(t),GJe=r(nwe," \u2014 "),HS=n(nwe,"A",{href:!0});var CUr=s(HS);OJe=r(CUr,"PoolFormerConfig"),CUr.forEach(t),VJe=r(nwe," (PoolFormer model)"),nwe.forEach(t),XJe=i(y),zm=n(y,"LI",{});var swe=s(zm);Ite=n(swe,"STRONG",{});var wUr=s(Ite);zJe=r(wUr,"prophetnet"),wUr.forEach(t),WJe=r(swe," \u2014 "),US=n(swe,"A",{href:!0});var AUr=s(US);QJe=r(AUr,"ProphetNetConfig"),AUr.forEach(t),HJe=r(swe," (ProphetNet model)"),swe.forEach(t),UJe=i(y),Wm=n(y,"LI",{});var lwe=s(Wm);Nte=n(lwe,"STRONG",{});var yUr=s(Nte);JJe=r(yUr,"qdqbert"),yUr.forEach(t),YJe=r(lwe," \u2014 "),JS=n(lwe,"A",{href:!0});var LUr=s(JS);KJe=r(LUr,"QDQBertConfig"),LUr.forEach(t),ZJe=r(lwe," (QDQBert model)"),lwe.forEach(t),eYe=i(y),Qm=n(y,"LI",{});var iwe=s(Qm);qte=n(iwe,"STRONG",{});var xUr=s(qte);oYe=r(xUr,"rag"),xUr.forEach(t),rYe=r(iwe," \u2014 "),YS=n(iwe,"A",{href:!0});var $Ur=s(YS);tYe=r($Ur,"RagConfig"),$Ur.forEach(t),aYe=r(iwe," (RAG model)"),iwe.forEach(t),nYe=i(y),Hm=n(y,"LI",{});var dwe=s(Hm);jte=n(dwe,"STRONG",{});var kUr=s(jte);sYe=r(kUr,"realm"),kUr.forEach(t),lYe=r(dwe," \u2014 "),KS=n(dwe,"A",{href:!0});var SUr=s(KS);iYe=r(SUr,"RealmConfig"),SUr.forEach(t),dYe=r(dwe," (REALM model)"),dwe.forEach(t),cYe=i(y),Um=n(y,"LI",{});var cwe=s(Um);Dte=n(cwe,"STRONG",{});var RUr=s(Dte);fYe=r(RUr,"reformer"),RUr.forEach(t),mYe=r(cwe," \u2014 "),ZS=n(cwe,"A",{href:!0});var PUr=s(ZS);gYe=r(PUr,"ReformerConfig"),PUr.forEach(t),hYe=r(cwe," (Reformer model)"),cwe.forEach(t),pYe=i(y),Jm=n(y,"LI",{});var fwe=s(Jm);Gte=n(fwe,"STRONG",{});var BUr=s(Gte);uYe=r(BUr,"regnet"),BUr.forEach(t),_Ye=r(fwe," \u2014 "),eR=n(fwe,"A",{href:!0});var IUr=s(eR);bYe=r(IUr,"RegNetConfig"),IUr.forEach(t),vYe=r(fwe," (RegNet model)"),fwe.forEach(t),FYe=i(y),Ym=n(y,"LI",{});var mwe=s(Ym);Ote=n(mwe,"STRONG",{});var NUr=s(Ote);TYe=r(NUr,"rembert"),NUr.forEach(t),MYe=r(mwe," \u2014 "),oR=n(mwe,"A",{href:!0});var qUr=s(oR);EYe=r(qUr,"RemBertConfig"),qUr.forEach(t),CYe=r(mwe," (RemBERT model)"),mwe.forEach(t),wYe=i(y),Km=n(y,"LI",{});var gwe=s(Km);Vte=n(gwe,"STRONG",{});var jUr=s(Vte);AYe=r(jUr,"resnet"),jUr.forEach(t),yYe=r(gwe," \u2014 "),rR=n(gwe,"A",{href:!0});var DUr=s(rR);LYe=r(DUr,"ResNetConfig"),DUr.forEach(t),xYe=r(gwe," (ResNet model)"),gwe.forEach(t),$Ye=i(y),Zm=n(y,"LI",{});var hwe=s(Zm);Xte=n(hwe,"STRONG",{});var GUr=s(Xte);kYe=r(GUr,"retribert"),GUr.forEach(t),SYe=r(hwe," \u2014 "),tR=n(hwe,"A",{href:!0});var OUr=s(tR);RYe=r(OUr,"RetriBertConfig"),OUr.forEach(t),PYe=r(hwe," (RetriBERT model)"),hwe.forEach(t),BYe=i(y),eg=n(y,"LI",{});var pwe=s(eg);zte=n(pwe,"STRONG",{});var VUr=s(zte);IYe=r(VUr,"roberta"),VUr.forEach(t),NYe=r(pwe," \u2014 "),aR=n(pwe,"A",{href:!0});var XUr=s(aR);qYe=r(XUr,"RobertaConfig"),XUr.forEach(t),jYe=r(pwe," (RoBERTa model)"),pwe.forEach(t),DYe=i(y),og=n(y,"LI",{});var uwe=s(og);Wte=n(uwe,"STRONG",{});var zUr=s(Wte);GYe=r(zUr,"roformer"),zUr.forEach(t),OYe=r(uwe," \u2014 "),nR=n(uwe,"A",{href:!0});var WUr=s(nR);VYe=r(WUr,"RoFormerConfig"),WUr.forEach(t),XYe=r(uwe," (RoFormer model)"),uwe.forEach(t),zYe=i(y),rg=n(y,"LI",{});var _we=s(rg);Qte=n(_we,"STRONG",{});var QUr=s(Qte);WYe=r(QUr,"segformer"),QUr.forEach(t),QYe=r(_we," \u2014 "),sR=n(_we,"A",{href:!0});var HUr=s(sR);HYe=r(HUr,"SegformerConfig"),HUr.forEach(t),UYe=r(_we," (SegFormer model)"),_we.forEach(t),JYe=i(y),tg=n(y,"LI",{});var bwe=s(tg);Hte=n(bwe,"STRONG",{});var UUr=s(Hte);YYe=r(UUr,"sew"),UUr.forEach(t),KYe=r(bwe," \u2014 "),lR=n(bwe,"A",{href:!0});var JUr=s(lR);ZYe=r(JUr,"SEWConfig"),JUr.forEach(t),eKe=r(bwe," (SEW model)"),bwe.forEach(t),oKe=i(y),ag=n(y,"LI",{});var vwe=s(ag);Ute=n(vwe,"STRONG",{});var YUr=s(Ute);rKe=r(YUr,"sew-d"),YUr.forEach(t),tKe=r(vwe," \u2014 "),iR=n(vwe,"A",{href:!0});var KUr=s(iR);aKe=r(KUr,"SEWDConfig"),KUr.forEach(t),nKe=r(vwe," (SEW-D model)"),vwe.forEach(t),sKe=i(y),ng=n(y,"LI",{});var Fwe=s(ng);Jte=n(Fwe,"STRONG",{});var ZUr=s(Jte);lKe=r(ZUr,"speech-encoder-decoder"),ZUr.forEach(t),iKe=r(Fwe," \u2014 "),dR=n(Fwe,"A",{href:!0});var eJr=s(dR);dKe=r(eJr,"SpeechEncoderDecoderConfig"),eJr.forEach(t),cKe=r(Fwe," (Speech Encoder decoder model)"),Fwe.forEach(t),fKe=i(y),sg=n(y,"LI",{});var Twe=s(sg);Yte=n(Twe,"STRONG",{});var oJr=s(Yte);mKe=r(oJr,"speech_to_text"),oJr.forEach(t),gKe=r(Twe," \u2014 "),cR=n(Twe,"A",{href:!0});var rJr=s(cR);hKe=r(rJr,"Speech2TextConfig"),rJr.forEach(t),pKe=r(Twe," (Speech2Text model)"),Twe.forEach(t),uKe=i(y),lg=n(y,"LI",{});var Mwe=s(lg);Kte=n(Mwe,"STRONG",{});var tJr=s(Kte);_Ke=r(tJr,"speech_to_text_2"),tJr.forEach(t),bKe=r(Mwe," \u2014 "),fR=n(Mwe,"A",{href:!0});var aJr=s(fR);vKe=r(aJr,"Speech2Text2Config"),aJr.forEach(t),FKe=r(Mwe," (Speech2Text2 model)"),Mwe.forEach(t),TKe=i(y),ig=n(y,"LI",{});var Ewe=s(ig);Zte=n(Ewe,"STRONG",{});var nJr=s(Zte);MKe=r(nJr,"splinter"),nJr.forEach(t),EKe=r(Ewe," \u2014 "),mR=n(Ewe,"A",{href:!0});var sJr=s(mR);CKe=r(sJr,"SplinterConfig"),sJr.forEach(t),wKe=r(Ewe," (Splinter model)"),Ewe.forEach(t),AKe=i(y),dg=n(y,"LI",{});var Cwe=s(dg);eae=n(Cwe,"STRONG",{});var lJr=s(eae);yKe=r(lJr,"squeezebert"),lJr.forEach(t),LKe=r(Cwe," \u2014 "),gR=n(Cwe,"A",{href:!0});var iJr=s(gR);xKe=r(iJr,"SqueezeBertConfig"),iJr.forEach(t),$Ke=r(Cwe," (SqueezeBERT model)"),Cwe.forEach(t),kKe=i(y),cg=n(y,"LI",{});var wwe=s(cg);oae=n(wwe,"STRONG",{});var dJr=s(oae);SKe=r(dJr,"swin"),dJr.forEach(t),RKe=r(wwe," \u2014 "),hR=n(wwe,"A",{href:!0});var cJr=s(hR);PKe=r(cJr,"SwinConfig"),cJr.forEach(t),BKe=r(wwe," (Swin Transformer model)"),wwe.forEach(t),IKe=i(y),fg=n(y,"LI",{});var Awe=s(fg);rae=n(Awe,"STRONG",{});var fJr=s(rae);NKe=r(fJr,"t5"),fJr.forEach(t),qKe=r(Awe," \u2014 "),pR=n(Awe,"A",{href:!0});var mJr=s(pR);jKe=r(mJr,"T5Config"),mJr.forEach(t),DKe=r(Awe," (T5 model)"),Awe.forEach(t),GKe=i(y),mg=n(y,"LI",{});var ywe=s(mg);tae=n(ywe,"STRONG",{});var gJr=s(tae);OKe=r(gJr,"tapas"),gJr.forEach(t),VKe=r(ywe," \u2014 "),uR=n(ywe,"A",{href:!0});var hJr=s(uR);XKe=r(hJr,"TapasConfig"),hJr.forEach(t),zKe=r(ywe," (TAPAS model)"),ywe.forEach(t),WKe=i(y),gg=n(y,"LI",{});var Lwe=s(gg);aae=n(Lwe,"STRONG",{});var pJr=s(aae);QKe=r(pJr,"trajectory_transformer"),pJr.forEach(t),HKe=r(Lwe," \u2014 "),_R=n(Lwe,"A",{href:!0});var uJr=s(_R);UKe=r(uJr,"TrajectoryTransformerConfig"),uJr.forEach(t),JKe=r(Lwe," (Trajectory Transformer model)"),Lwe.forEach(t),YKe=i(y),hg=n(y,"LI",{});var xwe=s(hg);nae=n(xwe,"STRONG",{});var _Jr=s(nae);KKe=r(_Jr,"transfo-xl"),_Jr.forEach(t),ZKe=r(xwe," \u2014 "),bR=n(xwe,"A",{href:!0});var bJr=s(bR);eZe=r(bJr,"TransfoXLConfig"),bJr.forEach(t),oZe=r(xwe," (Transformer-XL model)"),xwe.forEach(t),rZe=i(y),pg=n(y,"LI",{});var $we=s(pg);sae=n($we,"STRONG",{});var vJr=s(sae);tZe=r(vJr,"trocr"),vJr.forEach(t),aZe=r($we," \u2014 "),vR=n($we,"A",{href:!0});var FJr=s(vR);nZe=r(FJr,"TrOCRConfig"),FJr.forEach(t),sZe=r($we," (TrOCR model)"),$we.forEach(t),lZe=i(y),ug=n(y,"LI",{});var kwe=s(ug);lae=n(kwe,"STRONG",{});var TJr=s(lae);iZe=r(TJr,"unispeech"),TJr.forEach(t),dZe=r(kwe," \u2014 "),FR=n(kwe,"A",{href:!0});var MJr=s(FR);cZe=r(MJr,"UniSpeechConfig"),MJr.forEach(t),fZe=r(kwe," (UniSpeech model)"),kwe.forEach(t),mZe=i(y),_g=n(y,"LI",{});var Swe=s(_g);iae=n(Swe,"STRONG",{});var EJr=s(iae);gZe=r(EJr,"unispeech-sat"),EJr.forEach(t),hZe=r(Swe," \u2014 "),TR=n(Swe,"A",{href:!0});var CJr=s(TR);pZe=r(CJr,"UniSpeechSatConfig"),CJr.forEach(t),uZe=r(Swe," (UniSpeechSat model)"),Swe.forEach(t),_Ze=i(y),bg=n(y,"LI",{});var Rwe=s(bg);dae=n(Rwe,"STRONG",{});var wJr=s(dae);bZe=r(wJr,"van"),wJr.forEach(t),vZe=r(Rwe," \u2014 "),MR=n(Rwe,"A",{href:!0});var AJr=s(MR);FZe=r(AJr,"VanConfig"),AJr.forEach(t),TZe=r(Rwe," (VAN model)"),Rwe.forEach(t),MZe=i(y),vg=n(y,"LI",{});var Pwe=s(vg);cae=n(Pwe,"STRONG",{});var yJr=s(cae);EZe=r(yJr,"vilt"),yJr.forEach(t),CZe=r(Pwe," \u2014 "),ER=n(Pwe,"A",{href:!0});var LJr=s(ER);wZe=r(LJr,"ViltConfig"),LJr.forEach(t),AZe=r(Pwe," (ViLT model)"),Pwe.forEach(t),yZe=i(y),Fg=n(y,"LI",{});var Bwe=s(Fg);fae=n(Bwe,"STRONG",{});var xJr=s(fae);LZe=r(xJr,"vision-encoder-decoder"),xJr.forEach(t),xZe=r(Bwe," \u2014 "),CR=n(Bwe,"A",{href:!0});var $Jr=s(CR);$Ze=r($Jr,"VisionEncoderDecoderConfig"),$Jr.forEach(t),kZe=r(Bwe," (Vision Encoder decoder model)"),Bwe.forEach(t),SZe=i(y),Tg=n(y,"LI",{});var Iwe=s(Tg);mae=n(Iwe,"STRONG",{});var kJr=s(mae);RZe=r(kJr,"vision-text-dual-encoder"),kJr.forEach(t),PZe=r(Iwe," \u2014 "),wR=n(Iwe,"A",{href:!0});var SJr=s(wR);BZe=r(SJr,"VisionTextDualEncoderConfig"),SJr.forEach(t),IZe=r(Iwe," (VisionTextDualEncoder model)"),Iwe.forEach(t),NZe=i(y),Mg=n(y,"LI",{});var Nwe=s(Mg);gae=n(Nwe,"STRONG",{});var RJr=s(gae);qZe=r(RJr,"visual_bert"),RJr.forEach(t),jZe=r(Nwe," \u2014 "),AR=n(Nwe,"A",{href:!0});var PJr=s(AR);DZe=r(PJr,"VisualBertConfig"),PJr.forEach(t),GZe=r(Nwe," (VisualBERT model)"),Nwe.forEach(t),OZe=i(y),Eg=n(y,"LI",{});var qwe=s(Eg);hae=n(qwe,"STRONG",{});var BJr=s(hae);VZe=r(BJr,"vit"),BJr.forEach(t),XZe=r(qwe," \u2014 "),yR=n(qwe,"A",{href:!0});var IJr=s(yR);zZe=r(IJr,"ViTConfig"),IJr.forEach(t),WZe=r(qwe," (ViT model)"),qwe.forEach(t),QZe=i(y),Cg=n(y,"LI",{});var jwe=s(Cg);pae=n(jwe,"STRONG",{});var NJr=s(pae);HZe=r(NJr,"vit_mae"),NJr.forEach(t),UZe=r(jwe," \u2014 "),LR=n(jwe,"A",{href:!0});var qJr=s(LR);JZe=r(qJr,"ViTMAEConfig"),qJr.forEach(t),YZe=r(jwe," (ViTMAE model)"),jwe.forEach(t),KZe=i(y),wg=n(y,"LI",{});var Dwe=s(wg);uae=n(Dwe,"STRONG",{});var jJr=s(uae);ZZe=r(jJr,"wav2vec2"),jJr.forEach(t),eeo=r(Dwe," \u2014 "),xR=n(Dwe,"A",{href:!0});var DJr=s(xR);oeo=r(DJr,"Wav2Vec2Config"),DJr.forEach(t),reo=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),teo=i(y),Ag=n(y,"LI",{});var Gwe=s(Ag);_ae=n(Gwe,"STRONG",{});var GJr=s(_ae);aeo=r(GJr,"wav2vec2-conformer"),GJr.forEach(t),neo=r(Gwe," \u2014 "),$R=n(Gwe,"A",{href:!0});var OJr=s($R);seo=r(OJr,"Wav2Vec2ConformerConfig"),OJr.forEach(t),leo=r(Gwe," (Wav2Vec2-Conformer model)"),Gwe.forEach(t),ieo=i(y),yg=n(y,"LI",{});var Owe=s(yg);bae=n(Owe,"STRONG",{});var VJr=s(bae);deo=r(VJr,"wavlm"),VJr.forEach(t),ceo=r(Owe," \u2014 "),kR=n(Owe,"A",{href:!0});var XJr=s(kR);feo=r(XJr,"WavLMConfig"),XJr.forEach(t),meo=r(Owe," (WavLM model)"),Owe.forEach(t),geo=i(y),Lg=n(y,"LI",{});var Vwe=s(Lg);vae=n(Vwe,"STRONG",{});var zJr=s(vae);heo=r(zJr,"xglm"),zJr.forEach(t),peo=r(Vwe," \u2014 "),SR=n(Vwe,"A",{href:!0});var WJr=s(SR);ueo=r(WJr,"XGLMConfig"),WJr.forEach(t),_eo=r(Vwe," (XGLM model)"),Vwe.forEach(t),beo=i(y),xg=n(y,"LI",{});var Xwe=s(xg);Fae=n(Xwe,"STRONG",{});var QJr=s(Fae);veo=r(QJr,"xlm"),QJr.forEach(t),Feo=r(Xwe," \u2014 "),RR=n(Xwe,"A",{href:!0});var HJr=s(RR);Teo=r(HJr,"XLMConfig"),HJr.forEach(t),Meo=r(Xwe," (XLM model)"),Xwe.forEach(t),Eeo=i(y),$g=n(y,"LI",{});var zwe=s($g);Tae=n(zwe,"STRONG",{});var UJr=s(Tae);Ceo=r(UJr,"xlm-prophetnet"),UJr.forEach(t),weo=r(zwe," \u2014 "),PR=n(zwe,"A",{href:!0});var JJr=s(PR);Aeo=r(JJr,"XLMProphetNetConfig"),JJr.forEach(t),yeo=r(zwe," (XLM-ProphetNet model)"),zwe.forEach(t),Leo=i(y),kg=n(y,"LI",{});var Wwe=s(kg);Mae=n(Wwe,"STRONG",{});var YJr=s(Mae);xeo=r(YJr,"xlm-roberta"),YJr.forEach(t),$eo=r(Wwe," \u2014 "),BR=n(Wwe,"A",{href:!0});var KJr=s(BR);keo=r(KJr,"XLMRobertaConfig"),KJr.forEach(t),Seo=r(Wwe," (XLM-RoBERTa model)"),Wwe.forEach(t),Reo=i(y),Sg=n(y,"LI",{});var Qwe=s(Sg);Eae=n(Qwe,"STRONG",{});var ZJr=s(Eae);Peo=r(ZJr,"xlm-roberta-xl"),ZJr.forEach(t),Beo=r(Qwe," \u2014 "),IR=n(Qwe,"A",{href:!0});var eYr=s(IR);Ieo=r(eYr,"XLMRobertaXLConfig"),eYr.forEach(t),Neo=r(Qwe," (XLM-RoBERTa-XL model)"),Qwe.forEach(t),qeo=i(y),Rg=n(y,"LI",{});var Hwe=s(Rg);Cae=n(Hwe,"STRONG",{});var oYr=s(Cae);jeo=r(oYr,"xlnet"),oYr.forEach(t),Deo=r(Hwe," \u2014 "),NR=n(Hwe,"A",{href:!0});var rYr=s(NR);Geo=r(rYr,"XLNetConfig"),rYr.forEach(t),Oeo=r(Hwe," (XLNet model)"),Hwe.forEach(t),Veo=i(y),Pg=n(y,"LI",{});var Uwe=s(Pg);wae=n(Uwe,"STRONG",{});var tYr=s(wae);Xeo=r(tYr,"yolos"),tYr.forEach(t),zeo=r(Uwe," \u2014 "),qR=n(Uwe,"A",{href:!0});var aYr=s(qR);Weo=r(aYr,"YolosConfig"),aYr.forEach(t),Qeo=r(Uwe," (YOLOS model)"),Uwe.forEach(t),Heo=i(y),Bg=n(y,"LI",{});var Jwe=s(Bg);Aae=n(Jwe,"STRONG",{});var nYr=s(Aae);Ueo=r(nYr,"yoso"),nYr.forEach(t),Jeo=r(Jwe," \u2014 "),jR=n(Jwe,"A",{href:!0});var sYr=s(jR);Yeo=r(sYr,"YosoConfig"),sYr.forEach(t),Keo=r(Jwe," (YOSO model)"),Jwe.forEach(t),y.forEach(t),Zeo=i(tt),T(Ig.$$.fragment,tt),tt.forEach(t),eoo=i(rt),Ng=n(rt,"DIV",{class:!0});var oOe=s(Ng);T(mA.$$.fragment,oOe),ooo=i(oOe),yae=n(oOe,"P",{});var lYr=s(yae);roo=r(lYr,"Register a new configuration for this class."),lYr.forEach(t),oOe.forEach(t),rt.forEach(t),rDe=i(f),xi=n(f,"H2",{class:!0});var rOe=s(xi);qg=n(rOe,"A",{id:!0,class:!0,href:!0});var iYr=s(qg);Lae=n(iYr,"SPAN",{});var dYr=s(Lae);T(gA.$$.fragment,dYr),dYr.forEach(t),iYr.forEach(t),too=i(rOe),xae=n(rOe,"SPAN",{});var cYr=s(xae);aoo=r(cYr,"AutoTokenizer"),cYr.forEach(t),rOe.forEach(t),tDe=i(f),Ao=n(f,"DIV",{class:!0});var Xs=s(Ao);T(hA.$$.fragment,Xs),noo=i(Xs),pA=n(Xs,"P",{});var tOe=s(pA);soo=r(tOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DR=n(tOe,"A",{href:!0});var fYr=s(DR);loo=r(fYr,"AutoTokenizer.from_pretrained()"),fYr.forEach(t),ioo=r(tOe," class method."),tOe.forEach(t),doo=i(Xs),uA=n(Xs,"P",{});var aOe=s(uA);coo=r(aOe,"This class cannot be instantiated directly using "),$ae=n(aOe,"CODE",{});var mYr=s($ae);foo=r(mYr,"__init__()"),mYr.forEach(t),moo=r(aOe," (throws an error)."),aOe.forEach(t),goo=i(Xs),Ar=n(Xs,"DIV",{class:!0});var zs=s(Ar);T(_A.$$.fragment,zs),hoo=i(zs),kae=n(zs,"P",{});var gYr=s(kae);poo=r(gYr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gYr.forEach(t),uoo=i(zs),$a=n(zs,"P",{});var nw=s($a);_oo=r(nw,"The tokenizer class to instantiate is selected based on the "),Sae=n(nw,"CODE",{});var hYr=s(Sae);boo=r(hYr,"model_type"),hYr.forEach(t),voo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Rae=n(nw,"CODE",{});var pYr=s(Rae);Foo=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),Too=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=n(nw,"CODE",{});var uYr=s(Pae);Moo=r(uYr,"pretrained_model_name_or_path"),uYr.forEach(t),Eoo=r(nw,":"),nw.forEach(t),Coo=i(zs),k=n(zs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var E$=s(Nn);Bae=n(E$,"STRONG",{});var _Yr=s(Bae);woo=r(_Yr,"albert"),_Yr.forEach(t),Aoo=r(E$," \u2014 "),GR=n(E$,"A",{href:!0});var bYr=s(GR);yoo=r(bYr,"AlbertTokenizer"),bYr.forEach(t),Loo=r(E$," or "),OR=n(E$,"A",{href:!0});var vYr=s(OR);xoo=r(vYr,"AlbertTokenizerFast"),vYr.forEach(t),$oo=r(E$," (ALBERT model)"),E$.forEach(t),koo=i(S),qn=n(S,"LI",{});var C$=s(qn);Iae=n(C$,"STRONG",{});var FYr=s(Iae);Soo=r(FYr,"bart"),FYr.forEach(t),Roo=r(C$," \u2014 "),VR=n(C$,"A",{href:!0});var TYr=s(VR);Poo=r(TYr,"BartTokenizer"),TYr.forEach(t),Boo=r(C$," or "),XR=n(C$,"A",{href:!0});var MYr=s(XR);Ioo=r(MYr,"BartTokenizerFast"),MYr.forEach(t),Noo=r(C$," (BART model)"),C$.forEach(t),qoo=i(S),jn=n(S,"LI",{});var w$=s(jn);Nae=n(w$,"STRONG",{});var EYr=s(Nae);joo=r(EYr,"barthez"),EYr.forEach(t),Doo=r(w$," \u2014 "),zR=n(w$,"A",{href:!0});var CYr=s(zR);Goo=r(CYr,"BarthezTokenizer"),CYr.forEach(t),Ooo=r(w$," or "),WR=n(w$,"A",{href:!0});var wYr=s(WR);Voo=r(wYr,"BarthezTokenizerFast"),wYr.forEach(t),Xoo=r(w$," (BARThez model)"),w$.forEach(t),zoo=i(S),jg=n(S,"LI",{});var Ywe=s(jg);qae=n(Ywe,"STRONG",{});var AYr=s(qae);Woo=r(AYr,"bartpho"),AYr.forEach(t),Qoo=r(Ywe," \u2014 "),QR=n(Ywe,"A",{href:!0});var yYr=s(QR);Hoo=r(yYr,"BartphoTokenizer"),yYr.forEach(t),Uoo=r(Ywe," (BARTpho model)"),Ywe.forEach(t),Joo=i(S),Dn=n(S,"LI",{});var A$=s(Dn);jae=n(A$,"STRONG",{});var LYr=s(jae);Yoo=r(LYr,"bert"),LYr.forEach(t),Koo=r(A$," \u2014 "),HR=n(A$,"A",{href:!0});var xYr=s(HR);Zoo=r(xYr,"BertTokenizer"),xYr.forEach(t),ero=r(A$," or "),UR=n(A$,"A",{href:!0});var $Yr=s(UR);oro=r($Yr,"BertTokenizerFast"),$Yr.forEach(t),rro=r(A$," (BERT model)"),A$.forEach(t),tro=i(S),Dg=n(S,"LI",{});var Kwe=s(Dg);Dae=n(Kwe,"STRONG",{});var kYr=s(Dae);aro=r(kYr,"bert-generation"),kYr.forEach(t),nro=r(Kwe," \u2014 "),JR=n(Kwe,"A",{href:!0});var SYr=s(JR);sro=r(SYr,"BertGenerationTokenizer"),SYr.forEach(t),lro=r(Kwe," (Bert Generation model)"),Kwe.forEach(t),iro=i(S),Gg=n(S,"LI",{});var Zwe=s(Gg);Gae=n(Zwe,"STRONG",{});var RYr=s(Gae);dro=r(RYr,"bert-japanese"),RYr.forEach(t),cro=r(Zwe," \u2014 "),YR=n(Zwe,"A",{href:!0});var PYr=s(YR);fro=r(PYr,"BertJapaneseTokenizer"),PYr.forEach(t),mro=r(Zwe," (BertJapanese model)"),Zwe.forEach(t),gro=i(S),Og=n(S,"LI",{});var e0e=s(Og);Oae=n(e0e,"STRONG",{});var BYr=s(Oae);hro=r(BYr,"bertweet"),BYr.forEach(t),pro=r(e0e," \u2014 "),KR=n(e0e,"A",{href:!0});var IYr=s(KR);uro=r(IYr,"BertweetTokenizer"),IYr.forEach(t),_ro=r(e0e," (BERTweet model)"),e0e.forEach(t),bro=i(S),Gn=n(S,"LI",{});var y$=s(Gn);Vae=n(y$,"STRONG",{});var NYr=s(Vae);vro=r(NYr,"big_bird"),NYr.forEach(t),Fro=r(y$," \u2014 "),ZR=n(y$,"A",{href:!0});var qYr=s(ZR);Tro=r(qYr,"BigBirdTokenizer"),qYr.forEach(t),Mro=r(y$," or "),eP=n(y$,"A",{href:!0});var jYr=s(eP);Ero=r(jYr,"BigBirdTokenizerFast"),jYr.forEach(t),Cro=r(y$," (BigBird model)"),y$.forEach(t),wro=i(S),On=n(S,"LI",{});var L$=s(On);Xae=n(L$,"STRONG",{});var DYr=s(Xae);Aro=r(DYr,"bigbird_pegasus"),DYr.forEach(t),yro=r(L$," \u2014 "),oP=n(L$,"A",{href:!0});var GYr=s(oP);Lro=r(GYr,"PegasusTokenizer"),GYr.forEach(t),xro=r(L$," or "),rP=n(L$,"A",{href:!0});var OYr=s(rP);$ro=r(OYr,"PegasusTokenizerFast"),OYr.forEach(t),kro=r(L$," (BigBird-Pegasus model)"),L$.forEach(t),Sro=i(S),Vn=n(S,"LI",{});var x$=s(Vn);zae=n(x$,"STRONG",{});var VYr=s(zae);Rro=r(VYr,"blenderbot"),VYr.forEach(t),Pro=r(x$," \u2014 "),tP=n(x$,"A",{href:!0});var XYr=s(tP);Bro=r(XYr,"BlenderbotTokenizer"),XYr.forEach(t),Iro=r(x$," or "),aP=n(x$,"A",{href:!0});var zYr=s(aP);Nro=r(zYr,"BlenderbotTokenizerFast"),zYr.forEach(t),qro=r(x$," (Blenderbot model)"),x$.forEach(t),jro=i(S),Vg=n(S,"LI",{});var o0e=s(Vg);Wae=n(o0e,"STRONG",{});var WYr=s(Wae);Dro=r(WYr,"blenderbot-small"),WYr.forEach(t),Gro=r(o0e," \u2014 "),nP=n(o0e,"A",{href:!0});var QYr=s(nP);Oro=r(QYr,"BlenderbotSmallTokenizer"),QYr.forEach(t),Vro=r(o0e," (BlenderbotSmall model)"),o0e.forEach(t),Xro=i(S),Xg=n(S,"LI",{});var r0e=s(Xg);Qae=n(r0e,"STRONG",{});var HYr=s(Qae);zro=r(HYr,"byt5"),HYr.forEach(t),Wro=r(r0e," \u2014 "),sP=n(r0e,"A",{href:!0});var UYr=s(sP);Qro=r(UYr,"ByT5Tokenizer"),UYr.forEach(t),Hro=r(r0e," (ByT5 model)"),r0e.forEach(t),Uro=i(S),Xn=n(S,"LI",{});var $$=s(Xn);Hae=n($$,"STRONG",{});var JYr=s(Hae);Jro=r(JYr,"camembert"),JYr.forEach(t),Yro=r($$," \u2014 "),lP=n($$,"A",{href:!0});var YYr=s(lP);Kro=r(YYr,"CamembertTokenizer"),YYr.forEach(t),Zro=r($$," or "),iP=n($$,"A",{href:!0});var KYr=s(iP);eto=r(KYr,"CamembertTokenizerFast"),KYr.forEach(t),oto=r($$," (CamemBERT model)"),$$.forEach(t),rto=i(S),zg=n(S,"LI",{});var t0e=s(zg);Uae=n(t0e,"STRONG",{});var ZYr=s(Uae);tto=r(ZYr,"canine"),ZYr.forEach(t),ato=r(t0e," \u2014 "),dP=n(t0e,"A",{href:!0});var eKr=s(dP);nto=r(eKr,"CanineTokenizer"),eKr.forEach(t),sto=r(t0e," (CANINE model)"),t0e.forEach(t),lto=i(S),zn=n(S,"LI",{});var k$=s(zn);Jae=n(k$,"STRONG",{});var oKr=s(Jae);ito=r(oKr,"clip"),oKr.forEach(t),dto=r(k$," \u2014 "),cP=n(k$,"A",{href:!0});var rKr=s(cP);cto=r(rKr,"CLIPTokenizer"),rKr.forEach(t),fto=r(k$," or "),fP=n(k$,"A",{href:!0});var tKr=s(fP);mto=r(tKr,"CLIPTokenizerFast"),tKr.forEach(t),gto=r(k$," (CLIP model)"),k$.forEach(t),hto=i(S),Wn=n(S,"LI",{});var S$=s(Wn);Yae=n(S$,"STRONG",{});var aKr=s(Yae);pto=r(aKr,"convbert"),aKr.forEach(t),uto=r(S$," \u2014 "),mP=n(S$,"A",{href:!0});var nKr=s(mP);_to=r(nKr,"ConvBertTokenizer"),nKr.forEach(t),bto=r(S$," or "),gP=n(S$,"A",{href:!0});var sKr=s(gP);vto=r(sKr,"ConvBertTokenizerFast"),sKr.forEach(t),Fto=r(S$," (ConvBERT model)"),S$.forEach(t),Tto=i(S),Qn=n(S,"LI",{});var R$=s(Qn);Kae=n(R$,"STRONG",{});var lKr=s(Kae);Mto=r(lKr,"cpm"),lKr.forEach(t),Eto=r(R$," \u2014 "),hP=n(R$,"A",{href:!0});var iKr=s(hP);Cto=r(iKr,"CpmTokenizer"),iKr.forEach(t),wto=r(R$," or "),pP=n(R$,"A",{href:!0});var dKr=s(pP);Ato=r(dKr,"CpmTokenizerFast"),dKr.forEach(t),yto=r(R$," (CPM model)"),R$.forEach(t),Lto=i(S),Wg=n(S,"LI",{});var a0e=s(Wg);Zae=n(a0e,"STRONG",{});var cKr=s(Zae);xto=r(cKr,"ctrl"),cKr.forEach(t),$to=r(a0e," \u2014 "),uP=n(a0e,"A",{href:!0});var fKr=s(uP);kto=r(fKr,"CTRLTokenizer"),fKr.forEach(t),Sto=r(a0e," (CTRL model)"),a0e.forEach(t),Rto=i(S),Hn=n(S,"LI",{});var P$=s(Hn);ene=n(P$,"STRONG",{});var mKr=s(ene);Pto=r(mKr,"data2vec-text"),mKr.forEach(t),Bto=r(P$," \u2014 "),_P=n(P$,"A",{href:!0});var gKr=s(_P);Ito=r(gKr,"RobertaTokenizer"),gKr.forEach(t),Nto=r(P$," or "),bP=n(P$,"A",{href:!0});var hKr=s(bP);qto=r(hKr,"RobertaTokenizerFast"),hKr.forEach(t),jto=r(P$," (Data2VecText model)"),P$.forEach(t),Dto=i(S),Un=n(S,"LI",{});var B$=s(Un);one=n(B$,"STRONG",{});var pKr=s(one);Gto=r(pKr,"deberta"),pKr.forEach(t),Oto=r(B$," \u2014 "),vP=n(B$,"A",{href:!0});var uKr=s(vP);Vto=r(uKr,"DebertaTokenizer"),uKr.forEach(t),Xto=r(B$," or "),FP=n(B$,"A",{href:!0});var _Kr=s(FP);zto=r(_Kr,"DebertaTokenizerFast"),_Kr.forEach(t),Wto=r(B$," (DeBERTa model)"),B$.forEach(t),Qto=i(S),Jn=n(S,"LI",{});var I$=s(Jn);rne=n(I$,"STRONG",{});var bKr=s(rne);Hto=r(bKr,"deberta-v2"),bKr.forEach(t),Uto=r(I$," \u2014 "),TP=n(I$,"A",{href:!0});var vKr=s(TP);Jto=r(vKr,"DebertaV2Tokenizer"),vKr.forEach(t),Yto=r(I$," or "),MP=n(I$,"A",{href:!0});var FKr=s(MP);Kto=r(FKr,"DebertaV2TokenizerFast"),FKr.forEach(t),Zto=r(I$," (DeBERTa-v2 model)"),I$.forEach(t),eao=i(S),Yn=n(S,"LI",{});var N$=s(Yn);tne=n(N$,"STRONG",{});var TKr=s(tne);oao=r(TKr,"distilbert"),TKr.forEach(t),rao=r(N$," \u2014 "),EP=n(N$,"A",{href:!0});var MKr=s(EP);tao=r(MKr,"DistilBertTokenizer"),MKr.forEach(t),aao=r(N$," or "),CP=n(N$,"A",{href:!0});var EKr=s(CP);nao=r(EKr,"DistilBertTokenizerFast"),EKr.forEach(t),sao=r(N$," (DistilBERT model)"),N$.forEach(t),lao=i(S),Kn=n(S,"LI",{});var q$=s(Kn);ane=n(q$,"STRONG",{});var CKr=s(ane);iao=r(CKr,"dpr"),CKr.forEach(t),dao=r(q$," \u2014 "),wP=n(q$,"A",{href:!0});var wKr=s(wP);cao=r(wKr,"DPRQuestionEncoderTokenizer"),wKr.forEach(t),fao=r(q$," or "),AP=n(q$,"A",{href:!0});var AKr=s(AP);mao=r(AKr,"DPRQuestionEncoderTokenizerFast"),AKr.forEach(t),gao=r(q$," (DPR model)"),q$.forEach(t),hao=i(S),Zn=n(S,"LI",{});var j$=s(Zn);nne=n(j$,"STRONG",{});var yKr=s(nne);pao=r(yKr,"electra"),yKr.forEach(t),uao=r(j$," \u2014 "),yP=n(j$,"A",{href:!0});var LKr=s(yP);_ao=r(LKr,"ElectraTokenizer"),LKr.forEach(t),bao=r(j$," or "),LP=n(j$,"A",{href:!0});var xKr=s(LP);vao=r(xKr,"ElectraTokenizerFast"),xKr.forEach(t),Fao=r(j$," (ELECTRA model)"),j$.forEach(t),Tao=i(S),Qg=n(S,"LI",{});var n0e=s(Qg);sne=n(n0e,"STRONG",{});var $Kr=s(sne);Mao=r($Kr,"flaubert"),$Kr.forEach(t),Eao=r(n0e," \u2014 "),xP=n(n0e,"A",{href:!0});var kKr=s(xP);Cao=r(kKr,"FlaubertTokenizer"),kKr.forEach(t),wao=r(n0e," (FlauBERT model)"),n0e.forEach(t),Aao=i(S),es=n(S,"LI",{});var D$=s(es);lne=n(D$,"STRONG",{});var SKr=s(lne);yao=r(SKr,"fnet"),SKr.forEach(t),Lao=r(D$," \u2014 "),$P=n(D$,"A",{href:!0});var RKr=s($P);xao=r(RKr,"FNetTokenizer"),RKr.forEach(t),$ao=r(D$," or "),kP=n(D$,"A",{href:!0});var PKr=s(kP);kao=r(PKr,"FNetTokenizerFast"),PKr.forEach(t),Sao=r(D$," (FNet model)"),D$.forEach(t),Rao=i(S),Hg=n(S,"LI",{});var s0e=s(Hg);ine=n(s0e,"STRONG",{});var BKr=s(ine);Pao=r(BKr,"fsmt"),BKr.forEach(t),Bao=r(s0e," \u2014 "),SP=n(s0e,"A",{href:!0});var IKr=s(SP);Iao=r(IKr,"FSMTTokenizer"),IKr.forEach(t),Nao=r(s0e," (FairSeq Machine-Translation model)"),s0e.forEach(t),qao=i(S),os=n(S,"LI",{});var G$=s(os);dne=n(G$,"STRONG",{});var NKr=s(dne);jao=r(NKr,"funnel"),NKr.forEach(t),Dao=r(G$," \u2014 "),RP=n(G$,"A",{href:!0});var qKr=s(RP);Gao=r(qKr,"FunnelTokenizer"),qKr.forEach(t),Oao=r(G$," or "),PP=n(G$,"A",{href:!0});var jKr=s(PP);Vao=r(jKr,"FunnelTokenizerFast"),jKr.forEach(t),Xao=r(G$," (Funnel Transformer model)"),G$.forEach(t),zao=i(S),rs=n(S,"LI",{});var O$=s(rs);cne=n(O$,"STRONG",{});var DKr=s(cne);Wao=r(DKr,"gpt2"),DKr.forEach(t),Qao=r(O$," \u2014 "),BP=n(O$,"A",{href:!0});var GKr=s(BP);Hao=r(GKr,"GPT2Tokenizer"),GKr.forEach(t),Uao=r(O$," or "),IP=n(O$,"A",{href:!0});var OKr=s(IP);Jao=r(OKr,"GPT2TokenizerFast"),OKr.forEach(t),Yao=r(O$," (OpenAI GPT-2 model)"),O$.forEach(t),Kao=i(S),ts=n(S,"LI",{});var V$=s(ts);fne=n(V$,"STRONG",{});var VKr=s(fne);Zao=r(VKr,"gpt_neo"),VKr.forEach(t),eno=r(V$," \u2014 "),NP=n(V$,"A",{href:!0});var XKr=s(NP);ono=r(XKr,"GPT2Tokenizer"),XKr.forEach(t),rno=r(V$," or "),qP=n(V$,"A",{href:!0});var zKr=s(qP);tno=r(zKr,"GPT2TokenizerFast"),zKr.forEach(t),ano=r(V$," (GPT Neo model)"),V$.forEach(t),nno=i(S),Ug=n(S,"LI",{});var l0e=s(Ug);mne=n(l0e,"STRONG",{});var WKr=s(mne);sno=r(WKr,"gpt_neox"),WKr.forEach(t),lno=r(l0e," \u2014 "),jP=n(l0e,"A",{href:!0});var QKr=s(jP);ino=r(QKr,"GPTNeoXTokenizerFast"),QKr.forEach(t),dno=r(l0e," (GPT NeoX model)"),l0e.forEach(t),cno=i(S),as=n(S,"LI",{});var X$=s(as);gne=n(X$,"STRONG",{});var HKr=s(gne);fno=r(HKr,"gptj"),HKr.forEach(t),mno=r(X$," \u2014 "),DP=n(X$,"A",{href:!0});var UKr=s(DP);gno=r(UKr,"GPT2Tokenizer"),UKr.forEach(t),hno=r(X$," or "),GP=n(X$,"A",{href:!0});var JKr=s(GP);pno=r(JKr,"GPT2TokenizerFast"),JKr.forEach(t),uno=r(X$," (GPT-J model)"),X$.forEach(t),_no=i(S),ns=n(S,"LI",{});var z$=s(ns);hne=n(z$,"STRONG",{});var YKr=s(hne);bno=r(YKr,"herbert"),YKr.forEach(t),vno=r(z$," \u2014 "),OP=n(z$,"A",{href:!0});var KKr=s(OP);Fno=r(KKr,"HerbertTokenizer"),KKr.forEach(t),Tno=r(z$," or "),VP=n(z$,"A",{href:!0});var ZKr=s(VP);Mno=r(ZKr,"HerbertTokenizerFast"),ZKr.forEach(t),Eno=r(z$," (HerBERT model)"),z$.forEach(t),Cno=i(S),Jg=n(S,"LI",{});var i0e=s(Jg);pne=n(i0e,"STRONG",{});var eZr=s(pne);wno=r(eZr,"hubert"),eZr.forEach(t),Ano=r(i0e," \u2014 "),XP=n(i0e,"A",{href:!0});var oZr=s(XP);yno=r(oZr,"Wav2Vec2CTCTokenizer"),oZr.forEach(t),Lno=r(i0e," (Hubert model)"),i0e.forEach(t),xno=i(S),ss=n(S,"LI",{});var W$=s(ss);une=n(W$,"STRONG",{});var rZr=s(une);$no=r(rZr,"ibert"),rZr.forEach(t),kno=r(W$," \u2014 "),zP=n(W$,"A",{href:!0});var tZr=s(zP);Sno=r(tZr,"RobertaTokenizer"),tZr.forEach(t),Rno=r(W$," or "),WP=n(W$,"A",{href:!0});var aZr=s(WP);Pno=r(aZr,"RobertaTokenizerFast"),aZr.forEach(t),Bno=r(W$," (I-BERT model)"),W$.forEach(t),Ino=i(S),ls=n(S,"LI",{});var Q$=s(ls);_ne=n(Q$,"STRONG",{});var nZr=s(_ne);Nno=r(nZr,"layoutlm"),nZr.forEach(t),qno=r(Q$," \u2014 "),QP=n(Q$,"A",{href:!0});var sZr=s(QP);jno=r(sZr,"LayoutLMTokenizer"),sZr.forEach(t),Dno=r(Q$," or "),HP=n(Q$,"A",{href:!0});var lZr=s(HP);Gno=r(lZr,"LayoutLMTokenizerFast"),lZr.forEach(t),Ono=r(Q$," (LayoutLM model)"),Q$.forEach(t),Vno=i(S),is=n(S,"LI",{});var H$=s(is);bne=n(H$,"STRONG",{});var iZr=s(bne);Xno=r(iZr,"layoutlmv2"),iZr.forEach(t),zno=r(H$," \u2014 "),UP=n(H$,"A",{href:!0});var dZr=s(UP);Wno=r(dZr,"LayoutLMv2Tokenizer"),dZr.forEach(t),Qno=r(H$," or "),JP=n(H$,"A",{href:!0});var cZr=s(JP);Hno=r(cZr,"LayoutLMv2TokenizerFast"),cZr.forEach(t),Uno=r(H$," (LayoutLMv2 model)"),H$.forEach(t),Jno=i(S),ds=n(S,"LI",{});var U$=s(ds);vne=n(U$,"STRONG",{});var fZr=s(vne);Yno=r(fZr,"layoutlmv3"),fZr.forEach(t),Kno=r(U$," \u2014 "),YP=n(U$,"A",{href:!0});var mZr=s(YP);Zno=r(mZr,"LayoutLMv3Tokenizer"),mZr.forEach(t),eso=r(U$," or "),KP=n(U$,"A",{href:!0});var gZr=s(KP);oso=r(gZr,"LayoutLMv3TokenizerFast"),gZr.forEach(t),rso=r(U$," (LayoutLMv3 model)"),U$.forEach(t),tso=i(S),cs=n(S,"LI",{});var J$=s(cs);Fne=n(J$,"STRONG",{});var hZr=s(Fne);aso=r(hZr,"layoutxlm"),hZr.forEach(t),nso=r(J$," \u2014 "),ZP=n(J$,"A",{href:!0});var pZr=s(ZP);sso=r(pZr,"LayoutXLMTokenizer"),pZr.forEach(t),lso=r(J$," or "),eB=n(J$,"A",{href:!0});var uZr=s(eB);iso=r(uZr,"LayoutXLMTokenizerFast"),uZr.forEach(t),dso=r(J$," (LayoutXLM model)"),J$.forEach(t),cso=i(S),fs=n(S,"LI",{});var Y$=s(fs);Tne=n(Y$,"STRONG",{});var _Zr=s(Tne);fso=r(_Zr,"led"),_Zr.forEach(t),mso=r(Y$," \u2014 "),oB=n(Y$,"A",{href:!0});var bZr=s(oB);gso=r(bZr,"LEDTokenizer"),bZr.forEach(t),hso=r(Y$," or "),rB=n(Y$,"A",{href:!0});var vZr=s(rB);pso=r(vZr,"LEDTokenizerFast"),vZr.forEach(t),uso=r(Y$," (LED model)"),Y$.forEach(t),_so=i(S),ms=n(S,"LI",{});var K$=s(ms);Mne=n(K$,"STRONG",{});var FZr=s(Mne);bso=r(FZr,"longformer"),FZr.forEach(t),vso=r(K$," \u2014 "),tB=n(K$,"A",{href:!0});var TZr=s(tB);Fso=r(TZr,"LongformerTokenizer"),TZr.forEach(t),Tso=r(K$," or "),aB=n(K$,"A",{href:!0});var MZr=s(aB);Mso=r(MZr,"LongformerTokenizerFast"),MZr.forEach(t),Eso=r(K$," (Longformer model)"),K$.forEach(t),Cso=i(S),Yg=n(S,"LI",{});var d0e=s(Yg);Ene=n(d0e,"STRONG",{});var EZr=s(Ene);wso=r(EZr,"luke"),EZr.forEach(t),Aso=r(d0e," \u2014 "),nB=n(d0e,"A",{href:!0});var CZr=s(nB);yso=r(CZr,"LukeTokenizer"),CZr.forEach(t),Lso=r(d0e," (LUKE model)"),d0e.forEach(t),xso=i(S),gs=n(S,"LI",{});var Z$=s(gs);Cne=n(Z$,"STRONG",{});var wZr=s(Cne);$so=r(wZr,"lxmert"),wZr.forEach(t),kso=r(Z$," \u2014 "),sB=n(Z$,"A",{href:!0});var AZr=s(sB);Sso=r(AZr,"LxmertTokenizer"),AZr.forEach(t),Rso=r(Z$," or "),lB=n(Z$,"A",{href:!0});var yZr=s(lB);Pso=r(yZr,"LxmertTokenizerFast"),yZr.forEach(t),Bso=r(Z$," (LXMERT model)"),Z$.forEach(t),Iso=i(S),Kg=n(S,"LI",{});var c0e=s(Kg);wne=n(c0e,"STRONG",{});var LZr=s(wne);Nso=r(LZr,"m2m_100"),LZr.forEach(t),qso=r(c0e," \u2014 "),iB=n(c0e,"A",{href:!0});var xZr=s(iB);jso=r(xZr,"M2M100Tokenizer"),xZr.forEach(t),Dso=r(c0e," (M2M100 model)"),c0e.forEach(t),Gso=i(S),Zg=n(S,"LI",{});var f0e=s(Zg);Ane=n(f0e,"STRONG",{});var $Zr=s(Ane);Oso=r($Zr,"marian"),$Zr.forEach(t),Vso=r(f0e," \u2014 "),dB=n(f0e,"A",{href:!0});var kZr=s(dB);Xso=r(kZr,"MarianTokenizer"),kZr.forEach(t),zso=r(f0e," (Marian model)"),f0e.forEach(t),Wso=i(S),hs=n(S,"LI",{});var ek=s(hs);yne=n(ek,"STRONG",{});var SZr=s(yne);Qso=r(SZr,"mbart"),SZr.forEach(t),Hso=r(ek," \u2014 "),cB=n(ek,"A",{href:!0});var RZr=s(cB);Uso=r(RZr,"MBartTokenizer"),RZr.forEach(t),Jso=r(ek," or "),fB=n(ek,"A",{href:!0});var PZr=s(fB);Yso=r(PZr,"MBartTokenizerFast"),PZr.forEach(t),Kso=r(ek," (mBART model)"),ek.forEach(t),Zso=i(S),ps=n(S,"LI",{});var ok=s(ps);Lne=n(ok,"STRONG",{});var BZr=s(Lne);elo=r(BZr,"mbart50"),BZr.forEach(t),olo=r(ok," \u2014 "),mB=n(ok,"A",{href:!0});var IZr=s(mB);rlo=r(IZr,"MBart50Tokenizer"),IZr.forEach(t),tlo=r(ok," or "),gB=n(ok,"A",{href:!0});var NZr=s(gB);alo=r(NZr,"MBart50TokenizerFast"),NZr.forEach(t),nlo=r(ok," (mBART-50 model)"),ok.forEach(t),slo=i(S),us=n(S,"LI",{});var rk=s(us);xne=n(rk,"STRONG",{});var qZr=s(xne);llo=r(qZr,"megatron-bert"),qZr.forEach(t),ilo=r(rk," \u2014 "),hB=n(rk,"A",{href:!0});var jZr=s(hB);dlo=r(jZr,"BertTokenizer"),jZr.forEach(t),clo=r(rk," or "),pB=n(rk,"A",{href:!0});var DZr=s(pB);flo=r(DZr,"BertTokenizerFast"),DZr.forEach(t),mlo=r(rk," (Megatron-BERT model)"),rk.forEach(t),glo=i(S),eh=n(S,"LI",{});var m0e=s(eh);$ne=n(m0e,"STRONG",{});var GZr=s($ne);hlo=r(GZr,"mluke"),GZr.forEach(t),plo=r(m0e," \u2014 "),uB=n(m0e,"A",{href:!0});var OZr=s(uB);ulo=r(OZr,"MLukeTokenizer"),OZr.forEach(t),_lo=r(m0e," (mLUKE model)"),m0e.forEach(t),blo=i(S),_s=n(S,"LI",{});var tk=s(_s);kne=n(tk,"STRONG",{});var VZr=s(kne);vlo=r(VZr,"mobilebert"),VZr.forEach(t),Flo=r(tk," \u2014 "),_B=n(tk,"A",{href:!0});var XZr=s(_B);Tlo=r(XZr,"MobileBertTokenizer"),XZr.forEach(t),Mlo=r(tk," or "),bB=n(tk,"A",{href:!0});var zZr=s(bB);Elo=r(zZr,"MobileBertTokenizerFast"),zZr.forEach(t),Clo=r(tk," (MobileBERT model)"),tk.forEach(t),wlo=i(S),bs=n(S,"LI",{});var ak=s(bs);Sne=n(ak,"STRONG",{});var WZr=s(Sne);Alo=r(WZr,"mpnet"),WZr.forEach(t),ylo=r(ak," \u2014 "),vB=n(ak,"A",{href:!0});var QZr=s(vB);Llo=r(QZr,"MPNetTokenizer"),QZr.forEach(t),xlo=r(ak," or "),FB=n(ak,"A",{href:!0});var HZr=s(FB);$lo=r(HZr,"MPNetTokenizerFast"),HZr.forEach(t),klo=r(ak," (MPNet model)"),ak.forEach(t),Slo=i(S),vs=n(S,"LI",{});var nk=s(vs);Rne=n(nk,"STRONG",{});var UZr=s(Rne);Rlo=r(UZr,"mt5"),UZr.forEach(t),Plo=r(nk," \u2014 "),TB=n(nk,"A",{href:!0});var JZr=s(TB);Blo=r(JZr,"MT5Tokenizer"),JZr.forEach(t),Ilo=r(nk," or "),MB=n(nk,"A",{href:!0});var YZr=s(MB);Nlo=r(YZr,"MT5TokenizerFast"),YZr.forEach(t),qlo=r(nk," (MT5 model)"),nk.forEach(t),jlo=i(S),Fs=n(S,"LI",{});var sk=s(Fs);Pne=n(sk,"STRONG",{});var KZr=s(Pne);Dlo=r(KZr,"nystromformer"),KZr.forEach(t),Glo=r(sk," \u2014 "),EB=n(sk,"A",{href:!0});var ZZr=s(EB);Olo=r(ZZr,"AlbertTokenizer"),ZZr.forEach(t),Vlo=r(sk," or "),CB=n(sk,"A",{href:!0});var eet=s(CB);Xlo=r(eet,"AlbertTokenizerFast"),eet.forEach(t),zlo=r(sk," (Nystr\xF6mformer model)"),sk.forEach(t),Wlo=i(S),Ts=n(S,"LI",{});var lk=s(Ts);Bne=n(lk,"STRONG",{});var oet=s(Bne);Qlo=r(oet,"openai-gpt"),oet.forEach(t),Hlo=r(lk," \u2014 "),wB=n(lk,"A",{href:!0});var ret=s(wB);Ulo=r(ret,"OpenAIGPTTokenizer"),ret.forEach(t),Jlo=r(lk," or "),AB=n(lk,"A",{href:!0});var tet=s(AB);Ylo=r(tet,"OpenAIGPTTokenizerFast"),tet.forEach(t),Klo=r(lk," (OpenAI GPT model)"),lk.forEach(t),Zlo=i(S),oh=n(S,"LI",{});var g0e=s(oh);Ine=n(g0e,"STRONG",{});var aet=s(Ine);eio=r(aet,"opt"),aet.forEach(t),oio=r(g0e," \u2014 "),yB=n(g0e,"A",{href:!0});var net=s(yB);rio=r(net,"GPT2Tokenizer"),net.forEach(t),tio=r(g0e," (OPT model)"),g0e.forEach(t),aio=i(S),Ms=n(S,"LI",{});var ik=s(Ms);Nne=n(ik,"STRONG",{});var set=s(Nne);nio=r(set,"pegasus"),set.forEach(t),sio=r(ik," \u2014 "),LB=n(ik,"A",{href:!0});var iet=s(LB);lio=r(iet,"PegasusTokenizer"),iet.forEach(t),iio=r(ik," or "),xB=n(ik,"A",{href:!0});var det=s(xB);dio=r(det,"PegasusTokenizerFast"),det.forEach(t),cio=r(ik," (Pegasus model)"),ik.forEach(t),fio=i(S),rh=n(S,"LI",{});var h0e=s(rh);qne=n(h0e,"STRONG",{});var cet=s(qne);mio=r(cet,"perceiver"),cet.forEach(t),gio=r(h0e," \u2014 "),$B=n(h0e,"A",{href:!0});var fet=s($B);hio=r(fet,"PerceiverTokenizer"),fet.forEach(t),pio=r(h0e," (Perceiver model)"),h0e.forEach(t),uio=i(S),th=n(S,"LI",{});var p0e=s(th);jne=n(p0e,"STRONG",{});var met=s(jne);_io=r(met,"phobert"),met.forEach(t),bio=r(p0e," \u2014 "),kB=n(p0e,"A",{href:!0});var get=s(kB);vio=r(get,"PhobertTokenizer"),get.forEach(t),Fio=r(p0e," (PhoBERT model)"),p0e.forEach(t),Tio=i(S),ah=n(S,"LI",{});var u0e=s(ah);Dne=n(u0e,"STRONG",{});var het=s(Dne);Mio=r(het,"plbart"),het.forEach(t),Eio=r(u0e," \u2014 "),SB=n(u0e,"A",{href:!0});var pet=s(SB);Cio=r(pet,"PLBartTokenizer"),pet.forEach(t),wio=r(u0e," (PLBart model)"),u0e.forEach(t),Aio=i(S),nh=n(S,"LI",{});var _0e=s(nh);Gne=n(_0e,"STRONG",{});var uet=s(Gne);yio=r(uet,"prophetnet"),uet.forEach(t),Lio=r(_0e," \u2014 "),RB=n(_0e,"A",{href:!0});var _et=s(RB);xio=r(_et,"ProphetNetTokenizer"),_et.forEach(t),$io=r(_0e," (ProphetNet model)"),_0e.forEach(t),kio=i(S),Es=n(S,"LI",{});var dk=s(Es);One=n(dk,"STRONG",{});var bet=s(One);Sio=r(bet,"qdqbert"),bet.forEach(t),Rio=r(dk," \u2014 "),PB=n(dk,"A",{href:!0});var vet=s(PB);Pio=r(vet,"BertTokenizer"),vet.forEach(t),Bio=r(dk," or "),BB=n(dk,"A",{href:!0});var Fet=s(BB);Iio=r(Fet,"BertTokenizerFast"),Fet.forEach(t),Nio=r(dk," (QDQBert model)"),dk.forEach(t),qio=i(S),sh=n(S,"LI",{});var b0e=s(sh);Vne=n(b0e,"STRONG",{});var Tet=s(Vne);jio=r(Tet,"rag"),Tet.forEach(t),Dio=r(b0e," \u2014 "),IB=n(b0e,"A",{href:!0});var Met=s(IB);Gio=r(Met,"RagTokenizer"),Met.forEach(t),Oio=r(b0e," (RAG model)"),b0e.forEach(t),Vio=i(S),Cs=n(S,"LI",{});var ck=s(Cs);Xne=n(ck,"STRONG",{});var Eet=s(Xne);Xio=r(Eet,"realm"),Eet.forEach(t),zio=r(ck," \u2014 "),NB=n(ck,"A",{href:!0});var Cet=s(NB);Wio=r(Cet,"RealmTokenizer"),Cet.forEach(t),Qio=r(ck," or "),qB=n(ck,"A",{href:!0});var wet=s(qB);Hio=r(wet,"RealmTokenizerFast"),wet.forEach(t),Uio=r(ck," (REALM model)"),ck.forEach(t),Jio=i(S),ws=n(S,"LI",{});var fk=s(ws);zne=n(fk,"STRONG",{});var Aet=s(zne);Yio=r(Aet,"reformer"),Aet.forEach(t),Kio=r(fk," \u2014 "),jB=n(fk,"A",{href:!0});var yet=s(jB);Zio=r(yet,"ReformerTokenizer"),yet.forEach(t),edo=r(fk," or "),DB=n(fk,"A",{href:!0});var Let=s(DB);odo=r(Let,"ReformerTokenizerFast"),Let.forEach(t),rdo=r(fk," (Reformer model)"),fk.forEach(t),tdo=i(S),As=n(S,"LI",{});var mk=s(As);Wne=n(mk,"STRONG",{});var xet=s(Wne);ado=r(xet,"rembert"),xet.forEach(t),ndo=r(mk," \u2014 "),GB=n(mk,"A",{href:!0});var $et=s(GB);sdo=r($et,"RemBertTokenizer"),$et.forEach(t),ldo=r(mk," or "),OB=n(mk,"A",{href:!0});var ket=s(OB);ido=r(ket,"RemBertTokenizerFast"),ket.forEach(t),ddo=r(mk," (RemBERT model)"),mk.forEach(t),cdo=i(S),ys=n(S,"LI",{});var gk=s(ys);Qne=n(gk,"STRONG",{});var Set=s(Qne);fdo=r(Set,"retribert"),Set.forEach(t),mdo=r(gk," \u2014 "),VB=n(gk,"A",{href:!0});var Ret=s(VB);gdo=r(Ret,"RetriBertTokenizer"),Ret.forEach(t),hdo=r(gk," or "),XB=n(gk,"A",{href:!0});var Pet=s(XB);pdo=r(Pet,"RetriBertTokenizerFast"),Pet.forEach(t),udo=r(gk," (RetriBERT model)"),gk.forEach(t),_do=i(S),Ls=n(S,"LI",{});var hk=s(Ls);Hne=n(hk,"STRONG",{});var Bet=s(Hne);bdo=r(Bet,"roberta"),Bet.forEach(t),vdo=r(hk," \u2014 "),zB=n(hk,"A",{href:!0});var Iet=s(zB);Fdo=r(Iet,"RobertaTokenizer"),Iet.forEach(t),Tdo=r(hk," or "),WB=n(hk,"A",{href:!0});var Net=s(WB);Mdo=r(Net,"RobertaTokenizerFast"),Net.forEach(t),Edo=r(hk," (RoBERTa model)"),hk.forEach(t),Cdo=i(S),xs=n(S,"LI",{});var pk=s(xs);Une=n(pk,"STRONG",{});var qet=s(Une);wdo=r(qet,"roformer"),qet.forEach(t),Ado=r(pk," \u2014 "),QB=n(pk,"A",{href:!0});var jet=s(QB);ydo=r(jet,"RoFormerTokenizer"),jet.forEach(t),Ldo=r(pk," or "),HB=n(pk,"A",{href:!0});var Det=s(HB);xdo=r(Det,"RoFormerTokenizerFast"),Det.forEach(t),$do=r(pk," (RoFormer model)"),pk.forEach(t),kdo=i(S),lh=n(S,"LI",{});var v0e=s(lh);Jne=n(v0e,"STRONG",{});var Get=s(Jne);Sdo=r(Get,"speech_to_text"),Get.forEach(t),Rdo=r(v0e," \u2014 "),UB=n(v0e,"A",{href:!0});var Oet=s(UB);Pdo=r(Oet,"Speech2TextTokenizer"),Oet.forEach(t),Bdo=r(v0e," (Speech2Text model)"),v0e.forEach(t),Ido=i(S),ih=n(S,"LI",{});var F0e=s(ih);Yne=n(F0e,"STRONG",{});var Vet=s(Yne);Ndo=r(Vet,"speech_to_text_2"),Vet.forEach(t),qdo=r(F0e," \u2014 "),JB=n(F0e,"A",{href:!0});var Xet=s(JB);jdo=r(Xet,"Speech2Text2Tokenizer"),Xet.forEach(t),Ddo=r(F0e," (Speech2Text2 model)"),F0e.forEach(t),Gdo=i(S),$s=n(S,"LI",{});var uk=s($s);Kne=n(uk,"STRONG",{});var zet=s(Kne);Odo=r(zet,"splinter"),zet.forEach(t),Vdo=r(uk," \u2014 "),YB=n(uk,"A",{href:!0});var Wet=s(YB);Xdo=r(Wet,"SplinterTokenizer"),Wet.forEach(t),zdo=r(uk," or "),KB=n(uk,"A",{href:!0});var Qet=s(KB);Wdo=r(Qet,"SplinterTokenizerFast"),Qet.forEach(t),Qdo=r(uk," (Splinter model)"),uk.forEach(t),Hdo=i(S),ks=n(S,"LI",{});var _k=s(ks);Zne=n(_k,"STRONG",{});var Het=s(Zne);Udo=r(Het,"squeezebert"),Het.forEach(t),Jdo=r(_k," \u2014 "),ZB=n(_k,"A",{href:!0});var Uet=s(ZB);Ydo=r(Uet,"SqueezeBertTokenizer"),Uet.forEach(t),Kdo=r(_k," or "),eI=n(_k,"A",{href:!0});var Jet=s(eI);Zdo=r(Jet,"SqueezeBertTokenizerFast"),Jet.forEach(t),eco=r(_k," (SqueezeBERT model)"),_k.forEach(t),oco=i(S),Ss=n(S,"LI",{});var bk=s(Ss);ese=n(bk,"STRONG",{});var Yet=s(ese);rco=r(Yet,"t5"),Yet.forEach(t),tco=r(bk," \u2014 "),oI=n(bk,"A",{href:!0});var Ket=s(oI);aco=r(Ket,"T5Tokenizer"),Ket.forEach(t),nco=r(bk," or "),rI=n(bk,"A",{href:!0});var Zet=s(rI);sco=r(Zet,"T5TokenizerFast"),Zet.forEach(t),lco=r(bk," (T5 model)"),bk.forEach(t),ico=i(S),dh=n(S,"LI",{});var T0e=s(dh);ose=n(T0e,"STRONG",{});var eot=s(ose);dco=r(eot,"tapas"),eot.forEach(t),cco=r(T0e," \u2014 "),tI=n(T0e,"A",{href:!0});var oot=s(tI);fco=r(oot,"TapasTokenizer"),oot.forEach(t),mco=r(T0e," (TAPAS model)"),T0e.forEach(t),gco=i(S),ch=n(S,"LI",{});var M0e=s(ch);rse=n(M0e,"STRONG",{});var rot=s(rse);hco=r(rot,"tapex"),rot.forEach(t),pco=r(M0e," \u2014 "),aI=n(M0e,"A",{href:!0});var tot=s(aI);uco=r(tot,"TapexTokenizer"),tot.forEach(t),_co=r(M0e," (TAPEX model)"),M0e.forEach(t),bco=i(S),fh=n(S,"LI",{});var E0e=s(fh);tse=n(E0e,"STRONG",{});var aot=s(tse);vco=r(aot,"transfo-xl"),aot.forEach(t),Fco=r(E0e," \u2014 "),nI=n(E0e,"A",{href:!0});var not=s(nI);Tco=r(not,"TransfoXLTokenizer"),not.forEach(t),Mco=r(E0e," (Transformer-XL model)"),E0e.forEach(t),Eco=i(S),Rs=n(S,"LI",{});var vk=s(Rs);ase=n(vk,"STRONG",{});var sot=s(ase);Cco=r(sot,"vilt"),sot.forEach(t),wco=r(vk," \u2014 "),sI=n(vk,"A",{href:!0});var lot=s(sI);Aco=r(lot,"BertTokenizer"),lot.forEach(t),yco=r(vk," or "),lI=n(vk,"A",{href:!0});var iot=s(lI);Lco=r(iot,"BertTokenizerFast"),iot.forEach(t),xco=r(vk," (ViLT model)"),vk.forEach(t),$co=i(S),Ps=n(S,"LI",{});var Fk=s(Ps);nse=n(Fk,"STRONG",{});var dot=s(nse);kco=r(dot,"visual_bert"),dot.forEach(t),Sco=r(Fk," \u2014 "),iI=n(Fk,"A",{href:!0});var cot=s(iI);Rco=r(cot,"BertTokenizer"),cot.forEach(t),Pco=r(Fk," or "),dI=n(Fk,"A",{href:!0});var fot=s(dI);Bco=r(fot,"BertTokenizerFast"),fot.forEach(t),Ico=r(Fk," (VisualBERT model)"),Fk.forEach(t),Nco=i(S),mh=n(S,"LI",{});var C0e=s(mh);sse=n(C0e,"STRONG",{});var mot=s(sse);qco=r(mot,"wav2vec2"),mot.forEach(t),jco=r(C0e," \u2014 "),cI=n(C0e,"A",{href:!0});var got=s(cI);Dco=r(got,"Wav2Vec2CTCTokenizer"),got.forEach(t),Gco=r(C0e," (Wav2Vec2 model)"),C0e.forEach(t),Oco=i(S),gh=n(S,"LI",{});var w0e=s(gh);lse=n(w0e,"STRONG",{});var hot=s(lse);Vco=r(hot,"wav2vec2-conformer"),hot.forEach(t),Xco=r(w0e," \u2014 "),fI=n(w0e,"A",{href:!0});var pot=s(fI);zco=r(pot,"Wav2Vec2CTCTokenizer"),pot.forEach(t),Wco=r(w0e," (Wav2Vec2-Conformer model)"),w0e.forEach(t),Qco=i(S),hh=n(S,"LI",{});var A0e=s(hh);ise=n(A0e,"STRONG",{});var uot=s(ise);Hco=r(uot,"wav2vec2_phoneme"),uot.forEach(t),Uco=r(A0e," \u2014 "),mI=n(A0e,"A",{href:!0});var _ot=s(mI);Jco=r(_ot,"Wav2Vec2PhonemeCTCTokenizer"),_ot.forEach(t),Yco=r(A0e," (Wav2Vec2Phoneme model)"),A0e.forEach(t),Kco=i(S),Bs=n(S,"LI",{});var Tk=s(Bs);dse=n(Tk,"STRONG",{});var bot=s(dse);Zco=r(bot,"xglm"),bot.forEach(t),efo=r(Tk," \u2014 "),gI=n(Tk,"A",{href:!0});var vot=s(gI);ofo=r(vot,"XGLMTokenizer"),vot.forEach(t),rfo=r(Tk," or "),hI=n(Tk,"A",{href:!0});var Fot=s(hI);tfo=r(Fot,"XGLMTokenizerFast"),Fot.forEach(t),afo=r(Tk," (XGLM model)"),Tk.forEach(t),nfo=i(S),ph=n(S,"LI",{});var y0e=s(ph);cse=n(y0e,"STRONG",{});var Tot=s(cse);sfo=r(Tot,"xlm"),Tot.forEach(t),lfo=r(y0e," \u2014 "),pI=n(y0e,"A",{href:!0});var Mot=s(pI);ifo=r(Mot,"XLMTokenizer"),Mot.forEach(t),dfo=r(y0e," (XLM model)"),y0e.forEach(t),cfo=i(S),uh=n(S,"LI",{});var L0e=s(uh);fse=n(L0e,"STRONG",{});var Eot=s(fse);ffo=r(Eot,"xlm-prophetnet"),Eot.forEach(t),mfo=r(L0e," \u2014 "),uI=n(L0e,"A",{href:!0});var Cot=s(uI);gfo=r(Cot,"XLMProphetNetTokenizer"),Cot.forEach(t),hfo=r(L0e," (XLM-ProphetNet model)"),L0e.forEach(t),pfo=i(S),Is=n(S,"LI",{});var Mk=s(Is);mse=n(Mk,"STRONG",{});var wot=s(mse);ufo=r(wot,"xlm-roberta"),wot.forEach(t),_fo=r(Mk," \u2014 "),_I=n(Mk,"A",{href:!0});var Aot=s(_I);bfo=r(Aot,"XLMRobertaTokenizer"),Aot.forEach(t),vfo=r(Mk," or "),bI=n(Mk,"A",{href:!0});var yot=s(bI);Ffo=r(yot,"XLMRobertaTokenizerFast"),yot.forEach(t),Tfo=r(Mk," (XLM-RoBERTa model)"),Mk.forEach(t),Mfo=i(S),Ns=n(S,"LI",{});var Ek=s(Ns);gse=n(Ek,"STRONG",{});var Lot=s(gse);Efo=r(Lot,"xlm-roberta-xl"),Lot.forEach(t),Cfo=r(Ek," \u2014 "),vI=n(Ek,"A",{href:!0});var xot=s(vI);wfo=r(xot,"RobertaTokenizer"),xot.forEach(t),Afo=r(Ek," or "),FI=n(Ek,"A",{href:!0});var $ot=s(FI);yfo=r($ot,"RobertaTokenizerFast"),$ot.forEach(t),Lfo=r(Ek," (XLM-RoBERTa-XL model)"),Ek.forEach(t),xfo=i(S),qs=n(S,"LI",{});var Ck=s(qs);hse=n(Ck,"STRONG",{});var kot=s(hse);$fo=r(kot,"xlnet"),kot.forEach(t),kfo=r(Ck," \u2014 "),TI=n(Ck,"A",{href:!0});var Sot=s(TI);Sfo=r(Sot,"XLNetTokenizer"),Sot.forEach(t),Rfo=r(Ck," or "),MI=n(Ck,"A",{href:!0});var Rot=s(MI);Pfo=r(Rot,"XLNetTokenizerFast"),Rot.forEach(t),Bfo=r(Ck," (XLNet model)"),Ck.forEach(t),Ifo=i(S),js=n(S,"LI",{});var wk=s(js);pse=n(wk,"STRONG",{});var Pot=s(pse);Nfo=r(Pot,"yoso"),Pot.forEach(t),qfo=r(wk," \u2014 "),EI=n(wk,"A",{href:!0});var Bot=s(EI);jfo=r(Bot,"AlbertTokenizer"),Bot.forEach(t),Dfo=r(wk," or "),CI=n(wk,"A",{href:!0});var Iot=s(CI);Gfo=r(Iot,"AlbertTokenizerFast"),Iot.forEach(t),Ofo=r(wk," (YOSO model)"),wk.forEach(t),S.forEach(t),Vfo=i(zs),T(_h.$$.fragment,zs),zs.forEach(t),Xfo=i(Xs),bh=n(Xs,"DIV",{class:!0});var nOe=s(bh);T(bA.$$.fragment,nOe),zfo=i(nOe),use=n(nOe,"P",{});var Not=s(use);Wfo=r(Not,"Register a new tokenizer in this mapping."),Not.forEach(t),nOe.forEach(t),Xs.forEach(t),aDe=i(f),$i=n(f,"H2",{class:!0});var sOe=s($i);vh=n(sOe,"A",{id:!0,class:!0,href:!0});var qot=s(vh);_se=n(qot,"SPAN",{});var jot=s(_se);T(vA.$$.fragment,jot),jot.forEach(t),qot.forEach(t),Qfo=i(sOe),bse=n(sOe,"SPAN",{});var Dot=s(bse);Hfo=r(Dot,"AutoFeatureExtractor"),Dot.forEach(t),sOe.forEach(t),nDe=i(f),yo=n(f,"DIV",{class:!0});var Ws=s(yo);T(FA.$$.fragment,Ws),Ufo=i(Ws),TA=n(Ws,"P",{});var lOe=s(TA);Jfo=r(lOe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wI=n(lOe,"A",{href:!0});var Got=s(wI);Yfo=r(Got,"AutoFeatureExtractor.from_pretrained()"),Got.forEach(t),Kfo=r(lOe," class method."),lOe.forEach(t),Zfo=i(Ws),MA=n(Ws,"P",{});var iOe=s(MA);emo=r(iOe,"This class cannot be instantiated directly using "),vse=n(iOe,"CODE",{});var Oot=s(vse);omo=r(Oot,"__init__()"),Oot.forEach(t),rmo=r(iOe," (throws an error)."),iOe.forEach(t),tmo=i(Ws),He=n(Ws,"DIV",{class:!0});var ra=s(He);T(EA.$$.fragment,ra),amo=i(ra),Fse=n(ra,"P",{});var Vot=s(Fse);nmo=r(Vot,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Vot.forEach(t),smo=i(ra),ka=n(ra,"P",{});var sw=s(ka);lmo=r(sw,"The feature extractor class to instantiate is selected based on the "),Tse=n(sw,"CODE",{});var Xot=s(Tse);imo=r(Xot,"model_type"),Xot.forEach(t),dmo=r(sw,` property of the config object
(either passed as an argument or loaded from `),Mse=n(sw,"CODE",{});var zot=s(Mse);cmo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),fmo=r(sw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ese=n(sw,"CODE",{});var Wot=s(Ese);mmo=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),gmo=r(sw,":"),sw.forEach(t),hmo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Fh=n(K,"LI",{});var x0e=s(Fh);Cse=n(x0e,"STRONG",{});var Qot=s(Cse);pmo=r(Qot,"beit"),Qot.forEach(t),umo=r(x0e," \u2014 "),AI=n(x0e,"A",{href:!0});var Hot=s(AI);_mo=r(Hot,"BeitFeatureExtractor"),Hot.forEach(t),bmo=r(x0e," (BEiT model)"),x0e.forEach(t),vmo=i(K),Th=n(K,"LI",{});var $0e=s(Th);wse=n($0e,"STRONG",{});var Uot=s(wse);Fmo=r(Uot,"clip"),Uot.forEach(t),Tmo=r($0e," \u2014 "),yI=n($0e,"A",{href:!0});var Jot=s(yI);Mmo=r(Jot,"CLIPFeatureExtractor"),Jot.forEach(t),Emo=r($0e," (CLIP model)"),$0e.forEach(t),Cmo=i(K),Mh=n(K,"LI",{});var k0e=s(Mh);Ase=n(k0e,"STRONG",{});var Yot=s(Ase);wmo=r(Yot,"convnext"),Yot.forEach(t),Amo=r(k0e," \u2014 "),LI=n(k0e,"A",{href:!0});var Kot=s(LI);ymo=r(Kot,"ConvNextFeatureExtractor"),Kot.forEach(t),Lmo=r(k0e," (ConvNeXT model)"),k0e.forEach(t),xmo=i(K),Eh=n(K,"LI",{});var S0e=s(Eh);yse=n(S0e,"STRONG",{});var Zot=s(yse);$mo=r(Zot,"cvt"),Zot.forEach(t),kmo=r(S0e," \u2014 "),xI=n(S0e,"A",{href:!0});var ert=s(xI);Smo=r(ert,"ConvNextFeatureExtractor"),ert.forEach(t),Rmo=r(S0e," (CvT model)"),S0e.forEach(t),Pmo=i(K),Ch=n(K,"LI",{});var R0e=s(Ch);Lse=n(R0e,"STRONG",{});var ort=s(Lse);Bmo=r(ort,"data2vec-audio"),ort.forEach(t),Imo=r(R0e," \u2014 "),$I=n(R0e,"A",{href:!0});var rrt=s($I);Nmo=r(rrt,"Wav2Vec2FeatureExtractor"),rrt.forEach(t),qmo=r(R0e," (Data2VecAudio model)"),R0e.forEach(t),jmo=i(K),wh=n(K,"LI",{});var P0e=s(wh);xse=n(P0e,"STRONG",{});var trt=s(xse);Dmo=r(trt,"data2vec-vision"),trt.forEach(t),Gmo=r(P0e," \u2014 "),kI=n(P0e,"A",{href:!0});var art=s(kI);Omo=r(art,"BeitFeatureExtractor"),art.forEach(t),Vmo=r(P0e," (Data2VecVision model)"),P0e.forEach(t),Xmo=i(K),Ah=n(K,"LI",{});var B0e=s(Ah);$se=n(B0e,"STRONG",{});var nrt=s($se);zmo=r(nrt,"deit"),nrt.forEach(t),Wmo=r(B0e," \u2014 "),SI=n(B0e,"A",{href:!0});var srt=s(SI);Qmo=r(srt,"DeiTFeatureExtractor"),srt.forEach(t),Hmo=r(B0e," (DeiT model)"),B0e.forEach(t),Umo=i(K),yh=n(K,"LI",{});var I0e=s(yh);kse=n(I0e,"STRONG",{});var lrt=s(kse);Jmo=r(lrt,"detr"),lrt.forEach(t),Ymo=r(I0e," \u2014 "),RI=n(I0e,"A",{href:!0});var irt=s(RI);Kmo=r(irt,"DetrFeatureExtractor"),irt.forEach(t),Zmo=r(I0e," (DETR model)"),I0e.forEach(t),ego=i(K),Lh=n(K,"LI",{});var N0e=s(Lh);Sse=n(N0e,"STRONG",{});var drt=s(Sse);ogo=r(drt,"dpt"),drt.forEach(t),rgo=r(N0e," \u2014 "),PI=n(N0e,"A",{href:!0});var crt=s(PI);tgo=r(crt,"DPTFeatureExtractor"),crt.forEach(t),ago=r(N0e," (DPT model)"),N0e.forEach(t),ngo=i(K),xh=n(K,"LI",{});var q0e=s(xh);Rse=n(q0e,"STRONG",{});var frt=s(Rse);sgo=r(frt,"flava"),frt.forEach(t),lgo=r(q0e," \u2014 "),BI=n(q0e,"A",{href:!0});var mrt=s(BI);igo=r(mrt,"FlavaFeatureExtractor"),mrt.forEach(t),dgo=r(q0e," (FLAVA model)"),q0e.forEach(t),cgo=i(K),$h=n(K,"LI",{});var j0e=s($h);Pse=n(j0e,"STRONG",{});var grt=s(Pse);fgo=r(grt,"glpn"),grt.forEach(t),mgo=r(j0e," \u2014 "),II=n(j0e,"A",{href:!0});var hrt=s(II);ggo=r(hrt,"GLPNFeatureExtractor"),hrt.forEach(t),hgo=r(j0e," (GLPN model)"),j0e.forEach(t),pgo=i(K),kh=n(K,"LI",{});var D0e=s(kh);Bse=n(D0e,"STRONG",{});var prt=s(Bse);ugo=r(prt,"hubert"),prt.forEach(t),_go=r(D0e," \u2014 "),NI=n(D0e,"A",{href:!0});var urt=s(NI);bgo=r(urt,"Wav2Vec2FeatureExtractor"),urt.forEach(t),vgo=r(D0e," (Hubert model)"),D0e.forEach(t),Fgo=i(K),Sh=n(K,"LI",{});var G0e=s(Sh);Ise=n(G0e,"STRONG",{});var _rt=s(Ise);Tgo=r(_rt,"imagegpt"),_rt.forEach(t),Mgo=r(G0e," \u2014 "),qI=n(G0e,"A",{href:!0});var brt=s(qI);Ego=r(brt,"ImageGPTFeatureExtractor"),brt.forEach(t),Cgo=r(G0e," (ImageGPT model)"),G0e.forEach(t),wgo=i(K),Rh=n(K,"LI",{});var O0e=s(Rh);Nse=n(O0e,"STRONG",{});var vrt=s(Nse);Ago=r(vrt,"layoutlmv2"),vrt.forEach(t),ygo=r(O0e," \u2014 "),jI=n(O0e,"A",{href:!0});var Frt=s(jI);Lgo=r(Frt,"LayoutLMv2FeatureExtractor"),Frt.forEach(t),xgo=r(O0e," (LayoutLMv2 model)"),O0e.forEach(t),$go=i(K),Ph=n(K,"LI",{});var V0e=s(Ph);qse=n(V0e,"STRONG",{});var Trt=s(qse);kgo=r(Trt,"layoutlmv3"),Trt.forEach(t),Sgo=r(V0e," \u2014 "),DI=n(V0e,"A",{href:!0});var Mrt=s(DI);Rgo=r(Mrt,"LayoutLMv3FeatureExtractor"),Mrt.forEach(t),Pgo=r(V0e," (LayoutLMv3 model)"),V0e.forEach(t),Bgo=i(K),Bh=n(K,"LI",{});var X0e=s(Bh);jse=n(X0e,"STRONG",{});var Ert=s(jse);Igo=r(Ert,"levit"),Ert.forEach(t),Ngo=r(X0e," \u2014 "),GI=n(X0e,"A",{href:!0});var Crt=s(GI);qgo=r(Crt,"LevitFeatureExtractor"),Crt.forEach(t),jgo=r(X0e," (LeViT model)"),X0e.forEach(t),Dgo=i(K),Ih=n(K,"LI",{});var z0e=s(Ih);Dse=n(z0e,"STRONG",{});var wrt=s(Dse);Ggo=r(wrt,"maskformer"),wrt.forEach(t),Ogo=r(z0e," \u2014 "),OI=n(z0e,"A",{href:!0});var Art=s(OI);Vgo=r(Art,"MaskFormerFeatureExtractor"),Art.forEach(t),Xgo=r(z0e," (MaskFormer model)"),z0e.forEach(t),zgo=i(K),Nh=n(K,"LI",{});var W0e=s(Nh);Gse=n(W0e,"STRONG",{});var yrt=s(Gse);Wgo=r(yrt,"mctct"),yrt.forEach(t),Qgo=r(W0e," \u2014 "),VI=n(W0e,"A",{href:!0});var Lrt=s(VI);Hgo=r(Lrt,"MCTCTFeatureExtractor"),Lrt.forEach(t),Ugo=r(W0e," (M-CTC-T model)"),W0e.forEach(t),Jgo=i(K),qh=n(K,"LI",{});var Q0e=s(qh);Ose=n(Q0e,"STRONG",{});var xrt=s(Ose);Ygo=r(xrt,"perceiver"),xrt.forEach(t),Kgo=r(Q0e," \u2014 "),XI=n(Q0e,"A",{href:!0});var $rt=s(XI);Zgo=r($rt,"PerceiverFeatureExtractor"),$rt.forEach(t),eho=r(Q0e," (Perceiver model)"),Q0e.forEach(t),oho=i(K),jh=n(K,"LI",{});var H0e=s(jh);Vse=n(H0e,"STRONG",{});var krt=s(Vse);rho=r(krt,"poolformer"),krt.forEach(t),tho=r(H0e," \u2014 "),zI=n(H0e,"A",{href:!0});var Srt=s(zI);aho=r(Srt,"PoolFormerFeatureExtractor"),Srt.forEach(t),nho=r(H0e," (PoolFormer model)"),H0e.forEach(t),sho=i(K),Dh=n(K,"LI",{});var U0e=s(Dh);Xse=n(U0e,"STRONG",{});var Rrt=s(Xse);lho=r(Rrt,"regnet"),Rrt.forEach(t),iho=r(U0e," \u2014 "),WI=n(U0e,"A",{href:!0});var Prt=s(WI);dho=r(Prt,"ConvNextFeatureExtractor"),Prt.forEach(t),cho=r(U0e," (RegNet model)"),U0e.forEach(t),fho=i(K),Gh=n(K,"LI",{});var J0e=s(Gh);zse=n(J0e,"STRONG",{});var Brt=s(zse);mho=r(Brt,"resnet"),Brt.forEach(t),gho=r(J0e," \u2014 "),QI=n(J0e,"A",{href:!0});var Irt=s(QI);hho=r(Irt,"ConvNextFeatureExtractor"),Irt.forEach(t),pho=r(J0e," (ResNet model)"),J0e.forEach(t),uho=i(K),Oh=n(K,"LI",{});var Y0e=s(Oh);Wse=n(Y0e,"STRONG",{});var Nrt=s(Wse);_ho=r(Nrt,"segformer"),Nrt.forEach(t),bho=r(Y0e," \u2014 "),HI=n(Y0e,"A",{href:!0});var qrt=s(HI);vho=r(qrt,"SegformerFeatureExtractor"),qrt.forEach(t),Fho=r(Y0e," (SegFormer model)"),Y0e.forEach(t),Tho=i(K),Vh=n(K,"LI",{});var K0e=s(Vh);Qse=n(K0e,"STRONG",{});var jrt=s(Qse);Mho=r(jrt,"speech_to_text"),jrt.forEach(t),Eho=r(K0e," \u2014 "),UI=n(K0e,"A",{href:!0});var Drt=s(UI);Cho=r(Drt,"Speech2TextFeatureExtractor"),Drt.forEach(t),who=r(K0e," (Speech2Text model)"),K0e.forEach(t),Aho=i(K),Xh=n(K,"LI",{});var Z0e=s(Xh);Hse=n(Z0e,"STRONG",{});var Grt=s(Hse);yho=r(Grt,"swin"),Grt.forEach(t),Lho=r(Z0e," \u2014 "),JI=n(Z0e,"A",{href:!0});var Ort=s(JI);xho=r(Ort,"ViTFeatureExtractor"),Ort.forEach(t),$ho=r(Z0e," (Swin Transformer model)"),Z0e.forEach(t),kho=i(K),zh=n(K,"LI",{});var eAe=s(zh);Use=n(eAe,"STRONG",{});var Vrt=s(Use);Sho=r(Vrt,"van"),Vrt.forEach(t),Rho=r(eAe," \u2014 "),YI=n(eAe,"A",{href:!0});var Xrt=s(YI);Pho=r(Xrt,"ConvNextFeatureExtractor"),Xrt.forEach(t),Bho=r(eAe," (VAN model)"),eAe.forEach(t),Iho=i(K),Wh=n(K,"LI",{});var oAe=s(Wh);Jse=n(oAe,"STRONG",{});var zrt=s(Jse);Nho=r(zrt,"vilt"),zrt.forEach(t),qho=r(oAe," \u2014 "),KI=n(oAe,"A",{href:!0});var Wrt=s(KI);jho=r(Wrt,"ViltFeatureExtractor"),Wrt.forEach(t),Dho=r(oAe," (ViLT model)"),oAe.forEach(t),Gho=i(K),Qh=n(K,"LI",{});var rAe=s(Qh);Yse=n(rAe,"STRONG",{});var Qrt=s(Yse);Oho=r(Qrt,"vit"),Qrt.forEach(t),Vho=r(rAe," \u2014 "),ZI=n(rAe,"A",{href:!0});var Hrt=s(ZI);Xho=r(Hrt,"ViTFeatureExtractor"),Hrt.forEach(t),zho=r(rAe," (ViT model)"),rAe.forEach(t),Who=i(K),Hh=n(K,"LI",{});var tAe=s(Hh);Kse=n(tAe,"STRONG",{});var Urt=s(Kse);Qho=r(Urt,"vit_mae"),Urt.forEach(t),Hho=r(tAe," \u2014 "),eN=n(tAe,"A",{href:!0});var Jrt=s(eN);Uho=r(Jrt,"ViTFeatureExtractor"),Jrt.forEach(t),Jho=r(tAe," (ViTMAE model)"),tAe.forEach(t),Yho=i(K),Uh=n(K,"LI",{});var aAe=s(Uh);Zse=n(aAe,"STRONG",{});var Yrt=s(Zse);Kho=r(Yrt,"wav2vec2"),Yrt.forEach(t),Zho=r(aAe," \u2014 "),oN=n(aAe,"A",{href:!0});var Krt=s(oN);epo=r(Krt,"Wav2Vec2FeatureExtractor"),Krt.forEach(t),opo=r(aAe," (Wav2Vec2 model)"),aAe.forEach(t),rpo=i(K),Jh=n(K,"LI",{});var nAe=s(Jh);ele=n(nAe,"STRONG",{});var Zrt=s(ele);tpo=r(Zrt,"wav2vec2-conformer"),Zrt.forEach(t),apo=r(nAe," \u2014 "),rN=n(nAe,"A",{href:!0});var ett=s(rN);npo=r(ett,"Wav2Vec2FeatureExtractor"),ett.forEach(t),spo=r(nAe," (Wav2Vec2-Conformer model)"),nAe.forEach(t),lpo=i(K),Yh=n(K,"LI",{});var sAe=s(Yh);ole=n(sAe,"STRONG",{});var ott=s(ole);ipo=r(ott,"yolos"),ott.forEach(t),dpo=r(sAe," \u2014 "),tN=n(sAe,"A",{href:!0});var rtt=s(tN);cpo=r(rtt,"YolosFeatureExtractor"),rtt.forEach(t),fpo=r(sAe," (YOLOS model)"),sAe.forEach(t),K.forEach(t),mpo=i(ra),T(Kh.$$.fragment,ra),gpo=i(ra),T(Zh.$$.fragment,ra),ra.forEach(t),hpo=i(Ws),ep=n(Ws,"DIV",{class:!0});var dOe=s(ep);T(CA.$$.fragment,dOe),ppo=i(dOe),rle=n(dOe,"P",{});var ttt=s(rle);upo=r(ttt,"Register a new feature extractor for this class."),ttt.forEach(t),dOe.forEach(t),Ws.forEach(t),sDe=i(f),ki=n(f,"H2",{class:!0});var cOe=s(ki);op=n(cOe,"A",{id:!0,class:!0,href:!0});var att=s(op);tle=n(att,"SPAN",{});var ntt=s(tle);T(wA.$$.fragment,ntt),ntt.forEach(t),att.forEach(t),_po=i(cOe),ale=n(cOe,"SPAN",{});var stt=s(ale);bpo=r(stt,"AutoProcessor"),stt.forEach(t),cOe.forEach(t),lDe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(AA.$$.fragment,Qs),vpo=i(Qs),yA=n(Qs,"P",{});var fOe=s(yA);Fpo=r(fOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aN=n(fOe,"A",{href:!0});var ltt=s(aN);Tpo=r(ltt,"AutoProcessor.from_pretrained()"),ltt.forEach(t),Mpo=r(fOe," class method."),fOe.forEach(t),Epo=i(Qs),LA=n(Qs,"P",{});var mOe=s(LA);Cpo=r(mOe,"This class cannot be instantiated directly using "),nle=n(mOe,"CODE",{});var itt=s(nle);wpo=r(itt,"__init__()"),itt.forEach(t),Apo=r(mOe," (throws an error)."),mOe.forEach(t),ypo=i(Qs),Ue=n(Qs,"DIV",{class:!0});var ta=s(Ue);T(xA.$$.fragment,ta),Lpo=i(ta),sle=n(ta,"P",{});var dtt=s(sle);xpo=r(dtt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dtt.forEach(t),$po=i(ta),Si=n(ta,"P",{});var Fee=s(Si);kpo=r(Fee,"The processor class to instantiate is selected based on the "),lle=n(Fee,"CODE",{});var ctt=s(lle);Spo=r(ctt,"model_type"),ctt.forEach(t),Rpo=r(Fee,` property of the config object (either
passed as an argument or loaded from `),ile=n(Fee,"CODE",{});var ftt=s(ile);Ppo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),Bpo=r(Fee," if possible):"),Fee.forEach(t),Ipo=i(ta),he=n(ta,"UL",{});var _e=s(he);rp=n(_e,"LI",{});var lAe=s(rp);dle=n(lAe,"STRONG",{});var mtt=s(dle);Npo=r(mtt,"clip"),mtt.forEach(t),qpo=r(lAe," \u2014 "),nN=n(lAe,"A",{href:!0});var gtt=s(nN);jpo=r(gtt,"CLIPProcessor"),gtt.forEach(t),Dpo=r(lAe," (CLIP model)"),lAe.forEach(t),Gpo=i(_e),tp=n(_e,"LI",{});var iAe=s(tp);cle=n(iAe,"STRONG",{});var htt=s(cle);Opo=r(htt,"flava"),htt.forEach(t),Vpo=r(iAe," \u2014 "),fle=n(iAe,"CODE",{});var ptt=s(fle);Xpo=r(ptt,"FLAVAProcessor"),ptt.forEach(t),zpo=r(iAe," (FLAVA model)"),iAe.forEach(t),Wpo=i(_e),ap=n(_e,"LI",{});var dAe=s(ap);mle=n(dAe,"STRONG",{});var utt=s(mle);Qpo=r(utt,"layoutlmv2"),utt.forEach(t),Hpo=r(dAe," \u2014 "),sN=n(dAe,"A",{href:!0});var _tt=s(sN);Upo=r(_tt,"LayoutLMv2Processor"),_tt.forEach(t),Jpo=r(dAe," (LayoutLMv2 model)"),dAe.forEach(t),Ypo=i(_e),np=n(_e,"LI",{});var cAe=s(np);gle=n(cAe,"STRONG",{});var btt=s(gle);Kpo=r(btt,"layoutlmv3"),btt.forEach(t),Zpo=r(cAe," \u2014 "),lN=n(cAe,"A",{href:!0});var vtt=s(lN);euo=r(vtt,"LayoutLMv3Processor"),vtt.forEach(t),ouo=r(cAe," (LayoutLMv3 model)"),cAe.forEach(t),ruo=i(_e),sp=n(_e,"LI",{});var fAe=s(sp);hle=n(fAe,"STRONG",{});var Ftt=s(hle);tuo=r(Ftt,"layoutxlm"),Ftt.forEach(t),auo=r(fAe," \u2014 "),iN=n(fAe,"A",{href:!0});var Ttt=s(iN);nuo=r(Ttt,"LayoutXLMProcessor"),Ttt.forEach(t),suo=r(fAe," (LayoutXLM model)"),fAe.forEach(t),luo=i(_e),lp=n(_e,"LI",{});var mAe=s(lp);ple=n(mAe,"STRONG",{});var Mtt=s(ple);iuo=r(Mtt,"sew"),Mtt.forEach(t),duo=r(mAe," \u2014 "),dN=n(mAe,"A",{href:!0});var Ett=s(dN);cuo=r(Ett,"Wav2Vec2Processor"),Ett.forEach(t),fuo=r(mAe," (SEW model)"),mAe.forEach(t),muo=i(_e),ip=n(_e,"LI",{});var gAe=s(ip);ule=n(gAe,"STRONG",{});var Ctt=s(ule);guo=r(Ctt,"sew-d"),Ctt.forEach(t),huo=r(gAe," \u2014 "),cN=n(gAe,"A",{href:!0});var wtt=s(cN);puo=r(wtt,"Wav2Vec2Processor"),wtt.forEach(t),uuo=r(gAe," (SEW-D model)"),gAe.forEach(t),_uo=i(_e),dp=n(_e,"LI",{});var hAe=s(dp);_le=n(hAe,"STRONG",{});var Att=s(_le);buo=r(Att,"speech_to_text"),Att.forEach(t),vuo=r(hAe," \u2014 "),fN=n(hAe,"A",{href:!0});var ytt=s(fN);Fuo=r(ytt,"Speech2TextProcessor"),ytt.forEach(t),Tuo=r(hAe," (Speech2Text model)"),hAe.forEach(t),Muo=i(_e),cp=n(_e,"LI",{});var pAe=s(cp);ble=n(pAe,"STRONG",{});var Ltt=s(ble);Euo=r(Ltt,"speech_to_text_2"),Ltt.forEach(t),Cuo=r(pAe," \u2014 "),mN=n(pAe,"A",{href:!0});var xtt=s(mN);wuo=r(xtt,"Speech2Text2Processor"),xtt.forEach(t),Auo=r(pAe," (Speech2Text2 model)"),pAe.forEach(t),yuo=i(_e),fp=n(_e,"LI",{});var uAe=s(fp);vle=n(uAe,"STRONG",{});var $tt=s(vle);Luo=r($tt,"trocr"),$tt.forEach(t),xuo=r(uAe," \u2014 "),gN=n(uAe,"A",{href:!0});var ktt=s(gN);$uo=r(ktt,"TrOCRProcessor"),ktt.forEach(t),kuo=r(uAe," (TrOCR model)"),uAe.forEach(t),Suo=i(_e),mp=n(_e,"LI",{});var _Ae=s(mp);Fle=n(_Ae,"STRONG",{});var Stt=s(Fle);Ruo=r(Stt,"unispeech"),Stt.forEach(t),Puo=r(_Ae," \u2014 "),hN=n(_Ae,"A",{href:!0});var Rtt=s(hN);Buo=r(Rtt,"Wav2Vec2Processor"),Rtt.forEach(t),Iuo=r(_Ae," (UniSpeech model)"),_Ae.forEach(t),Nuo=i(_e),gp=n(_e,"LI",{});var bAe=s(gp);Tle=n(bAe,"STRONG",{});var Ptt=s(Tle);quo=r(Ptt,"unispeech-sat"),Ptt.forEach(t),juo=r(bAe," \u2014 "),pN=n(bAe,"A",{href:!0});var Btt=s(pN);Duo=r(Btt,"Wav2Vec2Processor"),Btt.forEach(t),Guo=r(bAe," (UniSpeechSat model)"),bAe.forEach(t),Ouo=i(_e),hp=n(_e,"LI",{});var vAe=s(hp);Mle=n(vAe,"STRONG",{});var Itt=s(Mle);Vuo=r(Itt,"vilt"),Itt.forEach(t),Xuo=r(vAe," \u2014 "),uN=n(vAe,"A",{href:!0});var Ntt=s(uN);zuo=r(Ntt,"ViltProcessor"),Ntt.forEach(t),Wuo=r(vAe," (ViLT model)"),vAe.forEach(t),Quo=i(_e),pp=n(_e,"LI",{});var FAe=s(pp);Ele=n(FAe,"STRONG",{});var qtt=s(Ele);Huo=r(qtt,"vision-text-dual-encoder"),qtt.forEach(t),Uuo=r(FAe," \u2014 "),_N=n(FAe,"A",{href:!0});var jtt=s(_N);Juo=r(jtt,"VisionTextDualEncoderProcessor"),jtt.forEach(t),Yuo=r(FAe," (VisionTextDualEncoder model)"),FAe.forEach(t),Kuo=i(_e),up=n(_e,"LI",{});var TAe=s(up);Cle=n(TAe,"STRONG",{});var Dtt=s(Cle);Zuo=r(Dtt,"wav2vec2"),Dtt.forEach(t),e_o=r(TAe," \u2014 "),bN=n(TAe,"A",{href:!0});var Gtt=s(bN);o_o=r(Gtt,"Wav2Vec2Processor"),Gtt.forEach(t),r_o=r(TAe," (Wav2Vec2 model)"),TAe.forEach(t),t_o=i(_e),_p=n(_e,"LI",{});var MAe=s(_p);wle=n(MAe,"STRONG",{});var Ott=s(wle);a_o=r(Ott,"wav2vec2-conformer"),Ott.forEach(t),n_o=r(MAe," \u2014 "),vN=n(MAe,"A",{href:!0});var Vtt=s(vN);s_o=r(Vtt,"Wav2Vec2Processor"),Vtt.forEach(t),l_o=r(MAe," (Wav2Vec2-Conformer model)"),MAe.forEach(t),i_o=i(_e),bp=n(_e,"LI",{});var EAe=s(bp);Ale=n(EAe,"STRONG",{});var Xtt=s(Ale);d_o=r(Xtt,"wavlm"),Xtt.forEach(t),c_o=r(EAe," \u2014 "),FN=n(EAe,"A",{href:!0});var ztt=s(FN);f_o=r(ztt,"Wav2Vec2Processor"),ztt.forEach(t),m_o=r(EAe," (WavLM model)"),EAe.forEach(t),_e.forEach(t),g_o=i(ta),T(vp.$$.fragment,ta),h_o=i(ta),T(Fp.$$.fragment,ta),ta.forEach(t),p_o=i(Qs),Tp=n(Qs,"DIV",{class:!0});var gOe=s(Tp);T($A.$$.fragment,gOe),u_o=i(gOe),yle=n(gOe,"P",{});var Wtt=s(yle);__o=r(Wtt,"Register a new processor for this class."),Wtt.forEach(t),gOe.forEach(t),Qs.forEach(t),iDe=i(f),Ri=n(f,"H2",{class:!0});var hOe=s(Ri);Mp=n(hOe,"A",{id:!0,class:!0,href:!0});var Qtt=s(Mp);Lle=n(Qtt,"SPAN",{});var Htt=s(Lle);T(kA.$$.fragment,Htt),Htt.forEach(t),Qtt.forEach(t),b_o=i(hOe),xle=n(hOe,"SPAN",{});var Utt=s(xle);v_o=r(Utt,"AutoModel"),Utt.forEach(t),hOe.forEach(t),dDe=i(f),xo=n(f,"DIV",{class:!0});var Hs=s(xo);T(SA.$$.fragment,Hs),F_o=i(Hs),Pi=n(Hs,"P",{});var Tee=s(Pi);T_o=r(Tee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TN=n(Tee,"A",{href:!0});var Jtt=s(TN);M_o=r(Jtt,"from_pretrained()"),Jtt.forEach(t),E_o=r(Tee," class method or the "),MN=n(Tee,"A",{href:!0});var Ytt=s(MN);C_o=r(Ytt,"from_config()"),Ytt.forEach(t),w_o=r(Tee,` class
method.`),Tee.forEach(t),A_o=i(Hs),RA=n(Hs,"P",{});var pOe=s(RA);y_o=r(pOe,"This class cannot be instantiated directly using "),$le=n(pOe,"CODE",{});var Ktt=s($le);L_o=r(Ktt,"__init__()"),Ktt.forEach(t),x_o=r(pOe," (throws an error)."),pOe.forEach(t),$_o=i(Hs),nt=n(Hs,"DIV",{class:!0});var lw=s(nt);T(PA.$$.fragment,lw),k_o=i(lw),kle=n(lw,"P",{});var Ztt=s(kle);S_o=r(Ztt,"Instantiates one of the base model classes of the library from a configuration."),Ztt.forEach(t),R_o=i(lw),Bi=n(lw,"P",{});var Mee=s(Bi);P_o=r(Mee,`Note:
Loading a model from its configuration file does `),Sle=n(Mee,"STRONG",{});var eat=s(Sle);B_o=r(eat,"not"),eat.forEach(t),I_o=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=n(Mee,"A",{href:!0});var oat=s(EN);N_o=r(oat,"from_pretrained()"),oat.forEach(t),q_o=r(Mee," to load the model weights."),Mee.forEach(t),j_o=i(lw),T(Ep.$$.fragment,lw),lw.forEach(t),D_o=i(Hs),Je=n(Hs,"DIV",{class:!0});var aa=s(Je);T(BA.$$.fragment,aa),G_o=i(aa),Rle=n(aa,"P",{});var rat=s(Rle);O_o=r(rat,"Instantiate one of the base model classes of the library from a pretrained model."),rat.forEach(t),V_o=i(aa),Sa=n(aa,"P",{});var iw=s(Sa);X_o=r(iw,"The model class to instantiate is selected based on the "),Ple=n(iw,"CODE",{});var tat=s(Ple);z_o=r(tat,"model_type"),tat.forEach(t),W_o=r(iw,` property of the config object (either
passed as an argument or loaded from `),Ble=n(iw,"CODE",{});var aat=s(Ble);Q_o=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),H_o=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(iw,"CODE",{});var nat=s(Ile);U_o=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),J_o=r(iw,":"),iw.forEach(t),Y_o=i(aa),x=n(aa,"UL",{});var $=s(x);Cp=n($,"LI",{});var CAe=s(Cp);Nle=n(CAe,"STRONG",{});var sat=s(Nle);K_o=r(sat,"albert"),sat.forEach(t),Z_o=r(CAe," \u2014 "),CN=n(CAe,"A",{href:!0});var lat=s(CN);e2o=r(lat,"AlbertModel"),lat.forEach(t),o2o=r(CAe," (ALBERT model)"),CAe.forEach(t),r2o=i($),wp=n($,"LI",{});var wAe=s(wp);qle=n(wAe,"STRONG",{});var iat=s(qle);t2o=r(iat,"bart"),iat.forEach(t),a2o=r(wAe," \u2014 "),wN=n(wAe,"A",{href:!0});var dat=s(wN);n2o=r(dat,"BartModel"),dat.forEach(t),s2o=r(wAe," (BART model)"),wAe.forEach(t),l2o=i($),Ap=n($,"LI",{});var AAe=s(Ap);jle=n(AAe,"STRONG",{});var cat=s(jle);i2o=r(cat,"beit"),cat.forEach(t),d2o=r(AAe," \u2014 "),AN=n(AAe,"A",{href:!0});var fat=s(AN);c2o=r(fat,"BeitModel"),fat.forEach(t),f2o=r(AAe," (BEiT model)"),AAe.forEach(t),m2o=i($),yp=n($,"LI",{});var yAe=s(yp);Dle=n(yAe,"STRONG",{});var mat=s(Dle);g2o=r(mat,"bert"),mat.forEach(t),h2o=r(yAe," \u2014 "),yN=n(yAe,"A",{href:!0});var gat=s(yN);p2o=r(gat,"BertModel"),gat.forEach(t),u2o=r(yAe," (BERT model)"),yAe.forEach(t),_2o=i($),Lp=n($,"LI",{});var LAe=s(Lp);Gle=n(LAe,"STRONG",{});var hat=s(Gle);b2o=r(hat,"bert-generation"),hat.forEach(t),v2o=r(LAe," \u2014 "),LN=n(LAe,"A",{href:!0});var pat=s(LN);F2o=r(pat,"BertGenerationEncoder"),pat.forEach(t),T2o=r(LAe," (Bert Generation model)"),LAe.forEach(t),M2o=i($),xp=n($,"LI",{});var xAe=s(xp);Ole=n(xAe,"STRONG",{});var uat=s(Ole);E2o=r(uat,"big_bird"),uat.forEach(t),C2o=r(xAe," \u2014 "),xN=n(xAe,"A",{href:!0});var _at=s(xN);w2o=r(_at,"BigBirdModel"),_at.forEach(t),A2o=r(xAe," (BigBird model)"),xAe.forEach(t),y2o=i($),$p=n($,"LI",{});var $Ae=s($p);Vle=n($Ae,"STRONG",{});var bat=s(Vle);L2o=r(bat,"bigbird_pegasus"),bat.forEach(t),x2o=r($Ae," \u2014 "),$N=n($Ae,"A",{href:!0});var vat=s($N);$2o=r(vat,"BigBirdPegasusModel"),vat.forEach(t),k2o=r($Ae," (BigBird-Pegasus model)"),$Ae.forEach(t),S2o=i($),kp=n($,"LI",{});var kAe=s(kp);Xle=n(kAe,"STRONG",{});var Fat=s(Xle);R2o=r(Fat,"blenderbot"),Fat.forEach(t),P2o=r(kAe," \u2014 "),kN=n(kAe,"A",{href:!0});var Tat=s(kN);B2o=r(Tat,"BlenderbotModel"),Tat.forEach(t),I2o=r(kAe," (Blenderbot model)"),kAe.forEach(t),N2o=i($),Sp=n($,"LI",{});var SAe=s(Sp);zle=n(SAe,"STRONG",{});var Mat=s(zle);q2o=r(Mat,"blenderbot-small"),Mat.forEach(t),j2o=r(SAe," \u2014 "),SN=n(SAe,"A",{href:!0});var Eat=s(SN);D2o=r(Eat,"BlenderbotSmallModel"),Eat.forEach(t),G2o=r(SAe," (BlenderbotSmall model)"),SAe.forEach(t),O2o=i($),Rp=n($,"LI",{});var RAe=s(Rp);Wle=n(RAe,"STRONG",{});var Cat=s(Wle);V2o=r(Cat,"camembert"),Cat.forEach(t),X2o=r(RAe," \u2014 "),RN=n(RAe,"A",{href:!0});var wat=s(RN);z2o=r(wat,"CamembertModel"),wat.forEach(t),W2o=r(RAe," (CamemBERT model)"),RAe.forEach(t),Q2o=i($),Pp=n($,"LI",{});var PAe=s(Pp);Qle=n(PAe,"STRONG",{});var Aat=s(Qle);H2o=r(Aat,"canine"),Aat.forEach(t),U2o=r(PAe," \u2014 "),PN=n(PAe,"A",{href:!0});var yat=s(PN);J2o=r(yat,"CanineModel"),yat.forEach(t),Y2o=r(PAe," (CANINE model)"),PAe.forEach(t),K2o=i($),Bp=n($,"LI",{});var BAe=s(Bp);Hle=n(BAe,"STRONG",{});var Lat=s(Hle);Z2o=r(Lat,"clip"),Lat.forEach(t),e1o=r(BAe," \u2014 "),BN=n(BAe,"A",{href:!0});var xat=s(BN);o1o=r(xat,"CLIPModel"),xat.forEach(t),r1o=r(BAe," (CLIP model)"),BAe.forEach(t),t1o=i($),Ip=n($,"LI",{});var IAe=s(Ip);Ule=n(IAe,"STRONG",{});var $at=s(Ule);a1o=r($at,"convbert"),$at.forEach(t),n1o=r(IAe," \u2014 "),IN=n(IAe,"A",{href:!0});var kat=s(IN);s1o=r(kat,"ConvBertModel"),kat.forEach(t),l1o=r(IAe," (ConvBERT model)"),IAe.forEach(t),i1o=i($),Np=n($,"LI",{});var NAe=s(Np);Jle=n(NAe,"STRONG",{});var Sat=s(Jle);d1o=r(Sat,"convnext"),Sat.forEach(t),c1o=r(NAe," \u2014 "),NN=n(NAe,"A",{href:!0});var Rat=s(NN);f1o=r(Rat,"ConvNextModel"),Rat.forEach(t),m1o=r(NAe," (ConvNeXT model)"),NAe.forEach(t),g1o=i($),qp=n($,"LI",{});var qAe=s(qp);Yle=n(qAe,"STRONG",{});var Pat=s(Yle);h1o=r(Pat,"ctrl"),Pat.forEach(t),p1o=r(qAe," \u2014 "),qN=n(qAe,"A",{href:!0});var Bat=s(qN);u1o=r(Bat,"CTRLModel"),Bat.forEach(t),_1o=r(qAe," (CTRL model)"),qAe.forEach(t),b1o=i($),jp=n($,"LI",{});var jAe=s(jp);Kle=n(jAe,"STRONG",{});var Iat=s(Kle);v1o=r(Iat,"cvt"),Iat.forEach(t),F1o=r(jAe," \u2014 "),jN=n(jAe,"A",{href:!0});var Nat=s(jN);T1o=r(Nat,"CvtModel"),Nat.forEach(t),M1o=r(jAe," (CvT model)"),jAe.forEach(t),E1o=i($),Dp=n($,"LI",{});var DAe=s(Dp);Zle=n(DAe,"STRONG",{});var qat=s(Zle);C1o=r(qat,"data2vec-audio"),qat.forEach(t),w1o=r(DAe," \u2014 "),DN=n(DAe,"A",{href:!0});var jat=s(DN);A1o=r(jat,"Data2VecAudioModel"),jat.forEach(t),y1o=r(DAe," (Data2VecAudio model)"),DAe.forEach(t),L1o=i($),Gp=n($,"LI",{});var GAe=s(Gp);eie=n(GAe,"STRONG",{});var Dat=s(eie);x1o=r(Dat,"data2vec-text"),Dat.forEach(t),$1o=r(GAe," \u2014 "),GN=n(GAe,"A",{href:!0});var Gat=s(GN);k1o=r(Gat,"Data2VecTextModel"),Gat.forEach(t),S1o=r(GAe," (Data2VecText model)"),GAe.forEach(t),R1o=i($),Op=n($,"LI",{});var OAe=s(Op);oie=n(OAe,"STRONG",{});var Oat=s(oie);P1o=r(Oat,"data2vec-vision"),Oat.forEach(t),B1o=r(OAe," \u2014 "),ON=n(OAe,"A",{href:!0});var Vat=s(ON);I1o=r(Vat,"Data2VecVisionModel"),Vat.forEach(t),N1o=r(OAe," (Data2VecVision model)"),OAe.forEach(t),q1o=i($),Vp=n($,"LI",{});var VAe=s(Vp);rie=n(VAe,"STRONG",{});var Xat=s(rie);j1o=r(Xat,"deberta"),Xat.forEach(t),D1o=r(VAe," \u2014 "),VN=n(VAe,"A",{href:!0});var zat=s(VN);G1o=r(zat,"DebertaModel"),zat.forEach(t),O1o=r(VAe," (DeBERTa model)"),VAe.forEach(t),V1o=i($),Xp=n($,"LI",{});var XAe=s(Xp);tie=n(XAe,"STRONG",{});var Wat=s(tie);X1o=r(Wat,"deberta-v2"),Wat.forEach(t),z1o=r(XAe," \u2014 "),XN=n(XAe,"A",{href:!0});var Qat=s(XN);W1o=r(Qat,"DebertaV2Model"),Qat.forEach(t),Q1o=r(XAe," (DeBERTa-v2 model)"),XAe.forEach(t),H1o=i($),zp=n($,"LI",{});var zAe=s(zp);aie=n(zAe,"STRONG",{});var Hat=s(aie);U1o=r(Hat,"decision_transformer"),Hat.forEach(t),J1o=r(zAe," \u2014 "),zN=n(zAe,"A",{href:!0});var Uat=s(zN);Y1o=r(Uat,"DecisionTransformerModel"),Uat.forEach(t),K1o=r(zAe," (Decision Transformer model)"),zAe.forEach(t),Z1o=i($),Wp=n($,"LI",{});var WAe=s(Wp);nie=n(WAe,"STRONG",{});var Jat=s(nie);ebo=r(Jat,"deit"),Jat.forEach(t),obo=r(WAe," \u2014 "),WN=n(WAe,"A",{href:!0});var Yat=s(WN);rbo=r(Yat,"DeiTModel"),Yat.forEach(t),tbo=r(WAe," (DeiT model)"),WAe.forEach(t),abo=i($),Qp=n($,"LI",{});var QAe=s(Qp);sie=n(QAe,"STRONG",{});var Kat=s(sie);nbo=r(Kat,"detr"),Kat.forEach(t),sbo=r(QAe," \u2014 "),QN=n(QAe,"A",{href:!0});var Zat=s(QN);lbo=r(Zat,"DetrModel"),Zat.forEach(t),ibo=r(QAe," (DETR model)"),QAe.forEach(t),dbo=i($),Hp=n($,"LI",{});var HAe=s(Hp);lie=n(HAe,"STRONG",{});var ent=s(lie);cbo=r(ent,"distilbert"),ent.forEach(t),fbo=r(HAe," \u2014 "),HN=n(HAe,"A",{href:!0});var ont=s(HN);mbo=r(ont,"DistilBertModel"),ont.forEach(t),gbo=r(HAe," (DistilBERT model)"),HAe.forEach(t),hbo=i($),Up=n($,"LI",{});var UAe=s(Up);iie=n(UAe,"STRONG",{});var rnt=s(iie);pbo=r(rnt,"dpr"),rnt.forEach(t),ubo=r(UAe," \u2014 "),UN=n(UAe,"A",{href:!0});var tnt=s(UN);_bo=r(tnt,"DPRQuestionEncoder"),tnt.forEach(t),bbo=r(UAe," (DPR model)"),UAe.forEach(t),vbo=i($),Jp=n($,"LI",{});var JAe=s(Jp);die=n(JAe,"STRONG",{});var ant=s(die);Fbo=r(ant,"dpt"),ant.forEach(t),Tbo=r(JAe," \u2014 "),JN=n(JAe,"A",{href:!0});var nnt=s(JN);Mbo=r(nnt,"DPTModel"),nnt.forEach(t),Ebo=r(JAe," (DPT model)"),JAe.forEach(t),Cbo=i($),Yp=n($,"LI",{});var YAe=s(Yp);cie=n(YAe,"STRONG",{});var snt=s(cie);wbo=r(snt,"electra"),snt.forEach(t),Abo=r(YAe," \u2014 "),YN=n(YAe,"A",{href:!0});var lnt=s(YN);ybo=r(lnt,"ElectraModel"),lnt.forEach(t),Lbo=r(YAe," (ELECTRA model)"),YAe.forEach(t),xbo=i($),Kp=n($,"LI",{});var KAe=s(Kp);fie=n(KAe,"STRONG",{});var int=s(fie);$bo=r(int,"flaubert"),int.forEach(t),kbo=r(KAe," \u2014 "),KN=n(KAe,"A",{href:!0});var dnt=s(KN);Sbo=r(dnt,"FlaubertModel"),dnt.forEach(t),Rbo=r(KAe," (FlauBERT model)"),KAe.forEach(t),Pbo=i($),Zp=n($,"LI",{});var ZAe=s(Zp);mie=n(ZAe,"STRONG",{});var cnt=s(mie);Bbo=r(cnt,"flava"),cnt.forEach(t),Ibo=r(ZAe," \u2014 "),ZN=n(ZAe,"A",{href:!0});var fnt=s(ZN);Nbo=r(fnt,"FlavaModel"),fnt.forEach(t),qbo=r(ZAe," (FLAVA model)"),ZAe.forEach(t),jbo=i($),eu=n($,"LI",{});var eye=s(eu);gie=n(eye,"STRONG",{});var mnt=s(gie);Dbo=r(mnt,"fnet"),mnt.forEach(t),Gbo=r(eye," \u2014 "),eq=n(eye,"A",{href:!0});var gnt=s(eq);Obo=r(gnt,"FNetModel"),gnt.forEach(t),Vbo=r(eye," (FNet model)"),eye.forEach(t),Xbo=i($),ou=n($,"LI",{});var oye=s(ou);hie=n(oye,"STRONG",{});var hnt=s(hie);zbo=r(hnt,"fsmt"),hnt.forEach(t),Wbo=r(oye," \u2014 "),oq=n(oye,"A",{href:!0});var pnt=s(oq);Qbo=r(pnt,"FSMTModel"),pnt.forEach(t),Hbo=r(oye," (FairSeq Machine-Translation model)"),oye.forEach(t),Ubo=i($),Ds=n($,"LI",{});var Ak=s(Ds);pie=n(Ak,"STRONG",{});var unt=s(pie);Jbo=r(unt,"funnel"),unt.forEach(t),Ybo=r(Ak," \u2014 "),rq=n(Ak,"A",{href:!0});var _nt=s(rq);Kbo=r(_nt,"FunnelModel"),_nt.forEach(t),Zbo=r(Ak," or "),tq=n(Ak,"A",{href:!0});var bnt=s(tq);evo=r(bnt,"FunnelBaseModel"),bnt.forEach(t),ovo=r(Ak," (Funnel Transformer model)"),Ak.forEach(t),rvo=i($),ru=n($,"LI",{});var rye=s(ru);uie=n(rye,"STRONG",{});var vnt=s(uie);tvo=r(vnt,"glpn"),vnt.forEach(t),avo=r(rye," \u2014 "),aq=n(rye,"A",{href:!0});var Fnt=s(aq);nvo=r(Fnt,"GLPNModel"),Fnt.forEach(t),svo=r(rye," (GLPN model)"),rye.forEach(t),lvo=i($),tu=n($,"LI",{});var tye=s(tu);_ie=n(tye,"STRONG",{});var Tnt=s(_ie);ivo=r(Tnt,"gpt2"),Tnt.forEach(t),dvo=r(tye," \u2014 "),nq=n(tye,"A",{href:!0});var Mnt=s(nq);cvo=r(Mnt,"GPT2Model"),Mnt.forEach(t),fvo=r(tye," (OpenAI GPT-2 model)"),tye.forEach(t),mvo=i($),au=n($,"LI",{});var aye=s(au);bie=n(aye,"STRONG",{});var Ent=s(bie);gvo=r(Ent,"gpt_neo"),Ent.forEach(t),hvo=r(aye," \u2014 "),sq=n(aye,"A",{href:!0});var Cnt=s(sq);pvo=r(Cnt,"GPTNeoModel"),Cnt.forEach(t),uvo=r(aye," (GPT Neo model)"),aye.forEach(t),_vo=i($),nu=n($,"LI",{});var nye=s(nu);vie=n(nye,"STRONG",{});var wnt=s(vie);bvo=r(wnt,"gpt_neox"),wnt.forEach(t),vvo=r(nye," \u2014 "),lq=n(nye,"A",{href:!0});var Ant=s(lq);Fvo=r(Ant,"GPTNeoXModel"),Ant.forEach(t),Tvo=r(nye," (GPT NeoX model)"),nye.forEach(t),Mvo=i($),su=n($,"LI",{});var sye=s(su);Fie=n(sye,"STRONG",{});var ynt=s(Fie);Evo=r(ynt,"gptj"),ynt.forEach(t),Cvo=r(sye," \u2014 "),iq=n(sye,"A",{href:!0});var Lnt=s(iq);wvo=r(Lnt,"GPTJModel"),Lnt.forEach(t),Avo=r(sye," (GPT-J model)"),sye.forEach(t),yvo=i($),lu=n($,"LI",{});var lye=s(lu);Tie=n(lye,"STRONG",{});var xnt=s(Tie);Lvo=r(xnt,"hubert"),xnt.forEach(t),xvo=r(lye," \u2014 "),dq=n(lye,"A",{href:!0});var $nt=s(dq);$vo=r($nt,"HubertModel"),$nt.forEach(t),kvo=r(lye," (Hubert model)"),lye.forEach(t),Svo=i($),iu=n($,"LI",{});var iye=s(iu);Mie=n(iye,"STRONG",{});var knt=s(Mie);Rvo=r(knt,"ibert"),knt.forEach(t),Pvo=r(iye," \u2014 "),cq=n(iye,"A",{href:!0});var Snt=s(cq);Bvo=r(Snt,"IBertModel"),Snt.forEach(t),Ivo=r(iye," (I-BERT model)"),iye.forEach(t),Nvo=i($),du=n($,"LI",{});var dye=s(du);Eie=n(dye,"STRONG",{});var Rnt=s(Eie);qvo=r(Rnt,"imagegpt"),Rnt.forEach(t),jvo=r(dye," \u2014 "),fq=n(dye,"A",{href:!0});var Pnt=s(fq);Dvo=r(Pnt,"ImageGPTModel"),Pnt.forEach(t),Gvo=r(dye," (ImageGPT model)"),dye.forEach(t),Ovo=i($),cu=n($,"LI",{});var cye=s(cu);Cie=n(cye,"STRONG",{});var Bnt=s(Cie);Vvo=r(Bnt,"layoutlm"),Bnt.forEach(t),Xvo=r(cye," \u2014 "),mq=n(cye,"A",{href:!0});var Int=s(mq);zvo=r(Int,"LayoutLMModel"),Int.forEach(t),Wvo=r(cye," (LayoutLM model)"),cye.forEach(t),Qvo=i($),fu=n($,"LI",{});var fye=s(fu);wie=n(fye,"STRONG",{});var Nnt=s(wie);Hvo=r(Nnt,"layoutlmv2"),Nnt.forEach(t),Uvo=r(fye," \u2014 "),gq=n(fye,"A",{href:!0});var qnt=s(gq);Jvo=r(qnt,"LayoutLMv2Model"),qnt.forEach(t),Yvo=r(fye," (LayoutLMv2 model)"),fye.forEach(t),Kvo=i($),mu=n($,"LI",{});var mye=s(mu);Aie=n(mye,"STRONG",{});var jnt=s(Aie);Zvo=r(jnt,"layoutlmv3"),jnt.forEach(t),eFo=r(mye," \u2014 "),hq=n(mye,"A",{href:!0});var Dnt=s(hq);oFo=r(Dnt,"LayoutLMv3Model"),Dnt.forEach(t),rFo=r(mye," (LayoutLMv3 model)"),mye.forEach(t),tFo=i($),gu=n($,"LI",{});var gye=s(gu);yie=n(gye,"STRONG",{});var Gnt=s(yie);aFo=r(Gnt,"led"),Gnt.forEach(t),nFo=r(gye," \u2014 "),pq=n(gye,"A",{href:!0});var Ont=s(pq);sFo=r(Ont,"LEDModel"),Ont.forEach(t),lFo=r(gye," (LED model)"),gye.forEach(t),iFo=i($),hu=n($,"LI",{});var hye=s(hu);Lie=n(hye,"STRONG",{});var Vnt=s(Lie);dFo=r(Vnt,"levit"),Vnt.forEach(t),cFo=r(hye," \u2014 "),uq=n(hye,"A",{href:!0});var Xnt=s(uq);fFo=r(Xnt,"LevitModel"),Xnt.forEach(t),mFo=r(hye," (LeViT model)"),hye.forEach(t),gFo=i($),pu=n($,"LI",{});var pye=s(pu);xie=n(pye,"STRONG",{});var znt=s(xie);hFo=r(znt,"longformer"),znt.forEach(t),pFo=r(pye," \u2014 "),_q=n(pye,"A",{href:!0});var Wnt=s(_q);uFo=r(Wnt,"LongformerModel"),Wnt.forEach(t),_Fo=r(pye," (Longformer model)"),pye.forEach(t),bFo=i($),uu=n($,"LI",{});var uye=s(uu);$ie=n(uye,"STRONG",{});var Qnt=s($ie);vFo=r(Qnt,"luke"),Qnt.forEach(t),FFo=r(uye," \u2014 "),bq=n(uye,"A",{href:!0});var Hnt=s(bq);TFo=r(Hnt,"LukeModel"),Hnt.forEach(t),MFo=r(uye," (LUKE model)"),uye.forEach(t),EFo=i($),_u=n($,"LI",{});var _ye=s(_u);kie=n(_ye,"STRONG",{});var Unt=s(kie);CFo=r(Unt,"lxmert"),Unt.forEach(t),wFo=r(_ye," \u2014 "),vq=n(_ye,"A",{href:!0});var Jnt=s(vq);AFo=r(Jnt,"LxmertModel"),Jnt.forEach(t),yFo=r(_ye," (LXMERT model)"),_ye.forEach(t),LFo=i($),bu=n($,"LI",{});var bye=s(bu);Sie=n(bye,"STRONG",{});var Ynt=s(Sie);xFo=r(Ynt,"m2m_100"),Ynt.forEach(t),$Fo=r(bye," \u2014 "),Fq=n(bye,"A",{href:!0});var Knt=s(Fq);kFo=r(Knt,"M2M100Model"),Knt.forEach(t),SFo=r(bye," (M2M100 model)"),bye.forEach(t),RFo=i($),vu=n($,"LI",{});var vye=s(vu);Rie=n(vye,"STRONG",{});var Znt=s(Rie);PFo=r(Znt,"marian"),Znt.forEach(t),BFo=r(vye," \u2014 "),Tq=n(vye,"A",{href:!0});var est=s(Tq);IFo=r(est,"MarianModel"),est.forEach(t),NFo=r(vye," (Marian model)"),vye.forEach(t),qFo=i($),Fu=n($,"LI",{});var Fye=s(Fu);Pie=n(Fye,"STRONG",{});var ost=s(Pie);jFo=r(ost,"maskformer"),ost.forEach(t),DFo=r(Fye," \u2014 "),Mq=n(Fye,"A",{href:!0});var rst=s(Mq);GFo=r(rst,"MaskFormerModel"),rst.forEach(t),OFo=r(Fye," (MaskFormer model)"),Fye.forEach(t),VFo=i($),Tu=n($,"LI",{});var Tye=s(Tu);Bie=n(Tye,"STRONG",{});var tst=s(Bie);XFo=r(tst,"mbart"),tst.forEach(t),zFo=r(Tye," \u2014 "),Eq=n(Tye,"A",{href:!0});var ast=s(Eq);WFo=r(ast,"MBartModel"),ast.forEach(t),QFo=r(Tye," (mBART model)"),Tye.forEach(t),HFo=i($),Mu=n($,"LI",{});var Mye=s(Mu);Iie=n(Mye,"STRONG",{});var nst=s(Iie);UFo=r(nst,"mctct"),nst.forEach(t),JFo=r(Mye," \u2014 "),Cq=n(Mye,"A",{href:!0});var sst=s(Cq);YFo=r(sst,"MCTCTModel"),sst.forEach(t),KFo=r(Mye," (M-CTC-T model)"),Mye.forEach(t),ZFo=i($),Eu=n($,"LI",{});var Eye=s(Eu);Nie=n(Eye,"STRONG",{});var lst=s(Nie);e6o=r(lst,"megatron-bert"),lst.forEach(t),o6o=r(Eye," \u2014 "),wq=n(Eye,"A",{href:!0});var ist=s(wq);r6o=r(ist,"MegatronBertModel"),ist.forEach(t),t6o=r(Eye," (Megatron-BERT model)"),Eye.forEach(t),a6o=i($),Cu=n($,"LI",{});var Cye=s(Cu);qie=n(Cye,"STRONG",{});var dst=s(qie);n6o=r(dst,"mobilebert"),dst.forEach(t),s6o=r(Cye," \u2014 "),Aq=n(Cye,"A",{href:!0});var cst=s(Aq);l6o=r(cst,"MobileBertModel"),cst.forEach(t),i6o=r(Cye," (MobileBERT model)"),Cye.forEach(t),d6o=i($),wu=n($,"LI",{});var wye=s(wu);jie=n(wye,"STRONG",{});var fst=s(jie);c6o=r(fst,"mpnet"),fst.forEach(t),f6o=r(wye," \u2014 "),yq=n(wye,"A",{href:!0});var mst=s(yq);m6o=r(mst,"MPNetModel"),mst.forEach(t),g6o=r(wye," (MPNet model)"),wye.forEach(t),h6o=i($),Au=n($,"LI",{});var Aye=s(Au);Die=n(Aye,"STRONG",{});var gst=s(Die);p6o=r(gst,"mt5"),gst.forEach(t),u6o=r(Aye," \u2014 "),Lq=n(Aye,"A",{href:!0});var hst=s(Lq);_6o=r(hst,"MT5Model"),hst.forEach(t),b6o=r(Aye," (MT5 model)"),Aye.forEach(t),v6o=i($),yu=n($,"LI",{});var yye=s(yu);Gie=n(yye,"STRONG",{});var pst=s(Gie);F6o=r(pst,"nystromformer"),pst.forEach(t),T6o=r(yye," \u2014 "),xq=n(yye,"A",{href:!0});var ust=s(xq);M6o=r(ust,"NystromformerModel"),ust.forEach(t),E6o=r(yye," (Nystr\xF6mformer model)"),yye.forEach(t),C6o=i($),Lu=n($,"LI",{});var Lye=s(Lu);Oie=n(Lye,"STRONG",{});var _st=s(Oie);w6o=r(_st,"openai-gpt"),_st.forEach(t),A6o=r(Lye," \u2014 "),$q=n(Lye,"A",{href:!0});var bst=s($q);y6o=r(bst,"OpenAIGPTModel"),bst.forEach(t),L6o=r(Lye," (OpenAI GPT model)"),Lye.forEach(t),x6o=i($),xu=n($,"LI",{});var xye=s(xu);Vie=n(xye,"STRONG",{});var vst=s(Vie);$6o=r(vst,"opt"),vst.forEach(t),k6o=r(xye," \u2014 "),kq=n(xye,"A",{href:!0});var Fst=s(kq);S6o=r(Fst,"OPTModel"),Fst.forEach(t),R6o=r(xye," (OPT model)"),xye.forEach(t),P6o=i($),$u=n($,"LI",{});var $ye=s($u);Xie=n($ye,"STRONG",{});var Tst=s(Xie);B6o=r(Tst,"pegasus"),Tst.forEach(t),I6o=r($ye," \u2014 "),Sq=n($ye,"A",{href:!0});var Mst=s(Sq);N6o=r(Mst,"PegasusModel"),Mst.forEach(t),q6o=r($ye," (Pegasus model)"),$ye.forEach(t),j6o=i($),ku=n($,"LI",{});var kye=s(ku);zie=n(kye,"STRONG",{});var Est=s(zie);D6o=r(Est,"perceiver"),Est.forEach(t),G6o=r(kye," \u2014 "),Rq=n(kye,"A",{href:!0});var Cst=s(Rq);O6o=r(Cst,"PerceiverModel"),Cst.forEach(t),V6o=r(kye," (Perceiver model)"),kye.forEach(t),X6o=i($),Su=n($,"LI",{});var Sye=s(Su);Wie=n(Sye,"STRONG",{});var wst=s(Wie);z6o=r(wst,"plbart"),wst.forEach(t),W6o=r(Sye," \u2014 "),Pq=n(Sye,"A",{href:!0});var Ast=s(Pq);Q6o=r(Ast,"PLBartModel"),Ast.forEach(t),H6o=r(Sye," (PLBart model)"),Sye.forEach(t),U6o=i($),Ru=n($,"LI",{});var Rye=s(Ru);Qie=n(Rye,"STRONG",{});var yst=s(Qie);J6o=r(yst,"poolformer"),yst.forEach(t),Y6o=r(Rye," \u2014 "),Bq=n(Rye,"A",{href:!0});var Lst=s(Bq);K6o=r(Lst,"PoolFormerModel"),Lst.forEach(t),Z6o=r(Rye," (PoolFormer model)"),Rye.forEach(t),eTo=i($),Pu=n($,"LI",{});var Pye=s(Pu);Hie=n(Pye,"STRONG",{});var xst=s(Hie);oTo=r(xst,"prophetnet"),xst.forEach(t),rTo=r(Pye," \u2014 "),Iq=n(Pye,"A",{href:!0});var $st=s(Iq);tTo=r($st,"ProphetNetModel"),$st.forEach(t),aTo=r(Pye," (ProphetNet model)"),Pye.forEach(t),nTo=i($),Bu=n($,"LI",{});var Bye=s(Bu);Uie=n(Bye,"STRONG",{});var kst=s(Uie);sTo=r(kst,"qdqbert"),kst.forEach(t),lTo=r(Bye," \u2014 "),Nq=n(Bye,"A",{href:!0});var Sst=s(Nq);iTo=r(Sst,"QDQBertModel"),Sst.forEach(t),dTo=r(Bye," (QDQBert model)"),Bye.forEach(t),cTo=i($),Iu=n($,"LI",{});var Iye=s(Iu);Jie=n(Iye,"STRONG",{});var Rst=s(Jie);fTo=r(Rst,"reformer"),Rst.forEach(t),mTo=r(Iye," \u2014 "),qq=n(Iye,"A",{href:!0});var Pst=s(qq);gTo=r(Pst,"ReformerModel"),Pst.forEach(t),hTo=r(Iye," (Reformer model)"),Iye.forEach(t),pTo=i($),Nu=n($,"LI",{});var Nye=s(Nu);Yie=n(Nye,"STRONG",{});var Bst=s(Yie);uTo=r(Bst,"regnet"),Bst.forEach(t),_To=r(Nye," \u2014 "),jq=n(Nye,"A",{href:!0});var Ist=s(jq);bTo=r(Ist,"RegNetModel"),Ist.forEach(t),vTo=r(Nye," (RegNet model)"),Nye.forEach(t),FTo=i($),qu=n($,"LI",{});var qye=s(qu);Kie=n(qye,"STRONG",{});var Nst=s(Kie);TTo=r(Nst,"rembert"),Nst.forEach(t),MTo=r(qye," \u2014 "),Dq=n(qye,"A",{href:!0});var qst=s(Dq);ETo=r(qst,"RemBertModel"),qst.forEach(t),CTo=r(qye," (RemBERT model)"),qye.forEach(t),wTo=i($),ju=n($,"LI",{});var jye=s(ju);Zie=n(jye,"STRONG",{});var jst=s(Zie);ATo=r(jst,"resnet"),jst.forEach(t),yTo=r(jye," \u2014 "),Gq=n(jye,"A",{href:!0});var Dst=s(Gq);LTo=r(Dst,"ResNetModel"),Dst.forEach(t),xTo=r(jye," (ResNet model)"),jye.forEach(t),$To=i($),Du=n($,"LI",{});var Dye=s(Du);ede=n(Dye,"STRONG",{});var Gst=s(ede);kTo=r(Gst,"retribert"),Gst.forEach(t),STo=r(Dye," \u2014 "),Oq=n(Dye,"A",{href:!0});var Ost=s(Oq);RTo=r(Ost,"RetriBertModel"),Ost.forEach(t),PTo=r(Dye," (RetriBERT model)"),Dye.forEach(t),BTo=i($),Gu=n($,"LI",{});var Gye=s(Gu);ode=n(Gye,"STRONG",{});var Vst=s(ode);ITo=r(Vst,"roberta"),Vst.forEach(t),NTo=r(Gye," \u2014 "),Vq=n(Gye,"A",{href:!0});var Xst=s(Vq);qTo=r(Xst,"RobertaModel"),Xst.forEach(t),jTo=r(Gye," (RoBERTa model)"),Gye.forEach(t),DTo=i($),Ou=n($,"LI",{});var Oye=s(Ou);rde=n(Oye,"STRONG",{});var zst=s(rde);GTo=r(zst,"roformer"),zst.forEach(t),OTo=r(Oye," \u2014 "),Xq=n(Oye,"A",{href:!0});var Wst=s(Xq);VTo=r(Wst,"RoFormerModel"),Wst.forEach(t),XTo=r(Oye," (RoFormer model)"),Oye.forEach(t),zTo=i($),Vu=n($,"LI",{});var Vye=s(Vu);tde=n(Vye,"STRONG",{});var Qst=s(tde);WTo=r(Qst,"segformer"),Qst.forEach(t),QTo=r(Vye," \u2014 "),zq=n(Vye,"A",{href:!0});var Hst=s(zq);HTo=r(Hst,"SegformerModel"),Hst.forEach(t),UTo=r(Vye," (SegFormer model)"),Vye.forEach(t),JTo=i($),Xu=n($,"LI",{});var Xye=s(Xu);ade=n(Xye,"STRONG",{});var Ust=s(ade);YTo=r(Ust,"sew"),Ust.forEach(t),KTo=r(Xye," \u2014 "),Wq=n(Xye,"A",{href:!0});var Jst=s(Wq);ZTo=r(Jst,"SEWModel"),Jst.forEach(t),e7o=r(Xye," (SEW model)"),Xye.forEach(t),o7o=i($),zu=n($,"LI",{});var zye=s(zu);nde=n(zye,"STRONG",{});var Yst=s(nde);r7o=r(Yst,"sew-d"),Yst.forEach(t),t7o=r(zye," \u2014 "),Qq=n(zye,"A",{href:!0});var Kst=s(Qq);a7o=r(Kst,"SEWDModel"),Kst.forEach(t),n7o=r(zye," (SEW-D model)"),zye.forEach(t),s7o=i($),Wu=n($,"LI",{});var Wye=s(Wu);sde=n(Wye,"STRONG",{});var Zst=s(sde);l7o=r(Zst,"speech_to_text"),Zst.forEach(t),i7o=r(Wye," \u2014 "),Hq=n(Wye,"A",{href:!0});var elt=s(Hq);d7o=r(elt,"Speech2TextModel"),elt.forEach(t),c7o=r(Wye," (Speech2Text model)"),Wye.forEach(t),f7o=i($),Qu=n($,"LI",{});var Qye=s(Qu);lde=n(Qye,"STRONG",{});var olt=s(lde);m7o=r(olt,"splinter"),olt.forEach(t),g7o=r(Qye," \u2014 "),Uq=n(Qye,"A",{href:!0});var rlt=s(Uq);h7o=r(rlt,"SplinterModel"),rlt.forEach(t),p7o=r(Qye," (Splinter model)"),Qye.forEach(t),u7o=i($),Hu=n($,"LI",{});var Hye=s(Hu);ide=n(Hye,"STRONG",{});var tlt=s(ide);_7o=r(tlt,"squeezebert"),tlt.forEach(t),b7o=r(Hye," \u2014 "),Jq=n(Hye,"A",{href:!0});var alt=s(Jq);v7o=r(alt,"SqueezeBertModel"),alt.forEach(t),F7o=r(Hye," (SqueezeBERT model)"),Hye.forEach(t),T7o=i($),Uu=n($,"LI",{});var Uye=s(Uu);dde=n(Uye,"STRONG",{});var nlt=s(dde);M7o=r(nlt,"swin"),nlt.forEach(t),E7o=r(Uye," \u2014 "),Yq=n(Uye,"A",{href:!0});var slt=s(Yq);C7o=r(slt,"SwinModel"),slt.forEach(t),w7o=r(Uye," (Swin Transformer model)"),Uye.forEach(t),A7o=i($),Ju=n($,"LI",{});var Jye=s(Ju);cde=n(Jye,"STRONG",{});var llt=s(cde);y7o=r(llt,"t5"),llt.forEach(t),L7o=r(Jye," \u2014 "),Kq=n(Jye,"A",{href:!0});var ilt=s(Kq);x7o=r(ilt,"T5Model"),ilt.forEach(t),$7o=r(Jye," (T5 model)"),Jye.forEach(t),k7o=i($),Yu=n($,"LI",{});var Yye=s(Yu);fde=n(Yye,"STRONG",{});var dlt=s(fde);S7o=r(dlt,"tapas"),dlt.forEach(t),R7o=r(Yye," \u2014 "),Zq=n(Yye,"A",{href:!0});var clt=s(Zq);P7o=r(clt,"TapasModel"),clt.forEach(t),B7o=r(Yye," (TAPAS model)"),Yye.forEach(t),I7o=i($),Ku=n($,"LI",{});var Kye=s(Ku);mde=n(Kye,"STRONG",{});var flt=s(mde);N7o=r(flt,"trajectory_transformer"),flt.forEach(t),q7o=r(Kye," \u2014 "),ej=n(Kye,"A",{href:!0});var mlt=s(ej);j7o=r(mlt,"TrajectoryTransformerModel"),mlt.forEach(t),D7o=r(Kye," (Trajectory Transformer model)"),Kye.forEach(t),G7o=i($),Zu=n($,"LI",{});var Zye=s(Zu);gde=n(Zye,"STRONG",{});var glt=s(gde);O7o=r(glt,"transfo-xl"),glt.forEach(t),V7o=r(Zye," \u2014 "),oj=n(Zye,"A",{href:!0});var hlt=s(oj);X7o=r(hlt,"TransfoXLModel"),hlt.forEach(t),z7o=r(Zye," (Transformer-XL model)"),Zye.forEach(t),W7o=i($),e_=n($,"LI",{});var eLe=s(e_);hde=n(eLe,"STRONG",{});var plt=s(hde);Q7o=r(plt,"unispeech"),plt.forEach(t),H7o=r(eLe," \u2014 "),rj=n(eLe,"A",{href:!0});var ult=s(rj);U7o=r(ult,"UniSpeechModel"),ult.forEach(t),J7o=r(eLe," (UniSpeech model)"),eLe.forEach(t),Y7o=i($),o_=n($,"LI",{});var oLe=s(o_);pde=n(oLe,"STRONG",{});var _lt=s(pde);K7o=r(_lt,"unispeech-sat"),_lt.forEach(t),Z7o=r(oLe," \u2014 "),tj=n(oLe,"A",{href:!0});var blt=s(tj);e8o=r(blt,"UniSpeechSatModel"),blt.forEach(t),o8o=r(oLe," (UniSpeechSat model)"),oLe.forEach(t),r8o=i($),r_=n($,"LI",{});var rLe=s(r_);ude=n(rLe,"STRONG",{});var vlt=s(ude);t8o=r(vlt,"van"),vlt.forEach(t),a8o=r(rLe," \u2014 "),aj=n(rLe,"A",{href:!0});var Flt=s(aj);n8o=r(Flt,"VanModel"),Flt.forEach(t),s8o=r(rLe," (VAN model)"),rLe.forEach(t),l8o=i($),t_=n($,"LI",{});var tLe=s(t_);_de=n(tLe,"STRONG",{});var Tlt=s(_de);i8o=r(Tlt,"vilt"),Tlt.forEach(t),d8o=r(tLe," \u2014 "),nj=n(tLe,"A",{href:!0});var Mlt=s(nj);c8o=r(Mlt,"ViltModel"),Mlt.forEach(t),f8o=r(tLe," (ViLT model)"),tLe.forEach(t),m8o=i($),a_=n($,"LI",{});var aLe=s(a_);bde=n(aLe,"STRONG",{});var Elt=s(bde);g8o=r(Elt,"vision-text-dual-encoder"),Elt.forEach(t),h8o=r(aLe," \u2014 "),sj=n(aLe,"A",{href:!0});var Clt=s(sj);p8o=r(Clt,"VisionTextDualEncoderModel"),Clt.forEach(t),u8o=r(aLe," (VisionTextDualEncoder model)"),aLe.forEach(t),_8o=i($),n_=n($,"LI",{});var nLe=s(n_);vde=n(nLe,"STRONG",{});var wlt=s(vde);b8o=r(wlt,"visual_bert"),wlt.forEach(t),v8o=r(nLe," \u2014 "),lj=n(nLe,"A",{href:!0});var Alt=s(lj);F8o=r(Alt,"VisualBertModel"),Alt.forEach(t),T8o=r(nLe," (VisualBERT model)"),nLe.forEach(t),M8o=i($),s_=n($,"LI",{});var sLe=s(s_);Fde=n(sLe,"STRONG",{});var ylt=s(Fde);E8o=r(ylt,"vit"),ylt.forEach(t),C8o=r(sLe," \u2014 "),ij=n(sLe,"A",{href:!0});var Llt=s(ij);w8o=r(Llt,"ViTModel"),Llt.forEach(t),A8o=r(sLe," (ViT model)"),sLe.forEach(t),y8o=i($),l_=n($,"LI",{});var lLe=s(l_);Tde=n(lLe,"STRONG",{});var xlt=s(Tde);L8o=r(xlt,"vit_mae"),xlt.forEach(t),x8o=r(lLe," \u2014 "),dj=n(lLe,"A",{href:!0});var $lt=s(dj);$8o=r($lt,"ViTMAEModel"),$lt.forEach(t),k8o=r(lLe," (ViTMAE model)"),lLe.forEach(t),S8o=i($),i_=n($,"LI",{});var iLe=s(i_);Mde=n(iLe,"STRONG",{});var klt=s(Mde);R8o=r(klt,"wav2vec2"),klt.forEach(t),P8o=r(iLe," \u2014 "),cj=n(iLe,"A",{href:!0});var Slt=s(cj);B8o=r(Slt,"Wav2Vec2Model"),Slt.forEach(t),I8o=r(iLe," (Wav2Vec2 model)"),iLe.forEach(t),N8o=i($),d_=n($,"LI",{});var dLe=s(d_);Ede=n(dLe,"STRONG",{});var Rlt=s(Ede);q8o=r(Rlt,"wav2vec2-conformer"),Rlt.forEach(t),j8o=r(dLe," \u2014 "),fj=n(dLe,"A",{href:!0});var Plt=s(fj);D8o=r(Plt,"Wav2Vec2ConformerModel"),Plt.forEach(t),G8o=r(dLe," (Wav2Vec2-Conformer model)"),dLe.forEach(t),O8o=i($),c_=n($,"LI",{});var cLe=s(c_);Cde=n(cLe,"STRONG",{});var Blt=s(Cde);V8o=r(Blt,"wavlm"),Blt.forEach(t),X8o=r(cLe," \u2014 "),mj=n(cLe,"A",{href:!0});var Ilt=s(mj);z8o=r(Ilt,"WavLMModel"),Ilt.forEach(t),W8o=r(cLe," (WavLM model)"),cLe.forEach(t),Q8o=i($),f_=n($,"LI",{});var fLe=s(f_);wde=n(fLe,"STRONG",{});var Nlt=s(wde);H8o=r(Nlt,"xglm"),Nlt.forEach(t),U8o=r(fLe," \u2014 "),gj=n(fLe,"A",{href:!0});var qlt=s(gj);J8o=r(qlt,"XGLMModel"),qlt.forEach(t),Y8o=r(fLe," (XGLM model)"),fLe.forEach(t),K8o=i($),m_=n($,"LI",{});var mLe=s(m_);Ade=n(mLe,"STRONG",{});var jlt=s(Ade);Z8o=r(jlt,"xlm"),jlt.forEach(t),eMo=r(mLe," \u2014 "),hj=n(mLe,"A",{href:!0});var Dlt=s(hj);oMo=r(Dlt,"XLMModel"),Dlt.forEach(t),rMo=r(mLe," (XLM model)"),mLe.forEach(t),tMo=i($),g_=n($,"LI",{});var gLe=s(g_);yde=n(gLe,"STRONG",{});var Glt=s(yde);aMo=r(Glt,"xlm-prophetnet"),Glt.forEach(t),nMo=r(gLe," \u2014 "),pj=n(gLe,"A",{href:!0});var Olt=s(pj);sMo=r(Olt,"XLMProphetNetModel"),Olt.forEach(t),lMo=r(gLe," (XLM-ProphetNet model)"),gLe.forEach(t),iMo=i($),h_=n($,"LI",{});var hLe=s(h_);Lde=n(hLe,"STRONG",{});var Vlt=s(Lde);dMo=r(Vlt,"xlm-roberta"),Vlt.forEach(t),cMo=r(hLe," \u2014 "),uj=n(hLe,"A",{href:!0});var Xlt=s(uj);fMo=r(Xlt,"XLMRobertaModel"),Xlt.forEach(t),mMo=r(hLe," (XLM-RoBERTa model)"),hLe.forEach(t),gMo=i($),p_=n($,"LI",{});var pLe=s(p_);xde=n(pLe,"STRONG",{});var zlt=s(xde);hMo=r(zlt,"xlm-roberta-xl"),zlt.forEach(t),pMo=r(pLe," \u2014 "),_j=n(pLe,"A",{href:!0});var Wlt=s(_j);uMo=r(Wlt,"XLMRobertaXLModel"),Wlt.forEach(t),_Mo=r(pLe," (XLM-RoBERTa-XL model)"),pLe.forEach(t),bMo=i($),u_=n($,"LI",{});var uLe=s(u_);$de=n(uLe,"STRONG",{});var Qlt=s($de);vMo=r(Qlt,"xlnet"),Qlt.forEach(t),FMo=r(uLe," \u2014 "),bj=n(uLe,"A",{href:!0});var Hlt=s(bj);TMo=r(Hlt,"XLNetModel"),Hlt.forEach(t),MMo=r(uLe," (XLNet model)"),uLe.forEach(t),EMo=i($),__=n($,"LI",{});var _Le=s(__);kde=n(_Le,"STRONG",{});var Ult=s(kde);CMo=r(Ult,"yolos"),Ult.forEach(t),wMo=r(_Le," \u2014 "),vj=n(_Le,"A",{href:!0});var Jlt=s(vj);AMo=r(Jlt,"YolosModel"),Jlt.forEach(t),yMo=r(_Le," (YOLOS model)"),_Le.forEach(t),LMo=i($),b_=n($,"LI",{});var bLe=s(b_);Sde=n(bLe,"STRONG",{});var Ylt=s(Sde);xMo=r(Ylt,"yoso"),Ylt.forEach(t),$Mo=r(bLe," \u2014 "),Fj=n(bLe,"A",{href:!0});var Klt=s(Fj);kMo=r(Klt,"YosoModel"),Klt.forEach(t),SMo=r(bLe," (YOSO model)"),bLe.forEach(t),$.forEach(t),RMo=i(aa),v_=n(aa,"P",{});var vLe=s(v_);PMo=r(vLe,"The model is set in evaluation mode by default using "),Rde=n(vLe,"CODE",{});var Zlt=s(Rde);BMo=r(Zlt,"model.eval()"),Zlt.forEach(t),IMo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(vLe,"CODE",{});var eit=s(Pde);NMo=r(eit,"model.train()"),eit.forEach(t),vLe.forEach(t),qMo=i(aa),T(F_.$$.fragment,aa),aa.forEach(t),Hs.forEach(t),cDe=i(f),Ii=n(f,"H2",{class:!0});var uOe=s(Ii);T_=n(uOe,"A",{id:!0,class:!0,href:!0});var oit=s(T_);Bde=n(oit,"SPAN",{});var rit=s(Bde);T(IA.$$.fragment,rit),rit.forEach(t),oit.forEach(t),jMo=i(uOe),Ide=n(uOe,"SPAN",{});var tit=s(Ide);DMo=r(tit,"AutoModelForPreTraining"),tit.forEach(t),uOe.forEach(t),fDe=i(f),$o=n(f,"DIV",{class:!0});var Us=s($o);T(NA.$$.fragment,Us),GMo=i(Us),Ni=n(Us,"P",{});var Eee=s(Ni);OMo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tj=n(Eee,"A",{href:!0});var ait=s(Tj);VMo=r(ait,"from_pretrained()"),ait.forEach(t),XMo=r(Eee," class method or the "),Mj=n(Eee,"A",{href:!0});var nit=s(Mj);zMo=r(nit,"from_config()"),nit.forEach(t),WMo=r(Eee,` class
method.`),Eee.forEach(t),QMo=i(Us),qA=n(Us,"P",{});var _Oe=s(qA);HMo=r(_Oe,"This class cannot be instantiated directly using "),Nde=n(_Oe,"CODE",{});var sit=s(Nde);UMo=r(sit,"__init__()"),sit.forEach(t),JMo=r(_Oe," (throws an error)."),_Oe.forEach(t),YMo=i(Us),st=n(Us,"DIV",{class:!0});var dw=s(st);T(jA.$$.fragment,dw),KMo=i(dw),qde=n(dw,"P",{});var lit=s(qde);ZMo=r(lit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lit.forEach(t),e4o=i(dw),qi=n(dw,"P",{});var Cee=s(qi);o4o=r(Cee,`Note:
Loading a model from its configuration file does `),jde=n(Cee,"STRONG",{});var iit=s(jde);r4o=r(iit,"not"),iit.forEach(t),t4o=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=n(Cee,"A",{href:!0});var dit=s(Ej);a4o=r(dit,"from_pretrained()"),dit.forEach(t),n4o=r(Cee," to load the model weights."),Cee.forEach(t),s4o=i(dw),T(M_.$$.fragment,dw),dw.forEach(t),l4o=i(Us),Ye=n(Us,"DIV",{class:!0});var na=s(Ye);T(DA.$$.fragment,na),i4o=i(na),Dde=n(na,"P",{});var cit=s(Dde);d4o=r(cit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cit.forEach(t),c4o=i(na),Ra=n(na,"P",{});var cw=s(Ra);f4o=r(cw,"The model class to instantiate is selected based on the "),Gde=n(cw,"CODE",{});var fit=s(Gde);m4o=r(fit,"model_type"),fit.forEach(t),g4o=r(cw,` property of the config object (either
passed as an argument or loaded from `),Ode=n(cw,"CODE",{});var mit=s(Ode);h4o=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),p4o=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(cw,"CODE",{});var git=s(Vde);u4o=r(git,"pretrained_model_name_or_path"),git.forEach(t),_4o=r(cw,":"),cw.forEach(t),b4o=i(na),G=n(na,"UL",{});var O=s(G);E_=n(O,"LI",{});var FLe=s(E_);Xde=n(FLe,"STRONG",{});var hit=s(Xde);v4o=r(hit,"albert"),hit.forEach(t),F4o=r(FLe," \u2014 "),Cj=n(FLe,"A",{href:!0});var pit=s(Cj);T4o=r(pit,"AlbertForPreTraining"),pit.forEach(t),M4o=r(FLe," (ALBERT model)"),FLe.forEach(t),E4o=i(O),C_=n(O,"LI",{});var TLe=s(C_);zde=n(TLe,"STRONG",{});var uit=s(zde);C4o=r(uit,"bart"),uit.forEach(t),w4o=r(TLe," \u2014 "),wj=n(TLe,"A",{href:!0});var _it=s(wj);A4o=r(_it,"BartForConditionalGeneration"),_it.forEach(t),y4o=r(TLe," (BART model)"),TLe.forEach(t),L4o=i(O),w_=n(O,"LI",{});var MLe=s(w_);Wde=n(MLe,"STRONG",{});var bit=s(Wde);x4o=r(bit,"bert"),bit.forEach(t),$4o=r(MLe," \u2014 "),Aj=n(MLe,"A",{href:!0});var vit=s(Aj);k4o=r(vit,"BertForPreTraining"),vit.forEach(t),S4o=r(MLe," (BERT model)"),MLe.forEach(t),R4o=i(O),A_=n(O,"LI",{});var ELe=s(A_);Qde=n(ELe,"STRONG",{});var Fit=s(Qde);P4o=r(Fit,"big_bird"),Fit.forEach(t),B4o=r(ELe," \u2014 "),yj=n(ELe,"A",{href:!0});var Tit=s(yj);I4o=r(Tit,"BigBirdForPreTraining"),Tit.forEach(t),N4o=r(ELe," (BigBird model)"),ELe.forEach(t),q4o=i(O),y_=n(O,"LI",{});var CLe=s(y_);Hde=n(CLe,"STRONG",{});var Mit=s(Hde);j4o=r(Mit,"camembert"),Mit.forEach(t),D4o=r(CLe," \u2014 "),Lj=n(CLe,"A",{href:!0});var Eit=s(Lj);G4o=r(Eit,"CamembertForMaskedLM"),Eit.forEach(t),O4o=r(CLe," (CamemBERT model)"),CLe.forEach(t),V4o=i(O),L_=n(O,"LI",{});var wLe=s(L_);Ude=n(wLe,"STRONG",{});var Cit=s(Ude);X4o=r(Cit,"ctrl"),Cit.forEach(t),z4o=r(wLe," \u2014 "),xj=n(wLe,"A",{href:!0});var wit=s(xj);W4o=r(wit,"CTRLLMHeadModel"),wit.forEach(t),Q4o=r(wLe," (CTRL model)"),wLe.forEach(t),H4o=i(O),x_=n(O,"LI",{});var ALe=s(x_);Jde=n(ALe,"STRONG",{});var Ait=s(Jde);U4o=r(Ait,"data2vec-text"),Ait.forEach(t),J4o=r(ALe," \u2014 "),$j=n(ALe,"A",{href:!0});var yit=s($j);Y4o=r(yit,"Data2VecTextForMaskedLM"),yit.forEach(t),K4o=r(ALe," (Data2VecText model)"),ALe.forEach(t),Z4o=i(O),$_=n(O,"LI",{});var yLe=s($_);Yde=n(yLe,"STRONG",{});var Lit=s(Yde);eEo=r(Lit,"deberta"),Lit.forEach(t),oEo=r(yLe," \u2014 "),kj=n(yLe,"A",{href:!0});var xit=s(kj);rEo=r(xit,"DebertaForMaskedLM"),xit.forEach(t),tEo=r(yLe," (DeBERTa model)"),yLe.forEach(t),aEo=i(O),k_=n(O,"LI",{});var LLe=s(k_);Kde=n(LLe,"STRONG",{});var $it=s(Kde);nEo=r($it,"deberta-v2"),$it.forEach(t),sEo=r(LLe," \u2014 "),Sj=n(LLe,"A",{href:!0});var kit=s(Sj);lEo=r(kit,"DebertaV2ForMaskedLM"),kit.forEach(t),iEo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),dEo=i(O),S_=n(O,"LI",{});var xLe=s(S_);Zde=n(xLe,"STRONG",{});var Sit=s(Zde);cEo=r(Sit,"distilbert"),Sit.forEach(t),fEo=r(xLe," \u2014 "),Rj=n(xLe,"A",{href:!0});var Rit=s(Rj);mEo=r(Rit,"DistilBertForMaskedLM"),Rit.forEach(t),gEo=r(xLe," (DistilBERT model)"),xLe.forEach(t),hEo=i(O),R_=n(O,"LI",{});var $Le=s(R_);ece=n($Le,"STRONG",{});var Pit=s(ece);pEo=r(Pit,"electra"),Pit.forEach(t),uEo=r($Le," \u2014 "),Pj=n($Le,"A",{href:!0});var Bit=s(Pj);_Eo=r(Bit,"ElectraForPreTraining"),Bit.forEach(t),bEo=r($Le," (ELECTRA model)"),$Le.forEach(t),vEo=i(O),P_=n(O,"LI",{});var kLe=s(P_);oce=n(kLe,"STRONG",{});var Iit=s(oce);FEo=r(Iit,"flaubert"),Iit.forEach(t),TEo=r(kLe," \u2014 "),Bj=n(kLe,"A",{href:!0});var Nit=s(Bj);MEo=r(Nit,"FlaubertWithLMHeadModel"),Nit.forEach(t),EEo=r(kLe," (FlauBERT model)"),kLe.forEach(t),CEo=i(O),B_=n(O,"LI",{});var SLe=s(B_);rce=n(SLe,"STRONG",{});var qit=s(rce);wEo=r(qit,"flava"),qit.forEach(t),AEo=r(SLe," \u2014 "),Ij=n(SLe,"A",{href:!0});var jit=s(Ij);yEo=r(jit,"FlavaForPreTraining"),jit.forEach(t),LEo=r(SLe," (FLAVA model)"),SLe.forEach(t),xEo=i(O),I_=n(O,"LI",{});var RLe=s(I_);tce=n(RLe,"STRONG",{});var Dit=s(tce);$Eo=r(Dit,"fnet"),Dit.forEach(t),kEo=r(RLe," \u2014 "),Nj=n(RLe,"A",{href:!0});var Git=s(Nj);SEo=r(Git,"FNetForPreTraining"),Git.forEach(t),REo=r(RLe," (FNet model)"),RLe.forEach(t),PEo=i(O),N_=n(O,"LI",{});var PLe=s(N_);ace=n(PLe,"STRONG",{});var Oit=s(ace);BEo=r(Oit,"fsmt"),Oit.forEach(t),IEo=r(PLe," \u2014 "),qj=n(PLe,"A",{href:!0});var Vit=s(qj);NEo=r(Vit,"FSMTForConditionalGeneration"),Vit.forEach(t),qEo=r(PLe," (FairSeq Machine-Translation model)"),PLe.forEach(t),jEo=i(O),q_=n(O,"LI",{});var BLe=s(q_);nce=n(BLe,"STRONG",{});var Xit=s(nce);DEo=r(Xit,"funnel"),Xit.forEach(t),GEo=r(BLe," \u2014 "),jj=n(BLe,"A",{href:!0});var zit=s(jj);OEo=r(zit,"FunnelForPreTraining"),zit.forEach(t),VEo=r(BLe," (Funnel Transformer model)"),BLe.forEach(t),XEo=i(O),j_=n(O,"LI",{});var ILe=s(j_);sce=n(ILe,"STRONG",{});var Wit=s(sce);zEo=r(Wit,"gpt2"),Wit.forEach(t),WEo=r(ILe," \u2014 "),Dj=n(ILe,"A",{href:!0});var Qit=s(Dj);QEo=r(Qit,"GPT2LMHeadModel"),Qit.forEach(t),HEo=r(ILe," (OpenAI GPT-2 model)"),ILe.forEach(t),UEo=i(O),D_=n(O,"LI",{});var NLe=s(D_);lce=n(NLe,"STRONG",{});var Hit=s(lce);JEo=r(Hit,"ibert"),Hit.forEach(t),YEo=r(NLe," \u2014 "),Gj=n(NLe,"A",{href:!0});var Uit=s(Gj);KEo=r(Uit,"IBertForMaskedLM"),Uit.forEach(t),ZEo=r(NLe," (I-BERT model)"),NLe.forEach(t),eCo=i(O),G_=n(O,"LI",{});var qLe=s(G_);ice=n(qLe,"STRONG",{});var Jit=s(ice);oCo=r(Jit,"layoutlm"),Jit.forEach(t),rCo=r(qLe," \u2014 "),Oj=n(qLe,"A",{href:!0});var Yit=s(Oj);tCo=r(Yit,"LayoutLMForMaskedLM"),Yit.forEach(t),aCo=r(qLe," (LayoutLM model)"),qLe.forEach(t),nCo=i(O),O_=n(O,"LI",{});var jLe=s(O_);dce=n(jLe,"STRONG",{});var Kit=s(dce);sCo=r(Kit,"longformer"),Kit.forEach(t),lCo=r(jLe," \u2014 "),Vj=n(jLe,"A",{href:!0});var Zit=s(Vj);iCo=r(Zit,"LongformerForMaskedLM"),Zit.forEach(t),dCo=r(jLe," (Longformer model)"),jLe.forEach(t),cCo=i(O),V_=n(O,"LI",{});var DLe=s(V_);cce=n(DLe,"STRONG",{});var edt=s(cce);fCo=r(edt,"lxmert"),edt.forEach(t),mCo=r(DLe," \u2014 "),Xj=n(DLe,"A",{href:!0});var odt=s(Xj);gCo=r(odt,"LxmertForPreTraining"),odt.forEach(t),hCo=r(DLe," (LXMERT model)"),DLe.forEach(t),pCo=i(O),X_=n(O,"LI",{});var GLe=s(X_);fce=n(GLe,"STRONG",{});var rdt=s(fce);uCo=r(rdt,"megatron-bert"),rdt.forEach(t),_Co=r(GLe," \u2014 "),zj=n(GLe,"A",{href:!0});var tdt=s(zj);bCo=r(tdt,"MegatronBertForPreTraining"),tdt.forEach(t),vCo=r(GLe," (Megatron-BERT model)"),GLe.forEach(t),FCo=i(O),z_=n(O,"LI",{});var OLe=s(z_);mce=n(OLe,"STRONG",{});var adt=s(mce);TCo=r(adt,"mobilebert"),adt.forEach(t),MCo=r(OLe," \u2014 "),Wj=n(OLe,"A",{href:!0});var ndt=s(Wj);ECo=r(ndt,"MobileBertForPreTraining"),ndt.forEach(t),CCo=r(OLe," (MobileBERT model)"),OLe.forEach(t),wCo=i(O),W_=n(O,"LI",{});var VLe=s(W_);gce=n(VLe,"STRONG",{});var sdt=s(gce);ACo=r(sdt,"mpnet"),sdt.forEach(t),yCo=r(VLe," \u2014 "),Qj=n(VLe,"A",{href:!0});var ldt=s(Qj);LCo=r(ldt,"MPNetForMaskedLM"),ldt.forEach(t),xCo=r(VLe," (MPNet model)"),VLe.forEach(t),$Co=i(O),Q_=n(O,"LI",{});var XLe=s(Q_);hce=n(XLe,"STRONG",{});var idt=s(hce);kCo=r(idt,"openai-gpt"),idt.forEach(t),SCo=r(XLe," \u2014 "),Hj=n(XLe,"A",{href:!0});var ddt=s(Hj);RCo=r(ddt,"OpenAIGPTLMHeadModel"),ddt.forEach(t),PCo=r(XLe," (OpenAI GPT model)"),XLe.forEach(t),BCo=i(O),H_=n(O,"LI",{});var zLe=s(H_);pce=n(zLe,"STRONG",{});var cdt=s(pce);ICo=r(cdt,"retribert"),cdt.forEach(t),NCo=r(zLe," \u2014 "),Uj=n(zLe,"A",{href:!0});var fdt=s(Uj);qCo=r(fdt,"RetriBertModel"),fdt.forEach(t),jCo=r(zLe," (RetriBERT model)"),zLe.forEach(t),DCo=i(O),U_=n(O,"LI",{});var WLe=s(U_);uce=n(WLe,"STRONG",{});var mdt=s(uce);GCo=r(mdt,"roberta"),mdt.forEach(t),OCo=r(WLe," \u2014 "),Jj=n(WLe,"A",{href:!0});var gdt=s(Jj);VCo=r(gdt,"RobertaForMaskedLM"),gdt.forEach(t),XCo=r(WLe," (RoBERTa model)"),WLe.forEach(t),zCo=i(O),J_=n(O,"LI",{});var QLe=s(J_);_ce=n(QLe,"STRONG",{});var hdt=s(_ce);WCo=r(hdt,"splinter"),hdt.forEach(t),QCo=r(QLe," \u2014 "),Yj=n(QLe,"A",{href:!0});var pdt=s(Yj);HCo=r(pdt,"SplinterForPreTraining"),pdt.forEach(t),UCo=r(QLe," (Splinter model)"),QLe.forEach(t),JCo=i(O),Y_=n(O,"LI",{});var HLe=s(Y_);bce=n(HLe,"STRONG",{});var udt=s(bce);YCo=r(udt,"squeezebert"),udt.forEach(t),KCo=r(HLe," \u2014 "),Kj=n(HLe,"A",{href:!0});var _dt=s(Kj);ZCo=r(_dt,"SqueezeBertForMaskedLM"),_dt.forEach(t),e5o=r(HLe," (SqueezeBERT model)"),HLe.forEach(t),o5o=i(O),K_=n(O,"LI",{});var ULe=s(K_);vce=n(ULe,"STRONG",{});var bdt=s(vce);r5o=r(bdt,"t5"),bdt.forEach(t),t5o=r(ULe," \u2014 "),Zj=n(ULe,"A",{href:!0});var vdt=s(Zj);a5o=r(vdt,"T5ForConditionalGeneration"),vdt.forEach(t),n5o=r(ULe," (T5 model)"),ULe.forEach(t),s5o=i(O),Z_=n(O,"LI",{});var JLe=s(Z_);Fce=n(JLe,"STRONG",{});var Fdt=s(Fce);l5o=r(Fdt,"tapas"),Fdt.forEach(t),i5o=r(JLe," \u2014 "),eD=n(JLe,"A",{href:!0});var Tdt=s(eD);d5o=r(Tdt,"TapasForMaskedLM"),Tdt.forEach(t),c5o=r(JLe," (TAPAS model)"),JLe.forEach(t),f5o=i(O),e2=n(O,"LI",{});var YLe=s(e2);Tce=n(YLe,"STRONG",{});var Mdt=s(Tce);m5o=r(Mdt,"transfo-xl"),Mdt.forEach(t),g5o=r(YLe," \u2014 "),oD=n(YLe,"A",{href:!0});var Edt=s(oD);h5o=r(Edt,"TransfoXLLMHeadModel"),Edt.forEach(t),p5o=r(YLe," (Transformer-XL model)"),YLe.forEach(t),u5o=i(O),o2=n(O,"LI",{});var KLe=s(o2);Mce=n(KLe,"STRONG",{});var Cdt=s(Mce);_5o=r(Cdt,"unispeech"),Cdt.forEach(t),b5o=r(KLe," \u2014 "),rD=n(KLe,"A",{href:!0});var wdt=s(rD);v5o=r(wdt,"UniSpeechForPreTraining"),wdt.forEach(t),F5o=r(KLe," (UniSpeech model)"),KLe.forEach(t),T5o=i(O),r2=n(O,"LI",{});var ZLe=s(r2);Ece=n(ZLe,"STRONG",{});var Adt=s(Ece);M5o=r(Adt,"unispeech-sat"),Adt.forEach(t),E5o=r(ZLe," \u2014 "),tD=n(ZLe,"A",{href:!0});var ydt=s(tD);C5o=r(ydt,"UniSpeechSatForPreTraining"),ydt.forEach(t),w5o=r(ZLe," (UniSpeechSat model)"),ZLe.forEach(t),A5o=i(O),t2=n(O,"LI",{});var e9e=s(t2);Cce=n(e9e,"STRONG",{});var Ldt=s(Cce);y5o=r(Ldt,"visual_bert"),Ldt.forEach(t),L5o=r(e9e," \u2014 "),aD=n(e9e,"A",{href:!0});var xdt=s(aD);x5o=r(xdt,"VisualBertForPreTraining"),xdt.forEach(t),$5o=r(e9e," (VisualBERT model)"),e9e.forEach(t),k5o=i(O),a2=n(O,"LI",{});var o9e=s(a2);wce=n(o9e,"STRONG",{});var $dt=s(wce);S5o=r($dt,"vit_mae"),$dt.forEach(t),R5o=r(o9e," \u2014 "),nD=n(o9e,"A",{href:!0});var kdt=s(nD);P5o=r(kdt,"ViTMAEForPreTraining"),kdt.forEach(t),B5o=r(o9e," (ViTMAE model)"),o9e.forEach(t),I5o=i(O),n2=n(O,"LI",{});var r9e=s(n2);Ace=n(r9e,"STRONG",{});var Sdt=s(Ace);N5o=r(Sdt,"wav2vec2"),Sdt.forEach(t),q5o=r(r9e," \u2014 "),sD=n(r9e,"A",{href:!0});var Rdt=s(sD);j5o=r(Rdt,"Wav2Vec2ForPreTraining"),Rdt.forEach(t),D5o=r(r9e," (Wav2Vec2 model)"),r9e.forEach(t),G5o=i(O),s2=n(O,"LI",{});var t9e=s(s2);yce=n(t9e,"STRONG",{});var Pdt=s(yce);O5o=r(Pdt,"wav2vec2-conformer"),Pdt.forEach(t),V5o=r(t9e," \u2014 "),lD=n(t9e,"A",{href:!0});var Bdt=s(lD);X5o=r(Bdt,"Wav2Vec2ConformerForPreTraining"),Bdt.forEach(t),z5o=r(t9e," (Wav2Vec2-Conformer model)"),t9e.forEach(t),W5o=i(O),l2=n(O,"LI",{});var a9e=s(l2);Lce=n(a9e,"STRONG",{});var Idt=s(Lce);Q5o=r(Idt,"xlm"),Idt.forEach(t),H5o=r(a9e," \u2014 "),iD=n(a9e,"A",{href:!0});var Ndt=s(iD);U5o=r(Ndt,"XLMWithLMHeadModel"),Ndt.forEach(t),J5o=r(a9e," (XLM model)"),a9e.forEach(t),Y5o=i(O),i2=n(O,"LI",{});var n9e=s(i2);xce=n(n9e,"STRONG",{});var qdt=s(xce);K5o=r(qdt,"xlm-roberta"),qdt.forEach(t),Z5o=r(n9e," \u2014 "),dD=n(n9e,"A",{href:!0});var jdt=s(dD);e3o=r(jdt,"XLMRobertaForMaskedLM"),jdt.forEach(t),o3o=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),r3o=i(O),d2=n(O,"LI",{});var s9e=s(d2);$ce=n(s9e,"STRONG",{});var Ddt=s($ce);t3o=r(Ddt,"xlm-roberta-xl"),Ddt.forEach(t),a3o=r(s9e," \u2014 "),cD=n(s9e,"A",{href:!0});var Gdt=s(cD);n3o=r(Gdt,"XLMRobertaXLForMaskedLM"),Gdt.forEach(t),s3o=r(s9e," (XLM-RoBERTa-XL model)"),s9e.forEach(t),l3o=i(O),c2=n(O,"LI",{});var l9e=s(c2);kce=n(l9e,"STRONG",{});var Odt=s(kce);i3o=r(Odt,"xlnet"),Odt.forEach(t),d3o=r(l9e," \u2014 "),fD=n(l9e,"A",{href:!0});var Vdt=s(fD);c3o=r(Vdt,"XLNetLMHeadModel"),Vdt.forEach(t),f3o=r(l9e," (XLNet model)"),l9e.forEach(t),O.forEach(t),m3o=i(na),f2=n(na,"P",{});var i9e=s(f2);g3o=r(i9e,"The model is set in evaluation mode by default using "),Sce=n(i9e,"CODE",{});var Xdt=s(Sce);h3o=r(Xdt,"model.eval()"),Xdt.forEach(t),p3o=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(i9e,"CODE",{});var zdt=s(Rce);u3o=r(zdt,"model.train()"),zdt.forEach(t),i9e.forEach(t),_3o=i(na),T(m2.$$.fragment,na),na.forEach(t),Us.forEach(t),mDe=i(f),ji=n(f,"H2",{class:!0});var bOe=s(ji);g2=n(bOe,"A",{id:!0,class:!0,href:!0});var Wdt=s(g2);Pce=n(Wdt,"SPAN",{});var Qdt=s(Pce);T(GA.$$.fragment,Qdt),Qdt.forEach(t),Wdt.forEach(t),b3o=i(bOe),Bce=n(bOe,"SPAN",{});var Hdt=s(Bce);v3o=r(Hdt,"AutoModelForCausalLM"),Hdt.forEach(t),bOe.forEach(t),gDe=i(f),ko=n(f,"DIV",{class:!0});var Js=s(ko);T(OA.$$.fragment,Js),F3o=i(Js),Di=n(Js,"P",{});var wee=s(Di);T3o=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mD=n(wee,"A",{href:!0});var Udt=s(mD);M3o=r(Udt,"from_pretrained()"),Udt.forEach(t),E3o=r(wee," class method or the "),gD=n(wee,"A",{href:!0});var Jdt=s(gD);C3o=r(Jdt,"from_config()"),Jdt.forEach(t),w3o=r(wee,` class
method.`),wee.forEach(t),A3o=i(Js),VA=n(Js,"P",{});var vOe=s(VA);y3o=r(vOe,"This class cannot be instantiated directly using "),Ice=n(vOe,"CODE",{});var Ydt=s(Ice);L3o=r(Ydt,"__init__()"),Ydt.forEach(t),x3o=r(vOe," (throws an error)."),vOe.forEach(t),$3o=i(Js),lt=n(Js,"DIV",{class:!0});var fw=s(lt);T(XA.$$.fragment,fw),k3o=i(fw),Nce=n(fw,"P",{});var Kdt=s(Nce);S3o=r(Kdt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kdt.forEach(t),R3o=i(fw),Gi=n(fw,"P",{});var Aee=s(Gi);P3o=r(Aee,`Note:
Loading a model from its configuration file does `),qce=n(Aee,"STRONG",{});var Zdt=s(qce);B3o=r(Zdt,"not"),Zdt.forEach(t),I3o=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=n(Aee,"A",{href:!0});var ect=s(hD);N3o=r(ect,"from_pretrained()"),ect.forEach(t),q3o=r(Aee," to load the model weights."),Aee.forEach(t),j3o=i(fw),T(h2.$$.fragment,fw),fw.forEach(t),D3o=i(Js),Ke=n(Js,"DIV",{class:!0});var sa=s(Ke);T(zA.$$.fragment,sa),G3o=i(sa),jce=n(sa,"P",{});var oct=s(jce);O3o=r(oct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oct.forEach(t),V3o=i(sa),Pa=n(sa,"P",{});var mw=s(Pa);X3o=r(mw,"The model class to instantiate is selected based on the "),Dce=n(mw,"CODE",{});var rct=s(Dce);z3o=r(rct,"model_type"),rct.forEach(t),W3o=r(mw,` property of the config object (either
passed as an argument or loaded from `),Gce=n(mw,"CODE",{});var tct=s(Gce);Q3o=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),H3o=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(mw,"CODE",{});var act=s(Oce);U3o=r(act,"pretrained_model_name_or_path"),act.forEach(t),J3o=r(mw,":"),mw.forEach(t),Y3o=i(sa),z=n(sa,"UL",{});var Q=s(z);p2=n(Q,"LI",{});var d9e=s(p2);Vce=n(d9e,"STRONG",{});var nct=s(Vce);K3o=r(nct,"bart"),nct.forEach(t),Z3o=r(d9e," \u2014 "),pD=n(d9e,"A",{href:!0});var sct=s(pD);ewo=r(sct,"BartForCausalLM"),sct.forEach(t),owo=r(d9e," (BART model)"),d9e.forEach(t),rwo=i(Q),u2=n(Q,"LI",{});var c9e=s(u2);Xce=n(c9e,"STRONG",{});var lct=s(Xce);two=r(lct,"bert"),lct.forEach(t),awo=r(c9e," \u2014 "),uD=n(c9e,"A",{href:!0});var ict=s(uD);nwo=r(ict,"BertLMHeadModel"),ict.forEach(t),swo=r(c9e," (BERT model)"),c9e.forEach(t),lwo=i(Q),_2=n(Q,"LI",{});var f9e=s(_2);zce=n(f9e,"STRONG",{});var dct=s(zce);iwo=r(dct,"bert-generation"),dct.forEach(t),dwo=r(f9e," \u2014 "),_D=n(f9e,"A",{href:!0});var cct=s(_D);cwo=r(cct,"BertGenerationDecoder"),cct.forEach(t),fwo=r(f9e," (Bert Generation model)"),f9e.forEach(t),mwo=i(Q),b2=n(Q,"LI",{});var m9e=s(b2);Wce=n(m9e,"STRONG",{});var fct=s(Wce);gwo=r(fct,"big_bird"),fct.forEach(t),hwo=r(m9e," \u2014 "),bD=n(m9e,"A",{href:!0});var mct=s(bD);pwo=r(mct,"BigBirdForCausalLM"),mct.forEach(t),uwo=r(m9e," (BigBird model)"),m9e.forEach(t),_wo=i(Q),v2=n(Q,"LI",{});var g9e=s(v2);Qce=n(g9e,"STRONG",{});var gct=s(Qce);bwo=r(gct,"bigbird_pegasus"),gct.forEach(t),vwo=r(g9e," \u2014 "),vD=n(g9e,"A",{href:!0});var hct=s(vD);Fwo=r(hct,"BigBirdPegasusForCausalLM"),hct.forEach(t),Two=r(g9e," (BigBird-Pegasus model)"),g9e.forEach(t),Mwo=i(Q),F2=n(Q,"LI",{});var h9e=s(F2);Hce=n(h9e,"STRONG",{});var pct=s(Hce);Ewo=r(pct,"blenderbot"),pct.forEach(t),Cwo=r(h9e," \u2014 "),FD=n(h9e,"A",{href:!0});var uct=s(FD);wwo=r(uct,"BlenderbotForCausalLM"),uct.forEach(t),Awo=r(h9e," (Blenderbot model)"),h9e.forEach(t),ywo=i(Q),T2=n(Q,"LI",{});var p9e=s(T2);Uce=n(p9e,"STRONG",{});var _ct=s(Uce);Lwo=r(_ct,"blenderbot-small"),_ct.forEach(t),xwo=r(p9e," \u2014 "),TD=n(p9e,"A",{href:!0});var bct=s(TD);$wo=r(bct,"BlenderbotSmallForCausalLM"),bct.forEach(t),kwo=r(p9e," (BlenderbotSmall model)"),p9e.forEach(t),Swo=i(Q),M2=n(Q,"LI",{});var u9e=s(M2);Jce=n(u9e,"STRONG",{});var vct=s(Jce);Rwo=r(vct,"camembert"),vct.forEach(t),Pwo=r(u9e," \u2014 "),MD=n(u9e,"A",{href:!0});var Fct=s(MD);Bwo=r(Fct,"CamembertForCausalLM"),Fct.forEach(t),Iwo=r(u9e," (CamemBERT model)"),u9e.forEach(t),Nwo=i(Q),E2=n(Q,"LI",{});var _9e=s(E2);Yce=n(_9e,"STRONG",{});var Tct=s(Yce);qwo=r(Tct,"ctrl"),Tct.forEach(t),jwo=r(_9e," \u2014 "),ED=n(_9e,"A",{href:!0});var Mct=s(ED);Dwo=r(Mct,"CTRLLMHeadModel"),Mct.forEach(t),Gwo=r(_9e," (CTRL model)"),_9e.forEach(t),Owo=i(Q),C2=n(Q,"LI",{});var b9e=s(C2);Kce=n(b9e,"STRONG",{});var Ect=s(Kce);Vwo=r(Ect,"data2vec-text"),Ect.forEach(t),Xwo=r(b9e," \u2014 "),CD=n(b9e,"A",{href:!0});var Cct=s(CD);zwo=r(Cct,"Data2VecTextForCausalLM"),Cct.forEach(t),Wwo=r(b9e," (Data2VecText model)"),b9e.forEach(t),Qwo=i(Q),w2=n(Q,"LI",{});var v9e=s(w2);Zce=n(v9e,"STRONG",{});var wct=s(Zce);Hwo=r(wct,"electra"),wct.forEach(t),Uwo=r(v9e," \u2014 "),wD=n(v9e,"A",{href:!0});var Act=s(wD);Jwo=r(Act,"ElectraForCausalLM"),Act.forEach(t),Ywo=r(v9e," (ELECTRA model)"),v9e.forEach(t),Kwo=i(Q),A2=n(Q,"LI",{});var F9e=s(A2);efe=n(F9e,"STRONG",{});var yct=s(efe);Zwo=r(yct,"gpt2"),yct.forEach(t),e0o=r(F9e," \u2014 "),AD=n(F9e,"A",{href:!0});var Lct=s(AD);o0o=r(Lct,"GPT2LMHeadModel"),Lct.forEach(t),r0o=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),t0o=i(Q),y2=n(Q,"LI",{});var T9e=s(y2);ofe=n(T9e,"STRONG",{});var xct=s(ofe);a0o=r(xct,"gpt_neo"),xct.forEach(t),n0o=r(T9e," \u2014 "),yD=n(T9e,"A",{href:!0});var $ct=s(yD);s0o=r($ct,"GPTNeoForCausalLM"),$ct.forEach(t),l0o=r(T9e," (GPT Neo model)"),T9e.forEach(t),i0o=i(Q),L2=n(Q,"LI",{});var M9e=s(L2);rfe=n(M9e,"STRONG",{});var kct=s(rfe);d0o=r(kct,"gpt_neox"),kct.forEach(t),c0o=r(M9e," \u2014 "),LD=n(M9e,"A",{href:!0});var Sct=s(LD);f0o=r(Sct,"GPTNeoXForCausalLM"),Sct.forEach(t),m0o=r(M9e," (GPT NeoX model)"),M9e.forEach(t),g0o=i(Q),x2=n(Q,"LI",{});var E9e=s(x2);tfe=n(E9e,"STRONG",{});var Rct=s(tfe);h0o=r(Rct,"gptj"),Rct.forEach(t),p0o=r(E9e," \u2014 "),xD=n(E9e,"A",{href:!0});var Pct=s(xD);u0o=r(Pct,"GPTJForCausalLM"),Pct.forEach(t),_0o=r(E9e," (GPT-J model)"),E9e.forEach(t),b0o=i(Q),$2=n(Q,"LI",{});var C9e=s($2);afe=n(C9e,"STRONG",{});var Bct=s(afe);v0o=r(Bct,"marian"),Bct.forEach(t),F0o=r(C9e," \u2014 "),$D=n(C9e,"A",{href:!0});var Ict=s($D);T0o=r(Ict,"MarianForCausalLM"),Ict.forEach(t),M0o=r(C9e," (Marian model)"),C9e.forEach(t),E0o=i(Q),k2=n(Q,"LI",{});var w9e=s(k2);nfe=n(w9e,"STRONG",{});var Nct=s(nfe);C0o=r(Nct,"mbart"),Nct.forEach(t),w0o=r(w9e," \u2014 "),kD=n(w9e,"A",{href:!0});var qct=s(kD);A0o=r(qct,"MBartForCausalLM"),qct.forEach(t),y0o=r(w9e," (mBART model)"),w9e.forEach(t),L0o=i(Q),S2=n(Q,"LI",{});var A9e=s(S2);sfe=n(A9e,"STRONG",{});var jct=s(sfe);x0o=r(jct,"megatron-bert"),jct.forEach(t),$0o=r(A9e," \u2014 "),SD=n(A9e,"A",{href:!0});var Dct=s(SD);k0o=r(Dct,"MegatronBertForCausalLM"),Dct.forEach(t),S0o=r(A9e," (Megatron-BERT model)"),A9e.forEach(t),R0o=i(Q),R2=n(Q,"LI",{});var y9e=s(R2);lfe=n(y9e,"STRONG",{});var Gct=s(lfe);P0o=r(Gct,"openai-gpt"),Gct.forEach(t),B0o=r(y9e," \u2014 "),RD=n(y9e,"A",{href:!0});var Oct=s(RD);I0o=r(Oct,"OpenAIGPTLMHeadModel"),Oct.forEach(t),N0o=r(y9e," (OpenAI GPT model)"),y9e.forEach(t),q0o=i(Q),P2=n(Q,"LI",{});var L9e=s(P2);ife=n(L9e,"STRONG",{});var Vct=s(ife);j0o=r(Vct,"opt"),Vct.forEach(t),D0o=r(L9e," \u2014 "),PD=n(L9e,"A",{href:!0});var Xct=s(PD);G0o=r(Xct,"OPTForCausalLM"),Xct.forEach(t),O0o=r(L9e," (OPT model)"),L9e.forEach(t),V0o=i(Q),B2=n(Q,"LI",{});var x9e=s(B2);dfe=n(x9e,"STRONG",{});var zct=s(dfe);X0o=r(zct,"pegasus"),zct.forEach(t),z0o=r(x9e," \u2014 "),BD=n(x9e,"A",{href:!0});var Wct=s(BD);W0o=r(Wct,"PegasusForCausalLM"),Wct.forEach(t),Q0o=r(x9e," (Pegasus model)"),x9e.forEach(t),H0o=i(Q),I2=n(Q,"LI",{});var $9e=s(I2);cfe=n($9e,"STRONG",{});var Qct=s(cfe);U0o=r(Qct,"plbart"),Qct.forEach(t),J0o=r($9e," \u2014 "),ID=n($9e,"A",{href:!0});var Hct=s(ID);Y0o=r(Hct,"PLBartForCausalLM"),Hct.forEach(t),K0o=r($9e," (PLBart model)"),$9e.forEach(t),Z0o=i(Q),N2=n(Q,"LI",{});var k9e=s(N2);ffe=n(k9e,"STRONG",{});var Uct=s(ffe);eAo=r(Uct,"prophetnet"),Uct.forEach(t),oAo=r(k9e," \u2014 "),ND=n(k9e,"A",{href:!0});var Jct=s(ND);rAo=r(Jct,"ProphetNetForCausalLM"),Jct.forEach(t),tAo=r(k9e," (ProphetNet model)"),k9e.forEach(t),aAo=i(Q),q2=n(Q,"LI",{});var S9e=s(q2);mfe=n(S9e,"STRONG",{});var Yct=s(mfe);nAo=r(Yct,"qdqbert"),Yct.forEach(t),sAo=r(S9e," \u2014 "),qD=n(S9e,"A",{href:!0});var Kct=s(qD);lAo=r(Kct,"QDQBertLMHeadModel"),Kct.forEach(t),iAo=r(S9e," (QDQBert model)"),S9e.forEach(t),dAo=i(Q),j2=n(Q,"LI",{});var R9e=s(j2);gfe=n(R9e,"STRONG",{});var Zct=s(gfe);cAo=r(Zct,"reformer"),Zct.forEach(t),fAo=r(R9e," \u2014 "),jD=n(R9e,"A",{href:!0});var eft=s(jD);mAo=r(eft,"ReformerModelWithLMHead"),eft.forEach(t),gAo=r(R9e," (Reformer model)"),R9e.forEach(t),hAo=i(Q),D2=n(Q,"LI",{});var P9e=s(D2);hfe=n(P9e,"STRONG",{});var oft=s(hfe);pAo=r(oft,"rembert"),oft.forEach(t),uAo=r(P9e," \u2014 "),DD=n(P9e,"A",{href:!0});var rft=s(DD);_Ao=r(rft,"RemBertForCausalLM"),rft.forEach(t),bAo=r(P9e," (RemBERT model)"),P9e.forEach(t),vAo=i(Q),G2=n(Q,"LI",{});var B9e=s(G2);pfe=n(B9e,"STRONG",{});var tft=s(pfe);FAo=r(tft,"roberta"),tft.forEach(t),TAo=r(B9e," \u2014 "),GD=n(B9e,"A",{href:!0});var aft=s(GD);MAo=r(aft,"RobertaForCausalLM"),aft.forEach(t),EAo=r(B9e," (RoBERTa model)"),B9e.forEach(t),CAo=i(Q),O2=n(Q,"LI",{});var I9e=s(O2);ufe=n(I9e,"STRONG",{});var nft=s(ufe);wAo=r(nft,"roformer"),nft.forEach(t),AAo=r(I9e," \u2014 "),OD=n(I9e,"A",{href:!0});var sft=s(OD);yAo=r(sft,"RoFormerForCausalLM"),sft.forEach(t),LAo=r(I9e," (RoFormer model)"),I9e.forEach(t),xAo=i(Q),V2=n(Q,"LI",{});var N9e=s(V2);_fe=n(N9e,"STRONG",{});var lft=s(_fe);$Ao=r(lft,"speech_to_text_2"),lft.forEach(t),kAo=r(N9e," \u2014 "),VD=n(N9e,"A",{href:!0});var ift=s(VD);SAo=r(ift,"Speech2Text2ForCausalLM"),ift.forEach(t),RAo=r(N9e," (Speech2Text2 model)"),N9e.forEach(t),PAo=i(Q),X2=n(Q,"LI",{});var q9e=s(X2);bfe=n(q9e,"STRONG",{});var dft=s(bfe);BAo=r(dft,"transfo-xl"),dft.forEach(t),IAo=r(q9e," \u2014 "),XD=n(q9e,"A",{href:!0});var cft=s(XD);NAo=r(cft,"TransfoXLLMHeadModel"),cft.forEach(t),qAo=r(q9e," (Transformer-XL model)"),q9e.forEach(t),jAo=i(Q),z2=n(Q,"LI",{});var j9e=s(z2);vfe=n(j9e,"STRONG",{});var fft=s(vfe);DAo=r(fft,"trocr"),fft.forEach(t),GAo=r(j9e," \u2014 "),zD=n(j9e,"A",{href:!0});var mft=s(zD);OAo=r(mft,"TrOCRForCausalLM"),mft.forEach(t),VAo=r(j9e," (TrOCR model)"),j9e.forEach(t),XAo=i(Q),W2=n(Q,"LI",{});var D9e=s(W2);Ffe=n(D9e,"STRONG",{});var gft=s(Ffe);zAo=r(gft,"xglm"),gft.forEach(t),WAo=r(D9e," \u2014 "),WD=n(D9e,"A",{href:!0});var hft=s(WD);QAo=r(hft,"XGLMForCausalLM"),hft.forEach(t),HAo=r(D9e," (XGLM model)"),D9e.forEach(t),UAo=i(Q),Q2=n(Q,"LI",{});var G9e=s(Q2);Tfe=n(G9e,"STRONG",{});var pft=s(Tfe);JAo=r(pft,"xlm"),pft.forEach(t),YAo=r(G9e," \u2014 "),QD=n(G9e,"A",{href:!0});var uft=s(QD);KAo=r(uft,"XLMWithLMHeadModel"),uft.forEach(t),ZAo=r(G9e," (XLM model)"),G9e.forEach(t),eyo=i(Q),H2=n(Q,"LI",{});var O9e=s(H2);Mfe=n(O9e,"STRONG",{});var _ft=s(Mfe);oyo=r(_ft,"xlm-prophetnet"),_ft.forEach(t),ryo=r(O9e," \u2014 "),HD=n(O9e,"A",{href:!0});var bft=s(HD);tyo=r(bft,"XLMProphetNetForCausalLM"),bft.forEach(t),ayo=r(O9e," (XLM-ProphetNet model)"),O9e.forEach(t),nyo=i(Q),U2=n(Q,"LI",{});var V9e=s(U2);Efe=n(V9e,"STRONG",{});var vft=s(Efe);syo=r(vft,"xlm-roberta"),vft.forEach(t),lyo=r(V9e," \u2014 "),UD=n(V9e,"A",{href:!0});var Fft=s(UD);iyo=r(Fft,"XLMRobertaForCausalLM"),Fft.forEach(t),dyo=r(V9e," (XLM-RoBERTa model)"),V9e.forEach(t),cyo=i(Q),J2=n(Q,"LI",{});var X9e=s(J2);Cfe=n(X9e,"STRONG",{});var Tft=s(Cfe);fyo=r(Tft,"xlm-roberta-xl"),Tft.forEach(t),myo=r(X9e," \u2014 "),JD=n(X9e,"A",{href:!0});var Mft=s(JD);gyo=r(Mft,"XLMRobertaXLForCausalLM"),Mft.forEach(t),hyo=r(X9e," (XLM-RoBERTa-XL model)"),X9e.forEach(t),pyo=i(Q),Y2=n(Q,"LI",{});var z9e=s(Y2);wfe=n(z9e,"STRONG",{});var Eft=s(wfe);uyo=r(Eft,"xlnet"),Eft.forEach(t),_yo=r(z9e," \u2014 "),YD=n(z9e,"A",{href:!0});var Cft=s(YD);byo=r(Cft,"XLNetLMHeadModel"),Cft.forEach(t),vyo=r(z9e," (XLNet model)"),z9e.forEach(t),Q.forEach(t),Fyo=i(sa),K2=n(sa,"P",{});var W9e=s(K2);Tyo=r(W9e,"The model is set in evaluation mode by default using "),Afe=n(W9e,"CODE",{});var wft=s(Afe);Myo=r(wft,"model.eval()"),wft.forEach(t),Eyo=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(W9e,"CODE",{});var Aft=s(yfe);Cyo=r(Aft,"model.train()"),Aft.forEach(t),W9e.forEach(t),wyo=i(sa),T(Z2.$$.fragment,sa),sa.forEach(t),Js.forEach(t),hDe=i(f),Oi=n(f,"H2",{class:!0});var FOe=s(Oi);e1=n(FOe,"A",{id:!0,class:!0,href:!0});var yft=s(e1);Lfe=n(yft,"SPAN",{});var Lft=s(Lfe);T(WA.$$.fragment,Lft),Lft.forEach(t),yft.forEach(t),Ayo=i(FOe),xfe=n(FOe,"SPAN",{});var xft=s(xfe);yyo=r(xft,"AutoModelForMaskedLM"),xft.forEach(t),FOe.forEach(t),pDe=i(f),So=n(f,"DIV",{class:!0});var Ys=s(So);T(QA.$$.fragment,Ys),Lyo=i(Ys),Vi=n(Ys,"P",{});var yee=s(Vi);xyo=r(yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KD=n(yee,"A",{href:!0});var $ft=s(KD);$yo=r($ft,"from_pretrained()"),$ft.forEach(t),kyo=r(yee," class method or the "),ZD=n(yee,"A",{href:!0});var kft=s(ZD);Syo=r(kft,"from_config()"),kft.forEach(t),Ryo=r(yee,` class
method.`),yee.forEach(t),Pyo=i(Ys),HA=n(Ys,"P",{});var TOe=s(HA);Byo=r(TOe,"This class cannot be instantiated directly using "),$fe=n(TOe,"CODE",{});var Sft=s($fe);Iyo=r(Sft,"__init__()"),Sft.forEach(t),Nyo=r(TOe," (throws an error)."),TOe.forEach(t),qyo=i(Ys),it=n(Ys,"DIV",{class:!0});var gw=s(it);T(UA.$$.fragment,gw),jyo=i(gw),kfe=n(gw,"P",{});var Rft=s(kfe);Dyo=r(Rft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rft.forEach(t),Gyo=i(gw),Xi=n(gw,"P",{});var Lee=s(Xi);Oyo=r(Lee,`Note:
Loading a model from its configuration file does `),Sfe=n(Lee,"STRONG",{});var Pft=s(Sfe);Vyo=r(Pft,"not"),Pft.forEach(t),Xyo=r(Lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(Lee,"A",{href:!0});var Bft=s(eG);zyo=r(Bft,"from_pretrained()"),Bft.forEach(t),Wyo=r(Lee," to load the model weights."),Lee.forEach(t),Qyo=i(gw),T(o1.$$.fragment,gw),gw.forEach(t),Hyo=i(Ys),Ze=n(Ys,"DIV",{class:!0});var la=s(Ze);T(JA.$$.fragment,la),Uyo=i(la),Rfe=n(la,"P",{});var Ift=s(Rfe);Jyo=r(Ift,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ift.forEach(t),Yyo=i(la),Ba=n(la,"P",{});var hw=s(Ba);Kyo=r(hw,"The model class to instantiate is selected based on the "),Pfe=n(hw,"CODE",{});var Nft=s(Pfe);Zyo=r(Nft,"model_type"),Nft.forEach(t),eLo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(hw,"CODE",{});var qft=s(Bfe);oLo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),rLo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(hw,"CODE",{});var jft=s(Ife);tLo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),aLo=r(hw,":"),hw.forEach(t),nLo=i(la),W=n(la,"UL",{});var H=s(W);r1=n(H,"LI",{});var Q9e=s(r1);Nfe=n(Q9e,"STRONG",{});var Dft=s(Nfe);sLo=r(Dft,"albert"),Dft.forEach(t),lLo=r(Q9e," \u2014 "),oG=n(Q9e,"A",{href:!0});var Gft=s(oG);iLo=r(Gft,"AlbertForMaskedLM"),Gft.forEach(t),dLo=r(Q9e," (ALBERT model)"),Q9e.forEach(t),cLo=i(H),t1=n(H,"LI",{});var H9e=s(t1);qfe=n(H9e,"STRONG",{});var Oft=s(qfe);fLo=r(Oft,"bart"),Oft.forEach(t),mLo=r(H9e," \u2014 "),rG=n(H9e,"A",{href:!0});var Vft=s(rG);gLo=r(Vft,"BartForConditionalGeneration"),Vft.forEach(t),hLo=r(H9e," (BART model)"),H9e.forEach(t),pLo=i(H),a1=n(H,"LI",{});var U9e=s(a1);jfe=n(U9e,"STRONG",{});var Xft=s(jfe);uLo=r(Xft,"bert"),Xft.forEach(t),_Lo=r(U9e," \u2014 "),tG=n(U9e,"A",{href:!0});var zft=s(tG);bLo=r(zft,"BertForMaskedLM"),zft.forEach(t),vLo=r(U9e," (BERT model)"),U9e.forEach(t),FLo=i(H),n1=n(H,"LI",{});var J9e=s(n1);Dfe=n(J9e,"STRONG",{});var Wft=s(Dfe);TLo=r(Wft,"big_bird"),Wft.forEach(t),MLo=r(J9e," \u2014 "),aG=n(J9e,"A",{href:!0});var Qft=s(aG);ELo=r(Qft,"BigBirdForMaskedLM"),Qft.forEach(t),CLo=r(J9e," (BigBird model)"),J9e.forEach(t),wLo=i(H),s1=n(H,"LI",{});var Y9e=s(s1);Gfe=n(Y9e,"STRONG",{});var Hft=s(Gfe);ALo=r(Hft,"camembert"),Hft.forEach(t),yLo=r(Y9e," \u2014 "),nG=n(Y9e,"A",{href:!0});var Uft=s(nG);LLo=r(Uft,"CamembertForMaskedLM"),Uft.forEach(t),xLo=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),$Lo=i(H),l1=n(H,"LI",{});var K9e=s(l1);Ofe=n(K9e,"STRONG",{});var Jft=s(Ofe);kLo=r(Jft,"convbert"),Jft.forEach(t),SLo=r(K9e," \u2014 "),sG=n(K9e,"A",{href:!0});var Yft=s(sG);RLo=r(Yft,"ConvBertForMaskedLM"),Yft.forEach(t),PLo=r(K9e," (ConvBERT model)"),K9e.forEach(t),BLo=i(H),i1=n(H,"LI",{});var Z9e=s(i1);Vfe=n(Z9e,"STRONG",{});var Kft=s(Vfe);ILo=r(Kft,"data2vec-text"),Kft.forEach(t),NLo=r(Z9e," \u2014 "),lG=n(Z9e,"A",{href:!0});var Zft=s(lG);qLo=r(Zft,"Data2VecTextForMaskedLM"),Zft.forEach(t),jLo=r(Z9e," (Data2VecText model)"),Z9e.forEach(t),DLo=i(H),d1=n(H,"LI",{});var exe=s(d1);Xfe=n(exe,"STRONG",{});var emt=s(Xfe);GLo=r(emt,"deberta"),emt.forEach(t),OLo=r(exe," \u2014 "),iG=n(exe,"A",{href:!0});var omt=s(iG);VLo=r(omt,"DebertaForMaskedLM"),omt.forEach(t),XLo=r(exe," (DeBERTa model)"),exe.forEach(t),zLo=i(H),c1=n(H,"LI",{});var oxe=s(c1);zfe=n(oxe,"STRONG",{});var rmt=s(zfe);WLo=r(rmt,"deberta-v2"),rmt.forEach(t),QLo=r(oxe," \u2014 "),dG=n(oxe,"A",{href:!0});var tmt=s(dG);HLo=r(tmt,"DebertaV2ForMaskedLM"),tmt.forEach(t),ULo=r(oxe," (DeBERTa-v2 model)"),oxe.forEach(t),JLo=i(H),f1=n(H,"LI",{});var rxe=s(f1);Wfe=n(rxe,"STRONG",{});var amt=s(Wfe);YLo=r(amt,"distilbert"),amt.forEach(t),KLo=r(rxe," \u2014 "),cG=n(rxe,"A",{href:!0});var nmt=s(cG);ZLo=r(nmt,"DistilBertForMaskedLM"),nmt.forEach(t),e9o=r(rxe," (DistilBERT model)"),rxe.forEach(t),o9o=i(H),m1=n(H,"LI",{});var txe=s(m1);Qfe=n(txe,"STRONG",{});var smt=s(Qfe);r9o=r(smt,"electra"),smt.forEach(t),t9o=r(txe," \u2014 "),fG=n(txe,"A",{href:!0});var lmt=s(fG);a9o=r(lmt,"ElectraForMaskedLM"),lmt.forEach(t),n9o=r(txe," (ELECTRA model)"),txe.forEach(t),s9o=i(H),g1=n(H,"LI",{});var axe=s(g1);Hfe=n(axe,"STRONG",{});var imt=s(Hfe);l9o=r(imt,"flaubert"),imt.forEach(t),i9o=r(axe," \u2014 "),mG=n(axe,"A",{href:!0});var dmt=s(mG);d9o=r(dmt,"FlaubertWithLMHeadModel"),dmt.forEach(t),c9o=r(axe," (FlauBERT model)"),axe.forEach(t),f9o=i(H),h1=n(H,"LI",{});var nxe=s(h1);Ufe=n(nxe,"STRONG",{});var cmt=s(Ufe);m9o=r(cmt,"fnet"),cmt.forEach(t),g9o=r(nxe," \u2014 "),gG=n(nxe,"A",{href:!0});var fmt=s(gG);h9o=r(fmt,"FNetForMaskedLM"),fmt.forEach(t),p9o=r(nxe," (FNet model)"),nxe.forEach(t),u9o=i(H),p1=n(H,"LI",{});var sxe=s(p1);Jfe=n(sxe,"STRONG",{});var mmt=s(Jfe);_9o=r(mmt,"funnel"),mmt.forEach(t),b9o=r(sxe," \u2014 "),hG=n(sxe,"A",{href:!0});var gmt=s(hG);v9o=r(gmt,"FunnelForMaskedLM"),gmt.forEach(t),F9o=r(sxe," (Funnel Transformer model)"),sxe.forEach(t),T9o=i(H),u1=n(H,"LI",{});var lxe=s(u1);Yfe=n(lxe,"STRONG",{});var hmt=s(Yfe);M9o=r(hmt,"ibert"),hmt.forEach(t),E9o=r(lxe," \u2014 "),pG=n(lxe,"A",{href:!0});var pmt=s(pG);C9o=r(pmt,"IBertForMaskedLM"),pmt.forEach(t),w9o=r(lxe," (I-BERT model)"),lxe.forEach(t),A9o=i(H),_1=n(H,"LI",{});var ixe=s(_1);Kfe=n(ixe,"STRONG",{});var umt=s(Kfe);y9o=r(umt,"layoutlm"),umt.forEach(t),L9o=r(ixe," \u2014 "),uG=n(ixe,"A",{href:!0});var _mt=s(uG);x9o=r(_mt,"LayoutLMForMaskedLM"),_mt.forEach(t),$9o=r(ixe," (LayoutLM model)"),ixe.forEach(t),k9o=i(H),b1=n(H,"LI",{});var dxe=s(b1);Zfe=n(dxe,"STRONG",{});var bmt=s(Zfe);S9o=r(bmt,"longformer"),bmt.forEach(t),R9o=r(dxe," \u2014 "),_G=n(dxe,"A",{href:!0});var vmt=s(_G);P9o=r(vmt,"LongformerForMaskedLM"),vmt.forEach(t),B9o=r(dxe," (Longformer model)"),dxe.forEach(t),I9o=i(H),v1=n(H,"LI",{});var cxe=s(v1);eme=n(cxe,"STRONG",{});var Fmt=s(eme);N9o=r(Fmt,"luke"),Fmt.forEach(t),q9o=r(cxe," \u2014 "),bG=n(cxe,"A",{href:!0});var Tmt=s(bG);j9o=r(Tmt,"LukeForMaskedLM"),Tmt.forEach(t),D9o=r(cxe," (LUKE model)"),cxe.forEach(t),G9o=i(H),F1=n(H,"LI",{});var fxe=s(F1);ome=n(fxe,"STRONG",{});var Mmt=s(ome);O9o=r(Mmt,"mbart"),Mmt.forEach(t),V9o=r(fxe," \u2014 "),vG=n(fxe,"A",{href:!0});var Emt=s(vG);X9o=r(Emt,"MBartForConditionalGeneration"),Emt.forEach(t),z9o=r(fxe," (mBART model)"),fxe.forEach(t),W9o=i(H),T1=n(H,"LI",{});var mxe=s(T1);rme=n(mxe,"STRONG",{});var Cmt=s(rme);Q9o=r(Cmt,"megatron-bert"),Cmt.forEach(t),H9o=r(mxe," \u2014 "),FG=n(mxe,"A",{href:!0});var wmt=s(FG);U9o=r(wmt,"MegatronBertForMaskedLM"),wmt.forEach(t),J9o=r(mxe," (Megatron-BERT model)"),mxe.forEach(t),Y9o=i(H),M1=n(H,"LI",{});var gxe=s(M1);tme=n(gxe,"STRONG",{});var Amt=s(tme);K9o=r(Amt,"mobilebert"),Amt.forEach(t),Z9o=r(gxe," \u2014 "),TG=n(gxe,"A",{href:!0});var ymt=s(TG);exo=r(ymt,"MobileBertForMaskedLM"),ymt.forEach(t),oxo=r(gxe," (MobileBERT model)"),gxe.forEach(t),rxo=i(H),E1=n(H,"LI",{});var hxe=s(E1);ame=n(hxe,"STRONG",{});var Lmt=s(ame);txo=r(Lmt,"mpnet"),Lmt.forEach(t),axo=r(hxe," \u2014 "),MG=n(hxe,"A",{href:!0});var xmt=s(MG);nxo=r(xmt,"MPNetForMaskedLM"),xmt.forEach(t),sxo=r(hxe," (MPNet model)"),hxe.forEach(t),lxo=i(H),C1=n(H,"LI",{});var pxe=s(C1);nme=n(pxe,"STRONG",{});var $mt=s(nme);ixo=r($mt,"nystromformer"),$mt.forEach(t),dxo=r(pxe," \u2014 "),EG=n(pxe,"A",{href:!0});var kmt=s(EG);cxo=r(kmt,"NystromformerForMaskedLM"),kmt.forEach(t),fxo=r(pxe," (Nystr\xF6mformer model)"),pxe.forEach(t),mxo=i(H),w1=n(H,"LI",{});var uxe=s(w1);sme=n(uxe,"STRONG",{});var Smt=s(sme);gxo=r(Smt,"perceiver"),Smt.forEach(t),hxo=r(uxe," \u2014 "),CG=n(uxe,"A",{href:!0});var Rmt=s(CG);pxo=r(Rmt,"PerceiverForMaskedLM"),Rmt.forEach(t),uxo=r(uxe," (Perceiver model)"),uxe.forEach(t),_xo=i(H),A1=n(H,"LI",{});var _xe=s(A1);lme=n(_xe,"STRONG",{});var Pmt=s(lme);bxo=r(Pmt,"qdqbert"),Pmt.forEach(t),vxo=r(_xe," \u2014 "),wG=n(_xe,"A",{href:!0});var Bmt=s(wG);Fxo=r(Bmt,"QDQBertForMaskedLM"),Bmt.forEach(t),Txo=r(_xe," (QDQBert model)"),_xe.forEach(t),Mxo=i(H),y1=n(H,"LI",{});var bxe=s(y1);ime=n(bxe,"STRONG",{});var Imt=s(ime);Exo=r(Imt,"reformer"),Imt.forEach(t),Cxo=r(bxe," \u2014 "),AG=n(bxe,"A",{href:!0});var Nmt=s(AG);wxo=r(Nmt,"ReformerForMaskedLM"),Nmt.forEach(t),Axo=r(bxe," (Reformer model)"),bxe.forEach(t),yxo=i(H),L1=n(H,"LI",{});var vxe=s(L1);dme=n(vxe,"STRONG",{});var qmt=s(dme);Lxo=r(qmt,"rembert"),qmt.forEach(t),xxo=r(vxe," \u2014 "),yG=n(vxe,"A",{href:!0});var jmt=s(yG);$xo=r(jmt,"RemBertForMaskedLM"),jmt.forEach(t),kxo=r(vxe," (RemBERT model)"),vxe.forEach(t),Sxo=i(H),x1=n(H,"LI",{});var Fxe=s(x1);cme=n(Fxe,"STRONG",{});var Dmt=s(cme);Rxo=r(Dmt,"roberta"),Dmt.forEach(t),Pxo=r(Fxe," \u2014 "),LG=n(Fxe,"A",{href:!0});var Gmt=s(LG);Bxo=r(Gmt,"RobertaForMaskedLM"),Gmt.forEach(t),Ixo=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),Nxo=i(H),$1=n(H,"LI",{});var Txe=s($1);fme=n(Txe,"STRONG",{});var Omt=s(fme);qxo=r(Omt,"roformer"),Omt.forEach(t),jxo=r(Txe," \u2014 "),xG=n(Txe,"A",{href:!0});var Vmt=s(xG);Dxo=r(Vmt,"RoFormerForMaskedLM"),Vmt.forEach(t),Gxo=r(Txe," (RoFormer model)"),Txe.forEach(t),Oxo=i(H),k1=n(H,"LI",{});var Mxe=s(k1);mme=n(Mxe,"STRONG",{});var Xmt=s(mme);Vxo=r(Xmt,"squeezebert"),Xmt.forEach(t),Xxo=r(Mxe," \u2014 "),$G=n(Mxe,"A",{href:!0});var zmt=s($G);zxo=r(zmt,"SqueezeBertForMaskedLM"),zmt.forEach(t),Wxo=r(Mxe," (SqueezeBERT model)"),Mxe.forEach(t),Qxo=i(H),S1=n(H,"LI",{});var Exe=s(S1);gme=n(Exe,"STRONG",{});var Wmt=s(gme);Hxo=r(Wmt,"tapas"),Wmt.forEach(t),Uxo=r(Exe," \u2014 "),kG=n(Exe,"A",{href:!0});var Qmt=s(kG);Jxo=r(Qmt,"TapasForMaskedLM"),Qmt.forEach(t),Yxo=r(Exe," (TAPAS model)"),Exe.forEach(t),Kxo=i(H),R1=n(H,"LI",{});var Cxe=s(R1);hme=n(Cxe,"STRONG",{});var Hmt=s(hme);Zxo=r(Hmt,"wav2vec2"),Hmt.forEach(t),e$o=r(Cxe," \u2014 "),pme=n(Cxe,"CODE",{});var Umt=s(pme);o$o=r(Umt,"Wav2Vec2ForMaskedLM"),Umt.forEach(t),r$o=r(Cxe," (Wav2Vec2 model)"),Cxe.forEach(t),t$o=i(H),P1=n(H,"LI",{});var wxe=s(P1);ume=n(wxe,"STRONG",{});var Jmt=s(ume);a$o=r(Jmt,"xlm"),Jmt.forEach(t),n$o=r(wxe," \u2014 "),SG=n(wxe,"A",{href:!0});var Ymt=s(SG);s$o=r(Ymt,"XLMWithLMHeadModel"),Ymt.forEach(t),l$o=r(wxe," (XLM model)"),wxe.forEach(t),i$o=i(H),B1=n(H,"LI",{});var Axe=s(B1);_me=n(Axe,"STRONG",{});var Kmt=s(_me);d$o=r(Kmt,"xlm-roberta"),Kmt.forEach(t),c$o=r(Axe," \u2014 "),RG=n(Axe,"A",{href:!0});var Zmt=s(RG);f$o=r(Zmt,"XLMRobertaForMaskedLM"),Zmt.forEach(t),m$o=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),g$o=i(H),I1=n(H,"LI",{});var yxe=s(I1);bme=n(yxe,"STRONG",{});var egt=s(bme);h$o=r(egt,"xlm-roberta-xl"),egt.forEach(t),p$o=r(yxe," \u2014 "),PG=n(yxe,"A",{href:!0});var ogt=s(PG);u$o=r(ogt,"XLMRobertaXLForMaskedLM"),ogt.forEach(t),_$o=r(yxe," (XLM-RoBERTa-XL model)"),yxe.forEach(t),b$o=i(H),N1=n(H,"LI",{});var Lxe=s(N1);vme=n(Lxe,"STRONG",{});var rgt=s(vme);v$o=r(rgt,"yoso"),rgt.forEach(t),F$o=r(Lxe," \u2014 "),BG=n(Lxe,"A",{href:!0});var tgt=s(BG);T$o=r(tgt,"YosoForMaskedLM"),tgt.forEach(t),M$o=r(Lxe," (YOSO model)"),Lxe.forEach(t),H.forEach(t),E$o=i(la),q1=n(la,"P",{});var xxe=s(q1);C$o=r(xxe,"The model is set in evaluation mode by default using "),Fme=n(xxe,"CODE",{});var agt=s(Fme);w$o=r(agt,"model.eval()"),agt.forEach(t),A$o=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(xxe,"CODE",{});var ngt=s(Tme);y$o=r(ngt,"model.train()"),ngt.forEach(t),xxe.forEach(t),L$o=i(la),T(j1.$$.fragment,la),la.forEach(t),Ys.forEach(t),uDe=i(f),zi=n(f,"H2",{class:!0});var MOe=s(zi);D1=n(MOe,"A",{id:!0,class:!0,href:!0});var sgt=s(D1);Mme=n(sgt,"SPAN",{});var lgt=s(Mme);T(YA.$$.fragment,lgt),lgt.forEach(t),sgt.forEach(t),x$o=i(MOe),Eme=n(MOe,"SPAN",{});var igt=s(Eme);$$o=r(igt,"AutoModelForSeq2SeqLM"),igt.forEach(t),MOe.forEach(t),_De=i(f),Ro=n(f,"DIV",{class:!0});var Ks=s(Ro);T(KA.$$.fragment,Ks),k$o=i(Ks),Wi=n(Ks,"P",{});var xee=s(Wi);S$o=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IG=n(xee,"A",{href:!0});var dgt=s(IG);R$o=r(dgt,"from_pretrained()"),dgt.forEach(t),P$o=r(xee," class method or the "),NG=n(xee,"A",{href:!0});var cgt=s(NG);B$o=r(cgt,"from_config()"),cgt.forEach(t),I$o=r(xee,` class
method.`),xee.forEach(t),N$o=i(Ks),ZA=n(Ks,"P",{});var EOe=s(ZA);q$o=r(EOe,"This class cannot be instantiated directly using "),Cme=n(EOe,"CODE",{});var fgt=s(Cme);j$o=r(fgt,"__init__()"),fgt.forEach(t),D$o=r(EOe," (throws an error)."),EOe.forEach(t),G$o=i(Ks),dt=n(Ks,"DIV",{class:!0});var pw=s(dt);T(ey.$$.fragment,pw),O$o=i(pw),wme=n(pw,"P",{});var mgt=s(wme);V$o=r(mgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mgt.forEach(t),X$o=i(pw),Qi=n(pw,"P",{});var $ee=s(Qi);z$o=r($ee,`Note:
Loading a model from its configuration file does `),Ame=n($ee,"STRONG",{});var ggt=s(Ame);W$o=r(ggt,"not"),ggt.forEach(t),Q$o=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n($ee,"A",{href:!0});var hgt=s(qG);H$o=r(hgt,"from_pretrained()"),hgt.forEach(t),U$o=r($ee," to load the model weights."),$ee.forEach(t),J$o=i(pw),T(G1.$$.fragment,pw),pw.forEach(t),Y$o=i(Ks),eo=n(Ks,"DIV",{class:!0});var ia=s(eo);T(oy.$$.fragment,ia),K$o=i(ia),yme=n(ia,"P",{});var pgt=s(yme);Z$o=r(pgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pgt.forEach(t),eko=i(ia),Ia=n(ia,"P",{});var uw=s(Ia);oko=r(uw,"The model class to instantiate is selected based on the "),Lme=n(uw,"CODE",{});var ugt=s(Lme);rko=r(ugt,"model_type"),ugt.forEach(t),tko=r(uw,` property of the config object (either
passed as an argument or loaded from `),xme=n(uw,"CODE",{});var _gt=s(xme);ako=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),nko=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(uw,"CODE",{});var bgt=s($me);sko=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),lko=r(uw,":"),uw.forEach(t),iko=i(ia),ue=n(ia,"UL",{});var Fe=s(ue);O1=n(Fe,"LI",{});var $xe=s(O1);kme=n($xe,"STRONG",{});var vgt=s(kme);dko=r(vgt,"bart"),vgt.forEach(t),cko=r($xe," \u2014 "),jG=n($xe,"A",{href:!0});var Fgt=s(jG);fko=r(Fgt,"BartForConditionalGeneration"),Fgt.forEach(t),mko=r($xe," (BART model)"),$xe.forEach(t),gko=i(Fe),V1=n(Fe,"LI",{});var kxe=s(V1);Sme=n(kxe,"STRONG",{});var Tgt=s(Sme);hko=r(Tgt,"bigbird_pegasus"),Tgt.forEach(t),pko=r(kxe," \u2014 "),DG=n(kxe,"A",{href:!0});var Mgt=s(DG);uko=r(Mgt,"BigBirdPegasusForConditionalGeneration"),Mgt.forEach(t),_ko=r(kxe," (BigBird-Pegasus model)"),kxe.forEach(t),bko=i(Fe),X1=n(Fe,"LI",{});var Sxe=s(X1);Rme=n(Sxe,"STRONG",{});var Egt=s(Rme);vko=r(Egt,"blenderbot"),Egt.forEach(t),Fko=r(Sxe," \u2014 "),GG=n(Sxe,"A",{href:!0});var Cgt=s(GG);Tko=r(Cgt,"BlenderbotForConditionalGeneration"),Cgt.forEach(t),Mko=r(Sxe," (Blenderbot model)"),Sxe.forEach(t),Eko=i(Fe),z1=n(Fe,"LI",{});var Rxe=s(z1);Pme=n(Rxe,"STRONG",{});var wgt=s(Pme);Cko=r(wgt,"blenderbot-small"),wgt.forEach(t),wko=r(Rxe," \u2014 "),OG=n(Rxe,"A",{href:!0});var Agt=s(OG);Ako=r(Agt,"BlenderbotSmallForConditionalGeneration"),Agt.forEach(t),yko=r(Rxe," (BlenderbotSmall model)"),Rxe.forEach(t),Lko=i(Fe),W1=n(Fe,"LI",{});var Pxe=s(W1);Bme=n(Pxe,"STRONG",{});var ygt=s(Bme);xko=r(ygt,"encoder-decoder"),ygt.forEach(t),$ko=r(Pxe," \u2014 "),VG=n(Pxe,"A",{href:!0});var Lgt=s(VG);kko=r(Lgt,"EncoderDecoderModel"),Lgt.forEach(t),Sko=r(Pxe," (Encoder decoder model)"),Pxe.forEach(t),Rko=i(Fe),Q1=n(Fe,"LI",{});var Bxe=s(Q1);Ime=n(Bxe,"STRONG",{});var xgt=s(Ime);Pko=r(xgt,"fsmt"),xgt.forEach(t),Bko=r(Bxe," \u2014 "),XG=n(Bxe,"A",{href:!0});var $gt=s(XG);Iko=r($gt,"FSMTForConditionalGeneration"),$gt.forEach(t),Nko=r(Bxe," (FairSeq Machine-Translation model)"),Bxe.forEach(t),qko=i(Fe),H1=n(Fe,"LI",{});var Ixe=s(H1);Nme=n(Ixe,"STRONG",{});var kgt=s(Nme);jko=r(kgt,"led"),kgt.forEach(t),Dko=r(Ixe," \u2014 "),zG=n(Ixe,"A",{href:!0});var Sgt=s(zG);Gko=r(Sgt,"LEDForConditionalGeneration"),Sgt.forEach(t),Oko=r(Ixe," (LED model)"),Ixe.forEach(t),Vko=i(Fe),U1=n(Fe,"LI",{});var Nxe=s(U1);qme=n(Nxe,"STRONG",{});var Rgt=s(qme);Xko=r(Rgt,"m2m_100"),Rgt.forEach(t),zko=r(Nxe," \u2014 "),WG=n(Nxe,"A",{href:!0});var Pgt=s(WG);Wko=r(Pgt,"M2M100ForConditionalGeneration"),Pgt.forEach(t),Qko=r(Nxe," (M2M100 model)"),Nxe.forEach(t),Hko=i(Fe),J1=n(Fe,"LI",{});var qxe=s(J1);jme=n(qxe,"STRONG",{});var Bgt=s(jme);Uko=r(Bgt,"marian"),Bgt.forEach(t),Jko=r(qxe," \u2014 "),QG=n(qxe,"A",{href:!0});var Igt=s(QG);Yko=r(Igt,"MarianMTModel"),Igt.forEach(t),Kko=r(qxe," (Marian model)"),qxe.forEach(t),Zko=i(Fe),Y1=n(Fe,"LI",{});var jxe=s(Y1);Dme=n(jxe,"STRONG",{});var Ngt=s(Dme);eSo=r(Ngt,"mbart"),Ngt.forEach(t),oSo=r(jxe," \u2014 "),HG=n(jxe,"A",{href:!0});var qgt=s(HG);rSo=r(qgt,"MBartForConditionalGeneration"),qgt.forEach(t),tSo=r(jxe," (mBART model)"),jxe.forEach(t),aSo=i(Fe),K1=n(Fe,"LI",{});var Dxe=s(K1);Gme=n(Dxe,"STRONG",{});var jgt=s(Gme);nSo=r(jgt,"mt5"),jgt.forEach(t),sSo=r(Dxe," \u2014 "),UG=n(Dxe,"A",{href:!0});var Dgt=s(UG);lSo=r(Dgt,"MT5ForConditionalGeneration"),Dgt.forEach(t),iSo=r(Dxe," (MT5 model)"),Dxe.forEach(t),dSo=i(Fe),Z1=n(Fe,"LI",{});var Gxe=s(Z1);Ome=n(Gxe,"STRONG",{});var Ggt=s(Ome);cSo=r(Ggt,"pegasus"),Ggt.forEach(t),fSo=r(Gxe," \u2014 "),JG=n(Gxe,"A",{href:!0});var Ogt=s(JG);mSo=r(Ogt,"PegasusForConditionalGeneration"),Ogt.forEach(t),gSo=r(Gxe," (Pegasus model)"),Gxe.forEach(t),hSo=i(Fe),eb=n(Fe,"LI",{});var Oxe=s(eb);Vme=n(Oxe,"STRONG",{});var Vgt=s(Vme);pSo=r(Vgt,"plbart"),Vgt.forEach(t),uSo=r(Oxe," \u2014 "),YG=n(Oxe,"A",{href:!0});var Xgt=s(YG);_So=r(Xgt,"PLBartForConditionalGeneration"),Xgt.forEach(t),bSo=r(Oxe," (PLBart model)"),Oxe.forEach(t),vSo=i(Fe),ob=n(Fe,"LI",{});var Vxe=s(ob);Xme=n(Vxe,"STRONG",{});var zgt=s(Xme);FSo=r(zgt,"prophetnet"),zgt.forEach(t),TSo=r(Vxe," \u2014 "),KG=n(Vxe,"A",{href:!0});var Wgt=s(KG);MSo=r(Wgt,"ProphetNetForConditionalGeneration"),Wgt.forEach(t),ESo=r(Vxe," (ProphetNet model)"),Vxe.forEach(t),CSo=i(Fe),rb=n(Fe,"LI",{});var Xxe=s(rb);zme=n(Xxe,"STRONG",{});var Qgt=s(zme);wSo=r(Qgt,"t5"),Qgt.forEach(t),ASo=r(Xxe," \u2014 "),ZG=n(Xxe,"A",{href:!0});var Hgt=s(ZG);ySo=r(Hgt,"T5ForConditionalGeneration"),Hgt.forEach(t),LSo=r(Xxe," (T5 model)"),Xxe.forEach(t),xSo=i(Fe),tb=n(Fe,"LI",{});var zxe=s(tb);Wme=n(zxe,"STRONG",{});var Ugt=s(Wme);$So=r(Ugt,"xlm-prophetnet"),Ugt.forEach(t),kSo=r(zxe," \u2014 "),eO=n(zxe,"A",{href:!0});var Jgt=s(eO);SSo=r(Jgt,"XLMProphetNetForConditionalGeneration"),Jgt.forEach(t),RSo=r(zxe," (XLM-ProphetNet model)"),zxe.forEach(t),Fe.forEach(t),PSo=i(ia),ab=n(ia,"P",{});var Wxe=s(ab);BSo=r(Wxe,"The model is set in evaluation mode by default using "),Qme=n(Wxe,"CODE",{});var Ygt=s(Qme);ISo=r(Ygt,"model.eval()"),Ygt.forEach(t),NSo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(Wxe,"CODE",{});var Kgt=s(Hme);qSo=r(Kgt,"model.train()"),Kgt.forEach(t),Wxe.forEach(t),jSo=i(ia),T(nb.$$.fragment,ia),ia.forEach(t),Ks.forEach(t),bDe=i(f),Hi=n(f,"H2",{class:!0});var COe=s(Hi);sb=n(COe,"A",{id:!0,class:!0,href:!0});var Zgt=s(sb);Ume=n(Zgt,"SPAN",{});var eht=s(Ume);T(ry.$$.fragment,eht),eht.forEach(t),Zgt.forEach(t),DSo=i(COe),Jme=n(COe,"SPAN",{});var oht=s(Jme);GSo=r(oht,"AutoModelForSequenceClassification"),oht.forEach(t),COe.forEach(t),vDe=i(f),Po=n(f,"DIV",{class:!0});var Zs=s(Po);T(ty.$$.fragment,Zs),OSo=i(Zs),Ui=n(Zs,"P",{});var kee=s(Ui);VSo=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oO=n(kee,"A",{href:!0});var rht=s(oO);XSo=r(rht,"from_pretrained()"),rht.forEach(t),zSo=r(kee," class method or the "),rO=n(kee,"A",{href:!0});var tht=s(rO);WSo=r(tht,"from_config()"),tht.forEach(t),QSo=r(kee,` class
method.`),kee.forEach(t),HSo=i(Zs),ay=n(Zs,"P",{});var wOe=s(ay);USo=r(wOe,"This class cannot be instantiated directly using "),Yme=n(wOe,"CODE",{});var aht=s(Yme);JSo=r(aht,"__init__()"),aht.forEach(t),YSo=r(wOe," (throws an error)."),wOe.forEach(t),KSo=i(Zs),ct=n(Zs,"DIV",{class:!0});var _w=s(ct);T(ny.$$.fragment,_w),ZSo=i(_w),Kme=n(_w,"P",{});var nht=s(Kme);eRo=r(nht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nht.forEach(t),oRo=i(_w),Ji=n(_w,"P",{});var See=s(Ji);rRo=r(See,`Note:
Loading a model from its configuration file does `),Zme=n(See,"STRONG",{});var sht=s(Zme);tRo=r(sht,"not"),sht.forEach(t),aRo=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(See,"A",{href:!0});var lht=s(tO);nRo=r(lht,"from_pretrained()"),lht.forEach(t),sRo=r(See," to load the model weights."),See.forEach(t),lRo=i(_w),T(lb.$$.fragment,_w),_w.forEach(t),iRo=i(Zs),oo=n(Zs,"DIV",{class:!0});var da=s(oo);T(sy.$$.fragment,da),dRo=i(da),ege=n(da,"P",{});var iht=s(ege);cRo=r(iht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iht.forEach(t),fRo=i(da),Na=n(da,"P",{});var bw=s(Na);mRo=r(bw,"The model class to instantiate is selected based on the "),oge=n(bw,"CODE",{});var dht=s(oge);gRo=r(dht,"model_type"),dht.forEach(t),hRo=r(bw,` property of the config object (either
passed as an argument or loaded from `),rge=n(bw,"CODE",{});var cht=s(rge);pRo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),uRo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(bw,"CODE",{});var fht=s(tge);_Ro=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),bRo=r(bw,":"),bw.forEach(t),vRo=i(da),N=n(da,"UL",{});var j=s(N);ib=n(j,"LI",{});var Qxe=s(ib);age=n(Qxe,"STRONG",{});var mht=s(age);FRo=r(mht,"albert"),mht.forEach(t),TRo=r(Qxe," \u2014 "),aO=n(Qxe,"A",{href:!0});var ght=s(aO);MRo=r(ght,"AlbertForSequenceClassification"),ght.forEach(t),ERo=r(Qxe," (ALBERT model)"),Qxe.forEach(t),CRo=i(j),db=n(j,"LI",{});var Hxe=s(db);nge=n(Hxe,"STRONG",{});var hht=s(nge);wRo=r(hht,"bart"),hht.forEach(t),ARo=r(Hxe," \u2014 "),nO=n(Hxe,"A",{href:!0});var pht=s(nO);yRo=r(pht,"BartForSequenceClassification"),pht.forEach(t),LRo=r(Hxe," (BART model)"),Hxe.forEach(t),xRo=i(j),cb=n(j,"LI",{});var Uxe=s(cb);sge=n(Uxe,"STRONG",{});var uht=s(sge);$Ro=r(uht,"bert"),uht.forEach(t),kRo=r(Uxe," \u2014 "),sO=n(Uxe,"A",{href:!0});var _ht=s(sO);SRo=r(_ht,"BertForSequenceClassification"),_ht.forEach(t),RRo=r(Uxe," (BERT model)"),Uxe.forEach(t),PRo=i(j),fb=n(j,"LI",{});var Jxe=s(fb);lge=n(Jxe,"STRONG",{});var bht=s(lge);BRo=r(bht,"big_bird"),bht.forEach(t),IRo=r(Jxe," \u2014 "),lO=n(Jxe,"A",{href:!0});var vht=s(lO);NRo=r(vht,"BigBirdForSequenceClassification"),vht.forEach(t),qRo=r(Jxe," (BigBird model)"),Jxe.forEach(t),jRo=i(j),mb=n(j,"LI",{});var Yxe=s(mb);ige=n(Yxe,"STRONG",{});var Fht=s(ige);DRo=r(Fht,"bigbird_pegasus"),Fht.forEach(t),GRo=r(Yxe," \u2014 "),iO=n(Yxe,"A",{href:!0});var Tht=s(iO);ORo=r(Tht,"BigBirdPegasusForSequenceClassification"),Tht.forEach(t),VRo=r(Yxe," (BigBird-Pegasus model)"),Yxe.forEach(t),XRo=i(j),gb=n(j,"LI",{});var Kxe=s(gb);dge=n(Kxe,"STRONG",{});var Mht=s(dge);zRo=r(Mht,"camembert"),Mht.forEach(t),WRo=r(Kxe," \u2014 "),dO=n(Kxe,"A",{href:!0});var Eht=s(dO);QRo=r(Eht,"CamembertForSequenceClassification"),Eht.forEach(t),HRo=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),URo=i(j),hb=n(j,"LI",{});var Zxe=s(hb);cge=n(Zxe,"STRONG",{});var Cht=s(cge);JRo=r(Cht,"canine"),Cht.forEach(t),YRo=r(Zxe," \u2014 "),cO=n(Zxe,"A",{href:!0});var wht=s(cO);KRo=r(wht,"CanineForSequenceClassification"),wht.forEach(t),ZRo=r(Zxe," (CANINE model)"),Zxe.forEach(t),ePo=i(j),pb=n(j,"LI",{});var e$e=s(pb);fge=n(e$e,"STRONG",{});var Aht=s(fge);oPo=r(Aht,"convbert"),Aht.forEach(t),rPo=r(e$e," \u2014 "),fO=n(e$e,"A",{href:!0});var yht=s(fO);tPo=r(yht,"ConvBertForSequenceClassification"),yht.forEach(t),aPo=r(e$e," (ConvBERT model)"),e$e.forEach(t),nPo=i(j),ub=n(j,"LI",{});var o$e=s(ub);mge=n(o$e,"STRONG",{});var Lht=s(mge);sPo=r(Lht,"ctrl"),Lht.forEach(t),lPo=r(o$e," \u2014 "),mO=n(o$e,"A",{href:!0});var xht=s(mO);iPo=r(xht,"CTRLForSequenceClassification"),xht.forEach(t),dPo=r(o$e," (CTRL model)"),o$e.forEach(t),cPo=i(j),_b=n(j,"LI",{});var r$e=s(_b);gge=n(r$e,"STRONG",{});var $ht=s(gge);fPo=r($ht,"data2vec-text"),$ht.forEach(t),mPo=r(r$e," \u2014 "),gO=n(r$e,"A",{href:!0});var kht=s(gO);gPo=r(kht,"Data2VecTextForSequenceClassification"),kht.forEach(t),hPo=r(r$e," (Data2VecText model)"),r$e.forEach(t),pPo=i(j),bb=n(j,"LI",{});var t$e=s(bb);hge=n(t$e,"STRONG",{});var Sht=s(hge);uPo=r(Sht,"deberta"),Sht.forEach(t),_Po=r(t$e," \u2014 "),hO=n(t$e,"A",{href:!0});var Rht=s(hO);bPo=r(Rht,"DebertaForSequenceClassification"),Rht.forEach(t),vPo=r(t$e," (DeBERTa model)"),t$e.forEach(t),FPo=i(j),vb=n(j,"LI",{});var a$e=s(vb);pge=n(a$e,"STRONG",{});var Pht=s(pge);TPo=r(Pht,"deberta-v2"),Pht.forEach(t),MPo=r(a$e," \u2014 "),pO=n(a$e,"A",{href:!0});var Bht=s(pO);EPo=r(Bht,"DebertaV2ForSequenceClassification"),Bht.forEach(t),CPo=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),wPo=i(j),Fb=n(j,"LI",{});var n$e=s(Fb);uge=n(n$e,"STRONG",{});var Iht=s(uge);APo=r(Iht,"distilbert"),Iht.forEach(t),yPo=r(n$e," \u2014 "),uO=n(n$e,"A",{href:!0});var Nht=s(uO);LPo=r(Nht,"DistilBertForSequenceClassification"),Nht.forEach(t),xPo=r(n$e," (DistilBERT model)"),n$e.forEach(t),$Po=i(j),Tb=n(j,"LI",{});var s$e=s(Tb);_ge=n(s$e,"STRONG",{});var qht=s(_ge);kPo=r(qht,"electra"),qht.forEach(t),SPo=r(s$e," \u2014 "),_O=n(s$e,"A",{href:!0});var jht=s(_O);RPo=r(jht,"ElectraForSequenceClassification"),jht.forEach(t),PPo=r(s$e," (ELECTRA model)"),s$e.forEach(t),BPo=i(j),Mb=n(j,"LI",{});var l$e=s(Mb);bge=n(l$e,"STRONG",{});var Dht=s(bge);IPo=r(Dht,"flaubert"),Dht.forEach(t),NPo=r(l$e," \u2014 "),bO=n(l$e,"A",{href:!0});var Ght=s(bO);qPo=r(Ght,"FlaubertForSequenceClassification"),Ght.forEach(t),jPo=r(l$e," (FlauBERT model)"),l$e.forEach(t),DPo=i(j),Eb=n(j,"LI",{});var i$e=s(Eb);vge=n(i$e,"STRONG",{});var Oht=s(vge);GPo=r(Oht,"fnet"),Oht.forEach(t),OPo=r(i$e," \u2014 "),vO=n(i$e,"A",{href:!0});var Vht=s(vO);VPo=r(Vht,"FNetForSequenceClassification"),Vht.forEach(t),XPo=r(i$e," (FNet model)"),i$e.forEach(t),zPo=i(j),Cb=n(j,"LI",{});var d$e=s(Cb);Fge=n(d$e,"STRONG",{});var Xht=s(Fge);WPo=r(Xht,"funnel"),Xht.forEach(t),QPo=r(d$e," \u2014 "),FO=n(d$e,"A",{href:!0});var zht=s(FO);HPo=r(zht,"FunnelForSequenceClassification"),zht.forEach(t),UPo=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),JPo=i(j),wb=n(j,"LI",{});var c$e=s(wb);Tge=n(c$e,"STRONG",{});var Wht=s(Tge);YPo=r(Wht,"gpt2"),Wht.forEach(t),KPo=r(c$e," \u2014 "),TO=n(c$e,"A",{href:!0});var Qht=s(TO);ZPo=r(Qht,"GPT2ForSequenceClassification"),Qht.forEach(t),eBo=r(c$e," (OpenAI GPT-2 model)"),c$e.forEach(t),oBo=i(j),Ab=n(j,"LI",{});var f$e=s(Ab);Mge=n(f$e,"STRONG",{});var Hht=s(Mge);rBo=r(Hht,"gpt_neo"),Hht.forEach(t),tBo=r(f$e," \u2014 "),MO=n(f$e,"A",{href:!0});var Uht=s(MO);aBo=r(Uht,"GPTNeoForSequenceClassification"),Uht.forEach(t),nBo=r(f$e," (GPT Neo model)"),f$e.forEach(t),sBo=i(j),yb=n(j,"LI",{});var m$e=s(yb);Ege=n(m$e,"STRONG",{});var Jht=s(Ege);lBo=r(Jht,"gptj"),Jht.forEach(t),iBo=r(m$e," \u2014 "),EO=n(m$e,"A",{href:!0});var Yht=s(EO);dBo=r(Yht,"GPTJForSequenceClassification"),Yht.forEach(t),cBo=r(m$e," (GPT-J model)"),m$e.forEach(t),fBo=i(j),Lb=n(j,"LI",{});var g$e=s(Lb);Cge=n(g$e,"STRONG",{});var Kht=s(Cge);mBo=r(Kht,"ibert"),Kht.forEach(t),gBo=r(g$e," \u2014 "),CO=n(g$e,"A",{href:!0});var Zht=s(CO);hBo=r(Zht,"IBertForSequenceClassification"),Zht.forEach(t),pBo=r(g$e," (I-BERT model)"),g$e.forEach(t),uBo=i(j),xb=n(j,"LI",{});var h$e=s(xb);wge=n(h$e,"STRONG",{});var ept=s(wge);_Bo=r(ept,"layoutlm"),ept.forEach(t),bBo=r(h$e," \u2014 "),wO=n(h$e,"A",{href:!0});var opt=s(wO);vBo=r(opt,"LayoutLMForSequenceClassification"),opt.forEach(t),FBo=r(h$e," (LayoutLM model)"),h$e.forEach(t),TBo=i(j),$b=n(j,"LI",{});var p$e=s($b);Age=n(p$e,"STRONG",{});var rpt=s(Age);MBo=r(rpt,"layoutlmv2"),rpt.forEach(t),EBo=r(p$e," \u2014 "),AO=n(p$e,"A",{href:!0});var tpt=s(AO);CBo=r(tpt,"LayoutLMv2ForSequenceClassification"),tpt.forEach(t),wBo=r(p$e," (LayoutLMv2 model)"),p$e.forEach(t),ABo=i(j),kb=n(j,"LI",{});var u$e=s(kb);yge=n(u$e,"STRONG",{});var apt=s(yge);yBo=r(apt,"layoutlmv3"),apt.forEach(t),LBo=r(u$e," \u2014 "),yO=n(u$e,"A",{href:!0});var npt=s(yO);xBo=r(npt,"LayoutLMv3ForSequenceClassification"),npt.forEach(t),$Bo=r(u$e," (LayoutLMv3 model)"),u$e.forEach(t),kBo=i(j),Sb=n(j,"LI",{});var _$e=s(Sb);Lge=n(_$e,"STRONG",{});var spt=s(Lge);SBo=r(spt,"led"),spt.forEach(t),RBo=r(_$e," \u2014 "),LO=n(_$e,"A",{href:!0});var lpt=s(LO);PBo=r(lpt,"LEDForSequenceClassification"),lpt.forEach(t),BBo=r(_$e," (LED model)"),_$e.forEach(t),IBo=i(j),Rb=n(j,"LI",{});var b$e=s(Rb);xge=n(b$e,"STRONG",{});var ipt=s(xge);NBo=r(ipt,"longformer"),ipt.forEach(t),qBo=r(b$e," \u2014 "),xO=n(b$e,"A",{href:!0});var dpt=s(xO);jBo=r(dpt,"LongformerForSequenceClassification"),dpt.forEach(t),DBo=r(b$e," (Longformer model)"),b$e.forEach(t),GBo=i(j),Pb=n(j,"LI",{});var v$e=s(Pb);$ge=n(v$e,"STRONG",{});var cpt=s($ge);OBo=r(cpt,"mbart"),cpt.forEach(t),VBo=r(v$e," \u2014 "),$O=n(v$e,"A",{href:!0});var fpt=s($O);XBo=r(fpt,"MBartForSequenceClassification"),fpt.forEach(t),zBo=r(v$e," (mBART model)"),v$e.forEach(t),WBo=i(j),Bb=n(j,"LI",{});var F$e=s(Bb);kge=n(F$e,"STRONG",{});var mpt=s(kge);QBo=r(mpt,"megatron-bert"),mpt.forEach(t),HBo=r(F$e," \u2014 "),kO=n(F$e,"A",{href:!0});var gpt=s(kO);UBo=r(gpt,"MegatronBertForSequenceClassification"),gpt.forEach(t),JBo=r(F$e," (Megatron-BERT model)"),F$e.forEach(t),YBo=i(j),Ib=n(j,"LI",{});var T$e=s(Ib);Sge=n(T$e,"STRONG",{});var hpt=s(Sge);KBo=r(hpt,"mobilebert"),hpt.forEach(t),ZBo=r(T$e," \u2014 "),SO=n(T$e,"A",{href:!0});var ppt=s(SO);eIo=r(ppt,"MobileBertForSequenceClassification"),ppt.forEach(t),oIo=r(T$e," (MobileBERT model)"),T$e.forEach(t),rIo=i(j),Nb=n(j,"LI",{});var M$e=s(Nb);Rge=n(M$e,"STRONG",{});var upt=s(Rge);tIo=r(upt,"mpnet"),upt.forEach(t),aIo=r(M$e," \u2014 "),RO=n(M$e,"A",{href:!0});var _pt=s(RO);nIo=r(_pt,"MPNetForSequenceClassification"),_pt.forEach(t),sIo=r(M$e," (MPNet model)"),M$e.forEach(t),lIo=i(j),qb=n(j,"LI",{});var E$e=s(qb);Pge=n(E$e,"STRONG",{});var bpt=s(Pge);iIo=r(bpt,"nystromformer"),bpt.forEach(t),dIo=r(E$e," \u2014 "),PO=n(E$e,"A",{href:!0});var vpt=s(PO);cIo=r(vpt,"NystromformerForSequenceClassification"),vpt.forEach(t),fIo=r(E$e," (Nystr\xF6mformer model)"),E$e.forEach(t),mIo=i(j),jb=n(j,"LI",{});var C$e=s(jb);Bge=n(C$e,"STRONG",{});var Fpt=s(Bge);gIo=r(Fpt,"openai-gpt"),Fpt.forEach(t),hIo=r(C$e," \u2014 "),BO=n(C$e,"A",{href:!0});var Tpt=s(BO);pIo=r(Tpt,"OpenAIGPTForSequenceClassification"),Tpt.forEach(t),uIo=r(C$e," (OpenAI GPT model)"),C$e.forEach(t),_Io=i(j),Db=n(j,"LI",{});var w$e=s(Db);Ige=n(w$e,"STRONG",{});var Mpt=s(Ige);bIo=r(Mpt,"perceiver"),Mpt.forEach(t),vIo=r(w$e," \u2014 "),IO=n(w$e,"A",{href:!0});var Ept=s(IO);FIo=r(Ept,"PerceiverForSequenceClassification"),Ept.forEach(t),TIo=r(w$e," (Perceiver model)"),w$e.forEach(t),MIo=i(j),Gb=n(j,"LI",{});var A$e=s(Gb);Nge=n(A$e,"STRONG",{});var Cpt=s(Nge);EIo=r(Cpt,"plbart"),Cpt.forEach(t),CIo=r(A$e," \u2014 "),NO=n(A$e,"A",{href:!0});var wpt=s(NO);wIo=r(wpt,"PLBartForSequenceClassification"),wpt.forEach(t),AIo=r(A$e," (PLBart model)"),A$e.forEach(t),yIo=i(j),Ob=n(j,"LI",{});var y$e=s(Ob);qge=n(y$e,"STRONG",{});var Apt=s(qge);LIo=r(Apt,"qdqbert"),Apt.forEach(t),xIo=r(y$e," \u2014 "),qO=n(y$e,"A",{href:!0});var ypt=s(qO);$Io=r(ypt,"QDQBertForSequenceClassification"),ypt.forEach(t),kIo=r(y$e," (QDQBert model)"),y$e.forEach(t),SIo=i(j),Vb=n(j,"LI",{});var L$e=s(Vb);jge=n(L$e,"STRONG",{});var Lpt=s(jge);RIo=r(Lpt,"reformer"),Lpt.forEach(t),PIo=r(L$e," \u2014 "),jO=n(L$e,"A",{href:!0});var xpt=s(jO);BIo=r(xpt,"ReformerForSequenceClassification"),xpt.forEach(t),IIo=r(L$e," (Reformer model)"),L$e.forEach(t),NIo=i(j),Xb=n(j,"LI",{});var x$e=s(Xb);Dge=n(x$e,"STRONG",{});var $pt=s(Dge);qIo=r($pt,"rembert"),$pt.forEach(t),jIo=r(x$e," \u2014 "),DO=n(x$e,"A",{href:!0});var kpt=s(DO);DIo=r(kpt,"RemBertForSequenceClassification"),kpt.forEach(t),GIo=r(x$e," (RemBERT model)"),x$e.forEach(t),OIo=i(j),zb=n(j,"LI",{});var $$e=s(zb);Gge=n($$e,"STRONG",{});var Spt=s(Gge);VIo=r(Spt,"roberta"),Spt.forEach(t),XIo=r($$e," \u2014 "),GO=n($$e,"A",{href:!0});var Rpt=s(GO);zIo=r(Rpt,"RobertaForSequenceClassification"),Rpt.forEach(t),WIo=r($$e," (RoBERTa model)"),$$e.forEach(t),QIo=i(j),Wb=n(j,"LI",{});var k$e=s(Wb);Oge=n(k$e,"STRONG",{});var Ppt=s(Oge);HIo=r(Ppt,"roformer"),Ppt.forEach(t),UIo=r(k$e," \u2014 "),OO=n(k$e,"A",{href:!0});var Bpt=s(OO);JIo=r(Bpt,"RoFormerForSequenceClassification"),Bpt.forEach(t),YIo=r(k$e," (RoFormer model)"),k$e.forEach(t),KIo=i(j),Qb=n(j,"LI",{});var S$e=s(Qb);Vge=n(S$e,"STRONG",{});var Ipt=s(Vge);ZIo=r(Ipt,"squeezebert"),Ipt.forEach(t),eNo=r(S$e," \u2014 "),VO=n(S$e,"A",{href:!0});var Npt=s(VO);oNo=r(Npt,"SqueezeBertForSequenceClassification"),Npt.forEach(t),rNo=r(S$e," (SqueezeBERT model)"),S$e.forEach(t),tNo=i(j),Hb=n(j,"LI",{});var R$e=s(Hb);Xge=n(R$e,"STRONG",{});var qpt=s(Xge);aNo=r(qpt,"tapas"),qpt.forEach(t),nNo=r(R$e," \u2014 "),XO=n(R$e,"A",{href:!0});var jpt=s(XO);sNo=r(jpt,"TapasForSequenceClassification"),jpt.forEach(t),lNo=r(R$e," (TAPAS model)"),R$e.forEach(t),iNo=i(j),Ub=n(j,"LI",{});var P$e=s(Ub);zge=n(P$e,"STRONG",{});var Dpt=s(zge);dNo=r(Dpt,"transfo-xl"),Dpt.forEach(t),cNo=r(P$e," \u2014 "),zO=n(P$e,"A",{href:!0});var Gpt=s(zO);fNo=r(Gpt,"TransfoXLForSequenceClassification"),Gpt.forEach(t),mNo=r(P$e," (Transformer-XL model)"),P$e.forEach(t),gNo=i(j),Jb=n(j,"LI",{});var B$e=s(Jb);Wge=n(B$e,"STRONG",{});var Opt=s(Wge);hNo=r(Opt,"xlm"),Opt.forEach(t),pNo=r(B$e," \u2014 "),WO=n(B$e,"A",{href:!0});var Vpt=s(WO);uNo=r(Vpt,"XLMForSequenceClassification"),Vpt.forEach(t),_No=r(B$e," (XLM model)"),B$e.forEach(t),bNo=i(j),Yb=n(j,"LI",{});var I$e=s(Yb);Qge=n(I$e,"STRONG",{});var Xpt=s(Qge);vNo=r(Xpt,"xlm-roberta"),Xpt.forEach(t),FNo=r(I$e," \u2014 "),QO=n(I$e,"A",{href:!0});var zpt=s(QO);TNo=r(zpt,"XLMRobertaForSequenceClassification"),zpt.forEach(t),MNo=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),ENo=i(j),Kb=n(j,"LI",{});var N$e=s(Kb);Hge=n(N$e,"STRONG",{});var Wpt=s(Hge);CNo=r(Wpt,"xlm-roberta-xl"),Wpt.forEach(t),wNo=r(N$e," \u2014 "),HO=n(N$e,"A",{href:!0});var Qpt=s(HO);ANo=r(Qpt,"XLMRobertaXLForSequenceClassification"),Qpt.forEach(t),yNo=r(N$e," (XLM-RoBERTa-XL model)"),N$e.forEach(t),LNo=i(j),Zb=n(j,"LI",{});var q$e=s(Zb);Uge=n(q$e,"STRONG",{});var Hpt=s(Uge);xNo=r(Hpt,"xlnet"),Hpt.forEach(t),$No=r(q$e," \u2014 "),UO=n(q$e,"A",{href:!0});var Upt=s(UO);kNo=r(Upt,"XLNetForSequenceClassification"),Upt.forEach(t),SNo=r(q$e," (XLNet model)"),q$e.forEach(t),RNo=i(j),ev=n(j,"LI",{});var j$e=s(ev);Jge=n(j$e,"STRONG",{});var Jpt=s(Jge);PNo=r(Jpt,"yoso"),Jpt.forEach(t),BNo=r(j$e," \u2014 "),JO=n(j$e,"A",{href:!0});var Ypt=s(JO);INo=r(Ypt,"YosoForSequenceClassification"),Ypt.forEach(t),NNo=r(j$e," (YOSO model)"),j$e.forEach(t),j.forEach(t),qNo=i(da),ov=n(da,"P",{});var D$e=s(ov);jNo=r(D$e,"The model is set in evaluation mode by default using "),Yge=n(D$e,"CODE",{});var Kpt=s(Yge);DNo=r(Kpt,"model.eval()"),Kpt.forEach(t),GNo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(D$e,"CODE",{});var Zpt=s(Kge);ONo=r(Zpt,"model.train()"),Zpt.forEach(t),D$e.forEach(t),VNo=i(da),T(rv.$$.fragment,da),da.forEach(t),Zs.forEach(t),FDe=i(f),Yi=n(f,"H2",{class:!0});var AOe=s(Yi);tv=n(AOe,"A",{id:!0,class:!0,href:!0});var eut=s(tv);Zge=n(eut,"SPAN",{});var out=s(Zge);T(ly.$$.fragment,out),out.forEach(t),eut.forEach(t),XNo=i(AOe),ehe=n(AOe,"SPAN",{});var rut=s(ehe);zNo=r(rut,"AutoModelForMultipleChoice"),rut.forEach(t),AOe.forEach(t),TDe=i(f),Bo=n(f,"DIV",{class:!0});var el=s(Bo);T(iy.$$.fragment,el),WNo=i(el),Ki=n(el,"P",{});var Ree=s(Ki);QNo=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YO=n(Ree,"A",{href:!0});var tut=s(YO);HNo=r(tut,"from_pretrained()"),tut.forEach(t),UNo=r(Ree," class method or the "),KO=n(Ree,"A",{href:!0});var aut=s(KO);JNo=r(aut,"from_config()"),aut.forEach(t),YNo=r(Ree,` class
method.`),Ree.forEach(t),KNo=i(el),dy=n(el,"P",{});var yOe=s(dy);ZNo=r(yOe,"This class cannot be instantiated directly using "),ohe=n(yOe,"CODE",{});var nut=s(ohe);eqo=r(nut,"__init__()"),nut.forEach(t),oqo=r(yOe," (throws an error)."),yOe.forEach(t),rqo=i(el),ft=n(el,"DIV",{class:!0});var vw=s(ft);T(cy.$$.fragment,vw),tqo=i(vw),rhe=n(vw,"P",{});var sut=s(rhe);aqo=r(sut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sut.forEach(t),nqo=i(vw),Zi=n(vw,"P",{});var Pee=s(Zi);sqo=r(Pee,`Note:
Loading a model from its configuration file does `),the=n(Pee,"STRONG",{});var lut=s(the);lqo=r(lut,"not"),lut.forEach(t),iqo=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(Pee,"A",{href:!0});var iut=s(ZO);dqo=r(iut,"from_pretrained()"),iut.forEach(t),cqo=r(Pee," to load the model weights."),Pee.forEach(t),fqo=i(vw),T(av.$$.fragment,vw),vw.forEach(t),mqo=i(el),ro=n(el,"DIV",{class:!0});var ca=s(ro);T(fy.$$.fragment,ca),gqo=i(ca),ahe=n(ca,"P",{});var dut=s(ahe);hqo=r(dut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dut.forEach(t),pqo=i(ca),qa=n(ca,"P",{});var Fw=s(qa);uqo=r(Fw,"The model class to instantiate is selected based on the "),nhe=n(Fw,"CODE",{});var cut=s(nhe);_qo=r(cut,"model_type"),cut.forEach(t),bqo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),she=n(Fw,"CODE",{});var fut=s(she);vqo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Fqo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(Fw,"CODE",{});var mut=s(lhe);Tqo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Mqo=r(Fw,":"),Fw.forEach(t),Eqo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);nv=n(ee,"LI",{});var G$e=s(nv);ihe=n(G$e,"STRONG",{});var gut=s(ihe);Cqo=r(gut,"albert"),gut.forEach(t),wqo=r(G$e," \u2014 "),eV=n(G$e,"A",{href:!0});var hut=s(eV);Aqo=r(hut,"AlbertForMultipleChoice"),hut.forEach(t),yqo=r(G$e," (ALBERT model)"),G$e.forEach(t),Lqo=i(ee),sv=n(ee,"LI",{});var O$e=s(sv);dhe=n(O$e,"STRONG",{});var put=s(dhe);xqo=r(put,"bert"),put.forEach(t),$qo=r(O$e," \u2014 "),oV=n(O$e,"A",{href:!0});var uut=s(oV);kqo=r(uut,"BertForMultipleChoice"),uut.forEach(t),Sqo=r(O$e," (BERT model)"),O$e.forEach(t),Rqo=i(ee),lv=n(ee,"LI",{});var V$e=s(lv);che=n(V$e,"STRONG",{});var _ut=s(che);Pqo=r(_ut,"big_bird"),_ut.forEach(t),Bqo=r(V$e," \u2014 "),rV=n(V$e,"A",{href:!0});var but=s(rV);Iqo=r(but,"BigBirdForMultipleChoice"),but.forEach(t),Nqo=r(V$e," (BigBird model)"),V$e.forEach(t),qqo=i(ee),iv=n(ee,"LI",{});var X$e=s(iv);fhe=n(X$e,"STRONG",{});var vut=s(fhe);jqo=r(vut,"camembert"),vut.forEach(t),Dqo=r(X$e," \u2014 "),tV=n(X$e,"A",{href:!0});var Fut=s(tV);Gqo=r(Fut,"CamembertForMultipleChoice"),Fut.forEach(t),Oqo=r(X$e," (CamemBERT model)"),X$e.forEach(t),Vqo=i(ee),dv=n(ee,"LI",{});var z$e=s(dv);mhe=n(z$e,"STRONG",{});var Tut=s(mhe);Xqo=r(Tut,"canine"),Tut.forEach(t),zqo=r(z$e," \u2014 "),aV=n(z$e,"A",{href:!0});var Mut=s(aV);Wqo=r(Mut,"CanineForMultipleChoice"),Mut.forEach(t),Qqo=r(z$e," (CANINE model)"),z$e.forEach(t),Hqo=i(ee),cv=n(ee,"LI",{});var W$e=s(cv);ghe=n(W$e,"STRONG",{});var Eut=s(ghe);Uqo=r(Eut,"convbert"),Eut.forEach(t),Jqo=r(W$e," \u2014 "),nV=n(W$e,"A",{href:!0});var Cut=s(nV);Yqo=r(Cut,"ConvBertForMultipleChoice"),Cut.forEach(t),Kqo=r(W$e," (ConvBERT model)"),W$e.forEach(t),Zqo=i(ee),fv=n(ee,"LI",{});var Q$e=s(fv);hhe=n(Q$e,"STRONG",{});var wut=s(hhe);ejo=r(wut,"data2vec-text"),wut.forEach(t),ojo=r(Q$e," \u2014 "),sV=n(Q$e,"A",{href:!0});var Aut=s(sV);rjo=r(Aut,"Data2VecTextForMultipleChoice"),Aut.forEach(t),tjo=r(Q$e," (Data2VecText model)"),Q$e.forEach(t),ajo=i(ee),mv=n(ee,"LI",{});var H$e=s(mv);phe=n(H$e,"STRONG",{});var yut=s(phe);njo=r(yut,"deberta-v2"),yut.forEach(t),sjo=r(H$e," \u2014 "),lV=n(H$e,"A",{href:!0});var Lut=s(lV);ljo=r(Lut,"DebertaV2ForMultipleChoice"),Lut.forEach(t),ijo=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),djo=i(ee),gv=n(ee,"LI",{});var U$e=s(gv);uhe=n(U$e,"STRONG",{});var xut=s(uhe);cjo=r(xut,"distilbert"),xut.forEach(t),fjo=r(U$e," \u2014 "),iV=n(U$e,"A",{href:!0});var $ut=s(iV);mjo=r($ut,"DistilBertForMultipleChoice"),$ut.forEach(t),gjo=r(U$e," (DistilBERT model)"),U$e.forEach(t),hjo=i(ee),hv=n(ee,"LI",{});var J$e=s(hv);_he=n(J$e,"STRONG",{});var kut=s(_he);pjo=r(kut,"electra"),kut.forEach(t),ujo=r(J$e," \u2014 "),dV=n(J$e,"A",{href:!0});var Sut=s(dV);_jo=r(Sut,"ElectraForMultipleChoice"),Sut.forEach(t),bjo=r(J$e," (ELECTRA model)"),J$e.forEach(t),vjo=i(ee),pv=n(ee,"LI",{});var Y$e=s(pv);bhe=n(Y$e,"STRONG",{});var Rut=s(bhe);Fjo=r(Rut,"flaubert"),Rut.forEach(t),Tjo=r(Y$e," \u2014 "),cV=n(Y$e,"A",{href:!0});var Put=s(cV);Mjo=r(Put,"FlaubertForMultipleChoice"),Put.forEach(t),Ejo=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),Cjo=i(ee),uv=n(ee,"LI",{});var K$e=s(uv);vhe=n(K$e,"STRONG",{});var But=s(vhe);wjo=r(But,"fnet"),But.forEach(t),Ajo=r(K$e," \u2014 "),fV=n(K$e,"A",{href:!0});var Iut=s(fV);yjo=r(Iut,"FNetForMultipleChoice"),Iut.forEach(t),Ljo=r(K$e," (FNet model)"),K$e.forEach(t),xjo=i(ee),_v=n(ee,"LI",{});var Z$e=s(_v);Fhe=n(Z$e,"STRONG",{});var Nut=s(Fhe);$jo=r(Nut,"funnel"),Nut.forEach(t),kjo=r(Z$e," \u2014 "),mV=n(Z$e,"A",{href:!0});var qut=s(mV);Sjo=r(qut,"FunnelForMultipleChoice"),qut.forEach(t),Rjo=r(Z$e," (Funnel Transformer model)"),Z$e.forEach(t),Pjo=i(ee),bv=n(ee,"LI",{});var eke=s(bv);The=n(eke,"STRONG",{});var jut=s(The);Bjo=r(jut,"ibert"),jut.forEach(t),Ijo=r(eke," \u2014 "),gV=n(eke,"A",{href:!0});var Dut=s(gV);Njo=r(Dut,"IBertForMultipleChoice"),Dut.forEach(t),qjo=r(eke," (I-BERT model)"),eke.forEach(t),jjo=i(ee),vv=n(ee,"LI",{});var oke=s(vv);Mhe=n(oke,"STRONG",{});var Gut=s(Mhe);Djo=r(Gut,"longformer"),Gut.forEach(t),Gjo=r(oke," \u2014 "),hV=n(oke,"A",{href:!0});var Out=s(hV);Ojo=r(Out,"LongformerForMultipleChoice"),Out.forEach(t),Vjo=r(oke," (Longformer model)"),oke.forEach(t),Xjo=i(ee),Fv=n(ee,"LI",{});var rke=s(Fv);Ehe=n(rke,"STRONG",{});var Vut=s(Ehe);zjo=r(Vut,"megatron-bert"),Vut.forEach(t),Wjo=r(rke," \u2014 "),pV=n(rke,"A",{href:!0});var Xut=s(pV);Qjo=r(Xut,"MegatronBertForMultipleChoice"),Xut.forEach(t),Hjo=r(rke," (Megatron-BERT model)"),rke.forEach(t),Ujo=i(ee),Tv=n(ee,"LI",{});var tke=s(Tv);Che=n(tke,"STRONG",{});var zut=s(Che);Jjo=r(zut,"mobilebert"),zut.forEach(t),Yjo=r(tke," \u2014 "),uV=n(tke,"A",{href:!0});var Wut=s(uV);Kjo=r(Wut,"MobileBertForMultipleChoice"),Wut.forEach(t),Zjo=r(tke," (MobileBERT model)"),tke.forEach(t),eDo=i(ee),Mv=n(ee,"LI",{});var ake=s(Mv);whe=n(ake,"STRONG",{});var Qut=s(whe);oDo=r(Qut,"mpnet"),Qut.forEach(t),rDo=r(ake," \u2014 "),_V=n(ake,"A",{href:!0});var Hut=s(_V);tDo=r(Hut,"MPNetForMultipleChoice"),Hut.forEach(t),aDo=r(ake," (MPNet model)"),ake.forEach(t),nDo=i(ee),Ev=n(ee,"LI",{});var nke=s(Ev);Ahe=n(nke,"STRONG",{});var Uut=s(Ahe);sDo=r(Uut,"nystromformer"),Uut.forEach(t),lDo=r(nke," \u2014 "),bV=n(nke,"A",{href:!0});var Jut=s(bV);iDo=r(Jut,"NystromformerForMultipleChoice"),Jut.forEach(t),dDo=r(nke," (Nystr\xF6mformer model)"),nke.forEach(t),cDo=i(ee),Cv=n(ee,"LI",{});var ske=s(Cv);yhe=n(ske,"STRONG",{});var Yut=s(yhe);fDo=r(Yut,"qdqbert"),Yut.forEach(t),mDo=r(ske," \u2014 "),vV=n(ske,"A",{href:!0});var Kut=s(vV);gDo=r(Kut,"QDQBertForMultipleChoice"),Kut.forEach(t),hDo=r(ske," (QDQBert model)"),ske.forEach(t),pDo=i(ee),wv=n(ee,"LI",{});var lke=s(wv);Lhe=n(lke,"STRONG",{});var Zut=s(Lhe);uDo=r(Zut,"rembert"),Zut.forEach(t),_Do=r(lke," \u2014 "),FV=n(lke,"A",{href:!0});var e_t=s(FV);bDo=r(e_t,"RemBertForMultipleChoice"),e_t.forEach(t),vDo=r(lke," (RemBERT model)"),lke.forEach(t),FDo=i(ee),Av=n(ee,"LI",{});var ike=s(Av);xhe=n(ike,"STRONG",{});var o_t=s(xhe);TDo=r(o_t,"roberta"),o_t.forEach(t),MDo=r(ike," \u2014 "),TV=n(ike,"A",{href:!0});var r_t=s(TV);EDo=r(r_t,"RobertaForMultipleChoice"),r_t.forEach(t),CDo=r(ike," (RoBERTa model)"),ike.forEach(t),wDo=i(ee),yv=n(ee,"LI",{});var dke=s(yv);$he=n(dke,"STRONG",{});var t_t=s($he);ADo=r(t_t,"roformer"),t_t.forEach(t),yDo=r(dke," \u2014 "),MV=n(dke,"A",{href:!0});var a_t=s(MV);LDo=r(a_t,"RoFormerForMultipleChoice"),a_t.forEach(t),xDo=r(dke," (RoFormer model)"),dke.forEach(t),$Do=i(ee),Lv=n(ee,"LI",{});var cke=s(Lv);khe=n(cke,"STRONG",{});var n_t=s(khe);kDo=r(n_t,"squeezebert"),n_t.forEach(t),SDo=r(cke," \u2014 "),EV=n(cke,"A",{href:!0});var s_t=s(EV);RDo=r(s_t,"SqueezeBertForMultipleChoice"),s_t.forEach(t),PDo=r(cke," (SqueezeBERT model)"),cke.forEach(t),BDo=i(ee),xv=n(ee,"LI",{});var fke=s(xv);She=n(fke,"STRONG",{});var l_t=s(She);IDo=r(l_t,"xlm"),l_t.forEach(t),NDo=r(fke," \u2014 "),CV=n(fke,"A",{href:!0});var i_t=s(CV);qDo=r(i_t,"XLMForMultipleChoice"),i_t.forEach(t),jDo=r(fke," (XLM model)"),fke.forEach(t),DDo=i(ee),$v=n(ee,"LI",{});var mke=s($v);Rhe=n(mke,"STRONG",{});var d_t=s(Rhe);GDo=r(d_t,"xlm-roberta"),d_t.forEach(t),ODo=r(mke," \u2014 "),wV=n(mke,"A",{href:!0});var c_t=s(wV);VDo=r(c_t,"XLMRobertaForMultipleChoice"),c_t.forEach(t),XDo=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),zDo=i(ee),kv=n(ee,"LI",{});var gke=s(kv);Phe=n(gke,"STRONG",{});var f_t=s(Phe);WDo=r(f_t,"xlm-roberta-xl"),f_t.forEach(t),QDo=r(gke," \u2014 "),AV=n(gke,"A",{href:!0});var m_t=s(AV);HDo=r(m_t,"XLMRobertaXLForMultipleChoice"),m_t.forEach(t),UDo=r(gke," (XLM-RoBERTa-XL model)"),gke.forEach(t),JDo=i(ee),Sv=n(ee,"LI",{});var hke=s(Sv);Bhe=n(hke,"STRONG",{});var g_t=s(Bhe);YDo=r(g_t,"xlnet"),g_t.forEach(t),KDo=r(hke," \u2014 "),yV=n(hke,"A",{href:!0});var h_t=s(yV);ZDo=r(h_t,"XLNetForMultipleChoice"),h_t.forEach(t),eGo=r(hke," (XLNet model)"),hke.forEach(t),oGo=i(ee),Rv=n(ee,"LI",{});var pke=s(Rv);Ihe=n(pke,"STRONG",{});var p_t=s(Ihe);rGo=r(p_t,"yoso"),p_t.forEach(t),tGo=r(pke," \u2014 "),LV=n(pke,"A",{href:!0});var u_t=s(LV);aGo=r(u_t,"YosoForMultipleChoice"),u_t.forEach(t),nGo=r(pke," (YOSO model)"),pke.forEach(t),ee.forEach(t),sGo=i(ca),Pv=n(ca,"P",{});var uke=s(Pv);lGo=r(uke,"The model is set in evaluation mode by default using "),Nhe=n(uke,"CODE",{});var __t=s(Nhe);iGo=r(__t,"model.eval()"),__t.forEach(t),dGo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(uke,"CODE",{});var b_t=s(qhe);cGo=r(b_t,"model.train()"),b_t.forEach(t),uke.forEach(t),fGo=i(ca),T(Bv.$$.fragment,ca),ca.forEach(t),el.forEach(t),MDe=i(f),ed=n(f,"H2",{class:!0});var LOe=s(ed);Iv=n(LOe,"A",{id:!0,class:!0,href:!0});var v_t=s(Iv);jhe=n(v_t,"SPAN",{});var F_t=s(jhe);T(my.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),mGo=i(LOe),Dhe=n(LOe,"SPAN",{});var T_t=s(Dhe);gGo=r(T_t,"AutoModelForNextSentencePrediction"),T_t.forEach(t),LOe.forEach(t),EDe=i(f),Io=n(f,"DIV",{class:!0});var ol=s(Io);T(gy.$$.fragment,ol),hGo=i(ol),od=n(ol,"P",{});var Bee=s(od);pGo=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xV=n(Bee,"A",{href:!0});var M_t=s(xV);uGo=r(M_t,"from_pretrained()"),M_t.forEach(t),_Go=r(Bee," class method or the "),$V=n(Bee,"A",{href:!0});var E_t=s($V);bGo=r(E_t,"from_config()"),E_t.forEach(t),vGo=r(Bee,` class
method.`),Bee.forEach(t),FGo=i(ol),hy=n(ol,"P",{});var xOe=s(hy);TGo=r(xOe,"This class cannot be instantiated directly using "),Ghe=n(xOe,"CODE",{});var C_t=s(Ghe);MGo=r(C_t,"__init__()"),C_t.forEach(t),EGo=r(xOe," (throws an error)."),xOe.forEach(t),CGo=i(ol),mt=n(ol,"DIV",{class:!0});var Tw=s(mt);T(py.$$.fragment,Tw),wGo=i(Tw),Ohe=n(Tw,"P",{});var w_t=s(Ohe);AGo=r(w_t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w_t.forEach(t),yGo=i(Tw),rd=n(Tw,"P",{});var Iee=s(rd);LGo=r(Iee,`Note:
Loading a model from its configuration file does `),Vhe=n(Iee,"STRONG",{});var A_t=s(Vhe);xGo=r(A_t,"not"),A_t.forEach(t),$Go=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(Iee,"A",{href:!0});var y_t=s(kV);kGo=r(y_t,"from_pretrained()"),y_t.forEach(t),SGo=r(Iee," to load the model weights."),Iee.forEach(t),RGo=i(Tw),T(Nv.$$.fragment,Tw),Tw.forEach(t),PGo=i(ol),to=n(ol,"DIV",{class:!0});var fa=s(to);T(uy.$$.fragment,fa),BGo=i(fa),Xhe=n(fa,"P",{});var L_t=s(Xhe);IGo=r(L_t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),L_t.forEach(t),NGo=i(fa),ja=n(fa,"P",{});var Mw=s(ja);qGo=r(Mw,"The model class to instantiate is selected based on the "),zhe=n(Mw,"CODE",{});var x_t=s(zhe);jGo=r(x_t,"model_type"),x_t.forEach(t),DGo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Whe=n(Mw,"CODE",{});var $_t=s(Whe);GGo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),OGo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(Mw,"CODE",{});var k_t=s(Qhe);VGo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),XGo=r(Mw,":"),Mw.forEach(t),zGo=i(fa),Zr=n(fa,"UL",{});var rl=s(Zr);qv=n(rl,"LI",{});var _ke=s(qv);Hhe=n(_ke,"STRONG",{});var S_t=s(Hhe);WGo=r(S_t,"bert"),S_t.forEach(t),QGo=r(_ke," \u2014 "),SV=n(_ke,"A",{href:!0});var R_t=s(SV);HGo=r(R_t,"BertForNextSentencePrediction"),R_t.forEach(t),UGo=r(_ke," (BERT model)"),_ke.forEach(t),JGo=i(rl),jv=n(rl,"LI",{});var bke=s(jv);Uhe=n(bke,"STRONG",{});var P_t=s(Uhe);YGo=r(P_t,"fnet"),P_t.forEach(t),KGo=r(bke," \u2014 "),RV=n(bke,"A",{href:!0});var B_t=s(RV);ZGo=r(B_t,"FNetForNextSentencePrediction"),B_t.forEach(t),eOo=r(bke," (FNet model)"),bke.forEach(t),oOo=i(rl),Dv=n(rl,"LI",{});var vke=s(Dv);Jhe=n(vke,"STRONG",{});var I_t=s(Jhe);rOo=r(I_t,"megatron-bert"),I_t.forEach(t),tOo=r(vke," \u2014 "),PV=n(vke,"A",{href:!0});var N_t=s(PV);aOo=r(N_t,"MegatronBertForNextSentencePrediction"),N_t.forEach(t),nOo=r(vke," (Megatron-BERT model)"),vke.forEach(t),sOo=i(rl),Gv=n(rl,"LI",{});var Fke=s(Gv);Yhe=n(Fke,"STRONG",{});var q_t=s(Yhe);lOo=r(q_t,"mobilebert"),q_t.forEach(t),iOo=r(Fke," \u2014 "),BV=n(Fke,"A",{href:!0});var j_t=s(BV);dOo=r(j_t,"MobileBertForNextSentencePrediction"),j_t.forEach(t),cOo=r(Fke," (MobileBERT model)"),Fke.forEach(t),fOo=i(rl),Ov=n(rl,"LI",{});var Tke=s(Ov);Khe=n(Tke,"STRONG",{});var D_t=s(Khe);mOo=r(D_t,"qdqbert"),D_t.forEach(t),gOo=r(Tke," \u2014 "),IV=n(Tke,"A",{href:!0});var G_t=s(IV);hOo=r(G_t,"QDQBertForNextSentencePrediction"),G_t.forEach(t),pOo=r(Tke," (QDQBert model)"),Tke.forEach(t),rl.forEach(t),uOo=i(fa),Vv=n(fa,"P",{});var Mke=s(Vv);_Oo=r(Mke,"The model is set in evaluation mode by default using "),Zhe=n(Mke,"CODE",{});var O_t=s(Zhe);bOo=r(O_t,"model.eval()"),O_t.forEach(t),vOo=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(Mke,"CODE",{});var V_t=s(epe);FOo=r(V_t,"model.train()"),V_t.forEach(t),Mke.forEach(t),TOo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),ol.forEach(t),CDe=i(f),td=n(f,"H2",{class:!0});var $Oe=s(td);zv=n($Oe,"A",{id:!0,class:!0,href:!0});var X_t=s(zv);ope=n(X_t,"SPAN",{});var z_t=s(ope);T(_y.$$.fragment,z_t),z_t.forEach(t),X_t.forEach(t),MOo=i($Oe),rpe=n($Oe,"SPAN",{});var W_t=s(rpe);EOo=r(W_t,"AutoModelForTokenClassification"),W_t.forEach(t),$Oe.forEach(t),wDe=i(f),No=n(f,"DIV",{class:!0});var tl=s(No);T(by.$$.fragment,tl),COo=i(tl),ad=n(tl,"P",{});var Nee=s(ad);wOo=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NV=n(Nee,"A",{href:!0});var Q_t=s(NV);AOo=r(Q_t,"from_pretrained()"),Q_t.forEach(t),yOo=r(Nee," class method or the "),qV=n(Nee,"A",{href:!0});var H_t=s(qV);LOo=r(H_t,"from_config()"),H_t.forEach(t),xOo=r(Nee,` class
method.`),Nee.forEach(t),$Oo=i(tl),vy=n(tl,"P",{});var kOe=s(vy);kOo=r(kOe,"This class cannot be instantiated directly using "),tpe=n(kOe,"CODE",{});var U_t=s(tpe);SOo=r(U_t,"__init__()"),U_t.forEach(t),ROo=r(kOe," (throws an error)."),kOe.forEach(t),POo=i(tl),gt=n(tl,"DIV",{class:!0});var Ew=s(gt);T(Fy.$$.fragment,Ew),BOo=i(Ew),ape=n(Ew,"P",{});var J_t=s(ape);IOo=r(J_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J_t.forEach(t),NOo=i(Ew),nd=n(Ew,"P",{});var qee=s(nd);qOo=r(qee,`Note:
Loading a model from its configuration file does `),npe=n(qee,"STRONG",{});var Y_t=s(npe);jOo=r(Y_t,"not"),Y_t.forEach(t),DOo=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(qee,"A",{href:!0});var K_t=s(jV);GOo=r(K_t,"from_pretrained()"),K_t.forEach(t),OOo=r(qee," to load the model weights."),qee.forEach(t),VOo=i(Ew),T(Wv.$$.fragment,Ew),Ew.forEach(t),XOo=i(tl),ao=n(tl,"DIV",{class:!0});var ma=s(ao);T(Ty.$$.fragment,ma),zOo=i(ma),spe=n(ma,"P",{});var Z_t=s(spe);WOo=r(Z_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z_t.forEach(t),QOo=i(ma),Da=n(ma,"P",{});var Cw=s(Da);HOo=r(Cw,"The model class to instantiate is selected based on the "),lpe=n(Cw,"CODE",{});var e2t=s(lpe);UOo=r(e2t,"model_type"),e2t.forEach(t),JOo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),ipe=n(Cw,"CODE",{});var o2t=s(ipe);YOo=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),KOo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(Cw,"CODE",{});var r2t=s(dpe);ZOo=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),eVo=r(Cw,":"),Cw.forEach(t),oVo=i(ma),U=n(ma,"UL",{});var J=s(U);Qv=n(J,"LI",{});var Eke=s(Qv);cpe=n(Eke,"STRONG",{});var t2t=s(cpe);rVo=r(t2t,"albert"),t2t.forEach(t),tVo=r(Eke," \u2014 "),DV=n(Eke,"A",{href:!0});var a2t=s(DV);aVo=r(a2t,"AlbertForTokenClassification"),a2t.forEach(t),nVo=r(Eke," (ALBERT model)"),Eke.forEach(t),sVo=i(J),Hv=n(J,"LI",{});var Cke=s(Hv);fpe=n(Cke,"STRONG",{});var n2t=s(fpe);lVo=r(n2t,"bert"),n2t.forEach(t),iVo=r(Cke," \u2014 "),GV=n(Cke,"A",{href:!0});var s2t=s(GV);dVo=r(s2t,"BertForTokenClassification"),s2t.forEach(t),cVo=r(Cke," (BERT model)"),Cke.forEach(t),fVo=i(J),Uv=n(J,"LI",{});var wke=s(Uv);mpe=n(wke,"STRONG",{});var l2t=s(mpe);mVo=r(l2t,"big_bird"),l2t.forEach(t),gVo=r(wke," \u2014 "),OV=n(wke,"A",{href:!0});var i2t=s(OV);hVo=r(i2t,"BigBirdForTokenClassification"),i2t.forEach(t),pVo=r(wke," (BigBird model)"),wke.forEach(t),uVo=i(J),Jv=n(J,"LI",{});var Ake=s(Jv);gpe=n(Ake,"STRONG",{});var d2t=s(gpe);_Vo=r(d2t,"camembert"),d2t.forEach(t),bVo=r(Ake," \u2014 "),VV=n(Ake,"A",{href:!0});var c2t=s(VV);vVo=r(c2t,"CamembertForTokenClassification"),c2t.forEach(t),FVo=r(Ake," (CamemBERT model)"),Ake.forEach(t),TVo=i(J),Yv=n(J,"LI",{});var yke=s(Yv);hpe=n(yke,"STRONG",{});var f2t=s(hpe);MVo=r(f2t,"canine"),f2t.forEach(t),EVo=r(yke," \u2014 "),XV=n(yke,"A",{href:!0});var m2t=s(XV);CVo=r(m2t,"CanineForTokenClassification"),m2t.forEach(t),wVo=r(yke," (CANINE model)"),yke.forEach(t),AVo=i(J),Kv=n(J,"LI",{});var Lke=s(Kv);ppe=n(Lke,"STRONG",{});var g2t=s(ppe);yVo=r(g2t,"convbert"),g2t.forEach(t),LVo=r(Lke," \u2014 "),zV=n(Lke,"A",{href:!0});var h2t=s(zV);xVo=r(h2t,"ConvBertForTokenClassification"),h2t.forEach(t),$Vo=r(Lke," (ConvBERT model)"),Lke.forEach(t),kVo=i(J),Zv=n(J,"LI",{});var xke=s(Zv);upe=n(xke,"STRONG",{});var p2t=s(upe);SVo=r(p2t,"data2vec-text"),p2t.forEach(t),RVo=r(xke," \u2014 "),WV=n(xke,"A",{href:!0});var u2t=s(WV);PVo=r(u2t,"Data2VecTextForTokenClassification"),u2t.forEach(t),BVo=r(xke," (Data2VecText model)"),xke.forEach(t),IVo=i(J),eF=n(J,"LI",{});var $ke=s(eF);_pe=n($ke,"STRONG",{});var _2t=s(_pe);NVo=r(_2t,"deberta"),_2t.forEach(t),qVo=r($ke," \u2014 "),QV=n($ke,"A",{href:!0});var b2t=s(QV);jVo=r(b2t,"DebertaForTokenClassification"),b2t.forEach(t),DVo=r($ke," (DeBERTa model)"),$ke.forEach(t),GVo=i(J),oF=n(J,"LI",{});var kke=s(oF);bpe=n(kke,"STRONG",{});var v2t=s(bpe);OVo=r(v2t,"deberta-v2"),v2t.forEach(t),VVo=r(kke," \u2014 "),HV=n(kke,"A",{href:!0});var F2t=s(HV);XVo=r(F2t,"DebertaV2ForTokenClassification"),F2t.forEach(t),zVo=r(kke," (DeBERTa-v2 model)"),kke.forEach(t),WVo=i(J),rF=n(J,"LI",{});var Ske=s(rF);vpe=n(Ske,"STRONG",{});var T2t=s(vpe);QVo=r(T2t,"distilbert"),T2t.forEach(t),HVo=r(Ske," \u2014 "),UV=n(Ske,"A",{href:!0});var M2t=s(UV);UVo=r(M2t,"DistilBertForTokenClassification"),M2t.forEach(t),JVo=r(Ske," (DistilBERT model)"),Ske.forEach(t),YVo=i(J),tF=n(J,"LI",{});var Rke=s(tF);Fpe=n(Rke,"STRONG",{});var E2t=s(Fpe);KVo=r(E2t,"electra"),E2t.forEach(t),ZVo=r(Rke," \u2014 "),JV=n(Rke,"A",{href:!0});var C2t=s(JV);eXo=r(C2t,"ElectraForTokenClassification"),C2t.forEach(t),oXo=r(Rke," (ELECTRA model)"),Rke.forEach(t),rXo=i(J),aF=n(J,"LI",{});var Pke=s(aF);Tpe=n(Pke,"STRONG",{});var w2t=s(Tpe);tXo=r(w2t,"flaubert"),w2t.forEach(t),aXo=r(Pke," \u2014 "),YV=n(Pke,"A",{href:!0});var A2t=s(YV);nXo=r(A2t,"FlaubertForTokenClassification"),A2t.forEach(t),sXo=r(Pke," (FlauBERT model)"),Pke.forEach(t),lXo=i(J),nF=n(J,"LI",{});var Bke=s(nF);Mpe=n(Bke,"STRONG",{});var y2t=s(Mpe);iXo=r(y2t,"fnet"),y2t.forEach(t),dXo=r(Bke," \u2014 "),KV=n(Bke,"A",{href:!0});var L2t=s(KV);cXo=r(L2t,"FNetForTokenClassification"),L2t.forEach(t),fXo=r(Bke," (FNet model)"),Bke.forEach(t),mXo=i(J),sF=n(J,"LI",{});var Ike=s(sF);Epe=n(Ike,"STRONG",{});var x2t=s(Epe);gXo=r(x2t,"funnel"),x2t.forEach(t),hXo=r(Ike," \u2014 "),ZV=n(Ike,"A",{href:!0});var $2t=s(ZV);pXo=r($2t,"FunnelForTokenClassification"),$2t.forEach(t),uXo=r(Ike," (Funnel Transformer model)"),Ike.forEach(t),_Xo=i(J),lF=n(J,"LI",{});var Nke=s(lF);Cpe=n(Nke,"STRONG",{});var k2t=s(Cpe);bXo=r(k2t,"gpt2"),k2t.forEach(t),vXo=r(Nke," \u2014 "),eX=n(Nke,"A",{href:!0});var S2t=s(eX);FXo=r(S2t,"GPT2ForTokenClassification"),S2t.forEach(t),TXo=r(Nke," (OpenAI GPT-2 model)"),Nke.forEach(t),MXo=i(J),iF=n(J,"LI",{});var qke=s(iF);wpe=n(qke,"STRONG",{});var R2t=s(wpe);EXo=r(R2t,"ibert"),R2t.forEach(t),CXo=r(qke," \u2014 "),oX=n(qke,"A",{href:!0});var P2t=s(oX);wXo=r(P2t,"IBertForTokenClassification"),P2t.forEach(t),AXo=r(qke," (I-BERT model)"),qke.forEach(t),yXo=i(J),dF=n(J,"LI",{});var jke=s(dF);Ape=n(jke,"STRONG",{});var B2t=s(Ape);LXo=r(B2t,"layoutlm"),B2t.forEach(t),xXo=r(jke," \u2014 "),rX=n(jke,"A",{href:!0});var I2t=s(rX);$Xo=r(I2t,"LayoutLMForTokenClassification"),I2t.forEach(t),kXo=r(jke," (LayoutLM model)"),jke.forEach(t),SXo=i(J),cF=n(J,"LI",{});var Dke=s(cF);ype=n(Dke,"STRONG",{});var N2t=s(ype);RXo=r(N2t,"layoutlmv2"),N2t.forEach(t),PXo=r(Dke," \u2014 "),tX=n(Dke,"A",{href:!0});var q2t=s(tX);BXo=r(q2t,"LayoutLMv2ForTokenClassification"),q2t.forEach(t),IXo=r(Dke," (LayoutLMv2 model)"),Dke.forEach(t),NXo=i(J),fF=n(J,"LI",{});var Gke=s(fF);Lpe=n(Gke,"STRONG",{});var j2t=s(Lpe);qXo=r(j2t,"layoutlmv3"),j2t.forEach(t),jXo=r(Gke," \u2014 "),aX=n(Gke,"A",{href:!0});var D2t=s(aX);DXo=r(D2t,"LayoutLMv3ForTokenClassification"),D2t.forEach(t),GXo=r(Gke," (LayoutLMv3 model)"),Gke.forEach(t),OXo=i(J),mF=n(J,"LI",{});var Oke=s(mF);xpe=n(Oke,"STRONG",{});var G2t=s(xpe);VXo=r(G2t,"longformer"),G2t.forEach(t),XXo=r(Oke," \u2014 "),nX=n(Oke,"A",{href:!0});var O2t=s(nX);zXo=r(O2t,"LongformerForTokenClassification"),O2t.forEach(t),WXo=r(Oke," (Longformer model)"),Oke.forEach(t),QXo=i(J),gF=n(J,"LI",{});var Vke=s(gF);$pe=n(Vke,"STRONG",{});var V2t=s($pe);HXo=r(V2t,"megatron-bert"),V2t.forEach(t),UXo=r(Vke," \u2014 "),sX=n(Vke,"A",{href:!0});var X2t=s(sX);JXo=r(X2t,"MegatronBertForTokenClassification"),X2t.forEach(t),YXo=r(Vke," (Megatron-BERT model)"),Vke.forEach(t),KXo=i(J),hF=n(J,"LI",{});var Xke=s(hF);kpe=n(Xke,"STRONG",{});var z2t=s(kpe);ZXo=r(z2t,"mobilebert"),z2t.forEach(t),ezo=r(Xke," \u2014 "),lX=n(Xke,"A",{href:!0});var W2t=s(lX);ozo=r(W2t,"MobileBertForTokenClassification"),W2t.forEach(t),rzo=r(Xke," (MobileBERT model)"),Xke.forEach(t),tzo=i(J),pF=n(J,"LI",{});var zke=s(pF);Spe=n(zke,"STRONG",{});var Q2t=s(Spe);azo=r(Q2t,"mpnet"),Q2t.forEach(t),nzo=r(zke," \u2014 "),iX=n(zke,"A",{href:!0});var H2t=s(iX);szo=r(H2t,"MPNetForTokenClassification"),H2t.forEach(t),lzo=r(zke," (MPNet model)"),zke.forEach(t),izo=i(J),uF=n(J,"LI",{});var Wke=s(uF);Rpe=n(Wke,"STRONG",{});var U2t=s(Rpe);dzo=r(U2t,"nystromformer"),U2t.forEach(t),czo=r(Wke," \u2014 "),dX=n(Wke,"A",{href:!0});var J2t=s(dX);fzo=r(J2t,"NystromformerForTokenClassification"),J2t.forEach(t),mzo=r(Wke," (Nystr\xF6mformer model)"),Wke.forEach(t),gzo=i(J),_F=n(J,"LI",{});var Qke=s(_F);Ppe=n(Qke,"STRONG",{});var Y2t=s(Ppe);hzo=r(Y2t,"qdqbert"),Y2t.forEach(t),pzo=r(Qke," \u2014 "),cX=n(Qke,"A",{href:!0});var K2t=s(cX);uzo=r(K2t,"QDQBertForTokenClassification"),K2t.forEach(t),_zo=r(Qke," (QDQBert model)"),Qke.forEach(t),bzo=i(J),bF=n(J,"LI",{});var Hke=s(bF);Bpe=n(Hke,"STRONG",{});var Z2t=s(Bpe);vzo=r(Z2t,"rembert"),Z2t.forEach(t),Fzo=r(Hke," \u2014 "),fX=n(Hke,"A",{href:!0});var e1t=s(fX);Tzo=r(e1t,"RemBertForTokenClassification"),e1t.forEach(t),Mzo=r(Hke," (RemBERT model)"),Hke.forEach(t),Ezo=i(J),vF=n(J,"LI",{});var Uke=s(vF);Ipe=n(Uke,"STRONG",{});var o1t=s(Ipe);Czo=r(o1t,"roberta"),o1t.forEach(t),wzo=r(Uke," \u2014 "),mX=n(Uke,"A",{href:!0});var r1t=s(mX);Azo=r(r1t,"RobertaForTokenClassification"),r1t.forEach(t),yzo=r(Uke," (RoBERTa model)"),Uke.forEach(t),Lzo=i(J),FF=n(J,"LI",{});var Jke=s(FF);Npe=n(Jke,"STRONG",{});var t1t=s(Npe);xzo=r(t1t,"roformer"),t1t.forEach(t),$zo=r(Jke," \u2014 "),gX=n(Jke,"A",{href:!0});var a1t=s(gX);kzo=r(a1t,"RoFormerForTokenClassification"),a1t.forEach(t),Szo=r(Jke," (RoFormer model)"),Jke.forEach(t),Rzo=i(J),TF=n(J,"LI",{});var Yke=s(TF);qpe=n(Yke,"STRONG",{});var n1t=s(qpe);Pzo=r(n1t,"squeezebert"),n1t.forEach(t),Bzo=r(Yke," \u2014 "),hX=n(Yke,"A",{href:!0});var s1t=s(hX);Izo=r(s1t,"SqueezeBertForTokenClassification"),s1t.forEach(t),Nzo=r(Yke," (SqueezeBERT model)"),Yke.forEach(t),qzo=i(J),MF=n(J,"LI",{});var Kke=s(MF);jpe=n(Kke,"STRONG",{});var l1t=s(jpe);jzo=r(l1t,"xlm"),l1t.forEach(t),Dzo=r(Kke," \u2014 "),pX=n(Kke,"A",{href:!0});var i1t=s(pX);Gzo=r(i1t,"XLMForTokenClassification"),i1t.forEach(t),Ozo=r(Kke," (XLM model)"),Kke.forEach(t),Vzo=i(J),EF=n(J,"LI",{});var Zke=s(EF);Dpe=n(Zke,"STRONG",{});var d1t=s(Dpe);Xzo=r(d1t,"xlm-roberta"),d1t.forEach(t),zzo=r(Zke," \u2014 "),uX=n(Zke,"A",{href:!0});var c1t=s(uX);Wzo=r(c1t,"XLMRobertaForTokenClassification"),c1t.forEach(t),Qzo=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),Hzo=i(J),CF=n(J,"LI",{});var eSe=s(CF);Gpe=n(eSe,"STRONG",{});var f1t=s(Gpe);Uzo=r(f1t,"xlm-roberta-xl"),f1t.forEach(t),Jzo=r(eSe," \u2014 "),_X=n(eSe,"A",{href:!0});var m1t=s(_X);Yzo=r(m1t,"XLMRobertaXLForTokenClassification"),m1t.forEach(t),Kzo=r(eSe," (XLM-RoBERTa-XL model)"),eSe.forEach(t),Zzo=i(J),wF=n(J,"LI",{});var oSe=s(wF);Ope=n(oSe,"STRONG",{});var g1t=s(Ope);eWo=r(g1t,"xlnet"),g1t.forEach(t),oWo=r(oSe," \u2014 "),bX=n(oSe,"A",{href:!0});var h1t=s(bX);rWo=r(h1t,"XLNetForTokenClassification"),h1t.forEach(t),tWo=r(oSe," (XLNet model)"),oSe.forEach(t),aWo=i(J),AF=n(J,"LI",{});var rSe=s(AF);Vpe=n(rSe,"STRONG",{});var p1t=s(Vpe);nWo=r(p1t,"yoso"),p1t.forEach(t),sWo=r(rSe," \u2014 "),vX=n(rSe,"A",{href:!0});var u1t=s(vX);lWo=r(u1t,"YosoForTokenClassification"),u1t.forEach(t),iWo=r(rSe," (YOSO model)"),rSe.forEach(t),J.forEach(t),dWo=i(ma),yF=n(ma,"P",{});var tSe=s(yF);cWo=r(tSe,"The model is set in evaluation mode by default using "),Xpe=n(tSe,"CODE",{});var _1t=s(Xpe);fWo=r(_1t,"model.eval()"),_1t.forEach(t),mWo=r(tSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(tSe,"CODE",{});var b1t=s(zpe);gWo=r(b1t,"model.train()"),b1t.forEach(t),tSe.forEach(t),hWo=i(ma),T(LF.$$.fragment,ma),ma.forEach(t),tl.forEach(t),ADe=i(f),sd=n(f,"H2",{class:!0});var SOe=s(sd);xF=n(SOe,"A",{id:!0,class:!0,href:!0});var v1t=s(xF);Wpe=n(v1t,"SPAN",{});var F1t=s(Wpe);T(My.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),pWo=i(SOe),Qpe=n(SOe,"SPAN",{});var T1t=s(Qpe);uWo=r(T1t,"AutoModelForQuestionAnswering"),T1t.forEach(t),SOe.forEach(t),yDe=i(f),qo=n(f,"DIV",{class:!0});var al=s(qo);T(Ey.$$.fragment,al),_Wo=i(al),ld=n(al,"P",{});var jee=s(ld);bWo=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FX=n(jee,"A",{href:!0});var M1t=s(FX);vWo=r(M1t,"from_pretrained()"),M1t.forEach(t),FWo=r(jee," class method or the "),TX=n(jee,"A",{href:!0});var E1t=s(TX);TWo=r(E1t,"from_config()"),E1t.forEach(t),MWo=r(jee,` class
method.`),jee.forEach(t),EWo=i(al),Cy=n(al,"P",{});var ROe=s(Cy);CWo=r(ROe,"This class cannot be instantiated directly using "),Hpe=n(ROe,"CODE",{});var C1t=s(Hpe);wWo=r(C1t,"__init__()"),C1t.forEach(t),AWo=r(ROe," (throws an error)."),ROe.forEach(t),yWo=i(al),ht=n(al,"DIV",{class:!0});var ww=s(ht);T(wy.$$.fragment,ww),LWo=i(ww),Upe=n(ww,"P",{});var w1t=s(Upe);xWo=r(w1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w1t.forEach(t),$Wo=i(ww),id=n(ww,"P",{});var Dee=s(id);kWo=r(Dee,`Note:
Loading a model from its configuration file does `),Jpe=n(Dee,"STRONG",{});var A1t=s(Jpe);SWo=r(A1t,"not"),A1t.forEach(t),RWo=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(Dee,"A",{href:!0});var y1t=s(MX);PWo=r(y1t,"from_pretrained()"),y1t.forEach(t),BWo=r(Dee," to load the model weights."),Dee.forEach(t),IWo=i(ww),T($F.$$.fragment,ww),ww.forEach(t),NWo=i(al),no=n(al,"DIV",{class:!0});var ga=s(no);T(Ay.$$.fragment,ga),qWo=i(ga),Ype=n(ga,"P",{});var L1t=s(Ype);jWo=r(L1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L1t.forEach(t),DWo=i(ga),Ga=n(ga,"P",{});var Aw=s(Ga);GWo=r(Aw,"The model class to instantiate is selected based on the "),Kpe=n(Aw,"CODE",{});var x1t=s(Kpe);OWo=r(x1t,"model_type"),x1t.forEach(t),VWo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(Aw,"CODE",{});var $1t=s(Zpe);XWo=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),zWo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(Aw,"CODE",{});var k1t=s(eue);WWo=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),QWo=r(Aw,":"),Aw.forEach(t),HWo=i(ga),V=n(ga,"UL",{});var X=s(V);kF=n(X,"LI",{});var aSe=s(kF);oue=n(aSe,"STRONG",{});var S1t=s(oue);UWo=r(S1t,"albert"),S1t.forEach(t),JWo=r(aSe," \u2014 "),EX=n(aSe,"A",{href:!0});var R1t=s(EX);YWo=r(R1t,"AlbertForQuestionAnswering"),R1t.forEach(t),KWo=r(aSe," (ALBERT model)"),aSe.forEach(t),ZWo=i(X),SF=n(X,"LI",{});var nSe=s(SF);rue=n(nSe,"STRONG",{});var P1t=s(rue);eQo=r(P1t,"bart"),P1t.forEach(t),oQo=r(nSe," \u2014 "),CX=n(nSe,"A",{href:!0});var B1t=s(CX);rQo=r(B1t,"BartForQuestionAnswering"),B1t.forEach(t),tQo=r(nSe," (BART model)"),nSe.forEach(t),aQo=i(X),RF=n(X,"LI",{});var sSe=s(RF);tue=n(sSe,"STRONG",{});var I1t=s(tue);nQo=r(I1t,"bert"),I1t.forEach(t),sQo=r(sSe," \u2014 "),wX=n(sSe,"A",{href:!0});var N1t=s(wX);lQo=r(N1t,"BertForQuestionAnswering"),N1t.forEach(t),iQo=r(sSe," (BERT model)"),sSe.forEach(t),dQo=i(X),PF=n(X,"LI",{});var lSe=s(PF);aue=n(lSe,"STRONG",{});var q1t=s(aue);cQo=r(q1t,"big_bird"),q1t.forEach(t),fQo=r(lSe," \u2014 "),AX=n(lSe,"A",{href:!0});var j1t=s(AX);mQo=r(j1t,"BigBirdForQuestionAnswering"),j1t.forEach(t),gQo=r(lSe," (BigBird model)"),lSe.forEach(t),hQo=i(X),BF=n(X,"LI",{});var iSe=s(BF);nue=n(iSe,"STRONG",{});var D1t=s(nue);pQo=r(D1t,"bigbird_pegasus"),D1t.forEach(t),uQo=r(iSe," \u2014 "),yX=n(iSe,"A",{href:!0});var G1t=s(yX);_Qo=r(G1t,"BigBirdPegasusForQuestionAnswering"),G1t.forEach(t),bQo=r(iSe," (BigBird-Pegasus model)"),iSe.forEach(t),vQo=i(X),IF=n(X,"LI",{});var dSe=s(IF);sue=n(dSe,"STRONG",{});var O1t=s(sue);FQo=r(O1t,"camembert"),O1t.forEach(t),TQo=r(dSe," \u2014 "),LX=n(dSe,"A",{href:!0});var V1t=s(LX);MQo=r(V1t,"CamembertForQuestionAnswering"),V1t.forEach(t),EQo=r(dSe," (CamemBERT model)"),dSe.forEach(t),CQo=i(X),NF=n(X,"LI",{});var cSe=s(NF);lue=n(cSe,"STRONG",{});var X1t=s(lue);wQo=r(X1t,"canine"),X1t.forEach(t),AQo=r(cSe," \u2014 "),xX=n(cSe,"A",{href:!0});var z1t=s(xX);yQo=r(z1t,"CanineForQuestionAnswering"),z1t.forEach(t),LQo=r(cSe," (CANINE model)"),cSe.forEach(t),xQo=i(X),qF=n(X,"LI",{});var fSe=s(qF);iue=n(fSe,"STRONG",{});var W1t=s(iue);$Qo=r(W1t,"convbert"),W1t.forEach(t),kQo=r(fSe," \u2014 "),$X=n(fSe,"A",{href:!0});var Q1t=s($X);SQo=r(Q1t,"ConvBertForQuestionAnswering"),Q1t.forEach(t),RQo=r(fSe," (ConvBERT model)"),fSe.forEach(t),PQo=i(X),jF=n(X,"LI",{});var mSe=s(jF);due=n(mSe,"STRONG",{});var H1t=s(due);BQo=r(H1t,"data2vec-text"),H1t.forEach(t),IQo=r(mSe," \u2014 "),kX=n(mSe,"A",{href:!0});var U1t=s(kX);NQo=r(U1t,"Data2VecTextForQuestionAnswering"),U1t.forEach(t),qQo=r(mSe," (Data2VecText model)"),mSe.forEach(t),jQo=i(X),DF=n(X,"LI",{});var gSe=s(DF);cue=n(gSe,"STRONG",{});var J1t=s(cue);DQo=r(J1t,"deberta"),J1t.forEach(t),GQo=r(gSe," \u2014 "),SX=n(gSe,"A",{href:!0});var Y1t=s(SX);OQo=r(Y1t,"DebertaForQuestionAnswering"),Y1t.forEach(t),VQo=r(gSe," (DeBERTa model)"),gSe.forEach(t),XQo=i(X),GF=n(X,"LI",{});var hSe=s(GF);fue=n(hSe,"STRONG",{});var K1t=s(fue);zQo=r(K1t,"deberta-v2"),K1t.forEach(t),WQo=r(hSe," \u2014 "),RX=n(hSe,"A",{href:!0});var Z1t=s(RX);QQo=r(Z1t,"DebertaV2ForQuestionAnswering"),Z1t.forEach(t),HQo=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),UQo=i(X),OF=n(X,"LI",{});var pSe=s(OF);mue=n(pSe,"STRONG",{});var ebt=s(mue);JQo=r(ebt,"distilbert"),ebt.forEach(t),YQo=r(pSe," \u2014 "),PX=n(pSe,"A",{href:!0});var obt=s(PX);KQo=r(obt,"DistilBertForQuestionAnswering"),obt.forEach(t),ZQo=r(pSe," (DistilBERT model)"),pSe.forEach(t),eHo=i(X),VF=n(X,"LI",{});var uSe=s(VF);gue=n(uSe,"STRONG",{});var rbt=s(gue);oHo=r(rbt,"electra"),rbt.forEach(t),rHo=r(uSe," \u2014 "),BX=n(uSe,"A",{href:!0});var tbt=s(BX);tHo=r(tbt,"ElectraForQuestionAnswering"),tbt.forEach(t),aHo=r(uSe," (ELECTRA model)"),uSe.forEach(t),nHo=i(X),XF=n(X,"LI",{});var _Se=s(XF);hue=n(_Se,"STRONG",{});var abt=s(hue);sHo=r(abt,"flaubert"),abt.forEach(t),lHo=r(_Se," \u2014 "),IX=n(_Se,"A",{href:!0});var nbt=s(IX);iHo=r(nbt,"FlaubertForQuestionAnsweringSimple"),nbt.forEach(t),dHo=r(_Se," (FlauBERT model)"),_Se.forEach(t),cHo=i(X),zF=n(X,"LI",{});var bSe=s(zF);pue=n(bSe,"STRONG",{});var sbt=s(pue);fHo=r(sbt,"fnet"),sbt.forEach(t),mHo=r(bSe," \u2014 "),NX=n(bSe,"A",{href:!0});var lbt=s(NX);gHo=r(lbt,"FNetForQuestionAnswering"),lbt.forEach(t),hHo=r(bSe," (FNet model)"),bSe.forEach(t),pHo=i(X),WF=n(X,"LI",{});var vSe=s(WF);uue=n(vSe,"STRONG",{});var ibt=s(uue);uHo=r(ibt,"funnel"),ibt.forEach(t),_Ho=r(vSe," \u2014 "),qX=n(vSe,"A",{href:!0});var dbt=s(qX);bHo=r(dbt,"FunnelForQuestionAnswering"),dbt.forEach(t),vHo=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),FHo=i(X),QF=n(X,"LI",{});var FSe=s(QF);_ue=n(FSe,"STRONG",{});var cbt=s(_ue);THo=r(cbt,"gptj"),cbt.forEach(t),MHo=r(FSe," \u2014 "),jX=n(FSe,"A",{href:!0});var fbt=s(jX);EHo=r(fbt,"GPTJForQuestionAnswering"),fbt.forEach(t),CHo=r(FSe," (GPT-J model)"),FSe.forEach(t),wHo=i(X),HF=n(X,"LI",{});var TSe=s(HF);bue=n(TSe,"STRONG",{});var mbt=s(bue);AHo=r(mbt,"ibert"),mbt.forEach(t),yHo=r(TSe," \u2014 "),DX=n(TSe,"A",{href:!0});var gbt=s(DX);LHo=r(gbt,"IBertForQuestionAnswering"),gbt.forEach(t),xHo=r(TSe," (I-BERT model)"),TSe.forEach(t),$Ho=i(X),UF=n(X,"LI",{});var MSe=s(UF);vue=n(MSe,"STRONG",{});var hbt=s(vue);kHo=r(hbt,"layoutlmv2"),hbt.forEach(t),SHo=r(MSe," \u2014 "),GX=n(MSe,"A",{href:!0});var pbt=s(GX);RHo=r(pbt,"LayoutLMv2ForQuestionAnswering"),pbt.forEach(t),PHo=r(MSe," (LayoutLMv2 model)"),MSe.forEach(t),BHo=i(X),JF=n(X,"LI",{});var ESe=s(JF);Fue=n(ESe,"STRONG",{});var ubt=s(Fue);IHo=r(ubt,"layoutlmv3"),ubt.forEach(t),NHo=r(ESe," \u2014 "),OX=n(ESe,"A",{href:!0});var _bt=s(OX);qHo=r(_bt,"LayoutLMv3ForQuestionAnswering"),_bt.forEach(t),jHo=r(ESe," (LayoutLMv3 model)"),ESe.forEach(t),DHo=i(X),YF=n(X,"LI",{});var CSe=s(YF);Tue=n(CSe,"STRONG",{});var bbt=s(Tue);GHo=r(bbt,"led"),bbt.forEach(t),OHo=r(CSe," \u2014 "),VX=n(CSe,"A",{href:!0});var vbt=s(VX);VHo=r(vbt,"LEDForQuestionAnswering"),vbt.forEach(t),XHo=r(CSe," (LED model)"),CSe.forEach(t),zHo=i(X),KF=n(X,"LI",{});var wSe=s(KF);Mue=n(wSe,"STRONG",{});var Fbt=s(Mue);WHo=r(Fbt,"longformer"),Fbt.forEach(t),QHo=r(wSe," \u2014 "),XX=n(wSe,"A",{href:!0});var Tbt=s(XX);HHo=r(Tbt,"LongformerForQuestionAnswering"),Tbt.forEach(t),UHo=r(wSe," (Longformer model)"),wSe.forEach(t),JHo=i(X),ZF=n(X,"LI",{});var ASe=s(ZF);Eue=n(ASe,"STRONG",{});var Mbt=s(Eue);YHo=r(Mbt,"lxmert"),Mbt.forEach(t),KHo=r(ASe," \u2014 "),zX=n(ASe,"A",{href:!0});var Ebt=s(zX);ZHo=r(Ebt,"LxmertForQuestionAnswering"),Ebt.forEach(t),eUo=r(ASe," (LXMERT model)"),ASe.forEach(t),oUo=i(X),e6=n(X,"LI",{});var ySe=s(e6);Cue=n(ySe,"STRONG",{});var Cbt=s(Cue);rUo=r(Cbt,"mbart"),Cbt.forEach(t),tUo=r(ySe," \u2014 "),WX=n(ySe,"A",{href:!0});var wbt=s(WX);aUo=r(wbt,"MBartForQuestionAnswering"),wbt.forEach(t),nUo=r(ySe," (mBART model)"),ySe.forEach(t),sUo=i(X),o6=n(X,"LI",{});var LSe=s(o6);wue=n(LSe,"STRONG",{});var Abt=s(wue);lUo=r(Abt,"megatron-bert"),Abt.forEach(t),iUo=r(LSe," \u2014 "),QX=n(LSe,"A",{href:!0});var ybt=s(QX);dUo=r(ybt,"MegatronBertForQuestionAnswering"),ybt.forEach(t),cUo=r(LSe," (Megatron-BERT model)"),LSe.forEach(t),fUo=i(X),r6=n(X,"LI",{});var xSe=s(r6);Aue=n(xSe,"STRONG",{});var Lbt=s(Aue);mUo=r(Lbt,"mobilebert"),Lbt.forEach(t),gUo=r(xSe," \u2014 "),HX=n(xSe,"A",{href:!0});var xbt=s(HX);hUo=r(xbt,"MobileBertForQuestionAnswering"),xbt.forEach(t),pUo=r(xSe," (MobileBERT model)"),xSe.forEach(t),uUo=i(X),t6=n(X,"LI",{});var $Se=s(t6);yue=n($Se,"STRONG",{});var $bt=s(yue);_Uo=r($bt,"mpnet"),$bt.forEach(t),bUo=r($Se," \u2014 "),UX=n($Se,"A",{href:!0});var kbt=s(UX);vUo=r(kbt,"MPNetForQuestionAnswering"),kbt.forEach(t),FUo=r($Se," (MPNet model)"),$Se.forEach(t),TUo=i(X),a6=n(X,"LI",{});var kSe=s(a6);Lue=n(kSe,"STRONG",{});var Sbt=s(Lue);MUo=r(Sbt,"nystromformer"),Sbt.forEach(t),EUo=r(kSe," \u2014 "),JX=n(kSe,"A",{href:!0});var Rbt=s(JX);CUo=r(Rbt,"NystromformerForQuestionAnswering"),Rbt.forEach(t),wUo=r(kSe," (Nystr\xF6mformer model)"),kSe.forEach(t),AUo=i(X),n6=n(X,"LI",{});var SSe=s(n6);xue=n(SSe,"STRONG",{});var Pbt=s(xue);yUo=r(Pbt,"qdqbert"),Pbt.forEach(t),LUo=r(SSe," \u2014 "),YX=n(SSe,"A",{href:!0});var Bbt=s(YX);xUo=r(Bbt,"QDQBertForQuestionAnswering"),Bbt.forEach(t),$Uo=r(SSe," (QDQBert model)"),SSe.forEach(t),kUo=i(X),s6=n(X,"LI",{});var RSe=s(s6);$ue=n(RSe,"STRONG",{});var Ibt=s($ue);SUo=r(Ibt,"reformer"),Ibt.forEach(t),RUo=r(RSe," \u2014 "),KX=n(RSe,"A",{href:!0});var Nbt=s(KX);PUo=r(Nbt,"ReformerForQuestionAnswering"),Nbt.forEach(t),BUo=r(RSe," (Reformer model)"),RSe.forEach(t),IUo=i(X),l6=n(X,"LI",{});var PSe=s(l6);kue=n(PSe,"STRONG",{});var qbt=s(kue);NUo=r(qbt,"rembert"),qbt.forEach(t),qUo=r(PSe," \u2014 "),ZX=n(PSe,"A",{href:!0});var jbt=s(ZX);jUo=r(jbt,"RemBertForQuestionAnswering"),jbt.forEach(t),DUo=r(PSe," (RemBERT model)"),PSe.forEach(t),GUo=i(X),i6=n(X,"LI",{});var BSe=s(i6);Sue=n(BSe,"STRONG",{});var Dbt=s(Sue);OUo=r(Dbt,"roberta"),Dbt.forEach(t),VUo=r(BSe," \u2014 "),ez=n(BSe,"A",{href:!0});var Gbt=s(ez);XUo=r(Gbt,"RobertaForQuestionAnswering"),Gbt.forEach(t),zUo=r(BSe," (RoBERTa model)"),BSe.forEach(t),WUo=i(X),d6=n(X,"LI",{});var ISe=s(d6);Rue=n(ISe,"STRONG",{});var Obt=s(Rue);QUo=r(Obt,"roformer"),Obt.forEach(t),HUo=r(ISe," \u2014 "),oz=n(ISe,"A",{href:!0});var Vbt=s(oz);UUo=r(Vbt,"RoFormerForQuestionAnswering"),Vbt.forEach(t),JUo=r(ISe," (RoFormer model)"),ISe.forEach(t),YUo=i(X),c6=n(X,"LI",{});var NSe=s(c6);Pue=n(NSe,"STRONG",{});var Xbt=s(Pue);KUo=r(Xbt,"splinter"),Xbt.forEach(t),ZUo=r(NSe," \u2014 "),rz=n(NSe,"A",{href:!0});var zbt=s(rz);eJo=r(zbt,"SplinterForQuestionAnswering"),zbt.forEach(t),oJo=r(NSe," (Splinter model)"),NSe.forEach(t),rJo=i(X),f6=n(X,"LI",{});var qSe=s(f6);Bue=n(qSe,"STRONG",{});var Wbt=s(Bue);tJo=r(Wbt,"squeezebert"),Wbt.forEach(t),aJo=r(qSe," \u2014 "),tz=n(qSe,"A",{href:!0});var Qbt=s(tz);nJo=r(Qbt,"SqueezeBertForQuestionAnswering"),Qbt.forEach(t),sJo=r(qSe," (SqueezeBERT model)"),qSe.forEach(t),lJo=i(X),m6=n(X,"LI",{});var jSe=s(m6);Iue=n(jSe,"STRONG",{});var Hbt=s(Iue);iJo=r(Hbt,"xlm"),Hbt.forEach(t),dJo=r(jSe," \u2014 "),az=n(jSe,"A",{href:!0});var Ubt=s(az);cJo=r(Ubt,"XLMForQuestionAnsweringSimple"),Ubt.forEach(t),fJo=r(jSe," (XLM model)"),jSe.forEach(t),mJo=i(X),g6=n(X,"LI",{});var DSe=s(g6);Nue=n(DSe,"STRONG",{});var Jbt=s(Nue);gJo=r(Jbt,"xlm-roberta"),Jbt.forEach(t),hJo=r(DSe," \u2014 "),nz=n(DSe,"A",{href:!0});var Ybt=s(nz);pJo=r(Ybt,"XLMRobertaForQuestionAnswering"),Ybt.forEach(t),uJo=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),_Jo=i(X),h6=n(X,"LI",{});var GSe=s(h6);que=n(GSe,"STRONG",{});var Kbt=s(que);bJo=r(Kbt,"xlm-roberta-xl"),Kbt.forEach(t),vJo=r(GSe," \u2014 "),sz=n(GSe,"A",{href:!0});var Zbt=s(sz);FJo=r(Zbt,"XLMRobertaXLForQuestionAnswering"),Zbt.forEach(t),TJo=r(GSe," (XLM-RoBERTa-XL model)"),GSe.forEach(t),MJo=i(X),p6=n(X,"LI",{});var OSe=s(p6);jue=n(OSe,"STRONG",{});var evt=s(jue);EJo=r(evt,"xlnet"),evt.forEach(t),CJo=r(OSe," \u2014 "),lz=n(OSe,"A",{href:!0});var ovt=s(lz);wJo=r(ovt,"XLNetForQuestionAnsweringSimple"),ovt.forEach(t),AJo=r(OSe," (XLNet model)"),OSe.forEach(t),yJo=i(X),u6=n(X,"LI",{});var VSe=s(u6);Due=n(VSe,"STRONG",{});var rvt=s(Due);LJo=r(rvt,"yoso"),rvt.forEach(t),xJo=r(VSe," \u2014 "),iz=n(VSe,"A",{href:!0});var tvt=s(iz);$Jo=r(tvt,"YosoForQuestionAnswering"),tvt.forEach(t),kJo=r(VSe," (YOSO model)"),VSe.forEach(t),X.forEach(t),SJo=i(ga),_6=n(ga,"P",{});var XSe=s(_6);RJo=r(XSe,"The model is set in evaluation mode by default using "),Gue=n(XSe,"CODE",{});var avt=s(Gue);PJo=r(avt,"model.eval()"),avt.forEach(t),BJo=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(XSe,"CODE",{});var nvt=s(Oue);IJo=r(nvt,"model.train()"),nvt.forEach(t),XSe.forEach(t),NJo=i(ga),T(b6.$$.fragment,ga),ga.forEach(t),al.forEach(t),LDe=i(f),dd=n(f,"H2",{class:!0});var POe=s(dd);v6=n(POe,"A",{id:!0,class:!0,href:!0});var svt=s(v6);Vue=n(svt,"SPAN",{});var lvt=s(Vue);T(yy.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),qJo=i(POe),Xue=n(POe,"SPAN",{});var ivt=s(Xue);jJo=r(ivt,"AutoModelForTableQuestionAnswering"),ivt.forEach(t),POe.forEach(t),xDe=i(f),jo=n(f,"DIV",{class:!0});var nl=s(jo);T(Ly.$$.fragment,nl),DJo=i(nl),cd=n(nl,"P",{});var Gee=s(cd);GJo=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=n(Gee,"A",{href:!0});var dvt=s(dz);OJo=r(dvt,"from_pretrained()"),dvt.forEach(t),VJo=r(Gee," class method or the "),cz=n(Gee,"A",{href:!0});var cvt=s(cz);XJo=r(cvt,"from_config()"),cvt.forEach(t),zJo=r(Gee,` class
method.`),Gee.forEach(t),WJo=i(nl),xy=n(nl,"P",{});var BOe=s(xy);QJo=r(BOe,"This class cannot be instantiated directly using "),zue=n(BOe,"CODE",{});var fvt=s(zue);HJo=r(fvt,"__init__()"),fvt.forEach(t),UJo=r(BOe," (throws an error)."),BOe.forEach(t),JJo=i(nl),pt=n(nl,"DIV",{class:!0});var yw=s(pt);T($y.$$.fragment,yw),YJo=i(yw),Wue=n(yw,"P",{});var mvt=s(Wue);KJo=r(mvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mvt.forEach(t),ZJo=i(yw),fd=n(yw,"P",{});var Oee=s(fd);eYo=r(Oee,`Note:
Loading a model from its configuration file does `),Que=n(Oee,"STRONG",{});var gvt=s(Que);oYo=r(gvt,"not"),gvt.forEach(t),rYo=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(Oee,"A",{href:!0});var hvt=s(fz);tYo=r(hvt,"from_pretrained()"),hvt.forEach(t),aYo=r(Oee," to load the model weights."),Oee.forEach(t),nYo=i(yw),T(F6.$$.fragment,yw),yw.forEach(t),sYo=i(nl),so=n(nl,"DIV",{class:!0});var ha=s(so);T(ky.$$.fragment,ha),lYo=i(ha),Hue=n(ha,"P",{});var pvt=s(Hue);iYo=r(pvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pvt.forEach(t),dYo=i(ha),Oa=n(ha,"P",{});var Lw=s(Oa);cYo=r(Lw,"The model class to instantiate is selected based on the "),Uue=n(Lw,"CODE",{});var uvt=s(Uue);fYo=r(uvt,"model_type"),uvt.forEach(t),mYo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(Lw,"CODE",{});var _vt=s(Jue);gYo=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),hYo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(Lw,"CODE",{});var bvt=s(Yue);pYo=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),uYo=r(Lw,":"),Lw.forEach(t),_Yo=i(ha),Kue=n(ha,"UL",{});var vvt=s(Kue);T6=n(vvt,"LI",{});var zSe=s(T6);Zue=n(zSe,"STRONG",{});var Fvt=s(Zue);bYo=r(Fvt,"tapas"),Fvt.forEach(t),vYo=r(zSe," \u2014 "),mz=n(zSe,"A",{href:!0});var Tvt=s(mz);FYo=r(Tvt,"TapasForQuestionAnswering"),Tvt.forEach(t),TYo=r(zSe," (TAPAS model)"),zSe.forEach(t),vvt.forEach(t),MYo=i(ha),M6=n(ha,"P",{});var WSe=s(M6);EYo=r(WSe,"The model is set in evaluation mode by default using "),e_e=n(WSe,"CODE",{});var Mvt=s(e_e);CYo=r(Mvt,"model.eval()"),Mvt.forEach(t),wYo=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(WSe,"CODE",{});var Evt=s(o_e);AYo=r(Evt,"model.train()"),Evt.forEach(t),WSe.forEach(t),yYo=i(ha),T(E6.$$.fragment,ha),ha.forEach(t),nl.forEach(t),$De=i(f),md=n(f,"H2",{class:!0});var IOe=s(md);C6=n(IOe,"A",{id:!0,class:!0,href:!0});var Cvt=s(C6);r_e=n(Cvt,"SPAN",{});var wvt=s(r_e);T(Sy.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),LYo=i(IOe),t_e=n(IOe,"SPAN",{});var Avt=s(t_e);xYo=r(Avt,"AutoModelForImageClassification"),Avt.forEach(t),IOe.forEach(t),kDe=i(f),Do=n(f,"DIV",{class:!0});var sl=s(Do);T(Ry.$$.fragment,sl),$Yo=i(sl),gd=n(sl,"P",{});var Vee=s(gd);kYo=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gz=n(Vee,"A",{href:!0});var yvt=s(gz);SYo=r(yvt,"from_pretrained()"),yvt.forEach(t),RYo=r(Vee," class method or the "),hz=n(Vee,"A",{href:!0});var Lvt=s(hz);PYo=r(Lvt,"from_config()"),Lvt.forEach(t),BYo=r(Vee,` class
method.`),Vee.forEach(t),IYo=i(sl),Py=n(sl,"P",{});var NOe=s(Py);NYo=r(NOe,"This class cannot be instantiated directly using "),a_e=n(NOe,"CODE",{});var xvt=s(a_e);qYo=r(xvt,"__init__()"),xvt.forEach(t),jYo=r(NOe," (throws an error)."),NOe.forEach(t),DYo=i(sl),ut=n(sl,"DIV",{class:!0});var xw=s(ut);T(By.$$.fragment,xw),GYo=i(xw),n_e=n(xw,"P",{});var $vt=s(n_e);OYo=r($vt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$vt.forEach(t),VYo=i(xw),hd=n(xw,"P",{});var Xee=s(hd);XYo=r(Xee,`Note:
Loading a model from its configuration file does `),s_e=n(Xee,"STRONG",{});var kvt=s(s_e);zYo=r(kvt,"not"),kvt.forEach(t),WYo=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(Xee,"A",{href:!0});var Svt=s(pz);QYo=r(Svt,"from_pretrained()"),Svt.forEach(t),HYo=r(Xee," to load the model weights."),Xee.forEach(t),UYo=i(xw),T(w6.$$.fragment,xw),xw.forEach(t),JYo=i(sl),lo=n(sl,"DIV",{class:!0});var pa=s(lo);T(Iy.$$.fragment,pa),YYo=i(pa),l_e=n(pa,"P",{});var Rvt=s(l_e);KYo=r(Rvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rvt.forEach(t),ZYo=i(pa),Va=n(pa,"P",{});var $w=s(Va);eKo=r($w,"The model class to instantiate is selected based on the "),i_e=n($w,"CODE",{});var Pvt=s(i_e);oKo=r(Pvt,"model_type"),Pvt.forEach(t),rKo=r($w,` property of the config object (either
passed as an argument or loaded from `),d_e=n($w,"CODE",{});var Bvt=s(d_e);tKo=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),aKo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n($w,"CODE",{});var Ivt=s(c_e);nKo=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),sKo=r($w,":"),$w.forEach(t),lKo=i(pa),ve=n(pa,"UL",{});var Te=s(ve);A6=n(Te,"LI",{});var QSe=s(A6);f_e=n(QSe,"STRONG",{});var Nvt=s(f_e);iKo=r(Nvt,"beit"),Nvt.forEach(t),dKo=r(QSe," \u2014 "),uz=n(QSe,"A",{href:!0});var qvt=s(uz);cKo=r(qvt,"BeitForImageClassification"),qvt.forEach(t),fKo=r(QSe," (BEiT model)"),QSe.forEach(t),mKo=i(Te),y6=n(Te,"LI",{});var HSe=s(y6);m_e=n(HSe,"STRONG",{});var jvt=s(m_e);gKo=r(jvt,"convnext"),jvt.forEach(t),hKo=r(HSe," \u2014 "),_z=n(HSe,"A",{href:!0});var Dvt=s(_z);pKo=r(Dvt,"ConvNextForImageClassification"),Dvt.forEach(t),uKo=r(HSe," (ConvNeXT model)"),HSe.forEach(t),_Ko=i(Te),L6=n(Te,"LI",{});var USe=s(L6);g_e=n(USe,"STRONG",{});var Gvt=s(g_e);bKo=r(Gvt,"cvt"),Gvt.forEach(t),vKo=r(USe," \u2014 "),bz=n(USe,"A",{href:!0});var Ovt=s(bz);FKo=r(Ovt,"CvtForImageClassification"),Ovt.forEach(t),TKo=r(USe," (CvT model)"),USe.forEach(t),MKo=i(Te),x6=n(Te,"LI",{});var JSe=s(x6);h_e=n(JSe,"STRONG",{});var Vvt=s(h_e);EKo=r(Vvt,"data2vec-vision"),Vvt.forEach(t),CKo=r(JSe," \u2014 "),vz=n(JSe,"A",{href:!0});var Xvt=s(vz);wKo=r(Xvt,"Data2VecVisionForImageClassification"),Xvt.forEach(t),AKo=r(JSe," (Data2VecVision model)"),JSe.forEach(t),yKo=i(Te),Gs=n(Te,"LI",{});var yk=s(Gs);p_e=n(yk,"STRONG",{});var zvt=s(p_e);LKo=r(zvt,"deit"),zvt.forEach(t),xKo=r(yk," \u2014 "),Fz=n(yk,"A",{href:!0});var Wvt=s(Fz);$Ko=r(Wvt,"DeiTForImageClassification"),Wvt.forEach(t),kKo=r(yk," or "),Tz=n(yk,"A",{href:!0});var Qvt=s(Tz);SKo=r(Qvt,"DeiTForImageClassificationWithTeacher"),Qvt.forEach(t),RKo=r(yk," (DeiT model)"),yk.forEach(t),PKo=i(Te),$6=n(Te,"LI",{});var YSe=s($6);u_e=n(YSe,"STRONG",{});var Hvt=s(u_e);BKo=r(Hvt,"imagegpt"),Hvt.forEach(t),IKo=r(YSe," \u2014 "),Mz=n(YSe,"A",{href:!0});var Uvt=s(Mz);NKo=r(Uvt,"ImageGPTForImageClassification"),Uvt.forEach(t),qKo=r(YSe," (ImageGPT model)"),YSe.forEach(t),jKo=i(Te),Os=n(Te,"LI",{});var Lk=s(Os);__e=n(Lk,"STRONG",{});var Jvt=s(__e);DKo=r(Jvt,"levit"),Jvt.forEach(t),GKo=r(Lk," \u2014 "),Ez=n(Lk,"A",{href:!0});var Yvt=s(Ez);OKo=r(Yvt,"LevitForImageClassification"),Yvt.forEach(t),VKo=r(Lk," or "),Cz=n(Lk,"A",{href:!0});var Kvt=s(Cz);XKo=r(Kvt,"LevitForImageClassificationWithTeacher"),Kvt.forEach(t),zKo=r(Lk," (LeViT model)"),Lk.forEach(t),WKo=i(Te),_t=n(Te,"LI",{});var wf=s(_t);b_e=n(wf,"STRONG",{});var Zvt=s(b_e);QKo=r(Zvt,"perceiver"),Zvt.forEach(t),HKo=r(wf," \u2014 "),wz=n(wf,"A",{href:!0});var eFt=s(wz);UKo=r(eFt,"PerceiverForImageClassificationLearned"),eFt.forEach(t),JKo=r(wf," or "),Az=n(wf,"A",{href:!0});var oFt=s(Az);YKo=r(oFt,"PerceiverForImageClassificationFourier"),oFt.forEach(t),KKo=r(wf," or "),yz=n(wf,"A",{href:!0});var rFt=s(yz);ZKo=r(rFt,"PerceiverForImageClassificationConvProcessing"),rFt.forEach(t),eZo=r(wf," (Perceiver model)"),wf.forEach(t),oZo=i(Te),k6=n(Te,"LI",{});var KSe=s(k6);v_e=n(KSe,"STRONG",{});var tFt=s(v_e);rZo=r(tFt,"poolformer"),tFt.forEach(t),tZo=r(KSe," \u2014 "),Lz=n(KSe,"A",{href:!0});var aFt=s(Lz);aZo=r(aFt,"PoolFormerForImageClassification"),aFt.forEach(t),nZo=r(KSe," (PoolFormer model)"),KSe.forEach(t),sZo=i(Te),S6=n(Te,"LI",{});var ZSe=s(S6);F_e=n(ZSe,"STRONG",{});var nFt=s(F_e);lZo=r(nFt,"regnet"),nFt.forEach(t),iZo=r(ZSe," \u2014 "),xz=n(ZSe,"A",{href:!0});var sFt=s(xz);dZo=r(sFt,"RegNetForImageClassification"),sFt.forEach(t),cZo=r(ZSe," (RegNet model)"),ZSe.forEach(t),fZo=i(Te),R6=n(Te,"LI",{});var eRe=s(R6);T_e=n(eRe,"STRONG",{});var lFt=s(T_e);mZo=r(lFt,"resnet"),lFt.forEach(t),gZo=r(eRe," \u2014 "),$z=n(eRe,"A",{href:!0});var iFt=s($z);hZo=r(iFt,"ResNetForImageClassification"),iFt.forEach(t),pZo=r(eRe," (ResNet model)"),eRe.forEach(t),uZo=i(Te),P6=n(Te,"LI",{});var oRe=s(P6);M_e=n(oRe,"STRONG",{});var dFt=s(M_e);_Zo=r(dFt,"segformer"),dFt.forEach(t),bZo=r(oRe," \u2014 "),kz=n(oRe,"A",{href:!0});var cFt=s(kz);vZo=r(cFt,"SegformerForImageClassification"),cFt.forEach(t),FZo=r(oRe," (SegFormer model)"),oRe.forEach(t),TZo=i(Te),B6=n(Te,"LI",{});var rRe=s(B6);E_e=n(rRe,"STRONG",{});var fFt=s(E_e);MZo=r(fFt,"swin"),fFt.forEach(t),EZo=r(rRe," \u2014 "),Sz=n(rRe,"A",{href:!0});var mFt=s(Sz);CZo=r(mFt,"SwinForImageClassification"),mFt.forEach(t),wZo=r(rRe," (Swin Transformer model)"),rRe.forEach(t),AZo=i(Te),I6=n(Te,"LI",{});var tRe=s(I6);C_e=n(tRe,"STRONG",{});var gFt=s(C_e);yZo=r(gFt,"van"),gFt.forEach(t),LZo=r(tRe," \u2014 "),Rz=n(tRe,"A",{href:!0});var hFt=s(Rz);xZo=r(hFt,"VanForImageClassification"),hFt.forEach(t),$Zo=r(tRe," (VAN model)"),tRe.forEach(t),kZo=i(Te),N6=n(Te,"LI",{});var aRe=s(N6);w_e=n(aRe,"STRONG",{});var pFt=s(w_e);SZo=r(pFt,"vit"),pFt.forEach(t),RZo=r(aRe," \u2014 "),Pz=n(aRe,"A",{href:!0});var uFt=s(Pz);PZo=r(uFt,"ViTForImageClassification"),uFt.forEach(t),BZo=r(aRe," (ViT model)"),aRe.forEach(t),Te.forEach(t),IZo=i(pa),q6=n(pa,"P",{});var nRe=s(q6);NZo=r(nRe,"The model is set in evaluation mode by default using "),A_e=n(nRe,"CODE",{});var _Ft=s(A_e);qZo=r(_Ft,"model.eval()"),_Ft.forEach(t),jZo=r(nRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(nRe,"CODE",{});var bFt=s(y_e);DZo=r(bFt,"model.train()"),bFt.forEach(t),nRe.forEach(t),GZo=i(pa),T(j6.$$.fragment,pa),pa.forEach(t),sl.forEach(t),SDe=i(f),pd=n(f,"H2",{class:!0});var qOe=s(pd);D6=n(qOe,"A",{id:!0,class:!0,href:!0});var vFt=s(D6);L_e=n(vFt,"SPAN",{});var FFt=s(L_e);T(Ny.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),OZo=i(qOe),x_e=n(qOe,"SPAN",{});var TFt=s(x_e);VZo=r(TFt,"AutoModelForVision2Seq"),TFt.forEach(t),qOe.forEach(t),RDe=i(f),Go=n(f,"DIV",{class:!0});var ll=s(Go);T(qy.$$.fragment,ll),XZo=i(ll),ud=n(ll,"P",{});var zee=s(ud);zZo=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bz=n(zee,"A",{href:!0});var MFt=s(Bz);WZo=r(MFt,"from_pretrained()"),MFt.forEach(t),QZo=r(zee," class method or the "),Iz=n(zee,"A",{href:!0});var EFt=s(Iz);HZo=r(EFt,"from_config()"),EFt.forEach(t),UZo=r(zee,` class
method.`),zee.forEach(t),JZo=i(ll),jy=n(ll,"P",{});var jOe=s(jy);YZo=r(jOe,"This class cannot be instantiated directly using "),$_e=n(jOe,"CODE",{});var CFt=s($_e);KZo=r(CFt,"__init__()"),CFt.forEach(t),ZZo=r(jOe," (throws an error)."),jOe.forEach(t),eer=i(ll),bt=n(ll,"DIV",{class:!0});var kw=s(bt);T(Dy.$$.fragment,kw),oer=i(kw),k_e=n(kw,"P",{});var wFt=s(k_e);rer=r(wFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wFt.forEach(t),ter=i(kw),_d=n(kw,"P",{});var Wee=s(_d);aer=r(Wee,`Note:
Loading a model from its configuration file does `),S_e=n(Wee,"STRONG",{});var AFt=s(S_e);ner=r(AFt,"not"),AFt.forEach(t),ser=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Wee,"A",{href:!0});var yFt=s(Nz);ler=r(yFt,"from_pretrained()"),yFt.forEach(t),ier=r(Wee," to load the model weights."),Wee.forEach(t),der=i(kw),T(G6.$$.fragment,kw),kw.forEach(t),cer=i(ll),io=n(ll,"DIV",{class:!0});var ua=s(io);T(Gy.$$.fragment,ua),fer=i(ua),R_e=n(ua,"P",{});var LFt=s(R_e);mer=r(LFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LFt.forEach(t),ger=i(ua),Xa=n(ua,"P",{});var Sw=s(Xa);her=r(Sw,"The model class to instantiate is selected based on the "),P_e=n(Sw,"CODE",{});var xFt=s(P_e);per=r(xFt,"model_type"),xFt.forEach(t),uer=r(Sw,` property of the config object (either
passed as an argument or loaded from `),B_e=n(Sw,"CODE",{});var $Ft=s(B_e);_er=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),ber=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(Sw,"CODE",{});var kFt=s(I_e);ver=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),Fer=r(Sw,":"),Sw.forEach(t),Ter=i(ua),N_e=n(ua,"UL",{});var SFt=s(N_e);O6=n(SFt,"LI",{});var sRe=s(O6);q_e=n(sRe,"STRONG",{});var RFt=s(q_e);Mer=r(RFt,"vision-encoder-decoder"),RFt.forEach(t),Eer=r(sRe," \u2014 "),qz=n(sRe,"A",{href:!0});var PFt=s(qz);Cer=r(PFt,"VisionEncoderDecoderModel"),PFt.forEach(t),wer=r(sRe," (Vision Encoder decoder model)"),sRe.forEach(t),SFt.forEach(t),Aer=i(ua),V6=n(ua,"P",{});var lRe=s(V6);yer=r(lRe,"The model is set in evaluation mode by default using "),j_e=n(lRe,"CODE",{});var BFt=s(j_e);Ler=r(BFt,"model.eval()"),BFt.forEach(t),xer=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(lRe,"CODE",{});var IFt=s(D_e);$er=r(IFt,"model.train()"),IFt.forEach(t),lRe.forEach(t),ker=i(ua),T(X6.$$.fragment,ua),ua.forEach(t),ll.forEach(t),PDe=i(f),bd=n(f,"H2",{class:!0});var DOe=s(bd);z6=n(DOe,"A",{id:!0,class:!0,href:!0});var NFt=s(z6);G_e=n(NFt,"SPAN",{});var qFt=s(G_e);T(Oy.$$.fragment,qFt),qFt.forEach(t),NFt.forEach(t),Ser=i(DOe),O_e=n(DOe,"SPAN",{});var jFt=s(O_e);Rer=r(jFt,"AutoModelForVisualQuestionAnswering"),jFt.forEach(t),DOe.forEach(t),BDe=i(f),Oo=n(f,"DIV",{class:!0});var il=s(Oo);T(Vy.$$.fragment,il),Per=i(il),vd=n(il,"P",{});var Qee=s(vd);Ber=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jz=n(Qee,"A",{href:!0});var DFt=s(jz);Ier=r(DFt,"from_pretrained()"),DFt.forEach(t),Ner=r(Qee," class method or the "),Dz=n(Qee,"A",{href:!0});var GFt=s(Dz);qer=r(GFt,"from_config()"),GFt.forEach(t),jer=r(Qee,` class
method.`),Qee.forEach(t),Der=i(il),Xy=n(il,"P",{});var GOe=s(Xy);Ger=r(GOe,"This class cannot be instantiated directly using "),V_e=n(GOe,"CODE",{});var OFt=s(V_e);Oer=r(OFt,"__init__()"),OFt.forEach(t),Ver=r(GOe," (throws an error)."),GOe.forEach(t),Xer=i(il),vt=n(il,"DIV",{class:!0});var Rw=s(vt);T(zy.$$.fragment,Rw),zer=i(Rw),X_e=n(Rw,"P",{});var VFt=s(X_e);Wer=r(VFt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),VFt.forEach(t),Qer=i(Rw),Fd=n(Rw,"P",{});var Hee=s(Fd);Her=r(Hee,`Note:
Loading a model from its configuration file does `),z_e=n(Hee,"STRONG",{});var XFt=s(z_e);Uer=r(XFt,"not"),XFt.forEach(t),Jer=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(Hee,"A",{href:!0});var zFt=s(Gz);Yer=r(zFt,"from_pretrained()"),zFt.forEach(t),Ker=r(Hee," to load the model weights."),Hee.forEach(t),Zer=i(Rw),T(W6.$$.fragment,Rw),Rw.forEach(t),eor=i(il),co=n(il,"DIV",{class:!0});var _a=s(co);T(Wy.$$.fragment,_a),oor=i(_a),W_e=n(_a,"P",{});var WFt=s(W_e);ror=r(WFt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),WFt.forEach(t),tor=i(_a),za=n(_a,"P",{});var Pw=s(za);aor=r(Pw,"The model class to instantiate is selected based on the "),Q_e=n(Pw,"CODE",{});var QFt=s(Q_e);nor=r(QFt,"model_type"),QFt.forEach(t),sor=r(Pw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(Pw,"CODE",{});var HFt=s(H_e);lor=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),ior=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(Pw,"CODE",{});var UFt=s(U_e);dor=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),cor=r(Pw,":"),Pw.forEach(t),mor=i(_a),J_e=n(_a,"UL",{});var JFt=s(J_e);Q6=n(JFt,"LI",{});var iRe=s(Q6);Y_e=n(iRe,"STRONG",{});var YFt=s(Y_e);gor=r(YFt,"vilt"),YFt.forEach(t),hor=r(iRe," \u2014 "),Oz=n(iRe,"A",{href:!0});var KFt=s(Oz);por=r(KFt,"ViltForQuestionAnswering"),KFt.forEach(t),uor=r(iRe," (ViLT model)"),iRe.forEach(t),JFt.forEach(t),_or=i(_a),H6=n(_a,"P",{});var dRe=s(H6);bor=r(dRe,"The model is set in evaluation mode by default using "),K_e=n(dRe,"CODE",{});var ZFt=s(K_e);vor=r(ZFt,"model.eval()"),ZFt.forEach(t),For=r(dRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(dRe,"CODE",{});var e6t=s(Z_e);Tor=r(e6t,"model.train()"),e6t.forEach(t),dRe.forEach(t),Mor=i(_a),T(U6.$$.fragment,_a),_a.forEach(t),il.forEach(t),IDe=i(f),Td=n(f,"H2",{class:!0});var OOe=s(Td);J6=n(OOe,"A",{id:!0,class:!0,href:!0});var o6t=s(J6);e2e=n(o6t,"SPAN",{});var r6t=s(e2e);T(Qy.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),Eor=i(OOe),o2e=n(OOe,"SPAN",{});var t6t=s(o2e);Cor=r(t6t,"AutoModelForAudioClassification"),t6t.forEach(t),OOe.forEach(t),NDe=i(f),Vo=n(f,"DIV",{class:!0});var dl=s(Vo);T(Hy.$$.fragment,dl),wor=i(dl),Md=n(dl,"P",{});var Uee=s(Md);Aor=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Vz=n(Uee,"A",{href:!0});var a6t=s(Vz);yor=r(a6t,"from_pretrained()"),a6t.forEach(t),Lor=r(Uee," class method or the "),Xz=n(Uee,"A",{href:!0});var n6t=s(Xz);xor=r(n6t,"from_config()"),n6t.forEach(t),$or=r(Uee,` class
method.`),Uee.forEach(t),kor=i(dl),Uy=n(dl,"P",{});var VOe=s(Uy);Sor=r(VOe,"This class cannot be instantiated directly using "),r2e=n(VOe,"CODE",{});var s6t=s(r2e);Ror=r(s6t,"__init__()"),s6t.forEach(t),Por=r(VOe," (throws an error)."),VOe.forEach(t),Bor=i(dl),Ft=n(dl,"DIV",{class:!0});var Bw=s(Ft);T(Jy.$$.fragment,Bw),Ior=i(Bw),t2e=n(Bw,"P",{});var l6t=s(t2e);Nor=r(l6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),l6t.forEach(t),qor=i(Bw),Ed=n(Bw,"P",{});var Jee=s(Ed);jor=r(Jee,`Note:
Loading a model from its configuration file does `),a2e=n(Jee,"STRONG",{});var i6t=s(a2e);Dor=r(i6t,"not"),i6t.forEach(t),Gor=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(Jee,"A",{href:!0});var d6t=s(zz);Oor=r(d6t,"from_pretrained()"),d6t.forEach(t),Vor=r(Jee," to load the model weights."),Jee.forEach(t),Xor=i(Bw),T(Y6.$$.fragment,Bw),Bw.forEach(t),zor=i(dl),fo=n(dl,"DIV",{class:!0});var ba=s(fo);T(Yy.$$.fragment,ba),Wor=i(ba),n2e=n(ba,"P",{});var c6t=s(n2e);Qor=r(c6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),c6t.forEach(t),Hor=i(ba),Wa=n(ba,"P",{});var Iw=s(Wa);Uor=r(Iw,"The model class to instantiate is selected based on the "),s2e=n(Iw,"CODE",{});var f6t=s(s2e);Jor=r(f6t,"model_type"),f6t.forEach(t),Yor=r(Iw,` property of the config object (either
passed as an argument or loaded from `),l2e=n(Iw,"CODE",{});var m6t=s(l2e);Kor=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),Zor=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(Iw,"CODE",{});var g6t=s(i2e);err=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),orr=r(Iw,":"),Iw.forEach(t),rrr=i(ba),Re=n(ba,"UL",{});var Xe=s(Re);K6=n(Xe,"LI",{});var cRe=s(K6);d2e=n(cRe,"STRONG",{});var h6t=s(d2e);trr=r(h6t,"data2vec-audio"),h6t.forEach(t),arr=r(cRe," \u2014 "),Wz=n(cRe,"A",{href:!0});var p6t=s(Wz);nrr=r(p6t,"Data2VecAudioForSequenceClassification"),p6t.forEach(t),srr=r(cRe," (Data2VecAudio model)"),cRe.forEach(t),lrr=i(Xe),Z6=n(Xe,"LI",{});var fRe=s(Z6);c2e=n(fRe,"STRONG",{});var u6t=s(c2e);irr=r(u6t,"hubert"),u6t.forEach(t),drr=r(fRe," \u2014 "),Qz=n(fRe,"A",{href:!0});var _6t=s(Qz);crr=r(_6t,"HubertForSequenceClassification"),_6t.forEach(t),frr=r(fRe," (Hubert model)"),fRe.forEach(t),mrr=i(Xe),eT=n(Xe,"LI",{});var mRe=s(eT);f2e=n(mRe,"STRONG",{});var b6t=s(f2e);grr=r(b6t,"sew"),b6t.forEach(t),hrr=r(mRe," \u2014 "),Hz=n(mRe,"A",{href:!0});var v6t=s(Hz);prr=r(v6t,"SEWForSequenceClassification"),v6t.forEach(t),urr=r(mRe," (SEW model)"),mRe.forEach(t),_rr=i(Xe),oT=n(Xe,"LI",{});var gRe=s(oT);m2e=n(gRe,"STRONG",{});var F6t=s(m2e);brr=r(F6t,"sew-d"),F6t.forEach(t),vrr=r(gRe," \u2014 "),Uz=n(gRe,"A",{href:!0});var T6t=s(Uz);Frr=r(T6t,"SEWDForSequenceClassification"),T6t.forEach(t),Trr=r(gRe," (SEW-D model)"),gRe.forEach(t),Mrr=i(Xe),rT=n(Xe,"LI",{});var hRe=s(rT);g2e=n(hRe,"STRONG",{});var M6t=s(g2e);Err=r(M6t,"unispeech"),M6t.forEach(t),Crr=r(hRe," \u2014 "),Jz=n(hRe,"A",{href:!0});var E6t=s(Jz);wrr=r(E6t,"UniSpeechForSequenceClassification"),E6t.forEach(t),Arr=r(hRe," (UniSpeech model)"),hRe.forEach(t),yrr=i(Xe),tT=n(Xe,"LI",{});var pRe=s(tT);h2e=n(pRe,"STRONG",{});var C6t=s(h2e);Lrr=r(C6t,"unispeech-sat"),C6t.forEach(t),xrr=r(pRe," \u2014 "),Yz=n(pRe,"A",{href:!0});var w6t=s(Yz);$rr=r(w6t,"UniSpeechSatForSequenceClassification"),w6t.forEach(t),krr=r(pRe," (UniSpeechSat model)"),pRe.forEach(t),Srr=i(Xe),aT=n(Xe,"LI",{});var uRe=s(aT);p2e=n(uRe,"STRONG",{});var A6t=s(p2e);Rrr=r(A6t,"wav2vec2"),A6t.forEach(t),Prr=r(uRe," \u2014 "),Kz=n(uRe,"A",{href:!0});var y6t=s(Kz);Brr=r(y6t,"Wav2Vec2ForSequenceClassification"),y6t.forEach(t),Irr=r(uRe," (Wav2Vec2 model)"),uRe.forEach(t),Nrr=i(Xe),nT=n(Xe,"LI",{});var _Re=s(nT);u2e=n(_Re,"STRONG",{});var L6t=s(u2e);qrr=r(L6t,"wav2vec2-conformer"),L6t.forEach(t),jrr=r(_Re," \u2014 "),Zz=n(_Re,"A",{href:!0});var x6t=s(Zz);Drr=r(x6t,"Wav2Vec2ConformerForSequenceClassification"),x6t.forEach(t),Grr=r(_Re," (Wav2Vec2-Conformer model)"),_Re.forEach(t),Orr=i(Xe),sT=n(Xe,"LI",{});var bRe=s(sT);_2e=n(bRe,"STRONG",{});var $6t=s(_2e);Vrr=r($6t,"wavlm"),$6t.forEach(t),Xrr=r(bRe," \u2014 "),eW=n(bRe,"A",{href:!0});var k6t=s(eW);zrr=r(k6t,"WavLMForSequenceClassification"),k6t.forEach(t),Wrr=r(bRe," (WavLM model)"),bRe.forEach(t),Xe.forEach(t),Qrr=i(ba),lT=n(ba,"P",{});var vRe=s(lT);Hrr=r(vRe,"The model is set in evaluation mode by default using "),b2e=n(vRe,"CODE",{});var S6t=s(b2e);Urr=r(S6t,"model.eval()"),S6t.forEach(t),Jrr=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(vRe,"CODE",{});var R6t=s(v2e);Yrr=r(R6t,"model.train()"),R6t.forEach(t),vRe.forEach(t),Krr=i(ba),T(iT.$$.fragment,ba),ba.forEach(t),dl.forEach(t),qDe=i(f),Cd=n(f,"H2",{class:!0});var XOe=s(Cd);dT=n(XOe,"A",{id:!0,class:!0,href:!0});var P6t=s(dT);F2e=n(P6t,"SPAN",{});var B6t=s(F2e);T(Ky.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),Zrr=i(XOe),T2e=n(XOe,"SPAN",{});var I6t=s(T2e);etr=r(I6t,"AutoModelForAudioFrameClassification"),I6t.forEach(t),XOe.forEach(t),jDe=i(f),Xo=n(f,"DIV",{class:!0});var cl=s(Xo);T(Zy.$$.fragment,cl),otr=i(cl),wd=n(cl,"P",{});var Yee=s(wd);rtr=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oW=n(Yee,"A",{href:!0});var N6t=s(oW);ttr=r(N6t,"from_pretrained()"),N6t.forEach(t),atr=r(Yee," class method or the "),rW=n(Yee,"A",{href:!0});var q6t=s(rW);ntr=r(q6t,"from_config()"),q6t.forEach(t),str=r(Yee,` class
method.`),Yee.forEach(t),ltr=i(cl),eL=n(cl,"P",{});var zOe=s(eL);itr=r(zOe,"This class cannot be instantiated directly using "),M2e=n(zOe,"CODE",{});var j6t=s(M2e);dtr=r(j6t,"__init__()"),j6t.forEach(t),ctr=r(zOe," (throws an error)."),zOe.forEach(t),ftr=i(cl),Tt=n(cl,"DIV",{class:!0});var Nw=s(Tt);T(oL.$$.fragment,Nw),mtr=i(Nw),E2e=n(Nw,"P",{});var D6t=s(E2e);gtr=r(D6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),D6t.forEach(t),htr=i(Nw),Ad=n(Nw,"P",{});var Kee=s(Ad);ptr=r(Kee,`Note:
Loading a model from its configuration file does `),C2e=n(Kee,"STRONG",{});var G6t=s(C2e);utr=r(G6t,"not"),G6t.forEach(t),_tr=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(Kee,"A",{href:!0});var O6t=s(tW);btr=r(O6t,"from_pretrained()"),O6t.forEach(t),vtr=r(Kee," to load the model weights."),Kee.forEach(t),Ftr=i(Nw),T(cT.$$.fragment,Nw),Nw.forEach(t),Ttr=i(cl),mo=n(cl,"DIV",{class:!0});var va=s(mo);T(rL.$$.fragment,va),Mtr=i(va),w2e=n(va,"P",{});var V6t=s(w2e);Etr=r(V6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),V6t.forEach(t),Ctr=i(va),Qa=n(va,"P",{});var qw=s(Qa);wtr=r(qw,"The model class to instantiate is selected based on the "),A2e=n(qw,"CODE",{});var X6t=s(A2e);Atr=r(X6t,"model_type"),X6t.forEach(t),ytr=r(qw,` property of the config object (either
passed as an argument or loaded from `),y2e=n(qw,"CODE",{});var z6t=s(y2e);Ltr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),xtr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(qw,"CODE",{});var W6t=s(L2e);$tr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),ktr=r(qw,":"),qw.forEach(t),Str=i(va),et=n(va,"UL",{});var fl=s(et);fT=n(fl,"LI",{});var FRe=s(fT);x2e=n(FRe,"STRONG",{});var Q6t=s(x2e);Rtr=r(Q6t,"data2vec-audio"),Q6t.forEach(t),Ptr=r(FRe," \u2014 "),aW=n(FRe,"A",{href:!0});var H6t=s(aW);Btr=r(H6t,"Data2VecAudioForAudioFrameClassification"),H6t.forEach(t),Itr=r(FRe," (Data2VecAudio model)"),FRe.forEach(t),Ntr=i(fl),mT=n(fl,"LI",{});var TRe=s(mT);$2e=n(TRe,"STRONG",{});var U6t=s($2e);qtr=r(U6t,"unispeech-sat"),U6t.forEach(t),jtr=r(TRe," \u2014 "),nW=n(TRe,"A",{href:!0});var J6t=s(nW);Dtr=r(J6t,"UniSpeechSatForAudioFrameClassification"),J6t.forEach(t),Gtr=r(TRe," (UniSpeechSat model)"),TRe.forEach(t),Otr=i(fl),gT=n(fl,"LI",{});var MRe=s(gT);k2e=n(MRe,"STRONG",{});var Y6t=s(k2e);Vtr=r(Y6t,"wav2vec2"),Y6t.forEach(t),Xtr=r(MRe," \u2014 "),sW=n(MRe,"A",{href:!0});var K6t=s(sW);ztr=r(K6t,"Wav2Vec2ForAudioFrameClassification"),K6t.forEach(t),Wtr=r(MRe," (Wav2Vec2 model)"),MRe.forEach(t),Qtr=i(fl),hT=n(fl,"LI",{});var ERe=s(hT);S2e=n(ERe,"STRONG",{});var Z6t=s(S2e);Htr=r(Z6t,"wav2vec2-conformer"),Z6t.forEach(t),Utr=r(ERe," \u2014 "),lW=n(ERe,"A",{href:!0});var eTt=s(lW);Jtr=r(eTt,"Wav2Vec2ConformerForAudioFrameClassification"),eTt.forEach(t),Ytr=r(ERe," (Wav2Vec2-Conformer model)"),ERe.forEach(t),Ktr=i(fl),pT=n(fl,"LI",{});var CRe=s(pT);R2e=n(CRe,"STRONG",{});var oTt=s(R2e);Ztr=r(oTt,"wavlm"),oTt.forEach(t),ear=r(CRe," \u2014 "),iW=n(CRe,"A",{href:!0});var rTt=s(iW);oar=r(rTt,"WavLMForAudioFrameClassification"),rTt.forEach(t),rar=r(CRe," (WavLM model)"),CRe.forEach(t),fl.forEach(t),tar=i(va),uT=n(va,"P",{});var wRe=s(uT);aar=r(wRe,"The model is set in evaluation mode by default using "),P2e=n(wRe,"CODE",{});var tTt=s(P2e);nar=r(tTt,"model.eval()"),tTt.forEach(t),sar=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(wRe,"CODE",{});var aTt=s(B2e);lar=r(aTt,"model.train()"),aTt.forEach(t),wRe.forEach(t),iar=i(va),T(_T.$$.fragment,va),va.forEach(t),cl.forEach(t),DDe=i(f),yd=n(f,"H2",{class:!0});var WOe=s(yd);bT=n(WOe,"A",{id:!0,class:!0,href:!0});var nTt=s(bT);I2e=n(nTt,"SPAN",{});var sTt=s(I2e);T(tL.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),dar=i(WOe),N2e=n(WOe,"SPAN",{});var lTt=s(N2e);car=r(lTt,"AutoModelForCTC"),lTt.forEach(t),WOe.forEach(t),GDe=i(f),zo=n(f,"DIV",{class:!0});var ml=s(zo);T(aL.$$.fragment,ml),far=i(ml),Ld=n(ml,"P",{});var Zee=s(Ld);mar=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dW=n(Zee,"A",{href:!0});var iTt=s(dW);gar=r(iTt,"from_pretrained()"),iTt.forEach(t),har=r(Zee," class method or the "),cW=n(Zee,"A",{href:!0});var dTt=s(cW);par=r(dTt,"from_config()"),dTt.forEach(t),uar=r(Zee,` class
method.`),Zee.forEach(t),_ar=i(ml),nL=n(ml,"P",{});var QOe=s(nL);bar=r(QOe,"This class cannot be instantiated directly using "),q2e=n(QOe,"CODE",{});var cTt=s(q2e);Far=r(cTt,"__init__()"),cTt.forEach(t),Tar=r(QOe," (throws an error)."),QOe.forEach(t),Mar=i(ml),Mt=n(ml,"DIV",{class:!0});var jw=s(Mt);T(sL.$$.fragment,jw),Ear=i(jw),j2e=n(jw,"P",{});var fTt=s(j2e);Car=r(fTt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fTt.forEach(t),war=i(jw),xd=n(jw,"P",{});var eoe=s(xd);Aar=r(eoe,`Note:
Loading a model from its configuration file does `),D2e=n(eoe,"STRONG",{});var mTt=s(D2e);yar=r(mTt,"not"),mTt.forEach(t),Lar=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(eoe,"A",{href:!0});var gTt=s(fW);xar=r(gTt,"from_pretrained()"),gTt.forEach(t),$ar=r(eoe," to load the model weights."),eoe.forEach(t),kar=i(jw),T(vT.$$.fragment,jw),jw.forEach(t),Sar=i(ml),go=n(ml,"DIV",{class:!0});var Fa=s(go);T(lL.$$.fragment,Fa),Rar=i(Fa),G2e=n(Fa,"P",{});var hTt=s(G2e);Par=r(hTt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hTt.forEach(t),Bar=i(Fa),Ha=n(Fa,"P",{});var Dw=s(Ha);Iar=r(Dw,"The model class to instantiate is selected based on the "),O2e=n(Dw,"CODE",{});var pTt=s(O2e);Nar=r(pTt,"model_type"),pTt.forEach(t),qar=r(Dw,` property of the config object (either
passed as an argument or loaded from `),V2e=n(Dw,"CODE",{});var uTt=s(V2e);jar=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Dar=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(Dw,"CODE",{});var _Tt=s(X2e);Gar=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),Oar=r(Dw,":"),Dw.forEach(t),Var=i(Fa),ye=n(Fa,"UL",{});var Be=s(ye);FT=n(Be,"LI",{});var ARe=s(FT);z2e=n(ARe,"STRONG",{});var bTt=s(z2e);Xar=r(bTt,"data2vec-audio"),bTt.forEach(t),zar=r(ARe," \u2014 "),mW=n(ARe,"A",{href:!0});var vTt=s(mW);War=r(vTt,"Data2VecAudioForCTC"),vTt.forEach(t),Qar=r(ARe," (Data2VecAudio model)"),ARe.forEach(t),Har=i(Be),TT=n(Be,"LI",{});var yRe=s(TT);W2e=n(yRe,"STRONG",{});var FTt=s(W2e);Uar=r(FTt,"hubert"),FTt.forEach(t),Jar=r(yRe," \u2014 "),gW=n(yRe,"A",{href:!0});var TTt=s(gW);Yar=r(TTt,"HubertForCTC"),TTt.forEach(t),Kar=r(yRe," (Hubert model)"),yRe.forEach(t),Zar=i(Be),MT=n(Be,"LI",{});var LRe=s(MT);Q2e=n(LRe,"STRONG",{});var MTt=s(Q2e);enr=r(MTt,"mctct"),MTt.forEach(t),onr=r(LRe," \u2014 "),hW=n(LRe,"A",{href:!0});var ETt=s(hW);rnr=r(ETt,"MCTCTForCTC"),ETt.forEach(t),tnr=r(LRe," (M-CTC-T model)"),LRe.forEach(t),anr=i(Be),ET=n(Be,"LI",{});var xRe=s(ET);H2e=n(xRe,"STRONG",{});var CTt=s(H2e);nnr=r(CTt,"sew"),CTt.forEach(t),snr=r(xRe," \u2014 "),pW=n(xRe,"A",{href:!0});var wTt=s(pW);lnr=r(wTt,"SEWForCTC"),wTt.forEach(t),inr=r(xRe," (SEW model)"),xRe.forEach(t),dnr=i(Be),CT=n(Be,"LI",{});var $Re=s(CT);U2e=n($Re,"STRONG",{});var ATt=s(U2e);cnr=r(ATt,"sew-d"),ATt.forEach(t),fnr=r($Re," \u2014 "),uW=n($Re,"A",{href:!0});var yTt=s(uW);mnr=r(yTt,"SEWDForCTC"),yTt.forEach(t),gnr=r($Re," (SEW-D model)"),$Re.forEach(t),hnr=i(Be),wT=n(Be,"LI",{});var kRe=s(wT);J2e=n(kRe,"STRONG",{});var LTt=s(J2e);pnr=r(LTt,"unispeech"),LTt.forEach(t),unr=r(kRe," \u2014 "),_W=n(kRe,"A",{href:!0});var xTt=s(_W);_nr=r(xTt,"UniSpeechForCTC"),xTt.forEach(t),bnr=r(kRe," (UniSpeech model)"),kRe.forEach(t),vnr=i(Be),AT=n(Be,"LI",{});var SRe=s(AT);Y2e=n(SRe,"STRONG",{});var $Tt=s(Y2e);Fnr=r($Tt,"unispeech-sat"),$Tt.forEach(t),Tnr=r(SRe," \u2014 "),bW=n(SRe,"A",{href:!0});var kTt=s(bW);Mnr=r(kTt,"UniSpeechSatForCTC"),kTt.forEach(t),Enr=r(SRe," (UniSpeechSat model)"),SRe.forEach(t),Cnr=i(Be),yT=n(Be,"LI",{});var RRe=s(yT);K2e=n(RRe,"STRONG",{});var STt=s(K2e);wnr=r(STt,"wav2vec2"),STt.forEach(t),Anr=r(RRe," \u2014 "),vW=n(RRe,"A",{href:!0});var RTt=s(vW);ynr=r(RTt,"Wav2Vec2ForCTC"),RTt.forEach(t),Lnr=r(RRe," (Wav2Vec2 model)"),RRe.forEach(t),xnr=i(Be),LT=n(Be,"LI",{});var PRe=s(LT);Z2e=n(PRe,"STRONG",{});var PTt=s(Z2e);$nr=r(PTt,"wav2vec2-conformer"),PTt.forEach(t),knr=r(PRe," \u2014 "),FW=n(PRe,"A",{href:!0});var BTt=s(FW);Snr=r(BTt,"Wav2Vec2ConformerForCTC"),BTt.forEach(t),Rnr=r(PRe," (Wav2Vec2-Conformer model)"),PRe.forEach(t),Pnr=i(Be),xT=n(Be,"LI",{});var BRe=s(xT);e1e=n(BRe,"STRONG",{});var ITt=s(e1e);Bnr=r(ITt,"wavlm"),ITt.forEach(t),Inr=r(BRe," \u2014 "),TW=n(BRe,"A",{href:!0});var NTt=s(TW);Nnr=r(NTt,"WavLMForCTC"),NTt.forEach(t),qnr=r(BRe," (WavLM model)"),BRe.forEach(t),Be.forEach(t),jnr=i(Fa),$T=n(Fa,"P",{});var IRe=s($T);Dnr=r(IRe,"The model is set in evaluation mode by default using "),o1e=n(IRe,"CODE",{});var qTt=s(o1e);Gnr=r(qTt,"model.eval()"),qTt.forEach(t),Onr=r(IRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(IRe,"CODE",{});var jTt=s(r1e);Vnr=r(jTt,"model.train()"),jTt.forEach(t),IRe.forEach(t),Xnr=i(Fa),T(kT.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),ODe=i(f),$d=n(f,"H2",{class:!0});var HOe=s($d);ST=n(HOe,"A",{id:!0,class:!0,href:!0});var DTt=s(ST);t1e=n(DTt,"SPAN",{});var GTt=s(t1e);T(iL.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),znr=i(HOe),a1e=n(HOe,"SPAN",{});var OTt=s(a1e);Wnr=r(OTt,"AutoModelForSpeechSeq2Seq"),OTt.forEach(t),HOe.forEach(t),VDe=i(f),Wo=n(f,"DIV",{class:!0});var gl=s(Wo);T(dL.$$.fragment,gl),Qnr=i(gl),kd=n(gl,"P",{});var ooe=s(kd);Hnr=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MW=n(ooe,"A",{href:!0});var VTt=s(MW);Unr=r(VTt,"from_pretrained()"),VTt.forEach(t),Jnr=r(ooe," class method or the "),EW=n(ooe,"A",{href:!0});var XTt=s(EW);Ynr=r(XTt,"from_config()"),XTt.forEach(t),Knr=r(ooe,` class
method.`),ooe.forEach(t),Znr=i(gl),cL=n(gl,"P",{});var UOe=s(cL);esr=r(UOe,"This class cannot be instantiated directly using "),n1e=n(UOe,"CODE",{});var zTt=s(n1e);osr=r(zTt,"__init__()"),zTt.forEach(t),rsr=r(UOe," (throws an error)."),UOe.forEach(t),tsr=i(gl),Et=n(gl,"DIV",{class:!0});var Gw=s(Et);T(fL.$$.fragment,Gw),asr=i(Gw),s1e=n(Gw,"P",{});var WTt=s(s1e);nsr=r(WTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WTt.forEach(t),ssr=i(Gw),Sd=n(Gw,"P",{});var roe=s(Sd);lsr=r(roe,`Note:
Loading a model from its configuration file does `),l1e=n(roe,"STRONG",{});var QTt=s(l1e);isr=r(QTt,"not"),QTt.forEach(t),dsr=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(roe,"A",{href:!0});var HTt=s(CW);csr=r(HTt,"from_pretrained()"),HTt.forEach(t),fsr=r(roe," to load the model weights."),roe.forEach(t),msr=i(Gw),T(RT.$$.fragment,Gw),Gw.forEach(t),gsr=i(gl),ho=n(gl,"DIV",{class:!0});var Ta=s(ho);T(mL.$$.fragment,Ta),hsr=i(Ta),i1e=n(Ta,"P",{});var UTt=s(i1e);psr=r(UTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UTt.forEach(t),usr=i(Ta),Ua=n(Ta,"P",{});var Ow=s(Ua);_sr=r(Ow,"The model class to instantiate is selected based on the "),d1e=n(Ow,"CODE",{});var JTt=s(d1e);bsr=r(JTt,"model_type"),JTt.forEach(t),vsr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),c1e=n(Ow,"CODE",{});var YTt=s(c1e);Fsr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),Tsr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(Ow,"CODE",{});var KTt=s(f1e);Msr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),Esr=r(Ow,":"),Ow.forEach(t),Csr=i(Ta),gL=n(Ta,"UL",{});var JOe=s(gL);PT=n(JOe,"LI",{});var NRe=s(PT);m1e=n(NRe,"STRONG",{});var ZTt=s(m1e);wsr=r(ZTt,"speech-encoder-decoder"),ZTt.forEach(t),Asr=r(NRe," \u2014 "),wW=n(NRe,"A",{href:!0});var e7t=s(wW);ysr=r(e7t,"SpeechEncoderDecoderModel"),e7t.forEach(t),Lsr=r(NRe," (Speech Encoder decoder model)"),NRe.forEach(t),xsr=i(JOe),BT=n(JOe,"LI",{});var qRe=s(BT);g1e=n(qRe,"STRONG",{});var o7t=s(g1e);$sr=r(o7t,"speech_to_text"),o7t.forEach(t),ksr=r(qRe," \u2014 "),AW=n(qRe,"A",{href:!0});var r7t=s(AW);Ssr=r(r7t,"Speech2TextForConditionalGeneration"),r7t.forEach(t),Rsr=r(qRe," (Speech2Text model)"),qRe.forEach(t),JOe.forEach(t),Psr=i(Ta),IT=n(Ta,"P",{});var jRe=s(IT);Bsr=r(jRe,"The model is set in evaluation mode by default using "),h1e=n(jRe,"CODE",{});var t7t=s(h1e);Isr=r(t7t,"model.eval()"),t7t.forEach(t),Nsr=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(jRe,"CODE",{});var a7t=s(p1e);qsr=r(a7t,"model.train()"),a7t.forEach(t),jRe.forEach(t),jsr=i(Ta),T(NT.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),XDe=i(f),Rd=n(f,"H2",{class:!0});var YOe=s(Rd);qT=n(YOe,"A",{id:!0,class:!0,href:!0});var n7t=s(qT);u1e=n(n7t,"SPAN",{});var s7t=s(u1e);T(hL.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),Dsr=i(YOe),_1e=n(YOe,"SPAN",{});var l7t=s(_1e);Gsr=r(l7t,"AutoModelForAudioXVector"),l7t.forEach(t),YOe.forEach(t),zDe=i(f),Qo=n(f,"DIV",{class:!0});var hl=s(Qo);T(pL.$$.fragment,hl),Osr=i(hl),Pd=n(hl,"P",{});var toe=s(Pd);Vsr=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yW=n(toe,"A",{href:!0});var i7t=s(yW);Xsr=r(i7t,"from_pretrained()"),i7t.forEach(t),zsr=r(toe," class method or the "),LW=n(toe,"A",{href:!0});var d7t=s(LW);Wsr=r(d7t,"from_config()"),d7t.forEach(t),Qsr=r(toe,` class
method.`),toe.forEach(t),Hsr=i(hl),uL=n(hl,"P",{});var KOe=s(uL);Usr=r(KOe,"This class cannot be instantiated directly using "),b1e=n(KOe,"CODE",{});var c7t=s(b1e);Jsr=r(c7t,"__init__()"),c7t.forEach(t),Ysr=r(KOe," (throws an error)."),KOe.forEach(t),Ksr=i(hl),Ct=n(hl,"DIV",{class:!0});var Vw=s(Ct);T(_L.$$.fragment,Vw),Zsr=i(Vw),v1e=n(Vw,"P",{});var f7t=s(v1e);elr=r(f7t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),f7t.forEach(t),olr=i(Vw),Bd=n(Vw,"P",{});var aoe=s(Bd);rlr=r(aoe,`Note:
Loading a model from its configuration file does `),F1e=n(aoe,"STRONG",{});var m7t=s(F1e);tlr=r(m7t,"not"),m7t.forEach(t),alr=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(aoe,"A",{href:!0});var g7t=s(xW);nlr=r(g7t,"from_pretrained()"),g7t.forEach(t),slr=r(aoe," to load the model weights."),aoe.forEach(t),llr=i(Vw),T(jT.$$.fragment,Vw),Vw.forEach(t),ilr=i(hl),po=n(hl,"DIV",{class:!0});var Ma=s(po);T(bL.$$.fragment,Ma),dlr=i(Ma),T1e=n(Ma,"P",{});var h7t=s(T1e);clr=r(h7t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),h7t.forEach(t),flr=i(Ma),Ja=n(Ma,"P",{});var Xw=s(Ja);mlr=r(Xw,"The model class to instantiate is selected based on the "),M1e=n(Xw,"CODE",{});var p7t=s(M1e);glr=r(p7t,"model_type"),p7t.forEach(t),hlr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),E1e=n(Xw,"CODE",{});var u7t=s(E1e);plr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),ulr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(Xw,"CODE",{});var _7t=s(C1e);_lr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),blr=r(Xw,":"),Xw.forEach(t),vlr=i(Ma),ot=n(Ma,"UL",{});var pl=s(ot);DT=n(pl,"LI",{});var DRe=s(DT);w1e=n(DRe,"STRONG",{});var b7t=s(w1e);Flr=r(b7t,"data2vec-audio"),b7t.forEach(t),Tlr=r(DRe," \u2014 "),$W=n(DRe,"A",{href:!0});var v7t=s($W);Mlr=r(v7t,"Data2VecAudioForXVector"),v7t.forEach(t),Elr=r(DRe," (Data2VecAudio model)"),DRe.forEach(t),Clr=i(pl),GT=n(pl,"LI",{});var GRe=s(GT);A1e=n(GRe,"STRONG",{});var F7t=s(A1e);wlr=r(F7t,"unispeech-sat"),F7t.forEach(t),Alr=r(GRe," \u2014 "),kW=n(GRe,"A",{href:!0});var T7t=s(kW);ylr=r(T7t,"UniSpeechSatForXVector"),T7t.forEach(t),Llr=r(GRe," (UniSpeechSat model)"),GRe.forEach(t),xlr=i(pl),OT=n(pl,"LI",{});var ORe=s(OT);y1e=n(ORe,"STRONG",{});var M7t=s(y1e);$lr=r(M7t,"wav2vec2"),M7t.forEach(t),klr=r(ORe," \u2014 "),SW=n(ORe,"A",{href:!0});var E7t=s(SW);Slr=r(E7t,"Wav2Vec2ForXVector"),E7t.forEach(t),Rlr=r(ORe," (Wav2Vec2 model)"),ORe.forEach(t),Plr=i(pl),VT=n(pl,"LI",{});var VRe=s(VT);L1e=n(VRe,"STRONG",{});var C7t=s(L1e);Blr=r(C7t,"wav2vec2-conformer"),C7t.forEach(t),Ilr=r(VRe," \u2014 "),RW=n(VRe,"A",{href:!0});var w7t=s(RW);Nlr=r(w7t,"Wav2Vec2ConformerForXVector"),w7t.forEach(t),qlr=r(VRe," (Wav2Vec2-Conformer model)"),VRe.forEach(t),jlr=i(pl),XT=n(pl,"LI",{});var XRe=s(XT);x1e=n(XRe,"STRONG",{});var A7t=s(x1e);Dlr=r(A7t,"wavlm"),A7t.forEach(t),Glr=r(XRe," \u2014 "),PW=n(XRe,"A",{href:!0});var y7t=s(PW);Olr=r(y7t,"WavLMForXVector"),y7t.forEach(t),Vlr=r(XRe," (WavLM model)"),XRe.forEach(t),pl.forEach(t),Xlr=i(Ma),zT=n(Ma,"P",{});var zRe=s(zT);zlr=r(zRe,"The model is set in evaluation mode by default using "),$1e=n(zRe,"CODE",{});var L7t=s($1e);Wlr=r(L7t,"model.eval()"),L7t.forEach(t),Qlr=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(zRe,"CODE",{});var x7t=s(k1e);Hlr=r(x7t,"model.train()"),x7t.forEach(t),zRe.forEach(t),Ulr=i(Ma),T(WT.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),WDe=i(f),Id=n(f,"H2",{class:!0});var ZOe=s(Id);QT=n(ZOe,"A",{id:!0,class:!0,href:!0});var $7t=s(QT);S1e=n($7t,"SPAN",{});var k7t=s(S1e);T(vL.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),Jlr=i(ZOe),R1e=n(ZOe,"SPAN",{});var S7t=s(R1e);Ylr=r(S7t,"AutoModelForMaskedImageModeling"),S7t.forEach(t),ZOe.forEach(t),QDe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(FL.$$.fragment,ul),Klr=i(ul),Nd=n(ul,"P",{});var noe=s(Nd);Zlr=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BW=n(noe,"A",{href:!0});var R7t=s(BW);eir=r(R7t,"from_pretrained()"),R7t.forEach(t),oir=r(noe," class method or the "),IW=n(noe,"A",{href:!0});var P7t=s(IW);rir=r(P7t,"from_config()"),P7t.forEach(t),tir=r(noe,` class
method.`),noe.forEach(t),air=i(ul),TL=n(ul,"P",{});var eVe=s(TL);nir=r(eVe,"This class cannot be instantiated directly using "),P1e=n(eVe,"CODE",{});var B7t=s(P1e);sir=r(B7t,"__init__()"),B7t.forEach(t),lir=r(eVe," (throws an error)."),eVe.forEach(t),iir=i(ul),wt=n(ul,"DIV",{class:!0});var zw=s(wt);T(ML.$$.fragment,zw),dir=i(zw),B1e=n(zw,"P",{});var I7t=s(B1e);cir=r(I7t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),I7t.forEach(t),fir=i(zw),qd=n(zw,"P",{});var soe=s(qd);mir=r(soe,`Note:
Loading a model from its configuration file does `),I1e=n(soe,"STRONG",{});var N7t=s(I1e);gir=r(N7t,"not"),N7t.forEach(t),hir=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(soe,"A",{href:!0});var q7t=s(NW);pir=r(q7t,"from_pretrained()"),q7t.forEach(t),uir=r(soe," to load the model weights."),soe.forEach(t),_ir=i(zw),T(HT.$$.fragment,zw),zw.forEach(t),bir=i(ul),uo=n(ul,"DIV",{class:!0});var Ea=s(uo);T(EL.$$.fragment,Ea),vir=i(Ea),N1e=n(Ea,"P",{});var j7t=s(N1e);Fir=r(j7t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),j7t.forEach(t),Tir=i(Ea),Ya=n(Ea,"P",{});var Ww=s(Ya);Mir=r(Ww,"The model class to instantiate is selected based on the "),q1e=n(Ww,"CODE",{});var D7t=s(q1e);Eir=r(D7t,"model_type"),D7t.forEach(t),Cir=r(Ww,` property of the config object (either
passed as an argument or loaded from `),j1e=n(Ww,"CODE",{});var G7t=s(j1e);wir=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Air=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(Ww,"CODE",{});var O7t=s(D1e);yir=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),Lir=r(Ww,":"),Ww.forEach(t),xir=i(Ea),jd=n(Ea,"UL",{});var loe=s(jd);UT=n(loe,"LI",{});var WRe=s(UT);G1e=n(WRe,"STRONG",{});var V7t=s(G1e);$ir=r(V7t,"deit"),V7t.forEach(t),kir=r(WRe," \u2014 "),qW=n(WRe,"A",{href:!0});var X7t=s(qW);Sir=r(X7t,"DeiTForMaskedImageModeling"),X7t.forEach(t),Rir=r(WRe," (DeiT model)"),WRe.forEach(t),Pir=i(loe),JT=n(loe,"LI",{});var QRe=s(JT);O1e=n(QRe,"STRONG",{});var z7t=s(O1e);Bir=r(z7t,"swin"),z7t.forEach(t),Iir=r(QRe," \u2014 "),jW=n(QRe,"A",{href:!0});var W7t=s(jW);Nir=r(W7t,"SwinForMaskedImageModeling"),W7t.forEach(t),qir=r(QRe," (Swin Transformer model)"),QRe.forEach(t),jir=i(loe),YT=n(loe,"LI",{});var HRe=s(YT);V1e=n(HRe,"STRONG",{});var Q7t=s(V1e);Dir=r(Q7t,"vit"),Q7t.forEach(t),Gir=r(HRe," \u2014 "),DW=n(HRe,"A",{href:!0});var H7t=s(DW);Oir=r(H7t,"ViTForMaskedImageModeling"),H7t.forEach(t),Vir=r(HRe," (ViT model)"),HRe.forEach(t),loe.forEach(t),Xir=i(Ea),KT=n(Ea,"P",{});var URe=s(KT);zir=r(URe,"The model is set in evaluation mode by default using "),X1e=n(URe,"CODE",{});var U7t=s(X1e);Wir=r(U7t,"model.eval()"),U7t.forEach(t),Qir=r(URe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(URe,"CODE",{});var J7t=s(z1e);Hir=r(J7t,"model.train()"),J7t.forEach(t),URe.forEach(t),Uir=i(Ea),T(ZT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),HDe=i(f),Dd=n(f,"H2",{class:!0});var oVe=s(Dd);e7=n(oVe,"A",{id:!0,class:!0,href:!0});var Y7t=s(e7);W1e=n(Y7t,"SPAN",{});var K7t=s(W1e);T(CL.$$.fragment,K7t),K7t.forEach(t),Y7t.forEach(t),Jir=i(oVe),Q1e=n(oVe,"SPAN",{});var Z7t=s(Q1e);Yir=r(Z7t,"AutoModelForObjectDetection"),Z7t.forEach(t),oVe.forEach(t),UDe=i(f),Uo=n(f,"DIV",{class:!0});var _l=s(Uo);T(wL.$$.fragment,_l),Kir=i(_l),Gd=n(_l,"P",{});var ioe=s(Gd);Zir=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),GW=n(ioe,"A",{href:!0});var e8t=s(GW);edr=r(e8t,"from_pretrained()"),e8t.forEach(t),odr=r(ioe," class method or the "),OW=n(ioe,"A",{href:!0});var o8t=s(OW);rdr=r(o8t,"from_config()"),o8t.forEach(t),tdr=r(ioe,` class
method.`),ioe.forEach(t),adr=i(_l),AL=n(_l,"P",{});var rVe=s(AL);ndr=r(rVe,"This class cannot be instantiated directly using "),H1e=n(rVe,"CODE",{});var r8t=s(H1e);sdr=r(r8t,"__init__()"),r8t.forEach(t),ldr=r(rVe," (throws an error)."),rVe.forEach(t),idr=i(_l),At=n(_l,"DIV",{class:!0});var Qw=s(At);T(yL.$$.fragment,Qw),ddr=i(Qw),U1e=n(Qw,"P",{});var t8t=s(U1e);cdr=r(t8t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),t8t.forEach(t),fdr=i(Qw),Od=n(Qw,"P",{});var doe=s(Od);mdr=r(doe,`Note:
Loading a model from its configuration file does `),J1e=n(doe,"STRONG",{});var a8t=s(J1e);gdr=r(a8t,"not"),a8t.forEach(t),hdr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(doe,"A",{href:!0});var n8t=s(VW);pdr=r(n8t,"from_pretrained()"),n8t.forEach(t),udr=r(doe," to load the model weights."),doe.forEach(t),_dr=i(Qw),T(o7.$$.fragment,Qw),Qw.forEach(t),bdr=i(_l),_o=n(_l,"DIV",{class:!0});var Ca=s(_o);T(LL.$$.fragment,Ca),vdr=i(Ca),Y1e=n(Ca,"P",{});var s8t=s(Y1e);Fdr=r(s8t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),s8t.forEach(t),Tdr=i(Ca),Ka=n(Ca,"P",{});var Hw=s(Ka);Mdr=r(Hw,"The model class to instantiate is selected based on the "),K1e=n(Hw,"CODE",{});var l8t=s(K1e);Edr=r(l8t,"model_type"),l8t.forEach(t),Cdr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(Hw,"CODE",{});var i8t=s(Z1e);wdr=r(i8t,"pretrained_model_name_or_path"),i8t.forEach(t),Adr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(Hw,"CODE",{});var d8t=s(ebe);ydr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),Ldr=r(Hw,":"),Hw.forEach(t),xdr=i(Ca),xL=n(Ca,"UL",{});var tVe=s(xL);r7=n(tVe,"LI",{});var JRe=s(r7);obe=n(JRe,"STRONG",{});var c8t=s(obe);$dr=r(c8t,"detr"),c8t.forEach(t),kdr=r(JRe," \u2014 "),XW=n(JRe,"A",{href:!0});var f8t=s(XW);Sdr=r(f8t,"DetrForObjectDetection"),f8t.forEach(t),Rdr=r(JRe," (DETR model)"),JRe.forEach(t),Pdr=i(tVe),t7=n(tVe,"LI",{});var YRe=s(t7);rbe=n(YRe,"STRONG",{});var m8t=s(rbe);Bdr=r(m8t,"yolos"),m8t.forEach(t),Idr=r(YRe," \u2014 "),zW=n(YRe,"A",{href:!0});var g8t=s(zW);Ndr=r(g8t,"YolosForObjectDetection"),g8t.forEach(t),qdr=r(YRe," (YOLOS model)"),YRe.forEach(t),tVe.forEach(t),jdr=i(Ca),a7=n(Ca,"P",{});var KRe=s(a7);Ddr=r(KRe,"The model is set in evaluation mode by default using "),tbe=n(KRe,"CODE",{});var h8t=s(tbe);Gdr=r(h8t,"model.eval()"),h8t.forEach(t),Odr=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(KRe,"CODE",{});var p8t=s(abe);Vdr=r(p8t,"model.train()"),p8t.forEach(t),KRe.forEach(t),Xdr=i(Ca),T(n7.$$.fragment,Ca),Ca.forEach(t),_l.forEach(t),JDe=i(f),Vd=n(f,"H2",{class:!0});var aVe=s(Vd);s7=n(aVe,"A",{id:!0,class:!0,href:!0});var u8t=s(s7);nbe=n(u8t,"SPAN",{});var _8t=s(nbe);T($L.$$.fragment,_8t),_8t.forEach(t),u8t.forEach(t),zdr=i(aVe),sbe=n(aVe,"SPAN",{});var b8t=s(sbe);Wdr=r(b8t,"AutoModelForImageSegmentation"),b8t.forEach(t),aVe.forEach(t),YDe=i(f),Jo=n(f,"DIV",{class:!0});var bl=s(Jo);T(kL.$$.fragment,bl),Qdr=i(bl),Xd=n(bl,"P",{});var coe=s(Xd);Hdr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WW=n(coe,"A",{href:!0});var v8t=s(WW);Udr=r(v8t,"from_pretrained()"),v8t.forEach(t),Jdr=r(coe," class method or the "),QW=n(coe,"A",{href:!0});var F8t=s(QW);Ydr=r(F8t,"from_config()"),F8t.forEach(t),Kdr=r(coe,` class
method.`),coe.forEach(t),Zdr=i(bl),SL=n(bl,"P",{});var nVe=s(SL);ecr=r(nVe,"This class cannot be instantiated directly using "),lbe=n(nVe,"CODE",{});var T8t=s(lbe);ocr=r(T8t,"__init__()"),T8t.forEach(t),rcr=r(nVe," (throws an error)."),nVe.forEach(t),tcr=i(bl),yt=n(bl,"DIV",{class:!0});var Uw=s(yt);T(RL.$$.fragment,Uw),acr=i(Uw),ibe=n(Uw,"P",{});var M8t=s(ibe);ncr=r(M8t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),M8t.forEach(t),scr=i(Uw),zd=n(Uw,"P",{});var foe=s(zd);lcr=r(foe,`Note:
Loading a model from its configuration file does `),dbe=n(foe,"STRONG",{});var E8t=s(dbe);icr=r(E8t,"not"),E8t.forEach(t),dcr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(foe,"A",{href:!0});var C8t=s(HW);ccr=r(C8t,"from_pretrained()"),C8t.forEach(t),fcr=r(foe," to load the model weights."),foe.forEach(t),mcr=i(Uw),T(l7.$$.fragment,Uw),Uw.forEach(t),gcr=i(bl),bo=n(bl,"DIV",{class:!0});var wa=s(bo);T(PL.$$.fragment,wa),hcr=i(wa),cbe=n(wa,"P",{});var w8t=s(cbe);pcr=r(w8t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),w8t.forEach(t),ucr=i(wa),Za=n(wa,"P",{});var Jw=s(Za);_cr=r(Jw,"The model class to instantiate is selected based on the "),fbe=n(Jw,"CODE",{});var A8t=s(fbe);bcr=r(A8t,"model_type"),A8t.forEach(t),vcr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),mbe=n(Jw,"CODE",{});var y8t=s(mbe);Fcr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),Tcr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(Jw,"CODE",{});var L8t=s(gbe);Mcr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),Ecr=r(Jw,":"),Jw.forEach(t),Ccr=i(wa),hbe=n(wa,"UL",{});var x8t=s(hbe);i7=n(x8t,"LI",{});var ZRe=s(i7);pbe=n(ZRe,"STRONG",{});var $8t=s(pbe);wcr=r($8t,"detr"),$8t.forEach(t),Acr=r(ZRe," \u2014 "),UW=n(ZRe,"A",{href:!0});var k8t=s(UW);ycr=r(k8t,"DetrForSegmentation"),k8t.forEach(t),Lcr=r(ZRe," (DETR model)"),ZRe.forEach(t),x8t.forEach(t),xcr=i(wa),d7=n(wa,"P",{});var ePe=s(d7);$cr=r(ePe,"The model is set in evaluation mode by default using "),ube=n(ePe,"CODE",{});var S8t=s(ube);kcr=r(S8t,"model.eval()"),S8t.forEach(t),Scr=r(ePe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(ePe,"CODE",{});var R8t=s(_be);Rcr=r(R8t,"model.train()"),R8t.forEach(t),ePe.forEach(t),Pcr=i(wa),T(c7.$$.fragment,wa),wa.forEach(t),bl.forEach(t),KDe=i(f),Wd=n(f,"H2",{class:!0});var sVe=s(Wd);f7=n(sVe,"A",{id:!0,class:!0,href:!0});var P8t=s(f7);bbe=n(P8t,"SPAN",{});var B8t=s(bbe);T(BL.$$.fragment,B8t),B8t.forEach(t),P8t.forEach(t),Bcr=i(sVe),vbe=n(sVe,"SPAN",{});var I8t=s(vbe);Icr=r(I8t,"AutoModelForSemanticSegmentation"),I8t.forEach(t),sVe.forEach(t),ZDe=i(f),Yo=n(f,"DIV",{class:!0});var vl=s(Yo);T(IL.$$.fragment,vl),Ncr=i(vl),Qd=n(vl,"P",{});var moe=s(Qd);qcr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),JW=n(moe,"A",{href:!0});var N8t=s(JW);jcr=r(N8t,"from_pretrained()"),N8t.forEach(t),Dcr=r(moe," class method or the "),YW=n(moe,"A",{href:!0});var q8t=s(YW);Gcr=r(q8t,"from_config()"),q8t.forEach(t),Ocr=r(moe,` class
method.`),moe.forEach(t),Vcr=i(vl),NL=n(vl,"P",{});var lVe=s(NL);Xcr=r(lVe,"This class cannot be instantiated directly using "),Fbe=n(lVe,"CODE",{});var j8t=s(Fbe);zcr=r(j8t,"__init__()"),j8t.forEach(t),Wcr=r(lVe," (throws an error)."),lVe.forEach(t),Qcr=i(vl),Lt=n(vl,"DIV",{class:!0});var Yw=s(Lt);T(qL.$$.fragment,Yw),Hcr=i(Yw),Tbe=n(Yw,"P",{});var D8t=s(Tbe);Ucr=r(D8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),D8t.forEach(t),Jcr=i(Yw),Hd=n(Yw,"P",{});var goe=s(Hd);Ycr=r(goe,`Note:
Loading a model from its configuration file does `),Mbe=n(goe,"STRONG",{});var G8t=s(Mbe);Kcr=r(G8t,"not"),G8t.forEach(t),Zcr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(goe,"A",{href:!0});var O8t=s(KW);efr=r(O8t,"from_pretrained()"),O8t.forEach(t),ofr=r(goe," to load the model weights."),goe.forEach(t),rfr=i(Yw),T(m7.$$.fragment,Yw),Yw.forEach(t),tfr=i(vl),vo=n(vl,"DIV",{class:!0});var Aa=s(vo);T(jL.$$.fragment,Aa),afr=i(Aa),Ebe=n(Aa,"P",{});var V8t=s(Ebe);nfr=r(V8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),V8t.forEach(t),sfr=i(Aa),en=n(Aa,"P",{});var Kw=s(en);lfr=r(Kw,"The model class to instantiate is selected based on the "),Cbe=n(Kw,"CODE",{});var X8t=s(Cbe);ifr=r(X8t,"model_type"),X8t.forEach(t),dfr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),wbe=n(Kw,"CODE",{});var z8t=s(wbe);cfr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),ffr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(Kw,"CODE",{});var W8t=s(Abe);mfr=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),gfr=r(Kw,":"),Kw.forEach(t),hfr=i(Aa),on=n(Aa,"UL",{});var Zw=s(on);g7=n(Zw,"LI",{});var oPe=s(g7);ybe=n(oPe,"STRONG",{});var Q8t=s(ybe);pfr=r(Q8t,"beit"),Q8t.forEach(t),ufr=r(oPe," \u2014 "),ZW=n(oPe,"A",{href:!0});var H8t=s(ZW);_fr=r(H8t,"BeitForSemanticSegmentation"),H8t.forEach(t),bfr=r(oPe," (BEiT model)"),oPe.forEach(t),vfr=i(Zw),h7=n(Zw,"LI",{});var rPe=s(h7);Lbe=n(rPe,"STRONG",{});var U8t=s(Lbe);Ffr=r(U8t,"data2vec-vision"),U8t.forEach(t),Tfr=r(rPe," \u2014 "),eQ=n(rPe,"A",{href:!0});var J8t=s(eQ);Mfr=r(J8t,"Data2VecVisionForSemanticSegmentation"),J8t.forEach(t),Efr=r(rPe," (Data2VecVision model)"),rPe.forEach(t),Cfr=i(Zw),p7=n(Zw,"LI",{});var tPe=s(p7);xbe=n(tPe,"STRONG",{});var Y8t=s(xbe);wfr=r(Y8t,"dpt"),Y8t.forEach(t),Afr=r(tPe," \u2014 "),oQ=n(tPe,"A",{href:!0});var K8t=s(oQ);yfr=r(K8t,"DPTForSemanticSegmentation"),K8t.forEach(t),Lfr=r(tPe," (DPT model)"),tPe.forEach(t),xfr=i(Zw),u7=n(Zw,"LI",{});var aPe=s(u7);$be=n(aPe,"STRONG",{});var Z8t=s($be);$fr=r(Z8t,"segformer"),Z8t.forEach(t),kfr=r(aPe," \u2014 "),rQ=n(aPe,"A",{href:!0});var eMt=s(rQ);Sfr=r(eMt,"SegformerForSemanticSegmentation"),eMt.forEach(t),Rfr=r(aPe," (SegFormer model)"),aPe.forEach(t),Zw.forEach(t),Pfr=i(Aa),_7=n(Aa,"P",{});var nPe=s(_7);Bfr=r(nPe,"The model is set in evaluation mode by default using "),kbe=n(nPe,"CODE",{});var oMt=s(kbe);Ifr=r(oMt,"model.eval()"),oMt.forEach(t),Nfr=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(nPe,"CODE",{});var rMt=s(Sbe);qfr=r(rMt,"model.train()"),rMt.forEach(t),nPe.forEach(t),jfr=i(Aa),T(b7.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),eGe=i(f),Ud=n(f,"H2",{class:!0});var iVe=s(Ud);v7=n(iVe,"A",{id:!0,class:!0,href:!0});var tMt=s(v7);Rbe=n(tMt,"SPAN",{});var aMt=s(Rbe);T(DL.$$.fragment,aMt),aMt.forEach(t),tMt.forEach(t),Dfr=i(iVe),Pbe=n(iVe,"SPAN",{});var nMt=s(Pbe);Gfr=r(nMt,"AutoModelForInstanceSegmentation"),nMt.forEach(t),iVe.forEach(t),oGe=i(f),Ko=n(f,"DIV",{class:!0});var Fl=s(Ko);T(GL.$$.fragment,Fl),Ofr=i(Fl),Jd=n(Fl,"P",{});var hoe=s(Jd);Vfr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tQ=n(hoe,"A",{href:!0});var sMt=s(tQ);Xfr=r(sMt,"from_pretrained()"),sMt.forEach(t),zfr=r(hoe," class method or the "),aQ=n(hoe,"A",{href:!0});var lMt=s(aQ);Wfr=r(lMt,"from_config()"),lMt.forEach(t),Qfr=r(hoe,` class
method.`),hoe.forEach(t),Hfr=i(Fl),OL=n(Fl,"P",{});var dVe=s(OL);Ufr=r(dVe,"This class cannot be instantiated directly using "),Bbe=n(dVe,"CODE",{});var iMt=s(Bbe);Jfr=r(iMt,"__init__()"),iMt.forEach(t),Yfr=r(dVe," (throws an error)."),dVe.forEach(t),Kfr=i(Fl),xt=n(Fl,"DIV",{class:!0});var e0=s(xt);T(VL.$$.fragment,e0),Zfr=i(e0),Ibe=n(e0,"P",{});var dMt=s(Ibe);emr=r(dMt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dMt.forEach(t),omr=i(e0),Yd=n(e0,"P",{});var poe=s(Yd);rmr=r(poe,`Note:
Loading a model from its configuration file does `),Nbe=n(poe,"STRONG",{});var cMt=s(Nbe);tmr=r(cMt,"not"),cMt.forEach(t),amr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(poe,"A",{href:!0});var fMt=s(nQ);nmr=r(fMt,"from_pretrained()"),fMt.forEach(t),smr=r(poe," to load the model weights."),poe.forEach(t),lmr=i(e0),T(F7.$$.fragment,e0),e0.forEach(t),imr=i(Fl),Fo=n(Fl,"DIV",{class:!0});var ya=s(Fo);T(XL.$$.fragment,ya),dmr=i(ya),qbe=n(ya,"P",{});var mMt=s(qbe);cmr=r(mMt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mMt.forEach(t),fmr=i(ya),rn=n(ya,"P",{});var o0=s(rn);mmr=r(o0,"The model class to instantiate is selected based on the "),jbe=n(o0,"CODE",{});var gMt=s(jbe);gmr=r(gMt,"model_type"),gMt.forEach(t),hmr=r(o0,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(o0,"CODE",{});var hMt=s(Dbe);pmr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),umr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(o0,"CODE",{});var pMt=s(Gbe);_mr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),bmr=r(o0,":"),o0.forEach(t),vmr=i(ya),Obe=n(ya,"UL",{});var uMt=s(Obe);T7=n(uMt,"LI",{});var sPe=s(T7);Vbe=n(sPe,"STRONG",{});var _Mt=s(Vbe);Fmr=r(_Mt,"maskformer"),_Mt.forEach(t),Tmr=r(sPe," \u2014 "),sQ=n(sPe,"A",{href:!0});var bMt=s(sQ);Mmr=r(bMt,"MaskFormerForInstanceSegmentation"),bMt.forEach(t),Emr=r(sPe," (MaskFormer model)"),sPe.forEach(t),uMt.forEach(t),Cmr=i(ya),M7=n(ya,"P",{});var lPe=s(M7);wmr=r(lPe,"The model is set in evaluation mode by default using "),Xbe=n(lPe,"CODE",{});var vMt=s(Xbe);Amr=r(vMt,"model.eval()"),vMt.forEach(t),ymr=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=n(lPe,"CODE",{});var FMt=s(zbe);Lmr=r(FMt,"model.train()"),FMt.forEach(t),lPe.forEach(t),xmr=i(ya),T(E7.$$.fragment,ya),ya.forEach(t),Fl.forEach(t),rGe=i(f),Kd=n(f,"H2",{class:!0});var cVe=s(Kd);C7=n(cVe,"A",{id:!0,class:!0,href:!0});var TMt=s(C7);Wbe=n(TMt,"SPAN",{});var MMt=s(Wbe);T(zL.$$.fragment,MMt),MMt.forEach(t),TMt.forEach(t),$mr=i(cVe),Qbe=n(cVe,"SPAN",{});var EMt=s(Qbe);kmr=r(EMt,"TFAutoModel"),EMt.forEach(t),cVe.forEach(t),tGe=i(f),Zo=n(f,"DIV",{class:!0});var Tl=s(Zo);T(WL.$$.fragment,Tl),Smr=i(Tl),Zd=n(Tl,"P",{});var uoe=s(Zd);Rmr=r(uoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lQ=n(uoe,"A",{href:!0});var CMt=s(lQ);Pmr=r(CMt,"from_pretrained()"),CMt.forEach(t),Bmr=r(uoe," class method or the "),iQ=n(uoe,"A",{href:!0});var wMt=s(iQ);Imr=r(wMt,"from_config()"),wMt.forEach(t),Nmr=r(uoe,` class
method.`),uoe.forEach(t),qmr=i(Tl),QL=n(Tl,"P",{});var fVe=s(QL);jmr=r(fVe,"This class cannot be instantiated directly using "),Hbe=n(fVe,"CODE",{});var AMt=s(Hbe);Dmr=r(AMt,"__init__()"),AMt.forEach(t),Gmr=r(fVe," (throws an error)."),fVe.forEach(t),Omr=i(Tl),$t=n(Tl,"DIV",{class:!0});var r0=s($t);T(HL.$$.fragment,r0),Vmr=i(r0),Ube=n(r0,"P",{});var yMt=s(Ube);Xmr=r(yMt,"Instantiates one of the base model classes of the library from a configuration."),yMt.forEach(t),zmr=i(r0),ec=n(r0,"P",{});var _oe=s(ec);Wmr=r(_oe,`Note:
Loading a model from its configuration file does `),Jbe=n(_oe,"STRONG",{});var LMt=s(Jbe);Qmr=r(LMt,"not"),LMt.forEach(t),Hmr=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(_oe,"A",{href:!0});var xMt=s(dQ);Umr=r(xMt,"from_pretrained()"),xMt.forEach(t),Jmr=r(_oe," to load the model weights."),_oe.forEach(t),Ymr=i(r0),T(w7.$$.fragment,r0),r0.forEach(t),Kmr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(UL.$$.fragment,Ml),Zmr=i(Ml),Ybe=n(Ml,"P",{});var $Mt=s(Ybe);egr=r($Mt,"Instantiate one of the base model classes of the library from a pretrained model."),$Mt.forEach(t),ogr=i(Ml),tn=n(Ml,"P",{});var t0=s(tn);rgr=r(t0,"The model class to instantiate is selected based on the "),Kbe=n(t0,"CODE",{});var kMt=s(Kbe);tgr=r(kMt,"model_type"),kMt.forEach(t),agr=r(t0,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(t0,"CODE",{});var SMt=s(Zbe);ngr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),sgr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(t0,"CODE",{});var RMt=s(eve);lgr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),igr=r(t0,":"),t0.forEach(t),dgr=i(Ml),q=n(Ml,"UL",{});var D=s(q);A7=n(D,"LI",{});var iPe=s(A7);ove=n(iPe,"STRONG",{});var PMt=s(ove);cgr=r(PMt,"albert"),PMt.forEach(t),fgr=r(iPe," \u2014 "),cQ=n(iPe,"A",{href:!0});var BMt=s(cQ);mgr=r(BMt,"TFAlbertModel"),BMt.forEach(t),ggr=r(iPe," (ALBERT model)"),iPe.forEach(t),hgr=i(D),y7=n(D,"LI",{});var dPe=s(y7);rve=n(dPe,"STRONG",{});var IMt=s(rve);pgr=r(IMt,"bart"),IMt.forEach(t),ugr=r(dPe," \u2014 "),fQ=n(dPe,"A",{href:!0});var NMt=s(fQ);_gr=r(NMt,"TFBartModel"),NMt.forEach(t),bgr=r(dPe," (BART model)"),dPe.forEach(t),vgr=i(D),L7=n(D,"LI",{});var cPe=s(L7);tve=n(cPe,"STRONG",{});var qMt=s(tve);Fgr=r(qMt,"bert"),qMt.forEach(t),Tgr=r(cPe," \u2014 "),mQ=n(cPe,"A",{href:!0});var jMt=s(mQ);Mgr=r(jMt,"TFBertModel"),jMt.forEach(t),Egr=r(cPe," (BERT model)"),cPe.forEach(t),Cgr=i(D),x7=n(D,"LI",{});var fPe=s(x7);ave=n(fPe,"STRONG",{});var DMt=s(ave);wgr=r(DMt,"blenderbot"),DMt.forEach(t),Agr=r(fPe," \u2014 "),gQ=n(fPe,"A",{href:!0});var GMt=s(gQ);ygr=r(GMt,"TFBlenderbotModel"),GMt.forEach(t),Lgr=r(fPe," (Blenderbot model)"),fPe.forEach(t),xgr=i(D),$7=n(D,"LI",{});var mPe=s($7);nve=n(mPe,"STRONG",{});var OMt=s(nve);$gr=r(OMt,"blenderbot-small"),OMt.forEach(t),kgr=r(mPe," \u2014 "),hQ=n(mPe,"A",{href:!0});var VMt=s(hQ);Sgr=r(VMt,"TFBlenderbotSmallModel"),VMt.forEach(t),Rgr=r(mPe," (BlenderbotSmall model)"),mPe.forEach(t),Pgr=i(D),k7=n(D,"LI",{});var gPe=s(k7);sve=n(gPe,"STRONG",{});var XMt=s(sve);Bgr=r(XMt,"camembert"),XMt.forEach(t),Igr=r(gPe," \u2014 "),pQ=n(gPe,"A",{href:!0});var zMt=s(pQ);Ngr=r(zMt,"TFCamembertModel"),zMt.forEach(t),qgr=r(gPe," (CamemBERT model)"),gPe.forEach(t),jgr=i(D),S7=n(D,"LI",{});var hPe=s(S7);lve=n(hPe,"STRONG",{});var WMt=s(lve);Dgr=r(WMt,"clip"),WMt.forEach(t),Ggr=r(hPe," \u2014 "),uQ=n(hPe,"A",{href:!0});var QMt=s(uQ);Ogr=r(QMt,"TFCLIPModel"),QMt.forEach(t),Vgr=r(hPe," (CLIP model)"),hPe.forEach(t),Xgr=i(D),R7=n(D,"LI",{});var pPe=s(R7);ive=n(pPe,"STRONG",{});var HMt=s(ive);zgr=r(HMt,"convbert"),HMt.forEach(t),Wgr=r(pPe," \u2014 "),_Q=n(pPe,"A",{href:!0});var UMt=s(_Q);Qgr=r(UMt,"TFConvBertModel"),UMt.forEach(t),Hgr=r(pPe," (ConvBERT model)"),pPe.forEach(t),Ugr=i(D),P7=n(D,"LI",{});var uPe=s(P7);dve=n(uPe,"STRONG",{});var JMt=s(dve);Jgr=r(JMt,"convnext"),JMt.forEach(t),Ygr=r(uPe," \u2014 "),bQ=n(uPe,"A",{href:!0});var YMt=s(bQ);Kgr=r(YMt,"TFConvNextModel"),YMt.forEach(t),Zgr=r(uPe," (ConvNeXT model)"),uPe.forEach(t),ehr=i(D),B7=n(D,"LI",{});var _Pe=s(B7);cve=n(_Pe,"STRONG",{});var KMt=s(cve);ohr=r(KMt,"ctrl"),KMt.forEach(t),rhr=r(_Pe," \u2014 "),vQ=n(_Pe,"A",{href:!0});var ZMt=s(vQ);thr=r(ZMt,"TFCTRLModel"),ZMt.forEach(t),ahr=r(_Pe," (CTRL model)"),_Pe.forEach(t),nhr=i(D),I7=n(D,"LI",{});var bPe=s(I7);fve=n(bPe,"STRONG",{});var e4t=s(fve);shr=r(e4t,"data2vec-vision"),e4t.forEach(t),lhr=r(bPe," \u2014 "),FQ=n(bPe,"A",{href:!0});var o4t=s(FQ);ihr=r(o4t,"TFData2VecVisionModel"),o4t.forEach(t),dhr=r(bPe," (Data2VecVision model)"),bPe.forEach(t),chr=i(D),N7=n(D,"LI",{});var vPe=s(N7);mve=n(vPe,"STRONG",{});var r4t=s(mve);fhr=r(r4t,"deberta"),r4t.forEach(t),mhr=r(vPe," \u2014 "),TQ=n(vPe,"A",{href:!0});var t4t=s(TQ);ghr=r(t4t,"TFDebertaModel"),t4t.forEach(t),hhr=r(vPe," (DeBERTa model)"),vPe.forEach(t),phr=i(D),q7=n(D,"LI",{});var FPe=s(q7);gve=n(FPe,"STRONG",{});var a4t=s(gve);uhr=r(a4t,"deberta-v2"),a4t.forEach(t),_hr=r(FPe," \u2014 "),MQ=n(FPe,"A",{href:!0});var n4t=s(MQ);bhr=r(n4t,"TFDebertaV2Model"),n4t.forEach(t),vhr=r(FPe," (DeBERTa-v2 model)"),FPe.forEach(t),Fhr=i(D),j7=n(D,"LI",{});var TPe=s(j7);hve=n(TPe,"STRONG",{});var s4t=s(hve);Thr=r(s4t,"distilbert"),s4t.forEach(t),Mhr=r(TPe," \u2014 "),EQ=n(TPe,"A",{href:!0});var l4t=s(EQ);Ehr=r(l4t,"TFDistilBertModel"),l4t.forEach(t),Chr=r(TPe," (DistilBERT model)"),TPe.forEach(t),whr=i(D),D7=n(D,"LI",{});var MPe=s(D7);pve=n(MPe,"STRONG",{});var i4t=s(pve);Ahr=r(i4t,"dpr"),i4t.forEach(t),yhr=r(MPe," \u2014 "),CQ=n(MPe,"A",{href:!0});var d4t=s(CQ);Lhr=r(d4t,"TFDPRQuestionEncoder"),d4t.forEach(t),xhr=r(MPe," (DPR model)"),MPe.forEach(t),$hr=i(D),G7=n(D,"LI",{});var EPe=s(G7);uve=n(EPe,"STRONG",{});var c4t=s(uve);khr=r(c4t,"electra"),c4t.forEach(t),Shr=r(EPe," \u2014 "),wQ=n(EPe,"A",{href:!0});var f4t=s(wQ);Rhr=r(f4t,"TFElectraModel"),f4t.forEach(t),Phr=r(EPe," (ELECTRA model)"),EPe.forEach(t),Bhr=i(D),O7=n(D,"LI",{});var CPe=s(O7);_ve=n(CPe,"STRONG",{});var m4t=s(_ve);Ihr=r(m4t,"flaubert"),m4t.forEach(t),Nhr=r(CPe," \u2014 "),AQ=n(CPe,"A",{href:!0});var g4t=s(AQ);qhr=r(g4t,"TFFlaubertModel"),g4t.forEach(t),jhr=r(CPe," (FlauBERT model)"),CPe.forEach(t),Dhr=i(D),Vs=n(D,"LI",{});var xk=s(Vs);bve=n(xk,"STRONG",{});var h4t=s(bve);Ghr=r(h4t,"funnel"),h4t.forEach(t),Ohr=r(xk," \u2014 "),yQ=n(xk,"A",{href:!0});var p4t=s(yQ);Vhr=r(p4t,"TFFunnelModel"),p4t.forEach(t),Xhr=r(xk," or "),LQ=n(xk,"A",{href:!0});var u4t=s(LQ);zhr=r(u4t,"TFFunnelBaseModel"),u4t.forEach(t),Whr=r(xk," (Funnel Transformer model)"),xk.forEach(t),Qhr=i(D),V7=n(D,"LI",{});var wPe=s(V7);vve=n(wPe,"STRONG",{});var _4t=s(vve);Hhr=r(_4t,"gpt2"),_4t.forEach(t),Uhr=r(wPe," \u2014 "),xQ=n(wPe,"A",{href:!0});var b4t=s(xQ);Jhr=r(b4t,"TFGPT2Model"),b4t.forEach(t),Yhr=r(wPe," (OpenAI GPT-2 model)"),wPe.forEach(t),Khr=i(D),X7=n(D,"LI",{});var APe=s(X7);Fve=n(APe,"STRONG",{});var v4t=s(Fve);Zhr=r(v4t,"gptj"),v4t.forEach(t),epr=r(APe," \u2014 "),$Q=n(APe,"A",{href:!0});var F4t=s($Q);opr=r(F4t,"TFGPTJModel"),F4t.forEach(t),rpr=r(APe," (GPT-J model)"),APe.forEach(t),tpr=i(D),z7=n(D,"LI",{});var yPe=s(z7);Tve=n(yPe,"STRONG",{});var T4t=s(Tve);apr=r(T4t,"hubert"),T4t.forEach(t),npr=r(yPe," \u2014 "),kQ=n(yPe,"A",{href:!0});var M4t=s(kQ);spr=r(M4t,"TFHubertModel"),M4t.forEach(t),lpr=r(yPe," (Hubert model)"),yPe.forEach(t),ipr=i(D),W7=n(D,"LI",{});var LPe=s(W7);Mve=n(LPe,"STRONG",{});var E4t=s(Mve);dpr=r(E4t,"layoutlm"),E4t.forEach(t),cpr=r(LPe," \u2014 "),SQ=n(LPe,"A",{href:!0});var C4t=s(SQ);fpr=r(C4t,"TFLayoutLMModel"),C4t.forEach(t),mpr=r(LPe," (LayoutLM model)"),LPe.forEach(t),gpr=i(D),Q7=n(D,"LI",{});var xPe=s(Q7);Eve=n(xPe,"STRONG",{});var w4t=s(Eve);hpr=r(w4t,"led"),w4t.forEach(t),ppr=r(xPe," \u2014 "),RQ=n(xPe,"A",{href:!0});var A4t=s(RQ);upr=r(A4t,"TFLEDModel"),A4t.forEach(t),_pr=r(xPe," (LED model)"),xPe.forEach(t),bpr=i(D),H7=n(D,"LI",{});var $Pe=s(H7);Cve=n($Pe,"STRONG",{});var y4t=s(Cve);vpr=r(y4t,"longformer"),y4t.forEach(t),Fpr=r($Pe," \u2014 "),PQ=n($Pe,"A",{href:!0});var L4t=s(PQ);Tpr=r(L4t,"TFLongformerModel"),L4t.forEach(t),Mpr=r($Pe," (Longformer model)"),$Pe.forEach(t),Epr=i(D),U7=n(D,"LI",{});var kPe=s(U7);wve=n(kPe,"STRONG",{});var x4t=s(wve);Cpr=r(x4t,"lxmert"),x4t.forEach(t),wpr=r(kPe," \u2014 "),BQ=n(kPe,"A",{href:!0});var $4t=s(BQ);Apr=r($4t,"TFLxmertModel"),$4t.forEach(t),ypr=r(kPe," (LXMERT model)"),kPe.forEach(t),Lpr=i(D),J7=n(D,"LI",{});var SPe=s(J7);Ave=n(SPe,"STRONG",{});var k4t=s(Ave);xpr=r(k4t,"marian"),k4t.forEach(t),$pr=r(SPe," \u2014 "),IQ=n(SPe,"A",{href:!0});var S4t=s(IQ);kpr=r(S4t,"TFMarianModel"),S4t.forEach(t),Spr=r(SPe," (Marian model)"),SPe.forEach(t),Rpr=i(D),Y7=n(D,"LI",{});var RPe=s(Y7);yve=n(RPe,"STRONG",{});var R4t=s(yve);Ppr=r(R4t,"mbart"),R4t.forEach(t),Bpr=r(RPe," \u2014 "),NQ=n(RPe,"A",{href:!0});var P4t=s(NQ);Ipr=r(P4t,"TFMBartModel"),P4t.forEach(t),Npr=r(RPe," (mBART model)"),RPe.forEach(t),qpr=i(D),K7=n(D,"LI",{});var PPe=s(K7);Lve=n(PPe,"STRONG",{});var B4t=s(Lve);jpr=r(B4t,"mobilebert"),B4t.forEach(t),Dpr=r(PPe," \u2014 "),qQ=n(PPe,"A",{href:!0});var I4t=s(qQ);Gpr=r(I4t,"TFMobileBertModel"),I4t.forEach(t),Opr=r(PPe," (MobileBERT model)"),PPe.forEach(t),Vpr=i(D),Z7=n(D,"LI",{});var BPe=s(Z7);xve=n(BPe,"STRONG",{});var N4t=s(xve);Xpr=r(N4t,"mpnet"),N4t.forEach(t),zpr=r(BPe," \u2014 "),jQ=n(BPe,"A",{href:!0});var q4t=s(jQ);Wpr=r(q4t,"TFMPNetModel"),q4t.forEach(t),Qpr=r(BPe," (MPNet model)"),BPe.forEach(t),Hpr=i(D),e8=n(D,"LI",{});var IPe=s(e8);$ve=n(IPe,"STRONG",{});var j4t=s($ve);Upr=r(j4t,"mt5"),j4t.forEach(t),Jpr=r(IPe," \u2014 "),DQ=n(IPe,"A",{href:!0});var D4t=s(DQ);Ypr=r(D4t,"TFMT5Model"),D4t.forEach(t),Kpr=r(IPe," (MT5 model)"),IPe.forEach(t),Zpr=i(D),o8=n(D,"LI",{});var NPe=s(o8);kve=n(NPe,"STRONG",{});var G4t=s(kve);eur=r(G4t,"openai-gpt"),G4t.forEach(t),our=r(NPe," \u2014 "),GQ=n(NPe,"A",{href:!0});var O4t=s(GQ);rur=r(O4t,"TFOpenAIGPTModel"),O4t.forEach(t),tur=r(NPe," (OpenAI GPT model)"),NPe.forEach(t),aur=i(D),r8=n(D,"LI",{});var qPe=s(r8);Sve=n(qPe,"STRONG",{});var V4t=s(Sve);nur=r(V4t,"opt"),V4t.forEach(t),sur=r(qPe," \u2014 "),OQ=n(qPe,"A",{href:!0});var X4t=s(OQ);lur=r(X4t,"TFOPTModel"),X4t.forEach(t),iur=r(qPe," (OPT model)"),qPe.forEach(t),dur=i(D),t8=n(D,"LI",{});var jPe=s(t8);Rve=n(jPe,"STRONG",{});var z4t=s(Rve);cur=r(z4t,"pegasus"),z4t.forEach(t),fur=r(jPe," \u2014 "),VQ=n(jPe,"A",{href:!0});var W4t=s(VQ);mur=r(W4t,"TFPegasusModel"),W4t.forEach(t),gur=r(jPe," (Pegasus model)"),jPe.forEach(t),hur=i(D),a8=n(D,"LI",{});var DPe=s(a8);Pve=n(DPe,"STRONG",{});var Q4t=s(Pve);pur=r(Q4t,"rembert"),Q4t.forEach(t),uur=r(DPe," \u2014 "),XQ=n(DPe,"A",{href:!0});var H4t=s(XQ);_ur=r(H4t,"TFRemBertModel"),H4t.forEach(t),bur=r(DPe," (RemBERT model)"),DPe.forEach(t),vur=i(D),n8=n(D,"LI",{});var GPe=s(n8);Bve=n(GPe,"STRONG",{});var U4t=s(Bve);Fur=r(U4t,"roberta"),U4t.forEach(t),Tur=r(GPe," \u2014 "),zQ=n(GPe,"A",{href:!0});var J4t=s(zQ);Mur=r(J4t,"TFRobertaModel"),J4t.forEach(t),Eur=r(GPe," (RoBERTa model)"),GPe.forEach(t),Cur=i(D),s8=n(D,"LI",{});var OPe=s(s8);Ive=n(OPe,"STRONG",{});var Y4t=s(Ive);wur=r(Y4t,"roformer"),Y4t.forEach(t),Aur=r(OPe," \u2014 "),WQ=n(OPe,"A",{href:!0});var K4t=s(WQ);yur=r(K4t,"TFRoFormerModel"),K4t.forEach(t),Lur=r(OPe," (RoFormer model)"),OPe.forEach(t),xur=i(D),l8=n(D,"LI",{});var VPe=s(l8);Nve=n(VPe,"STRONG",{});var Z4t=s(Nve);$ur=r(Z4t,"speech_to_text"),Z4t.forEach(t),kur=r(VPe," \u2014 "),QQ=n(VPe,"A",{href:!0});var eEt=s(QQ);Sur=r(eEt,"TFSpeech2TextModel"),eEt.forEach(t),Rur=r(VPe," (Speech2Text model)"),VPe.forEach(t),Pur=i(D),i8=n(D,"LI",{});var XPe=s(i8);qve=n(XPe,"STRONG",{});var oEt=s(qve);Bur=r(oEt,"swin"),oEt.forEach(t),Iur=r(XPe," \u2014 "),HQ=n(XPe,"A",{href:!0});var rEt=s(HQ);Nur=r(rEt,"TFSwinModel"),rEt.forEach(t),qur=r(XPe," (Swin Transformer model)"),XPe.forEach(t),jur=i(D),d8=n(D,"LI",{});var zPe=s(d8);jve=n(zPe,"STRONG",{});var tEt=s(jve);Dur=r(tEt,"t5"),tEt.forEach(t),Gur=r(zPe," \u2014 "),UQ=n(zPe,"A",{href:!0});var aEt=s(UQ);Our=r(aEt,"TFT5Model"),aEt.forEach(t),Vur=r(zPe," (T5 model)"),zPe.forEach(t),Xur=i(D),c8=n(D,"LI",{});var WPe=s(c8);Dve=n(WPe,"STRONG",{});var nEt=s(Dve);zur=r(nEt,"tapas"),nEt.forEach(t),Wur=r(WPe," \u2014 "),JQ=n(WPe,"A",{href:!0});var sEt=s(JQ);Qur=r(sEt,"TFTapasModel"),sEt.forEach(t),Hur=r(WPe," (TAPAS model)"),WPe.forEach(t),Uur=i(D),f8=n(D,"LI",{});var QPe=s(f8);Gve=n(QPe,"STRONG",{});var lEt=s(Gve);Jur=r(lEt,"transfo-xl"),lEt.forEach(t),Yur=r(QPe," \u2014 "),YQ=n(QPe,"A",{href:!0});var iEt=s(YQ);Kur=r(iEt,"TFTransfoXLModel"),iEt.forEach(t),Zur=r(QPe," (Transformer-XL model)"),QPe.forEach(t),e_r=i(D),m8=n(D,"LI",{});var HPe=s(m8);Ove=n(HPe,"STRONG",{});var dEt=s(Ove);o_r=r(dEt,"vit"),dEt.forEach(t),r_r=r(HPe," \u2014 "),KQ=n(HPe,"A",{href:!0});var cEt=s(KQ);t_r=r(cEt,"TFViTModel"),cEt.forEach(t),a_r=r(HPe," (ViT model)"),HPe.forEach(t),n_r=i(D),g8=n(D,"LI",{});var UPe=s(g8);Vve=n(UPe,"STRONG",{});var fEt=s(Vve);s_r=r(fEt,"vit_mae"),fEt.forEach(t),l_r=r(UPe," \u2014 "),ZQ=n(UPe,"A",{href:!0});var mEt=s(ZQ);i_r=r(mEt,"TFViTMAEModel"),mEt.forEach(t),d_r=r(UPe," (ViTMAE model)"),UPe.forEach(t),c_r=i(D),h8=n(D,"LI",{});var JPe=s(h8);Xve=n(JPe,"STRONG",{});var gEt=s(Xve);f_r=r(gEt,"wav2vec2"),gEt.forEach(t),m_r=r(JPe," \u2014 "),eH=n(JPe,"A",{href:!0});var hEt=s(eH);g_r=r(hEt,"TFWav2Vec2Model"),hEt.forEach(t),h_r=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),p_r=i(D),p8=n(D,"LI",{});var YPe=s(p8);zve=n(YPe,"STRONG",{});var pEt=s(zve);u_r=r(pEt,"xlm"),pEt.forEach(t),__r=r(YPe," \u2014 "),oH=n(YPe,"A",{href:!0});var uEt=s(oH);b_r=r(uEt,"TFXLMModel"),uEt.forEach(t),v_r=r(YPe," (XLM model)"),YPe.forEach(t),F_r=i(D),u8=n(D,"LI",{});var KPe=s(u8);Wve=n(KPe,"STRONG",{});var _Et=s(Wve);T_r=r(_Et,"xlm-roberta"),_Et.forEach(t),M_r=r(KPe," \u2014 "),rH=n(KPe,"A",{href:!0});var bEt=s(rH);E_r=r(bEt,"TFXLMRobertaModel"),bEt.forEach(t),C_r=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),w_r=i(D),_8=n(D,"LI",{});var ZPe=s(_8);Qve=n(ZPe,"STRONG",{});var vEt=s(Qve);A_r=r(vEt,"xlnet"),vEt.forEach(t),y_r=r(ZPe," \u2014 "),tH=n(ZPe,"A",{href:!0});var FEt=s(tH);L_r=r(FEt,"TFXLNetModel"),FEt.forEach(t),x_r=r(ZPe," (XLNet model)"),ZPe.forEach(t),D.forEach(t),$_r=i(Ml),T(b8.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),aGe=i(f),oc=n(f,"H2",{class:!0});var mVe=s(oc);v8=n(mVe,"A",{id:!0,class:!0,href:!0});var TEt=s(v8);Hve=n(TEt,"SPAN",{});var MEt=s(Hve);T(JL.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),k_r=i(mVe),Uve=n(mVe,"SPAN",{});var EEt=s(Uve);S_r=r(EEt,"TFAutoModelForPreTraining"),EEt.forEach(t),mVe.forEach(t),nGe=i(f),er=n(f,"DIV",{class:!0});var El=s(er);T(YL.$$.fragment,El),R_r=i(El),rc=n(El,"P",{});var boe=s(rc);P_r=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aH=n(boe,"A",{href:!0});var CEt=s(aH);B_r=r(CEt,"from_pretrained()"),CEt.forEach(t),I_r=r(boe," class method or the "),nH=n(boe,"A",{href:!0});var wEt=s(nH);N_r=r(wEt,"from_config()"),wEt.forEach(t),q_r=r(boe,` class
method.`),boe.forEach(t),j_r=i(El),KL=n(El,"P",{});var gVe=s(KL);D_r=r(gVe,"This class cannot be instantiated directly using "),Jve=n(gVe,"CODE",{});var AEt=s(Jve);G_r=r(AEt,"__init__()"),AEt.forEach(t),O_r=r(gVe," (throws an error)."),gVe.forEach(t),V_r=i(El),kt=n(El,"DIV",{class:!0});var a0=s(kt);T(ZL.$$.fragment,a0),X_r=i(a0),Yve=n(a0,"P",{});var yEt=s(Yve);z_r=r(yEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yEt.forEach(t),W_r=i(a0),tc=n(a0,"P",{});var voe=s(tc);Q_r=r(voe,`Note:
Loading a model from its configuration file does `),Kve=n(voe,"STRONG",{});var LEt=s(Kve);H_r=r(LEt,"not"),LEt.forEach(t),U_r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(voe,"A",{href:!0});var xEt=s(sH);J_r=r(xEt,"from_pretrained()"),xEt.forEach(t),Y_r=r(voe," to load the model weights."),voe.forEach(t),K_r=i(a0),T(F8.$$.fragment,a0),a0.forEach(t),Z_r=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(e9.$$.fragment,Cl),e2r=i(Cl),Zve=n(Cl,"P",{});var $Et=s(Zve);o2r=r($Et,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Et.forEach(t),r2r=i(Cl),an=n(Cl,"P",{});var n0=s(an);t2r=r(n0,"The model class to instantiate is selected based on the "),eFe=n(n0,"CODE",{});var kEt=s(eFe);a2r=r(kEt,"model_type"),kEt.forEach(t),n2r=r(n0,` property of the config object (either
passed as an argument or loaded from `),oFe=n(n0,"CODE",{});var SEt=s(oFe);s2r=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),l2r=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(n0,"CODE",{});var REt=s(rFe);i2r=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),d2r=r(n0,":"),n0.forEach(t),c2r=i(Cl),se=n(Cl,"UL",{});var le=s(se);T8=n(le,"LI",{});var eBe=s(T8);tFe=n(eBe,"STRONG",{});var PEt=s(tFe);f2r=r(PEt,"albert"),PEt.forEach(t),m2r=r(eBe," \u2014 "),lH=n(eBe,"A",{href:!0});var BEt=s(lH);g2r=r(BEt,"TFAlbertForPreTraining"),BEt.forEach(t),h2r=r(eBe," (ALBERT model)"),eBe.forEach(t),p2r=i(le),M8=n(le,"LI",{});var oBe=s(M8);aFe=n(oBe,"STRONG",{});var IEt=s(aFe);u2r=r(IEt,"bart"),IEt.forEach(t),_2r=r(oBe," \u2014 "),iH=n(oBe,"A",{href:!0});var NEt=s(iH);b2r=r(NEt,"TFBartForConditionalGeneration"),NEt.forEach(t),v2r=r(oBe," (BART model)"),oBe.forEach(t),F2r=i(le),E8=n(le,"LI",{});var rBe=s(E8);nFe=n(rBe,"STRONG",{});var qEt=s(nFe);T2r=r(qEt,"bert"),qEt.forEach(t),M2r=r(rBe," \u2014 "),dH=n(rBe,"A",{href:!0});var jEt=s(dH);E2r=r(jEt,"TFBertForPreTraining"),jEt.forEach(t),C2r=r(rBe," (BERT model)"),rBe.forEach(t),w2r=i(le),C8=n(le,"LI",{});var tBe=s(C8);sFe=n(tBe,"STRONG",{});var DEt=s(sFe);A2r=r(DEt,"camembert"),DEt.forEach(t),y2r=r(tBe," \u2014 "),cH=n(tBe,"A",{href:!0});var GEt=s(cH);L2r=r(GEt,"TFCamembertForMaskedLM"),GEt.forEach(t),x2r=r(tBe," (CamemBERT model)"),tBe.forEach(t),$2r=i(le),w8=n(le,"LI",{});var aBe=s(w8);lFe=n(aBe,"STRONG",{});var OEt=s(lFe);k2r=r(OEt,"ctrl"),OEt.forEach(t),S2r=r(aBe," \u2014 "),fH=n(aBe,"A",{href:!0});var VEt=s(fH);R2r=r(VEt,"TFCTRLLMHeadModel"),VEt.forEach(t),P2r=r(aBe," (CTRL model)"),aBe.forEach(t),B2r=i(le),A8=n(le,"LI",{});var nBe=s(A8);iFe=n(nBe,"STRONG",{});var XEt=s(iFe);I2r=r(XEt,"distilbert"),XEt.forEach(t),N2r=r(nBe," \u2014 "),mH=n(nBe,"A",{href:!0});var zEt=s(mH);q2r=r(zEt,"TFDistilBertForMaskedLM"),zEt.forEach(t),j2r=r(nBe," (DistilBERT model)"),nBe.forEach(t),D2r=i(le),y8=n(le,"LI",{});var sBe=s(y8);dFe=n(sBe,"STRONG",{});var WEt=s(dFe);G2r=r(WEt,"electra"),WEt.forEach(t),O2r=r(sBe," \u2014 "),gH=n(sBe,"A",{href:!0});var QEt=s(gH);V2r=r(QEt,"TFElectraForPreTraining"),QEt.forEach(t),X2r=r(sBe," (ELECTRA model)"),sBe.forEach(t),z2r=i(le),L8=n(le,"LI",{});var lBe=s(L8);cFe=n(lBe,"STRONG",{});var HEt=s(cFe);W2r=r(HEt,"flaubert"),HEt.forEach(t),Q2r=r(lBe," \u2014 "),hH=n(lBe,"A",{href:!0});var UEt=s(hH);H2r=r(UEt,"TFFlaubertWithLMHeadModel"),UEt.forEach(t),U2r=r(lBe," (FlauBERT model)"),lBe.forEach(t),J2r=i(le),x8=n(le,"LI",{});var iBe=s(x8);fFe=n(iBe,"STRONG",{});var JEt=s(fFe);Y2r=r(JEt,"funnel"),JEt.forEach(t),K2r=r(iBe," \u2014 "),pH=n(iBe,"A",{href:!0});var YEt=s(pH);Z2r=r(YEt,"TFFunnelForPreTraining"),YEt.forEach(t),e1r=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),o1r=i(le),$8=n(le,"LI",{});var dBe=s($8);mFe=n(dBe,"STRONG",{});var KEt=s(mFe);r1r=r(KEt,"gpt2"),KEt.forEach(t),t1r=r(dBe," \u2014 "),uH=n(dBe,"A",{href:!0});var ZEt=s(uH);a1r=r(ZEt,"TFGPT2LMHeadModel"),ZEt.forEach(t),n1r=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),s1r=i(le),k8=n(le,"LI",{});var cBe=s(k8);gFe=n(cBe,"STRONG",{});var eCt=s(gFe);l1r=r(eCt,"layoutlm"),eCt.forEach(t),i1r=r(cBe," \u2014 "),_H=n(cBe,"A",{href:!0});var oCt=s(_H);d1r=r(oCt,"TFLayoutLMForMaskedLM"),oCt.forEach(t),c1r=r(cBe," (LayoutLM model)"),cBe.forEach(t),f1r=i(le),S8=n(le,"LI",{});var fBe=s(S8);hFe=n(fBe,"STRONG",{});var rCt=s(hFe);m1r=r(rCt,"lxmert"),rCt.forEach(t),g1r=r(fBe," \u2014 "),bH=n(fBe,"A",{href:!0});var tCt=s(bH);h1r=r(tCt,"TFLxmertForPreTraining"),tCt.forEach(t),p1r=r(fBe," (LXMERT model)"),fBe.forEach(t),u1r=i(le),R8=n(le,"LI",{});var mBe=s(R8);pFe=n(mBe,"STRONG",{});var aCt=s(pFe);_1r=r(aCt,"mobilebert"),aCt.forEach(t),b1r=r(mBe," \u2014 "),vH=n(mBe,"A",{href:!0});var nCt=s(vH);v1r=r(nCt,"TFMobileBertForPreTraining"),nCt.forEach(t),F1r=r(mBe," (MobileBERT model)"),mBe.forEach(t),T1r=i(le),P8=n(le,"LI",{});var gBe=s(P8);uFe=n(gBe,"STRONG",{});var sCt=s(uFe);M1r=r(sCt,"mpnet"),sCt.forEach(t),E1r=r(gBe," \u2014 "),FH=n(gBe,"A",{href:!0});var lCt=s(FH);C1r=r(lCt,"TFMPNetForMaskedLM"),lCt.forEach(t),w1r=r(gBe," (MPNet model)"),gBe.forEach(t),A1r=i(le),B8=n(le,"LI",{});var hBe=s(B8);_Fe=n(hBe,"STRONG",{});var iCt=s(_Fe);y1r=r(iCt,"openai-gpt"),iCt.forEach(t),L1r=r(hBe," \u2014 "),TH=n(hBe,"A",{href:!0});var dCt=s(TH);x1r=r(dCt,"TFOpenAIGPTLMHeadModel"),dCt.forEach(t),$1r=r(hBe," (OpenAI GPT model)"),hBe.forEach(t),k1r=i(le),I8=n(le,"LI",{});var pBe=s(I8);bFe=n(pBe,"STRONG",{});var cCt=s(bFe);S1r=r(cCt,"roberta"),cCt.forEach(t),R1r=r(pBe," \u2014 "),MH=n(pBe,"A",{href:!0});var fCt=s(MH);P1r=r(fCt,"TFRobertaForMaskedLM"),fCt.forEach(t),B1r=r(pBe," (RoBERTa model)"),pBe.forEach(t),I1r=i(le),N8=n(le,"LI",{});var uBe=s(N8);vFe=n(uBe,"STRONG",{});var mCt=s(vFe);N1r=r(mCt,"t5"),mCt.forEach(t),q1r=r(uBe," \u2014 "),EH=n(uBe,"A",{href:!0});var gCt=s(EH);j1r=r(gCt,"TFT5ForConditionalGeneration"),gCt.forEach(t),D1r=r(uBe," (T5 model)"),uBe.forEach(t),G1r=i(le),q8=n(le,"LI",{});var _Be=s(q8);FFe=n(_Be,"STRONG",{});var hCt=s(FFe);O1r=r(hCt,"tapas"),hCt.forEach(t),V1r=r(_Be," \u2014 "),CH=n(_Be,"A",{href:!0});var pCt=s(CH);X1r=r(pCt,"TFTapasForMaskedLM"),pCt.forEach(t),z1r=r(_Be," (TAPAS model)"),_Be.forEach(t),W1r=i(le),j8=n(le,"LI",{});var bBe=s(j8);TFe=n(bBe,"STRONG",{});var uCt=s(TFe);Q1r=r(uCt,"transfo-xl"),uCt.forEach(t),H1r=r(bBe," \u2014 "),wH=n(bBe,"A",{href:!0});var _Ct=s(wH);U1r=r(_Ct,"TFTransfoXLLMHeadModel"),_Ct.forEach(t),J1r=r(bBe," (Transformer-XL model)"),bBe.forEach(t),Y1r=i(le),D8=n(le,"LI",{});var vBe=s(D8);MFe=n(vBe,"STRONG",{});var bCt=s(MFe);K1r=r(bCt,"vit_mae"),bCt.forEach(t),Z1r=r(vBe," \u2014 "),AH=n(vBe,"A",{href:!0});var vCt=s(AH);ebr=r(vCt,"TFViTMAEForPreTraining"),vCt.forEach(t),obr=r(vBe," (ViTMAE model)"),vBe.forEach(t),rbr=i(le),G8=n(le,"LI",{});var FBe=s(G8);EFe=n(FBe,"STRONG",{});var FCt=s(EFe);tbr=r(FCt,"xlm"),FCt.forEach(t),abr=r(FBe," \u2014 "),yH=n(FBe,"A",{href:!0});var TCt=s(yH);nbr=r(TCt,"TFXLMWithLMHeadModel"),TCt.forEach(t),sbr=r(FBe," (XLM model)"),FBe.forEach(t),lbr=i(le),O8=n(le,"LI",{});var TBe=s(O8);CFe=n(TBe,"STRONG",{});var MCt=s(CFe);ibr=r(MCt,"xlm-roberta"),MCt.forEach(t),dbr=r(TBe," \u2014 "),LH=n(TBe,"A",{href:!0});var ECt=s(LH);cbr=r(ECt,"TFXLMRobertaForMaskedLM"),ECt.forEach(t),fbr=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),mbr=i(le),V8=n(le,"LI",{});var MBe=s(V8);wFe=n(MBe,"STRONG",{});var CCt=s(wFe);gbr=r(CCt,"xlnet"),CCt.forEach(t),hbr=r(MBe," \u2014 "),xH=n(MBe,"A",{href:!0});var wCt=s(xH);pbr=r(wCt,"TFXLNetLMHeadModel"),wCt.forEach(t),ubr=r(MBe," (XLNet model)"),MBe.forEach(t),le.forEach(t),_br=i(Cl),T(X8.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),sGe=i(f),ac=n(f,"H2",{class:!0});var hVe=s(ac);z8=n(hVe,"A",{id:!0,class:!0,href:!0});var ACt=s(z8);AFe=n(ACt,"SPAN",{});var yCt=s(AFe);T(o9.$$.fragment,yCt),yCt.forEach(t),ACt.forEach(t),bbr=i(hVe),yFe=n(hVe,"SPAN",{});var LCt=s(yFe);vbr=r(LCt,"TFAutoModelForCausalLM"),LCt.forEach(t),hVe.forEach(t),lGe=i(f),or=n(f,"DIV",{class:!0});var wl=s(or);T(r9.$$.fragment,wl),Fbr=i(wl),nc=n(wl,"P",{});var Foe=s(nc);Tbr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$H=n(Foe,"A",{href:!0});var xCt=s($H);Mbr=r(xCt,"from_pretrained()"),xCt.forEach(t),Ebr=r(Foe," class method or the "),kH=n(Foe,"A",{href:!0});var $Ct=s(kH);Cbr=r($Ct,"from_config()"),$Ct.forEach(t),wbr=r(Foe,` class
method.`),Foe.forEach(t),Abr=i(wl),t9=n(wl,"P",{});var pVe=s(t9);ybr=r(pVe,"This class cannot be instantiated directly using "),LFe=n(pVe,"CODE",{});var kCt=s(LFe);Lbr=r(kCt,"__init__()"),kCt.forEach(t),xbr=r(pVe," (throws an error)."),pVe.forEach(t),$br=i(wl),St=n(wl,"DIV",{class:!0});var s0=s(St);T(a9.$$.fragment,s0),kbr=i(s0),xFe=n(s0,"P",{});var SCt=s(xFe);Sbr=r(SCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SCt.forEach(t),Rbr=i(s0),sc=n(s0,"P",{});var Toe=s(sc);Pbr=r(Toe,`Note:
Loading a model from its configuration file does `),$Fe=n(Toe,"STRONG",{});var RCt=s($Fe);Bbr=r(RCt,"not"),RCt.forEach(t),Ibr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Toe,"A",{href:!0});var PCt=s(SH);Nbr=r(PCt,"from_pretrained()"),PCt.forEach(t),qbr=r(Toe," to load the model weights."),Toe.forEach(t),jbr=i(s0),T(W8.$$.fragment,s0),s0.forEach(t),Dbr=i(wl),xr=n(wl,"DIV",{class:!0});var Al=s(xr);T(n9.$$.fragment,Al),Gbr=i(Al),kFe=n(Al,"P",{});var BCt=s(kFe);Obr=r(BCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BCt.forEach(t),Vbr=i(Al),nn=n(Al,"P",{});var l0=s(nn);Xbr=r(l0,"The model class to instantiate is selected based on the "),SFe=n(l0,"CODE",{});var ICt=s(SFe);zbr=r(ICt,"model_type"),ICt.forEach(t),Wbr=r(l0,` property of the config object (either
passed as an argument or loaded from `),RFe=n(l0,"CODE",{});var NCt=s(RFe);Qbr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),Hbr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(l0,"CODE",{});var qCt=s(PFe);Ubr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),Jbr=r(l0,":"),l0.forEach(t),Ybr=i(Al),Me=n(Al,"UL",{});var Ce=s(Me);Q8=n(Ce,"LI",{});var EBe=s(Q8);BFe=n(EBe,"STRONG",{});var jCt=s(BFe);Kbr=r(jCt,"bert"),jCt.forEach(t),Zbr=r(EBe," \u2014 "),RH=n(EBe,"A",{href:!0});var DCt=s(RH);evr=r(DCt,"TFBertLMHeadModel"),DCt.forEach(t),ovr=r(EBe," (BERT model)"),EBe.forEach(t),rvr=i(Ce),H8=n(Ce,"LI",{});var CBe=s(H8);IFe=n(CBe,"STRONG",{});var GCt=s(IFe);tvr=r(GCt,"camembert"),GCt.forEach(t),avr=r(CBe," \u2014 "),PH=n(CBe,"A",{href:!0});var OCt=s(PH);nvr=r(OCt,"TFCamembertForCausalLM"),OCt.forEach(t),svr=r(CBe," (CamemBERT model)"),CBe.forEach(t),lvr=i(Ce),U8=n(Ce,"LI",{});var wBe=s(U8);NFe=n(wBe,"STRONG",{});var VCt=s(NFe);ivr=r(VCt,"ctrl"),VCt.forEach(t),dvr=r(wBe," \u2014 "),BH=n(wBe,"A",{href:!0});var XCt=s(BH);cvr=r(XCt,"TFCTRLLMHeadModel"),XCt.forEach(t),fvr=r(wBe," (CTRL model)"),wBe.forEach(t),mvr=i(Ce),J8=n(Ce,"LI",{});var ABe=s(J8);qFe=n(ABe,"STRONG",{});var zCt=s(qFe);gvr=r(zCt,"gpt2"),zCt.forEach(t),hvr=r(ABe," \u2014 "),IH=n(ABe,"A",{href:!0});var WCt=s(IH);pvr=r(WCt,"TFGPT2LMHeadModel"),WCt.forEach(t),uvr=r(ABe," (OpenAI GPT-2 model)"),ABe.forEach(t),_vr=i(Ce),Y8=n(Ce,"LI",{});var yBe=s(Y8);jFe=n(yBe,"STRONG",{});var QCt=s(jFe);bvr=r(QCt,"gptj"),QCt.forEach(t),vvr=r(yBe," \u2014 "),NH=n(yBe,"A",{href:!0});var HCt=s(NH);Fvr=r(HCt,"TFGPTJForCausalLM"),HCt.forEach(t),Tvr=r(yBe," (GPT-J model)"),yBe.forEach(t),Mvr=i(Ce),K8=n(Ce,"LI",{});var LBe=s(K8);DFe=n(LBe,"STRONG",{});var UCt=s(DFe);Evr=r(UCt,"openai-gpt"),UCt.forEach(t),Cvr=r(LBe," \u2014 "),qH=n(LBe,"A",{href:!0});var JCt=s(qH);wvr=r(JCt,"TFOpenAIGPTLMHeadModel"),JCt.forEach(t),Avr=r(LBe," (OpenAI GPT model)"),LBe.forEach(t),yvr=i(Ce),Z8=n(Ce,"LI",{});var xBe=s(Z8);GFe=n(xBe,"STRONG",{});var YCt=s(GFe);Lvr=r(YCt,"opt"),YCt.forEach(t),xvr=r(xBe," \u2014 "),jH=n(xBe,"A",{href:!0});var KCt=s(jH);$vr=r(KCt,"TFOPTForCausalLM"),KCt.forEach(t),kvr=r(xBe," (OPT model)"),xBe.forEach(t),Svr=i(Ce),eM=n(Ce,"LI",{});var $Be=s(eM);OFe=n($Be,"STRONG",{});var ZCt=s(OFe);Rvr=r(ZCt,"rembert"),ZCt.forEach(t),Pvr=r($Be," \u2014 "),DH=n($Be,"A",{href:!0});var e5t=s(DH);Bvr=r(e5t,"TFRemBertForCausalLM"),e5t.forEach(t),Ivr=r($Be," (RemBERT model)"),$Be.forEach(t),Nvr=i(Ce),oM=n(Ce,"LI",{});var kBe=s(oM);VFe=n(kBe,"STRONG",{});var o5t=s(VFe);qvr=r(o5t,"roberta"),o5t.forEach(t),jvr=r(kBe," \u2014 "),GH=n(kBe,"A",{href:!0});var r5t=s(GH);Dvr=r(r5t,"TFRobertaForCausalLM"),r5t.forEach(t),Gvr=r(kBe," (RoBERTa model)"),kBe.forEach(t),Ovr=i(Ce),rM=n(Ce,"LI",{});var SBe=s(rM);XFe=n(SBe,"STRONG",{});var t5t=s(XFe);Vvr=r(t5t,"roformer"),t5t.forEach(t),Xvr=r(SBe," \u2014 "),OH=n(SBe,"A",{href:!0});var a5t=s(OH);zvr=r(a5t,"TFRoFormerForCausalLM"),a5t.forEach(t),Wvr=r(SBe," (RoFormer model)"),SBe.forEach(t),Qvr=i(Ce),tM=n(Ce,"LI",{});var RBe=s(tM);zFe=n(RBe,"STRONG",{});var n5t=s(zFe);Hvr=r(n5t,"transfo-xl"),n5t.forEach(t),Uvr=r(RBe," \u2014 "),VH=n(RBe,"A",{href:!0});var s5t=s(VH);Jvr=r(s5t,"TFTransfoXLLMHeadModel"),s5t.forEach(t),Yvr=r(RBe," (Transformer-XL model)"),RBe.forEach(t),Kvr=i(Ce),aM=n(Ce,"LI",{});var PBe=s(aM);WFe=n(PBe,"STRONG",{});var l5t=s(WFe);Zvr=r(l5t,"xlm"),l5t.forEach(t),eFr=r(PBe," \u2014 "),XH=n(PBe,"A",{href:!0});var i5t=s(XH);oFr=r(i5t,"TFXLMWithLMHeadModel"),i5t.forEach(t),rFr=r(PBe," (XLM model)"),PBe.forEach(t),tFr=i(Ce),nM=n(Ce,"LI",{});var BBe=s(nM);QFe=n(BBe,"STRONG",{});var d5t=s(QFe);aFr=r(d5t,"xlnet"),d5t.forEach(t),nFr=r(BBe," \u2014 "),zH=n(BBe,"A",{href:!0});var c5t=s(zH);sFr=r(c5t,"TFXLNetLMHeadModel"),c5t.forEach(t),lFr=r(BBe," (XLNet model)"),BBe.forEach(t),Ce.forEach(t),iFr=i(Al),T(sM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),iGe=i(f),lc=n(f,"H2",{class:!0});var uVe=s(lc);lM=n(uVe,"A",{id:!0,class:!0,href:!0});var f5t=s(lM);HFe=n(f5t,"SPAN",{});var m5t=s(HFe);T(s9.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),dFr=i(uVe),UFe=n(uVe,"SPAN",{});var g5t=s(UFe);cFr=r(g5t,"TFAutoModelForImageClassification"),g5t.forEach(t),uVe.forEach(t),dGe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(l9.$$.fragment,yl),fFr=i(yl),ic=n(yl,"P",{});var Moe=s(ic);mFr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WH=n(Moe,"A",{href:!0});var h5t=s(WH);gFr=r(h5t,"from_pretrained()"),h5t.forEach(t),hFr=r(Moe," class method or the "),QH=n(Moe,"A",{href:!0});var p5t=s(QH);pFr=r(p5t,"from_config()"),p5t.forEach(t),uFr=r(Moe,` class
method.`),Moe.forEach(t),_Fr=i(yl),i9=n(yl,"P",{});var _Ve=s(i9);bFr=r(_Ve,"This class cannot be instantiated directly using "),JFe=n(_Ve,"CODE",{});var u5t=s(JFe);vFr=r(u5t,"__init__()"),u5t.forEach(t),FFr=r(_Ve," (throws an error)."),_Ve.forEach(t),TFr=i(yl),Rt=n(yl,"DIV",{class:!0});var i0=s(Rt);T(d9.$$.fragment,i0),MFr=i(i0),YFe=n(i0,"P",{});var _5t=s(YFe);EFr=r(_5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_5t.forEach(t),CFr=i(i0),dc=n(i0,"P",{});var Eoe=s(dc);wFr=r(Eoe,`Note:
Loading a model from its configuration file does `),KFe=n(Eoe,"STRONG",{});var b5t=s(KFe);AFr=r(b5t,"not"),b5t.forEach(t),yFr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(Eoe,"A",{href:!0});var v5t=s(HH);LFr=r(v5t,"from_pretrained()"),v5t.forEach(t),xFr=r(Eoe," to load the model weights."),Eoe.forEach(t),$Fr=i(i0),T(iM.$$.fragment,i0),i0.forEach(t),kFr=i(yl),$r=n(yl,"DIV",{class:!0});var Ll=s($r);T(c9.$$.fragment,Ll),SFr=i(Ll),ZFe=n(Ll,"P",{});var F5t=s(ZFe);RFr=r(F5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),F5t.forEach(t),PFr=i(Ll),sn=n(Ll,"P",{});var d0=s(sn);BFr=r(d0,"The model class to instantiate is selected based on the "),e6e=n(d0,"CODE",{});var T5t=s(e6e);IFr=r(T5t,"model_type"),T5t.forEach(t),NFr=r(d0,` property of the config object (either
passed as an argument or loaded from `),o6e=n(d0,"CODE",{});var M5t=s(o6e);qFr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),jFr=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(d0,"CODE",{});var E5t=s(r6e);DFr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),GFr=r(d0,":"),d0.forEach(t),OFr=i(Ll),ln=n(Ll,"UL",{});var c0=s(ln);dM=n(c0,"LI",{});var IBe=s(dM);t6e=n(IBe,"STRONG",{});var C5t=s(t6e);VFr=r(C5t,"convnext"),C5t.forEach(t),XFr=r(IBe," \u2014 "),UH=n(IBe,"A",{href:!0});var w5t=s(UH);zFr=r(w5t,"TFConvNextForImageClassification"),w5t.forEach(t),WFr=r(IBe," (ConvNeXT model)"),IBe.forEach(t),QFr=i(c0),cM=n(c0,"LI",{});var NBe=s(cM);a6e=n(NBe,"STRONG",{});var A5t=s(a6e);HFr=r(A5t,"data2vec-vision"),A5t.forEach(t),UFr=r(NBe," \u2014 "),JH=n(NBe,"A",{href:!0});var y5t=s(JH);JFr=r(y5t,"TFData2VecVisionForImageClassification"),y5t.forEach(t),YFr=r(NBe," (Data2VecVision model)"),NBe.forEach(t),KFr=i(c0),fM=n(c0,"LI",{});var qBe=s(fM);n6e=n(qBe,"STRONG",{});var L5t=s(n6e);ZFr=r(L5t,"swin"),L5t.forEach(t),e6r=r(qBe," \u2014 "),YH=n(qBe,"A",{href:!0});var x5t=s(YH);o6r=r(x5t,"TFSwinForImageClassification"),x5t.forEach(t),r6r=r(qBe," (Swin Transformer model)"),qBe.forEach(t),t6r=i(c0),mM=n(c0,"LI",{});var jBe=s(mM);s6e=n(jBe,"STRONG",{});var $5t=s(s6e);a6r=r($5t,"vit"),$5t.forEach(t),n6r=r(jBe," \u2014 "),KH=n(jBe,"A",{href:!0});var k5t=s(KH);s6r=r(k5t,"TFViTForImageClassification"),k5t.forEach(t),l6r=r(jBe," (ViT model)"),jBe.forEach(t),c0.forEach(t),i6r=i(Ll),T(gM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),cGe=i(f),cc=n(f,"H2",{class:!0});var bVe=s(cc);hM=n(bVe,"A",{id:!0,class:!0,href:!0});var S5t=s(hM);l6e=n(S5t,"SPAN",{});var R5t=s(l6e);T(f9.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),d6r=i(bVe),i6e=n(bVe,"SPAN",{});var P5t=s(i6e);c6r=r(P5t,"TFAutoModelForMaskedLM"),P5t.forEach(t),bVe.forEach(t),fGe=i(f),tr=n(f,"DIV",{class:!0});var xl=s(tr);T(m9.$$.fragment,xl),f6r=i(xl),fc=n(xl,"P",{});var Coe=s(fc);m6r=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZH=n(Coe,"A",{href:!0});var B5t=s(ZH);g6r=r(B5t,"from_pretrained()"),B5t.forEach(t),h6r=r(Coe," class method or the "),eU=n(Coe,"A",{href:!0});var I5t=s(eU);p6r=r(I5t,"from_config()"),I5t.forEach(t),u6r=r(Coe,` class
method.`),Coe.forEach(t),_6r=i(xl),g9=n(xl,"P",{});var vVe=s(g9);b6r=r(vVe,"This class cannot be instantiated directly using "),d6e=n(vVe,"CODE",{});var N5t=s(d6e);v6r=r(N5t,"__init__()"),N5t.forEach(t),F6r=r(vVe," (throws an error)."),vVe.forEach(t),T6r=i(xl),Pt=n(xl,"DIV",{class:!0});var f0=s(Pt);T(h9.$$.fragment,f0),M6r=i(f0),c6e=n(f0,"P",{});var q5t=s(c6e);E6r=r(q5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q5t.forEach(t),C6r=i(f0),mc=n(f0,"P",{});var woe=s(mc);w6r=r(woe,`Note:
Loading a model from its configuration file does `),f6e=n(woe,"STRONG",{});var j5t=s(f6e);A6r=r(j5t,"not"),j5t.forEach(t),y6r=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(woe,"A",{href:!0});var D5t=s(oU);L6r=r(D5t,"from_pretrained()"),D5t.forEach(t),x6r=r(woe," to load the model weights."),woe.forEach(t),$6r=i(f0),T(pM.$$.fragment,f0),f0.forEach(t),k6r=i(xl),kr=n(xl,"DIV",{class:!0});var $l=s(kr);T(p9.$$.fragment,$l),S6r=i($l),m6e=n($l,"P",{});var G5t=s(m6e);R6r=r(G5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G5t.forEach(t),P6r=i($l),dn=n($l,"P",{});var m0=s(dn);B6r=r(m0,"The model class to instantiate is selected based on the "),g6e=n(m0,"CODE",{});var O5t=s(g6e);I6r=r(O5t,"model_type"),O5t.forEach(t),N6r=r(m0,` property of the config object (either
passed as an argument or loaded from `),h6e=n(m0,"CODE",{});var V5t=s(h6e);q6r=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),j6r=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(m0,"CODE",{});var X5t=s(p6e);D6r=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),G6r=r(m0,":"),m0.forEach(t),O6r=i($l),ie=n($l,"UL",{});var fe=s(ie);uM=n(fe,"LI",{});var DBe=s(uM);u6e=n(DBe,"STRONG",{});var z5t=s(u6e);V6r=r(z5t,"albert"),z5t.forEach(t),X6r=r(DBe," \u2014 "),rU=n(DBe,"A",{href:!0});var W5t=s(rU);z6r=r(W5t,"TFAlbertForMaskedLM"),W5t.forEach(t),W6r=r(DBe," (ALBERT model)"),DBe.forEach(t),Q6r=i(fe),_M=n(fe,"LI",{});var GBe=s(_M);_6e=n(GBe,"STRONG",{});var Q5t=s(_6e);H6r=r(Q5t,"bert"),Q5t.forEach(t),U6r=r(GBe," \u2014 "),tU=n(GBe,"A",{href:!0});var H5t=s(tU);J6r=r(H5t,"TFBertForMaskedLM"),H5t.forEach(t),Y6r=r(GBe," (BERT model)"),GBe.forEach(t),K6r=i(fe),bM=n(fe,"LI",{});var OBe=s(bM);b6e=n(OBe,"STRONG",{});var U5t=s(b6e);Z6r=r(U5t,"camembert"),U5t.forEach(t),eTr=r(OBe," \u2014 "),aU=n(OBe,"A",{href:!0});var J5t=s(aU);oTr=r(J5t,"TFCamembertForMaskedLM"),J5t.forEach(t),rTr=r(OBe," (CamemBERT model)"),OBe.forEach(t),tTr=i(fe),vM=n(fe,"LI",{});var VBe=s(vM);v6e=n(VBe,"STRONG",{});var Y5t=s(v6e);aTr=r(Y5t,"convbert"),Y5t.forEach(t),nTr=r(VBe," \u2014 "),nU=n(VBe,"A",{href:!0});var K5t=s(nU);sTr=r(K5t,"TFConvBertForMaskedLM"),K5t.forEach(t),lTr=r(VBe," (ConvBERT model)"),VBe.forEach(t),iTr=i(fe),FM=n(fe,"LI",{});var XBe=s(FM);F6e=n(XBe,"STRONG",{});var Z5t=s(F6e);dTr=r(Z5t,"deberta"),Z5t.forEach(t),cTr=r(XBe," \u2014 "),sU=n(XBe,"A",{href:!0});var e3t=s(sU);fTr=r(e3t,"TFDebertaForMaskedLM"),e3t.forEach(t),mTr=r(XBe," (DeBERTa model)"),XBe.forEach(t),gTr=i(fe),TM=n(fe,"LI",{});var zBe=s(TM);T6e=n(zBe,"STRONG",{});var o3t=s(T6e);hTr=r(o3t,"deberta-v2"),o3t.forEach(t),pTr=r(zBe," \u2014 "),lU=n(zBe,"A",{href:!0});var r3t=s(lU);uTr=r(r3t,"TFDebertaV2ForMaskedLM"),r3t.forEach(t),_Tr=r(zBe," (DeBERTa-v2 model)"),zBe.forEach(t),bTr=i(fe),MM=n(fe,"LI",{});var WBe=s(MM);M6e=n(WBe,"STRONG",{});var t3t=s(M6e);vTr=r(t3t,"distilbert"),t3t.forEach(t),FTr=r(WBe," \u2014 "),iU=n(WBe,"A",{href:!0});var a3t=s(iU);TTr=r(a3t,"TFDistilBertForMaskedLM"),a3t.forEach(t),MTr=r(WBe," (DistilBERT model)"),WBe.forEach(t),ETr=i(fe),EM=n(fe,"LI",{});var QBe=s(EM);E6e=n(QBe,"STRONG",{});var n3t=s(E6e);CTr=r(n3t,"electra"),n3t.forEach(t),wTr=r(QBe," \u2014 "),dU=n(QBe,"A",{href:!0});var s3t=s(dU);ATr=r(s3t,"TFElectraForMaskedLM"),s3t.forEach(t),yTr=r(QBe," (ELECTRA model)"),QBe.forEach(t),LTr=i(fe),CM=n(fe,"LI",{});var HBe=s(CM);C6e=n(HBe,"STRONG",{});var l3t=s(C6e);xTr=r(l3t,"flaubert"),l3t.forEach(t),$Tr=r(HBe," \u2014 "),cU=n(HBe,"A",{href:!0});var i3t=s(cU);kTr=r(i3t,"TFFlaubertWithLMHeadModel"),i3t.forEach(t),STr=r(HBe," (FlauBERT model)"),HBe.forEach(t),RTr=i(fe),wM=n(fe,"LI",{});var UBe=s(wM);w6e=n(UBe,"STRONG",{});var d3t=s(w6e);PTr=r(d3t,"funnel"),d3t.forEach(t),BTr=r(UBe," \u2014 "),fU=n(UBe,"A",{href:!0});var c3t=s(fU);ITr=r(c3t,"TFFunnelForMaskedLM"),c3t.forEach(t),NTr=r(UBe," (Funnel Transformer model)"),UBe.forEach(t),qTr=i(fe),AM=n(fe,"LI",{});var JBe=s(AM);A6e=n(JBe,"STRONG",{});var f3t=s(A6e);jTr=r(f3t,"layoutlm"),f3t.forEach(t),DTr=r(JBe," \u2014 "),mU=n(JBe,"A",{href:!0});var m3t=s(mU);GTr=r(m3t,"TFLayoutLMForMaskedLM"),m3t.forEach(t),OTr=r(JBe," (LayoutLM model)"),JBe.forEach(t),VTr=i(fe),yM=n(fe,"LI",{});var YBe=s(yM);y6e=n(YBe,"STRONG",{});var g3t=s(y6e);XTr=r(g3t,"longformer"),g3t.forEach(t),zTr=r(YBe," \u2014 "),gU=n(YBe,"A",{href:!0});var h3t=s(gU);WTr=r(h3t,"TFLongformerForMaskedLM"),h3t.forEach(t),QTr=r(YBe," (Longformer model)"),YBe.forEach(t),HTr=i(fe),LM=n(fe,"LI",{});var KBe=s(LM);L6e=n(KBe,"STRONG",{});var p3t=s(L6e);UTr=r(p3t,"mobilebert"),p3t.forEach(t),JTr=r(KBe," \u2014 "),hU=n(KBe,"A",{href:!0});var u3t=s(hU);YTr=r(u3t,"TFMobileBertForMaskedLM"),u3t.forEach(t),KTr=r(KBe," (MobileBERT model)"),KBe.forEach(t),ZTr=i(fe),xM=n(fe,"LI",{});var ZBe=s(xM);x6e=n(ZBe,"STRONG",{});var _3t=s(x6e);e7r=r(_3t,"mpnet"),_3t.forEach(t),o7r=r(ZBe," \u2014 "),pU=n(ZBe,"A",{href:!0});var b3t=s(pU);r7r=r(b3t,"TFMPNetForMaskedLM"),b3t.forEach(t),t7r=r(ZBe," (MPNet model)"),ZBe.forEach(t),a7r=i(fe),$M=n(fe,"LI",{});var eIe=s($M);$6e=n(eIe,"STRONG",{});var v3t=s($6e);n7r=r(v3t,"rembert"),v3t.forEach(t),s7r=r(eIe," \u2014 "),uU=n(eIe,"A",{href:!0});var F3t=s(uU);l7r=r(F3t,"TFRemBertForMaskedLM"),F3t.forEach(t),i7r=r(eIe," (RemBERT model)"),eIe.forEach(t),d7r=i(fe),kM=n(fe,"LI",{});var oIe=s(kM);k6e=n(oIe,"STRONG",{});var T3t=s(k6e);c7r=r(T3t,"roberta"),T3t.forEach(t),f7r=r(oIe," \u2014 "),_U=n(oIe,"A",{href:!0});var M3t=s(_U);m7r=r(M3t,"TFRobertaForMaskedLM"),M3t.forEach(t),g7r=r(oIe," (RoBERTa model)"),oIe.forEach(t),h7r=i(fe),SM=n(fe,"LI",{});var rIe=s(SM);S6e=n(rIe,"STRONG",{});var E3t=s(S6e);p7r=r(E3t,"roformer"),E3t.forEach(t),u7r=r(rIe," \u2014 "),bU=n(rIe,"A",{href:!0});var C3t=s(bU);_7r=r(C3t,"TFRoFormerForMaskedLM"),C3t.forEach(t),b7r=r(rIe," (RoFormer model)"),rIe.forEach(t),v7r=i(fe),RM=n(fe,"LI",{});var tIe=s(RM);R6e=n(tIe,"STRONG",{});var w3t=s(R6e);F7r=r(w3t,"tapas"),w3t.forEach(t),T7r=r(tIe," \u2014 "),vU=n(tIe,"A",{href:!0});var A3t=s(vU);M7r=r(A3t,"TFTapasForMaskedLM"),A3t.forEach(t),E7r=r(tIe," (TAPAS model)"),tIe.forEach(t),C7r=i(fe),PM=n(fe,"LI",{});var aIe=s(PM);P6e=n(aIe,"STRONG",{});var y3t=s(P6e);w7r=r(y3t,"xlm"),y3t.forEach(t),A7r=r(aIe," \u2014 "),FU=n(aIe,"A",{href:!0});var L3t=s(FU);y7r=r(L3t,"TFXLMWithLMHeadModel"),L3t.forEach(t),L7r=r(aIe," (XLM model)"),aIe.forEach(t),x7r=i(fe),BM=n(fe,"LI",{});var nIe=s(BM);B6e=n(nIe,"STRONG",{});var x3t=s(B6e);$7r=r(x3t,"xlm-roberta"),x3t.forEach(t),k7r=r(nIe," \u2014 "),TU=n(nIe,"A",{href:!0});var $3t=s(TU);S7r=r($3t,"TFXLMRobertaForMaskedLM"),$3t.forEach(t),R7r=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),fe.forEach(t),P7r=i($l),T(IM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),mGe=i(f),gc=n(f,"H2",{class:!0});var FVe=s(gc);NM=n(FVe,"A",{id:!0,class:!0,href:!0});var k3t=s(NM);I6e=n(k3t,"SPAN",{});var S3t=s(I6e);T(u9.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),B7r=i(FVe),N6e=n(FVe,"SPAN",{});var R3t=s(N6e);I7r=r(R3t,"TFAutoModelForSeq2SeqLM"),R3t.forEach(t),FVe.forEach(t),gGe=i(f),ar=n(f,"DIV",{class:!0});var kl=s(ar);T(_9.$$.fragment,kl),N7r=i(kl),hc=n(kl,"P",{});var Aoe=s(hc);q7r=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MU=n(Aoe,"A",{href:!0});var P3t=s(MU);j7r=r(P3t,"from_pretrained()"),P3t.forEach(t),D7r=r(Aoe," class method or the "),EU=n(Aoe,"A",{href:!0});var B3t=s(EU);G7r=r(B3t,"from_config()"),B3t.forEach(t),O7r=r(Aoe,` class
method.`),Aoe.forEach(t),V7r=i(kl),b9=n(kl,"P",{});var TVe=s(b9);X7r=r(TVe,"This class cannot be instantiated directly using "),q6e=n(TVe,"CODE",{});var I3t=s(q6e);z7r=r(I3t,"__init__()"),I3t.forEach(t),W7r=r(TVe," (throws an error)."),TVe.forEach(t),Q7r=i(kl),Bt=n(kl,"DIV",{class:!0});var g0=s(Bt);T(v9.$$.fragment,g0),H7r=i(g0),j6e=n(g0,"P",{});var N3t=s(j6e);U7r=r(N3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N3t.forEach(t),J7r=i(g0),pc=n(g0,"P",{});var yoe=s(pc);Y7r=r(yoe,`Note:
Loading a model from its configuration file does `),D6e=n(yoe,"STRONG",{});var q3t=s(D6e);K7r=r(q3t,"not"),q3t.forEach(t),Z7r=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(yoe,"A",{href:!0});var j3t=s(CU);e8r=r(j3t,"from_pretrained()"),j3t.forEach(t),o8r=r(yoe," to load the model weights."),yoe.forEach(t),r8r=i(g0),T(qM.$$.fragment,g0),g0.forEach(t),t8r=i(kl),Sr=n(kl,"DIV",{class:!0});var Sl=s(Sr);T(F9.$$.fragment,Sl),a8r=i(Sl),G6e=n(Sl,"P",{});var D3t=s(G6e);n8r=r(D3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D3t.forEach(t),s8r=i(Sl),cn=n(Sl,"P",{});var h0=s(cn);l8r=r(h0,"The model class to instantiate is selected based on the "),O6e=n(h0,"CODE",{});var G3t=s(O6e);i8r=r(G3t,"model_type"),G3t.forEach(t),d8r=r(h0,` property of the config object (either
passed as an argument or loaded from `),V6e=n(h0,"CODE",{});var O3t=s(V6e);c8r=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),f8r=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(h0,"CODE",{});var V3t=s(X6e);m8r=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),g8r=r(h0,":"),h0.forEach(t),h8r=i(Sl),Le=n(Sl,"UL",{});var Ie=s(Le);jM=n(Ie,"LI",{});var sIe=s(jM);z6e=n(sIe,"STRONG",{});var X3t=s(z6e);p8r=r(X3t,"bart"),X3t.forEach(t),u8r=r(sIe," \u2014 "),wU=n(sIe,"A",{href:!0});var z3t=s(wU);_8r=r(z3t,"TFBartForConditionalGeneration"),z3t.forEach(t),b8r=r(sIe," (BART model)"),sIe.forEach(t),v8r=i(Ie),DM=n(Ie,"LI",{});var lIe=s(DM);W6e=n(lIe,"STRONG",{});var W3t=s(W6e);F8r=r(W3t,"blenderbot"),W3t.forEach(t),T8r=r(lIe," \u2014 "),AU=n(lIe,"A",{href:!0});var Q3t=s(AU);M8r=r(Q3t,"TFBlenderbotForConditionalGeneration"),Q3t.forEach(t),E8r=r(lIe," (Blenderbot model)"),lIe.forEach(t),C8r=i(Ie),GM=n(Ie,"LI",{});var iIe=s(GM);Q6e=n(iIe,"STRONG",{});var H3t=s(Q6e);w8r=r(H3t,"blenderbot-small"),H3t.forEach(t),A8r=r(iIe," \u2014 "),yU=n(iIe,"A",{href:!0});var U3t=s(yU);y8r=r(U3t,"TFBlenderbotSmallForConditionalGeneration"),U3t.forEach(t),L8r=r(iIe," (BlenderbotSmall model)"),iIe.forEach(t),x8r=i(Ie),OM=n(Ie,"LI",{});var dIe=s(OM);H6e=n(dIe,"STRONG",{});var J3t=s(H6e);$8r=r(J3t,"encoder-decoder"),J3t.forEach(t),k8r=r(dIe," \u2014 "),LU=n(dIe,"A",{href:!0});var Y3t=s(LU);S8r=r(Y3t,"TFEncoderDecoderModel"),Y3t.forEach(t),R8r=r(dIe," (Encoder decoder model)"),dIe.forEach(t),P8r=i(Ie),VM=n(Ie,"LI",{});var cIe=s(VM);U6e=n(cIe,"STRONG",{});var K3t=s(U6e);B8r=r(K3t,"led"),K3t.forEach(t),I8r=r(cIe," \u2014 "),xU=n(cIe,"A",{href:!0});var Z3t=s(xU);N8r=r(Z3t,"TFLEDForConditionalGeneration"),Z3t.forEach(t),q8r=r(cIe," (LED model)"),cIe.forEach(t),j8r=i(Ie),XM=n(Ie,"LI",{});var fIe=s(XM);J6e=n(fIe,"STRONG",{});var ewt=s(J6e);D8r=r(ewt,"marian"),ewt.forEach(t),G8r=r(fIe," \u2014 "),$U=n(fIe,"A",{href:!0});var owt=s($U);O8r=r(owt,"TFMarianMTModel"),owt.forEach(t),V8r=r(fIe," (Marian model)"),fIe.forEach(t),X8r=i(Ie),zM=n(Ie,"LI",{});var mIe=s(zM);Y6e=n(mIe,"STRONG",{});var rwt=s(Y6e);z8r=r(rwt,"mbart"),rwt.forEach(t),W8r=r(mIe," \u2014 "),kU=n(mIe,"A",{href:!0});var twt=s(kU);Q8r=r(twt,"TFMBartForConditionalGeneration"),twt.forEach(t),H8r=r(mIe," (mBART model)"),mIe.forEach(t),U8r=i(Ie),WM=n(Ie,"LI",{});var gIe=s(WM);K6e=n(gIe,"STRONG",{});var awt=s(K6e);J8r=r(awt,"mt5"),awt.forEach(t),Y8r=r(gIe," \u2014 "),SU=n(gIe,"A",{href:!0});var nwt=s(SU);K8r=r(nwt,"TFMT5ForConditionalGeneration"),nwt.forEach(t),Z8r=r(gIe," (MT5 model)"),gIe.forEach(t),eMr=i(Ie),QM=n(Ie,"LI",{});var hIe=s(QM);Z6e=n(hIe,"STRONG",{});var swt=s(Z6e);oMr=r(swt,"pegasus"),swt.forEach(t),rMr=r(hIe," \u2014 "),RU=n(hIe,"A",{href:!0});var lwt=s(RU);tMr=r(lwt,"TFPegasusForConditionalGeneration"),lwt.forEach(t),aMr=r(hIe," (Pegasus model)"),hIe.forEach(t),nMr=i(Ie),HM=n(Ie,"LI",{});var pIe=s(HM);eTe=n(pIe,"STRONG",{});var iwt=s(eTe);sMr=r(iwt,"t5"),iwt.forEach(t),lMr=r(pIe," \u2014 "),PU=n(pIe,"A",{href:!0});var dwt=s(PU);iMr=r(dwt,"TFT5ForConditionalGeneration"),dwt.forEach(t),dMr=r(pIe," (T5 model)"),pIe.forEach(t),Ie.forEach(t),cMr=i(Sl),T(UM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),hGe=i(f),uc=n(f,"H2",{class:!0});var MVe=s(uc);JM=n(MVe,"A",{id:!0,class:!0,href:!0});var cwt=s(JM);oTe=n(cwt,"SPAN",{});var fwt=s(oTe);T(T9.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),fMr=i(MVe),rTe=n(MVe,"SPAN",{});var mwt=s(rTe);mMr=r(mwt,"TFAutoModelForSequenceClassification"),mwt.forEach(t),MVe.forEach(t),pGe=i(f),nr=n(f,"DIV",{class:!0});var Rl=s(nr);T(M9.$$.fragment,Rl),gMr=i(Rl),_c=n(Rl,"P",{});var Loe=s(_c);hMr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BU=n(Loe,"A",{href:!0});var gwt=s(BU);pMr=r(gwt,"from_pretrained()"),gwt.forEach(t),uMr=r(Loe," class method or the "),IU=n(Loe,"A",{href:!0});var hwt=s(IU);_Mr=r(hwt,"from_config()"),hwt.forEach(t),bMr=r(Loe,` class
method.`),Loe.forEach(t),vMr=i(Rl),E9=n(Rl,"P",{});var EVe=s(E9);FMr=r(EVe,"This class cannot be instantiated directly using "),tTe=n(EVe,"CODE",{});var pwt=s(tTe);TMr=r(pwt,"__init__()"),pwt.forEach(t),MMr=r(EVe," (throws an error)."),EVe.forEach(t),EMr=i(Rl),It=n(Rl,"DIV",{class:!0});var p0=s(It);T(C9.$$.fragment,p0),CMr=i(p0),aTe=n(p0,"P",{});var uwt=s(aTe);wMr=r(uwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uwt.forEach(t),AMr=i(p0),bc=n(p0,"P",{});var xoe=s(bc);yMr=r(xoe,`Note:
Loading a model from its configuration file does `),nTe=n(xoe,"STRONG",{});var _wt=s(nTe);LMr=r(_wt,"not"),_wt.forEach(t),xMr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(xoe,"A",{href:!0});var bwt=s(NU);$Mr=r(bwt,"from_pretrained()"),bwt.forEach(t),kMr=r(xoe," to load the model weights."),xoe.forEach(t),SMr=i(p0),T(YM.$$.fragment,p0),p0.forEach(t),RMr=i(Rl),Rr=n(Rl,"DIV",{class:!0});var Pl=s(Rr);T(w9.$$.fragment,Pl),PMr=i(Pl),sTe=n(Pl,"P",{});var vwt=s(sTe);BMr=r(vwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vwt.forEach(t),IMr=i(Pl),fn=n(Pl,"P",{});var u0=s(fn);NMr=r(u0,"The model class to instantiate is selected based on the "),lTe=n(u0,"CODE",{});var Fwt=s(lTe);qMr=r(Fwt,"model_type"),Fwt.forEach(t),jMr=r(u0,` property of the config object (either
passed as an argument or loaded from `),iTe=n(u0,"CODE",{});var Twt=s(iTe);DMr=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),GMr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(u0,"CODE",{});var Mwt=s(dTe);OMr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),VMr=r(u0,":"),u0.forEach(t),XMr=i(Pl),re=n(Pl,"UL",{});var ae=s(re);KM=n(ae,"LI",{});var uIe=s(KM);cTe=n(uIe,"STRONG",{});var Ewt=s(cTe);zMr=r(Ewt,"albert"),Ewt.forEach(t),WMr=r(uIe," \u2014 "),qU=n(uIe,"A",{href:!0});var Cwt=s(qU);QMr=r(Cwt,"TFAlbertForSequenceClassification"),Cwt.forEach(t),HMr=r(uIe," (ALBERT model)"),uIe.forEach(t),UMr=i(ae),ZM=n(ae,"LI",{});var _Ie=s(ZM);fTe=n(_Ie,"STRONG",{});var wwt=s(fTe);JMr=r(wwt,"bert"),wwt.forEach(t),YMr=r(_Ie," \u2014 "),jU=n(_Ie,"A",{href:!0});var Awt=s(jU);KMr=r(Awt,"TFBertForSequenceClassification"),Awt.forEach(t),ZMr=r(_Ie," (BERT model)"),_Ie.forEach(t),e4r=i(ae),e4=n(ae,"LI",{});var bIe=s(e4);mTe=n(bIe,"STRONG",{});var ywt=s(mTe);o4r=r(ywt,"camembert"),ywt.forEach(t),r4r=r(bIe," \u2014 "),DU=n(bIe,"A",{href:!0});var Lwt=s(DU);t4r=r(Lwt,"TFCamembertForSequenceClassification"),Lwt.forEach(t),a4r=r(bIe," (CamemBERT model)"),bIe.forEach(t),n4r=i(ae),o4=n(ae,"LI",{});var vIe=s(o4);gTe=n(vIe,"STRONG",{});var xwt=s(gTe);s4r=r(xwt,"convbert"),xwt.forEach(t),l4r=r(vIe," \u2014 "),GU=n(vIe,"A",{href:!0});var $wt=s(GU);i4r=r($wt,"TFConvBertForSequenceClassification"),$wt.forEach(t),d4r=r(vIe," (ConvBERT model)"),vIe.forEach(t),c4r=i(ae),r4=n(ae,"LI",{});var FIe=s(r4);hTe=n(FIe,"STRONG",{});var kwt=s(hTe);f4r=r(kwt,"ctrl"),kwt.forEach(t),m4r=r(FIe," \u2014 "),OU=n(FIe,"A",{href:!0});var Swt=s(OU);g4r=r(Swt,"TFCTRLForSequenceClassification"),Swt.forEach(t),h4r=r(FIe," (CTRL model)"),FIe.forEach(t),p4r=i(ae),t4=n(ae,"LI",{});var TIe=s(t4);pTe=n(TIe,"STRONG",{});var Rwt=s(pTe);u4r=r(Rwt,"deberta"),Rwt.forEach(t),_4r=r(TIe," \u2014 "),VU=n(TIe,"A",{href:!0});var Pwt=s(VU);b4r=r(Pwt,"TFDebertaForSequenceClassification"),Pwt.forEach(t),v4r=r(TIe," (DeBERTa model)"),TIe.forEach(t),F4r=i(ae),a4=n(ae,"LI",{});var MIe=s(a4);uTe=n(MIe,"STRONG",{});var Bwt=s(uTe);T4r=r(Bwt,"deberta-v2"),Bwt.forEach(t),M4r=r(MIe," \u2014 "),XU=n(MIe,"A",{href:!0});var Iwt=s(XU);E4r=r(Iwt,"TFDebertaV2ForSequenceClassification"),Iwt.forEach(t),C4r=r(MIe," (DeBERTa-v2 model)"),MIe.forEach(t),w4r=i(ae),n4=n(ae,"LI",{});var EIe=s(n4);_Te=n(EIe,"STRONG",{});var Nwt=s(_Te);A4r=r(Nwt,"distilbert"),Nwt.forEach(t),y4r=r(EIe," \u2014 "),zU=n(EIe,"A",{href:!0});var qwt=s(zU);L4r=r(qwt,"TFDistilBertForSequenceClassification"),qwt.forEach(t),x4r=r(EIe," (DistilBERT model)"),EIe.forEach(t),$4r=i(ae),s4=n(ae,"LI",{});var CIe=s(s4);bTe=n(CIe,"STRONG",{});var jwt=s(bTe);k4r=r(jwt,"electra"),jwt.forEach(t),S4r=r(CIe," \u2014 "),WU=n(CIe,"A",{href:!0});var Dwt=s(WU);R4r=r(Dwt,"TFElectraForSequenceClassification"),Dwt.forEach(t),P4r=r(CIe," (ELECTRA model)"),CIe.forEach(t),B4r=i(ae),l4=n(ae,"LI",{});var wIe=s(l4);vTe=n(wIe,"STRONG",{});var Gwt=s(vTe);I4r=r(Gwt,"flaubert"),Gwt.forEach(t),N4r=r(wIe," \u2014 "),QU=n(wIe,"A",{href:!0});var Owt=s(QU);q4r=r(Owt,"TFFlaubertForSequenceClassification"),Owt.forEach(t),j4r=r(wIe," (FlauBERT model)"),wIe.forEach(t),D4r=i(ae),i4=n(ae,"LI",{});var AIe=s(i4);FTe=n(AIe,"STRONG",{});var Vwt=s(FTe);G4r=r(Vwt,"funnel"),Vwt.forEach(t),O4r=r(AIe," \u2014 "),HU=n(AIe,"A",{href:!0});var Xwt=s(HU);V4r=r(Xwt,"TFFunnelForSequenceClassification"),Xwt.forEach(t),X4r=r(AIe," (Funnel Transformer model)"),AIe.forEach(t),z4r=i(ae),d4=n(ae,"LI",{});var yIe=s(d4);TTe=n(yIe,"STRONG",{});var zwt=s(TTe);W4r=r(zwt,"gpt2"),zwt.forEach(t),Q4r=r(yIe," \u2014 "),UU=n(yIe,"A",{href:!0});var Wwt=s(UU);H4r=r(Wwt,"TFGPT2ForSequenceClassification"),Wwt.forEach(t),U4r=r(yIe," (OpenAI GPT-2 model)"),yIe.forEach(t),J4r=i(ae),c4=n(ae,"LI",{});var LIe=s(c4);MTe=n(LIe,"STRONG",{});var Qwt=s(MTe);Y4r=r(Qwt,"gptj"),Qwt.forEach(t),K4r=r(LIe," \u2014 "),JU=n(LIe,"A",{href:!0});var Hwt=s(JU);Z4r=r(Hwt,"TFGPTJForSequenceClassification"),Hwt.forEach(t),eEr=r(LIe," (GPT-J model)"),LIe.forEach(t),oEr=i(ae),f4=n(ae,"LI",{});var xIe=s(f4);ETe=n(xIe,"STRONG",{});var Uwt=s(ETe);rEr=r(Uwt,"layoutlm"),Uwt.forEach(t),tEr=r(xIe," \u2014 "),YU=n(xIe,"A",{href:!0});var Jwt=s(YU);aEr=r(Jwt,"TFLayoutLMForSequenceClassification"),Jwt.forEach(t),nEr=r(xIe," (LayoutLM model)"),xIe.forEach(t),sEr=i(ae),m4=n(ae,"LI",{});var $Ie=s(m4);CTe=n($Ie,"STRONG",{});var Ywt=s(CTe);lEr=r(Ywt,"longformer"),Ywt.forEach(t),iEr=r($Ie," \u2014 "),KU=n($Ie,"A",{href:!0});var Kwt=s(KU);dEr=r(Kwt,"TFLongformerForSequenceClassification"),Kwt.forEach(t),cEr=r($Ie," (Longformer model)"),$Ie.forEach(t),fEr=i(ae),g4=n(ae,"LI",{});var kIe=s(g4);wTe=n(kIe,"STRONG",{});var Zwt=s(wTe);mEr=r(Zwt,"mobilebert"),Zwt.forEach(t),gEr=r(kIe," \u2014 "),ZU=n(kIe,"A",{href:!0});var e0t=s(ZU);hEr=r(e0t,"TFMobileBertForSequenceClassification"),e0t.forEach(t),pEr=r(kIe," (MobileBERT model)"),kIe.forEach(t),uEr=i(ae),h4=n(ae,"LI",{});var SIe=s(h4);ATe=n(SIe,"STRONG",{});var o0t=s(ATe);_Er=r(o0t,"mpnet"),o0t.forEach(t),bEr=r(SIe," \u2014 "),eJ=n(SIe,"A",{href:!0});var r0t=s(eJ);vEr=r(r0t,"TFMPNetForSequenceClassification"),r0t.forEach(t),FEr=r(SIe," (MPNet model)"),SIe.forEach(t),TEr=i(ae),p4=n(ae,"LI",{});var RIe=s(p4);yTe=n(RIe,"STRONG",{});var t0t=s(yTe);MEr=r(t0t,"openai-gpt"),t0t.forEach(t),EEr=r(RIe," \u2014 "),oJ=n(RIe,"A",{href:!0});var a0t=s(oJ);CEr=r(a0t,"TFOpenAIGPTForSequenceClassification"),a0t.forEach(t),wEr=r(RIe," (OpenAI GPT model)"),RIe.forEach(t),AEr=i(ae),u4=n(ae,"LI",{});var PIe=s(u4);LTe=n(PIe,"STRONG",{});var n0t=s(LTe);yEr=r(n0t,"rembert"),n0t.forEach(t),LEr=r(PIe," \u2014 "),rJ=n(PIe,"A",{href:!0});var s0t=s(rJ);xEr=r(s0t,"TFRemBertForSequenceClassification"),s0t.forEach(t),$Er=r(PIe," (RemBERT model)"),PIe.forEach(t),kEr=i(ae),_4=n(ae,"LI",{});var BIe=s(_4);xTe=n(BIe,"STRONG",{});var l0t=s(xTe);SEr=r(l0t,"roberta"),l0t.forEach(t),REr=r(BIe," \u2014 "),tJ=n(BIe,"A",{href:!0});var i0t=s(tJ);PEr=r(i0t,"TFRobertaForSequenceClassification"),i0t.forEach(t),BEr=r(BIe," (RoBERTa model)"),BIe.forEach(t),IEr=i(ae),b4=n(ae,"LI",{});var IIe=s(b4);$Te=n(IIe,"STRONG",{});var d0t=s($Te);NEr=r(d0t,"roformer"),d0t.forEach(t),qEr=r(IIe," \u2014 "),aJ=n(IIe,"A",{href:!0});var c0t=s(aJ);jEr=r(c0t,"TFRoFormerForSequenceClassification"),c0t.forEach(t),DEr=r(IIe," (RoFormer model)"),IIe.forEach(t),GEr=i(ae),v4=n(ae,"LI",{});var NIe=s(v4);kTe=n(NIe,"STRONG",{});var f0t=s(kTe);OEr=r(f0t,"tapas"),f0t.forEach(t),VEr=r(NIe," \u2014 "),nJ=n(NIe,"A",{href:!0});var m0t=s(nJ);XEr=r(m0t,"TFTapasForSequenceClassification"),m0t.forEach(t),zEr=r(NIe," (TAPAS model)"),NIe.forEach(t),WEr=i(ae),F4=n(ae,"LI",{});var qIe=s(F4);STe=n(qIe,"STRONG",{});var g0t=s(STe);QEr=r(g0t,"transfo-xl"),g0t.forEach(t),HEr=r(qIe," \u2014 "),sJ=n(qIe,"A",{href:!0});var h0t=s(sJ);UEr=r(h0t,"TFTransfoXLForSequenceClassification"),h0t.forEach(t),JEr=r(qIe," (Transformer-XL model)"),qIe.forEach(t),YEr=i(ae),T4=n(ae,"LI",{});var jIe=s(T4);RTe=n(jIe,"STRONG",{});var p0t=s(RTe);KEr=r(p0t,"xlm"),p0t.forEach(t),ZEr=r(jIe," \u2014 "),lJ=n(jIe,"A",{href:!0});var u0t=s(lJ);eCr=r(u0t,"TFXLMForSequenceClassification"),u0t.forEach(t),oCr=r(jIe," (XLM model)"),jIe.forEach(t),rCr=i(ae),M4=n(ae,"LI",{});var DIe=s(M4);PTe=n(DIe,"STRONG",{});var _0t=s(PTe);tCr=r(_0t,"xlm-roberta"),_0t.forEach(t),aCr=r(DIe," \u2014 "),iJ=n(DIe,"A",{href:!0});var b0t=s(iJ);nCr=r(b0t,"TFXLMRobertaForSequenceClassification"),b0t.forEach(t),sCr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),lCr=i(ae),E4=n(ae,"LI",{});var GIe=s(E4);BTe=n(GIe,"STRONG",{});var v0t=s(BTe);iCr=r(v0t,"xlnet"),v0t.forEach(t),dCr=r(GIe," \u2014 "),dJ=n(GIe,"A",{href:!0});var F0t=s(dJ);cCr=r(F0t,"TFXLNetForSequenceClassification"),F0t.forEach(t),fCr=r(GIe," (XLNet model)"),GIe.forEach(t),ae.forEach(t),mCr=i(Pl),T(C4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),uGe=i(f),vc=n(f,"H2",{class:!0});var CVe=s(vc);w4=n(CVe,"A",{id:!0,class:!0,href:!0});var T0t=s(w4);ITe=n(T0t,"SPAN",{});var M0t=s(ITe);T(A9.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),gCr=i(CVe),NTe=n(CVe,"SPAN",{});var E0t=s(NTe);hCr=r(E0t,"TFAutoModelForMultipleChoice"),E0t.forEach(t),CVe.forEach(t),_Ge=i(f),sr=n(f,"DIV",{class:!0});var Bl=s(sr);T(y9.$$.fragment,Bl),pCr=i(Bl),Fc=n(Bl,"P",{});var $oe=s(Fc);uCr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cJ=n($oe,"A",{href:!0});var C0t=s(cJ);_Cr=r(C0t,"from_pretrained()"),C0t.forEach(t),bCr=r($oe," class method or the "),fJ=n($oe,"A",{href:!0});var w0t=s(fJ);vCr=r(w0t,"from_config()"),w0t.forEach(t),FCr=r($oe,` class
method.`),$oe.forEach(t),TCr=i(Bl),L9=n(Bl,"P",{});var wVe=s(L9);MCr=r(wVe,"This class cannot be instantiated directly using "),qTe=n(wVe,"CODE",{});var A0t=s(qTe);ECr=r(A0t,"__init__()"),A0t.forEach(t),CCr=r(wVe," (throws an error)."),wVe.forEach(t),wCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var _0=s(Nt);T(x9.$$.fragment,_0),ACr=i(_0),jTe=n(_0,"P",{});var y0t=s(jTe);yCr=r(y0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y0t.forEach(t),LCr=i(_0),Tc=n(_0,"P",{});var koe=s(Tc);xCr=r(koe,`Note:
Loading a model from its configuration file does `),DTe=n(koe,"STRONG",{});var L0t=s(DTe);$Cr=r(L0t,"not"),L0t.forEach(t),kCr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(koe,"A",{href:!0});var x0t=s(mJ);SCr=r(x0t,"from_pretrained()"),x0t.forEach(t),RCr=r(koe," to load the model weights."),koe.forEach(t),PCr=i(_0),T(A4.$$.fragment,_0),_0.forEach(t),BCr=i(Bl),Pr=n(Bl,"DIV",{class:!0});var Il=s(Pr);T($9.$$.fragment,Il),ICr=i(Il),GTe=n(Il,"P",{});var $0t=s(GTe);NCr=r($0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$0t.forEach(t),qCr=i(Il),mn=n(Il,"P",{});var b0=s(mn);jCr=r(b0,"The model class to instantiate is selected based on the "),OTe=n(b0,"CODE",{});var k0t=s(OTe);DCr=r(k0t,"model_type"),k0t.forEach(t),GCr=r(b0,` property of the config object (either
passed as an argument or loaded from `),VTe=n(b0,"CODE",{});var S0t=s(VTe);OCr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),VCr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(b0,"CODE",{});var R0t=s(XTe);XCr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),zCr=r(b0,":"),b0.forEach(t),WCr=i(Il),pe=n(Il,"UL",{});var be=s(pe);y4=n(be,"LI",{});var OIe=s(y4);zTe=n(OIe,"STRONG",{});var P0t=s(zTe);QCr=r(P0t,"albert"),P0t.forEach(t),HCr=r(OIe," \u2014 "),gJ=n(OIe,"A",{href:!0});var B0t=s(gJ);UCr=r(B0t,"TFAlbertForMultipleChoice"),B0t.forEach(t),JCr=r(OIe," (ALBERT model)"),OIe.forEach(t),YCr=i(be),L4=n(be,"LI",{});var VIe=s(L4);WTe=n(VIe,"STRONG",{});var I0t=s(WTe);KCr=r(I0t,"bert"),I0t.forEach(t),ZCr=r(VIe," \u2014 "),hJ=n(VIe,"A",{href:!0});var N0t=s(hJ);e5r=r(N0t,"TFBertForMultipleChoice"),N0t.forEach(t),o5r=r(VIe," (BERT model)"),VIe.forEach(t),r5r=i(be),x4=n(be,"LI",{});var XIe=s(x4);QTe=n(XIe,"STRONG",{});var q0t=s(QTe);t5r=r(q0t,"camembert"),q0t.forEach(t),a5r=r(XIe," \u2014 "),pJ=n(XIe,"A",{href:!0});var j0t=s(pJ);n5r=r(j0t,"TFCamembertForMultipleChoice"),j0t.forEach(t),s5r=r(XIe," (CamemBERT model)"),XIe.forEach(t),l5r=i(be),$4=n(be,"LI",{});var zIe=s($4);HTe=n(zIe,"STRONG",{});var D0t=s(HTe);i5r=r(D0t,"convbert"),D0t.forEach(t),d5r=r(zIe," \u2014 "),uJ=n(zIe,"A",{href:!0});var G0t=s(uJ);c5r=r(G0t,"TFConvBertForMultipleChoice"),G0t.forEach(t),f5r=r(zIe," (ConvBERT model)"),zIe.forEach(t),m5r=i(be),k4=n(be,"LI",{});var WIe=s(k4);UTe=n(WIe,"STRONG",{});var O0t=s(UTe);g5r=r(O0t,"distilbert"),O0t.forEach(t),h5r=r(WIe," \u2014 "),_J=n(WIe,"A",{href:!0});var V0t=s(_J);p5r=r(V0t,"TFDistilBertForMultipleChoice"),V0t.forEach(t),u5r=r(WIe," (DistilBERT model)"),WIe.forEach(t),_5r=i(be),S4=n(be,"LI",{});var QIe=s(S4);JTe=n(QIe,"STRONG",{});var X0t=s(JTe);b5r=r(X0t,"electra"),X0t.forEach(t),v5r=r(QIe," \u2014 "),bJ=n(QIe,"A",{href:!0});var z0t=s(bJ);F5r=r(z0t,"TFElectraForMultipleChoice"),z0t.forEach(t),T5r=r(QIe," (ELECTRA model)"),QIe.forEach(t),M5r=i(be),R4=n(be,"LI",{});var HIe=s(R4);YTe=n(HIe,"STRONG",{});var W0t=s(YTe);E5r=r(W0t,"flaubert"),W0t.forEach(t),C5r=r(HIe," \u2014 "),vJ=n(HIe,"A",{href:!0});var Q0t=s(vJ);w5r=r(Q0t,"TFFlaubertForMultipleChoice"),Q0t.forEach(t),A5r=r(HIe," (FlauBERT model)"),HIe.forEach(t),y5r=i(be),P4=n(be,"LI",{});var UIe=s(P4);KTe=n(UIe,"STRONG",{});var H0t=s(KTe);L5r=r(H0t,"funnel"),H0t.forEach(t),x5r=r(UIe," \u2014 "),FJ=n(UIe,"A",{href:!0});var U0t=s(FJ);$5r=r(U0t,"TFFunnelForMultipleChoice"),U0t.forEach(t),k5r=r(UIe," (Funnel Transformer model)"),UIe.forEach(t),S5r=i(be),B4=n(be,"LI",{});var JIe=s(B4);ZTe=n(JIe,"STRONG",{});var J0t=s(ZTe);R5r=r(J0t,"longformer"),J0t.forEach(t),P5r=r(JIe," \u2014 "),TJ=n(JIe,"A",{href:!0});var Y0t=s(TJ);B5r=r(Y0t,"TFLongformerForMultipleChoice"),Y0t.forEach(t),I5r=r(JIe," (Longformer model)"),JIe.forEach(t),N5r=i(be),I4=n(be,"LI",{});var YIe=s(I4);e7e=n(YIe,"STRONG",{});var K0t=s(e7e);q5r=r(K0t,"mobilebert"),K0t.forEach(t),j5r=r(YIe," \u2014 "),MJ=n(YIe,"A",{href:!0});var Z0t=s(MJ);D5r=r(Z0t,"TFMobileBertForMultipleChoice"),Z0t.forEach(t),G5r=r(YIe," (MobileBERT model)"),YIe.forEach(t),O5r=i(be),N4=n(be,"LI",{});var KIe=s(N4);o7e=n(KIe,"STRONG",{});var eAt=s(o7e);V5r=r(eAt,"mpnet"),eAt.forEach(t),X5r=r(KIe," \u2014 "),EJ=n(KIe,"A",{href:!0});var oAt=s(EJ);z5r=r(oAt,"TFMPNetForMultipleChoice"),oAt.forEach(t),W5r=r(KIe," (MPNet model)"),KIe.forEach(t),Q5r=i(be),q4=n(be,"LI",{});var ZIe=s(q4);r7e=n(ZIe,"STRONG",{});var rAt=s(r7e);H5r=r(rAt,"rembert"),rAt.forEach(t),U5r=r(ZIe," \u2014 "),CJ=n(ZIe,"A",{href:!0});var tAt=s(CJ);J5r=r(tAt,"TFRemBertForMultipleChoice"),tAt.forEach(t),Y5r=r(ZIe," (RemBERT model)"),ZIe.forEach(t),K5r=i(be),j4=n(be,"LI",{});var eNe=s(j4);t7e=n(eNe,"STRONG",{});var aAt=s(t7e);Z5r=r(aAt,"roberta"),aAt.forEach(t),e3r=r(eNe," \u2014 "),wJ=n(eNe,"A",{href:!0});var nAt=s(wJ);o3r=r(nAt,"TFRobertaForMultipleChoice"),nAt.forEach(t),r3r=r(eNe," (RoBERTa model)"),eNe.forEach(t),t3r=i(be),D4=n(be,"LI",{});var oNe=s(D4);a7e=n(oNe,"STRONG",{});var sAt=s(a7e);a3r=r(sAt,"roformer"),sAt.forEach(t),n3r=r(oNe," \u2014 "),AJ=n(oNe,"A",{href:!0});var lAt=s(AJ);s3r=r(lAt,"TFRoFormerForMultipleChoice"),lAt.forEach(t),l3r=r(oNe," (RoFormer model)"),oNe.forEach(t),i3r=i(be),G4=n(be,"LI",{});var rNe=s(G4);n7e=n(rNe,"STRONG",{});var iAt=s(n7e);d3r=r(iAt,"xlm"),iAt.forEach(t),c3r=r(rNe," \u2014 "),yJ=n(rNe,"A",{href:!0});var dAt=s(yJ);f3r=r(dAt,"TFXLMForMultipleChoice"),dAt.forEach(t),m3r=r(rNe," (XLM model)"),rNe.forEach(t),g3r=i(be),O4=n(be,"LI",{});var tNe=s(O4);s7e=n(tNe,"STRONG",{});var cAt=s(s7e);h3r=r(cAt,"xlm-roberta"),cAt.forEach(t),p3r=r(tNe," \u2014 "),LJ=n(tNe,"A",{href:!0});var fAt=s(LJ);u3r=r(fAt,"TFXLMRobertaForMultipleChoice"),fAt.forEach(t),_3r=r(tNe," (XLM-RoBERTa model)"),tNe.forEach(t),b3r=i(be),V4=n(be,"LI",{});var aNe=s(V4);l7e=n(aNe,"STRONG",{});var mAt=s(l7e);v3r=r(mAt,"xlnet"),mAt.forEach(t),F3r=r(aNe," \u2014 "),xJ=n(aNe,"A",{href:!0});var gAt=s(xJ);T3r=r(gAt,"TFXLNetForMultipleChoice"),gAt.forEach(t),M3r=r(aNe," (XLNet model)"),aNe.forEach(t),be.forEach(t),E3r=i(Il),T(X4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),bGe=i(f),Mc=n(f,"H2",{class:!0});var AVe=s(Mc);z4=n(AVe,"A",{id:!0,class:!0,href:!0});var hAt=s(z4);i7e=n(hAt,"SPAN",{});var pAt=s(i7e);T(k9.$$.fragment,pAt),pAt.forEach(t),hAt.forEach(t),C3r=i(AVe),d7e=n(AVe,"SPAN",{});var uAt=s(d7e);w3r=r(uAt,"TFAutoModelForNextSentencePrediction"),uAt.forEach(t),AVe.forEach(t),vGe=i(f),lr=n(f,"DIV",{class:!0});var Nl=s(lr);T(S9.$$.fragment,Nl),A3r=i(Nl),Ec=n(Nl,"P",{});var Soe=s(Ec);y3r=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$J=n(Soe,"A",{href:!0});var _At=s($J);L3r=r(_At,"from_pretrained()"),_At.forEach(t),x3r=r(Soe," class method or the "),kJ=n(Soe,"A",{href:!0});var bAt=s(kJ);$3r=r(bAt,"from_config()"),bAt.forEach(t),k3r=r(Soe,` class
method.`),Soe.forEach(t),S3r=i(Nl),R9=n(Nl,"P",{});var yVe=s(R9);R3r=r(yVe,"This class cannot be instantiated directly using "),c7e=n(yVe,"CODE",{});var vAt=s(c7e);P3r=r(vAt,"__init__()"),vAt.forEach(t),B3r=r(yVe," (throws an error)."),yVe.forEach(t),I3r=i(Nl),qt=n(Nl,"DIV",{class:!0});var v0=s(qt);T(P9.$$.fragment,v0),N3r=i(v0),f7e=n(v0,"P",{});var FAt=s(f7e);q3r=r(FAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FAt.forEach(t),j3r=i(v0),Cc=n(v0,"P",{});var Roe=s(Cc);D3r=r(Roe,`Note:
Loading a model from its configuration file does `),m7e=n(Roe,"STRONG",{});var TAt=s(m7e);G3r=r(TAt,"not"),TAt.forEach(t),O3r=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(Roe,"A",{href:!0});var MAt=s(SJ);V3r=r(MAt,"from_pretrained()"),MAt.forEach(t),X3r=r(Roe," to load the model weights."),Roe.forEach(t),z3r=i(v0),T(W4.$$.fragment,v0),v0.forEach(t),W3r=i(Nl),Br=n(Nl,"DIV",{class:!0});var ql=s(Br);T(B9.$$.fragment,ql),Q3r=i(ql),g7e=n(ql,"P",{});var EAt=s(g7e);H3r=r(EAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EAt.forEach(t),U3r=i(ql),gn=n(ql,"P",{});var F0=s(gn);J3r=r(F0,"The model class to instantiate is selected based on the "),h7e=n(F0,"CODE",{});var CAt=s(h7e);Y3r=r(CAt,"model_type"),CAt.forEach(t),K3r=r(F0,` property of the config object (either
passed as an argument or loaded from `),p7e=n(F0,"CODE",{});var wAt=s(p7e);Z3r=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),ewr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(F0,"CODE",{});var AAt=s(u7e);owr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),rwr=r(F0,":"),F0.forEach(t),twr=i(ql),I9=n(ql,"UL",{});var LVe=s(I9);Q4=n(LVe,"LI",{});var nNe=s(Q4);_7e=n(nNe,"STRONG",{});var yAt=s(_7e);awr=r(yAt,"bert"),yAt.forEach(t),nwr=r(nNe," \u2014 "),RJ=n(nNe,"A",{href:!0});var LAt=s(RJ);swr=r(LAt,"TFBertForNextSentencePrediction"),LAt.forEach(t),lwr=r(nNe," (BERT model)"),nNe.forEach(t),iwr=i(LVe),H4=n(LVe,"LI",{});var sNe=s(H4);b7e=n(sNe,"STRONG",{});var xAt=s(b7e);dwr=r(xAt,"mobilebert"),xAt.forEach(t),cwr=r(sNe," \u2014 "),PJ=n(sNe,"A",{href:!0});var $At=s(PJ);fwr=r($At,"TFMobileBertForNextSentencePrediction"),$At.forEach(t),mwr=r(sNe," (MobileBERT model)"),sNe.forEach(t),LVe.forEach(t),gwr=i(ql),T(U4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),FGe=i(f),wc=n(f,"H2",{class:!0});var xVe=s(wc);J4=n(xVe,"A",{id:!0,class:!0,href:!0});var kAt=s(J4);v7e=n(kAt,"SPAN",{});var SAt=s(v7e);T(N9.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),hwr=i(xVe),F7e=n(xVe,"SPAN",{});var RAt=s(F7e);pwr=r(RAt,"TFAutoModelForTableQuestionAnswering"),RAt.forEach(t),xVe.forEach(t),TGe=i(f),ir=n(f,"DIV",{class:!0});var jl=s(ir);T(q9.$$.fragment,jl),uwr=i(jl),Ac=n(jl,"P",{});var Poe=s(Ac);_wr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BJ=n(Poe,"A",{href:!0});var PAt=s(BJ);bwr=r(PAt,"from_pretrained()"),PAt.forEach(t),vwr=r(Poe," class method or the "),IJ=n(Poe,"A",{href:!0});var BAt=s(IJ);Fwr=r(BAt,"from_config()"),BAt.forEach(t),Twr=r(Poe,` class
method.`),Poe.forEach(t),Mwr=i(jl),j9=n(jl,"P",{});var $Ve=s(j9);Ewr=r($Ve,"This class cannot be instantiated directly using "),T7e=n($Ve,"CODE",{});var IAt=s(T7e);Cwr=r(IAt,"__init__()"),IAt.forEach(t),wwr=r($Ve," (throws an error)."),$Ve.forEach(t),Awr=i(jl),jt=n(jl,"DIV",{class:!0});var T0=s(jt);T(D9.$$.fragment,T0),ywr=i(T0),M7e=n(T0,"P",{});var NAt=s(M7e);Lwr=r(NAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NAt.forEach(t),xwr=i(T0),yc=n(T0,"P",{});var Boe=s(yc);$wr=r(Boe,`Note:
Loading a model from its configuration file does `),E7e=n(Boe,"STRONG",{});var qAt=s(E7e);kwr=r(qAt,"not"),qAt.forEach(t),Swr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Boe,"A",{href:!0});var jAt=s(NJ);Rwr=r(jAt,"from_pretrained()"),jAt.forEach(t),Pwr=r(Boe," to load the model weights."),Boe.forEach(t),Bwr=i(T0),T(Y4.$$.fragment,T0),T0.forEach(t),Iwr=i(jl),Ir=n(jl,"DIV",{class:!0});var Dl=s(Ir);T(G9.$$.fragment,Dl),Nwr=i(Dl),C7e=n(Dl,"P",{});var DAt=s(C7e);qwr=r(DAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DAt.forEach(t),jwr=i(Dl),hn=n(Dl,"P",{});var M0=s(hn);Dwr=r(M0,"The model class to instantiate is selected based on the "),w7e=n(M0,"CODE",{});var GAt=s(w7e);Gwr=r(GAt,"model_type"),GAt.forEach(t),Owr=r(M0,` property of the config object (either
passed as an argument or loaded from `),A7e=n(M0,"CODE",{});var OAt=s(A7e);Vwr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),Xwr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(M0,"CODE",{});var VAt=s(y7e);zwr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Wwr=r(M0,":"),M0.forEach(t),Qwr=i(Dl),L7e=n(Dl,"UL",{});var XAt=s(L7e);K4=n(XAt,"LI",{});var lNe=s(K4);x7e=n(lNe,"STRONG",{});var zAt=s(x7e);Hwr=r(zAt,"tapas"),zAt.forEach(t),Uwr=r(lNe," \u2014 "),qJ=n(lNe,"A",{href:!0});var WAt=s(qJ);Jwr=r(WAt,"TFTapasForQuestionAnswering"),WAt.forEach(t),Ywr=r(lNe," (TAPAS model)"),lNe.forEach(t),XAt.forEach(t),Kwr=i(Dl),T(Z4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),MGe=i(f),Lc=n(f,"H2",{class:!0});var kVe=s(Lc);eE=n(kVe,"A",{id:!0,class:!0,href:!0});var QAt=s(eE);$7e=n(QAt,"SPAN",{});var HAt=s($7e);T(O9.$$.fragment,HAt),HAt.forEach(t),QAt.forEach(t),Zwr=i(kVe),k7e=n(kVe,"SPAN",{});var UAt=s(k7e);e0r=r(UAt,"TFAutoModelForTokenClassification"),UAt.forEach(t),kVe.forEach(t),EGe=i(f),dr=n(f,"DIV",{class:!0});var Gl=s(dr);T(V9.$$.fragment,Gl),o0r=i(Gl),xc=n(Gl,"P",{});var Ioe=s(xc);r0r=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jJ=n(Ioe,"A",{href:!0});var JAt=s(jJ);t0r=r(JAt,"from_pretrained()"),JAt.forEach(t),a0r=r(Ioe," class method or the "),DJ=n(Ioe,"A",{href:!0});var YAt=s(DJ);n0r=r(YAt,"from_config()"),YAt.forEach(t),s0r=r(Ioe,` class
method.`),Ioe.forEach(t),l0r=i(Gl),X9=n(Gl,"P",{});var SVe=s(X9);i0r=r(SVe,"This class cannot be instantiated directly using "),S7e=n(SVe,"CODE",{});var KAt=s(S7e);d0r=r(KAt,"__init__()"),KAt.forEach(t),c0r=r(SVe," (throws an error)."),SVe.forEach(t),f0r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var E0=s(Dt);T(z9.$$.fragment,E0),m0r=i(E0),R7e=n(E0,"P",{});var ZAt=s(R7e);g0r=r(ZAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZAt.forEach(t),h0r=i(E0),$c=n(E0,"P",{});var Noe=s($c);p0r=r(Noe,`Note:
Loading a model from its configuration file does `),P7e=n(Noe,"STRONG",{});var eyt=s(P7e);u0r=r(eyt,"not"),eyt.forEach(t),_0r=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Noe,"A",{href:!0});var oyt=s(GJ);b0r=r(oyt,"from_pretrained()"),oyt.forEach(t),v0r=r(Noe," to load the model weights."),Noe.forEach(t),F0r=i(E0),T(oE.$$.fragment,E0),E0.forEach(t),T0r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(W9.$$.fragment,Ol),M0r=i(Ol),B7e=n(Ol,"P",{});var ryt=s(B7e);E0r=r(ryt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ryt.forEach(t),C0r=i(Ol),pn=n(Ol,"P",{});var C0=s(pn);w0r=r(C0,"The model class to instantiate is selected based on the "),I7e=n(C0,"CODE",{});var tyt=s(I7e);A0r=r(tyt,"model_type"),tyt.forEach(t),y0r=r(C0,` property of the config object (either
passed as an argument or loaded from `),N7e=n(C0,"CODE",{});var ayt=s(N7e);L0r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),x0r=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(C0,"CODE",{});var nyt=s(q7e);$0r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),k0r=r(C0,":"),C0.forEach(t),S0r=i(Ol),de=n(Ol,"UL",{});var me=s(de);rE=n(me,"LI",{});var iNe=s(rE);j7e=n(iNe,"STRONG",{});var syt=s(j7e);R0r=r(syt,"albert"),syt.forEach(t),P0r=r(iNe," \u2014 "),OJ=n(iNe,"A",{href:!0});var lyt=s(OJ);B0r=r(lyt,"TFAlbertForTokenClassification"),lyt.forEach(t),I0r=r(iNe," (ALBERT model)"),iNe.forEach(t),N0r=i(me),tE=n(me,"LI",{});var dNe=s(tE);D7e=n(dNe,"STRONG",{});var iyt=s(D7e);q0r=r(iyt,"bert"),iyt.forEach(t),j0r=r(dNe," \u2014 "),VJ=n(dNe,"A",{href:!0});var dyt=s(VJ);D0r=r(dyt,"TFBertForTokenClassification"),dyt.forEach(t),G0r=r(dNe," (BERT model)"),dNe.forEach(t),O0r=i(me),aE=n(me,"LI",{});var cNe=s(aE);G7e=n(cNe,"STRONG",{});var cyt=s(G7e);V0r=r(cyt,"camembert"),cyt.forEach(t),X0r=r(cNe," \u2014 "),XJ=n(cNe,"A",{href:!0});var fyt=s(XJ);z0r=r(fyt,"TFCamembertForTokenClassification"),fyt.forEach(t),W0r=r(cNe," (CamemBERT model)"),cNe.forEach(t),Q0r=i(me),nE=n(me,"LI",{});var fNe=s(nE);O7e=n(fNe,"STRONG",{});var myt=s(O7e);H0r=r(myt,"convbert"),myt.forEach(t),U0r=r(fNe," \u2014 "),zJ=n(fNe,"A",{href:!0});var gyt=s(zJ);J0r=r(gyt,"TFConvBertForTokenClassification"),gyt.forEach(t),Y0r=r(fNe," (ConvBERT model)"),fNe.forEach(t),K0r=i(me),sE=n(me,"LI",{});var mNe=s(sE);V7e=n(mNe,"STRONG",{});var hyt=s(V7e);Z0r=r(hyt,"deberta"),hyt.forEach(t),eAr=r(mNe," \u2014 "),WJ=n(mNe,"A",{href:!0});var pyt=s(WJ);oAr=r(pyt,"TFDebertaForTokenClassification"),pyt.forEach(t),rAr=r(mNe," (DeBERTa model)"),mNe.forEach(t),tAr=i(me),lE=n(me,"LI",{});var gNe=s(lE);X7e=n(gNe,"STRONG",{});var uyt=s(X7e);aAr=r(uyt,"deberta-v2"),uyt.forEach(t),nAr=r(gNe," \u2014 "),QJ=n(gNe,"A",{href:!0});var _yt=s(QJ);sAr=r(_yt,"TFDebertaV2ForTokenClassification"),_yt.forEach(t),lAr=r(gNe," (DeBERTa-v2 model)"),gNe.forEach(t),iAr=i(me),iE=n(me,"LI",{});var hNe=s(iE);z7e=n(hNe,"STRONG",{});var byt=s(z7e);dAr=r(byt,"distilbert"),byt.forEach(t),cAr=r(hNe," \u2014 "),HJ=n(hNe,"A",{href:!0});var vyt=s(HJ);fAr=r(vyt,"TFDistilBertForTokenClassification"),vyt.forEach(t),mAr=r(hNe," (DistilBERT model)"),hNe.forEach(t),gAr=i(me),dE=n(me,"LI",{});var pNe=s(dE);W7e=n(pNe,"STRONG",{});var Fyt=s(W7e);hAr=r(Fyt,"electra"),Fyt.forEach(t),pAr=r(pNe," \u2014 "),UJ=n(pNe,"A",{href:!0});var Tyt=s(UJ);uAr=r(Tyt,"TFElectraForTokenClassification"),Tyt.forEach(t),_Ar=r(pNe," (ELECTRA model)"),pNe.forEach(t),bAr=i(me),cE=n(me,"LI",{});var uNe=s(cE);Q7e=n(uNe,"STRONG",{});var Myt=s(Q7e);vAr=r(Myt,"flaubert"),Myt.forEach(t),FAr=r(uNe," \u2014 "),JJ=n(uNe,"A",{href:!0});var Eyt=s(JJ);TAr=r(Eyt,"TFFlaubertForTokenClassification"),Eyt.forEach(t),MAr=r(uNe," (FlauBERT model)"),uNe.forEach(t),EAr=i(me),fE=n(me,"LI",{});var _Ne=s(fE);H7e=n(_Ne,"STRONG",{});var Cyt=s(H7e);CAr=r(Cyt,"funnel"),Cyt.forEach(t),wAr=r(_Ne," \u2014 "),YJ=n(_Ne,"A",{href:!0});var wyt=s(YJ);AAr=r(wyt,"TFFunnelForTokenClassification"),wyt.forEach(t),yAr=r(_Ne," (Funnel Transformer model)"),_Ne.forEach(t),LAr=i(me),mE=n(me,"LI",{});var bNe=s(mE);U7e=n(bNe,"STRONG",{});var Ayt=s(U7e);xAr=r(Ayt,"layoutlm"),Ayt.forEach(t),$Ar=r(bNe," \u2014 "),KJ=n(bNe,"A",{href:!0});var yyt=s(KJ);kAr=r(yyt,"TFLayoutLMForTokenClassification"),yyt.forEach(t),SAr=r(bNe," (LayoutLM model)"),bNe.forEach(t),RAr=i(me),gE=n(me,"LI",{});var vNe=s(gE);J7e=n(vNe,"STRONG",{});var Lyt=s(J7e);PAr=r(Lyt,"longformer"),Lyt.forEach(t),BAr=r(vNe," \u2014 "),ZJ=n(vNe,"A",{href:!0});var xyt=s(ZJ);IAr=r(xyt,"TFLongformerForTokenClassification"),xyt.forEach(t),NAr=r(vNe," (Longformer model)"),vNe.forEach(t),qAr=i(me),hE=n(me,"LI",{});var FNe=s(hE);Y7e=n(FNe,"STRONG",{});var $yt=s(Y7e);jAr=r($yt,"mobilebert"),$yt.forEach(t),DAr=r(FNe," \u2014 "),eY=n(FNe,"A",{href:!0});var kyt=s(eY);GAr=r(kyt,"TFMobileBertForTokenClassification"),kyt.forEach(t),OAr=r(FNe," (MobileBERT model)"),FNe.forEach(t),VAr=i(me),pE=n(me,"LI",{});var TNe=s(pE);K7e=n(TNe,"STRONG",{});var Syt=s(K7e);XAr=r(Syt,"mpnet"),Syt.forEach(t),zAr=r(TNe," \u2014 "),oY=n(TNe,"A",{href:!0});var Ryt=s(oY);WAr=r(Ryt,"TFMPNetForTokenClassification"),Ryt.forEach(t),QAr=r(TNe," (MPNet model)"),TNe.forEach(t),HAr=i(me),uE=n(me,"LI",{});var MNe=s(uE);Z7e=n(MNe,"STRONG",{});var Pyt=s(Z7e);UAr=r(Pyt,"rembert"),Pyt.forEach(t),JAr=r(MNe," \u2014 "),rY=n(MNe,"A",{href:!0});var Byt=s(rY);YAr=r(Byt,"TFRemBertForTokenClassification"),Byt.forEach(t),KAr=r(MNe," (RemBERT model)"),MNe.forEach(t),ZAr=i(me),_E=n(me,"LI",{});var ENe=s(_E);e8e=n(ENe,"STRONG",{});var Iyt=s(e8e);eyr=r(Iyt,"roberta"),Iyt.forEach(t),oyr=r(ENe," \u2014 "),tY=n(ENe,"A",{href:!0});var Nyt=s(tY);ryr=r(Nyt,"TFRobertaForTokenClassification"),Nyt.forEach(t),tyr=r(ENe," (RoBERTa model)"),ENe.forEach(t),ayr=i(me),bE=n(me,"LI",{});var CNe=s(bE);o8e=n(CNe,"STRONG",{});var qyt=s(o8e);nyr=r(qyt,"roformer"),qyt.forEach(t),syr=r(CNe," \u2014 "),aY=n(CNe,"A",{href:!0});var jyt=s(aY);lyr=r(jyt,"TFRoFormerForTokenClassification"),jyt.forEach(t),iyr=r(CNe," (RoFormer model)"),CNe.forEach(t),dyr=i(me),vE=n(me,"LI",{});var wNe=s(vE);r8e=n(wNe,"STRONG",{});var Dyt=s(r8e);cyr=r(Dyt,"xlm"),Dyt.forEach(t),fyr=r(wNe," \u2014 "),nY=n(wNe,"A",{href:!0});var Gyt=s(nY);myr=r(Gyt,"TFXLMForTokenClassification"),Gyt.forEach(t),gyr=r(wNe," (XLM model)"),wNe.forEach(t),hyr=i(me),FE=n(me,"LI",{});var ANe=s(FE);t8e=n(ANe,"STRONG",{});var Oyt=s(t8e);pyr=r(Oyt,"xlm-roberta"),Oyt.forEach(t),uyr=r(ANe," \u2014 "),sY=n(ANe,"A",{href:!0});var Vyt=s(sY);_yr=r(Vyt,"TFXLMRobertaForTokenClassification"),Vyt.forEach(t),byr=r(ANe," (XLM-RoBERTa model)"),ANe.forEach(t),vyr=i(me),TE=n(me,"LI",{});var yNe=s(TE);a8e=n(yNe,"STRONG",{});var Xyt=s(a8e);Fyr=r(Xyt,"xlnet"),Xyt.forEach(t),Tyr=r(yNe," \u2014 "),lY=n(yNe,"A",{href:!0});var zyt=s(lY);Myr=r(zyt,"TFXLNetForTokenClassification"),zyt.forEach(t),Eyr=r(yNe," (XLNet model)"),yNe.forEach(t),me.forEach(t),Cyr=i(Ol),T(ME.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),CGe=i(f),kc=n(f,"H2",{class:!0});var RVe=s(kc);EE=n(RVe,"A",{id:!0,class:!0,href:!0});var Wyt=s(EE);n8e=n(Wyt,"SPAN",{});var Qyt=s(n8e);T(Q9.$$.fragment,Qyt),Qyt.forEach(t),Wyt.forEach(t),wyr=i(RVe),s8e=n(RVe,"SPAN",{});var Hyt=s(s8e);Ayr=r(Hyt,"TFAutoModelForQuestionAnswering"),Hyt.forEach(t),RVe.forEach(t),wGe=i(f),cr=n(f,"DIV",{class:!0});var Vl=s(cr);T(H9.$$.fragment,Vl),yyr=i(Vl),Sc=n(Vl,"P",{});var qoe=s(Sc);Lyr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iY=n(qoe,"A",{href:!0});var Uyt=s(iY);xyr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),$yr=r(qoe," class method or the "),dY=n(qoe,"A",{href:!0});var Jyt=s(dY);kyr=r(Jyt,"from_config()"),Jyt.forEach(t),Syr=r(qoe,` class
method.`),qoe.forEach(t),Ryr=i(Vl),U9=n(Vl,"P",{});var PVe=s(U9);Pyr=r(PVe,"This class cannot be instantiated directly using "),l8e=n(PVe,"CODE",{});var Yyt=s(l8e);Byr=r(Yyt,"__init__()"),Yyt.forEach(t),Iyr=r(PVe," (throws an error)."),PVe.forEach(t),Nyr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var w0=s(Gt);T(J9.$$.fragment,w0),qyr=i(w0),i8e=n(w0,"P",{});var Kyt=s(i8e);jyr=r(Kyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kyt.forEach(t),Dyr=i(w0),Rc=n(w0,"P",{});var joe=s(Rc);Gyr=r(joe,`Note:
Loading a model from its configuration file does `),d8e=n(joe,"STRONG",{});var Zyt=s(d8e);Oyr=r(Zyt,"not"),Zyt.forEach(t),Vyr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(joe,"A",{href:!0});var eLt=s(cY);Xyr=r(eLt,"from_pretrained()"),eLt.forEach(t),zyr=r(joe," to load the model weights."),joe.forEach(t),Wyr=i(w0),T(CE.$$.fragment,w0),w0.forEach(t),Qyr=i(Vl),qr=n(Vl,"DIV",{class:!0});var Xl=s(qr);T(Y9.$$.fragment,Xl),Hyr=i(Xl),c8e=n(Xl,"P",{});var oLt=s(c8e);Uyr=r(oLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oLt.forEach(t),Jyr=i(Xl),un=n(Xl,"P",{});var A0=s(un);Yyr=r(A0,"The model class to instantiate is selected based on the "),f8e=n(A0,"CODE",{});var rLt=s(f8e);Kyr=r(rLt,"model_type"),rLt.forEach(t),Zyr=r(A0,` property of the config object (either
passed as an argument or loaded from `),m8e=n(A0,"CODE",{});var tLt=s(m8e);eLr=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),oLr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(A0,"CODE",{});var aLt=s(g8e);rLr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),tLr=r(A0,":"),A0.forEach(t),aLr=i(Xl),ce=n(Xl,"UL",{});var ge=s(ce);wE=n(ge,"LI",{});var LNe=s(wE);h8e=n(LNe,"STRONG",{});var nLt=s(h8e);nLr=r(nLt,"albert"),nLt.forEach(t),sLr=r(LNe," \u2014 "),fY=n(LNe,"A",{href:!0});var sLt=s(fY);lLr=r(sLt,"TFAlbertForQuestionAnswering"),sLt.forEach(t),iLr=r(LNe," (ALBERT model)"),LNe.forEach(t),dLr=i(ge),AE=n(ge,"LI",{});var xNe=s(AE);p8e=n(xNe,"STRONG",{});var lLt=s(p8e);cLr=r(lLt,"bert"),lLt.forEach(t),fLr=r(xNe," \u2014 "),mY=n(xNe,"A",{href:!0});var iLt=s(mY);mLr=r(iLt,"TFBertForQuestionAnswering"),iLt.forEach(t),gLr=r(xNe," (BERT model)"),xNe.forEach(t),hLr=i(ge),yE=n(ge,"LI",{});var $Ne=s(yE);u8e=n($Ne,"STRONG",{});var dLt=s(u8e);pLr=r(dLt,"camembert"),dLt.forEach(t),uLr=r($Ne," \u2014 "),gY=n($Ne,"A",{href:!0});var cLt=s(gY);_Lr=r(cLt,"TFCamembertForQuestionAnswering"),cLt.forEach(t),bLr=r($Ne," (CamemBERT model)"),$Ne.forEach(t),vLr=i(ge),LE=n(ge,"LI",{});var kNe=s(LE);_8e=n(kNe,"STRONG",{});var fLt=s(_8e);FLr=r(fLt,"convbert"),fLt.forEach(t),TLr=r(kNe," \u2014 "),hY=n(kNe,"A",{href:!0});var mLt=s(hY);MLr=r(mLt,"TFConvBertForQuestionAnswering"),mLt.forEach(t),ELr=r(kNe," (ConvBERT model)"),kNe.forEach(t),CLr=i(ge),xE=n(ge,"LI",{});var SNe=s(xE);b8e=n(SNe,"STRONG",{});var gLt=s(b8e);wLr=r(gLt,"deberta"),gLt.forEach(t),ALr=r(SNe," \u2014 "),pY=n(SNe,"A",{href:!0});var hLt=s(pY);yLr=r(hLt,"TFDebertaForQuestionAnswering"),hLt.forEach(t),LLr=r(SNe," (DeBERTa model)"),SNe.forEach(t),xLr=i(ge),$E=n(ge,"LI",{});var RNe=s($E);v8e=n(RNe,"STRONG",{});var pLt=s(v8e);$Lr=r(pLt,"deberta-v2"),pLt.forEach(t),kLr=r(RNe," \u2014 "),uY=n(RNe,"A",{href:!0});var uLt=s(uY);SLr=r(uLt,"TFDebertaV2ForQuestionAnswering"),uLt.forEach(t),RLr=r(RNe," (DeBERTa-v2 model)"),RNe.forEach(t),PLr=i(ge),kE=n(ge,"LI",{});var PNe=s(kE);F8e=n(PNe,"STRONG",{});var _Lt=s(F8e);BLr=r(_Lt,"distilbert"),_Lt.forEach(t),ILr=r(PNe," \u2014 "),_Y=n(PNe,"A",{href:!0});var bLt=s(_Y);NLr=r(bLt,"TFDistilBertForQuestionAnswering"),bLt.forEach(t),qLr=r(PNe," (DistilBERT model)"),PNe.forEach(t),jLr=i(ge),SE=n(ge,"LI",{});var BNe=s(SE);T8e=n(BNe,"STRONG",{});var vLt=s(T8e);DLr=r(vLt,"electra"),vLt.forEach(t),GLr=r(BNe," \u2014 "),bY=n(BNe,"A",{href:!0});var FLt=s(bY);OLr=r(FLt,"TFElectraForQuestionAnswering"),FLt.forEach(t),VLr=r(BNe," (ELECTRA model)"),BNe.forEach(t),XLr=i(ge),RE=n(ge,"LI",{});var INe=s(RE);M8e=n(INe,"STRONG",{});var TLt=s(M8e);zLr=r(TLt,"flaubert"),TLt.forEach(t),WLr=r(INe," \u2014 "),vY=n(INe,"A",{href:!0});var MLt=s(vY);QLr=r(MLt,"TFFlaubertForQuestionAnsweringSimple"),MLt.forEach(t),HLr=r(INe," (FlauBERT model)"),INe.forEach(t),ULr=i(ge),PE=n(ge,"LI",{});var NNe=s(PE);E8e=n(NNe,"STRONG",{});var ELt=s(E8e);JLr=r(ELt,"funnel"),ELt.forEach(t),YLr=r(NNe," \u2014 "),FY=n(NNe,"A",{href:!0});var CLt=s(FY);KLr=r(CLt,"TFFunnelForQuestionAnswering"),CLt.forEach(t),ZLr=r(NNe," (Funnel Transformer model)"),NNe.forEach(t),e9r=i(ge),BE=n(ge,"LI",{});var qNe=s(BE);C8e=n(qNe,"STRONG",{});var wLt=s(C8e);o9r=r(wLt,"gptj"),wLt.forEach(t),r9r=r(qNe," \u2014 "),TY=n(qNe,"A",{href:!0});var ALt=s(TY);t9r=r(ALt,"TFGPTJForQuestionAnswering"),ALt.forEach(t),a9r=r(qNe," (GPT-J model)"),qNe.forEach(t),n9r=i(ge),IE=n(ge,"LI",{});var jNe=s(IE);w8e=n(jNe,"STRONG",{});var yLt=s(w8e);s9r=r(yLt,"longformer"),yLt.forEach(t),l9r=r(jNe," \u2014 "),MY=n(jNe,"A",{href:!0});var LLt=s(MY);i9r=r(LLt,"TFLongformerForQuestionAnswering"),LLt.forEach(t),d9r=r(jNe," (Longformer model)"),jNe.forEach(t),c9r=i(ge),NE=n(ge,"LI",{});var DNe=s(NE);A8e=n(DNe,"STRONG",{});var xLt=s(A8e);f9r=r(xLt,"mobilebert"),xLt.forEach(t),m9r=r(DNe," \u2014 "),EY=n(DNe,"A",{href:!0});var $Lt=s(EY);g9r=r($Lt,"TFMobileBertForQuestionAnswering"),$Lt.forEach(t),h9r=r(DNe," (MobileBERT model)"),DNe.forEach(t),p9r=i(ge),qE=n(ge,"LI",{});var GNe=s(qE);y8e=n(GNe,"STRONG",{});var kLt=s(y8e);u9r=r(kLt,"mpnet"),kLt.forEach(t),_9r=r(GNe," \u2014 "),CY=n(GNe,"A",{href:!0});var SLt=s(CY);b9r=r(SLt,"TFMPNetForQuestionAnswering"),SLt.forEach(t),v9r=r(GNe," (MPNet model)"),GNe.forEach(t),F9r=i(ge),jE=n(ge,"LI",{});var ONe=s(jE);L8e=n(ONe,"STRONG",{});var RLt=s(L8e);T9r=r(RLt,"rembert"),RLt.forEach(t),M9r=r(ONe," \u2014 "),wY=n(ONe,"A",{href:!0});var PLt=s(wY);E9r=r(PLt,"TFRemBertForQuestionAnswering"),PLt.forEach(t),C9r=r(ONe," (RemBERT model)"),ONe.forEach(t),w9r=i(ge),DE=n(ge,"LI",{});var VNe=s(DE);x8e=n(VNe,"STRONG",{});var BLt=s(x8e);A9r=r(BLt,"roberta"),BLt.forEach(t),y9r=r(VNe," \u2014 "),AY=n(VNe,"A",{href:!0});var ILt=s(AY);L9r=r(ILt,"TFRobertaForQuestionAnswering"),ILt.forEach(t),x9r=r(VNe," (RoBERTa model)"),VNe.forEach(t),$9r=i(ge),GE=n(ge,"LI",{});var XNe=s(GE);$8e=n(XNe,"STRONG",{});var NLt=s($8e);k9r=r(NLt,"roformer"),NLt.forEach(t),S9r=r(XNe," \u2014 "),yY=n(XNe,"A",{href:!0});var qLt=s(yY);R9r=r(qLt,"TFRoFormerForQuestionAnswering"),qLt.forEach(t),P9r=r(XNe," (RoFormer model)"),XNe.forEach(t),B9r=i(ge),OE=n(ge,"LI",{});var zNe=s(OE);k8e=n(zNe,"STRONG",{});var jLt=s(k8e);I9r=r(jLt,"xlm"),jLt.forEach(t),N9r=r(zNe," \u2014 "),LY=n(zNe,"A",{href:!0});var DLt=s(LY);q9r=r(DLt,"TFXLMForQuestionAnsweringSimple"),DLt.forEach(t),j9r=r(zNe," (XLM model)"),zNe.forEach(t),D9r=i(ge),VE=n(ge,"LI",{});var WNe=s(VE);S8e=n(WNe,"STRONG",{});var GLt=s(S8e);G9r=r(GLt,"xlm-roberta"),GLt.forEach(t),O9r=r(WNe," \u2014 "),xY=n(WNe,"A",{href:!0});var OLt=s(xY);V9r=r(OLt,"TFXLMRobertaForQuestionAnswering"),OLt.forEach(t),X9r=r(WNe," (XLM-RoBERTa model)"),WNe.forEach(t),z9r=i(ge),XE=n(ge,"LI",{});var QNe=s(XE);R8e=n(QNe,"STRONG",{});var VLt=s(R8e);W9r=r(VLt,"xlnet"),VLt.forEach(t),Q9r=r(QNe," \u2014 "),$Y=n(QNe,"A",{href:!0});var XLt=s($Y);H9r=r(XLt,"TFXLNetForQuestionAnsweringSimple"),XLt.forEach(t),U9r=r(QNe," (XLNet model)"),QNe.forEach(t),ge.forEach(t),J9r=i(Xl),T(zE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),AGe=i(f),Pc=n(f,"H2",{class:!0});var BVe=s(Pc);WE=n(BVe,"A",{id:!0,class:!0,href:!0});var zLt=s(WE);P8e=n(zLt,"SPAN",{});var WLt=s(P8e);T(K9.$$.fragment,WLt),WLt.forEach(t),zLt.forEach(t),Y9r=i(BVe),B8e=n(BVe,"SPAN",{});var QLt=s(B8e);K9r=r(QLt,"TFAutoModelForVision2Seq"),QLt.forEach(t),BVe.forEach(t),yGe=i(f),fr=n(f,"DIV",{class:!0});var zl=s(fr);T(Z9.$$.fragment,zl),Z9r=i(zl),Bc=n(zl,"P",{});var Doe=s(Bc);exr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kY=n(Doe,"A",{href:!0});var HLt=s(kY);oxr=r(HLt,"from_pretrained()"),HLt.forEach(t),rxr=r(Doe," class method or the "),SY=n(Doe,"A",{href:!0});var ULt=s(SY);txr=r(ULt,"from_config()"),ULt.forEach(t),axr=r(Doe,` class
method.`),Doe.forEach(t),nxr=i(zl),ex=n(zl,"P",{});var IVe=s(ex);sxr=r(IVe,"This class cannot be instantiated directly using "),I8e=n(IVe,"CODE",{});var JLt=s(I8e);lxr=r(JLt,"__init__()"),JLt.forEach(t),ixr=r(IVe," (throws an error)."),IVe.forEach(t),dxr=i(zl),Ot=n(zl,"DIV",{class:!0});var y0=s(Ot);T(ox.$$.fragment,y0),cxr=i(y0),N8e=n(y0,"P",{});var YLt=s(N8e);fxr=r(YLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YLt.forEach(t),mxr=i(y0),Ic=n(y0,"P",{});var Goe=s(Ic);gxr=r(Goe,`Note:
Loading a model from its configuration file does `),q8e=n(Goe,"STRONG",{});var KLt=s(q8e);hxr=r(KLt,"not"),KLt.forEach(t),pxr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Goe,"A",{href:!0});var ZLt=s(RY);uxr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),_xr=r(Goe," to load the model weights."),Goe.forEach(t),bxr=i(y0),T(QE.$$.fragment,y0),y0.forEach(t),vxr=i(zl),jr=n(zl,"DIV",{class:!0});var Wl=s(jr);T(rx.$$.fragment,Wl),Fxr=i(Wl),j8e=n(Wl,"P",{});var e9t=s(j8e);Txr=r(e9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e9t.forEach(t),Mxr=i(Wl),_n=n(Wl,"P",{});var L0=s(_n);Exr=r(L0,"The model class to instantiate is selected based on the "),D8e=n(L0,"CODE",{});var o9t=s(D8e);Cxr=r(o9t,"model_type"),o9t.forEach(t),wxr=r(L0,` property of the config object (either
passed as an argument or loaded from `),G8e=n(L0,"CODE",{});var r9t=s(G8e);Axr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),yxr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(L0,"CODE",{});var t9t=s(O8e);Lxr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),xxr=r(L0,":"),L0.forEach(t),$xr=i(Wl),V8e=n(Wl,"UL",{});var a9t=s(V8e);HE=n(a9t,"LI",{});var HNe=s(HE);X8e=n(HNe,"STRONG",{});var n9t=s(X8e);kxr=r(n9t,"vision-encoder-decoder"),n9t.forEach(t),Sxr=r(HNe," \u2014 "),PY=n(HNe,"A",{href:!0});var s9t=s(PY);Rxr=r(s9t,"TFVisionEncoderDecoderModel"),s9t.forEach(t),Pxr=r(HNe," (Vision Encoder decoder model)"),HNe.forEach(t),a9t.forEach(t),Bxr=i(Wl),T(UE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),LGe=i(f),Nc=n(f,"H2",{class:!0});var NVe=s(Nc);JE=n(NVe,"A",{id:!0,class:!0,href:!0});var l9t=s(JE);z8e=n(l9t,"SPAN",{});var i9t=s(z8e);T(tx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),Ixr=i(NVe),W8e=n(NVe,"SPAN",{});var d9t=s(W8e);Nxr=r(d9t,"TFAutoModelForSpeechSeq2Seq"),d9t.forEach(t),NVe.forEach(t),xGe=i(f),mr=n(f,"DIV",{class:!0});var Ql=s(mr);T(ax.$$.fragment,Ql),qxr=i(Ql),qc=n(Ql,"P",{});var Ooe=s(qc);jxr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BY=n(Ooe,"A",{href:!0});var c9t=s(BY);Dxr=r(c9t,"from_pretrained()"),c9t.forEach(t),Gxr=r(Ooe," class method or the "),IY=n(Ooe,"A",{href:!0});var f9t=s(IY);Oxr=r(f9t,"from_config()"),f9t.forEach(t),Vxr=r(Ooe,` class
method.`),Ooe.forEach(t),Xxr=i(Ql),nx=n(Ql,"P",{});var qVe=s(nx);zxr=r(qVe,"This class cannot be instantiated directly using "),Q8e=n(qVe,"CODE",{});var m9t=s(Q8e);Wxr=r(m9t,"__init__()"),m9t.forEach(t),Qxr=r(qVe," (throws an error)."),qVe.forEach(t),Hxr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var x0=s(Vt);T(sx.$$.fragment,x0),Uxr=i(x0),H8e=n(x0,"P",{});var g9t=s(H8e);Jxr=r(g9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),g9t.forEach(t),Yxr=i(x0),jc=n(x0,"P",{});var Voe=s(jc);Kxr=r(Voe,`Note:
Loading a model from its configuration file does `),U8e=n(Voe,"STRONG",{});var h9t=s(U8e);Zxr=r(h9t,"not"),h9t.forEach(t),e$r=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Voe,"A",{href:!0});var p9t=s(NY);o$r=r(p9t,"from_pretrained()"),p9t.forEach(t),r$r=r(Voe," to load the model weights."),Voe.forEach(t),t$r=i(x0),T(YE.$$.fragment,x0),x0.forEach(t),a$r=i(Ql),Dr=n(Ql,"DIV",{class:!0});var Hl=s(Dr);T(lx.$$.fragment,Hl),n$r=i(Hl),J8e=n(Hl,"P",{});var u9t=s(J8e);s$r=r(u9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u9t.forEach(t),l$r=i(Hl),bn=n(Hl,"P",{});var $0=s(bn);i$r=r($0,"The model class to instantiate is selected based on the "),Y8e=n($0,"CODE",{});var _9t=s(Y8e);d$r=r(_9t,"model_type"),_9t.forEach(t),c$r=r($0,` property of the config object (either
passed as an argument or loaded from `),K8e=n($0,"CODE",{});var b9t=s(K8e);f$r=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),m$r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z8e=n($0,"CODE",{});var v9t=s(Z8e);g$r=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),h$r=r($0,":"),$0.forEach(t),p$r=i(Hl),eMe=n(Hl,"UL",{});var F9t=s(eMe);KE=n(F9t,"LI",{});var UNe=s(KE);oMe=n(UNe,"STRONG",{});var T9t=s(oMe);u$r=r(T9t,"speech_to_text"),T9t.forEach(t),_$r=r(UNe," \u2014 "),qY=n(UNe,"A",{href:!0});var M9t=s(qY);b$r=r(M9t,"TFSpeech2TextForConditionalGeneration"),M9t.forEach(t),v$r=r(UNe," (Speech2Text model)"),UNe.forEach(t),F9t.forEach(t),F$r=i(Hl),T(ZE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),$Ge=i(f),Dc=n(f,"H2",{class:!0});var jVe=s(Dc);eC=n(jVe,"A",{id:!0,class:!0,href:!0});var E9t=s(eC);rMe=n(E9t,"SPAN",{});var C9t=s(rMe);T(ix.$$.fragment,C9t),C9t.forEach(t),E9t.forEach(t),T$r=i(jVe),tMe=n(jVe,"SPAN",{});var w9t=s(tMe);M$r=r(w9t,"FlaxAutoModel"),w9t.forEach(t),jVe.forEach(t),kGe=i(f),gr=n(f,"DIV",{class:!0});var Ul=s(gr);T(dx.$$.fragment,Ul),E$r=i(Ul),Gc=n(Ul,"P",{});var Xoe=s(Gc);C$r=r(Xoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jY=n(Xoe,"A",{href:!0});var A9t=s(jY);w$r=r(A9t,"from_pretrained()"),A9t.forEach(t),A$r=r(Xoe," class method or the "),DY=n(Xoe,"A",{href:!0});var y9t=s(DY);y$r=r(y9t,"from_config()"),y9t.forEach(t),L$r=r(Xoe,` class
method.`),Xoe.forEach(t),x$r=i(Ul),cx=n(Ul,"P",{});var DVe=s(cx);$$r=r(DVe,"This class cannot be instantiated directly using "),aMe=n(DVe,"CODE",{});var L9t=s(aMe);k$r=r(L9t,"__init__()"),L9t.forEach(t),S$r=r(DVe," (throws an error)."),DVe.forEach(t),R$r=i(Ul),Xt=n(Ul,"DIV",{class:!0});var k0=s(Xt);T(fx.$$.fragment,k0),P$r=i(k0),nMe=n(k0,"P",{});var x9t=s(nMe);B$r=r(x9t,"Instantiates one of the base model classes of the library from a configuration."),x9t.forEach(t),I$r=i(k0),Oc=n(k0,"P",{});var zoe=s(Oc);N$r=r(zoe,`Note:
Loading a model from its configuration file does `),sMe=n(zoe,"STRONG",{});var $9t=s(sMe);q$r=r($9t,"not"),$9t.forEach(t),j$r=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(zoe,"A",{href:!0});var k9t=s(GY);D$r=r(k9t,"from_pretrained()"),k9t.forEach(t),G$r=r(zoe," to load the model weights."),zoe.forEach(t),O$r=i(k0),T(oC.$$.fragment,k0),k0.forEach(t),V$r=i(Ul),Gr=n(Ul,"DIV",{class:!0});var Jl=s(Gr);T(mx.$$.fragment,Jl),X$r=i(Jl),lMe=n(Jl,"P",{});var S9t=s(lMe);z$r=r(S9t,"Instantiate one of the base model classes of the library from a pretrained model."),S9t.forEach(t),W$r=i(Jl),vn=n(Jl,"P",{});var S0=s(vn);Q$r=r(S0,"The model class to instantiate is selected based on the "),iMe=n(S0,"CODE",{});var R9t=s(iMe);H$r=r(R9t,"model_type"),R9t.forEach(t),U$r=r(S0,` property of the config object (either
passed as an argument or loaded from `),dMe=n(S0,"CODE",{});var P9t=s(dMe);J$r=r(P9t,"pretrained_model_name_or_path"),P9t.forEach(t),Y$r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(S0,"CODE",{});var B9t=s(cMe);K$r=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),Z$r=r(S0,":"),S0.forEach(t),ekr=i(Jl),te=n(Jl,"UL",{});var ne=s(te);rC=n(ne,"LI",{});var JNe=s(rC);fMe=n(JNe,"STRONG",{});var I9t=s(fMe);okr=r(I9t,"albert"),I9t.forEach(t),rkr=r(JNe," \u2014 "),OY=n(JNe,"A",{href:!0});var N9t=s(OY);tkr=r(N9t,"FlaxAlbertModel"),N9t.forEach(t),akr=r(JNe," (ALBERT model)"),JNe.forEach(t),nkr=i(ne),tC=n(ne,"LI",{});var YNe=s(tC);mMe=n(YNe,"STRONG",{});var q9t=s(mMe);skr=r(q9t,"bart"),q9t.forEach(t),lkr=r(YNe," \u2014 "),VY=n(YNe,"A",{href:!0});var j9t=s(VY);ikr=r(j9t,"FlaxBartModel"),j9t.forEach(t),dkr=r(YNe," (BART model)"),YNe.forEach(t),ckr=i(ne),aC=n(ne,"LI",{});var KNe=s(aC);gMe=n(KNe,"STRONG",{});var D9t=s(gMe);fkr=r(D9t,"beit"),D9t.forEach(t),mkr=r(KNe," \u2014 "),XY=n(KNe,"A",{href:!0});var G9t=s(XY);gkr=r(G9t,"FlaxBeitModel"),G9t.forEach(t),hkr=r(KNe," (BEiT model)"),KNe.forEach(t),pkr=i(ne),nC=n(ne,"LI",{});var ZNe=s(nC);hMe=n(ZNe,"STRONG",{});var O9t=s(hMe);ukr=r(O9t,"bert"),O9t.forEach(t),_kr=r(ZNe," \u2014 "),zY=n(ZNe,"A",{href:!0});var V9t=s(zY);bkr=r(V9t,"FlaxBertModel"),V9t.forEach(t),vkr=r(ZNe," (BERT model)"),ZNe.forEach(t),Fkr=i(ne),sC=n(ne,"LI",{});var eqe=s(sC);pMe=n(eqe,"STRONG",{});var X9t=s(pMe);Tkr=r(X9t,"big_bird"),X9t.forEach(t),Mkr=r(eqe," \u2014 "),WY=n(eqe,"A",{href:!0});var z9t=s(WY);Ekr=r(z9t,"FlaxBigBirdModel"),z9t.forEach(t),Ckr=r(eqe," (BigBird model)"),eqe.forEach(t),wkr=i(ne),lC=n(ne,"LI",{});var oqe=s(lC);uMe=n(oqe,"STRONG",{});var W9t=s(uMe);Akr=r(W9t,"blenderbot"),W9t.forEach(t),ykr=r(oqe," \u2014 "),QY=n(oqe,"A",{href:!0});var Q9t=s(QY);Lkr=r(Q9t,"FlaxBlenderbotModel"),Q9t.forEach(t),xkr=r(oqe," (Blenderbot model)"),oqe.forEach(t),$kr=i(ne),iC=n(ne,"LI",{});var rqe=s(iC);_Me=n(rqe,"STRONG",{});var H9t=s(_Me);kkr=r(H9t,"blenderbot-small"),H9t.forEach(t),Skr=r(rqe," \u2014 "),HY=n(rqe,"A",{href:!0});var U9t=s(HY);Rkr=r(U9t,"FlaxBlenderbotSmallModel"),U9t.forEach(t),Pkr=r(rqe," (BlenderbotSmall model)"),rqe.forEach(t),Bkr=i(ne),dC=n(ne,"LI",{});var tqe=s(dC);bMe=n(tqe,"STRONG",{});var J9t=s(bMe);Ikr=r(J9t,"clip"),J9t.forEach(t),Nkr=r(tqe," \u2014 "),UY=n(tqe,"A",{href:!0});var Y9t=s(UY);qkr=r(Y9t,"FlaxCLIPModel"),Y9t.forEach(t),jkr=r(tqe," (CLIP model)"),tqe.forEach(t),Dkr=i(ne),cC=n(ne,"LI",{});var aqe=s(cC);vMe=n(aqe,"STRONG",{});var K9t=s(vMe);Gkr=r(K9t,"distilbert"),K9t.forEach(t),Okr=r(aqe," \u2014 "),JY=n(aqe,"A",{href:!0});var Z9t=s(JY);Vkr=r(Z9t,"FlaxDistilBertModel"),Z9t.forEach(t),Xkr=r(aqe," (DistilBERT model)"),aqe.forEach(t),zkr=i(ne),fC=n(ne,"LI",{});var nqe=s(fC);FMe=n(nqe,"STRONG",{});var ext=s(FMe);Wkr=r(ext,"electra"),ext.forEach(t),Qkr=r(nqe," \u2014 "),YY=n(nqe,"A",{href:!0});var oxt=s(YY);Hkr=r(oxt,"FlaxElectraModel"),oxt.forEach(t),Ukr=r(nqe," (ELECTRA model)"),nqe.forEach(t),Jkr=i(ne),mC=n(ne,"LI",{});var sqe=s(mC);TMe=n(sqe,"STRONG",{});var rxt=s(TMe);Ykr=r(rxt,"gpt2"),rxt.forEach(t),Kkr=r(sqe," \u2014 "),KY=n(sqe,"A",{href:!0});var txt=s(KY);Zkr=r(txt,"FlaxGPT2Model"),txt.forEach(t),eSr=r(sqe," (OpenAI GPT-2 model)"),sqe.forEach(t),oSr=i(ne),gC=n(ne,"LI",{});var lqe=s(gC);MMe=n(lqe,"STRONG",{});var axt=s(MMe);rSr=r(axt,"gpt_neo"),axt.forEach(t),tSr=r(lqe," \u2014 "),ZY=n(lqe,"A",{href:!0});var nxt=s(ZY);aSr=r(nxt,"FlaxGPTNeoModel"),nxt.forEach(t),nSr=r(lqe," (GPT Neo model)"),lqe.forEach(t),sSr=i(ne),hC=n(ne,"LI",{});var iqe=s(hC);EMe=n(iqe,"STRONG",{});var sxt=s(EMe);lSr=r(sxt,"gptj"),sxt.forEach(t),iSr=r(iqe," \u2014 "),eK=n(iqe,"A",{href:!0});var lxt=s(eK);dSr=r(lxt,"FlaxGPTJModel"),lxt.forEach(t),cSr=r(iqe," (GPT-J model)"),iqe.forEach(t),fSr=i(ne),pC=n(ne,"LI",{});var dqe=s(pC);CMe=n(dqe,"STRONG",{});var ixt=s(CMe);mSr=r(ixt,"marian"),ixt.forEach(t),gSr=r(dqe," \u2014 "),oK=n(dqe,"A",{href:!0});var dxt=s(oK);hSr=r(dxt,"FlaxMarianModel"),dxt.forEach(t),pSr=r(dqe," (Marian model)"),dqe.forEach(t),uSr=i(ne),uC=n(ne,"LI",{});var cqe=s(uC);wMe=n(cqe,"STRONG",{});var cxt=s(wMe);_Sr=r(cxt,"mbart"),cxt.forEach(t),bSr=r(cqe," \u2014 "),rK=n(cqe,"A",{href:!0});var fxt=s(rK);vSr=r(fxt,"FlaxMBartModel"),fxt.forEach(t),FSr=r(cqe," (mBART model)"),cqe.forEach(t),TSr=i(ne),_C=n(ne,"LI",{});var fqe=s(_C);AMe=n(fqe,"STRONG",{});var mxt=s(AMe);MSr=r(mxt,"mt5"),mxt.forEach(t),ESr=r(fqe," \u2014 "),tK=n(fqe,"A",{href:!0});var gxt=s(tK);CSr=r(gxt,"FlaxMT5Model"),gxt.forEach(t),wSr=r(fqe," (MT5 model)"),fqe.forEach(t),ASr=i(ne),bC=n(ne,"LI",{});var mqe=s(bC);yMe=n(mqe,"STRONG",{});var hxt=s(yMe);ySr=r(hxt,"opt"),hxt.forEach(t),LSr=r(mqe," \u2014 "),aK=n(mqe,"A",{href:!0});var pxt=s(aK);xSr=r(pxt,"FlaxOPTModel"),pxt.forEach(t),$Sr=r(mqe," (OPT model)"),mqe.forEach(t),kSr=i(ne),vC=n(ne,"LI",{});var gqe=s(vC);LMe=n(gqe,"STRONG",{});var uxt=s(LMe);SSr=r(uxt,"pegasus"),uxt.forEach(t),RSr=r(gqe," \u2014 "),nK=n(gqe,"A",{href:!0});var _xt=s(nK);PSr=r(_xt,"FlaxPegasusModel"),_xt.forEach(t),BSr=r(gqe," (Pegasus model)"),gqe.forEach(t),ISr=i(ne),FC=n(ne,"LI",{});var hqe=s(FC);xMe=n(hqe,"STRONG",{});var bxt=s(xMe);NSr=r(bxt,"roberta"),bxt.forEach(t),qSr=r(hqe," \u2014 "),sK=n(hqe,"A",{href:!0});var vxt=s(sK);jSr=r(vxt,"FlaxRobertaModel"),vxt.forEach(t),DSr=r(hqe," (RoBERTa model)"),hqe.forEach(t),GSr=i(ne),TC=n(ne,"LI",{});var pqe=s(TC);$Me=n(pqe,"STRONG",{});var Fxt=s($Me);OSr=r(Fxt,"roformer"),Fxt.forEach(t),VSr=r(pqe," \u2014 "),lK=n(pqe,"A",{href:!0});var Txt=s(lK);XSr=r(Txt,"FlaxRoFormerModel"),Txt.forEach(t),zSr=r(pqe," (RoFormer model)"),pqe.forEach(t),WSr=i(ne),MC=n(ne,"LI",{});var uqe=s(MC);kMe=n(uqe,"STRONG",{});var Mxt=s(kMe);QSr=r(Mxt,"t5"),Mxt.forEach(t),HSr=r(uqe," \u2014 "),iK=n(uqe,"A",{href:!0});var Ext=s(iK);USr=r(Ext,"FlaxT5Model"),Ext.forEach(t),JSr=r(uqe," (T5 model)"),uqe.forEach(t),YSr=i(ne),EC=n(ne,"LI",{});var _qe=s(EC);SMe=n(_qe,"STRONG",{});var Cxt=s(SMe);KSr=r(Cxt,"vision-text-dual-encoder"),Cxt.forEach(t),ZSr=r(_qe," \u2014 "),dK=n(_qe,"A",{href:!0});var wxt=s(dK);eRr=r(wxt,"FlaxVisionTextDualEncoderModel"),wxt.forEach(t),oRr=r(_qe," (VisionTextDualEncoder model)"),_qe.forEach(t),rRr=i(ne),CC=n(ne,"LI",{});var bqe=s(CC);RMe=n(bqe,"STRONG",{});var Axt=s(RMe);tRr=r(Axt,"vit"),Axt.forEach(t),aRr=r(bqe," \u2014 "),cK=n(bqe,"A",{href:!0});var yxt=s(cK);nRr=r(yxt,"FlaxViTModel"),yxt.forEach(t),sRr=r(bqe," (ViT model)"),bqe.forEach(t),lRr=i(ne),wC=n(ne,"LI",{});var vqe=s(wC);PMe=n(vqe,"STRONG",{});var Lxt=s(PMe);iRr=r(Lxt,"wav2vec2"),Lxt.forEach(t),dRr=r(vqe," \u2014 "),fK=n(vqe,"A",{href:!0});var xxt=s(fK);cRr=r(xxt,"FlaxWav2Vec2Model"),xxt.forEach(t),fRr=r(vqe," (Wav2Vec2 model)"),vqe.forEach(t),mRr=i(ne),AC=n(ne,"LI",{});var Fqe=s(AC);BMe=n(Fqe,"STRONG",{});var $xt=s(BMe);gRr=r($xt,"xglm"),$xt.forEach(t),hRr=r(Fqe," \u2014 "),mK=n(Fqe,"A",{href:!0});var kxt=s(mK);pRr=r(kxt,"FlaxXGLMModel"),kxt.forEach(t),uRr=r(Fqe," (XGLM model)"),Fqe.forEach(t),_Rr=i(ne),yC=n(ne,"LI",{});var Tqe=s(yC);IMe=n(Tqe,"STRONG",{});var Sxt=s(IMe);bRr=r(Sxt,"xlm-roberta"),Sxt.forEach(t),vRr=r(Tqe," \u2014 "),gK=n(Tqe,"A",{href:!0});var Rxt=s(gK);FRr=r(Rxt,"FlaxXLMRobertaModel"),Rxt.forEach(t),TRr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),ne.forEach(t),MRr=i(Jl),T(LC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),SGe=i(f),Vc=n(f,"H2",{class:!0});var GVe=s(Vc);xC=n(GVe,"A",{id:!0,class:!0,href:!0});var Pxt=s(xC);NMe=n(Pxt,"SPAN",{});var Bxt=s(NMe);T(gx.$$.fragment,Bxt),Bxt.forEach(t),Pxt.forEach(t),ERr=i(GVe),qMe=n(GVe,"SPAN",{});var Ixt=s(qMe);CRr=r(Ixt,"FlaxAutoModelForCausalLM"),Ixt.forEach(t),GVe.forEach(t),RGe=i(f),hr=n(f,"DIV",{class:!0});var Yl=s(hr);T(hx.$$.fragment,Yl),wRr=i(Yl),Xc=n(Yl,"P",{});var Woe=s(Xc);ARr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hK=n(Woe,"A",{href:!0});var Nxt=s(hK);yRr=r(Nxt,"from_pretrained()"),Nxt.forEach(t),LRr=r(Woe," class method or the "),pK=n(Woe,"A",{href:!0});var qxt=s(pK);xRr=r(qxt,"from_config()"),qxt.forEach(t),$Rr=r(Woe,` class
method.`),Woe.forEach(t),kRr=i(Yl),px=n(Yl,"P",{});var OVe=s(px);SRr=r(OVe,"This class cannot be instantiated directly using "),jMe=n(OVe,"CODE",{});var jxt=s(jMe);RRr=r(jxt,"__init__()"),jxt.forEach(t),PRr=r(OVe," (throws an error)."),OVe.forEach(t),BRr=i(Yl),zt=n(Yl,"DIV",{class:!0});var R0=s(zt);T(ux.$$.fragment,R0),IRr=i(R0),DMe=n(R0,"P",{});var Dxt=s(DMe);NRr=r(Dxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dxt.forEach(t),qRr=i(R0),zc=n(R0,"P",{});var Qoe=s(zc);jRr=r(Qoe,`Note:
Loading a model from its configuration file does `),GMe=n(Qoe,"STRONG",{});var Gxt=s(GMe);DRr=r(Gxt,"not"),Gxt.forEach(t),GRr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Qoe,"A",{href:!0});var Oxt=s(uK);ORr=r(Oxt,"from_pretrained()"),Oxt.forEach(t),VRr=r(Qoe," to load the model weights."),Qoe.forEach(t),XRr=i(R0),T($C.$$.fragment,R0),R0.forEach(t),zRr=i(Yl),Or=n(Yl,"DIV",{class:!0});var Kl=s(Or);T(_x.$$.fragment,Kl),WRr=i(Kl),OMe=n(Kl,"P",{});var Vxt=s(OMe);QRr=r(Vxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vxt.forEach(t),HRr=i(Kl),Fn=n(Kl,"P",{});var P0=s(Fn);URr=r(P0,"The model class to instantiate is selected based on the "),VMe=n(P0,"CODE",{});var Xxt=s(VMe);JRr=r(Xxt,"model_type"),Xxt.forEach(t),YRr=r(P0,` property of the config object (either
passed as an argument or loaded from `),XMe=n(P0,"CODE",{});var zxt=s(XMe);KRr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),ZRr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(P0,"CODE",{});var Wxt=s(zMe);ePr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),oPr=r(P0,":"),P0.forEach(t),rPr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);kC=n(Ne,"LI",{});var Mqe=s(kC);WMe=n(Mqe,"STRONG",{});var Qxt=s(WMe);tPr=r(Qxt,"bart"),Qxt.forEach(t),aPr=r(Mqe," \u2014 "),_K=n(Mqe,"A",{href:!0});var Hxt=s(_K);nPr=r(Hxt,"FlaxBartForCausalLM"),Hxt.forEach(t),sPr=r(Mqe," (BART model)"),Mqe.forEach(t),lPr=i(Ne),SC=n(Ne,"LI",{});var Eqe=s(SC);QMe=n(Eqe,"STRONG",{});var Uxt=s(QMe);iPr=r(Uxt,"bert"),Uxt.forEach(t),dPr=r(Eqe," \u2014 "),bK=n(Eqe,"A",{href:!0});var Jxt=s(bK);cPr=r(Jxt,"FlaxBertForCausalLM"),Jxt.forEach(t),fPr=r(Eqe," (BERT model)"),Eqe.forEach(t),mPr=i(Ne),RC=n(Ne,"LI",{});var Cqe=s(RC);HMe=n(Cqe,"STRONG",{});var Yxt=s(HMe);gPr=r(Yxt,"big_bird"),Yxt.forEach(t),hPr=r(Cqe," \u2014 "),vK=n(Cqe,"A",{href:!0});var Kxt=s(vK);pPr=r(Kxt,"FlaxBigBirdForCausalLM"),Kxt.forEach(t),uPr=r(Cqe," (BigBird model)"),Cqe.forEach(t),_Pr=i(Ne),PC=n(Ne,"LI",{});var wqe=s(PC);UMe=n(wqe,"STRONG",{});var Zxt=s(UMe);bPr=r(Zxt,"electra"),Zxt.forEach(t),vPr=r(wqe," \u2014 "),FK=n(wqe,"A",{href:!0});var e$t=s(FK);FPr=r(e$t,"FlaxElectraForCausalLM"),e$t.forEach(t),TPr=r(wqe," (ELECTRA model)"),wqe.forEach(t),MPr=i(Ne),BC=n(Ne,"LI",{});var Aqe=s(BC);JMe=n(Aqe,"STRONG",{});var o$t=s(JMe);EPr=r(o$t,"gpt2"),o$t.forEach(t),CPr=r(Aqe," \u2014 "),TK=n(Aqe,"A",{href:!0});var r$t=s(TK);wPr=r(r$t,"FlaxGPT2LMHeadModel"),r$t.forEach(t),APr=r(Aqe," (OpenAI GPT-2 model)"),Aqe.forEach(t),yPr=i(Ne),IC=n(Ne,"LI",{});var yqe=s(IC);YMe=n(yqe,"STRONG",{});var t$t=s(YMe);LPr=r(t$t,"gpt_neo"),t$t.forEach(t),xPr=r(yqe," \u2014 "),MK=n(yqe,"A",{href:!0});var a$t=s(MK);$Pr=r(a$t,"FlaxGPTNeoForCausalLM"),a$t.forEach(t),kPr=r(yqe," (GPT Neo model)"),yqe.forEach(t),SPr=i(Ne),NC=n(Ne,"LI",{});var Lqe=s(NC);KMe=n(Lqe,"STRONG",{});var n$t=s(KMe);RPr=r(n$t,"gptj"),n$t.forEach(t),PPr=r(Lqe," \u2014 "),EK=n(Lqe,"A",{href:!0});var s$t=s(EK);BPr=r(s$t,"FlaxGPTJForCausalLM"),s$t.forEach(t),IPr=r(Lqe," (GPT-J model)"),Lqe.forEach(t),NPr=i(Ne),qC=n(Ne,"LI",{});var xqe=s(qC);ZMe=n(xqe,"STRONG",{});var l$t=s(ZMe);qPr=r(l$t,"opt"),l$t.forEach(t),jPr=r(xqe," \u2014 "),CK=n(xqe,"A",{href:!0});var i$t=s(CK);DPr=r(i$t,"FlaxOPTForCausalLM"),i$t.forEach(t),GPr=r(xqe," (OPT model)"),xqe.forEach(t),OPr=i(Ne),jC=n(Ne,"LI",{});var $qe=s(jC);e4e=n($qe,"STRONG",{});var d$t=s(e4e);VPr=r(d$t,"roberta"),d$t.forEach(t),XPr=r($qe," \u2014 "),wK=n($qe,"A",{href:!0});var c$t=s(wK);zPr=r(c$t,"FlaxRobertaForCausalLM"),c$t.forEach(t),WPr=r($qe," (RoBERTa model)"),$qe.forEach(t),QPr=i(Ne),DC=n(Ne,"LI",{});var kqe=s(DC);o4e=n(kqe,"STRONG",{});var f$t=s(o4e);HPr=r(f$t,"xglm"),f$t.forEach(t),UPr=r(kqe," \u2014 "),AK=n(kqe,"A",{href:!0});var m$t=s(AK);JPr=r(m$t,"FlaxXGLMForCausalLM"),m$t.forEach(t),YPr=r(kqe," (XGLM model)"),kqe.forEach(t),Ne.forEach(t),KPr=i(Kl),T(GC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),PGe=i(f),Wc=n(f,"H2",{class:!0});var VVe=s(Wc);OC=n(VVe,"A",{id:!0,class:!0,href:!0});var g$t=s(OC);r4e=n(g$t,"SPAN",{});var h$t=s(r4e);T(bx.$$.fragment,h$t),h$t.forEach(t),g$t.forEach(t),ZPr=i(VVe),t4e=n(VVe,"SPAN",{});var p$t=s(t4e);eBr=r(p$t,"FlaxAutoModelForPreTraining"),p$t.forEach(t),VVe.forEach(t),BGe=i(f),pr=n(f,"DIV",{class:!0});var Zl=s(pr);T(vx.$$.fragment,Zl),oBr=i(Zl),Qc=n(Zl,"P",{});var Hoe=s(Qc);rBr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yK=n(Hoe,"A",{href:!0});var u$t=s(yK);tBr=r(u$t,"from_pretrained()"),u$t.forEach(t),aBr=r(Hoe," class method or the "),LK=n(Hoe,"A",{href:!0});var _$t=s(LK);nBr=r(_$t,"from_config()"),_$t.forEach(t),sBr=r(Hoe,` class
method.`),Hoe.forEach(t),lBr=i(Zl),Fx=n(Zl,"P",{});var XVe=s(Fx);iBr=r(XVe,"This class cannot be instantiated directly using "),a4e=n(XVe,"CODE",{});var b$t=s(a4e);dBr=r(b$t,"__init__()"),b$t.forEach(t),cBr=r(XVe," (throws an error)."),XVe.forEach(t),fBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var B0=s(Wt);T(Tx.$$.fragment,B0),mBr=i(B0),n4e=n(B0,"P",{});var v$t=s(n4e);gBr=r(v$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v$t.forEach(t),hBr=i(B0),Hc=n(B0,"P",{});var Uoe=s(Hc);pBr=r(Uoe,`Note:
Loading a model from its configuration file does `),s4e=n(Uoe,"STRONG",{});var F$t=s(s4e);uBr=r(F$t,"not"),F$t.forEach(t),_Br=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Uoe,"A",{href:!0});var T$t=s(xK);bBr=r(T$t,"from_pretrained()"),T$t.forEach(t),vBr=r(Uoe," to load the model weights."),Uoe.forEach(t),FBr=i(B0),T(VC.$$.fragment,B0),B0.forEach(t),TBr=i(Zl),Vr=n(Zl,"DIV",{class:!0});var ei=s(Vr);T(Mx.$$.fragment,ei),MBr=i(ei),l4e=n(ei,"P",{});var M$t=s(l4e);EBr=r(M$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M$t.forEach(t),CBr=i(ei),Tn=n(ei,"P",{});var I0=s(Tn);wBr=r(I0,"The model class to instantiate is selected based on the "),i4e=n(I0,"CODE",{});var E$t=s(i4e);ABr=r(E$t,"model_type"),E$t.forEach(t),yBr=r(I0,` property of the config object (either
passed as an argument or loaded from `),d4e=n(I0,"CODE",{});var C$t=s(d4e);LBr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),xBr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(I0,"CODE",{});var w$t=s(c4e);$Br=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),kBr=r(I0,":"),I0.forEach(t),SBr=i(ei),Ee=n(ei,"UL",{});var we=s(Ee);XC=n(we,"LI",{});var Sqe=s(XC);f4e=n(Sqe,"STRONG",{});var A$t=s(f4e);RBr=r(A$t,"albert"),A$t.forEach(t),PBr=r(Sqe," \u2014 "),$K=n(Sqe,"A",{href:!0});var y$t=s($K);BBr=r(y$t,"FlaxAlbertForPreTraining"),y$t.forEach(t),IBr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),NBr=i(we),zC=n(we,"LI",{});var Rqe=s(zC);m4e=n(Rqe,"STRONG",{});var L$t=s(m4e);qBr=r(L$t,"bart"),L$t.forEach(t),jBr=r(Rqe," \u2014 "),kK=n(Rqe,"A",{href:!0});var x$t=s(kK);DBr=r(x$t,"FlaxBartForConditionalGeneration"),x$t.forEach(t),GBr=r(Rqe," (BART model)"),Rqe.forEach(t),OBr=i(we),WC=n(we,"LI",{});var Pqe=s(WC);g4e=n(Pqe,"STRONG",{});var $$t=s(g4e);VBr=r($$t,"bert"),$$t.forEach(t),XBr=r(Pqe," \u2014 "),SK=n(Pqe,"A",{href:!0});var k$t=s(SK);zBr=r(k$t,"FlaxBertForPreTraining"),k$t.forEach(t),WBr=r(Pqe," (BERT model)"),Pqe.forEach(t),QBr=i(we),QC=n(we,"LI",{});var Bqe=s(QC);h4e=n(Bqe,"STRONG",{});var S$t=s(h4e);HBr=r(S$t,"big_bird"),S$t.forEach(t),UBr=r(Bqe," \u2014 "),RK=n(Bqe,"A",{href:!0});var R$t=s(RK);JBr=r(R$t,"FlaxBigBirdForPreTraining"),R$t.forEach(t),YBr=r(Bqe," (BigBird model)"),Bqe.forEach(t),KBr=i(we),HC=n(we,"LI",{});var Iqe=s(HC);p4e=n(Iqe,"STRONG",{});var P$t=s(p4e);ZBr=r(P$t,"electra"),P$t.forEach(t),eIr=r(Iqe," \u2014 "),PK=n(Iqe,"A",{href:!0});var B$t=s(PK);oIr=r(B$t,"FlaxElectraForPreTraining"),B$t.forEach(t),rIr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),tIr=i(we),UC=n(we,"LI",{});var Nqe=s(UC);u4e=n(Nqe,"STRONG",{});var I$t=s(u4e);aIr=r(I$t,"mbart"),I$t.forEach(t),nIr=r(Nqe," \u2014 "),BK=n(Nqe,"A",{href:!0});var N$t=s(BK);sIr=r(N$t,"FlaxMBartForConditionalGeneration"),N$t.forEach(t),lIr=r(Nqe," (mBART model)"),Nqe.forEach(t),iIr=i(we),JC=n(we,"LI",{});var qqe=s(JC);_4e=n(qqe,"STRONG",{});var q$t=s(_4e);dIr=r(q$t,"mt5"),q$t.forEach(t),cIr=r(qqe," \u2014 "),IK=n(qqe,"A",{href:!0});var j$t=s(IK);fIr=r(j$t,"FlaxMT5ForConditionalGeneration"),j$t.forEach(t),mIr=r(qqe," (MT5 model)"),qqe.forEach(t),gIr=i(we),YC=n(we,"LI",{});var jqe=s(YC);b4e=n(jqe,"STRONG",{});var D$t=s(b4e);hIr=r(D$t,"roberta"),D$t.forEach(t),pIr=r(jqe," \u2014 "),NK=n(jqe,"A",{href:!0});var G$t=s(NK);uIr=r(G$t,"FlaxRobertaForMaskedLM"),G$t.forEach(t),_Ir=r(jqe," (RoBERTa model)"),jqe.forEach(t),bIr=i(we),KC=n(we,"LI",{});var Dqe=s(KC);v4e=n(Dqe,"STRONG",{});var O$t=s(v4e);vIr=r(O$t,"roformer"),O$t.forEach(t),FIr=r(Dqe," \u2014 "),qK=n(Dqe,"A",{href:!0});var V$t=s(qK);TIr=r(V$t,"FlaxRoFormerForMaskedLM"),V$t.forEach(t),MIr=r(Dqe," (RoFormer model)"),Dqe.forEach(t),EIr=i(we),ZC=n(we,"LI",{});var Gqe=s(ZC);F4e=n(Gqe,"STRONG",{});var X$t=s(F4e);CIr=r(X$t,"t5"),X$t.forEach(t),wIr=r(Gqe," \u2014 "),jK=n(Gqe,"A",{href:!0});var z$t=s(jK);AIr=r(z$t,"FlaxT5ForConditionalGeneration"),z$t.forEach(t),yIr=r(Gqe," (T5 model)"),Gqe.forEach(t),LIr=i(we),e5=n(we,"LI",{});var Oqe=s(e5);T4e=n(Oqe,"STRONG",{});var W$t=s(T4e);xIr=r(W$t,"wav2vec2"),W$t.forEach(t),$Ir=r(Oqe," \u2014 "),DK=n(Oqe,"A",{href:!0});var Q$t=s(DK);kIr=r(Q$t,"FlaxWav2Vec2ForPreTraining"),Q$t.forEach(t),SIr=r(Oqe," (Wav2Vec2 model)"),Oqe.forEach(t),RIr=i(we),o5=n(we,"LI",{});var Vqe=s(o5);M4e=n(Vqe,"STRONG",{});var H$t=s(M4e);PIr=r(H$t,"xlm-roberta"),H$t.forEach(t),BIr=r(Vqe," \u2014 "),GK=n(Vqe,"A",{href:!0});var U$t=s(GK);IIr=r(U$t,"FlaxXLMRobertaForMaskedLM"),U$t.forEach(t),NIr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),we.forEach(t),qIr=i(ei),T(r5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),IGe=i(f),Uc=n(f,"H2",{class:!0});var zVe=s(Uc);t5=n(zVe,"A",{id:!0,class:!0,href:!0});var J$t=s(t5);E4e=n(J$t,"SPAN",{});var Y$t=s(E4e);T(Ex.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),jIr=i(zVe),C4e=n(zVe,"SPAN",{});var K$t=s(C4e);DIr=r(K$t,"FlaxAutoModelForMaskedLM"),K$t.forEach(t),zVe.forEach(t),NGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(Cx.$$.fragment,oi),GIr=i(oi),Jc=n(oi,"P",{});var Joe=s(Jc);OIr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OK=n(Joe,"A",{href:!0});var Z$t=s(OK);VIr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),XIr=r(Joe," class method or the "),VK=n(Joe,"A",{href:!0});var ekt=s(VK);zIr=r(ekt,"from_config()"),ekt.forEach(t),WIr=r(Joe,` class
method.`),Joe.forEach(t),QIr=i(oi),wx=n(oi,"P",{});var WVe=s(wx);HIr=r(WVe,"This class cannot be instantiated directly using "),w4e=n(WVe,"CODE",{});var okt=s(w4e);UIr=r(okt,"__init__()"),okt.forEach(t),JIr=r(WVe," (throws an error)."),WVe.forEach(t),YIr=i(oi),Qt=n(oi,"DIV",{class:!0});var N0=s(Qt);T(Ax.$$.fragment,N0),KIr=i(N0),A4e=n(N0,"P",{});var rkt=s(A4e);ZIr=r(rkt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rkt.forEach(t),eNr=i(N0),Yc=n(N0,"P",{});var Yoe=s(Yc);oNr=r(Yoe,`Note:
Loading a model from its configuration file does `),y4e=n(Yoe,"STRONG",{});var tkt=s(y4e);rNr=r(tkt,"not"),tkt.forEach(t),tNr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Yoe,"A",{href:!0});var akt=s(XK);aNr=r(akt,"from_pretrained()"),akt.forEach(t),nNr=r(Yoe," to load the model weights."),Yoe.forEach(t),sNr=i(N0),T(a5.$$.fragment,N0),N0.forEach(t),lNr=i(oi),Xr=n(oi,"DIV",{class:!0});var ri=s(Xr);T(yx.$$.fragment,ri),iNr=i(ri),L4e=n(ri,"P",{});var nkt=s(L4e);dNr=r(nkt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nkt.forEach(t),cNr=i(ri),Mn=n(ri,"P",{});var q0=s(Mn);fNr=r(q0,"The model class to instantiate is selected based on the "),x4e=n(q0,"CODE",{});var skt=s(x4e);mNr=r(skt,"model_type"),skt.forEach(t),gNr=r(q0,` property of the config object (either
passed as an argument or loaded from `),$4e=n(q0,"CODE",{});var lkt=s($4e);hNr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),pNr=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(q0,"CODE",{});var ikt=s(k4e);uNr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),_Nr=r(q0,":"),q0.forEach(t),bNr=i(ri),$e=n(ri,"UL",{});var qe=s($e);n5=n(qe,"LI",{});var Xqe=s(n5);S4e=n(Xqe,"STRONG",{});var dkt=s(S4e);vNr=r(dkt,"albert"),dkt.forEach(t),FNr=r(Xqe," \u2014 "),zK=n(Xqe,"A",{href:!0});var ckt=s(zK);TNr=r(ckt,"FlaxAlbertForMaskedLM"),ckt.forEach(t),MNr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),ENr=i(qe),s5=n(qe,"LI",{});var zqe=s(s5);R4e=n(zqe,"STRONG",{});var fkt=s(R4e);CNr=r(fkt,"bart"),fkt.forEach(t),wNr=r(zqe," \u2014 "),WK=n(zqe,"A",{href:!0});var mkt=s(WK);ANr=r(mkt,"FlaxBartForConditionalGeneration"),mkt.forEach(t),yNr=r(zqe," (BART model)"),zqe.forEach(t),LNr=i(qe),l5=n(qe,"LI",{});var Wqe=s(l5);P4e=n(Wqe,"STRONG",{});var gkt=s(P4e);xNr=r(gkt,"bert"),gkt.forEach(t),$Nr=r(Wqe," \u2014 "),QK=n(Wqe,"A",{href:!0});var hkt=s(QK);kNr=r(hkt,"FlaxBertForMaskedLM"),hkt.forEach(t),SNr=r(Wqe," (BERT model)"),Wqe.forEach(t),RNr=i(qe),i5=n(qe,"LI",{});var Qqe=s(i5);B4e=n(Qqe,"STRONG",{});var pkt=s(B4e);PNr=r(pkt,"big_bird"),pkt.forEach(t),BNr=r(Qqe," \u2014 "),HK=n(Qqe,"A",{href:!0});var ukt=s(HK);INr=r(ukt,"FlaxBigBirdForMaskedLM"),ukt.forEach(t),NNr=r(Qqe," (BigBird model)"),Qqe.forEach(t),qNr=i(qe),d5=n(qe,"LI",{});var Hqe=s(d5);I4e=n(Hqe,"STRONG",{});var _kt=s(I4e);jNr=r(_kt,"distilbert"),_kt.forEach(t),DNr=r(Hqe," \u2014 "),UK=n(Hqe,"A",{href:!0});var bkt=s(UK);GNr=r(bkt,"FlaxDistilBertForMaskedLM"),bkt.forEach(t),ONr=r(Hqe," (DistilBERT model)"),Hqe.forEach(t),VNr=i(qe),c5=n(qe,"LI",{});var Uqe=s(c5);N4e=n(Uqe,"STRONG",{});var vkt=s(N4e);XNr=r(vkt,"electra"),vkt.forEach(t),zNr=r(Uqe," \u2014 "),JK=n(Uqe,"A",{href:!0});var Fkt=s(JK);WNr=r(Fkt,"FlaxElectraForMaskedLM"),Fkt.forEach(t),QNr=r(Uqe," (ELECTRA model)"),Uqe.forEach(t),HNr=i(qe),f5=n(qe,"LI",{});var Jqe=s(f5);q4e=n(Jqe,"STRONG",{});var Tkt=s(q4e);UNr=r(Tkt,"mbart"),Tkt.forEach(t),JNr=r(Jqe," \u2014 "),YK=n(Jqe,"A",{href:!0});var Mkt=s(YK);YNr=r(Mkt,"FlaxMBartForConditionalGeneration"),Mkt.forEach(t),KNr=r(Jqe," (mBART model)"),Jqe.forEach(t),ZNr=i(qe),m5=n(qe,"LI",{});var Yqe=s(m5);j4e=n(Yqe,"STRONG",{});var Ekt=s(j4e);eqr=r(Ekt,"roberta"),Ekt.forEach(t),oqr=r(Yqe," \u2014 "),KK=n(Yqe,"A",{href:!0});var Ckt=s(KK);rqr=r(Ckt,"FlaxRobertaForMaskedLM"),Ckt.forEach(t),tqr=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),aqr=i(qe),g5=n(qe,"LI",{});var Kqe=s(g5);D4e=n(Kqe,"STRONG",{});var wkt=s(D4e);nqr=r(wkt,"roformer"),wkt.forEach(t),sqr=r(Kqe," \u2014 "),ZK=n(Kqe,"A",{href:!0});var Akt=s(ZK);lqr=r(Akt,"FlaxRoFormerForMaskedLM"),Akt.forEach(t),iqr=r(Kqe," (RoFormer model)"),Kqe.forEach(t),dqr=i(qe),h5=n(qe,"LI",{});var Zqe=s(h5);G4e=n(Zqe,"STRONG",{});var ykt=s(G4e);cqr=r(ykt,"xlm-roberta"),ykt.forEach(t),fqr=r(Zqe," \u2014 "),eZ=n(Zqe,"A",{href:!0});var Lkt=s(eZ);mqr=r(Lkt,"FlaxXLMRobertaForMaskedLM"),Lkt.forEach(t),gqr=r(Zqe," (XLM-RoBERTa model)"),Zqe.forEach(t),qe.forEach(t),hqr=i(ri),T(p5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),qGe=i(f),Kc=n(f,"H2",{class:!0});var QVe=s(Kc);u5=n(QVe,"A",{id:!0,class:!0,href:!0});var xkt=s(u5);O4e=n(xkt,"SPAN",{});var $kt=s(O4e);T(Lx.$$.fragment,$kt),$kt.forEach(t),xkt.forEach(t),pqr=i(QVe),V4e=n(QVe,"SPAN",{});var kkt=s(V4e);uqr=r(kkt,"FlaxAutoModelForSeq2SeqLM"),kkt.forEach(t),QVe.forEach(t),jGe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(xx.$$.fragment,ti),_qr=i(ti),Zc=n(ti,"P",{});var Koe=s(Zc);bqr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oZ=n(Koe,"A",{href:!0});var Skt=s(oZ);vqr=r(Skt,"from_pretrained()"),Skt.forEach(t),Fqr=r(Koe," class method or the "),rZ=n(Koe,"A",{href:!0});var Rkt=s(rZ);Tqr=r(Rkt,"from_config()"),Rkt.forEach(t),Mqr=r(Koe,` class
method.`),Koe.forEach(t),Eqr=i(ti),$x=n(ti,"P",{});var HVe=s($x);Cqr=r(HVe,"This class cannot be instantiated directly using "),X4e=n(HVe,"CODE",{});var Pkt=s(X4e);wqr=r(Pkt,"__init__()"),Pkt.forEach(t),Aqr=r(HVe," (throws an error)."),HVe.forEach(t),yqr=i(ti),Ht=n(ti,"DIV",{class:!0});var j0=s(Ht);T(kx.$$.fragment,j0),Lqr=i(j0),z4e=n(j0,"P",{});var Bkt=s(z4e);xqr=r(Bkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bkt.forEach(t),$qr=i(j0),ef=n(j0,"P",{});var Zoe=s(ef);kqr=r(Zoe,`Note:
Loading a model from its configuration file does `),W4e=n(Zoe,"STRONG",{});var Ikt=s(W4e);Sqr=r(Ikt,"not"),Ikt.forEach(t),Rqr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Zoe,"A",{href:!0});var Nkt=s(tZ);Pqr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),Bqr=r(Zoe," to load the model weights."),Zoe.forEach(t),Iqr=i(j0),T(_5.$$.fragment,j0),j0.forEach(t),Nqr=i(ti),zr=n(ti,"DIV",{class:!0});var ai=s(zr);T(Sx.$$.fragment,ai),qqr=i(ai),Q4e=n(ai,"P",{});var qkt=s(Q4e);jqr=r(qkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qkt.forEach(t),Dqr=i(ai),En=n(ai,"P",{});var D0=s(En);Gqr=r(D0,"The model class to instantiate is selected based on the "),H4e=n(D0,"CODE",{});var jkt=s(H4e);Oqr=r(jkt,"model_type"),jkt.forEach(t),Vqr=r(D0,` property of the config object (either
passed as an argument or loaded from `),U4e=n(D0,"CODE",{});var Dkt=s(U4e);Xqr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),zqr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(D0,"CODE",{});var Gkt=s(J4e);Wqr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),Qqr=r(D0,":"),D0.forEach(t),Hqr=i(ai),Pe=n(ai,"UL",{});var ze=s(Pe);b5=n(ze,"LI",{});var eje=s(b5);Y4e=n(eje,"STRONG",{});var Okt=s(Y4e);Uqr=r(Okt,"bart"),Okt.forEach(t),Jqr=r(eje," \u2014 "),aZ=n(eje,"A",{href:!0});var Vkt=s(aZ);Yqr=r(Vkt,"FlaxBartForConditionalGeneration"),Vkt.forEach(t),Kqr=r(eje," (BART model)"),eje.forEach(t),Zqr=i(ze),v5=n(ze,"LI",{});var oje=s(v5);K4e=n(oje,"STRONG",{});var Xkt=s(K4e);ejr=r(Xkt,"blenderbot"),Xkt.forEach(t),ojr=r(oje," \u2014 "),nZ=n(oje,"A",{href:!0});var zkt=s(nZ);rjr=r(zkt,"FlaxBlenderbotForConditionalGeneration"),zkt.forEach(t),tjr=r(oje," (Blenderbot model)"),oje.forEach(t),ajr=i(ze),F5=n(ze,"LI",{});var rje=s(F5);Z4e=n(rje,"STRONG",{});var Wkt=s(Z4e);njr=r(Wkt,"blenderbot-small"),Wkt.forEach(t),sjr=r(rje," \u2014 "),sZ=n(rje,"A",{href:!0});var Qkt=s(sZ);ljr=r(Qkt,"FlaxBlenderbotSmallForConditionalGeneration"),Qkt.forEach(t),ijr=r(rje," (BlenderbotSmall model)"),rje.forEach(t),djr=i(ze),T5=n(ze,"LI",{});var tje=s(T5);eEe=n(tje,"STRONG",{});var Hkt=s(eEe);cjr=r(Hkt,"encoder-decoder"),Hkt.forEach(t),fjr=r(tje," \u2014 "),lZ=n(tje,"A",{href:!0});var Ukt=s(lZ);mjr=r(Ukt,"FlaxEncoderDecoderModel"),Ukt.forEach(t),gjr=r(tje," (Encoder decoder model)"),tje.forEach(t),hjr=i(ze),M5=n(ze,"LI",{});var aje=s(M5);oEe=n(aje,"STRONG",{});var Jkt=s(oEe);pjr=r(Jkt,"marian"),Jkt.forEach(t),ujr=r(aje," \u2014 "),iZ=n(aje,"A",{href:!0});var Ykt=s(iZ);_jr=r(Ykt,"FlaxMarianMTModel"),Ykt.forEach(t),bjr=r(aje," (Marian model)"),aje.forEach(t),vjr=i(ze),E5=n(ze,"LI",{});var nje=s(E5);rEe=n(nje,"STRONG",{});var Kkt=s(rEe);Fjr=r(Kkt,"mbart"),Kkt.forEach(t),Tjr=r(nje," \u2014 "),dZ=n(nje,"A",{href:!0});var Zkt=s(dZ);Mjr=r(Zkt,"FlaxMBartForConditionalGeneration"),Zkt.forEach(t),Ejr=r(nje," (mBART model)"),nje.forEach(t),Cjr=i(ze),C5=n(ze,"LI",{});var sje=s(C5);tEe=n(sje,"STRONG",{});var eSt=s(tEe);wjr=r(eSt,"mt5"),eSt.forEach(t),Ajr=r(sje," \u2014 "),cZ=n(sje,"A",{href:!0});var oSt=s(cZ);yjr=r(oSt,"FlaxMT5ForConditionalGeneration"),oSt.forEach(t),Ljr=r(sje," (MT5 model)"),sje.forEach(t),xjr=i(ze),w5=n(ze,"LI",{});var lje=s(w5);aEe=n(lje,"STRONG",{});var rSt=s(aEe);$jr=r(rSt,"pegasus"),rSt.forEach(t),kjr=r(lje," \u2014 "),fZ=n(lje,"A",{href:!0});var tSt=s(fZ);Sjr=r(tSt,"FlaxPegasusForConditionalGeneration"),tSt.forEach(t),Rjr=r(lje," (Pegasus model)"),lje.forEach(t),Pjr=i(ze),A5=n(ze,"LI",{});var ije=s(A5);nEe=n(ije,"STRONG",{});var aSt=s(nEe);Bjr=r(aSt,"t5"),aSt.forEach(t),Ijr=r(ije," \u2014 "),mZ=n(ije,"A",{href:!0});var nSt=s(mZ);Njr=r(nSt,"FlaxT5ForConditionalGeneration"),nSt.forEach(t),qjr=r(ije," (T5 model)"),ije.forEach(t),ze.forEach(t),jjr=i(ai),T(y5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),DGe=i(f),of=n(f,"H2",{class:!0});var UVe=s(of);L5=n(UVe,"A",{id:!0,class:!0,href:!0});var sSt=s(L5);sEe=n(sSt,"SPAN",{});var lSt=s(sEe);T(Rx.$$.fragment,lSt),lSt.forEach(t),sSt.forEach(t),Djr=i(UVe),lEe=n(UVe,"SPAN",{});var iSt=s(lEe);Gjr=r(iSt,"FlaxAutoModelForSequenceClassification"),iSt.forEach(t),UVe.forEach(t),GGe=i(f),br=n(f,"DIV",{class:!0});var ni=s(br);T(Px.$$.fragment,ni),Ojr=i(ni),rf=n(ni,"P",{});var ere=s(rf);Vjr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gZ=n(ere,"A",{href:!0});var dSt=s(gZ);Xjr=r(dSt,"from_pretrained()"),dSt.forEach(t),zjr=r(ere," class method or the "),hZ=n(ere,"A",{href:!0});var cSt=s(hZ);Wjr=r(cSt,"from_config()"),cSt.forEach(t),Qjr=r(ere,` class
method.`),ere.forEach(t),Hjr=i(ni),Bx=n(ni,"P",{});var JVe=s(Bx);Ujr=r(JVe,"This class cannot be instantiated directly using "),iEe=n(JVe,"CODE",{});var fSt=s(iEe);Jjr=r(fSt,"__init__()"),fSt.forEach(t),Yjr=r(JVe," (throws an error)."),JVe.forEach(t),Kjr=i(ni),Ut=n(ni,"DIV",{class:!0});var G0=s(Ut);T(Ix.$$.fragment,G0),Zjr=i(G0),dEe=n(G0,"P",{});var mSt=s(dEe);eDr=r(mSt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mSt.forEach(t),oDr=i(G0),tf=n(G0,"P",{});var ore=s(tf);rDr=r(ore,`Note:
Loading a model from its configuration file does `),cEe=n(ore,"STRONG",{});var gSt=s(cEe);tDr=r(gSt,"not"),gSt.forEach(t),aDr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(ore,"A",{href:!0});var hSt=s(pZ);nDr=r(hSt,"from_pretrained()"),hSt.forEach(t),sDr=r(ore," to load the model weights."),ore.forEach(t),lDr=i(G0),T(x5.$$.fragment,G0),G0.forEach(t),iDr=i(ni),Wr=n(ni,"DIV",{class:!0});var si=s(Wr);T(Nx.$$.fragment,si),dDr=i(si),fEe=n(si,"P",{});var pSt=s(fEe);cDr=r(pSt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pSt.forEach(t),fDr=i(si),Cn=n(si,"P",{});var O0=s(Cn);mDr=r(O0,"The model class to instantiate is selected based on the "),mEe=n(O0,"CODE",{});var uSt=s(mEe);gDr=r(uSt,"model_type"),uSt.forEach(t),hDr=r(O0,` property of the config object (either
passed as an argument or loaded from `),gEe=n(O0,"CODE",{});var _St=s(gEe);pDr=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),uDr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(O0,"CODE",{});var bSt=s(hEe);_Dr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),bDr=r(O0,":"),O0.forEach(t),vDr=i(si),ke=n(si,"UL",{});var je=s(ke);$5=n(je,"LI",{});var dje=s($5);pEe=n(dje,"STRONG",{});var vSt=s(pEe);FDr=r(vSt,"albert"),vSt.forEach(t),TDr=r(dje," \u2014 "),uZ=n(dje,"A",{href:!0});var FSt=s(uZ);MDr=r(FSt,"FlaxAlbertForSequenceClassification"),FSt.forEach(t),EDr=r(dje," (ALBERT model)"),dje.forEach(t),CDr=i(je),k5=n(je,"LI",{});var cje=s(k5);uEe=n(cje,"STRONG",{});var TSt=s(uEe);wDr=r(TSt,"bart"),TSt.forEach(t),ADr=r(cje," \u2014 "),_Z=n(cje,"A",{href:!0});var MSt=s(_Z);yDr=r(MSt,"FlaxBartForSequenceClassification"),MSt.forEach(t),LDr=r(cje," (BART model)"),cje.forEach(t),xDr=i(je),S5=n(je,"LI",{});var fje=s(S5);_Ee=n(fje,"STRONG",{});var ESt=s(_Ee);$Dr=r(ESt,"bert"),ESt.forEach(t),kDr=r(fje," \u2014 "),bZ=n(fje,"A",{href:!0});var CSt=s(bZ);SDr=r(CSt,"FlaxBertForSequenceClassification"),CSt.forEach(t),RDr=r(fje," (BERT model)"),fje.forEach(t),PDr=i(je),R5=n(je,"LI",{});var mje=s(R5);bEe=n(mje,"STRONG",{});var wSt=s(bEe);BDr=r(wSt,"big_bird"),wSt.forEach(t),IDr=r(mje," \u2014 "),vZ=n(mje,"A",{href:!0});var ASt=s(vZ);NDr=r(ASt,"FlaxBigBirdForSequenceClassification"),ASt.forEach(t),qDr=r(mje," (BigBird model)"),mje.forEach(t),jDr=i(je),P5=n(je,"LI",{});var gje=s(P5);vEe=n(gje,"STRONG",{});var ySt=s(vEe);DDr=r(ySt,"distilbert"),ySt.forEach(t),GDr=r(gje," \u2014 "),FZ=n(gje,"A",{href:!0});var LSt=s(FZ);ODr=r(LSt,"FlaxDistilBertForSequenceClassification"),LSt.forEach(t),VDr=r(gje," (DistilBERT model)"),gje.forEach(t),XDr=i(je),B5=n(je,"LI",{});var hje=s(B5);FEe=n(hje,"STRONG",{});var xSt=s(FEe);zDr=r(xSt,"electra"),xSt.forEach(t),WDr=r(hje," \u2014 "),TZ=n(hje,"A",{href:!0});var $St=s(TZ);QDr=r($St,"FlaxElectraForSequenceClassification"),$St.forEach(t),HDr=r(hje," (ELECTRA model)"),hje.forEach(t),UDr=i(je),I5=n(je,"LI",{});var pje=s(I5);TEe=n(pje,"STRONG",{});var kSt=s(TEe);JDr=r(kSt,"mbart"),kSt.forEach(t),YDr=r(pje," \u2014 "),MZ=n(pje,"A",{href:!0});var SSt=s(MZ);KDr=r(SSt,"FlaxMBartForSequenceClassification"),SSt.forEach(t),ZDr=r(pje," (mBART model)"),pje.forEach(t),eGr=i(je),N5=n(je,"LI",{});var uje=s(N5);MEe=n(uje,"STRONG",{});var RSt=s(MEe);oGr=r(RSt,"roberta"),RSt.forEach(t),rGr=r(uje," \u2014 "),EZ=n(uje,"A",{href:!0});var PSt=s(EZ);tGr=r(PSt,"FlaxRobertaForSequenceClassification"),PSt.forEach(t),aGr=r(uje," (RoBERTa model)"),uje.forEach(t),nGr=i(je),q5=n(je,"LI",{});var _je=s(q5);EEe=n(_je,"STRONG",{});var BSt=s(EEe);sGr=r(BSt,"roformer"),BSt.forEach(t),lGr=r(_je," \u2014 "),CZ=n(_je,"A",{href:!0});var ISt=s(CZ);iGr=r(ISt,"FlaxRoFormerForSequenceClassification"),ISt.forEach(t),dGr=r(_je," (RoFormer model)"),_je.forEach(t),cGr=i(je),j5=n(je,"LI",{});var bje=s(j5);CEe=n(bje,"STRONG",{});var NSt=s(CEe);fGr=r(NSt,"xlm-roberta"),NSt.forEach(t),mGr=r(bje," \u2014 "),wZ=n(bje,"A",{href:!0});var qSt=s(wZ);gGr=r(qSt,"FlaxXLMRobertaForSequenceClassification"),qSt.forEach(t),hGr=r(bje," (XLM-RoBERTa model)"),bje.forEach(t),je.forEach(t),pGr=i(si),T(D5.$$.fragment,si),si.forEach(t),ni.forEach(t),OGe=i(f),af=n(f,"H2",{class:!0});var YVe=s(af);G5=n(YVe,"A",{id:!0,class:!0,href:!0});var jSt=s(G5);wEe=n(jSt,"SPAN",{});var DSt=s(wEe);T(qx.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),uGr=i(YVe),AEe=n(YVe,"SPAN",{});var GSt=s(AEe);_Gr=r(GSt,"FlaxAutoModelForQuestionAnswering"),GSt.forEach(t),YVe.forEach(t),VGe=i(f),vr=n(f,"DIV",{class:!0});var li=s(vr);T(jx.$$.fragment,li),bGr=i(li),nf=n(li,"P",{});var rre=s(nf);vGr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AZ=n(rre,"A",{href:!0});var OSt=s(AZ);FGr=r(OSt,"from_pretrained()"),OSt.forEach(t),TGr=r(rre," class method or the "),yZ=n(rre,"A",{href:!0});var VSt=s(yZ);MGr=r(VSt,"from_config()"),VSt.forEach(t),EGr=r(rre,` class
method.`),rre.forEach(t),CGr=i(li),Dx=n(li,"P",{});var KVe=s(Dx);wGr=r(KVe,"This class cannot be instantiated directly using "),yEe=n(KVe,"CODE",{});var XSt=s(yEe);AGr=r(XSt,"__init__()"),XSt.forEach(t),yGr=r(KVe," (throws an error)."),KVe.forEach(t),LGr=i(li),Jt=n(li,"DIV",{class:!0});var V0=s(Jt);T(Gx.$$.fragment,V0),xGr=i(V0),LEe=n(V0,"P",{});var zSt=s(LEe);$Gr=r(zSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zSt.forEach(t),kGr=i(V0),sf=n(V0,"P",{});var tre=s(sf);SGr=r(tre,`Note:
Loading a model from its configuration file does `),xEe=n(tre,"STRONG",{});var WSt=s(xEe);RGr=r(WSt,"not"),WSt.forEach(t),PGr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(tre,"A",{href:!0});var QSt=s(LZ);BGr=r(QSt,"from_pretrained()"),QSt.forEach(t),IGr=r(tre," to load the model weights."),tre.forEach(t),NGr=i(V0),T(O5.$$.fragment,V0),V0.forEach(t),qGr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(Ox.$$.fragment,ii),jGr=i(ii),$Ee=n(ii,"P",{});var HSt=s($Ee);DGr=r(HSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HSt.forEach(t),GGr=i(ii),wn=n(ii,"P",{});var X0=s(wn);OGr=r(X0,"The model class to instantiate is selected based on the "),kEe=n(X0,"CODE",{});var USt=s(kEe);VGr=r(USt,"model_type"),USt.forEach(t),XGr=r(X0,` property of the config object (either
passed as an argument or loaded from `),SEe=n(X0,"CODE",{});var JSt=s(SEe);zGr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),WGr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(X0,"CODE",{});var YSt=s(REe);QGr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),HGr=r(X0,":"),X0.forEach(t),UGr=i(ii),Se=n(ii,"UL",{});var De=s(Se);V5=n(De,"LI",{});var vje=s(V5);PEe=n(vje,"STRONG",{});var KSt=s(PEe);JGr=r(KSt,"albert"),KSt.forEach(t),YGr=r(vje," \u2014 "),xZ=n(vje,"A",{href:!0});var ZSt=s(xZ);KGr=r(ZSt,"FlaxAlbertForQuestionAnswering"),ZSt.forEach(t),ZGr=r(vje," (ALBERT model)"),vje.forEach(t),eOr=i(De),X5=n(De,"LI",{});var Fje=s(X5);BEe=n(Fje,"STRONG",{});var eRt=s(BEe);oOr=r(eRt,"bart"),eRt.forEach(t),rOr=r(Fje," \u2014 "),$Z=n(Fje,"A",{href:!0});var oRt=s($Z);tOr=r(oRt,"FlaxBartForQuestionAnswering"),oRt.forEach(t),aOr=r(Fje," (BART model)"),Fje.forEach(t),nOr=i(De),z5=n(De,"LI",{});var Tje=s(z5);IEe=n(Tje,"STRONG",{});var rRt=s(IEe);sOr=r(rRt,"bert"),rRt.forEach(t),lOr=r(Tje," \u2014 "),kZ=n(Tje,"A",{href:!0});var tRt=s(kZ);iOr=r(tRt,"FlaxBertForQuestionAnswering"),tRt.forEach(t),dOr=r(Tje," (BERT model)"),Tje.forEach(t),cOr=i(De),W5=n(De,"LI",{});var Mje=s(W5);NEe=n(Mje,"STRONG",{});var aRt=s(NEe);fOr=r(aRt,"big_bird"),aRt.forEach(t),mOr=r(Mje," \u2014 "),SZ=n(Mje,"A",{href:!0});var nRt=s(SZ);gOr=r(nRt,"FlaxBigBirdForQuestionAnswering"),nRt.forEach(t),hOr=r(Mje," (BigBird model)"),Mje.forEach(t),pOr=i(De),Q5=n(De,"LI",{});var Eje=s(Q5);qEe=n(Eje,"STRONG",{});var sRt=s(qEe);uOr=r(sRt,"distilbert"),sRt.forEach(t),_Or=r(Eje," \u2014 "),RZ=n(Eje,"A",{href:!0});var lRt=s(RZ);bOr=r(lRt,"FlaxDistilBertForQuestionAnswering"),lRt.forEach(t),vOr=r(Eje," (DistilBERT model)"),Eje.forEach(t),FOr=i(De),H5=n(De,"LI",{});var Cje=s(H5);jEe=n(Cje,"STRONG",{});var iRt=s(jEe);TOr=r(iRt,"electra"),iRt.forEach(t),MOr=r(Cje," \u2014 "),PZ=n(Cje,"A",{href:!0});var dRt=s(PZ);EOr=r(dRt,"FlaxElectraForQuestionAnswering"),dRt.forEach(t),COr=r(Cje," (ELECTRA model)"),Cje.forEach(t),wOr=i(De),U5=n(De,"LI",{});var wje=s(U5);DEe=n(wje,"STRONG",{});var cRt=s(DEe);AOr=r(cRt,"mbart"),cRt.forEach(t),yOr=r(wje," \u2014 "),BZ=n(wje,"A",{href:!0});var fRt=s(BZ);LOr=r(fRt,"FlaxMBartForQuestionAnswering"),fRt.forEach(t),xOr=r(wje," (mBART model)"),wje.forEach(t),$Or=i(De),J5=n(De,"LI",{});var Aje=s(J5);GEe=n(Aje,"STRONG",{});var mRt=s(GEe);kOr=r(mRt,"roberta"),mRt.forEach(t),SOr=r(Aje," \u2014 "),IZ=n(Aje,"A",{href:!0});var gRt=s(IZ);ROr=r(gRt,"FlaxRobertaForQuestionAnswering"),gRt.forEach(t),POr=r(Aje," (RoBERTa model)"),Aje.forEach(t),BOr=i(De),Y5=n(De,"LI",{});var yje=s(Y5);OEe=n(yje,"STRONG",{});var hRt=s(OEe);IOr=r(hRt,"roformer"),hRt.forEach(t),NOr=r(yje," \u2014 "),NZ=n(yje,"A",{href:!0});var pRt=s(NZ);qOr=r(pRt,"FlaxRoFormerForQuestionAnswering"),pRt.forEach(t),jOr=r(yje," (RoFormer model)"),yje.forEach(t),DOr=i(De),K5=n(De,"LI",{});var Lje=s(K5);VEe=n(Lje,"STRONG",{});var uRt=s(VEe);GOr=r(uRt,"xlm-roberta"),uRt.forEach(t),OOr=r(Lje," \u2014 "),qZ=n(Lje,"A",{href:!0});var _Rt=s(qZ);VOr=r(_Rt,"FlaxXLMRobertaForQuestionAnswering"),_Rt.forEach(t),XOr=r(Lje," (XLM-RoBERTa model)"),Lje.forEach(t),De.forEach(t),zOr=i(ii),T(Z5.$$.fragment,ii),ii.forEach(t),li.forEach(t),XGe=i(f),lf=n(f,"H2",{class:!0});var ZVe=s(lf);e3=n(ZVe,"A",{id:!0,class:!0,href:!0});var bRt=s(e3);XEe=n(bRt,"SPAN",{});var vRt=s(XEe);T(Vx.$$.fragment,vRt),vRt.forEach(t),bRt.forEach(t),WOr=i(ZVe),zEe=n(ZVe,"SPAN",{});var FRt=s(zEe);QOr=r(FRt,"FlaxAutoModelForTokenClassification"),FRt.forEach(t),ZVe.forEach(t),zGe=i(f),Fr=n(f,"DIV",{class:!0});var di=s(Fr);T(Xx.$$.fragment,di),HOr=i(di),df=n(di,"P",{});var are=s(df);UOr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jZ=n(are,"A",{href:!0});var TRt=s(jZ);JOr=r(TRt,"from_pretrained()"),TRt.forEach(t),YOr=r(are," class method or the "),DZ=n(are,"A",{href:!0});var MRt=s(DZ);KOr=r(MRt,"from_config()"),MRt.forEach(t),ZOr=r(are,` class
method.`),are.forEach(t),eVr=i(di),zx=n(di,"P",{});var eXe=s(zx);oVr=r(eXe,"This class cannot be instantiated directly using "),WEe=n(eXe,"CODE",{});var ERt=s(WEe);rVr=r(ERt,"__init__()"),ERt.forEach(t),tVr=r(eXe," (throws an error)."),eXe.forEach(t),aVr=i(di),Yt=n(di,"DIV",{class:!0});var z0=s(Yt);T(Wx.$$.fragment,z0),nVr=i(z0),QEe=n(z0,"P",{});var CRt=s(QEe);sVr=r(CRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CRt.forEach(t),lVr=i(z0),cf=n(z0,"P",{});var nre=s(cf);iVr=r(nre,`Note:
Loading a model from its configuration file does `),HEe=n(nre,"STRONG",{});var wRt=s(HEe);dVr=r(wRt,"not"),wRt.forEach(t),cVr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(nre,"A",{href:!0});var ARt=s(GZ);fVr=r(ARt,"from_pretrained()"),ARt.forEach(t),mVr=r(nre," to load the model weights."),nre.forEach(t),gVr=i(z0),T(o3.$$.fragment,z0),z0.forEach(t),hVr=i(di),Hr=n(di,"DIV",{class:!0});var ci=s(Hr);T(Qx.$$.fragment,ci),pVr=i(ci),UEe=n(ci,"P",{});var yRt=s(UEe);uVr=r(yRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yRt.forEach(t),_Vr=i(ci),An=n(ci,"P",{});var W0=s(An);bVr=r(W0,"The model class to instantiate is selected based on the "),JEe=n(W0,"CODE",{});var LRt=s(JEe);vVr=r(LRt,"model_type"),LRt.forEach(t),FVr=r(W0,` property of the config object (either
passed as an argument or loaded from `),YEe=n(W0,"CODE",{});var xRt=s(YEe);TVr=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),MVr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(W0,"CODE",{});var $Rt=s(KEe);EVr=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),CVr=r(W0,":"),W0.forEach(t),wVr=i(ci),Oe=n(ci,"UL",{});var To=s(Oe);r3=n(To,"LI",{});var xje=s(r3);ZEe=n(xje,"STRONG",{});var kRt=s(ZEe);AVr=r(kRt,"albert"),kRt.forEach(t),yVr=r(xje," \u2014 "),OZ=n(xje,"A",{href:!0});var SRt=s(OZ);LVr=r(SRt,"FlaxAlbertForTokenClassification"),SRt.forEach(t),xVr=r(xje," (ALBERT model)"),xje.forEach(t),$Vr=i(To),t3=n(To,"LI",{});var $je=s(t3);eCe=n($je,"STRONG",{});var RRt=s(eCe);kVr=r(RRt,"bert"),RRt.forEach(t),SVr=r($je," \u2014 "),VZ=n($je,"A",{href:!0});var PRt=s(VZ);RVr=r(PRt,"FlaxBertForTokenClassification"),PRt.forEach(t),PVr=r($je," (BERT model)"),$je.forEach(t),BVr=i(To),a3=n(To,"LI",{});var kje=s(a3);oCe=n(kje,"STRONG",{});var BRt=s(oCe);IVr=r(BRt,"big_bird"),BRt.forEach(t),NVr=r(kje," \u2014 "),XZ=n(kje,"A",{href:!0});var IRt=s(XZ);qVr=r(IRt,"FlaxBigBirdForTokenClassification"),IRt.forEach(t),jVr=r(kje," (BigBird model)"),kje.forEach(t),DVr=i(To),n3=n(To,"LI",{});var Sje=s(n3);rCe=n(Sje,"STRONG",{});var NRt=s(rCe);GVr=r(NRt,"distilbert"),NRt.forEach(t),OVr=r(Sje," \u2014 "),zZ=n(Sje,"A",{href:!0});var qRt=s(zZ);VVr=r(qRt,"FlaxDistilBertForTokenClassification"),qRt.forEach(t),XVr=r(Sje," (DistilBERT model)"),Sje.forEach(t),zVr=i(To),s3=n(To,"LI",{});var Rje=s(s3);tCe=n(Rje,"STRONG",{});var jRt=s(tCe);WVr=r(jRt,"electra"),jRt.forEach(t),QVr=r(Rje," \u2014 "),WZ=n(Rje,"A",{href:!0});var DRt=s(WZ);HVr=r(DRt,"FlaxElectraForTokenClassification"),DRt.forEach(t),UVr=r(Rje," (ELECTRA model)"),Rje.forEach(t),JVr=i(To),l3=n(To,"LI",{});var Pje=s(l3);aCe=n(Pje,"STRONG",{});var GRt=s(aCe);YVr=r(GRt,"roberta"),GRt.forEach(t),KVr=r(Pje," \u2014 "),QZ=n(Pje,"A",{href:!0});var ORt=s(QZ);ZVr=r(ORt,"FlaxRobertaForTokenClassification"),ORt.forEach(t),eXr=r(Pje," (RoBERTa model)"),Pje.forEach(t),oXr=i(To),i3=n(To,"LI",{});var Bje=s(i3);nCe=n(Bje,"STRONG",{});var VRt=s(nCe);rXr=r(VRt,"roformer"),VRt.forEach(t),tXr=r(Bje," \u2014 "),HZ=n(Bje,"A",{href:!0});var XRt=s(HZ);aXr=r(XRt,"FlaxRoFormerForTokenClassification"),XRt.forEach(t),nXr=r(Bje," (RoFormer model)"),Bje.forEach(t),sXr=i(To),d3=n(To,"LI",{});var Ije=s(d3);sCe=n(Ije,"STRONG",{});var zRt=s(sCe);lXr=r(zRt,"xlm-roberta"),zRt.forEach(t),iXr=r(Ije," \u2014 "),UZ=n(Ije,"A",{href:!0});var WRt=s(UZ);dXr=r(WRt,"FlaxXLMRobertaForTokenClassification"),WRt.forEach(t),cXr=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),To.forEach(t),fXr=i(ci),T(c3.$$.fragment,ci),ci.forEach(t),di.forEach(t),WGe=i(f),ff=n(f,"H2",{class:!0});var oXe=s(ff);f3=n(oXe,"A",{id:!0,class:!0,href:!0});var QRt=s(f3);lCe=n(QRt,"SPAN",{});var HRt=s(lCe);T(Hx.$$.fragment,HRt),HRt.forEach(t),QRt.forEach(t),mXr=i(oXe),iCe=n(oXe,"SPAN",{});var URt=s(iCe);gXr=r(URt,"FlaxAutoModelForMultipleChoice"),URt.forEach(t),oXe.forEach(t),QGe=i(f),Tr=n(f,"DIV",{class:!0});var fi=s(Tr);T(Ux.$$.fragment,fi),hXr=i(fi),mf=n(fi,"P",{});var sre=s(mf);pXr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JZ=n(sre,"A",{href:!0});var JRt=s(JZ);uXr=r(JRt,"from_pretrained()"),JRt.forEach(t),_Xr=r(sre," class method or the "),YZ=n(sre,"A",{href:!0});var YRt=s(YZ);bXr=r(YRt,"from_config()"),YRt.forEach(t),vXr=r(sre,` class
method.`),sre.forEach(t),FXr=i(fi),Jx=n(fi,"P",{});var rXe=s(Jx);TXr=r(rXe,"This class cannot be instantiated directly using "),dCe=n(rXe,"CODE",{});var KRt=s(dCe);MXr=r(KRt,"__init__()"),KRt.forEach(t),EXr=r(rXe," (throws an error)."),rXe.forEach(t),CXr=i(fi),Kt=n(fi,"DIV",{class:!0});var Q0=s(Kt);T(Yx.$$.fragment,Q0),wXr=i(Q0),cCe=n(Q0,"P",{});var ZRt=s(cCe);AXr=r(ZRt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZRt.forEach(t),yXr=i(Q0),gf=n(Q0,"P",{});var lre=s(gf);LXr=r(lre,`Note:
Loading a model from its configuration file does `),fCe=n(lre,"STRONG",{});var ePt=s(fCe);xXr=r(ePt,"not"),ePt.forEach(t),$Xr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(lre,"A",{href:!0});var oPt=s(KZ);kXr=r(oPt,"from_pretrained()"),oPt.forEach(t),SXr=r(lre," to load the model weights."),lre.forEach(t),RXr=i(Q0),T(m3.$$.fragment,Q0),Q0.forEach(t),PXr=i(fi),Ur=n(fi,"DIV",{class:!0});var mi=s(Ur);T(Kx.$$.fragment,mi),BXr=i(mi),mCe=n(mi,"P",{});var rPt=s(mCe);IXr=r(rPt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rPt.forEach(t),NXr=i(mi),yn=n(mi,"P",{});var H0=s(yn);qXr=r(H0,"The model class to instantiate is selected based on the "),gCe=n(H0,"CODE",{});var tPt=s(gCe);jXr=r(tPt,"model_type"),tPt.forEach(t),DXr=r(H0,` property of the config object (either
passed as an argument or loaded from `),hCe=n(H0,"CODE",{});var aPt=s(hCe);GXr=r(aPt,"pretrained_model_name_or_path"),aPt.forEach(t),OXr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(H0,"CODE",{});var nPt=s(pCe);VXr=r(nPt,"pretrained_model_name_or_path"),nPt.forEach(t),XXr=r(H0,":"),H0.forEach(t),zXr=i(mi),Ve=n(mi,"UL",{});var Mo=s(Ve);g3=n(Mo,"LI",{});var Nje=s(g3);uCe=n(Nje,"STRONG",{});var sPt=s(uCe);WXr=r(sPt,"albert"),sPt.forEach(t),QXr=r(Nje," \u2014 "),ZZ=n(Nje,"A",{href:!0});var lPt=s(ZZ);HXr=r(lPt,"FlaxAlbertForMultipleChoice"),lPt.forEach(t),UXr=r(Nje," (ALBERT model)"),Nje.forEach(t),JXr=i(Mo),h3=n(Mo,"LI",{});var qje=s(h3);_Ce=n(qje,"STRONG",{});var iPt=s(_Ce);YXr=r(iPt,"bert"),iPt.forEach(t),KXr=r(qje," \u2014 "),eee=n(qje,"A",{href:!0});var dPt=s(eee);ZXr=r(dPt,"FlaxBertForMultipleChoice"),dPt.forEach(t),ezr=r(qje," (BERT model)"),qje.forEach(t),ozr=i(Mo),p3=n(Mo,"LI",{});var jje=s(p3);bCe=n(jje,"STRONG",{});var cPt=s(bCe);rzr=r(cPt,"big_bird"),cPt.forEach(t),tzr=r(jje," \u2014 "),oee=n(jje,"A",{href:!0});var fPt=s(oee);azr=r(fPt,"FlaxBigBirdForMultipleChoice"),fPt.forEach(t),nzr=r(jje," (BigBird model)"),jje.forEach(t),szr=i(Mo),u3=n(Mo,"LI",{});var Dje=s(u3);vCe=n(Dje,"STRONG",{});var mPt=s(vCe);lzr=r(mPt,"distilbert"),mPt.forEach(t),izr=r(Dje," \u2014 "),ree=n(Dje,"A",{href:!0});var gPt=s(ree);dzr=r(gPt,"FlaxDistilBertForMultipleChoice"),gPt.forEach(t),czr=r(Dje," (DistilBERT model)"),Dje.forEach(t),fzr=i(Mo),_3=n(Mo,"LI",{});var Gje=s(_3);FCe=n(Gje,"STRONG",{});var hPt=s(FCe);mzr=r(hPt,"electra"),hPt.forEach(t),gzr=r(Gje," \u2014 "),tee=n(Gje,"A",{href:!0});var pPt=s(tee);hzr=r(pPt,"FlaxElectraForMultipleChoice"),pPt.forEach(t),pzr=r(Gje," (ELECTRA model)"),Gje.forEach(t),uzr=i(Mo),b3=n(Mo,"LI",{});var Oje=s(b3);TCe=n(Oje,"STRONG",{});var uPt=s(TCe);_zr=r(uPt,"roberta"),uPt.forEach(t),bzr=r(Oje," \u2014 "),aee=n(Oje,"A",{href:!0});var _Pt=s(aee);vzr=r(_Pt,"FlaxRobertaForMultipleChoice"),_Pt.forEach(t),Fzr=r(Oje," (RoBERTa model)"),Oje.forEach(t),Tzr=i(Mo),v3=n(Mo,"LI",{});var Vje=s(v3);MCe=n(Vje,"STRONG",{});var bPt=s(MCe);Mzr=r(bPt,"roformer"),bPt.forEach(t),Ezr=r(Vje," \u2014 "),nee=n(Vje,"A",{href:!0});var vPt=s(nee);Czr=r(vPt,"FlaxRoFormerForMultipleChoice"),vPt.forEach(t),wzr=r(Vje," (RoFormer model)"),Vje.forEach(t),Azr=i(Mo),F3=n(Mo,"LI",{});var Xje=s(F3);ECe=n(Xje,"STRONG",{});var FPt=s(ECe);yzr=r(FPt,"xlm-roberta"),FPt.forEach(t),Lzr=r(Xje," \u2014 "),see=n(Xje,"A",{href:!0});var TPt=s(see);xzr=r(TPt,"FlaxXLMRobertaForMultipleChoice"),TPt.forEach(t),$zr=r(Xje," (XLM-RoBERTa model)"),Xje.forEach(t),Mo.forEach(t),kzr=i(mi),T(T3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),HGe=i(f),hf=n(f,"H2",{class:!0});var tXe=s(hf);M3=n(tXe,"A",{id:!0,class:!0,href:!0});var MPt=s(M3);CCe=n(MPt,"SPAN",{});var EPt=s(CCe);T(Zx.$$.fragment,EPt),EPt.forEach(t),MPt.forEach(t),Szr=i(tXe),wCe=n(tXe,"SPAN",{});var CPt=s(wCe);Rzr=r(CPt,"FlaxAutoModelForNextSentencePrediction"),CPt.forEach(t),tXe.forEach(t),UGe=i(f),Mr=n(f,"DIV",{class:!0});var gi=s(Mr);T(e$.$$.fragment,gi),Pzr=i(gi),pf=n(gi,"P",{});var ire=s(pf);Bzr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lee=n(ire,"A",{href:!0});var wPt=s(lee);Izr=r(wPt,"from_pretrained()"),wPt.forEach(t),Nzr=r(ire," class method or the "),iee=n(ire,"A",{href:!0});var APt=s(iee);qzr=r(APt,"from_config()"),APt.forEach(t),jzr=r(ire,` class
method.`),ire.forEach(t),Dzr=i(gi),o$=n(gi,"P",{});var aXe=s(o$);Gzr=r(aXe,"This class cannot be instantiated directly using "),ACe=n(aXe,"CODE",{});var yPt=s(ACe);Ozr=r(yPt,"__init__()"),yPt.forEach(t),Vzr=r(aXe," (throws an error)."),aXe.forEach(t),Xzr=i(gi),Zt=n(gi,"DIV",{class:!0});var U0=s(Zt);T(r$.$$.fragment,U0),zzr=i(U0),yCe=n(U0,"P",{});var LPt=s(yCe);Wzr=r(LPt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LPt.forEach(t),Qzr=i(U0),uf=n(U0,"P",{});var dre=s(uf);Hzr=r(dre,`Note:
Loading a model from its configuration file does `),LCe=n(dre,"STRONG",{});var xPt=s(LCe);Uzr=r(xPt,"not"),xPt.forEach(t),Jzr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(dre,"A",{href:!0});var $Pt=s(dee);Yzr=r($Pt,"from_pretrained()"),$Pt.forEach(t),Kzr=r(dre," to load the model weights."),dre.forEach(t),Zzr=i(U0),T(E3.$$.fragment,U0),U0.forEach(t),eWr=i(gi),Jr=n(gi,"DIV",{class:!0});var hi=s(Jr);T(t$.$$.fragment,hi),oWr=i(hi),xCe=n(hi,"P",{});var kPt=s(xCe);rWr=r(kPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kPt.forEach(t),tWr=i(hi),Ln=n(hi,"P",{});var J0=s(Ln);aWr=r(J0,"The model class to instantiate is selected based on the "),$Ce=n(J0,"CODE",{});var SPt=s($Ce);nWr=r(SPt,"model_type"),SPt.forEach(t),sWr=r(J0,` property of the config object (either
passed as an argument or loaded from `),kCe=n(J0,"CODE",{});var RPt=s(kCe);lWr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),iWr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(J0,"CODE",{});var PPt=s(SCe);dWr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),cWr=r(J0,":"),J0.forEach(t),fWr=i(hi),RCe=n(hi,"UL",{});var BPt=s(RCe);C3=n(BPt,"LI",{});var zje=s(C3);PCe=n(zje,"STRONG",{});var IPt=s(PCe);mWr=r(IPt,"bert"),IPt.forEach(t),gWr=r(zje," \u2014 "),cee=n(zje,"A",{href:!0});var NPt=s(cee);hWr=r(NPt,"FlaxBertForNextSentencePrediction"),NPt.forEach(t),pWr=r(zje," (BERT model)"),zje.forEach(t),BPt.forEach(t),uWr=i(hi),T(w3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),JGe=i(f),_f=n(f,"H2",{class:!0});var nXe=s(_f);A3=n(nXe,"A",{id:!0,class:!0,href:!0});var qPt=s(A3);BCe=n(qPt,"SPAN",{});var jPt=s(BCe);T(a$.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),_Wr=i(nXe),ICe=n(nXe,"SPAN",{});var DPt=s(ICe);bWr=r(DPt,"FlaxAutoModelForImageClassification"),DPt.forEach(t),nXe.forEach(t),YGe=i(f),Er=n(f,"DIV",{class:!0});var pi=s(Er);T(n$.$$.fragment,pi),vWr=i(pi),bf=n(pi,"P",{});var cre=s(bf);FWr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fee=n(cre,"A",{href:!0});var GPt=s(fee);TWr=r(GPt,"from_pretrained()"),GPt.forEach(t),MWr=r(cre," class method or the "),mee=n(cre,"A",{href:!0});var OPt=s(mee);EWr=r(OPt,"from_config()"),OPt.forEach(t),CWr=r(cre,` class
method.`),cre.forEach(t),wWr=i(pi),s$=n(pi,"P",{});var sXe=s(s$);AWr=r(sXe,"This class cannot be instantiated directly using "),NCe=n(sXe,"CODE",{});var VPt=s(NCe);yWr=r(VPt,"__init__()"),VPt.forEach(t),LWr=r(sXe," (throws an error)."),sXe.forEach(t),xWr=i(pi),ea=n(pi,"DIV",{class:!0});var Y0=s(ea);T(l$.$$.fragment,Y0),$Wr=i(Y0),qCe=n(Y0,"P",{});var XPt=s(qCe);kWr=r(XPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XPt.forEach(t),SWr=i(Y0),vf=n(Y0,"P",{});var fre=s(vf);RWr=r(fre,`Note:
Loading a model from its configuration file does `),jCe=n(fre,"STRONG",{});var zPt=s(jCe);PWr=r(zPt,"not"),zPt.forEach(t),BWr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(fre,"A",{href:!0});var WPt=s(gee);IWr=r(WPt,"from_pretrained()"),WPt.forEach(t),NWr=r(fre," to load the model weights."),fre.forEach(t),qWr=i(Y0),T(y3.$$.fragment,Y0),Y0.forEach(t),jWr=i(pi),Yr=n(pi,"DIV",{class:!0});var ui=s(Yr);T(i$.$$.fragment,ui),DWr=i(ui),DCe=n(ui,"P",{});var QPt=s(DCe);GWr=r(QPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QPt.forEach(t),OWr=i(ui),xn=n(ui,"P",{});var K0=s(xn);VWr=r(K0,"The model class to instantiate is selected based on the "),GCe=n(K0,"CODE",{});var HPt=s(GCe);XWr=r(HPt,"model_type"),HPt.forEach(t),zWr=r(K0,` property of the config object (either
passed as an argument or loaded from `),OCe=n(K0,"CODE",{});var UPt=s(OCe);WWr=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),QWr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n(K0,"CODE",{});var JPt=s(VCe);HWr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),UWr=r(K0,":"),K0.forEach(t),JWr=i(ui),d$=n(ui,"UL",{});var lXe=s(d$);L3=n(lXe,"LI",{});var Wje=s(L3);XCe=n(Wje,"STRONG",{});var YPt=s(XCe);YWr=r(YPt,"beit"),YPt.forEach(t),KWr=r(Wje," \u2014 "),hee=n(Wje,"A",{href:!0});var KPt=s(hee);ZWr=r(KPt,"FlaxBeitForImageClassification"),KPt.forEach(t),eQr=r(Wje," (BEiT model)"),Wje.forEach(t),oQr=i(lXe),x3=n(lXe,"LI",{});var Qje=s(x3);zCe=n(Qje,"STRONG",{});var ZPt=s(zCe);rQr=r(ZPt,"vit"),ZPt.forEach(t),tQr=r(Qje," \u2014 "),pee=n(Qje,"A",{href:!0});var eBt=s(pee);aQr=r(eBt,"FlaxViTForImageClassification"),eBt.forEach(t),nQr=r(Qje," (ViT model)"),Qje.forEach(t),lXe.forEach(t),sQr=i(ui),T($3.$$.fragment,ui),ui.forEach(t),pi.forEach(t),KGe=i(f),Ff=n(f,"H2",{class:!0});var iXe=s(Ff);k3=n(iXe,"A",{id:!0,class:!0,href:!0});var oBt=s(k3);WCe=n(oBt,"SPAN",{});var rBt=s(WCe);T(c$.$$.fragment,rBt),rBt.forEach(t),oBt.forEach(t),lQr=i(iXe),QCe=n(iXe,"SPAN",{});var tBt=s(QCe);iQr=r(tBt,"FlaxAutoModelForVision2Seq"),tBt.forEach(t),iXe.forEach(t),ZGe=i(f),Cr=n(f,"DIV",{class:!0});var _i=s(Cr);T(f$.$$.fragment,_i),dQr=i(_i),Tf=n(_i,"P",{});var mre=s(Tf);cQr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uee=n(mre,"A",{href:!0});var aBt=s(uee);fQr=r(aBt,"from_pretrained()"),aBt.forEach(t),mQr=r(mre," class method or the "),_ee=n(mre,"A",{href:!0});var nBt=s(_ee);gQr=r(nBt,"from_config()"),nBt.forEach(t),hQr=r(mre,` class
method.`),mre.forEach(t),pQr=i(_i),m$=n(_i,"P",{});var dXe=s(m$);uQr=r(dXe,"This class cannot be instantiated directly using "),HCe=n(dXe,"CODE",{});var sBt=s(HCe);_Qr=r(sBt,"__init__()"),sBt.forEach(t),bQr=r(dXe," (throws an error)."),dXe.forEach(t),vQr=i(_i),oa=n(_i,"DIV",{class:!0});var Z0=s(oa);T(g$.$$.fragment,Z0),FQr=i(Z0),UCe=n(Z0,"P",{});var lBt=s(UCe);TQr=r(lBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lBt.forEach(t),MQr=i(Z0),Mf=n(Z0,"P",{});var gre=s(Mf);EQr=r(gre,`Note:
Loading a model from its configuration file does `),JCe=n(gre,"STRONG",{});var iBt=s(JCe);CQr=r(iBt,"not"),iBt.forEach(t),wQr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(gre,"A",{href:!0});var dBt=s(bee);AQr=r(dBt,"from_pretrained()"),dBt.forEach(t),yQr=r(gre," to load the model weights."),gre.forEach(t),LQr=i(Z0),T(S3.$$.fragment,Z0),Z0.forEach(t),xQr=i(_i),Kr=n(_i,"DIV",{class:!0});var bi=s(Kr);T(h$.$$.fragment,bi),$Qr=i(bi),YCe=n(bi,"P",{});var cBt=s(YCe);kQr=r(cBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cBt.forEach(t),SQr=i(bi),$n=n(bi,"P",{});var eA=s($n);RQr=r(eA,"The model class to instantiate is selected based on the "),KCe=n(eA,"CODE",{});var fBt=s(KCe);PQr=r(fBt,"model_type"),fBt.forEach(t),BQr=r(eA,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(eA,"CODE",{});var mBt=s(ZCe);IQr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),NQr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(eA,"CODE",{});var gBt=s(e5e);qQr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),jQr=r(eA,":"),eA.forEach(t),DQr=i(bi),o5e=n(bi,"UL",{});var hBt=s(o5e);R3=n(hBt,"LI",{});var Hje=s(R3);r5e=n(Hje,"STRONG",{});var pBt=s(r5e);GQr=r(pBt,"vision-encoder-decoder"),pBt.forEach(t),OQr=r(Hje," \u2014 "),vee=n(Hje,"A",{href:!0});var uBt=s(vee);VQr=r(uBt,"FlaxVisionEncoderDecoderModel"),uBt.forEach(t),XQr=r(Hje," (Vision Encoder decoder model)"),Hje.forEach(t),hBt.forEach(t),zQr=i(bi),T(P3.$$.fragment,bi),bi.forEach(t),_i.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(MNt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer"),c(wi,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c($f,"id","extending-the-auto-classes"),c($f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($f,"href","#extending-the-auto-classes"),c(Ai,"class","relative group"),c(Sf,"id","transformers.AutoConfig"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Ik,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Nk,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig"),c(qk,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig"),c(jk,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig"),c(Dk,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig"),c(Gk,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Ok,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Vk,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Xk,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(zk,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Wk,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig"),c(Qk,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig"),c(Hk,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig"),c(Uk,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig"),c(Jk,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig"),c(Yk,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig"),c(Kk,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig"),c(Zk,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(eS,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(oS,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(rS,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig"),c(tS,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(aS,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(nS,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig"),c(sS,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig"),c(lS,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig"),c(iS,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig"),c(dS,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig"),c(cS,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig"),c(fS,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(mS,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig"),c(gS,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig"),c(hS,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig"),c(pS,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig"),c(uS,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig"),c(_S,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig"),c(bS,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config"),c(vS,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(FS,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(TS,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig"),c(MS,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig"),c(ES,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig"),c(CS,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(wS,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(AS,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(yS,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(LS,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig"),c(xS,"href","/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitConfig"),c($S,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig"),c(kS,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig"),c(SS,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig"),c(RS,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config"),c(PS,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig"),c(BS,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(IS,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig"),c(NS,"href","/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTConfig"),c(qS,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(jS,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(DS,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig"),c(GS,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config"),c(OS,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(VS,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(XS,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig"),c(zS,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig"),c(WS,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig"),c(QS,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig"),c(HS,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(US,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(JS,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(YS,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagConfig"),c(KS,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmConfig"),c(ZS,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig"),c(eR,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig"),c(oR,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig"),c(rR,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig"),c(tR,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig"),c(aR,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig"),c(nR,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig"),c(sR,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig"),c(lR,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig"),c(iR,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig"),c(dR,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(cR,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(fR,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(mR,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig"),c(gR,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(hR,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig"),c(pR,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config"),c(uR,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig"),c(_R,"href","/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(bR,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(vR,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig"),c(FR,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(TR,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(MR,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig"),c(ER,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig"),c(CR,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(wR,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(AR,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(yR,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig"),c(LR,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(xR,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c($R,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(kR,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig"),c(SR,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig"),c(RR,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig"),c(PR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(BR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(IR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(NR,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig"),c(qR,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig"),c(jR,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoTokenizer"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoTokenizer"),c(xi,"class","relative group"),c(DR,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(GR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(OR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizer"),c(XR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizerFast"),c(zR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizer"),c(WR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(QR,"href","/docs/transformers/pr_17286/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(HR,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(UR,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(YR,"href","/docs/transformers/pr_17286/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(KR,"href","/docs/transformers/pr_17286/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(ZR,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(eP,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(oP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tP,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(aP,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(nP,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(sP,"href","/docs/transformers/pr_17286/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(lP,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizer"),c(iP,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineTokenizer"),c(cP,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizer"),c(fP,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(mP,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(gP,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizer"),c(pP,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(uP,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(_P,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vP,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizer"),c(FP,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(TP,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(MP,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(EP,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(CP,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(AP,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(yP,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizer"),c(LP,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(xP,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c($P,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizer"),c(kP,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(SP,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(RP,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizer"),c(PP,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(BP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jP,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(DP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(OP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizer"),c(VP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(HP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(UP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(JP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(YP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(KP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(ZP,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(eB,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(oB,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizer"),c(rB,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizerFast"),c(tB,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizer"),c(aB,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(nB,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeTokenizer"),c(sB,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(lB,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(dB,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianTokenizer"),c(cB,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizer"),c(fB,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(mB,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(gB,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(hB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(pB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17286/en/model_doc/mluke#transformers.MLukeTokenizer"),c(_B,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(bB,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(FB,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Tokenizer"),c(MB,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5TokenizerFast"),c(EB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(CB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(AB,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(yB,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xB,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($B,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(kB,"href","/docs/transformers/pr_17286/en/model_doc/phobert#transformers.PhobertTokenizer"),c(SB,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartTokenizer"),c(RB,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(PB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(BB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagTokenizer"),c(NB,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizer"),c(qB,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jB,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizer"),c(DB,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(GB,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizer"),c(OB,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(XB,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(HB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(UB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(JB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(YB,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizer"),c(KB,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(eI,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(oI,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Tokenizer"),c(rI,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5TokenizerFast"),c(tI,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasTokenizer"),c(aI,"href","/docs/transformers/pr_17286/en/model_doc/tapex#transformers.TapexTokenizer"),c(nI,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(sI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(lI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(dI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(cI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(gI,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizer"),c(hI,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(pI,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMTokenizer"),c(uI,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_I,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(bI,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(vI,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FI,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TI,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(MI,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(EI,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(CI,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vh,"id","transformers.AutoFeatureExtractor"),c(vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vh,"href","#transformers.AutoFeatureExtractor"),c($i,"class","relative group"),c(wI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(AI,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($I,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kI,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(II,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DI,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(GI,"href","/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(zI,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(WI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tN,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(op,"id","transformers.AutoProcessor"),c(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(op,"href","#transformers.AutoProcessor"),c(ki,"class","relative group"),c(aN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nN,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPProcessor"),c(sN,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(lN,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(iN,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(dN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fN,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mN,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gN,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uN,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltProcessor"),c(_N,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(bN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"id","transformers.AutoModel"),c(Mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mp,"href","#transformers.AutoModel"),c(Ri,"class","relative group"),c(TN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CN,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel"),c(wN,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel"),c(AN,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel"),c(yN,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c(LN,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(xN,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel"),c($N,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(kN,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(SN,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(RN,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel"),c(PN,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel"),c(BN,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel"),c(IN,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel"),c(NN,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel"),c(qN,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel"),c(jN,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtModel"),c(DN,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(GN,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ON,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(VN,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel"),c(XN,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zN,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(WN,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel"),c(QN,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel"),c(HN,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel"),c(UN,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(JN,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel"),c(YN,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel"),c(KN,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel"),c(ZN,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel"),c(eq,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel"),c(oq,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel"),c(rq,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel"),c(tq,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel"),c(aq,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel"),c(nq,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model"),c(sq,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(lq,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(iq,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel"),c(dq,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel"),c(cq,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel"),c(fq,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(mq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(gq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(hq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(pq,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel"),c(uq,"href","/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitModel"),c(_q,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel"),c(bq,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel"),c(vq,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel"),c(Fq,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model"),c(Tq,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel"),c(Mq,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Eq,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel"),c(Cq,"href","/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTModel"),c(wq,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Aq,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel"),c(yq,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel"),c(Lq,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model"),c(xq,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel"),c($q,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(kq,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel"),c(Sq,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel"),c(Rq,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel"),c(Pq,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel"),c(Bq,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Iq,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Nq,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qq,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel"),c(jq,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel"),c(Dq,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel"),c(Gq,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel"),c(Oq,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(Vq,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel"),c(Xq,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel"),c(zq,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel"),c(Wq,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel"),c(Qq,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel"),c(Hq,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Uq,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel"),c(Jq,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Yq,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel"),c(Kq,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model"),c(Zq,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel"),c(ej,"href","/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(oj,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(rj,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel"),c(tj,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(aj,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel"),c(nj,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel"),c(sj,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(lj,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ij,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel"),c(dj,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(cj,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(fj,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(mj,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel"),c(gj,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel"),c(hj,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel"),c(pj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(uj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(_j,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(bj,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel"),c(vj,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel"),c(Fj,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T_,"id","transformers.AutoModelForPreTraining"),c(T_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T_,"href","#transformers.AutoModelForPreTraining"),c(Ii,"class","relative group"),c(Tj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ej,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cj,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining"),c(wj,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining"),c(yj,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Lj,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($j,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(kj,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Bj,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Nj,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining"),c(qj,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Dj,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Gj,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(zj,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Wj,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Qj,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Uj,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(Jj,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Kj,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oD,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rD,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(tD,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(aD,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(nD,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(sD,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(lD,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(iD,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(cD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(fD,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g2,"id","transformers.AutoModelForCausalLM"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForCausalLM"),c(ji,"class","relative group"),c(mD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pD,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM"),c(uD,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel"),c(_D,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(bD,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(vD,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(FD,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(TD,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(MD,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ED,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CD,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(wD,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM"),c(AD,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yD,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(LD,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(xD,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM"),c($D,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM"),c(kD,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM"),c(SD,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(RD,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PD,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM"),c(BD,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(ID,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(ND,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(qD,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(jD,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(DD,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(GD,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(OD,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(VD,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(XD,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zD,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(WD,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(QD,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(UD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(JD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(YD,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForMaskedLM"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForMaskedLM"),c(Oi,"class","relative group"),c(KD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(rG,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM"),c(aG,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(nG,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(lG,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iG,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dG,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cG,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(mG,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gG,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(hG,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(pG,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_G,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bG,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeForMaskedLM"),c(vG,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EG,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(CG,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(wG,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(yG,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(LG,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xG,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c($G,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SG,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RG,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(PG,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BG,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForSeq2SeqLM"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForSeq2SeqLM"),c(zi,"class","relative group"),c(IG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(VG,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(XG,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QG,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel"),c(HG,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UG,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JG,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(YG,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(KG,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(ZG,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForSequenceClassification"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForSequenceClassification"),c(Hi,"class","relative group"),c(oO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c($O,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForMultipleChoice"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForMultipleChoice"),c(Yi,"class","relative group"),c(YO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hV,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pV,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(uV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(_V,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bV,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(vV,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(FV,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(TV,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(MV,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(EV,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(CV,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(wV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(AV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForNextSentencePrediction"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ed,"class","relative group"),c(xV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(RV,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(PV,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(BV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(IV,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForTokenClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForTokenClassification"),c(td,"class","relative group"),c(NV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(GV,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(VV,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(XV,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification"),c(zV,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(QV,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(HV,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(UV,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(JV,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(YV,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(KV,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(eX,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(oX,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(rX,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(tX,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(aX,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(nX,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sX,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lX,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iX,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dX,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cX,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fX,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mX,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gX,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hX,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pX,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(uX,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_X,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bX,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vX,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForQuestionAnswering"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForQuestionAnswering"),c(sd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(NX,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nz,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iz,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForTableQuestionAnswering"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(dd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForImageClassification"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForImageClassification"),c(md,"class","relative group"),c(gz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification"),c(_z,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bz,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Fz,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Tz,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Mz,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Ez,"href","/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitForImageClassification"),c(Cz,"href","/docs/transformers/pr_17286/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wz,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Az,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yz,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Lz,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(xz,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification"),c($z,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(kz,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Sz,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification"),c(Rz,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification"),c(Pz,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForVision2Seq"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForVision2Seq"),c(pd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(bd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.AutoModelForAudioClassification"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.AutoModelForAudioClassification"),c(Td,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioFrameClassification"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Cd,"class","relative group"),c(oW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(nW,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(sW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(lW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(iW,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForCTC"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gW,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC"),c(hW,"href","/docs/transformers/pr_17286/en/model_doc/mctct#transformers.MCTCTForCTC"),c(pW,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC"),c(uW,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_W,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bW,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(TW,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(MW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AW,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForAudioXVector"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForAudioXVector"),c(Rd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kW,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(PW,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForMaskedImageModeling"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Id,"class","relative group"),c(BW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jW,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(DW,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.AutoModelForObjectDetection"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.AutoModelForObjectDetection"),c(Dd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zW,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.AutoModelForImageSegmentation"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.AutoModelForImageSegmentation"),c(Vd,"class","relative group"),c(WW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.AutoModelForSemanticSegmentation"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Wd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eQ,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oQ,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rQ,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForInstanceSegmentation"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ud,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.TFAutoModel"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.TFAutoModel"),c(Kd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel"),c(fQ,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel"),c(mQ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel"),c(gQ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hQ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pQ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel"),c(uQ,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel"),c(_Q,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel"),c(bQ,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel"),c(vQ,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FQ,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TQ,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel"),c(MQ,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EQ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CQ,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wQ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel"),c(AQ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yQ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel"),c(LQ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xQ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model"),c($Q,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel"),c(kQ,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel"),c(SQ,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(RQ,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel"),c(PQ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel"),c(BQ,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel"),c(IQ,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel"),c(NQ,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel"),c(qQ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(jQ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel"),c(DQ,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model"),c(GQ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(OQ,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.TFOPTModel"),c(VQ,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel"),c(XQ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel"),c(zQ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel"),c(WQ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel"),c(QQ,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(HQ,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel"),c(UQ,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model"),c(JQ,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel"),c(YQ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(KQ,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel"),c(ZQ,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(eH,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(oH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel"),c(rH,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tH,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.TFAutoModelForPreTraining"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.TFAutoModelForPreTraining"),c(oc,"class","relative group"),c(aH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iH,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dH,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cH,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mH,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hH,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(uH,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_H,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bH,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vH,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(FH,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TH,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MH,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EH,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wH,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AH,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LH,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xH,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z8,"id","transformers.TFAutoModelForCausalLM"),c(z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z8,"href","#transformers.TFAutoModelForCausalLM"),c(ac,"class","relative group"),c($H,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PH,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(BH,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IH,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NH,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qH,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jH,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(DH,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GH,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OH,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VH,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForImageClassification"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForImageClassification"),c(lc,"class","relative group"),c(WH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JH,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YH,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(KH,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForMaskedLM"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForMaskedLM"),c(cc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(tU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(aU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(sU,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(lU,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iU,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(cU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(mU,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(hU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pU,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uU,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(_U,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bU,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(vU,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FU,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TU,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(gc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LU,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(xU,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c($U,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel"),c(kU,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForSequenceClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForSequenceClassification"),c(uc,"class","relative group"),c(BU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(XU,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(zU,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(HU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(UU,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(JU,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(YU,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sJ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForMultipleChoice"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForMultipleChoice"),c(vc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(hJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pJ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uJ,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(_J,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(bJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(vJ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FJ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(TJ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MJ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EJ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(CJ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Mc,"class","relative group"),c($J,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PJ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(wc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForTokenClassification"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XJ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HJ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JJ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YJ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KJ,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZJ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eY,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oY,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rY,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nY,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lY,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(FY,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(xY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForVision2Seq"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Nc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModel"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModel"),c(Dc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel"),c(VY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel"),c(XY,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel"),c(zY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel"),c(WY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QY,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(HY,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(UY,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel"),c(JY,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(YY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel"),c(KY,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ZY,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(eK,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(oK,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel"),c(rK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tK,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aK,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.FlaxOPTModel"),c(nK,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(sK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(lK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(iK,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model"),c(dK,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(cK,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel"),c(fK,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(mK,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(gK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForCausalLM"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Vc,"class","relative group"),c(hK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(bK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(vK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(FK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(TK,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(MK,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(EK,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(CK,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(wK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(AK,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForPreTraining"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(yK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(kK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(RK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(PK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(BK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(jK,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(GK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForMaskedLM"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(WK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(HK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(UK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(JK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(YK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(KK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ZK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(eZ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nZ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(lZ,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(iZ,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(dZ,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(fZ,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(gZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(_Z,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(bZ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(vZ,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(FZ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(TZ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(MZ,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(EZ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(CZ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(wZ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(AZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForTokenClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(jZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(VZ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(XZ,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(zZ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(WZ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(QZ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(HZ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(UZ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(eee,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(oee,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ree,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(tee,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(aee,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(nee,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(see,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(lee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.FlaxAutoModelForImageClassification"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.FlaxAutoModelForImageClassification"),c(_f,"class","relative group"),c(fee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(pee,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForVision2Seq"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ff,"class","relative group"),c(uee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,vi),b(f,Af,_),b(f,at,_),e(at,Fi),e(at,Ti),e(Ti,oA),e(at,yf),b(f,Ge,_),b(f,We,_),e(We,Mi),e(We,Sn),e(Sn,rA),e(We,Rn),e(We,Pn),e(Pn,tA),e(We,Ei),e(We,Bn),e(Bn,aA),e(We,Ci),b(f,Lf,_),M(La,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,$k),e(Ae,wi),e(wi,kk),e(Ae,Sk),b(f,Co,_),b(f,xa,_),e(xa,Rk),e(xa,xf),e(xf,Pk),e(xa,cXe),b(f,Uje,_),b(f,Ai,_),e(Ai,$f),e($f,hre),M(nA,hre,null),e(Ai,fXe),e(Ai,pre),e(pre,mXe),b(f,Jje,_),b(f,In,_),e(In,gXe),e(In,ure),e(ure,hXe),e(In,pXe),e(In,_re),e(_re,uXe),e(In,_Xe),b(f,Yje,_),M(sA,f,_),b(f,Kje,_),b(f,Bk,_),e(Bk,bXe),b(f,Zje,_),M(kf,f,_),b(f,eDe,_),b(f,yi,_),e(yi,Sf),e(Sf,bre),M(lA,bre,null),e(yi,vXe),e(yi,vre),e(vre,FXe),b(f,oDe,_),b(f,wo,_),M(iA,wo,null),e(wo,TXe),e(wo,dA),e(dA,MXe),e(dA,Ik),e(Ik,EXe),e(dA,CXe),e(wo,wXe),e(wo,cA),e(cA,AXe),e(cA,Fre),e(Fre,yXe),e(cA,LXe),e(wo,xXe),e(wo,wr),M(fA,wr,null),e(wr,$Xe),e(wr,Tre),e(Tre,kXe),e(wr,SXe),e(wr,Li),e(Li,RXe),e(Li,Mre),e(Mre,PXe),e(Li,BXe),e(Li,Ere),e(Ere,IXe),e(Li,NXe),e(wr,qXe),e(wr,A),e(A,Rf),e(Rf,Cre),e(Cre,jXe),e(Rf,DXe),e(Rf,Nk),e(Nk,GXe),e(Rf,OXe),e(A,VXe),e(A,Pf),e(Pf,wre),e(wre,XXe),e(Pf,zXe),e(Pf,qk),e(qk,WXe),e(Pf,QXe),e(A,HXe),e(A,Bf),e(Bf,Are),e(Are,UXe),e(Bf,JXe),e(Bf,jk),e(jk,YXe),e(Bf,KXe),e(A,ZXe),e(A,If),e(If,yre),e(yre,eze),e(If,oze),e(If,Dk),e(Dk,rze),e(If,tze),e(A,aze),e(A,Nf),e(Nf,Lre),e(Lre,nze),e(Nf,sze),e(Nf,Gk),e(Gk,lze),e(Nf,ize),e(A,dze),e(A,qf),e(qf,xre),e(xre,cze),e(qf,fze),e(qf,Ok),e(Ok,mze),e(qf,gze),e(A,hze),e(A,jf),e(jf,$re),e($re,pze),e(jf,uze),e(jf,Vk),e(Vk,_ze),e(jf,bze),e(A,vze),e(A,Df),e(Df,kre),e(kre,Fze),e(Df,Tze),e(Df,Xk),e(Xk,Mze),e(Df,Eze),e(A,Cze),e(A,Gf),e(Gf,Sre),e(Sre,wze),e(Gf,Aze),e(Gf,zk),e(zk,yze),e(Gf,Lze),e(A,xze),e(A,Of),e(Of,Rre),e(Rre,$ze),e(Of,kze),e(Of,Wk),e(Wk,Sze),e(Of,Rze),e(A,Pze),e(A,Vf),e(Vf,Pre),e(Pre,Bze),e(Vf,Ize),e(Vf,Qk),e(Qk,Nze),e(Vf,qze),e(A,jze),e(A,Xf),e(Xf,Bre),e(Bre,Dze),e(Xf,Gze),e(Xf,Hk),e(Hk,Oze),e(Xf,Vze),e(A,Xze),e(A,zf),e(zf,Ire),e(Ire,zze),e(zf,Wze),e(zf,Uk),e(Uk,Qze),e(zf,Hze),e(A,Uze),e(A,Wf),e(Wf,Nre),e(Nre,Jze),e(Wf,Yze),e(Wf,Jk),e(Jk,Kze),e(Wf,Zze),e(A,eWe),e(A,Qf),e(Qf,qre),e(qre,oWe),e(Qf,rWe),e(Qf,Yk),e(Yk,tWe),e(Qf,aWe),e(A,nWe),e(A,Hf),e(Hf,jre),e(jre,sWe),e(Hf,lWe),e(Hf,Kk),e(Kk,iWe),e(Hf,dWe),e(A,cWe),e(A,Uf),e(Uf,Dre),e(Dre,fWe),e(Uf,mWe),e(Uf,Zk),e(Zk,gWe),e(Uf,hWe),e(A,pWe),e(A,Jf),e(Jf,Gre),e(Gre,uWe),e(Jf,_We),e(Jf,eS),e(eS,bWe),e(Jf,vWe),e(A,FWe),e(A,Yf),e(Yf,Ore),e(Ore,TWe),e(Yf,MWe),e(Yf,oS),e(oS,EWe),e(Yf,CWe),e(A,wWe),e(A,Kf),e(Kf,Vre),e(Vre,AWe),e(Kf,yWe),e(Kf,rS),e(rS,LWe),e(Kf,xWe),e(A,$We),e(A,Zf),e(Zf,Xre),e(Xre,kWe),e(Zf,SWe),e(Zf,tS),e(tS,RWe),e(Zf,PWe),e(A,BWe),e(A,em),e(em,zre),e(zre,IWe),e(em,NWe),e(em,aS),e(aS,qWe),e(em,jWe),e(A,DWe),e(A,om),e(om,Wre),e(Wre,GWe),e(om,OWe),e(om,nS),e(nS,VWe),e(om,XWe),e(A,zWe),e(A,rm),e(rm,Qre),e(Qre,WWe),e(rm,QWe),e(rm,sS),e(sS,HWe),e(rm,UWe),e(A,JWe),e(A,tm),e(tm,Hre),e(Hre,YWe),e(tm,KWe),e(tm,lS),e(lS,ZWe),e(tm,eQe),e(A,oQe),e(A,am),e(am,Ure),e(Ure,rQe),e(am,tQe),e(am,iS),e(iS,aQe),e(am,nQe),e(A,sQe),e(A,nm),e(nm,Jre),e(Jre,lQe),e(nm,iQe),e(nm,dS),e(dS,dQe),e(nm,cQe),e(A,fQe),e(A,sm),e(sm,Yre),e(Yre,mQe),e(sm,gQe),e(sm,cS),e(cS,hQe),e(sm,pQe),e(A,uQe),e(A,lm),e(lm,Kre),e(Kre,_Qe),e(lm,bQe),e(lm,fS),e(fS,vQe),e(lm,FQe),e(A,TQe),e(A,im),e(im,Zre),e(Zre,MQe),e(im,EQe),e(im,mS),e(mS,CQe),e(im,wQe),e(A,AQe),e(A,dm),e(dm,ete),e(ete,yQe),e(dm,LQe),e(dm,gS),e(gS,xQe),e(dm,$Qe),e(A,kQe),e(A,cm),e(cm,ote),e(ote,SQe),e(cm,RQe),e(cm,hS),e(hS,PQe),e(cm,BQe),e(A,IQe),e(A,fm),e(fm,rte),e(rte,NQe),e(fm,qQe),e(fm,pS),e(pS,jQe),e(fm,DQe),e(A,GQe),e(A,mm),e(mm,tte),e(tte,OQe),e(mm,VQe),e(mm,uS),e(uS,XQe),e(mm,zQe),e(A,WQe),e(A,gm),e(gm,ate),e(ate,QQe),e(gm,HQe),e(gm,_S),e(_S,UQe),e(gm,JQe),e(A,YQe),e(A,hm),e(hm,nte),e(nte,KQe),e(hm,ZQe),e(hm,bS),e(bS,eHe),e(hm,oHe),e(A,rHe),e(A,pm),e(pm,ste),e(ste,tHe),e(pm,aHe),e(pm,vS),e(vS,nHe),e(pm,sHe),e(A,lHe),e(A,um),e(um,lte),e(lte,iHe),e(um,dHe),e(um,FS),e(FS,cHe),e(um,fHe),e(A,mHe),e(A,_m),e(_m,ite),e(ite,gHe),e(_m,hHe),e(_m,TS),e(TS,pHe),e(_m,uHe),e(A,_He),e(A,bm),e(bm,dte),e(dte,bHe),e(bm,vHe),e(bm,MS),e(MS,FHe),e(bm,THe),e(A,MHe),e(A,vm),e(vm,cte),e(cte,EHe),e(vm,CHe),e(vm,ES),e(ES,wHe),e(vm,AHe),e(A,yHe),e(A,Fm),e(Fm,fte),e(fte,LHe),e(Fm,xHe),e(Fm,CS),e(CS,$He),e(Fm,kHe),e(A,SHe),e(A,Tm),e(Tm,mte),e(mte,RHe),e(Tm,PHe),e(Tm,wS),e(wS,BHe),e(Tm,IHe),e(A,NHe),e(A,Mm),e(Mm,gte),e(gte,qHe),e(Mm,jHe),e(Mm,AS),e(AS,DHe),e(Mm,GHe),e(A,OHe),e(A,Em),e(Em,hte),e(hte,VHe),e(Em,XHe),e(Em,yS),e(yS,zHe),e(Em,WHe),e(A,QHe),e(A,Cm),e(Cm,pte),e(pte,HHe),e(Cm,UHe),e(Cm,LS),e(LS,JHe),e(Cm,YHe),e(A,KHe),e(A,wm),e(wm,ute),e(ute,ZHe),e(wm,eUe),e(wm,xS),e(xS,oUe),e(wm,rUe),e(A,tUe),e(A,Am),e(Am,_te),e(_te,aUe),e(Am,nUe),e(Am,$S),e($S,sUe),e(Am,lUe),e(A,iUe),e(A,ym),e(ym,bte),e(bte,dUe),e(ym,cUe),e(ym,kS),e(kS,fUe),e(ym,mUe),e(A,gUe),e(A,Lm),e(Lm,vte),e(vte,hUe),e(Lm,pUe),e(Lm,SS),e(SS,uUe),e(Lm,_Ue),e(A,bUe),e(A,xm),e(xm,Fte),e(Fte,vUe),e(xm,FUe),e(xm,RS),e(RS,TUe),e(xm,MUe),e(A,EUe),e(A,$m),e($m,Tte),e(Tte,CUe),e($m,wUe),e($m,PS),e(PS,AUe),e($m,yUe),e(A,LUe),e(A,km),e(km,Mte),e(Mte,xUe),e(km,$Ue),e(km,BS),e(BS,kUe),e(km,SUe),e(A,RUe),e(A,Sm),e(Sm,Ete),e(Ete,PUe),e(Sm,BUe),e(Sm,IS),e(IS,IUe),e(Sm,NUe),e(A,qUe),e(A,Rm),e(Rm,Cte),e(Cte,jUe),e(Rm,DUe),e(Rm,NS),e(NS,GUe),e(Rm,OUe),e(A,VUe),e(A,Pm),e(Pm,wte),e(wte,XUe),e(Pm,zUe),e(Pm,qS),e(qS,WUe),e(Pm,QUe),e(A,HUe),e(A,Bm),e(Bm,Ate),e(Ate,UUe),e(Bm,JUe),e(Bm,jS),e(jS,YUe),e(Bm,KUe),e(A,ZUe),e(A,Im),e(Im,yte),e(yte,eJe),e(Im,oJe),e(Im,DS),e(DS,rJe),e(Im,tJe),e(A,aJe),e(A,Nm),e(Nm,Lte),e(Lte,nJe),e(Nm,sJe),e(Nm,GS),e(GS,lJe),e(Nm,iJe),e(A,dJe),e(A,qm),e(qm,xte),e(xte,cJe),e(qm,fJe),e(qm,OS),e(OS,mJe),e(qm,gJe),e(A,hJe),e(A,jm),e(jm,$te),e($te,pJe),e(jm,uJe),e(jm,VS),e(VS,_Je),e(jm,bJe),e(A,vJe),e(A,Dm),e(Dm,kte),e(kte,FJe),e(Dm,TJe),e(Dm,XS),e(XS,MJe),e(Dm,EJe),e(A,CJe),e(A,Gm),e(Gm,Ste),e(Ste,wJe),e(Gm,AJe),e(Gm,zS),e(zS,yJe),e(Gm,LJe),e(A,xJe),e(A,Om),e(Om,Rte),e(Rte,$Je),e(Om,kJe),e(Om,WS),e(WS,SJe),e(Om,RJe),e(A,PJe),e(A,Vm),e(Vm,Pte),e(Pte,BJe),e(Vm,IJe),e(Vm,QS),e(QS,NJe),e(Vm,qJe),e(A,jJe),e(A,Xm),e(Xm,Bte),e(Bte,DJe),e(Xm,GJe),e(Xm,HS),e(HS,OJe),e(Xm,VJe),e(A,XJe),e(A,zm),e(zm,Ite),e(Ite,zJe),e(zm,WJe),e(zm,US),e(US,QJe),e(zm,HJe),e(A,UJe),e(A,Wm),e(Wm,Nte),e(Nte,JJe),e(Wm,YJe),e(Wm,JS),e(JS,KJe),e(Wm,ZJe),e(A,eYe),e(A,Qm),e(Qm,qte),e(qte,oYe),e(Qm,rYe),e(Qm,YS),e(YS,tYe),e(Qm,aYe),e(A,nYe),e(A,Hm),e(Hm,jte),e(jte,sYe),e(Hm,lYe),e(Hm,KS),e(KS,iYe),e(Hm,dYe),e(A,cYe),e(A,Um),e(Um,Dte),e(Dte,fYe),e(Um,mYe),e(Um,ZS),e(ZS,gYe),e(Um,hYe),e(A,pYe),e(A,Jm),e(Jm,Gte),e(Gte,uYe),e(Jm,_Ye),e(Jm,eR),e(eR,bYe),e(Jm,vYe),e(A,FYe),e(A,Ym),e(Ym,Ote),e(Ote,TYe),e(Ym,MYe),e(Ym,oR),e(oR,EYe),e(Ym,CYe),e(A,wYe),e(A,Km),e(Km,Vte),e(Vte,AYe),e(Km,yYe),e(Km,rR),e(rR,LYe),e(Km,xYe),e(A,$Ye),e(A,Zm),e(Zm,Xte),e(Xte,kYe),e(Zm,SYe),e(Zm,tR),e(tR,RYe),e(Zm,PYe),e(A,BYe),e(A,eg),e(eg,zte),e(zte,IYe),e(eg,NYe),e(eg,aR),e(aR,qYe),e(eg,jYe),e(A,DYe),e(A,og),e(og,Wte),e(Wte,GYe),e(og,OYe),e(og,nR),e(nR,VYe),e(og,XYe),e(A,zYe),e(A,rg),e(rg,Qte),e(Qte,WYe),e(rg,QYe),e(rg,sR),e(sR,HYe),e(rg,UYe),e(A,JYe),e(A,tg),e(tg,Hte),e(Hte,YYe),e(tg,KYe),e(tg,lR),e(lR,ZYe),e(tg,eKe),e(A,oKe),e(A,ag),e(ag,Ute),e(Ute,rKe),e(ag,tKe),e(ag,iR),e(iR,aKe),e(ag,nKe),e(A,sKe),e(A,ng),e(ng,Jte),e(Jte,lKe),e(ng,iKe),e(ng,dR),e(dR,dKe),e(ng,cKe),e(A,fKe),e(A,sg),e(sg,Yte),e(Yte,mKe),e(sg,gKe),e(sg,cR),e(cR,hKe),e(sg,pKe),e(A,uKe),e(A,lg),e(lg,Kte),e(Kte,_Ke),e(lg,bKe),e(lg,fR),e(fR,vKe),e(lg,FKe),e(A,TKe),e(A,ig),e(ig,Zte),e(Zte,MKe),e(ig,EKe),e(ig,mR),e(mR,CKe),e(ig,wKe),e(A,AKe),e(A,dg),e(dg,eae),e(eae,yKe),e(dg,LKe),e(dg,gR),e(gR,xKe),e(dg,$Ke),e(A,kKe),e(A,cg),e(cg,oae),e(oae,SKe),e(cg,RKe),e(cg,hR),e(hR,PKe),e(cg,BKe),e(A,IKe),e(A,fg),e(fg,rae),e(rae,NKe),e(fg,qKe),e(fg,pR),e(pR,jKe),e(fg,DKe),e(A,GKe),e(A,mg),e(mg,tae),e(tae,OKe),e(mg,VKe),e(mg,uR),e(uR,XKe),e(mg,zKe),e(A,WKe),e(A,gg),e(gg,aae),e(aae,QKe),e(gg,HKe),e(gg,_R),e(_R,UKe),e(gg,JKe),e(A,YKe),e(A,hg),e(hg,nae),e(nae,KKe),e(hg,ZKe),e(hg,bR),e(bR,eZe),e(hg,oZe),e(A,rZe),e(A,pg),e(pg,sae),e(sae,tZe),e(pg,aZe),e(pg,vR),e(vR,nZe),e(pg,sZe),e(A,lZe),e(A,ug),e(ug,lae),e(lae,iZe),e(ug,dZe),e(ug,FR),e(FR,cZe),e(ug,fZe),e(A,mZe),e(A,_g),e(_g,iae),e(iae,gZe),e(_g,hZe),e(_g,TR),e(TR,pZe),e(_g,uZe),e(A,_Ze),e(A,bg),e(bg,dae),e(dae,bZe),e(bg,vZe),e(bg,MR),e(MR,FZe),e(bg,TZe),e(A,MZe),e(A,vg),e(vg,cae),e(cae,EZe),e(vg,CZe),e(vg,ER),e(ER,wZe),e(vg,AZe),e(A,yZe),e(A,Fg),e(Fg,fae),e(fae,LZe),e(Fg,xZe),e(Fg,CR),e(CR,$Ze),e(Fg,kZe),e(A,SZe),e(A,Tg),e(Tg,mae),e(mae,RZe),e(Tg,PZe),e(Tg,wR),e(wR,BZe),e(Tg,IZe),e(A,NZe),e(A,Mg),e(Mg,gae),e(gae,qZe),e(Mg,jZe),e(Mg,AR),e(AR,DZe),e(Mg,GZe),e(A,OZe),e(A,Eg),e(Eg,hae),e(hae,VZe),e(Eg,XZe),e(Eg,yR),e(yR,zZe),e(Eg,WZe),e(A,QZe),e(A,Cg),e(Cg,pae),e(pae,HZe),e(Cg,UZe),e(Cg,LR),e(LR,JZe),e(Cg,YZe),e(A,KZe),e(A,wg),e(wg,uae),e(uae,ZZe),e(wg,eeo),e(wg,xR),e(xR,oeo),e(wg,reo),e(A,teo),e(A,Ag),e(Ag,_ae),e(_ae,aeo),e(Ag,neo),e(Ag,$R),e($R,seo),e(Ag,leo),e(A,ieo),e(A,yg),e(yg,bae),e(bae,deo),e(yg,ceo),e(yg,kR),e(kR,feo),e(yg,meo),e(A,geo),e(A,Lg),e(Lg,vae),e(vae,heo),e(Lg,peo),e(Lg,SR),e(SR,ueo),e(Lg,_eo),e(A,beo),e(A,xg),e(xg,Fae),e(Fae,veo),e(xg,Feo),e(xg,RR),e(RR,Teo),e(xg,Meo),e(A,Eeo),e(A,$g),e($g,Tae),e(Tae,Ceo),e($g,weo),e($g,PR),e(PR,Aeo),e($g,yeo),e(A,Leo),e(A,kg),e(kg,Mae),e(Mae,xeo),e(kg,$eo),e(kg,BR),e(BR,keo),e(kg,Seo),e(A,Reo),e(A,Sg),e(Sg,Eae),e(Eae,Peo),e(Sg,Beo),e(Sg,IR),e(IR,Ieo),e(Sg,Neo),e(A,qeo),e(A,Rg),e(Rg,Cae),e(Cae,jeo),e(Rg,Deo),e(Rg,NR),e(NR,Geo),e(Rg,Oeo),e(A,Veo),e(A,Pg),e(Pg,wae),e(wae,Xeo),e(Pg,zeo),e(Pg,qR),e(qR,Weo),e(Pg,Qeo),e(A,Heo),e(A,Bg),e(Bg,Aae),e(Aae,Ueo),e(Bg,Jeo),e(Bg,jR),e(jR,Yeo),e(Bg,Keo),e(wr,Zeo),M(Ig,wr,null),e(wo,eoo),e(wo,Ng),M(mA,Ng,null),e(Ng,ooo),e(Ng,yae),e(yae,roo),b(f,rDe,_),b(f,xi,_),e(xi,qg),e(qg,Lae),M(gA,Lae,null),e(xi,too),e(xi,xae),e(xae,aoo),b(f,tDe,_),b(f,Ao,_),M(hA,Ao,null),e(Ao,noo),e(Ao,pA),e(pA,soo),e(pA,DR),e(DR,loo),e(pA,ioo),e(Ao,doo),e(Ao,uA),e(uA,coo),e(uA,$ae),e($ae,foo),e(uA,moo),e(Ao,goo),e(Ao,Ar),M(_A,Ar,null),e(Ar,hoo),e(Ar,kae),e(kae,poo),e(Ar,uoo),e(Ar,$a),e($a,_oo),e($a,Sae),e(Sae,boo),e($a,voo),e($a,Rae),e(Rae,Foo),e($a,Too),e($a,Pae),e(Pae,Moo),e($a,Eoo),e(Ar,Coo),e(Ar,k),e(k,Nn),e(Nn,Bae),e(Bae,woo),e(Nn,Aoo),e(Nn,GR),e(GR,yoo),e(Nn,Loo),e(Nn,OR),e(OR,xoo),e(Nn,$oo),e(k,koo),e(k,qn),e(qn,Iae),e(Iae,Soo),e(qn,Roo),e(qn,VR),e(VR,Poo),e(qn,Boo),e(qn,XR),e(XR,Ioo),e(qn,Noo),e(k,qoo),e(k,jn),e(jn,Nae),e(Nae,joo),e(jn,Doo),e(jn,zR),e(zR,Goo),e(jn,Ooo),e(jn,WR),e(WR,Voo),e(jn,Xoo),e(k,zoo),e(k,jg),e(jg,qae),e(qae,Woo),e(jg,Qoo),e(jg,QR),e(QR,Hoo),e(jg,Uoo),e(k,Joo),e(k,Dn),e(Dn,jae),e(jae,Yoo),e(Dn,Koo),e(Dn,HR),e(HR,Zoo),e(Dn,ero),e(Dn,UR),e(UR,oro),e(Dn,rro),e(k,tro),e(k,Dg),e(Dg,Dae),e(Dae,aro),e(Dg,nro),e(Dg,JR),e(JR,sro),e(Dg,lro),e(k,iro),e(k,Gg),e(Gg,Gae),e(Gae,dro),e(Gg,cro),e(Gg,YR),e(YR,fro),e(Gg,mro),e(k,gro),e(k,Og),e(Og,Oae),e(Oae,hro),e(Og,pro),e(Og,KR),e(KR,uro),e(Og,_ro),e(k,bro),e(k,Gn),e(Gn,Vae),e(Vae,vro),e(Gn,Fro),e(Gn,ZR),e(ZR,Tro),e(Gn,Mro),e(Gn,eP),e(eP,Ero),e(Gn,Cro),e(k,wro),e(k,On),e(On,Xae),e(Xae,Aro),e(On,yro),e(On,oP),e(oP,Lro),e(On,xro),e(On,rP),e(rP,$ro),e(On,kro),e(k,Sro),e(k,Vn),e(Vn,zae),e(zae,Rro),e(Vn,Pro),e(Vn,tP),e(tP,Bro),e(Vn,Iro),e(Vn,aP),e(aP,Nro),e(Vn,qro),e(k,jro),e(k,Vg),e(Vg,Wae),e(Wae,Dro),e(Vg,Gro),e(Vg,nP),e(nP,Oro),e(Vg,Vro),e(k,Xro),e(k,Xg),e(Xg,Qae),e(Qae,zro),e(Xg,Wro),e(Xg,sP),e(sP,Qro),e(Xg,Hro),e(k,Uro),e(k,Xn),e(Xn,Hae),e(Hae,Jro),e(Xn,Yro),e(Xn,lP),e(lP,Kro),e(Xn,Zro),e(Xn,iP),e(iP,eto),e(Xn,oto),e(k,rto),e(k,zg),e(zg,Uae),e(Uae,tto),e(zg,ato),e(zg,dP),e(dP,nto),e(zg,sto),e(k,lto),e(k,zn),e(zn,Jae),e(Jae,ito),e(zn,dto),e(zn,cP),e(cP,cto),e(zn,fto),e(zn,fP),e(fP,mto),e(zn,gto),e(k,hto),e(k,Wn),e(Wn,Yae),e(Yae,pto),e(Wn,uto),e(Wn,mP),e(mP,_to),e(Wn,bto),e(Wn,gP),e(gP,vto),e(Wn,Fto),e(k,Tto),e(k,Qn),e(Qn,Kae),e(Kae,Mto),e(Qn,Eto),e(Qn,hP),e(hP,Cto),e(Qn,wto),e(Qn,pP),e(pP,Ato),e(Qn,yto),e(k,Lto),e(k,Wg),e(Wg,Zae),e(Zae,xto),e(Wg,$to),e(Wg,uP),e(uP,kto),e(Wg,Sto),e(k,Rto),e(k,Hn),e(Hn,ene),e(ene,Pto),e(Hn,Bto),e(Hn,_P),e(_P,Ito),e(Hn,Nto),e(Hn,bP),e(bP,qto),e(Hn,jto),e(k,Dto),e(k,Un),e(Un,one),e(one,Gto),e(Un,Oto),e(Un,vP),e(vP,Vto),e(Un,Xto),e(Un,FP),e(FP,zto),e(Un,Wto),e(k,Qto),e(k,Jn),e(Jn,rne),e(rne,Hto),e(Jn,Uto),e(Jn,TP),e(TP,Jto),e(Jn,Yto),e(Jn,MP),e(MP,Kto),e(Jn,Zto),e(k,eao),e(k,Yn),e(Yn,tne),e(tne,oao),e(Yn,rao),e(Yn,EP),e(EP,tao),e(Yn,aao),e(Yn,CP),e(CP,nao),e(Yn,sao),e(k,lao),e(k,Kn),e(Kn,ane),e(ane,iao),e(Kn,dao),e(Kn,wP),e(wP,cao),e(Kn,fao),e(Kn,AP),e(AP,mao),e(Kn,gao),e(k,hao),e(k,Zn),e(Zn,nne),e(nne,pao),e(Zn,uao),e(Zn,yP),e(yP,_ao),e(Zn,bao),e(Zn,LP),e(LP,vao),e(Zn,Fao),e(k,Tao),e(k,Qg),e(Qg,sne),e(sne,Mao),e(Qg,Eao),e(Qg,xP),e(xP,Cao),e(Qg,wao),e(k,Aao),e(k,es),e(es,lne),e(lne,yao),e(es,Lao),e(es,$P),e($P,xao),e(es,$ao),e(es,kP),e(kP,kao),e(es,Sao),e(k,Rao),e(k,Hg),e(Hg,ine),e(ine,Pao),e(Hg,Bao),e(Hg,SP),e(SP,Iao),e(Hg,Nao),e(k,qao),e(k,os),e(os,dne),e(dne,jao),e(os,Dao),e(os,RP),e(RP,Gao),e(os,Oao),e(os,PP),e(PP,Vao),e(os,Xao),e(k,zao),e(k,rs),e(rs,cne),e(cne,Wao),e(rs,Qao),e(rs,BP),e(BP,Hao),e(rs,Uao),e(rs,IP),e(IP,Jao),e(rs,Yao),e(k,Kao),e(k,ts),e(ts,fne),e(fne,Zao),e(ts,eno),e(ts,NP),e(NP,ono),e(ts,rno),e(ts,qP),e(qP,tno),e(ts,ano),e(k,nno),e(k,Ug),e(Ug,mne),e(mne,sno),e(Ug,lno),e(Ug,jP),e(jP,ino),e(Ug,dno),e(k,cno),e(k,as),e(as,gne),e(gne,fno),e(as,mno),e(as,DP),e(DP,gno),e(as,hno),e(as,GP),e(GP,pno),e(as,uno),e(k,_no),e(k,ns),e(ns,hne),e(hne,bno),e(ns,vno),e(ns,OP),e(OP,Fno),e(ns,Tno),e(ns,VP),e(VP,Mno),e(ns,Eno),e(k,Cno),e(k,Jg),e(Jg,pne),e(pne,wno),e(Jg,Ano),e(Jg,XP),e(XP,yno),e(Jg,Lno),e(k,xno),e(k,ss),e(ss,une),e(une,$no),e(ss,kno),e(ss,zP),e(zP,Sno),e(ss,Rno),e(ss,WP),e(WP,Pno),e(ss,Bno),e(k,Ino),e(k,ls),e(ls,_ne),e(_ne,Nno),e(ls,qno),e(ls,QP),e(QP,jno),e(ls,Dno),e(ls,HP),e(HP,Gno),e(ls,Ono),e(k,Vno),e(k,is),e(is,bne),e(bne,Xno),e(is,zno),e(is,UP),e(UP,Wno),e(is,Qno),e(is,JP),e(JP,Hno),e(is,Uno),e(k,Jno),e(k,ds),e(ds,vne),e(vne,Yno),e(ds,Kno),e(ds,YP),e(YP,Zno),e(ds,eso),e(ds,KP),e(KP,oso),e(ds,rso),e(k,tso),e(k,cs),e(cs,Fne),e(Fne,aso),e(cs,nso),e(cs,ZP),e(ZP,sso),e(cs,lso),e(cs,eB),e(eB,iso),e(cs,dso),e(k,cso),e(k,fs),e(fs,Tne),e(Tne,fso),e(fs,mso),e(fs,oB),e(oB,gso),e(fs,hso),e(fs,rB),e(rB,pso),e(fs,uso),e(k,_so),e(k,ms),e(ms,Mne),e(Mne,bso),e(ms,vso),e(ms,tB),e(tB,Fso),e(ms,Tso),e(ms,aB),e(aB,Mso),e(ms,Eso),e(k,Cso),e(k,Yg),e(Yg,Ene),e(Ene,wso),e(Yg,Aso),e(Yg,nB),e(nB,yso),e(Yg,Lso),e(k,xso),e(k,gs),e(gs,Cne),e(Cne,$so),e(gs,kso),e(gs,sB),e(sB,Sso),e(gs,Rso),e(gs,lB),e(lB,Pso),e(gs,Bso),e(k,Iso),e(k,Kg),e(Kg,wne),e(wne,Nso),e(Kg,qso),e(Kg,iB),e(iB,jso),e(Kg,Dso),e(k,Gso),e(k,Zg),e(Zg,Ane),e(Ane,Oso),e(Zg,Vso),e(Zg,dB),e(dB,Xso),e(Zg,zso),e(k,Wso),e(k,hs),e(hs,yne),e(yne,Qso),e(hs,Hso),e(hs,cB),e(cB,Uso),e(hs,Jso),e(hs,fB),e(fB,Yso),e(hs,Kso),e(k,Zso),e(k,ps),e(ps,Lne),e(Lne,elo),e(ps,olo),e(ps,mB),e(mB,rlo),e(ps,tlo),e(ps,gB),e(gB,alo),e(ps,nlo),e(k,slo),e(k,us),e(us,xne),e(xne,llo),e(us,ilo),e(us,hB),e(hB,dlo),e(us,clo),e(us,pB),e(pB,flo),e(us,mlo),e(k,glo),e(k,eh),e(eh,$ne),e($ne,hlo),e(eh,plo),e(eh,uB),e(uB,ulo),e(eh,_lo),e(k,blo),e(k,_s),e(_s,kne),e(kne,vlo),e(_s,Flo),e(_s,_B),e(_B,Tlo),e(_s,Mlo),e(_s,bB),e(bB,Elo),e(_s,Clo),e(k,wlo),e(k,bs),e(bs,Sne),e(Sne,Alo),e(bs,ylo),e(bs,vB),e(vB,Llo),e(bs,xlo),e(bs,FB),e(FB,$lo),e(bs,klo),e(k,Slo),e(k,vs),e(vs,Rne),e(Rne,Rlo),e(vs,Plo),e(vs,TB),e(TB,Blo),e(vs,Ilo),e(vs,MB),e(MB,Nlo),e(vs,qlo),e(k,jlo),e(k,Fs),e(Fs,Pne),e(Pne,Dlo),e(Fs,Glo),e(Fs,EB),e(EB,Olo),e(Fs,Vlo),e(Fs,CB),e(CB,Xlo),e(Fs,zlo),e(k,Wlo),e(k,Ts),e(Ts,Bne),e(Bne,Qlo),e(Ts,Hlo),e(Ts,wB),e(wB,Ulo),e(Ts,Jlo),e(Ts,AB),e(AB,Ylo),e(Ts,Klo),e(k,Zlo),e(k,oh),e(oh,Ine),e(Ine,eio),e(oh,oio),e(oh,yB),e(yB,rio),e(oh,tio),e(k,aio),e(k,Ms),e(Ms,Nne),e(Nne,nio),e(Ms,sio),e(Ms,LB),e(LB,lio),e(Ms,iio),e(Ms,xB),e(xB,dio),e(Ms,cio),e(k,fio),e(k,rh),e(rh,qne),e(qne,mio),e(rh,gio),e(rh,$B),e($B,hio),e(rh,pio),e(k,uio),e(k,th),e(th,jne),e(jne,_io),e(th,bio),e(th,kB),e(kB,vio),e(th,Fio),e(k,Tio),e(k,ah),e(ah,Dne),e(Dne,Mio),e(ah,Eio),e(ah,SB),e(SB,Cio),e(ah,wio),e(k,Aio),e(k,nh),e(nh,Gne),e(Gne,yio),e(nh,Lio),e(nh,RB),e(RB,xio),e(nh,$io),e(k,kio),e(k,Es),e(Es,One),e(One,Sio),e(Es,Rio),e(Es,PB),e(PB,Pio),e(Es,Bio),e(Es,BB),e(BB,Iio),e(Es,Nio),e(k,qio),e(k,sh),e(sh,Vne),e(Vne,jio),e(sh,Dio),e(sh,IB),e(IB,Gio),e(sh,Oio),e(k,Vio),e(k,Cs),e(Cs,Xne),e(Xne,Xio),e(Cs,zio),e(Cs,NB),e(NB,Wio),e(Cs,Qio),e(Cs,qB),e(qB,Hio),e(Cs,Uio),e(k,Jio),e(k,ws),e(ws,zne),e(zne,Yio),e(ws,Kio),e(ws,jB),e(jB,Zio),e(ws,edo),e(ws,DB),e(DB,odo),e(ws,rdo),e(k,tdo),e(k,As),e(As,Wne),e(Wne,ado),e(As,ndo),e(As,GB),e(GB,sdo),e(As,ldo),e(As,OB),e(OB,ido),e(As,ddo),e(k,cdo),e(k,ys),e(ys,Qne),e(Qne,fdo),e(ys,mdo),e(ys,VB),e(VB,gdo),e(ys,hdo),e(ys,XB),e(XB,pdo),e(ys,udo),e(k,_do),e(k,Ls),e(Ls,Hne),e(Hne,bdo),e(Ls,vdo),e(Ls,zB),e(zB,Fdo),e(Ls,Tdo),e(Ls,WB),e(WB,Mdo),e(Ls,Edo),e(k,Cdo),e(k,xs),e(xs,Une),e(Une,wdo),e(xs,Ado),e(xs,QB),e(QB,ydo),e(xs,Ldo),e(xs,HB),e(HB,xdo),e(xs,$do),e(k,kdo),e(k,lh),e(lh,Jne),e(Jne,Sdo),e(lh,Rdo),e(lh,UB),e(UB,Pdo),e(lh,Bdo),e(k,Ido),e(k,ih),e(ih,Yne),e(Yne,Ndo),e(ih,qdo),e(ih,JB),e(JB,jdo),e(ih,Ddo),e(k,Gdo),e(k,$s),e($s,Kne),e(Kne,Odo),e($s,Vdo),e($s,YB),e(YB,Xdo),e($s,zdo),e($s,KB),e(KB,Wdo),e($s,Qdo),e(k,Hdo),e(k,ks),e(ks,Zne),e(Zne,Udo),e(ks,Jdo),e(ks,ZB),e(ZB,Ydo),e(ks,Kdo),e(ks,eI),e(eI,Zdo),e(ks,eco),e(k,oco),e(k,Ss),e(Ss,ese),e(ese,rco),e(Ss,tco),e(Ss,oI),e(oI,aco),e(Ss,nco),e(Ss,rI),e(rI,sco),e(Ss,lco),e(k,ico),e(k,dh),e(dh,ose),e(ose,dco),e(dh,cco),e(dh,tI),e(tI,fco),e(dh,mco),e(k,gco),e(k,ch),e(ch,rse),e(rse,hco),e(ch,pco),e(ch,aI),e(aI,uco),e(ch,_co),e(k,bco),e(k,fh),e(fh,tse),e(tse,vco),e(fh,Fco),e(fh,nI),e(nI,Tco),e(fh,Mco),e(k,Eco),e(k,Rs),e(Rs,ase),e(ase,Cco),e(Rs,wco),e(Rs,sI),e(sI,Aco),e(Rs,yco),e(Rs,lI),e(lI,Lco),e(Rs,xco),e(k,$co),e(k,Ps),e(Ps,nse),e(nse,kco),e(Ps,Sco),e(Ps,iI),e(iI,Rco),e(Ps,Pco),e(Ps,dI),e(dI,Bco),e(Ps,Ico),e(k,Nco),e(k,mh),e(mh,sse),e(sse,qco),e(mh,jco),e(mh,cI),e(cI,Dco),e(mh,Gco),e(k,Oco),e(k,gh),e(gh,lse),e(lse,Vco),e(gh,Xco),e(gh,fI),e(fI,zco),e(gh,Wco),e(k,Qco),e(k,hh),e(hh,ise),e(ise,Hco),e(hh,Uco),e(hh,mI),e(mI,Jco),e(hh,Yco),e(k,Kco),e(k,Bs),e(Bs,dse),e(dse,Zco),e(Bs,efo),e(Bs,gI),e(gI,ofo),e(Bs,rfo),e(Bs,hI),e(hI,tfo),e(Bs,afo),e(k,nfo),e(k,ph),e(ph,cse),e(cse,sfo),e(ph,lfo),e(ph,pI),e(pI,ifo),e(ph,dfo),e(k,cfo),e(k,uh),e(uh,fse),e(fse,ffo),e(uh,mfo),e(uh,uI),e(uI,gfo),e(uh,hfo),e(k,pfo),e(k,Is),e(Is,mse),e(mse,ufo),e(Is,_fo),e(Is,_I),e(_I,bfo),e(Is,vfo),e(Is,bI),e(bI,Ffo),e(Is,Tfo),e(k,Mfo),e(k,Ns),e(Ns,gse),e(gse,Efo),e(Ns,Cfo),e(Ns,vI),e(vI,wfo),e(Ns,Afo),e(Ns,FI),e(FI,yfo),e(Ns,Lfo),e(k,xfo),e(k,qs),e(qs,hse),e(hse,$fo),e(qs,kfo),e(qs,TI),e(TI,Sfo),e(qs,Rfo),e(qs,MI),e(MI,Pfo),e(qs,Bfo),e(k,Ifo),e(k,js),e(js,pse),e(pse,Nfo),e(js,qfo),e(js,EI),e(EI,jfo),e(js,Dfo),e(js,CI),e(CI,Gfo),e(js,Ofo),e(Ar,Vfo),M(_h,Ar,null),e(Ao,Xfo),e(Ao,bh),M(bA,bh,null),e(bh,zfo),e(bh,use),e(use,Wfo),b(f,aDe,_),b(f,$i,_),e($i,vh),e(vh,_se),M(vA,_se,null),e($i,Qfo),e($i,bse),e(bse,Hfo),b(f,nDe,_),b(f,yo,_),M(FA,yo,null),e(yo,Ufo),e(yo,TA),e(TA,Jfo),e(TA,wI),e(wI,Yfo),e(TA,Kfo),e(yo,Zfo),e(yo,MA),e(MA,emo),e(MA,vse),e(vse,omo),e(MA,rmo),e(yo,tmo),e(yo,He),M(EA,He,null),e(He,amo),e(He,Fse),e(Fse,nmo),e(He,smo),e(He,ka),e(ka,lmo),e(ka,Tse),e(Tse,imo),e(ka,dmo),e(ka,Mse),e(Mse,cmo),e(ka,fmo),e(ka,Ese),e(Ese,mmo),e(ka,gmo),e(He,hmo),e(He,Y),e(Y,Fh),e(Fh,Cse),e(Cse,pmo),e(Fh,umo),e(Fh,AI),e(AI,_mo),e(Fh,bmo),e(Y,vmo),e(Y,Th),e(Th,wse),e(wse,Fmo),e(Th,Tmo),e(Th,yI),e(yI,Mmo),e(Th,Emo),e(Y,Cmo),e(Y,Mh),e(Mh,Ase),e(Ase,wmo),e(Mh,Amo),e(Mh,LI),e(LI,ymo),e(Mh,Lmo),e(Y,xmo),e(Y,Eh),e(Eh,yse),e(yse,$mo),e(Eh,kmo),e(Eh,xI),e(xI,Smo),e(Eh,Rmo),e(Y,Pmo),e(Y,Ch),e(Ch,Lse),e(Lse,Bmo),e(Ch,Imo),e(Ch,$I),e($I,Nmo),e(Ch,qmo),e(Y,jmo),e(Y,wh),e(wh,xse),e(xse,Dmo),e(wh,Gmo),e(wh,kI),e(kI,Omo),e(wh,Vmo),e(Y,Xmo),e(Y,Ah),e(Ah,$se),e($se,zmo),e(Ah,Wmo),e(Ah,SI),e(SI,Qmo),e(Ah,Hmo),e(Y,Umo),e(Y,yh),e(yh,kse),e(kse,Jmo),e(yh,Ymo),e(yh,RI),e(RI,Kmo),e(yh,Zmo),e(Y,ego),e(Y,Lh),e(Lh,Sse),e(Sse,ogo),e(Lh,rgo),e(Lh,PI),e(PI,tgo),e(Lh,ago),e(Y,ngo),e(Y,xh),e(xh,Rse),e(Rse,sgo),e(xh,lgo),e(xh,BI),e(BI,igo),e(xh,dgo),e(Y,cgo),e(Y,$h),e($h,Pse),e(Pse,fgo),e($h,mgo),e($h,II),e(II,ggo),e($h,hgo),e(Y,pgo),e(Y,kh),e(kh,Bse),e(Bse,ugo),e(kh,_go),e(kh,NI),e(NI,bgo),e(kh,vgo),e(Y,Fgo),e(Y,Sh),e(Sh,Ise),e(Ise,Tgo),e(Sh,Mgo),e(Sh,qI),e(qI,Ego),e(Sh,Cgo),e(Y,wgo),e(Y,Rh),e(Rh,Nse),e(Nse,Ago),e(Rh,ygo),e(Rh,jI),e(jI,Lgo),e(Rh,xgo),e(Y,$go),e(Y,Ph),e(Ph,qse),e(qse,kgo),e(Ph,Sgo),e(Ph,DI),e(DI,Rgo),e(Ph,Pgo),e(Y,Bgo),e(Y,Bh),e(Bh,jse),e(jse,Igo),e(Bh,Ngo),e(Bh,GI),e(GI,qgo),e(Bh,jgo),e(Y,Dgo),e(Y,Ih),e(Ih,Dse),e(Dse,Ggo),e(Ih,Ogo),e(Ih,OI),e(OI,Vgo),e(Ih,Xgo),e(Y,zgo),e(Y,Nh),e(Nh,Gse),e(Gse,Wgo),e(Nh,Qgo),e(Nh,VI),e(VI,Hgo),e(Nh,Ugo),e(Y,Jgo),e(Y,qh),e(qh,Ose),e(Ose,Ygo),e(qh,Kgo),e(qh,XI),e(XI,Zgo),e(qh,eho),e(Y,oho),e(Y,jh),e(jh,Vse),e(Vse,rho),e(jh,tho),e(jh,zI),e(zI,aho),e(jh,nho),e(Y,sho),e(Y,Dh),e(Dh,Xse),e(Xse,lho),e(Dh,iho),e(Dh,WI),e(WI,dho),e(Dh,cho),e(Y,fho),e(Y,Gh),e(Gh,zse),e(zse,mho),e(Gh,gho),e(Gh,QI),e(QI,hho),e(Gh,pho),e(Y,uho),e(Y,Oh),e(Oh,Wse),e(Wse,_ho),e(Oh,bho),e(Oh,HI),e(HI,vho),e(Oh,Fho),e(Y,Tho),e(Y,Vh),e(Vh,Qse),e(Qse,Mho),e(Vh,Eho),e(Vh,UI),e(UI,Cho),e(Vh,who),e(Y,Aho),e(Y,Xh),e(Xh,Hse),e(Hse,yho),e(Xh,Lho),e(Xh,JI),e(JI,xho),e(Xh,$ho),e(Y,kho),e(Y,zh),e(zh,Use),e(Use,Sho),e(zh,Rho),e(zh,YI),e(YI,Pho),e(zh,Bho),e(Y,Iho),e(Y,Wh),e(Wh,Jse),e(Jse,Nho),e(Wh,qho),e(Wh,KI),e(KI,jho),e(Wh,Dho),e(Y,Gho),e(Y,Qh),e(Qh,Yse),e(Yse,Oho),e(Qh,Vho),e(Qh,ZI),e(ZI,Xho),e(Qh,zho),e(Y,Who),e(Y,Hh),e(Hh,Kse),e(Kse,Qho),e(Hh,Hho),e(Hh,eN),e(eN,Uho),e(Hh,Jho),e(Y,Yho),e(Y,Uh),e(Uh,Zse),e(Zse,Kho),e(Uh,Zho),e(Uh,oN),e(oN,epo),e(Uh,opo),e(Y,rpo),e(Y,Jh),e(Jh,ele),e(ele,tpo),e(Jh,apo),e(Jh,rN),e(rN,npo),e(Jh,spo),e(Y,lpo),e(Y,Yh),e(Yh,ole),e(ole,ipo),e(Yh,dpo),e(Yh,tN),e(tN,cpo),e(Yh,fpo),e(He,mpo),M(Kh,He,null),e(He,gpo),M(Zh,He,null),e(yo,hpo),e(yo,ep),M(CA,ep,null),e(ep,ppo),e(ep,rle),e(rle,upo),b(f,sDe,_),b(f,ki,_),e(ki,op),e(op,tle),M(wA,tle,null),e(ki,_po),e(ki,ale),e(ale,bpo),b(f,lDe,_),b(f,Lo,_),M(AA,Lo,null),e(Lo,vpo),e(Lo,yA),e(yA,Fpo),e(yA,aN),e(aN,Tpo),e(yA,Mpo),e(Lo,Epo),e(Lo,LA),e(LA,Cpo),e(LA,nle),e(nle,wpo),e(LA,Apo),e(Lo,ypo),e(Lo,Ue),M(xA,Ue,null),e(Ue,Lpo),e(Ue,sle),e(sle,xpo),e(Ue,$po),e(Ue,Si),e(Si,kpo),e(Si,lle),e(lle,Spo),e(Si,Rpo),e(Si,ile),e(ile,Ppo),e(Si,Bpo),e(Ue,Ipo),e(Ue,he),e(he,rp),e(rp,dle),e(dle,Npo),e(rp,qpo),e(rp,nN),e(nN,jpo),e(rp,Dpo),e(he,Gpo),e(he,tp),e(tp,cle),e(cle,Opo),e(tp,Vpo),e(tp,fle),e(fle,Xpo),e(tp,zpo),e(he,Wpo),e(he,ap),e(ap,mle),e(mle,Qpo),e(ap,Hpo),e(ap,sN),e(sN,Upo),e(ap,Jpo),e(he,Ypo),e(he,np),e(np,gle),e(gle,Kpo),e(np,Zpo),e(np,lN),e(lN,euo),e(np,ouo),e(he,ruo),e(he,sp),e(sp,hle),e(hle,tuo),e(sp,auo),e(sp,iN),e(iN,nuo),e(sp,suo),e(he,luo),e(he,lp),e(lp,ple),e(ple,iuo),e(lp,duo),e(lp,dN),e(dN,cuo),e(lp,fuo),e(he,muo),e(he,ip),e(ip,ule),e(ule,guo),e(ip,huo),e(ip,cN),e(cN,puo),e(ip,uuo),e(he,_uo),e(he,dp),e(dp,_le),e(_le,buo),e(dp,vuo),e(dp,fN),e(fN,Fuo),e(dp,Tuo),e(he,Muo),e(he,cp),e(cp,ble),e(ble,Euo),e(cp,Cuo),e(cp,mN),e(mN,wuo),e(cp,Auo),e(he,yuo),e(he,fp),e(fp,vle),e(vle,Luo),e(fp,xuo),e(fp,gN),e(gN,$uo),e(fp,kuo),e(he,Suo),e(he,mp),e(mp,Fle),e(Fle,Ruo),e(mp,Puo),e(mp,hN),e(hN,Buo),e(mp,Iuo),e(he,Nuo),e(he,gp),e(gp,Tle),e(Tle,quo),e(gp,juo),e(gp,pN),e(pN,Duo),e(gp,Guo),e(he,Ouo),e(he,hp),e(hp,Mle),e(Mle,Vuo),e(hp,Xuo),e(hp,uN),e(uN,zuo),e(hp,Wuo),e(he,Quo),e(he,pp),e(pp,Ele),e(Ele,Huo),e(pp,Uuo),e(pp,_N),e(_N,Juo),e(pp,Yuo),e(he,Kuo),e(he,up),e(up,Cle),e(Cle,Zuo),e(up,e_o),e(up,bN),e(bN,o_o),e(up,r_o),e(he,t_o),e(he,_p),e(_p,wle),e(wle,a_o),e(_p,n_o),e(_p,vN),e(vN,s_o),e(_p,l_o),e(he,i_o),e(he,bp),e(bp,Ale),e(Ale,d_o),e(bp,c_o),e(bp,FN),e(FN,f_o),e(bp,m_o),e(Ue,g_o),M(vp,Ue,null),e(Ue,h_o),M(Fp,Ue,null),e(Lo,p_o),e(Lo,Tp),M($A,Tp,null),e(Tp,u_o),e(Tp,yle),e(yle,__o),b(f,iDe,_),b(f,Ri,_),e(Ri,Mp),e(Mp,Lle),M(kA,Lle,null),e(Ri,b_o),e(Ri,xle),e(xle,v_o),b(f,dDe,_),b(f,xo,_),M(SA,xo,null),e(xo,F_o),e(xo,Pi),e(Pi,T_o),e(Pi,TN),e(TN,M_o),e(Pi,E_o),e(Pi,MN),e(MN,C_o),e(Pi,w_o),e(xo,A_o),e(xo,RA),e(RA,y_o),e(RA,$le),e($le,L_o),e(RA,x_o),e(xo,$_o),e(xo,nt),M(PA,nt,null),e(nt,k_o),e(nt,kle),e(kle,S_o),e(nt,R_o),e(nt,Bi),e(Bi,P_o),e(Bi,Sle),e(Sle,B_o),e(Bi,I_o),e(Bi,EN),e(EN,N_o),e(Bi,q_o),e(nt,j_o),M(Ep,nt,null),e(xo,D_o),e(xo,Je),M(BA,Je,null),e(Je,G_o),e(Je,Rle),e(Rle,O_o),e(Je,V_o),e(Je,Sa),e(Sa,X_o),e(Sa,Ple),e(Ple,z_o),e(Sa,W_o),e(Sa,Ble),e(Ble,Q_o),e(Sa,H_o),e(Sa,Ile),e(Ile,U_o),e(Sa,J_o),e(Je,Y_o),e(Je,x),e(x,Cp),e(Cp,Nle),e(Nle,K_o),e(Cp,Z_o),e(Cp,CN),e(CN,e2o),e(Cp,o2o),e(x,r2o),e(x,wp),e(wp,qle),e(qle,t2o),e(wp,a2o),e(wp,wN),e(wN,n2o),e(wp,s2o),e(x,l2o),e(x,Ap),e(Ap,jle),e(jle,i2o),e(Ap,d2o),e(Ap,AN),e(AN,c2o),e(Ap,f2o),e(x,m2o),e(x,yp),e(yp,Dle),e(Dle,g2o),e(yp,h2o),e(yp,yN),e(yN,p2o),e(yp,u2o),e(x,_2o),e(x,Lp),e(Lp,Gle),e(Gle,b2o),e(Lp,v2o),e(Lp,LN),e(LN,F2o),e(Lp,T2o),e(x,M2o),e(x,xp),e(xp,Ole),e(Ole,E2o),e(xp,C2o),e(xp,xN),e(xN,w2o),e(xp,A2o),e(x,y2o),e(x,$p),e($p,Vle),e(Vle,L2o),e($p,x2o),e($p,$N),e($N,$2o),e($p,k2o),e(x,S2o),e(x,kp),e(kp,Xle),e(Xle,R2o),e(kp,P2o),e(kp,kN),e(kN,B2o),e(kp,I2o),e(x,N2o),e(x,Sp),e(Sp,zle),e(zle,q2o),e(Sp,j2o),e(Sp,SN),e(SN,D2o),e(Sp,G2o),e(x,O2o),e(x,Rp),e(Rp,Wle),e(Wle,V2o),e(Rp,X2o),e(Rp,RN),e(RN,z2o),e(Rp,W2o),e(x,Q2o),e(x,Pp),e(Pp,Qle),e(Qle,H2o),e(Pp,U2o),e(Pp,PN),e(PN,J2o),e(Pp,Y2o),e(x,K2o),e(x,Bp),e(Bp,Hle),e(Hle,Z2o),e(Bp,e1o),e(Bp,BN),e(BN,o1o),e(Bp,r1o),e(x,t1o),e(x,Ip),e(Ip,Ule),e(Ule,a1o),e(Ip,n1o),e(Ip,IN),e(IN,s1o),e(Ip,l1o),e(x,i1o),e(x,Np),e(Np,Jle),e(Jle,d1o),e(Np,c1o),e(Np,NN),e(NN,f1o),e(Np,m1o),e(x,g1o),e(x,qp),e(qp,Yle),e(Yle,h1o),e(qp,p1o),e(qp,qN),e(qN,u1o),e(qp,_1o),e(x,b1o),e(x,jp),e(jp,Kle),e(Kle,v1o),e(jp,F1o),e(jp,jN),e(jN,T1o),e(jp,M1o),e(x,E1o),e(x,Dp),e(Dp,Zle),e(Zle,C1o),e(Dp,w1o),e(Dp,DN),e(DN,A1o),e(Dp,y1o),e(x,L1o),e(x,Gp),e(Gp,eie),e(eie,x1o),e(Gp,$1o),e(Gp,GN),e(GN,k1o),e(Gp,S1o),e(x,R1o),e(x,Op),e(Op,oie),e(oie,P1o),e(Op,B1o),e(Op,ON),e(ON,I1o),e(Op,N1o),e(x,q1o),e(x,Vp),e(Vp,rie),e(rie,j1o),e(Vp,D1o),e(Vp,VN),e(VN,G1o),e(Vp,O1o),e(x,V1o),e(x,Xp),e(Xp,tie),e(tie,X1o),e(Xp,z1o),e(Xp,XN),e(XN,W1o),e(Xp,Q1o),e(x,H1o),e(x,zp),e(zp,aie),e(aie,U1o),e(zp,J1o),e(zp,zN),e(zN,Y1o),e(zp,K1o),e(x,Z1o),e(x,Wp),e(Wp,nie),e(nie,ebo),e(Wp,obo),e(Wp,WN),e(WN,rbo),e(Wp,tbo),e(x,abo),e(x,Qp),e(Qp,sie),e(sie,nbo),e(Qp,sbo),e(Qp,QN),e(QN,lbo),e(Qp,ibo),e(x,dbo),e(x,Hp),e(Hp,lie),e(lie,cbo),e(Hp,fbo),e(Hp,HN),e(HN,mbo),e(Hp,gbo),e(x,hbo),e(x,Up),e(Up,iie),e(iie,pbo),e(Up,ubo),e(Up,UN),e(UN,_bo),e(Up,bbo),e(x,vbo),e(x,Jp),e(Jp,die),e(die,Fbo),e(Jp,Tbo),e(Jp,JN),e(JN,Mbo),e(Jp,Ebo),e(x,Cbo),e(x,Yp),e(Yp,cie),e(cie,wbo),e(Yp,Abo),e(Yp,YN),e(YN,ybo),e(Yp,Lbo),e(x,xbo),e(x,Kp),e(Kp,fie),e(fie,$bo),e(Kp,kbo),e(Kp,KN),e(KN,Sbo),e(Kp,Rbo),e(x,Pbo),e(x,Zp),e(Zp,mie),e(mie,Bbo),e(Zp,Ibo),e(Zp,ZN),e(ZN,Nbo),e(Zp,qbo),e(x,jbo),e(x,eu),e(eu,gie),e(gie,Dbo),e(eu,Gbo),e(eu,eq),e(eq,Obo),e(eu,Vbo),e(x,Xbo),e(x,ou),e(ou,hie),e(hie,zbo),e(ou,Wbo),e(ou,oq),e(oq,Qbo),e(ou,Hbo),e(x,Ubo),e(x,Ds),e(Ds,pie),e(pie,Jbo),e(Ds,Ybo),e(Ds,rq),e(rq,Kbo),e(Ds,Zbo),e(Ds,tq),e(tq,evo),e(Ds,ovo),e(x,rvo),e(x,ru),e(ru,uie),e(uie,tvo),e(ru,avo),e(ru,aq),e(aq,nvo),e(ru,svo),e(x,lvo),e(x,tu),e(tu,_ie),e(_ie,ivo),e(tu,dvo),e(tu,nq),e(nq,cvo),e(tu,fvo),e(x,mvo),e(x,au),e(au,bie),e(bie,gvo),e(au,hvo),e(au,sq),e(sq,pvo),e(au,uvo),e(x,_vo),e(x,nu),e(nu,vie),e(vie,bvo),e(nu,vvo),e(nu,lq),e(lq,Fvo),e(nu,Tvo),e(x,Mvo),e(x,su),e(su,Fie),e(Fie,Evo),e(su,Cvo),e(su,iq),e(iq,wvo),e(su,Avo),e(x,yvo),e(x,lu),e(lu,Tie),e(Tie,Lvo),e(lu,xvo),e(lu,dq),e(dq,$vo),e(lu,kvo),e(x,Svo),e(x,iu),e(iu,Mie),e(Mie,Rvo),e(iu,Pvo),e(iu,cq),e(cq,Bvo),e(iu,Ivo),e(x,Nvo),e(x,du),e(du,Eie),e(Eie,qvo),e(du,jvo),e(du,fq),e(fq,Dvo),e(du,Gvo),e(x,Ovo),e(x,cu),e(cu,Cie),e(Cie,Vvo),e(cu,Xvo),e(cu,mq),e(mq,zvo),e(cu,Wvo),e(x,Qvo),e(x,fu),e(fu,wie),e(wie,Hvo),e(fu,Uvo),e(fu,gq),e(gq,Jvo),e(fu,Yvo),e(x,Kvo),e(x,mu),e(mu,Aie),e(Aie,Zvo),e(mu,eFo),e(mu,hq),e(hq,oFo),e(mu,rFo),e(x,tFo),e(x,gu),e(gu,yie),e(yie,aFo),e(gu,nFo),e(gu,pq),e(pq,sFo),e(gu,lFo),e(x,iFo),e(x,hu),e(hu,Lie),e(Lie,dFo),e(hu,cFo),e(hu,uq),e(uq,fFo),e(hu,mFo),e(x,gFo),e(x,pu),e(pu,xie),e(xie,hFo),e(pu,pFo),e(pu,_q),e(_q,uFo),e(pu,_Fo),e(x,bFo),e(x,uu),e(uu,$ie),e($ie,vFo),e(uu,FFo),e(uu,bq),e(bq,TFo),e(uu,MFo),e(x,EFo),e(x,_u),e(_u,kie),e(kie,CFo),e(_u,wFo),e(_u,vq),e(vq,AFo),e(_u,yFo),e(x,LFo),e(x,bu),e(bu,Sie),e(Sie,xFo),e(bu,$Fo),e(bu,Fq),e(Fq,kFo),e(bu,SFo),e(x,RFo),e(x,vu),e(vu,Rie),e(Rie,PFo),e(vu,BFo),e(vu,Tq),e(Tq,IFo),e(vu,NFo),e(x,qFo),e(x,Fu),e(Fu,Pie),e(Pie,jFo),e(Fu,DFo),e(Fu,Mq),e(Mq,GFo),e(Fu,OFo),e(x,VFo),e(x,Tu),e(Tu,Bie),e(Bie,XFo),e(Tu,zFo),e(Tu,Eq),e(Eq,WFo),e(Tu,QFo),e(x,HFo),e(x,Mu),e(Mu,Iie),e(Iie,UFo),e(Mu,JFo),e(Mu,Cq),e(Cq,YFo),e(Mu,KFo),e(x,ZFo),e(x,Eu),e(Eu,Nie),e(Nie,e6o),e(Eu,o6o),e(Eu,wq),e(wq,r6o),e(Eu,t6o),e(x,a6o),e(x,Cu),e(Cu,qie),e(qie,n6o),e(Cu,s6o),e(Cu,Aq),e(Aq,l6o),e(Cu,i6o),e(x,d6o),e(x,wu),e(wu,jie),e(jie,c6o),e(wu,f6o),e(wu,yq),e(yq,m6o),e(wu,g6o),e(x,h6o),e(x,Au),e(Au,Die),e(Die,p6o),e(Au,u6o),e(Au,Lq),e(Lq,_6o),e(Au,b6o),e(x,v6o),e(x,yu),e(yu,Gie),e(Gie,F6o),e(yu,T6o),e(yu,xq),e(xq,M6o),e(yu,E6o),e(x,C6o),e(x,Lu),e(Lu,Oie),e(Oie,w6o),e(Lu,A6o),e(Lu,$q),e($q,y6o),e(Lu,L6o),e(x,x6o),e(x,xu),e(xu,Vie),e(Vie,$6o),e(xu,k6o),e(xu,kq),e(kq,S6o),e(xu,R6o),e(x,P6o),e(x,$u),e($u,Xie),e(Xie,B6o),e($u,I6o),e($u,Sq),e(Sq,N6o),e($u,q6o),e(x,j6o),e(x,ku),e(ku,zie),e(zie,D6o),e(ku,G6o),e(ku,Rq),e(Rq,O6o),e(ku,V6o),e(x,X6o),e(x,Su),e(Su,Wie),e(Wie,z6o),e(Su,W6o),e(Su,Pq),e(Pq,Q6o),e(Su,H6o),e(x,U6o),e(x,Ru),e(Ru,Qie),e(Qie,J6o),e(Ru,Y6o),e(Ru,Bq),e(Bq,K6o),e(Ru,Z6o),e(x,eTo),e(x,Pu),e(Pu,Hie),e(Hie,oTo),e(Pu,rTo),e(Pu,Iq),e(Iq,tTo),e(Pu,aTo),e(x,nTo),e(x,Bu),e(Bu,Uie),e(Uie,sTo),e(Bu,lTo),e(Bu,Nq),e(Nq,iTo),e(Bu,dTo),e(x,cTo),e(x,Iu),e(Iu,Jie),e(Jie,fTo),e(Iu,mTo),e(Iu,qq),e(qq,gTo),e(Iu,hTo),e(x,pTo),e(x,Nu),e(Nu,Yie),e(Yie,uTo),e(Nu,_To),e(Nu,jq),e(jq,bTo),e(Nu,vTo),e(x,FTo),e(x,qu),e(qu,Kie),e(Kie,TTo),e(qu,MTo),e(qu,Dq),e(Dq,ETo),e(qu,CTo),e(x,wTo),e(x,ju),e(ju,Zie),e(Zie,ATo),e(ju,yTo),e(ju,Gq),e(Gq,LTo),e(ju,xTo),e(x,$To),e(x,Du),e(Du,ede),e(ede,kTo),e(Du,STo),e(Du,Oq),e(Oq,RTo),e(Du,PTo),e(x,BTo),e(x,Gu),e(Gu,ode),e(ode,ITo),e(Gu,NTo),e(Gu,Vq),e(Vq,qTo),e(Gu,jTo),e(x,DTo),e(x,Ou),e(Ou,rde),e(rde,GTo),e(Ou,OTo),e(Ou,Xq),e(Xq,VTo),e(Ou,XTo),e(x,zTo),e(x,Vu),e(Vu,tde),e(tde,WTo),e(Vu,QTo),e(Vu,zq),e(zq,HTo),e(Vu,UTo),e(x,JTo),e(x,Xu),e(Xu,ade),e(ade,YTo),e(Xu,KTo),e(Xu,Wq),e(Wq,ZTo),e(Xu,e7o),e(x,o7o),e(x,zu),e(zu,nde),e(nde,r7o),e(zu,t7o),e(zu,Qq),e(Qq,a7o),e(zu,n7o),e(x,s7o),e(x,Wu),e(Wu,sde),e(sde,l7o),e(Wu,i7o),e(Wu,Hq),e(Hq,d7o),e(Wu,c7o),e(x,f7o),e(x,Qu),e(Qu,lde),e(lde,m7o),e(Qu,g7o),e(Qu,Uq),e(Uq,h7o),e(Qu,p7o),e(x,u7o),e(x,Hu),e(Hu,ide),e(ide,_7o),e(Hu,b7o),e(Hu,Jq),e(Jq,v7o),e(Hu,F7o),e(x,T7o),e(x,Uu),e(Uu,dde),e(dde,M7o),e(Uu,E7o),e(Uu,Yq),e(Yq,C7o),e(Uu,w7o),e(x,A7o),e(x,Ju),e(Ju,cde),e(cde,y7o),e(Ju,L7o),e(Ju,Kq),e(Kq,x7o),e(Ju,$7o),e(x,k7o),e(x,Yu),e(Yu,fde),e(fde,S7o),e(Yu,R7o),e(Yu,Zq),e(Zq,P7o),e(Yu,B7o),e(x,I7o),e(x,Ku),e(Ku,mde),e(mde,N7o),e(Ku,q7o),e(Ku,ej),e(ej,j7o),e(Ku,D7o),e(x,G7o),e(x,Zu),e(Zu,gde),e(gde,O7o),e(Zu,V7o),e(Zu,oj),e(oj,X7o),e(Zu,z7o),e(x,W7o),e(x,e_),e(e_,hde),e(hde,Q7o),e(e_,H7o),e(e_,rj),e(rj,U7o),e(e_,J7o),e(x,Y7o),e(x,o_),e(o_,pde),e(pde,K7o),e(o_,Z7o),e(o_,tj),e(tj,e8o),e(o_,o8o),e(x,r8o),e(x,r_),e(r_,ude),e(ude,t8o),e(r_,a8o),e(r_,aj),e(aj,n8o),e(r_,s8o),e(x,l8o),e(x,t_),e(t_,_de),e(_de,i8o),e(t_,d8o),e(t_,nj),e(nj,c8o),e(t_,f8o),e(x,m8o),e(x,a_),e(a_,bde),e(bde,g8o),e(a_,h8o),e(a_,sj),e(sj,p8o),e(a_,u8o),e(x,_8o),e(x,n_),e(n_,vde),e(vde,b8o),e(n_,v8o),e(n_,lj),e(lj,F8o),e(n_,T8o),e(x,M8o),e(x,s_),e(s_,Fde),e(Fde,E8o),e(s_,C8o),e(s_,ij),e(ij,w8o),e(s_,A8o),e(x,y8o),e(x,l_),e(l_,Tde),e(Tde,L8o),e(l_,x8o),e(l_,dj),e(dj,$8o),e(l_,k8o),e(x,S8o),e(x,i_),e(i_,Mde),e(Mde,R8o),e(i_,P8o),e(i_,cj),e(cj,B8o),e(i_,I8o),e(x,N8o),e(x,d_),e(d_,Ede),e(Ede,q8o),e(d_,j8o),e(d_,fj),e(fj,D8o),e(d_,G8o),e(x,O8o),e(x,c_),e(c_,Cde),e(Cde,V8o),e(c_,X8o),e(c_,mj),e(mj,z8o),e(c_,W8o),e(x,Q8o),e(x,f_),e(f_,wde),e(wde,H8o),e(f_,U8o),e(f_,gj),e(gj,J8o),e(f_,Y8o),e(x,K8o),e(x,m_),e(m_,Ade),e(Ade,Z8o),e(m_,eMo),e(m_,hj),e(hj,oMo),e(m_,rMo),e(x,tMo),e(x,g_),e(g_,yde),e(yde,aMo),e(g_,nMo),e(g_,pj),e(pj,sMo),e(g_,lMo),e(x,iMo),e(x,h_),e(h_,Lde),e(Lde,dMo),e(h_,cMo),e(h_,uj),e(uj,fMo),e(h_,mMo),e(x,gMo),e(x,p_),e(p_,xde),e(xde,hMo),e(p_,pMo),e(p_,_j),e(_j,uMo),e(p_,_Mo),e(x,bMo),e(x,u_),e(u_,$de),e($de,vMo),e(u_,FMo),e(u_,bj),e(bj,TMo),e(u_,MMo),e(x,EMo),e(x,__),e(__,kde),e(kde,CMo),e(__,wMo),e(__,vj),e(vj,AMo),e(__,yMo),e(x,LMo),e(x,b_),e(b_,Sde),e(Sde,xMo),e(b_,$Mo),e(b_,Fj),e(Fj,kMo),e(b_,SMo),e(Je,RMo),e(Je,v_),e(v_,PMo),e(v_,Rde),e(Rde,BMo),e(v_,IMo),e(v_,Pde),e(Pde,NMo),e(Je,qMo),M(F_,Je,null),b(f,cDe,_),b(f,Ii,_),e(Ii,T_),e(T_,Bde),M(IA,Bde,null),e(Ii,jMo),e(Ii,Ide),e(Ide,DMo),b(f,fDe,_),b(f,$o,_),M(NA,$o,null),e($o,GMo),e($o,Ni),e(Ni,OMo),e(Ni,Tj),e(Tj,VMo),e(Ni,XMo),e(Ni,Mj),e(Mj,zMo),e(Ni,WMo),e($o,QMo),e($o,qA),e(qA,HMo),e(qA,Nde),e(Nde,UMo),e(qA,JMo),e($o,YMo),e($o,st),M(jA,st,null),e(st,KMo),e(st,qde),e(qde,ZMo),e(st,e4o),e(st,qi),e(qi,o4o),e(qi,jde),e(jde,r4o),e(qi,t4o),e(qi,Ej),e(Ej,a4o),e(qi,n4o),e(st,s4o),M(M_,st,null),e($o,l4o),e($o,Ye),M(DA,Ye,null),e(Ye,i4o),e(Ye,Dde),e(Dde,d4o),e(Ye,c4o),e(Ye,Ra),e(Ra,f4o),e(Ra,Gde),e(Gde,m4o),e(Ra,g4o),e(Ra,Ode),e(Ode,h4o),e(Ra,p4o),e(Ra,Vde),e(Vde,u4o),e(Ra,_4o),e(Ye,b4o),e(Ye,G),e(G,E_),e(E_,Xde),e(Xde,v4o),e(E_,F4o),e(E_,Cj),e(Cj,T4o),e(E_,M4o),e(G,E4o),e(G,C_),e(C_,zde),e(zde,C4o),e(C_,w4o),e(C_,wj),e(wj,A4o),e(C_,y4o),e(G,L4o),e(G,w_),e(w_,Wde),e(Wde,x4o),e(w_,$4o),e(w_,Aj),e(Aj,k4o),e(w_,S4o),e(G,R4o),e(G,A_),e(A_,Qde),e(Qde,P4o),e(A_,B4o),e(A_,yj),e(yj,I4o),e(A_,N4o),e(G,q4o),e(G,y_),e(y_,Hde),e(Hde,j4o),e(y_,D4o),e(y_,Lj),e(Lj,G4o),e(y_,O4o),e(G,V4o),e(G,L_),e(L_,Ude),e(Ude,X4o),e(L_,z4o),e(L_,xj),e(xj,W4o),e(L_,Q4o),e(G,H4o),e(G,x_),e(x_,Jde),e(Jde,U4o),e(x_,J4o),e(x_,$j),e($j,Y4o),e(x_,K4o),e(G,Z4o),e(G,$_),e($_,Yde),e(Yde,eEo),e($_,oEo),e($_,kj),e(kj,rEo),e($_,tEo),e(G,aEo),e(G,k_),e(k_,Kde),e(Kde,nEo),e(k_,sEo),e(k_,Sj),e(Sj,lEo),e(k_,iEo),e(G,dEo),e(G,S_),e(S_,Zde),e(Zde,cEo),e(S_,fEo),e(S_,Rj),e(Rj,mEo),e(S_,gEo),e(G,hEo),e(G,R_),e(R_,ece),e(ece,pEo),e(R_,uEo),e(R_,Pj),e(Pj,_Eo),e(R_,bEo),e(G,vEo),e(G,P_),e(P_,oce),e(oce,FEo),e(P_,TEo),e(P_,Bj),e(Bj,MEo),e(P_,EEo),e(G,CEo),e(G,B_),e(B_,rce),e(rce,wEo),e(B_,AEo),e(B_,Ij),e(Ij,yEo),e(B_,LEo),e(G,xEo),e(G,I_),e(I_,tce),e(tce,$Eo),e(I_,kEo),e(I_,Nj),e(Nj,SEo),e(I_,REo),e(G,PEo),e(G,N_),e(N_,ace),e(ace,BEo),e(N_,IEo),e(N_,qj),e(qj,NEo),e(N_,qEo),e(G,jEo),e(G,q_),e(q_,nce),e(nce,DEo),e(q_,GEo),e(q_,jj),e(jj,OEo),e(q_,VEo),e(G,XEo),e(G,j_),e(j_,sce),e(sce,zEo),e(j_,WEo),e(j_,Dj),e(Dj,QEo),e(j_,HEo),e(G,UEo),e(G,D_),e(D_,lce),e(lce,JEo),e(D_,YEo),e(D_,Gj),e(Gj,KEo),e(D_,ZEo),e(G,eCo),e(G,G_),e(G_,ice),e(ice,oCo),e(G_,rCo),e(G_,Oj),e(Oj,tCo),e(G_,aCo),e(G,nCo),e(G,O_),e(O_,dce),e(dce,sCo),e(O_,lCo),e(O_,Vj),e(Vj,iCo),e(O_,dCo),e(G,cCo),e(G,V_),e(V_,cce),e(cce,fCo),e(V_,mCo),e(V_,Xj),e(Xj,gCo),e(V_,hCo),e(G,pCo),e(G,X_),e(X_,fce),e(fce,uCo),e(X_,_Co),e(X_,zj),e(zj,bCo),e(X_,vCo),e(G,FCo),e(G,z_),e(z_,mce),e(mce,TCo),e(z_,MCo),e(z_,Wj),e(Wj,ECo),e(z_,CCo),e(G,wCo),e(G,W_),e(W_,gce),e(gce,ACo),e(W_,yCo),e(W_,Qj),e(Qj,LCo),e(W_,xCo),e(G,$Co),e(G,Q_),e(Q_,hce),e(hce,kCo),e(Q_,SCo),e(Q_,Hj),e(Hj,RCo),e(Q_,PCo),e(G,BCo),e(G,H_),e(H_,pce),e(pce,ICo),e(H_,NCo),e(H_,Uj),e(Uj,qCo),e(H_,jCo),e(G,DCo),e(G,U_),e(U_,uce),e(uce,GCo),e(U_,OCo),e(U_,Jj),e(Jj,VCo),e(U_,XCo),e(G,zCo),e(G,J_),e(J_,_ce),e(_ce,WCo),e(J_,QCo),e(J_,Yj),e(Yj,HCo),e(J_,UCo),e(G,JCo),e(G,Y_),e(Y_,bce),e(bce,YCo),e(Y_,KCo),e(Y_,Kj),e(Kj,ZCo),e(Y_,e5o),e(G,o5o),e(G,K_),e(K_,vce),e(vce,r5o),e(K_,t5o),e(K_,Zj),e(Zj,a5o),e(K_,n5o),e(G,s5o),e(G,Z_),e(Z_,Fce),e(Fce,l5o),e(Z_,i5o),e(Z_,eD),e(eD,d5o),e(Z_,c5o),e(G,f5o),e(G,e2),e(e2,Tce),e(Tce,m5o),e(e2,g5o),e(e2,oD),e(oD,h5o),e(e2,p5o),e(G,u5o),e(G,o2),e(o2,Mce),e(Mce,_5o),e(o2,b5o),e(o2,rD),e(rD,v5o),e(o2,F5o),e(G,T5o),e(G,r2),e(r2,Ece),e(Ece,M5o),e(r2,E5o),e(r2,tD),e(tD,C5o),e(r2,w5o),e(G,A5o),e(G,t2),e(t2,Cce),e(Cce,y5o),e(t2,L5o),e(t2,aD),e(aD,x5o),e(t2,$5o),e(G,k5o),e(G,a2),e(a2,wce),e(wce,S5o),e(a2,R5o),e(a2,nD),e(nD,P5o),e(a2,B5o),e(G,I5o),e(G,n2),e(n2,Ace),e(Ace,N5o),e(n2,q5o),e(n2,sD),e(sD,j5o),e(n2,D5o),e(G,G5o),e(G,s2),e(s2,yce),e(yce,O5o),e(s2,V5o),e(s2,lD),e(lD,X5o),e(s2,z5o),e(G,W5o),e(G,l2),e(l2,Lce),e(Lce,Q5o),e(l2,H5o),e(l2,iD),e(iD,U5o),e(l2,J5o),e(G,Y5o),e(G,i2),e(i2,xce),e(xce,K5o),e(i2,Z5o),e(i2,dD),e(dD,e3o),e(i2,o3o),e(G,r3o),e(G,d2),e(d2,$ce),e($ce,t3o),e(d2,a3o),e(d2,cD),e(cD,n3o),e(d2,s3o),e(G,l3o),e(G,c2),e(c2,kce),e(kce,i3o),e(c2,d3o),e(c2,fD),e(fD,c3o),e(c2,f3o),e(Ye,m3o),e(Ye,f2),e(f2,g3o),e(f2,Sce),e(Sce,h3o),e(f2,p3o),e(f2,Rce),e(Rce,u3o),e(Ye,_3o),M(m2,Ye,null),b(f,mDe,_),b(f,ji,_),e(ji,g2),e(g2,Pce),M(GA,Pce,null),e(ji,b3o),e(ji,Bce),e(Bce,v3o),b(f,gDe,_),b(f,ko,_),M(OA,ko,null),e(ko,F3o),e(ko,Di),e(Di,T3o),e(Di,mD),e(mD,M3o),e(Di,E3o),e(Di,gD),e(gD,C3o),e(Di,w3o),e(ko,A3o),e(ko,VA),e(VA,y3o),e(VA,Ice),e(Ice,L3o),e(VA,x3o),e(ko,$3o),e(ko,lt),M(XA,lt,null),e(lt,k3o),e(lt,Nce),e(Nce,S3o),e(lt,R3o),e(lt,Gi),e(Gi,P3o),e(Gi,qce),e(qce,B3o),e(Gi,I3o),e(Gi,hD),e(hD,N3o),e(Gi,q3o),e(lt,j3o),M(h2,lt,null),e(ko,D3o),e(ko,Ke),M(zA,Ke,null),e(Ke,G3o),e(Ke,jce),e(jce,O3o),e(Ke,V3o),e(Ke,Pa),e(Pa,X3o),e(Pa,Dce),e(Dce,z3o),e(Pa,W3o),e(Pa,Gce),e(Gce,Q3o),e(Pa,H3o),e(Pa,Oce),e(Oce,U3o),e(Pa,J3o),e(Ke,Y3o),e(Ke,z),e(z,p2),e(p2,Vce),e(Vce,K3o),e(p2,Z3o),e(p2,pD),e(pD,ewo),e(p2,owo),e(z,rwo),e(z,u2),e(u2,Xce),e(Xce,two),e(u2,awo),e(u2,uD),e(uD,nwo),e(u2,swo),e(z,lwo),e(z,_2),e(_2,zce),e(zce,iwo),e(_2,dwo),e(_2,_D),e(_D,cwo),e(_2,fwo),e(z,mwo),e(z,b2),e(b2,Wce),e(Wce,gwo),e(b2,hwo),e(b2,bD),e(bD,pwo),e(b2,uwo),e(z,_wo),e(z,v2),e(v2,Qce),e(Qce,bwo),e(v2,vwo),e(v2,vD),e(vD,Fwo),e(v2,Two),e(z,Mwo),e(z,F2),e(F2,Hce),e(Hce,Ewo),e(F2,Cwo),e(F2,FD),e(FD,wwo),e(F2,Awo),e(z,ywo),e(z,T2),e(T2,Uce),e(Uce,Lwo),e(T2,xwo),e(T2,TD),e(TD,$wo),e(T2,kwo),e(z,Swo),e(z,M2),e(M2,Jce),e(Jce,Rwo),e(M2,Pwo),e(M2,MD),e(MD,Bwo),e(M2,Iwo),e(z,Nwo),e(z,E2),e(E2,Yce),e(Yce,qwo),e(E2,jwo),e(E2,ED),e(ED,Dwo),e(E2,Gwo),e(z,Owo),e(z,C2),e(C2,Kce),e(Kce,Vwo),e(C2,Xwo),e(C2,CD),e(CD,zwo),e(C2,Wwo),e(z,Qwo),e(z,w2),e(w2,Zce),e(Zce,Hwo),e(w2,Uwo),e(w2,wD),e(wD,Jwo),e(w2,Ywo),e(z,Kwo),e(z,A2),e(A2,efe),e(efe,Zwo),e(A2,e0o),e(A2,AD),e(AD,o0o),e(A2,r0o),e(z,t0o),e(z,y2),e(y2,ofe),e(ofe,a0o),e(y2,n0o),e(y2,yD),e(yD,s0o),e(y2,l0o),e(z,i0o),e(z,L2),e(L2,rfe),e(rfe,d0o),e(L2,c0o),e(L2,LD),e(LD,f0o),e(L2,m0o),e(z,g0o),e(z,x2),e(x2,tfe),e(tfe,h0o),e(x2,p0o),e(x2,xD),e(xD,u0o),e(x2,_0o),e(z,b0o),e(z,$2),e($2,afe),e(afe,v0o),e($2,F0o),e($2,$D),e($D,T0o),e($2,M0o),e(z,E0o),e(z,k2),e(k2,nfe),e(nfe,C0o),e(k2,w0o),e(k2,kD),e(kD,A0o),e(k2,y0o),e(z,L0o),e(z,S2),e(S2,sfe),e(sfe,x0o),e(S2,$0o),e(S2,SD),e(SD,k0o),e(S2,S0o),e(z,R0o),e(z,R2),e(R2,lfe),e(lfe,P0o),e(R2,B0o),e(R2,RD),e(RD,I0o),e(R2,N0o),e(z,q0o),e(z,P2),e(P2,ife),e(ife,j0o),e(P2,D0o),e(P2,PD),e(PD,G0o),e(P2,O0o),e(z,V0o),e(z,B2),e(B2,dfe),e(dfe,X0o),e(B2,z0o),e(B2,BD),e(BD,W0o),e(B2,Q0o),e(z,H0o),e(z,I2),e(I2,cfe),e(cfe,U0o),e(I2,J0o),e(I2,ID),e(ID,Y0o),e(I2,K0o),e(z,Z0o),e(z,N2),e(N2,ffe),e(ffe,eAo),e(N2,oAo),e(N2,ND),e(ND,rAo),e(N2,tAo),e(z,aAo),e(z,q2),e(q2,mfe),e(mfe,nAo),e(q2,sAo),e(q2,qD),e(qD,lAo),e(q2,iAo),e(z,dAo),e(z,j2),e(j2,gfe),e(gfe,cAo),e(j2,fAo),e(j2,jD),e(jD,mAo),e(j2,gAo),e(z,hAo),e(z,D2),e(D2,hfe),e(hfe,pAo),e(D2,uAo),e(D2,DD),e(DD,_Ao),e(D2,bAo),e(z,vAo),e(z,G2),e(G2,pfe),e(pfe,FAo),e(G2,TAo),e(G2,GD),e(GD,MAo),e(G2,EAo),e(z,CAo),e(z,O2),e(O2,ufe),e(ufe,wAo),e(O2,AAo),e(O2,OD),e(OD,yAo),e(O2,LAo),e(z,xAo),e(z,V2),e(V2,_fe),e(_fe,$Ao),e(V2,kAo),e(V2,VD),e(VD,SAo),e(V2,RAo),e(z,PAo),e(z,X2),e(X2,bfe),e(bfe,BAo),e(X2,IAo),e(X2,XD),e(XD,NAo),e(X2,qAo),e(z,jAo),e(z,z2),e(z2,vfe),e(vfe,DAo),e(z2,GAo),e(z2,zD),e(zD,OAo),e(z2,VAo),e(z,XAo),e(z,W2),e(W2,Ffe),e(Ffe,zAo),e(W2,WAo),e(W2,WD),e(WD,QAo),e(W2,HAo),e(z,UAo),e(z,Q2),e(Q2,Tfe),e(Tfe,JAo),e(Q2,YAo),e(Q2,QD),e(QD,KAo),e(Q2,ZAo),e(z,eyo),e(z,H2),e(H2,Mfe),e(Mfe,oyo),e(H2,ryo),e(H2,HD),e(HD,tyo),e(H2,ayo),e(z,nyo),e(z,U2),e(U2,Efe),e(Efe,syo),e(U2,lyo),e(U2,UD),e(UD,iyo),e(U2,dyo),e(z,cyo),e(z,J2),e(J2,Cfe),e(Cfe,fyo),e(J2,myo),e(J2,JD),e(JD,gyo),e(J2,hyo),e(z,pyo),e(z,Y2),e(Y2,wfe),e(wfe,uyo),e(Y2,_yo),e(Y2,YD),e(YD,byo),e(Y2,vyo),e(Ke,Fyo),e(Ke,K2),e(K2,Tyo),e(K2,Afe),e(Afe,Myo),e(K2,Eyo),e(K2,yfe),e(yfe,Cyo),e(Ke,wyo),M(Z2,Ke,null),b(f,hDe,_),b(f,Oi,_),e(Oi,e1),e(e1,Lfe),M(WA,Lfe,null),e(Oi,Ayo),e(Oi,xfe),e(xfe,yyo),b(f,pDe,_),b(f,So,_),M(QA,So,null),e(So,Lyo),e(So,Vi),e(Vi,xyo),e(Vi,KD),e(KD,$yo),e(Vi,kyo),e(Vi,ZD),e(ZD,Syo),e(Vi,Ryo),e(So,Pyo),e(So,HA),e(HA,Byo),e(HA,$fe),e($fe,Iyo),e(HA,Nyo),e(So,qyo),e(So,it),M(UA,it,null),e(it,jyo),e(it,kfe),e(kfe,Dyo),e(it,Gyo),e(it,Xi),e(Xi,Oyo),e(Xi,Sfe),e(Sfe,Vyo),e(Xi,Xyo),e(Xi,eG),e(eG,zyo),e(Xi,Wyo),e(it,Qyo),M(o1,it,null),e(So,Hyo),e(So,Ze),M(JA,Ze,null),e(Ze,Uyo),e(Ze,Rfe),e(Rfe,Jyo),e(Ze,Yyo),e(Ze,Ba),e(Ba,Kyo),e(Ba,Pfe),e(Pfe,Zyo),e(Ba,eLo),e(Ba,Bfe),e(Bfe,oLo),e(Ba,rLo),e(Ba,Ife),e(Ife,tLo),e(Ba,aLo),e(Ze,nLo),e(Ze,W),e(W,r1),e(r1,Nfe),e(Nfe,sLo),e(r1,lLo),e(r1,oG),e(oG,iLo),e(r1,dLo),e(W,cLo),e(W,t1),e(t1,qfe),e(qfe,fLo),e(t1,mLo),e(t1,rG),e(rG,gLo),e(t1,hLo),e(W,pLo),e(W,a1),e(a1,jfe),e(jfe,uLo),e(a1,_Lo),e(a1,tG),e(tG,bLo),e(a1,vLo),e(W,FLo),e(W,n1),e(n1,Dfe),e(Dfe,TLo),e(n1,MLo),e(n1,aG),e(aG,ELo),e(n1,CLo),e(W,wLo),e(W,s1),e(s1,Gfe),e(Gfe,ALo),e(s1,yLo),e(s1,nG),e(nG,LLo),e(s1,xLo),e(W,$Lo),e(W,l1),e(l1,Ofe),e(Ofe,kLo),e(l1,SLo),e(l1,sG),e(sG,RLo),e(l1,PLo),e(W,BLo),e(W,i1),e(i1,Vfe),e(Vfe,ILo),e(i1,NLo),e(i1,lG),e(lG,qLo),e(i1,jLo),e(W,DLo),e(W,d1),e(d1,Xfe),e(Xfe,GLo),e(d1,OLo),e(d1,iG),e(iG,VLo),e(d1,XLo),e(W,zLo),e(W,c1),e(c1,zfe),e(zfe,WLo),e(c1,QLo),e(c1,dG),e(dG,HLo),e(c1,ULo),e(W,JLo),e(W,f1),e(f1,Wfe),e(Wfe,YLo),e(f1,KLo),e(f1,cG),e(cG,ZLo),e(f1,e9o),e(W,o9o),e(W,m1),e(m1,Qfe),e(Qfe,r9o),e(m1,t9o),e(m1,fG),e(fG,a9o),e(m1,n9o),e(W,s9o),e(W,g1),e(g1,Hfe),e(Hfe,l9o),e(g1,i9o),e(g1,mG),e(mG,d9o),e(g1,c9o),e(W,f9o),e(W,h1),e(h1,Ufe),e(Ufe,m9o),e(h1,g9o),e(h1,gG),e(gG,h9o),e(h1,p9o),e(W,u9o),e(W,p1),e(p1,Jfe),e(Jfe,_9o),e(p1,b9o),e(p1,hG),e(hG,v9o),e(p1,F9o),e(W,T9o),e(W,u1),e(u1,Yfe),e(Yfe,M9o),e(u1,E9o),e(u1,pG),e(pG,C9o),e(u1,w9o),e(W,A9o),e(W,_1),e(_1,Kfe),e(Kfe,y9o),e(_1,L9o),e(_1,uG),e(uG,x9o),e(_1,$9o),e(W,k9o),e(W,b1),e(b1,Zfe),e(Zfe,S9o),e(b1,R9o),e(b1,_G),e(_G,P9o),e(b1,B9o),e(W,I9o),e(W,v1),e(v1,eme),e(eme,N9o),e(v1,q9o),e(v1,bG),e(bG,j9o),e(v1,D9o),e(W,G9o),e(W,F1),e(F1,ome),e(ome,O9o),e(F1,V9o),e(F1,vG),e(vG,X9o),e(F1,z9o),e(W,W9o),e(W,T1),e(T1,rme),e(rme,Q9o),e(T1,H9o),e(T1,FG),e(FG,U9o),e(T1,J9o),e(W,Y9o),e(W,M1),e(M1,tme),e(tme,K9o),e(M1,Z9o),e(M1,TG),e(TG,exo),e(M1,oxo),e(W,rxo),e(W,E1),e(E1,ame),e(ame,txo),e(E1,axo),e(E1,MG),e(MG,nxo),e(E1,sxo),e(W,lxo),e(W,C1),e(C1,nme),e(nme,ixo),e(C1,dxo),e(C1,EG),e(EG,cxo),e(C1,fxo),e(W,mxo),e(W,w1),e(w1,sme),e(sme,gxo),e(w1,hxo),e(w1,CG),e(CG,pxo),e(w1,uxo),e(W,_xo),e(W,A1),e(A1,lme),e(lme,bxo),e(A1,vxo),e(A1,wG),e(wG,Fxo),e(A1,Txo),e(W,Mxo),e(W,y1),e(y1,ime),e(ime,Exo),e(y1,Cxo),e(y1,AG),e(AG,wxo),e(y1,Axo),e(W,yxo),e(W,L1),e(L1,dme),e(dme,Lxo),e(L1,xxo),e(L1,yG),e(yG,$xo),e(L1,kxo),e(W,Sxo),e(W,x1),e(x1,cme),e(cme,Rxo),e(x1,Pxo),e(x1,LG),e(LG,Bxo),e(x1,Ixo),e(W,Nxo),e(W,$1),e($1,fme),e(fme,qxo),e($1,jxo),e($1,xG),e(xG,Dxo),e($1,Gxo),e(W,Oxo),e(W,k1),e(k1,mme),e(mme,Vxo),e(k1,Xxo),e(k1,$G),e($G,zxo),e(k1,Wxo),e(W,Qxo),e(W,S1),e(S1,gme),e(gme,Hxo),e(S1,Uxo),e(S1,kG),e(kG,Jxo),e(S1,Yxo),e(W,Kxo),e(W,R1),e(R1,hme),e(hme,Zxo),e(R1,e$o),e(R1,pme),e(pme,o$o),e(R1,r$o),e(W,t$o),e(W,P1),e(P1,ume),e(ume,a$o),e(P1,n$o),e(P1,SG),e(SG,s$o),e(P1,l$o),e(W,i$o),e(W,B1),e(B1,_me),e(_me,d$o),e(B1,c$o),e(B1,RG),e(RG,f$o),e(B1,m$o),e(W,g$o),e(W,I1),e(I1,bme),e(bme,h$o),e(I1,p$o),e(I1,PG),e(PG,u$o),e(I1,_$o),e(W,b$o),e(W,N1),e(N1,vme),e(vme,v$o),e(N1,F$o),e(N1,BG),e(BG,T$o),e(N1,M$o),e(Ze,E$o),e(Ze,q1),e(q1,C$o),e(q1,Fme),e(Fme,w$o),e(q1,A$o),e(q1,Tme),e(Tme,y$o),e(Ze,L$o),M(j1,Ze,null),b(f,uDe,_),b(f,zi,_),e(zi,D1),e(D1,Mme),M(YA,Mme,null),e(zi,x$o),e(zi,Eme),e(Eme,$$o),b(f,_De,_),b(f,Ro,_),M(KA,Ro,null),e(Ro,k$o),e(Ro,Wi),e(Wi,S$o),e(Wi,IG),e(IG,R$o),e(Wi,P$o),e(Wi,NG),e(NG,B$o),e(Wi,I$o),e(Ro,N$o),e(Ro,ZA),e(ZA,q$o),e(ZA,Cme),e(Cme,j$o),e(ZA,D$o),e(Ro,G$o),e(Ro,dt),M(ey,dt,null),e(dt,O$o),e(dt,wme),e(wme,V$o),e(dt,X$o),e(dt,Qi),e(Qi,z$o),e(Qi,Ame),e(Ame,W$o),e(Qi,Q$o),e(Qi,qG),e(qG,H$o),e(Qi,U$o),e(dt,J$o),M(G1,dt,null),e(Ro,Y$o),e(Ro,eo),M(oy,eo,null),e(eo,K$o),e(eo,yme),e(yme,Z$o),e(eo,eko),e(eo,Ia),e(Ia,oko),e(Ia,Lme),e(Lme,rko),e(Ia,tko),e(Ia,xme),e(xme,ako),e(Ia,nko),e(Ia,$me),e($me,sko),e(Ia,lko),e(eo,iko),e(eo,ue),e(ue,O1),e(O1,kme),e(kme,dko),e(O1,cko),e(O1,jG),e(jG,fko),e(O1,mko),e(ue,gko),e(ue,V1),e(V1,Sme),e(Sme,hko),e(V1,pko),e(V1,DG),e(DG,uko),e(V1,_ko),e(ue,bko),e(ue,X1),e(X1,Rme),e(Rme,vko),e(X1,Fko),e(X1,GG),e(GG,Tko),e(X1,Mko),e(ue,Eko),e(ue,z1),e(z1,Pme),e(Pme,Cko),e(z1,wko),e(z1,OG),e(OG,Ako),e(z1,yko),e(ue,Lko),e(ue,W1),e(W1,Bme),e(Bme,xko),e(W1,$ko),e(W1,VG),e(VG,kko),e(W1,Sko),e(ue,Rko),e(ue,Q1),e(Q1,Ime),e(Ime,Pko),e(Q1,Bko),e(Q1,XG),e(XG,Iko),e(Q1,Nko),e(ue,qko),e(ue,H1),e(H1,Nme),e(Nme,jko),e(H1,Dko),e(H1,zG),e(zG,Gko),e(H1,Oko),e(ue,Vko),e(ue,U1),e(U1,qme),e(qme,Xko),e(U1,zko),e(U1,WG),e(WG,Wko),e(U1,Qko),e(ue,Hko),e(ue,J1),e(J1,jme),e(jme,Uko),e(J1,Jko),e(J1,QG),e(QG,Yko),e(J1,Kko),e(ue,Zko),e(ue,Y1),e(Y1,Dme),e(Dme,eSo),e(Y1,oSo),e(Y1,HG),e(HG,rSo),e(Y1,tSo),e(ue,aSo),e(ue,K1),e(K1,Gme),e(Gme,nSo),e(K1,sSo),e(K1,UG),e(UG,lSo),e(K1,iSo),e(ue,dSo),e(ue,Z1),e(Z1,Ome),e(Ome,cSo),e(Z1,fSo),e(Z1,JG),e(JG,mSo),e(Z1,gSo),e(ue,hSo),e(ue,eb),e(eb,Vme),e(Vme,pSo),e(eb,uSo),e(eb,YG),e(YG,_So),e(eb,bSo),e(ue,vSo),e(ue,ob),e(ob,Xme),e(Xme,FSo),e(ob,TSo),e(ob,KG),e(KG,MSo),e(ob,ESo),e(ue,CSo),e(ue,rb),e(rb,zme),e(zme,wSo),e(rb,ASo),e(rb,ZG),e(ZG,ySo),e(rb,LSo),e(ue,xSo),e(ue,tb),e(tb,Wme),e(Wme,$So),e(tb,kSo),e(tb,eO),e(eO,SSo),e(tb,RSo),e(eo,PSo),e(eo,ab),e(ab,BSo),e(ab,Qme),e(Qme,ISo),e(ab,NSo),e(ab,Hme),e(Hme,qSo),e(eo,jSo),M(nb,eo,null),b(f,bDe,_),b(f,Hi,_),e(Hi,sb),e(sb,Ume),M(ry,Ume,null),e(Hi,DSo),e(Hi,Jme),e(Jme,GSo),b(f,vDe,_),b(f,Po,_),M(ty,Po,null),e(Po,OSo),e(Po,Ui),e(Ui,VSo),e(Ui,oO),e(oO,XSo),e(Ui,zSo),e(Ui,rO),e(rO,WSo),e(Ui,QSo),e(Po,HSo),e(Po,ay),e(ay,USo),e(ay,Yme),e(Yme,JSo),e(ay,YSo),e(Po,KSo),e(Po,ct),M(ny,ct,null),e(ct,ZSo),e(ct,Kme),e(Kme,eRo),e(ct,oRo),e(ct,Ji),e(Ji,rRo),e(Ji,Zme),e(Zme,tRo),e(Ji,aRo),e(Ji,tO),e(tO,nRo),e(Ji,sRo),e(ct,lRo),M(lb,ct,null),e(Po,iRo),e(Po,oo),M(sy,oo,null),e(oo,dRo),e(oo,ege),e(ege,cRo),e(oo,fRo),e(oo,Na),e(Na,mRo),e(Na,oge),e(oge,gRo),e(Na,hRo),e(Na,rge),e(rge,pRo),e(Na,uRo),e(Na,tge),e(tge,_Ro),e(Na,bRo),e(oo,vRo),e(oo,N),e(N,ib),e(ib,age),e(age,FRo),e(ib,TRo),e(ib,aO),e(aO,MRo),e(ib,ERo),e(N,CRo),e(N,db),e(db,nge),e(nge,wRo),e(db,ARo),e(db,nO),e(nO,yRo),e(db,LRo),e(N,xRo),e(N,cb),e(cb,sge),e(sge,$Ro),e(cb,kRo),e(cb,sO),e(sO,SRo),e(cb,RRo),e(N,PRo),e(N,fb),e(fb,lge),e(lge,BRo),e(fb,IRo),e(fb,lO),e(lO,NRo),e(fb,qRo),e(N,jRo),e(N,mb),e(mb,ige),e(ige,DRo),e(mb,GRo),e(mb,iO),e(iO,ORo),e(mb,VRo),e(N,XRo),e(N,gb),e(gb,dge),e(dge,zRo),e(gb,WRo),e(gb,dO),e(dO,QRo),e(gb,HRo),e(N,URo),e(N,hb),e(hb,cge),e(cge,JRo),e(hb,YRo),e(hb,cO),e(cO,KRo),e(hb,ZRo),e(N,ePo),e(N,pb),e(pb,fge),e(fge,oPo),e(pb,rPo),e(pb,fO),e(fO,tPo),e(pb,aPo),e(N,nPo),e(N,ub),e(ub,mge),e(mge,sPo),e(ub,lPo),e(ub,mO),e(mO,iPo),e(ub,dPo),e(N,cPo),e(N,_b),e(_b,gge),e(gge,fPo),e(_b,mPo),e(_b,gO),e(gO,gPo),e(_b,hPo),e(N,pPo),e(N,bb),e(bb,hge),e(hge,uPo),e(bb,_Po),e(bb,hO),e(hO,bPo),e(bb,vPo),e(N,FPo),e(N,vb),e(vb,pge),e(pge,TPo),e(vb,MPo),e(vb,pO),e(pO,EPo),e(vb,CPo),e(N,wPo),e(N,Fb),e(Fb,uge),e(uge,APo),e(Fb,yPo),e(Fb,uO),e(uO,LPo),e(Fb,xPo),e(N,$Po),e(N,Tb),e(Tb,_ge),e(_ge,kPo),e(Tb,SPo),e(Tb,_O),e(_O,RPo),e(Tb,PPo),e(N,BPo),e(N,Mb),e(Mb,bge),e(bge,IPo),e(Mb,NPo),e(Mb,bO),e(bO,qPo),e(Mb,jPo),e(N,DPo),e(N,Eb),e(Eb,vge),e(vge,GPo),e(Eb,OPo),e(Eb,vO),e(vO,VPo),e(Eb,XPo),e(N,zPo),e(N,Cb),e(Cb,Fge),e(Fge,WPo),e(Cb,QPo),e(Cb,FO),e(FO,HPo),e(Cb,UPo),e(N,JPo),e(N,wb),e(wb,Tge),e(Tge,YPo),e(wb,KPo),e(wb,TO),e(TO,ZPo),e(wb,eBo),e(N,oBo),e(N,Ab),e(Ab,Mge),e(Mge,rBo),e(Ab,tBo),e(Ab,MO),e(MO,aBo),e(Ab,nBo),e(N,sBo),e(N,yb),e(yb,Ege),e(Ege,lBo),e(yb,iBo),e(yb,EO),e(EO,dBo),e(yb,cBo),e(N,fBo),e(N,Lb),e(Lb,Cge),e(Cge,mBo),e(Lb,gBo),e(Lb,CO),e(CO,hBo),e(Lb,pBo),e(N,uBo),e(N,xb),e(xb,wge),e(wge,_Bo),e(xb,bBo),e(xb,wO),e(wO,vBo),e(xb,FBo),e(N,TBo),e(N,$b),e($b,Age),e(Age,MBo),e($b,EBo),e($b,AO),e(AO,CBo),e($b,wBo),e(N,ABo),e(N,kb),e(kb,yge),e(yge,yBo),e(kb,LBo),e(kb,yO),e(yO,xBo),e(kb,$Bo),e(N,kBo),e(N,Sb),e(Sb,Lge),e(Lge,SBo),e(Sb,RBo),e(Sb,LO),e(LO,PBo),e(Sb,BBo),e(N,IBo),e(N,Rb),e(Rb,xge),e(xge,NBo),e(Rb,qBo),e(Rb,xO),e(xO,jBo),e(Rb,DBo),e(N,GBo),e(N,Pb),e(Pb,$ge),e($ge,OBo),e(Pb,VBo),e(Pb,$O),e($O,XBo),e(Pb,zBo),e(N,WBo),e(N,Bb),e(Bb,kge),e(kge,QBo),e(Bb,HBo),e(Bb,kO),e(kO,UBo),e(Bb,JBo),e(N,YBo),e(N,Ib),e(Ib,Sge),e(Sge,KBo),e(Ib,ZBo),e(Ib,SO),e(SO,eIo),e(Ib,oIo),e(N,rIo),e(N,Nb),e(Nb,Rge),e(Rge,tIo),e(Nb,aIo),e(Nb,RO),e(RO,nIo),e(Nb,sIo),e(N,lIo),e(N,qb),e(qb,Pge),e(Pge,iIo),e(qb,dIo),e(qb,PO),e(PO,cIo),e(qb,fIo),e(N,mIo),e(N,jb),e(jb,Bge),e(Bge,gIo),e(jb,hIo),e(jb,BO),e(BO,pIo),e(jb,uIo),e(N,_Io),e(N,Db),e(Db,Ige),e(Ige,bIo),e(Db,vIo),e(Db,IO),e(IO,FIo),e(Db,TIo),e(N,MIo),e(N,Gb),e(Gb,Nge),e(Nge,EIo),e(Gb,CIo),e(Gb,NO),e(NO,wIo),e(Gb,AIo),e(N,yIo),e(N,Ob),e(Ob,qge),e(qge,LIo),e(Ob,xIo),e(Ob,qO),e(qO,$Io),e(Ob,kIo),e(N,SIo),e(N,Vb),e(Vb,jge),e(jge,RIo),e(Vb,PIo),e(Vb,jO),e(jO,BIo),e(Vb,IIo),e(N,NIo),e(N,Xb),e(Xb,Dge),e(Dge,qIo),e(Xb,jIo),e(Xb,DO),e(DO,DIo),e(Xb,GIo),e(N,OIo),e(N,zb),e(zb,Gge),e(Gge,VIo),e(zb,XIo),e(zb,GO),e(GO,zIo),e(zb,WIo),e(N,QIo),e(N,Wb),e(Wb,Oge),e(Oge,HIo),e(Wb,UIo),e(Wb,OO),e(OO,JIo),e(Wb,YIo),e(N,KIo),e(N,Qb),e(Qb,Vge),e(Vge,ZIo),e(Qb,eNo),e(Qb,VO),e(VO,oNo),e(Qb,rNo),e(N,tNo),e(N,Hb),e(Hb,Xge),e(Xge,aNo),e(Hb,nNo),e(Hb,XO),e(XO,sNo),e(Hb,lNo),e(N,iNo),e(N,Ub),e(Ub,zge),e(zge,dNo),e(Ub,cNo),e(Ub,zO),e(zO,fNo),e(Ub,mNo),e(N,gNo),e(N,Jb),e(Jb,Wge),e(Wge,hNo),e(Jb,pNo),e(Jb,WO),e(WO,uNo),e(Jb,_No),e(N,bNo),e(N,Yb),e(Yb,Qge),e(Qge,vNo),e(Yb,FNo),e(Yb,QO),e(QO,TNo),e(Yb,MNo),e(N,ENo),e(N,Kb),e(Kb,Hge),e(Hge,CNo),e(Kb,wNo),e(Kb,HO),e(HO,ANo),e(Kb,yNo),e(N,LNo),e(N,Zb),e(Zb,Uge),e(Uge,xNo),e(Zb,$No),e(Zb,UO),e(UO,kNo),e(Zb,SNo),e(N,RNo),e(N,ev),e(ev,Jge),e(Jge,PNo),e(ev,BNo),e(ev,JO),e(JO,INo),e(ev,NNo),e(oo,qNo),e(oo,ov),e(ov,jNo),e(ov,Yge),e(Yge,DNo),e(ov,GNo),e(ov,Kge),e(Kge,ONo),e(oo,VNo),M(rv,oo,null),b(f,FDe,_),b(f,Yi,_),e(Yi,tv),e(tv,Zge),M(ly,Zge,null),e(Yi,XNo),e(Yi,ehe),e(ehe,zNo),b(f,TDe,_),b(f,Bo,_),M(iy,Bo,null),e(Bo,WNo),e(Bo,Ki),e(Ki,QNo),e(Ki,YO),e(YO,HNo),e(Ki,UNo),e(Ki,KO),e(KO,JNo),e(Ki,YNo),e(Bo,KNo),e(Bo,dy),e(dy,ZNo),e(dy,ohe),e(ohe,eqo),e(dy,oqo),e(Bo,rqo),e(Bo,ft),M(cy,ft,null),e(ft,tqo),e(ft,rhe),e(rhe,aqo),e(ft,nqo),e(ft,Zi),e(Zi,sqo),e(Zi,the),e(the,lqo),e(Zi,iqo),e(Zi,ZO),e(ZO,dqo),e(Zi,cqo),e(ft,fqo),M(av,ft,null),e(Bo,mqo),e(Bo,ro),M(fy,ro,null),e(ro,gqo),e(ro,ahe),e(ahe,hqo),e(ro,pqo),e(ro,qa),e(qa,uqo),e(qa,nhe),e(nhe,_qo),e(qa,bqo),e(qa,she),e(she,vqo),e(qa,Fqo),e(qa,lhe),e(lhe,Tqo),e(qa,Mqo),e(ro,Eqo),e(ro,Z),e(Z,nv),e(nv,ihe),e(ihe,Cqo),e(nv,wqo),e(nv,eV),e(eV,Aqo),e(nv,yqo),e(Z,Lqo),e(Z,sv),e(sv,dhe),e(dhe,xqo),e(sv,$qo),e(sv,oV),e(oV,kqo),e(sv,Sqo),e(Z,Rqo),e(Z,lv),e(lv,che),e(che,Pqo),e(lv,Bqo),e(lv,rV),e(rV,Iqo),e(lv,Nqo),e(Z,qqo),e(Z,iv),e(iv,fhe),e(fhe,jqo),e(iv,Dqo),e(iv,tV),e(tV,Gqo),e(iv,Oqo),e(Z,Vqo),e(Z,dv),e(dv,mhe),e(mhe,Xqo),e(dv,zqo),e(dv,aV),e(aV,Wqo),e(dv,Qqo),e(Z,Hqo),e(Z,cv),e(cv,ghe),e(ghe,Uqo),e(cv,Jqo),e(cv,nV),e(nV,Yqo),e(cv,Kqo),e(Z,Zqo),e(Z,fv),e(fv,hhe),e(hhe,ejo),e(fv,ojo),e(fv,sV),e(sV,rjo),e(fv,tjo),e(Z,ajo),e(Z,mv),e(mv,phe),e(phe,njo),e(mv,sjo),e(mv,lV),e(lV,ljo),e(mv,ijo),e(Z,djo),e(Z,gv),e(gv,uhe),e(uhe,cjo),e(gv,fjo),e(gv,iV),e(iV,mjo),e(gv,gjo),e(Z,hjo),e(Z,hv),e(hv,_he),e(_he,pjo),e(hv,ujo),e(hv,dV),e(dV,_jo),e(hv,bjo),e(Z,vjo),e(Z,pv),e(pv,bhe),e(bhe,Fjo),e(pv,Tjo),e(pv,cV),e(cV,Mjo),e(pv,Ejo),e(Z,Cjo),e(Z,uv),e(uv,vhe),e(vhe,wjo),e(uv,Ajo),e(uv,fV),e(fV,yjo),e(uv,Ljo),e(Z,xjo),e(Z,_v),e(_v,Fhe),e(Fhe,$jo),e(_v,kjo),e(_v,mV),e(mV,Sjo),e(_v,Rjo),e(Z,Pjo),e(Z,bv),e(bv,The),e(The,Bjo),e(bv,Ijo),e(bv,gV),e(gV,Njo),e(bv,qjo),e(Z,jjo),e(Z,vv),e(vv,Mhe),e(Mhe,Djo),e(vv,Gjo),e(vv,hV),e(hV,Ojo),e(vv,Vjo),e(Z,Xjo),e(Z,Fv),e(Fv,Ehe),e(Ehe,zjo),e(Fv,Wjo),e(Fv,pV),e(pV,Qjo),e(Fv,Hjo),e(Z,Ujo),e(Z,Tv),e(Tv,Che),e(Che,Jjo),e(Tv,Yjo),e(Tv,uV),e(uV,Kjo),e(Tv,Zjo),e(Z,eDo),e(Z,Mv),e(Mv,whe),e(whe,oDo),e(Mv,rDo),e(Mv,_V),e(_V,tDo),e(Mv,aDo),e(Z,nDo),e(Z,Ev),e(Ev,Ahe),e(Ahe,sDo),e(Ev,lDo),e(Ev,bV),e(bV,iDo),e(Ev,dDo),e(Z,cDo),e(Z,Cv),e(Cv,yhe),e(yhe,fDo),e(Cv,mDo),e(Cv,vV),e(vV,gDo),e(Cv,hDo),e(Z,pDo),e(Z,wv),e(wv,Lhe),e(Lhe,uDo),e(wv,_Do),e(wv,FV),e(FV,bDo),e(wv,vDo),e(Z,FDo),e(Z,Av),e(Av,xhe),e(xhe,TDo),e(Av,MDo),e(Av,TV),e(TV,EDo),e(Av,CDo),e(Z,wDo),e(Z,yv),e(yv,$he),e($he,ADo),e(yv,yDo),e(yv,MV),e(MV,LDo),e(yv,xDo),e(Z,$Do),e(Z,Lv),e(Lv,khe),e(khe,kDo),e(Lv,SDo),e(Lv,EV),e(EV,RDo),e(Lv,PDo),e(Z,BDo),e(Z,xv),e(xv,She),e(She,IDo),e(xv,NDo),e(xv,CV),e(CV,qDo),e(xv,jDo),e(Z,DDo),e(Z,$v),e($v,Rhe),e(Rhe,GDo),e($v,ODo),e($v,wV),e(wV,VDo),e($v,XDo),e(Z,zDo),e(Z,kv),e(kv,Phe),e(Phe,WDo),e(kv,QDo),e(kv,AV),e(AV,HDo),e(kv,UDo),e(Z,JDo),e(Z,Sv),e(Sv,Bhe),e(Bhe,YDo),e(Sv,KDo),e(Sv,yV),e(yV,ZDo),e(Sv,eGo),e(Z,oGo),e(Z,Rv),e(Rv,Ihe),e(Ihe,rGo),e(Rv,tGo),e(Rv,LV),e(LV,aGo),e(Rv,nGo),e(ro,sGo),e(ro,Pv),e(Pv,lGo),e(Pv,Nhe),e(Nhe,iGo),e(Pv,dGo),e(Pv,qhe),e(qhe,cGo),e(ro,fGo),M(Bv,ro,null),b(f,MDe,_),b(f,ed,_),e(ed,Iv),e(Iv,jhe),M(my,jhe,null),e(ed,mGo),e(ed,Dhe),e(Dhe,gGo),b(f,EDe,_),b(f,Io,_),M(gy,Io,null),e(Io,hGo),e(Io,od),e(od,pGo),e(od,xV),e(xV,uGo),e(od,_Go),e(od,$V),e($V,bGo),e(od,vGo),e(Io,FGo),e(Io,hy),e(hy,TGo),e(hy,Ghe),e(Ghe,MGo),e(hy,EGo),e(Io,CGo),e(Io,mt),M(py,mt,null),e(mt,wGo),e(mt,Ohe),e(Ohe,AGo),e(mt,yGo),e(mt,rd),e(rd,LGo),e(rd,Vhe),e(Vhe,xGo),e(rd,$Go),e(rd,kV),e(kV,kGo),e(rd,SGo),e(mt,RGo),M(Nv,mt,null),e(Io,PGo),e(Io,to),M(uy,to,null),e(to,BGo),e(to,Xhe),e(Xhe,IGo),e(to,NGo),e(to,ja),e(ja,qGo),e(ja,zhe),e(zhe,jGo),e(ja,DGo),e(ja,Whe),e(Whe,GGo),e(ja,OGo),e(ja,Qhe),e(Qhe,VGo),e(ja,XGo),e(to,zGo),e(to,Zr),e(Zr,qv),e(qv,Hhe),e(Hhe,WGo),e(qv,QGo),e(qv,SV),e(SV,HGo),e(qv,UGo),e(Zr,JGo),e(Zr,jv),e(jv,Uhe),e(Uhe,YGo),e(jv,KGo),e(jv,RV),e(RV,ZGo),e(jv,eOo),e(Zr,oOo),e(Zr,Dv),e(Dv,Jhe),e(Jhe,rOo),e(Dv,tOo),e(Dv,PV),e(PV,aOo),e(Dv,nOo),e(Zr,sOo),e(Zr,Gv),e(Gv,Yhe),e(Yhe,lOo),e(Gv,iOo),e(Gv,BV),e(BV,dOo),e(Gv,cOo),e(Zr,fOo),e(Zr,Ov),e(Ov,Khe),e(Khe,mOo),e(Ov,gOo),e(Ov,IV),e(IV,hOo),e(Ov,pOo),e(to,uOo),e(to,Vv),e(Vv,_Oo),e(Vv,Zhe),e(Zhe,bOo),e(Vv,vOo),e(Vv,epe),e(epe,FOo),e(to,TOo),M(Xv,to,null),b(f,CDe,_),b(f,td,_),e(td,zv),e(zv,ope),M(_y,ope,null),e(td,MOo),e(td,rpe),e(rpe,EOo),b(f,wDe,_),b(f,No,_),M(by,No,null),e(No,COo),e(No,ad),e(ad,wOo),e(ad,NV),e(NV,AOo),e(ad,yOo),e(ad,qV),e(qV,LOo),e(ad,xOo),e(No,$Oo),e(No,vy),e(vy,kOo),e(vy,tpe),e(tpe,SOo),e(vy,ROo),e(No,POo),e(No,gt),M(Fy,gt,null),e(gt,BOo),e(gt,ape),e(ape,IOo),e(gt,NOo),e(gt,nd),e(nd,qOo),e(nd,npe),e(npe,jOo),e(nd,DOo),e(nd,jV),e(jV,GOo),e(nd,OOo),e(gt,VOo),M(Wv,gt,null),e(No,XOo),e(No,ao),M(Ty,ao,null),e(ao,zOo),e(ao,spe),e(spe,WOo),e(ao,QOo),e(ao,Da),e(Da,HOo),e(Da,lpe),e(lpe,UOo),e(Da,JOo),e(Da,ipe),e(ipe,YOo),e(Da,KOo),e(Da,dpe),e(dpe,ZOo),e(Da,eVo),e(ao,oVo),e(ao,U),e(U,Qv),e(Qv,cpe),e(cpe,rVo),e(Qv,tVo),e(Qv,DV),e(DV,aVo),e(Qv,nVo),e(U,sVo),e(U,Hv),e(Hv,fpe),e(fpe,lVo),e(Hv,iVo),e(Hv,GV),e(GV,dVo),e(Hv,cVo),e(U,fVo),e(U,Uv),e(Uv,mpe),e(mpe,mVo),e(Uv,gVo),e(Uv,OV),e(OV,hVo),e(Uv,pVo),e(U,uVo),e(U,Jv),e(Jv,gpe),e(gpe,_Vo),e(Jv,bVo),e(Jv,VV),e(VV,vVo),e(Jv,FVo),e(U,TVo),e(U,Yv),e(Yv,hpe),e(hpe,MVo),e(Yv,EVo),e(Yv,XV),e(XV,CVo),e(Yv,wVo),e(U,AVo),e(U,Kv),e(Kv,ppe),e(ppe,yVo),e(Kv,LVo),e(Kv,zV),e(zV,xVo),e(Kv,$Vo),e(U,kVo),e(U,Zv),e(Zv,upe),e(upe,SVo),e(Zv,RVo),e(Zv,WV),e(WV,PVo),e(Zv,BVo),e(U,IVo),e(U,eF),e(eF,_pe),e(_pe,NVo),e(eF,qVo),e(eF,QV),e(QV,jVo),e(eF,DVo),e(U,GVo),e(U,oF),e(oF,bpe),e(bpe,OVo),e(oF,VVo),e(oF,HV),e(HV,XVo),e(oF,zVo),e(U,WVo),e(U,rF),e(rF,vpe),e(vpe,QVo),e(rF,HVo),e(rF,UV),e(UV,UVo),e(rF,JVo),e(U,YVo),e(U,tF),e(tF,Fpe),e(Fpe,KVo),e(tF,ZVo),e(tF,JV),e(JV,eXo),e(tF,oXo),e(U,rXo),e(U,aF),e(aF,Tpe),e(Tpe,tXo),e(aF,aXo),e(aF,YV),e(YV,nXo),e(aF,sXo),e(U,lXo),e(U,nF),e(nF,Mpe),e(Mpe,iXo),e(nF,dXo),e(nF,KV),e(KV,cXo),e(nF,fXo),e(U,mXo),e(U,sF),e(sF,Epe),e(Epe,gXo),e(sF,hXo),e(sF,ZV),e(ZV,pXo),e(sF,uXo),e(U,_Xo),e(U,lF),e(lF,Cpe),e(Cpe,bXo),e(lF,vXo),e(lF,eX),e(eX,FXo),e(lF,TXo),e(U,MXo),e(U,iF),e(iF,wpe),e(wpe,EXo),e(iF,CXo),e(iF,oX),e(oX,wXo),e(iF,AXo),e(U,yXo),e(U,dF),e(dF,Ape),e(Ape,LXo),e(dF,xXo),e(dF,rX),e(rX,$Xo),e(dF,kXo),e(U,SXo),e(U,cF),e(cF,ype),e(ype,RXo),e(cF,PXo),e(cF,tX),e(tX,BXo),e(cF,IXo),e(U,NXo),e(U,fF),e(fF,Lpe),e(Lpe,qXo),e(fF,jXo),e(fF,aX),e(aX,DXo),e(fF,GXo),e(U,OXo),e(U,mF),e(mF,xpe),e(xpe,VXo),e(mF,XXo),e(mF,nX),e(nX,zXo),e(mF,WXo),e(U,QXo),e(U,gF),e(gF,$pe),e($pe,HXo),e(gF,UXo),e(gF,sX),e(sX,JXo),e(gF,YXo),e(U,KXo),e(U,hF),e(hF,kpe),e(kpe,ZXo),e(hF,ezo),e(hF,lX),e(lX,ozo),e(hF,rzo),e(U,tzo),e(U,pF),e(pF,Spe),e(Spe,azo),e(pF,nzo),e(pF,iX),e(iX,szo),e(pF,lzo),e(U,izo),e(U,uF),e(uF,Rpe),e(Rpe,dzo),e(uF,czo),e(uF,dX),e(dX,fzo),e(uF,mzo),e(U,gzo),e(U,_F),e(_F,Ppe),e(Ppe,hzo),e(_F,pzo),e(_F,cX),e(cX,uzo),e(_F,_zo),e(U,bzo),e(U,bF),e(bF,Bpe),e(Bpe,vzo),e(bF,Fzo),e(bF,fX),e(fX,Tzo),e(bF,Mzo),e(U,Ezo),e(U,vF),e(vF,Ipe),e(Ipe,Czo),e(vF,wzo),e(vF,mX),e(mX,Azo),e(vF,yzo),e(U,Lzo),e(U,FF),e(FF,Npe),e(Npe,xzo),e(FF,$zo),e(FF,gX),e(gX,kzo),e(FF,Szo),e(U,Rzo),e(U,TF),e(TF,qpe),e(qpe,Pzo),e(TF,Bzo),e(TF,hX),e(hX,Izo),e(TF,Nzo),e(U,qzo),e(U,MF),e(MF,jpe),e(jpe,jzo),e(MF,Dzo),e(MF,pX),e(pX,Gzo),e(MF,Ozo),e(U,Vzo),e(U,EF),e(EF,Dpe),e(Dpe,Xzo),e(EF,zzo),e(EF,uX),e(uX,Wzo),e(EF,Qzo),e(U,Hzo),e(U,CF),e(CF,Gpe),e(Gpe,Uzo),e(CF,Jzo),e(CF,_X),e(_X,Yzo),e(CF,Kzo),e(U,Zzo),e(U,wF),e(wF,Ope),e(Ope,eWo),e(wF,oWo),e(wF,bX),e(bX,rWo),e(wF,tWo),e(U,aWo),e(U,AF),e(AF,Vpe),e(Vpe,nWo),e(AF,sWo),e(AF,vX),e(vX,lWo),e(AF,iWo),e(ao,dWo),e(ao,yF),e(yF,cWo),e(yF,Xpe),e(Xpe,fWo),e(yF,mWo),e(yF,zpe),e(zpe,gWo),e(ao,hWo),M(LF,ao,null),b(f,ADe,_),b(f,sd,_),e(sd,xF),e(xF,Wpe),M(My,Wpe,null),e(sd,pWo),e(sd,Qpe),e(Qpe,uWo),b(f,yDe,_),b(f,qo,_),M(Ey,qo,null),e(qo,_Wo),e(qo,ld),e(ld,bWo),e(ld,FX),e(FX,vWo),e(ld,FWo),e(ld,TX),e(TX,TWo),e(ld,MWo),e(qo,EWo),e(qo,Cy),e(Cy,CWo),e(Cy,Hpe),e(Hpe,wWo),e(Cy,AWo),e(qo,yWo),e(qo,ht),M(wy,ht,null),e(ht,LWo),e(ht,Upe),e(Upe,xWo),e(ht,$Wo),e(ht,id),e(id,kWo),e(id,Jpe),e(Jpe,SWo),e(id,RWo),e(id,MX),e(MX,PWo),e(id,BWo),e(ht,IWo),M($F,ht,null),e(qo,NWo),e(qo,no),M(Ay,no,null),e(no,qWo),e(no,Ype),e(Ype,jWo),e(no,DWo),e(no,Ga),e(Ga,GWo),e(Ga,Kpe),e(Kpe,OWo),e(Ga,VWo),e(Ga,Zpe),e(Zpe,XWo),e(Ga,zWo),e(Ga,eue),e(eue,WWo),e(Ga,QWo),e(no,HWo),e(no,V),e(V,kF),e(kF,oue),e(oue,UWo),e(kF,JWo),e(kF,EX),e(EX,YWo),e(kF,KWo),e(V,ZWo),e(V,SF),e(SF,rue),e(rue,eQo),e(SF,oQo),e(SF,CX),e(CX,rQo),e(SF,tQo),e(V,aQo),e(V,RF),e(RF,tue),e(tue,nQo),e(RF,sQo),e(RF,wX),e(wX,lQo),e(RF,iQo),e(V,dQo),e(V,PF),e(PF,aue),e(aue,cQo),e(PF,fQo),e(PF,AX),e(AX,mQo),e(PF,gQo),e(V,hQo),e(V,BF),e(BF,nue),e(nue,pQo),e(BF,uQo),e(BF,yX),e(yX,_Qo),e(BF,bQo),e(V,vQo),e(V,IF),e(IF,sue),e(sue,FQo),e(IF,TQo),e(IF,LX),e(LX,MQo),e(IF,EQo),e(V,CQo),e(V,NF),e(NF,lue),e(lue,wQo),e(NF,AQo),e(NF,xX),e(xX,yQo),e(NF,LQo),e(V,xQo),e(V,qF),e(qF,iue),e(iue,$Qo),e(qF,kQo),e(qF,$X),e($X,SQo),e(qF,RQo),e(V,PQo),e(V,jF),e(jF,due),e(due,BQo),e(jF,IQo),e(jF,kX),e(kX,NQo),e(jF,qQo),e(V,jQo),e(V,DF),e(DF,cue),e(cue,DQo),e(DF,GQo),e(DF,SX),e(SX,OQo),e(DF,VQo),e(V,XQo),e(V,GF),e(GF,fue),e(fue,zQo),e(GF,WQo),e(GF,RX),e(RX,QQo),e(GF,HQo),e(V,UQo),e(V,OF),e(OF,mue),e(mue,JQo),e(OF,YQo),e(OF,PX),e(PX,KQo),e(OF,ZQo),e(V,eHo),e(V,VF),e(VF,gue),e(gue,oHo),e(VF,rHo),e(VF,BX),e(BX,tHo),e(VF,aHo),e(V,nHo),e(V,XF),e(XF,hue),e(hue,sHo),e(XF,lHo),e(XF,IX),e(IX,iHo),e(XF,dHo),e(V,cHo),e(V,zF),e(zF,pue),e(pue,fHo),e(zF,mHo),e(zF,NX),e(NX,gHo),e(zF,hHo),e(V,pHo),e(V,WF),e(WF,uue),e(uue,uHo),e(WF,_Ho),e(WF,qX),e(qX,bHo),e(WF,vHo),e(V,FHo),e(V,QF),e(QF,_ue),e(_ue,THo),e(QF,MHo),e(QF,jX),e(jX,EHo),e(QF,CHo),e(V,wHo),e(V,HF),e(HF,bue),e(bue,AHo),e(HF,yHo),e(HF,DX),e(DX,LHo),e(HF,xHo),e(V,$Ho),e(V,UF),e(UF,vue),e(vue,kHo),e(UF,SHo),e(UF,GX),e(GX,RHo),e(UF,PHo),e(V,BHo),e(V,JF),e(JF,Fue),e(Fue,IHo),e(JF,NHo),e(JF,OX),e(OX,qHo),e(JF,jHo),e(V,DHo),e(V,YF),e(YF,Tue),e(Tue,GHo),e(YF,OHo),e(YF,VX),e(VX,VHo),e(YF,XHo),e(V,zHo),e(V,KF),e(KF,Mue),e(Mue,WHo),e(KF,QHo),e(KF,XX),e(XX,HHo),e(KF,UHo),e(V,JHo),e(V,ZF),e(ZF,Eue),e(Eue,YHo),e(ZF,KHo),e(ZF,zX),e(zX,ZHo),e(ZF,eUo),e(V,oUo),e(V,e6),e(e6,Cue),e(Cue,rUo),e(e6,tUo),e(e6,WX),e(WX,aUo),e(e6,nUo),e(V,sUo),e(V,o6),e(o6,wue),e(wue,lUo),e(o6,iUo),e(o6,QX),e(QX,dUo),e(o6,cUo),e(V,fUo),e(V,r6),e(r6,Aue),e(Aue,mUo),e(r6,gUo),e(r6,HX),e(HX,hUo),e(r6,pUo),e(V,uUo),e(V,t6),e(t6,yue),e(yue,_Uo),e(t6,bUo),e(t6,UX),e(UX,vUo),e(t6,FUo),e(V,TUo),e(V,a6),e(a6,Lue),e(Lue,MUo),e(a6,EUo),e(a6,JX),e(JX,CUo),e(a6,wUo),e(V,AUo),e(V,n6),e(n6,xue),e(xue,yUo),e(n6,LUo),e(n6,YX),e(YX,xUo),e(n6,$Uo),e(V,kUo),e(V,s6),e(s6,$ue),e($ue,SUo),e(s6,RUo),e(s6,KX),e(KX,PUo),e(s6,BUo),e(V,IUo),e(V,l6),e(l6,kue),e(kue,NUo),e(l6,qUo),e(l6,ZX),e(ZX,jUo),e(l6,DUo),e(V,GUo),e(V,i6),e(i6,Sue),e(Sue,OUo),e(i6,VUo),e(i6,ez),e(ez,XUo),e(i6,zUo),e(V,WUo),e(V,d6),e(d6,Rue),e(Rue,QUo),e(d6,HUo),e(d6,oz),e(oz,UUo),e(d6,JUo),e(V,YUo),e(V,c6),e(c6,Pue),e(Pue,KUo),e(c6,ZUo),e(c6,rz),e(rz,eJo),e(c6,oJo),e(V,rJo),e(V,f6),e(f6,Bue),e(Bue,tJo),e(f6,aJo),e(f6,tz),e(tz,nJo),e(f6,sJo),e(V,lJo),e(V,m6),e(m6,Iue),e(Iue,iJo),e(m6,dJo),e(m6,az),e(az,cJo),e(m6,fJo),e(V,mJo),e(V,g6),e(g6,Nue),e(Nue,gJo),e(g6,hJo),e(g6,nz),e(nz,pJo),e(g6,uJo),e(V,_Jo),e(V,h6),e(h6,que),e(que,bJo),e(h6,vJo),e(h6,sz),e(sz,FJo),e(h6,TJo),e(V,MJo),e(V,p6),e(p6,jue),e(jue,EJo),e(p6,CJo),e(p6,lz),e(lz,wJo),e(p6,AJo),e(V,yJo),e(V,u6),e(u6,Due),e(Due,LJo),e(u6,xJo),e(u6,iz),e(iz,$Jo),e(u6,kJo),e(no,SJo),e(no,_6),e(_6,RJo),e(_6,Gue),e(Gue,PJo),e(_6,BJo),e(_6,Oue),e(Oue,IJo),e(no,NJo),M(b6,no,null),b(f,LDe,_),b(f,dd,_),e(dd,v6),e(v6,Vue),M(yy,Vue,null),e(dd,qJo),e(dd,Xue),e(Xue,jJo),b(f,xDe,_),b(f,jo,_),M(Ly,jo,null),e(jo,DJo),e(jo,cd),e(cd,GJo),e(cd,dz),e(dz,OJo),e(cd,VJo),e(cd,cz),e(cz,XJo),e(cd,zJo),e(jo,WJo),e(jo,xy),e(xy,QJo),e(xy,zue),e(zue,HJo),e(xy,UJo),e(jo,JJo),e(jo,pt),M($y,pt,null),e(pt,YJo),e(pt,Wue),e(Wue,KJo),e(pt,ZJo),e(pt,fd),e(fd,eYo),e(fd,Que),e(Que,oYo),e(fd,rYo),e(fd,fz),e(fz,tYo),e(fd,aYo),e(pt,nYo),M(F6,pt,null),e(jo,sYo),e(jo,so),M(ky,so,null),e(so,lYo),e(so,Hue),e(Hue,iYo),e(so,dYo),e(so,Oa),e(Oa,cYo),e(Oa,Uue),e(Uue,fYo),e(Oa,mYo),e(Oa,Jue),e(Jue,gYo),e(Oa,hYo),e(Oa,Yue),e(Yue,pYo),e(Oa,uYo),e(so,_Yo),e(so,Kue),e(Kue,T6),e(T6,Zue),e(Zue,bYo),e(T6,vYo),e(T6,mz),e(mz,FYo),e(T6,TYo),e(so,MYo),e(so,M6),e(M6,EYo),e(M6,e_e),e(e_e,CYo),e(M6,wYo),e(M6,o_e),e(o_e,AYo),e(so,yYo),M(E6,so,null),b(f,$De,_),b(f,md,_),e(md,C6),e(C6,r_e),M(Sy,r_e,null),e(md,LYo),e(md,t_e),e(t_e,xYo),b(f,kDe,_),b(f,Do,_),M(Ry,Do,null),e(Do,$Yo),e(Do,gd),e(gd,kYo),e(gd,gz),e(gz,SYo),e(gd,RYo),e(gd,hz),e(hz,PYo),e(gd,BYo),e(Do,IYo),e(Do,Py),e(Py,NYo),e(Py,a_e),e(a_e,qYo),e(Py,jYo),e(Do,DYo),e(Do,ut),M(By,ut,null),e(ut,GYo),e(ut,n_e),e(n_e,OYo),e(ut,VYo),e(ut,hd),e(hd,XYo),e(hd,s_e),e(s_e,zYo),e(hd,WYo),e(hd,pz),e(pz,QYo),e(hd,HYo),e(ut,UYo),M(w6,ut,null),e(Do,JYo),e(Do,lo),M(Iy,lo,null),e(lo,YYo),e(lo,l_e),e(l_e,KYo),e(lo,ZYo),e(lo,Va),e(Va,eKo),e(Va,i_e),e(i_e,oKo),e(Va,rKo),e(Va,d_e),e(d_e,tKo),e(Va,aKo),e(Va,c_e),e(c_e,nKo),e(Va,sKo),e(lo,lKo),e(lo,ve),e(ve,A6),e(A6,f_e),e(f_e,iKo),e(A6,dKo),e(A6,uz),e(uz,cKo),e(A6,fKo),e(ve,mKo),e(ve,y6),e(y6,m_e),e(m_e,gKo),e(y6,hKo),e(y6,_z),e(_z,pKo),e(y6,uKo),e(ve,_Ko),e(ve,L6),e(L6,g_e),e(g_e,bKo),e(L6,vKo),e(L6,bz),e(bz,FKo),e(L6,TKo),e(ve,MKo),e(ve,x6),e(x6,h_e),e(h_e,EKo),e(x6,CKo),e(x6,vz),e(vz,wKo),e(x6,AKo),e(ve,yKo),e(ve,Gs),e(Gs,p_e),e(p_e,LKo),e(Gs,xKo),e(Gs,Fz),e(Fz,$Ko),e(Gs,kKo),e(Gs,Tz),e(Tz,SKo),e(Gs,RKo),e(ve,PKo),e(ve,$6),e($6,u_e),e(u_e,BKo),e($6,IKo),e($6,Mz),e(Mz,NKo),e($6,qKo),e(ve,jKo),e(ve,Os),e(Os,__e),e(__e,DKo),e(Os,GKo),e(Os,Ez),e(Ez,OKo),e(Os,VKo),e(Os,Cz),e(Cz,XKo),e(Os,zKo),e(ve,WKo),e(ve,_t),e(_t,b_e),e(b_e,QKo),e(_t,HKo),e(_t,wz),e(wz,UKo),e(_t,JKo),e(_t,Az),e(Az,YKo),e(_t,KKo),e(_t,yz),e(yz,ZKo),e(_t,eZo),e(ve,oZo),e(ve,k6),e(k6,v_e),e(v_e,rZo),e(k6,tZo),e(k6,Lz),e(Lz,aZo),e(k6,nZo),e(ve,sZo),e(ve,S6),e(S6,F_e),e(F_e,lZo),e(S6,iZo),e(S6,xz),e(xz,dZo),e(S6,cZo),e(ve,fZo),e(ve,R6),e(R6,T_e),e(T_e,mZo),e(R6,gZo),e(R6,$z),e($z,hZo),e(R6,pZo),e(ve,uZo),e(ve,P6),e(P6,M_e),e(M_e,_Zo),e(P6,bZo),e(P6,kz),e(kz,vZo),e(P6,FZo),e(ve,TZo),e(ve,B6),e(B6,E_e),e(E_e,MZo),e(B6,EZo),e(B6,Sz),e(Sz,CZo),e(B6,wZo),e(ve,AZo),e(ve,I6),e(I6,C_e),e(C_e,yZo),e(I6,LZo),e(I6,Rz),e(Rz,xZo),e(I6,$Zo),e(ve,kZo),e(ve,N6),e(N6,w_e),e(w_e,SZo),e(N6,RZo),e(N6,Pz),e(Pz,PZo),e(N6,BZo),e(lo,IZo),e(lo,q6),e(q6,NZo),e(q6,A_e),e(A_e,qZo),e(q6,jZo),e(q6,y_e),e(y_e,DZo),e(lo,GZo),M(j6,lo,null),b(f,SDe,_),b(f,pd,_),e(pd,D6),e(D6,L_e),M(Ny,L_e,null),e(pd,OZo),e(pd,x_e),e(x_e,VZo),b(f,RDe,_),b(f,Go,_),M(qy,Go,null),e(Go,XZo),e(Go,ud),e(ud,zZo),e(ud,Bz),e(Bz,WZo),e(ud,QZo),e(ud,Iz),e(Iz,HZo),e(ud,UZo),e(Go,JZo),e(Go,jy),e(jy,YZo),e(jy,$_e),e($_e,KZo),e(jy,ZZo),e(Go,eer),e(Go,bt),M(Dy,bt,null),e(bt,oer),e(bt,k_e),e(k_e,rer),e(bt,ter),e(bt,_d),e(_d,aer),e(_d,S_e),e(S_e,ner),e(_d,ser),e(_d,Nz),e(Nz,ler),e(_d,ier),e(bt,der),M(G6,bt,null),e(Go,cer),e(Go,io),M(Gy,io,null),e(io,fer),e(io,R_e),e(R_e,mer),e(io,ger),e(io,Xa),e(Xa,her),e(Xa,P_e),e(P_e,per),e(Xa,uer),e(Xa,B_e),e(B_e,_er),e(Xa,ber),e(Xa,I_e),e(I_e,ver),e(Xa,Fer),e(io,Ter),e(io,N_e),e(N_e,O6),e(O6,q_e),e(q_e,Mer),e(O6,Eer),e(O6,qz),e(qz,Cer),e(O6,wer),e(io,Aer),e(io,V6),e(V6,yer),e(V6,j_e),e(j_e,Ler),e(V6,xer),e(V6,D_e),e(D_e,$er),e(io,ker),M(X6,io,null),b(f,PDe,_),b(f,bd,_),e(bd,z6),e(z6,G_e),M(Oy,G_e,null),e(bd,Ser),e(bd,O_e),e(O_e,Rer),b(f,BDe,_),b(f,Oo,_),M(Vy,Oo,null),e(Oo,Per),e(Oo,vd),e(vd,Ber),e(vd,jz),e(jz,Ier),e(vd,Ner),e(vd,Dz),e(Dz,qer),e(vd,jer),e(Oo,Der),e(Oo,Xy),e(Xy,Ger),e(Xy,V_e),e(V_e,Oer),e(Xy,Ver),e(Oo,Xer),e(Oo,vt),M(zy,vt,null),e(vt,zer),e(vt,X_e),e(X_e,Wer),e(vt,Qer),e(vt,Fd),e(Fd,Her),e(Fd,z_e),e(z_e,Uer),e(Fd,Jer),e(Fd,Gz),e(Gz,Yer),e(Fd,Ker),e(vt,Zer),M(W6,vt,null),e(Oo,eor),e(Oo,co),M(Wy,co,null),e(co,oor),e(co,W_e),e(W_e,ror),e(co,tor),e(co,za),e(za,aor),e(za,Q_e),e(Q_e,nor),e(za,sor),e(za,H_e),e(H_e,lor),e(za,ior),e(za,U_e),e(U_e,dor),e(za,cor),e(co,mor),e(co,J_e),e(J_e,Q6),e(Q6,Y_e),e(Y_e,gor),e(Q6,hor),e(Q6,Oz),e(Oz,por),e(Q6,uor),e(co,_or),e(co,H6),e(H6,bor),e(H6,K_e),e(K_e,vor),e(H6,For),e(H6,Z_e),e(Z_e,Tor),e(co,Mor),M(U6,co,null),b(f,IDe,_),b(f,Td,_),e(Td,J6),e(J6,e2e),M(Qy,e2e,null),e(Td,Eor),e(Td,o2e),e(o2e,Cor),b(f,NDe,_),b(f,Vo,_),M(Hy,Vo,null),e(Vo,wor),e(Vo,Md),e(Md,Aor),e(Md,Vz),e(Vz,yor),e(Md,Lor),e(Md,Xz),e(Xz,xor),e(Md,$or),e(Vo,kor),e(Vo,Uy),e(Uy,Sor),e(Uy,r2e),e(r2e,Ror),e(Uy,Por),e(Vo,Bor),e(Vo,Ft),M(Jy,Ft,null),e(Ft,Ior),e(Ft,t2e),e(t2e,Nor),e(Ft,qor),e(Ft,Ed),e(Ed,jor),e(Ed,a2e),e(a2e,Dor),e(Ed,Gor),e(Ed,zz),e(zz,Oor),e(Ed,Vor),e(Ft,Xor),M(Y6,Ft,null),e(Vo,zor),e(Vo,fo),M(Yy,fo,null),e(fo,Wor),e(fo,n2e),e(n2e,Qor),e(fo,Hor),e(fo,Wa),e(Wa,Uor),e(Wa,s2e),e(s2e,Jor),e(Wa,Yor),e(Wa,l2e),e(l2e,Kor),e(Wa,Zor),e(Wa,i2e),e(i2e,err),e(Wa,orr),e(fo,rrr),e(fo,Re),e(Re,K6),e(K6,d2e),e(d2e,trr),e(K6,arr),e(K6,Wz),e(Wz,nrr),e(K6,srr),e(Re,lrr),e(Re,Z6),e(Z6,c2e),e(c2e,irr),e(Z6,drr),e(Z6,Qz),e(Qz,crr),e(Z6,frr),e(Re,mrr),e(Re,eT),e(eT,f2e),e(f2e,grr),e(eT,hrr),e(eT,Hz),e(Hz,prr),e(eT,urr),e(Re,_rr),e(Re,oT),e(oT,m2e),e(m2e,brr),e(oT,vrr),e(oT,Uz),e(Uz,Frr),e(oT,Trr),e(Re,Mrr),e(Re,rT),e(rT,g2e),e(g2e,Err),e(rT,Crr),e(rT,Jz),e(Jz,wrr),e(rT,Arr),e(Re,yrr),e(Re,tT),e(tT,h2e),e(h2e,Lrr),e(tT,xrr),e(tT,Yz),e(Yz,$rr),e(tT,krr),e(Re,Srr),e(Re,aT),e(aT,p2e),e(p2e,Rrr),e(aT,Prr),e(aT,Kz),e(Kz,Brr),e(aT,Irr),e(Re,Nrr),e(Re,nT),e(nT,u2e),e(u2e,qrr),e(nT,jrr),e(nT,Zz),e(Zz,Drr),e(nT,Grr),e(Re,Orr),e(Re,sT),e(sT,_2e),e(_2e,Vrr),e(sT,Xrr),e(sT,eW),e(eW,zrr),e(sT,Wrr),e(fo,Qrr),e(fo,lT),e(lT,Hrr),e(lT,b2e),e(b2e,Urr),e(lT,Jrr),e(lT,v2e),e(v2e,Yrr),e(fo,Krr),M(iT,fo,null),b(f,qDe,_),b(f,Cd,_),e(Cd,dT),e(dT,F2e),M(Ky,F2e,null),e(Cd,Zrr),e(Cd,T2e),e(T2e,etr),b(f,jDe,_),b(f,Xo,_),M(Zy,Xo,null),e(Xo,otr),e(Xo,wd),e(wd,rtr),e(wd,oW),e(oW,ttr),e(wd,atr),e(wd,rW),e(rW,ntr),e(wd,str),e(Xo,ltr),e(Xo,eL),e(eL,itr),e(eL,M2e),e(M2e,dtr),e(eL,ctr),e(Xo,ftr),e(Xo,Tt),M(oL,Tt,null),e(Tt,mtr),e(Tt,E2e),e(E2e,gtr),e(Tt,htr),e(Tt,Ad),e(Ad,ptr),e(Ad,C2e),e(C2e,utr),e(Ad,_tr),e(Ad,tW),e(tW,btr),e(Ad,vtr),e(Tt,Ftr),M(cT,Tt,null),e(Xo,Ttr),e(Xo,mo),M(rL,mo,null),e(mo,Mtr),e(mo,w2e),e(w2e,Etr),e(mo,Ctr),e(mo,Qa),e(Qa,wtr),e(Qa,A2e),e(A2e,Atr),e(Qa,ytr),e(Qa,y2e),e(y2e,Ltr),e(Qa,xtr),e(Qa,L2e),e(L2e,$tr),e(Qa,ktr),e(mo,Str),e(mo,et),e(et,fT),e(fT,x2e),e(x2e,Rtr),e(fT,Ptr),e(fT,aW),e(aW,Btr),e(fT,Itr),e(et,Ntr),e(et,mT),e(mT,$2e),e($2e,qtr),e(mT,jtr),e(mT,nW),e(nW,Dtr),e(mT,Gtr),e(et,Otr),e(et,gT),e(gT,k2e),e(k2e,Vtr),e(gT,Xtr),e(gT,sW),e(sW,ztr),e(gT,Wtr),e(et,Qtr),e(et,hT),e(hT,S2e),e(S2e,Htr),e(hT,Utr),e(hT,lW),e(lW,Jtr),e(hT,Ytr),e(et,Ktr),e(et,pT),e(pT,R2e),e(R2e,Ztr),e(pT,ear),e(pT,iW),e(iW,oar),e(pT,rar),e(mo,tar),e(mo,uT),e(uT,aar),e(uT,P2e),e(P2e,nar),e(uT,sar),e(uT,B2e),e(B2e,lar),e(mo,iar),M(_T,mo,null),b(f,DDe,_),b(f,yd,_),e(yd,bT),e(bT,I2e),M(tL,I2e,null),e(yd,dar),e(yd,N2e),e(N2e,car),b(f,GDe,_),b(f,zo,_),M(aL,zo,null),e(zo,far),e(zo,Ld),e(Ld,mar),e(Ld,dW),e(dW,gar),e(Ld,har),e(Ld,cW),e(cW,par),e(Ld,uar),e(zo,_ar),e(zo,nL),e(nL,bar),e(nL,q2e),e(q2e,Far),e(nL,Tar),e(zo,Mar),e(zo,Mt),M(sL,Mt,null),e(Mt,Ear),e(Mt,j2e),e(j2e,Car),e(Mt,war),e(Mt,xd),e(xd,Aar),e(xd,D2e),e(D2e,yar),e(xd,Lar),e(xd,fW),e(fW,xar),e(xd,$ar),e(Mt,kar),M(vT,Mt,null),e(zo,Sar),e(zo,go),M(lL,go,null),e(go,Rar),e(go,G2e),e(G2e,Par),e(go,Bar),e(go,Ha),e(Ha,Iar),e(Ha,O2e),e(O2e,Nar),e(Ha,qar),e(Ha,V2e),e(V2e,jar),e(Ha,Dar),e(Ha,X2e),e(X2e,Gar),e(Ha,Oar),e(go,Var),e(go,ye),e(ye,FT),e(FT,z2e),e(z2e,Xar),e(FT,zar),e(FT,mW),e(mW,War),e(FT,Qar),e(ye,Har),e(ye,TT),e(TT,W2e),e(W2e,Uar),e(TT,Jar),e(TT,gW),e(gW,Yar),e(TT,Kar),e(ye,Zar),e(ye,MT),e(MT,Q2e),e(Q2e,enr),e(MT,onr),e(MT,hW),e(hW,rnr),e(MT,tnr),e(ye,anr),e(ye,ET),e(ET,H2e),e(H2e,nnr),e(ET,snr),e(ET,pW),e(pW,lnr),e(ET,inr),e(ye,dnr),e(ye,CT),e(CT,U2e),e(U2e,cnr),e(CT,fnr),e(CT,uW),e(uW,mnr),e(CT,gnr),e(ye,hnr),e(ye,wT),e(wT,J2e),e(J2e,pnr),e(wT,unr),e(wT,_W),e(_W,_nr),e(wT,bnr),e(ye,vnr),e(ye,AT),e(AT,Y2e),e(Y2e,Fnr),e(AT,Tnr),e(AT,bW),e(bW,Mnr),e(AT,Enr),e(ye,Cnr),e(ye,yT),e(yT,K2e),e(K2e,wnr),e(yT,Anr),e(yT,vW),e(vW,ynr),e(yT,Lnr),e(ye,xnr),e(ye,LT),e(LT,Z2e),e(Z2e,$nr),e(LT,knr),e(LT,FW),e(FW,Snr),e(LT,Rnr),e(ye,Pnr),e(ye,xT),e(xT,e1e),e(e1e,Bnr),e(xT,Inr),e(xT,TW),e(TW,Nnr),e(xT,qnr),e(go,jnr),e(go,$T),e($T,Dnr),e($T,o1e),e(o1e,Gnr),e($T,Onr),e($T,r1e),e(r1e,Vnr),e(go,Xnr),M(kT,go,null),b(f,ODe,_),b(f,$d,_),e($d,ST),e(ST,t1e),M(iL,t1e,null),e($d,znr),e($d,a1e),e(a1e,Wnr),b(f,VDe,_),b(f,Wo,_),M(dL,Wo,null),e(Wo,Qnr),e(Wo,kd),e(kd,Hnr),e(kd,MW),e(MW,Unr),e(kd,Jnr),e(kd,EW),e(EW,Ynr),e(kd,Knr),e(Wo,Znr),e(Wo,cL),e(cL,esr),e(cL,n1e),e(n1e,osr),e(cL,rsr),e(Wo,tsr),e(Wo,Et),M(fL,Et,null),e(Et,asr),e(Et,s1e),e(s1e,nsr),e(Et,ssr),e(Et,Sd),e(Sd,lsr),e(Sd,l1e),e(l1e,isr),e(Sd,dsr),e(Sd,CW),e(CW,csr),e(Sd,fsr),e(Et,msr),M(RT,Et,null),e(Wo,gsr),e(Wo,ho),M(mL,ho,null),e(ho,hsr),e(ho,i1e),e(i1e,psr),e(ho,usr),e(ho,Ua),e(Ua,_sr),e(Ua,d1e),e(d1e,bsr),e(Ua,vsr),e(Ua,c1e),e(c1e,Fsr),e(Ua,Tsr),e(Ua,f1e),e(f1e,Msr),e(Ua,Esr),e(ho,Csr),e(ho,gL),e(gL,PT),e(PT,m1e),e(m1e,wsr),e(PT,Asr),e(PT,wW),e(wW,ysr),e(PT,Lsr),e(gL,xsr),e(gL,BT),e(BT,g1e),e(g1e,$sr),e(BT,ksr),e(BT,AW),e(AW,Ssr),e(BT,Rsr),e(ho,Psr),e(ho,IT),e(IT,Bsr),e(IT,h1e),e(h1e,Isr),e(IT,Nsr),e(IT,p1e),e(p1e,qsr),e(ho,jsr),M(NT,ho,null),b(f,XDe,_),b(f,Rd,_),e(Rd,qT),e(qT,u1e),M(hL,u1e,null),e(Rd,Dsr),e(Rd,_1e),e(_1e,Gsr),b(f,zDe,_),b(f,Qo,_),M(pL,Qo,null),e(Qo,Osr),e(Qo,Pd),e(Pd,Vsr),e(Pd,yW),e(yW,Xsr),e(Pd,zsr),e(Pd,LW),e(LW,Wsr),e(Pd,Qsr),e(Qo,Hsr),e(Qo,uL),e(uL,Usr),e(uL,b1e),e(b1e,Jsr),e(uL,Ysr),e(Qo,Ksr),e(Qo,Ct),M(_L,Ct,null),e(Ct,Zsr),e(Ct,v1e),e(v1e,elr),e(Ct,olr),e(Ct,Bd),e(Bd,rlr),e(Bd,F1e),e(F1e,tlr),e(Bd,alr),e(Bd,xW),e(xW,nlr),e(Bd,slr),e(Ct,llr),M(jT,Ct,null),e(Qo,ilr),e(Qo,po),M(bL,po,null),e(po,dlr),e(po,T1e),e(T1e,clr),e(po,flr),e(po,Ja),e(Ja,mlr),e(Ja,M1e),e(M1e,glr),e(Ja,hlr),e(Ja,E1e),e(E1e,plr),e(Ja,ulr),e(Ja,C1e),e(C1e,_lr),e(Ja,blr),e(po,vlr),e(po,ot),e(ot,DT),e(DT,w1e),e(w1e,Flr),e(DT,Tlr),e(DT,$W),e($W,Mlr),e(DT,Elr),e(ot,Clr),e(ot,GT),e(GT,A1e),e(A1e,wlr),e(GT,Alr),e(GT,kW),e(kW,ylr),e(GT,Llr),e(ot,xlr),e(ot,OT),e(OT,y1e),e(y1e,$lr),e(OT,klr),e(OT,SW),e(SW,Slr),e(OT,Rlr),e(ot,Plr),e(ot,VT),e(VT,L1e),e(L1e,Blr),e(VT,Ilr),e(VT,RW),e(RW,Nlr),e(VT,qlr),e(ot,jlr),e(ot,XT),e(XT,x1e),e(x1e,Dlr),e(XT,Glr),e(XT,PW),e(PW,Olr),e(XT,Vlr),e(po,Xlr),e(po,zT),e(zT,zlr),e(zT,$1e),e($1e,Wlr),e(zT,Qlr),e(zT,k1e),e(k1e,Hlr),e(po,Ulr),M(WT,po,null),b(f,WDe,_),b(f,Id,_),e(Id,QT),e(QT,S1e),M(vL,S1e,null),e(Id,Jlr),e(Id,R1e),e(R1e,Ylr),b(f,QDe,_),b(f,Ho,_),M(FL,Ho,null),e(Ho,Klr),e(Ho,Nd),e(Nd,Zlr),e(Nd,BW),e(BW,eir),e(Nd,oir),e(Nd,IW),e(IW,rir),e(Nd,tir),e(Ho,air),e(Ho,TL),e(TL,nir),e(TL,P1e),e(P1e,sir),e(TL,lir),e(Ho,iir),e(Ho,wt),M(ML,wt,null),e(wt,dir),e(wt,B1e),e(B1e,cir),e(wt,fir),e(wt,qd),e(qd,mir),e(qd,I1e),e(I1e,gir),e(qd,hir),e(qd,NW),e(NW,pir),e(qd,uir),e(wt,_ir),M(HT,wt,null),e(Ho,bir),e(Ho,uo),M(EL,uo,null),e(uo,vir),e(uo,N1e),e(N1e,Fir),e(uo,Tir),e(uo,Ya),e(Ya,Mir),e(Ya,q1e),e(q1e,Eir),e(Ya,Cir),e(Ya,j1e),e(j1e,wir),e(Ya,Air),e(Ya,D1e),e(D1e,yir),e(Ya,Lir),e(uo,xir),e(uo,jd),e(jd,UT),e(UT,G1e),e(G1e,$ir),e(UT,kir),e(UT,qW),e(qW,Sir),e(UT,Rir),e(jd,Pir),e(jd,JT),e(JT,O1e),e(O1e,Bir),e(JT,Iir),e(JT,jW),e(jW,Nir),e(JT,qir),e(jd,jir),e(jd,YT),e(YT,V1e),e(V1e,Dir),e(YT,Gir),e(YT,DW),e(DW,Oir),e(YT,Vir),e(uo,Xir),e(uo,KT),e(KT,zir),e(KT,X1e),e(X1e,Wir),e(KT,Qir),e(KT,z1e),e(z1e,Hir),e(uo,Uir),M(ZT,uo,null),b(f,HDe,_),b(f,Dd,_),e(Dd,e7),e(e7,W1e),M(CL,W1e,null),e(Dd,Jir),e(Dd,Q1e),e(Q1e,Yir),b(f,UDe,_),b(f,Uo,_),M(wL,Uo,null),e(Uo,Kir),e(Uo,Gd),e(Gd,Zir),e(Gd,GW),e(GW,edr),e(Gd,odr),e(Gd,OW),e(OW,rdr),e(Gd,tdr),e(Uo,adr),e(Uo,AL),e(AL,ndr),e(AL,H1e),e(H1e,sdr),e(AL,ldr),e(Uo,idr),e(Uo,At),M(yL,At,null),e(At,ddr),e(At,U1e),e(U1e,cdr),e(At,fdr),e(At,Od),e(Od,mdr),e(Od,J1e),e(J1e,gdr),e(Od,hdr),e(Od,VW),e(VW,pdr),e(Od,udr),e(At,_dr),M(o7,At,null),e(Uo,bdr),e(Uo,_o),M(LL,_o,null),e(_o,vdr),e(_o,Y1e),e(Y1e,Fdr),e(_o,Tdr),e(_o,Ka),e(Ka,Mdr),e(Ka,K1e),e(K1e,Edr),e(Ka,Cdr),e(Ka,Z1e),e(Z1e,wdr),e(Ka,Adr),e(Ka,ebe),e(ebe,ydr),e(Ka,Ldr),e(_o,xdr),e(_o,xL),e(xL,r7),e(r7,obe),e(obe,$dr),e(r7,kdr),e(r7,XW),e(XW,Sdr),e(r7,Rdr),e(xL,Pdr),e(xL,t7),e(t7,rbe),e(rbe,Bdr),e(t7,Idr),e(t7,zW),e(zW,Ndr),e(t7,qdr),e(_o,jdr),e(_o,a7),e(a7,Ddr),e(a7,tbe),e(tbe,Gdr),e(a7,Odr),e(a7,abe),e(abe,Vdr),e(_o,Xdr),M(n7,_o,null),b(f,JDe,_),b(f,Vd,_),e(Vd,s7),e(s7,nbe),M($L,nbe,null),e(Vd,zdr),e(Vd,sbe),e(sbe,Wdr),b(f,YDe,_),b(f,Jo,_),M(kL,Jo,null),e(Jo,Qdr),e(Jo,Xd),e(Xd,Hdr),e(Xd,WW),e(WW,Udr),e(Xd,Jdr),e(Xd,QW),e(QW,Ydr),e(Xd,Kdr),e(Jo,Zdr),e(Jo,SL),e(SL,ecr),e(SL,lbe),e(lbe,ocr),e(SL,rcr),e(Jo,tcr),e(Jo,yt),M(RL,yt,null),e(yt,acr),e(yt,ibe),e(ibe,ncr),e(yt,scr),e(yt,zd),e(zd,lcr),e(zd,dbe),e(dbe,icr),e(zd,dcr),e(zd,HW),e(HW,ccr),e(zd,fcr),e(yt,mcr),M(l7,yt,null),e(Jo,gcr),e(Jo,bo),M(PL,bo,null),e(bo,hcr),e(bo,cbe),e(cbe,pcr),e(bo,ucr),e(bo,Za),e(Za,_cr),e(Za,fbe),e(fbe,bcr),e(Za,vcr),e(Za,mbe),e(mbe,Fcr),e(Za,Tcr),e(Za,gbe),e(gbe,Mcr),e(Za,Ecr),e(bo,Ccr),e(bo,hbe),e(hbe,i7),e(i7,pbe),e(pbe,wcr),e(i7,Acr),e(i7,UW),e(UW,ycr),e(i7,Lcr),e(bo,xcr),e(bo,d7),e(d7,$cr),e(d7,ube),e(ube,kcr),e(d7,Scr),e(d7,_be),e(_be,Rcr),e(bo,Pcr),M(c7,bo,null),b(f,KDe,_),b(f,Wd,_),e(Wd,f7),e(f7,bbe),M(BL,bbe,null),e(Wd,Bcr),e(Wd,vbe),e(vbe,Icr),b(f,ZDe,_),b(f,Yo,_),M(IL,Yo,null),e(Yo,Ncr),e(Yo,Qd),e(Qd,qcr),e(Qd,JW),e(JW,jcr),e(Qd,Dcr),e(Qd,YW),e(YW,Gcr),e(Qd,Ocr),e(Yo,Vcr),e(Yo,NL),e(NL,Xcr),e(NL,Fbe),e(Fbe,zcr),e(NL,Wcr),e(Yo,Qcr),e(Yo,Lt),M(qL,Lt,null),e(Lt,Hcr),e(Lt,Tbe),e(Tbe,Ucr),e(Lt,Jcr),e(Lt,Hd),e(Hd,Ycr),e(Hd,Mbe),e(Mbe,Kcr),e(Hd,Zcr),e(Hd,KW),e(KW,efr),e(Hd,ofr),e(Lt,rfr),M(m7,Lt,null),e(Yo,tfr),e(Yo,vo),M(jL,vo,null),e(vo,afr),e(vo,Ebe),e(Ebe,nfr),e(vo,sfr),e(vo,en),e(en,lfr),e(en,Cbe),e(Cbe,ifr),e(en,dfr),e(en,wbe),e(wbe,cfr),e(en,ffr),e(en,Abe),e(Abe,mfr),e(en,gfr),e(vo,hfr),e(vo,on),e(on,g7),e(g7,ybe),e(ybe,pfr),e(g7,ufr),e(g7,ZW),e(ZW,_fr),e(g7,bfr),e(on,vfr),e(on,h7),e(h7,Lbe),e(Lbe,Ffr),e(h7,Tfr),e(h7,eQ),e(eQ,Mfr),e(h7,Efr),e(on,Cfr),e(on,p7),e(p7,xbe),e(xbe,wfr),e(p7,Afr),e(p7,oQ),e(oQ,yfr),e(p7,Lfr),e(on,xfr),e(on,u7),e(u7,$be),e($be,$fr),e(u7,kfr),e(u7,rQ),e(rQ,Sfr),e(u7,Rfr),e(vo,Pfr),e(vo,_7),e(_7,Bfr),e(_7,kbe),e(kbe,Ifr),e(_7,Nfr),e(_7,Sbe),e(Sbe,qfr),e(vo,jfr),M(b7,vo,null),b(f,eGe,_),b(f,Ud,_),e(Ud,v7),e(v7,Rbe),M(DL,Rbe,null),e(Ud,Dfr),e(Ud,Pbe),e(Pbe,Gfr),b(f,oGe,_),b(f,Ko,_),M(GL,Ko,null),e(Ko,Ofr),e(Ko,Jd),e(Jd,Vfr),e(Jd,tQ),e(tQ,Xfr),e(Jd,zfr),e(Jd,aQ),e(aQ,Wfr),e(Jd,Qfr),e(Ko,Hfr),e(Ko,OL),e(OL,Ufr),e(OL,Bbe),e(Bbe,Jfr),e(OL,Yfr),e(Ko,Kfr),e(Ko,xt),M(VL,xt,null),e(xt,Zfr),e(xt,Ibe),e(Ibe,emr),e(xt,omr),e(xt,Yd),e(Yd,rmr),e(Yd,Nbe),e(Nbe,tmr),e(Yd,amr),e(Yd,nQ),e(nQ,nmr),e(Yd,smr),e(xt,lmr),M(F7,xt,null),e(Ko,imr),e(Ko,Fo),M(XL,Fo,null),e(Fo,dmr),e(Fo,qbe),e(qbe,cmr),e(Fo,fmr),e(Fo,rn),e(rn,mmr),e(rn,jbe),e(jbe,gmr),e(rn,hmr),e(rn,Dbe),e(Dbe,pmr),e(rn,umr),e(rn,Gbe),e(Gbe,_mr),e(rn,bmr),e(Fo,vmr),e(Fo,Obe),e(Obe,T7),e(T7,Vbe),e(Vbe,Fmr),e(T7,Tmr),e(T7,sQ),e(sQ,Mmr),e(T7,Emr),e(Fo,Cmr),e(Fo,M7),e(M7,wmr),e(M7,Xbe),e(Xbe,Amr),e(M7,ymr),e(M7,zbe),e(zbe,Lmr),e(Fo,xmr),M(E7,Fo,null),b(f,rGe,_),b(f,Kd,_),e(Kd,C7),e(C7,Wbe),M(zL,Wbe,null),e(Kd,$mr),e(Kd,Qbe),e(Qbe,kmr),b(f,tGe,_),b(f,Zo,_),M(WL,Zo,null),e(Zo,Smr),e(Zo,Zd),e(Zd,Rmr),e(Zd,lQ),e(lQ,Pmr),e(Zd,Bmr),e(Zd,iQ),e(iQ,Imr),e(Zd,Nmr),e(Zo,qmr),e(Zo,QL),e(QL,jmr),e(QL,Hbe),e(Hbe,Dmr),e(QL,Gmr),e(Zo,Omr),e(Zo,$t),M(HL,$t,null),e($t,Vmr),e($t,Ube),e(Ube,Xmr),e($t,zmr),e($t,ec),e(ec,Wmr),e(ec,Jbe),e(Jbe,Qmr),e(ec,Hmr),e(ec,dQ),e(dQ,Umr),e(ec,Jmr),e($t,Ymr),M(w7,$t,null),e(Zo,Kmr),e(Zo,yr),M(UL,yr,null),e(yr,Zmr),e(yr,Ybe),e(Ybe,egr),e(yr,ogr),e(yr,tn),e(tn,rgr),e(tn,Kbe),e(Kbe,tgr),e(tn,agr),e(tn,Zbe),e(Zbe,ngr),e(tn,sgr),e(tn,eve),e(eve,lgr),e(tn,igr),e(yr,dgr),e(yr,q),e(q,A7),e(A7,ove),e(ove,cgr),e(A7,fgr),e(A7,cQ),e(cQ,mgr),e(A7,ggr),e(q,hgr),e(q,y7),e(y7,rve),e(rve,pgr),e(y7,ugr),e(y7,fQ),e(fQ,_gr),e(y7,bgr),e(q,vgr),e(q,L7),e(L7,tve),e(tve,Fgr),e(L7,Tgr),e(L7,mQ),e(mQ,Mgr),e(L7,Egr),e(q,Cgr),e(q,x7),e(x7,ave),e(ave,wgr),e(x7,Agr),e(x7,gQ),e(gQ,ygr),e(x7,Lgr),e(q,xgr),e(q,$7),e($7,nve),e(nve,$gr),e($7,kgr),e($7,hQ),e(hQ,Sgr),e($7,Rgr),e(q,Pgr),e(q,k7),e(k7,sve),e(sve,Bgr),e(k7,Igr),e(k7,pQ),e(pQ,Ngr),e(k7,qgr),e(q,jgr),e(q,S7),e(S7,lve),e(lve,Dgr),e(S7,Ggr),e(S7,uQ),e(uQ,Ogr),e(S7,Vgr),e(q,Xgr),e(q,R7),e(R7,ive),e(ive,zgr),e(R7,Wgr),e(R7,_Q),e(_Q,Qgr),e(R7,Hgr),e(q,Ugr),e(q,P7),e(P7,dve),e(dve,Jgr),e(P7,Ygr),e(P7,bQ),e(bQ,Kgr),e(P7,Zgr),e(q,ehr),e(q,B7),e(B7,cve),e(cve,ohr),e(B7,rhr),e(B7,vQ),e(vQ,thr),e(B7,ahr),e(q,nhr),e(q,I7),e(I7,fve),e(fve,shr),e(I7,lhr),e(I7,FQ),e(FQ,ihr),e(I7,dhr),e(q,chr),e(q,N7),e(N7,mve),e(mve,fhr),e(N7,mhr),e(N7,TQ),e(TQ,ghr),e(N7,hhr),e(q,phr),e(q,q7),e(q7,gve),e(gve,uhr),e(q7,_hr),e(q7,MQ),e(MQ,bhr),e(q7,vhr),e(q,Fhr),e(q,j7),e(j7,hve),e(hve,Thr),e(j7,Mhr),e(j7,EQ),e(EQ,Ehr),e(j7,Chr),e(q,whr),e(q,D7),e(D7,pve),e(pve,Ahr),e(D7,yhr),e(D7,CQ),e(CQ,Lhr),e(D7,xhr),e(q,$hr),e(q,G7),e(G7,uve),e(uve,khr),e(G7,Shr),e(G7,wQ),e(wQ,Rhr),e(G7,Phr),e(q,Bhr),e(q,O7),e(O7,_ve),e(_ve,Ihr),e(O7,Nhr),e(O7,AQ),e(AQ,qhr),e(O7,jhr),e(q,Dhr),e(q,Vs),e(Vs,bve),e(bve,Ghr),e(Vs,Ohr),e(Vs,yQ),e(yQ,Vhr),e(Vs,Xhr),e(Vs,LQ),e(LQ,zhr),e(Vs,Whr),e(q,Qhr),e(q,V7),e(V7,vve),e(vve,Hhr),e(V7,Uhr),e(V7,xQ),e(xQ,Jhr),e(V7,Yhr),e(q,Khr),e(q,X7),e(X7,Fve),e(Fve,Zhr),e(X7,epr),e(X7,$Q),e($Q,opr),e(X7,rpr),e(q,tpr),e(q,z7),e(z7,Tve),e(Tve,apr),e(z7,npr),e(z7,kQ),e(kQ,spr),e(z7,lpr),e(q,ipr),e(q,W7),e(W7,Mve),e(Mve,dpr),e(W7,cpr),e(W7,SQ),e(SQ,fpr),e(W7,mpr),e(q,gpr),e(q,Q7),e(Q7,Eve),e(Eve,hpr),e(Q7,ppr),e(Q7,RQ),e(RQ,upr),e(Q7,_pr),e(q,bpr),e(q,H7),e(H7,Cve),e(Cve,vpr),e(H7,Fpr),e(H7,PQ),e(PQ,Tpr),e(H7,Mpr),e(q,Epr),e(q,U7),e(U7,wve),e(wve,Cpr),e(U7,wpr),e(U7,BQ),e(BQ,Apr),e(U7,ypr),e(q,Lpr),e(q,J7),e(J7,Ave),e(Ave,xpr),e(J7,$pr),e(J7,IQ),e(IQ,kpr),e(J7,Spr),e(q,Rpr),e(q,Y7),e(Y7,yve),e(yve,Ppr),e(Y7,Bpr),e(Y7,NQ),e(NQ,Ipr),e(Y7,Npr),e(q,qpr),e(q,K7),e(K7,Lve),e(Lve,jpr),e(K7,Dpr),e(K7,qQ),e(qQ,Gpr),e(K7,Opr),e(q,Vpr),e(q,Z7),e(Z7,xve),e(xve,Xpr),e(Z7,zpr),e(Z7,jQ),e(jQ,Wpr),e(Z7,Qpr),e(q,Hpr),e(q,e8),e(e8,$ve),e($ve,Upr),e(e8,Jpr),e(e8,DQ),e(DQ,Ypr),e(e8,Kpr),e(q,Zpr),e(q,o8),e(o8,kve),e(kve,eur),e(o8,our),e(o8,GQ),e(GQ,rur),e(o8,tur),e(q,aur),e(q,r8),e(r8,Sve),e(Sve,nur),e(r8,sur),e(r8,OQ),e(OQ,lur),e(r8,iur),e(q,dur),e(q,t8),e(t8,Rve),e(Rve,cur),e(t8,fur),e(t8,VQ),e(VQ,mur),e(t8,gur),e(q,hur),e(q,a8),e(a8,Pve),e(Pve,pur),e(a8,uur),e(a8,XQ),e(XQ,_ur),e(a8,bur),e(q,vur),e(q,n8),e(n8,Bve),e(Bve,Fur),e(n8,Tur),e(n8,zQ),e(zQ,Mur),e(n8,Eur),e(q,Cur),e(q,s8),e(s8,Ive),e(Ive,wur),e(s8,Aur),e(s8,WQ),e(WQ,yur),e(s8,Lur),e(q,xur),e(q,l8),e(l8,Nve),e(Nve,$ur),e(l8,kur),e(l8,QQ),e(QQ,Sur),e(l8,Rur),e(q,Pur),e(q,i8),e(i8,qve),e(qve,Bur),e(i8,Iur),e(i8,HQ),e(HQ,Nur),e(i8,qur),e(q,jur),e(q,d8),e(d8,jve),e(jve,Dur),e(d8,Gur),e(d8,UQ),e(UQ,Our),e(d8,Vur),e(q,Xur),e(q,c8),e(c8,Dve),e(Dve,zur),e(c8,Wur),e(c8,JQ),e(JQ,Qur),e(c8,Hur),e(q,Uur),e(q,f8),e(f8,Gve),e(Gve,Jur),e(f8,Yur),e(f8,YQ),e(YQ,Kur),e(f8,Zur),e(q,e_r),e(q,m8),e(m8,Ove),e(Ove,o_r),e(m8,r_r),e(m8,KQ),e(KQ,t_r),e(m8,a_r),e(q,n_r),e(q,g8),e(g8,Vve),e(Vve,s_r),e(g8,l_r),e(g8,ZQ),e(ZQ,i_r),e(g8,d_r),e(q,c_r),e(q,h8),e(h8,Xve),e(Xve,f_r),e(h8,m_r),e(h8,eH),e(eH,g_r),e(h8,h_r),e(q,p_r),e(q,p8),e(p8,zve),e(zve,u_r),e(p8,__r),e(p8,oH),e(oH,b_r),e(p8,v_r),e(q,F_r),e(q,u8),e(u8,Wve),e(Wve,T_r),e(u8,M_r),e(u8,rH),e(rH,E_r),e(u8,C_r),e(q,w_r),e(q,_8),e(_8,Qve),e(Qve,A_r),e(_8,y_r),e(_8,tH),e(tH,L_r),e(_8,x_r),e(yr,$_r),M(b8,yr,null),b(f,aGe,_),b(f,oc,_),e(oc,v8),e(v8,Hve),M(JL,Hve,null),e(oc,k_r),e(oc,Uve),e(Uve,S_r),b(f,nGe,_),b(f,er,_),M(YL,er,null),e(er,R_r),e(er,rc),e(rc,P_r),e(rc,aH),e(aH,B_r),e(rc,I_r),e(rc,nH),e(nH,N_r),e(rc,q_r),e(er,j_r),e(er,KL),e(KL,D_r),e(KL,Jve),e(Jve,G_r),e(KL,O_r),e(er,V_r),e(er,kt),M(ZL,kt,null),e(kt,X_r),e(kt,Yve),e(Yve,z_r),e(kt,W_r),e(kt,tc),e(tc,Q_r),e(tc,Kve),e(Kve,H_r),e(tc,U_r),e(tc,sH),e(sH,J_r),e(tc,Y_r),e(kt,K_r),M(F8,kt,null),e(er,Z_r),e(er,Lr),M(e9,Lr,null),e(Lr,e2r),e(Lr,Zve),e(Zve,o2r),e(Lr,r2r),e(Lr,an),e(an,t2r),e(an,eFe),e(eFe,a2r),e(an,n2r),e(an,oFe),e(oFe,s2r),e(an,l2r),e(an,rFe),e(rFe,i2r),e(an,d2r),e(Lr,c2r),e(Lr,se),e(se,T8),e(T8,tFe),e(tFe,f2r),e(T8,m2r),e(T8,lH),e(lH,g2r),e(T8,h2r),e(se,p2r),e(se,M8),e(M8,aFe),e(aFe,u2r),e(M8,_2r),e(M8,iH),e(iH,b2r),e(M8,v2r),e(se,F2r),e(se,E8),e(E8,nFe),e(nFe,T2r),e(E8,M2r),e(E8,dH),e(dH,E2r),e(E8,C2r),e(se,w2r),e(se,C8),e(C8,sFe),e(sFe,A2r),e(C8,y2r),e(C8,cH),e(cH,L2r),e(C8,x2r),e(se,$2r),e(se,w8),e(w8,lFe),e(lFe,k2r),e(w8,S2r),e(w8,fH),e(fH,R2r),e(w8,P2r),e(se,B2r),e(se,A8),e(A8,iFe),e(iFe,I2r),e(A8,N2r),e(A8,mH),e(mH,q2r),e(A8,j2r),e(se,D2r),e(se,y8),e(y8,dFe),e(dFe,G2r),e(y8,O2r),e(y8,gH),e(gH,V2r),e(y8,X2r),e(se,z2r),e(se,L8),e(L8,cFe),e(cFe,W2r),e(L8,Q2r),e(L8,hH),e(hH,H2r),e(L8,U2r),e(se,J2r),e(se,x8),e(x8,fFe),e(fFe,Y2r),e(x8,K2r),e(x8,pH),e(pH,Z2r),e(x8,e1r),e(se,o1r),e(se,$8),e($8,mFe),e(mFe,r1r),e($8,t1r),e($8,uH),e(uH,a1r),e($8,n1r),e(se,s1r),e(se,k8),e(k8,gFe),e(gFe,l1r),e(k8,i1r),e(k8,_H),e(_H,d1r),e(k8,c1r),e(se,f1r),e(se,S8),e(S8,hFe),e(hFe,m1r),e(S8,g1r),e(S8,bH),e(bH,h1r),e(S8,p1r),e(se,u1r),e(se,R8),e(R8,pFe),e(pFe,_1r),e(R8,b1r),e(R8,vH),e(vH,v1r),e(R8,F1r),e(se,T1r),e(se,P8),e(P8,uFe),e(uFe,M1r),e(P8,E1r),e(P8,FH),e(FH,C1r),e(P8,w1r),e(se,A1r),e(se,B8),e(B8,_Fe),e(_Fe,y1r),e(B8,L1r),e(B8,TH),e(TH,x1r),e(B8,$1r),e(se,k1r),e(se,I8),e(I8,bFe),e(bFe,S1r),e(I8,R1r),e(I8,MH),e(MH,P1r),e(I8,B1r),e(se,I1r),e(se,N8),e(N8,vFe),e(vFe,N1r),e(N8,q1r),e(N8,EH),e(EH,j1r),e(N8,D1r),e(se,G1r),e(se,q8),e(q8,FFe),e(FFe,O1r),e(q8,V1r),e(q8,CH),e(CH,X1r),e(q8,z1r),e(se,W1r),e(se,j8),e(j8,TFe),e(TFe,Q1r),e(j8,H1r),e(j8,wH),e(wH,U1r),e(j8,J1r),e(se,Y1r),e(se,D8),e(D8,MFe),e(MFe,K1r),e(D8,Z1r),e(D8,AH),e(AH,ebr),e(D8,obr),e(se,rbr),e(se,G8),e(G8,EFe),e(EFe,tbr),e(G8,abr),e(G8,yH),e(yH,nbr),e(G8,sbr),e(se,lbr),e(se,O8),e(O8,CFe),e(CFe,ibr),e(O8,dbr),e(O8,LH),e(LH,cbr),e(O8,fbr),e(se,mbr),e(se,V8),e(V8,wFe),e(wFe,gbr),e(V8,hbr),e(V8,xH),e(xH,pbr),e(V8,ubr),e(Lr,_br),M(X8,Lr,null),b(f,sGe,_),b(f,ac,_),e(ac,z8),e(z8,AFe),M(o9,AFe,null),e(ac,bbr),e(ac,yFe),e(yFe,vbr),b(f,lGe,_),b(f,or,_),M(r9,or,null),e(or,Fbr),e(or,nc),e(nc,Tbr),e(nc,$H),e($H,Mbr),e(nc,Ebr),e(nc,kH),e(kH,Cbr),e(nc,wbr),e(or,Abr),e(or,t9),e(t9,ybr),e(t9,LFe),e(LFe,Lbr),e(t9,xbr),e(or,$br),e(or,St),M(a9,St,null),e(St,kbr),e(St,xFe),e(xFe,Sbr),e(St,Rbr),e(St,sc),e(sc,Pbr),e(sc,$Fe),e($Fe,Bbr),e(sc,Ibr),e(sc,SH),e(SH,Nbr),e(sc,qbr),e(St,jbr),M(W8,St,null),e(or,Dbr),e(or,xr),M(n9,xr,null),e(xr,Gbr),e(xr,kFe),e(kFe,Obr),e(xr,Vbr),e(xr,nn),e(nn,Xbr),e(nn,SFe),e(SFe,zbr),e(nn,Wbr),e(nn,RFe),e(RFe,Qbr),e(nn,Hbr),e(nn,PFe),e(PFe,Ubr),e(nn,Jbr),e(xr,Ybr),e(xr,Me),e(Me,Q8),e(Q8,BFe),e(BFe,Kbr),e(Q8,Zbr),e(Q8,RH),e(RH,evr),e(Q8,ovr),e(Me,rvr),e(Me,H8),e(H8,IFe),e(IFe,tvr),e(H8,avr),e(H8,PH),e(PH,nvr),e(H8,svr),e(Me,lvr),e(Me,U8),e(U8,NFe),e(NFe,ivr),e(U8,dvr),e(U8,BH),e(BH,cvr),e(U8,fvr),e(Me,mvr),e(Me,J8),e(J8,qFe),e(qFe,gvr),e(J8,hvr),e(J8,IH),e(IH,pvr),e(J8,uvr),e(Me,_vr),e(Me,Y8),e(Y8,jFe),e(jFe,bvr),e(Y8,vvr),e(Y8,NH),e(NH,Fvr),e(Y8,Tvr),e(Me,Mvr),e(Me,K8),e(K8,DFe),e(DFe,Evr),e(K8,Cvr),e(K8,qH),e(qH,wvr),e(K8,Avr),e(Me,yvr),e(Me,Z8),e(Z8,GFe),e(GFe,Lvr),e(Z8,xvr),e(Z8,jH),e(jH,$vr),e(Z8,kvr),e(Me,Svr),e(Me,eM),e(eM,OFe),e(OFe,Rvr),e(eM,Pvr),e(eM,DH),e(DH,Bvr),e(eM,Ivr),e(Me,Nvr),e(Me,oM),e(oM,VFe),e(VFe,qvr),e(oM,jvr),e(oM,GH),e(GH,Dvr),e(oM,Gvr),e(Me,Ovr),e(Me,rM),e(rM,XFe),e(XFe,Vvr),e(rM,Xvr),e(rM,OH),e(OH,zvr),e(rM,Wvr),e(Me,Qvr),e(Me,tM),e(tM,zFe),e(zFe,Hvr),e(tM,Uvr),e(tM,VH),e(VH,Jvr),e(tM,Yvr),e(Me,Kvr),e(Me,aM),e(aM,WFe),e(WFe,Zvr),e(aM,eFr),e(aM,XH),e(XH,oFr),e(aM,rFr),e(Me,tFr),e(Me,nM),e(nM,QFe),e(QFe,aFr),e(nM,nFr),e(nM,zH),e(zH,sFr),e(nM,lFr),e(xr,iFr),M(sM,xr,null),b(f,iGe,_),b(f,lc,_),e(lc,lM),e(lM,HFe),M(s9,HFe,null),e(lc,dFr),e(lc,UFe),e(UFe,cFr),b(f,dGe,_),b(f,rr,_),M(l9,rr,null),e(rr,fFr),e(rr,ic),e(ic,mFr),e(ic,WH),e(WH,gFr),e(ic,hFr),e(ic,QH),e(QH,pFr),e(ic,uFr),e(rr,_Fr),e(rr,i9),e(i9,bFr),e(i9,JFe),e(JFe,vFr),e(i9,FFr),e(rr,TFr),e(rr,Rt),M(d9,Rt,null),e(Rt,MFr),e(Rt,YFe),e(YFe,EFr),e(Rt,CFr),e(Rt,dc),e(dc,wFr),e(dc,KFe),e(KFe,AFr),e(dc,yFr),e(dc,HH),e(HH,LFr),e(dc,xFr),e(Rt,$Fr),M(iM,Rt,null),e(rr,kFr),e(rr,$r),M(c9,$r,null),e($r,SFr),e($r,ZFe),e(ZFe,RFr),e($r,PFr),e($r,sn),e(sn,BFr),e(sn,e6e),e(e6e,IFr),e(sn,NFr),e(sn,o6e),e(o6e,qFr),e(sn,jFr),e(sn,r6e),e(r6e,DFr),e(sn,GFr),e($r,OFr),e($r,ln),e(ln,dM),e(dM,t6e),e(t6e,VFr),e(dM,XFr),e(dM,UH),e(UH,zFr),e(dM,WFr),e(ln,QFr),e(ln,cM),e(cM,a6e),e(a6e,HFr),e(cM,UFr),e(cM,JH),e(JH,JFr),e(cM,YFr),e(ln,KFr),e(ln,fM),e(fM,n6e),e(n6e,ZFr),e(fM,e6r),e(fM,YH),e(YH,o6r),e(fM,r6r),e(ln,t6r),e(ln,mM),e(mM,s6e),e(s6e,a6r),e(mM,n6r),e(mM,KH),e(KH,s6r),e(mM,l6r),e($r,i6r),M(gM,$r,null),b(f,cGe,_),b(f,cc,_),e(cc,hM),e(hM,l6e),M(f9,l6e,null),e(cc,d6r),e(cc,i6e),e(i6e,c6r),b(f,fGe,_),b(f,tr,_),M(m9,tr,null),e(tr,f6r),e(tr,fc),e(fc,m6r),e(fc,ZH),e(ZH,g6r),e(fc,h6r),e(fc,eU),e(eU,p6r),e(fc,u6r),e(tr,_6r),e(tr,g9),e(g9,b6r),e(g9,d6e),e(d6e,v6r),e(g9,F6r),e(tr,T6r),e(tr,Pt),M(h9,Pt,null),e(Pt,M6r),e(Pt,c6e),e(c6e,E6r),e(Pt,C6r),e(Pt,mc),e(mc,w6r),e(mc,f6e),e(f6e,A6r),e(mc,y6r),e(mc,oU),e(oU,L6r),e(mc,x6r),e(Pt,$6r),M(pM,Pt,null),e(tr,k6r),e(tr,kr),M(p9,kr,null),e(kr,S6r),e(kr,m6e),e(m6e,R6r),e(kr,P6r),e(kr,dn),e(dn,B6r),e(dn,g6e),e(g6e,I6r),e(dn,N6r),e(dn,h6e),e(h6e,q6r),e(dn,j6r),e(dn,p6e),e(p6e,D6r),e(dn,G6r),e(kr,O6r),e(kr,ie),e(ie,uM),e(uM,u6e),e(u6e,V6r),e(uM,X6r),e(uM,rU),e(rU,z6r),e(uM,W6r),e(ie,Q6r),e(ie,_M),e(_M,_6e),e(_6e,H6r),e(_M,U6r),e(_M,tU),e(tU,J6r),e(_M,Y6r),e(ie,K6r),e(ie,bM),e(bM,b6e),e(b6e,Z6r),e(bM,eTr),e(bM,aU),e(aU,oTr),e(bM,rTr),e(ie,tTr),e(ie,vM),e(vM,v6e),e(v6e,aTr),e(vM,nTr),e(vM,nU),e(nU,sTr),e(vM,lTr),e(ie,iTr),e(ie,FM),e(FM,F6e),e(F6e,dTr),e(FM,cTr),e(FM,sU),e(sU,fTr),e(FM,mTr),e(ie,gTr),e(ie,TM),e(TM,T6e),e(T6e,hTr),e(TM,pTr),e(TM,lU),e(lU,uTr),e(TM,_Tr),e(ie,bTr),e(ie,MM),e(MM,M6e),e(M6e,vTr),e(MM,FTr),e(MM,iU),e(iU,TTr),e(MM,MTr),e(ie,ETr),e(ie,EM),e(EM,E6e),e(E6e,CTr),e(EM,wTr),e(EM,dU),e(dU,ATr),e(EM,yTr),e(ie,LTr),e(ie,CM),e(CM,C6e),e(C6e,xTr),e(CM,$Tr),e(CM,cU),e(cU,kTr),e(CM,STr),e(ie,RTr),e(ie,wM),e(wM,w6e),e(w6e,PTr),e(wM,BTr),e(wM,fU),e(fU,ITr),e(wM,NTr),e(ie,qTr),e(ie,AM),e(AM,A6e),e(A6e,jTr),e(AM,DTr),e(AM,mU),e(mU,GTr),e(AM,OTr),e(ie,VTr),e(ie,yM),e(yM,y6e),e(y6e,XTr),e(yM,zTr),e(yM,gU),e(gU,WTr),e(yM,QTr),e(ie,HTr),e(ie,LM),e(LM,L6e),e(L6e,UTr),e(LM,JTr),e(LM,hU),e(hU,YTr),e(LM,KTr),e(ie,ZTr),e(ie,xM),e(xM,x6e),e(x6e,e7r),e(xM,o7r),e(xM,pU),e(pU,r7r),e(xM,t7r),e(ie,a7r),e(ie,$M),e($M,$6e),e($6e,n7r),e($M,s7r),e($M,uU),e(uU,l7r),e($M,i7r),e(ie,d7r),e(ie,kM),e(kM,k6e),e(k6e,c7r),e(kM,f7r),e(kM,_U),e(_U,m7r),e(kM,g7r),e(ie,h7r),e(ie,SM),e(SM,S6e),e(S6e,p7r),e(SM,u7r),e(SM,bU),e(bU,_7r),e(SM,b7r),e(ie,v7r),e(ie,RM),e(RM,R6e),e(R6e,F7r),e(RM,T7r),e(RM,vU),e(vU,M7r),e(RM,E7r),e(ie,C7r),e(ie,PM),e(PM,P6e),e(P6e,w7r),e(PM,A7r),e(PM,FU),e(FU,y7r),e(PM,L7r),e(ie,x7r),e(ie,BM),e(BM,B6e),e(B6e,$7r),e(BM,k7r),e(BM,TU),e(TU,S7r),e(BM,R7r),e(kr,P7r),M(IM,kr,null),b(f,mGe,_),b(f,gc,_),e(gc,NM),e(NM,I6e),M(u9,I6e,null),e(gc,B7r),e(gc,N6e),e(N6e,I7r),b(f,gGe,_),b(f,ar,_),M(_9,ar,null),e(ar,N7r),e(ar,hc),e(hc,q7r),e(hc,MU),e(MU,j7r),e(hc,D7r),e(hc,EU),e(EU,G7r),e(hc,O7r),e(ar,V7r),e(ar,b9),e(b9,X7r),e(b9,q6e),e(q6e,z7r),e(b9,W7r),e(ar,Q7r),e(ar,Bt),M(v9,Bt,null),e(Bt,H7r),e(Bt,j6e),e(j6e,U7r),e(Bt,J7r),e(Bt,pc),e(pc,Y7r),e(pc,D6e),e(D6e,K7r),e(pc,Z7r),e(pc,CU),e(CU,e8r),e(pc,o8r),e(Bt,r8r),M(qM,Bt,null),e(ar,t8r),e(ar,Sr),M(F9,Sr,null),e(Sr,a8r),e(Sr,G6e),e(G6e,n8r),e(Sr,s8r),e(Sr,cn),e(cn,l8r),e(cn,O6e),e(O6e,i8r),e(cn,d8r),e(cn,V6e),e(V6e,c8r),e(cn,f8r),e(cn,X6e),e(X6e,m8r),e(cn,g8r),e(Sr,h8r),e(Sr,Le),e(Le,jM),e(jM,z6e),e(z6e,p8r),e(jM,u8r),e(jM,wU),e(wU,_8r),e(jM,b8r),e(Le,v8r),e(Le,DM),e(DM,W6e),e(W6e,F8r),e(DM,T8r),e(DM,AU),e(AU,M8r),e(DM,E8r),e(Le,C8r),e(Le,GM),e(GM,Q6e),e(Q6e,w8r),e(GM,A8r),e(GM,yU),e(yU,y8r),e(GM,L8r),e(Le,x8r),e(Le,OM),e(OM,H6e),e(H6e,$8r),e(OM,k8r),e(OM,LU),e(LU,S8r),e(OM,R8r),e(Le,P8r),e(Le,VM),e(VM,U6e),e(U6e,B8r),e(VM,I8r),e(VM,xU),e(xU,N8r),e(VM,q8r),e(Le,j8r),e(Le,XM),e(XM,J6e),e(J6e,D8r),e(XM,G8r),e(XM,$U),e($U,O8r),e(XM,V8r),e(Le,X8r),e(Le,zM),e(zM,Y6e),e(Y6e,z8r),e(zM,W8r),e(zM,kU),e(kU,Q8r),e(zM,H8r),e(Le,U8r),e(Le,WM),e(WM,K6e),e(K6e,J8r),e(WM,Y8r),e(WM,SU),e(SU,K8r),e(WM,Z8r),e(Le,eMr),e(Le,QM),e(QM,Z6e),e(Z6e,oMr),e(QM,rMr),e(QM,RU),e(RU,tMr),e(QM,aMr),e(Le,nMr),e(Le,HM),e(HM,eTe),e(eTe,sMr),e(HM,lMr),e(HM,PU),e(PU,iMr),e(HM,dMr),e(Sr,cMr),M(UM,Sr,null),b(f,hGe,_),b(f,uc,_),e(uc,JM),e(JM,oTe),M(T9,oTe,null),e(uc,fMr),e(uc,rTe),e(rTe,mMr),b(f,pGe,_),b(f,nr,_),M(M9,nr,null),e(nr,gMr),e(nr,_c),e(_c,hMr),e(_c,BU),e(BU,pMr),e(_c,uMr),e(_c,IU),e(IU,_Mr),e(_c,bMr),e(nr,vMr),e(nr,E9),e(E9,FMr),e(E9,tTe),e(tTe,TMr),e(E9,MMr),e(nr,EMr),e(nr,It),M(C9,It,null),e(It,CMr),e(It,aTe),e(aTe,wMr),e(It,AMr),e(It,bc),e(bc,yMr),e(bc,nTe),e(nTe,LMr),e(bc,xMr),e(bc,NU),e(NU,$Mr),e(bc,kMr),e(It,SMr),M(YM,It,null),e(nr,RMr),e(nr,Rr),M(w9,Rr,null),e(Rr,PMr),e(Rr,sTe),e(sTe,BMr),e(Rr,IMr),e(Rr,fn),e(fn,NMr),e(fn,lTe),e(lTe,qMr),e(fn,jMr),e(fn,iTe),e(iTe,DMr),e(fn,GMr),e(fn,dTe),e(dTe,OMr),e(fn,VMr),e(Rr,XMr),e(Rr,re),e(re,KM),e(KM,cTe),e(cTe,zMr),e(KM,WMr),e(KM,qU),e(qU,QMr),e(KM,HMr),e(re,UMr),e(re,ZM),e(ZM,fTe),e(fTe,JMr),e(ZM,YMr),e(ZM,jU),e(jU,KMr),e(ZM,ZMr),e(re,e4r),e(re,e4),e(e4,mTe),e(mTe,o4r),e(e4,r4r),e(e4,DU),e(DU,t4r),e(e4,a4r),e(re,n4r),e(re,o4),e(o4,gTe),e(gTe,s4r),e(o4,l4r),e(o4,GU),e(GU,i4r),e(o4,d4r),e(re,c4r),e(re,r4),e(r4,hTe),e(hTe,f4r),e(r4,m4r),e(r4,OU),e(OU,g4r),e(r4,h4r),e(re,p4r),e(re,t4),e(t4,pTe),e(pTe,u4r),e(t4,_4r),e(t4,VU),e(VU,b4r),e(t4,v4r),e(re,F4r),e(re,a4),e(a4,uTe),e(uTe,T4r),e(a4,M4r),e(a4,XU),e(XU,E4r),e(a4,C4r),e(re,w4r),e(re,n4),e(n4,_Te),e(_Te,A4r),e(n4,y4r),e(n4,zU),e(zU,L4r),e(n4,x4r),e(re,$4r),e(re,s4),e(s4,bTe),e(bTe,k4r),e(s4,S4r),e(s4,WU),e(WU,R4r),e(s4,P4r),e(re,B4r),e(re,l4),e(l4,vTe),e(vTe,I4r),e(l4,N4r),e(l4,QU),e(QU,q4r),e(l4,j4r),e(re,D4r),e(re,i4),e(i4,FTe),e(FTe,G4r),e(i4,O4r),e(i4,HU),e(HU,V4r),e(i4,X4r),e(re,z4r),e(re,d4),e(d4,TTe),e(TTe,W4r),e(d4,Q4r),e(d4,UU),e(UU,H4r),e(d4,U4r),e(re,J4r),e(re,c4),e(c4,MTe),e(MTe,Y4r),e(c4,K4r),e(c4,JU),e(JU,Z4r),e(c4,eEr),e(re,oEr),e(re,f4),e(f4,ETe),e(ETe,rEr),e(f4,tEr),e(f4,YU),e(YU,aEr),e(f4,nEr),e(re,sEr),e(re,m4),e(m4,CTe),e(CTe,lEr),e(m4,iEr),e(m4,KU),e(KU,dEr),e(m4,cEr),e(re,fEr),e(re,g4),e(g4,wTe),e(wTe,mEr),e(g4,gEr),e(g4,ZU),e(ZU,hEr),e(g4,pEr),e(re,uEr),e(re,h4),e(h4,ATe),e(ATe,_Er),e(h4,bEr),e(h4,eJ),e(eJ,vEr),e(h4,FEr),e(re,TEr),e(re,p4),e(p4,yTe),e(yTe,MEr),e(p4,EEr),e(p4,oJ),e(oJ,CEr),e(p4,wEr),e(re,AEr),e(re,u4),e(u4,LTe),e(LTe,yEr),e(u4,LEr),e(u4,rJ),e(rJ,xEr),e(u4,$Er),e(re,kEr),e(re,_4),e(_4,xTe),e(xTe,SEr),e(_4,REr),e(_4,tJ),e(tJ,PEr),e(_4,BEr),e(re,IEr),e(re,b4),e(b4,$Te),e($Te,NEr),e(b4,qEr),e(b4,aJ),e(aJ,jEr),e(b4,DEr),e(re,GEr),e(re,v4),e(v4,kTe),e(kTe,OEr),e(v4,VEr),e(v4,nJ),e(nJ,XEr),e(v4,zEr),e(re,WEr),e(re,F4),e(F4,STe),e(STe,QEr),e(F4,HEr),e(F4,sJ),e(sJ,UEr),e(F4,JEr),e(re,YEr),e(re,T4),e(T4,RTe),e(RTe,KEr),e(T4,ZEr),e(T4,lJ),e(lJ,eCr),e(T4,oCr),e(re,rCr),e(re,M4),e(M4,PTe),e(PTe,tCr),e(M4,aCr),e(M4,iJ),e(iJ,nCr),e(M4,sCr),e(re,lCr),e(re,E4),e(E4,BTe),e(BTe,iCr),e(E4,dCr),e(E4,dJ),e(dJ,cCr),e(E4,fCr),e(Rr,mCr),M(C4,Rr,null),b(f,uGe,_),b(f,vc,_),e(vc,w4),e(w4,ITe),M(A9,ITe,null),e(vc,gCr),e(vc,NTe),e(NTe,hCr),b(f,_Ge,_),b(f,sr,_),M(y9,sr,null),e(sr,pCr),e(sr,Fc),e(Fc,uCr),e(Fc,cJ),e(cJ,_Cr),e(Fc,bCr),e(Fc,fJ),e(fJ,vCr),e(Fc,FCr),e(sr,TCr),e(sr,L9),e(L9,MCr),e(L9,qTe),e(qTe,ECr),e(L9,CCr),e(sr,wCr),e(sr,Nt),M(x9,Nt,null),e(Nt,ACr),e(Nt,jTe),e(jTe,yCr),e(Nt,LCr),e(Nt,Tc),e(Tc,xCr),e(Tc,DTe),e(DTe,$Cr),e(Tc,kCr),e(Tc,mJ),e(mJ,SCr),e(Tc,RCr),e(Nt,PCr),M(A4,Nt,null),e(sr,BCr),e(sr,Pr),M($9,Pr,null),e(Pr,ICr),e(Pr,GTe),e(GTe,NCr),e(Pr,qCr),e(Pr,mn),e(mn,jCr),e(mn,OTe),e(OTe,DCr),e(mn,GCr),e(mn,VTe),e(VTe,OCr),e(mn,VCr),e(mn,XTe),e(XTe,XCr),e(mn,zCr),e(Pr,WCr),e(Pr,pe),e(pe,y4),e(y4,zTe),e(zTe,QCr),e(y4,HCr),e(y4,gJ),e(gJ,UCr),e(y4,JCr),e(pe,YCr),e(pe,L4),e(L4,WTe),e(WTe,KCr),e(L4,ZCr),e(L4,hJ),e(hJ,e5r),e(L4,o5r),e(pe,r5r),e(pe,x4),e(x4,QTe),e(QTe,t5r),e(x4,a5r),e(x4,pJ),e(pJ,n5r),e(x4,s5r),e(pe,l5r),e(pe,$4),e($4,HTe),e(HTe,i5r),e($4,d5r),e($4,uJ),e(uJ,c5r),e($4,f5r),e(pe,m5r),e(pe,k4),e(k4,UTe),e(UTe,g5r),e(k4,h5r),e(k4,_J),e(_J,p5r),e(k4,u5r),e(pe,_5r),e(pe,S4),e(S4,JTe),e(JTe,b5r),e(S4,v5r),e(S4,bJ),e(bJ,F5r),e(S4,T5r),e(pe,M5r),e(pe,R4),e(R4,YTe),e(YTe,E5r),e(R4,C5r),e(R4,vJ),e(vJ,w5r),e(R4,A5r),e(pe,y5r),e(pe,P4),e(P4,KTe),e(KTe,L5r),e(P4,x5r),e(P4,FJ),e(FJ,$5r),e(P4,k5r),e(pe,S5r),e(pe,B4),e(B4,ZTe),e(ZTe,R5r),e(B4,P5r),e(B4,TJ),e(TJ,B5r),e(B4,I5r),e(pe,N5r),e(pe,I4),e(I4,e7e),e(e7e,q5r),e(I4,j5r),e(I4,MJ),e(MJ,D5r),e(I4,G5r),e(pe,O5r),e(pe,N4),e(N4,o7e),e(o7e,V5r),e(N4,X5r),e(N4,EJ),e(EJ,z5r),e(N4,W5r),e(pe,Q5r),e(pe,q4),e(q4,r7e),e(r7e,H5r),e(q4,U5r),e(q4,CJ),e(CJ,J5r),e(q4,Y5r),e(pe,K5r),e(pe,j4),e(j4,t7e),e(t7e,Z5r),e(j4,e3r),e(j4,wJ),e(wJ,o3r),e(j4,r3r),e(pe,t3r),e(pe,D4),e(D4,a7e),e(a7e,a3r),e(D4,n3r),e(D4,AJ),e(AJ,s3r),e(D4,l3r),e(pe,i3r),e(pe,G4),e(G4,n7e),e(n7e,d3r),e(G4,c3r),e(G4,yJ),e(yJ,f3r),e(G4,m3r),e(pe,g3r),e(pe,O4),e(O4,s7e),e(s7e,h3r),e(O4,p3r),e(O4,LJ),e(LJ,u3r),e(O4,_3r),e(pe,b3r),e(pe,V4),e(V4,l7e),e(l7e,v3r),e(V4,F3r),e(V4,xJ),e(xJ,T3r),e(V4,M3r),e(Pr,E3r),M(X4,Pr,null),b(f,bGe,_),b(f,Mc,_),e(Mc,z4),e(z4,i7e),M(k9,i7e,null),e(Mc,C3r),e(Mc,d7e),e(d7e,w3r),b(f,vGe,_),b(f,lr,_),M(S9,lr,null),e(lr,A3r),e(lr,Ec),e(Ec,y3r),e(Ec,$J),e($J,L3r),e(Ec,x3r),e(Ec,kJ),e(kJ,$3r),e(Ec,k3r),e(lr,S3r),e(lr,R9),e(R9,R3r),e(R9,c7e),e(c7e,P3r),e(R9,B3r),e(lr,I3r),e(lr,qt),M(P9,qt,null),e(qt,N3r),e(qt,f7e),e(f7e,q3r),e(qt,j3r),e(qt,Cc),e(Cc,D3r),e(Cc,m7e),e(m7e,G3r),e(Cc,O3r),e(Cc,SJ),e(SJ,V3r),e(Cc,X3r),e(qt,z3r),M(W4,qt,null),e(lr,W3r),e(lr,Br),M(B9,Br,null),e(Br,Q3r),e(Br,g7e),e(g7e,H3r),e(Br,U3r),e(Br,gn),e(gn,J3r),e(gn,h7e),e(h7e,Y3r),e(gn,K3r),e(gn,p7e),e(p7e,Z3r),e(gn,ewr),e(gn,u7e),e(u7e,owr),e(gn,rwr),e(Br,twr),e(Br,I9),e(I9,Q4),e(Q4,_7e),e(_7e,awr),e(Q4,nwr),e(Q4,RJ),e(RJ,swr),e(Q4,lwr),e(I9,iwr),e(I9,H4),e(H4,b7e),e(b7e,dwr),e(H4,cwr),e(H4,PJ),e(PJ,fwr),e(H4,mwr),e(Br,gwr),M(U4,Br,null),b(f,FGe,_),b(f,wc,_),e(wc,J4),e(J4,v7e),M(N9,v7e,null),e(wc,hwr),e(wc,F7e),e(F7e,pwr),b(f,TGe,_),b(f,ir,_),M(q9,ir,null),e(ir,uwr),e(ir,Ac),e(Ac,_wr),e(Ac,BJ),e(BJ,bwr),e(Ac,vwr),e(Ac,IJ),e(IJ,Fwr),e(Ac,Twr),e(ir,Mwr),e(ir,j9),e(j9,Ewr),e(j9,T7e),e(T7e,Cwr),e(j9,wwr),e(ir,Awr),e(ir,jt),M(D9,jt,null),e(jt,ywr),e(jt,M7e),e(M7e,Lwr),e(jt,xwr),e(jt,yc),e(yc,$wr),e(yc,E7e),e(E7e,kwr),e(yc,Swr),e(yc,NJ),e(NJ,Rwr),e(yc,Pwr),e(jt,Bwr),M(Y4,jt,null),e(ir,Iwr),e(ir,Ir),M(G9,Ir,null),e(Ir,Nwr),e(Ir,C7e),e(C7e,qwr),e(Ir,jwr),e(Ir,hn),e(hn,Dwr),e(hn,w7e),e(w7e,Gwr),e(hn,Owr),e(hn,A7e),e(A7e,Vwr),e(hn,Xwr),e(hn,y7e),e(y7e,zwr),e(hn,Wwr),e(Ir,Qwr),e(Ir,L7e),e(L7e,K4),e(K4,x7e),e(x7e,Hwr),e(K4,Uwr),e(K4,qJ),e(qJ,Jwr),e(K4,Ywr),e(Ir,Kwr),M(Z4,Ir,null),b(f,MGe,_),b(f,Lc,_),e(Lc,eE),e(eE,$7e),M(O9,$7e,null),e(Lc,Zwr),e(Lc,k7e),e(k7e,e0r),b(f,EGe,_),b(f,dr,_),M(V9,dr,null),e(dr,o0r),e(dr,xc),e(xc,r0r),e(xc,jJ),e(jJ,t0r),e(xc,a0r),e(xc,DJ),e(DJ,n0r),e(xc,s0r),e(dr,l0r),e(dr,X9),e(X9,i0r),e(X9,S7e),e(S7e,d0r),e(X9,c0r),e(dr,f0r),e(dr,Dt),M(z9,Dt,null),e(Dt,m0r),e(Dt,R7e),e(R7e,g0r),e(Dt,h0r),e(Dt,$c),e($c,p0r),e($c,P7e),e(P7e,u0r),e($c,_0r),e($c,GJ),e(GJ,b0r),e($c,v0r),e(Dt,F0r),M(oE,Dt,null),e(dr,T0r),e(dr,Nr),M(W9,Nr,null),e(Nr,M0r),e(Nr,B7e),e(B7e,E0r),e(Nr,C0r),e(Nr,pn),e(pn,w0r),e(pn,I7e),e(I7e,A0r),e(pn,y0r),e(pn,N7e),e(N7e,L0r),e(pn,x0r),e(pn,q7e),e(q7e,$0r),e(pn,k0r),e(Nr,S0r),e(Nr,de),e(de,rE),e(rE,j7e),e(j7e,R0r),e(rE,P0r),e(rE,OJ),e(OJ,B0r),e(rE,I0r),e(de,N0r),e(de,tE),e(tE,D7e),e(D7e,q0r),e(tE,j0r),e(tE,VJ),e(VJ,D0r),e(tE,G0r),e(de,O0r),e(de,aE),e(aE,G7e),e(G7e,V0r),e(aE,X0r),e(aE,XJ),e(XJ,z0r),e(aE,W0r),e(de,Q0r),e(de,nE),e(nE,O7e),e(O7e,H0r),e(nE,U0r),e(nE,zJ),e(zJ,J0r),e(nE,Y0r),e(de,K0r),e(de,sE),e(sE,V7e),e(V7e,Z0r),e(sE,eAr),e(sE,WJ),e(WJ,oAr),e(sE,rAr),e(de,tAr),e(de,lE),e(lE,X7e),e(X7e,aAr),e(lE,nAr),e(lE,QJ),e(QJ,sAr),e(lE,lAr),e(de,iAr),e(de,iE),e(iE,z7e),e(z7e,dAr),e(iE,cAr),e(iE,HJ),e(HJ,fAr),e(iE,mAr),e(de,gAr),e(de,dE),e(dE,W7e),e(W7e,hAr),e(dE,pAr),e(dE,UJ),e(UJ,uAr),e(dE,_Ar),e(de,bAr),e(de,cE),e(cE,Q7e),e(Q7e,vAr),e(cE,FAr),e(cE,JJ),e(JJ,TAr),e(cE,MAr),e(de,EAr),e(de,fE),e(fE,H7e),e(H7e,CAr),e(fE,wAr),e(fE,YJ),e(YJ,AAr),e(fE,yAr),e(de,LAr),e(de,mE),e(mE,U7e),e(U7e,xAr),e(mE,$Ar),e(mE,KJ),e(KJ,kAr),e(mE,SAr),e(de,RAr),e(de,gE),e(gE,J7e),e(J7e,PAr),e(gE,BAr),e(gE,ZJ),e(ZJ,IAr),e(gE,NAr),e(de,qAr),e(de,hE),e(hE,Y7e),e(Y7e,jAr),e(hE,DAr),e(hE,eY),e(eY,GAr),e(hE,OAr),e(de,VAr),e(de,pE),e(pE,K7e),e(K7e,XAr),e(pE,zAr),e(pE,oY),e(oY,WAr),e(pE,QAr),e(de,HAr),e(de,uE),e(uE,Z7e),e(Z7e,UAr),e(uE,JAr),e(uE,rY),e(rY,YAr),e(uE,KAr),e(de,ZAr),e(de,_E),e(_E,e8e),e(e8e,eyr),e(_E,oyr),e(_E,tY),e(tY,ryr),e(_E,tyr),e(de,ayr),e(de,bE),e(bE,o8e),e(o8e,nyr),e(bE,syr),e(bE,aY),e(aY,lyr),e(bE,iyr),e(de,dyr),e(de,vE),e(vE,r8e),e(r8e,cyr),e(vE,fyr),e(vE,nY),e(nY,myr),e(vE,gyr),e(de,hyr),e(de,FE),e(FE,t8e),e(t8e,pyr),e(FE,uyr),e(FE,sY),e(sY,_yr),e(FE,byr),e(de,vyr),e(de,TE),e(TE,a8e),e(a8e,Fyr),e(TE,Tyr),e(TE,lY),e(lY,Myr),e(TE,Eyr),e(Nr,Cyr),M(ME,Nr,null),b(f,CGe,_),b(f,kc,_),e(kc,EE),e(EE,n8e),M(Q9,n8e,null),e(kc,wyr),e(kc,s8e),e(s8e,Ayr),b(f,wGe,_),b(f,cr,_),M(H9,cr,null),e(cr,yyr),e(cr,Sc),e(Sc,Lyr),e(Sc,iY),e(iY,xyr),e(Sc,$yr),e(Sc,dY),e(dY,kyr),e(Sc,Syr),e(cr,Ryr),e(cr,U9),e(U9,Pyr),e(U9,l8e),e(l8e,Byr),e(U9,Iyr),e(cr,Nyr),e(cr,Gt),M(J9,Gt,null),e(Gt,qyr),e(Gt,i8e),e(i8e,jyr),e(Gt,Dyr),e(Gt,Rc),e(Rc,Gyr),e(Rc,d8e),e(d8e,Oyr),e(Rc,Vyr),e(Rc,cY),e(cY,Xyr),e(Rc,zyr),e(Gt,Wyr),M(CE,Gt,null),e(cr,Qyr),e(cr,qr),M(Y9,qr,null),e(qr,Hyr),e(qr,c8e),e(c8e,Uyr),e(qr,Jyr),e(qr,un),e(un,Yyr),e(un,f8e),e(f8e,Kyr),e(un,Zyr),e(un,m8e),e(m8e,eLr),e(un,oLr),e(un,g8e),e(g8e,rLr),e(un,tLr),e(qr,aLr),e(qr,ce),e(ce,wE),e(wE,h8e),e(h8e,nLr),e(wE,sLr),e(wE,fY),e(fY,lLr),e(wE,iLr),e(ce,dLr),e(ce,AE),e(AE,p8e),e(p8e,cLr),e(AE,fLr),e(AE,mY),e(mY,mLr),e(AE,gLr),e(ce,hLr),e(ce,yE),e(yE,u8e),e(u8e,pLr),e(yE,uLr),e(yE,gY),e(gY,_Lr),e(yE,bLr),e(ce,vLr),e(ce,LE),e(LE,_8e),e(_8e,FLr),e(LE,TLr),e(LE,hY),e(hY,MLr),e(LE,ELr),e(ce,CLr),e(ce,xE),e(xE,b8e),e(b8e,wLr),e(xE,ALr),e(xE,pY),e(pY,yLr),e(xE,LLr),e(ce,xLr),e(ce,$E),e($E,v8e),e(v8e,$Lr),e($E,kLr),e($E,uY),e(uY,SLr),e($E,RLr),e(ce,PLr),e(ce,kE),e(kE,F8e),e(F8e,BLr),e(kE,ILr),e(kE,_Y),e(_Y,NLr),e(kE,qLr),e(ce,jLr),e(ce,SE),e(SE,T8e),e(T8e,DLr),e(SE,GLr),e(SE,bY),e(bY,OLr),e(SE,VLr),e(ce,XLr),e(ce,RE),e(RE,M8e),e(M8e,zLr),e(RE,WLr),e(RE,vY),e(vY,QLr),e(RE,HLr),e(ce,ULr),e(ce,PE),e(PE,E8e),e(E8e,JLr),e(PE,YLr),e(PE,FY),e(FY,KLr),e(PE,ZLr),e(ce,e9r),e(ce,BE),e(BE,C8e),e(C8e,o9r),e(BE,r9r),e(BE,TY),e(TY,t9r),e(BE,a9r),e(ce,n9r),e(ce,IE),e(IE,w8e),e(w8e,s9r),e(IE,l9r),e(IE,MY),e(MY,i9r),e(IE,d9r),e(ce,c9r),e(ce,NE),e(NE,A8e),e(A8e,f9r),e(NE,m9r),e(NE,EY),e(EY,g9r),e(NE,h9r),e(ce,p9r),e(ce,qE),e(qE,y8e),e(y8e,u9r),e(qE,_9r),e(qE,CY),e(CY,b9r),e(qE,v9r),e(ce,F9r),e(ce,jE),e(jE,L8e),e(L8e,T9r),e(jE,M9r),e(jE,wY),e(wY,E9r),e(jE,C9r),e(ce,w9r),e(ce,DE),e(DE,x8e),e(x8e,A9r),e(DE,y9r),e(DE,AY),e(AY,L9r),e(DE,x9r),e(ce,$9r),e(ce,GE),e(GE,$8e),e($8e,k9r),e(GE,S9r),e(GE,yY),e(yY,R9r),e(GE,P9r),e(ce,B9r),e(ce,OE),e(OE,k8e),e(k8e,I9r),e(OE,N9r),e(OE,LY),e(LY,q9r),e(OE,j9r),e(ce,D9r),e(ce,VE),e(VE,S8e),e(S8e,G9r),e(VE,O9r),e(VE,xY),e(xY,V9r),e(VE,X9r),e(ce,z9r),e(ce,XE),e(XE,R8e),e(R8e,W9r),e(XE,Q9r),e(XE,$Y),e($Y,H9r),e(XE,U9r),e(qr,J9r),M(zE,qr,null),b(f,AGe,_),b(f,Pc,_),e(Pc,WE),e(WE,P8e),M(K9,P8e,null),e(Pc,Y9r),e(Pc,B8e),e(B8e,K9r),b(f,yGe,_),b(f,fr,_),M(Z9,fr,null),e(fr,Z9r),e(fr,Bc),e(Bc,exr),e(Bc,kY),e(kY,oxr),e(Bc,rxr),e(Bc,SY),e(SY,txr),e(Bc,axr),e(fr,nxr),e(fr,ex),e(ex,sxr),e(ex,I8e),e(I8e,lxr),e(ex,ixr),e(fr,dxr),e(fr,Ot),M(ox,Ot,null),e(Ot,cxr),e(Ot,N8e),e(N8e,fxr),e(Ot,mxr),e(Ot,Ic),e(Ic,gxr),e(Ic,q8e),e(q8e,hxr),e(Ic,pxr),e(Ic,RY),e(RY,uxr),e(Ic,_xr),e(Ot,bxr),M(QE,Ot,null),e(fr,vxr),e(fr,jr),M(rx,jr,null),e(jr,Fxr),e(jr,j8e),e(j8e,Txr),e(jr,Mxr),e(jr,_n),e(_n,Exr),e(_n,D8e),e(D8e,Cxr),e(_n,wxr),e(_n,G8e),e(G8e,Axr),e(_n,yxr),e(_n,O8e),e(O8e,Lxr),e(_n,xxr),e(jr,$xr),e(jr,V8e),e(V8e,HE),e(HE,X8e),e(X8e,kxr),e(HE,Sxr),e(HE,PY),e(PY,Rxr),e(HE,Pxr),e(jr,Bxr),M(UE,jr,null),b(f,LGe,_),b(f,Nc,_),e(Nc,JE),e(JE,z8e),M(tx,z8e,null),e(Nc,Ixr),e(Nc,W8e),e(W8e,Nxr),b(f,xGe,_),b(f,mr,_),M(ax,mr,null),e(mr,qxr),e(mr,qc),e(qc,jxr),e(qc,BY),e(BY,Dxr),e(qc,Gxr),e(qc,IY),e(IY,Oxr),e(qc,Vxr),e(mr,Xxr),e(mr,nx),e(nx,zxr),e(nx,Q8e),e(Q8e,Wxr),e(nx,Qxr),e(mr,Hxr),e(mr,Vt),M(sx,Vt,null),e(Vt,Uxr),e(Vt,H8e),e(H8e,Jxr),e(Vt,Yxr),e(Vt,jc),e(jc,Kxr),e(jc,U8e),e(U8e,Zxr),e(jc,e$r),e(jc,NY),e(NY,o$r),e(jc,r$r),e(Vt,t$r),M(YE,Vt,null),e(mr,a$r),e(mr,Dr),M(lx,Dr,null),e(Dr,n$r),e(Dr,J8e),e(J8e,s$r),e(Dr,l$r),e(Dr,bn),e(bn,i$r),e(bn,Y8e),e(Y8e,d$r),e(bn,c$r),e(bn,K8e),e(K8e,f$r),e(bn,m$r),e(bn,Z8e),e(Z8e,g$r),e(bn,h$r),e(Dr,p$r),e(Dr,eMe),e(eMe,KE),e(KE,oMe),e(oMe,u$r),e(KE,_$r),e(KE,qY),e(qY,b$r),e(KE,v$r),e(Dr,F$r),M(ZE,Dr,null),b(f,$Ge,_),b(f,Dc,_),e(Dc,eC),e(eC,rMe),M(ix,rMe,null),e(Dc,T$r),e(Dc,tMe),e(tMe,M$r),b(f,kGe,_),b(f,gr,_),M(dx,gr,null),e(gr,E$r),e(gr,Gc),e(Gc,C$r),e(Gc,jY),e(jY,w$r),e(Gc,A$r),e(Gc,DY),e(DY,y$r),e(Gc,L$r),e(gr,x$r),e(gr,cx),e(cx,$$r),e(cx,aMe),e(aMe,k$r),e(cx,S$r),e(gr,R$r),e(gr,Xt),M(fx,Xt,null),e(Xt,P$r),e(Xt,nMe),e(nMe,B$r),e(Xt,I$r),e(Xt,Oc),e(Oc,N$r),e(Oc,sMe),e(sMe,q$r),e(Oc,j$r),e(Oc,GY),e(GY,D$r),e(Oc,G$r),e(Xt,O$r),M(oC,Xt,null),e(gr,V$r),e(gr,Gr),M(mx,Gr,null),e(Gr,X$r),e(Gr,lMe),e(lMe,z$r),e(Gr,W$r),e(Gr,vn),e(vn,Q$r),e(vn,iMe),e(iMe,H$r),e(vn,U$r),e(vn,dMe),e(dMe,J$r),e(vn,Y$r),e(vn,cMe),e(cMe,K$r),e(vn,Z$r),e(Gr,ekr),e(Gr,te),e(te,rC),e(rC,fMe),e(fMe,okr),e(rC,rkr),e(rC,OY),e(OY,tkr),e(rC,akr),e(te,nkr),e(te,tC),e(tC,mMe),e(mMe,skr),e(tC,lkr),e(tC,VY),e(VY,ikr),e(tC,dkr),e(te,ckr),e(te,aC),e(aC,gMe),e(gMe,fkr),e(aC,mkr),e(aC,XY),e(XY,gkr),e(aC,hkr),e(te,pkr),e(te,nC),e(nC,hMe),e(hMe,ukr),e(nC,_kr),e(nC,zY),e(zY,bkr),e(nC,vkr),e(te,Fkr),e(te,sC),e(sC,pMe),e(pMe,Tkr),e(sC,Mkr),e(sC,WY),e(WY,Ekr),e(sC,Ckr),e(te,wkr),e(te,lC),e(lC,uMe),e(uMe,Akr),e(lC,ykr),e(lC,QY),e(QY,Lkr),e(lC,xkr),e(te,$kr),e(te,iC),e(iC,_Me),e(_Me,kkr),e(iC,Skr),e(iC,HY),e(HY,Rkr),e(iC,Pkr),e(te,Bkr),e(te,dC),e(dC,bMe),e(bMe,Ikr),e(dC,Nkr),e(dC,UY),e(UY,qkr),e(dC,jkr),e(te,Dkr),e(te,cC),e(cC,vMe),e(vMe,Gkr),e(cC,Okr),e(cC,JY),e(JY,Vkr),e(cC,Xkr),e(te,zkr),e(te,fC),e(fC,FMe),e(FMe,Wkr),e(fC,Qkr),e(fC,YY),e(YY,Hkr),e(fC,Ukr),e(te,Jkr),e(te,mC),e(mC,TMe),e(TMe,Ykr),e(mC,Kkr),e(mC,KY),e(KY,Zkr),e(mC,eSr),e(te,oSr),e(te,gC),e(gC,MMe),e(MMe,rSr),e(gC,tSr),e(gC,ZY),e(ZY,aSr),e(gC,nSr),e(te,sSr),e(te,hC),e(hC,EMe),e(EMe,lSr),e(hC,iSr),e(hC,eK),e(eK,dSr),e(hC,cSr),e(te,fSr),e(te,pC),e(pC,CMe),e(CMe,mSr),e(pC,gSr),e(pC,oK),e(oK,hSr),e(pC,pSr),e(te,uSr),e(te,uC),e(uC,wMe),e(wMe,_Sr),e(uC,bSr),e(uC,rK),e(rK,vSr),e(uC,FSr),e(te,TSr),e(te,_C),e(_C,AMe),e(AMe,MSr),e(_C,ESr),e(_C,tK),e(tK,CSr),e(_C,wSr),e(te,ASr),e(te,bC),e(bC,yMe),e(yMe,ySr),e(bC,LSr),e(bC,aK),e(aK,xSr),e(bC,$Sr),e(te,kSr),e(te,vC),e(vC,LMe),e(LMe,SSr),e(vC,RSr),e(vC,nK),e(nK,PSr),e(vC,BSr),e(te,ISr),e(te,FC),e(FC,xMe),e(xMe,NSr),e(FC,qSr),e(FC,sK),e(sK,jSr),e(FC,DSr),e(te,GSr),e(te,TC),e(TC,$Me),e($Me,OSr),e(TC,VSr),e(TC,lK),e(lK,XSr),e(TC,zSr),e(te,WSr),e(te,MC),e(MC,kMe),e(kMe,QSr),e(MC,HSr),e(MC,iK),e(iK,USr),e(MC,JSr),e(te,YSr),e(te,EC),e(EC,SMe),e(SMe,KSr),e(EC,ZSr),e(EC,dK),e(dK,eRr),e(EC,oRr),e(te,rRr),e(te,CC),e(CC,RMe),e(RMe,tRr),e(CC,aRr),e(CC,cK),e(cK,nRr),e(CC,sRr),e(te,lRr),e(te,wC),e(wC,PMe),e(PMe,iRr),e(wC,dRr),e(wC,fK),e(fK,cRr),e(wC,fRr),e(te,mRr),e(te,AC),e(AC,BMe),e(BMe,gRr),e(AC,hRr),e(AC,mK),e(mK,pRr),e(AC,uRr),e(te,_Rr),e(te,yC),e(yC,IMe),e(IMe,bRr),e(yC,vRr),e(yC,gK),e(gK,FRr),e(yC,TRr),e(Gr,MRr),M(LC,Gr,null),b(f,SGe,_),b(f,Vc,_),e(Vc,xC),e(xC,NMe),M(gx,NMe,null),e(Vc,ERr),e(Vc,qMe),e(qMe,CRr),b(f,RGe,_),b(f,hr,_),M(hx,hr,null),e(hr,wRr),e(hr,Xc),e(Xc,ARr),e(Xc,hK),e(hK,yRr),e(Xc,LRr),e(Xc,pK),e(pK,xRr),e(Xc,$Rr),e(hr,kRr),e(hr,px),e(px,SRr),e(px,jMe),e(jMe,RRr),e(px,PRr),e(hr,BRr),e(hr,zt),M(ux,zt,null),e(zt,IRr),e(zt,DMe),e(DMe,NRr),e(zt,qRr),e(zt,zc),e(zc,jRr),e(zc,GMe),e(GMe,DRr),e(zc,GRr),e(zc,uK),e(uK,ORr),e(zc,VRr),e(zt,XRr),M($C,zt,null),e(hr,zRr),e(hr,Or),M(_x,Or,null),e(Or,WRr),e(Or,OMe),e(OMe,QRr),e(Or,HRr),e(Or,Fn),e(Fn,URr),e(Fn,VMe),e(VMe,JRr),e(Fn,YRr),e(Fn,XMe),e(XMe,KRr),e(Fn,ZRr),e(Fn,zMe),e(zMe,ePr),e(Fn,oPr),e(Or,rPr),e(Or,xe),e(xe,kC),e(kC,WMe),e(WMe,tPr),e(kC,aPr),e(kC,_K),e(_K,nPr),e(kC,sPr),e(xe,lPr),e(xe,SC),e(SC,QMe),e(QMe,iPr),e(SC,dPr),e(SC,bK),e(bK,cPr),e(SC,fPr),e(xe,mPr),e(xe,RC),e(RC,HMe),e(HMe,gPr),e(RC,hPr),e(RC,vK),e(vK,pPr),e(RC,uPr),e(xe,_Pr),e(xe,PC),e(PC,UMe),e(UMe,bPr),e(PC,vPr),e(PC,FK),e(FK,FPr),e(PC,TPr),e(xe,MPr),e(xe,BC),e(BC,JMe),e(JMe,EPr),e(BC,CPr),e(BC,TK),e(TK,wPr),e(BC,APr),e(xe,yPr),e(xe,IC),e(IC,YMe),e(YMe,LPr),e(IC,xPr),e(IC,MK),e(MK,$Pr),e(IC,kPr),e(xe,SPr),e(xe,NC),e(NC,KMe),e(KMe,RPr),e(NC,PPr),e(NC,EK),e(EK,BPr),e(NC,IPr),e(xe,NPr),e(xe,qC),e(qC,ZMe),e(ZMe,qPr),e(qC,jPr),e(qC,CK),e(CK,DPr),e(qC,GPr),e(xe,OPr),e(xe,jC),e(jC,e4e),e(e4e,VPr),e(jC,XPr),e(jC,wK),e(wK,zPr),e(jC,WPr),e(xe,QPr),e(xe,DC),e(DC,o4e),e(o4e,HPr),e(DC,UPr),e(DC,AK),e(AK,JPr),e(DC,YPr),e(Or,KPr),M(GC,Or,null),b(f,PGe,_),b(f,Wc,_),e(Wc,OC),e(OC,r4e),M(bx,r4e,null),e(Wc,ZPr),e(Wc,t4e),e(t4e,eBr),b(f,BGe,_),b(f,pr,_),M(vx,pr,null),e(pr,oBr),e(pr,Qc),e(Qc,rBr),e(Qc,yK),e(yK,tBr),e(Qc,aBr),e(Qc,LK),e(LK,nBr),e(Qc,sBr),e(pr,lBr),e(pr,Fx),e(Fx,iBr),e(Fx,a4e),e(a4e,dBr),e(Fx,cBr),e(pr,fBr),e(pr,Wt),M(Tx,Wt,null),e(Wt,mBr),e(Wt,n4e),e(n4e,gBr),e(Wt,hBr),e(Wt,Hc),e(Hc,pBr),e(Hc,s4e),e(s4e,uBr),e(Hc,_Br),e(Hc,xK),e(xK,bBr),e(Hc,vBr),e(Wt,FBr),M(VC,Wt,null),e(pr,TBr),e(pr,Vr),M(Mx,Vr,null),e(Vr,MBr),e(Vr,l4e),e(l4e,EBr),e(Vr,CBr),e(Vr,Tn),e(Tn,wBr),e(Tn,i4e),e(i4e,ABr),e(Tn,yBr),e(Tn,d4e),e(d4e,LBr),e(Tn,xBr),e(Tn,c4e),e(c4e,$Br),e(Tn,kBr),e(Vr,SBr),e(Vr,Ee),e(Ee,XC),e(XC,f4e),e(f4e,RBr),e(XC,PBr),e(XC,$K),e($K,BBr),e(XC,IBr),e(Ee,NBr),e(Ee,zC),e(zC,m4e),e(m4e,qBr),e(zC,jBr),e(zC,kK),e(kK,DBr),e(zC,GBr),e(Ee,OBr),e(Ee,WC),e(WC,g4e),e(g4e,VBr),e(WC,XBr),e(WC,SK),e(SK,zBr),e(WC,WBr),e(Ee,QBr),e(Ee,QC),e(QC,h4e),e(h4e,HBr),e(QC,UBr),e(QC,RK),e(RK,JBr),e(QC,YBr),e(Ee,KBr),e(Ee,HC),e(HC,p4e),e(p4e,ZBr),e(HC,eIr),e(HC,PK),e(PK,oIr),e(HC,rIr),e(Ee,tIr),e(Ee,UC),e(UC,u4e),e(u4e,aIr),e(UC,nIr),e(UC,BK),e(BK,sIr),e(UC,lIr),e(Ee,iIr),e(Ee,JC),e(JC,_4e),e(_4e,dIr),e(JC,cIr),e(JC,IK),e(IK,fIr),e(JC,mIr),e(Ee,gIr),e(Ee,YC),e(YC,b4e),e(b4e,hIr),e(YC,pIr),e(YC,NK),e(NK,uIr),e(YC,_Ir),e(Ee,bIr),e(Ee,KC),e(KC,v4e),e(v4e,vIr),e(KC,FIr),e(KC,qK),e(qK,TIr),e(KC,MIr),e(Ee,EIr),e(Ee,ZC),e(ZC,F4e),e(F4e,CIr),e(ZC,wIr),e(ZC,jK),e(jK,AIr),e(ZC,yIr),e(Ee,LIr),e(Ee,e5),e(e5,T4e),e(T4e,xIr),e(e5,$Ir),e(e5,DK),e(DK,kIr),e(e5,SIr),e(Ee,RIr),e(Ee,o5),e(o5,M4e),e(M4e,PIr),e(o5,BIr),e(o5,GK),e(GK,IIr),e(o5,NIr),e(Vr,qIr),M(r5,Vr,null),b(f,IGe,_),b(f,Uc,_),e(Uc,t5),e(t5,E4e),M(Ex,E4e,null),e(Uc,jIr),e(Uc,C4e),e(C4e,DIr),b(f,NGe,_),b(f,ur,_),M(Cx,ur,null),e(ur,GIr),e(ur,Jc),e(Jc,OIr),e(Jc,OK),e(OK,VIr),e(Jc,XIr),e(Jc,VK),e(VK,zIr),e(Jc,WIr),e(ur,QIr),e(ur,wx),e(wx,HIr),e(wx,w4e),e(w4e,UIr),e(wx,JIr),e(ur,YIr),e(ur,Qt),M(Ax,Qt,null),e(Qt,KIr),e(Qt,A4e),e(A4e,ZIr),e(Qt,eNr),e(Qt,Yc),e(Yc,oNr),e(Yc,y4e),e(y4e,rNr),e(Yc,tNr),e(Yc,XK),e(XK,aNr),e(Yc,nNr),e(Qt,sNr),M(a5,Qt,null),e(ur,lNr),e(ur,Xr),M(yx,Xr,null),e(Xr,iNr),e(Xr,L4e),e(L4e,dNr),e(Xr,cNr),e(Xr,Mn),e(Mn,fNr),e(Mn,x4e),e(x4e,mNr),e(Mn,gNr),e(Mn,$4e),e($4e,hNr),e(Mn,pNr),e(Mn,k4e),e(k4e,uNr),e(Mn,_Nr),e(Xr,bNr),e(Xr,$e),e($e,n5),e(n5,S4e),e(S4e,vNr),e(n5,FNr),e(n5,zK),e(zK,TNr),e(n5,MNr),e($e,ENr),e($e,s5),e(s5,R4e),e(R4e,CNr),e(s5,wNr),e(s5,WK),e(WK,ANr),e(s5,yNr),e($e,LNr),e($e,l5),e(l5,P4e),e(P4e,xNr),e(l5,$Nr),e(l5,QK),e(QK,kNr),e(l5,SNr),e($e,RNr),e($e,i5),e(i5,B4e),e(B4e,PNr),e(i5,BNr),e(i5,HK),e(HK,INr),e(i5,NNr),e($e,qNr),e($e,d5),e(d5,I4e),e(I4e,jNr),e(d5,DNr),e(d5,UK),e(UK,GNr),e(d5,ONr),e($e,VNr),e($e,c5),e(c5,N4e),e(N4e,XNr),e(c5,zNr),e(c5,JK),e(JK,WNr),e(c5,QNr),e($e,HNr),e($e,f5),e(f5,q4e),e(q4e,UNr),e(f5,JNr),e(f5,YK),e(YK,YNr),e(f5,KNr),e($e,ZNr),e($e,m5),e(m5,j4e),e(j4e,eqr),e(m5,oqr),e(m5,KK),e(KK,rqr),e(m5,tqr),e($e,aqr),e($e,g5),e(g5,D4e),e(D4e,nqr),e(g5,sqr),e(g5,ZK),e(ZK,lqr),e(g5,iqr),e($e,dqr),e($e,h5),e(h5,G4e),e(G4e,cqr),e(h5,fqr),e(h5,eZ),e(eZ,mqr),e(h5,gqr),e(Xr,hqr),M(p5,Xr,null),b(f,qGe,_),b(f,Kc,_),e(Kc,u5),e(u5,O4e),M(Lx,O4e,null),e(Kc,pqr),e(Kc,V4e),e(V4e,uqr),b(f,jGe,_),b(f,_r,_),M(xx,_r,null),e(_r,_qr),e(_r,Zc),e(Zc,bqr),e(Zc,oZ),e(oZ,vqr),e(Zc,Fqr),e(Zc,rZ),e(rZ,Tqr),e(Zc,Mqr),e(_r,Eqr),e(_r,$x),e($x,Cqr),e($x,X4e),e(X4e,wqr),e($x,Aqr),e(_r,yqr),e(_r,Ht),M(kx,Ht,null),e(Ht,Lqr),e(Ht,z4e),e(z4e,xqr),e(Ht,$qr),e(Ht,ef),e(ef,kqr),e(ef,W4e),e(W4e,Sqr),e(ef,Rqr),e(ef,tZ),e(tZ,Pqr),e(ef,Bqr),e(Ht,Iqr),M(_5,Ht,null),e(_r,Nqr),e(_r,zr),M(Sx,zr,null),e(zr,qqr),e(zr,Q4e),e(Q4e,jqr),e(zr,Dqr),e(zr,En),e(En,Gqr),e(En,H4e),e(H4e,Oqr),e(En,Vqr),e(En,U4e),e(U4e,Xqr),e(En,zqr),e(En,J4e),e(J4e,Wqr),e(En,Qqr),e(zr,Hqr),e(zr,Pe),e(Pe,b5),e(b5,Y4e),e(Y4e,Uqr),e(b5,Jqr),e(b5,aZ),e(aZ,Yqr),e(b5,Kqr),e(Pe,Zqr),e(Pe,v5),e(v5,K4e),e(K4e,ejr),e(v5,ojr),e(v5,nZ),e(nZ,rjr),e(v5,tjr),e(Pe,ajr),e(Pe,F5),e(F5,Z4e),e(Z4e,njr),e(F5,sjr),e(F5,sZ),e(sZ,ljr),e(F5,ijr),e(Pe,djr),e(Pe,T5),e(T5,eEe),e(eEe,cjr),e(T5,fjr),e(T5,lZ),e(lZ,mjr),e(T5,gjr),e(Pe,hjr),e(Pe,M5),e(M5,oEe),e(oEe,pjr),e(M5,ujr),e(M5,iZ),e(iZ,_jr),e(M5,bjr),e(Pe,vjr),e(Pe,E5),e(E5,rEe),e(rEe,Fjr),e(E5,Tjr),e(E5,dZ),e(dZ,Mjr),e(E5,Ejr),e(Pe,Cjr),e(Pe,C5),e(C5,tEe),e(tEe,wjr),e(C5,Ajr),e(C5,cZ),e(cZ,yjr),e(C5,Ljr),e(Pe,xjr),e(Pe,w5),e(w5,aEe),e(aEe,$jr),e(w5,kjr),e(w5,fZ),e(fZ,Sjr),e(w5,Rjr),e(Pe,Pjr),e(Pe,A5),e(A5,nEe),e(nEe,Bjr),e(A5,Ijr),e(A5,mZ),e(mZ,Njr),e(A5,qjr),e(zr,jjr),M(y5,zr,null),b(f,DGe,_),b(f,of,_),e(of,L5),e(L5,sEe),M(Rx,sEe,null),e(of,Djr),e(of,lEe),e(lEe,Gjr),b(f,GGe,_),b(f,br,_),M(Px,br,null),e(br,Ojr),e(br,rf),e(rf,Vjr),e(rf,gZ),e(gZ,Xjr),e(rf,zjr),e(rf,hZ),e(hZ,Wjr),e(rf,Qjr),e(br,Hjr),e(br,Bx),e(Bx,Ujr),e(Bx,iEe),e(iEe,Jjr),e(Bx,Yjr),e(br,Kjr),e(br,Ut),M(Ix,Ut,null),e(Ut,Zjr),e(Ut,dEe),e(dEe,eDr),e(Ut,oDr),e(Ut,tf),e(tf,rDr),e(tf,cEe),e(cEe,tDr),e(tf,aDr),e(tf,pZ),e(pZ,nDr),e(tf,sDr),e(Ut,lDr),M(x5,Ut,null),e(br,iDr),e(br,Wr),M(Nx,Wr,null),e(Wr,dDr),e(Wr,fEe),e(fEe,cDr),e(Wr,fDr),e(Wr,Cn),e(Cn,mDr),e(Cn,mEe),e(mEe,gDr),e(Cn,hDr),e(Cn,gEe),e(gEe,pDr),e(Cn,uDr),e(Cn,hEe),e(hEe,_Dr),e(Cn,bDr),e(Wr,vDr),e(Wr,ke),e(ke,$5),e($5,pEe),e(pEe,FDr),e($5,TDr),e($5,uZ),e(uZ,MDr),e($5,EDr),e(ke,CDr),e(ke,k5),e(k5,uEe),e(uEe,wDr),e(k5,ADr),e(k5,_Z),e(_Z,yDr),e(k5,LDr),e(ke,xDr),e(ke,S5),e(S5,_Ee),e(_Ee,$Dr),e(S5,kDr),e(S5,bZ),e(bZ,SDr),e(S5,RDr),e(ke,PDr),e(ke,R5),e(R5,bEe),e(bEe,BDr),e(R5,IDr),e(R5,vZ),e(vZ,NDr),e(R5,qDr),e(ke,jDr),e(ke,P5),e(P5,vEe),e(vEe,DDr),e(P5,GDr),e(P5,FZ),e(FZ,ODr),e(P5,VDr),e(ke,XDr),e(ke,B5),e(B5,FEe),e(FEe,zDr),e(B5,WDr),e(B5,TZ),e(TZ,QDr),e(B5,HDr),e(ke,UDr),e(ke,I5),e(I5,TEe),e(TEe,JDr),e(I5,YDr),e(I5,MZ),e(MZ,KDr),e(I5,ZDr),e(ke,eGr),e(ke,N5),e(N5,MEe),e(MEe,oGr),e(N5,rGr),e(N5,EZ),e(EZ,tGr),e(N5,aGr),e(ke,nGr),e(ke,q5),e(q5,EEe),e(EEe,sGr),e(q5,lGr),e(q5,CZ),e(CZ,iGr),e(q5,dGr),e(ke,cGr),e(ke,j5),e(j5,CEe),e(CEe,fGr),e(j5,mGr),e(j5,wZ),e(wZ,gGr),e(j5,hGr),e(Wr,pGr),M(D5,Wr,null),b(f,OGe,_),b(f,af,_),e(af,G5),e(G5,wEe),M(qx,wEe,null),e(af,uGr),e(af,AEe),e(AEe,_Gr),b(f,VGe,_),b(f,vr,_),M(jx,vr,null),e(vr,bGr),e(vr,nf),e(nf,vGr),e(nf,AZ),e(AZ,FGr),e(nf,TGr),e(nf,yZ),e(yZ,MGr),e(nf,EGr),e(vr,CGr),e(vr,Dx),e(Dx,wGr),e(Dx,yEe),e(yEe,AGr),e(Dx,yGr),e(vr,LGr),e(vr,Jt),M(Gx,Jt,null),e(Jt,xGr),e(Jt,LEe),e(LEe,$Gr),e(Jt,kGr),e(Jt,sf),e(sf,SGr),e(sf,xEe),e(xEe,RGr),e(sf,PGr),e(sf,LZ),e(LZ,BGr),e(sf,IGr),e(Jt,NGr),M(O5,Jt,null),e(vr,qGr),e(vr,Qr),M(Ox,Qr,null),e(Qr,jGr),e(Qr,$Ee),e($Ee,DGr),e(Qr,GGr),e(Qr,wn),e(wn,OGr),e(wn,kEe),e(kEe,VGr),e(wn,XGr),e(wn,SEe),e(SEe,zGr),e(wn,WGr),e(wn,REe),e(REe,QGr),e(wn,HGr),e(Qr,UGr),e(Qr,Se),e(Se,V5),e(V5,PEe),e(PEe,JGr),e(V5,YGr),e(V5,xZ),e(xZ,KGr),e(V5,ZGr),e(Se,eOr),e(Se,X5),e(X5,BEe),e(BEe,oOr),e(X5,rOr),e(X5,$Z),e($Z,tOr),e(X5,aOr),e(Se,nOr),e(Se,z5),e(z5,IEe),e(IEe,sOr),e(z5,lOr),e(z5,kZ),e(kZ,iOr),e(z5,dOr),e(Se,cOr),e(Se,W5),e(W5,NEe),e(NEe,fOr),e(W5,mOr),e(W5,SZ),e(SZ,gOr),e(W5,hOr),e(Se,pOr),e(Se,Q5),e(Q5,qEe),e(qEe,uOr),e(Q5,_Or),e(Q5,RZ),e(RZ,bOr),e(Q5,vOr),e(Se,FOr),e(Se,H5),e(H5,jEe),e(jEe,TOr),e(H5,MOr),e(H5,PZ),e(PZ,EOr),e(H5,COr),e(Se,wOr),e(Se,U5),e(U5,DEe),e(DEe,AOr),e(U5,yOr),e(U5,BZ),e(BZ,LOr),e(U5,xOr),e(Se,$Or),e(Se,J5),e(J5,GEe),e(GEe,kOr),e(J5,SOr),e(J5,IZ),e(IZ,ROr),e(J5,POr),e(Se,BOr),e(Se,Y5),e(Y5,OEe),e(OEe,IOr),e(Y5,NOr),e(Y5,NZ),e(NZ,qOr),e(Y5,jOr),e(Se,DOr),e(Se,K5),e(K5,VEe),e(VEe,GOr),e(K5,OOr),e(K5,qZ),e(qZ,VOr),e(K5,XOr),e(Qr,zOr),M(Z5,Qr,null),b(f,XGe,_),b(f,lf,_),e(lf,e3),e(e3,XEe),M(Vx,XEe,null),e(lf,WOr),e(lf,zEe),e(zEe,QOr),b(f,zGe,_),b(f,Fr,_),M(Xx,Fr,null),e(Fr,HOr),e(Fr,df),e(df,UOr),e(df,jZ),e(jZ,JOr),e(df,YOr),e(df,DZ),e(DZ,KOr),e(df,ZOr),e(Fr,eVr),e(Fr,zx),e(zx,oVr),e(zx,WEe),e(WEe,rVr),e(zx,tVr),e(Fr,aVr),e(Fr,Yt),M(Wx,Yt,null),e(Yt,nVr),e(Yt,QEe),e(QEe,sVr),e(Yt,lVr),e(Yt,cf),e(cf,iVr),e(cf,HEe),e(HEe,dVr),e(cf,cVr),e(cf,GZ),e(GZ,fVr),e(cf,mVr),e(Yt,gVr),M(o3,Yt,null),e(Fr,hVr),e(Fr,Hr),M(Qx,Hr,null),e(Hr,pVr),e(Hr,UEe),e(UEe,uVr),e(Hr,_Vr),e(Hr,An),e(An,bVr),e(An,JEe),e(JEe,vVr),e(An,FVr),e(An,YEe),e(YEe,TVr),e(An,MVr),e(An,KEe),e(KEe,EVr),e(An,CVr),e(Hr,wVr),e(Hr,Oe),e(Oe,r3),e(r3,ZEe),e(ZEe,AVr),e(r3,yVr),e(r3,OZ),e(OZ,LVr),e(r3,xVr),e(Oe,$Vr),e(Oe,t3),e(t3,eCe),e(eCe,kVr),e(t3,SVr),e(t3,VZ),e(VZ,RVr),e(t3,PVr),e(Oe,BVr),e(Oe,a3),e(a3,oCe),e(oCe,IVr),e(a3,NVr),e(a3,XZ),e(XZ,qVr),e(a3,jVr),e(Oe,DVr),e(Oe,n3),e(n3,rCe),e(rCe,GVr),e(n3,OVr),e(n3,zZ),e(zZ,VVr),e(n3,XVr),e(Oe,zVr),e(Oe,s3),e(s3,tCe),e(tCe,WVr),e(s3,QVr),e(s3,WZ),e(WZ,HVr),e(s3,UVr),e(Oe,JVr),e(Oe,l3),e(l3,aCe),e(aCe,YVr),e(l3,KVr),e(l3,QZ),e(QZ,ZVr),e(l3,eXr),e(Oe,oXr),e(Oe,i3),e(i3,nCe),e(nCe,rXr),e(i3,tXr),e(i3,HZ),e(HZ,aXr),e(i3,nXr),e(Oe,sXr),e(Oe,d3),e(d3,sCe),e(sCe,lXr),e(d3,iXr),e(d3,UZ),e(UZ,dXr),e(d3,cXr),e(Hr,fXr),M(c3,Hr,null),b(f,WGe,_),b(f,ff,_),e(ff,f3),e(f3,lCe),M(Hx,lCe,null),e(ff,mXr),e(ff,iCe),e(iCe,gXr),b(f,QGe,_),b(f,Tr,_),M(Ux,Tr,null),e(Tr,hXr),e(Tr,mf),e(mf,pXr),e(mf,JZ),e(JZ,uXr),e(mf,_Xr),e(mf,YZ),e(YZ,bXr),e(mf,vXr),e(Tr,FXr),e(Tr,Jx),e(Jx,TXr),e(Jx,dCe),e(dCe,MXr),e(Jx,EXr),e(Tr,CXr),e(Tr,Kt),M(Yx,Kt,null),e(Kt,wXr),e(Kt,cCe),e(cCe,AXr),e(Kt,yXr),e(Kt,gf),e(gf,LXr),e(gf,fCe),e(fCe,xXr),e(gf,$Xr),e(gf,KZ),e(KZ,kXr),e(gf,SXr),e(Kt,RXr),M(m3,Kt,null),e(Tr,PXr),e(Tr,Ur),M(Kx,Ur,null),e(Ur,BXr),e(Ur,mCe),e(mCe,IXr),e(Ur,NXr),e(Ur,yn),e(yn,qXr),e(yn,gCe),e(gCe,jXr),e(yn,DXr),e(yn,hCe),e(hCe,GXr),e(yn,OXr),e(yn,pCe),e(pCe,VXr),e(yn,XXr),e(Ur,zXr),e(Ur,Ve),e(Ve,g3),e(g3,uCe),e(uCe,WXr),e(g3,QXr),e(g3,ZZ),e(ZZ,HXr),e(g3,UXr),e(Ve,JXr),e(Ve,h3),e(h3,_Ce),e(_Ce,YXr),e(h3,KXr),e(h3,eee),e(eee,ZXr),e(h3,ezr),e(Ve,ozr),e(Ve,p3),e(p3,bCe),e(bCe,rzr),e(p3,tzr),e(p3,oee),e(oee,azr),e(p3,nzr),e(Ve,szr),e(Ve,u3),e(u3,vCe),e(vCe,lzr),e(u3,izr),e(u3,ree),e(ree,dzr),e(u3,czr),e(Ve,fzr),e(Ve,_3),e(_3,FCe),e(FCe,mzr),e(_3,gzr),e(_3,tee),e(tee,hzr),e(_3,pzr),e(Ve,uzr),e(Ve,b3),e(b3,TCe),e(TCe,_zr),e(b3,bzr),e(b3,aee),e(aee,vzr),e(b3,Fzr),e(Ve,Tzr),e(Ve,v3),e(v3,MCe),e(MCe,Mzr),e(v3,Ezr),e(v3,nee),e(nee,Czr),e(v3,wzr),e(Ve,Azr),e(Ve,F3),e(F3,ECe),e(ECe,yzr),e(F3,Lzr),e(F3,see),e(see,xzr),e(F3,$zr),e(Ur,kzr),M(T3,Ur,null),b(f,HGe,_),b(f,hf,_),e(hf,M3),e(M3,CCe),M(Zx,CCe,null),e(hf,Szr),e(hf,wCe),e(wCe,Rzr),b(f,UGe,_),b(f,Mr,_),M(e$,Mr,null),e(Mr,Pzr),e(Mr,pf),e(pf,Bzr),e(pf,lee),e(lee,Izr),e(pf,Nzr),e(pf,iee),e(iee,qzr),e(pf,jzr),e(Mr,Dzr),e(Mr,o$),e(o$,Gzr),e(o$,ACe),e(ACe,Ozr),e(o$,Vzr),e(Mr,Xzr),e(Mr,Zt),M(r$,Zt,null),e(Zt,zzr),e(Zt,yCe),e(yCe,Wzr),e(Zt,Qzr),e(Zt,uf),e(uf,Hzr),e(uf,LCe),e(LCe,Uzr),e(uf,Jzr),e(uf,dee),e(dee,Yzr),e(uf,Kzr),e(Zt,Zzr),M(E3,Zt,null),e(Mr,eWr),e(Mr,Jr),M(t$,Jr,null),e(Jr,oWr),e(Jr,xCe),e(xCe,rWr),e(Jr,tWr),e(Jr,Ln),e(Ln,aWr),e(Ln,$Ce),e($Ce,nWr),e(Ln,sWr),e(Ln,kCe),e(kCe,lWr),e(Ln,iWr),e(Ln,SCe),e(SCe,dWr),e(Ln,cWr),e(Jr,fWr),e(Jr,RCe),e(RCe,C3),e(C3,PCe),e(PCe,mWr),e(C3,gWr),e(C3,cee),e(cee,hWr),e(C3,pWr),e(Jr,uWr),M(w3,Jr,null),b(f,JGe,_),b(f,_f,_),e(_f,A3),e(A3,BCe),M(a$,BCe,null),e(_f,_Wr),e(_f,ICe),e(ICe,bWr),b(f,YGe,_),b(f,Er,_),M(n$,Er,null),e(Er,vWr),e(Er,bf),e(bf,FWr),e(bf,fee),e(fee,TWr),e(bf,MWr),e(bf,mee),e(mee,EWr),e(bf,CWr),e(Er,wWr),e(Er,s$),e(s$,AWr),e(s$,NCe),e(NCe,yWr),e(s$,LWr),e(Er,xWr),e(Er,ea),M(l$,ea,null),e(ea,$Wr),e(ea,qCe),e(qCe,kWr),e(ea,SWr),e(ea,vf),e(vf,RWr),e(vf,jCe),e(jCe,PWr),e(vf,BWr),e(vf,gee),e(gee,IWr),e(vf,NWr),e(ea,qWr),M(y3,ea,null),e(Er,jWr),e(Er,Yr),M(i$,Yr,null),e(Yr,DWr),e(Yr,DCe),e(DCe,GWr),e(Yr,OWr),e(Yr,xn),e(xn,VWr),e(xn,GCe),e(GCe,XWr),e(xn,zWr),e(xn,OCe),e(OCe,WWr),e(xn,QWr),e(xn,VCe),e(VCe,HWr),e(xn,UWr),e(Yr,JWr),e(Yr,d$),e(d$,L3),e(L3,XCe),e(XCe,YWr),e(L3,KWr),e(L3,hee),e(hee,ZWr),e(L3,eQr),e(d$,oQr),e(d$,x3),e(x3,zCe),e(zCe,rQr),e(x3,tQr),e(x3,pee),e(pee,aQr),e(x3,nQr),e(Yr,sQr),M($3,Yr,null),b(f,KGe,_),b(f,Ff,_),e(Ff,k3),e(k3,WCe),M(c$,WCe,null),e(Ff,lQr),e(Ff,QCe),e(QCe,iQr),b(f,ZGe,_),b(f,Cr,_),M(f$,Cr,null),e(Cr,dQr),e(Cr,Tf),e(Tf,cQr),e(Tf,uee),e(uee,fQr),e(Tf,mQr),e(Tf,_ee),e(_ee,gQr),e(Tf,hQr),e(Cr,pQr),e(Cr,m$),e(m$,uQr),e(m$,HCe),e(HCe,_Qr),e(m$,bQr),e(Cr,vQr),e(Cr,oa),M(g$,oa,null),e(oa,FQr),e(oa,UCe),e(UCe,TQr),e(oa,MQr),e(oa,Mf),e(Mf,EQr),e(Mf,JCe),e(JCe,CQr),e(Mf,wQr),e(Mf,bee),e(bee,AQr),e(Mf,yQr),e(oa,LQr),M(S3,oa,null),e(Cr,xQr),e(Cr,Kr),M(h$,Kr,null),e(Kr,$Qr),e(Kr,YCe),e(YCe,kQr),e(Kr,SQr),e(Kr,$n),e($n,RQr),e($n,KCe),e(KCe,PQr),e($n,BQr),e($n,ZCe),e(ZCe,IQr),e($n,NQr),e($n,e5e),e(e5e,qQr),e($n,jQr),e(Kr,DQr),e(Kr,o5e),e(o5e,R3),e(R3,r5e),e(r5e,GQr),e(R3,OQr),e(R3,vee),e(vee,VQr),e(R3,XQr),e(Kr,zQr),M(P3,Kr,null),eOe=!0},p(f,[_]){const p$={};_&2&&(p$.$$scope={dirty:_,ctx:f}),kf.$set(p$);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),Ig.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),_h.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),Kh.$set(n5e);const u$={};_&2&&(u$.$$scope={dirty:_,ctx:f}),Zh.$set(u$);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),vp.$set(s5e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Fp.$set(kn);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),Ep.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),F_.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),M_.$set(d5e);const _$={};_&2&&(_$.$$scope={dirty:_,ctx:f}),m2.$set(_$);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),h2.$set(c5e);const b$={};_&2&&(b$.$$scope={dirty:_,ctx:f}),Z2.$set(b$);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),o1.$set(f5e);const v$={};_&2&&(v$.$$scope={dirty:_,ctx:f}),j1.$set(v$);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),G1.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),nb.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),lb.$set(h5e);const Ef={};_&2&&(Ef.$$scope={dirty:_,ctx:f}),rv.$set(Ef);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),av.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),Bv.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),Nv.$set(_5e);const F$={};_&2&&(F$.$$scope={dirty:_,ctx:f}),Xv.$set(F$);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),Wv.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),LF.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),$F.$set(F5e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),b6.$set(rt);const T$={};_&2&&(T$.$$scope={dirty:_,ctx:f}),F6.$set(T$);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),E6.$set(T5e);const M$={};_&2&&(M$.$$scope={dirty:_,ctx:f}),w6.$set(M$);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),j6.$set(M5e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),G6.$set(tt);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),X6.$set(E5e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),W6.$set(Cf);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),U6.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),Y6.$set(w5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),iT.$set(y);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),cT.$set(B3);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),_T.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),vT.$set(y5e);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),kT.$set(I3);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),RT.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),NT.$set(x5e);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),jT.$set(N3);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),WT.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),HT.$set(k5e);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),ZT.$set(q3);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),o7.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),n7.$set(R5e);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),l7.$set(j3);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),c7.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),m7.$set(B5e);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),b7.$set(D3);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),F7.$set(I5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),E7.$set(N5e);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),w7.$set(G3);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),b8.$set(q5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),F8.$set(j5e);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),X8.$set(O3);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),W8.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),sM.$set(G5e);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),iM.$set(V3);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),gM.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),pM.$set(V5e);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),IM.$set(X3);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),qM.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),UM.$set(z5e);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),YM.$set(z3);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),C4.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),A4.$set(Q5e);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),X4.$set(W3);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),W4.$set(H5e);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),U4.$set(U5e);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),Y4.$set(Q3);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),Z4.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),oE.$set(Y5e);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),ME.$set(H3);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),CE.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),zE.$set(Z5e);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),QE.$set(U3);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:f}),UE.$set(e3e);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:f}),YE.$set(o3e);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),ZE.$set(J3);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),oC.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),LC.$set(t3e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),$C.$set(Y3);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),GC.$set(a3e);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),VC.$set(n3e);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),r5.$set(K3);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),a5.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),p5.$set(l3e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),_5.$set(Z3);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),y5.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),x5.$set(d3e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),D5.$set(ew);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),O5.$set(c3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),Z5.$set(f3e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),o3.$set(ow);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),c3.$set(m3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),m3.$set(g3e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),T3.$set(rw);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),E3.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),w3.$set(p3e);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),y3.$set(tw);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),$3.$set(u3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),S3.$set(_3e);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),P3.$set(aw)},i(f){eOe||(E(d.$$.fragment,f),E(La.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(kf.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(fA.$$.fragment,f),E(Ig.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(_A.$$.fragment,f),E(_h.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(Kh.$$.fragment,f),E(Zh.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(vp.$$.fragment,f),E(Fp.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(Ep.$$.fragment,f),E(BA.$$.fragment,f),E(F_.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(M_.$$.fragment,f),E(DA.$$.fragment,f),E(m2.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(h2.$$.fragment,f),E(zA.$$.fragment,f),E(Z2.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(UA.$$.fragment,f),E(o1.$$.fragment,f),E(JA.$$.fragment,f),E(j1.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ey.$$.fragment,f),E(G1.$$.fragment,f),E(oy.$$.fragment,f),E(nb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(lb.$$.fragment,f),E(sy.$$.fragment,f),E(rv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(av.$$.fragment,f),E(fy.$$.fragment,f),E(Bv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Nv.$$.fragment,f),E(uy.$$.fragment,f),E(Xv.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Wv.$$.fragment,f),E(Ty.$$.fragment,f),E(LF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E($F.$$.fragment,f),E(Ay.$$.fragment,f),E(b6.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(F6.$$.fragment,f),E(ky.$$.fragment,f),E(E6.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(w6.$$.fragment,f),E(Iy.$$.fragment,f),E(j6.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(G6.$$.fragment,f),E(Gy.$$.fragment,f),E(X6.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(W6.$$.fragment,f),E(Wy.$$.fragment,f),E(U6.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Y6.$$.fragment,f),E(Yy.$$.fragment,f),E(iT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(cT.$$.fragment,f),E(rL.$$.fragment,f),E(_T.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(vT.$$.fragment,f),E(lL.$$.fragment,f),E(kT.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(RT.$$.fragment,f),E(mL.$$.fragment,f),E(NT.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(jT.$$.fragment,f),E(bL.$$.fragment,f),E(WT.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(HT.$$.fragment,f),E(EL.$$.fragment,f),E(ZT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(o7.$$.fragment,f),E(LL.$$.fragment,f),E(n7.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(l7.$$.fragment,f),E(PL.$$.fragment,f),E(c7.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(m7.$$.fragment,f),E(jL.$$.fragment,f),E(b7.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(F7.$$.fragment,f),E(XL.$$.fragment,f),E(E7.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(w7.$$.fragment,f),E(UL.$$.fragment,f),E(b8.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(F8.$$.fragment,f),E(e9.$$.fragment,f),E(X8.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(W8.$$.fragment,f),E(n9.$$.fragment,f),E(sM.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(iM.$$.fragment,f),E(c9.$$.fragment,f),E(gM.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(pM.$$.fragment,f),E(p9.$$.fragment,f),E(IM.$$.fragment,f),E(u9.$$.fragment,f),E(_9.$$.fragment,f),E(v9.$$.fragment,f),E(qM.$$.fragment,f),E(F9.$$.fragment,f),E(UM.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(YM.$$.fragment,f),E(w9.$$.fragment,f),E(C4.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(A4.$$.fragment,f),E($9.$$.fragment,f),E(X4.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(W4.$$.fragment,f),E(B9.$$.fragment,f),E(U4.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(Y4.$$.fragment,f),E(G9.$$.fragment,f),E(Z4.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(oE.$$.fragment,f),E(W9.$$.fragment,f),E(ME.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(CE.$$.fragment,f),E(Y9.$$.fragment,f),E(zE.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(QE.$$.fragment,f),E(rx.$$.fragment,f),E(UE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(YE.$$.fragment,f),E(lx.$$.fragment,f),E(ZE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(oC.$$.fragment,f),E(mx.$$.fragment,f),E(LC.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E($C.$$.fragment,f),E(_x.$$.fragment,f),E(GC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(VC.$$.fragment,f),E(Mx.$$.fragment,f),E(r5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(a5.$$.fragment,f),E(yx.$$.fragment,f),E(p5.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(_5.$$.fragment,f),E(Sx.$$.fragment,f),E(y5.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(x5.$$.fragment,f),E(Nx.$$.fragment,f),E(D5.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(O5.$$.fragment,f),E(Ox.$$.fragment,f),E(Z5.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(o3.$$.fragment,f),E(Qx.$$.fragment,f),E(c3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(m3.$$.fragment,f),E(Kx.$$.fragment,f),E(T3.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(E3.$$.fragment,f),E(t$.$$.fragment,f),E(w3.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(y3.$$.fragment,f),E(i$.$$.fragment,f),E($3.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(S3.$$.fragment,f),E(h$.$$.fragment,f),E(P3.$$.fragment,f),eOe=!0)},o(f){C(d.$$.fragment,f),C(La.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(kf.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(fA.$$.fragment,f),C(Ig.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(_A.$$.fragment,f),C(_h.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(Kh.$$.fragment,f),C(Zh.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(vp.$$.fragment,f),C(Fp.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(Ep.$$.fragment,f),C(BA.$$.fragment,f),C(F_.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(M_.$$.fragment,f),C(DA.$$.fragment,f),C(m2.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(h2.$$.fragment,f),C(zA.$$.fragment,f),C(Z2.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(UA.$$.fragment,f),C(o1.$$.fragment,f),C(JA.$$.fragment,f),C(j1.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ey.$$.fragment,f),C(G1.$$.fragment,f),C(oy.$$.fragment,f),C(nb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(lb.$$.fragment,f),C(sy.$$.fragment,f),C(rv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(av.$$.fragment,f),C(fy.$$.fragment,f),C(Bv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Nv.$$.fragment,f),C(uy.$$.fragment,f),C(Xv.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Wv.$$.fragment,f),C(Ty.$$.fragment,f),C(LF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C($F.$$.fragment,f),C(Ay.$$.fragment,f),C(b6.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(F6.$$.fragment,f),C(ky.$$.fragment,f),C(E6.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(w6.$$.fragment,f),C(Iy.$$.fragment,f),C(j6.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(G6.$$.fragment,f),C(Gy.$$.fragment,f),C(X6.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(W6.$$.fragment,f),C(Wy.$$.fragment,f),C(U6.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Y6.$$.fragment,f),C(Yy.$$.fragment,f),C(iT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(cT.$$.fragment,f),C(rL.$$.fragment,f),C(_T.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(vT.$$.fragment,f),C(lL.$$.fragment,f),C(kT.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(RT.$$.fragment,f),C(mL.$$.fragment,f),C(NT.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(jT.$$.fragment,f),C(bL.$$.fragment,f),C(WT.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(HT.$$.fragment,f),C(EL.$$.fragment,f),C(ZT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(o7.$$.fragment,f),C(LL.$$.fragment,f),C(n7.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(l7.$$.fragment,f),C(PL.$$.fragment,f),C(c7.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(m7.$$.fragment,f),C(jL.$$.fragment,f),C(b7.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(F7.$$.fragment,f),C(XL.$$.fragment,f),C(E7.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(w7.$$.fragment,f),C(UL.$$.fragment,f),C(b8.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(F8.$$.fragment,f),C(e9.$$.fragment,f),C(X8.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(W8.$$.fragment,f),C(n9.$$.fragment,f),C(sM.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(iM.$$.fragment,f),C(c9.$$.fragment,f),C(gM.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(pM.$$.fragment,f),C(p9.$$.fragment,f),C(IM.$$.fragment,f),C(u9.$$.fragment,f),C(_9.$$.fragment,f),C(v9.$$.fragment,f),C(qM.$$.fragment,f),C(F9.$$.fragment,f),C(UM.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(YM.$$.fragment,f),C(w9.$$.fragment,f),C(C4.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(A4.$$.fragment,f),C($9.$$.fragment,f),C(X4.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(W4.$$.fragment,f),C(B9.$$.fragment,f),C(U4.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(Y4.$$.fragment,f),C(G9.$$.fragment,f),C(Z4.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(oE.$$.fragment,f),C(W9.$$.fragment,f),C(ME.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(CE.$$.fragment,f),C(Y9.$$.fragment,f),C(zE.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(QE.$$.fragment,f),C(rx.$$.fragment,f),C(UE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(YE.$$.fragment,f),C(lx.$$.fragment,f),C(ZE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(oC.$$.fragment,f),C(mx.$$.fragment,f),C(LC.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C($C.$$.fragment,f),C(_x.$$.fragment,f),C(GC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(VC.$$.fragment,f),C(Mx.$$.fragment,f),C(r5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(a5.$$.fragment,f),C(yx.$$.fragment,f),C(p5.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(_5.$$.fragment,f),C(Sx.$$.fragment,f),C(y5.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(x5.$$.fragment,f),C(Nx.$$.fragment,f),C(D5.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(O5.$$.fragment,f),C(Ox.$$.fragment,f),C(Z5.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(o3.$$.fragment,f),C(Qx.$$.fragment,f),C(c3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(m3.$$.fragment,f),C(Kx.$$.fragment,f),C(T3.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(E3.$$.fragment,f),C(t$.$$.fragment,f),C(w3.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(y3.$$.fragment,f),C(i$.$$.fragment,f),C($3.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(S3.$$.fragment,f),C(h$.$$.fragment,f),C(P3.$$.fragment,f),eOe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Af),f&&t(at),f&&t(Ge),f&&t(We),f&&t(Lf),w(La,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(Uje),f&&t(Ai),w(nA),f&&t(Jje),f&&t(In),f&&t(Yje),w(sA,f),f&&t(Kje),f&&t(Bk),f&&t(Zje),w(kf,f),f&&t(eDe),f&&t(yi),w(lA),f&&t(oDe),f&&t(wo),w(iA),w(fA),w(Ig),w(mA),f&&t(rDe),f&&t(xi),w(gA),f&&t(tDe),f&&t(Ao),w(hA),w(_A),w(_h),w(bA),f&&t(aDe),f&&t($i),w(vA),f&&t(nDe),f&&t(yo),w(FA),w(EA),w(Kh),w(Zh),w(CA),f&&t(sDe),f&&t(ki),w(wA),f&&t(lDe),f&&t(Lo),w(AA),w(xA),w(vp),w(Fp),w($A),f&&t(iDe),f&&t(Ri),w(kA),f&&t(dDe),f&&t(xo),w(SA),w(PA),w(Ep),w(BA),w(F_),f&&t(cDe),f&&t(Ii),w(IA),f&&t(fDe),f&&t($o),w(NA),w(jA),w(M_),w(DA),w(m2),f&&t(mDe),f&&t(ji),w(GA),f&&t(gDe),f&&t(ko),w(OA),w(XA),w(h2),w(zA),w(Z2),f&&t(hDe),f&&t(Oi),w(WA),f&&t(pDe),f&&t(So),w(QA),w(UA),w(o1),w(JA),w(j1),f&&t(uDe),f&&t(zi),w(YA),f&&t(_De),f&&t(Ro),w(KA),w(ey),w(G1),w(oy),w(nb),f&&t(bDe),f&&t(Hi),w(ry),f&&t(vDe),f&&t(Po),w(ty),w(ny),w(lb),w(sy),w(rv),f&&t(FDe),f&&t(Yi),w(ly),f&&t(TDe),f&&t(Bo),w(iy),w(cy),w(av),w(fy),w(Bv),f&&t(MDe),f&&t(ed),w(my),f&&t(EDe),f&&t(Io),w(gy),w(py),w(Nv),w(uy),w(Xv),f&&t(CDe),f&&t(td),w(_y),f&&t(wDe),f&&t(No),w(by),w(Fy),w(Wv),w(Ty),w(LF),f&&t(ADe),f&&t(sd),w(My),f&&t(yDe),f&&t(qo),w(Ey),w(wy),w($F),w(Ay),w(b6),f&&t(LDe),f&&t(dd),w(yy),f&&t(xDe),f&&t(jo),w(Ly),w($y),w(F6),w(ky),w(E6),f&&t($De),f&&t(md),w(Sy),f&&t(kDe),f&&t(Do),w(Ry),w(By),w(w6),w(Iy),w(j6),f&&t(SDe),f&&t(pd),w(Ny),f&&t(RDe),f&&t(Go),w(qy),w(Dy),w(G6),w(Gy),w(X6),f&&t(PDe),f&&t(bd),w(Oy),f&&t(BDe),f&&t(Oo),w(Vy),w(zy),w(W6),w(Wy),w(U6),f&&t(IDe),f&&t(Td),w(Qy),f&&t(NDe),f&&t(Vo),w(Hy),w(Jy),w(Y6),w(Yy),w(iT),f&&t(qDe),f&&t(Cd),w(Ky),f&&t(jDe),f&&t(Xo),w(Zy),w(oL),w(cT),w(rL),w(_T),f&&t(DDe),f&&t(yd),w(tL),f&&t(GDe),f&&t(zo),w(aL),w(sL),w(vT),w(lL),w(kT),f&&t(ODe),f&&t($d),w(iL),f&&t(VDe),f&&t(Wo),w(dL),w(fL),w(RT),w(mL),w(NT),f&&t(XDe),f&&t(Rd),w(hL),f&&t(zDe),f&&t(Qo),w(pL),w(_L),w(jT),w(bL),w(WT),f&&t(WDe),f&&t(Id),w(vL),f&&t(QDe),f&&t(Ho),w(FL),w(ML),w(HT),w(EL),w(ZT),f&&t(HDe),f&&t(Dd),w(CL),f&&t(UDe),f&&t(Uo),w(wL),w(yL),w(o7),w(LL),w(n7),f&&t(JDe),f&&t(Vd),w($L),f&&t(YDe),f&&t(Jo),w(kL),w(RL),w(l7),w(PL),w(c7),f&&t(KDe),f&&t(Wd),w(BL),f&&t(ZDe),f&&t(Yo),w(IL),w(qL),w(m7),w(jL),w(b7),f&&t(eGe),f&&t(Ud),w(DL),f&&t(oGe),f&&t(Ko),w(GL),w(VL),w(F7),w(XL),w(E7),f&&t(rGe),f&&t(Kd),w(zL),f&&t(tGe),f&&t(Zo),w(WL),w(HL),w(w7),w(UL),w(b8),f&&t(aGe),f&&t(oc),w(JL),f&&t(nGe),f&&t(er),w(YL),w(ZL),w(F8),w(e9),w(X8),f&&t(sGe),f&&t(ac),w(o9),f&&t(lGe),f&&t(or),w(r9),w(a9),w(W8),w(n9),w(sM),f&&t(iGe),f&&t(lc),w(s9),f&&t(dGe),f&&t(rr),w(l9),w(d9),w(iM),w(c9),w(gM),f&&t(cGe),f&&t(cc),w(f9),f&&t(fGe),f&&t(tr),w(m9),w(h9),w(pM),w(p9),w(IM),f&&t(mGe),f&&t(gc),w(u9),f&&t(gGe),f&&t(ar),w(_9),w(v9),w(qM),w(F9),w(UM),f&&t(hGe),f&&t(uc),w(T9),f&&t(pGe),f&&t(nr),w(M9),w(C9),w(YM),w(w9),w(C4),f&&t(uGe),f&&t(vc),w(A9),f&&t(_Ge),f&&t(sr),w(y9),w(x9),w(A4),w($9),w(X4),f&&t(bGe),f&&t(Mc),w(k9),f&&t(vGe),f&&t(lr),w(S9),w(P9),w(W4),w(B9),w(U4),f&&t(FGe),f&&t(wc),w(N9),f&&t(TGe),f&&t(ir),w(q9),w(D9),w(Y4),w(G9),w(Z4),f&&t(MGe),f&&t(Lc),w(O9),f&&t(EGe),f&&t(dr),w(V9),w(z9),w(oE),w(W9),w(ME),f&&t(CGe),f&&t(kc),w(Q9),f&&t(wGe),f&&t(cr),w(H9),w(J9),w(CE),w(Y9),w(zE),f&&t(AGe),f&&t(Pc),w(K9),f&&t(yGe),f&&t(fr),w(Z9),w(ox),w(QE),w(rx),w(UE),f&&t(LGe),f&&t(Nc),w(tx),f&&t(xGe),f&&t(mr),w(ax),w(sx),w(YE),w(lx),w(ZE),f&&t($Ge),f&&t(Dc),w(ix),f&&t(kGe),f&&t(gr),w(dx),w(fx),w(oC),w(mx),w(LC),f&&t(SGe),f&&t(Vc),w(gx),f&&t(RGe),f&&t(hr),w(hx),w(ux),w($C),w(_x),w(GC),f&&t(PGe),f&&t(Wc),w(bx),f&&t(BGe),f&&t(pr),w(vx),w(Tx),w(VC),w(Mx),w(r5),f&&t(IGe),f&&t(Uc),w(Ex),f&&t(NGe),f&&t(ur),w(Cx),w(Ax),w(a5),w(yx),w(p5),f&&t(qGe),f&&t(Kc),w(Lx),f&&t(jGe),f&&t(_r),w(xx),w(kx),w(_5),w(Sx),w(y5),f&&t(DGe),f&&t(of),w(Rx),f&&t(GGe),f&&t(br),w(Px),w(Ix),w(x5),w(Nx),w(D5),f&&t(OGe),f&&t(af),w(qx),f&&t(VGe),f&&t(vr),w(jx),w(Gx),w(O5),w(Ox),w(Z5),f&&t(XGe),f&&t(lf),w(Vx),f&&t(zGe),f&&t(Fr),w(Xx),w(Wx),w(o3),w(Qx),w(c3),f&&t(WGe),f&&t(ff),w(Hx),f&&t(QGe),f&&t(Tr),w(Ux),w(Yx),w(m3),w(Kx),w(T3),f&&t(HGe),f&&t(hf),w(Zx),f&&t(UGe),f&&t(Mr),w(e$),w(r$),w(E3),w(t$),w(w3),f&&t(JGe),f&&t(_f),w(a$),f&&t(YGe),f&&t(Er),w(n$),w(l$),w(y3),w(i$),w($3),f&&t(KGe),f&&t(Ff),w(c$),f&&t(ZGe),f&&t(Cr),w(f$),w(g$),w(S3),w(h$),w(P3)}}}const MNt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ENt(L){return TBt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $Nt extends _Bt{constructor(g){super();bBt(this,g,ENt,TNt,vBt,{})}}export{$Nt as default,MNt as metadata};
