import{S as Q9t,i as H9t,s as U9t,e as a,k as l,w as F,t as o,M as J9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Y9t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as MVr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function K9t(L){let g,v,p,m,u,d,h,Eo,_i,Cf,at,bi,vi,x0,wf,je,We,Fi,Sn,$0,Rn,Pn,k0,Ti,Bn,S0,Mi,Af,La;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),_i=a("code"),Cf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),bi=a("code"),vi=o('"new-model"'),x0=o(")."),wf=l(),je=a("p"),We=o("Likewise, if your "),Fi=a("code"),Sn=o("NewModel"),$0=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),k0=o(`, make sure its
`),Ti=a("code"),Bn=o("config_class"),S0=o(` attribute is set to the same class you use when registering the model (here
`),Mi=a("code"),Af=o("NewModelConfig"),La=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var rk=s(p);m=r(rk,"NewModelConfig"),rk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ei=s(d);h=r(Ei,"PretrainedConfig"),Ei.forEach(t),Eo=r(Ae,`, make sure its
`),_i=n(Ae,"CODE",{});var tk=s(_i);Cf=r(tk,"model_type"),tk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),bi=n(Ae,"CODE",{});var ak=s(bi);vi=r(ak,'"new-model"'),ak.forEach(t),x0=r(Ae,")."),Ae.forEach(t),wf=i(Qe),je=n(Qe,"P",{});var Co=s(je);We=r(Co,"Likewise, if your "),Fi=n(Co,"CODE",{});var xa=s(Fi);Sn=r(xa,"NewModel"),xa.forEach(t),$0=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var nk=s(Rn);Pn=r(nk,"PreTrainedModel"),nk.forEach(t),k0=r(Co,`, make sure its
`),Ti=n(Co,"CODE",{});var yf=s(Ti);Bn=r(yf,"config_class"),yf.forEach(t),S0=r(Co,` attribute is set to the same class you use when registering the model (here
`),Mi=n(Co,"CODE",{});var sk=s(Mi);Af=r(sk,"NewModelConfig"),sk.forEach(t),La=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,_i),e(_i,Cf),e(g,at),e(g,bi),e(bi,vi),e(g,x0),b(Qe,wf,Ae),b(Qe,je,Ae),e(je,We),e(je,Fi),e(Fi,Sn),e(je,$0),e(je,Rn),e(Rn,Pn),e(je,k0),e(je,Ti),e(Ti,Bn),e(je,S0),e(je,Mi),e(Mi,Af),e(je,La)},d(Qe){Qe&&t(g),Qe&&t(wf),Qe&&t(je)}}}function Z9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u,d,h,Eo,_i,Cf,at,bi,vi,x0,wf,je,We,Fi,Sn,$0,Rn,Pn,k0,Ti,Bn,S0,Mi,Af,La,Qe,Ae,rk,Ei,tk,ak,Co,xa,nk,yf,sk,mOe,Yqe,Ci,Lf,moe,R0,gOe,goe,hOe,Kqe,In,pOe,hoe,uOe,_Oe,poe,bOe,vOe,Zqe,P0,eNe,lk,FOe,oNe,xf,rNe,wi,$f,uoe,B0,TOe,_oe,MOe,tNe,wo,I0,EOe,q0,COe,ik,wOe,AOe,yOe,N0,LOe,boe,xOe,$Oe,kOe,wr,j0,SOe,voe,ROe,POe,Ai,BOe,Foe,IOe,qOe,Toe,NOe,jOe,DOe,A,kf,Moe,GOe,OOe,dk,VOe,XOe,zOe,Sf,Eoe,WOe,QOe,ck,HOe,UOe,JOe,Rf,Coe,YOe,KOe,fk,ZOe,eVe,oVe,Pf,woe,rVe,tVe,mk,aVe,nVe,sVe,Bf,Aoe,lVe,iVe,gk,dVe,cVe,fVe,If,yoe,mVe,gVe,hk,hVe,pVe,uVe,qf,Loe,_Ve,bVe,pk,vVe,FVe,TVe,Nf,xoe,MVe,EVe,uk,CVe,wVe,AVe,jf,$oe,yVe,LVe,_k,xVe,$Ve,kVe,Df,koe,SVe,RVe,bk,PVe,BVe,IVe,Gf,Soe,qVe,NVe,vk,jVe,DVe,GVe,Of,Roe,OVe,VVe,Fk,XVe,zVe,WVe,Vf,Poe,QVe,HVe,Tk,UVe,JVe,YVe,Xf,Boe,KVe,ZVe,Mk,eXe,oXe,rXe,zf,Ioe,tXe,aXe,Ek,nXe,sXe,lXe,Wf,qoe,iXe,dXe,Ck,cXe,fXe,mXe,Qf,Noe,gXe,hXe,wk,pXe,uXe,_Xe,Hf,joe,bXe,vXe,Ak,FXe,TXe,MXe,Uf,Doe,EXe,CXe,yk,wXe,AXe,yXe,Jf,Goe,LXe,xXe,Lk,$Xe,kXe,SXe,Yf,Ooe,RXe,PXe,xk,BXe,IXe,qXe,Kf,Voe,NXe,jXe,$k,DXe,GXe,OXe,Zf,Xoe,VXe,XXe,kk,zXe,WXe,QXe,em,zoe,HXe,UXe,Sk,JXe,YXe,KXe,om,Woe,ZXe,eze,Rk,oze,rze,tze,rm,Qoe,aze,nze,Pk,sze,lze,ize,tm,Hoe,dze,cze,Bk,fze,mze,gze,am,Uoe,hze,pze,Ik,uze,_ze,bze,nm,Joe,vze,Fze,qk,Tze,Mze,Eze,sm,Yoe,Cze,wze,Nk,Aze,yze,Lze,lm,Koe,xze,$ze,jk,kze,Sze,Rze,im,Zoe,Pze,Bze,Dk,Ize,qze,Nze,dm,ere,jze,Dze,Gk,Gze,Oze,Vze,cm,ore,Xze,zze,Ok,Wze,Qze,Hze,fm,rre,Uze,Jze,Vk,Yze,Kze,Zze,mm,tre,eWe,oWe,Xk,rWe,tWe,aWe,gm,are,nWe,sWe,zk,lWe,iWe,dWe,hm,nre,cWe,fWe,Wk,mWe,gWe,hWe,pm,sre,pWe,uWe,Qk,_We,bWe,vWe,um,lre,FWe,TWe,Hk,MWe,EWe,CWe,_m,ire,wWe,AWe,Uk,yWe,LWe,xWe,bm,dre,$We,kWe,Jk,SWe,RWe,PWe,vm,cre,BWe,IWe,Yk,qWe,NWe,jWe,Fm,fre,DWe,GWe,Kk,OWe,VWe,XWe,Tm,mre,zWe,WWe,Zk,QWe,HWe,UWe,Mm,gre,JWe,YWe,eS,KWe,ZWe,eQe,Em,hre,oQe,rQe,oS,tQe,aQe,nQe,Cm,pre,sQe,lQe,rS,iQe,dQe,cQe,wm,ure,fQe,mQe,tS,gQe,hQe,pQe,Am,_re,uQe,_Qe,aS,bQe,vQe,FQe,ym,bre,TQe,MQe,nS,EQe,CQe,wQe,Lm,vre,AQe,yQe,sS,LQe,xQe,$Qe,xm,Fre,kQe,SQe,lS,RQe,PQe,BQe,$m,Tre,IQe,qQe,iS,NQe,jQe,DQe,km,Mre,GQe,OQe,dS,VQe,XQe,zQe,Sm,Ere,WQe,QQe,cS,HQe,UQe,JQe,Rm,Cre,YQe,KQe,fS,ZQe,eHe,oHe,Pm,wre,rHe,tHe,mS,aHe,nHe,sHe,Bm,Are,lHe,iHe,gS,dHe,cHe,fHe,Im,yre,mHe,gHe,hS,hHe,pHe,uHe,qm,Lre,_He,bHe,pS,vHe,FHe,THe,Nm,xre,MHe,EHe,uS,CHe,wHe,AHe,jm,$re,yHe,LHe,_S,xHe,$He,kHe,Dm,kre,SHe,RHe,bS,PHe,BHe,IHe,Gm,Sre,qHe,NHe,vS,jHe,DHe,GHe,Om,Rre,OHe,VHe,FS,XHe,zHe,WHe,Vm,Pre,QHe,HHe,TS,UHe,JHe,YHe,Xm,Bre,KHe,ZHe,MS,eUe,oUe,rUe,zm,Ire,tUe,aUe,ES,nUe,sUe,lUe,Wm,qre,iUe,dUe,CS,cUe,fUe,mUe,Qm,Nre,gUe,hUe,wS,pUe,uUe,_Ue,Hm,jre,bUe,vUe,AS,FUe,TUe,MUe,Um,Dre,EUe,CUe,yS,wUe,AUe,yUe,Jm,Gre,LUe,xUe,LS,$Ue,kUe,SUe,Ym,Ore,RUe,PUe,xS,BUe,IUe,qUe,Km,Vre,NUe,jUe,$S,DUe,GUe,OUe,Zm,Xre,VUe,XUe,kS,zUe,WUe,QUe,eg,zre,HUe,UUe,SS,JUe,YUe,KUe,og,Wre,ZUe,eJe,RS,oJe,rJe,tJe,rg,Qre,aJe,nJe,PS,sJe,lJe,iJe,tg,Hre,dJe,cJe,BS,fJe,mJe,gJe,ag,Ure,hJe,pJe,IS,uJe,_Je,bJe,ng,Jre,vJe,FJe,qS,TJe,MJe,EJe,sg,Yre,CJe,wJe,NS,AJe,yJe,LJe,lg,Kre,xJe,$Je,jS,kJe,SJe,RJe,ig,Zre,PJe,BJe,DS,IJe,qJe,NJe,dg,ete,jJe,DJe,GS,GJe,OJe,VJe,cg,ote,XJe,zJe,OS,WJe,QJe,HJe,fg,rte,UJe,JJe,VS,YJe,KJe,ZJe,mg,tte,eYe,oYe,XS,rYe,tYe,aYe,gg,ate,nYe,sYe,zS,lYe,iYe,dYe,hg,nte,cYe,fYe,WS,mYe,gYe,hYe,pg,ste,pYe,uYe,QS,_Ye,bYe,vYe,ug,lte,FYe,TYe,HS,MYe,EYe,CYe,_g,ite,wYe,AYe,US,yYe,LYe,xYe,bg,dte,$Ye,kYe,JS,SYe,RYe,PYe,vg,cte,BYe,IYe,YS,qYe,NYe,jYe,Fg,fte,DYe,GYe,KS,OYe,VYe,XYe,Tg,mte,zYe,WYe,ZS,QYe,HYe,UYe,Mg,gte,JYe,YYe,eR,KYe,ZYe,eKe,Eg,hte,oKe,rKe,oR,tKe,aKe,nKe,Cg,pte,sKe,lKe,rR,iKe,dKe,cKe,wg,ute,fKe,mKe,tR,gKe,hKe,pKe,Ag,_te,uKe,_Ke,aR,bKe,vKe,FKe,yg,bte,TKe,MKe,nR,EKe,CKe,wKe,Lg,vte,AKe,yKe,sR,LKe,xKe,$Ke,xg,Fte,kKe,SKe,lR,RKe,PKe,BKe,$g,IKe,kg,D0,qKe,Tte,NKe,aNe,yi,Sg,Mte,G0,jKe,Ete,DKe,nNe,Ao,O0,GKe,V0,OKe,iR,VKe,XKe,zKe,X0,WKe,Cte,QKe,HKe,UKe,Ar,z0,JKe,wte,YKe,KKe,$a,ZKe,Ate,eZe,oZe,yte,rZe,tZe,Lte,aZe,nZe,sZe,k,qn,xte,lZe,iZe,dR,dZe,cZe,cR,fZe,mZe,gZe,Nn,$te,hZe,pZe,fR,uZe,_Ze,mR,bZe,vZe,FZe,jn,kte,TZe,MZe,gR,EZe,CZe,hR,wZe,AZe,yZe,Rg,Ste,LZe,xZe,pR,$Ze,kZe,SZe,Dn,Rte,RZe,PZe,uR,BZe,IZe,_R,qZe,NZe,jZe,Pg,Pte,DZe,GZe,bR,OZe,VZe,XZe,Bg,Bte,zZe,WZe,vR,QZe,HZe,UZe,Ig,Ite,JZe,YZe,FR,KZe,ZZe,eeo,Gn,qte,oeo,reo,TR,teo,aeo,MR,neo,seo,leo,On,Nte,ieo,deo,ER,ceo,feo,CR,meo,geo,heo,Vn,jte,peo,ueo,wR,_eo,beo,AR,veo,Feo,Teo,qg,Dte,Meo,Eeo,yR,Ceo,weo,Aeo,Ng,Gte,yeo,Leo,LR,xeo,$eo,keo,Xn,Ote,Seo,Reo,xR,Peo,Beo,$R,Ieo,qeo,Neo,jg,Vte,jeo,Deo,kR,Geo,Oeo,Veo,zn,Xte,Xeo,zeo,SR,Weo,Qeo,RR,Heo,Ueo,Jeo,Wn,zte,Yeo,Keo,PR,Zeo,eoo,BR,ooo,roo,too,Qn,Wte,aoo,noo,IR,soo,loo,qR,ioo,doo,coo,Dg,Qte,foo,moo,NR,goo,hoo,poo,Hn,Hte,uoo,_oo,jR,boo,voo,DR,Foo,Too,Moo,Un,Ute,Eoo,Coo,GR,woo,Aoo,OR,yoo,Loo,xoo,Jn,Jte,$oo,koo,VR,Soo,Roo,XR,Poo,Boo,Ioo,Yn,Yte,qoo,Noo,zR,joo,Doo,WR,Goo,Ooo,Voo,Kn,Kte,Xoo,zoo,QR,Woo,Qoo,HR,Hoo,Uoo,Joo,Zn,Zte,Yoo,Koo,UR,Zoo,ero,JR,oro,rro,tro,Gg,eae,aro,nro,YR,sro,lro,iro,es,oae,dro,cro,KR,fro,mro,ZR,gro,hro,pro,Og,rae,uro,_ro,eP,bro,vro,Fro,os,tae,Tro,Mro,oP,Ero,Cro,rP,wro,Aro,yro,rs,aae,Lro,xro,tP,$ro,kro,aP,Sro,Rro,Pro,ts,nae,Bro,Iro,nP,qro,Nro,sP,jro,Dro,Gro,as,sae,Oro,Vro,lP,Xro,zro,iP,Wro,Qro,Hro,ns,lae,Uro,Jro,dP,Yro,Kro,cP,Zro,eto,oto,Vg,iae,rto,tto,fP,ato,nto,sto,ss,dae,lto,ito,mP,dto,cto,gP,fto,mto,gto,ls,cae,hto,pto,hP,uto,_to,pP,bto,vto,Fto,is,fae,Tto,Mto,uP,Eto,Cto,_P,wto,Ato,yto,ds,mae,Lto,xto,bP,$to,kto,vP,Sto,Rto,Pto,cs,gae,Bto,Ito,FP,qto,Nto,TP,jto,Dto,Gto,fs,hae,Oto,Vto,MP,Xto,zto,EP,Wto,Qto,Hto,Xg,pae,Uto,Jto,CP,Yto,Kto,Zto,ms,uae,eao,oao,wP,rao,tao,AP,aao,nao,sao,zg,_ae,lao,iao,yP,dao,cao,fao,Wg,bae,mao,gao,LP,hao,pao,uao,gs,vae,_ao,bao,xP,vao,Fao,$P,Tao,Mao,Eao,hs,Fae,Cao,wao,kP,Aao,yao,SP,Lao,xao,$ao,ps,Tae,kao,Sao,RP,Rao,Pao,PP,Bao,Iao,qao,Qg,Mae,Nao,jao,BP,Dao,Gao,Oao,us,Eae,Vao,Xao,IP,zao,Wao,qP,Qao,Hao,Uao,_s,Cae,Jao,Yao,NP,Kao,Zao,jP,eno,ono,rno,bs,wae,tno,ano,DP,nno,sno,GP,lno,ino,dno,vs,Aae,cno,fno,OP,mno,gno,VP,hno,pno,uno,Fs,yae,_no,bno,XP,vno,Fno,zP,Tno,Mno,Eno,Hg,Lae,Cno,wno,WP,Ano,yno,Lno,Ts,xae,xno,$no,QP,kno,Sno,HP,Rno,Pno,Bno,Ug,$ae,Ino,qno,UP,Nno,jno,Dno,Jg,kae,Gno,Ono,JP,Vno,Xno,zno,Yg,Sae,Wno,Qno,YP,Hno,Uno,Jno,Kg,Rae,Yno,Kno,KP,Zno,eso,oso,Ms,Pae,rso,tso,ZP,aso,nso,eB,sso,lso,iso,Zg,Bae,dso,cso,oB,fso,mso,gso,Es,Iae,hso,pso,rB,uso,_so,tB,bso,vso,Fso,Cs,qae,Tso,Mso,aB,Eso,Cso,nB,wso,Aso,yso,ws,Nae,Lso,xso,sB,$so,kso,lB,Sso,Rso,Pso,As,jae,Bso,Iso,iB,qso,Nso,dB,jso,Dso,Gso,ys,Dae,Oso,Vso,cB,Xso,zso,fB,Wso,Qso,Hso,Ls,Gae,Uso,Jso,mB,Yso,Kso,gB,Zso,elo,olo,eh,Oae,rlo,tlo,hB,alo,nlo,slo,oh,Vae,llo,ilo,pB,dlo,clo,flo,xs,Xae,mlo,glo,uB,hlo,plo,_B,ulo,_lo,blo,$s,zae,vlo,Flo,bB,Tlo,Mlo,vB,Elo,Clo,wlo,ks,Wae,Alo,ylo,FB,Llo,xlo,TB,$lo,klo,Slo,rh,Qae,Rlo,Plo,MB,Blo,Ilo,qlo,th,Hae,Nlo,jlo,EB,Dlo,Glo,Olo,ah,Uae,Vlo,Xlo,CB,zlo,Wlo,Qlo,Ss,Jae,Hlo,Ulo,wB,Jlo,Ylo,AB,Klo,Zlo,eio,Rs,Yae,oio,rio,yB,tio,aio,LB,nio,sio,lio,nh,Kae,iio,dio,xB,cio,fio,mio,sh,Zae,gio,hio,$B,pio,uio,_io,lh,ene,bio,vio,kB,Fio,Tio,Mio,Ps,one,Eio,Cio,SB,wio,Aio,RB,yio,Lio,xio,ih,rne,$io,kio,PB,Sio,Rio,Pio,dh,tne,Bio,Iio,BB,qio,Nio,jio,Bs,ane,Dio,Gio,IB,Oio,Vio,qB,Xio,zio,Wio,Is,nne,Qio,Hio,NB,Uio,Jio,jB,Yio,Kio,Zio,qs,sne,edo,odo,DB,rdo,tdo,GB,ado,ndo,sdo,Ns,lne,ldo,ido,OB,ddo,cdo,VB,fdo,mdo,gdo,ch,hdo,fh,W0,pdo,ine,udo,sNe,Li,mh,dne,Q0,_do,cne,bdo,lNe,yo,H0,vdo,U0,Fdo,XB,Tdo,Mdo,Edo,J0,Cdo,fne,wdo,Ado,ydo,He,Y0,Ldo,mne,xdo,$do,ka,kdo,gne,Sdo,Rdo,hne,Pdo,Bdo,pne,Ido,qdo,Ndo,K,gh,une,jdo,Ddo,zB,Gdo,Odo,Vdo,hh,_ne,Xdo,zdo,WB,Wdo,Qdo,Hdo,ph,bne,Udo,Jdo,QB,Ydo,Kdo,Zdo,uh,vne,eco,oco,HB,rco,tco,aco,_h,Fne,nco,sco,UB,lco,ico,dco,bh,Tne,cco,fco,JB,mco,gco,hco,vh,Mne,pco,uco,YB,_co,bco,vco,Fh,Ene,Fco,Tco,KB,Mco,Eco,Cco,Th,Cne,wco,Aco,ZB,yco,Lco,xco,Mh,wne,$co,kco,eI,Sco,Rco,Pco,Eh,Ane,Bco,Ico,oI,qco,Nco,jco,Ch,yne,Dco,Gco,rI,Oco,Vco,Xco,wh,Lne,zco,Wco,tI,Qco,Hco,Uco,Ah,xne,Jco,Yco,aI,Kco,Zco,efo,yh,$ne,ofo,rfo,nI,tfo,afo,nfo,Lh,kne,sfo,lfo,sI,ifo,dfo,cfo,xh,Sne,ffo,mfo,lI,gfo,hfo,pfo,$h,Rne,ufo,_fo,iI,bfo,vfo,Ffo,kh,Pne,Tfo,Mfo,dI,Efo,Cfo,wfo,Sh,Bne,Afo,yfo,cI,Lfo,xfo,$fo,Rh,Ine,kfo,Sfo,fI,Rfo,Pfo,Bfo,Ph,qne,Ifo,qfo,mI,Nfo,jfo,Dfo,Bh,Nne,Gfo,Ofo,gI,Vfo,Xfo,zfo,Ih,jne,Wfo,Qfo,hI,Hfo,Ufo,Jfo,qh,Dne,Yfo,Kfo,pI,Zfo,emo,omo,Nh,Gne,rmo,tmo,uI,amo,nmo,smo,jh,One,lmo,imo,_I,dmo,cmo,fmo,Dh,Vne,mmo,gmo,bI,hmo,pmo,umo,Gh,_mo,Oh,bmo,Vh,K0,vmo,Xne,Fmo,iNe,xi,Xh,zne,Z0,Tmo,Wne,Mmo,dNe,Lo,eA,Emo,oA,Cmo,vI,wmo,Amo,ymo,rA,Lmo,Qne,xmo,$mo,kmo,Ue,tA,Smo,Hne,Rmo,Pmo,$i,Bmo,Une,Imo,qmo,Jne,Nmo,jmo,Dmo,pe,zh,Yne,Gmo,Omo,FI,Vmo,Xmo,zmo,Wh,Kne,Wmo,Qmo,Zne,Hmo,Umo,Jmo,Qh,ese,Ymo,Kmo,TI,Zmo,ego,ogo,Hh,ose,rgo,tgo,MI,ago,ngo,sgo,Uh,rse,lgo,igo,EI,dgo,cgo,fgo,Jh,tse,mgo,ggo,CI,hgo,pgo,ugo,Yh,ase,_go,bgo,wI,vgo,Fgo,Tgo,Kh,nse,Mgo,Ego,AI,Cgo,wgo,Ago,Zh,sse,ygo,Lgo,yI,xgo,$go,kgo,ep,lse,Sgo,Rgo,LI,Pgo,Bgo,Igo,op,ise,qgo,Ngo,xI,jgo,Dgo,Ggo,rp,dse,Ogo,Vgo,$I,Xgo,zgo,Wgo,tp,cse,Qgo,Hgo,kI,Ugo,Jgo,Ygo,ap,fse,Kgo,Zgo,SI,eho,oho,rho,np,mse,tho,aho,RI,nho,sho,lho,sp,gse,iho,dho,PI,cho,fho,mho,lp,gho,ip,hho,dp,aA,pho,hse,uho,cNe,ki,cp,pse,nA,_ho,use,bho,fNe,xo,sA,vho,Si,Fho,BI,Tho,Mho,II,Eho,Cho,who,lA,Aho,_se,yho,Lho,xho,nt,iA,$ho,bse,kho,Sho,Ri,Rho,vse,Pho,Bho,qI,Iho,qho,Nho,fp,jho,Je,dA,Dho,Fse,Gho,Oho,Sa,Vho,Tse,Xho,zho,Mse,Who,Qho,Ese,Hho,Uho,Jho,x,mp,Cse,Yho,Kho,NI,Zho,epo,opo,gp,wse,rpo,tpo,jI,apo,npo,spo,hp,Ase,lpo,ipo,DI,dpo,cpo,fpo,pp,yse,mpo,gpo,GI,hpo,ppo,upo,up,Lse,_po,bpo,OI,vpo,Fpo,Tpo,_p,xse,Mpo,Epo,VI,Cpo,wpo,Apo,bp,$se,ypo,Lpo,XI,xpo,$po,kpo,vp,kse,Spo,Rpo,zI,Ppo,Bpo,Ipo,Fp,Sse,qpo,Npo,WI,jpo,Dpo,Gpo,Tp,Rse,Opo,Vpo,QI,Xpo,zpo,Wpo,Mp,Pse,Qpo,Hpo,HI,Upo,Jpo,Ypo,Ep,Bse,Kpo,Zpo,UI,euo,ouo,ruo,Cp,Ise,tuo,auo,JI,nuo,suo,luo,wp,qse,iuo,duo,YI,cuo,fuo,muo,Ap,Nse,guo,huo,KI,puo,uuo,_uo,yp,jse,buo,vuo,ZI,Fuo,Tuo,Muo,Lp,Dse,Euo,Cuo,eq,wuo,Auo,yuo,xp,Gse,Luo,xuo,oq,$uo,kuo,Suo,$p,Ose,Ruo,Puo,rq,Buo,Iuo,quo,kp,Vse,Nuo,juo,tq,Duo,Guo,Ouo,Sp,Xse,Vuo,Xuo,aq,zuo,Wuo,Quo,Rp,zse,Huo,Uuo,nq,Juo,Yuo,Kuo,Pp,Wse,Zuo,e_o,sq,o_o,r_o,t_o,Bp,Qse,a_o,n_o,lq,s_o,l_o,i_o,Ip,Hse,d_o,c_o,iq,f_o,m_o,g_o,qp,Use,h_o,p_o,dq,u_o,__o,b_o,Np,Jse,v_o,F_o,cq,T_o,M_o,E_o,jp,Yse,C_o,w_o,fq,A_o,y_o,L_o,Dp,Kse,x_o,$_o,mq,k_o,S_o,R_o,Gp,Zse,P_o,B_o,gq,I_o,q_o,N_o,Op,ele,j_o,D_o,hq,G_o,O_o,V_o,Vp,ole,X_o,z_o,pq,W_o,Q_o,H_o,js,rle,U_o,J_o,uq,Y_o,K_o,_q,Z_o,e2o,o2o,Xp,tle,r2o,t2o,bq,a2o,n2o,s2o,zp,ale,l2o,i2o,vq,d2o,c2o,f2o,Wp,nle,m2o,g2o,Fq,h2o,p2o,u2o,Qp,sle,_2o,b2o,Tq,v2o,F2o,T2o,Hp,lle,M2o,E2o,Mq,C2o,w2o,A2o,Up,ile,y2o,L2o,Eq,x2o,$2o,k2o,Jp,dle,S2o,R2o,Cq,P2o,B2o,I2o,Yp,cle,q2o,N2o,wq,j2o,D2o,G2o,Kp,fle,O2o,V2o,Aq,X2o,z2o,W2o,Zp,mle,Q2o,H2o,yq,U2o,J2o,Y2o,eu,gle,K2o,Z2o,Lq,e1o,o1o,r1o,ou,hle,t1o,a1o,xq,n1o,s1o,l1o,ru,ple,i1o,d1o,$q,c1o,f1o,m1o,tu,ule,g1o,h1o,kq,p1o,u1o,_1o,au,_le,b1o,v1o,Sq,F1o,T1o,M1o,nu,ble,E1o,C1o,Rq,w1o,A1o,y1o,su,vle,L1o,x1o,Pq,$1o,k1o,S1o,lu,Fle,R1o,P1o,Bq,B1o,I1o,q1o,iu,Tle,N1o,j1o,Iq,D1o,G1o,O1o,du,Mle,V1o,X1o,qq,z1o,W1o,Q1o,cu,Ele,H1o,U1o,Nq,J1o,Y1o,K1o,fu,Cle,Z1o,ebo,jq,obo,rbo,tbo,mu,wle,abo,nbo,Dq,sbo,lbo,ibo,gu,Ale,dbo,cbo,Gq,fbo,mbo,gbo,hu,yle,hbo,pbo,Oq,ubo,_bo,bbo,pu,Lle,vbo,Fbo,Vq,Tbo,Mbo,Ebo,uu,xle,Cbo,wbo,Xq,Abo,ybo,Lbo,_u,$le,xbo,$bo,zq,kbo,Sbo,Rbo,bu,kle,Pbo,Bbo,Wq,Ibo,qbo,Nbo,vu,Sle,jbo,Dbo,Qq,Gbo,Obo,Vbo,Fu,Rle,Xbo,zbo,Hq,Wbo,Qbo,Hbo,Tu,Ple,Ubo,Jbo,Uq,Ybo,Kbo,Zbo,Mu,Ble,evo,ovo,Jq,rvo,tvo,avo,Eu,Ile,nvo,svo,Yq,lvo,ivo,dvo,Cu,qle,cvo,fvo,Kq,mvo,gvo,hvo,wu,Nle,pvo,uvo,Zq,_vo,bvo,vvo,Au,jle,Fvo,Tvo,eN,Mvo,Evo,Cvo,yu,Dle,wvo,Avo,oN,yvo,Lvo,xvo,Lu,Gle,$vo,kvo,rN,Svo,Rvo,Pvo,xu,Ole,Bvo,Ivo,tN,qvo,Nvo,jvo,$u,Vle,Dvo,Gvo,aN,Ovo,Vvo,Xvo,ku,Xle,zvo,Wvo,nN,Qvo,Hvo,Uvo,Su,zle,Jvo,Yvo,sN,Kvo,Zvo,eFo,Ru,Wle,oFo,rFo,lN,tFo,aFo,nFo,Pu,Qle,sFo,lFo,iN,iFo,dFo,cFo,Bu,Hle,fFo,mFo,dN,gFo,hFo,pFo,Iu,Ule,uFo,_Fo,cN,bFo,vFo,FFo,qu,Jle,TFo,MFo,fN,EFo,CFo,wFo,Nu,Yle,AFo,yFo,mN,LFo,xFo,$Fo,ju,Kle,kFo,SFo,gN,RFo,PFo,BFo,Du,Zle,IFo,qFo,hN,NFo,jFo,DFo,Gu,eie,GFo,OFo,pN,VFo,XFo,zFo,Ou,oie,WFo,QFo,uN,HFo,UFo,JFo,Vu,rie,YFo,KFo,_N,ZFo,e6o,o6o,Xu,tie,r6o,t6o,bN,a6o,n6o,s6o,zu,aie,l6o,i6o,vN,d6o,c6o,f6o,Wu,nie,m6o,g6o,FN,h6o,p6o,u6o,Qu,sie,_6o,b6o,TN,v6o,F6o,T6o,Hu,lie,M6o,E6o,MN,C6o,w6o,A6o,Uu,iie,y6o,L6o,EN,x6o,$6o,k6o,Ju,die,S6o,R6o,CN,P6o,B6o,I6o,Yu,cie,q6o,N6o,wN,j6o,D6o,G6o,Ku,fie,O6o,V6o,AN,X6o,z6o,W6o,Zu,mie,Q6o,H6o,yN,U6o,J6o,Y6o,e_,gie,K6o,Z6o,LN,eTo,oTo,rTo,o_,hie,tTo,aTo,xN,nTo,sTo,lTo,r_,pie,iTo,dTo,$N,cTo,fTo,mTo,t_,gTo,uie,hTo,pTo,_ie,uTo,_To,a_,mNe,Pi,n_,bie,cA,bTo,vie,vTo,gNe,$o,fA,FTo,Bi,TTo,kN,MTo,ETo,SN,CTo,wTo,ATo,mA,yTo,Fie,LTo,xTo,$To,st,gA,kTo,Tie,STo,RTo,Ii,PTo,Mie,BTo,ITo,RN,qTo,NTo,jTo,s_,DTo,Ye,hA,GTo,Eie,OTo,VTo,Ra,XTo,Cie,zTo,WTo,wie,QTo,HTo,Aie,UTo,JTo,YTo,G,l_,yie,KTo,ZTo,PN,e8o,o8o,r8o,i_,Lie,t8o,a8o,BN,n8o,s8o,l8o,d_,xie,i8o,d8o,IN,c8o,f8o,m8o,c_,$ie,g8o,h8o,qN,p8o,u8o,_8o,f_,kie,b8o,v8o,NN,F8o,T8o,M8o,m_,Sie,E8o,C8o,jN,w8o,A8o,y8o,g_,Rie,L8o,x8o,DN,$8o,k8o,S8o,h_,Pie,R8o,P8o,GN,B8o,I8o,q8o,p_,Bie,N8o,j8o,ON,D8o,G8o,O8o,u_,Iie,V8o,X8o,VN,z8o,W8o,Q8o,__,qie,H8o,U8o,XN,J8o,Y8o,K8o,b_,Nie,Z8o,e7o,zN,o7o,r7o,t7o,v_,jie,a7o,n7o,WN,s7o,l7o,i7o,F_,Die,d7o,c7o,QN,f7o,m7o,g7o,T_,Gie,h7o,p7o,HN,u7o,_7o,b7o,M_,Oie,v7o,F7o,UN,T7o,M7o,E7o,E_,Vie,C7o,w7o,JN,A7o,y7o,L7o,C_,Xie,x7o,$7o,YN,k7o,S7o,R7o,w_,zie,P7o,B7o,KN,I7o,q7o,N7o,A_,Wie,j7o,D7o,ZN,G7o,O7o,V7o,y_,Qie,X7o,z7o,ej,W7o,Q7o,H7o,L_,Hie,U7o,J7o,oj,Y7o,K7o,Z7o,x_,Uie,eMo,oMo,rj,rMo,tMo,aMo,$_,Jie,nMo,sMo,tj,lMo,iMo,dMo,k_,Yie,cMo,fMo,aj,mMo,gMo,hMo,S_,Kie,pMo,uMo,nj,_Mo,bMo,vMo,R_,Zie,FMo,TMo,sj,MMo,EMo,CMo,P_,ede,wMo,AMo,lj,yMo,LMo,xMo,B_,ode,$Mo,kMo,ij,SMo,RMo,PMo,I_,rde,BMo,IMo,dj,qMo,NMo,jMo,q_,tde,DMo,GMo,cj,OMo,VMo,XMo,N_,ade,zMo,WMo,fj,QMo,HMo,UMo,j_,nde,JMo,YMo,mj,KMo,ZMo,e4o,D_,sde,o4o,r4o,gj,t4o,a4o,n4o,G_,lde,s4o,l4o,hj,i4o,d4o,c4o,O_,ide,f4o,m4o,pj,g4o,h4o,p4o,V_,dde,u4o,_4o,uj,b4o,v4o,F4o,X_,cde,T4o,M4o,_j,E4o,C4o,w4o,z_,fde,A4o,y4o,bj,L4o,x4o,$4o,W_,mde,k4o,S4o,vj,R4o,P4o,B4o,Q_,gde,I4o,q4o,Fj,N4o,j4o,D4o,H_,hde,G4o,O4o,Tj,V4o,X4o,z4o,U_,W4o,pde,Q4o,H4o,ude,U4o,J4o,J_,hNe,qi,Y_,_de,pA,Y4o,bde,K4o,pNe,ko,uA,Z4o,Ni,eEo,Mj,oEo,rEo,Ej,tEo,aEo,nEo,_A,sEo,vde,lEo,iEo,dEo,lt,bA,cEo,Fde,fEo,mEo,ji,gEo,Tde,hEo,pEo,Cj,uEo,_Eo,bEo,K_,vEo,Ke,vA,FEo,Mde,TEo,MEo,Pa,EEo,Ede,CEo,wEo,Cde,AEo,yEo,wde,LEo,xEo,$Eo,z,Z_,Ade,kEo,SEo,wj,REo,PEo,BEo,e2,yde,IEo,qEo,Aj,NEo,jEo,DEo,o2,Lde,GEo,OEo,yj,VEo,XEo,zEo,r2,xde,WEo,QEo,Lj,HEo,UEo,JEo,t2,$de,YEo,KEo,xj,ZEo,eCo,oCo,a2,kde,rCo,tCo,$j,aCo,nCo,sCo,n2,Sde,lCo,iCo,kj,dCo,cCo,fCo,s2,Rde,mCo,gCo,Sj,hCo,pCo,uCo,l2,Pde,_Co,bCo,Rj,vCo,FCo,TCo,i2,Bde,MCo,ECo,Pj,CCo,wCo,ACo,d2,Ide,yCo,LCo,Bj,xCo,$Co,kCo,c2,qde,SCo,RCo,Ij,PCo,BCo,ICo,f2,Nde,qCo,NCo,qj,jCo,DCo,GCo,m2,jde,OCo,VCo,Nj,XCo,zCo,WCo,g2,Dde,QCo,HCo,jj,UCo,JCo,YCo,h2,Gde,KCo,ZCo,Dj,e5o,o5o,r5o,p2,Ode,t5o,a5o,Gj,n5o,s5o,l5o,u2,Vde,i5o,d5o,Oj,c5o,f5o,m5o,_2,Xde,g5o,h5o,Vj,p5o,u5o,_5o,b2,zde,b5o,v5o,Xj,F5o,T5o,M5o,v2,Wde,E5o,C5o,zj,w5o,A5o,y5o,F2,Qde,L5o,x5o,Wj,$5o,k5o,S5o,T2,Hde,R5o,P5o,Qj,B5o,I5o,q5o,M2,Ude,N5o,j5o,Hj,D5o,G5o,O5o,E2,Jde,V5o,X5o,Uj,z5o,W5o,Q5o,C2,Yde,H5o,U5o,Jj,J5o,Y5o,K5o,w2,Kde,Z5o,e3o,Yj,o3o,r3o,t3o,A2,Zde,a3o,n3o,Kj,s3o,l3o,i3o,y2,ece,d3o,c3o,Zj,f3o,m3o,g3o,L2,oce,h3o,p3o,eD,u3o,_3o,b3o,x2,rce,v3o,F3o,oD,T3o,M3o,E3o,$2,tce,C3o,w3o,rD,A3o,y3o,L3o,k2,ace,x3o,$3o,tD,k3o,S3o,R3o,S2,nce,P3o,B3o,aD,I3o,q3o,N3o,R2,sce,j3o,D3o,nD,G3o,O3o,V3o,P2,lce,X3o,z3o,sD,W3o,Q3o,H3o,B2,U3o,ice,J3o,Y3o,dce,K3o,Z3o,I2,uNe,Di,q2,cce,FA,ewo,fce,owo,_Ne,So,TA,rwo,Gi,two,lD,awo,nwo,iD,swo,lwo,iwo,MA,dwo,mce,cwo,fwo,mwo,it,EA,gwo,gce,hwo,pwo,Oi,uwo,hce,_wo,bwo,dD,vwo,Fwo,Two,N2,Mwo,Ze,CA,Ewo,pce,Cwo,wwo,Ba,Awo,uce,ywo,Lwo,_ce,xwo,$wo,bce,kwo,Swo,Rwo,W,j2,vce,Pwo,Bwo,cD,Iwo,qwo,Nwo,D2,Fce,jwo,Dwo,fD,Gwo,Owo,Vwo,G2,Tce,Xwo,zwo,mD,Wwo,Qwo,Hwo,O2,Mce,Uwo,Jwo,gD,Ywo,Kwo,Zwo,V2,Ece,e0o,o0o,hD,r0o,t0o,a0o,X2,Cce,n0o,s0o,pD,l0o,i0o,d0o,z2,wce,c0o,f0o,uD,m0o,g0o,h0o,W2,Ace,p0o,u0o,_D,_0o,b0o,v0o,Q2,yce,F0o,T0o,bD,M0o,E0o,C0o,H2,Lce,w0o,A0o,vD,y0o,L0o,x0o,U2,xce,$0o,k0o,FD,S0o,R0o,P0o,J2,$ce,B0o,I0o,TD,q0o,N0o,j0o,Y2,kce,D0o,G0o,MD,O0o,V0o,X0o,K2,Sce,z0o,W0o,ED,Q0o,H0o,U0o,Z2,Rce,J0o,Y0o,CD,K0o,Z0o,eAo,e1,Pce,oAo,rAo,wD,tAo,aAo,nAo,o1,Bce,sAo,lAo,AD,iAo,dAo,cAo,r1,Ice,fAo,mAo,yD,gAo,hAo,pAo,t1,qce,uAo,_Ao,LD,bAo,vAo,FAo,a1,Nce,TAo,MAo,xD,EAo,CAo,wAo,n1,jce,AAo,yAo,$D,LAo,xAo,$Ao,s1,Dce,kAo,SAo,kD,RAo,PAo,BAo,l1,Gce,IAo,qAo,SD,NAo,jAo,DAo,i1,Oce,GAo,OAo,RD,VAo,XAo,zAo,d1,Vce,WAo,QAo,PD,HAo,UAo,JAo,c1,Xce,YAo,KAo,BD,ZAo,eyo,oyo,f1,zce,ryo,tyo,ID,ayo,nyo,syo,m1,Wce,lyo,iyo,qD,dyo,cyo,fyo,g1,Qce,myo,gyo,ND,hyo,pyo,uyo,h1,Hce,_yo,byo,jD,vyo,Fyo,Tyo,p1,Uce,Myo,Eyo,Jce,Cyo,wyo,Ayo,u1,Yce,yyo,Lyo,DD,xyo,$yo,kyo,_1,Kce,Syo,Ryo,GD,Pyo,Byo,Iyo,b1,Zce,qyo,Nyo,OD,jyo,Dyo,Gyo,v1,efe,Oyo,Vyo,VD,Xyo,zyo,Wyo,F1,Qyo,ofe,Hyo,Uyo,rfe,Jyo,Yyo,T1,bNe,Vi,M1,tfe,wA,Kyo,afe,Zyo,vNe,Ro,AA,eLo,Xi,oLo,XD,rLo,tLo,zD,aLo,nLo,sLo,yA,lLo,nfe,iLo,dLo,cLo,dt,LA,fLo,sfe,mLo,gLo,zi,hLo,lfe,pLo,uLo,WD,_Lo,bLo,vLo,E1,FLo,eo,xA,TLo,ife,MLo,ELo,Ia,CLo,dfe,wLo,ALo,cfe,yLo,LLo,ffe,xLo,$Lo,kLo,ue,C1,mfe,SLo,RLo,QD,PLo,BLo,ILo,w1,gfe,qLo,NLo,HD,jLo,DLo,GLo,A1,hfe,OLo,VLo,UD,XLo,zLo,WLo,y1,pfe,QLo,HLo,JD,ULo,JLo,YLo,L1,ufe,KLo,ZLo,YD,exo,oxo,rxo,x1,_fe,txo,axo,KD,nxo,sxo,lxo,$1,bfe,ixo,dxo,ZD,cxo,fxo,mxo,k1,vfe,gxo,hxo,eG,pxo,uxo,_xo,S1,Ffe,bxo,vxo,oG,Fxo,Txo,Mxo,R1,Tfe,Exo,Cxo,rG,wxo,Axo,yxo,P1,Mfe,Lxo,xxo,tG,$xo,kxo,Sxo,B1,Efe,Rxo,Pxo,aG,Bxo,Ixo,qxo,I1,Cfe,Nxo,jxo,nG,Dxo,Gxo,Oxo,q1,wfe,Vxo,Xxo,sG,zxo,Wxo,Qxo,N1,Afe,Hxo,Uxo,lG,Jxo,Yxo,Kxo,j1,yfe,Zxo,e9o,iG,o9o,r9o,t9o,D1,a9o,Lfe,n9o,s9o,xfe,l9o,i9o,G1,FNe,Wi,O1,$fe,$A,d9o,kfe,c9o,TNe,Po,kA,f9o,Qi,m9o,dG,g9o,h9o,cG,p9o,u9o,_9o,SA,b9o,Sfe,v9o,F9o,T9o,ct,RA,M9o,Rfe,E9o,C9o,Hi,w9o,Pfe,A9o,y9o,fG,L9o,x9o,$9o,V1,k9o,oo,PA,S9o,Bfe,R9o,P9o,qa,B9o,Ife,I9o,q9o,qfe,N9o,j9o,Nfe,D9o,G9o,O9o,q,X1,jfe,V9o,X9o,mG,z9o,W9o,Q9o,z1,Dfe,H9o,U9o,gG,J9o,Y9o,K9o,W1,Gfe,Z9o,e$o,hG,o$o,r$o,t$o,Q1,Ofe,a$o,n$o,pG,s$o,l$o,i$o,H1,Vfe,d$o,c$o,uG,f$o,m$o,g$o,U1,Xfe,h$o,p$o,_G,u$o,_$o,b$o,J1,zfe,v$o,F$o,bG,T$o,M$o,E$o,Y1,Wfe,C$o,w$o,vG,A$o,y$o,L$o,K1,Qfe,x$o,$$o,FG,k$o,S$o,R$o,Z1,Hfe,P$o,B$o,TG,I$o,q$o,N$o,eb,Ufe,j$o,D$o,MG,G$o,O$o,V$o,ob,Jfe,X$o,z$o,EG,W$o,Q$o,H$o,rb,Yfe,U$o,J$o,CG,Y$o,K$o,Z$o,tb,Kfe,eko,oko,wG,rko,tko,ako,ab,Zfe,nko,sko,AG,lko,iko,dko,nb,eme,cko,fko,yG,mko,gko,hko,sb,ome,pko,uko,LG,_ko,bko,vko,lb,rme,Fko,Tko,xG,Mko,Eko,Cko,ib,tme,wko,Ako,$G,yko,Lko,xko,db,ame,$ko,kko,kG,Sko,Rko,Pko,cb,nme,Bko,Iko,SG,qko,Nko,jko,fb,sme,Dko,Gko,RG,Oko,Vko,Xko,mb,lme,zko,Wko,PG,Qko,Hko,Uko,gb,ime,Jko,Yko,BG,Kko,Zko,eSo,hb,dme,oSo,rSo,IG,tSo,aSo,nSo,pb,cme,sSo,lSo,qG,iSo,dSo,cSo,ub,fme,fSo,mSo,NG,gSo,hSo,pSo,_b,mme,uSo,_So,jG,bSo,vSo,FSo,bb,gme,TSo,MSo,DG,ESo,CSo,wSo,vb,hme,ASo,ySo,GG,LSo,xSo,$So,Fb,pme,kSo,SSo,OG,RSo,PSo,BSo,Tb,ume,ISo,qSo,VG,NSo,jSo,DSo,Mb,_me,GSo,OSo,XG,VSo,XSo,zSo,Eb,bme,WSo,QSo,zG,HSo,USo,JSo,Cb,vme,YSo,KSo,WG,ZSo,eRo,oRo,wb,Fme,rRo,tRo,QG,aRo,nRo,sRo,Ab,Tme,lRo,iRo,HG,dRo,cRo,fRo,yb,Mme,mRo,gRo,UG,hRo,pRo,uRo,Lb,Eme,_Ro,bRo,JG,vRo,FRo,TRo,xb,Cme,MRo,ERo,YG,CRo,wRo,ARo,$b,wme,yRo,LRo,KG,xRo,$Ro,kRo,kb,Ame,SRo,RRo,ZG,PRo,BRo,IRo,Sb,yme,qRo,NRo,eO,jRo,DRo,GRo,Rb,Lme,ORo,VRo,oO,XRo,zRo,WRo,Pb,xme,QRo,HRo,rO,URo,JRo,YRo,Bb,$me,KRo,ZRo,tO,ePo,oPo,rPo,Ib,tPo,kme,aPo,nPo,Sme,sPo,lPo,qb,MNe,Ui,Nb,Rme,BA,iPo,Pme,dPo,ENe,Bo,IA,cPo,Ji,fPo,aO,mPo,gPo,nO,hPo,pPo,uPo,qA,_Po,Bme,bPo,vPo,FPo,ft,NA,TPo,Ime,MPo,EPo,Yi,CPo,qme,wPo,APo,sO,yPo,LPo,xPo,jb,$Po,ro,jA,kPo,Nme,SPo,RPo,Na,PPo,jme,BPo,IPo,Dme,qPo,NPo,Gme,jPo,DPo,GPo,Y,Db,Ome,OPo,VPo,lO,XPo,zPo,WPo,Gb,Vme,QPo,HPo,iO,UPo,JPo,YPo,Ob,Xme,KPo,ZPo,dO,eBo,oBo,rBo,Vb,zme,tBo,aBo,cO,nBo,sBo,lBo,Xb,Wme,iBo,dBo,fO,cBo,fBo,mBo,zb,Qme,gBo,hBo,mO,pBo,uBo,_Bo,Wb,Hme,bBo,vBo,gO,FBo,TBo,MBo,Qb,Ume,EBo,CBo,hO,wBo,ABo,yBo,Hb,Jme,LBo,xBo,pO,$Bo,kBo,SBo,Ub,Yme,RBo,PBo,uO,BBo,IBo,qBo,Jb,Kme,NBo,jBo,_O,DBo,GBo,OBo,Yb,Zme,VBo,XBo,bO,zBo,WBo,QBo,Kb,ege,HBo,UBo,vO,JBo,YBo,KBo,Zb,oge,ZBo,eIo,FO,oIo,rIo,tIo,ev,rge,aIo,nIo,TO,sIo,lIo,iIo,ov,tge,dIo,cIo,MO,fIo,mIo,gIo,rv,age,hIo,pIo,EO,uIo,_Io,bIo,tv,nge,vIo,FIo,CO,TIo,MIo,EIo,av,sge,CIo,wIo,wO,AIo,yIo,LIo,nv,lge,xIo,$Io,AO,kIo,SIo,RIo,sv,ige,PIo,BIo,yO,IIo,qIo,NIo,lv,dge,jIo,DIo,LO,GIo,OIo,VIo,iv,cge,XIo,zIo,xO,WIo,QIo,HIo,dv,fge,UIo,JIo,$O,YIo,KIo,ZIo,cv,mge,eqo,oqo,kO,rqo,tqo,aqo,fv,gge,nqo,sqo,SO,lqo,iqo,dqo,mv,hge,cqo,fqo,RO,mqo,gqo,hqo,gv,pge,pqo,uqo,PO,_qo,bqo,vqo,hv,uge,Fqo,Tqo,BO,Mqo,Eqo,Cqo,pv,wqo,_ge,Aqo,yqo,bge,Lqo,xqo,uv,CNe,Ki,_v,vge,DA,$qo,Fge,kqo,wNe,Io,GA,Sqo,Zi,Rqo,IO,Pqo,Bqo,qO,Iqo,qqo,Nqo,OA,jqo,Tge,Dqo,Gqo,Oqo,mt,VA,Vqo,Mge,Xqo,zqo,ed,Wqo,Ege,Qqo,Hqo,NO,Uqo,Jqo,Yqo,bv,Kqo,to,XA,Zqo,Cge,eNo,oNo,ja,rNo,wge,tNo,aNo,Age,nNo,sNo,yge,lNo,iNo,dNo,Zr,vv,Lge,cNo,fNo,jO,mNo,gNo,hNo,Fv,xge,pNo,uNo,DO,_No,bNo,vNo,Tv,$ge,FNo,TNo,GO,MNo,ENo,CNo,Mv,kge,wNo,ANo,OO,yNo,LNo,xNo,Ev,Sge,$No,kNo,VO,SNo,RNo,PNo,Cv,BNo,Rge,INo,qNo,Pge,NNo,jNo,wv,ANe,od,Av,Bge,zA,DNo,Ige,GNo,yNe,qo,WA,ONo,rd,VNo,XO,XNo,zNo,zO,WNo,QNo,HNo,QA,UNo,qge,JNo,YNo,KNo,gt,HA,ZNo,Nge,ejo,ojo,td,rjo,jge,tjo,ajo,WO,njo,sjo,ljo,yv,ijo,ao,UA,djo,Dge,cjo,fjo,Da,mjo,Gge,gjo,hjo,Oge,pjo,ujo,Vge,_jo,bjo,vjo,U,Lv,Xge,Fjo,Tjo,QO,Mjo,Ejo,Cjo,xv,zge,wjo,Ajo,HO,yjo,Ljo,xjo,$v,Wge,$jo,kjo,UO,Sjo,Rjo,Pjo,kv,Qge,Bjo,Ijo,JO,qjo,Njo,jjo,Sv,Hge,Djo,Gjo,YO,Ojo,Vjo,Xjo,Rv,Uge,zjo,Wjo,KO,Qjo,Hjo,Ujo,Pv,Jge,Jjo,Yjo,ZO,Kjo,Zjo,eDo,Bv,Yge,oDo,rDo,eV,tDo,aDo,nDo,Iv,Kge,sDo,lDo,oV,iDo,dDo,cDo,qv,Zge,fDo,mDo,rV,gDo,hDo,pDo,Nv,ehe,uDo,_Do,tV,bDo,vDo,FDo,jv,ohe,TDo,MDo,aV,EDo,CDo,wDo,Dv,rhe,ADo,yDo,nV,LDo,xDo,$Do,Gv,the,kDo,SDo,sV,RDo,PDo,BDo,Ov,ahe,IDo,qDo,lV,NDo,jDo,DDo,Vv,nhe,GDo,ODo,iV,VDo,XDo,zDo,Xv,she,WDo,QDo,dV,HDo,UDo,JDo,zv,lhe,YDo,KDo,cV,ZDo,eGo,oGo,Wv,ihe,rGo,tGo,fV,aGo,nGo,sGo,Qv,dhe,lGo,iGo,mV,dGo,cGo,fGo,Hv,che,mGo,gGo,gV,hGo,pGo,uGo,Uv,fhe,_Go,bGo,hV,vGo,FGo,TGo,Jv,mhe,MGo,EGo,pV,CGo,wGo,AGo,Yv,ghe,yGo,LGo,uV,xGo,$Go,kGo,Kv,hhe,SGo,RGo,_V,PGo,BGo,IGo,Zv,phe,qGo,NGo,bV,jGo,DGo,GGo,eF,uhe,OGo,VGo,vV,XGo,zGo,WGo,oF,_he,QGo,HGo,FV,UGo,JGo,YGo,rF,bhe,KGo,ZGo,TV,eOo,oOo,rOo,tF,vhe,tOo,aOo,MV,nOo,sOo,lOo,aF,Fhe,iOo,dOo,EV,cOo,fOo,mOo,nF,The,gOo,hOo,CV,pOo,uOo,_Oo,sF,Mhe,bOo,vOo,wV,FOo,TOo,MOo,lF,EOo,Ehe,COo,wOo,Che,AOo,yOo,iF,LNe,ad,dF,whe,JA,LOo,Ahe,xOo,xNe,No,YA,$Oo,nd,kOo,AV,SOo,ROo,yV,POo,BOo,IOo,KA,qOo,yhe,NOo,jOo,DOo,ht,ZA,GOo,Lhe,OOo,VOo,sd,XOo,xhe,zOo,WOo,LV,QOo,HOo,UOo,cF,JOo,no,ey,YOo,$he,KOo,ZOo,Ga,eVo,khe,oVo,rVo,She,tVo,aVo,Rhe,nVo,sVo,lVo,V,fF,Phe,iVo,dVo,xV,cVo,fVo,mVo,mF,Bhe,gVo,hVo,$V,pVo,uVo,_Vo,gF,Ihe,bVo,vVo,kV,FVo,TVo,MVo,hF,qhe,EVo,CVo,SV,wVo,AVo,yVo,pF,Nhe,LVo,xVo,RV,$Vo,kVo,SVo,uF,jhe,RVo,PVo,PV,BVo,IVo,qVo,_F,Dhe,NVo,jVo,BV,DVo,GVo,OVo,bF,Ghe,VVo,XVo,IV,zVo,WVo,QVo,vF,Ohe,HVo,UVo,qV,JVo,YVo,KVo,FF,Vhe,ZVo,eXo,NV,oXo,rXo,tXo,TF,Xhe,aXo,nXo,jV,sXo,lXo,iXo,MF,zhe,dXo,cXo,DV,fXo,mXo,gXo,EF,Whe,hXo,pXo,GV,uXo,_Xo,bXo,CF,Qhe,vXo,FXo,OV,TXo,MXo,EXo,wF,Hhe,CXo,wXo,VV,AXo,yXo,LXo,AF,Uhe,xXo,$Xo,XV,kXo,SXo,RXo,yF,Jhe,PXo,BXo,zV,IXo,qXo,NXo,LF,Yhe,jXo,DXo,WV,GXo,OXo,VXo,xF,Khe,XXo,zXo,QV,WXo,QXo,HXo,$F,Zhe,UXo,JXo,HV,YXo,KXo,ZXo,kF,epe,ezo,ozo,UV,rzo,tzo,azo,SF,ope,nzo,szo,JV,lzo,izo,dzo,RF,rpe,czo,fzo,YV,mzo,gzo,hzo,PF,tpe,pzo,uzo,KV,_zo,bzo,vzo,BF,ape,Fzo,Tzo,ZV,Mzo,Ezo,Czo,IF,npe,wzo,Azo,eX,yzo,Lzo,xzo,qF,spe,$zo,kzo,oX,Szo,Rzo,Pzo,NF,lpe,Bzo,Izo,rX,qzo,Nzo,jzo,jF,ipe,Dzo,Gzo,tX,Ozo,Vzo,Xzo,DF,dpe,zzo,Wzo,aX,Qzo,Hzo,Uzo,GF,cpe,Jzo,Yzo,nX,Kzo,Zzo,eWo,OF,fpe,oWo,rWo,sX,tWo,aWo,nWo,VF,mpe,sWo,lWo,lX,iWo,dWo,cWo,XF,gpe,fWo,mWo,iX,gWo,hWo,pWo,zF,hpe,uWo,_Wo,dX,bWo,vWo,FWo,WF,ppe,TWo,MWo,cX,EWo,CWo,wWo,QF,upe,AWo,yWo,fX,LWo,xWo,$Wo,HF,_pe,kWo,SWo,mX,RWo,PWo,BWo,UF,bpe,IWo,qWo,gX,NWo,jWo,DWo,JF,GWo,vpe,OWo,VWo,Fpe,XWo,zWo,YF,$Ne,ld,KF,Tpe,oy,WWo,Mpe,QWo,kNe,jo,ry,HWo,id,UWo,hX,JWo,YWo,pX,KWo,ZWo,eQo,ty,oQo,Epe,rQo,tQo,aQo,pt,ay,nQo,Cpe,sQo,lQo,dd,iQo,wpe,dQo,cQo,uX,fQo,mQo,gQo,ZF,hQo,so,ny,pQo,Ape,uQo,_Qo,Oa,bQo,ype,vQo,FQo,Lpe,TQo,MQo,xpe,EQo,CQo,wQo,$pe,e6,kpe,AQo,yQo,_X,LQo,xQo,$Qo,o6,kQo,Spe,SQo,RQo,Rpe,PQo,BQo,r6,SNe,cd,t6,Ppe,sy,IQo,Bpe,qQo,RNe,Do,ly,NQo,fd,jQo,bX,DQo,GQo,vX,OQo,VQo,XQo,iy,zQo,Ipe,WQo,QQo,HQo,ut,dy,UQo,qpe,JQo,YQo,md,KQo,Npe,ZQo,eHo,FX,oHo,rHo,tHo,a6,aHo,lo,cy,nHo,jpe,sHo,lHo,Va,iHo,Dpe,dHo,cHo,Gpe,fHo,mHo,Ope,gHo,hHo,pHo,Fe,n6,Vpe,uHo,_Ho,TX,bHo,vHo,FHo,s6,Xpe,THo,MHo,MX,EHo,CHo,wHo,l6,zpe,AHo,yHo,EX,LHo,xHo,$Ho,i6,Wpe,kHo,SHo,CX,RHo,PHo,BHo,Ds,Qpe,IHo,qHo,wX,NHo,jHo,AX,DHo,GHo,OHo,d6,Hpe,VHo,XHo,yX,zHo,WHo,QHo,_t,Upe,HHo,UHo,LX,JHo,YHo,xX,KHo,ZHo,$X,eUo,oUo,rUo,c6,Jpe,tUo,aUo,kX,nUo,sUo,lUo,f6,Ype,iUo,dUo,SX,cUo,fUo,mUo,m6,Kpe,gUo,hUo,RX,pUo,uUo,_Uo,g6,Zpe,bUo,vUo,PX,FUo,TUo,MUo,h6,eue,EUo,CUo,BX,wUo,AUo,yUo,p6,oue,LUo,xUo,IX,$Uo,kUo,SUo,u6,rue,RUo,PUo,qX,BUo,IUo,qUo,_6,NUo,tue,jUo,DUo,aue,GUo,OUo,b6,PNe,gd,v6,nue,fy,VUo,sue,XUo,BNe,Go,my,zUo,hd,WUo,NX,QUo,HUo,jX,UUo,JUo,YUo,gy,KUo,lue,ZUo,eJo,oJo,bt,hy,rJo,iue,tJo,aJo,pd,nJo,due,sJo,lJo,DX,iJo,dJo,cJo,F6,fJo,io,py,mJo,cue,gJo,hJo,Xa,pJo,fue,uJo,_Jo,mue,bJo,vJo,gue,FJo,TJo,MJo,hue,T6,pue,EJo,CJo,GX,wJo,AJo,yJo,M6,LJo,uue,xJo,$Jo,_ue,kJo,SJo,E6,INe,ud,C6,bue,uy,RJo,vue,PJo,qNe,Oo,_y,BJo,_d,IJo,OX,qJo,NJo,VX,jJo,DJo,GJo,by,OJo,Fue,VJo,XJo,zJo,vt,vy,WJo,Tue,QJo,HJo,bd,UJo,Mue,JJo,YJo,XX,KJo,ZJo,eYo,w6,oYo,co,Fy,rYo,Eue,tYo,aYo,za,nYo,Cue,sYo,lYo,wue,iYo,dYo,Aue,cYo,fYo,mYo,yue,A6,Lue,gYo,hYo,zX,pYo,uYo,_Yo,y6,bYo,xue,vYo,FYo,$ue,TYo,MYo,L6,NNe,vd,x6,kue,Ty,EYo,Sue,CYo,jNe,Vo,My,wYo,Fd,AYo,WX,yYo,LYo,QX,xYo,$Yo,kYo,Ey,SYo,Rue,RYo,PYo,BYo,Ft,Cy,IYo,Pue,qYo,NYo,Td,jYo,Bue,DYo,GYo,HX,OYo,VYo,XYo,$6,zYo,fo,wy,WYo,Iue,QYo,HYo,Wa,UYo,que,JYo,YYo,Nue,KYo,ZYo,jue,eKo,oKo,rKo,ke,k6,Due,tKo,aKo,UX,nKo,sKo,lKo,S6,Gue,iKo,dKo,JX,cKo,fKo,mKo,R6,Oue,gKo,hKo,YX,pKo,uKo,_Ko,P6,Vue,bKo,vKo,KX,FKo,TKo,MKo,B6,Xue,EKo,CKo,ZX,wKo,AKo,yKo,I6,zue,LKo,xKo,ez,$Ko,kKo,SKo,q6,Wue,RKo,PKo,oz,BKo,IKo,qKo,N6,Que,NKo,jKo,rz,DKo,GKo,OKo,j6,Hue,VKo,XKo,tz,zKo,WKo,QKo,D6,HKo,Uue,UKo,JKo,Jue,YKo,KKo,G6,DNe,Md,O6,Yue,Ay,ZKo,Kue,eZo,GNe,Xo,yy,oZo,Ed,rZo,az,tZo,aZo,nz,nZo,sZo,lZo,Ly,iZo,Zue,dZo,cZo,fZo,Tt,xy,mZo,e_e,gZo,hZo,Cd,pZo,o_e,uZo,_Zo,sz,bZo,vZo,FZo,V6,TZo,mo,$y,MZo,r_e,EZo,CZo,Qa,wZo,t_e,AZo,yZo,a_e,LZo,xZo,n_e,$Zo,kZo,SZo,et,X6,s_e,RZo,PZo,lz,BZo,IZo,qZo,z6,l_e,NZo,jZo,iz,DZo,GZo,OZo,W6,i_e,VZo,XZo,dz,zZo,WZo,QZo,Q6,d_e,HZo,UZo,cz,JZo,YZo,KZo,H6,c_e,ZZo,eer,fz,oer,rer,ter,U6,aer,f_e,ner,ser,m_e,ler,ier,J6,ONe,wd,Y6,g_e,ky,der,h_e,cer,VNe,zo,Sy,fer,Ad,mer,mz,ger,her,gz,per,uer,_er,Ry,ber,p_e,ver,Fer,Ter,Mt,Py,Mer,u_e,Eer,Cer,yd,wer,__e,Aer,yer,hz,Ler,xer,$er,K6,ker,go,By,Ser,b_e,Rer,Per,Ha,Ber,v_e,Ier,qer,F_e,Ner,jer,T_e,Der,Ger,Oer,Se,Z6,M_e,Ver,Xer,pz,zer,Wer,Qer,eT,E_e,Her,Uer,uz,Jer,Yer,Ker,oT,C_e,Zer,eor,_z,oor,ror,tor,rT,w_e,aor,nor,bz,sor,lor,ior,tT,A_e,dor,cor,vz,mor,gor,hor,aT,y_e,por,uor,Fz,_or,bor,vor,nT,L_e,For,Tor,Tz,Mor,Eor,Cor,sT,x_e,wor,Aor,Mz,yor,Lor,xor,lT,$_e,$or,kor,Ez,Sor,Ror,Por,iT,Bor,k_e,Ior,qor,S_e,Nor,jor,dT,XNe,Ld,cT,R_e,Iy,Dor,P_e,Gor,zNe,Wo,qy,Oor,xd,Vor,Cz,Xor,zor,wz,Wor,Qor,Hor,Ny,Uor,B_e,Jor,Yor,Kor,Et,jy,Zor,I_e,err,orr,$d,rrr,q_e,trr,arr,Az,nrr,srr,lrr,fT,irr,ho,Dy,drr,N_e,crr,frr,Ua,mrr,j_e,grr,hrr,D_e,prr,urr,G_e,_rr,brr,vrr,Gy,mT,O_e,Frr,Trr,yz,Mrr,Err,Crr,gT,V_e,wrr,Arr,Lz,yrr,Lrr,xrr,hT,$rr,X_e,krr,Srr,z_e,Rrr,Prr,pT,WNe,kd,uT,W_e,Oy,Brr,Q_e,Irr,QNe,Qo,Vy,qrr,Sd,Nrr,xz,jrr,Drr,$z,Grr,Orr,Vrr,Xy,Xrr,H_e,zrr,Wrr,Qrr,Ct,zy,Hrr,U_e,Urr,Jrr,Rd,Yrr,J_e,Krr,Zrr,kz,etr,otr,rtr,_T,ttr,po,Wy,atr,Y_e,ntr,str,Ja,ltr,K_e,itr,dtr,Z_e,ctr,ftr,e2e,mtr,gtr,htr,ot,bT,o2e,ptr,utr,Sz,_tr,btr,vtr,vT,r2e,Ftr,Ttr,Rz,Mtr,Etr,Ctr,FT,t2e,wtr,Atr,Pz,ytr,Ltr,xtr,TT,a2e,$tr,ktr,Bz,Str,Rtr,Ptr,MT,n2e,Btr,Itr,Iz,qtr,Ntr,jtr,ET,Dtr,s2e,Gtr,Otr,l2e,Vtr,Xtr,CT,HNe,Pd,wT,i2e,Qy,ztr,d2e,Wtr,UNe,Ho,Hy,Qtr,Bd,Htr,qz,Utr,Jtr,Nz,Ytr,Ktr,Ztr,Uy,ear,c2e,oar,rar,tar,wt,Jy,aar,f2e,nar,sar,Id,lar,m2e,iar,dar,jz,car,far,mar,AT,gar,uo,Yy,har,g2e,par,uar,Ya,_ar,h2e,bar,Far,p2e,Tar,Mar,u2e,Ear,Car,war,qd,yT,_2e,Aar,yar,Dz,Lar,xar,$ar,LT,b2e,kar,Sar,Gz,Rar,Par,Bar,xT,v2e,Iar,qar,Oz,Nar,jar,Dar,$T,Gar,F2e,Oar,Var,T2e,Xar,zar,kT,JNe,Nd,ST,M2e,Ky,War,E2e,Qar,YNe,Uo,Zy,Har,jd,Uar,Vz,Jar,Yar,Xz,Kar,Zar,enr,eL,onr,C2e,rnr,tnr,anr,At,oL,nnr,w2e,snr,lnr,Dd,inr,A2e,dnr,cnr,zz,fnr,mnr,gnr,RT,hnr,_o,rL,pnr,y2e,unr,_nr,Ka,bnr,L2e,vnr,Fnr,x2e,Tnr,Mnr,$2e,Enr,Cnr,wnr,tL,PT,k2e,Anr,ynr,Wz,Lnr,xnr,$nr,BT,S2e,knr,Snr,Qz,Rnr,Pnr,Bnr,IT,Inr,R2e,qnr,Nnr,P2e,jnr,Dnr,qT,KNe,Gd,NT,B2e,aL,Gnr,I2e,Onr,ZNe,Jo,nL,Vnr,Od,Xnr,Hz,znr,Wnr,Uz,Qnr,Hnr,Unr,sL,Jnr,q2e,Ynr,Knr,Znr,yt,lL,esr,N2e,osr,rsr,Vd,tsr,j2e,asr,nsr,Jz,ssr,lsr,isr,jT,dsr,bo,iL,csr,D2e,fsr,msr,Za,gsr,G2e,hsr,psr,O2e,usr,_sr,V2e,bsr,vsr,Fsr,X2e,DT,z2e,Tsr,Msr,Yz,Esr,Csr,wsr,GT,Asr,W2e,ysr,Lsr,Q2e,xsr,$sr,OT,eje,Xd,VT,H2e,dL,ksr,U2e,Ssr,oje,Yo,cL,Rsr,zd,Psr,Kz,Bsr,Isr,Zz,qsr,Nsr,jsr,fL,Dsr,J2e,Gsr,Osr,Vsr,Lt,mL,Xsr,Y2e,zsr,Wsr,Wd,Qsr,K2e,Hsr,Usr,eW,Jsr,Ysr,Ksr,XT,Zsr,vo,gL,elr,Z2e,olr,rlr,en,tlr,e1e,alr,nlr,o1e,slr,llr,r1e,ilr,dlr,clr,on,zT,t1e,flr,mlr,oW,glr,hlr,plr,WT,a1e,ulr,_lr,rW,blr,vlr,Flr,QT,n1e,Tlr,Mlr,tW,Elr,Clr,wlr,HT,s1e,Alr,ylr,aW,Llr,xlr,$lr,UT,klr,l1e,Slr,Rlr,i1e,Plr,Blr,JT,rje,Qd,YT,d1e,hL,Ilr,c1e,qlr,tje,Ko,pL,Nlr,Hd,jlr,nW,Dlr,Glr,sW,Olr,Vlr,Xlr,uL,zlr,f1e,Wlr,Qlr,Hlr,xt,_L,Ulr,m1e,Jlr,Ylr,Ud,Klr,g1e,Zlr,eir,lW,oir,rir,tir,KT,air,Fo,bL,nir,h1e,sir,lir,rn,iir,p1e,dir,cir,u1e,fir,mir,_1e,gir,hir,pir,b1e,ZT,v1e,uir,_ir,iW,bir,vir,Fir,e8,Tir,F1e,Mir,Eir,T1e,Cir,wir,o8,aje,Jd,r8,M1e,vL,Air,E1e,yir,nje,Zo,FL,Lir,Yd,xir,dW,$ir,kir,cW,Sir,Rir,Pir,TL,Bir,C1e,Iir,qir,Nir,$t,ML,jir,w1e,Dir,Gir,Kd,Oir,A1e,Vir,Xir,fW,zir,Wir,Qir,t8,Hir,yr,EL,Uir,y1e,Jir,Yir,tn,Kir,L1e,Zir,edr,x1e,odr,rdr,$1e,tdr,adr,ndr,N,a8,k1e,sdr,ldr,mW,idr,ddr,cdr,n8,S1e,fdr,mdr,gW,gdr,hdr,pdr,s8,R1e,udr,_dr,hW,bdr,vdr,Fdr,l8,P1e,Tdr,Mdr,pW,Edr,Cdr,wdr,i8,B1e,Adr,ydr,uW,Ldr,xdr,$dr,d8,I1e,kdr,Sdr,_W,Rdr,Pdr,Bdr,c8,q1e,Idr,qdr,bW,Ndr,jdr,Ddr,f8,N1e,Gdr,Odr,vW,Vdr,Xdr,zdr,m8,j1e,Wdr,Qdr,FW,Hdr,Udr,Jdr,g8,D1e,Ydr,Kdr,TW,Zdr,ecr,ocr,h8,G1e,rcr,tcr,MW,acr,ncr,scr,p8,O1e,lcr,icr,EW,dcr,ccr,fcr,u8,V1e,mcr,gcr,CW,hcr,pcr,ucr,_8,X1e,_cr,bcr,wW,vcr,Fcr,Tcr,b8,z1e,Mcr,Ecr,AW,Ccr,wcr,Acr,v8,W1e,ycr,Lcr,yW,xcr,$cr,kcr,F8,Q1e,Scr,Rcr,LW,Pcr,Bcr,Icr,Gs,H1e,qcr,Ncr,xW,jcr,Dcr,$W,Gcr,Ocr,Vcr,T8,U1e,Xcr,zcr,kW,Wcr,Qcr,Hcr,M8,J1e,Ucr,Jcr,SW,Ycr,Kcr,Zcr,E8,Y1e,efr,ofr,RW,rfr,tfr,afr,C8,K1e,nfr,sfr,PW,lfr,ifr,dfr,w8,Z1e,cfr,ffr,BW,mfr,gfr,hfr,A8,ebe,pfr,ufr,IW,_fr,bfr,vfr,y8,obe,Ffr,Tfr,qW,Mfr,Efr,Cfr,L8,rbe,wfr,Afr,NW,yfr,Lfr,xfr,x8,tbe,$fr,kfr,jW,Sfr,Rfr,Pfr,$8,abe,Bfr,Ifr,DW,qfr,Nfr,jfr,k8,nbe,Dfr,Gfr,GW,Ofr,Vfr,Xfr,S8,sbe,zfr,Wfr,OW,Qfr,Hfr,Ufr,R8,lbe,Jfr,Yfr,VW,Kfr,Zfr,emr,P8,ibe,omr,rmr,XW,tmr,amr,nmr,B8,dbe,smr,lmr,zW,imr,dmr,cmr,I8,cbe,fmr,mmr,WW,gmr,hmr,pmr,q8,fbe,umr,_mr,QW,bmr,vmr,Fmr,N8,mbe,Tmr,Mmr,HW,Emr,Cmr,wmr,j8,gbe,Amr,ymr,UW,Lmr,xmr,$mr,D8,hbe,kmr,Smr,JW,Rmr,Pmr,Bmr,G8,pbe,Imr,qmr,YW,Nmr,jmr,Dmr,O8,ube,Gmr,Omr,KW,Vmr,Xmr,zmr,V8,_be,Wmr,Qmr,ZW,Hmr,Umr,Jmr,X8,bbe,Ymr,Kmr,eQ,Zmr,egr,ogr,z8,vbe,rgr,tgr,oQ,agr,ngr,sgr,W8,Fbe,lgr,igr,rQ,dgr,cgr,fgr,Q8,Tbe,mgr,ggr,tQ,hgr,pgr,ugr,H8,Mbe,_gr,bgr,aQ,vgr,Fgr,Tgr,U8,sje,Zd,J8,Ebe,CL,Mgr,Cbe,Egr,lje,er,wL,Cgr,ec,wgr,nQ,Agr,ygr,sQ,Lgr,xgr,$gr,AL,kgr,wbe,Sgr,Rgr,Pgr,kt,yL,Bgr,Abe,Igr,qgr,oc,Ngr,ybe,jgr,Dgr,lQ,Ggr,Ogr,Vgr,Y8,Xgr,Lr,LL,zgr,Lbe,Wgr,Qgr,an,Hgr,xbe,Ugr,Jgr,$be,Ygr,Kgr,kbe,Zgr,ehr,ohr,se,K8,Sbe,rhr,thr,iQ,ahr,nhr,shr,Z8,Rbe,lhr,ihr,dQ,dhr,chr,fhr,e7,Pbe,mhr,ghr,cQ,hhr,phr,uhr,o7,Bbe,_hr,bhr,fQ,vhr,Fhr,Thr,r7,Ibe,Mhr,Ehr,mQ,Chr,whr,Ahr,t7,qbe,yhr,Lhr,gQ,xhr,$hr,khr,a7,Nbe,Shr,Rhr,hQ,Phr,Bhr,Ihr,n7,jbe,qhr,Nhr,pQ,jhr,Dhr,Ghr,s7,Dbe,Ohr,Vhr,uQ,Xhr,zhr,Whr,l7,Gbe,Qhr,Hhr,_Q,Uhr,Jhr,Yhr,i7,Obe,Khr,Zhr,bQ,epr,opr,rpr,d7,Vbe,tpr,apr,vQ,npr,spr,lpr,c7,Xbe,ipr,dpr,FQ,cpr,fpr,mpr,f7,zbe,gpr,hpr,TQ,ppr,upr,_pr,m7,Wbe,bpr,vpr,MQ,Fpr,Tpr,Mpr,g7,Qbe,Epr,Cpr,EQ,wpr,Apr,ypr,h7,Hbe,Lpr,xpr,CQ,$pr,kpr,Spr,p7,Ube,Rpr,Ppr,wQ,Bpr,Ipr,qpr,u7,Jbe,Npr,jpr,AQ,Dpr,Gpr,Opr,_7,Ybe,Vpr,Xpr,yQ,zpr,Wpr,Qpr,b7,Kbe,Hpr,Upr,LQ,Jpr,Ypr,Kpr,v7,Zbe,Zpr,eur,xQ,our,rur,tur,F7,eve,aur,nur,$Q,sur,lur,iur,T7,ije,rc,M7,ove,xL,dur,rve,cur,dje,or,$L,fur,tc,mur,kQ,gur,hur,SQ,pur,uur,_ur,kL,bur,tve,vur,Fur,Tur,St,SL,Mur,ave,Eur,Cur,ac,wur,nve,Aur,yur,RQ,Lur,xur,$ur,E7,kur,xr,RL,Sur,sve,Rur,Pur,nn,Bur,lve,Iur,qur,ive,Nur,jur,dve,Dur,Gur,Our,Me,C7,cve,Vur,Xur,PQ,zur,Wur,Qur,w7,fve,Hur,Uur,BQ,Jur,Yur,Kur,A7,mve,Zur,e_r,IQ,o_r,r_r,t_r,y7,gve,a_r,n_r,qQ,s_r,l_r,i_r,L7,hve,d_r,c_r,NQ,f_r,m_r,g_r,x7,pve,h_r,p_r,jQ,u_r,__r,b_r,$7,uve,v_r,F_r,DQ,T_r,M_r,E_r,k7,_ve,C_r,w_r,GQ,A_r,y_r,L_r,S7,bve,x_r,$_r,OQ,k_r,S_r,R_r,R7,vve,P_r,B_r,VQ,I_r,q_r,N_r,P7,Fve,j_r,D_r,XQ,G_r,O_r,V_r,B7,Tve,X_r,z_r,zQ,W_r,Q_r,H_r,I7,cje,nc,q7,Mve,PL,U_r,Eve,J_r,fje,rr,BL,Y_r,sc,K_r,WQ,Z_r,e2r,QQ,o2r,r2r,t2r,IL,a2r,Cve,n2r,s2r,l2r,Rt,qL,i2r,wve,d2r,c2r,lc,f2r,Ave,m2r,g2r,HQ,h2r,p2r,u2r,N7,_2r,$r,NL,b2r,yve,v2r,F2r,sn,T2r,Lve,M2r,E2r,xve,C2r,w2r,$ve,A2r,y2r,L2r,ln,j7,kve,x2r,$2r,UQ,k2r,S2r,R2r,D7,Sve,P2r,B2r,JQ,I2r,q2r,N2r,G7,Rve,j2r,D2r,YQ,G2r,O2r,V2r,O7,Pve,X2r,z2r,KQ,W2r,Q2r,H2r,V7,mje,ic,X7,Bve,jL,U2r,Ive,J2r,gje,tr,DL,Y2r,dc,K2r,ZQ,Z2r,e1r,eH,o1r,r1r,t1r,GL,a1r,qve,n1r,s1r,l1r,Pt,OL,i1r,Nve,d1r,c1r,cc,f1r,jve,m1r,g1r,oH,h1r,p1r,u1r,z7,_1r,kr,VL,b1r,Dve,v1r,F1r,dn,T1r,Gve,M1r,E1r,Ove,C1r,w1r,Vve,A1r,y1r,L1r,ie,W7,Xve,x1r,$1r,rH,k1r,S1r,R1r,Q7,zve,P1r,B1r,tH,I1r,q1r,N1r,H7,Wve,j1r,D1r,aH,G1r,O1r,V1r,U7,Qve,X1r,z1r,nH,W1r,Q1r,H1r,J7,Hve,U1r,J1r,sH,Y1r,K1r,Z1r,Y7,Uve,ebr,obr,lH,rbr,tbr,abr,K7,Jve,nbr,sbr,iH,lbr,ibr,dbr,Z7,Yve,cbr,fbr,dH,mbr,gbr,hbr,eM,Kve,pbr,ubr,cH,_br,bbr,vbr,oM,Zve,Fbr,Tbr,fH,Mbr,Ebr,Cbr,rM,eFe,wbr,Abr,mH,ybr,Lbr,xbr,tM,oFe,$br,kbr,gH,Sbr,Rbr,Pbr,aM,rFe,Bbr,Ibr,hH,qbr,Nbr,jbr,nM,tFe,Dbr,Gbr,pH,Obr,Vbr,Xbr,sM,aFe,zbr,Wbr,uH,Qbr,Hbr,Ubr,lM,nFe,Jbr,Ybr,_H,Kbr,Zbr,evr,iM,sFe,ovr,rvr,bH,tvr,avr,nvr,dM,lFe,svr,lvr,vH,ivr,dvr,cvr,cM,iFe,fvr,mvr,FH,gvr,hvr,pvr,fM,dFe,uvr,_vr,TH,bvr,vvr,Fvr,mM,hje,fc,gM,cFe,XL,Tvr,fFe,Mvr,pje,ar,zL,Evr,mc,Cvr,MH,wvr,Avr,EH,yvr,Lvr,xvr,WL,$vr,mFe,kvr,Svr,Rvr,Bt,QL,Pvr,gFe,Bvr,Ivr,gc,qvr,hFe,Nvr,jvr,CH,Dvr,Gvr,Ovr,hM,Vvr,Sr,HL,Xvr,pFe,zvr,Wvr,cn,Qvr,uFe,Hvr,Uvr,_Fe,Jvr,Yvr,bFe,Kvr,Zvr,eFr,ye,pM,vFe,oFr,rFr,wH,tFr,aFr,nFr,uM,FFe,sFr,lFr,AH,iFr,dFr,cFr,_M,TFe,fFr,mFr,yH,gFr,hFr,pFr,bM,MFe,uFr,_Fr,LH,bFr,vFr,FFr,vM,EFe,TFr,MFr,xH,EFr,CFr,wFr,FM,CFe,AFr,yFr,$H,LFr,xFr,$Fr,TM,wFe,kFr,SFr,kH,RFr,PFr,BFr,MM,AFe,IFr,qFr,SH,NFr,jFr,DFr,EM,yFe,GFr,OFr,RH,VFr,XFr,zFr,CM,LFe,WFr,QFr,PH,HFr,UFr,JFr,wM,uje,hc,AM,xFe,UL,YFr,$Fe,KFr,_je,nr,JL,ZFr,pc,e6r,BH,o6r,r6r,IH,t6r,a6r,n6r,YL,s6r,kFe,l6r,i6r,d6r,It,KL,c6r,SFe,f6r,m6r,uc,g6r,RFe,h6r,p6r,qH,u6r,_6r,b6r,yM,v6r,Rr,ZL,F6r,PFe,T6r,M6r,fn,E6r,BFe,C6r,w6r,IFe,A6r,y6r,qFe,L6r,x6r,$6r,re,LM,NFe,k6r,S6r,NH,R6r,P6r,B6r,xM,jFe,I6r,q6r,jH,N6r,j6r,D6r,$M,DFe,G6r,O6r,DH,V6r,X6r,z6r,kM,GFe,W6r,Q6r,GH,H6r,U6r,J6r,SM,OFe,Y6r,K6r,OH,Z6r,eTr,oTr,RM,VFe,rTr,tTr,VH,aTr,nTr,sTr,PM,XFe,lTr,iTr,XH,dTr,cTr,fTr,BM,zFe,mTr,gTr,zH,hTr,pTr,uTr,IM,WFe,_Tr,bTr,WH,vTr,FTr,TTr,qM,QFe,MTr,ETr,QH,CTr,wTr,ATr,NM,HFe,yTr,LTr,HH,xTr,$Tr,kTr,jM,UFe,STr,RTr,UH,PTr,BTr,ITr,DM,JFe,qTr,NTr,JH,jTr,DTr,GTr,GM,YFe,OTr,VTr,YH,XTr,zTr,WTr,OM,KFe,QTr,HTr,KH,UTr,JTr,YTr,VM,ZFe,KTr,ZTr,ZH,e8r,o8r,r8r,XM,e6e,t8r,a8r,eU,n8r,s8r,l8r,zM,o6e,i8r,d8r,oU,c8r,f8r,m8r,WM,r6e,g8r,h8r,rU,p8r,u8r,_8r,QM,t6e,b8r,v8r,tU,F8r,T8r,M8r,HM,a6e,E8r,C8r,aU,w8r,A8r,y8r,UM,n6e,L8r,x8r,nU,$8r,k8r,S8r,JM,s6e,R8r,P8r,sU,B8r,I8r,q8r,YM,l6e,N8r,j8r,lU,D8r,G8r,O8r,KM,i6e,V8r,X8r,iU,z8r,W8r,Q8r,ZM,d6e,H8r,U8r,dU,J8r,Y8r,K8r,e4,bje,_c,o4,c6e,ex,Z8r,f6e,e7r,vje,sr,ox,o7r,bc,r7r,cU,t7r,a7r,fU,n7r,s7r,l7r,rx,i7r,m6e,d7r,c7r,f7r,qt,tx,m7r,g6e,g7r,h7r,vc,p7r,h6e,u7r,_7r,mU,b7r,v7r,F7r,r4,T7r,Pr,ax,M7r,p6e,E7r,C7r,mn,w7r,u6e,A7r,y7r,_6e,L7r,x7r,b6e,$7r,k7r,S7r,he,t4,v6e,R7r,P7r,gU,B7r,I7r,q7r,a4,F6e,N7r,j7r,hU,D7r,G7r,O7r,n4,T6e,V7r,X7r,pU,z7r,W7r,Q7r,s4,M6e,H7r,U7r,uU,J7r,Y7r,K7r,l4,E6e,Z7r,eMr,_U,oMr,rMr,tMr,i4,C6e,aMr,nMr,bU,sMr,lMr,iMr,d4,w6e,dMr,cMr,vU,fMr,mMr,gMr,c4,A6e,hMr,pMr,FU,uMr,_Mr,bMr,f4,y6e,vMr,FMr,TU,TMr,MMr,EMr,m4,L6e,CMr,wMr,MU,AMr,yMr,LMr,g4,x6e,xMr,$Mr,EU,kMr,SMr,RMr,h4,$6e,PMr,BMr,CU,IMr,qMr,NMr,p4,k6e,jMr,DMr,wU,GMr,OMr,VMr,u4,S6e,XMr,zMr,AU,WMr,QMr,HMr,_4,R6e,UMr,JMr,yU,YMr,KMr,ZMr,b4,P6e,e4r,o4r,LU,r4r,t4r,a4r,v4,B6e,n4r,s4r,xU,l4r,i4r,d4r,F4,Fje,Fc,T4,I6e,nx,c4r,q6e,f4r,Tje,lr,sx,m4r,Tc,g4r,$U,h4r,p4r,kU,u4r,_4r,b4r,lx,v4r,N6e,F4r,T4r,M4r,Nt,ix,E4r,j6e,C4r,w4r,Mc,A4r,D6e,y4r,L4r,SU,x4r,$4r,k4r,M4,S4r,Br,dx,R4r,G6e,P4r,B4r,gn,I4r,O6e,q4r,N4r,V6e,j4r,D4r,X6e,G4r,O4r,V4r,cx,E4,z6e,X4r,z4r,RU,W4r,Q4r,H4r,C4,W6e,U4r,J4r,PU,Y4r,K4r,Z4r,w4,Mje,Ec,A4,Q6e,fx,eEr,H6e,oEr,Eje,ir,mx,rEr,Cc,tEr,BU,aEr,nEr,IU,sEr,lEr,iEr,gx,dEr,U6e,cEr,fEr,mEr,jt,hx,gEr,J6e,hEr,pEr,wc,uEr,Y6e,_Er,bEr,qU,vEr,FEr,TEr,y4,MEr,Ir,px,EEr,K6e,CEr,wEr,hn,AEr,Z6e,yEr,LEr,eTe,xEr,$Er,oTe,kEr,SEr,REr,rTe,L4,tTe,PEr,BEr,NU,IEr,qEr,NEr,x4,Cje,Ac,$4,aTe,ux,jEr,nTe,DEr,wje,dr,_x,GEr,yc,OEr,jU,VEr,XEr,DU,zEr,WEr,QEr,bx,HEr,sTe,UEr,JEr,YEr,Dt,vx,KEr,lTe,ZEr,eCr,Lc,oCr,iTe,rCr,tCr,GU,aCr,nCr,sCr,k4,lCr,qr,Fx,iCr,dTe,dCr,cCr,pn,fCr,cTe,mCr,gCr,fTe,hCr,pCr,mTe,uCr,_Cr,bCr,de,S4,gTe,vCr,FCr,OU,TCr,MCr,ECr,R4,hTe,CCr,wCr,VU,ACr,yCr,LCr,P4,pTe,xCr,$Cr,XU,kCr,SCr,RCr,B4,uTe,PCr,BCr,zU,ICr,qCr,NCr,I4,_Te,jCr,DCr,WU,GCr,OCr,VCr,q4,bTe,XCr,zCr,QU,WCr,QCr,HCr,N4,vTe,UCr,JCr,HU,YCr,KCr,ZCr,j4,FTe,e5r,o5r,UU,r5r,t5r,a5r,D4,TTe,n5r,s5r,JU,l5r,i5r,d5r,G4,MTe,c5r,f5r,YU,m5r,g5r,h5r,O4,ETe,p5r,u5r,KU,_5r,b5r,v5r,V4,CTe,F5r,T5r,ZU,M5r,E5r,C5r,X4,wTe,w5r,A5r,eJ,y5r,L5r,x5r,z4,ATe,$5r,k5r,oJ,S5r,R5r,P5r,W4,yTe,B5r,I5r,rJ,q5r,N5r,j5r,Q4,LTe,D5r,G5r,tJ,O5r,V5r,X5r,H4,xTe,z5r,W5r,aJ,Q5r,H5r,U5r,U4,$Te,J5r,Y5r,nJ,K5r,Z5r,e3r,J4,kTe,o3r,r3r,sJ,t3r,a3r,n3r,Y4,STe,s3r,l3r,lJ,i3r,d3r,c3r,K4,Aje,xc,Z4,RTe,Tx,f3r,PTe,m3r,yje,cr,Mx,g3r,$c,h3r,iJ,p3r,u3r,dJ,_3r,b3r,v3r,Ex,F3r,BTe,T3r,M3r,E3r,Gt,Cx,C3r,ITe,w3r,A3r,kc,y3r,qTe,L3r,x3r,cJ,$3r,k3r,S3r,eE,R3r,Nr,wx,P3r,NTe,B3r,I3r,un,q3r,jTe,N3r,j3r,DTe,D3r,G3r,GTe,O3r,V3r,X3r,ce,oE,OTe,z3r,W3r,fJ,Q3r,H3r,U3r,rE,VTe,J3r,Y3r,mJ,K3r,Z3r,ewr,tE,XTe,owr,rwr,gJ,twr,awr,nwr,aE,zTe,swr,lwr,hJ,iwr,dwr,cwr,nE,WTe,fwr,mwr,pJ,gwr,hwr,pwr,sE,QTe,uwr,_wr,uJ,bwr,vwr,Fwr,lE,HTe,Twr,Mwr,_J,Ewr,Cwr,wwr,iE,UTe,Awr,ywr,bJ,Lwr,xwr,$wr,dE,JTe,kwr,Swr,vJ,Rwr,Pwr,Bwr,cE,YTe,Iwr,qwr,FJ,Nwr,jwr,Dwr,fE,KTe,Gwr,Owr,TJ,Vwr,Xwr,zwr,mE,ZTe,Wwr,Qwr,MJ,Hwr,Uwr,Jwr,gE,e8e,Ywr,Kwr,EJ,Zwr,e0r,o0r,hE,o8e,r0r,t0r,CJ,a0r,n0r,s0r,pE,r8e,l0r,i0r,wJ,d0r,c0r,f0r,uE,t8e,m0r,g0r,AJ,h0r,p0r,u0r,_E,a8e,_0r,b0r,yJ,v0r,F0r,T0r,bE,n8e,M0r,E0r,LJ,C0r,w0r,A0r,vE,s8e,y0r,L0r,xJ,x0r,$0r,k0r,FE,l8e,S0r,R0r,$J,P0r,B0r,I0r,TE,Lje,Sc,ME,i8e,Ax,q0r,d8e,N0r,xje,fr,yx,j0r,Rc,D0r,kJ,G0r,O0r,SJ,V0r,X0r,z0r,Lx,W0r,c8e,Q0r,H0r,U0r,Ot,xx,J0r,f8e,Y0r,K0r,Pc,Z0r,m8e,eAr,oAr,RJ,rAr,tAr,aAr,EE,nAr,jr,$x,sAr,g8e,lAr,iAr,_n,dAr,h8e,cAr,fAr,p8e,mAr,gAr,u8e,hAr,pAr,uAr,_8e,CE,b8e,_Ar,bAr,PJ,vAr,FAr,TAr,wE,$je,Bc,AE,v8e,kx,MAr,F8e,EAr,kje,mr,Sx,CAr,Ic,wAr,BJ,AAr,yAr,IJ,LAr,xAr,$Ar,Rx,kAr,T8e,SAr,RAr,PAr,Vt,Px,BAr,M8e,IAr,qAr,qc,NAr,E8e,jAr,DAr,qJ,GAr,OAr,VAr,yE,XAr,Dr,Bx,zAr,C8e,WAr,QAr,bn,HAr,w8e,UAr,JAr,A8e,YAr,KAr,y8e,ZAr,eyr,oyr,L8e,LE,x8e,ryr,tyr,NJ,ayr,nyr,syr,xE,Sje,Nc,$E,$8e,Ix,lyr,k8e,iyr,Rje,gr,qx,dyr,jc,cyr,jJ,fyr,myr,DJ,gyr,hyr,pyr,Nx,uyr,S8e,_yr,byr,vyr,Xt,jx,Fyr,R8e,Tyr,Myr,Dc,Eyr,P8e,Cyr,wyr,GJ,Ayr,yyr,Lyr,kE,xyr,Gr,Dx,$yr,B8e,kyr,Syr,vn,Ryr,I8e,Pyr,Byr,q8e,Iyr,qyr,N8e,Nyr,jyr,Dyr,te,SE,j8e,Gyr,Oyr,OJ,Vyr,Xyr,zyr,RE,D8e,Wyr,Qyr,VJ,Hyr,Uyr,Jyr,PE,G8e,Yyr,Kyr,XJ,Zyr,eLr,oLr,BE,O8e,rLr,tLr,zJ,aLr,nLr,sLr,IE,V8e,lLr,iLr,WJ,dLr,cLr,fLr,qE,X8e,mLr,gLr,QJ,hLr,pLr,uLr,NE,z8e,_Lr,bLr,HJ,vLr,FLr,TLr,jE,W8e,MLr,ELr,UJ,CLr,wLr,ALr,DE,Q8e,yLr,LLr,JJ,xLr,$Lr,kLr,GE,H8e,SLr,RLr,YJ,PLr,BLr,ILr,OE,U8e,qLr,NLr,KJ,jLr,DLr,GLr,VE,J8e,OLr,VLr,ZJ,XLr,zLr,WLr,XE,Y8e,QLr,HLr,eY,ULr,JLr,YLr,zE,K8e,KLr,ZLr,oY,exr,oxr,rxr,WE,Z8e,txr,axr,rY,nxr,sxr,lxr,QE,e7e,ixr,dxr,tY,cxr,fxr,mxr,HE,o7e,gxr,hxr,aY,pxr,uxr,_xr,UE,r7e,bxr,vxr,nY,Fxr,Txr,Mxr,JE,t7e,Exr,Cxr,sY,wxr,Axr,yxr,YE,a7e,Lxr,xxr,lY,$xr,kxr,Sxr,KE,n7e,Rxr,Pxr,iY,Bxr,Ixr,qxr,ZE,s7e,Nxr,jxr,dY,Dxr,Gxr,Oxr,eC,l7e,Vxr,Xxr,cY,zxr,Wxr,Qxr,oC,i7e,Hxr,Uxr,fY,Jxr,Yxr,Kxr,rC,d7e,Zxr,e9r,mY,o9r,r9r,t9r,tC,Pje,Gc,aC,c7e,Gx,a9r,f7e,n9r,Bje,hr,Ox,s9r,Oc,l9r,gY,i9r,d9r,hY,c9r,f9r,m9r,Vx,g9r,m7e,h9r,p9r,u9r,zt,Xx,_9r,g7e,b9r,v9r,Vc,F9r,h7e,T9r,M9r,pY,E9r,C9r,w9r,nC,A9r,Or,zx,y9r,p7e,L9r,x9r,Fn,$9r,u7e,k9r,S9r,_7e,R9r,P9r,b7e,B9r,I9r,q9r,Re,sC,v7e,N9r,j9r,uY,D9r,G9r,O9r,lC,F7e,V9r,X9r,_Y,z9r,W9r,Q9r,iC,T7e,H9r,U9r,bY,J9r,Y9r,K9r,dC,M7e,Z9r,e$r,vY,o$r,r$r,t$r,cC,E7e,a$r,n$r,FY,s$r,l$r,i$r,fC,C7e,d$r,c$r,TY,f$r,m$r,g$r,mC,w7e,h$r,p$r,MY,u$r,_$r,b$r,gC,A7e,v$r,F$r,EY,T$r,M$r,E$r,hC,y7e,C$r,w$r,CY,A$r,y$r,L$r,pC,Ije,Xc,uC,L7e,Wx,x$r,x7e,$$r,qje,pr,Qx,k$r,zc,S$r,wY,R$r,P$r,AY,B$r,I$r,q$r,Hx,N$r,$7e,j$r,D$r,G$r,Wt,Ux,O$r,k7e,V$r,X$r,Wc,z$r,S7e,W$r,Q$r,yY,H$r,U$r,J$r,_C,Y$r,Vr,Jx,K$r,R7e,Z$r,ekr,Tn,okr,P7e,rkr,tkr,B7e,akr,nkr,I7e,skr,lkr,ikr,Ee,bC,q7e,dkr,ckr,LY,fkr,mkr,gkr,vC,N7e,hkr,pkr,xY,ukr,_kr,bkr,FC,j7e,vkr,Fkr,$Y,Tkr,Mkr,Ekr,TC,D7e,Ckr,wkr,kY,Akr,ykr,Lkr,MC,G7e,xkr,$kr,SY,kkr,Skr,Rkr,EC,O7e,Pkr,Bkr,RY,Ikr,qkr,Nkr,CC,V7e,jkr,Dkr,PY,Gkr,Okr,Vkr,wC,X7e,Xkr,zkr,BY,Wkr,Qkr,Hkr,AC,z7e,Ukr,Jkr,IY,Ykr,Kkr,Zkr,yC,W7e,eSr,oSr,qY,rSr,tSr,aSr,LC,Q7e,nSr,sSr,NY,lSr,iSr,dSr,xC,H7e,cSr,fSr,jY,mSr,gSr,hSr,$C,Nje,Qc,kC,U7e,Yx,pSr,J7e,uSr,jje,ur,Kx,_Sr,Hc,bSr,DY,vSr,FSr,GY,TSr,MSr,ESr,Zx,CSr,Y7e,wSr,ASr,ySr,Qt,e9,LSr,K7e,xSr,$Sr,Uc,kSr,Z7e,SSr,RSr,OY,PSr,BSr,ISr,SC,qSr,Xr,o9,NSr,eMe,jSr,DSr,Mn,GSr,oMe,OSr,VSr,rMe,XSr,zSr,tMe,WSr,QSr,HSr,Le,RC,aMe,USr,JSr,VY,YSr,KSr,ZSr,PC,nMe,eRr,oRr,XY,rRr,tRr,aRr,BC,sMe,nRr,sRr,zY,lRr,iRr,dRr,IC,lMe,cRr,fRr,WY,mRr,gRr,hRr,qC,iMe,pRr,uRr,QY,_Rr,bRr,vRr,NC,dMe,FRr,TRr,HY,MRr,ERr,CRr,jC,cMe,wRr,ARr,UY,yRr,LRr,xRr,DC,fMe,$Rr,kRr,JY,SRr,RRr,PRr,GC,mMe,BRr,IRr,YY,qRr,NRr,jRr,OC,gMe,DRr,GRr,KY,ORr,VRr,XRr,VC,Dje,Jc,XC,hMe,r9,zRr,pMe,WRr,Gje,_r,t9,QRr,Yc,HRr,ZY,URr,JRr,eK,YRr,KRr,ZRr,a9,ePr,uMe,oPr,rPr,tPr,Ht,n9,aPr,_Me,nPr,sPr,Kc,lPr,bMe,iPr,dPr,oK,cPr,fPr,mPr,zC,gPr,zr,s9,hPr,vMe,pPr,uPr,En,_Pr,FMe,bPr,vPr,TMe,FPr,TPr,MMe,MPr,EPr,CPr,Pe,WC,EMe,wPr,APr,rK,yPr,LPr,xPr,QC,CMe,$Pr,kPr,tK,SPr,RPr,PPr,HC,wMe,BPr,IPr,aK,qPr,NPr,jPr,UC,AMe,DPr,GPr,nK,OPr,VPr,XPr,JC,yMe,zPr,WPr,sK,QPr,HPr,UPr,YC,LMe,JPr,YPr,lK,KPr,ZPr,eBr,KC,xMe,oBr,rBr,iK,tBr,aBr,nBr,ZC,$Me,sBr,lBr,dK,iBr,dBr,cBr,e5,kMe,fBr,mBr,cK,gBr,hBr,pBr,o5,Oje,Zc,r5,SMe,l9,uBr,RMe,_Br,Vje,br,i9,bBr,ef,vBr,fK,FBr,TBr,mK,MBr,EBr,CBr,d9,wBr,PMe,ABr,yBr,LBr,Ut,c9,xBr,BMe,$Br,kBr,of,SBr,IMe,RBr,PBr,gK,BBr,IBr,qBr,t5,NBr,Wr,f9,jBr,qMe,DBr,GBr,Cn,OBr,NMe,VBr,XBr,jMe,zBr,WBr,DMe,QBr,HBr,UBr,xe,a5,GMe,JBr,YBr,hK,KBr,ZBr,eIr,n5,OMe,oIr,rIr,pK,tIr,aIr,nIr,s5,VMe,sIr,lIr,uK,iIr,dIr,cIr,l5,XMe,fIr,mIr,_K,gIr,hIr,pIr,i5,zMe,uIr,_Ir,bK,bIr,vIr,FIr,d5,WMe,TIr,MIr,vK,EIr,CIr,wIr,c5,QMe,AIr,yIr,FK,LIr,xIr,$Ir,f5,HMe,kIr,SIr,TK,RIr,PIr,BIr,m5,UMe,IIr,qIr,MK,NIr,jIr,DIr,g5,JMe,GIr,OIr,EK,VIr,XIr,zIr,h5,Xje,rf,p5,YMe,m9,WIr,KMe,QIr,zje,vr,g9,HIr,tf,UIr,CK,JIr,YIr,wK,KIr,ZIr,eqr,h9,oqr,ZMe,rqr,tqr,aqr,Jt,p9,nqr,e4e,sqr,lqr,af,iqr,o4e,dqr,cqr,AK,fqr,mqr,gqr,u5,hqr,Qr,u9,pqr,r4e,uqr,_qr,wn,bqr,t4e,vqr,Fqr,a4e,Tqr,Mqr,n4e,Eqr,Cqr,wqr,$e,_5,s4e,Aqr,yqr,yK,Lqr,xqr,$qr,b5,l4e,kqr,Sqr,LK,Rqr,Pqr,Bqr,v5,i4e,Iqr,qqr,xK,Nqr,jqr,Dqr,F5,d4e,Gqr,Oqr,$K,Vqr,Xqr,zqr,T5,c4e,Wqr,Qqr,kK,Hqr,Uqr,Jqr,M5,f4e,Yqr,Kqr,SK,Zqr,eNr,oNr,E5,m4e,rNr,tNr,RK,aNr,nNr,sNr,C5,g4e,lNr,iNr,PK,dNr,cNr,fNr,w5,h4e,mNr,gNr,BK,hNr,pNr,uNr,A5,p4e,_Nr,bNr,IK,vNr,FNr,TNr,y5,Wje,nf,L5,u4e,_9,MNr,_4e,ENr,Qje,Fr,b9,CNr,sf,wNr,qK,ANr,yNr,NK,LNr,xNr,$Nr,v9,kNr,b4e,SNr,RNr,PNr,Yt,F9,BNr,v4e,INr,qNr,lf,NNr,F4e,jNr,DNr,jK,GNr,ONr,VNr,x5,XNr,Hr,T9,zNr,T4e,WNr,QNr,An,HNr,M4e,UNr,JNr,E4e,YNr,KNr,C4e,ZNr,ejr,ojr,De,$5,w4e,rjr,tjr,DK,ajr,njr,sjr,k5,A4e,ljr,ijr,GK,djr,cjr,fjr,S5,y4e,mjr,gjr,OK,hjr,pjr,ujr,R5,L4e,_jr,bjr,VK,vjr,Fjr,Tjr,P5,x4e,Mjr,Ejr,XK,Cjr,wjr,Ajr,B5,$4e,yjr,Ljr,zK,xjr,$jr,kjr,I5,k4e,Sjr,Rjr,WK,Pjr,Bjr,Ijr,q5,S4e,qjr,Njr,QK,jjr,Djr,Gjr,N5,Hje,df,j5,R4e,M9,Ojr,P4e,Vjr,Uje,Tr,E9,Xjr,cf,zjr,HK,Wjr,Qjr,UK,Hjr,Ujr,Jjr,C9,Yjr,B4e,Kjr,Zjr,eDr,Kt,w9,oDr,I4e,rDr,tDr,ff,aDr,q4e,nDr,sDr,JK,lDr,iDr,dDr,D5,cDr,Ur,A9,fDr,N4e,mDr,gDr,yn,hDr,j4e,pDr,uDr,D4e,_Dr,bDr,G4e,vDr,FDr,TDr,Ge,G5,O4e,MDr,EDr,YK,CDr,wDr,ADr,O5,V4e,yDr,LDr,KK,xDr,$Dr,kDr,V5,X4e,SDr,RDr,ZK,PDr,BDr,IDr,X5,z4e,qDr,NDr,eZ,jDr,DDr,GDr,z5,W4e,ODr,VDr,oZ,XDr,zDr,WDr,W5,Q4e,QDr,HDr,rZ,UDr,JDr,YDr,Q5,H4e,KDr,ZDr,tZ,eGr,oGr,rGr,H5,U4e,tGr,aGr,aZ,nGr,sGr,lGr,U5,Jje,mf,J5,J4e,y9,iGr,Y4e,dGr,Yje,Mr,L9,cGr,gf,fGr,nZ,mGr,gGr,sZ,hGr,pGr,uGr,x9,_Gr,K4e,bGr,vGr,FGr,Zt,$9,TGr,Z4e,MGr,EGr,hf,CGr,eEe,wGr,AGr,lZ,yGr,LGr,xGr,Y5,$Gr,Jr,k9,kGr,oEe,SGr,RGr,Ln,PGr,rEe,BGr,IGr,tEe,qGr,NGr,aEe,jGr,DGr,GGr,nEe,K5,sEe,OGr,VGr,iZ,XGr,zGr,WGr,Z5,Kje,pf,e3,lEe,S9,QGr,iEe,HGr,Zje,Er,R9,UGr,uf,JGr,dZ,YGr,KGr,cZ,ZGr,eOr,oOr,P9,rOr,dEe,tOr,aOr,nOr,ea,B9,sOr,cEe,lOr,iOr,_f,dOr,fEe,cOr,fOr,fZ,mOr,gOr,hOr,o3,pOr,Yr,I9,uOr,mEe,_Or,bOr,xn,vOr,gEe,FOr,TOr,hEe,MOr,EOr,pEe,COr,wOr,AOr,q9,r3,uEe,yOr,LOr,mZ,xOr,$Or,kOr,t3,_Ee,SOr,ROr,gZ,POr,BOr,IOr,a3,eDe,bf,n3,bEe,N9,qOr,vEe,NOr,oDe,Cr,j9,jOr,vf,DOr,hZ,GOr,OOr,pZ,VOr,XOr,zOr,D9,WOr,FEe,QOr,HOr,UOr,oa,G9,JOr,TEe,YOr,KOr,Ff,ZOr,MEe,eVr,oVr,uZ,rVr,tVr,aVr,s3,nVr,Kr,O9,sVr,EEe,lVr,iVr,$n,dVr,CEe,cVr,fVr,wEe,mVr,gVr,AEe,hVr,pVr,uVr,yEe,l3,LEe,_Vr,bVr,_Z,vVr,FVr,TVr,i3,rDe;return d=new oe({}),La=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),R0=new oe({}),P0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),xf=new MVr({props:{warning:!0,$$slots:{default:[K9t]},$$scope:{ctx:L}}}),B0=new oe({}),I0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L578"}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L601"}}),$g=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),D0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L724"}}),G0=new oe({}),O0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L389"}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17286/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L403"}}),ch=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),W0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L599"}}),Q0=new oe({}),H0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Gh=new MVr({props:{$$slots:{default:[o$t]},$$scope:{ctx:L}}}),Oh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),K0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),Z0=new oe({}),eA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L87"}}),tA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L101"}}),lp=new MVr({props:{$$slots:{default:[t$t]},$$scope:{ctx:L}}}),ip=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),aA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L254"}}),nA=new oe({}),sA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L739"}}),iA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),fp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),dA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),a_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),cA=new oe({}),fA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L746"}}),gA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),s_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),J_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),pA=new oe({}),uA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L761"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),K_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),FA=new oe({}),TA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L768"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),N2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),wA=new oe({}),AA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L775"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),$A=new oe({}),kA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L784"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),BA=new oe({}),IA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L829"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),uv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),DA=new oe({}),GA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L836"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),bv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),zA=new oe({}),WA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L822"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),JA=new oe({}),YA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L793"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),oy=new oe({}),ry=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L800"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),sy=new oe({}),ly=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L845"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L884"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),uy=new oe({}),_y=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L811"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L891"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L914"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L898"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L905"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L923"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),Qy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L930"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L877"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L852"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L859"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L868"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),t8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),ux=new oe({}),_x=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),Ax=new oe({}),yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Ix=new oe({}),qx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Wx=new oe({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),c9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),_9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),N9=new oe({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),_i=o("Auto Classes"),Cf=l(),at=a("p"),bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),vi=a("code"),x0=o("from_pretrained()"),wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),Fi=o("Instantiating one of "),Sn=a("a"),$0=o("AutoConfig"),Rn=o(", "),Pn=a("a"),k0=o("AutoModel"),Ti=o(`, and
`),Bn=a("a"),S0=o("AutoTokenizer"),Mi=o(" will directly create a class of the relevant architecture. For instance"),Af=l(),F(La.$$.fragment),Qe=l(),Ae=a("p"),rk=o("will create a model that is an instance of "),Ei=a("a"),tk=o("BertModel"),ak=o("."),Co=l(),xa=a("p"),nk=o("There is one class of "),yf=a("code"),sk=o("AutoModel"),mOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Yqe=l(),Ci=a("h2"),Lf=a("a"),moe=a("span"),F(R0.$$.fragment),gOe=l(),goe=a("span"),hOe=o("Extending the Auto Classes"),Kqe=l(),In=a("p"),pOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hoe=a("code"),uOe=o("NewModel"),_Oe=o(", make sure you have a "),poe=a("code"),bOe=o("NewModelConfig"),vOe=o(` then you can add those to the auto
classes like this:`),Zqe=l(),F(P0.$$.fragment),eNe=l(),lk=a("p"),FOe=o("You will then be able to use the auto classes like you would usually do!"),oNe=l(),F(xf.$$.fragment),rNe=l(),wi=a("h2"),$f=a("a"),uoe=a("span"),F(B0.$$.fragment),TOe=l(),_oe=a("span"),MOe=o("AutoConfig"),tNe=l(),wo=a("div"),F(I0.$$.fragment),EOe=l(),q0=a("p"),COe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ik=a("a"),wOe=o("from_pretrained()"),AOe=o(" class method."),yOe=l(),N0=a("p"),LOe=o("This class cannot be instantiated directly using "),boe=a("code"),xOe=o("__init__()"),$Oe=o(" (throws an error)."),kOe=l(),wr=a("div"),F(j0.$$.fragment),SOe=l(),voe=a("p"),ROe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),POe=l(),Ai=a("p"),BOe=o("The configuration class to instantiate is selected based on the "),Foe=a("code"),IOe=o("model_type"),qOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Toe=a("code"),NOe=o("pretrained_model_name_or_path"),jOe=o(":"),DOe=l(),A=a("ul"),kf=a("li"),Moe=a("strong"),GOe=o("albert"),OOe=o(" \u2014 "),dk=a("a"),VOe=o("AlbertConfig"),XOe=o(" (ALBERT model)"),zOe=l(),Sf=a("li"),Eoe=a("strong"),WOe=o("bart"),QOe=o(" \u2014 "),ck=a("a"),HOe=o("BartConfig"),UOe=o(" (BART model)"),JOe=l(),Rf=a("li"),Coe=a("strong"),YOe=o("beit"),KOe=o(" \u2014 "),fk=a("a"),ZOe=o("BeitConfig"),eVe=o(" (BEiT model)"),oVe=l(),Pf=a("li"),woe=a("strong"),rVe=o("bert"),tVe=o(" \u2014 "),mk=a("a"),aVe=o("BertConfig"),nVe=o(" (BERT model)"),sVe=l(),Bf=a("li"),Aoe=a("strong"),lVe=o("bert-generation"),iVe=o(" \u2014 "),gk=a("a"),dVe=o("BertGenerationConfig"),cVe=o(" (Bert Generation model)"),fVe=l(),If=a("li"),yoe=a("strong"),mVe=o("big_bird"),gVe=o(" \u2014 "),hk=a("a"),hVe=o("BigBirdConfig"),pVe=o(" (BigBird model)"),uVe=l(),qf=a("li"),Loe=a("strong"),_Ve=o("bigbird_pegasus"),bVe=o(" \u2014 "),pk=a("a"),vVe=o("BigBirdPegasusConfig"),FVe=o(" (BigBirdPegasus model)"),TVe=l(),Nf=a("li"),xoe=a("strong"),MVe=o("blenderbot"),EVe=o(" \u2014 "),uk=a("a"),CVe=o("BlenderbotConfig"),wVe=o(" (Blenderbot model)"),AVe=l(),jf=a("li"),$oe=a("strong"),yVe=o("blenderbot-small"),LVe=o(" \u2014 "),_k=a("a"),xVe=o("BlenderbotSmallConfig"),$Ve=o(" (BlenderbotSmall model)"),kVe=l(),Df=a("li"),koe=a("strong"),SVe=o("camembert"),RVe=o(" \u2014 "),bk=a("a"),PVe=o("CamembertConfig"),BVe=o(" (CamemBERT model)"),IVe=l(),Gf=a("li"),Soe=a("strong"),qVe=o("canine"),NVe=o(" \u2014 "),vk=a("a"),jVe=o("CanineConfig"),DVe=o(" (Canine model)"),GVe=l(),Of=a("li"),Roe=a("strong"),OVe=o("clip"),VVe=o(" \u2014 "),Fk=a("a"),XVe=o("CLIPConfig"),zVe=o(" (CLIP model)"),WVe=l(),Vf=a("li"),Poe=a("strong"),QVe=o("convbert"),HVe=o(" \u2014 "),Tk=a("a"),UVe=o("ConvBertConfig"),JVe=o(" (ConvBERT model)"),YVe=l(),Xf=a("li"),Boe=a("strong"),KVe=o("convnext"),ZVe=o(" \u2014 "),Mk=a("a"),eXe=o("ConvNextConfig"),oXe=o(" (ConvNext model)"),rXe=l(),zf=a("li"),Ioe=a("strong"),tXe=o("ctrl"),aXe=o(" \u2014 "),Ek=a("a"),nXe=o("CTRLConfig"),sXe=o(" (CTRL model)"),lXe=l(),Wf=a("li"),qoe=a("strong"),iXe=o("cvt"),dXe=o(" \u2014 "),Ck=a("a"),cXe=o("CvtConfig"),fXe=o(" (CvT model)"),mXe=l(),Qf=a("li"),Noe=a("strong"),gXe=o("data2vec-audio"),hXe=o(" \u2014 "),wk=a("a"),pXe=o("Data2VecAudioConfig"),uXe=o(" (Data2VecAudio model)"),_Xe=l(),Hf=a("li"),joe=a("strong"),bXe=o("data2vec-text"),vXe=o(" \u2014 "),Ak=a("a"),FXe=o("Data2VecTextConfig"),TXe=o(" (Data2VecText model)"),MXe=l(),Uf=a("li"),Doe=a("strong"),EXe=o("data2vec-vision"),CXe=o(" \u2014 "),yk=a("a"),wXe=o("Data2VecVisionConfig"),AXe=o(" (Data2VecVision model)"),yXe=l(),Jf=a("li"),Goe=a("strong"),LXe=o("deberta"),xXe=o(" \u2014 "),Lk=a("a"),$Xe=o("DebertaConfig"),kXe=o(" (DeBERTa model)"),SXe=l(),Yf=a("li"),Ooe=a("strong"),RXe=o("deberta-v2"),PXe=o(" \u2014 "),xk=a("a"),BXe=o("DebertaV2Config"),IXe=o(" (DeBERTa-v2 model)"),qXe=l(),Kf=a("li"),Voe=a("strong"),NXe=o("decision_transformer"),jXe=o(" \u2014 "),$k=a("a"),DXe=o("DecisionTransformerConfig"),GXe=o(" (Decision Transformer model)"),OXe=l(),Zf=a("li"),Xoe=a("strong"),VXe=o("deit"),XXe=o(" \u2014 "),kk=a("a"),zXe=o("DeiTConfig"),WXe=o(" (DeiT model)"),QXe=l(),em=a("li"),zoe=a("strong"),HXe=o("detr"),UXe=o(" \u2014 "),Sk=a("a"),JXe=o("DetrConfig"),YXe=o(" (DETR model)"),KXe=l(),om=a("li"),Woe=a("strong"),ZXe=o("distilbert"),eze=o(" \u2014 "),Rk=a("a"),oze=o("DistilBertConfig"),rze=o(" (DistilBERT model)"),tze=l(),rm=a("li"),Qoe=a("strong"),aze=o("dpr"),nze=o(" \u2014 "),Pk=a("a"),sze=o("DPRConfig"),lze=o(" (DPR model)"),ize=l(),tm=a("li"),Hoe=a("strong"),dze=o("dpt"),cze=o(" \u2014 "),Bk=a("a"),fze=o("DPTConfig"),mze=o(" (DPT model)"),gze=l(),am=a("li"),Uoe=a("strong"),hze=o("electra"),pze=o(" \u2014 "),Ik=a("a"),uze=o("ElectraConfig"),_ze=o(" (ELECTRA model)"),bze=l(),nm=a("li"),Joe=a("strong"),vze=o("encoder-decoder"),Fze=o(" \u2014 "),qk=a("a"),Tze=o("EncoderDecoderConfig"),Mze=o(" (Encoder decoder model)"),Eze=l(),sm=a("li"),Yoe=a("strong"),Cze=o("flaubert"),wze=o(" \u2014 "),Nk=a("a"),Aze=o("FlaubertConfig"),yze=o(" (FlauBERT model)"),Lze=l(),lm=a("li"),Koe=a("strong"),xze=o("flava"),$ze=o(" \u2014 "),jk=a("a"),kze=o("FlavaConfig"),Sze=o(" (Flava model)"),Rze=l(),im=a("li"),Zoe=a("strong"),Pze=o("fnet"),Bze=o(" \u2014 "),Dk=a("a"),Ize=o("FNetConfig"),qze=o(" (FNet model)"),Nze=l(),dm=a("li"),ere=a("strong"),jze=o("fsmt"),Dze=o(" \u2014 "),Gk=a("a"),Gze=o("FSMTConfig"),Oze=o(" (FairSeq Machine-Translation model)"),Vze=l(),cm=a("li"),ore=a("strong"),Xze=o("funnel"),zze=o(" \u2014 "),Ok=a("a"),Wze=o("FunnelConfig"),Qze=o(" (Funnel Transformer model)"),Hze=l(),fm=a("li"),rre=a("strong"),Uze=o("glpn"),Jze=o(" \u2014 "),Vk=a("a"),Yze=o("GLPNConfig"),Kze=o(" (GLPN model)"),Zze=l(),mm=a("li"),tre=a("strong"),eWe=o("gpt2"),oWe=o(" \u2014 "),Xk=a("a"),rWe=o("GPT2Config"),tWe=o(" (OpenAI GPT-2 model)"),aWe=l(),gm=a("li"),are=a("strong"),nWe=o("gpt_neo"),sWe=o(" \u2014 "),zk=a("a"),lWe=o("GPTNeoConfig"),iWe=o(" (GPT Neo model)"),dWe=l(),hm=a("li"),nre=a("strong"),cWe=o("gptj"),fWe=o(" \u2014 "),Wk=a("a"),mWe=o("GPTJConfig"),gWe=o(" (GPT-J model)"),hWe=l(),pm=a("li"),sre=a("strong"),pWe=o("hubert"),uWe=o(" \u2014 "),Qk=a("a"),_We=o("HubertConfig"),bWe=o(" (Hubert model)"),vWe=l(),um=a("li"),lre=a("strong"),FWe=o("ibert"),TWe=o(" \u2014 "),Hk=a("a"),MWe=o("IBertConfig"),EWe=o(" (I-BERT model)"),CWe=l(),_m=a("li"),ire=a("strong"),wWe=o("imagegpt"),AWe=o(" \u2014 "),Uk=a("a"),yWe=o("ImageGPTConfig"),LWe=o(" (ImageGPT model)"),xWe=l(),bm=a("li"),dre=a("strong"),$We=o("layoutlm"),kWe=o(" \u2014 "),Jk=a("a"),SWe=o("LayoutLMConfig"),RWe=o(" (LayoutLM model)"),PWe=l(),vm=a("li"),cre=a("strong"),BWe=o("layoutlmv2"),IWe=o(" \u2014 "),Yk=a("a"),qWe=o("LayoutLMv2Config"),NWe=o(" (LayoutLMv2 model)"),jWe=l(),Fm=a("li"),fre=a("strong"),DWe=o("led"),GWe=o(" \u2014 "),Kk=a("a"),OWe=o("LEDConfig"),VWe=o(" (LED model)"),XWe=l(),Tm=a("li"),mre=a("strong"),zWe=o("longformer"),WWe=o(" \u2014 "),Zk=a("a"),QWe=o("LongformerConfig"),HWe=o(" (Longformer model)"),UWe=l(),Mm=a("li"),gre=a("strong"),JWe=o("luke"),YWe=o(" \u2014 "),eS=a("a"),KWe=o("LukeConfig"),ZWe=o(" (LUKE model)"),eQe=l(),Em=a("li"),hre=a("strong"),oQe=o("lxmert"),rQe=o(" \u2014 "),oS=a("a"),tQe=o("LxmertConfig"),aQe=o(" (LXMERT model)"),nQe=l(),Cm=a("li"),pre=a("strong"),sQe=o("m2m_100"),lQe=o(" \u2014 "),rS=a("a"),iQe=o("M2M100Config"),dQe=o(" (M2M100 model)"),cQe=l(),wm=a("li"),ure=a("strong"),fQe=o("marian"),mQe=o(" \u2014 "),tS=a("a"),gQe=o("MarianConfig"),hQe=o(" (Marian model)"),pQe=l(),Am=a("li"),_re=a("strong"),uQe=o("maskformer"),_Qe=o(" \u2014 "),aS=a("a"),bQe=o("MaskFormerConfig"),vQe=o(" (MaskFormer model)"),FQe=l(),ym=a("li"),bre=a("strong"),TQe=o("mbart"),MQe=o(" \u2014 "),nS=a("a"),EQe=o("MBartConfig"),CQe=o(" (mBART model)"),wQe=l(),Lm=a("li"),vre=a("strong"),AQe=o("megatron-bert"),yQe=o(" \u2014 "),sS=a("a"),LQe=o("MegatronBertConfig"),xQe=o(" (MegatronBert model)"),$Qe=l(),xm=a("li"),Fre=a("strong"),kQe=o("mobilebert"),SQe=o(" \u2014 "),lS=a("a"),RQe=o("MobileBertConfig"),PQe=o(" (MobileBERT model)"),BQe=l(),$m=a("li"),Tre=a("strong"),IQe=o("mpnet"),qQe=o(" \u2014 "),iS=a("a"),NQe=o("MPNetConfig"),jQe=o(" (MPNet model)"),DQe=l(),km=a("li"),Mre=a("strong"),GQe=o("mt5"),OQe=o(" \u2014 "),dS=a("a"),VQe=o("MT5Config"),XQe=o(" (mT5 model)"),zQe=l(),Sm=a("li"),Ere=a("strong"),WQe=o("nystromformer"),QQe=o(" \u2014 "),cS=a("a"),HQe=o("NystromformerConfig"),UQe=o(" (Nystromformer model)"),JQe=l(),Rm=a("li"),Cre=a("strong"),YQe=o("openai-gpt"),KQe=o(" \u2014 "),fS=a("a"),ZQe=o("OpenAIGPTConfig"),eHe=o(" (OpenAI GPT model)"),oHe=l(),Pm=a("li"),wre=a("strong"),rHe=o("opt"),tHe=o(" \u2014 "),mS=a("a"),aHe=o("OPTConfig"),nHe=o(" (OPT model)"),sHe=l(),Bm=a("li"),Are=a("strong"),lHe=o("pegasus"),iHe=o(" \u2014 "),gS=a("a"),dHe=o("PegasusConfig"),cHe=o(" (Pegasus model)"),fHe=l(),Im=a("li"),yre=a("strong"),mHe=o("perceiver"),gHe=o(" \u2014 "),hS=a("a"),hHe=o("PerceiverConfig"),pHe=o(" (Perceiver model)"),uHe=l(),qm=a("li"),Lre=a("strong"),_He=o("plbart"),bHe=o(" \u2014 "),pS=a("a"),vHe=o("PLBartConfig"),FHe=o(" (PLBart model)"),THe=l(),Nm=a("li"),xre=a("strong"),MHe=o("poolformer"),EHe=o(" \u2014 "),uS=a("a"),CHe=o("PoolFormerConfig"),wHe=o(" (PoolFormer model)"),AHe=l(),jm=a("li"),$re=a("strong"),yHe=o("prophetnet"),LHe=o(" \u2014 "),_S=a("a"),xHe=o("ProphetNetConfig"),$He=o(" (ProphetNet model)"),kHe=l(),Dm=a("li"),kre=a("strong"),SHe=o("qdqbert"),RHe=o(" \u2014 "),bS=a("a"),PHe=o("QDQBertConfig"),BHe=o(" (QDQBert model)"),IHe=l(),Gm=a("li"),Sre=a("strong"),qHe=o("rag"),NHe=o(" \u2014 "),vS=a("a"),jHe=o("RagConfig"),DHe=o(" (RAG model)"),GHe=l(),Om=a("li"),Rre=a("strong"),OHe=o("realm"),VHe=o(" \u2014 "),FS=a("a"),XHe=o("RealmConfig"),zHe=o(" (Realm model)"),WHe=l(),Vm=a("li"),Pre=a("strong"),QHe=o("reformer"),HHe=o(" \u2014 "),TS=a("a"),UHe=o("ReformerConfig"),JHe=o(" (Reformer model)"),YHe=l(),Xm=a("li"),Bre=a("strong"),KHe=o("regnet"),ZHe=o(" \u2014 "),MS=a("a"),eUe=o("RegNetConfig"),oUe=o(" (RegNet model)"),rUe=l(),zm=a("li"),Ire=a("strong"),tUe=o("rembert"),aUe=o(" \u2014 "),ES=a("a"),nUe=o("RemBertConfig"),sUe=o(" (RemBERT model)"),lUe=l(),Wm=a("li"),qre=a("strong"),iUe=o("resnet"),dUe=o(" \u2014 "),CS=a("a"),cUe=o("ResNetConfig"),fUe=o(" (ResNet model)"),mUe=l(),Qm=a("li"),Nre=a("strong"),gUe=o("retribert"),hUe=o(" \u2014 "),wS=a("a"),pUe=o("RetriBertConfig"),uUe=o(" (RetriBERT model)"),_Ue=l(),Hm=a("li"),jre=a("strong"),bUe=o("roberta"),vUe=o(" \u2014 "),AS=a("a"),FUe=o("RobertaConfig"),TUe=o(" (RoBERTa model)"),MUe=l(),Um=a("li"),Dre=a("strong"),EUe=o("roformer"),CUe=o(" \u2014 "),yS=a("a"),wUe=o("RoFormerConfig"),AUe=o(" (RoFormer model)"),yUe=l(),Jm=a("li"),Gre=a("strong"),LUe=o("segformer"),xUe=o(" \u2014 "),LS=a("a"),$Ue=o("SegformerConfig"),kUe=o(" (SegFormer model)"),SUe=l(),Ym=a("li"),Ore=a("strong"),RUe=o("sew"),PUe=o(" \u2014 "),xS=a("a"),BUe=o("SEWConfig"),IUe=o(" (SEW model)"),qUe=l(),Km=a("li"),Vre=a("strong"),NUe=o("sew-d"),jUe=o(" \u2014 "),$S=a("a"),DUe=o("SEWDConfig"),GUe=o(" (SEW-D model)"),OUe=l(),Zm=a("li"),Xre=a("strong"),VUe=o("speech-encoder-decoder"),XUe=o(" \u2014 "),kS=a("a"),zUe=o("SpeechEncoderDecoderConfig"),WUe=o(" (Speech Encoder decoder model)"),QUe=l(),eg=a("li"),zre=a("strong"),HUe=o("speech_to_text"),UUe=o(" \u2014 "),SS=a("a"),JUe=o("Speech2TextConfig"),YUe=o(" (Speech2Text model)"),KUe=l(),og=a("li"),Wre=a("strong"),ZUe=o("speech_to_text_2"),eJe=o(" \u2014 "),RS=a("a"),oJe=o("Speech2Text2Config"),rJe=o(" (Speech2Text2 model)"),tJe=l(),rg=a("li"),Qre=a("strong"),aJe=o("splinter"),nJe=o(" \u2014 "),PS=a("a"),sJe=o("SplinterConfig"),lJe=o(" (Splinter model)"),iJe=l(),tg=a("li"),Hre=a("strong"),dJe=o("squeezebert"),cJe=o(" \u2014 "),BS=a("a"),fJe=o("SqueezeBertConfig"),mJe=o(" (SqueezeBERT model)"),gJe=l(),ag=a("li"),Ure=a("strong"),hJe=o("swin"),pJe=o(" \u2014 "),IS=a("a"),uJe=o("SwinConfig"),_Je=o(" (Swin model)"),bJe=l(),ng=a("li"),Jre=a("strong"),vJe=o("t5"),FJe=o(" \u2014 "),qS=a("a"),TJe=o("T5Config"),MJe=o(" (T5 model)"),EJe=l(),sg=a("li"),Yre=a("strong"),CJe=o("tapas"),wJe=o(" \u2014 "),NS=a("a"),AJe=o("TapasConfig"),yJe=o(" (TAPAS model)"),LJe=l(),lg=a("li"),Kre=a("strong"),xJe=o("trajectory_transformer"),$Je=o(" \u2014 "),jS=a("a"),kJe=o("TrajectoryTransformerConfig"),SJe=o(" (Trajectory Transformer model)"),RJe=l(),ig=a("li"),Zre=a("strong"),PJe=o("transfo-xl"),BJe=o(" \u2014 "),DS=a("a"),IJe=o("TransfoXLConfig"),qJe=o(" (Transformer-XL model)"),NJe=l(),dg=a("li"),ete=a("strong"),jJe=o("trocr"),DJe=o(" \u2014 "),GS=a("a"),GJe=o("TrOCRConfig"),OJe=o(" (TrOCR model)"),VJe=l(),cg=a("li"),ote=a("strong"),XJe=o("unispeech"),zJe=o(" \u2014 "),OS=a("a"),WJe=o("UniSpeechConfig"),QJe=o(" (UniSpeech model)"),HJe=l(),fg=a("li"),rte=a("strong"),UJe=o("unispeech-sat"),JJe=o(" \u2014 "),VS=a("a"),YJe=o("UniSpeechSatConfig"),KJe=o(" (UniSpeechSat model)"),ZJe=l(),mg=a("li"),tte=a("strong"),eYe=o("van"),oYe=o(" \u2014 "),XS=a("a"),rYe=o("VanConfig"),tYe=o(" (VAN model)"),aYe=l(),gg=a("li"),ate=a("strong"),nYe=o("vilt"),sYe=o(" \u2014 "),zS=a("a"),lYe=o("ViltConfig"),iYe=o(" (ViLT model)"),dYe=l(),hg=a("li"),nte=a("strong"),cYe=o("vision-encoder-decoder"),fYe=o(" \u2014 "),WS=a("a"),mYe=o("VisionEncoderDecoderConfig"),gYe=o(" (Vision Encoder decoder model)"),hYe=l(),pg=a("li"),ste=a("strong"),pYe=o("vision-text-dual-encoder"),uYe=o(" \u2014 "),QS=a("a"),_Ye=o("VisionTextDualEncoderConfig"),bYe=o(" (VisionTextDualEncoder model)"),vYe=l(),ug=a("li"),lte=a("strong"),FYe=o("visual_bert"),TYe=o(" \u2014 "),HS=a("a"),MYe=o("VisualBertConfig"),EYe=o(" (VisualBert model)"),CYe=l(),_g=a("li"),ite=a("strong"),wYe=o("vit"),AYe=o(" \u2014 "),US=a("a"),yYe=o("ViTConfig"),LYe=o(" (ViT model)"),xYe=l(),bg=a("li"),dte=a("strong"),$Ye=o("vit_mae"),kYe=o(" \u2014 "),JS=a("a"),SYe=o("ViTMAEConfig"),RYe=o(" (ViTMAE model)"),PYe=l(),vg=a("li"),cte=a("strong"),BYe=o("wav2vec2"),IYe=o(" \u2014 "),YS=a("a"),qYe=o("Wav2Vec2Config"),NYe=o(" (Wav2Vec2 model)"),jYe=l(),Fg=a("li"),fte=a("strong"),DYe=o("wav2vec2-conformer"),GYe=o(" \u2014 "),KS=a("a"),OYe=o("Wav2Vec2ConformerConfig"),VYe=o(" (Wav2Vec2-Conformer model)"),XYe=l(),Tg=a("li"),mte=a("strong"),zYe=o("wavlm"),WYe=o(" \u2014 "),ZS=a("a"),QYe=o("WavLMConfig"),HYe=o(" (WavLM model)"),UYe=l(),Mg=a("li"),gte=a("strong"),JYe=o("xglm"),YYe=o(" \u2014 "),eR=a("a"),KYe=o("XGLMConfig"),ZYe=o(" (XGLM model)"),eKe=l(),Eg=a("li"),hte=a("strong"),oKe=o("xlm"),rKe=o(" \u2014 "),oR=a("a"),tKe=o("XLMConfig"),aKe=o(" (XLM model)"),nKe=l(),Cg=a("li"),pte=a("strong"),sKe=o("xlm-prophetnet"),lKe=o(" \u2014 "),rR=a("a"),iKe=o("XLMProphetNetConfig"),dKe=o(" (XLMProphetNet model)"),cKe=l(),wg=a("li"),ute=a("strong"),fKe=o("xlm-roberta"),mKe=o(" \u2014 "),tR=a("a"),gKe=o("XLMRobertaConfig"),hKe=o(" (XLM-RoBERTa model)"),pKe=l(),Ag=a("li"),_te=a("strong"),uKe=o("xlm-roberta-xl"),_Ke=o(" \u2014 "),aR=a("a"),bKe=o("XLMRobertaXLConfig"),vKe=o(" (XLM-RoBERTa-XL model)"),FKe=l(),yg=a("li"),bte=a("strong"),TKe=o("xlnet"),MKe=o(" \u2014 "),nR=a("a"),EKe=o("XLNetConfig"),CKe=o(" (XLNet model)"),wKe=l(),Lg=a("li"),vte=a("strong"),AKe=o("yolos"),yKe=o(" \u2014 "),sR=a("a"),LKe=o("YolosConfig"),xKe=o(" (YOLOS model)"),$Ke=l(),xg=a("li"),Fte=a("strong"),kKe=o("yoso"),SKe=o(" \u2014 "),lR=a("a"),RKe=o("YosoConfig"),PKe=o(" (YOSO model)"),BKe=l(),F($g.$$.fragment),IKe=l(),kg=a("div"),F(D0.$$.fragment),qKe=l(),Tte=a("p"),NKe=o("Register a new configuration for this class."),aNe=l(),yi=a("h2"),Sg=a("a"),Mte=a("span"),F(G0.$$.fragment),jKe=l(),Ete=a("span"),DKe=o("AutoTokenizer"),nNe=l(),Ao=a("div"),F(O0.$$.fragment),GKe=l(),V0=a("p"),OKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iR=a("a"),VKe=o("AutoTokenizer.from_pretrained()"),XKe=o(" class method."),zKe=l(),X0=a("p"),WKe=o("This class cannot be instantiated directly using "),Cte=a("code"),QKe=o("__init__()"),HKe=o(" (throws an error)."),UKe=l(),Ar=a("div"),F(z0.$$.fragment),JKe=l(),wte=a("p"),YKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KKe=l(),$a=a("p"),ZKe=o("The tokenizer class to instantiate is selected based on the "),Ate=a("code"),eZe=o("model_type"),oZe=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),rZe=o("pretrained_model_name_or_path"),tZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=a("code"),aZe=o("pretrained_model_name_or_path"),nZe=o(":"),sZe=l(),k=a("ul"),qn=a("li"),xte=a("strong"),lZe=o("albert"),iZe=o(" \u2014 "),dR=a("a"),dZe=o("AlbertTokenizer"),cZe=o(" or "),cR=a("a"),fZe=o("AlbertTokenizerFast"),mZe=o(" (ALBERT model)"),gZe=l(),Nn=a("li"),$te=a("strong"),hZe=o("bart"),pZe=o(" \u2014 "),fR=a("a"),uZe=o("BartTokenizer"),_Ze=o(" or "),mR=a("a"),bZe=o("BartTokenizerFast"),vZe=o(" (BART model)"),FZe=l(),jn=a("li"),kte=a("strong"),TZe=o("barthez"),MZe=o(" \u2014 "),gR=a("a"),EZe=o("BarthezTokenizer"),CZe=o(" or "),hR=a("a"),wZe=o("BarthezTokenizerFast"),AZe=o(" (BARThez model)"),yZe=l(),Rg=a("li"),Ste=a("strong"),LZe=o("bartpho"),xZe=o(" \u2014 "),pR=a("a"),$Ze=o("BartphoTokenizer"),kZe=o(" (BARTpho model)"),SZe=l(),Dn=a("li"),Rte=a("strong"),RZe=o("bert"),PZe=o(" \u2014 "),uR=a("a"),BZe=o("BertTokenizer"),IZe=o(" or "),_R=a("a"),qZe=o("BertTokenizerFast"),NZe=o(" (BERT model)"),jZe=l(),Pg=a("li"),Pte=a("strong"),DZe=o("bert-generation"),GZe=o(" \u2014 "),bR=a("a"),OZe=o("BertGenerationTokenizer"),VZe=o(" (Bert Generation model)"),XZe=l(),Bg=a("li"),Bte=a("strong"),zZe=o("bert-japanese"),WZe=o(" \u2014 "),vR=a("a"),QZe=o("BertJapaneseTokenizer"),HZe=o(" (BertJapanese model)"),UZe=l(),Ig=a("li"),Ite=a("strong"),JZe=o("bertweet"),YZe=o(" \u2014 "),FR=a("a"),KZe=o("BertweetTokenizer"),ZZe=o(" (Bertweet model)"),eeo=l(),Gn=a("li"),qte=a("strong"),oeo=o("big_bird"),reo=o(" \u2014 "),TR=a("a"),teo=o("BigBirdTokenizer"),aeo=o(" or "),MR=a("a"),neo=o("BigBirdTokenizerFast"),seo=o(" (BigBird model)"),leo=l(),On=a("li"),Nte=a("strong"),ieo=o("bigbird_pegasus"),deo=o(" \u2014 "),ER=a("a"),ceo=o("PegasusTokenizer"),feo=o(" or "),CR=a("a"),meo=o("PegasusTokenizerFast"),geo=o(" (BigBirdPegasus model)"),heo=l(),Vn=a("li"),jte=a("strong"),peo=o("blenderbot"),ueo=o(" \u2014 "),wR=a("a"),_eo=o("BlenderbotTokenizer"),beo=o(" or "),AR=a("a"),veo=o("BlenderbotTokenizerFast"),Feo=o(" (Blenderbot model)"),Teo=l(),qg=a("li"),Dte=a("strong"),Meo=o("blenderbot-small"),Eeo=o(" \u2014 "),yR=a("a"),Ceo=o("BlenderbotSmallTokenizer"),weo=o(" (BlenderbotSmall model)"),Aeo=l(),Ng=a("li"),Gte=a("strong"),yeo=o("byt5"),Leo=o(" \u2014 "),LR=a("a"),xeo=o("ByT5Tokenizer"),$eo=o(" (ByT5 model)"),keo=l(),Xn=a("li"),Ote=a("strong"),Seo=o("camembert"),Reo=o(" \u2014 "),xR=a("a"),Peo=o("CamembertTokenizer"),Beo=o(" or "),$R=a("a"),Ieo=o("CamembertTokenizerFast"),qeo=o(" (CamemBERT model)"),Neo=l(),jg=a("li"),Vte=a("strong"),jeo=o("canine"),Deo=o(" \u2014 "),kR=a("a"),Geo=o("CanineTokenizer"),Oeo=o(" (Canine model)"),Veo=l(),zn=a("li"),Xte=a("strong"),Xeo=o("clip"),zeo=o(" \u2014 "),SR=a("a"),Weo=o("CLIPTokenizer"),Qeo=o(" or "),RR=a("a"),Heo=o("CLIPTokenizerFast"),Ueo=o(" (CLIP model)"),Jeo=l(),Wn=a("li"),zte=a("strong"),Yeo=o("convbert"),Keo=o(" \u2014 "),PR=a("a"),Zeo=o("ConvBertTokenizer"),eoo=o(" or "),BR=a("a"),ooo=o("ConvBertTokenizerFast"),roo=o(" (ConvBERT model)"),too=l(),Qn=a("li"),Wte=a("strong"),aoo=o("cpm"),noo=o(" \u2014 "),IR=a("a"),soo=o("CpmTokenizer"),loo=o(" or "),qR=a("a"),ioo=o("CpmTokenizerFast"),doo=o(" (CPM model)"),coo=l(),Dg=a("li"),Qte=a("strong"),foo=o("ctrl"),moo=o(" \u2014 "),NR=a("a"),goo=o("CTRLTokenizer"),hoo=o(" (CTRL model)"),poo=l(),Hn=a("li"),Hte=a("strong"),uoo=o("data2vec-text"),_oo=o(" \u2014 "),jR=a("a"),boo=o("RobertaTokenizer"),voo=o(" or "),DR=a("a"),Foo=o("RobertaTokenizerFast"),Too=o(" (Data2VecText model)"),Moo=l(),Un=a("li"),Ute=a("strong"),Eoo=o("deberta"),Coo=o(" \u2014 "),GR=a("a"),woo=o("DebertaTokenizer"),Aoo=o(" or "),OR=a("a"),yoo=o("DebertaTokenizerFast"),Loo=o(" (DeBERTa model)"),xoo=l(),Jn=a("li"),Jte=a("strong"),$oo=o("deberta-v2"),koo=o(" \u2014 "),VR=a("a"),Soo=o("DebertaV2Tokenizer"),Roo=o(" or "),XR=a("a"),Poo=o("DebertaV2TokenizerFast"),Boo=o(" (DeBERTa-v2 model)"),Ioo=l(),Yn=a("li"),Yte=a("strong"),qoo=o("distilbert"),Noo=o(" \u2014 "),zR=a("a"),joo=o("DistilBertTokenizer"),Doo=o(" or "),WR=a("a"),Goo=o("DistilBertTokenizerFast"),Ooo=o(" (DistilBERT model)"),Voo=l(),Kn=a("li"),Kte=a("strong"),Xoo=o("dpr"),zoo=o(" \u2014 "),QR=a("a"),Woo=o("DPRQuestionEncoderTokenizer"),Qoo=o(" or "),HR=a("a"),Hoo=o("DPRQuestionEncoderTokenizerFast"),Uoo=o(" (DPR model)"),Joo=l(),Zn=a("li"),Zte=a("strong"),Yoo=o("electra"),Koo=o(" \u2014 "),UR=a("a"),Zoo=o("ElectraTokenizer"),ero=o(" or "),JR=a("a"),oro=o("ElectraTokenizerFast"),rro=o(" (ELECTRA model)"),tro=l(),Gg=a("li"),eae=a("strong"),aro=o("flaubert"),nro=o(" \u2014 "),YR=a("a"),sro=o("FlaubertTokenizer"),lro=o(" (FlauBERT model)"),iro=l(),es=a("li"),oae=a("strong"),dro=o("fnet"),cro=o(" \u2014 "),KR=a("a"),fro=o("FNetTokenizer"),mro=o(" or "),ZR=a("a"),gro=o("FNetTokenizerFast"),hro=o(" (FNet model)"),pro=l(),Og=a("li"),rae=a("strong"),uro=o("fsmt"),_ro=o(" \u2014 "),eP=a("a"),bro=o("FSMTTokenizer"),vro=o(" (FairSeq Machine-Translation model)"),Fro=l(),os=a("li"),tae=a("strong"),Tro=o("funnel"),Mro=o(" \u2014 "),oP=a("a"),Ero=o("FunnelTokenizer"),Cro=o(" or "),rP=a("a"),wro=o("FunnelTokenizerFast"),Aro=o(" (Funnel Transformer model)"),yro=l(),rs=a("li"),aae=a("strong"),Lro=o("gpt2"),xro=o(" \u2014 "),tP=a("a"),$ro=o("GPT2Tokenizer"),kro=o(" or "),aP=a("a"),Sro=o("GPT2TokenizerFast"),Rro=o(" (OpenAI GPT-2 model)"),Pro=l(),ts=a("li"),nae=a("strong"),Bro=o("gpt_neo"),Iro=o(" \u2014 "),nP=a("a"),qro=o("GPT2Tokenizer"),Nro=o(" or "),sP=a("a"),jro=o("GPT2TokenizerFast"),Dro=o(" (GPT Neo model)"),Gro=l(),as=a("li"),sae=a("strong"),Oro=o("gptj"),Vro=o(" \u2014 "),lP=a("a"),Xro=o("GPT2Tokenizer"),zro=o(" or "),iP=a("a"),Wro=o("GPT2TokenizerFast"),Qro=o(" (GPT-J model)"),Hro=l(),ns=a("li"),lae=a("strong"),Uro=o("herbert"),Jro=o(" \u2014 "),dP=a("a"),Yro=o("HerbertTokenizer"),Kro=o(" or "),cP=a("a"),Zro=o("HerbertTokenizerFast"),eto=o(" (HerBERT model)"),oto=l(),Vg=a("li"),iae=a("strong"),rto=o("hubert"),tto=o(" \u2014 "),fP=a("a"),ato=o("Wav2Vec2CTCTokenizer"),nto=o(" (Hubert model)"),sto=l(),ss=a("li"),dae=a("strong"),lto=o("ibert"),ito=o(" \u2014 "),mP=a("a"),dto=o("RobertaTokenizer"),cto=o(" or "),gP=a("a"),fto=o("RobertaTokenizerFast"),mto=o(" (I-BERT model)"),gto=l(),ls=a("li"),cae=a("strong"),hto=o("layoutlm"),pto=o(" \u2014 "),hP=a("a"),uto=o("LayoutLMTokenizer"),_to=o(" or "),pP=a("a"),bto=o("LayoutLMTokenizerFast"),vto=o(" (LayoutLM model)"),Fto=l(),is=a("li"),fae=a("strong"),Tto=o("layoutlmv2"),Mto=o(" \u2014 "),uP=a("a"),Eto=o("LayoutLMv2Tokenizer"),Cto=o(" or "),_P=a("a"),wto=o("LayoutLMv2TokenizerFast"),Ato=o(" (LayoutLMv2 model)"),yto=l(),ds=a("li"),mae=a("strong"),Lto=o("layoutxlm"),xto=o(" \u2014 "),bP=a("a"),$to=o("LayoutXLMTokenizer"),kto=o(" or "),vP=a("a"),Sto=o("LayoutXLMTokenizerFast"),Rto=o(" (LayoutXLM model)"),Pto=l(),cs=a("li"),gae=a("strong"),Bto=o("led"),Ito=o(" \u2014 "),FP=a("a"),qto=o("LEDTokenizer"),Nto=o(" or "),TP=a("a"),jto=o("LEDTokenizerFast"),Dto=o(" (LED model)"),Gto=l(),fs=a("li"),hae=a("strong"),Oto=o("longformer"),Vto=o(" \u2014 "),MP=a("a"),Xto=o("LongformerTokenizer"),zto=o(" or "),EP=a("a"),Wto=o("LongformerTokenizerFast"),Qto=o(" (Longformer model)"),Hto=l(),Xg=a("li"),pae=a("strong"),Uto=o("luke"),Jto=o(" \u2014 "),CP=a("a"),Yto=o("LukeTokenizer"),Kto=o(" (LUKE model)"),Zto=l(),ms=a("li"),uae=a("strong"),eao=o("lxmert"),oao=o(" \u2014 "),wP=a("a"),rao=o("LxmertTokenizer"),tao=o(" or "),AP=a("a"),aao=o("LxmertTokenizerFast"),nao=o(" (LXMERT model)"),sao=l(),zg=a("li"),_ae=a("strong"),lao=o("m2m_100"),iao=o(" \u2014 "),yP=a("a"),dao=o("M2M100Tokenizer"),cao=o(" (M2M100 model)"),fao=l(),Wg=a("li"),bae=a("strong"),mao=o("marian"),gao=o(" \u2014 "),LP=a("a"),hao=o("MarianTokenizer"),pao=o(" (Marian model)"),uao=l(),gs=a("li"),vae=a("strong"),_ao=o("mbart"),bao=o(" \u2014 "),xP=a("a"),vao=o("MBartTokenizer"),Fao=o(" or "),$P=a("a"),Tao=o("MBartTokenizerFast"),Mao=o(" (mBART model)"),Eao=l(),hs=a("li"),Fae=a("strong"),Cao=o("mbart50"),wao=o(" \u2014 "),kP=a("a"),Aao=o("MBart50Tokenizer"),yao=o(" or "),SP=a("a"),Lao=o("MBart50TokenizerFast"),xao=o(" (mBART-50 model)"),$ao=l(),ps=a("li"),Tae=a("strong"),kao=o("megatron-bert"),Sao=o(" \u2014 "),RP=a("a"),Rao=o("BertTokenizer"),Pao=o(" or "),PP=a("a"),Bao=o("BertTokenizerFast"),Iao=o(" (MegatronBert model)"),qao=l(),Qg=a("li"),Mae=a("strong"),Nao=o("mluke"),jao=o(" \u2014 "),BP=a("a"),Dao=o("MLukeTokenizer"),Gao=o(" (mLUKE model)"),Oao=l(),us=a("li"),Eae=a("strong"),Vao=o("mobilebert"),Xao=o(" \u2014 "),IP=a("a"),zao=o("MobileBertTokenizer"),Wao=o(" or "),qP=a("a"),Qao=o("MobileBertTokenizerFast"),Hao=o(" (MobileBERT model)"),Uao=l(),_s=a("li"),Cae=a("strong"),Jao=o("mpnet"),Yao=o(" \u2014 "),NP=a("a"),Kao=o("MPNetTokenizer"),Zao=o(" or "),jP=a("a"),eno=o("MPNetTokenizerFast"),ono=o(" (MPNet model)"),rno=l(),bs=a("li"),wae=a("strong"),tno=o("mt5"),ano=o(" \u2014 "),DP=a("a"),nno=o("MT5Tokenizer"),sno=o(" or "),GP=a("a"),lno=o("MT5TokenizerFast"),ino=o(" (mT5 model)"),dno=l(),vs=a("li"),Aae=a("strong"),cno=o("nystromformer"),fno=o(" \u2014 "),OP=a("a"),mno=o("AlbertTokenizer"),gno=o(" or "),VP=a("a"),hno=o("AlbertTokenizerFast"),pno=o(" (Nystromformer model)"),uno=l(),Fs=a("li"),yae=a("strong"),_no=o("openai-gpt"),bno=o(" \u2014 "),XP=a("a"),vno=o("OpenAIGPTTokenizer"),Fno=o(" or "),zP=a("a"),Tno=o("OpenAIGPTTokenizerFast"),Mno=o(" (OpenAI GPT model)"),Eno=l(),Hg=a("li"),Lae=a("strong"),Cno=o("opt"),wno=o(" \u2014 "),WP=a("a"),Ano=o("GPT2Tokenizer"),yno=o(" (OPT model)"),Lno=l(),Ts=a("li"),xae=a("strong"),xno=o("pegasus"),$no=o(" \u2014 "),QP=a("a"),kno=o("PegasusTokenizer"),Sno=o(" or "),HP=a("a"),Rno=o("PegasusTokenizerFast"),Pno=o(" (Pegasus model)"),Bno=l(),Ug=a("li"),$ae=a("strong"),Ino=o("perceiver"),qno=o(" \u2014 "),UP=a("a"),Nno=o("PerceiverTokenizer"),jno=o(" (Perceiver model)"),Dno=l(),Jg=a("li"),kae=a("strong"),Gno=o("phobert"),Ono=o(" \u2014 "),JP=a("a"),Vno=o("PhobertTokenizer"),Xno=o(" (PhoBERT model)"),zno=l(),Yg=a("li"),Sae=a("strong"),Wno=o("plbart"),Qno=o(" \u2014 "),YP=a("a"),Hno=o("PLBartTokenizer"),Uno=o(" (PLBart model)"),Jno=l(),Kg=a("li"),Rae=a("strong"),Yno=o("prophetnet"),Kno=o(" \u2014 "),KP=a("a"),Zno=o("ProphetNetTokenizer"),eso=o(" (ProphetNet model)"),oso=l(),Ms=a("li"),Pae=a("strong"),rso=o("qdqbert"),tso=o(" \u2014 "),ZP=a("a"),aso=o("BertTokenizer"),nso=o(" or "),eB=a("a"),sso=o("BertTokenizerFast"),lso=o(" (QDQBert model)"),iso=l(),Zg=a("li"),Bae=a("strong"),dso=o("rag"),cso=o(" \u2014 "),oB=a("a"),fso=o("RagTokenizer"),mso=o(" (RAG model)"),gso=l(),Es=a("li"),Iae=a("strong"),hso=o("realm"),pso=o(" \u2014 "),rB=a("a"),uso=o("RealmTokenizer"),_so=o(" or "),tB=a("a"),bso=o("RealmTokenizerFast"),vso=o(" (Realm model)"),Fso=l(),Cs=a("li"),qae=a("strong"),Tso=o("reformer"),Mso=o(" \u2014 "),aB=a("a"),Eso=o("ReformerTokenizer"),Cso=o(" or "),nB=a("a"),wso=o("ReformerTokenizerFast"),Aso=o(" (Reformer model)"),yso=l(),ws=a("li"),Nae=a("strong"),Lso=o("rembert"),xso=o(" \u2014 "),sB=a("a"),$so=o("RemBertTokenizer"),kso=o(" or "),lB=a("a"),Sso=o("RemBertTokenizerFast"),Rso=o(" (RemBERT model)"),Pso=l(),As=a("li"),jae=a("strong"),Bso=o("retribert"),Iso=o(" \u2014 "),iB=a("a"),qso=o("RetriBertTokenizer"),Nso=o(" or "),dB=a("a"),jso=o("RetriBertTokenizerFast"),Dso=o(" (RetriBERT model)"),Gso=l(),ys=a("li"),Dae=a("strong"),Oso=o("roberta"),Vso=o(" \u2014 "),cB=a("a"),Xso=o("RobertaTokenizer"),zso=o(" or "),fB=a("a"),Wso=o("RobertaTokenizerFast"),Qso=o(" (RoBERTa model)"),Hso=l(),Ls=a("li"),Gae=a("strong"),Uso=o("roformer"),Jso=o(" \u2014 "),mB=a("a"),Yso=o("RoFormerTokenizer"),Kso=o(" or "),gB=a("a"),Zso=o("RoFormerTokenizerFast"),elo=o(" (RoFormer model)"),olo=l(),eh=a("li"),Oae=a("strong"),rlo=o("speech_to_text"),tlo=o(" \u2014 "),hB=a("a"),alo=o("Speech2TextTokenizer"),nlo=o(" (Speech2Text model)"),slo=l(),oh=a("li"),Vae=a("strong"),llo=o("speech_to_text_2"),ilo=o(" \u2014 "),pB=a("a"),dlo=o("Speech2Text2Tokenizer"),clo=o(" (Speech2Text2 model)"),flo=l(),xs=a("li"),Xae=a("strong"),mlo=o("splinter"),glo=o(" \u2014 "),uB=a("a"),hlo=o("SplinterTokenizer"),plo=o(" or "),_B=a("a"),ulo=o("SplinterTokenizerFast"),_lo=o(" (Splinter model)"),blo=l(),$s=a("li"),zae=a("strong"),vlo=o("squeezebert"),Flo=o(" \u2014 "),bB=a("a"),Tlo=o("SqueezeBertTokenizer"),Mlo=o(" or "),vB=a("a"),Elo=o("SqueezeBertTokenizerFast"),Clo=o(" (SqueezeBERT model)"),wlo=l(),ks=a("li"),Wae=a("strong"),Alo=o("t5"),ylo=o(" \u2014 "),FB=a("a"),Llo=o("T5Tokenizer"),xlo=o(" or "),TB=a("a"),$lo=o("T5TokenizerFast"),klo=o(" (T5 model)"),Slo=l(),rh=a("li"),Qae=a("strong"),Rlo=o("tapas"),Plo=o(" \u2014 "),MB=a("a"),Blo=o("TapasTokenizer"),Ilo=o(" (TAPAS model)"),qlo=l(),th=a("li"),Hae=a("strong"),Nlo=o("tapex"),jlo=o(" \u2014 "),EB=a("a"),Dlo=o("TapexTokenizer"),Glo=o(" (TAPEX model)"),Olo=l(),ah=a("li"),Uae=a("strong"),Vlo=o("transfo-xl"),Xlo=o(" \u2014 "),CB=a("a"),zlo=o("TransfoXLTokenizer"),Wlo=o(" (Transformer-XL model)"),Qlo=l(),Ss=a("li"),Jae=a("strong"),Hlo=o("vilt"),Ulo=o(" \u2014 "),wB=a("a"),Jlo=o("BertTokenizer"),Ylo=o(" or "),AB=a("a"),Klo=o("BertTokenizerFast"),Zlo=o(" (ViLT model)"),eio=l(),Rs=a("li"),Yae=a("strong"),oio=o("visual_bert"),rio=o(" \u2014 "),yB=a("a"),tio=o("BertTokenizer"),aio=o(" or "),LB=a("a"),nio=o("BertTokenizerFast"),sio=o(" (VisualBert model)"),lio=l(),nh=a("li"),Kae=a("strong"),iio=o("wav2vec2"),dio=o(" \u2014 "),xB=a("a"),cio=o("Wav2Vec2CTCTokenizer"),fio=o(" (Wav2Vec2 model)"),mio=l(),sh=a("li"),Zae=a("strong"),gio=o("wav2vec2-conformer"),hio=o(" \u2014 "),$B=a("a"),pio=o("Wav2Vec2CTCTokenizer"),uio=o(" (Wav2Vec2-Conformer model)"),_io=l(),lh=a("li"),ene=a("strong"),bio=o("wav2vec2_phoneme"),vio=o(" \u2014 "),kB=a("a"),Fio=o("Wav2Vec2PhonemeCTCTokenizer"),Tio=o(" (Wav2Vec2Phoneme model)"),Mio=l(),Ps=a("li"),one=a("strong"),Eio=o("xglm"),Cio=o(" \u2014 "),SB=a("a"),wio=o("XGLMTokenizer"),Aio=o(" or "),RB=a("a"),yio=o("XGLMTokenizerFast"),Lio=o(" (XGLM model)"),xio=l(),ih=a("li"),rne=a("strong"),$io=o("xlm"),kio=o(" \u2014 "),PB=a("a"),Sio=o("XLMTokenizer"),Rio=o(" (XLM model)"),Pio=l(),dh=a("li"),tne=a("strong"),Bio=o("xlm-prophetnet"),Iio=o(" \u2014 "),BB=a("a"),qio=o("XLMProphetNetTokenizer"),Nio=o(" (XLMProphetNet model)"),jio=l(),Bs=a("li"),ane=a("strong"),Dio=o("xlm-roberta"),Gio=o(" \u2014 "),IB=a("a"),Oio=o("XLMRobertaTokenizer"),Vio=o(" or "),qB=a("a"),Xio=o("XLMRobertaTokenizerFast"),zio=o(" (XLM-RoBERTa model)"),Wio=l(),Is=a("li"),nne=a("strong"),Qio=o("xlm-roberta-xl"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("RobertaTokenizer"),Jio=o(" or "),jB=a("a"),Yio=o("RobertaTokenizerFast"),Kio=o(" (XLM-RoBERTa-XL model)"),Zio=l(),qs=a("li"),sne=a("strong"),edo=o("xlnet"),odo=o(" \u2014 "),DB=a("a"),rdo=o("XLNetTokenizer"),tdo=o(" or "),GB=a("a"),ado=o("XLNetTokenizerFast"),ndo=o(" (XLNet model)"),sdo=l(),Ns=a("li"),lne=a("strong"),ldo=o("yoso"),ido=o(" \u2014 "),OB=a("a"),ddo=o("AlbertTokenizer"),cdo=o(" or "),VB=a("a"),fdo=o("AlbertTokenizerFast"),mdo=o(" (YOSO model)"),gdo=l(),F(ch.$$.fragment),hdo=l(),fh=a("div"),F(W0.$$.fragment),pdo=l(),ine=a("p"),udo=o("Register a new tokenizer in this mapping."),sNe=l(),Li=a("h2"),mh=a("a"),dne=a("span"),F(Q0.$$.fragment),_do=l(),cne=a("span"),bdo=o("AutoFeatureExtractor"),lNe=l(),yo=a("div"),F(H0.$$.fragment),vdo=l(),U0=a("p"),Fdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XB=a("a"),Tdo=o("AutoFeatureExtractor.from_pretrained()"),Mdo=o(" class method."),Edo=l(),J0=a("p"),Cdo=o("This class cannot be instantiated directly using "),fne=a("code"),wdo=o("__init__()"),Ado=o(" (throws an error)."),ydo=l(),He=a("div"),F(Y0.$$.fragment),Ldo=l(),mne=a("p"),xdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$do=l(),ka=a("p"),kdo=o("The feature extractor class to instantiate is selected based on the "),gne=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object
(either passed as an argument or loaded from `),hne=a("code"),Pdo=o("pretrained_model_name_or_path"),Bdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pne=a("code"),Ido=o("pretrained_model_name_or_path"),qdo=o(":"),Ndo=l(),K=a("ul"),gh=a("li"),une=a("strong"),jdo=o("beit"),Ddo=o(" \u2014 "),zB=a("a"),Gdo=o("BeitFeatureExtractor"),Odo=o(" (BEiT model)"),Vdo=l(),hh=a("li"),_ne=a("strong"),Xdo=o("clip"),zdo=o(" \u2014 "),WB=a("a"),Wdo=o("CLIPFeatureExtractor"),Qdo=o(" (CLIP model)"),Hdo=l(),ph=a("li"),bne=a("strong"),Udo=o("convnext"),Jdo=o(" \u2014 "),QB=a("a"),Ydo=o("ConvNextFeatureExtractor"),Kdo=o(" (ConvNext model)"),Zdo=l(),uh=a("li"),vne=a("strong"),eco=o("cvt"),oco=o(" \u2014 "),HB=a("a"),rco=o("ConvNextFeatureExtractor"),tco=o(" (CvT model)"),aco=l(),_h=a("li"),Fne=a("strong"),nco=o("data2vec-audio"),sco=o(" \u2014 "),UB=a("a"),lco=o("Wav2Vec2FeatureExtractor"),ico=o(" (Data2VecAudio model)"),dco=l(),bh=a("li"),Tne=a("strong"),cco=o("data2vec-vision"),fco=o(" \u2014 "),JB=a("a"),mco=o("BeitFeatureExtractor"),gco=o(" (Data2VecVision model)"),hco=l(),vh=a("li"),Mne=a("strong"),pco=o("deit"),uco=o(" \u2014 "),YB=a("a"),_co=o("DeiTFeatureExtractor"),bco=o(" (DeiT model)"),vco=l(),Fh=a("li"),Ene=a("strong"),Fco=o("detr"),Tco=o(" \u2014 "),KB=a("a"),Mco=o("DetrFeatureExtractor"),Eco=o(" (DETR model)"),Cco=l(),Th=a("li"),Cne=a("strong"),wco=o("dpt"),Aco=o(" \u2014 "),ZB=a("a"),yco=o("DPTFeatureExtractor"),Lco=o(" (DPT model)"),xco=l(),Mh=a("li"),wne=a("strong"),$co=o("flava"),kco=o(" \u2014 "),eI=a("a"),Sco=o("FlavaFeatureExtractor"),Rco=o(" (Flava model)"),Pco=l(),Eh=a("li"),Ane=a("strong"),Bco=o("glpn"),Ico=o(" \u2014 "),oI=a("a"),qco=o("GLPNFeatureExtractor"),Nco=o(" (GLPN model)"),jco=l(),Ch=a("li"),yne=a("strong"),Dco=o("hubert"),Gco=o(" \u2014 "),rI=a("a"),Oco=o("Wav2Vec2FeatureExtractor"),Vco=o(" (Hubert model)"),Xco=l(),wh=a("li"),Lne=a("strong"),zco=o("layoutlmv2"),Wco=o(" \u2014 "),tI=a("a"),Qco=o("LayoutLMv2FeatureExtractor"),Hco=o(" (LayoutLMv2 model)"),Uco=l(),Ah=a("li"),xne=a("strong"),Jco=o("maskformer"),Yco=o(" \u2014 "),aI=a("a"),Kco=o("MaskFormerFeatureExtractor"),Zco=o(" (MaskFormer model)"),efo=l(),yh=a("li"),$ne=a("strong"),ofo=o("perceiver"),rfo=o(" \u2014 "),nI=a("a"),tfo=o("PerceiverFeatureExtractor"),afo=o(" (Perceiver model)"),nfo=l(),Lh=a("li"),kne=a("strong"),sfo=o("poolformer"),lfo=o(" \u2014 "),sI=a("a"),ifo=o("PoolFormerFeatureExtractor"),dfo=o(" (PoolFormer model)"),cfo=l(),xh=a("li"),Sne=a("strong"),ffo=o("regnet"),mfo=o(" \u2014 "),lI=a("a"),gfo=o("ConvNextFeatureExtractor"),hfo=o(" (RegNet model)"),pfo=l(),$h=a("li"),Rne=a("strong"),ufo=o("resnet"),_fo=o(" \u2014 "),iI=a("a"),bfo=o("ConvNextFeatureExtractor"),vfo=o(" (ResNet model)"),Ffo=l(),kh=a("li"),Pne=a("strong"),Tfo=o("segformer"),Mfo=o(" \u2014 "),dI=a("a"),Efo=o("SegformerFeatureExtractor"),Cfo=o(" (SegFormer model)"),wfo=l(),Sh=a("li"),Bne=a("strong"),Afo=o("speech_to_text"),yfo=o(" \u2014 "),cI=a("a"),Lfo=o("Speech2TextFeatureExtractor"),xfo=o(" (Speech2Text model)"),$fo=l(),Rh=a("li"),Ine=a("strong"),kfo=o("swin"),Sfo=o(" \u2014 "),fI=a("a"),Rfo=o("ViTFeatureExtractor"),Pfo=o(" (Swin model)"),Bfo=l(),Ph=a("li"),qne=a("strong"),Ifo=o("van"),qfo=o(" \u2014 "),mI=a("a"),Nfo=o("ConvNextFeatureExtractor"),jfo=o(" (VAN model)"),Dfo=l(),Bh=a("li"),Nne=a("strong"),Gfo=o("vilt"),Ofo=o(" \u2014 "),gI=a("a"),Vfo=o("ViltFeatureExtractor"),Xfo=o(" (ViLT model)"),zfo=l(),Ih=a("li"),jne=a("strong"),Wfo=o("vit"),Qfo=o(" \u2014 "),hI=a("a"),Hfo=o("ViTFeatureExtractor"),Ufo=o(" (ViT model)"),Jfo=l(),qh=a("li"),Dne=a("strong"),Yfo=o("vit_mae"),Kfo=o(" \u2014 "),pI=a("a"),Zfo=o("ViTFeatureExtractor"),emo=o(" (ViTMAE model)"),omo=l(),Nh=a("li"),Gne=a("strong"),rmo=o("wav2vec2"),tmo=o(" \u2014 "),uI=a("a"),amo=o("Wav2Vec2FeatureExtractor"),nmo=o(" (Wav2Vec2 model)"),smo=l(),jh=a("li"),One=a("strong"),lmo=o("wav2vec2-conformer"),imo=o(" \u2014 "),_I=a("a"),dmo=o("Wav2Vec2FeatureExtractor"),cmo=o(" (Wav2Vec2-Conformer model)"),fmo=l(),Dh=a("li"),Vne=a("strong"),mmo=o("yolos"),gmo=o(" \u2014 "),bI=a("a"),hmo=o("YolosFeatureExtractor"),pmo=o(" (YOLOS model)"),umo=l(),F(Gh.$$.fragment),_mo=l(),F(Oh.$$.fragment),bmo=l(),Vh=a("div"),F(K0.$$.fragment),vmo=l(),Xne=a("p"),Fmo=o("Register a new feature extractor for this class."),iNe=l(),xi=a("h2"),Xh=a("a"),zne=a("span"),F(Z0.$$.fragment),Tmo=l(),Wne=a("span"),Mmo=o("AutoProcessor"),dNe=l(),Lo=a("div"),F(eA.$$.fragment),Emo=l(),oA=a("p"),Cmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=a("a"),wmo=o("AutoProcessor.from_pretrained()"),Amo=o(" class method."),ymo=l(),rA=a("p"),Lmo=o("This class cannot be instantiated directly using "),Qne=a("code"),xmo=o("__init__()"),$mo=o(" (throws an error)."),kmo=l(),Ue=a("div"),F(tA.$$.fragment),Smo=l(),Hne=a("p"),Rmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Pmo=l(),$i=a("p"),Bmo=o("The processor class to instantiate is selected based on the "),Une=a("code"),Imo=o("model_type"),qmo=o(` property of the config object (either
passed as an argument or loaded from `),Jne=a("code"),Nmo=o("pretrained_model_name_or_path"),jmo=o(" if possible):"),Dmo=l(),pe=a("ul"),zh=a("li"),Yne=a("strong"),Gmo=o("clip"),Omo=o(" \u2014 "),FI=a("a"),Vmo=o("CLIPProcessor"),Xmo=o(" (CLIP model)"),zmo=l(),Wh=a("li"),Kne=a("strong"),Wmo=o("flava"),Qmo=o(" \u2014 "),Zne=a("code"),Hmo=o("FLAVAProcessor"),Umo=o(" (Flava model)"),Jmo=l(),Qh=a("li"),ese=a("strong"),Ymo=o("layoutlmv2"),Kmo=o(" \u2014 "),TI=a("a"),Zmo=o("LayoutLMv2Processor"),ego=o(" (LayoutLMv2 model)"),ogo=l(),Hh=a("li"),ose=a("strong"),rgo=o("layoutxlm"),tgo=o(" \u2014 "),MI=a("a"),ago=o("LayoutXLMProcessor"),ngo=o(" (LayoutXLM model)"),sgo=l(),Uh=a("li"),rse=a("strong"),lgo=o("sew"),igo=o(" \u2014 "),EI=a("a"),dgo=o("Wav2Vec2Processor"),cgo=o(" (SEW model)"),fgo=l(),Jh=a("li"),tse=a("strong"),mgo=o("sew-d"),ggo=o(" \u2014 "),CI=a("a"),hgo=o("Wav2Vec2Processor"),pgo=o(" (SEW-D model)"),ugo=l(),Yh=a("li"),ase=a("strong"),_go=o("speech_to_text"),bgo=o(" \u2014 "),wI=a("a"),vgo=o("Speech2TextProcessor"),Fgo=o(" (Speech2Text model)"),Tgo=l(),Kh=a("li"),nse=a("strong"),Mgo=o("speech_to_text_2"),Ego=o(" \u2014 "),AI=a("a"),Cgo=o("Speech2Text2Processor"),wgo=o(" (Speech2Text2 model)"),Ago=l(),Zh=a("li"),sse=a("strong"),ygo=o("trocr"),Lgo=o(" \u2014 "),yI=a("a"),xgo=o("TrOCRProcessor"),$go=o(" (TrOCR model)"),kgo=l(),ep=a("li"),lse=a("strong"),Sgo=o("unispeech"),Rgo=o(" \u2014 "),LI=a("a"),Pgo=o("Wav2Vec2Processor"),Bgo=o(" (UniSpeech model)"),Igo=l(),op=a("li"),ise=a("strong"),qgo=o("unispeech-sat"),Ngo=o(" \u2014 "),xI=a("a"),jgo=o("Wav2Vec2Processor"),Dgo=o(" (UniSpeechSat model)"),Ggo=l(),rp=a("li"),dse=a("strong"),Ogo=o("vilt"),Vgo=o(" \u2014 "),$I=a("a"),Xgo=o("ViltProcessor"),zgo=o(" (ViLT model)"),Wgo=l(),tp=a("li"),cse=a("strong"),Qgo=o("vision-text-dual-encoder"),Hgo=o(" \u2014 "),kI=a("a"),Ugo=o("VisionTextDualEncoderProcessor"),Jgo=o(" (VisionTextDualEncoder model)"),Ygo=l(),ap=a("li"),fse=a("strong"),Kgo=o("wav2vec2"),Zgo=o(" \u2014 "),SI=a("a"),eho=o("Wav2Vec2Processor"),oho=o(" (Wav2Vec2 model)"),rho=l(),np=a("li"),mse=a("strong"),tho=o("wav2vec2-conformer"),aho=o(" \u2014 "),RI=a("a"),nho=o("Wav2Vec2Processor"),sho=o(" (Wav2Vec2-Conformer model)"),lho=l(),sp=a("li"),gse=a("strong"),iho=o("wavlm"),dho=o(" \u2014 "),PI=a("a"),cho=o("Wav2Vec2Processor"),fho=o(" (WavLM model)"),mho=l(),F(lp.$$.fragment),gho=l(),F(ip.$$.fragment),hho=l(),dp=a("div"),F(aA.$$.fragment),pho=l(),hse=a("p"),uho=o("Register a new processor for this class."),cNe=l(),ki=a("h2"),cp=a("a"),pse=a("span"),F(nA.$$.fragment),_ho=l(),use=a("span"),bho=o("AutoModel"),fNe=l(),xo=a("div"),F(sA.$$.fragment),vho=l(),Si=a("p"),Fho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BI=a("a"),Tho=o("from_pretrained()"),Mho=o(" class method or the "),II=a("a"),Eho=o("from_config()"),Cho=o(` class
method.`),who=l(),lA=a("p"),Aho=o("This class cannot be instantiated directly using "),_se=a("code"),yho=o("__init__()"),Lho=o(" (throws an error)."),xho=l(),nt=a("div"),F(iA.$$.fragment),$ho=l(),bse=a("p"),kho=o("Instantiates one of the base model classes of the library from a configuration."),Sho=l(),Ri=a("p"),Rho=o(`Note:
Loading a model from its configuration file does `),vse=a("strong"),Pho=o("not"),Bho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),Iho=o("from_pretrained()"),qho=o(" to load the model weights."),Nho=l(),F(fp.$$.fragment),jho=l(),Je=a("div"),F(dA.$$.fragment),Dho=l(),Fse=a("p"),Gho=o("Instantiate one of the base model classes of the library from a pretrained model."),Oho=l(),Sa=a("p"),Vho=o("The model class to instantiate is selected based on the "),Tse=a("code"),Xho=o("model_type"),zho=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),Who=o("pretrained_model_name_or_path"),Qho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),Hho=o("pretrained_model_name_or_path"),Uho=o(":"),Jho=l(),x=a("ul"),mp=a("li"),Cse=a("strong"),Yho=o("albert"),Kho=o(" \u2014 "),NI=a("a"),Zho=o("AlbertModel"),epo=o(" (ALBERT model)"),opo=l(),gp=a("li"),wse=a("strong"),rpo=o("bart"),tpo=o(" \u2014 "),jI=a("a"),apo=o("BartModel"),npo=o(" (BART model)"),spo=l(),hp=a("li"),Ase=a("strong"),lpo=o("beit"),ipo=o(" \u2014 "),DI=a("a"),dpo=o("BeitModel"),cpo=o(" (BEiT model)"),fpo=l(),pp=a("li"),yse=a("strong"),mpo=o("bert"),gpo=o(" \u2014 "),GI=a("a"),hpo=o("BertModel"),ppo=o(" (BERT model)"),upo=l(),up=a("li"),Lse=a("strong"),_po=o("bert-generation"),bpo=o(" \u2014 "),OI=a("a"),vpo=o("BertGenerationEncoder"),Fpo=o(" (Bert Generation model)"),Tpo=l(),_p=a("li"),xse=a("strong"),Mpo=o("big_bird"),Epo=o(" \u2014 "),VI=a("a"),Cpo=o("BigBirdModel"),wpo=o(" (BigBird model)"),Apo=l(),bp=a("li"),$se=a("strong"),ypo=o("bigbird_pegasus"),Lpo=o(" \u2014 "),XI=a("a"),xpo=o("BigBirdPegasusModel"),$po=o(" (BigBirdPegasus model)"),kpo=l(),vp=a("li"),kse=a("strong"),Spo=o("blenderbot"),Rpo=o(" \u2014 "),zI=a("a"),Ppo=o("BlenderbotModel"),Bpo=o(" (Blenderbot model)"),Ipo=l(),Fp=a("li"),Sse=a("strong"),qpo=o("blenderbot-small"),Npo=o(" \u2014 "),WI=a("a"),jpo=o("BlenderbotSmallModel"),Dpo=o(" (BlenderbotSmall model)"),Gpo=l(),Tp=a("li"),Rse=a("strong"),Opo=o("camembert"),Vpo=o(" \u2014 "),QI=a("a"),Xpo=o("CamembertModel"),zpo=o(" (CamemBERT model)"),Wpo=l(),Mp=a("li"),Pse=a("strong"),Qpo=o("canine"),Hpo=o(" \u2014 "),HI=a("a"),Upo=o("CanineModel"),Jpo=o(" (Canine model)"),Ypo=l(),Ep=a("li"),Bse=a("strong"),Kpo=o("clip"),Zpo=o(" \u2014 "),UI=a("a"),euo=o("CLIPModel"),ouo=o(" (CLIP model)"),ruo=l(),Cp=a("li"),Ise=a("strong"),tuo=o("convbert"),auo=o(" \u2014 "),JI=a("a"),nuo=o("ConvBertModel"),suo=o(" (ConvBERT model)"),luo=l(),wp=a("li"),qse=a("strong"),iuo=o("convnext"),duo=o(" \u2014 "),YI=a("a"),cuo=o("ConvNextModel"),fuo=o(" (ConvNext model)"),muo=l(),Ap=a("li"),Nse=a("strong"),guo=o("ctrl"),huo=o(" \u2014 "),KI=a("a"),puo=o("CTRLModel"),uuo=o(" (CTRL model)"),_uo=l(),yp=a("li"),jse=a("strong"),buo=o("cvt"),vuo=o(" \u2014 "),ZI=a("a"),Fuo=o("CvtModel"),Tuo=o(" (CvT model)"),Muo=l(),Lp=a("li"),Dse=a("strong"),Euo=o("data2vec-audio"),Cuo=o(" \u2014 "),eq=a("a"),wuo=o("Data2VecAudioModel"),Auo=o(" (Data2VecAudio model)"),yuo=l(),xp=a("li"),Gse=a("strong"),Luo=o("data2vec-text"),xuo=o(" \u2014 "),oq=a("a"),$uo=o("Data2VecTextModel"),kuo=o(" (Data2VecText model)"),Suo=l(),$p=a("li"),Ose=a("strong"),Ruo=o("data2vec-vision"),Puo=o(" \u2014 "),rq=a("a"),Buo=o("Data2VecVisionModel"),Iuo=o(" (Data2VecVision model)"),quo=l(),kp=a("li"),Vse=a("strong"),Nuo=o("deberta"),juo=o(" \u2014 "),tq=a("a"),Duo=o("DebertaModel"),Guo=o(" (DeBERTa model)"),Ouo=l(),Sp=a("li"),Xse=a("strong"),Vuo=o("deberta-v2"),Xuo=o(" \u2014 "),aq=a("a"),zuo=o("DebertaV2Model"),Wuo=o(" (DeBERTa-v2 model)"),Quo=l(),Rp=a("li"),zse=a("strong"),Huo=o("decision_transformer"),Uuo=o(" \u2014 "),nq=a("a"),Juo=o("DecisionTransformerModel"),Yuo=o(" (Decision Transformer model)"),Kuo=l(),Pp=a("li"),Wse=a("strong"),Zuo=o("deit"),e_o=o(" \u2014 "),sq=a("a"),o_o=o("DeiTModel"),r_o=o(" (DeiT model)"),t_o=l(),Bp=a("li"),Qse=a("strong"),a_o=o("detr"),n_o=o(" \u2014 "),lq=a("a"),s_o=o("DetrModel"),l_o=o(" (DETR model)"),i_o=l(),Ip=a("li"),Hse=a("strong"),d_o=o("distilbert"),c_o=o(" \u2014 "),iq=a("a"),f_o=o("DistilBertModel"),m_o=o(" (DistilBERT model)"),g_o=l(),qp=a("li"),Use=a("strong"),h_o=o("dpr"),p_o=o(" \u2014 "),dq=a("a"),u_o=o("DPRQuestionEncoder"),__o=o(" (DPR model)"),b_o=l(),Np=a("li"),Jse=a("strong"),v_o=o("dpt"),F_o=o(" \u2014 "),cq=a("a"),T_o=o("DPTModel"),M_o=o(" (DPT model)"),E_o=l(),jp=a("li"),Yse=a("strong"),C_o=o("electra"),w_o=o(" \u2014 "),fq=a("a"),A_o=o("ElectraModel"),y_o=o(" (ELECTRA model)"),L_o=l(),Dp=a("li"),Kse=a("strong"),x_o=o("flaubert"),$_o=o(" \u2014 "),mq=a("a"),k_o=o("FlaubertModel"),S_o=o(" (FlauBERT model)"),R_o=l(),Gp=a("li"),Zse=a("strong"),P_o=o("flava"),B_o=o(" \u2014 "),gq=a("a"),I_o=o("FlavaModel"),q_o=o(" (Flava model)"),N_o=l(),Op=a("li"),ele=a("strong"),j_o=o("fnet"),D_o=o(" \u2014 "),hq=a("a"),G_o=o("FNetModel"),O_o=o(" (FNet model)"),V_o=l(),Vp=a("li"),ole=a("strong"),X_o=o("fsmt"),z_o=o(" \u2014 "),pq=a("a"),W_o=o("FSMTModel"),Q_o=o(" (FairSeq Machine-Translation model)"),H_o=l(),js=a("li"),rle=a("strong"),U_o=o("funnel"),J_o=o(" \u2014 "),uq=a("a"),Y_o=o("FunnelModel"),K_o=o(" or "),_q=a("a"),Z_o=o("FunnelBaseModel"),e2o=o(" (Funnel Transformer model)"),o2o=l(),Xp=a("li"),tle=a("strong"),r2o=o("glpn"),t2o=o(" \u2014 "),bq=a("a"),a2o=o("GLPNModel"),n2o=o(" (GLPN model)"),s2o=l(),zp=a("li"),ale=a("strong"),l2o=o("gpt2"),i2o=o(" \u2014 "),vq=a("a"),d2o=o("GPT2Model"),c2o=o(" (OpenAI GPT-2 model)"),f2o=l(),Wp=a("li"),nle=a("strong"),m2o=o("gpt_neo"),g2o=o(" \u2014 "),Fq=a("a"),h2o=o("GPTNeoModel"),p2o=o(" (GPT Neo model)"),u2o=l(),Qp=a("li"),sle=a("strong"),_2o=o("gptj"),b2o=o(" \u2014 "),Tq=a("a"),v2o=o("GPTJModel"),F2o=o(" (GPT-J model)"),T2o=l(),Hp=a("li"),lle=a("strong"),M2o=o("hubert"),E2o=o(" \u2014 "),Mq=a("a"),C2o=o("HubertModel"),w2o=o(" (Hubert model)"),A2o=l(),Up=a("li"),ile=a("strong"),y2o=o("ibert"),L2o=o(" \u2014 "),Eq=a("a"),x2o=o("IBertModel"),$2o=o(" (I-BERT model)"),k2o=l(),Jp=a("li"),dle=a("strong"),S2o=o("imagegpt"),R2o=o(" \u2014 "),Cq=a("a"),P2o=o("ImageGPTModel"),B2o=o(" (ImageGPT model)"),I2o=l(),Yp=a("li"),cle=a("strong"),q2o=o("layoutlm"),N2o=o(" \u2014 "),wq=a("a"),j2o=o("LayoutLMModel"),D2o=o(" (LayoutLM model)"),G2o=l(),Kp=a("li"),fle=a("strong"),O2o=o("layoutlmv2"),V2o=o(" \u2014 "),Aq=a("a"),X2o=o("LayoutLMv2Model"),z2o=o(" (LayoutLMv2 model)"),W2o=l(),Zp=a("li"),mle=a("strong"),Q2o=o("led"),H2o=o(" \u2014 "),yq=a("a"),U2o=o("LEDModel"),J2o=o(" (LED model)"),Y2o=l(),eu=a("li"),gle=a("strong"),K2o=o("longformer"),Z2o=o(" \u2014 "),Lq=a("a"),e1o=o("LongformerModel"),o1o=o(" (Longformer model)"),r1o=l(),ou=a("li"),hle=a("strong"),t1o=o("luke"),a1o=o(" \u2014 "),xq=a("a"),n1o=o("LukeModel"),s1o=o(" (LUKE model)"),l1o=l(),ru=a("li"),ple=a("strong"),i1o=o("lxmert"),d1o=o(" \u2014 "),$q=a("a"),c1o=o("LxmertModel"),f1o=o(" (LXMERT model)"),m1o=l(),tu=a("li"),ule=a("strong"),g1o=o("m2m_100"),h1o=o(" \u2014 "),kq=a("a"),p1o=o("M2M100Model"),u1o=o(" (M2M100 model)"),_1o=l(),au=a("li"),_le=a("strong"),b1o=o("marian"),v1o=o(" \u2014 "),Sq=a("a"),F1o=o("MarianModel"),T1o=o(" (Marian model)"),M1o=l(),nu=a("li"),ble=a("strong"),E1o=o("maskformer"),C1o=o(" \u2014 "),Rq=a("a"),w1o=o("MaskFormerModel"),A1o=o(" (MaskFormer model)"),y1o=l(),su=a("li"),vle=a("strong"),L1o=o("mbart"),x1o=o(" \u2014 "),Pq=a("a"),$1o=o("MBartModel"),k1o=o(" (mBART model)"),S1o=l(),lu=a("li"),Fle=a("strong"),R1o=o("megatron-bert"),P1o=o(" \u2014 "),Bq=a("a"),B1o=o("MegatronBertModel"),I1o=o(" (MegatronBert model)"),q1o=l(),iu=a("li"),Tle=a("strong"),N1o=o("mobilebert"),j1o=o(" \u2014 "),Iq=a("a"),D1o=o("MobileBertModel"),G1o=o(" (MobileBERT model)"),O1o=l(),du=a("li"),Mle=a("strong"),V1o=o("mpnet"),X1o=o(" \u2014 "),qq=a("a"),z1o=o("MPNetModel"),W1o=o(" (MPNet model)"),Q1o=l(),cu=a("li"),Ele=a("strong"),H1o=o("mt5"),U1o=o(" \u2014 "),Nq=a("a"),J1o=o("MT5Model"),Y1o=o(" (mT5 model)"),K1o=l(),fu=a("li"),Cle=a("strong"),Z1o=o("nystromformer"),ebo=o(" \u2014 "),jq=a("a"),obo=o("NystromformerModel"),rbo=o(" (Nystromformer model)"),tbo=l(),mu=a("li"),wle=a("strong"),abo=o("openai-gpt"),nbo=o(" \u2014 "),Dq=a("a"),sbo=o("OpenAIGPTModel"),lbo=o(" (OpenAI GPT model)"),ibo=l(),gu=a("li"),Ale=a("strong"),dbo=o("opt"),cbo=o(" \u2014 "),Gq=a("a"),fbo=o("OPTModel"),mbo=o(" (OPT model)"),gbo=l(),hu=a("li"),yle=a("strong"),hbo=o("pegasus"),pbo=o(" \u2014 "),Oq=a("a"),ubo=o("PegasusModel"),_bo=o(" (Pegasus model)"),bbo=l(),pu=a("li"),Lle=a("strong"),vbo=o("perceiver"),Fbo=o(" \u2014 "),Vq=a("a"),Tbo=o("PerceiverModel"),Mbo=o(" (Perceiver model)"),Ebo=l(),uu=a("li"),xle=a("strong"),Cbo=o("plbart"),wbo=o(" \u2014 "),Xq=a("a"),Abo=o("PLBartModel"),ybo=o(" (PLBart model)"),Lbo=l(),_u=a("li"),$le=a("strong"),xbo=o("poolformer"),$bo=o(" \u2014 "),zq=a("a"),kbo=o("PoolFormerModel"),Sbo=o(" (PoolFormer model)"),Rbo=l(),bu=a("li"),kle=a("strong"),Pbo=o("prophetnet"),Bbo=o(" \u2014 "),Wq=a("a"),Ibo=o("ProphetNetModel"),qbo=o(" (ProphetNet model)"),Nbo=l(),vu=a("li"),Sle=a("strong"),jbo=o("qdqbert"),Dbo=o(" \u2014 "),Qq=a("a"),Gbo=o("QDQBertModel"),Obo=o(" (QDQBert model)"),Vbo=l(),Fu=a("li"),Rle=a("strong"),Xbo=o("reformer"),zbo=o(" \u2014 "),Hq=a("a"),Wbo=o("ReformerModel"),Qbo=o(" (Reformer model)"),Hbo=l(),Tu=a("li"),Ple=a("strong"),Ubo=o("regnet"),Jbo=o(" \u2014 "),Uq=a("a"),Ybo=o("RegNetModel"),Kbo=o(" (RegNet model)"),Zbo=l(),Mu=a("li"),Ble=a("strong"),evo=o("rembert"),ovo=o(" \u2014 "),Jq=a("a"),rvo=o("RemBertModel"),tvo=o(" (RemBERT model)"),avo=l(),Eu=a("li"),Ile=a("strong"),nvo=o("resnet"),svo=o(" \u2014 "),Yq=a("a"),lvo=o("ResNetModel"),ivo=o(" (ResNet model)"),dvo=l(),Cu=a("li"),qle=a("strong"),cvo=o("retribert"),fvo=o(" \u2014 "),Kq=a("a"),mvo=o("RetriBertModel"),gvo=o(" (RetriBERT model)"),hvo=l(),wu=a("li"),Nle=a("strong"),pvo=o("roberta"),uvo=o(" \u2014 "),Zq=a("a"),_vo=o("RobertaModel"),bvo=o(" (RoBERTa model)"),vvo=l(),Au=a("li"),jle=a("strong"),Fvo=o("roformer"),Tvo=o(" \u2014 "),eN=a("a"),Mvo=o("RoFormerModel"),Evo=o(" (RoFormer model)"),Cvo=l(),yu=a("li"),Dle=a("strong"),wvo=o("segformer"),Avo=o(" \u2014 "),oN=a("a"),yvo=o("SegformerModel"),Lvo=o(" (SegFormer model)"),xvo=l(),Lu=a("li"),Gle=a("strong"),$vo=o("sew"),kvo=o(" \u2014 "),rN=a("a"),Svo=o("SEWModel"),Rvo=o(" (SEW model)"),Pvo=l(),xu=a("li"),Ole=a("strong"),Bvo=o("sew-d"),Ivo=o(" \u2014 "),tN=a("a"),qvo=o("SEWDModel"),Nvo=o(" (SEW-D model)"),jvo=l(),$u=a("li"),Vle=a("strong"),Dvo=o("speech_to_text"),Gvo=o(" \u2014 "),aN=a("a"),Ovo=o("Speech2TextModel"),Vvo=o(" (Speech2Text model)"),Xvo=l(),ku=a("li"),Xle=a("strong"),zvo=o("splinter"),Wvo=o(" \u2014 "),nN=a("a"),Qvo=o("SplinterModel"),Hvo=o(" (Splinter model)"),Uvo=l(),Su=a("li"),zle=a("strong"),Jvo=o("squeezebert"),Yvo=o(" \u2014 "),sN=a("a"),Kvo=o("SqueezeBertModel"),Zvo=o(" (SqueezeBERT model)"),eFo=l(),Ru=a("li"),Wle=a("strong"),oFo=o("swin"),rFo=o(" \u2014 "),lN=a("a"),tFo=o("SwinModel"),aFo=o(" (Swin model)"),nFo=l(),Pu=a("li"),Qle=a("strong"),sFo=o("t5"),lFo=o(" \u2014 "),iN=a("a"),iFo=o("T5Model"),dFo=o(" (T5 model)"),cFo=l(),Bu=a("li"),Hle=a("strong"),fFo=o("tapas"),mFo=o(" \u2014 "),dN=a("a"),gFo=o("TapasModel"),hFo=o(" (TAPAS model)"),pFo=l(),Iu=a("li"),Ule=a("strong"),uFo=o("trajectory_transformer"),_Fo=o(" \u2014 "),cN=a("a"),bFo=o("TrajectoryTransformerModel"),vFo=o(" (Trajectory Transformer model)"),FFo=l(),qu=a("li"),Jle=a("strong"),TFo=o("transfo-xl"),MFo=o(" \u2014 "),fN=a("a"),EFo=o("TransfoXLModel"),CFo=o(" (Transformer-XL model)"),wFo=l(),Nu=a("li"),Yle=a("strong"),AFo=o("unispeech"),yFo=o(" \u2014 "),mN=a("a"),LFo=o("UniSpeechModel"),xFo=o(" (UniSpeech model)"),$Fo=l(),ju=a("li"),Kle=a("strong"),kFo=o("unispeech-sat"),SFo=o(" \u2014 "),gN=a("a"),RFo=o("UniSpeechSatModel"),PFo=o(" (UniSpeechSat model)"),BFo=l(),Du=a("li"),Zle=a("strong"),IFo=o("van"),qFo=o(" \u2014 "),hN=a("a"),NFo=o("VanModel"),jFo=o(" (VAN model)"),DFo=l(),Gu=a("li"),eie=a("strong"),GFo=o("vilt"),OFo=o(" \u2014 "),pN=a("a"),VFo=o("ViltModel"),XFo=o(" (ViLT model)"),zFo=l(),Ou=a("li"),oie=a("strong"),WFo=o("vision-text-dual-encoder"),QFo=o(" \u2014 "),uN=a("a"),HFo=o("VisionTextDualEncoderModel"),UFo=o(" (VisionTextDualEncoder model)"),JFo=l(),Vu=a("li"),rie=a("strong"),YFo=o("visual_bert"),KFo=o(" \u2014 "),_N=a("a"),ZFo=o("VisualBertModel"),e6o=o(" (VisualBert model)"),o6o=l(),Xu=a("li"),tie=a("strong"),r6o=o("vit"),t6o=o(" \u2014 "),bN=a("a"),a6o=o("ViTModel"),n6o=o(" (ViT model)"),s6o=l(),zu=a("li"),aie=a("strong"),l6o=o("vit_mae"),i6o=o(" \u2014 "),vN=a("a"),d6o=o("ViTMAEModel"),c6o=o(" (ViTMAE model)"),f6o=l(),Wu=a("li"),nie=a("strong"),m6o=o("wav2vec2"),g6o=o(" \u2014 "),FN=a("a"),h6o=o("Wav2Vec2Model"),p6o=o(" (Wav2Vec2 model)"),u6o=l(),Qu=a("li"),sie=a("strong"),_6o=o("wav2vec2-conformer"),b6o=o(" \u2014 "),TN=a("a"),v6o=o("Wav2Vec2ConformerModel"),F6o=o(" (Wav2Vec2-Conformer model)"),T6o=l(),Hu=a("li"),lie=a("strong"),M6o=o("wavlm"),E6o=o(" \u2014 "),MN=a("a"),C6o=o("WavLMModel"),w6o=o(" (WavLM model)"),A6o=l(),Uu=a("li"),iie=a("strong"),y6o=o("xglm"),L6o=o(" \u2014 "),EN=a("a"),x6o=o("XGLMModel"),$6o=o(" (XGLM model)"),k6o=l(),Ju=a("li"),die=a("strong"),S6o=o("xlm"),R6o=o(" \u2014 "),CN=a("a"),P6o=o("XLMModel"),B6o=o(" (XLM model)"),I6o=l(),Yu=a("li"),cie=a("strong"),q6o=o("xlm-prophetnet"),N6o=o(" \u2014 "),wN=a("a"),j6o=o("XLMProphetNetModel"),D6o=o(" (XLMProphetNet model)"),G6o=l(),Ku=a("li"),fie=a("strong"),O6o=o("xlm-roberta"),V6o=o(" \u2014 "),AN=a("a"),X6o=o("XLMRobertaModel"),z6o=o(" (XLM-RoBERTa model)"),W6o=l(),Zu=a("li"),mie=a("strong"),Q6o=o("xlm-roberta-xl"),H6o=o(" \u2014 "),yN=a("a"),U6o=o("XLMRobertaXLModel"),J6o=o(" (XLM-RoBERTa-XL model)"),Y6o=l(),e_=a("li"),gie=a("strong"),K6o=o("xlnet"),Z6o=o(" \u2014 "),LN=a("a"),eTo=o("XLNetModel"),oTo=o(" (XLNet model)"),rTo=l(),o_=a("li"),hie=a("strong"),tTo=o("yolos"),aTo=o(" \u2014 "),xN=a("a"),nTo=o("YolosModel"),sTo=o(" (YOLOS model)"),lTo=l(),r_=a("li"),pie=a("strong"),iTo=o("yoso"),dTo=o(" \u2014 "),$N=a("a"),cTo=o("YosoModel"),fTo=o(" (YOSO model)"),mTo=l(),t_=a("p"),gTo=o("The model is set in evaluation mode by default using "),uie=a("code"),hTo=o("model.eval()"),pTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),uTo=o("model.train()"),_To=l(),F(a_.$$.fragment),mNe=l(),Pi=a("h2"),n_=a("a"),bie=a("span"),F(cA.$$.fragment),bTo=l(),vie=a("span"),vTo=o("AutoModelForPreTraining"),gNe=l(),$o=a("div"),F(fA.$$.fragment),FTo=l(),Bi=a("p"),TTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kN=a("a"),MTo=o("from_pretrained()"),ETo=o(" class method or the "),SN=a("a"),CTo=o("from_config()"),wTo=o(` class
method.`),ATo=l(),mA=a("p"),yTo=o("This class cannot be instantiated directly using "),Fie=a("code"),LTo=o("__init__()"),xTo=o(" (throws an error)."),$To=l(),st=a("div"),F(gA.$$.fragment),kTo=l(),Tie=a("p"),STo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RTo=l(),Ii=a("p"),PTo=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),BTo=o("not"),ITo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=a("a"),qTo=o("from_pretrained()"),NTo=o(" to load the model weights."),jTo=l(),F(s_.$$.fragment),DTo=l(),Ye=a("div"),F(hA.$$.fragment),GTo=l(),Eie=a("p"),OTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VTo=l(),Ra=a("p"),XTo=o("The model class to instantiate is selected based on the "),Cie=a("code"),zTo=o("model_type"),WTo=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),QTo=o("pretrained_model_name_or_path"),HTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),UTo=o("pretrained_model_name_or_path"),JTo=o(":"),YTo=l(),G=a("ul"),l_=a("li"),yie=a("strong"),KTo=o("albert"),ZTo=o(" \u2014 "),PN=a("a"),e8o=o("AlbertForPreTraining"),o8o=o(" (ALBERT model)"),r8o=l(),i_=a("li"),Lie=a("strong"),t8o=o("bart"),a8o=o(" \u2014 "),BN=a("a"),n8o=o("BartForConditionalGeneration"),s8o=o(" (BART model)"),l8o=l(),d_=a("li"),xie=a("strong"),i8o=o("bert"),d8o=o(" \u2014 "),IN=a("a"),c8o=o("BertForPreTraining"),f8o=o(" (BERT model)"),m8o=l(),c_=a("li"),$ie=a("strong"),g8o=o("big_bird"),h8o=o(" \u2014 "),qN=a("a"),p8o=o("BigBirdForPreTraining"),u8o=o(" (BigBird model)"),_8o=l(),f_=a("li"),kie=a("strong"),b8o=o("camembert"),v8o=o(" \u2014 "),NN=a("a"),F8o=o("CamembertForMaskedLM"),T8o=o(" (CamemBERT model)"),M8o=l(),m_=a("li"),Sie=a("strong"),E8o=o("ctrl"),C8o=o(" \u2014 "),jN=a("a"),w8o=o("CTRLLMHeadModel"),A8o=o(" (CTRL model)"),y8o=l(),g_=a("li"),Rie=a("strong"),L8o=o("data2vec-text"),x8o=o(" \u2014 "),DN=a("a"),$8o=o("Data2VecTextForMaskedLM"),k8o=o(" (Data2VecText model)"),S8o=l(),h_=a("li"),Pie=a("strong"),R8o=o("deberta"),P8o=o(" \u2014 "),GN=a("a"),B8o=o("DebertaForMaskedLM"),I8o=o(" (DeBERTa model)"),q8o=l(),p_=a("li"),Bie=a("strong"),N8o=o("deberta-v2"),j8o=o(" \u2014 "),ON=a("a"),D8o=o("DebertaV2ForMaskedLM"),G8o=o(" (DeBERTa-v2 model)"),O8o=l(),u_=a("li"),Iie=a("strong"),V8o=o("distilbert"),X8o=o(" \u2014 "),VN=a("a"),z8o=o("DistilBertForMaskedLM"),W8o=o(" (DistilBERT model)"),Q8o=l(),__=a("li"),qie=a("strong"),H8o=o("electra"),U8o=o(" \u2014 "),XN=a("a"),J8o=o("ElectraForPreTraining"),Y8o=o(" (ELECTRA model)"),K8o=l(),b_=a("li"),Nie=a("strong"),Z8o=o("flaubert"),e7o=o(" \u2014 "),zN=a("a"),o7o=o("FlaubertWithLMHeadModel"),r7o=o(" (FlauBERT model)"),t7o=l(),v_=a("li"),jie=a("strong"),a7o=o("flava"),n7o=o(" \u2014 "),WN=a("a"),s7o=o("FlavaForPreTraining"),l7o=o(" (Flava model)"),i7o=l(),F_=a("li"),Die=a("strong"),d7o=o("fnet"),c7o=o(" \u2014 "),QN=a("a"),f7o=o("FNetForPreTraining"),m7o=o(" (FNet model)"),g7o=l(),T_=a("li"),Gie=a("strong"),h7o=o("fsmt"),p7o=o(" \u2014 "),HN=a("a"),u7o=o("FSMTForConditionalGeneration"),_7o=o(" (FairSeq Machine-Translation model)"),b7o=l(),M_=a("li"),Oie=a("strong"),v7o=o("funnel"),F7o=o(" \u2014 "),UN=a("a"),T7o=o("FunnelForPreTraining"),M7o=o(" (Funnel Transformer model)"),E7o=l(),E_=a("li"),Vie=a("strong"),C7o=o("gpt2"),w7o=o(" \u2014 "),JN=a("a"),A7o=o("GPT2LMHeadModel"),y7o=o(" (OpenAI GPT-2 model)"),L7o=l(),C_=a("li"),Xie=a("strong"),x7o=o("ibert"),$7o=o(" \u2014 "),YN=a("a"),k7o=o("IBertForMaskedLM"),S7o=o(" (I-BERT model)"),R7o=l(),w_=a("li"),zie=a("strong"),P7o=o("layoutlm"),B7o=o(" \u2014 "),KN=a("a"),I7o=o("LayoutLMForMaskedLM"),q7o=o(" (LayoutLM model)"),N7o=l(),A_=a("li"),Wie=a("strong"),j7o=o("longformer"),D7o=o(" \u2014 "),ZN=a("a"),G7o=o("LongformerForMaskedLM"),O7o=o(" (Longformer model)"),V7o=l(),y_=a("li"),Qie=a("strong"),X7o=o("lxmert"),z7o=o(" \u2014 "),ej=a("a"),W7o=o("LxmertForPreTraining"),Q7o=o(" (LXMERT model)"),H7o=l(),L_=a("li"),Hie=a("strong"),U7o=o("megatron-bert"),J7o=o(" \u2014 "),oj=a("a"),Y7o=o("MegatronBertForPreTraining"),K7o=o(" (MegatronBert model)"),Z7o=l(),x_=a("li"),Uie=a("strong"),eMo=o("mobilebert"),oMo=o(" \u2014 "),rj=a("a"),rMo=o("MobileBertForPreTraining"),tMo=o(" (MobileBERT model)"),aMo=l(),$_=a("li"),Jie=a("strong"),nMo=o("mpnet"),sMo=o(" \u2014 "),tj=a("a"),lMo=o("MPNetForMaskedLM"),iMo=o(" (MPNet model)"),dMo=l(),k_=a("li"),Yie=a("strong"),cMo=o("openai-gpt"),fMo=o(" \u2014 "),aj=a("a"),mMo=o("OpenAIGPTLMHeadModel"),gMo=o(" (OpenAI GPT model)"),hMo=l(),S_=a("li"),Kie=a("strong"),pMo=o("retribert"),uMo=o(" \u2014 "),nj=a("a"),_Mo=o("RetriBertModel"),bMo=o(" (RetriBERT model)"),vMo=l(),R_=a("li"),Zie=a("strong"),FMo=o("roberta"),TMo=o(" \u2014 "),sj=a("a"),MMo=o("RobertaForMaskedLM"),EMo=o(" (RoBERTa model)"),CMo=l(),P_=a("li"),ede=a("strong"),wMo=o("splinter"),AMo=o(" \u2014 "),lj=a("a"),yMo=o("SplinterForPreTraining"),LMo=o(" (Splinter model)"),xMo=l(),B_=a("li"),ode=a("strong"),$Mo=o("squeezebert"),kMo=o(" \u2014 "),ij=a("a"),SMo=o("SqueezeBertForMaskedLM"),RMo=o(" (SqueezeBERT model)"),PMo=l(),I_=a("li"),rde=a("strong"),BMo=o("t5"),IMo=o(" \u2014 "),dj=a("a"),qMo=o("T5ForConditionalGeneration"),NMo=o(" (T5 model)"),jMo=l(),q_=a("li"),tde=a("strong"),DMo=o("tapas"),GMo=o(" \u2014 "),cj=a("a"),OMo=o("TapasForMaskedLM"),VMo=o(" (TAPAS model)"),XMo=l(),N_=a("li"),ade=a("strong"),zMo=o("transfo-xl"),WMo=o(" \u2014 "),fj=a("a"),QMo=o("TransfoXLLMHeadModel"),HMo=o(" (Transformer-XL model)"),UMo=l(),j_=a("li"),nde=a("strong"),JMo=o("unispeech"),YMo=o(" \u2014 "),mj=a("a"),KMo=o("UniSpeechForPreTraining"),ZMo=o(" (UniSpeech model)"),e4o=l(),D_=a("li"),sde=a("strong"),o4o=o("unispeech-sat"),r4o=o(" \u2014 "),gj=a("a"),t4o=o("UniSpeechSatForPreTraining"),a4o=o(" (UniSpeechSat model)"),n4o=l(),G_=a("li"),lde=a("strong"),s4o=o("visual_bert"),l4o=o(" \u2014 "),hj=a("a"),i4o=o("VisualBertForPreTraining"),d4o=o(" (VisualBert model)"),c4o=l(),O_=a("li"),ide=a("strong"),f4o=o("vit_mae"),m4o=o(" \u2014 "),pj=a("a"),g4o=o("ViTMAEForPreTraining"),h4o=o(" (ViTMAE model)"),p4o=l(),V_=a("li"),dde=a("strong"),u4o=o("wav2vec2"),_4o=o(" \u2014 "),uj=a("a"),b4o=o("Wav2Vec2ForPreTraining"),v4o=o(" (Wav2Vec2 model)"),F4o=l(),X_=a("li"),cde=a("strong"),T4o=o("wav2vec2-conformer"),M4o=o(" \u2014 "),_j=a("a"),E4o=o("Wav2Vec2ConformerForPreTraining"),C4o=o(" (Wav2Vec2-Conformer model)"),w4o=l(),z_=a("li"),fde=a("strong"),A4o=o("xlm"),y4o=o(" \u2014 "),bj=a("a"),L4o=o("XLMWithLMHeadModel"),x4o=o(" (XLM model)"),$4o=l(),W_=a("li"),mde=a("strong"),k4o=o("xlm-roberta"),S4o=o(" \u2014 "),vj=a("a"),R4o=o("XLMRobertaForMaskedLM"),P4o=o(" (XLM-RoBERTa model)"),B4o=l(),Q_=a("li"),gde=a("strong"),I4o=o("xlm-roberta-xl"),q4o=o(" \u2014 "),Fj=a("a"),N4o=o("XLMRobertaXLForMaskedLM"),j4o=o(" (XLM-RoBERTa-XL model)"),D4o=l(),H_=a("li"),hde=a("strong"),G4o=o("xlnet"),O4o=o(" \u2014 "),Tj=a("a"),V4o=o("XLNetLMHeadModel"),X4o=o(" (XLNet model)"),z4o=l(),U_=a("p"),W4o=o("The model is set in evaluation mode by default using "),pde=a("code"),Q4o=o("model.eval()"),H4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=a("code"),U4o=o("model.train()"),J4o=l(),F(J_.$$.fragment),hNe=l(),qi=a("h2"),Y_=a("a"),_de=a("span"),F(pA.$$.fragment),Y4o=l(),bde=a("span"),K4o=o("AutoModelForCausalLM"),pNe=l(),ko=a("div"),F(uA.$$.fragment),Z4o=l(),Ni=a("p"),eEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=a("a"),oEo=o("from_pretrained()"),rEo=o(" class method or the "),Ej=a("a"),tEo=o("from_config()"),aEo=o(` class
method.`),nEo=l(),_A=a("p"),sEo=o("This class cannot be instantiated directly using "),vde=a("code"),lEo=o("__init__()"),iEo=o(" (throws an error)."),dEo=l(),lt=a("div"),F(bA.$$.fragment),cEo=l(),Fde=a("p"),fEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mEo=l(),ji=a("p"),gEo=o(`Note:
Loading a model from its configuration file does `),Tde=a("strong"),hEo=o("not"),pEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),uEo=o("from_pretrained()"),_Eo=o(" to load the model weights."),bEo=l(),F(K_.$$.fragment),vEo=l(),Ke=a("div"),F(vA.$$.fragment),FEo=l(),Mde=a("p"),TEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MEo=l(),Pa=a("p"),EEo=o("The model class to instantiate is selected based on the "),Ede=a("code"),CEo=o("model_type"),wEo=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),AEo=o("pretrained_model_name_or_path"),yEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),LEo=o("pretrained_model_name_or_path"),xEo=o(":"),$Eo=l(),z=a("ul"),Z_=a("li"),Ade=a("strong"),kEo=o("bart"),SEo=o(" \u2014 "),wj=a("a"),REo=o("BartForCausalLM"),PEo=o(" (BART model)"),BEo=l(),e2=a("li"),yde=a("strong"),IEo=o("bert"),qEo=o(" \u2014 "),Aj=a("a"),NEo=o("BertLMHeadModel"),jEo=o(" (BERT model)"),DEo=l(),o2=a("li"),Lde=a("strong"),GEo=o("bert-generation"),OEo=o(" \u2014 "),yj=a("a"),VEo=o("BertGenerationDecoder"),XEo=o(" (Bert Generation model)"),zEo=l(),r2=a("li"),xde=a("strong"),WEo=o("big_bird"),QEo=o(" \u2014 "),Lj=a("a"),HEo=o("BigBirdForCausalLM"),UEo=o(" (BigBird model)"),JEo=l(),t2=a("li"),$de=a("strong"),YEo=o("bigbird_pegasus"),KEo=o(" \u2014 "),xj=a("a"),ZEo=o("BigBirdPegasusForCausalLM"),eCo=o(" (BigBirdPegasus model)"),oCo=l(),a2=a("li"),kde=a("strong"),rCo=o("blenderbot"),tCo=o(" \u2014 "),$j=a("a"),aCo=o("BlenderbotForCausalLM"),nCo=o(" (Blenderbot model)"),sCo=l(),n2=a("li"),Sde=a("strong"),lCo=o("blenderbot-small"),iCo=o(" \u2014 "),kj=a("a"),dCo=o("BlenderbotSmallForCausalLM"),cCo=o(" (BlenderbotSmall model)"),fCo=l(),s2=a("li"),Rde=a("strong"),mCo=o("camembert"),gCo=o(" \u2014 "),Sj=a("a"),hCo=o("CamembertForCausalLM"),pCo=o(" (CamemBERT model)"),uCo=l(),l2=a("li"),Pde=a("strong"),_Co=o("ctrl"),bCo=o(" \u2014 "),Rj=a("a"),vCo=o("CTRLLMHeadModel"),FCo=o(" (CTRL model)"),TCo=l(),i2=a("li"),Bde=a("strong"),MCo=o("data2vec-text"),ECo=o(" \u2014 "),Pj=a("a"),CCo=o("Data2VecTextForCausalLM"),wCo=o(" (Data2VecText model)"),ACo=l(),d2=a("li"),Ide=a("strong"),yCo=o("electra"),LCo=o(" \u2014 "),Bj=a("a"),xCo=o("ElectraForCausalLM"),$Co=o(" (ELECTRA model)"),kCo=l(),c2=a("li"),qde=a("strong"),SCo=o("gpt2"),RCo=o(" \u2014 "),Ij=a("a"),PCo=o("GPT2LMHeadModel"),BCo=o(" (OpenAI GPT-2 model)"),ICo=l(),f2=a("li"),Nde=a("strong"),qCo=o("gpt_neo"),NCo=o(" \u2014 "),qj=a("a"),jCo=o("GPTNeoForCausalLM"),DCo=o(" (GPT Neo model)"),GCo=l(),m2=a("li"),jde=a("strong"),OCo=o("gptj"),VCo=o(" \u2014 "),Nj=a("a"),XCo=o("GPTJForCausalLM"),zCo=o(" (GPT-J model)"),WCo=l(),g2=a("li"),Dde=a("strong"),QCo=o("marian"),HCo=o(" \u2014 "),jj=a("a"),UCo=o("MarianForCausalLM"),JCo=o(" (Marian model)"),YCo=l(),h2=a("li"),Gde=a("strong"),KCo=o("mbart"),ZCo=o(" \u2014 "),Dj=a("a"),e5o=o("MBartForCausalLM"),o5o=o(" (mBART model)"),r5o=l(),p2=a("li"),Ode=a("strong"),t5o=o("megatron-bert"),a5o=o(" \u2014 "),Gj=a("a"),n5o=o("MegatronBertForCausalLM"),s5o=o(" (MegatronBert model)"),l5o=l(),u2=a("li"),Vde=a("strong"),i5o=o("openai-gpt"),d5o=o(" \u2014 "),Oj=a("a"),c5o=o("OpenAIGPTLMHeadModel"),f5o=o(" (OpenAI GPT model)"),m5o=l(),_2=a("li"),Xde=a("strong"),g5o=o("opt"),h5o=o(" \u2014 "),Vj=a("a"),p5o=o("OPTForCausalLM"),u5o=o(" (OPT model)"),_5o=l(),b2=a("li"),zde=a("strong"),b5o=o("pegasus"),v5o=o(" \u2014 "),Xj=a("a"),F5o=o("PegasusForCausalLM"),T5o=o(" (Pegasus model)"),M5o=l(),v2=a("li"),Wde=a("strong"),E5o=o("plbart"),C5o=o(" \u2014 "),zj=a("a"),w5o=o("PLBartForCausalLM"),A5o=o(" (PLBart model)"),y5o=l(),F2=a("li"),Qde=a("strong"),L5o=o("prophetnet"),x5o=o(" \u2014 "),Wj=a("a"),$5o=o("ProphetNetForCausalLM"),k5o=o(" (ProphetNet model)"),S5o=l(),T2=a("li"),Hde=a("strong"),R5o=o("qdqbert"),P5o=o(" \u2014 "),Qj=a("a"),B5o=o("QDQBertLMHeadModel"),I5o=o(" (QDQBert model)"),q5o=l(),M2=a("li"),Ude=a("strong"),N5o=o("reformer"),j5o=o(" \u2014 "),Hj=a("a"),D5o=o("ReformerModelWithLMHead"),G5o=o(" (Reformer model)"),O5o=l(),E2=a("li"),Jde=a("strong"),V5o=o("rembert"),X5o=o(" \u2014 "),Uj=a("a"),z5o=o("RemBertForCausalLM"),W5o=o(" (RemBERT model)"),Q5o=l(),C2=a("li"),Yde=a("strong"),H5o=o("roberta"),U5o=o(" \u2014 "),Jj=a("a"),J5o=o("RobertaForCausalLM"),Y5o=o(" (RoBERTa model)"),K5o=l(),w2=a("li"),Kde=a("strong"),Z5o=o("roformer"),e3o=o(" \u2014 "),Yj=a("a"),o3o=o("RoFormerForCausalLM"),r3o=o(" (RoFormer model)"),t3o=l(),A2=a("li"),Zde=a("strong"),a3o=o("speech_to_text_2"),n3o=o(" \u2014 "),Kj=a("a"),s3o=o("Speech2Text2ForCausalLM"),l3o=o(" (Speech2Text2 model)"),i3o=l(),y2=a("li"),ece=a("strong"),d3o=o("transfo-xl"),c3o=o(" \u2014 "),Zj=a("a"),f3o=o("TransfoXLLMHeadModel"),m3o=o(" (Transformer-XL model)"),g3o=l(),L2=a("li"),oce=a("strong"),h3o=o("trocr"),p3o=o(" \u2014 "),eD=a("a"),u3o=o("TrOCRForCausalLM"),_3o=o(" (TrOCR model)"),b3o=l(),x2=a("li"),rce=a("strong"),v3o=o("xglm"),F3o=o(" \u2014 "),oD=a("a"),T3o=o("XGLMForCausalLM"),M3o=o(" (XGLM model)"),E3o=l(),$2=a("li"),tce=a("strong"),C3o=o("xlm"),w3o=o(" \u2014 "),rD=a("a"),A3o=o("XLMWithLMHeadModel"),y3o=o(" (XLM model)"),L3o=l(),k2=a("li"),ace=a("strong"),x3o=o("xlm-prophetnet"),$3o=o(" \u2014 "),tD=a("a"),k3o=o("XLMProphetNetForCausalLM"),S3o=o(" (XLMProphetNet model)"),R3o=l(),S2=a("li"),nce=a("strong"),P3o=o("xlm-roberta"),B3o=o(" \u2014 "),aD=a("a"),I3o=o("XLMRobertaForCausalLM"),q3o=o(" (XLM-RoBERTa model)"),N3o=l(),R2=a("li"),sce=a("strong"),j3o=o("xlm-roberta-xl"),D3o=o(" \u2014 "),nD=a("a"),G3o=o("XLMRobertaXLForCausalLM"),O3o=o(" (XLM-RoBERTa-XL model)"),V3o=l(),P2=a("li"),lce=a("strong"),X3o=o("xlnet"),z3o=o(" \u2014 "),sD=a("a"),W3o=o("XLNetLMHeadModel"),Q3o=o(" (XLNet model)"),H3o=l(),B2=a("p"),U3o=o("The model is set in evaluation mode by default using "),ice=a("code"),J3o=o("model.eval()"),Y3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),K3o=o("model.train()"),Z3o=l(),F(I2.$$.fragment),uNe=l(),Di=a("h2"),q2=a("a"),cce=a("span"),F(FA.$$.fragment),ewo=l(),fce=a("span"),owo=o("AutoModelForMaskedLM"),_Ne=l(),So=a("div"),F(TA.$$.fragment),rwo=l(),Gi=a("p"),two=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lD=a("a"),awo=o("from_pretrained()"),nwo=o(" class method or the "),iD=a("a"),swo=o("from_config()"),lwo=o(` class
method.`),iwo=l(),MA=a("p"),dwo=o("This class cannot be instantiated directly using "),mce=a("code"),cwo=o("__init__()"),fwo=o(" (throws an error)."),mwo=l(),it=a("div"),F(EA.$$.fragment),gwo=l(),gce=a("p"),hwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pwo=l(),Oi=a("p"),uwo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),_wo=o("not"),bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dD=a("a"),vwo=o("from_pretrained()"),Fwo=o(" to load the model weights."),Two=l(),F(N2.$$.fragment),Mwo=l(),Ze=a("div"),F(CA.$$.fragment),Ewo=l(),pce=a("p"),Cwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wwo=l(),Ba=a("p"),Awo=o("The model class to instantiate is selected based on the "),uce=a("code"),ywo=o("model_type"),Lwo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),kwo=o("pretrained_model_name_or_path"),Swo=o(":"),Rwo=l(),W=a("ul"),j2=a("li"),vce=a("strong"),Pwo=o("albert"),Bwo=o(" \u2014 "),cD=a("a"),Iwo=o("AlbertForMaskedLM"),qwo=o(" (ALBERT model)"),Nwo=l(),D2=a("li"),Fce=a("strong"),jwo=o("bart"),Dwo=o(" \u2014 "),fD=a("a"),Gwo=o("BartForConditionalGeneration"),Owo=o(" (BART model)"),Vwo=l(),G2=a("li"),Tce=a("strong"),Xwo=o("bert"),zwo=o(" \u2014 "),mD=a("a"),Wwo=o("BertForMaskedLM"),Qwo=o(" (BERT model)"),Hwo=l(),O2=a("li"),Mce=a("strong"),Uwo=o("big_bird"),Jwo=o(" \u2014 "),gD=a("a"),Ywo=o("BigBirdForMaskedLM"),Kwo=o(" (BigBird model)"),Zwo=l(),V2=a("li"),Ece=a("strong"),e0o=o("camembert"),o0o=o(" \u2014 "),hD=a("a"),r0o=o("CamembertForMaskedLM"),t0o=o(" (CamemBERT model)"),a0o=l(),X2=a("li"),Cce=a("strong"),n0o=o("convbert"),s0o=o(" \u2014 "),pD=a("a"),l0o=o("ConvBertForMaskedLM"),i0o=o(" (ConvBERT model)"),d0o=l(),z2=a("li"),wce=a("strong"),c0o=o("data2vec-text"),f0o=o(" \u2014 "),uD=a("a"),m0o=o("Data2VecTextForMaskedLM"),g0o=o(" (Data2VecText model)"),h0o=l(),W2=a("li"),Ace=a("strong"),p0o=o("deberta"),u0o=o(" \u2014 "),_D=a("a"),_0o=o("DebertaForMaskedLM"),b0o=o(" (DeBERTa model)"),v0o=l(),Q2=a("li"),yce=a("strong"),F0o=o("deberta-v2"),T0o=o(" \u2014 "),bD=a("a"),M0o=o("DebertaV2ForMaskedLM"),E0o=o(" (DeBERTa-v2 model)"),C0o=l(),H2=a("li"),Lce=a("strong"),w0o=o("distilbert"),A0o=o(" \u2014 "),vD=a("a"),y0o=o("DistilBertForMaskedLM"),L0o=o(" (DistilBERT model)"),x0o=l(),U2=a("li"),xce=a("strong"),$0o=o("electra"),k0o=o(" \u2014 "),FD=a("a"),S0o=o("ElectraForMaskedLM"),R0o=o(" (ELECTRA model)"),P0o=l(),J2=a("li"),$ce=a("strong"),B0o=o("flaubert"),I0o=o(" \u2014 "),TD=a("a"),q0o=o("FlaubertWithLMHeadModel"),N0o=o(" (FlauBERT model)"),j0o=l(),Y2=a("li"),kce=a("strong"),D0o=o("fnet"),G0o=o(" \u2014 "),MD=a("a"),O0o=o("FNetForMaskedLM"),V0o=o(" (FNet model)"),X0o=l(),K2=a("li"),Sce=a("strong"),z0o=o("funnel"),W0o=o(" \u2014 "),ED=a("a"),Q0o=o("FunnelForMaskedLM"),H0o=o(" (Funnel Transformer model)"),U0o=l(),Z2=a("li"),Rce=a("strong"),J0o=o("ibert"),Y0o=o(" \u2014 "),CD=a("a"),K0o=o("IBertForMaskedLM"),Z0o=o(" (I-BERT model)"),eAo=l(),e1=a("li"),Pce=a("strong"),oAo=o("layoutlm"),rAo=o(" \u2014 "),wD=a("a"),tAo=o("LayoutLMForMaskedLM"),aAo=o(" (LayoutLM model)"),nAo=l(),o1=a("li"),Bce=a("strong"),sAo=o("longformer"),lAo=o(" \u2014 "),AD=a("a"),iAo=o("LongformerForMaskedLM"),dAo=o(" (Longformer model)"),cAo=l(),r1=a("li"),Ice=a("strong"),fAo=o("mbart"),mAo=o(" \u2014 "),yD=a("a"),gAo=o("MBartForConditionalGeneration"),hAo=o(" (mBART model)"),pAo=l(),t1=a("li"),qce=a("strong"),uAo=o("megatron-bert"),_Ao=o(" \u2014 "),LD=a("a"),bAo=o("MegatronBertForMaskedLM"),vAo=o(" (MegatronBert model)"),FAo=l(),a1=a("li"),Nce=a("strong"),TAo=o("mobilebert"),MAo=o(" \u2014 "),xD=a("a"),EAo=o("MobileBertForMaskedLM"),CAo=o(" (MobileBERT model)"),wAo=l(),n1=a("li"),jce=a("strong"),AAo=o("mpnet"),yAo=o(" \u2014 "),$D=a("a"),LAo=o("MPNetForMaskedLM"),xAo=o(" (MPNet model)"),$Ao=l(),s1=a("li"),Dce=a("strong"),kAo=o("nystromformer"),SAo=o(" \u2014 "),kD=a("a"),RAo=o("NystromformerForMaskedLM"),PAo=o(" (Nystromformer model)"),BAo=l(),l1=a("li"),Gce=a("strong"),IAo=o("perceiver"),qAo=o(" \u2014 "),SD=a("a"),NAo=o("PerceiverForMaskedLM"),jAo=o(" (Perceiver model)"),DAo=l(),i1=a("li"),Oce=a("strong"),GAo=o("qdqbert"),OAo=o(" \u2014 "),RD=a("a"),VAo=o("QDQBertForMaskedLM"),XAo=o(" (QDQBert model)"),zAo=l(),d1=a("li"),Vce=a("strong"),WAo=o("reformer"),QAo=o(" \u2014 "),PD=a("a"),HAo=o("ReformerForMaskedLM"),UAo=o(" (Reformer model)"),JAo=l(),c1=a("li"),Xce=a("strong"),YAo=o("rembert"),KAo=o(" \u2014 "),BD=a("a"),ZAo=o("RemBertForMaskedLM"),eyo=o(" (RemBERT model)"),oyo=l(),f1=a("li"),zce=a("strong"),ryo=o("roberta"),tyo=o(" \u2014 "),ID=a("a"),ayo=o("RobertaForMaskedLM"),nyo=o(" (RoBERTa model)"),syo=l(),m1=a("li"),Wce=a("strong"),lyo=o("roformer"),iyo=o(" \u2014 "),qD=a("a"),dyo=o("RoFormerForMaskedLM"),cyo=o(" (RoFormer model)"),fyo=l(),g1=a("li"),Qce=a("strong"),myo=o("squeezebert"),gyo=o(" \u2014 "),ND=a("a"),hyo=o("SqueezeBertForMaskedLM"),pyo=o(" (SqueezeBERT model)"),uyo=l(),h1=a("li"),Hce=a("strong"),_yo=o("tapas"),byo=o(" \u2014 "),jD=a("a"),vyo=o("TapasForMaskedLM"),Fyo=o(" (TAPAS model)"),Tyo=l(),p1=a("li"),Uce=a("strong"),Myo=o("wav2vec2"),Eyo=o(" \u2014 "),Jce=a("code"),Cyo=o("Wav2Vec2ForMaskedLM"),wyo=o(" (Wav2Vec2 model)"),Ayo=l(),u1=a("li"),Yce=a("strong"),yyo=o("xlm"),Lyo=o(" \u2014 "),DD=a("a"),xyo=o("XLMWithLMHeadModel"),$yo=o(" (XLM model)"),kyo=l(),_1=a("li"),Kce=a("strong"),Syo=o("xlm-roberta"),Ryo=o(" \u2014 "),GD=a("a"),Pyo=o("XLMRobertaForMaskedLM"),Byo=o(" (XLM-RoBERTa model)"),Iyo=l(),b1=a("li"),Zce=a("strong"),qyo=o("xlm-roberta-xl"),Nyo=o(" \u2014 "),OD=a("a"),jyo=o("XLMRobertaXLForMaskedLM"),Dyo=o(" (XLM-RoBERTa-XL model)"),Gyo=l(),v1=a("li"),efe=a("strong"),Oyo=o("yoso"),Vyo=o(" \u2014 "),VD=a("a"),Xyo=o("YosoForMaskedLM"),zyo=o(" (YOSO model)"),Wyo=l(),F1=a("p"),Qyo=o("The model is set in evaluation mode by default using "),ofe=a("code"),Hyo=o("model.eval()"),Uyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=a("code"),Jyo=o("model.train()"),Yyo=l(),F(T1.$$.fragment),bNe=l(),Vi=a("h2"),M1=a("a"),tfe=a("span"),F(wA.$$.fragment),Kyo=l(),afe=a("span"),Zyo=o("AutoModelForSeq2SeqLM"),vNe=l(),Ro=a("div"),F(AA.$$.fragment),eLo=l(),Xi=a("p"),oLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XD=a("a"),rLo=o("from_pretrained()"),tLo=o(" class method or the "),zD=a("a"),aLo=o("from_config()"),nLo=o(` class
method.`),sLo=l(),yA=a("p"),lLo=o("This class cannot be instantiated directly using "),nfe=a("code"),iLo=o("__init__()"),dLo=o(" (throws an error)."),cLo=l(),dt=a("div"),F(LA.$$.fragment),fLo=l(),sfe=a("p"),mLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gLo=l(),zi=a("p"),hLo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),pLo=o("not"),uLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=a("a"),_Lo=o("from_pretrained()"),bLo=o(" to load the model weights."),vLo=l(),F(E1.$$.fragment),FLo=l(),eo=a("div"),F(xA.$$.fragment),TLo=l(),ife=a("p"),MLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ELo=l(),Ia=a("p"),CLo=o("The model class to instantiate is selected based on the "),dfe=a("code"),wLo=o("model_type"),ALo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),yLo=o("pretrained_model_name_or_path"),LLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),xLo=o("pretrained_model_name_or_path"),$Lo=o(":"),kLo=l(),ue=a("ul"),C1=a("li"),mfe=a("strong"),SLo=o("bart"),RLo=o(" \u2014 "),QD=a("a"),PLo=o("BartForConditionalGeneration"),BLo=o(" (BART model)"),ILo=l(),w1=a("li"),gfe=a("strong"),qLo=o("bigbird_pegasus"),NLo=o(" \u2014 "),HD=a("a"),jLo=o("BigBirdPegasusForConditionalGeneration"),DLo=o(" (BigBirdPegasus model)"),GLo=l(),A1=a("li"),hfe=a("strong"),OLo=o("blenderbot"),VLo=o(" \u2014 "),UD=a("a"),XLo=o("BlenderbotForConditionalGeneration"),zLo=o(" (Blenderbot model)"),WLo=l(),y1=a("li"),pfe=a("strong"),QLo=o("blenderbot-small"),HLo=o(" \u2014 "),JD=a("a"),ULo=o("BlenderbotSmallForConditionalGeneration"),JLo=o(" (BlenderbotSmall model)"),YLo=l(),L1=a("li"),ufe=a("strong"),KLo=o("encoder-decoder"),ZLo=o(" \u2014 "),YD=a("a"),exo=o("EncoderDecoderModel"),oxo=o(" (Encoder decoder model)"),rxo=l(),x1=a("li"),_fe=a("strong"),txo=o("fsmt"),axo=o(" \u2014 "),KD=a("a"),nxo=o("FSMTForConditionalGeneration"),sxo=o(" (FairSeq Machine-Translation model)"),lxo=l(),$1=a("li"),bfe=a("strong"),ixo=o("led"),dxo=o(" \u2014 "),ZD=a("a"),cxo=o("LEDForConditionalGeneration"),fxo=o(" (LED model)"),mxo=l(),k1=a("li"),vfe=a("strong"),gxo=o("m2m_100"),hxo=o(" \u2014 "),eG=a("a"),pxo=o("M2M100ForConditionalGeneration"),uxo=o(" (M2M100 model)"),_xo=l(),S1=a("li"),Ffe=a("strong"),bxo=o("marian"),vxo=o(" \u2014 "),oG=a("a"),Fxo=o("MarianMTModel"),Txo=o(" (Marian model)"),Mxo=l(),R1=a("li"),Tfe=a("strong"),Exo=o("mbart"),Cxo=o(" \u2014 "),rG=a("a"),wxo=o("MBartForConditionalGeneration"),Axo=o(" (mBART model)"),yxo=l(),P1=a("li"),Mfe=a("strong"),Lxo=o("mt5"),xxo=o(" \u2014 "),tG=a("a"),$xo=o("MT5ForConditionalGeneration"),kxo=o(" (mT5 model)"),Sxo=l(),B1=a("li"),Efe=a("strong"),Rxo=o("pegasus"),Pxo=o(" \u2014 "),aG=a("a"),Bxo=o("PegasusForConditionalGeneration"),Ixo=o(" (Pegasus model)"),qxo=l(),I1=a("li"),Cfe=a("strong"),Nxo=o("plbart"),jxo=o(" \u2014 "),nG=a("a"),Dxo=o("PLBartForConditionalGeneration"),Gxo=o(" (PLBart model)"),Oxo=l(),q1=a("li"),wfe=a("strong"),Vxo=o("prophetnet"),Xxo=o(" \u2014 "),sG=a("a"),zxo=o("ProphetNetForConditionalGeneration"),Wxo=o(" (ProphetNet model)"),Qxo=l(),N1=a("li"),Afe=a("strong"),Hxo=o("t5"),Uxo=o(" \u2014 "),lG=a("a"),Jxo=o("T5ForConditionalGeneration"),Yxo=o(" (T5 model)"),Kxo=l(),j1=a("li"),yfe=a("strong"),Zxo=o("xlm-prophetnet"),e9o=o(" \u2014 "),iG=a("a"),o9o=o("XLMProphetNetForConditionalGeneration"),r9o=o(" (XLMProphetNet model)"),t9o=l(),D1=a("p"),a9o=o("The model is set in evaluation mode by default using "),Lfe=a("code"),n9o=o("model.eval()"),s9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),l9o=o("model.train()"),i9o=l(),F(G1.$$.fragment),FNe=l(),Wi=a("h2"),O1=a("a"),$fe=a("span"),F($A.$$.fragment),d9o=l(),kfe=a("span"),c9o=o("AutoModelForSequenceClassification"),TNe=l(),Po=a("div"),F(kA.$$.fragment),f9o=l(),Qi=a("p"),m9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dG=a("a"),g9o=o("from_pretrained()"),h9o=o(" class method or the "),cG=a("a"),p9o=o("from_config()"),u9o=o(` class
method.`),_9o=l(),SA=a("p"),b9o=o("This class cannot be instantiated directly using "),Sfe=a("code"),v9o=o("__init__()"),F9o=o(" (throws an error)."),T9o=l(),ct=a("div"),F(RA.$$.fragment),M9o=l(),Rfe=a("p"),E9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C9o=l(),Hi=a("p"),w9o=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),A9o=o("not"),y9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),L9o=o("from_pretrained()"),x9o=o(" to load the model weights."),$9o=l(),F(V1.$$.fragment),k9o=l(),oo=a("div"),F(PA.$$.fragment),S9o=l(),Bfe=a("p"),R9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P9o=l(),qa=a("p"),B9o=o("The model class to instantiate is selected based on the "),Ife=a("code"),I9o=o("model_type"),q9o=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),N9o=o("pretrained_model_name_or_path"),j9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),D9o=o("pretrained_model_name_or_path"),G9o=o(":"),O9o=l(),q=a("ul"),X1=a("li"),jfe=a("strong"),V9o=o("albert"),X9o=o(" \u2014 "),mG=a("a"),z9o=o("AlbertForSequenceClassification"),W9o=o(" (ALBERT model)"),Q9o=l(),z1=a("li"),Dfe=a("strong"),H9o=o("bart"),U9o=o(" \u2014 "),gG=a("a"),J9o=o("BartForSequenceClassification"),Y9o=o(" (BART model)"),K9o=l(),W1=a("li"),Gfe=a("strong"),Z9o=o("bert"),e$o=o(" \u2014 "),hG=a("a"),o$o=o("BertForSequenceClassification"),r$o=o(" (BERT model)"),t$o=l(),Q1=a("li"),Ofe=a("strong"),a$o=o("big_bird"),n$o=o(" \u2014 "),pG=a("a"),s$o=o("BigBirdForSequenceClassification"),l$o=o(" (BigBird model)"),i$o=l(),H1=a("li"),Vfe=a("strong"),d$o=o("bigbird_pegasus"),c$o=o(" \u2014 "),uG=a("a"),f$o=o("BigBirdPegasusForSequenceClassification"),m$o=o(" (BigBirdPegasus model)"),g$o=l(),U1=a("li"),Xfe=a("strong"),h$o=o("camembert"),p$o=o(" \u2014 "),_G=a("a"),u$o=o("CamembertForSequenceClassification"),_$o=o(" (CamemBERT model)"),b$o=l(),J1=a("li"),zfe=a("strong"),v$o=o("canine"),F$o=o(" \u2014 "),bG=a("a"),T$o=o("CanineForSequenceClassification"),M$o=o(" (Canine model)"),E$o=l(),Y1=a("li"),Wfe=a("strong"),C$o=o("convbert"),w$o=o(" \u2014 "),vG=a("a"),A$o=o("ConvBertForSequenceClassification"),y$o=o(" (ConvBERT model)"),L$o=l(),K1=a("li"),Qfe=a("strong"),x$o=o("ctrl"),$$o=o(" \u2014 "),FG=a("a"),k$o=o("CTRLForSequenceClassification"),S$o=o(" (CTRL model)"),R$o=l(),Z1=a("li"),Hfe=a("strong"),P$o=o("data2vec-text"),B$o=o(" \u2014 "),TG=a("a"),I$o=o("Data2VecTextForSequenceClassification"),q$o=o(" (Data2VecText model)"),N$o=l(),eb=a("li"),Ufe=a("strong"),j$o=o("deberta"),D$o=o(" \u2014 "),MG=a("a"),G$o=o("DebertaForSequenceClassification"),O$o=o(" (DeBERTa model)"),V$o=l(),ob=a("li"),Jfe=a("strong"),X$o=o("deberta-v2"),z$o=o(" \u2014 "),EG=a("a"),W$o=o("DebertaV2ForSequenceClassification"),Q$o=o(" (DeBERTa-v2 model)"),H$o=l(),rb=a("li"),Yfe=a("strong"),U$o=o("distilbert"),J$o=o(" \u2014 "),CG=a("a"),Y$o=o("DistilBertForSequenceClassification"),K$o=o(" (DistilBERT model)"),Z$o=l(),tb=a("li"),Kfe=a("strong"),eko=o("electra"),oko=o(" \u2014 "),wG=a("a"),rko=o("ElectraForSequenceClassification"),tko=o(" (ELECTRA model)"),ako=l(),ab=a("li"),Zfe=a("strong"),nko=o("flaubert"),sko=o(" \u2014 "),AG=a("a"),lko=o("FlaubertForSequenceClassification"),iko=o(" (FlauBERT model)"),dko=l(),nb=a("li"),eme=a("strong"),cko=o("fnet"),fko=o(" \u2014 "),yG=a("a"),mko=o("FNetForSequenceClassification"),gko=o(" (FNet model)"),hko=l(),sb=a("li"),ome=a("strong"),pko=o("funnel"),uko=o(" \u2014 "),LG=a("a"),_ko=o("FunnelForSequenceClassification"),bko=o(" (Funnel Transformer model)"),vko=l(),lb=a("li"),rme=a("strong"),Fko=o("gpt2"),Tko=o(" \u2014 "),xG=a("a"),Mko=o("GPT2ForSequenceClassification"),Eko=o(" (OpenAI GPT-2 model)"),Cko=l(),ib=a("li"),tme=a("strong"),wko=o("gpt_neo"),Ako=o(" \u2014 "),$G=a("a"),yko=o("GPTNeoForSequenceClassification"),Lko=o(" (GPT Neo model)"),xko=l(),db=a("li"),ame=a("strong"),$ko=o("gptj"),kko=o(" \u2014 "),kG=a("a"),Sko=o("GPTJForSequenceClassification"),Rko=o(" (GPT-J model)"),Pko=l(),cb=a("li"),nme=a("strong"),Bko=o("ibert"),Iko=o(" \u2014 "),SG=a("a"),qko=o("IBertForSequenceClassification"),Nko=o(" (I-BERT model)"),jko=l(),fb=a("li"),sme=a("strong"),Dko=o("layoutlm"),Gko=o(" \u2014 "),RG=a("a"),Oko=o("LayoutLMForSequenceClassification"),Vko=o(" (LayoutLM model)"),Xko=l(),mb=a("li"),lme=a("strong"),zko=o("layoutlmv2"),Wko=o(" \u2014 "),PG=a("a"),Qko=o("LayoutLMv2ForSequenceClassification"),Hko=o(" (LayoutLMv2 model)"),Uko=l(),gb=a("li"),ime=a("strong"),Jko=o("led"),Yko=o(" \u2014 "),BG=a("a"),Kko=o("LEDForSequenceClassification"),Zko=o(" (LED model)"),eSo=l(),hb=a("li"),dme=a("strong"),oSo=o("longformer"),rSo=o(" \u2014 "),IG=a("a"),tSo=o("LongformerForSequenceClassification"),aSo=o(" (Longformer model)"),nSo=l(),pb=a("li"),cme=a("strong"),sSo=o("mbart"),lSo=o(" \u2014 "),qG=a("a"),iSo=o("MBartForSequenceClassification"),dSo=o(" (mBART model)"),cSo=l(),ub=a("li"),fme=a("strong"),fSo=o("megatron-bert"),mSo=o(" \u2014 "),NG=a("a"),gSo=o("MegatronBertForSequenceClassification"),hSo=o(" (MegatronBert model)"),pSo=l(),_b=a("li"),mme=a("strong"),uSo=o("mobilebert"),_So=o(" \u2014 "),jG=a("a"),bSo=o("MobileBertForSequenceClassification"),vSo=o(" (MobileBERT model)"),FSo=l(),bb=a("li"),gme=a("strong"),TSo=o("mpnet"),MSo=o(" \u2014 "),DG=a("a"),ESo=o("MPNetForSequenceClassification"),CSo=o(" (MPNet model)"),wSo=l(),vb=a("li"),hme=a("strong"),ASo=o("nystromformer"),ySo=o(" \u2014 "),GG=a("a"),LSo=o("NystromformerForSequenceClassification"),xSo=o(" (Nystromformer model)"),$So=l(),Fb=a("li"),pme=a("strong"),kSo=o("openai-gpt"),SSo=o(" \u2014 "),OG=a("a"),RSo=o("OpenAIGPTForSequenceClassification"),PSo=o(" (OpenAI GPT model)"),BSo=l(),Tb=a("li"),ume=a("strong"),ISo=o("perceiver"),qSo=o(" \u2014 "),VG=a("a"),NSo=o("PerceiverForSequenceClassification"),jSo=o(" (Perceiver model)"),DSo=l(),Mb=a("li"),_me=a("strong"),GSo=o("plbart"),OSo=o(" \u2014 "),XG=a("a"),VSo=o("PLBartForSequenceClassification"),XSo=o(" (PLBart model)"),zSo=l(),Eb=a("li"),bme=a("strong"),WSo=o("qdqbert"),QSo=o(" \u2014 "),zG=a("a"),HSo=o("QDQBertForSequenceClassification"),USo=o(" (QDQBert model)"),JSo=l(),Cb=a("li"),vme=a("strong"),YSo=o("reformer"),KSo=o(" \u2014 "),WG=a("a"),ZSo=o("ReformerForSequenceClassification"),eRo=o(" (Reformer model)"),oRo=l(),wb=a("li"),Fme=a("strong"),rRo=o("rembert"),tRo=o(" \u2014 "),QG=a("a"),aRo=o("RemBertForSequenceClassification"),nRo=o(" (RemBERT model)"),sRo=l(),Ab=a("li"),Tme=a("strong"),lRo=o("roberta"),iRo=o(" \u2014 "),HG=a("a"),dRo=o("RobertaForSequenceClassification"),cRo=o(" (RoBERTa model)"),fRo=l(),yb=a("li"),Mme=a("strong"),mRo=o("roformer"),gRo=o(" \u2014 "),UG=a("a"),hRo=o("RoFormerForSequenceClassification"),pRo=o(" (RoFormer model)"),uRo=l(),Lb=a("li"),Eme=a("strong"),_Ro=o("squeezebert"),bRo=o(" \u2014 "),JG=a("a"),vRo=o("SqueezeBertForSequenceClassification"),FRo=o(" (SqueezeBERT model)"),TRo=l(),xb=a("li"),Cme=a("strong"),MRo=o("tapas"),ERo=o(" \u2014 "),YG=a("a"),CRo=o("TapasForSequenceClassification"),wRo=o(" (TAPAS model)"),ARo=l(),$b=a("li"),wme=a("strong"),yRo=o("transfo-xl"),LRo=o(" \u2014 "),KG=a("a"),xRo=o("TransfoXLForSequenceClassification"),$Ro=o(" (Transformer-XL model)"),kRo=l(),kb=a("li"),Ame=a("strong"),SRo=o("xlm"),RRo=o(" \u2014 "),ZG=a("a"),PRo=o("XLMForSequenceClassification"),BRo=o(" (XLM model)"),IRo=l(),Sb=a("li"),yme=a("strong"),qRo=o("xlm-roberta"),NRo=o(" \u2014 "),eO=a("a"),jRo=o("XLMRobertaForSequenceClassification"),DRo=o(" (XLM-RoBERTa model)"),GRo=l(),Rb=a("li"),Lme=a("strong"),ORo=o("xlm-roberta-xl"),VRo=o(" \u2014 "),oO=a("a"),XRo=o("XLMRobertaXLForSequenceClassification"),zRo=o(" (XLM-RoBERTa-XL model)"),WRo=l(),Pb=a("li"),xme=a("strong"),QRo=o("xlnet"),HRo=o(" \u2014 "),rO=a("a"),URo=o("XLNetForSequenceClassification"),JRo=o(" (XLNet model)"),YRo=l(),Bb=a("li"),$me=a("strong"),KRo=o("yoso"),ZRo=o(" \u2014 "),tO=a("a"),ePo=o("YosoForSequenceClassification"),oPo=o(" (YOSO model)"),rPo=l(),Ib=a("p"),tPo=o("The model is set in evaluation mode by default using "),kme=a("code"),aPo=o("model.eval()"),nPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),sPo=o("model.train()"),lPo=l(),F(qb.$$.fragment),MNe=l(),Ui=a("h2"),Nb=a("a"),Rme=a("span"),F(BA.$$.fragment),iPo=l(),Pme=a("span"),dPo=o("AutoModelForMultipleChoice"),ENe=l(),Bo=a("div"),F(IA.$$.fragment),cPo=l(),Ji=a("p"),fPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=a("a"),mPo=o("from_pretrained()"),gPo=o(" class method or the "),nO=a("a"),hPo=o("from_config()"),pPo=o(` class
method.`),uPo=l(),qA=a("p"),_Po=o("This class cannot be instantiated directly using "),Bme=a("code"),bPo=o("__init__()"),vPo=o(" (throws an error)."),FPo=l(),ft=a("div"),F(NA.$$.fragment),TPo=l(),Ime=a("p"),MPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EPo=l(),Yi=a("p"),CPo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),wPo=o("not"),APo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),yPo=o("from_pretrained()"),LPo=o(" to load the model weights."),xPo=l(),F(jb.$$.fragment),$Po=l(),ro=a("div"),F(jA.$$.fragment),kPo=l(),Nme=a("p"),SPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RPo=l(),Na=a("p"),PPo=o("The model class to instantiate is selected based on the "),jme=a("code"),BPo=o("model_type"),IPo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),jPo=o("pretrained_model_name_or_path"),DPo=o(":"),GPo=l(),Y=a("ul"),Db=a("li"),Ome=a("strong"),OPo=o("albert"),VPo=o(" \u2014 "),lO=a("a"),XPo=o("AlbertForMultipleChoice"),zPo=o(" (ALBERT model)"),WPo=l(),Gb=a("li"),Vme=a("strong"),QPo=o("bert"),HPo=o(" \u2014 "),iO=a("a"),UPo=o("BertForMultipleChoice"),JPo=o(" (BERT model)"),YPo=l(),Ob=a("li"),Xme=a("strong"),KPo=o("big_bird"),ZPo=o(" \u2014 "),dO=a("a"),eBo=o("BigBirdForMultipleChoice"),oBo=o(" (BigBird model)"),rBo=l(),Vb=a("li"),zme=a("strong"),tBo=o("camembert"),aBo=o(" \u2014 "),cO=a("a"),nBo=o("CamembertForMultipleChoice"),sBo=o(" (CamemBERT model)"),lBo=l(),Xb=a("li"),Wme=a("strong"),iBo=o("canine"),dBo=o(" \u2014 "),fO=a("a"),cBo=o("CanineForMultipleChoice"),fBo=o(" (Canine model)"),mBo=l(),zb=a("li"),Qme=a("strong"),gBo=o("convbert"),hBo=o(" \u2014 "),mO=a("a"),pBo=o("ConvBertForMultipleChoice"),uBo=o(" (ConvBERT model)"),_Bo=l(),Wb=a("li"),Hme=a("strong"),bBo=o("data2vec-text"),vBo=o(" \u2014 "),gO=a("a"),FBo=o("Data2VecTextForMultipleChoice"),TBo=o(" (Data2VecText model)"),MBo=l(),Qb=a("li"),Ume=a("strong"),EBo=o("deberta-v2"),CBo=o(" \u2014 "),hO=a("a"),wBo=o("DebertaV2ForMultipleChoice"),ABo=o(" (DeBERTa-v2 model)"),yBo=l(),Hb=a("li"),Jme=a("strong"),LBo=o("distilbert"),xBo=o(" \u2014 "),pO=a("a"),$Bo=o("DistilBertForMultipleChoice"),kBo=o(" (DistilBERT model)"),SBo=l(),Ub=a("li"),Yme=a("strong"),RBo=o("electra"),PBo=o(" \u2014 "),uO=a("a"),BBo=o("ElectraForMultipleChoice"),IBo=o(" (ELECTRA model)"),qBo=l(),Jb=a("li"),Kme=a("strong"),NBo=o("flaubert"),jBo=o(" \u2014 "),_O=a("a"),DBo=o("FlaubertForMultipleChoice"),GBo=o(" (FlauBERT model)"),OBo=l(),Yb=a("li"),Zme=a("strong"),VBo=o("fnet"),XBo=o(" \u2014 "),bO=a("a"),zBo=o("FNetForMultipleChoice"),WBo=o(" (FNet model)"),QBo=l(),Kb=a("li"),ege=a("strong"),HBo=o("funnel"),UBo=o(" \u2014 "),vO=a("a"),JBo=o("FunnelForMultipleChoice"),YBo=o(" (Funnel Transformer model)"),KBo=l(),Zb=a("li"),oge=a("strong"),ZBo=o("ibert"),eIo=o(" \u2014 "),FO=a("a"),oIo=o("IBertForMultipleChoice"),rIo=o(" (I-BERT model)"),tIo=l(),ev=a("li"),rge=a("strong"),aIo=o("longformer"),nIo=o(" \u2014 "),TO=a("a"),sIo=o("LongformerForMultipleChoice"),lIo=o(" (Longformer model)"),iIo=l(),ov=a("li"),tge=a("strong"),dIo=o("megatron-bert"),cIo=o(" \u2014 "),MO=a("a"),fIo=o("MegatronBertForMultipleChoice"),mIo=o(" (MegatronBert model)"),gIo=l(),rv=a("li"),age=a("strong"),hIo=o("mobilebert"),pIo=o(" \u2014 "),EO=a("a"),uIo=o("MobileBertForMultipleChoice"),_Io=o(" (MobileBERT model)"),bIo=l(),tv=a("li"),nge=a("strong"),vIo=o("mpnet"),FIo=o(" \u2014 "),CO=a("a"),TIo=o("MPNetForMultipleChoice"),MIo=o(" (MPNet model)"),EIo=l(),av=a("li"),sge=a("strong"),CIo=o("nystromformer"),wIo=o(" \u2014 "),wO=a("a"),AIo=o("NystromformerForMultipleChoice"),yIo=o(" (Nystromformer model)"),LIo=l(),nv=a("li"),lge=a("strong"),xIo=o("qdqbert"),$Io=o(" \u2014 "),AO=a("a"),kIo=o("QDQBertForMultipleChoice"),SIo=o(" (QDQBert model)"),RIo=l(),sv=a("li"),ige=a("strong"),PIo=o("rembert"),BIo=o(" \u2014 "),yO=a("a"),IIo=o("RemBertForMultipleChoice"),qIo=o(" (RemBERT model)"),NIo=l(),lv=a("li"),dge=a("strong"),jIo=o("roberta"),DIo=o(" \u2014 "),LO=a("a"),GIo=o("RobertaForMultipleChoice"),OIo=o(" (RoBERTa model)"),VIo=l(),iv=a("li"),cge=a("strong"),XIo=o("roformer"),zIo=o(" \u2014 "),xO=a("a"),WIo=o("RoFormerForMultipleChoice"),QIo=o(" (RoFormer model)"),HIo=l(),dv=a("li"),fge=a("strong"),UIo=o("squeezebert"),JIo=o(" \u2014 "),$O=a("a"),YIo=o("SqueezeBertForMultipleChoice"),KIo=o(" (SqueezeBERT model)"),ZIo=l(),cv=a("li"),mge=a("strong"),eqo=o("xlm"),oqo=o(" \u2014 "),kO=a("a"),rqo=o("XLMForMultipleChoice"),tqo=o(" (XLM model)"),aqo=l(),fv=a("li"),gge=a("strong"),nqo=o("xlm-roberta"),sqo=o(" \u2014 "),SO=a("a"),lqo=o("XLMRobertaForMultipleChoice"),iqo=o(" (XLM-RoBERTa model)"),dqo=l(),mv=a("li"),hge=a("strong"),cqo=o("xlm-roberta-xl"),fqo=o(" \u2014 "),RO=a("a"),mqo=o("XLMRobertaXLForMultipleChoice"),gqo=o(" (XLM-RoBERTa-XL model)"),hqo=l(),gv=a("li"),pge=a("strong"),pqo=o("xlnet"),uqo=o(" \u2014 "),PO=a("a"),_qo=o("XLNetForMultipleChoice"),bqo=o(" (XLNet model)"),vqo=l(),hv=a("li"),uge=a("strong"),Fqo=o("yoso"),Tqo=o(" \u2014 "),BO=a("a"),Mqo=o("YosoForMultipleChoice"),Eqo=o(" (YOSO model)"),Cqo=l(),pv=a("p"),wqo=o("The model is set in evaluation mode by default using "),_ge=a("code"),Aqo=o("model.eval()"),yqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),Lqo=o("model.train()"),xqo=l(),F(uv.$$.fragment),CNe=l(),Ki=a("h2"),_v=a("a"),vge=a("span"),F(DA.$$.fragment),$qo=l(),Fge=a("span"),kqo=o("AutoModelForNextSentencePrediction"),wNe=l(),Io=a("div"),F(GA.$$.fragment),Sqo=l(),Zi=a("p"),Rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=a("a"),Pqo=o("from_pretrained()"),Bqo=o(" class method or the "),qO=a("a"),Iqo=o("from_config()"),qqo=o(` class
method.`),Nqo=l(),OA=a("p"),jqo=o("This class cannot be instantiated directly using "),Tge=a("code"),Dqo=o("__init__()"),Gqo=o(" (throws an error)."),Oqo=l(),mt=a("div"),F(VA.$$.fragment),Vqo=l(),Mge=a("p"),Xqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zqo=l(),ed=a("p"),Wqo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),Qqo=o("not"),Hqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),Uqo=o("from_pretrained()"),Jqo=o(" to load the model weights."),Yqo=l(),F(bv.$$.fragment),Kqo=l(),to=a("div"),F(XA.$$.fragment),Zqo=l(),Cge=a("p"),eNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oNo=l(),ja=a("p"),rNo=o("The model class to instantiate is selected based on the "),wge=a("code"),tNo=o("model_type"),aNo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),lNo=o("pretrained_model_name_or_path"),iNo=o(":"),dNo=l(),Zr=a("ul"),vv=a("li"),Lge=a("strong"),cNo=o("bert"),fNo=o(" \u2014 "),jO=a("a"),mNo=o("BertForNextSentencePrediction"),gNo=o(" (BERT model)"),hNo=l(),Fv=a("li"),xge=a("strong"),pNo=o("fnet"),uNo=o(" \u2014 "),DO=a("a"),_No=o("FNetForNextSentencePrediction"),bNo=o(" (FNet model)"),vNo=l(),Tv=a("li"),$ge=a("strong"),FNo=o("megatron-bert"),TNo=o(" \u2014 "),GO=a("a"),MNo=o("MegatronBertForNextSentencePrediction"),ENo=o(" (MegatronBert model)"),CNo=l(),Mv=a("li"),kge=a("strong"),wNo=o("mobilebert"),ANo=o(" \u2014 "),OO=a("a"),yNo=o("MobileBertForNextSentencePrediction"),LNo=o(" (MobileBERT model)"),xNo=l(),Ev=a("li"),Sge=a("strong"),$No=o("qdqbert"),kNo=o(" \u2014 "),VO=a("a"),SNo=o("QDQBertForNextSentencePrediction"),RNo=o(" (QDQBert model)"),PNo=l(),Cv=a("p"),BNo=o("The model is set in evaluation mode by default using "),Rge=a("code"),INo=o("model.eval()"),qNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),NNo=o("model.train()"),jNo=l(),F(wv.$$.fragment),ANe=l(),od=a("h2"),Av=a("a"),Bge=a("span"),F(zA.$$.fragment),DNo=l(),Ige=a("span"),GNo=o("AutoModelForTokenClassification"),yNe=l(),qo=a("div"),F(WA.$$.fragment),ONo=l(),rd=a("p"),VNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=a("a"),XNo=o("from_pretrained()"),zNo=o(" class method or the "),zO=a("a"),WNo=o("from_config()"),QNo=o(` class
method.`),HNo=l(),QA=a("p"),UNo=o("This class cannot be instantiated directly using "),qge=a("code"),JNo=o("__init__()"),YNo=o(" (throws an error)."),KNo=l(),gt=a("div"),F(HA.$$.fragment),ZNo=l(),Nge=a("p"),ejo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ojo=l(),td=a("p"),rjo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),tjo=o("not"),ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),njo=o("from_pretrained()"),sjo=o(" to load the model weights."),ljo=l(),F(yv.$$.fragment),ijo=l(),ao=a("div"),F(UA.$$.fragment),djo=l(),Dge=a("p"),cjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fjo=l(),Da=a("p"),mjo=o("The model class to instantiate is selected based on the "),Gge=a("code"),gjo=o("model_type"),hjo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),pjo=o("pretrained_model_name_or_path"),ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),_jo=o("pretrained_model_name_or_path"),bjo=o(":"),vjo=l(),U=a("ul"),Lv=a("li"),Xge=a("strong"),Fjo=o("albert"),Tjo=o(" \u2014 "),QO=a("a"),Mjo=o("AlbertForTokenClassification"),Ejo=o(" (ALBERT model)"),Cjo=l(),xv=a("li"),zge=a("strong"),wjo=o("bert"),Ajo=o(" \u2014 "),HO=a("a"),yjo=o("BertForTokenClassification"),Ljo=o(" (BERT model)"),xjo=l(),$v=a("li"),Wge=a("strong"),$jo=o("big_bird"),kjo=o(" \u2014 "),UO=a("a"),Sjo=o("BigBirdForTokenClassification"),Rjo=o(" (BigBird model)"),Pjo=l(),kv=a("li"),Qge=a("strong"),Bjo=o("camembert"),Ijo=o(" \u2014 "),JO=a("a"),qjo=o("CamembertForTokenClassification"),Njo=o(" (CamemBERT model)"),jjo=l(),Sv=a("li"),Hge=a("strong"),Djo=o("canine"),Gjo=o(" \u2014 "),YO=a("a"),Ojo=o("CanineForTokenClassification"),Vjo=o(" (Canine model)"),Xjo=l(),Rv=a("li"),Uge=a("strong"),zjo=o("convbert"),Wjo=o(" \u2014 "),KO=a("a"),Qjo=o("ConvBertForTokenClassification"),Hjo=o(" (ConvBERT model)"),Ujo=l(),Pv=a("li"),Jge=a("strong"),Jjo=o("data2vec-text"),Yjo=o(" \u2014 "),ZO=a("a"),Kjo=o("Data2VecTextForTokenClassification"),Zjo=o(" (Data2VecText model)"),eDo=l(),Bv=a("li"),Yge=a("strong"),oDo=o("deberta"),rDo=o(" \u2014 "),eV=a("a"),tDo=o("DebertaForTokenClassification"),aDo=o(" (DeBERTa model)"),nDo=l(),Iv=a("li"),Kge=a("strong"),sDo=o("deberta-v2"),lDo=o(" \u2014 "),oV=a("a"),iDo=o("DebertaV2ForTokenClassification"),dDo=o(" (DeBERTa-v2 model)"),cDo=l(),qv=a("li"),Zge=a("strong"),fDo=o("distilbert"),mDo=o(" \u2014 "),rV=a("a"),gDo=o("DistilBertForTokenClassification"),hDo=o(" (DistilBERT model)"),pDo=l(),Nv=a("li"),ehe=a("strong"),uDo=o("electra"),_Do=o(" \u2014 "),tV=a("a"),bDo=o("ElectraForTokenClassification"),vDo=o(" (ELECTRA model)"),FDo=l(),jv=a("li"),ohe=a("strong"),TDo=o("flaubert"),MDo=o(" \u2014 "),aV=a("a"),EDo=o("FlaubertForTokenClassification"),CDo=o(" (FlauBERT model)"),wDo=l(),Dv=a("li"),rhe=a("strong"),ADo=o("fnet"),yDo=o(" \u2014 "),nV=a("a"),LDo=o("FNetForTokenClassification"),xDo=o(" (FNet model)"),$Do=l(),Gv=a("li"),the=a("strong"),kDo=o("funnel"),SDo=o(" \u2014 "),sV=a("a"),RDo=o("FunnelForTokenClassification"),PDo=o(" (Funnel Transformer model)"),BDo=l(),Ov=a("li"),ahe=a("strong"),IDo=o("gpt2"),qDo=o(" \u2014 "),lV=a("a"),NDo=o("GPT2ForTokenClassification"),jDo=o(" (OpenAI GPT-2 model)"),DDo=l(),Vv=a("li"),nhe=a("strong"),GDo=o("ibert"),ODo=o(" \u2014 "),iV=a("a"),VDo=o("IBertForTokenClassification"),XDo=o(" (I-BERT model)"),zDo=l(),Xv=a("li"),she=a("strong"),WDo=o("layoutlm"),QDo=o(" \u2014 "),dV=a("a"),HDo=o("LayoutLMForTokenClassification"),UDo=o(" (LayoutLM model)"),JDo=l(),zv=a("li"),lhe=a("strong"),YDo=o("layoutlmv2"),KDo=o(" \u2014 "),cV=a("a"),ZDo=o("LayoutLMv2ForTokenClassification"),eGo=o(" (LayoutLMv2 model)"),oGo=l(),Wv=a("li"),ihe=a("strong"),rGo=o("longformer"),tGo=o(" \u2014 "),fV=a("a"),aGo=o("LongformerForTokenClassification"),nGo=o(" (Longformer model)"),sGo=l(),Qv=a("li"),dhe=a("strong"),lGo=o("megatron-bert"),iGo=o(" \u2014 "),mV=a("a"),dGo=o("MegatronBertForTokenClassification"),cGo=o(" (MegatronBert model)"),fGo=l(),Hv=a("li"),che=a("strong"),mGo=o("mobilebert"),gGo=o(" \u2014 "),gV=a("a"),hGo=o("MobileBertForTokenClassification"),pGo=o(" (MobileBERT model)"),uGo=l(),Uv=a("li"),fhe=a("strong"),_Go=o("mpnet"),bGo=o(" \u2014 "),hV=a("a"),vGo=o("MPNetForTokenClassification"),FGo=o(" (MPNet model)"),TGo=l(),Jv=a("li"),mhe=a("strong"),MGo=o("nystromformer"),EGo=o(" \u2014 "),pV=a("a"),CGo=o("NystromformerForTokenClassification"),wGo=o(" (Nystromformer model)"),AGo=l(),Yv=a("li"),ghe=a("strong"),yGo=o("qdqbert"),LGo=o(" \u2014 "),uV=a("a"),xGo=o("QDQBertForTokenClassification"),$Go=o(" (QDQBert model)"),kGo=l(),Kv=a("li"),hhe=a("strong"),SGo=o("rembert"),RGo=o(" \u2014 "),_V=a("a"),PGo=o("RemBertForTokenClassification"),BGo=o(" (RemBERT model)"),IGo=l(),Zv=a("li"),phe=a("strong"),qGo=o("roberta"),NGo=o(" \u2014 "),bV=a("a"),jGo=o("RobertaForTokenClassification"),DGo=o(" (RoBERTa model)"),GGo=l(),eF=a("li"),uhe=a("strong"),OGo=o("roformer"),VGo=o(" \u2014 "),vV=a("a"),XGo=o("RoFormerForTokenClassification"),zGo=o(" (RoFormer model)"),WGo=l(),oF=a("li"),_he=a("strong"),QGo=o("squeezebert"),HGo=o(" \u2014 "),FV=a("a"),UGo=o("SqueezeBertForTokenClassification"),JGo=o(" (SqueezeBERT model)"),YGo=l(),rF=a("li"),bhe=a("strong"),KGo=o("xlm"),ZGo=o(" \u2014 "),TV=a("a"),eOo=o("XLMForTokenClassification"),oOo=o(" (XLM model)"),rOo=l(),tF=a("li"),vhe=a("strong"),tOo=o("xlm-roberta"),aOo=o(" \u2014 "),MV=a("a"),nOo=o("XLMRobertaForTokenClassification"),sOo=o(" (XLM-RoBERTa model)"),lOo=l(),aF=a("li"),Fhe=a("strong"),iOo=o("xlm-roberta-xl"),dOo=o(" \u2014 "),EV=a("a"),cOo=o("XLMRobertaXLForTokenClassification"),fOo=o(" (XLM-RoBERTa-XL model)"),mOo=l(),nF=a("li"),The=a("strong"),gOo=o("xlnet"),hOo=o(" \u2014 "),CV=a("a"),pOo=o("XLNetForTokenClassification"),uOo=o(" (XLNet model)"),_Oo=l(),sF=a("li"),Mhe=a("strong"),bOo=o("yoso"),vOo=o(" \u2014 "),wV=a("a"),FOo=o("YosoForTokenClassification"),TOo=o(" (YOSO model)"),MOo=l(),lF=a("p"),EOo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),COo=o("model.eval()"),wOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),AOo=o("model.train()"),yOo=l(),F(iF.$$.fragment),LNe=l(),ad=a("h2"),dF=a("a"),whe=a("span"),F(JA.$$.fragment),LOo=l(),Ahe=a("span"),xOo=o("AutoModelForQuestionAnswering"),xNe=l(),No=a("div"),F(YA.$$.fragment),$Oo=l(),nd=a("p"),kOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AV=a("a"),SOo=o("from_pretrained()"),ROo=o(" class method or the "),yV=a("a"),POo=o("from_config()"),BOo=o(` class
method.`),IOo=l(),KA=a("p"),qOo=o("This class cannot be instantiated directly using "),yhe=a("code"),NOo=o("__init__()"),jOo=o(" (throws an error)."),DOo=l(),ht=a("div"),F(ZA.$$.fragment),GOo=l(),Lhe=a("p"),OOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VOo=l(),sd=a("p"),XOo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),zOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),QOo=o("from_pretrained()"),HOo=o(" to load the model weights."),UOo=l(),F(cF.$$.fragment),JOo=l(),no=a("div"),F(ey.$$.fragment),YOo=l(),$he=a("p"),KOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZOo=l(),Ga=a("p"),eVo=o("The model class to instantiate is selected based on the "),khe=a("code"),oVo=o("model_type"),rVo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),tVo=o("pretrained_model_name_or_path"),aVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(":"),lVo=l(),V=a("ul"),fF=a("li"),Phe=a("strong"),iVo=o("albert"),dVo=o(" \u2014 "),xV=a("a"),cVo=o("AlbertForQuestionAnswering"),fVo=o(" (ALBERT model)"),mVo=l(),mF=a("li"),Bhe=a("strong"),gVo=o("bart"),hVo=o(" \u2014 "),$V=a("a"),pVo=o("BartForQuestionAnswering"),uVo=o(" (BART model)"),_Vo=l(),gF=a("li"),Ihe=a("strong"),bVo=o("bert"),vVo=o(" \u2014 "),kV=a("a"),FVo=o("BertForQuestionAnswering"),TVo=o(" (BERT model)"),MVo=l(),hF=a("li"),qhe=a("strong"),EVo=o("big_bird"),CVo=o(" \u2014 "),SV=a("a"),wVo=o("BigBirdForQuestionAnswering"),AVo=o(" (BigBird model)"),yVo=l(),pF=a("li"),Nhe=a("strong"),LVo=o("bigbird_pegasus"),xVo=o(" \u2014 "),RV=a("a"),$Vo=o("BigBirdPegasusForQuestionAnswering"),kVo=o(" (BigBirdPegasus model)"),SVo=l(),uF=a("li"),jhe=a("strong"),RVo=o("camembert"),PVo=o(" \u2014 "),PV=a("a"),BVo=o("CamembertForQuestionAnswering"),IVo=o(" (CamemBERT model)"),qVo=l(),_F=a("li"),Dhe=a("strong"),NVo=o("canine"),jVo=o(" \u2014 "),BV=a("a"),DVo=o("CanineForQuestionAnswering"),GVo=o(" (Canine model)"),OVo=l(),bF=a("li"),Ghe=a("strong"),VVo=o("convbert"),XVo=o(" \u2014 "),IV=a("a"),zVo=o("ConvBertForQuestionAnswering"),WVo=o(" (ConvBERT model)"),QVo=l(),vF=a("li"),Ohe=a("strong"),HVo=o("data2vec-text"),UVo=o(" \u2014 "),qV=a("a"),JVo=o("Data2VecTextForQuestionAnswering"),YVo=o(" (Data2VecText model)"),KVo=l(),FF=a("li"),Vhe=a("strong"),ZVo=o("deberta"),eXo=o(" \u2014 "),NV=a("a"),oXo=o("DebertaForQuestionAnswering"),rXo=o(" (DeBERTa model)"),tXo=l(),TF=a("li"),Xhe=a("strong"),aXo=o("deberta-v2"),nXo=o(" \u2014 "),jV=a("a"),sXo=o("DebertaV2ForQuestionAnswering"),lXo=o(" (DeBERTa-v2 model)"),iXo=l(),MF=a("li"),zhe=a("strong"),dXo=o("distilbert"),cXo=o(" \u2014 "),DV=a("a"),fXo=o("DistilBertForQuestionAnswering"),mXo=o(" (DistilBERT model)"),gXo=l(),EF=a("li"),Whe=a("strong"),hXo=o("electra"),pXo=o(" \u2014 "),GV=a("a"),uXo=o("ElectraForQuestionAnswering"),_Xo=o(" (ELECTRA model)"),bXo=l(),CF=a("li"),Qhe=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),OV=a("a"),TXo=o("FlaubertForQuestionAnsweringSimple"),MXo=o(" (FlauBERT model)"),EXo=l(),wF=a("li"),Hhe=a("strong"),CXo=o("fnet"),wXo=o(" \u2014 "),VV=a("a"),AXo=o("FNetForQuestionAnswering"),yXo=o(" (FNet model)"),LXo=l(),AF=a("li"),Uhe=a("strong"),xXo=o("funnel"),$Xo=o(" \u2014 "),XV=a("a"),kXo=o("FunnelForQuestionAnswering"),SXo=o(" (Funnel Transformer model)"),RXo=l(),yF=a("li"),Jhe=a("strong"),PXo=o("gptj"),BXo=o(" \u2014 "),zV=a("a"),IXo=o("GPTJForQuestionAnswering"),qXo=o(" (GPT-J model)"),NXo=l(),LF=a("li"),Yhe=a("strong"),jXo=o("ibert"),DXo=o(" \u2014 "),WV=a("a"),GXo=o("IBertForQuestionAnswering"),OXo=o(" (I-BERT model)"),VXo=l(),xF=a("li"),Khe=a("strong"),XXo=o("layoutlmv2"),zXo=o(" \u2014 "),QV=a("a"),WXo=o("LayoutLMv2ForQuestionAnswering"),QXo=o(" (LayoutLMv2 model)"),HXo=l(),$F=a("li"),Zhe=a("strong"),UXo=o("led"),JXo=o(" \u2014 "),HV=a("a"),YXo=o("LEDForQuestionAnswering"),KXo=o(" (LED model)"),ZXo=l(),kF=a("li"),epe=a("strong"),ezo=o("longformer"),ozo=o(" \u2014 "),UV=a("a"),rzo=o("LongformerForQuestionAnswering"),tzo=o(" (Longformer model)"),azo=l(),SF=a("li"),ope=a("strong"),nzo=o("lxmert"),szo=o(" \u2014 "),JV=a("a"),lzo=o("LxmertForQuestionAnswering"),izo=o(" (LXMERT model)"),dzo=l(),RF=a("li"),rpe=a("strong"),czo=o("mbart"),fzo=o(" \u2014 "),YV=a("a"),mzo=o("MBartForQuestionAnswering"),gzo=o(" (mBART model)"),hzo=l(),PF=a("li"),tpe=a("strong"),pzo=o("megatron-bert"),uzo=o(" \u2014 "),KV=a("a"),_zo=o("MegatronBertForQuestionAnswering"),bzo=o(" (MegatronBert model)"),vzo=l(),BF=a("li"),ape=a("strong"),Fzo=o("mobilebert"),Tzo=o(" \u2014 "),ZV=a("a"),Mzo=o("MobileBertForQuestionAnswering"),Ezo=o(" (MobileBERT model)"),Czo=l(),IF=a("li"),npe=a("strong"),wzo=o("mpnet"),Azo=o(" \u2014 "),eX=a("a"),yzo=o("MPNetForQuestionAnswering"),Lzo=o(" (MPNet model)"),xzo=l(),qF=a("li"),spe=a("strong"),$zo=o("nystromformer"),kzo=o(" \u2014 "),oX=a("a"),Szo=o("NystromformerForQuestionAnswering"),Rzo=o(" (Nystromformer model)"),Pzo=l(),NF=a("li"),lpe=a("strong"),Bzo=o("qdqbert"),Izo=o(" \u2014 "),rX=a("a"),qzo=o("QDQBertForQuestionAnswering"),Nzo=o(" (QDQBert model)"),jzo=l(),jF=a("li"),ipe=a("strong"),Dzo=o("reformer"),Gzo=o(" \u2014 "),tX=a("a"),Ozo=o("ReformerForQuestionAnswering"),Vzo=o(" (Reformer model)"),Xzo=l(),DF=a("li"),dpe=a("strong"),zzo=o("rembert"),Wzo=o(" \u2014 "),aX=a("a"),Qzo=o("RemBertForQuestionAnswering"),Hzo=o(" (RemBERT model)"),Uzo=l(),GF=a("li"),cpe=a("strong"),Jzo=o("roberta"),Yzo=o(" \u2014 "),nX=a("a"),Kzo=o("RobertaForQuestionAnswering"),Zzo=o(" (RoBERTa model)"),eWo=l(),OF=a("li"),fpe=a("strong"),oWo=o("roformer"),rWo=o(" \u2014 "),sX=a("a"),tWo=o("RoFormerForQuestionAnswering"),aWo=o(" (RoFormer model)"),nWo=l(),VF=a("li"),mpe=a("strong"),sWo=o("splinter"),lWo=o(" \u2014 "),lX=a("a"),iWo=o("SplinterForQuestionAnswering"),dWo=o(" (Splinter model)"),cWo=l(),XF=a("li"),gpe=a("strong"),fWo=o("squeezebert"),mWo=o(" \u2014 "),iX=a("a"),gWo=o("SqueezeBertForQuestionAnswering"),hWo=o(" (SqueezeBERT model)"),pWo=l(),zF=a("li"),hpe=a("strong"),uWo=o("xlm"),_Wo=o(" \u2014 "),dX=a("a"),bWo=o("XLMForQuestionAnsweringSimple"),vWo=o(" (XLM model)"),FWo=l(),WF=a("li"),ppe=a("strong"),TWo=o("xlm-roberta"),MWo=o(" \u2014 "),cX=a("a"),EWo=o("XLMRobertaForQuestionAnswering"),CWo=o(" (XLM-RoBERTa model)"),wWo=l(),QF=a("li"),upe=a("strong"),AWo=o("xlm-roberta-xl"),yWo=o(" \u2014 "),fX=a("a"),LWo=o("XLMRobertaXLForQuestionAnswering"),xWo=o(" (XLM-RoBERTa-XL model)"),$Wo=l(),HF=a("li"),_pe=a("strong"),kWo=o("xlnet"),SWo=o(" \u2014 "),mX=a("a"),RWo=o("XLNetForQuestionAnsweringSimple"),PWo=o(" (XLNet model)"),BWo=l(),UF=a("li"),bpe=a("strong"),IWo=o("yoso"),qWo=o(" \u2014 "),gX=a("a"),NWo=o("YosoForQuestionAnswering"),jWo=o(" (YOSO model)"),DWo=l(),JF=a("p"),GWo=o("The model is set in evaluation mode by default using "),vpe=a("code"),OWo=o("model.eval()"),VWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),XWo=o("model.train()"),zWo=l(),F(YF.$$.fragment),$Ne=l(),ld=a("h2"),KF=a("a"),Tpe=a("span"),F(oy.$$.fragment),WWo=l(),Mpe=a("span"),QWo=o("AutoModelForTableQuestionAnswering"),kNe=l(),jo=a("div"),F(ry.$$.fragment),HWo=l(),id=a("p"),UWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=a("a"),JWo=o("from_pretrained()"),YWo=o(" class method or the "),pX=a("a"),KWo=o("from_config()"),ZWo=o(` class
method.`),eQo=l(),ty=a("p"),oQo=o("This class cannot be instantiated directly using "),Epe=a("code"),rQo=o("__init__()"),tQo=o(" (throws an error)."),aQo=l(),pt=a("div"),F(ay.$$.fragment),nQo=l(),Cpe=a("p"),sQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lQo=l(),dd=a("p"),iQo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),dQo=o("not"),cQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),fQo=o("from_pretrained()"),mQo=o(" to load the model weights."),gQo=l(),F(ZF.$$.fragment),hQo=l(),so=a("div"),F(ny.$$.fragment),pQo=l(),Ape=a("p"),uQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Qo=l(),Oa=a("p"),bQo=o("The model class to instantiate is selected based on the "),ype=a("code"),vQo=o("model_type"),FQo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),EQo=o("pretrained_model_name_or_path"),CQo=o(":"),wQo=l(),$pe=a("ul"),e6=a("li"),kpe=a("strong"),AQo=o("tapas"),yQo=o(" \u2014 "),_X=a("a"),LQo=o("TapasForQuestionAnswering"),xQo=o(" (TAPAS model)"),$Qo=l(),o6=a("p"),kQo=o("The model is set in evaluation mode by default using "),Spe=a("code"),SQo=o("model.eval()"),RQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),PQo=o("model.train()"),BQo=l(),F(r6.$$.fragment),SNe=l(),cd=a("h2"),t6=a("a"),Ppe=a("span"),F(sy.$$.fragment),IQo=l(),Bpe=a("span"),qQo=o("AutoModelForImageClassification"),RNe=l(),Do=a("div"),F(ly.$$.fragment),NQo=l(),fd=a("p"),jQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),DQo=o("from_pretrained()"),GQo=o(" class method or the "),vX=a("a"),OQo=o("from_config()"),VQo=o(` class
method.`),XQo=l(),iy=a("p"),zQo=o("This class cannot be instantiated directly using "),Ipe=a("code"),WQo=o("__init__()"),QQo=o(" (throws an error)."),HQo=l(),ut=a("div"),F(dy.$$.fragment),UQo=l(),qpe=a("p"),JQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YQo=l(),md=a("p"),KQo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),ZQo=o("not"),eHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),oHo=o("from_pretrained()"),rHo=o(" to load the model weights."),tHo=l(),F(a6.$$.fragment),aHo=l(),lo=a("div"),F(cy.$$.fragment),nHo=l(),jpe=a("p"),sHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lHo=l(),Va=a("p"),iHo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),dHo=o("model_type"),cHo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),gHo=o("pretrained_model_name_or_path"),hHo=o(":"),pHo=l(),Fe=a("ul"),n6=a("li"),Vpe=a("strong"),uHo=o("beit"),_Ho=o(" \u2014 "),TX=a("a"),bHo=o("BeitForImageClassification"),vHo=o(" (BEiT model)"),FHo=l(),s6=a("li"),Xpe=a("strong"),THo=o("convnext"),MHo=o(" \u2014 "),MX=a("a"),EHo=o("ConvNextForImageClassification"),CHo=o(" (ConvNext model)"),wHo=l(),l6=a("li"),zpe=a("strong"),AHo=o("cvt"),yHo=o(" \u2014 "),EX=a("a"),LHo=o("CvtForImageClassification"),xHo=o(" (CvT model)"),$Ho=l(),i6=a("li"),Wpe=a("strong"),kHo=o("data2vec-vision"),SHo=o(" \u2014 "),CX=a("a"),RHo=o("Data2VecVisionForImageClassification"),PHo=o(" (Data2VecVision model)"),BHo=l(),Ds=a("li"),Qpe=a("strong"),IHo=o("deit"),qHo=o(" \u2014 "),wX=a("a"),NHo=o("DeiTForImageClassification"),jHo=o(" or "),AX=a("a"),DHo=o("DeiTForImageClassificationWithTeacher"),GHo=o(" (DeiT model)"),OHo=l(),d6=a("li"),Hpe=a("strong"),VHo=o("imagegpt"),XHo=o(" \u2014 "),yX=a("a"),zHo=o("ImageGPTForImageClassification"),WHo=o(" (ImageGPT model)"),QHo=l(),_t=a("li"),Upe=a("strong"),HHo=o("perceiver"),UHo=o(" \u2014 "),LX=a("a"),JHo=o("PerceiverForImageClassificationLearned"),YHo=o(" or "),xX=a("a"),KHo=o("PerceiverForImageClassificationFourier"),ZHo=o(" or "),$X=a("a"),eUo=o("PerceiverForImageClassificationConvProcessing"),oUo=o(" (Perceiver model)"),rUo=l(),c6=a("li"),Jpe=a("strong"),tUo=o("poolformer"),aUo=o(" \u2014 "),kX=a("a"),nUo=o("PoolFormerForImageClassification"),sUo=o(" (PoolFormer model)"),lUo=l(),f6=a("li"),Ype=a("strong"),iUo=o("regnet"),dUo=o(" \u2014 "),SX=a("a"),cUo=o("RegNetForImageClassification"),fUo=o(" (RegNet model)"),mUo=l(),m6=a("li"),Kpe=a("strong"),gUo=o("resnet"),hUo=o(" \u2014 "),RX=a("a"),pUo=o("ResNetForImageClassification"),uUo=o(" (ResNet model)"),_Uo=l(),g6=a("li"),Zpe=a("strong"),bUo=o("segformer"),vUo=o(" \u2014 "),PX=a("a"),FUo=o("SegformerForImageClassification"),TUo=o(" (SegFormer model)"),MUo=l(),h6=a("li"),eue=a("strong"),EUo=o("swin"),CUo=o(" \u2014 "),BX=a("a"),wUo=o("SwinForImageClassification"),AUo=o(" (Swin model)"),yUo=l(),p6=a("li"),oue=a("strong"),LUo=o("van"),xUo=o(" \u2014 "),IX=a("a"),$Uo=o("VanForImageClassification"),kUo=o(" (VAN model)"),SUo=l(),u6=a("li"),rue=a("strong"),RUo=o("vit"),PUo=o(" \u2014 "),qX=a("a"),BUo=o("ViTForImageClassification"),IUo=o(" (ViT model)"),qUo=l(),_6=a("p"),NUo=o("The model is set in evaluation mode by default using "),tue=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),GUo=o("model.train()"),OUo=l(),F(b6.$$.fragment),PNe=l(),gd=a("h2"),v6=a("a"),nue=a("span"),F(fy.$$.fragment),VUo=l(),sue=a("span"),XUo=o("AutoModelForVision2Seq"),BNe=l(),Go=a("div"),F(my.$$.fragment),zUo=l(),hd=a("p"),WUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=a("a"),QUo=o("from_pretrained()"),HUo=o(" class method or the "),jX=a("a"),UUo=o("from_config()"),JUo=o(` class
method.`),YUo=l(),gy=a("p"),KUo=o("This class cannot be instantiated directly using "),lue=a("code"),ZUo=o("__init__()"),eJo=o(" (throws an error)."),oJo=l(),bt=a("div"),F(hy.$$.fragment),rJo=l(),iue=a("p"),tJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aJo=l(),pd=a("p"),nJo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),sJo=o("not"),lJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),iJo=o("from_pretrained()"),dJo=o(" to load the model weights."),cJo=l(),F(F6.$$.fragment),fJo=l(),io=a("div"),F(py.$$.fragment),mJo=l(),cue=a("p"),gJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hJo=l(),Xa=a("p"),pJo=o("The model class to instantiate is selected based on the "),fue=a("code"),uJo=o("model_type"),_Jo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),hue=a("ul"),T6=a("li"),pue=a("strong"),EJo=o("vision-encoder-decoder"),CJo=o(" \u2014 "),GX=a("a"),wJo=o("VisionEncoderDecoderModel"),AJo=o(" (Vision Encoder decoder model)"),yJo=l(),M6=a("p"),LJo=o("The model is set in evaluation mode by default using "),uue=a("code"),xJo=o("model.eval()"),$Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=a("code"),kJo=o("model.train()"),SJo=l(),F(E6.$$.fragment),INe=l(),ud=a("h2"),C6=a("a"),bue=a("span"),F(uy.$$.fragment),RJo=l(),vue=a("span"),PJo=o("AutoModelForVisualQuestionAnswering"),qNe=l(),Oo=a("div"),F(_y.$$.fragment),BJo=l(),_d=a("p"),IJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OX=a("a"),qJo=o("from_pretrained()"),NJo=o(" class method or the "),VX=a("a"),jJo=o("from_config()"),DJo=o(` class
method.`),GJo=l(),by=a("p"),OJo=o("This class cannot be instantiated directly using "),Fue=a("code"),VJo=o("__init__()"),XJo=o(" (throws an error)."),zJo=l(),vt=a("div"),F(vy.$$.fragment),WJo=l(),Tue=a("p"),QJo=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),HJo=l(),bd=a("p"),UJo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),JJo=o("not"),YJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),KJo=o("from_pretrained()"),ZJo=o(" to load the model weights."),eYo=l(),F(w6.$$.fragment),oYo=l(),co=a("div"),F(Fy.$$.fragment),rYo=l(),Eue=a("p"),tYo=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),aYo=l(),za=a("p"),nYo=o("The model class to instantiate is selected based on the "),Cue=a("code"),sYo=o("model_type"),lYo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(":"),mYo=l(),yue=a("ul"),A6=a("li"),Lue=a("strong"),gYo=o("vilt"),hYo=o(" \u2014 "),zX=a("a"),pYo=o("ViltForQuestionAnswering"),uYo=o(" (ViLT model)"),_Yo=l(),y6=a("p"),bYo=o("The model is set in evaluation mode by default using "),xue=a("code"),vYo=o("model.eval()"),FYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),TYo=o("model.train()"),MYo=l(),F(L6.$$.fragment),NNe=l(),vd=a("h2"),x6=a("a"),kue=a("span"),F(Ty.$$.fragment),EYo=l(),Sue=a("span"),CYo=o("AutoModelForAudioClassification"),jNe=l(),Vo=a("div"),F(My.$$.fragment),wYo=l(),Fd=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=a("a"),yYo=o("from_pretrained()"),LYo=o(" class method or the "),QX=a("a"),xYo=o("from_config()"),$Yo=o(` class
method.`),kYo=l(),Ey=a("p"),SYo=o("This class cannot be instantiated directly using "),Rue=a("code"),RYo=o("__init__()"),PYo=o(" (throws an error)."),BYo=l(),Ft=a("div"),F(Cy.$$.fragment),IYo=l(),Pue=a("p"),qYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),NYo=l(),Td=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),F($6.$$.fragment),zYo=l(),fo=a("div"),F(wy.$$.fragment),WYo=l(),Iue=a("p"),QYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),HYo=l(),Wa=a("p"),UYo=o("The model class to instantiate is selected based on the "),que=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),ke=a("ul"),k6=a("li"),Due=a("strong"),tKo=o("data2vec-audio"),aKo=o(" \u2014 "),UX=a("a"),nKo=o("Data2VecAudioForSequenceClassification"),sKo=o(" (Data2VecAudio model)"),lKo=l(),S6=a("li"),Gue=a("strong"),iKo=o("hubert"),dKo=o(" \u2014 "),JX=a("a"),cKo=o("HubertForSequenceClassification"),fKo=o(" (Hubert model)"),mKo=l(),R6=a("li"),Oue=a("strong"),gKo=o("sew"),hKo=o(" \u2014 "),YX=a("a"),pKo=o("SEWForSequenceClassification"),uKo=o(" (SEW model)"),_Ko=l(),P6=a("li"),Vue=a("strong"),bKo=o("sew-d"),vKo=o(" \u2014 "),KX=a("a"),FKo=o("SEWDForSequenceClassification"),TKo=o(" (SEW-D model)"),MKo=l(),B6=a("li"),Xue=a("strong"),EKo=o("unispeech"),CKo=o(" \u2014 "),ZX=a("a"),wKo=o("UniSpeechForSequenceClassification"),AKo=o(" (UniSpeech model)"),yKo=l(),I6=a("li"),zue=a("strong"),LKo=o("unispeech-sat"),xKo=o(" \u2014 "),ez=a("a"),$Ko=o("UniSpeechSatForSequenceClassification"),kKo=o(" (UniSpeechSat model)"),SKo=l(),q6=a("li"),Wue=a("strong"),RKo=o("wav2vec2"),PKo=o(" \u2014 "),oz=a("a"),BKo=o("Wav2Vec2ForSequenceClassification"),IKo=o(" (Wav2Vec2 model)"),qKo=l(),N6=a("li"),Que=a("strong"),NKo=o("wav2vec2-conformer"),jKo=o(" \u2014 "),rz=a("a"),DKo=o("Wav2Vec2ConformerForSequenceClassification"),GKo=o(" (Wav2Vec2-Conformer model)"),OKo=l(),j6=a("li"),Hue=a("strong"),VKo=o("wavlm"),XKo=o(" \u2014 "),tz=a("a"),zKo=o("WavLMForSequenceClassification"),WKo=o(" (WavLM model)"),QKo=l(),D6=a("p"),HKo=o("The model is set in evaluation mode by default using "),Uue=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),YKo=o("model.train()"),KKo=l(),F(G6.$$.fragment),DNe=l(),Md=a("h2"),O6=a("a"),Yue=a("span"),F(Ay.$$.fragment),ZKo=l(),Kue=a("span"),eZo=o("AutoModelForAudioFrameClassification"),GNe=l(),Xo=a("div"),F(yy.$$.fragment),oZo=l(),Ed=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),nz=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),Ly=a("p"),iZo=o("This class cannot be instantiated directly using "),Zue=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),Tt=a("div"),F(xy.$$.fragment),mZo=l(),e_e=a("p"),gZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hZo=l(),Cd=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),uZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(V6.$$.fragment),TZo=l(),mo=a("div"),F($y.$$.fragment),MZo=l(),r_e=a("p"),EZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),CZo=l(),Qa=a("p"),wZo=o("The model class to instantiate is selected based on the "),t_e=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),et=a("ul"),X6=a("li"),s_e=a("strong"),RZo=o("data2vec-audio"),PZo=o(" \u2014 "),lz=a("a"),BZo=o("Data2VecAudioForAudioFrameClassification"),IZo=o(" (Data2VecAudio model)"),qZo=l(),z6=a("li"),l_e=a("strong"),NZo=o("unispeech-sat"),jZo=o(" \u2014 "),iz=a("a"),DZo=o("UniSpeechSatForAudioFrameClassification"),GZo=o(" (UniSpeechSat model)"),OZo=l(),W6=a("li"),i_e=a("strong"),VZo=o("wav2vec2"),XZo=o(" \u2014 "),dz=a("a"),zZo=o("Wav2Vec2ForAudioFrameClassification"),WZo=o(" (Wav2Vec2 model)"),QZo=l(),Q6=a("li"),d_e=a("strong"),HZo=o("wav2vec2-conformer"),UZo=o(" \u2014 "),cz=a("a"),JZo=o("Wav2Vec2ConformerForAudioFrameClassification"),YZo=o(" (Wav2Vec2-Conformer model)"),KZo=l(),H6=a("li"),c_e=a("strong"),ZZo=o("wavlm"),eer=o(" \u2014 "),fz=a("a"),oer=o("WavLMForAudioFrameClassification"),rer=o(" (WavLM model)"),ter=l(),U6=a("p"),aer=o("The model is set in evaluation mode by default using "),f_e=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),ler=o("model.train()"),ier=l(),F(J6.$$.fragment),ONe=l(),wd=a("h2"),Y6=a("a"),g_e=a("span"),F(ky.$$.fragment),der=l(),h_e=a("span"),cer=o("AutoModelForCTC"),VNe=l(),zo=a("div"),F(Sy.$$.fragment),fer=l(),Ad=a("p"),mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),gz=a("a"),per=o("from_config()"),uer=o(` class
method.`),_er=l(),Ry=a("p"),ber=o("This class cannot be instantiated directly using "),p_e=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),Mt=a("div"),F(Py.$$.fragment),Mer=l(),u_e=a("p"),Eer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cer=l(),yd=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),Aer=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Ler=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(K6.$$.fragment),ker=l(),go=a("div"),F(By.$$.fragment),Ser=l(),b_e=a("p"),Rer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Per=l(),Ha=a("p"),Ber=o("The model class to instantiate is selected based on the "),v_e=a("code"),Ier=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Ner=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),Se=a("ul"),Z6=a("li"),M_e=a("strong"),Ver=o("data2vec-audio"),Xer=o(" \u2014 "),pz=a("a"),zer=o("Data2VecAudioForCTC"),Wer=o(" (Data2VecAudio model)"),Qer=l(),eT=a("li"),E_e=a("strong"),Her=o("hubert"),Uer=o(" \u2014 "),uz=a("a"),Jer=o("HubertForCTC"),Yer=o(" (Hubert model)"),Ker=l(),oT=a("li"),C_e=a("strong"),Zer=o("sew"),eor=o(" \u2014 "),_z=a("a"),oor=o("SEWForCTC"),ror=o(" (SEW model)"),tor=l(),rT=a("li"),w_e=a("strong"),aor=o("sew-d"),nor=o(" \u2014 "),bz=a("a"),sor=o("SEWDForCTC"),lor=o(" (SEW-D model)"),ior=l(),tT=a("li"),A_e=a("strong"),dor=o("unispeech"),cor=o(" \u2014 "),vz=a("a"),mor=o("UniSpeechForCTC"),gor=o(" (UniSpeech model)"),hor=l(),aT=a("li"),y_e=a("strong"),por=o("unispeech-sat"),uor=o(" \u2014 "),Fz=a("a"),_or=o("UniSpeechSatForCTC"),bor=o(" (UniSpeechSat model)"),vor=l(),nT=a("li"),L_e=a("strong"),For=o("wav2vec2"),Tor=o(" \u2014 "),Tz=a("a"),Mor=o("Wav2Vec2ForCTC"),Eor=o(" (Wav2Vec2 model)"),Cor=l(),sT=a("li"),x_e=a("strong"),wor=o("wav2vec2-conformer"),Aor=o(" \u2014 "),Mz=a("a"),yor=o("Wav2Vec2ConformerForCTC"),Lor=o(" (Wav2Vec2-Conformer model)"),xor=l(),lT=a("li"),$_e=a("strong"),$or=o("wavlm"),kor=o(" \u2014 "),Ez=a("a"),Sor=o("WavLMForCTC"),Ror=o(" (WavLM model)"),Por=l(),iT=a("p"),Bor=o("The model is set in evaluation mode by default using "),k_e=a("code"),Ior=o("model.eval()"),qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),Nor=o("model.train()"),jor=l(),F(dT.$$.fragment),XNe=l(),Ld=a("h2"),cT=a("a"),R_e=a("span"),F(Iy.$$.fragment),Dor=l(),P_e=a("span"),Gor=o("AutoModelForSpeechSeq2Seq"),zNe=l(),Wo=a("div"),F(qy.$$.fragment),Oor=l(),xd=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=a("a"),Xor=o("from_pretrained()"),zor=o(" class method or the "),wz=a("a"),Wor=o("from_config()"),Qor=o(` class
method.`),Hor=l(),Ny=a("p"),Uor=o("This class cannot be instantiated directly using "),B_e=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),Et=a("div"),F(jy.$$.fragment),Zor=l(),I_e=a("p"),err=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),orr=l(),$d=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),nrr=o("from_pretrained()"),srr=o(" to load the model weights."),lrr=l(),F(fT.$$.fragment),irr=l(),ho=a("div"),F(Dy.$$.fragment),drr=l(),N_e=a("p"),crr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),frr=l(),Ua=a("p"),mrr=o("The model class to instantiate is selected based on the "),j_e=a("code"),grr=o("model_type"),hrr=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),prr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),_rr=o("pretrained_model_name_or_path"),brr=o(":"),vrr=l(),Gy=a("ul"),mT=a("li"),O_e=a("strong"),Frr=o("speech-encoder-decoder"),Trr=o(" \u2014 "),yz=a("a"),Mrr=o("SpeechEncoderDecoderModel"),Err=o(" (Speech Encoder decoder model)"),Crr=l(),gT=a("li"),V_e=a("strong"),wrr=o("speech_to_text"),Arr=o(" \u2014 "),Lz=a("a"),yrr=o("Speech2TextForConditionalGeneration"),Lrr=o(" (Speech2Text model)"),xrr=l(),hT=a("p"),$rr=o("The model is set in evaluation mode by default using "),X_e=a("code"),krr=o("model.eval()"),Srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),Rrr=o("model.train()"),Prr=l(),F(pT.$$.fragment),WNe=l(),kd=a("h2"),uT=a("a"),W_e=a("span"),F(Oy.$$.fragment),Brr=l(),Q_e=a("span"),Irr=o("AutoModelForAudioXVector"),QNe=l(),Qo=a("div"),F(Vy.$$.fragment),qrr=l(),Sd=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=a("a"),jrr=o("from_pretrained()"),Drr=o(" class method or the "),$z=a("a"),Grr=o("from_config()"),Orr=o(` class
method.`),Vrr=l(),Xy=a("p"),Xrr=o("This class cannot be instantiated directly using "),H_e=a("code"),zrr=o("__init__()"),Wrr=o(" (throws an error)."),Qrr=l(),Ct=a("div"),F(zy.$$.fragment),Hrr=l(),U_e=a("p"),Urr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jrr=l(),Rd=a("p"),Yrr=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),Krr=o("not"),Zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),etr=o("from_pretrained()"),otr=o(" to load the model weights."),rtr=l(),F(_T.$$.fragment),ttr=l(),po=a("div"),F(Wy.$$.fragment),atr=l(),Y_e=a("p"),ntr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),str=l(),Ja=a("p"),ltr=o("The model class to instantiate is selected based on the "),K_e=a("code"),itr=o("model_type"),dtr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),ctr=o("pretrained_model_name_or_path"),ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),mtr=o("pretrained_model_name_or_path"),gtr=o(":"),htr=l(),ot=a("ul"),bT=a("li"),o2e=a("strong"),ptr=o("data2vec-audio"),utr=o(" \u2014 "),Sz=a("a"),_tr=o("Data2VecAudioForXVector"),btr=o(" (Data2VecAudio model)"),vtr=l(),vT=a("li"),r2e=a("strong"),Ftr=o("unispeech-sat"),Ttr=o(" \u2014 "),Rz=a("a"),Mtr=o("UniSpeechSatForXVector"),Etr=o(" (UniSpeechSat model)"),Ctr=l(),FT=a("li"),t2e=a("strong"),wtr=o("wav2vec2"),Atr=o(" \u2014 "),Pz=a("a"),ytr=o("Wav2Vec2ForXVector"),Ltr=o(" (Wav2Vec2 model)"),xtr=l(),TT=a("li"),a2e=a("strong"),$tr=o("wav2vec2-conformer"),ktr=o(" \u2014 "),Bz=a("a"),Str=o("Wav2Vec2ConformerForXVector"),Rtr=o(" (Wav2Vec2-Conformer model)"),Ptr=l(),MT=a("li"),n2e=a("strong"),Btr=o("wavlm"),Itr=o(" \u2014 "),Iz=a("a"),qtr=o("WavLMForXVector"),Ntr=o(" (WavLM model)"),jtr=l(),ET=a("p"),Dtr=o("The model is set in evaluation mode by default using "),s2e=a("code"),Gtr=o("model.eval()"),Otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=a("code"),Vtr=o("model.train()"),Xtr=l(),F(CT.$$.fragment),HNe=l(),Pd=a("h2"),wT=a("a"),i2e=a("span"),F(Qy.$$.fragment),ztr=l(),d2e=a("span"),Wtr=o("AutoModelForMaskedImageModeling"),UNe=l(),Ho=a("div"),F(Hy.$$.fragment),Qtr=l(),Bd=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qz=a("a"),Utr=o("from_pretrained()"),Jtr=o(" class method or the "),Nz=a("a"),Ytr=o("from_config()"),Ktr=o(` class
method.`),Ztr=l(),Uy=a("p"),ear=o("This class cannot be instantiated directly using "),c2e=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),wt=a("div"),F(Jy.$$.fragment),aar=l(),f2e=a("p"),nar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),sar=l(),Id=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),car=o("from_pretrained()"),far=o(" to load the model weights."),mar=l(),F(AT.$$.fragment),gar=l(),uo=a("div"),F(Yy.$$.fragment),har=l(),g2e=a("p"),par=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uar=l(),Ya=a("p"),_ar=o("The model class to instantiate is selected based on the "),h2e=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),qd=a("ul"),yT=a("li"),_2e=a("strong"),Aar=o("deit"),yar=o(" \u2014 "),Dz=a("a"),Lar=o("DeiTForMaskedImageModeling"),xar=o(" (DeiT model)"),$ar=l(),LT=a("li"),b2e=a("strong"),kar=o("swin"),Sar=o(" \u2014 "),Gz=a("a"),Rar=o("SwinForMaskedImageModeling"),Par=o(" (Swin model)"),Bar=l(),xT=a("li"),v2e=a("strong"),Iar=o("vit"),qar=o(" \u2014 "),Oz=a("a"),Nar=o("ViTForMaskedImageModeling"),jar=o(" (ViT model)"),Dar=l(),$T=a("p"),Gar=o("The model is set in evaluation mode by default using "),F2e=a("code"),Oar=o("model.eval()"),Var=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),Xar=o("model.train()"),zar=l(),F(kT.$$.fragment),JNe=l(),Nd=a("h2"),ST=a("a"),M2e=a("span"),F(Ky.$$.fragment),War=l(),E2e=a("span"),Qar=o("AutoModelForObjectDetection"),YNe=l(),Uo=a("div"),F(Zy.$$.fragment),Har=l(),jd=a("p"),Uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=a("a"),Jar=o("from_pretrained()"),Yar=o(" class method or the "),Xz=a("a"),Kar=o("from_config()"),Zar=o(` class
method.`),enr=l(),eL=a("p"),onr=o("This class cannot be instantiated directly using "),C2e=a("code"),rnr=o("__init__()"),tnr=o(" (throws an error)."),anr=l(),At=a("div"),F(oL.$$.fragment),nnr=l(),w2e=a("p"),snr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lnr=l(),Dd=a("p"),inr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),dnr=o("not"),cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),fnr=o("from_pretrained()"),mnr=o(" to load the model weights."),gnr=l(),F(RT.$$.fragment),hnr=l(),_o=a("div"),F(rL.$$.fragment),pnr=l(),y2e=a("p"),unr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_nr=l(),Ka=a("p"),bnr=o("The model class to instantiate is selected based on the "),L2e=a("code"),vnr=o("model_type"),Fnr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Tnr=o("pretrained_model_name_or_path"),Mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(":"),wnr=l(),tL=a("ul"),PT=a("li"),k2e=a("strong"),Anr=o("detr"),ynr=o(" \u2014 "),Wz=a("a"),Lnr=o("DetrForObjectDetection"),xnr=o(" (DETR model)"),$nr=l(),BT=a("li"),S2e=a("strong"),knr=o("yolos"),Snr=o(" \u2014 "),Qz=a("a"),Rnr=o("YolosForObjectDetection"),Pnr=o(" (YOLOS model)"),Bnr=l(),IT=a("p"),Inr=o("The model is set in evaluation mode by default using "),R2e=a("code"),qnr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),jnr=o("model.train()"),Dnr=l(),F(qT.$$.fragment),KNe=l(),Gd=a("h2"),NT=a("a"),B2e=a("span"),F(aL.$$.fragment),Gnr=l(),I2e=a("span"),Onr=o("AutoModelForImageSegmentation"),ZNe=l(),Jo=a("div"),F(nL.$$.fragment),Vnr=l(),Od=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=a("a"),znr=o("from_pretrained()"),Wnr=o(" class method or the "),Uz=a("a"),Qnr=o("from_config()"),Hnr=o(` class
method.`),Unr=l(),sL=a("p"),Jnr=o("This class cannot be instantiated directly using "),q2e=a("code"),Ynr=o("__init__()"),Knr=o(" (throws an error)."),Znr=l(),yt=a("div"),F(lL.$$.fragment),esr=l(),N2e=a("p"),osr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rsr=l(),Vd=a("p"),tsr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),asr=o("not"),nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),ssr=o("from_pretrained()"),lsr=o(" to load the model weights."),isr=l(),F(jT.$$.fragment),dsr=l(),bo=a("div"),F(iL.$$.fragment),csr=l(),D2e=a("p"),fsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),msr=l(),Za=a("p"),gsr=o("The model class to instantiate is selected based on the "),G2e=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),usr=o("pretrained_model_name_or_path"),_sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Fsr=l(),X2e=a("ul"),DT=a("li"),z2e=a("strong"),Tsr=o("detr"),Msr=o(" \u2014 "),Yz=a("a"),Esr=o("DetrForSegmentation"),Csr=o(" (DETR model)"),wsr=l(),GT=a("p"),Asr=o("The model is set in evaluation mode by default using "),W2e=a("code"),ysr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),xsr=o("model.train()"),$sr=l(),F(OT.$$.fragment),eje=l(),Xd=a("h2"),VT=a("a"),H2e=a("span"),F(dL.$$.fragment),ksr=l(),U2e=a("span"),Ssr=o("AutoModelForSemanticSegmentation"),oje=l(),Yo=a("div"),F(cL.$$.fragment),Rsr=l(),zd=a("p"),Psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=a("a"),Bsr=o("from_pretrained()"),Isr=o(" class method or the "),Zz=a("a"),qsr=o("from_config()"),Nsr=o(` class
method.`),jsr=l(),fL=a("p"),Dsr=o("This class cannot be instantiated directly using "),J2e=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),Lt=a("div"),F(mL.$$.fragment),Xsr=l(),Y2e=a("p"),zsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wsr=l(),Wd=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Hsr=o("not"),Usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(XT.$$.fragment),Zsr=l(),vo=a("div"),F(gL.$$.fragment),elr=l(),Z2e=a("p"),olr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rlr=l(),en=a("p"),tlr=o("The model class to instantiate is selected based on the "),e1e=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),on=a("ul"),zT=a("li"),t1e=a("strong"),flr=o("beit"),mlr=o(" \u2014 "),oW=a("a"),glr=o("BeitForSemanticSegmentation"),hlr=o(" (BEiT model)"),plr=l(),WT=a("li"),a1e=a("strong"),ulr=o("data2vec-vision"),_lr=o(" \u2014 "),rW=a("a"),blr=o("Data2VecVisionForSemanticSegmentation"),vlr=o(" (Data2VecVision model)"),Flr=l(),QT=a("li"),n1e=a("strong"),Tlr=o("dpt"),Mlr=o(" \u2014 "),tW=a("a"),Elr=o("DPTForSemanticSegmentation"),Clr=o(" (DPT model)"),wlr=l(),HT=a("li"),s1e=a("strong"),Alr=o("segformer"),ylr=o(" \u2014 "),aW=a("a"),Llr=o("SegformerForSemanticSegmentation"),xlr=o(" (SegFormer model)"),$lr=l(),UT=a("p"),klr=o("The model is set in evaluation mode by default using "),l1e=a("code"),Slr=o("model.eval()"),Rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Plr=o("model.train()"),Blr=l(),F(JT.$$.fragment),rje=l(),Qd=a("h2"),YT=a("a"),d1e=a("span"),F(hL.$$.fragment),Ilr=l(),c1e=a("span"),qlr=o("AutoModelForInstanceSegmentation"),tje=l(),Ko=a("div"),F(pL.$$.fragment),Nlr=l(),Hd=a("p"),jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=a("a"),Dlr=o("from_pretrained()"),Glr=o(" class method or the "),sW=a("a"),Olr=o("from_config()"),Vlr=o(` class
method.`),Xlr=l(),uL=a("p"),zlr=o("This class cannot be instantiated directly using "),f1e=a("code"),Wlr=o("__init__()"),Qlr=o(" (throws an error)."),Hlr=l(),xt=a("div"),F(_L.$$.fragment),Ulr=l(),m1e=a("p"),Jlr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ylr=l(),Ud=a("p"),Klr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),Zlr=o("not"),eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),oir=o("from_pretrained()"),rir=o(" to load the model weights."),tir=l(),F(KT.$$.fragment),air=l(),Fo=a("div"),F(bL.$$.fragment),nir=l(),h1e=a("p"),sir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lir=l(),rn=a("p"),iir=o("The model class to instantiate is selected based on the "),p1e=a("code"),dir=o("model_type"),cir=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(":"),pir=l(),b1e=a("ul"),ZT=a("li"),v1e=a("strong"),uir=o("maskformer"),_ir=o(" \u2014 "),iW=a("a"),bir=o("MaskFormerForInstanceSegmentation"),vir=o(" (MaskFormer model)"),Fir=l(),e8=a("p"),Tir=o("The model is set in evaluation mode by default using "),F1e=a("code"),Mir=o("model.eval()"),Eir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),Cir=o("model.train()"),wir=l(),F(o8.$$.fragment),aje=l(),Jd=a("h2"),r8=a("a"),M1e=a("span"),F(vL.$$.fragment),Air=l(),E1e=a("span"),yir=o("TFAutoModel"),nje=l(),Zo=a("div"),F(FL.$$.fragment),Lir=l(),Yd=a("p"),xir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=a("a"),$ir=o("from_pretrained()"),kir=o(" class method or the "),cW=a("a"),Sir=o("from_config()"),Rir=o(` class
method.`),Pir=l(),TL=a("p"),Bir=o("This class cannot be instantiated directly using "),C1e=a("code"),Iir=o("__init__()"),qir=o(" (throws an error)."),Nir=l(),$t=a("div"),F(ML.$$.fragment),jir=l(),w1e=a("p"),Dir=o("Instantiates one of the base model classes of the library from a configuration."),Gir=l(),Kd=a("p"),Oir=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),Vir=o("not"),Xir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),zir=o("from_pretrained()"),Wir=o(" to load the model weights."),Qir=l(),F(t8.$$.fragment),Hir=l(),yr=a("div"),F(EL.$$.fragment),Uir=l(),y1e=a("p"),Jir=o("Instantiate one of the base model classes of the library from a pretrained model."),Yir=l(),tn=a("p"),Kir=o("The model class to instantiate is selected based on the "),L1e=a("code"),Zir=o("model_type"),edr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(":"),ndr=l(),N=a("ul"),a8=a("li"),k1e=a("strong"),sdr=o("albert"),ldr=o(" \u2014 "),mW=a("a"),idr=o("TFAlbertModel"),ddr=o(" (ALBERT model)"),cdr=l(),n8=a("li"),S1e=a("strong"),fdr=o("bart"),mdr=o(" \u2014 "),gW=a("a"),gdr=o("TFBartModel"),hdr=o(" (BART model)"),pdr=l(),s8=a("li"),R1e=a("strong"),udr=o("bert"),_dr=o(" \u2014 "),hW=a("a"),bdr=o("TFBertModel"),vdr=o(" (BERT model)"),Fdr=l(),l8=a("li"),P1e=a("strong"),Tdr=o("blenderbot"),Mdr=o(" \u2014 "),pW=a("a"),Edr=o("TFBlenderbotModel"),Cdr=o(" (Blenderbot model)"),wdr=l(),i8=a("li"),B1e=a("strong"),Adr=o("blenderbot-small"),ydr=o(" \u2014 "),uW=a("a"),Ldr=o("TFBlenderbotSmallModel"),xdr=o(" (BlenderbotSmall model)"),$dr=l(),d8=a("li"),I1e=a("strong"),kdr=o("camembert"),Sdr=o(" \u2014 "),_W=a("a"),Rdr=o("TFCamembertModel"),Pdr=o(" (CamemBERT model)"),Bdr=l(),c8=a("li"),q1e=a("strong"),Idr=o("clip"),qdr=o(" \u2014 "),bW=a("a"),Ndr=o("TFCLIPModel"),jdr=o(" (CLIP model)"),Ddr=l(),f8=a("li"),N1e=a("strong"),Gdr=o("convbert"),Odr=o(" \u2014 "),vW=a("a"),Vdr=o("TFConvBertModel"),Xdr=o(" (ConvBERT model)"),zdr=l(),m8=a("li"),j1e=a("strong"),Wdr=o("convnext"),Qdr=o(" \u2014 "),FW=a("a"),Hdr=o("TFConvNextModel"),Udr=o(" (ConvNext model)"),Jdr=l(),g8=a("li"),D1e=a("strong"),Ydr=o("ctrl"),Kdr=o(" \u2014 "),TW=a("a"),Zdr=o("TFCTRLModel"),ecr=o(" (CTRL model)"),ocr=l(),h8=a("li"),G1e=a("strong"),rcr=o("data2vec-vision"),tcr=o(" \u2014 "),MW=a("a"),acr=o("TFData2VecVisionModel"),ncr=o(" (Data2VecVision model)"),scr=l(),p8=a("li"),O1e=a("strong"),lcr=o("deberta"),icr=o(" \u2014 "),EW=a("a"),dcr=o("TFDebertaModel"),ccr=o(" (DeBERTa model)"),fcr=l(),u8=a("li"),V1e=a("strong"),mcr=o("deberta-v2"),gcr=o(" \u2014 "),CW=a("a"),hcr=o("TFDebertaV2Model"),pcr=o(" (DeBERTa-v2 model)"),ucr=l(),_8=a("li"),X1e=a("strong"),_cr=o("distilbert"),bcr=o(" \u2014 "),wW=a("a"),vcr=o("TFDistilBertModel"),Fcr=o(" (DistilBERT model)"),Tcr=l(),b8=a("li"),z1e=a("strong"),Mcr=o("dpr"),Ecr=o(" \u2014 "),AW=a("a"),Ccr=o("TFDPRQuestionEncoder"),wcr=o(" (DPR model)"),Acr=l(),v8=a("li"),W1e=a("strong"),ycr=o("electra"),Lcr=o(" \u2014 "),yW=a("a"),xcr=o("TFElectraModel"),$cr=o(" (ELECTRA model)"),kcr=l(),F8=a("li"),Q1e=a("strong"),Scr=o("flaubert"),Rcr=o(" \u2014 "),LW=a("a"),Pcr=o("TFFlaubertModel"),Bcr=o(" (FlauBERT model)"),Icr=l(),Gs=a("li"),H1e=a("strong"),qcr=o("funnel"),Ncr=o(" \u2014 "),xW=a("a"),jcr=o("TFFunnelModel"),Dcr=o(" or "),$W=a("a"),Gcr=o("TFFunnelBaseModel"),Ocr=o(" (Funnel Transformer model)"),Vcr=l(),T8=a("li"),U1e=a("strong"),Xcr=o("gpt2"),zcr=o(" \u2014 "),kW=a("a"),Wcr=o("TFGPT2Model"),Qcr=o(" (OpenAI GPT-2 model)"),Hcr=l(),M8=a("li"),J1e=a("strong"),Ucr=o("gptj"),Jcr=o(" \u2014 "),SW=a("a"),Ycr=o("TFGPTJModel"),Kcr=o(" (GPT-J model)"),Zcr=l(),E8=a("li"),Y1e=a("strong"),efr=o("hubert"),ofr=o(" \u2014 "),RW=a("a"),rfr=o("TFHubertModel"),tfr=o(" (Hubert model)"),afr=l(),C8=a("li"),K1e=a("strong"),nfr=o("layoutlm"),sfr=o(" \u2014 "),PW=a("a"),lfr=o("TFLayoutLMModel"),ifr=o(" (LayoutLM model)"),dfr=l(),w8=a("li"),Z1e=a("strong"),cfr=o("led"),ffr=o(" \u2014 "),BW=a("a"),mfr=o("TFLEDModel"),gfr=o(" (LED model)"),hfr=l(),A8=a("li"),ebe=a("strong"),pfr=o("longformer"),ufr=o(" \u2014 "),IW=a("a"),_fr=o("TFLongformerModel"),bfr=o(" (Longformer model)"),vfr=l(),y8=a("li"),obe=a("strong"),Ffr=o("lxmert"),Tfr=o(" \u2014 "),qW=a("a"),Mfr=o("TFLxmertModel"),Efr=o(" (LXMERT model)"),Cfr=l(),L8=a("li"),rbe=a("strong"),wfr=o("marian"),Afr=o(" \u2014 "),NW=a("a"),yfr=o("TFMarianModel"),Lfr=o(" (Marian model)"),xfr=l(),x8=a("li"),tbe=a("strong"),$fr=o("mbart"),kfr=o(" \u2014 "),jW=a("a"),Sfr=o("TFMBartModel"),Rfr=o(" (mBART model)"),Pfr=l(),$8=a("li"),abe=a("strong"),Bfr=o("mobilebert"),Ifr=o(" \u2014 "),DW=a("a"),qfr=o("TFMobileBertModel"),Nfr=o(" (MobileBERT model)"),jfr=l(),k8=a("li"),nbe=a("strong"),Dfr=o("mpnet"),Gfr=o(" \u2014 "),GW=a("a"),Ofr=o("TFMPNetModel"),Vfr=o(" (MPNet model)"),Xfr=l(),S8=a("li"),sbe=a("strong"),zfr=o("mt5"),Wfr=o(" \u2014 "),OW=a("a"),Qfr=o("TFMT5Model"),Hfr=o(" (mT5 model)"),Ufr=l(),R8=a("li"),lbe=a("strong"),Jfr=o("openai-gpt"),Yfr=o(" \u2014 "),VW=a("a"),Kfr=o("TFOpenAIGPTModel"),Zfr=o(" (OpenAI GPT model)"),emr=l(),P8=a("li"),ibe=a("strong"),omr=o("pegasus"),rmr=o(" \u2014 "),XW=a("a"),tmr=o("TFPegasusModel"),amr=o(" (Pegasus model)"),nmr=l(),B8=a("li"),dbe=a("strong"),smr=o("rembert"),lmr=o(" \u2014 "),zW=a("a"),imr=o("TFRemBertModel"),dmr=o(" (RemBERT model)"),cmr=l(),I8=a("li"),cbe=a("strong"),fmr=o("roberta"),mmr=o(" \u2014 "),WW=a("a"),gmr=o("TFRobertaModel"),hmr=o(" (RoBERTa model)"),pmr=l(),q8=a("li"),fbe=a("strong"),umr=o("roformer"),_mr=o(" \u2014 "),QW=a("a"),bmr=o("TFRoFormerModel"),vmr=o(" (RoFormer model)"),Fmr=l(),N8=a("li"),mbe=a("strong"),Tmr=o("speech_to_text"),Mmr=o(" \u2014 "),HW=a("a"),Emr=o("TFSpeech2TextModel"),Cmr=o(" (Speech2Text model)"),wmr=l(),j8=a("li"),gbe=a("strong"),Amr=o("swin"),ymr=o(" \u2014 "),UW=a("a"),Lmr=o("TFSwinModel"),xmr=o(" (Swin model)"),$mr=l(),D8=a("li"),hbe=a("strong"),kmr=o("t5"),Smr=o(" \u2014 "),JW=a("a"),Rmr=o("TFT5Model"),Pmr=o(" (T5 model)"),Bmr=l(),G8=a("li"),pbe=a("strong"),Imr=o("tapas"),qmr=o(" \u2014 "),YW=a("a"),Nmr=o("TFTapasModel"),jmr=o(" (TAPAS model)"),Dmr=l(),O8=a("li"),ube=a("strong"),Gmr=o("transfo-xl"),Omr=o(" \u2014 "),KW=a("a"),Vmr=o("TFTransfoXLModel"),Xmr=o(" (Transformer-XL model)"),zmr=l(),V8=a("li"),_be=a("strong"),Wmr=o("vit"),Qmr=o(" \u2014 "),ZW=a("a"),Hmr=o("TFViTModel"),Umr=o(" (ViT model)"),Jmr=l(),X8=a("li"),bbe=a("strong"),Ymr=o("vit_mae"),Kmr=o(" \u2014 "),eQ=a("a"),Zmr=o("TFViTMAEModel"),egr=o(" (ViTMAE model)"),ogr=l(),z8=a("li"),vbe=a("strong"),rgr=o("wav2vec2"),tgr=o(" \u2014 "),oQ=a("a"),agr=o("TFWav2Vec2Model"),ngr=o(" (Wav2Vec2 model)"),sgr=l(),W8=a("li"),Fbe=a("strong"),lgr=o("xlm"),igr=o(" \u2014 "),rQ=a("a"),dgr=o("TFXLMModel"),cgr=o(" (XLM model)"),fgr=l(),Q8=a("li"),Tbe=a("strong"),mgr=o("xlm-roberta"),ggr=o(" \u2014 "),tQ=a("a"),hgr=o("TFXLMRobertaModel"),pgr=o(" (XLM-RoBERTa model)"),ugr=l(),H8=a("li"),Mbe=a("strong"),_gr=o("xlnet"),bgr=o(" \u2014 "),aQ=a("a"),vgr=o("TFXLNetModel"),Fgr=o(" (XLNet model)"),Tgr=l(),F(U8.$$.fragment),sje=l(),Zd=a("h2"),J8=a("a"),Ebe=a("span"),F(CL.$$.fragment),Mgr=l(),Cbe=a("span"),Egr=o("TFAutoModelForPreTraining"),lje=l(),er=a("div"),F(wL.$$.fragment),Cgr=l(),ec=a("p"),wgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=a("a"),Agr=o("from_pretrained()"),ygr=o(" class method or the "),sQ=a("a"),Lgr=o("from_config()"),xgr=o(` class
method.`),$gr=l(),AL=a("p"),kgr=o("This class cannot be instantiated directly using "),wbe=a("code"),Sgr=o("__init__()"),Rgr=o(" (throws an error)."),Pgr=l(),kt=a("div"),F(yL.$$.fragment),Bgr=l(),Abe=a("p"),Igr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qgr=l(),oc=a("p"),Ngr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),jgr=o("not"),Dgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),Ggr=o("from_pretrained()"),Ogr=o(" to load the model weights."),Vgr=l(),F(Y8.$$.fragment),Xgr=l(),Lr=a("div"),F(LL.$$.fragment),zgr=l(),Lbe=a("p"),Wgr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qgr=l(),an=a("p"),Hgr=o("The model class to instantiate is selected based on the "),xbe=a("code"),Ugr=o("model_type"),Jgr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),Zgr=o("pretrained_model_name_or_path"),ehr=o(":"),ohr=l(),se=a("ul"),K8=a("li"),Sbe=a("strong"),rhr=o("albert"),thr=o(" \u2014 "),iQ=a("a"),ahr=o("TFAlbertForPreTraining"),nhr=o(" (ALBERT model)"),shr=l(),Z8=a("li"),Rbe=a("strong"),lhr=o("bart"),ihr=o(" \u2014 "),dQ=a("a"),dhr=o("TFBartForConditionalGeneration"),chr=o(" (BART model)"),fhr=l(),e7=a("li"),Pbe=a("strong"),mhr=o("bert"),ghr=o(" \u2014 "),cQ=a("a"),hhr=o("TFBertForPreTraining"),phr=o(" (BERT model)"),uhr=l(),o7=a("li"),Bbe=a("strong"),_hr=o("camembert"),bhr=o(" \u2014 "),fQ=a("a"),vhr=o("TFCamembertForMaskedLM"),Fhr=o(" (CamemBERT model)"),Thr=l(),r7=a("li"),Ibe=a("strong"),Mhr=o("ctrl"),Ehr=o(" \u2014 "),mQ=a("a"),Chr=o("TFCTRLLMHeadModel"),whr=o(" (CTRL model)"),Ahr=l(),t7=a("li"),qbe=a("strong"),yhr=o("distilbert"),Lhr=o(" \u2014 "),gQ=a("a"),xhr=o("TFDistilBertForMaskedLM"),$hr=o(" (DistilBERT model)"),khr=l(),a7=a("li"),Nbe=a("strong"),Shr=o("electra"),Rhr=o(" \u2014 "),hQ=a("a"),Phr=o("TFElectraForPreTraining"),Bhr=o(" (ELECTRA model)"),Ihr=l(),n7=a("li"),jbe=a("strong"),qhr=o("flaubert"),Nhr=o(" \u2014 "),pQ=a("a"),jhr=o("TFFlaubertWithLMHeadModel"),Dhr=o(" (FlauBERT model)"),Ghr=l(),s7=a("li"),Dbe=a("strong"),Ohr=o("funnel"),Vhr=o(" \u2014 "),uQ=a("a"),Xhr=o("TFFunnelForPreTraining"),zhr=o(" (Funnel Transformer model)"),Whr=l(),l7=a("li"),Gbe=a("strong"),Qhr=o("gpt2"),Hhr=o(" \u2014 "),_Q=a("a"),Uhr=o("TFGPT2LMHeadModel"),Jhr=o(" (OpenAI GPT-2 model)"),Yhr=l(),i7=a("li"),Obe=a("strong"),Khr=o("layoutlm"),Zhr=o(" \u2014 "),bQ=a("a"),epr=o("TFLayoutLMForMaskedLM"),opr=o(" (LayoutLM model)"),rpr=l(),d7=a("li"),Vbe=a("strong"),tpr=o("lxmert"),apr=o(" \u2014 "),vQ=a("a"),npr=o("TFLxmertForPreTraining"),spr=o(" (LXMERT model)"),lpr=l(),c7=a("li"),Xbe=a("strong"),ipr=o("mobilebert"),dpr=o(" \u2014 "),FQ=a("a"),cpr=o("TFMobileBertForPreTraining"),fpr=o(" (MobileBERT model)"),mpr=l(),f7=a("li"),zbe=a("strong"),gpr=o("mpnet"),hpr=o(" \u2014 "),TQ=a("a"),ppr=o("TFMPNetForMaskedLM"),upr=o(" (MPNet model)"),_pr=l(),m7=a("li"),Wbe=a("strong"),bpr=o("openai-gpt"),vpr=o(" \u2014 "),MQ=a("a"),Fpr=o("TFOpenAIGPTLMHeadModel"),Tpr=o(" (OpenAI GPT model)"),Mpr=l(),g7=a("li"),Qbe=a("strong"),Epr=o("roberta"),Cpr=o(" \u2014 "),EQ=a("a"),wpr=o("TFRobertaForMaskedLM"),Apr=o(" (RoBERTa model)"),ypr=l(),h7=a("li"),Hbe=a("strong"),Lpr=o("t5"),xpr=o(" \u2014 "),CQ=a("a"),$pr=o("TFT5ForConditionalGeneration"),kpr=o(" (T5 model)"),Spr=l(),p7=a("li"),Ube=a("strong"),Rpr=o("tapas"),Ppr=o(" \u2014 "),wQ=a("a"),Bpr=o("TFTapasForMaskedLM"),Ipr=o(" (TAPAS model)"),qpr=l(),u7=a("li"),Jbe=a("strong"),Npr=o("transfo-xl"),jpr=o(" \u2014 "),AQ=a("a"),Dpr=o("TFTransfoXLLMHeadModel"),Gpr=o(" (Transformer-XL model)"),Opr=l(),_7=a("li"),Ybe=a("strong"),Vpr=o("vit_mae"),Xpr=o(" \u2014 "),yQ=a("a"),zpr=o("TFViTMAEForPreTraining"),Wpr=o(" (ViTMAE model)"),Qpr=l(),b7=a("li"),Kbe=a("strong"),Hpr=o("xlm"),Upr=o(" \u2014 "),LQ=a("a"),Jpr=o("TFXLMWithLMHeadModel"),Ypr=o(" (XLM model)"),Kpr=l(),v7=a("li"),Zbe=a("strong"),Zpr=o("xlm-roberta"),eur=o(" \u2014 "),xQ=a("a"),our=o("TFXLMRobertaForMaskedLM"),rur=o(" (XLM-RoBERTa model)"),tur=l(),F7=a("li"),eve=a("strong"),aur=o("xlnet"),nur=o(" \u2014 "),$Q=a("a"),sur=o("TFXLNetLMHeadModel"),lur=o(" (XLNet model)"),iur=l(),F(T7.$$.fragment),ije=l(),rc=a("h2"),M7=a("a"),ove=a("span"),F(xL.$$.fragment),dur=l(),rve=a("span"),cur=o("TFAutoModelForCausalLM"),dje=l(),or=a("div"),F($L.$$.fragment),fur=l(),tc=a("p"),mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=a("a"),gur=o("from_pretrained()"),hur=o(" class method or the "),SQ=a("a"),pur=o("from_config()"),uur=o(` class
method.`),_ur=l(),kL=a("p"),bur=o("This class cannot be instantiated directly using "),tve=a("code"),vur=o("__init__()"),Fur=o(" (throws an error)."),Tur=l(),St=a("div"),F(SL.$$.fragment),Mur=l(),ave=a("p"),Eur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cur=l(),ac=a("p"),wur=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Aur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Lur=o("from_pretrained()"),xur=o(" to load the model weights."),$ur=l(),F(E7.$$.fragment),kur=l(),xr=a("div"),F(RL.$$.fragment),Sur=l(),sve=a("p"),Rur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pur=l(),nn=a("p"),Bur=o("The model class to instantiate is selected based on the "),lve=a("code"),Iur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),Nur=o("pretrained_model_name_or_path"),jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(":"),Our=l(),Me=a("ul"),C7=a("li"),cve=a("strong"),Vur=o("bert"),Xur=o(" \u2014 "),PQ=a("a"),zur=o("TFBertLMHeadModel"),Wur=o(" (BERT model)"),Qur=l(),w7=a("li"),fve=a("strong"),Hur=o("camembert"),Uur=o(" \u2014 "),BQ=a("a"),Jur=o("TFCamembertForCausalLM"),Yur=o(" (CamemBERT model)"),Kur=l(),A7=a("li"),mve=a("strong"),Zur=o("ctrl"),e_r=o(" \u2014 "),IQ=a("a"),o_r=o("TFCTRLLMHeadModel"),r_r=o(" (CTRL model)"),t_r=l(),y7=a("li"),gve=a("strong"),a_r=o("gpt2"),n_r=o(" \u2014 "),qQ=a("a"),s_r=o("TFGPT2LMHeadModel"),l_r=o(" (OpenAI GPT-2 model)"),i_r=l(),L7=a("li"),hve=a("strong"),d_r=o("gptj"),c_r=o(" \u2014 "),NQ=a("a"),f_r=o("TFGPTJForCausalLM"),m_r=o(" (GPT-J model)"),g_r=l(),x7=a("li"),pve=a("strong"),h_r=o("openai-gpt"),p_r=o(" \u2014 "),jQ=a("a"),u_r=o("TFOpenAIGPTLMHeadModel"),__r=o(" (OpenAI GPT model)"),b_r=l(),$7=a("li"),uve=a("strong"),v_r=o("rembert"),F_r=o(" \u2014 "),DQ=a("a"),T_r=o("TFRemBertForCausalLM"),M_r=o(" (RemBERT model)"),E_r=l(),k7=a("li"),_ve=a("strong"),C_r=o("roberta"),w_r=o(" \u2014 "),GQ=a("a"),A_r=o("TFRobertaForCausalLM"),y_r=o(" (RoBERTa model)"),L_r=l(),S7=a("li"),bve=a("strong"),x_r=o("roformer"),$_r=o(" \u2014 "),OQ=a("a"),k_r=o("TFRoFormerForCausalLM"),S_r=o(" (RoFormer model)"),R_r=l(),R7=a("li"),vve=a("strong"),P_r=o("transfo-xl"),B_r=o(" \u2014 "),VQ=a("a"),I_r=o("TFTransfoXLLMHeadModel"),q_r=o(" (Transformer-XL model)"),N_r=l(),P7=a("li"),Fve=a("strong"),j_r=o("xlm"),D_r=o(" \u2014 "),XQ=a("a"),G_r=o("TFXLMWithLMHeadModel"),O_r=o(" (XLM model)"),V_r=l(),B7=a("li"),Tve=a("strong"),X_r=o("xlnet"),z_r=o(" \u2014 "),zQ=a("a"),W_r=o("TFXLNetLMHeadModel"),Q_r=o(" (XLNet model)"),H_r=l(),F(I7.$$.fragment),cje=l(),nc=a("h2"),q7=a("a"),Mve=a("span"),F(PL.$$.fragment),U_r=l(),Eve=a("span"),J_r=o("TFAutoModelForImageClassification"),fje=l(),rr=a("div"),F(BL.$$.fragment),Y_r=l(),sc=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=a("a"),Z_r=o("from_pretrained()"),e2r=o(" class method or the "),QQ=a("a"),o2r=o("from_config()"),r2r=o(` class
method.`),t2r=l(),IL=a("p"),a2r=o("This class cannot be instantiated directly using "),Cve=a("code"),n2r=o("__init__()"),s2r=o(" (throws an error)."),l2r=l(),Rt=a("div"),F(qL.$$.fragment),i2r=l(),wve=a("p"),d2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),c2r=l(),lc=a("p"),f2r=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),m2r=o("not"),g2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),h2r=o("from_pretrained()"),p2r=o(" to load the model weights."),u2r=l(),F(N7.$$.fragment),_2r=l(),$r=a("div"),F(NL.$$.fragment),b2r=l(),yve=a("p"),v2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),F2r=l(),sn=a("p"),T2r=o("The model class to instantiate is selected based on the "),Lve=a("code"),M2r=o("model_type"),E2r=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),A2r=o("pretrained_model_name_or_path"),y2r=o(":"),L2r=l(),ln=a("ul"),j7=a("li"),kve=a("strong"),x2r=o("convnext"),$2r=o(" \u2014 "),UQ=a("a"),k2r=o("TFConvNextForImageClassification"),S2r=o(" (ConvNext model)"),R2r=l(),D7=a("li"),Sve=a("strong"),P2r=o("data2vec-vision"),B2r=o(" \u2014 "),JQ=a("a"),I2r=o("TFData2VecVisionForImageClassification"),q2r=o(" (Data2VecVision model)"),N2r=l(),G7=a("li"),Rve=a("strong"),j2r=o("swin"),D2r=o(" \u2014 "),YQ=a("a"),G2r=o("TFSwinForImageClassification"),O2r=o(" (Swin model)"),V2r=l(),O7=a("li"),Pve=a("strong"),X2r=o("vit"),z2r=o(" \u2014 "),KQ=a("a"),W2r=o("TFViTForImageClassification"),Q2r=o(" (ViT model)"),H2r=l(),F(V7.$$.fragment),mje=l(),ic=a("h2"),X7=a("a"),Bve=a("span"),F(jL.$$.fragment),U2r=l(),Ive=a("span"),J2r=o("TFAutoModelForMaskedLM"),gje=l(),tr=a("div"),F(DL.$$.fragment),Y2r=l(),dc=a("p"),K2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=a("a"),Z2r=o("from_pretrained()"),e1r=o(" class method or the "),eH=a("a"),o1r=o("from_config()"),r1r=o(` class
method.`),t1r=l(),GL=a("p"),a1r=o("This class cannot be instantiated directly using "),qve=a("code"),n1r=o("__init__()"),s1r=o(" (throws an error)."),l1r=l(),Pt=a("div"),F(OL.$$.fragment),i1r=l(),Nve=a("p"),d1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c1r=l(),cc=a("p"),f1r=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),m1r=o("not"),g1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),h1r=o("from_pretrained()"),p1r=o(" to load the model weights."),u1r=l(),F(z7.$$.fragment),_1r=l(),kr=a("div"),F(VL.$$.fragment),b1r=l(),Dve=a("p"),v1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F1r=l(),dn=a("p"),T1r=o("The model class to instantiate is selected based on the "),Gve=a("code"),M1r=o("model_type"),E1r=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),A1r=o("pretrained_model_name_or_path"),y1r=o(":"),L1r=l(),ie=a("ul"),W7=a("li"),Xve=a("strong"),x1r=o("albert"),$1r=o(" \u2014 "),rH=a("a"),k1r=o("TFAlbertForMaskedLM"),S1r=o(" (ALBERT model)"),R1r=l(),Q7=a("li"),zve=a("strong"),P1r=o("bert"),B1r=o(" \u2014 "),tH=a("a"),I1r=o("TFBertForMaskedLM"),q1r=o(" (BERT model)"),N1r=l(),H7=a("li"),Wve=a("strong"),j1r=o("camembert"),D1r=o(" \u2014 "),aH=a("a"),G1r=o("TFCamembertForMaskedLM"),O1r=o(" (CamemBERT model)"),V1r=l(),U7=a("li"),Qve=a("strong"),X1r=o("convbert"),z1r=o(" \u2014 "),nH=a("a"),W1r=o("TFConvBertForMaskedLM"),Q1r=o(" (ConvBERT model)"),H1r=l(),J7=a("li"),Hve=a("strong"),U1r=o("deberta"),J1r=o(" \u2014 "),sH=a("a"),Y1r=o("TFDebertaForMaskedLM"),K1r=o(" (DeBERTa model)"),Z1r=l(),Y7=a("li"),Uve=a("strong"),ebr=o("deberta-v2"),obr=o(" \u2014 "),lH=a("a"),rbr=o("TFDebertaV2ForMaskedLM"),tbr=o(" (DeBERTa-v2 model)"),abr=l(),K7=a("li"),Jve=a("strong"),nbr=o("distilbert"),sbr=o(" \u2014 "),iH=a("a"),lbr=o("TFDistilBertForMaskedLM"),ibr=o(" (DistilBERT model)"),dbr=l(),Z7=a("li"),Yve=a("strong"),cbr=o("electra"),fbr=o(" \u2014 "),dH=a("a"),mbr=o("TFElectraForMaskedLM"),gbr=o(" (ELECTRA model)"),hbr=l(),eM=a("li"),Kve=a("strong"),pbr=o("flaubert"),ubr=o(" \u2014 "),cH=a("a"),_br=o("TFFlaubertWithLMHeadModel"),bbr=o(" (FlauBERT model)"),vbr=l(),oM=a("li"),Zve=a("strong"),Fbr=o("funnel"),Tbr=o(" \u2014 "),fH=a("a"),Mbr=o("TFFunnelForMaskedLM"),Ebr=o(" (Funnel Transformer model)"),Cbr=l(),rM=a("li"),eFe=a("strong"),wbr=o("layoutlm"),Abr=o(" \u2014 "),mH=a("a"),ybr=o("TFLayoutLMForMaskedLM"),Lbr=o(" (LayoutLM model)"),xbr=l(),tM=a("li"),oFe=a("strong"),$br=o("longformer"),kbr=o(" \u2014 "),gH=a("a"),Sbr=o("TFLongformerForMaskedLM"),Rbr=o(" (Longformer model)"),Pbr=l(),aM=a("li"),rFe=a("strong"),Bbr=o("mobilebert"),Ibr=o(" \u2014 "),hH=a("a"),qbr=o("TFMobileBertForMaskedLM"),Nbr=o(" (MobileBERT model)"),jbr=l(),nM=a("li"),tFe=a("strong"),Dbr=o("mpnet"),Gbr=o(" \u2014 "),pH=a("a"),Obr=o("TFMPNetForMaskedLM"),Vbr=o(" (MPNet model)"),Xbr=l(),sM=a("li"),aFe=a("strong"),zbr=o("rembert"),Wbr=o(" \u2014 "),uH=a("a"),Qbr=o("TFRemBertForMaskedLM"),Hbr=o(" (RemBERT model)"),Ubr=l(),lM=a("li"),nFe=a("strong"),Jbr=o("roberta"),Ybr=o(" \u2014 "),_H=a("a"),Kbr=o("TFRobertaForMaskedLM"),Zbr=o(" (RoBERTa model)"),evr=l(),iM=a("li"),sFe=a("strong"),ovr=o("roformer"),rvr=o(" \u2014 "),bH=a("a"),tvr=o("TFRoFormerForMaskedLM"),avr=o(" (RoFormer model)"),nvr=l(),dM=a("li"),lFe=a("strong"),svr=o("tapas"),lvr=o(" \u2014 "),vH=a("a"),ivr=o("TFTapasForMaskedLM"),dvr=o(" (TAPAS model)"),cvr=l(),cM=a("li"),iFe=a("strong"),fvr=o("xlm"),mvr=o(" \u2014 "),FH=a("a"),gvr=o("TFXLMWithLMHeadModel"),hvr=o(" (XLM model)"),pvr=l(),fM=a("li"),dFe=a("strong"),uvr=o("xlm-roberta"),_vr=o(" \u2014 "),TH=a("a"),bvr=o("TFXLMRobertaForMaskedLM"),vvr=o(" (XLM-RoBERTa model)"),Fvr=l(),F(mM.$$.fragment),hje=l(),fc=a("h2"),gM=a("a"),cFe=a("span"),F(XL.$$.fragment),Tvr=l(),fFe=a("span"),Mvr=o("TFAutoModelForSeq2SeqLM"),pje=l(),ar=a("div"),F(zL.$$.fragment),Evr=l(),mc=a("p"),Cvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=a("a"),wvr=o("from_pretrained()"),Avr=o(" class method or the "),EH=a("a"),yvr=o("from_config()"),Lvr=o(` class
method.`),xvr=l(),WL=a("p"),$vr=o("This class cannot be instantiated directly using "),mFe=a("code"),kvr=o("__init__()"),Svr=o(" (throws an error)."),Rvr=l(),Bt=a("div"),F(QL.$$.fragment),Pvr=l(),gFe=a("p"),Bvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ivr=l(),gc=a("p"),qvr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Nvr=o("not"),jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),Dvr=o("from_pretrained()"),Gvr=o(" to load the model weights."),Ovr=l(),F(hM.$$.fragment),Vvr=l(),Sr=a("div"),F(HL.$$.fragment),Xvr=l(),pFe=a("p"),zvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wvr=l(),cn=a("p"),Qvr=o("The model class to instantiate is selected based on the "),uFe=a("code"),Hvr=o("model_type"),Uvr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(":"),eFr=l(),ye=a("ul"),pM=a("li"),vFe=a("strong"),oFr=o("bart"),rFr=o(" \u2014 "),wH=a("a"),tFr=o("TFBartForConditionalGeneration"),aFr=o(" (BART model)"),nFr=l(),uM=a("li"),FFe=a("strong"),sFr=o("blenderbot"),lFr=o(" \u2014 "),AH=a("a"),iFr=o("TFBlenderbotForConditionalGeneration"),dFr=o(" (Blenderbot model)"),cFr=l(),_M=a("li"),TFe=a("strong"),fFr=o("blenderbot-small"),mFr=o(" \u2014 "),yH=a("a"),gFr=o("TFBlenderbotSmallForConditionalGeneration"),hFr=o(" (BlenderbotSmall model)"),pFr=l(),bM=a("li"),MFe=a("strong"),uFr=o("encoder-decoder"),_Fr=o(" \u2014 "),LH=a("a"),bFr=o("TFEncoderDecoderModel"),vFr=o(" (Encoder decoder model)"),FFr=l(),vM=a("li"),EFe=a("strong"),TFr=o("led"),MFr=o(" \u2014 "),xH=a("a"),EFr=o("TFLEDForConditionalGeneration"),CFr=o(" (LED model)"),wFr=l(),FM=a("li"),CFe=a("strong"),AFr=o("marian"),yFr=o(" \u2014 "),$H=a("a"),LFr=o("TFMarianMTModel"),xFr=o(" (Marian model)"),$Fr=l(),TM=a("li"),wFe=a("strong"),kFr=o("mbart"),SFr=o(" \u2014 "),kH=a("a"),RFr=o("TFMBartForConditionalGeneration"),PFr=o(" (mBART model)"),BFr=l(),MM=a("li"),AFe=a("strong"),IFr=o("mt5"),qFr=o(" \u2014 "),SH=a("a"),NFr=o("TFMT5ForConditionalGeneration"),jFr=o(" (mT5 model)"),DFr=l(),EM=a("li"),yFe=a("strong"),GFr=o("pegasus"),OFr=o(" \u2014 "),RH=a("a"),VFr=o("TFPegasusForConditionalGeneration"),XFr=o(" (Pegasus model)"),zFr=l(),CM=a("li"),LFe=a("strong"),WFr=o("t5"),QFr=o(" \u2014 "),PH=a("a"),HFr=o("TFT5ForConditionalGeneration"),UFr=o(" (T5 model)"),JFr=l(),F(wM.$$.fragment),uje=l(),hc=a("h2"),AM=a("a"),xFe=a("span"),F(UL.$$.fragment),YFr=l(),$Fe=a("span"),KFr=o("TFAutoModelForSequenceClassification"),_je=l(),nr=a("div"),F(JL.$$.fragment),ZFr=l(),pc=a("p"),e6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=a("a"),o6r=o("from_pretrained()"),r6r=o(" class method or the "),IH=a("a"),t6r=o("from_config()"),a6r=o(` class
method.`),n6r=l(),YL=a("p"),s6r=o("This class cannot be instantiated directly using "),kFe=a("code"),l6r=o("__init__()"),i6r=o(" (throws an error)."),d6r=l(),It=a("div"),F(KL.$$.fragment),c6r=l(),SFe=a("p"),f6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m6r=l(),uc=a("p"),g6r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),h6r=o("not"),p6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),u6r=o("from_pretrained()"),_6r=o(" to load the model weights."),b6r=l(),F(yM.$$.fragment),v6r=l(),Rr=a("div"),F(ZL.$$.fragment),F6r=l(),PFe=a("p"),T6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M6r=l(),fn=a("p"),E6r=o("The model class to instantiate is selected based on the "),BFe=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),A6r=o("pretrained_model_name_or_path"),y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),L6r=o("pretrained_model_name_or_path"),x6r=o(":"),$6r=l(),re=a("ul"),LM=a("li"),NFe=a("strong"),k6r=o("albert"),S6r=o(" \u2014 "),NH=a("a"),R6r=o("TFAlbertForSequenceClassification"),P6r=o(" (ALBERT model)"),B6r=l(),xM=a("li"),jFe=a("strong"),I6r=o("bert"),q6r=o(" \u2014 "),jH=a("a"),N6r=o("TFBertForSequenceClassification"),j6r=o(" (BERT model)"),D6r=l(),$M=a("li"),DFe=a("strong"),G6r=o("camembert"),O6r=o(" \u2014 "),DH=a("a"),V6r=o("TFCamembertForSequenceClassification"),X6r=o(" (CamemBERT model)"),z6r=l(),kM=a("li"),GFe=a("strong"),W6r=o("convbert"),Q6r=o(" \u2014 "),GH=a("a"),H6r=o("TFConvBertForSequenceClassification"),U6r=o(" (ConvBERT model)"),J6r=l(),SM=a("li"),OFe=a("strong"),Y6r=o("ctrl"),K6r=o(" \u2014 "),OH=a("a"),Z6r=o("TFCTRLForSequenceClassification"),eTr=o(" (CTRL model)"),oTr=l(),RM=a("li"),VFe=a("strong"),rTr=o("deberta"),tTr=o(" \u2014 "),VH=a("a"),aTr=o("TFDebertaForSequenceClassification"),nTr=o(" (DeBERTa model)"),sTr=l(),PM=a("li"),XFe=a("strong"),lTr=o("deberta-v2"),iTr=o(" \u2014 "),XH=a("a"),dTr=o("TFDebertaV2ForSequenceClassification"),cTr=o(" (DeBERTa-v2 model)"),fTr=l(),BM=a("li"),zFe=a("strong"),mTr=o("distilbert"),gTr=o(" \u2014 "),zH=a("a"),hTr=o("TFDistilBertForSequenceClassification"),pTr=o(" (DistilBERT model)"),uTr=l(),IM=a("li"),WFe=a("strong"),_Tr=o("electra"),bTr=o(" \u2014 "),WH=a("a"),vTr=o("TFElectraForSequenceClassification"),FTr=o(" (ELECTRA model)"),TTr=l(),qM=a("li"),QFe=a("strong"),MTr=o("flaubert"),ETr=o(" \u2014 "),QH=a("a"),CTr=o("TFFlaubertForSequenceClassification"),wTr=o(" (FlauBERT model)"),ATr=l(),NM=a("li"),HFe=a("strong"),yTr=o("funnel"),LTr=o(" \u2014 "),HH=a("a"),xTr=o("TFFunnelForSequenceClassification"),$Tr=o(" (Funnel Transformer model)"),kTr=l(),jM=a("li"),UFe=a("strong"),STr=o("gpt2"),RTr=o(" \u2014 "),UH=a("a"),PTr=o("TFGPT2ForSequenceClassification"),BTr=o(" (OpenAI GPT-2 model)"),ITr=l(),DM=a("li"),JFe=a("strong"),qTr=o("gptj"),NTr=o(" \u2014 "),JH=a("a"),jTr=o("TFGPTJForSequenceClassification"),DTr=o(" (GPT-J model)"),GTr=l(),GM=a("li"),YFe=a("strong"),OTr=o("layoutlm"),VTr=o(" \u2014 "),YH=a("a"),XTr=o("TFLayoutLMForSequenceClassification"),zTr=o(" (LayoutLM model)"),WTr=l(),OM=a("li"),KFe=a("strong"),QTr=o("longformer"),HTr=o(" \u2014 "),KH=a("a"),UTr=o("TFLongformerForSequenceClassification"),JTr=o(" (Longformer model)"),YTr=l(),VM=a("li"),ZFe=a("strong"),KTr=o("mobilebert"),ZTr=o(" \u2014 "),ZH=a("a"),e8r=o("TFMobileBertForSequenceClassification"),o8r=o(" (MobileBERT model)"),r8r=l(),XM=a("li"),e6e=a("strong"),t8r=o("mpnet"),a8r=o(" \u2014 "),eU=a("a"),n8r=o("TFMPNetForSequenceClassification"),s8r=o(" (MPNet model)"),l8r=l(),zM=a("li"),o6e=a("strong"),i8r=o("openai-gpt"),d8r=o(" \u2014 "),oU=a("a"),c8r=o("TFOpenAIGPTForSequenceClassification"),f8r=o(" (OpenAI GPT model)"),m8r=l(),WM=a("li"),r6e=a("strong"),g8r=o("rembert"),h8r=o(" \u2014 "),rU=a("a"),p8r=o("TFRemBertForSequenceClassification"),u8r=o(" (RemBERT model)"),_8r=l(),QM=a("li"),t6e=a("strong"),b8r=o("roberta"),v8r=o(" \u2014 "),tU=a("a"),F8r=o("TFRobertaForSequenceClassification"),T8r=o(" (RoBERTa model)"),M8r=l(),HM=a("li"),a6e=a("strong"),E8r=o("roformer"),C8r=o(" \u2014 "),aU=a("a"),w8r=o("TFRoFormerForSequenceClassification"),A8r=o(" (RoFormer model)"),y8r=l(),UM=a("li"),n6e=a("strong"),L8r=o("tapas"),x8r=o(" \u2014 "),nU=a("a"),$8r=o("TFTapasForSequenceClassification"),k8r=o(" (TAPAS model)"),S8r=l(),JM=a("li"),s6e=a("strong"),R8r=o("transfo-xl"),P8r=o(" \u2014 "),sU=a("a"),B8r=o("TFTransfoXLForSequenceClassification"),I8r=o(" (Transformer-XL model)"),q8r=l(),YM=a("li"),l6e=a("strong"),N8r=o("xlm"),j8r=o(" \u2014 "),lU=a("a"),D8r=o("TFXLMForSequenceClassification"),G8r=o(" (XLM model)"),O8r=l(),KM=a("li"),i6e=a("strong"),V8r=o("xlm-roberta"),X8r=o(" \u2014 "),iU=a("a"),z8r=o("TFXLMRobertaForSequenceClassification"),W8r=o(" (XLM-RoBERTa model)"),Q8r=l(),ZM=a("li"),d6e=a("strong"),H8r=o("xlnet"),U8r=o(" \u2014 "),dU=a("a"),J8r=o("TFXLNetForSequenceClassification"),Y8r=o(" (XLNet model)"),K8r=l(),F(e4.$$.fragment),bje=l(),_c=a("h2"),o4=a("a"),c6e=a("span"),F(ex.$$.fragment),Z8r=l(),f6e=a("span"),e7r=o("TFAutoModelForMultipleChoice"),vje=l(),sr=a("div"),F(ox.$$.fragment),o7r=l(),bc=a("p"),r7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=a("a"),t7r=o("from_pretrained()"),a7r=o(" class method or the "),fU=a("a"),n7r=o("from_config()"),s7r=o(` class
method.`),l7r=l(),rx=a("p"),i7r=o("This class cannot be instantiated directly using "),m6e=a("code"),d7r=o("__init__()"),c7r=o(" (throws an error)."),f7r=l(),qt=a("div"),F(tx.$$.fragment),m7r=l(),g6e=a("p"),g7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h7r=l(),vc=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),u7r=o("not"),_7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),b7r=o("from_pretrained()"),v7r=o(" to load the model weights."),F7r=l(),F(r4.$$.fragment),T7r=l(),Pr=a("div"),F(ax.$$.fragment),M7r=l(),p6e=a("p"),E7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C7r=l(),mn=a("p"),w7r=o("The model class to instantiate is selected based on the "),u6e=a("code"),A7r=o("model_type"),y7r=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),L7r=o("pretrained_model_name_or_path"),x7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),$7r=o("pretrained_model_name_or_path"),k7r=o(":"),S7r=l(),he=a("ul"),t4=a("li"),v6e=a("strong"),R7r=o("albert"),P7r=o(" \u2014 "),gU=a("a"),B7r=o("TFAlbertForMultipleChoice"),I7r=o(" (ALBERT model)"),q7r=l(),a4=a("li"),F6e=a("strong"),N7r=o("bert"),j7r=o(" \u2014 "),hU=a("a"),D7r=o("TFBertForMultipleChoice"),G7r=o(" (BERT model)"),O7r=l(),n4=a("li"),T6e=a("strong"),V7r=o("camembert"),X7r=o(" \u2014 "),pU=a("a"),z7r=o("TFCamembertForMultipleChoice"),W7r=o(" (CamemBERT model)"),Q7r=l(),s4=a("li"),M6e=a("strong"),H7r=o("convbert"),U7r=o(" \u2014 "),uU=a("a"),J7r=o("TFConvBertForMultipleChoice"),Y7r=o(" (ConvBERT model)"),K7r=l(),l4=a("li"),E6e=a("strong"),Z7r=o("distilbert"),eMr=o(" \u2014 "),_U=a("a"),oMr=o("TFDistilBertForMultipleChoice"),rMr=o(" (DistilBERT model)"),tMr=l(),i4=a("li"),C6e=a("strong"),aMr=o("electra"),nMr=o(" \u2014 "),bU=a("a"),sMr=o("TFElectraForMultipleChoice"),lMr=o(" (ELECTRA model)"),iMr=l(),d4=a("li"),w6e=a("strong"),dMr=o("flaubert"),cMr=o(" \u2014 "),vU=a("a"),fMr=o("TFFlaubertForMultipleChoice"),mMr=o(" (FlauBERT model)"),gMr=l(),c4=a("li"),A6e=a("strong"),hMr=o("funnel"),pMr=o(" \u2014 "),FU=a("a"),uMr=o("TFFunnelForMultipleChoice"),_Mr=o(" (Funnel Transformer model)"),bMr=l(),f4=a("li"),y6e=a("strong"),vMr=o("longformer"),FMr=o(" \u2014 "),TU=a("a"),TMr=o("TFLongformerForMultipleChoice"),MMr=o(" (Longformer model)"),EMr=l(),m4=a("li"),L6e=a("strong"),CMr=o("mobilebert"),wMr=o(" \u2014 "),MU=a("a"),AMr=o("TFMobileBertForMultipleChoice"),yMr=o(" (MobileBERT model)"),LMr=l(),g4=a("li"),x6e=a("strong"),xMr=o("mpnet"),$Mr=o(" \u2014 "),EU=a("a"),kMr=o("TFMPNetForMultipleChoice"),SMr=o(" (MPNet model)"),RMr=l(),h4=a("li"),$6e=a("strong"),PMr=o("rembert"),BMr=o(" \u2014 "),CU=a("a"),IMr=o("TFRemBertForMultipleChoice"),qMr=o(" (RemBERT model)"),NMr=l(),p4=a("li"),k6e=a("strong"),jMr=o("roberta"),DMr=o(" \u2014 "),wU=a("a"),GMr=o("TFRobertaForMultipleChoice"),OMr=o(" (RoBERTa model)"),VMr=l(),u4=a("li"),S6e=a("strong"),XMr=o("roformer"),zMr=o(" \u2014 "),AU=a("a"),WMr=o("TFRoFormerForMultipleChoice"),QMr=o(" (RoFormer model)"),HMr=l(),_4=a("li"),R6e=a("strong"),UMr=o("xlm"),JMr=o(" \u2014 "),yU=a("a"),YMr=o("TFXLMForMultipleChoice"),KMr=o(" (XLM model)"),ZMr=l(),b4=a("li"),P6e=a("strong"),e4r=o("xlm-roberta"),o4r=o(" \u2014 "),LU=a("a"),r4r=o("TFXLMRobertaForMultipleChoice"),t4r=o(" (XLM-RoBERTa model)"),a4r=l(),v4=a("li"),B6e=a("strong"),n4r=o("xlnet"),s4r=o(" \u2014 "),xU=a("a"),l4r=o("TFXLNetForMultipleChoice"),i4r=o(" (XLNet model)"),d4r=l(),F(F4.$$.fragment),Fje=l(),Fc=a("h2"),T4=a("a"),I6e=a("span"),F(nx.$$.fragment),c4r=l(),q6e=a("span"),f4r=o("TFAutoModelForNextSentencePrediction"),Tje=l(),lr=a("div"),F(sx.$$.fragment),m4r=l(),Tc=a("p"),g4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=a("a"),h4r=o("from_pretrained()"),p4r=o(" class method or the "),kU=a("a"),u4r=o("from_config()"),_4r=o(` class
method.`),b4r=l(),lx=a("p"),v4r=o("This class cannot be instantiated directly using "),N6e=a("code"),F4r=o("__init__()"),T4r=o(" (throws an error)."),M4r=l(),Nt=a("div"),F(ix.$$.fragment),E4r=l(),j6e=a("p"),C4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w4r=l(),Mc=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),y4r=o("not"),L4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),x4r=o("from_pretrained()"),$4r=o(" to load the model weights."),k4r=l(),F(M4.$$.fragment),S4r=l(),Br=a("div"),F(dx.$$.fragment),R4r=l(),G6e=a("p"),P4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B4r=l(),gn=a("p"),I4r=o("The model class to instantiate is selected based on the "),O6e=a("code"),q4r=o("model_type"),N4r=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(":"),V4r=l(),cx=a("ul"),E4=a("li"),z6e=a("strong"),X4r=o("bert"),z4r=o(" \u2014 "),RU=a("a"),W4r=o("TFBertForNextSentencePrediction"),Q4r=o(" (BERT model)"),H4r=l(),C4=a("li"),W6e=a("strong"),U4r=o("mobilebert"),J4r=o(" \u2014 "),PU=a("a"),Y4r=o("TFMobileBertForNextSentencePrediction"),K4r=o(" (MobileBERT model)"),Z4r=l(),F(w4.$$.fragment),Mje=l(),Ec=a("h2"),A4=a("a"),Q6e=a("span"),F(fx.$$.fragment),eEr=l(),H6e=a("span"),oEr=o("TFAutoModelForTableQuestionAnswering"),Eje=l(),ir=a("div"),F(mx.$$.fragment),rEr=l(),Cc=a("p"),tEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=a("a"),aEr=o("from_pretrained()"),nEr=o(" class method or the "),IU=a("a"),sEr=o("from_config()"),lEr=o(` class
method.`),iEr=l(),gx=a("p"),dEr=o("This class cannot be instantiated directly using "),U6e=a("code"),cEr=o("__init__()"),fEr=o(" (throws an error)."),mEr=l(),jt=a("div"),F(hx.$$.fragment),gEr=l(),J6e=a("p"),hEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pEr=l(),wc=a("p"),uEr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),_Er=o("not"),bEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),vEr=o("from_pretrained()"),FEr=o(" to load the model weights."),TEr=l(),F(y4.$$.fragment),MEr=l(),Ir=a("div"),F(px.$$.fragment),EEr=l(),K6e=a("p"),CEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wEr=l(),hn=a("p"),AEr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),yEr=o("model_type"),LEr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),kEr=o("pretrained_model_name_or_path"),SEr=o(":"),REr=l(),rTe=a("ul"),L4=a("li"),tTe=a("strong"),PEr=o("tapas"),BEr=o(" \u2014 "),NU=a("a"),IEr=o("TFTapasForQuestionAnswering"),qEr=o(" (TAPAS model)"),NEr=l(),F(x4.$$.fragment),Cje=l(),Ac=a("h2"),$4=a("a"),aTe=a("span"),F(ux.$$.fragment),jEr=l(),nTe=a("span"),DEr=o("TFAutoModelForTokenClassification"),wje=l(),dr=a("div"),F(_x.$$.fragment),GEr=l(),yc=a("p"),OEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=a("a"),VEr=o("from_pretrained()"),XEr=o(" class method or the "),DU=a("a"),zEr=o("from_config()"),WEr=o(` class
method.`),QEr=l(),bx=a("p"),HEr=o("This class cannot be instantiated directly using "),sTe=a("code"),UEr=o("__init__()"),JEr=o(" (throws an error)."),YEr=l(),Dt=a("div"),F(vx.$$.fragment),KEr=l(),lTe=a("p"),ZEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eCr=l(),Lc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(k4.$$.fragment),lCr=l(),qr=a("div"),F(Fx.$$.fragment),iCr=l(),dTe=a("p"),dCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cCr=l(),pn=a("p"),fCr=o("The model class to instantiate is selected based on the "),cTe=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),de=a("ul"),S4=a("li"),gTe=a("strong"),vCr=o("albert"),FCr=o(" \u2014 "),OU=a("a"),TCr=o("TFAlbertForTokenClassification"),MCr=o(" (ALBERT model)"),ECr=l(),R4=a("li"),hTe=a("strong"),CCr=o("bert"),wCr=o(" \u2014 "),VU=a("a"),ACr=o("TFBertForTokenClassification"),yCr=o(" (BERT model)"),LCr=l(),P4=a("li"),pTe=a("strong"),xCr=o("camembert"),$Cr=o(" \u2014 "),XU=a("a"),kCr=o("TFCamembertForTokenClassification"),SCr=o(" (CamemBERT model)"),RCr=l(),B4=a("li"),uTe=a("strong"),PCr=o("convbert"),BCr=o(" \u2014 "),zU=a("a"),ICr=o("TFConvBertForTokenClassification"),qCr=o(" (ConvBERT model)"),NCr=l(),I4=a("li"),_Te=a("strong"),jCr=o("deberta"),DCr=o(" \u2014 "),WU=a("a"),GCr=o("TFDebertaForTokenClassification"),OCr=o(" (DeBERTa model)"),VCr=l(),q4=a("li"),bTe=a("strong"),XCr=o("deberta-v2"),zCr=o(" \u2014 "),QU=a("a"),WCr=o("TFDebertaV2ForTokenClassification"),QCr=o(" (DeBERTa-v2 model)"),HCr=l(),N4=a("li"),vTe=a("strong"),UCr=o("distilbert"),JCr=o(" \u2014 "),HU=a("a"),YCr=o("TFDistilBertForTokenClassification"),KCr=o(" (DistilBERT model)"),ZCr=l(),j4=a("li"),FTe=a("strong"),e5r=o("electra"),o5r=o(" \u2014 "),UU=a("a"),r5r=o("TFElectraForTokenClassification"),t5r=o(" (ELECTRA model)"),a5r=l(),D4=a("li"),TTe=a("strong"),n5r=o("flaubert"),s5r=o(" \u2014 "),JU=a("a"),l5r=o("TFFlaubertForTokenClassification"),i5r=o(" (FlauBERT model)"),d5r=l(),G4=a("li"),MTe=a("strong"),c5r=o("funnel"),f5r=o(" \u2014 "),YU=a("a"),m5r=o("TFFunnelForTokenClassification"),g5r=o(" (Funnel Transformer model)"),h5r=l(),O4=a("li"),ETe=a("strong"),p5r=o("layoutlm"),u5r=o(" \u2014 "),KU=a("a"),_5r=o("TFLayoutLMForTokenClassification"),b5r=o(" (LayoutLM model)"),v5r=l(),V4=a("li"),CTe=a("strong"),F5r=o("longformer"),T5r=o(" \u2014 "),ZU=a("a"),M5r=o("TFLongformerForTokenClassification"),E5r=o(" (Longformer model)"),C5r=l(),X4=a("li"),wTe=a("strong"),w5r=o("mobilebert"),A5r=o(" \u2014 "),eJ=a("a"),y5r=o("TFMobileBertForTokenClassification"),L5r=o(" (MobileBERT model)"),x5r=l(),z4=a("li"),ATe=a("strong"),$5r=o("mpnet"),k5r=o(" \u2014 "),oJ=a("a"),S5r=o("TFMPNetForTokenClassification"),R5r=o(" (MPNet model)"),P5r=l(),W4=a("li"),yTe=a("strong"),B5r=o("rembert"),I5r=o(" \u2014 "),rJ=a("a"),q5r=o("TFRemBertForTokenClassification"),N5r=o(" (RemBERT model)"),j5r=l(),Q4=a("li"),LTe=a("strong"),D5r=o("roberta"),G5r=o(" \u2014 "),tJ=a("a"),O5r=o("TFRobertaForTokenClassification"),V5r=o(" (RoBERTa model)"),X5r=l(),H4=a("li"),xTe=a("strong"),z5r=o("roformer"),W5r=o(" \u2014 "),aJ=a("a"),Q5r=o("TFRoFormerForTokenClassification"),H5r=o(" (RoFormer model)"),U5r=l(),U4=a("li"),$Te=a("strong"),J5r=o("xlm"),Y5r=o(" \u2014 "),nJ=a("a"),K5r=o("TFXLMForTokenClassification"),Z5r=o(" (XLM model)"),e3r=l(),J4=a("li"),kTe=a("strong"),o3r=o("xlm-roberta"),r3r=o(" \u2014 "),sJ=a("a"),t3r=o("TFXLMRobertaForTokenClassification"),a3r=o(" (XLM-RoBERTa model)"),n3r=l(),Y4=a("li"),STe=a("strong"),s3r=o("xlnet"),l3r=o(" \u2014 "),lJ=a("a"),i3r=o("TFXLNetForTokenClassification"),d3r=o(" (XLNet model)"),c3r=l(),F(K4.$$.fragment),Aje=l(),xc=a("h2"),Z4=a("a"),RTe=a("span"),F(Tx.$$.fragment),f3r=l(),PTe=a("span"),m3r=o("TFAutoModelForQuestionAnswering"),yje=l(),cr=a("div"),F(Mx.$$.fragment),g3r=l(),$c=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),p3r=o("from_pretrained()"),u3r=o(" class method or the "),dJ=a("a"),_3r=o("from_config()"),b3r=o(` class
method.`),v3r=l(),Ex=a("p"),F3r=o("This class cannot be instantiated directly using "),BTe=a("code"),T3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),Gt=a("div"),F(Cx.$$.fragment),C3r=l(),ITe=a("p"),w3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A3r=l(),kc=a("p"),y3r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),L3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),$3r=o("from_pretrained()"),k3r=o(" to load the model weights."),S3r=l(),F(eE.$$.fragment),R3r=l(),Nr=a("div"),F(wx.$$.fragment),P3r=l(),NTe=a("p"),B3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I3r=l(),un=a("p"),q3r=o("The model class to instantiate is selected based on the "),jTe=a("code"),N3r=o("model_type"),j3r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(":"),X3r=l(),ce=a("ul"),oE=a("li"),OTe=a("strong"),z3r=o("albert"),W3r=o(" \u2014 "),fJ=a("a"),Q3r=o("TFAlbertForQuestionAnswering"),H3r=o(" (ALBERT model)"),U3r=l(),rE=a("li"),VTe=a("strong"),J3r=o("bert"),Y3r=o(" \u2014 "),mJ=a("a"),K3r=o("TFBertForQuestionAnswering"),Z3r=o(" (BERT model)"),ewr=l(),tE=a("li"),XTe=a("strong"),owr=o("camembert"),rwr=o(" \u2014 "),gJ=a("a"),twr=o("TFCamembertForQuestionAnswering"),awr=o(" (CamemBERT model)"),nwr=l(),aE=a("li"),zTe=a("strong"),swr=o("convbert"),lwr=o(" \u2014 "),hJ=a("a"),iwr=o("TFConvBertForQuestionAnswering"),dwr=o(" (ConvBERT model)"),cwr=l(),nE=a("li"),WTe=a("strong"),fwr=o("deberta"),mwr=o(" \u2014 "),pJ=a("a"),gwr=o("TFDebertaForQuestionAnswering"),hwr=o(" (DeBERTa model)"),pwr=l(),sE=a("li"),QTe=a("strong"),uwr=o("deberta-v2"),_wr=o(" \u2014 "),uJ=a("a"),bwr=o("TFDebertaV2ForQuestionAnswering"),vwr=o(" (DeBERTa-v2 model)"),Fwr=l(),lE=a("li"),HTe=a("strong"),Twr=o("distilbert"),Mwr=o(" \u2014 "),_J=a("a"),Ewr=o("TFDistilBertForQuestionAnswering"),Cwr=o(" (DistilBERT model)"),wwr=l(),iE=a("li"),UTe=a("strong"),Awr=o("electra"),ywr=o(" \u2014 "),bJ=a("a"),Lwr=o("TFElectraForQuestionAnswering"),xwr=o(" (ELECTRA model)"),$wr=l(),dE=a("li"),JTe=a("strong"),kwr=o("flaubert"),Swr=o(" \u2014 "),vJ=a("a"),Rwr=o("TFFlaubertForQuestionAnsweringSimple"),Pwr=o(" (FlauBERT model)"),Bwr=l(),cE=a("li"),YTe=a("strong"),Iwr=o("funnel"),qwr=o(" \u2014 "),FJ=a("a"),Nwr=o("TFFunnelForQuestionAnswering"),jwr=o(" (Funnel Transformer model)"),Dwr=l(),fE=a("li"),KTe=a("strong"),Gwr=o("gptj"),Owr=o(" \u2014 "),TJ=a("a"),Vwr=o("TFGPTJForQuestionAnswering"),Xwr=o(" (GPT-J model)"),zwr=l(),mE=a("li"),ZTe=a("strong"),Wwr=o("longformer"),Qwr=o(" \u2014 "),MJ=a("a"),Hwr=o("TFLongformerForQuestionAnswering"),Uwr=o(" (Longformer model)"),Jwr=l(),gE=a("li"),e8e=a("strong"),Ywr=o("mobilebert"),Kwr=o(" \u2014 "),EJ=a("a"),Zwr=o("TFMobileBertForQuestionAnswering"),e0r=o(" (MobileBERT model)"),o0r=l(),hE=a("li"),o8e=a("strong"),r0r=o("mpnet"),t0r=o(" \u2014 "),CJ=a("a"),a0r=o("TFMPNetForQuestionAnswering"),n0r=o(" (MPNet model)"),s0r=l(),pE=a("li"),r8e=a("strong"),l0r=o("rembert"),i0r=o(" \u2014 "),wJ=a("a"),d0r=o("TFRemBertForQuestionAnswering"),c0r=o(" (RemBERT model)"),f0r=l(),uE=a("li"),t8e=a("strong"),m0r=o("roberta"),g0r=o(" \u2014 "),AJ=a("a"),h0r=o("TFRobertaForQuestionAnswering"),p0r=o(" (RoBERTa model)"),u0r=l(),_E=a("li"),a8e=a("strong"),_0r=o("roformer"),b0r=o(" \u2014 "),yJ=a("a"),v0r=o("TFRoFormerForQuestionAnswering"),F0r=o(" (RoFormer model)"),T0r=l(),bE=a("li"),n8e=a("strong"),M0r=o("xlm"),E0r=o(" \u2014 "),LJ=a("a"),C0r=o("TFXLMForQuestionAnsweringSimple"),w0r=o(" (XLM model)"),A0r=l(),vE=a("li"),s8e=a("strong"),y0r=o("xlm-roberta"),L0r=o(" \u2014 "),xJ=a("a"),x0r=o("TFXLMRobertaForQuestionAnswering"),$0r=o(" (XLM-RoBERTa model)"),k0r=l(),FE=a("li"),l8e=a("strong"),S0r=o("xlnet"),R0r=o(" \u2014 "),$J=a("a"),P0r=o("TFXLNetForQuestionAnsweringSimple"),B0r=o(" (XLNet model)"),I0r=l(),F(TE.$$.fragment),Lje=l(),Sc=a("h2"),ME=a("a"),i8e=a("span"),F(Ax.$$.fragment),q0r=l(),d8e=a("span"),N0r=o("TFAutoModelForVision2Seq"),xje=l(),fr=a("div"),F(yx.$$.fragment),j0r=l(),Rc=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),SJ=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),Lx=a("p"),W0r=o("This class cannot be instantiated directly using "),c8e=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),Ot=a("div"),F(xx.$$.fragment),J0r=l(),f8e=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K0r=l(),Pc=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),m8e=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),rAr=o("from_pretrained()"),tAr=o(" to load the model weights."),aAr=l(),F(EE.$$.fragment),nAr=l(),jr=a("div"),F($x.$$.fragment),sAr=l(),g8e=a("p"),lAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iAr=l(),_n=a("p"),dAr=o("The model class to instantiate is selected based on the "),h8e=a("code"),cAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),p8e=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(":"),uAr=l(),_8e=a("ul"),CE=a("li"),b8e=a("strong"),_Ar=o("vision-encoder-decoder"),bAr=o(" \u2014 "),PJ=a("a"),vAr=o("TFVisionEncoderDecoderModel"),FAr=o(" (Vision Encoder decoder model)"),TAr=l(),F(wE.$$.fragment),$je=l(),Bc=a("h2"),AE=a("a"),v8e=a("span"),F(kx.$$.fragment),MAr=l(),F8e=a("span"),EAr=o("TFAutoModelForSpeechSeq2Seq"),kje=l(),mr=a("div"),F(Sx.$$.fragment),CAr=l(),Ic=a("p"),wAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=a("a"),AAr=o("from_pretrained()"),yAr=o(" class method or the "),IJ=a("a"),LAr=o("from_config()"),xAr=o(` class
method.`),$Ar=l(),Rx=a("p"),kAr=o("This class cannot be instantiated directly using "),T8e=a("code"),SAr=o("__init__()"),RAr=o(" (throws an error)."),PAr=l(),Vt=a("div"),F(Px.$$.fragment),BAr=l(),M8e=a("p"),IAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qAr=l(),qc=a("p"),NAr=o(`Note:
Loading a model from its configuration file does `),E8e=a("strong"),jAr=o("not"),DAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),GAr=o("from_pretrained()"),OAr=o(" to load the model weights."),VAr=l(),F(yE.$$.fragment),XAr=l(),Dr=a("div"),F(Bx.$$.fragment),zAr=l(),C8e=a("p"),WAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QAr=l(),bn=a("p"),HAr=o("The model class to instantiate is selected based on the "),w8e=a("code"),UAr=o("model_type"),JAr=o(` property of the config object (either
passed as an argument or loaded from `),A8e=a("code"),YAr=o("pretrained_model_name_or_path"),KAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),ZAr=o("pretrained_model_name_or_path"),eyr=o(":"),oyr=l(),L8e=a("ul"),LE=a("li"),x8e=a("strong"),ryr=o("speech_to_text"),tyr=o(" \u2014 "),NJ=a("a"),ayr=o("TFSpeech2TextForConditionalGeneration"),nyr=o(" (Speech2Text model)"),syr=l(),F(xE.$$.fragment),Sje=l(),Nc=a("h2"),$E=a("a"),$8e=a("span"),F(Ix.$$.fragment),lyr=l(),k8e=a("span"),iyr=o("FlaxAutoModel"),Rje=l(),gr=a("div"),F(qx.$$.fragment),dyr=l(),jc=a("p"),cyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=a("a"),fyr=o("from_pretrained()"),myr=o(" class method or the "),DJ=a("a"),gyr=o("from_config()"),hyr=o(` class
method.`),pyr=l(),Nx=a("p"),uyr=o("This class cannot be instantiated directly using "),S8e=a("code"),_yr=o("__init__()"),byr=o(" (throws an error)."),vyr=l(),Xt=a("div"),F(jx.$$.fragment),Fyr=l(),R8e=a("p"),Tyr=o("Instantiates one of the base model classes of the library from a configuration."),Myr=l(),Dc=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),Cyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),Ayr=o("from_pretrained()"),yyr=o(" to load the model weights."),Lyr=l(),F(kE.$$.fragment),xyr=l(),Gr=a("div"),F(Dx.$$.fragment),$yr=l(),B8e=a("p"),kyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Syr=l(),vn=a("p"),Ryr=o("The model class to instantiate is selected based on the "),I8e=a("code"),Pyr=o("model_type"),Byr=o(` property of the config object (either
passed as an argument or loaded from `),q8e=a("code"),Iyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(":"),Dyr=l(),te=a("ul"),SE=a("li"),j8e=a("strong"),Gyr=o("albert"),Oyr=o(" \u2014 "),OJ=a("a"),Vyr=o("FlaxAlbertModel"),Xyr=o(" (ALBERT model)"),zyr=l(),RE=a("li"),D8e=a("strong"),Wyr=o("bart"),Qyr=o(" \u2014 "),VJ=a("a"),Hyr=o("FlaxBartModel"),Uyr=o(" (BART model)"),Jyr=l(),PE=a("li"),G8e=a("strong"),Yyr=o("beit"),Kyr=o(" \u2014 "),XJ=a("a"),Zyr=o("FlaxBeitModel"),eLr=o(" (BEiT model)"),oLr=l(),BE=a("li"),O8e=a("strong"),rLr=o("bert"),tLr=o(" \u2014 "),zJ=a("a"),aLr=o("FlaxBertModel"),nLr=o(" (BERT model)"),sLr=l(),IE=a("li"),V8e=a("strong"),lLr=o("big_bird"),iLr=o(" \u2014 "),WJ=a("a"),dLr=o("FlaxBigBirdModel"),cLr=o(" (BigBird model)"),fLr=l(),qE=a("li"),X8e=a("strong"),mLr=o("blenderbot"),gLr=o(" \u2014 "),QJ=a("a"),hLr=o("FlaxBlenderbotModel"),pLr=o(" (Blenderbot model)"),uLr=l(),NE=a("li"),z8e=a("strong"),_Lr=o("blenderbot-small"),bLr=o(" \u2014 "),HJ=a("a"),vLr=o("FlaxBlenderbotSmallModel"),FLr=o(" (BlenderbotSmall model)"),TLr=l(),jE=a("li"),W8e=a("strong"),MLr=o("clip"),ELr=o(" \u2014 "),UJ=a("a"),CLr=o("FlaxCLIPModel"),wLr=o(" (CLIP model)"),ALr=l(),DE=a("li"),Q8e=a("strong"),yLr=o("distilbert"),LLr=o(" \u2014 "),JJ=a("a"),xLr=o("FlaxDistilBertModel"),$Lr=o(" (DistilBERT model)"),kLr=l(),GE=a("li"),H8e=a("strong"),SLr=o("electra"),RLr=o(" \u2014 "),YJ=a("a"),PLr=o("FlaxElectraModel"),BLr=o(" (ELECTRA model)"),ILr=l(),OE=a("li"),U8e=a("strong"),qLr=o("gpt2"),NLr=o(" \u2014 "),KJ=a("a"),jLr=o("FlaxGPT2Model"),DLr=o(" (OpenAI GPT-2 model)"),GLr=l(),VE=a("li"),J8e=a("strong"),OLr=o("gpt_neo"),VLr=o(" \u2014 "),ZJ=a("a"),XLr=o("FlaxGPTNeoModel"),zLr=o(" (GPT Neo model)"),WLr=l(),XE=a("li"),Y8e=a("strong"),QLr=o("gptj"),HLr=o(" \u2014 "),eY=a("a"),ULr=o("FlaxGPTJModel"),JLr=o(" (GPT-J model)"),YLr=l(),zE=a("li"),K8e=a("strong"),KLr=o("marian"),ZLr=o(" \u2014 "),oY=a("a"),exr=o("FlaxMarianModel"),oxr=o(" (Marian model)"),rxr=l(),WE=a("li"),Z8e=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),rY=a("a"),nxr=o("FlaxMBartModel"),sxr=o(" (mBART model)"),lxr=l(),QE=a("li"),e7e=a("strong"),ixr=o("mt5"),dxr=o(" \u2014 "),tY=a("a"),cxr=o("FlaxMT5Model"),fxr=o(" (mT5 model)"),mxr=l(),HE=a("li"),o7e=a("strong"),gxr=o("pegasus"),hxr=o(" \u2014 "),aY=a("a"),pxr=o("FlaxPegasusModel"),uxr=o(" (Pegasus model)"),_xr=l(),UE=a("li"),r7e=a("strong"),bxr=o("roberta"),vxr=o(" \u2014 "),nY=a("a"),Fxr=o("FlaxRobertaModel"),Txr=o(" (RoBERTa model)"),Mxr=l(),JE=a("li"),t7e=a("strong"),Exr=o("roformer"),Cxr=o(" \u2014 "),sY=a("a"),wxr=o("FlaxRoFormerModel"),Axr=o(" (RoFormer model)"),yxr=l(),YE=a("li"),a7e=a("strong"),Lxr=o("t5"),xxr=o(" \u2014 "),lY=a("a"),$xr=o("FlaxT5Model"),kxr=o(" (T5 model)"),Sxr=l(),KE=a("li"),n7e=a("strong"),Rxr=o("vision-text-dual-encoder"),Pxr=o(" \u2014 "),iY=a("a"),Bxr=o("FlaxVisionTextDualEncoderModel"),Ixr=o(" (VisionTextDualEncoder model)"),qxr=l(),ZE=a("li"),s7e=a("strong"),Nxr=o("vit"),jxr=o(" \u2014 "),dY=a("a"),Dxr=o("FlaxViTModel"),Gxr=o(" (ViT model)"),Oxr=l(),eC=a("li"),l7e=a("strong"),Vxr=o("wav2vec2"),Xxr=o(" \u2014 "),cY=a("a"),zxr=o("FlaxWav2Vec2Model"),Wxr=o(" (Wav2Vec2 model)"),Qxr=l(),oC=a("li"),i7e=a("strong"),Hxr=o("xglm"),Uxr=o(" \u2014 "),fY=a("a"),Jxr=o("FlaxXGLMModel"),Yxr=o(" (XGLM model)"),Kxr=l(),rC=a("li"),d7e=a("strong"),Zxr=o("xlm-roberta"),e9r=o(" \u2014 "),mY=a("a"),o9r=o("FlaxXLMRobertaModel"),r9r=o(" (XLM-RoBERTa model)"),t9r=l(),F(tC.$$.fragment),Pje=l(),Gc=a("h2"),aC=a("a"),c7e=a("span"),F(Gx.$$.fragment),a9r=l(),f7e=a("span"),n9r=o("FlaxAutoModelForCausalLM"),Bje=l(),hr=a("div"),F(Ox.$$.fragment),s9r=l(),Oc=a("p"),l9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=a("a"),i9r=o("from_pretrained()"),d9r=o(" class method or the "),hY=a("a"),c9r=o("from_config()"),f9r=o(` class
method.`),m9r=l(),Vx=a("p"),g9r=o("This class cannot be instantiated directly using "),m7e=a("code"),h9r=o("__init__()"),p9r=o(" (throws an error)."),u9r=l(),zt=a("div"),F(Xx.$$.fragment),_9r=l(),g7e=a("p"),b9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v9r=l(),Vc=a("p"),F9r=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),T9r=o("not"),M9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),E9r=o("from_pretrained()"),C9r=o(" to load the model weights."),w9r=l(),F(nC.$$.fragment),A9r=l(),Or=a("div"),F(zx.$$.fragment),y9r=l(),p7e=a("p"),L9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x9r=l(),Fn=a("p"),$9r=o("The model class to instantiate is selected based on the "),u7e=a("code"),k9r=o("model_type"),S9r=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),B9r=o("pretrained_model_name_or_path"),I9r=o(":"),q9r=l(),Re=a("ul"),sC=a("li"),v7e=a("strong"),N9r=o("bart"),j9r=o(" \u2014 "),uY=a("a"),D9r=o("FlaxBartForCausalLM"),G9r=o(" (BART model)"),O9r=l(),lC=a("li"),F7e=a("strong"),V9r=o("bert"),X9r=o(" \u2014 "),_Y=a("a"),z9r=o("FlaxBertForCausalLM"),W9r=o(" (BERT model)"),Q9r=l(),iC=a("li"),T7e=a("strong"),H9r=o("big_bird"),U9r=o(" \u2014 "),bY=a("a"),J9r=o("FlaxBigBirdForCausalLM"),Y9r=o(" (BigBird model)"),K9r=l(),dC=a("li"),M7e=a("strong"),Z9r=o("electra"),e$r=o(" \u2014 "),vY=a("a"),o$r=o("FlaxElectraForCausalLM"),r$r=o(" (ELECTRA model)"),t$r=l(),cC=a("li"),E7e=a("strong"),a$r=o("gpt2"),n$r=o(" \u2014 "),FY=a("a"),s$r=o("FlaxGPT2LMHeadModel"),l$r=o(" (OpenAI GPT-2 model)"),i$r=l(),fC=a("li"),C7e=a("strong"),d$r=o("gpt_neo"),c$r=o(" \u2014 "),TY=a("a"),f$r=o("FlaxGPTNeoForCausalLM"),m$r=o(" (GPT Neo model)"),g$r=l(),mC=a("li"),w7e=a("strong"),h$r=o("gptj"),p$r=o(" \u2014 "),MY=a("a"),u$r=o("FlaxGPTJForCausalLM"),_$r=o(" (GPT-J model)"),b$r=l(),gC=a("li"),A7e=a("strong"),v$r=o("roberta"),F$r=o(" \u2014 "),EY=a("a"),T$r=o("FlaxRobertaForCausalLM"),M$r=o(" (RoBERTa model)"),E$r=l(),hC=a("li"),y7e=a("strong"),C$r=o("xglm"),w$r=o(" \u2014 "),CY=a("a"),A$r=o("FlaxXGLMForCausalLM"),y$r=o(" (XGLM model)"),L$r=l(),F(pC.$$.fragment),Ije=l(),Xc=a("h2"),uC=a("a"),L7e=a("span"),F(Wx.$$.fragment),x$r=l(),x7e=a("span"),$$r=o("FlaxAutoModelForPreTraining"),qje=l(),pr=a("div"),F(Qx.$$.fragment),k$r=l(),zc=a("p"),S$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=a("a"),R$r=o("from_pretrained()"),P$r=o(" class method or the "),AY=a("a"),B$r=o("from_config()"),I$r=o(` class
method.`),q$r=l(),Hx=a("p"),N$r=o("This class cannot be instantiated directly using "),$7e=a("code"),j$r=o("__init__()"),D$r=o(" (throws an error)."),G$r=l(),Wt=a("div"),F(Ux.$$.fragment),O$r=l(),k7e=a("p"),V$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X$r=l(),Wc=a("p"),z$r=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),W$r=o("not"),Q$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),H$r=o("from_pretrained()"),U$r=o(" to load the model weights."),J$r=l(),F(_C.$$.fragment),Y$r=l(),Vr=a("div"),F(Jx.$$.fragment),K$r=l(),R7e=a("p"),Z$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ekr=l(),Tn=a("p"),okr=o("The model class to instantiate is selected based on the "),P7e=a("code"),rkr=o("model_type"),tkr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),skr=o("pretrained_model_name_or_path"),lkr=o(":"),ikr=l(),Ee=a("ul"),bC=a("li"),q7e=a("strong"),dkr=o("albert"),ckr=o(" \u2014 "),LY=a("a"),fkr=o("FlaxAlbertForPreTraining"),mkr=o(" (ALBERT model)"),gkr=l(),vC=a("li"),N7e=a("strong"),hkr=o("bart"),pkr=o(" \u2014 "),xY=a("a"),ukr=o("FlaxBartForConditionalGeneration"),_kr=o(" (BART model)"),bkr=l(),FC=a("li"),j7e=a("strong"),vkr=o("bert"),Fkr=o(" \u2014 "),$Y=a("a"),Tkr=o("FlaxBertForPreTraining"),Mkr=o(" (BERT model)"),Ekr=l(),TC=a("li"),D7e=a("strong"),Ckr=o("big_bird"),wkr=o(" \u2014 "),kY=a("a"),Akr=o("FlaxBigBirdForPreTraining"),ykr=o(" (BigBird model)"),Lkr=l(),MC=a("li"),G7e=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),SY=a("a"),kkr=o("FlaxElectraForPreTraining"),Skr=o(" (ELECTRA model)"),Rkr=l(),EC=a("li"),O7e=a("strong"),Pkr=o("mbart"),Bkr=o(" \u2014 "),RY=a("a"),Ikr=o("FlaxMBartForConditionalGeneration"),qkr=o(" (mBART model)"),Nkr=l(),CC=a("li"),V7e=a("strong"),jkr=o("mt5"),Dkr=o(" \u2014 "),PY=a("a"),Gkr=o("FlaxMT5ForConditionalGeneration"),Okr=o(" (mT5 model)"),Vkr=l(),wC=a("li"),X7e=a("strong"),Xkr=o("roberta"),zkr=o(" \u2014 "),BY=a("a"),Wkr=o("FlaxRobertaForMaskedLM"),Qkr=o(" (RoBERTa model)"),Hkr=l(),AC=a("li"),z7e=a("strong"),Ukr=o("roformer"),Jkr=o(" \u2014 "),IY=a("a"),Ykr=o("FlaxRoFormerForMaskedLM"),Kkr=o(" (RoFormer model)"),Zkr=l(),yC=a("li"),W7e=a("strong"),eSr=o("t5"),oSr=o(" \u2014 "),qY=a("a"),rSr=o("FlaxT5ForConditionalGeneration"),tSr=o(" (T5 model)"),aSr=l(),LC=a("li"),Q7e=a("strong"),nSr=o("wav2vec2"),sSr=o(" \u2014 "),NY=a("a"),lSr=o("FlaxWav2Vec2ForPreTraining"),iSr=o(" (Wav2Vec2 model)"),dSr=l(),xC=a("li"),H7e=a("strong"),cSr=o("xlm-roberta"),fSr=o(" \u2014 "),jY=a("a"),mSr=o("FlaxXLMRobertaForMaskedLM"),gSr=o(" (XLM-RoBERTa model)"),hSr=l(),F($C.$$.fragment),Nje=l(),Qc=a("h2"),kC=a("a"),U7e=a("span"),F(Yx.$$.fragment),pSr=l(),J7e=a("span"),uSr=o("FlaxAutoModelForMaskedLM"),jje=l(),ur=a("div"),F(Kx.$$.fragment),_Sr=l(),Hc=a("p"),bSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=a("a"),vSr=o("from_pretrained()"),FSr=o(" class method or the "),GY=a("a"),TSr=o("from_config()"),MSr=o(` class
method.`),ESr=l(),Zx=a("p"),CSr=o("This class cannot be instantiated directly using "),Y7e=a("code"),wSr=o("__init__()"),ASr=o(" (throws an error)."),ySr=l(),Qt=a("div"),F(e9.$$.fragment),LSr=l(),K7e=a("p"),xSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Sr=l(),Uc=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),PSr=o("from_pretrained()"),BSr=o(" to load the model weights."),ISr=l(),F(SC.$$.fragment),qSr=l(),Xr=a("div"),F(o9.$$.fragment),NSr=l(),eMe=a("p"),jSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DSr=l(),Mn=a("p"),GSr=o("The model class to instantiate is selected based on the "),oMe=a("code"),OSr=o("model_type"),VSr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),WSr=o("pretrained_model_name_or_path"),QSr=o(":"),HSr=l(),Le=a("ul"),RC=a("li"),aMe=a("strong"),USr=o("albert"),JSr=o(" \u2014 "),VY=a("a"),YSr=o("FlaxAlbertForMaskedLM"),KSr=o(" (ALBERT model)"),ZSr=l(),PC=a("li"),nMe=a("strong"),eRr=o("bart"),oRr=o(" \u2014 "),XY=a("a"),rRr=o("FlaxBartForConditionalGeneration"),tRr=o(" (BART model)"),aRr=l(),BC=a("li"),sMe=a("strong"),nRr=o("bert"),sRr=o(" \u2014 "),zY=a("a"),lRr=o("FlaxBertForMaskedLM"),iRr=o(" (BERT model)"),dRr=l(),IC=a("li"),lMe=a("strong"),cRr=o("big_bird"),fRr=o(" \u2014 "),WY=a("a"),mRr=o("FlaxBigBirdForMaskedLM"),gRr=o(" (BigBird model)"),hRr=l(),qC=a("li"),iMe=a("strong"),pRr=o("distilbert"),uRr=o(" \u2014 "),QY=a("a"),_Rr=o("FlaxDistilBertForMaskedLM"),bRr=o(" (DistilBERT model)"),vRr=l(),NC=a("li"),dMe=a("strong"),FRr=o("electra"),TRr=o(" \u2014 "),HY=a("a"),MRr=o("FlaxElectraForMaskedLM"),ERr=o(" (ELECTRA model)"),CRr=l(),jC=a("li"),cMe=a("strong"),wRr=o("mbart"),ARr=o(" \u2014 "),UY=a("a"),yRr=o("FlaxMBartForConditionalGeneration"),LRr=o(" (mBART model)"),xRr=l(),DC=a("li"),fMe=a("strong"),$Rr=o("roberta"),kRr=o(" \u2014 "),JY=a("a"),SRr=o("FlaxRobertaForMaskedLM"),RRr=o(" (RoBERTa model)"),PRr=l(),GC=a("li"),mMe=a("strong"),BRr=o("roformer"),IRr=o(" \u2014 "),YY=a("a"),qRr=o("FlaxRoFormerForMaskedLM"),NRr=o(" (RoFormer model)"),jRr=l(),OC=a("li"),gMe=a("strong"),DRr=o("xlm-roberta"),GRr=o(" \u2014 "),KY=a("a"),ORr=o("FlaxXLMRobertaForMaskedLM"),VRr=o(" (XLM-RoBERTa model)"),XRr=l(),F(VC.$$.fragment),Dje=l(),Jc=a("h2"),XC=a("a"),hMe=a("span"),F(r9.$$.fragment),zRr=l(),pMe=a("span"),WRr=o("FlaxAutoModelForSeq2SeqLM"),Gje=l(),_r=a("div"),F(t9.$$.fragment),QRr=l(),Yc=a("p"),HRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=a("a"),URr=o("from_pretrained()"),JRr=o(" class method or the "),eK=a("a"),YRr=o("from_config()"),KRr=o(` class
method.`),ZRr=l(),a9=a("p"),ePr=o("This class cannot be instantiated directly using "),uMe=a("code"),oPr=o("__init__()"),rPr=o(" (throws an error)."),tPr=l(),Ht=a("div"),F(n9.$$.fragment),aPr=l(),_Me=a("p"),nPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sPr=l(),Kc=a("p"),lPr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),iPr=o("not"),dPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),cPr=o("from_pretrained()"),fPr=o(" to load the model weights."),mPr=l(),F(zC.$$.fragment),gPr=l(),zr=a("div"),F(s9.$$.fragment),hPr=l(),vMe=a("p"),pPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uPr=l(),En=a("p"),_Pr=o("The model class to instantiate is selected based on the "),FMe=a("code"),bPr=o("model_type"),vPr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(":"),CPr=l(),Pe=a("ul"),WC=a("li"),EMe=a("strong"),wPr=o("bart"),APr=o(" \u2014 "),rK=a("a"),yPr=o("FlaxBartForConditionalGeneration"),LPr=o(" (BART model)"),xPr=l(),QC=a("li"),CMe=a("strong"),$Pr=o("blenderbot"),kPr=o(" \u2014 "),tK=a("a"),SPr=o("FlaxBlenderbotForConditionalGeneration"),RPr=o(" (Blenderbot model)"),PPr=l(),HC=a("li"),wMe=a("strong"),BPr=o("blenderbot-small"),IPr=o(" \u2014 "),aK=a("a"),qPr=o("FlaxBlenderbotSmallForConditionalGeneration"),NPr=o(" (BlenderbotSmall model)"),jPr=l(),UC=a("li"),AMe=a("strong"),DPr=o("encoder-decoder"),GPr=o(" \u2014 "),nK=a("a"),OPr=o("FlaxEncoderDecoderModel"),VPr=o(" (Encoder decoder model)"),XPr=l(),JC=a("li"),yMe=a("strong"),zPr=o("marian"),WPr=o(" \u2014 "),sK=a("a"),QPr=o("FlaxMarianMTModel"),HPr=o(" (Marian model)"),UPr=l(),YC=a("li"),LMe=a("strong"),JPr=o("mbart"),YPr=o(" \u2014 "),lK=a("a"),KPr=o("FlaxMBartForConditionalGeneration"),ZPr=o(" (mBART model)"),eBr=l(),KC=a("li"),xMe=a("strong"),oBr=o("mt5"),rBr=o(" \u2014 "),iK=a("a"),tBr=o("FlaxMT5ForConditionalGeneration"),aBr=o(" (mT5 model)"),nBr=l(),ZC=a("li"),$Me=a("strong"),sBr=o("pegasus"),lBr=o(" \u2014 "),dK=a("a"),iBr=o("FlaxPegasusForConditionalGeneration"),dBr=o(" (Pegasus model)"),cBr=l(),e5=a("li"),kMe=a("strong"),fBr=o("t5"),mBr=o(" \u2014 "),cK=a("a"),gBr=o("FlaxT5ForConditionalGeneration"),hBr=o(" (T5 model)"),pBr=l(),F(o5.$$.fragment),Oje=l(),Zc=a("h2"),r5=a("a"),SMe=a("span"),F(l9.$$.fragment),uBr=l(),RMe=a("span"),_Br=o("FlaxAutoModelForSequenceClassification"),Vje=l(),br=a("div"),F(i9.$$.fragment),bBr=l(),ef=a("p"),vBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=a("a"),FBr=o("from_pretrained()"),TBr=o(" class method or the "),mK=a("a"),MBr=o("from_config()"),EBr=o(` class
method.`),CBr=l(),d9=a("p"),wBr=o("This class cannot be instantiated directly using "),PMe=a("code"),ABr=o("__init__()"),yBr=o(" (throws an error)."),LBr=l(),Ut=a("div"),F(c9.$$.fragment),xBr=l(),BMe=a("p"),$Br=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kBr=l(),of=a("p"),SBr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),RBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),BBr=o("from_pretrained()"),IBr=o(" to load the model weights."),qBr=l(),F(t5.$$.fragment),NBr=l(),Wr=a("div"),F(f9.$$.fragment),jBr=l(),qMe=a("p"),DBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GBr=l(),Cn=a("p"),OBr=o("The model class to instantiate is selected based on the "),NMe=a("code"),VBr=o("model_type"),XBr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),zBr=o("pretrained_model_name_or_path"),WBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(":"),UBr=l(),xe=a("ul"),a5=a("li"),GMe=a("strong"),JBr=o("albert"),YBr=o(" \u2014 "),hK=a("a"),KBr=o("FlaxAlbertForSequenceClassification"),ZBr=o(" (ALBERT model)"),eIr=l(),n5=a("li"),OMe=a("strong"),oIr=o("bart"),rIr=o(" \u2014 "),pK=a("a"),tIr=o("FlaxBartForSequenceClassification"),aIr=o(" (BART model)"),nIr=l(),s5=a("li"),VMe=a("strong"),sIr=o("bert"),lIr=o(" \u2014 "),uK=a("a"),iIr=o("FlaxBertForSequenceClassification"),dIr=o(" (BERT model)"),cIr=l(),l5=a("li"),XMe=a("strong"),fIr=o("big_bird"),mIr=o(" \u2014 "),_K=a("a"),gIr=o("FlaxBigBirdForSequenceClassification"),hIr=o(" (BigBird model)"),pIr=l(),i5=a("li"),zMe=a("strong"),uIr=o("distilbert"),_Ir=o(" \u2014 "),bK=a("a"),bIr=o("FlaxDistilBertForSequenceClassification"),vIr=o(" (DistilBERT model)"),FIr=l(),d5=a("li"),WMe=a("strong"),TIr=o("electra"),MIr=o(" \u2014 "),vK=a("a"),EIr=o("FlaxElectraForSequenceClassification"),CIr=o(" (ELECTRA model)"),wIr=l(),c5=a("li"),QMe=a("strong"),AIr=o("mbart"),yIr=o(" \u2014 "),FK=a("a"),LIr=o("FlaxMBartForSequenceClassification"),xIr=o(" (mBART model)"),$Ir=l(),f5=a("li"),HMe=a("strong"),kIr=o("roberta"),SIr=o(" \u2014 "),TK=a("a"),RIr=o("FlaxRobertaForSequenceClassification"),PIr=o(" (RoBERTa model)"),BIr=l(),m5=a("li"),UMe=a("strong"),IIr=o("roformer"),qIr=o(" \u2014 "),MK=a("a"),NIr=o("FlaxRoFormerForSequenceClassification"),jIr=o(" (RoFormer model)"),DIr=l(),g5=a("li"),JMe=a("strong"),GIr=o("xlm-roberta"),OIr=o(" \u2014 "),EK=a("a"),VIr=o("FlaxXLMRobertaForSequenceClassification"),XIr=o(" (XLM-RoBERTa model)"),zIr=l(),F(h5.$$.fragment),Xje=l(),rf=a("h2"),p5=a("a"),YMe=a("span"),F(m9.$$.fragment),WIr=l(),KMe=a("span"),QIr=o("FlaxAutoModelForQuestionAnswering"),zje=l(),vr=a("div"),F(g9.$$.fragment),HIr=l(),tf=a("p"),UIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=a("a"),JIr=o("from_pretrained()"),YIr=o(" class method or the "),wK=a("a"),KIr=o("from_config()"),ZIr=o(` class
method.`),eqr=l(),h9=a("p"),oqr=o("This class cannot be instantiated directly using "),ZMe=a("code"),rqr=o("__init__()"),tqr=o(" (throws an error)."),aqr=l(),Jt=a("div"),F(p9.$$.fragment),nqr=l(),e4e=a("p"),sqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lqr=l(),af=a("p"),iqr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),dqr=o("not"),cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),fqr=o("from_pretrained()"),mqr=o(" to load the model weights."),gqr=l(),F(u5.$$.fragment),hqr=l(),Qr=a("div"),F(u9.$$.fragment),pqr=l(),r4e=a("p"),uqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qr=l(),wn=a("p"),bqr=o("The model class to instantiate is selected based on the "),t4e=a("code"),vqr=o("model_type"),Fqr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),Tqr=o("pretrained_model_name_or_path"),Mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(":"),wqr=l(),$e=a("ul"),_5=a("li"),s4e=a("strong"),Aqr=o("albert"),yqr=o(" \u2014 "),yK=a("a"),Lqr=o("FlaxAlbertForQuestionAnswering"),xqr=o(" (ALBERT model)"),$qr=l(),b5=a("li"),l4e=a("strong"),kqr=o("bart"),Sqr=o(" \u2014 "),LK=a("a"),Rqr=o("FlaxBartForQuestionAnswering"),Pqr=o(" (BART model)"),Bqr=l(),v5=a("li"),i4e=a("strong"),Iqr=o("bert"),qqr=o(" \u2014 "),xK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),jqr=o(" (BERT model)"),Dqr=l(),F5=a("li"),d4e=a("strong"),Gqr=o("big_bird"),Oqr=o(" \u2014 "),$K=a("a"),Vqr=o("FlaxBigBirdForQuestionAnswering"),Xqr=o(" (BigBird model)"),zqr=l(),T5=a("li"),c4e=a("strong"),Wqr=o("distilbert"),Qqr=o(" \u2014 "),kK=a("a"),Hqr=o("FlaxDistilBertForQuestionAnswering"),Uqr=o(" (DistilBERT model)"),Jqr=l(),M5=a("li"),f4e=a("strong"),Yqr=o("electra"),Kqr=o(" \u2014 "),SK=a("a"),Zqr=o("FlaxElectraForQuestionAnswering"),eNr=o(" (ELECTRA model)"),oNr=l(),E5=a("li"),m4e=a("strong"),rNr=o("mbart"),tNr=o(" \u2014 "),RK=a("a"),aNr=o("FlaxMBartForQuestionAnswering"),nNr=o(" (mBART model)"),sNr=l(),C5=a("li"),g4e=a("strong"),lNr=o("roberta"),iNr=o(" \u2014 "),PK=a("a"),dNr=o("FlaxRobertaForQuestionAnswering"),cNr=o(" (RoBERTa model)"),fNr=l(),w5=a("li"),h4e=a("strong"),mNr=o("roformer"),gNr=o(" \u2014 "),BK=a("a"),hNr=o("FlaxRoFormerForQuestionAnswering"),pNr=o(" (RoFormer model)"),uNr=l(),A5=a("li"),p4e=a("strong"),_Nr=o("xlm-roberta"),bNr=o(" \u2014 "),IK=a("a"),vNr=o("FlaxXLMRobertaForQuestionAnswering"),FNr=o(" (XLM-RoBERTa model)"),TNr=l(),F(y5.$$.fragment),Wje=l(),nf=a("h2"),L5=a("a"),u4e=a("span"),F(_9.$$.fragment),MNr=l(),_4e=a("span"),ENr=o("FlaxAutoModelForTokenClassification"),Qje=l(),Fr=a("div"),F(b9.$$.fragment),CNr=l(),sf=a("p"),wNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qK=a("a"),ANr=o("from_pretrained()"),yNr=o(" class method or the "),NK=a("a"),LNr=o("from_config()"),xNr=o(` class
method.`),$Nr=l(),v9=a("p"),kNr=o("This class cannot be instantiated directly using "),b4e=a("code"),SNr=o("__init__()"),RNr=o(" (throws an error)."),PNr=l(),Yt=a("div"),F(F9.$$.fragment),BNr=l(),v4e=a("p"),INr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qNr=l(),lf=a("p"),NNr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),jNr=o("not"),DNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),GNr=o("from_pretrained()"),ONr=o(" to load the model weights."),VNr=l(),F(x5.$$.fragment),XNr=l(),Hr=a("div"),F(T9.$$.fragment),zNr=l(),T4e=a("p"),WNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QNr=l(),An=a("p"),HNr=o("The model class to instantiate is selected based on the "),M4e=a("code"),UNr=o("model_type"),JNr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),ZNr=o("pretrained_model_name_or_path"),ejr=o(":"),ojr=l(),De=a("ul"),$5=a("li"),w4e=a("strong"),rjr=o("albert"),tjr=o(" \u2014 "),DK=a("a"),ajr=o("FlaxAlbertForTokenClassification"),njr=o(" (ALBERT model)"),sjr=l(),k5=a("li"),A4e=a("strong"),ljr=o("bert"),ijr=o(" \u2014 "),GK=a("a"),djr=o("FlaxBertForTokenClassification"),cjr=o(" (BERT model)"),fjr=l(),S5=a("li"),y4e=a("strong"),mjr=o("big_bird"),gjr=o(" \u2014 "),OK=a("a"),hjr=o("FlaxBigBirdForTokenClassification"),pjr=o(" (BigBird model)"),ujr=l(),R5=a("li"),L4e=a("strong"),_jr=o("distilbert"),bjr=o(" \u2014 "),VK=a("a"),vjr=o("FlaxDistilBertForTokenClassification"),Fjr=o(" (DistilBERT model)"),Tjr=l(),P5=a("li"),x4e=a("strong"),Mjr=o("electra"),Ejr=o(" \u2014 "),XK=a("a"),Cjr=o("FlaxElectraForTokenClassification"),wjr=o(" (ELECTRA model)"),Ajr=l(),B5=a("li"),$4e=a("strong"),yjr=o("roberta"),Ljr=o(" \u2014 "),zK=a("a"),xjr=o("FlaxRobertaForTokenClassification"),$jr=o(" (RoBERTa model)"),kjr=l(),I5=a("li"),k4e=a("strong"),Sjr=o("roformer"),Rjr=o(" \u2014 "),WK=a("a"),Pjr=o("FlaxRoFormerForTokenClassification"),Bjr=o(" (RoFormer model)"),Ijr=l(),q5=a("li"),S4e=a("strong"),qjr=o("xlm-roberta"),Njr=o(" \u2014 "),QK=a("a"),jjr=o("FlaxXLMRobertaForTokenClassification"),Djr=o(" (XLM-RoBERTa model)"),Gjr=l(),F(N5.$$.fragment),Hje=l(),df=a("h2"),j5=a("a"),R4e=a("span"),F(M9.$$.fragment),Ojr=l(),P4e=a("span"),Vjr=o("FlaxAutoModelForMultipleChoice"),Uje=l(),Tr=a("div"),F(E9.$$.fragment),Xjr=l(),cf=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),UK=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),C9=a("p"),Yjr=o("This class cannot be instantiated directly using "),B4e=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Kt=a("div"),F(w9.$$.fragment),oDr=l(),I4e=a("p"),rDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tDr=l(),ff=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(D5.$$.fragment),cDr=l(),Ur=a("div"),F(A9.$$.fragment),fDr=l(),N4e=a("p"),mDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gDr=l(),yn=a("p"),hDr=o("The model class to instantiate is selected based on the "),j4e=a("code"),pDr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),_Dr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),Ge=a("ul"),G5=a("li"),O4e=a("strong"),MDr=o("albert"),EDr=o(" \u2014 "),YK=a("a"),CDr=o("FlaxAlbertForMultipleChoice"),wDr=o(" (ALBERT model)"),ADr=l(),O5=a("li"),V4e=a("strong"),yDr=o("bert"),LDr=o(" \u2014 "),KK=a("a"),xDr=o("FlaxBertForMultipleChoice"),$Dr=o(" (BERT model)"),kDr=l(),V5=a("li"),X4e=a("strong"),SDr=o("big_bird"),RDr=o(" \u2014 "),ZK=a("a"),PDr=o("FlaxBigBirdForMultipleChoice"),BDr=o(" (BigBird model)"),IDr=l(),X5=a("li"),z4e=a("strong"),qDr=o("distilbert"),NDr=o(" \u2014 "),eZ=a("a"),jDr=o("FlaxDistilBertForMultipleChoice"),DDr=o(" (DistilBERT model)"),GDr=l(),z5=a("li"),W4e=a("strong"),ODr=o("electra"),VDr=o(" \u2014 "),oZ=a("a"),XDr=o("FlaxElectraForMultipleChoice"),zDr=o(" (ELECTRA model)"),WDr=l(),W5=a("li"),Q4e=a("strong"),QDr=o("roberta"),HDr=o(" \u2014 "),rZ=a("a"),UDr=o("FlaxRobertaForMultipleChoice"),JDr=o(" (RoBERTa model)"),YDr=l(),Q5=a("li"),H4e=a("strong"),KDr=o("roformer"),ZDr=o(" \u2014 "),tZ=a("a"),eGr=o("FlaxRoFormerForMultipleChoice"),oGr=o(" (RoFormer model)"),rGr=l(),H5=a("li"),U4e=a("strong"),tGr=o("xlm-roberta"),aGr=o(" \u2014 "),aZ=a("a"),nGr=o("FlaxXLMRobertaForMultipleChoice"),sGr=o(" (XLM-RoBERTa model)"),lGr=l(),F(U5.$$.fragment),Jje=l(),mf=a("h2"),J5=a("a"),J4e=a("span"),F(y9.$$.fragment),iGr=l(),Y4e=a("span"),dGr=o("FlaxAutoModelForNextSentencePrediction"),Yje=l(),Mr=a("div"),F(L9.$$.fragment),cGr=l(),gf=a("p"),fGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=a("a"),mGr=o("from_pretrained()"),gGr=o(" class method or the "),sZ=a("a"),hGr=o("from_config()"),pGr=o(` class
method.`),uGr=l(),x9=a("p"),_Gr=o("This class cannot be instantiated directly using "),K4e=a("code"),bGr=o("__init__()"),vGr=o(" (throws an error)."),FGr=l(),Zt=a("div"),F($9.$$.fragment),TGr=l(),Z4e=a("p"),MGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EGr=l(),hf=a("p"),CGr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),wGr=o("not"),AGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),yGr=o("from_pretrained()"),LGr=o(" to load the model weights."),xGr=l(),F(Y5.$$.fragment),$Gr=l(),Jr=a("div"),F(k9.$$.fragment),kGr=l(),oEe=a("p"),SGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RGr=l(),Ln=a("p"),PGr=o("The model class to instantiate is selected based on the "),rEe=a("code"),BGr=o("model_type"),IGr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),qGr=o("pretrained_model_name_or_path"),NGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(":"),GGr=l(),nEe=a("ul"),K5=a("li"),sEe=a("strong"),OGr=o("bert"),VGr=o(" \u2014 "),iZ=a("a"),XGr=o("FlaxBertForNextSentencePrediction"),zGr=o(" (BERT model)"),WGr=l(),F(Z5.$$.fragment),Kje=l(),pf=a("h2"),e3=a("a"),lEe=a("span"),F(S9.$$.fragment),QGr=l(),iEe=a("span"),HGr=o("FlaxAutoModelForImageClassification"),Zje=l(),Er=a("div"),F(R9.$$.fragment),UGr=l(),uf=a("p"),JGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=a("a"),YGr=o("from_pretrained()"),KGr=o(" class method or the "),cZ=a("a"),ZGr=o("from_config()"),eOr=o(` class
method.`),oOr=l(),P9=a("p"),rOr=o("This class cannot be instantiated directly using "),dEe=a("code"),tOr=o("__init__()"),aOr=o(" (throws an error)."),nOr=l(),ea=a("div"),F(B9.$$.fragment),sOr=l(),cEe=a("p"),lOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iOr=l(),_f=a("p"),dOr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),cOr=o("not"),fOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),mOr=o("from_pretrained()"),gOr=o(" to load the model weights."),hOr=l(),F(o3.$$.fragment),pOr=l(),Yr=a("div"),F(I9.$$.fragment),uOr=l(),mEe=a("p"),_Or=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bOr=l(),xn=a("p"),vOr=o("The model class to instantiate is selected based on the "),gEe=a("code"),FOr=o("model_type"),TOr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),MOr=o("pretrained_model_name_or_path"),EOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),COr=o("pretrained_model_name_or_path"),wOr=o(":"),AOr=l(),q9=a("ul"),r3=a("li"),uEe=a("strong"),yOr=o("beit"),LOr=o(" \u2014 "),mZ=a("a"),xOr=o("FlaxBeitForImageClassification"),$Or=o(" (BEiT model)"),kOr=l(),t3=a("li"),_Ee=a("strong"),SOr=o("vit"),ROr=o(" \u2014 "),gZ=a("a"),POr=o("FlaxViTForImageClassification"),BOr=o(" (ViT model)"),IOr=l(),F(a3.$$.fragment),eDe=l(),bf=a("h2"),n3=a("a"),bEe=a("span"),F(N9.$$.fragment),qOr=l(),vEe=a("span"),NOr=o("FlaxAutoModelForVision2Seq"),oDe=l(),Cr=a("div"),F(j9.$$.fragment),jOr=l(),vf=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),pZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),D9=a("p"),WOr=o("This class cannot be instantiated directly using "),FEe=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),oa=a("div"),F(G9.$$.fragment),JOr=l(),TEe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KOr=l(),Ff=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(s3.$$.fragment),nVr=l(),Kr=a("div"),F(O9.$$.fragment),sVr=l(),EEe=a("p"),lVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iVr=l(),$n=a("p"),dVr=o("The model class to instantiate is selected based on the "),CEe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),uVr=l(),yEe=a("ul"),l3=a("li"),LEe=a("strong"),_Vr=o("vision-encoder-decoder"),bVr=o(" \u2014 "),_Z=a("a"),vVr=o("FlaxVisionEncoderDecoderModel"),FVr=o(" (Vision Encoder decoder model)"),TVr=l(),F(i3.$$.fragment),this.h()},l(f){const _=J9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var V9=s(p);m=n(V9,"A",{id:!0,class:!0,href:!0});var xEe=s(m);u=n(xEe,"SPAN",{});var $Ee=s(u);T(d.$$.fragment,$Ee),$Ee.forEach(t),xEe.forEach(t),h=i(V9),Eo=n(V9,"SPAN",{});var kEe=s(Eo);_i=r(kEe,"Auto Classes"),kEe.forEach(t),V9.forEach(t),Cf=i(f),at=n(f,"P",{});var X9=s(at);bi=r(X9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),vi=n(X9,"CODE",{});var SEe=s(vi);x0=r(SEe,"from_pretrained()"),SEe.forEach(t),wf=r(X9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),X9.forEach(t),je=i(f),We=n(f,"P",{});var kn=s(We);Fi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var REe=s(Sn);$0=r(REe,"AutoConfig"),REe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var PEe=s(Pn);k0=r(PEe,"AutoModel"),PEe.forEach(t),Ti=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var BEe=s(Bn);S0=r(BEe,"AutoTokenizer"),BEe.forEach(t),Mi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),Af=i(f),T(La.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var z9=s(Ae);rk=r(z9,"will create a model that is an instance of "),Ei=n(z9,"A",{href:!0});var IEe=s(Ei);tk=r(IEe,"BertModel"),IEe.forEach(t),ak=r(z9,"."),z9.forEach(t),Co=i(f),xa=n(f,"P",{});var W9=s(xa);nk=r(W9,"There is one class of "),yf=n(W9,"CODE",{});var qEe=s(yf);sk=r(qEe,"AutoModel"),qEe.forEach(t),mOe=r(W9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),W9.forEach(t),Yqe=i(f),Ci=n(f,"H2",{class:!0});var Q9=s(Ci);Lf=n(Q9,"A",{id:!0,class:!0,href:!0});var NEe=s(Lf);moe=n(NEe,"SPAN",{});var jEe=s(moe);T(R0.$$.fragment,jEe),jEe.forEach(t),NEe.forEach(t),gOe=i(Q9),goe=n(Q9,"SPAN",{});var DEe=s(goe);hOe=r(DEe,"Extending the Auto Classes"),DEe.forEach(t),Q9.forEach(t),Kqe=i(f),In=n(f,"P",{});var Tf=s(In);pOe=r(Tf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hoe=n(Tf,"CODE",{});var GEe=s(hoe);uOe=r(GEe,"NewModel"),GEe.forEach(t),_Oe=r(Tf,", make sure you have a "),poe=n(Tf,"CODE",{});var OEe=s(poe);bOe=r(OEe,"NewModelConfig"),OEe.forEach(t),vOe=r(Tf,` then you can add those to the auto
classes like this:`),Tf.forEach(t),Zqe=i(f),T(P0.$$.fragment,f),eNe=i(f),lk=n(f,"P",{});var VEe=s(lk);FOe=r(VEe,"You will then be able to use the auto classes like you would usually do!"),VEe.forEach(t),oNe=i(f),T(xf.$$.fragment,f),rNe=i(f),wi=n(f,"H2",{class:!0});var H9=s(wi);$f=n(H9,"A",{id:!0,class:!0,href:!0});var XEe=s($f);uoe=n(XEe,"SPAN",{});var zEe=s(uoe);T(B0.$$.fragment,zEe),zEe.forEach(t),XEe.forEach(t),TOe=i(H9),_oe=n(H9,"SPAN",{});var WEe=s(_oe);MOe=r(WEe,"AutoConfig"),WEe.forEach(t),H9.forEach(t),tNe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(I0.$$.fragment,rt),EOe=i(rt),q0=n(rt,"P",{});var U9=s(q0);COe=r(U9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ik=n(U9,"A",{href:!0});var QEe=s(ik);wOe=r(QEe,"from_pretrained()"),QEe.forEach(t),AOe=r(U9," class method."),U9.forEach(t),yOe=i(rt),N0=n(rt,"P",{});var J9=s(N0);LOe=r(J9,"This class cannot be instantiated directly using "),boe=n(J9,"CODE",{});var HEe=s(boe);xOe=r(HEe,"__init__()"),HEe.forEach(t),$Oe=r(J9," (throws an error)."),J9.forEach(t),kOe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(j0.$$.fragment,tt),SOe=i(tt),voe=n(tt,"P",{});var UEe=s(voe);ROe=r(UEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),UEe.forEach(t),POe=i(tt),Ai=n(tt,"P",{});var Mf=s(Ai);BOe=r(Mf,"The configuration class to instantiate is selected based on the "),Foe=n(Mf,"CODE",{});var JEe=s(Foe);IOe=r(JEe,"model_type"),JEe.forEach(t),qOe=r(Mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Toe=n(Mf,"CODE",{});var YEe=s(Toe);NOe=r(YEe,"pretrained_model_name_or_path"),YEe.forEach(t),jOe=r(Mf,":"),Mf.forEach(t),DOe=i(tt),A=n(tt,"UL",{});var y=s(A);kf=n(y,"LI",{});var d3=s(kf);Moe=n(d3,"STRONG",{});var KEe=s(Moe);GOe=r(KEe,"albert"),KEe.forEach(t),OOe=r(d3," \u2014 "),dk=n(d3,"A",{href:!0});var ZEe=s(dk);VOe=r(ZEe,"AlbertConfig"),ZEe.forEach(t),XOe=r(d3," (ALBERT model)"),d3.forEach(t),zOe=i(y),Sf=n(y,"LI",{});var c3=s(Sf);Eoe=n(c3,"STRONG",{});var eCe=s(Eoe);WOe=r(eCe,"bart"),eCe.forEach(t),QOe=r(c3," \u2014 "),ck=n(c3,"A",{href:!0});var oCe=s(ck);HOe=r(oCe,"BartConfig"),oCe.forEach(t),UOe=r(c3," (BART model)"),c3.forEach(t),JOe=i(y),Rf=n(y,"LI",{});var f3=s(Rf);Coe=n(f3,"STRONG",{});var rCe=s(Coe);YOe=r(rCe,"beit"),rCe.forEach(t),KOe=r(f3," \u2014 "),fk=n(f3,"A",{href:!0});var tCe=s(fk);ZOe=r(tCe,"BeitConfig"),tCe.forEach(t),eVe=r(f3," (BEiT model)"),f3.forEach(t),oVe=i(y),Pf=n(y,"LI",{});var m3=s(Pf);woe=n(m3,"STRONG",{});var aCe=s(woe);rVe=r(aCe,"bert"),aCe.forEach(t),tVe=r(m3," \u2014 "),mk=n(m3,"A",{href:!0});var nCe=s(mk);aVe=r(nCe,"BertConfig"),nCe.forEach(t),nVe=r(m3," (BERT model)"),m3.forEach(t),sVe=i(y),Bf=n(y,"LI",{});var g3=s(Bf);Aoe=n(g3,"STRONG",{});var sCe=s(Aoe);lVe=r(sCe,"bert-generation"),sCe.forEach(t),iVe=r(g3," \u2014 "),gk=n(g3,"A",{href:!0});var lCe=s(gk);dVe=r(lCe,"BertGenerationConfig"),lCe.forEach(t),cVe=r(g3," (Bert Generation model)"),g3.forEach(t),fVe=i(y),If=n(y,"LI",{});var h3=s(If);yoe=n(h3,"STRONG",{});var iCe=s(yoe);mVe=r(iCe,"big_bird"),iCe.forEach(t),gVe=r(h3," \u2014 "),hk=n(h3,"A",{href:!0});var dCe=s(hk);hVe=r(dCe,"BigBirdConfig"),dCe.forEach(t),pVe=r(h3," (BigBird model)"),h3.forEach(t),uVe=i(y),qf=n(y,"LI",{});var p3=s(qf);Loe=n(p3,"STRONG",{});var cCe=s(Loe);_Ve=r(cCe,"bigbird_pegasus"),cCe.forEach(t),bVe=r(p3," \u2014 "),pk=n(p3,"A",{href:!0});var fCe=s(pk);vVe=r(fCe,"BigBirdPegasusConfig"),fCe.forEach(t),FVe=r(p3," (BigBirdPegasus model)"),p3.forEach(t),TVe=i(y),Nf=n(y,"LI",{});var u3=s(Nf);xoe=n(u3,"STRONG",{});var mCe=s(xoe);MVe=r(mCe,"blenderbot"),mCe.forEach(t),EVe=r(u3," \u2014 "),uk=n(u3,"A",{href:!0});var gCe=s(uk);CVe=r(gCe,"BlenderbotConfig"),gCe.forEach(t),wVe=r(u3," (Blenderbot model)"),u3.forEach(t),AVe=i(y),jf=n(y,"LI",{});var _3=s(jf);$oe=n(_3,"STRONG",{});var hCe=s($oe);yVe=r(hCe,"blenderbot-small"),hCe.forEach(t),LVe=r(_3," \u2014 "),_k=n(_3,"A",{href:!0});var pCe=s(_k);xVe=r(pCe,"BlenderbotSmallConfig"),pCe.forEach(t),$Ve=r(_3," (BlenderbotSmall model)"),_3.forEach(t),kVe=i(y),Df=n(y,"LI",{});var b3=s(Df);koe=n(b3,"STRONG",{});var uCe=s(koe);SVe=r(uCe,"camembert"),uCe.forEach(t),RVe=r(b3," \u2014 "),bk=n(b3,"A",{href:!0});var _Ce=s(bk);PVe=r(_Ce,"CamembertConfig"),_Ce.forEach(t),BVe=r(b3," (CamemBERT model)"),b3.forEach(t),IVe=i(y),Gf=n(y,"LI",{});var v3=s(Gf);Soe=n(v3,"STRONG",{});var bCe=s(Soe);qVe=r(bCe,"canine"),bCe.forEach(t),NVe=r(v3," \u2014 "),vk=n(v3,"A",{href:!0});var vCe=s(vk);jVe=r(vCe,"CanineConfig"),vCe.forEach(t),DVe=r(v3," (Canine model)"),v3.forEach(t),GVe=i(y),Of=n(y,"LI",{});var F3=s(Of);Roe=n(F3,"STRONG",{});var FCe=s(Roe);OVe=r(FCe,"clip"),FCe.forEach(t),VVe=r(F3," \u2014 "),Fk=n(F3,"A",{href:!0});var TCe=s(Fk);XVe=r(TCe,"CLIPConfig"),TCe.forEach(t),zVe=r(F3," (CLIP model)"),F3.forEach(t),WVe=i(y),Vf=n(y,"LI",{});var T3=s(Vf);Poe=n(T3,"STRONG",{});var MCe=s(Poe);QVe=r(MCe,"convbert"),MCe.forEach(t),HVe=r(T3," \u2014 "),Tk=n(T3,"A",{href:!0});var ECe=s(Tk);UVe=r(ECe,"ConvBertConfig"),ECe.forEach(t),JVe=r(T3," (ConvBERT model)"),T3.forEach(t),YVe=i(y),Xf=n(y,"LI",{});var M3=s(Xf);Boe=n(M3,"STRONG",{});var CCe=s(Boe);KVe=r(CCe,"convnext"),CCe.forEach(t),ZVe=r(M3," \u2014 "),Mk=n(M3,"A",{href:!0});var wCe=s(Mk);eXe=r(wCe,"ConvNextConfig"),wCe.forEach(t),oXe=r(M3," (ConvNext model)"),M3.forEach(t),rXe=i(y),zf=n(y,"LI",{});var E3=s(zf);Ioe=n(E3,"STRONG",{});var ACe=s(Ioe);tXe=r(ACe,"ctrl"),ACe.forEach(t),aXe=r(E3," \u2014 "),Ek=n(E3,"A",{href:!0});var yCe=s(Ek);nXe=r(yCe,"CTRLConfig"),yCe.forEach(t),sXe=r(E3," (CTRL model)"),E3.forEach(t),lXe=i(y),Wf=n(y,"LI",{});var C3=s(Wf);qoe=n(C3,"STRONG",{});var LCe=s(qoe);iXe=r(LCe,"cvt"),LCe.forEach(t),dXe=r(C3," \u2014 "),Ck=n(C3,"A",{href:!0});var xCe=s(Ck);cXe=r(xCe,"CvtConfig"),xCe.forEach(t),fXe=r(C3," (CvT model)"),C3.forEach(t),mXe=i(y),Qf=n(y,"LI",{});var w3=s(Qf);Noe=n(w3,"STRONG",{});var $Ce=s(Noe);gXe=r($Ce,"data2vec-audio"),$Ce.forEach(t),hXe=r(w3," \u2014 "),wk=n(w3,"A",{href:!0});var kCe=s(wk);pXe=r(kCe,"Data2VecAudioConfig"),kCe.forEach(t),uXe=r(w3," (Data2VecAudio model)"),w3.forEach(t),_Xe=i(y),Hf=n(y,"LI",{});var A3=s(Hf);joe=n(A3,"STRONG",{});var SCe=s(joe);bXe=r(SCe,"data2vec-text"),SCe.forEach(t),vXe=r(A3," \u2014 "),Ak=n(A3,"A",{href:!0});var RCe=s(Ak);FXe=r(RCe,"Data2VecTextConfig"),RCe.forEach(t),TXe=r(A3," (Data2VecText model)"),A3.forEach(t),MXe=i(y),Uf=n(y,"LI",{});var y3=s(Uf);Doe=n(y3,"STRONG",{});var PCe=s(Doe);EXe=r(PCe,"data2vec-vision"),PCe.forEach(t),CXe=r(y3," \u2014 "),yk=n(y3,"A",{href:!0});var BCe=s(yk);wXe=r(BCe,"Data2VecVisionConfig"),BCe.forEach(t),AXe=r(y3," (Data2VecVision model)"),y3.forEach(t),yXe=i(y),Jf=n(y,"LI",{});var L3=s(Jf);Goe=n(L3,"STRONG",{});var ICe=s(Goe);LXe=r(ICe,"deberta"),ICe.forEach(t),xXe=r(L3," \u2014 "),Lk=n(L3,"A",{href:!0});var qCe=s(Lk);$Xe=r(qCe,"DebertaConfig"),qCe.forEach(t),kXe=r(L3," (DeBERTa model)"),L3.forEach(t),SXe=i(y),Yf=n(y,"LI",{});var x3=s(Yf);Ooe=n(x3,"STRONG",{});var NCe=s(Ooe);RXe=r(NCe,"deberta-v2"),NCe.forEach(t),PXe=r(x3," \u2014 "),xk=n(x3,"A",{href:!0});var jCe=s(xk);BXe=r(jCe,"DebertaV2Config"),jCe.forEach(t),IXe=r(x3," (DeBERTa-v2 model)"),x3.forEach(t),qXe=i(y),Kf=n(y,"LI",{});var $3=s(Kf);Voe=n($3,"STRONG",{});var DCe=s(Voe);NXe=r(DCe,"decision_transformer"),DCe.forEach(t),jXe=r($3," \u2014 "),$k=n($3,"A",{href:!0});var GCe=s($k);DXe=r(GCe,"DecisionTransformerConfig"),GCe.forEach(t),GXe=r($3," (Decision Transformer model)"),$3.forEach(t),OXe=i(y),Zf=n(y,"LI",{});var k3=s(Zf);Xoe=n(k3,"STRONG",{});var OCe=s(Xoe);VXe=r(OCe,"deit"),OCe.forEach(t),XXe=r(k3," \u2014 "),kk=n(k3,"A",{href:!0});var VCe=s(kk);zXe=r(VCe,"DeiTConfig"),VCe.forEach(t),WXe=r(k3," (DeiT model)"),k3.forEach(t),QXe=i(y),em=n(y,"LI",{});var S3=s(em);zoe=n(S3,"STRONG",{});var EVr=s(zoe);HXe=r(EVr,"detr"),EVr.forEach(t),UXe=r(S3," \u2014 "),Sk=n(S3,"A",{href:!0});var CVr=s(Sk);JXe=r(CVr,"DetrConfig"),CVr.forEach(t),YXe=r(S3," (DETR model)"),S3.forEach(t),KXe=i(y),om=n(y,"LI",{});var XCe=s(om);Woe=n(XCe,"STRONG",{});var wVr=s(Woe);ZXe=r(wVr,"distilbert"),wVr.forEach(t),eze=r(XCe," \u2014 "),Rk=n(XCe,"A",{href:!0});var AVr=s(Rk);oze=r(AVr,"DistilBertConfig"),AVr.forEach(t),rze=r(XCe," (DistilBERT model)"),XCe.forEach(t),tze=i(y),rm=n(y,"LI",{});var zCe=s(rm);Qoe=n(zCe,"STRONG",{});var yVr=s(Qoe);aze=r(yVr,"dpr"),yVr.forEach(t),nze=r(zCe," \u2014 "),Pk=n(zCe,"A",{href:!0});var LVr=s(Pk);sze=r(LVr,"DPRConfig"),LVr.forEach(t),lze=r(zCe," (DPR model)"),zCe.forEach(t),ize=i(y),tm=n(y,"LI",{});var WCe=s(tm);Hoe=n(WCe,"STRONG",{});var xVr=s(Hoe);dze=r(xVr,"dpt"),xVr.forEach(t),cze=r(WCe," \u2014 "),Bk=n(WCe,"A",{href:!0});var $Vr=s(Bk);fze=r($Vr,"DPTConfig"),$Vr.forEach(t),mze=r(WCe," (DPT model)"),WCe.forEach(t),gze=i(y),am=n(y,"LI",{});var QCe=s(am);Uoe=n(QCe,"STRONG",{});var kVr=s(Uoe);hze=r(kVr,"electra"),kVr.forEach(t),pze=r(QCe," \u2014 "),Ik=n(QCe,"A",{href:!0});var SVr=s(Ik);uze=r(SVr,"ElectraConfig"),SVr.forEach(t),_ze=r(QCe," (ELECTRA model)"),QCe.forEach(t),bze=i(y),nm=n(y,"LI",{});var HCe=s(nm);Joe=n(HCe,"STRONG",{});var RVr=s(Joe);vze=r(RVr,"encoder-decoder"),RVr.forEach(t),Fze=r(HCe," \u2014 "),qk=n(HCe,"A",{href:!0});var PVr=s(qk);Tze=r(PVr,"EncoderDecoderConfig"),PVr.forEach(t),Mze=r(HCe," (Encoder decoder model)"),HCe.forEach(t),Eze=i(y),sm=n(y,"LI",{});var UCe=s(sm);Yoe=n(UCe,"STRONG",{});var BVr=s(Yoe);Cze=r(BVr,"flaubert"),BVr.forEach(t),wze=r(UCe," \u2014 "),Nk=n(UCe,"A",{href:!0});var IVr=s(Nk);Aze=r(IVr,"FlaubertConfig"),IVr.forEach(t),yze=r(UCe," (FlauBERT model)"),UCe.forEach(t),Lze=i(y),lm=n(y,"LI",{});var JCe=s(lm);Koe=n(JCe,"STRONG",{});var qVr=s(Koe);xze=r(qVr,"flava"),qVr.forEach(t),$ze=r(JCe," \u2014 "),jk=n(JCe,"A",{href:!0});var NVr=s(jk);kze=r(NVr,"FlavaConfig"),NVr.forEach(t),Sze=r(JCe," (Flava model)"),JCe.forEach(t),Rze=i(y),im=n(y,"LI",{});var YCe=s(im);Zoe=n(YCe,"STRONG",{});var jVr=s(Zoe);Pze=r(jVr,"fnet"),jVr.forEach(t),Bze=r(YCe," \u2014 "),Dk=n(YCe,"A",{href:!0});var DVr=s(Dk);Ize=r(DVr,"FNetConfig"),DVr.forEach(t),qze=r(YCe," (FNet model)"),YCe.forEach(t),Nze=i(y),dm=n(y,"LI",{});var KCe=s(dm);ere=n(KCe,"STRONG",{});var GVr=s(ere);jze=r(GVr,"fsmt"),GVr.forEach(t),Dze=r(KCe," \u2014 "),Gk=n(KCe,"A",{href:!0});var OVr=s(Gk);Gze=r(OVr,"FSMTConfig"),OVr.forEach(t),Oze=r(KCe," (FairSeq Machine-Translation model)"),KCe.forEach(t),Vze=i(y),cm=n(y,"LI",{});var ZCe=s(cm);ore=n(ZCe,"STRONG",{});var VVr=s(ore);Xze=r(VVr,"funnel"),VVr.forEach(t),zze=r(ZCe," \u2014 "),Ok=n(ZCe,"A",{href:!0});var XVr=s(Ok);Wze=r(XVr,"FunnelConfig"),XVr.forEach(t),Qze=r(ZCe," (Funnel Transformer model)"),ZCe.forEach(t),Hze=i(y),fm=n(y,"LI",{});var e5e=s(fm);rre=n(e5e,"STRONG",{});var zVr=s(rre);Uze=r(zVr,"glpn"),zVr.forEach(t),Jze=r(e5e," \u2014 "),Vk=n(e5e,"A",{href:!0});var WVr=s(Vk);Yze=r(WVr,"GLPNConfig"),WVr.forEach(t),Kze=r(e5e," (GLPN model)"),e5e.forEach(t),Zze=i(y),mm=n(y,"LI",{});var o5e=s(mm);tre=n(o5e,"STRONG",{});var QVr=s(tre);eWe=r(QVr,"gpt2"),QVr.forEach(t),oWe=r(o5e," \u2014 "),Xk=n(o5e,"A",{href:!0});var HVr=s(Xk);rWe=r(HVr,"GPT2Config"),HVr.forEach(t),tWe=r(o5e," (OpenAI GPT-2 model)"),o5e.forEach(t),aWe=i(y),gm=n(y,"LI",{});var r5e=s(gm);are=n(r5e,"STRONG",{});var UVr=s(are);nWe=r(UVr,"gpt_neo"),UVr.forEach(t),sWe=r(r5e," \u2014 "),zk=n(r5e,"A",{href:!0});var JVr=s(zk);lWe=r(JVr,"GPTNeoConfig"),JVr.forEach(t),iWe=r(r5e," (GPT Neo model)"),r5e.forEach(t),dWe=i(y),hm=n(y,"LI",{});var t5e=s(hm);nre=n(t5e,"STRONG",{});var YVr=s(nre);cWe=r(YVr,"gptj"),YVr.forEach(t),fWe=r(t5e," \u2014 "),Wk=n(t5e,"A",{href:!0});var KVr=s(Wk);mWe=r(KVr,"GPTJConfig"),KVr.forEach(t),gWe=r(t5e," (GPT-J model)"),t5e.forEach(t),hWe=i(y),pm=n(y,"LI",{});var a5e=s(pm);sre=n(a5e,"STRONG",{});var ZVr=s(sre);pWe=r(ZVr,"hubert"),ZVr.forEach(t),uWe=r(a5e," \u2014 "),Qk=n(a5e,"A",{href:!0});var eXr=s(Qk);_We=r(eXr,"HubertConfig"),eXr.forEach(t),bWe=r(a5e," (Hubert model)"),a5e.forEach(t),vWe=i(y),um=n(y,"LI",{});var n5e=s(um);lre=n(n5e,"STRONG",{});var oXr=s(lre);FWe=r(oXr,"ibert"),oXr.forEach(t),TWe=r(n5e," \u2014 "),Hk=n(n5e,"A",{href:!0});var rXr=s(Hk);MWe=r(rXr,"IBertConfig"),rXr.forEach(t),EWe=r(n5e," (I-BERT model)"),n5e.forEach(t),CWe=i(y),_m=n(y,"LI",{});var s5e=s(_m);ire=n(s5e,"STRONG",{});var tXr=s(ire);wWe=r(tXr,"imagegpt"),tXr.forEach(t),AWe=r(s5e," \u2014 "),Uk=n(s5e,"A",{href:!0});var aXr=s(Uk);yWe=r(aXr,"ImageGPTConfig"),aXr.forEach(t),LWe=r(s5e," (ImageGPT model)"),s5e.forEach(t),xWe=i(y),bm=n(y,"LI",{});var l5e=s(bm);dre=n(l5e,"STRONG",{});var nXr=s(dre);$We=r(nXr,"layoutlm"),nXr.forEach(t),kWe=r(l5e," \u2014 "),Jk=n(l5e,"A",{href:!0});var sXr=s(Jk);SWe=r(sXr,"LayoutLMConfig"),sXr.forEach(t),RWe=r(l5e," (LayoutLM model)"),l5e.forEach(t),PWe=i(y),vm=n(y,"LI",{});var i5e=s(vm);cre=n(i5e,"STRONG",{});var lXr=s(cre);BWe=r(lXr,"layoutlmv2"),lXr.forEach(t),IWe=r(i5e," \u2014 "),Yk=n(i5e,"A",{href:!0});var iXr=s(Yk);qWe=r(iXr,"LayoutLMv2Config"),iXr.forEach(t),NWe=r(i5e," (LayoutLMv2 model)"),i5e.forEach(t),jWe=i(y),Fm=n(y,"LI",{});var d5e=s(Fm);fre=n(d5e,"STRONG",{});var dXr=s(fre);DWe=r(dXr,"led"),dXr.forEach(t),GWe=r(d5e," \u2014 "),Kk=n(d5e,"A",{href:!0});var cXr=s(Kk);OWe=r(cXr,"LEDConfig"),cXr.forEach(t),VWe=r(d5e," (LED model)"),d5e.forEach(t),XWe=i(y),Tm=n(y,"LI",{});var c5e=s(Tm);mre=n(c5e,"STRONG",{});var fXr=s(mre);zWe=r(fXr,"longformer"),fXr.forEach(t),WWe=r(c5e," \u2014 "),Zk=n(c5e,"A",{href:!0});var mXr=s(Zk);QWe=r(mXr,"LongformerConfig"),mXr.forEach(t),HWe=r(c5e," (Longformer model)"),c5e.forEach(t),UWe=i(y),Mm=n(y,"LI",{});var f5e=s(Mm);gre=n(f5e,"STRONG",{});var gXr=s(gre);JWe=r(gXr,"luke"),gXr.forEach(t),YWe=r(f5e," \u2014 "),eS=n(f5e,"A",{href:!0});var hXr=s(eS);KWe=r(hXr,"LukeConfig"),hXr.forEach(t),ZWe=r(f5e," (LUKE model)"),f5e.forEach(t),eQe=i(y),Em=n(y,"LI",{});var m5e=s(Em);hre=n(m5e,"STRONG",{});var pXr=s(hre);oQe=r(pXr,"lxmert"),pXr.forEach(t),rQe=r(m5e," \u2014 "),oS=n(m5e,"A",{href:!0});var uXr=s(oS);tQe=r(uXr,"LxmertConfig"),uXr.forEach(t),aQe=r(m5e," (LXMERT model)"),m5e.forEach(t),nQe=i(y),Cm=n(y,"LI",{});var g5e=s(Cm);pre=n(g5e,"STRONG",{});var _Xr=s(pre);sQe=r(_Xr,"m2m_100"),_Xr.forEach(t),lQe=r(g5e," \u2014 "),rS=n(g5e,"A",{href:!0});var bXr=s(rS);iQe=r(bXr,"M2M100Config"),bXr.forEach(t),dQe=r(g5e," (M2M100 model)"),g5e.forEach(t),cQe=i(y),wm=n(y,"LI",{});var h5e=s(wm);ure=n(h5e,"STRONG",{});var vXr=s(ure);fQe=r(vXr,"marian"),vXr.forEach(t),mQe=r(h5e," \u2014 "),tS=n(h5e,"A",{href:!0});var FXr=s(tS);gQe=r(FXr,"MarianConfig"),FXr.forEach(t),hQe=r(h5e," (Marian model)"),h5e.forEach(t),pQe=i(y),Am=n(y,"LI",{});var p5e=s(Am);_re=n(p5e,"STRONG",{});var TXr=s(_re);uQe=r(TXr,"maskformer"),TXr.forEach(t),_Qe=r(p5e," \u2014 "),aS=n(p5e,"A",{href:!0});var MXr=s(aS);bQe=r(MXr,"MaskFormerConfig"),MXr.forEach(t),vQe=r(p5e," (MaskFormer model)"),p5e.forEach(t),FQe=i(y),ym=n(y,"LI",{});var u5e=s(ym);bre=n(u5e,"STRONG",{});var EXr=s(bre);TQe=r(EXr,"mbart"),EXr.forEach(t),MQe=r(u5e," \u2014 "),nS=n(u5e,"A",{href:!0});var CXr=s(nS);EQe=r(CXr,"MBartConfig"),CXr.forEach(t),CQe=r(u5e," (mBART model)"),u5e.forEach(t),wQe=i(y),Lm=n(y,"LI",{});var _5e=s(Lm);vre=n(_5e,"STRONG",{});var wXr=s(vre);AQe=r(wXr,"megatron-bert"),wXr.forEach(t),yQe=r(_5e," \u2014 "),sS=n(_5e,"A",{href:!0});var AXr=s(sS);LQe=r(AXr,"MegatronBertConfig"),AXr.forEach(t),xQe=r(_5e," (MegatronBert model)"),_5e.forEach(t),$Qe=i(y),xm=n(y,"LI",{});var b5e=s(xm);Fre=n(b5e,"STRONG",{});var yXr=s(Fre);kQe=r(yXr,"mobilebert"),yXr.forEach(t),SQe=r(b5e," \u2014 "),lS=n(b5e,"A",{href:!0});var LXr=s(lS);RQe=r(LXr,"MobileBertConfig"),LXr.forEach(t),PQe=r(b5e," (MobileBERT model)"),b5e.forEach(t),BQe=i(y),$m=n(y,"LI",{});var v5e=s($m);Tre=n(v5e,"STRONG",{});var xXr=s(Tre);IQe=r(xXr,"mpnet"),xXr.forEach(t),qQe=r(v5e," \u2014 "),iS=n(v5e,"A",{href:!0});var $Xr=s(iS);NQe=r($Xr,"MPNetConfig"),$Xr.forEach(t),jQe=r(v5e," (MPNet model)"),v5e.forEach(t),DQe=i(y),km=n(y,"LI",{});var F5e=s(km);Mre=n(F5e,"STRONG",{});var kXr=s(Mre);GQe=r(kXr,"mt5"),kXr.forEach(t),OQe=r(F5e," \u2014 "),dS=n(F5e,"A",{href:!0});var SXr=s(dS);VQe=r(SXr,"MT5Config"),SXr.forEach(t),XQe=r(F5e," (mT5 model)"),F5e.forEach(t),zQe=i(y),Sm=n(y,"LI",{});var T5e=s(Sm);Ere=n(T5e,"STRONG",{});var RXr=s(Ere);WQe=r(RXr,"nystromformer"),RXr.forEach(t),QQe=r(T5e," \u2014 "),cS=n(T5e,"A",{href:!0});var PXr=s(cS);HQe=r(PXr,"NystromformerConfig"),PXr.forEach(t),UQe=r(T5e," (Nystromformer model)"),T5e.forEach(t),JQe=i(y),Rm=n(y,"LI",{});var M5e=s(Rm);Cre=n(M5e,"STRONG",{});var BXr=s(Cre);YQe=r(BXr,"openai-gpt"),BXr.forEach(t),KQe=r(M5e," \u2014 "),fS=n(M5e,"A",{href:!0});var IXr=s(fS);ZQe=r(IXr,"OpenAIGPTConfig"),IXr.forEach(t),eHe=r(M5e," (OpenAI GPT model)"),M5e.forEach(t),oHe=i(y),Pm=n(y,"LI",{});var E5e=s(Pm);wre=n(E5e,"STRONG",{});var qXr=s(wre);rHe=r(qXr,"opt"),qXr.forEach(t),tHe=r(E5e," \u2014 "),mS=n(E5e,"A",{href:!0});var NXr=s(mS);aHe=r(NXr,"OPTConfig"),NXr.forEach(t),nHe=r(E5e," (OPT model)"),E5e.forEach(t),sHe=i(y),Bm=n(y,"LI",{});var C5e=s(Bm);Are=n(C5e,"STRONG",{});var jXr=s(Are);lHe=r(jXr,"pegasus"),jXr.forEach(t),iHe=r(C5e," \u2014 "),gS=n(C5e,"A",{href:!0});var DXr=s(gS);dHe=r(DXr,"PegasusConfig"),DXr.forEach(t),cHe=r(C5e," (Pegasus model)"),C5e.forEach(t),fHe=i(y),Im=n(y,"LI",{});var w5e=s(Im);yre=n(w5e,"STRONG",{});var GXr=s(yre);mHe=r(GXr,"perceiver"),GXr.forEach(t),gHe=r(w5e," \u2014 "),hS=n(w5e,"A",{href:!0});var OXr=s(hS);hHe=r(OXr,"PerceiverConfig"),OXr.forEach(t),pHe=r(w5e," (Perceiver model)"),w5e.forEach(t),uHe=i(y),qm=n(y,"LI",{});var A5e=s(qm);Lre=n(A5e,"STRONG",{});var VXr=s(Lre);_He=r(VXr,"plbart"),VXr.forEach(t),bHe=r(A5e," \u2014 "),pS=n(A5e,"A",{href:!0});var XXr=s(pS);vHe=r(XXr,"PLBartConfig"),XXr.forEach(t),FHe=r(A5e," (PLBart model)"),A5e.forEach(t),THe=i(y),Nm=n(y,"LI",{});var y5e=s(Nm);xre=n(y5e,"STRONG",{});var zXr=s(xre);MHe=r(zXr,"poolformer"),zXr.forEach(t),EHe=r(y5e," \u2014 "),uS=n(y5e,"A",{href:!0});var WXr=s(uS);CHe=r(WXr,"PoolFormerConfig"),WXr.forEach(t),wHe=r(y5e," (PoolFormer model)"),y5e.forEach(t),AHe=i(y),jm=n(y,"LI",{});var L5e=s(jm);$re=n(L5e,"STRONG",{});var QXr=s($re);yHe=r(QXr,"prophetnet"),QXr.forEach(t),LHe=r(L5e," \u2014 "),_S=n(L5e,"A",{href:!0});var HXr=s(_S);xHe=r(HXr,"ProphetNetConfig"),HXr.forEach(t),$He=r(L5e," (ProphetNet model)"),L5e.forEach(t),kHe=i(y),Dm=n(y,"LI",{});var x5e=s(Dm);kre=n(x5e,"STRONG",{});var UXr=s(kre);SHe=r(UXr,"qdqbert"),UXr.forEach(t),RHe=r(x5e," \u2014 "),bS=n(x5e,"A",{href:!0});var JXr=s(bS);PHe=r(JXr,"QDQBertConfig"),JXr.forEach(t),BHe=r(x5e," (QDQBert model)"),x5e.forEach(t),IHe=i(y),Gm=n(y,"LI",{});var $5e=s(Gm);Sre=n($5e,"STRONG",{});var YXr=s(Sre);qHe=r(YXr,"rag"),YXr.forEach(t),NHe=r($5e," \u2014 "),vS=n($5e,"A",{href:!0});var KXr=s(vS);jHe=r(KXr,"RagConfig"),KXr.forEach(t),DHe=r($5e," (RAG model)"),$5e.forEach(t),GHe=i(y),Om=n(y,"LI",{});var k5e=s(Om);Rre=n(k5e,"STRONG",{});var ZXr=s(Rre);OHe=r(ZXr,"realm"),ZXr.forEach(t),VHe=r(k5e," \u2014 "),FS=n(k5e,"A",{href:!0});var ezr=s(FS);XHe=r(ezr,"RealmConfig"),ezr.forEach(t),zHe=r(k5e," (Realm model)"),k5e.forEach(t),WHe=i(y),Vm=n(y,"LI",{});var S5e=s(Vm);Pre=n(S5e,"STRONG",{});var ozr=s(Pre);QHe=r(ozr,"reformer"),ozr.forEach(t),HHe=r(S5e," \u2014 "),TS=n(S5e,"A",{href:!0});var rzr=s(TS);UHe=r(rzr,"ReformerConfig"),rzr.forEach(t),JHe=r(S5e," (Reformer model)"),S5e.forEach(t),YHe=i(y),Xm=n(y,"LI",{});var R5e=s(Xm);Bre=n(R5e,"STRONG",{});var tzr=s(Bre);KHe=r(tzr,"regnet"),tzr.forEach(t),ZHe=r(R5e," \u2014 "),MS=n(R5e,"A",{href:!0});var azr=s(MS);eUe=r(azr,"RegNetConfig"),azr.forEach(t),oUe=r(R5e," (RegNet model)"),R5e.forEach(t),rUe=i(y),zm=n(y,"LI",{});var P5e=s(zm);Ire=n(P5e,"STRONG",{});var nzr=s(Ire);tUe=r(nzr,"rembert"),nzr.forEach(t),aUe=r(P5e," \u2014 "),ES=n(P5e,"A",{href:!0});var szr=s(ES);nUe=r(szr,"RemBertConfig"),szr.forEach(t),sUe=r(P5e," (RemBERT model)"),P5e.forEach(t),lUe=i(y),Wm=n(y,"LI",{});var B5e=s(Wm);qre=n(B5e,"STRONG",{});var lzr=s(qre);iUe=r(lzr,"resnet"),lzr.forEach(t),dUe=r(B5e," \u2014 "),CS=n(B5e,"A",{href:!0});var izr=s(CS);cUe=r(izr,"ResNetConfig"),izr.forEach(t),fUe=r(B5e," (ResNet model)"),B5e.forEach(t),mUe=i(y),Qm=n(y,"LI",{});var I5e=s(Qm);Nre=n(I5e,"STRONG",{});var dzr=s(Nre);gUe=r(dzr,"retribert"),dzr.forEach(t),hUe=r(I5e," \u2014 "),wS=n(I5e,"A",{href:!0});var czr=s(wS);pUe=r(czr,"RetriBertConfig"),czr.forEach(t),uUe=r(I5e," (RetriBERT model)"),I5e.forEach(t),_Ue=i(y),Hm=n(y,"LI",{});var q5e=s(Hm);jre=n(q5e,"STRONG",{});var fzr=s(jre);bUe=r(fzr,"roberta"),fzr.forEach(t),vUe=r(q5e," \u2014 "),AS=n(q5e,"A",{href:!0});var mzr=s(AS);FUe=r(mzr,"RobertaConfig"),mzr.forEach(t),TUe=r(q5e," (RoBERTa model)"),q5e.forEach(t),MUe=i(y),Um=n(y,"LI",{});var N5e=s(Um);Dre=n(N5e,"STRONG",{});var gzr=s(Dre);EUe=r(gzr,"roformer"),gzr.forEach(t),CUe=r(N5e," \u2014 "),yS=n(N5e,"A",{href:!0});var hzr=s(yS);wUe=r(hzr,"RoFormerConfig"),hzr.forEach(t),AUe=r(N5e," (RoFormer model)"),N5e.forEach(t),yUe=i(y),Jm=n(y,"LI",{});var j5e=s(Jm);Gre=n(j5e,"STRONG",{});var pzr=s(Gre);LUe=r(pzr,"segformer"),pzr.forEach(t),xUe=r(j5e," \u2014 "),LS=n(j5e,"A",{href:!0});var uzr=s(LS);$Ue=r(uzr,"SegformerConfig"),uzr.forEach(t),kUe=r(j5e," (SegFormer model)"),j5e.forEach(t),SUe=i(y),Ym=n(y,"LI",{});var D5e=s(Ym);Ore=n(D5e,"STRONG",{});var _zr=s(Ore);RUe=r(_zr,"sew"),_zr.forEach(t),PUe=r(D5e," \u2014 "),xS=n(D5e,"A",{href:!0});var bzr=s(xS);BUe=r(bzr,"SEWConfig"),bzr.forEach(t),IUe=r(D5e," (SEW model)"),D5e.forEach(t),qUe=i(y),Km=n(y,"LI",{});var G5e=s(Km);Vre=n(G5e,"STRONG",{});var vzr=s(Vre);NUe=r(vzr,"sew-d"),vzr.forEach(t),jUe=r(G5e," \u2014 "),$S=n(G5e,"A",{href:!0});var Fzr=s($S);DUe=r(Fzr,"SEWDConfig"),Fzr.forEach(t),GUe=r(G5e," (SEW-D model)"),G5e.forEach(t),OUe=i(y),Zm=n(y,"LI",{});var O5e=s(Zm);Xre=n(O5e,"STRONG",{});var Tzr=s(Xre);VUe=r(Tzr,"speech-encoder-decoder"),Tzr.forEach(t),XUe=r(O5e," \u2014 "),kS=n(O5e,"A",{href:!0});var Mzr=s(kS);zUe=r(Mzr,"SpeechEncoderDecoderConfig"),Mzr.forEach(t),WUe=r(O5e," (Speech Encoder decoder model)"),O5e.forEach(t),QUe=i(y),eg=n(y,"LI",{});var V5e=s(eg);zre=n(V5e,"STRONG",{});var Ezr=s(zre);HUe=r(Ezr,"speech_to_text"),Ezr.forEach(t),UUe=r(V5e," \u2014 "),SS=n(V5e,"A",{href:!0});var Czr=s(SS);JUe=r(Czr,"Speech2TextConfig"),Czr.forEach(t),YUe=r(V5e," (Speech2Text model)"),V5e.forEach(t),KUe=i(y),og=n(y,"LI",{});var X5e=s(og);Wre=n(X5e,"STRONG",{});var wzr=s(Wre);ZUe=r(wzr,"speech_to_text_2"),wzr.forEach(t),eJe=r(X5e," \u2014 "),RS=n(X5e,"A",{href:!0});var Azr=s(RS);oJe=r(Azr,"Speech2Text2Config"),Azr.forEach(t),rJe=r(X5e," (Speech2Text2 model)"),X5e.forEach(t),tJe=i(y),rg=n(y,"LI",{});var z5e=s(rg);Qre=n(z5e,"STRONG",{});var yzr=s(Qre);aJe=r(yzr,"splinter"),yzr.forEach(t),nJe=r(z5e," \u2014 "),PS=n(z5e,"A",{href:!0});var Lzr=s(PS);sJe=r(Lzr,"SplinterConfig"),Lzr.forEach(t),lJe=r(z5e," (Splinter model)"),z5e.forEach(t),iJe=i(y),tg=n(y,"LI",{});var W5e=s(tg);Hre=n(W5e,"STRONG",{});var xzr=s(Hre);dJe=r(xzr,"squeezebert"),xzr.forEach(t),cJe=r(W5e," \u2014 "),BS=n(W5e,"A",{href:!0});var $zr=s(BS);fJe=r($zr,"SqueezeBertConfig"),$zr.forEach(t),mJe=r(W5e," (SqueezeBERT model)"),W5e.forEach(t),gJe=i(y),ag=n(y,"LI",{});var Q5e=s(ag);Ure=n(Q5e,"STRONG",{});var kzr=s(Ure);hJe=r(kzr,"swin"),kzr.forEach(t),pJe=r(Q5e," \u2014 "),IS=n(Q5e,"A",{href:!0});var Szr=s(IS);uJe=r(Szr,"SwinConfig"),Szr.forEach(t),_Je=r(Q5e," (Swin model)"),Q5e.forEach(t),bJe=i(y),ng=n(y,"LI",{});var H5e=s(ng);Jre=n(H5e,"STRONG",{});var Rzr=s(Jre);vJe=r(Rzr,"t5"),Rzr.forEach(t),FJe=r(H5e," \u2014 "),qS=n(H5e,"A",{href:!0});var Pzr=s(qS);TJe=r(Pzr,"T5Config"),Pzr.forEach(t),MJe=r(H5e," (T5 model)"),H5e.forEach(t),EJe=i(y),sg=n(y,"LI",{});var U5e=s(sg);Yre=n(U5e,"STRONG",{});var Bzr=s(Yre);CJe=r(Bzr,"tapas"),Bzr.forEach(t),wJe=r(U5e," \u2014 "),NS=n(U5e,"A",{href:!0});var Izr=s(NS);AJe=r(Izr,"TapasConfig"),Izr.forEach(t),yJe=r(U5e," (TAPAS model)"),U5e.forEach(t),LJe=i(y),lg=n(y,"LI",{});var J5e=s(lg);Kre=n(J5e,"STRONG",{});var qzr=s(Kre);xJe=r(qzr,"trajectory_transformer"),qzr.forEach(t),$Je=r(J5e," \u2014 "),jS=n(J5e,"A",{href:!0});var Nzr=s(jS);kJe=r(Nzr,"TrajectoryTransformerConfig"),Nzr.forEach(t),SJe=r(J5e," (Trajectory Transformer model)"),J5e.forEach(t),RJe=i(y),ig=n(y,"LI",{});var Y5e=s(ig);Zre=n(Y5e,"STRONG",{});var jzr=s(Zre);PJe=r(jzr,"transfo-xl"),jzr.forEach(t),BJe=r(Y5e," \u2014 "),DS=n(Y5e,"A",{href:!0});var Dzr=s(DS);IJe=r(Dzr,"TransfoXLConfig"),Dzr.forEach(t),qJe=r(Y5e," (Transformer-XL model)"),Y5e.forEach(t),NJe=i(y),dg=n(y,"LI",{});var K5e=s(dg);ete=n(K5e,"STRONG",{});var Gzr=s(ete);jJe=r(Gzr,"trocr"),Gzr.forEach(t),DJe=r(K5e," \u2014 "),GS=n(K5e,"A",{href:!0});var Ozr=s(GS);GJe=r(Ozr,"TrOCRConfig"),Ozr.forEach(t),OJe=r(K5e," (TrOCR model)"),K5e.forEach(t),VJe=i(y),cg=n(y,"LI",{});var Z5e=s(cg);ote=n(Z5e,"STRONG",{});var Vzr=s(ote);XJe=r(Vzr,"unispeech"),Vzr.forEach(t),zJe=r(Z5e," \u2014 "),OS=n(Z5e,"A",{href:!0});var Xzr=s(OS);WJe=r(Xzr,"UniSpeechConfig"),Xzr.forEach(t),QJe=r(Z5e," (UniSpeech model)"),Z5e.forEach(t),HJe=i(y),fg=n(y,"LI",{});var e3e=s(fg);rte=n(e3e,"STRONG",{});var zzr=s(rte);UJe=r(zzr,"unispeech-sat"),zzr.forEach(t),JJe=r(e3e," \u2014 "),VS=n(e3e,"A",{href:!0});var Wzr=s(VS);YJe=r(Wzr,"UniSpeechSatConfig"),Wzr.forEach(t),KJe=r(e3e," (UniSpeechSat model)"),e3e.forEach(t),ZJe=i(y),mg=n(y,"LI",{});var o3e=s(mg);tte=n(o3e,"STRONG",{});var Qzr=s(tte);eYe=r(Qzr,"van"),Qzr.forEach(t),oYe=r(o3e," \u2014 "),XS=n(o3e,"A",{href:!0});var Hzr=s(XS);rYe=r(Hzr,"VanConfig"),Hzr.forEach(t),tYe=r(o3e," (VAN model)"),o3e.forEach(t),aYe=i(y),gg=n(y,"LI",{});var r3e=s(gg);ate=n(r3e,"STRONG",{});var Uzr=s(ate);nYe=r(Uzr,"vilt"),Uzr.forEach(t),sYe=r(r3e," \u2014 "),zS=n(r3e,"A",{href:!0});var Jzr=s(zS);lYe=r(Jzr,"ViltConfig"),Jzr.forEach(t),iYe=r(r3e," (ViLT model)"),r3e.forEach(t),dYe=i(y),hg=n(y,"LI",{});var t3e=s(hg);nte=n(t3e,"STRONG",{});var Yzr=s(nte);cYe=r(Yzr,"vision-encoder-decoder"),Yzr.forEach(t),fYe=r(t3e," \u2014 "),WS=n(t3e,"A",{href:!0});var Kzr=s(WS);mYe=r(Kzr,"VisionEncoderDecoderConfig"),Kzr.forEach(t),gYe=r(t3e," (Vision Encoder decoder model)"),t3e.forEach(t),hYe=i(y),pg=n(y,"LI",{});var a3e=s(pg);ste=n(a3e,"STRONG",{});var Zzr=s(ste);pYe=r(Zzr,"vision-text-dual-encoder"),Zzr.forEach(t),uYe=r(a3e," \u2014 "),QS=n(a3e,"A",{href:!0});var eWr=s(QS);_Ye=r(eWr,"VisionTextDualEncoderConfig"),eWr.forEach(t),bYe=r(a3e," (VisionTextDualEncoder model)"),a3e.forEach(t),vYe=i(y),ug=n(y,"LI",{});var n3e=s(ug);lte=n(n3e,"STRONG",{});var oWr=s(lte);FYe=r(oWr,"visual_bert"),oWr.forEach(t),TYe=r(n3e," \u2014 "),HS=n(n3e,"A",{href:!0});var rWr=s(HS);MYe=r(rWr,"VisualBertConfig"),rWr.forEach(t),EYe=r(n3e," (VisualBert model)"),n3e.forEach(t),CYe=i(y),_g=n(y,"LI",{});var s3e=s(_g);ite=n(s3e,"STRONG",{});var tWr=s(ite);wYe=r(tWr,"vit"),tWr.forEach(t),AYe=r(s3e," \u2014 "),US=n(s3e,"A",{href:!0});var aWr=s(US);yYe=r(aWr,"ViTConfig"),aWr.forEach(t),LYe=r(s3e," (ViT model)"),s3e.forEach(t),xYe=i(y),bg=n(y,"LI",{});var l3e=s(bg);dte=n(l3e,"STRONG",{});var nWr=s(dte);$Ye=r(nWr,"vit_mae"),nWr.forEach(t),kYe=r(l3e," \u2014 "),JS=n(l3e,"A",{href:!0});var sWr=s(JS);SYe=r(sWr,"ViTMAEConfig"),sWr.forEach(t),RYe=r(l3e," (ViTMAE model)"),l3e.forEach(t),PYe=i(y),vg=n(y,"LI",{});var i3e=s(vg);cte=n(i3e,"STRONG",{});var lWr=s(cte);BYe=r(lWr,"wav2vec2"),lWr.forEach(t),IYe=r(i3e," \u2014 "),YS=n(i3e,"A",{href:!0});var iWr=s(YS);qYe=r(iWr,"Wav2Vec2Config"),iWr.forEach(t),NYe=r(i3e," (Wav2Vec2 model)"),i3e.forEach(t),jYe=i(y),Fg=n(y,"LI",{});var d3e=s(Fg);fte=n(d3e,"STRONG",{});var dWr=s(fte);DYe=r(dWr,"wav2vec2-conformer"),dWr.forEach(t),GYe=r(d3e," \u2014 "),KS=n(d3e,"A",{href:!0});var cWr=s(KS);OYe=r(cWr,"Wav2Vec2ConformerConfig"),cWr.forEach(t),VYe=r(d3e," (Wav2Vec2-Conformer model)"),d3e.forEach(t),XYe=i(y),Tg=n(y,"LI",{});var c3e=s(Tg);mte=n(c3e,"STRONG",{});var fWr=s(mte);zYe=r(fWr,"wavlm"),fWr.forEach(t),WYe=r(c3e," \u2014 "),ZS=n(c3e,"A",{href:!0});var mWr=s(ZS);QYe=r(mWr,"WavLMConfig"),mWr.forEach(t),HYe=r(c3e," (WavLM model)"),c3e.forEach(t),UYe=i(y),Mg=n(y,"LI",{});var f3e=s(Mg);gte=n(f3e,"STRONG",{});var gWr=s(gte);JYe=r(gWr,"xglm"),gWr.forEach(t),YYe=r(f3e," \u2014 "),eR=n(f3e,"A",{href:!0});var hWr=s(eR);KYe=r(hWr,"XGLMConfig"),hWr.forEach(t),ZYe=r(f3e," (XGLM model)"),f3e.forEach(t),eKe=i(y),Eg=n(y,"LI",{});var m3e=s(Eg);hte=n(m3e,"STRONG",{});var pWr=s(hte);oKe=r(pWr,"xlm"),pWr.forEach(t),rKe=r(m3e," \u2014 "),oR=n(m3e,"A",{href:!0});var uWr=s(oR);tKe=r(uWr,"XLMConfig"),uWr.forEach(t),aKe=r(m3e," (XLM model)"),m3e.forEach(t),nKe=i(y),Cg=n(y,"LI",{});var g3e=s(Cg);pte=n(g3e,"STRONG",{});var _Wr=s(pte);sKe=r(_Wr,"xlm-prophetnet"),_Wr.forEach(t),lKe=r(g3e," \u2014 "),rR=n(g3e,"A",{href:!0});var bWr=s(rR);iKe=r(bWr,"XLMProphetNetConfig"),bWr.forEach(t),dKe=r(g3e," (XLMProphetNet model)"),g3e.forEach(t),cKe=i(y),wg=n(y,"LI",{});var h3e=s(wg);ute=n(h3e,"STRONG",{});var vWr=s(ute);fKe=r(vWr,"xlm-roberta"),vWr.forEach(t),mKe=r(h3e," \u2014 "),tR=n(h3e,"A",{href:!0});var FWr=s(tR);gKe=r(FWr,"XLMRobertaConfig"),FWr.forEach(t),hKe=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),pKe=i(y),Ag=n(y,"LI",{});var p3e=s(Ag);_te=n(p3e,"STRONG",{});var TWr=s(_te);uKe=r(TWr,"xlm-roberta-xl"),TWr.forEach(t),_Ke=r(p3e," \u2014 "),aR=n(p3e,"A",{href:!0});var MWr=s(aR);bKe=r(MWr,"XLMRobertaXLConfig"),MWr.forEach(t),vKe=r(p3e," (XLM-RoBERTa-XL model)"),p3e.forEach(t),FKe=i(y),yg=n(y,"LI",{});var u3e=s(yg);bte=n(u3e,"STRONG",{});var EWr=s(bte);TKe=r(EWr,"xlnet"),EWr.forEach(t),MKe=r(u3e," \u2014 "),nR=n(u3e,"A",{href:!0});var CWr=s(nR);EKe=r(CWr,"XLNetConfig"),CWr.forEach(t),CKe=r(u3e," (XLNet model)"),u3e.forEach(t),wKe=i(y),Lg=n(y,"LI",{});var _3e=s(Lg);vte=n(_3e,"STRONG",{});var wWr=s(vte);AKe=r(wWr,"yolos"),wWr.forEach(t),yKe=r(_3e," \u2014 "),sR=n(_3e,"A",{href:!0});var AWr=s(sR);LKe=r(AWr,"YolosConfig"),AWr.forEach(t),xKe=r(_3e," (YOLOS model)"),_3e.forEach(t),$Ke=i(y),xg=n(y,"LI",{});var b3e=s(xg);Fte=n(b3e,"STRONG",{});var yWr=s(Fte);kKe=r(yWr,"yoso"),yWr.forEach(t),SKe=r(b3e," \u2014 "),lR=n(b3e,"A",{href:!0});var LWr=s(lR);RKe=r(LWr,"YosoConfig"),LWr.forEach(t),PKe=r(b3e," (YOSO model)"),b3e.forEach(t),y.forEach(t),BKe=i(tt),T($g.$$.fragment,tt),tt.forEach(t),IKe=i(rt),kg=n(rt,"DIV",{class:!0});var tDe=s(kg);T(D0.$$.fragment,tDe),qKe=i(tDe),Tte=n(tDe,"P",{});var xWr=s(Tte);NKe=r(xWr,"Register a new configuration for this class."),xWr.forEach(t),tDe.forEach(t),rt.forEach(t),aNe=i(f),yi=n(f,"H2",{class:!0});var aDe=s(yi);Sg=n(aDe,"A",{id:!0,class:!0,href:!0});var $Wr=s(Sg);Mte=n($Wr,"SPAN",{});var kWr=s(Mte);T(G0.$$.fragment,kWr),kWr.forEach(t),$Wr.forEach(t),jKe=i(aDe),Ete=n(aDe,"SPAN",{});var SWr=s(Ete);DKe=r(SWr,"AutoTokenizer"),SWr.forEach(t),aDe.forEach(t),nNe=i(f),Ao=n(f,"DIV",{class:!0});var Os=s(Ao);T(O0.$$.fragment,Os),GKe=i(Os),V0=n(Os,"P",{});var nDe=s(V0);OKe=r(nDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iR=n(nDe,"A",{href:!0});var RWr=s(iR);VKe=r(RWr,"AutoTokenizer.from_pretrained()"),RWr.forEach(t),XKe=r(nDe," class method."),nDe.forEach(t),zKe=i(Os),X0=n(Os,"P",{});var sDe=s(X0);WKe=r(sDe,"This class cannot be instantiated directly using "),Cte=n(sDe,"CODE",{});var PWr=s(Cte);QKe=r(PWr,"__init__()"),PWr.forEach(t),HKe=r(sDe," (throws an error)."),sDe.forEach(t),UKe=i(Os),Ar=n(Os,"DIV",{class:!0});var Vs=s(Ar);T(z0.$$.fragment,Vs),JKe=i(Vs),wte=n(Vs,"P",{});var BWr=s(wte);YKe=r(BWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BWr.forEach(t),KKe=i(Vs),$a=n(Vs,"P",{});var R3=s($a);ZKe=r(R3,"The tokenizer class to instantiate is selected based on the "),Ate=n(R3,"CODE",{});var IWr=s(Ate);eZe=r(IWr,"model_type"),IWr.forEach(t),oZe=r(R3,` property of the config object (either
passed as an argument or loaded from `),yte=n(R3,"CODE",{});var qWr=s(yte);rZe=r(qWr,"pretrained_model_name_or_path"),qWr.forEach(t),tZe=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=n(R3,"CODE",{});var NWr=s(Lte);aZe=r(NWr,"pretrained_model_name_or_path"),NWr.forEach(t),nZe=r(R3,":"),R3.forEach(t),sZe=i(Vs),k=n(Vs,"UL",{});var S=s(k);qn=n(S,"LI",{});var Y9=s(qn);xte=n(Y9,"STRONG",{});var jWr=s(xte);lZe=r(jWr,"albert"),jWr.forEach(t),iZe=r(Y9," \u2014 "),dR=n(Y9,"A",{href:!0});var DWr=s(dR);dZe=r(DWr,"AlbertTokenizer"),DWr.forEach(t),cZe=r(Y9," or "),cR=n(Y9,"A",{href:!0});var GWr=s(cR);fZe=r(GWr,"AlbertTokenizerFast"),GWr.forEach(t),mZe=r(Y9," (ALBERT model)"),Y9.forEach(t),gZe=i(S),Nn=n(S,"LI",{});var K9=s(Nn);$te=n(K9,"STRONG",{});var OWr=s($te);hZe=r(OWr,"bart"),OWr.forEach(t),pZe=r(K9," \u2014 "),fR=n(K9,"A",{href:!0});var VWr=s(fR);uZe=r(VWr,"BartTokenizer"),VWr.forEach(t),_Ze=r(K9," or "),mR=n(K9,"A",{href:!0});var XWr=s(mR);bZe=r(XWr,"BartTokenizerFast"),XWr.forEach(t),vZe=r(K9," (BART model)"),K9.forEach(t),FZe=i(S),jn=n(S,"LI",{});var Z9=s(jn);kte=n(Z9,"STRONG",{});var zWr=s(kte);TZe=r(zWr,"barthez"),zWr.forEach(t),MZe=r(Z9," \u2014 "),gR=n(Z9,"A",{href:!0});var WWr=s(gR);EZe=r(WWr,"BarthezTokenizer"),WWr.forEach(t),CZe=r(Z9," or "),hR=n(Z9,"A",{href:!0});var QWr=s(hR);wZe=r(QWr,"BarthezTokenizerFast"),QWr.forEach(t),AZe=r(Z9," (BARThez model)"),Z9.forEach(t),yZe=i(S),Rg=n(S,"LI",{});var v3e=s(Rg);Ste=n(v3e,"STRONG",{});var HWr=s(Ste);LZe=r(HWr,"bartpho"),HWr.forEach(t),xZe=r(v3e," \u2014 "),pR=n(v3e,"A",{href:!0});var UWr=s(pR);$Ze=r(UWr,"BartphoTokenizer"),UWr.forEach(t),kZe=r(v3e," (BARTpho model)"),v3e.forEach(t),SZe=i(S),Dn=n(S,"LI",{});var e$=s(Dn);Rte=n(e$,"STRONG",{});var JWr=s(Rte);RZe=r(JWr,"bert"),JWr.forEach(t),PZe=r(e$," \u2014 "),uR=n(e$,"A",{href:!0});var YWr=s(uR);BZe=r(YWr,"BertTokenizer"),YWr.forEach(t),IZe=r(e$," or "),_R=n(e$,"A",{href:!0});var KWr=s(_R);qZe=r(KWr,"BertTokenizerFast"),KWr.forEach(t),NZe=r(e$," (BERT model)"),e$.forEach(t),jZe=i(S),Pg=n(S,"LI",{});var F3e=s(Pg);Pte=n(F3e,"STRONG",{});var ZWr=s(Pte);DZe=r(ZWr,"bert-generation"),ZWr.forEach(t),GZe=r(F3e," \u2014 "),bR=n(F3e,"A",{href:!0});var eQr=s(bR);OZe=r(eQr,"BertGenerationTokenizer"),eQr.forEach(t),VZe=r(F3e," (Bert Generation model)"),F3e.forEach(t),XZe=i(S),Bg=n(S,"LI",{});var T3e=s(Bg);Bte=n(T3e,"STRONG",{});var oQr=s(Bte);zZe=r(oQr,"bert-japanese"),oQr.forEach(t),WZe=r(T3e," \u2014 "),vR=n(T3e,"A",{href:!0});var rQr=s(vR);QZe=r(rQr,"BertJapaneseTokenizer"),rQr.forEach(t),HZe=r(T3e," (BertJapanese model)"),T3e.forEach(t),UZe=i(S),Ig=n(S,"LI",{});var M3e=s(Ig);Ite=n(M3e,"STRONG",{});var tQr=s(Ite);JZe=r(tQr,"bertweet"),tQr.forEach(t),YZe=r(M3e," \u2014 "),FR=n(M3e,"A",{href:!0});var aQr=s(FR);KZe=r(aQr,"BertweetTokenizer"),aQr.forEach(t),ZZe=r(M3e," (Bertweet model)"),M3e.forEach(t),eeo=i(S),Gn=n(S,"LI",{});var o$=s(Gn);qte=n(o$,"STRONG",{});var nQr=s(qte);oeo=r(nQr,"big_bird"),nQr.forEach(t),reo=r(o$," \u2014 "),TR=n(o$,"A",{href:!0});var sQr=s(TR);teo=r(sQr,"BigBirdTokenizer"),sQr.forEach(t),aeo=r(o$," or "),MR=n(o$,"A",{href:!0});var lQr=s(MR);neo=r(lQr,"BigBirdTokenizerFast"),lQr.forEach(t),seo=r(o$," (BigBird model)"),o$.forEach(t),leo=i(S),On=n(S,"LI",{});var r$=s(On);Nte=n(r$,"STRONG",{});var iQr=s(Nte);ieo=r(iQr,"bigbird_pegasus"),iQr.forEach(t),deo=r(r$," \u2014 "),ER=n(r$,"A",{href:!0});var dQr=s(ER);ceo=r(dQr,"PegasusTokenizer"),dQr.forEach(t),feo=r(r$," or "),CR=n(r$,"A",{href:!0});var cQr=s(CR);meo=r(cQr,"PegasusTokenizerFast"),cQr.forEach(t),geo=r(r$," (BigBirdPegasus model)"),r$.forEach(t),heo=i(S),Vn=n(S,"LI",{});var t$=s(Vn);jte=n(t$,"STRONG",{});var fQr=s(jte);peo=r(fQr,"blenderbot"),fQr.forEach(t),ueo=r(t$," \u2014 "),wR=n(t$,"A",{href:!0});var mQr=s(wR);_eo=r(mQr,"BlenderbotTokenizer"),mQr.forEach(t),beo=r(t$," or "),AR=n(t$,"A",{href:!0});var gQr=s(AR);veo=r(gQr,"BlenderbotTokenizerFast"),gQr.forEach(t),Feo=r(t$," (Blenderbot model)"),t$.forEach(t),Teo=i(S),qg=n(S,"LI",{});var E3e=s(qg);Dte=n(E3e,"STRONG",{});var hQr=s(Dte);Meo=r(hQr,"blenderbot-small"),hQr.forEach(t),Eeo=r(E3e," \u2014 "),yR=n(E3e,"A",{href:!0});var pQr=s(yR);Ceo=r(pQr,"BlenderbotSmallTokenizer"),pQr.forEach(t),weo=r(E3e," (BlenderbotSmall model)"),E3e.forEach(t),Aeo=i(S),Ng=n(S,"LI",{});var C3e=s(Ng);Gte=n(C3e,"STRONG",{});var uQr=s(Gte);yeo=r(uQr,"byt5"),uQr.forEach(t),Leo=r(C3e," \u2014 "),LR=n(C3e,"A",{href:!0});var _Qr=s(LR);xeo=r(_Qr,"ByT5Tokenizer"),_Qr.forEach(t),$eo=r(C3e," (ByT5 model)"),C3e.forEach(t),keo=i(S),Xn=n(S,"LI",{});var a$=s(Xn);Ote=n(a$,"STRONG",{});var bQr=s(Ote);Seo=r(bQr,"camembert"),bQr.forEach(t),Reo=r(a$," \u2014 "),xR=n(a$,"A",{href:!0});var vQr=s(xR);Peo=r(vQr,"CamembertTokenizer"),vQr.forEach(t),Beo=r(a$," or "),$R=n(a$,"A",{href:!0});var FQr=s($R);Ieo=r(FQr,"CamembertTokenizerFast"),FQr.forEach(t),qeo=r(a$," (CamemBERT model)"),a$.forEach(t),Neo=i(S),jg=n(S,"LI",{});var w3e=s(jg);Vte=n(w3e,"STRONG",{});var TQr=s(Vte);jeo=r(TQr,"canine"),TQr.forEach(t),Deo=r(w3e," \u2014 "),kR=n(w3e,"A",{href:!0});var MQr=s(kR);Geo=r(MQr,"CanineTokenizer"),MQr.forEach(t),Oeo=r(w3e," (Canine model)"),w3e.forEach(t),Veo=i(S),zn=n(S,"LI",{});var n$=s(zn);Xte=n(n$,"STRONG",{});var EQr=s(Xte);Xeo=r(EQr,"clip"),EQr.forEach(t),zeo=r(n$," \u2014 "),SR=n(n$,"A",{href:!0});var CQr=s(SR);Weo=r(CQr,"CLIPTokenizer"),CQr.forEach(t),Qeo=r(n$," or "),RR=n(n$,"A",{href:!0});var wQr=s(RR);Heo=r(wQr,"CLIPTokenizerFast"),wQr.forEach(t),Ueo=r(n$," (CLIP model)"),n$.forEach(t),Jeo=i(S),Wn=n(S,"LI",{});var s$=s(Wn);zte=n(s$,"STRONG",{});var AQr=s(zte);Yeo=r(AQr,"convbert"),AQr.forEach(t),Keo=r(s$," \u2014 "),PR=n(s$,"A",{href:!0});var yQr=s(PR);Zeo=r(yQr,"ConvBertTokenizer"),yQr.forEach(t),eoo=r(s$," or "),BR=n(s$,"A",{href:!0});var LQr=s(BR);ooo=r(LQr,"ConvBertTokenizerFast"),LQr.forEach(t),roo=r(s$," (ConvBERT model)"),s$.forEach(t),too=i(S),Qn=n(S,"LI",{});var l$=s(Qn);Wte=n(l$,"STRONG",{});var xQr=s(Wte);aoo=r(xQr,"cpm"),xQr.forEach(t),noo=r(l$," \u2014 "),IR=n(l$,"A",{href:!0});var $Qr=s(IR);soo=r($Qr,"CpmTokenizer"),$Qr.forEach(t),loo=r(l$," or "),qR=n(l$,"A",{href:!0});var kQr=s(qR);ioo=r(kQr,"CpmTokenizerFast"),kQr.forEach(t),doo=r(l$," (CPM model)"),l$.forEach(t),coo=i(S),Dg=n(S,"LI",{});var A3e=s(Dg);Qte=n(A3e,"STRONG",{});var SQr=s(Qte);foo=r(SQr,"ctrl"),SQr.forEach(t),moo=r(A3e," \u2014 "),NR=n(A3e,"A",{href:!0});var RQr=s(NR);goo=r(RQr,"CTRLTokenizer"),RQr.forEach(t),hoo=r(A3e," (CTRL model)"),A3e.forEach(t),poo=i(S),Hn=n(S,"LI",{});var i$=s(Hn);Hte=n(i$,"STRONG",{});var PQr=s(Hte);uoo=r(PQr,"data2vec-text"),PQr.forEach(t),_oo=r(i$," \u2014 "),jR=n(i$,"A",{href:!0});var BQr=s(jR);boo=r(BQr,"RobertaTokenizer"),BQr.forEach(t),voo=r(i$," or "),DR=n(i$,"A",{href:!0});var IQr=s(DR);Foo=r(IQr,"RobertaTokenizerFast"),IQr.forEach(t),Too=r(i$," (Data2VecText model)"),i$.forEach(t),Moo=i(S),Un=n(S,"LI",{});var d$=s(Un);Ute=n(d$,"STRONG",{});var qQr=s(Ute);Eoo=r(qQr,"deberta"),qQr.forEach(t),Coo=r(d$," \u2014 "),GR=n(d$,"A",{href:!0});var NQr=s(GR);woo=r(NQr,"DebertaTokenizer"),NQr.forEach(t),Aoo=r(d$," or "),OR=n(d$,"A",{href:!0});var jQr=s(OR);yoo=r(jQr,"DebertaTokenizerFast"),jQr.forEach(t),Loo=r(d$," (DeBERTa model)"),d$.forEach(t),xoo=i(S),Jn=n(S,"LI",{});var c$=s(Jn);Jte=n(c$,"STRONG",{});var DQr=s(Jte);$oo=r(DQr,"deberta-v2"),DQr.forEach(t),koo=r(c$," \u2014 "),VR=n(c$,"A",{href:!0});var GQr=s(VR);Soo=r(GQr,"DebertaV2Tokenizer"),GQr.forEach(t),Roo=r(c$," or "),XR=n(c$,"A",{href:!0});var OQr=s(XR);Poo=r(OQr,"DebertaV2TokenizerFast"),OQr.forEach(t),Boo=r(c$," (DeBERTa-v2 model)"),c$.forEach(t),Ioo=i(S),Yn=n(S,"LI",{});var f$=s(Yn);Yte=n(f$,"STRONG",{});var VQr=s(Yte);qoo=r(VQr,"distilbert"),VQr.forEach(t),Noo=r(f$," \u2014 "),zR=n(f$,"A",{href:!0});var XQr=s(zR);joo=r(XQr,"DistilBertTokenizer"),XQr.forEach(t),Doo=r(f$," or "),WR=n(f$,"A",{href:!0});var zQr=s(WR);Goo=r(zQr,"DistilBertTokenizerFast"),zQr.forEach(t),Ooo=r(f$," (DistilBERT model)"),f$.forEach(t),Voo=i(S),Kn=n(S,"LI",{});var m$=s(Kn);Kte=n(m$,"STRONG",{});var WQr=s(Kte);Xoo=r(WQr,"dpr"),WQr.forEach(t),zoo=r(m$," \u2014 "),QR=n(m$,"A",{href:!0});var QQr=s(QR);Woo=r(QQr,"DPRQuestionEncoderTokenizer"),QQr.forEach(t),Qoo=r(m$," or "),HR=n(m$,"A",{href:!0});var HQr=s(HR);Hoo=r(HQr,"DPRQuestionEncoderTokenizerFast"),HQr.forEach(t),Uoo=r(m$," (DPR model)"),m$.forEach(t),Joo=i(S),Zn=n(S,"LI",{});var g$=s(Zn);Zte=n(g$,"STRONG",{});var UQr=s(Zte);Yoo=r(UQr,"electra"),UQr.forEach(t),Koo=r(g$," \u2014 "),UR=n(g$,"A",{href:!0});var JQr=s(UR);Zoo=r(JQr,"ElectraTokenizer"),JQr.forEach(t),ero=r(g$," or "),JR=n(g$,"A",{href:!0});var YQr=s(JR);oro=r(YQr,"ElectraTokenizerFast"),YQr.forEach(t),rro=r(g$," (ELECTRA model)"),g$.forEach(t),tro=i(S),Gg=n(S,"LI",{});var y3e=s(Gg);eae=n(y3e,"STRONG",{});var KQr=s(eae);aro=r(KQr,"flaubert"),KQr.forEach(t),nro=r(y3e," \u2014 "),YR=n(y3e,"A",{href:!0});var ZQr=s(YR);sro=r(ZQr,"FlaubertTokenizer"),ZQr.forEach(t),lro=r(y3e," (FlauBERT model)"),y3e.forEach(t),iro=i(S),es=n(S,"LI",{});var h$=s(es);oae=n(h$,"STRONG",{});var eHr=s(oae);dro=r(eHr,"fnet"),eHr.forEach(t),cro=r(h$," \u2014 "),KR=n(h$,"A",{href:!0});var oHr=s(KR);fro=r(oHr,"FNetTokenizer"),oHr.forEach(t),mro=r(h$," or "),ZR=n(h$,"A",{href:!0});var rHr=s(ZR);gro=r(rHr,"FNetTokenizerFast"),rHr.forEach(t),hro=r(h$," (FNet model)"),h$.forEach(t),pro=i(S),Og=n(S,"LI",{});var L3e=s(Og);rae=n(L3e,"STRONG",{});var tHr=s(rae);uro=r(tHr,"fsmt"),tHr.forEach(t),_ro=r(L3e," \u2014 "),eP=n(L3e,"A",{href:!0});var aHr=s(eP);bro=r(aHr,"FSMTTokenizer"),aHr.forEach(t),vro=r(L3e," (FairSeq Machine-Translation model)"),L3e.forEach(t),Fro=i(S),os=n(S,"LI",{});var p$=s(os);tae=n(p$,"STRONG",{});var nHr=s(tae);Tro=r(nHr,"funnel"),nHr.forEach(t),Mro=r(p$," \u2014 "),oP=n(p$,"A",{href:!0});var sHr=s(oP);Ero=r(sHr,"FunnelTokenizer"),sHr.forEach(t),Cro=r(p$," or "),rP=n(p$,"A",{href:!0});var lHr=s(rP);wro=r(lHr,"FunnelTokenizerFast"),lHr.forEach(t),Aro=r(p$," (Funnel Transformer model)"),p$.forEach(t),yro=i(S),rs=n(S,"LI",{});var u$=s(rs);aae=n(u$,"STRONG",{});var iHr=s(aae);Lro=r(iHr,"gpt2"),iHr.forEach(t),xro=r(u$," \u2014 "),tP=n(u$,"A",{href:!0});var dHr=s(tP);$ro=r(dHr,"GPT2Tokenizer"),dHr.forEach(t),kro=r(u$," or "),aP=n(u$,"A",{href:!0});var cHr=s(aP);Sro=r(cHr,"GPT2TokenizerFast"),cHr.forEach(t),Rro=r(u$," (OpenAI GPT-2 model)"),u$.forEach(t),Pro=i(S),ts=n(S,"LI",{});var _$=s(ts);nae=n(_$,"STRONG",{});var fHr=s(nae);Bro=r(fHr,"gpt_neo"),fHr.forEach(t),Iro=r(_$," \u2014 "),nP=n(_$,"A",{href:!0});var mHr=s(nP);qro=r(mHr,"GPT2Tokenizer"),mHr.forEach(t),Nro=r(_$," or "),sP=n(_$,"A",{href:!0});var gHr=s(sP);jro=r(gHr,"GPT2TokenizerFast"),gHr.forEach(t),Dro=r(_$," (GPT Neo model)"),_$.forEach(t),Gro=i(S),as=n(S,"LI",{});var b$=s(as);sae=n(b$,"STRONG",{});var hHr=s(sae);Oro=r(hHr,"gptj"),hHr.forEach(t),Vro=r(b$," \u2014 "),lP=n(b$,"A",{href:!0});var pHr=s(lP);Xro=r(pHr,"GPT2Tokenizer"),pHr.forEach(t),zro=r(b$," or "),iP=n(b$,"A",{href:!0});var uHr=s(iP);Wro=r(uHr,"GPT2TokenizerFast"),uHr.forEach(t),Qro=r(b$," (GPT-J model)"),b$.forEach(t),Hro=i(S),ns=n(S,"LI",{});var v$=s(ns);lae=n(v$,"STRONG",{});var _Hr=s(lae);Uro=r(_Hr,"herbert"),_Hr.forEach(t),Jro=r(v$," \u2014 "),dP=n(v$,"A",{href:!0});var bHr=s(dP);Yro=r(bHr,"HerbertTokenizer"),bHr.forEach(t),Kro=r(v$," or "),cP=n(v$,"A",{href:!0});var vHr=s(cP);Zro=r(vHr,"HerbertTokenizerFast"),vHr.forEach(t),eto=r(v$," (HerBERT model)"),v$.forEach(t),oto=i(S),Vg=n(S,"LI",{});var x3e=s(Vg);iae=n(x3e,"STRONG",{});var FHr=s(iae);rto=r(FHr,"hubert"),FHr.forEach(t),tto=r(x3e," \u2014 "),fP=n(x3e,"A",{href:!0});var THr=s(fP);ato=r(THr,"Wav2Vec2CTCTokenizer"),THr.forEach(t),nto=r(x3e," (Hubert model)"),x3e.forEach(t),sto=i(S),ss=n(S,"LI",{});var F$=s(ss);dae=n(F$,"STRONG",{});var MHr=s(dae);lto=r(MHr,"ibert"),MHr.forEach(t),ito=r(F$," \u2014 "),mP=n(F$,"A",{href:!0});var EHr=s(mP);dto=r(EHr,"RobertaTokenizer"),EHr.forEach(t),cto=r(F$," or "),gP=n(F$,"A",{href:!0});var CHr=s(gP);fto=r(CHr,"RobertaTokenizerFast"),CHr.forEach(t),mto=r(F$," (I-BERT model)"),F$.forEach(t),gto=i(S),ls=n(S,"LI",{});var T$=s(ls);cae=n(T$,"STRONG",{});var wHr=s(cae);hto=r(wHr,"layoutlm"),wHr.forEach(t),pto=r(T$," \u2014 "),hP=n(T$,"A",{href:!0});var AHr=s(hP);uto=r(AHr,"LayoutLMTokenizer"),AHr.forEach(t),_to=r(T$," or "),pP=n(T$,"A",{href:!0});var yHr=s(pP);bto=r(yHr,"LayoutLMTokenizerFast"),yHr.forEach(t),vto=r(T$," (LayoutLM model)"),T$.forEach(t),Fto=i(S),is=n(S,"LI",{});var M$=s(is);fae=n(M$,"STRONG",{});var LHr=s(fae);Tto=r(LHr,"layoutlmv2"),LHr.forEach(t),Mto=r(M$," \u2014 "),uP=n(M$,"A",{href:!0});var xHr=s(uP);Eto=r(xHr,"LayoutLMv2Tokenizer"),xHr.forEach(t),Cto=r(M$," or "),_P=n(M$,"A",{href:!0});var $Hr=s(_P);wto=r($Hr,"LayoutLMv2TokenizerFast"),$Hr.forEach(t),Ato=r(M$," (LayoutLMv2 model)"),M$.forEach(t),yto=i(S),ds=n(S,"LI",{});var E$=s(ds);mae=n(E$,"STRONG",{});var kHr=s(mae);Lto=r(kHr,"layoutxlm"),kHr.forEach(t),xto=r(E$," \u2014 "),bP=n(E$,"A",{href:!0});var SHr=s(bP);$to=r(SHr,"LayoutXLMTokenizer"),SHr.forEach(t),kto=r(E$," or "),vP=n(E$,"A",{href:!0});var RHr=s(vP);Sto=r(RHr,"LayoutXLMTokenizerFast"),RHr.forEach(t),Rto=r(E$," (LayoutXLM model)"),E$.forEach(t),Pto=i(S),cs=n(S,"LI",{});var C$=s(cs);gae=n(C$,"STRONG",{});var PHr=s(gae);Bto=r(PHr,"led"),PHr.forEach(t),Ito=r(C$," \u2014 "),FP=n(C$,"A",{href:!0});var BHr=s(FP);qto=r(BHr,"LEDTokenizer"),BHr.forEach(t),Nto=r(C$," or "),TP=n(C$,"A",{href:!0});var IHr=s(TP);jto=r(IHr,"LEDTokenizerFast"),IHr.forEach(t),Dto=r(C$," (LED model)"),C$.forEach(t),Gto=i(S),fs=n(S,"LI",{});var w$=s(fs);hae=n(w$,"STRONG",{});var qHr=s(hae);Oto=r(qHr,"longformer"),qHr.forEach(t),Vto=r(w$," \u2014 "),MP=n(w$,"A",{href:!0});var NHr=s(MP);Xto=r(NHr,"LongformerTokenizer"),NHr.forEach(t),zto=r(w$," or "),EP=n(w$,"A",{href:!0});var jHr=s(EP);Wto=r(jHr,"LongformerTokenizerFast"),jHr.forEach(t),Qto=r(w$," (Longformer model)"),w$.forEach(t),Hto=i(S),Xg=n(S,"LI",{});var $3e=s(Xg);pae=n($3e,"STRONG",{});var DHr=s(pae);Uto=r(DHr,"luke"),DHr.forEach(t),Jto=r($3e," \u2014 "),CP=n($3e,"A",{href:!0});var GHr=s(CP);Yto=r(GHr,"LukeTokenizer"),GHr.forEach(t),Kto=r($3e," (LUKE model)"),$3e.forEach(t),Zto=i(S),ms=n(S,"LI",{});var A$=s(ms);uae=n(A$,"STRONG",{});var OHr=s(uae);eao=r(OHr,"lxmert"),OHr.forEach(t),oao=r(A$," \u2014 "),wP=n(A$,"A",{href:!0});var VHr=s(wP);rao=r(VHr,"LxmertTokenizer"),VHr.forEach(t),tao=r(A$," or "),AP=n(A$,"A",{href:!0});var XHr=s(AP);aao=r(XHr,"LxmertTokenizerFast"),XHr.forEach(t),nao=r(A$," (LXMERT model)"),A$.forEach(t),sao=i(S),zg=n(S,"LI",{});var k3e=s(zg);_ae=n(k3e,"STRONG",{});var zHr=s(_ae);lao=r(zHr,"m2m_100"),zHr.forEach(t),iao=r(k3e," \u2014 "),yP=n(k3e,"A",{href:!0});var WHr=s(yP);dao=r(WHr,"M2M100Tokenizer"),WHr.forEach(t),cao=r(k3e," (M2M100 model)"),k3e.forEach(t),fao=i(S),Wg=n(S,"LI",{});var S3e=s(Wg);bae=n(S3e,"STRONG",{});var QHr=s(bae);mao=r(QHr,"marian"),QHr.forEach(t),gao=r(S3e," \u2014 "),LP=n(S3e,"A",{href:!0});var HHr=s(LP);hao=r(HHr,"MarianTokenizer"),HHr.forEach(t),pao=r(S3e," (Marian model)"),S3e.forEach(t),uao=i(S),gs=n(S,"LI",{});var y$=s(gs);vae=n(y$,"STRONG",{});var UHr=s(vae);_ao=r(UHr,"mbart"),UHr.forEach(t),bao=r(y$," \u2014 "),xP=n(y$,"A",{href:!0});var JHr=s(xP);vao=r(JHr,"MBartTokenizer"),JHr.forEach(t),Fao=r(y$," or "),$P=n(y$,"A",{href:!0});var YHr=s($P);Tao=r(YHr,"MBartTokenizerFast"),YHr.forEach(t),Mao=r(y$," (mBART model)"),y$.forEach(t),Eao=i(S),hs=n(S,"LI",{});var L$=s(hs);Fae=n(L$,"STRONG",{});var KHr=s(Fae);Cao=r(KHr,"mbart50"),KHr.forEach(t),wao=r(L$," \u2014 "),kP=n(L$,"A",{href:!0});var ZHr=s(kP);Aao=r(ZHr,"MBart50Tokenizer"),ZHr.forEach(t),yao=r(L$," or "),SP=n(L$,"A",{href:!0});var eUr=s(SP);Lao=r(eUr,"MBart50TokenizerFast"),eUr.forEach(t),xao=r(L$," (mBART-50 model)"),L$.forEach(t),$ao=i(S),ps=n(S,"LI",{});var x$=s(ps);Tae=n(x$,"STRONG",{});var oUr=s(Tae);kao=r(oUr,"megatron-bert"),oUr.forEach(t),Sao=r(x$," \u2014 "),RP=n(x$,"A",{href:!0});var rUr=s(RP);Rao=r(rUr,"BertTokenizer"),rUr.forEach(t),Pao=r(x$," or "),PP=n(x$,"A",{href:!0});var tUr=s(PP);Bao=r(tUr,"BertTokenizerFast"),tUr.forEach(t),Iao=r(x$," (MegatronBert model)"),x$.forEach(t),qao=i(S),Qg=n(S,"LI",{});var R3e=s(Qg);Mae=n(R3e,"STRONG",{});var aUr=s(Mae);Nao=r(aUr,"mluke"),aUr.forEach(t),jao=r(R3e," \u2014 "),BP=n(R3e,"A",{href:!0});var nUr=s(BP);Dao=r(nUr,"MLukeTokenizer"),nUr.forEach(t),Gao=r(R3e," (mLUKE model)"),R3e.forEach(t),Oao=i(S),us=n(S,"LI",{});var $$=s(us);Eae=n($$,"STRONG",{});var sUr=s(Eae);Vao=r(sUr,"mobilebert"),sUr.forEach(t),Xao=r($$," \u2014 "),IP=n($$,"A",{href:!0});var lUr=s(IP);zao=r(lUr,"MobileBertTokenizer"),lUr.forEach(t),Wao=r($$," or "),qP=n($$,"A",{href:!0});var iUr=s(qP);Qao=r(iUr,"MobileBertTokenizerFast"),iUr.forEach(t),Hao=r($$," (MobileBERT model)"),$$.forEach(t),Uao=i(S),_s=n(S,"LI",{});var k$=s(_s);Cae=n(k$,"STRONG",{});var dUr=s(Cae);Jao=r(dUr,"mpnet"),dUr.forEach(t),Yao=r(k$," \u2014 "),NP=n(k$,"A",{href:!0});var cUr=s(NP);Kao=r(cUr,"MPNetTokenizer"),cUr.forEach(t),Zao=r(k$," or "),jP=n(k$,"A",{href:!0});var fUr=s(jP);eno=r(fUr,"MPNetTokenizerFast"),fUr.forEach(t),ono=r(k$," (MPNet model)"),k$.forEach(t),rno=i(S),bs=n(S,"LI",{});var S$=s(bs);wae=n(S$,"STRONG",{});var mUr=s(wae);tno=r(mUr,"mt5"),mUr.forEach(t),ano=r(S$," \u2014 "),DP=n(S$,"A",{href:!0});var gUr=s(DP);nno=r(gUr,"MT5Tokenizer"),gUr.forEach(t),sno=r(S$," or "),GP=n(S$,"A",{href:!0});var hUr=s(GP);lno=r(hUr,"MT5TokenizerFast"),hUr.forEach(t),ino=r(S$," (mT5 model)"),S$.forEach(t),dno=i(S),vs=n(S,"LI",{});var R$=s(vs);Aae=n(R$,"STRONG",{});var pUr=s(Aae);cno=r(pUr,"nystromformer"),pUr.forEach(t),fno=r(R$," \u2014 "),OP=n(R$,"A",{href:!0});var uUr=s(OP);mno=r(uUr,"AlbertTokenizer"),uUr.forEach(t),gno=r(R$," or "),VP=n(R$,"A",{href:!0});var _Ur=s(VP);hno=r(_Ur,"AlbertTokenizerFast"),_Ur.forEach(t),pno=r(R$," (Nystromformer model)"),R$.forEach(t),uno=i(S),Fs=n(S,"LI",{});var P$=s(Fs);yae=n(P$,"STRONG",{});var bUr=s(yae);_no=r(bUr,"openai-gpt"),bUr.forEach(t),bno=r(P$," \u2014 "),XP=n(P$,"A",{href:!0});var vUr=s(XP);vno=r(vUr,"OpenAIGPTTokenizer"),vUr.forEach(t),Fno=r(P$," or "),zP=n(P$,"A",{href:!0});var FUr=s(zP);Tno=r(FUr,"OpenAIGPTTokenizerFast"),FUr.forEach(t),Mno=r(P$," (OpenAI GPT model)"),P$.forEach(t),Eno=i(S),Hg=n(S,"LI",{});var P3e=s(Hg);Lae=n(P3e,"STRONG",{});var TUr=s(Lae);Cno=r(TUr,"opt"),TUr.forEach(t),wno=r(P3e," \u2014 "),WP=n(P3e,"A",{href:!0});var MUr=s(WP);Ano=r(MUr,"GPT2Tokenizer"),MUr.forEach(t),yno=r(P3e," (OPT model)"),P3e.forEach(t),Lno=i(S),Ts=n(S,"LI",{});var B$=s(Ts);xae=n(B$,"STRONG",{});var EUr=s(xae);xno=r(EUr,"pegasus"),EUr.forEach(t),$no=r(B$," \u2014 "),QP=n(B$,"A",{href:!0});var CUr=s(QP);kno=r(CUr,"PegasusTokenizer"),CUr.forEach(t),Sno=r(B$," or "),HP=n(B$,"A",{href:!0});var wUr=s(HP);Rno=r(wUr,"PegasusTokenizerFast"),wUr.forEach(t),Pno=r(B$," (Pegasus model)"),B$.forEach(t),Bno=i(S),Ug=n(S,"LI",{});var B3e=s(Ug);$ae=n(B3e,"STRONG",{});var AUr=s($ae);Ino=r(AUr,"perceiver"),AUr.forEach(t),qno=r(B3e," \u2014 "),UP=n(B3e,"A",{href:!0});var yUr=s(UP);Nno=r(yUr,"PerceiverTokenizer"),yUr.forEach(t),jno=r(B3e," (Perceiver model)"),B3e.forEach(t),Dno=i(S),Jg=n(S,"LI",{});var I3e=s(Jg);kae=n(I3e,"STRONG",{});var LUr=s(kae);Gno=r(LUr,"phobert"),LUr.forEach(t),Ono=r(I3e," \u2014 "),JP=n(I3e,"A",{href:!0});var xUr=s(JP);Vno=r(xUr,"PhobertTokenizer"),xUr.forEach(t),Xno=r(I3e," (PhoBERT model)"),I3e.forEach(t),zno=i(S),Yg=n(S,"LI",{});var q3e=s(Yg);Sae=n(q3e,"STRONG",{});var $Ur=s(Sae);Wno=r($Ur,"plbart"),$Ur.forEach(t),Qno=r(q3e," \u2014 "),YP=n(q3e,"A",{href:!0});var kUr=s(YP);Hno=r(kUr,"PLBartTokenizer"),kUr.forEach(t),Uno=r(q3e," (PLBart model)"),q3e.forEach(t),Jno=i(S),Kg=n(S,"LI",{});var N3e=s(Kg);Rae=n(N3e,"STRONG",{});var SUr=s(Rae);Yno=r(SUr,"prophetnet"),SUr.forEach(t),Kno=r(N3e," \u2014 "),KP=n(N3e,"A",{href:!0});var RUr=s(KP);Zno=r(RUr,"ProphetNetTokenizer"),RUr.forEach(t),eso=r(N3e," (ProphetNet model)"),N3e.forEach(t),oso=i(S),Ms=n(S,"LI",{});var I$=s(Ms);Pae=n(I$,"STRONG",{});var PUr=s(Pae);rso=r(PUr,"qdqbert"),PUr.forEach(t),tso=r(I$," \u2014 "),ZP=n(I$,"A",{href:!0});var BUr=s(ZP);aso=r(BUr,"BertTokenizer"),BUr.forEach(t),nso=r(I$," or "),eB=n(I$,"A",{href:!0});var IUr=s(eB);sso=r(IUr,"BertTokenizerFast"),IUr.forEach(t),lso=r(I$," (QDQBert model)"),I$.forEach(t),iso=i(S),Zg=n(S,"LI",{});var j3e=s(Zg);Bae=n(j3e,"STRONG",{});var qUr=s(Bae);dso=r(qUr,"rag"),qUr.forEach(t),cso=r(j3e," \u2014 "),oB=n(j3e,"A",{href:!0});var NUr=s(oB);fso=r(NUr,"RagTokenizer"),NUr.forEach(t),mso=r(j3e," (RAG model)"),j3e.forEach(t),gso=i(S),Es=n(S,"LI",{});var q$=s(Es);Iae=n(q$,"STRONG",{});var jUr=s(Iae);hso=r(jUr,"realm"),jUr.forEach(t),pso=r(q$," \u2014 "),rB=n(q$,"A",{href:!0});var DUr=s(rB);uso=r(DUr,"RealmTokenizer"),DUr.forEach(t),_so=r(q$," or "),tB=n(q$,"A",{href:!0});var GUr=s(tB);bso=r(GUr,"RealmTokenizerFast"),GUr.forEach(t),vso=r(q$," (Realm model)"),q$.forEach(t),Fso=i(S),Cs=n(S,"LI",{});var N$=s(Cs);qae=n(N$,"STRONG",{});var OUr=s(qae);Tso=r(OUr,"reformer"),OUr.forEach(t),Mso=r(N$," \u2014 "),aB=n(N$,"A",{href:!0});var VUr=s(aB);Eso=r(VUr,"ReformerTokenizer"),VUr.forEach(t),Cso=r(N$," or "),nB=n(N$,"A",{href:!0});var XUr=s(nB);wso=r(XUr,"ReformerTokenizerFast"),XUr.forEach(t),Aso=r(N$," (Reformer model)"),N$.forEach(t),yso=i(S),ws=n(S,"LI",{});var j$=s(ws);Nae=n(j$,"STRONG",{});var zUr=s(Nae);Lso=r(zUr,"rembert"),zUr.forEach(t),xso=r(j$," \u2014 "),sB=n(j$,"A",{href:!0});var WUr=s(sB);$so=r(WUr,"RemBertTokenizer"),WUr.forEach(t),kso=r(j$," or "),lB=n(j$,"A",{href:!0});var QUr=s(lB);Sso=r(QUr,"RemBertTokenizerFast"),QUr.forEach(t),Rso=r(j$," (RemBERT model)"),j$.forEach(t),Pso=i(S),As=n(S,"LI",{});var D$=s(As);jae=n(D$,"STRONG",{});var HUr=s(jae);Bso=r(HUr,"retribert"),HUr.forEach(t),Iso=r(D$," \u2014 "),iB=n(D$,"A",{href:!0});var UUr=s(iB);qso=r(UUr,"RetriBertTokenizer"),UUr.forEach(t),Nso=r(D$," or "),dB=n(D$,"A",{href:!0});var JUr=s(dB);jso=r(JUr,"RetriBertTokenizerFast"),JUr.forEach(t),Dso=r(D$," (RetriBERT model)"),D$.forEach(t),Gso=i(S),ys=n(S,"LI",{});var G$=s(ys);Dae=n(G$,"STRONG",{});var YUr=s(Dae);Oso=r(YUr,"roberta"),YUr.forEach(t),Vso=r(G$," \u2014 "),cB=n(G$,"A",{href:!0});var KUr=s(cB);Xso=r(KUr,"RobertaTokenizer"),KUr.forEach(t),zso=r(G$," or "),fB=n(G$,"A",{href:!0});var ZUr=s(fB);Wso=r(ZUr,"RobertaTokenizerFast"),ZUr.forEach(t),Qso=r(G$," (RoBERTa model)"),G$.forEach(t),Hso=i(S),Ls=n(S,"LI",{});var O$=s(Ls);Gae=n(O$,"STRONG",{});var eJr=s(Gae);Uso=r(eJr,"roformer"),eJr.forEach(t),Jso=r(O$," \u2014 "),mB=n(O$,"A",{href:!0});var oJr=s(mB);Yso=r(oJr,"RoFormerTokenizer"),oJr.forEach(t),Kso=r(O$," or "),gB=n(O$,"A",{href:!0});var rJr=s(gB);Zso=r(rJr,"RoFormerTokenizerFast"),rJr.forEach(t),elo=r(O$," (RoFormer model)"),O$.forEach(t),olo=i(S),eh=n(S,"LI",{});var D3e=s(eh);Oae=n(D3e,"STRONG",{});var tJr=s(Oae);rlo=r(tJr,"speech_to_text"),tJr.forEach(t),tlo=r(D3e," \u2014 "),hB=n(D3e,"A",{href:!0});var aJr=s(hB);alo=r(aJr,"Speech2TextTokenizer"),aJr.forEach(t),nlo=r(D3e," (Speech2Text model)"),D3e.forEach(t),slo=i(S),oh=n(S,"LI",{});var G3e=s(oh);Vae=n(G3e,"STRONG",{});var nJr=s(Vae);llo=r(nJr,"speech_to_text_2"),nJr.forEach(t),ilo=r(G3e," \u2014 "),pB=n(G3e,"A",{href:!0});var sJr=s(pB);dlo=r(sJr,"Speech2Text2Tokenizer"),sJr.forEach(t),clo=r(G3e," (Speech2Text2 model)"),G3e.forEach(t),flo=i(S),xs=n(S,"LI",{});var V$=s(xs);Xae=n(V$,"STRONG",{});var lJr=s(Xae);mlo=r(lJr,"splinter"),lJr.forEach(t),glo=r(V$," \u2014 "),uB=n(V$,"A",{href:!0});var iJr=s(uB);hlo=r(iJr,"SplinterTokenizer"),iJr.forEach(t),plo=r(V$," or "),_B=n(V$,"A",{href:!0});var dJr=s(_B);ulo=r(dJr,"SplinterTokenizerFast"),dJr.forEach(t),_lo=r(V$," (Splinter model)"),V$.forEach(t),blo=i(S),$s=n(S,"LI",{});var X$=s($s);zae=n(X$,"STRONG",{});var cJr=s(zae);vlo=r(cJr,"squeezebert"),cJr.forEach(t),Flo=r(X$," \u2014 "),bB=n(X$,"A",{href:!0});var fJr=s(bB);Tlo=r(fJr,"SqueezeBertTokenizer"),fJr.forEach(t),Mlo=r(X$," or "),vB=n(X$,"A",{href:!0});var mJr=s(vB);Elo=r(mJr,"SqueezeBertTokenizerFast"),mJr.forEach(t),Clo=r(X$," (SqueezeBERT model)"),X$.forEach(t),wlo=i(S),ks=n(S,"LI",{});var z$=s(ks);Wae=n(z$,"STRONG",{});var gJr=s(Wae);Alo=r(gJr,"t5"),gJr.forEach(t),ylo=r(z$," \u2014 "),FB=n(z$,"A",{href:!0});var hJr=s(FB);Llo=r(hJr,"T5Tokenizer"),hJr.forEach(t),xlo=r(z$," or "),TB=n(z$,"A",{href:!0});var pJr=s(TB);$lo=r(pJr,"T5TokenizerFast"),pJr.forEach(t),klo=r(z$," (T5 model)"),z$.forEach(t),Slo=i(S),rh=n(S,"LI",{});var O3e=s(rh);Qae=n(O3e,"STRONG",{});var uJr=s(Qae);Rlo=r(uJr,"tapas"),uJr.forEach(t),Plo=r(O3e," \u2014 "),MB=n(O3e,"A",{href:!0});var _Jr=s(MB);Blo=r(_Jr,"TapasTokenizer"),_Jr.forEach(t),Ilo=r(O3e," (TAPAS model)"),O3e.forEach(t),qlo=i(S),th=n(S,"LI",{});var V3e=s(th);Hae=n(V3e,"STRONG",{});var bJr=s(Hae);Nlo=r(bJr,"tapex"),bJr.forEach(t),jlo=r(V3e," \u2014 "),EB=n(V3e,"A",{href:!0});var vJr=s(EB);Dlo=r(vJr,"TapexTokenizer"),vJr.forEach(t),Glo=r(V3e," (TAPEX model)"),V3e.forEach(t),Olo=i(S),ah=n(S,"LI",{});var X3e=s(ah);Uae=n(X3e,"STRONG",{});var FJr=s(Uae);Vlo=r(FJr,"transfo-xl"),FJr.forEach(t),Xlo=r(X3e," \u2014 "),CB=n(X3e,"A",{href:!0});var TJr=s(CB);zlo=r(TJr,"TransfoXLTokenizer"),TJr.forEach(t),Wlo=r(X3e," (Transformer-XL model)"),X3e.forEach(t),Qlo=i(S),Ss=n(S,"LI",{});var W$=s(Ss);Jae=n(W$,"STRONG",{});var MJr=s(Jae);Hlo=r(MJr,"vilt"),MJr.forEach(t),Ulo=r(W$," \u2014 "),wB=n(W$,"A",{href:!0});var EJr=s(wB);Jlo=r(EJr,"BertTokenizer"),EJr.forEach(t),Ylo=r(W$," or "),AB=n(W$,"A",{href:!0});var CJr=s(AB);Klo=r(CJr,"BertTokenizerFast"),CJr.forEach(t),Zlo=r(W$," (ViLT model)"),W$.forEach(t),eio=i(S),Rs=n(S,"LI",{});var Q$=s(Rs);Yae=n(Q$,"STRONG",{});var wJr=s(Yae);oio=r(wJr,"visual_bert"),wJr.forEach(t),rio=r(Q$," \u2014 "),yB=n(Q$,"A",{href:!0});var AJr=s(yB);tio=r(AJr,"BertTokenizer"),AJr.forEach(t),aio=r(Q$," or "),LB=n(Q$,"A",{href:!0});var yJr=s(LB);nio=r(yJr,"BertTokenizerFast"),yJr.forEach(t),sio=r(Q$," (VisualBert model)"),Q$.forEach(t),lio=i(S),nh=n(S,"LI",{});var z3e=s(nh);Kae=n(z3e,"STRONG",{});var LJr=s(Kae);iio=r(LJr,"wav2vec2"),LJr.forEach(t),dio=r(z3e," \u2014 "),xB=n(z3e,"A",{href:!0});var xJr=s(xB);cio=r(xJr,"Wav2Vec2CTCTokenizer"),xJr.forEach(t),fio=r(z3e," (Wav2Vec2 model)"),z3e.forEach(t),mio=i(S),sh=n(S,"LI",{});var W3e=s(sh);Zae=n(W3e,"STRONG",{});var $Jr=s(Zae);gio=r($Jr,"wav2vec2-conformer"),$Jr.forEach(t),hio=r(W3e," \u2014 "),$B=n(W3e,"A",{href:!0});var kJr=s($B);pio=r(kJr,"Wav2Vec2CTCTokenizer"),kJr.forEach(t),uio=r(W3e," (Wav2Vec2-Conformer model)"),W3e.forEach(t),_io=i(S),lh=n(S,"LI",{});var Q3e=s(lh);ene=n(Q3e,"STRONG",{});var SJr=s(ene);bio=r(SJr,"wav2vec2_phoneme"),SJr.forEach(t),vio=r(Q3e," \u2014 "),kB=n(Q3e,"A",{href:!0});var RJr=s(kB);Fio=r(RJr,"Wav2Vec2PhonemeCTCTokenizer"),RJr.forEach(t),Tio=r(Q3e," (Wav2Vec2Phoneme model)"),Q3e.forEach(t),Mio=i(S),Ps=n(S,"LI",{});var H$=s(Ps);one=n(H$,"STRONG",{});var PJr=s(one);Eio=r(PJr,"xglm"),PJr.forEach(t),Cio=r(H$," \u2014 "),SB=n(H$,"A",{href:!0});var BJr=s(SB);wio=r(BJr,"XGLMTokenizer"),BJr.forEach(t),Aio=r(H$," or "),RB=n(H$,"A",{href:!0});var IJr=s(RB);yio=r(IJr,"XGLMTokenizerFast"),IJr.forEach(t),Lio=r(H$," (XGLM model)"),H$.forEach(t),xio=i(S),ih=n(S,"LI",{});var H3e=s(ih);rne=n(H3e,"STRONG",{});var qJr=s(rne);$io=r(qJr,"xlm"),qJr.forEach(t),kio=r(H3e," \u2014 "),PB=n(H3e,"A",{href:!0});var NJr=s(PB);Sio=r(NJr,"XLMTokenizer"),NJr.forEach(t),Rio=r(H3e," (XLM model)"),H3e.forEach(t),Pio=i(S),dh=n(S,"LI",{});var U3e=s(dh);tne=n(U3e,"STRONG",{});var jJr=s(tne);Bio=r(jJr,"xlm-prophetnet"),jJr.forEach(t),Iio=r(U3e," \u2014 "),BB=n(U3e,"A",{href:!0});var DJr=s(BB);qio=r(DJr,"XLMProphetNetTokenizer"),DJr.forEach(t),Nio=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),jio=i(S),Bs=n(S,"LI",{});var U$=s(Bs);ane=n(U$,"STRONG",{});var GJr=s(ane);Dio=r(GJr,"xlm-roberta"),GJr.forEach(t),Gio=r(U$," \u2014 "),IB=n(U$,"A",{href:!0});var OJr=s(IB);Oio=r(OJr,"XLMRobertaTokenizer"),OJr.forEach(t),Vio=r(U$," or "),qB=n(U$,"A",{href:!0});var VJr=s(qB);Xio=r(VJr,"XLMRobertaTokenizerFast"),VJr.forEach(t),zio=r(U$," (XLM-RoBERTa model)"),U$.forEach(t),Wio=i(S),Is=n(S,"LI",{});var J$=s(Is);nne=n(J$,"STRONG",{});var XJr=s(nne);Qio=r(XJr,"xlm-roberta-xl"),XJr.forEach(t),Hio=r(J$," \u2014 "),NB=n(J$,"A",{href:!0});var zJr=s(NB);Uio=r(zJr,"RobertaTokenizer"),zJr.forEach(t),Jio=r(J$," or "),jB=n(J$,"A",{href:!0});var WJr=s(jB);Yio=r(WJr,"RobertaTokenizerFast"),WJr.forEach(t),Kio=r(J$," (XLM-RoBERTa-XL model)"),J$.forEach(t),Zio=i(S),qs=n(S,"LI",{});var Y$=s(qs);sne=n(Y$,"STRONG",{});var QJr=s(sne);edo=r(QJr,"xlnet"),QJr.forEach(t),odo=r(Y$," \u2014 "),DB=n(Y$,"A",{href:!0});var HJr=s(DB);rdo=r(HJr,"XLNetTokenizer"),HJr.forEach(t),tdo=r(Y$," or "),GB=n(Y$,"A",{href:!0});var UJr=s(GB);ado=r(UJr,"XLNetTokenizerFast"),UJr.forEach(t),ndo=r(Y$," (XLNet model)"),Y$.forEach(t),sdo=i(S),Ns=n(S,"LI",{});var K$=s(Ns);lne=n(K$,"STRONG",{});var JJr=s(lne);ldo=r(JJr,"yoso"),JJr.forEach(t),ido=r(K$," \u2014 "),OB=n(K$,"A",{href:!0});var YJr=s(OB);ddo=r(YJr,"AlbertTokenizer"),YJr.forEach(t),cdo=r(K$," or "),VB=n(K$,"A",{href:!0});var KJr=s(VB);fdo=r(KJr,"AlbertTokenizerFast"),KJr.forEach(t),mdo=r(K$," (YOSO model)"),K$.forEach(t),S.forEach(t),gdo=i(Vs),T(ch.$$.fragment,Vs),Vs.forEach(t),hdo=i(Os),fh=n(Os,"DIV",{class:!0});var lDe=s(fh);T(W0.$$.fragment,lDe),pdo=i(lDe),ine=n(lDe,"P",{});var ZJr=s(ine);udo=r(ZJr,"Register a new tokenizer in this mapping."),ZJr.forEach(t),lDe.forEach(t),Os.forEach(t),sNe=i(f),Li=n(f,"H2",{class:!0});var iDe=s(Li);mh=n(iDe,"A",{id:!0,class:!0,href:!0});var eYr=s(mh);dne=n(eYr,"SPAN",{});var oYr=s(dne);T(Q0.$$.fragment,oYr),oYr.forEach(t),eYr.forEach(t),_do=i(iDe),cne=n(iDe,"SPAN",{});var rYr=s(cne);bdo=r(rYr,"AutoFeatureExtractor"),rYr.forEach(t),iDe.forEach(t),lNe=i(f),yo=n(f,"DIV",{class:!0});var Xs=s(yo);T(H0.$$.fragment,Xs),vdo=i(Xs),U0=n(Xs,"P",{});var dDe=s(U0);Fdo=r(dDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XB=n(dDe,"A",{href:!0});var tYr=s(XB);Tdo=r(tYr,"AutoFeatureExtractor.from_pretrained()"),tYr.forEach(t),Mdo=r(dDe," class method."),dDe.forEach(t),Edo=i(Xs),J0=n(Xs,"P",{});var cDe=s(J0);Cdo=r(cDe,"This class cannot be instantiated directly using "),fne=n(cDe,"CODE",{});var aYr=s(fne);wdo=r(aYr,"__init__()"),aYr.forEach(t),Ado=r(cDe," (throws an error)."),cDe.forEach(t),ydo=i(Xs),He=n(Xs,"DIV",{class:!0});var ra=s(He);T(Y0.$$.fragment,ra),Ldo=i(ra),mne=n(ra,"P",{});var nYr=s(mne);xdo=r(nYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nYr.forEach(t),$do=i(ra),ka=n(ra,"P",{});var P3=s(ka);kdo=r(P3,"The feature extractor class to instantiate is selected based on the "),gne=n(P3,"CODE",{});var sYr=s(gne);Sdo=r(sYr,"model_type"),sYr.forEach(t),Rdo=r(P3,` property of the config object
(either passed as an argument or loaded from `),hne=n(P3,"CODE",{});var lYr=s(hne);Pdo=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),Bdo=r(P3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pne=n(P3,"CODE",{});var iYr=s(pne);Ido=r(iYr,"pretrained_model_name_or_path"),iYr.forEach(t),qdo=r(P3,":"),P3.forEach(t),Ndo=i(ra),K=n(ra,"UL",{});var ee=s(K);gh=n(ee,"LI",{});var J3e=s(gh);une=n(J3e,"STRONG",{});var dYr=s(une);jdo=r(dYr,"beit"),dYr.forEach(t),Ddo=r(J3e," \u2014 "),zB=n(J3e,"A",{href:!0});var cYr=s(zB);Gdo=r(cYr,"BeitFeatureExtractor"),cYr.forEach(t),Odo=r(J3e," (BEiT model)"),J3e.forEach(t),Vdo=i(ee),hh=n(ee,"LI",{});var Y3e=s(hh);_ne=n(Y3e,"STRONG",{});var fYr=s(_ne);Xdo=r(fYr,"clip"),fYr.forEach(t),zdo=r(Y3e," \u2014 "),WB=n(Y3e,"A",{href:!0});var mYr=s(WB);Wdo=r(mYr,"CLIPFeatureExtractor"),mYr.forEach(t),Qdo=r(Y3e," (CLIP model)"),Y3e.forEach(t),Hdo=i(ee),ph=n(ee,"LI",{});var K3e=s(ph);bne=n(K3e,"STRONG",{});var gYr=s(bne);Udo=r(gYr,"convnext"),gYr.forEach(t),Jdo=r(K3e," \u2014 "),QB=n(K3e,"A",{href:!0});var hYr=s(QB);Ydo=r(hYr,"ConvNextFeatureExtractor"),hYr.forEach(t),Kdo=r(K3e," (ConvNext model)"),K3e.forEach(t),Zdo=i(ee),uh=n(ee,"LI",{});var Z3e=s(uh);vne=n(Z3e,"STRONG",{});var pYr=s(vne);eco=r(pYr,"cvt"),pYr.forEach(t),oco=r(Z3e," \u2014 "),HB=n(Z3e,"A",{href:!0});var uYr=s(HB);rco=r(uYr,"ConvNextFeatureExtractor"),uYr.forEach(t),tco=r(Z3e," (CvT model)"),Z3e.forEach(t),aco=i(ee),_h=n(ee,"LI",{});var ewe=s(_h);Fne=n(ewe,"STRONG",{});var _Yr=s(Fne);nco=r(_Yr,"data2vec-audio"),_Yr.forEach(t),sco=r(ewe," \u2014 "),UB=n(ewe,"A",{href:!0});var bYr=s(UB);lco=r(bYr,"Wav2Vec2FeatureExtractor"),bYr.forEach(t),ico=r(ewe," (Data2VecAudio model)"),ewe.forEach(t),dco=i(ee),bh=n(ee,"LI",{});var owe=s(bh);Tne=n(owe,"STRONG",{});var vYr=s(Tne);cco=r(vYr,"data2vec-vision"),vYr.forEach(t),fco=r(owe," \u2014 "),JB=n(owe,"A",{href:!0});var FYr=s(JB);mco=r(FYr,"BeitFeatureExtractor"),FYr.forEach(t),gco=r(owe," (Data2VecVision model)"),owe.forEach(t),hco=i(ee),vh=n(ee,"LI",{});var rwe=s(vh);Mne=n(rwe,"STRONG",{});var TYr=s(Mne);pco=r(TYr,"deit"),TYr.forEach(t),uco=r(rwe," \u2014 "),YB=n(rwe,"A",{href:!0});var MYr=s(YB);_co=r(MYr,"DeiTFeatureExtractor"),MYr.forEach(t),bco=r(rwe," (DeiT model)"),rwe.forEach(t),vco=i(ee),Fh=n(ee,"LI",{});var twe=s(Fh);Ene=n(twe,"STRONG",{});var EYr=s(Ene);Fco=r(EYr,"detr"),EYr.forEach(t),Tco=r(twe," \u2014 "),KB=n(twe,"A",{href:!0});var CYr=s(KB);Mco=r(CYr,"DetrFeatureExtractor"),CYr.forEach(t),Eco=r(twe," (DETR model)"),twe.forEach(t),Cco=i(ee),Th=n(ee,"LI",{});var awe=s(Th);Cne=n(awe,"STRONG",{});var wYr=s(Cne);wco=r(wYr,"dpt"),wYr.forEach(t),Aco=r(awe," \u2014 "),ZB=n(awe,"A",{href:!0});var AYr=s(ZB);yco=r(AYr,"DPTFeatureExtractor"),AYr.forEach(t),Lco=r(awe," (DPT model)"),awe.forEach(t),xco=i(ee),Mh=n(ee,"LI",{});var nwe=s(Mh);wne=n(nwe,"STRONG",{});var yYr=s(wne);$co=r(yYr,"flava"),yYr.forEach(t),kco=r(nwe," \u2014 "),eI=n(nwe,"A",{href:!0});var LYr=s(eI);Sco=r(LYr,"FlavaFeatureExtractor"),LYr.forEach(t),Rco=r(nwe," (Flava model)"),nwe.forEach(t),Pco=i(ee),Eh=n(ee,"LI",{});var swe=s(Eh);Ane=n(swe,"STRONG",{});var xYr=s(Ane);Bco=r(xYr,"glpn"),xYr.forEach(t),Ico=r(swe," \u2014 "),oI=n(swe,"A",{href:!0});var $Yr=s(oI);qco=r($Yr,"GLPNFeatureExtractor"),$Yr.forEach(t),Nco=r(swe," (GLPN model)"),swe.forEach(t),jco=i(ee),Ch=n(ee,"LI",{});var lwe=s(Ch);yne=n(lwe,"STRONG",{});var kYr=s(yne);Dco=r(kYr,"hubert"),kYr.forEach(t),Gco=r(lwe," \u2014 "),rI=n(lwe,"A",{href:!0});var SYr=s(rI);Oco=r(SYr,"Wav2Vec2FeatureExtractor"),SYr.forEach(t),Vco=r(lwe," (Hubert model)"),lwe.forEach(t),Xco=i(ee),wh=n(ee,"LI",{});var iwe=s(wh);Lne=n(iwe,"STRONG",{});var RYr=s(Lne);zco=r(RYr,"layoutlmv2"),RYr.forEach(t),Wco=r(iwe," \u2014 "),tI=n(iwe,"A",{href:!0});var PYr=s(tI);Qco=r(PYr,"LayoutLMv2FeatureExtractor"),PYr.forEach(t),Hco=r(iwe," (LayoutLMv2 model)"),iwe.forEach(t),Uco=i(ee),Ah=n(ee,"LI",{});var dwe=s(Ah);xne=n(dwe,"STRONG",{});var BYr=s(xne);Jco=r(BYr,"maskformer"),BYr.forEach(t),Yco=r(dwe," \u2014 "),aI=n(dwe,"A",{href:!0});var IYr=s(aI);Kco=r(IYr,"MaskFormerFeatureExtractor"),IYr.forEach(t),Zco=r(dwe," (MaskFormer model)"),dwe.forEach(t),efo=i(ee),yh=n(ee,"LI",{});var cwe=s(yh);$ne=n(cwe,"STRONG",{});var qYr=s($ne);ofo=r(qYr,"perceiver"),qYr.forEach(t),rfo=r(cwe," \u2014 "),nI=n(cwe,"A",{href:!0});var NYr=s(nI);tfo=r(NYr,"PerceiverFeatureExtractor"),NYr.forEach(t),afo=r(cwe," (Perceiver model)"),cwe.forEach(t),nfo=i(ee),Lh=n(ee,"LI",{});var fwe=s(Lh);kne=n(fwe,"STRONG",{});var jYr=s(kne);sfo=r(jYr,"poolformer"),jYr.forEach(t),lfo=r(fwe," \u2014 "),sI=n(fwe,"A",{href:!0});var DYr=s(sI);ifo=r(DYr,"PoolFormerFeatureExtractor"),DYr.forEach(t),dfo=r(fwe," (PoolFormer model)"),fwe.forEach(t),cfo=i(ee),xh=n(ee,"LI",{});var mwe=s(xh);Sne=n(mwe,"STRONG",{});var GYr=s(Sne);ffo=r(GYr,"regnet"),GYr.forEach(t),mfo=r(mwe," \u2014 "),lI=n(mwe,"A",{href:!0});var OYr=s(lI);gfo=r(OYr,"ConvNextFeatureExtractor"),OYr.forEach(t),hfo=r(mwe," (RegNet model)"),mwe.forEach(t),pfo=i(ee),$h=n(ee,"LI",{});var gwe=s($h);Rne=n(gwe,"STRONG",{});var VYr=s(Rne);ufo=r(VYr,"resnet"),VYr.forEach(t),_fo=r(gwe," \u2014 "),iI=n(gwe,"A",{href:!0});var XYr=s(iI);bfo=r(XYr,"ConvNextFeatureExtractor"),XYr.forEach(t),vfo=r(gwe," (ResNet model)"),gwe.forEach(t),Ffo=i(ee),kh=n(ee,"LI",{});var hwe=s(kh);Pne=n(hwe,"STRONG",{});var zYr=s(Pne);Tfo=r(zYr,"segformer"),zYr.forEach(t),Mfo=r(hwe," \u2014 "),dI=n(hwe,"A",{href:!0});var WYr=s(dI);Efo=r(WYr,"SegformerFeatureExtractor"),WYr.forEach(t),Cfo=r(hwe," (SegFormer model)"),hwe.forEach(t),wfo=i(ee),Sh=n(ee,"LI",{});var pwe=s(Sh);Bne=n(pwe,"STRONG",{});var QYr=s(Bne);Afo=r(QYr,"speech_to_text"),QYr.forEach(t),yfo=r(pwe," \u2014 "),cI=n(pwe,"A",{href:!0});var HYr=s(cI);Lfo=r(HYr,"Speech2TextFeatureExtractor"),HYr.forEach(t),xfo=r(pwe," (Speech2Text model)"),pwe.forEach(t),$fo=i(ee),Rh=n(ee,"LI",{});var uwe=s(Rh);Ine=n(uwe,"STRONG",{});var UYr=s(Ine);kfo=r(UYr,"swin"),UYr.forEach(t),Sfo=r(uwe," \u2014 "),fI=n(uwe,"A",{href:!0});var JYr=s(fI);Rfo=r(JYr,"ViTFeatureExtractor"),JYr.forEach(t),Pfo=r(uwe," (Swin model)"),uwe.forEach(t),Bfo=i(ee),Ph=n(ee,"LI",{});var _we=s(Ph);qne=n(_we,"STRONG",{});var YYr=s(qne);Ifo=r(YYr,"van"),YYr.forEach(t),qfo=r(_we," \u2014 "),mI=n(_we,"A",{href:!0});var KYr=s(mI);Nfo=r(KYr,"ConvNextFeatureExtractor"),KYr.forEach(t),jfo=r(_we," (VAN model)"),_we.forEach(t),Dfo=i(ee),Bh=n(ee,"LI",{});var bwe=s(Bh);Nne=n(bwe,"STRONG",{});var ZYr=s(Nne);Gfo=r(ZYr,"vilt"),ZYr.forEach(t),Ofo=r(bwe," \u2014 "),gI=n(bwe,"A",{href:!0});var eKr=s(gI);Vfo=r(eKr,"ViltFeatureExtractor"),eKr.forEach(t),Xfo=r(bwe," (ViLT model)"),bwe.forEach(t),zfo=i(ee),Ih=n(ee,"LI",{});var vwe=s(Ih);jne=n(vwe,"STRONG",{});var oKr=s(jne);Wfo=r(oKr,"vit"),oKr.forEach(t),Qfo=r(vwe," \u2014 "),hI=n(vwe,"A",{href:!0});var rKr=s(hI);Hfo=r(rKr,"ViTFeatureExtractor"),rKr.forEach(t),Ufo=r(vwe," (ViT model)"),vwe.forEach(t),Jfo=i(ee),qh=n(ee,"LI",{});var Fwe=s(qh);Dne=n(Fwe,"STRONG",{});var tKr=s(Dne);Yfo=r(tKr,"vit_mae"),tKr.forEach(t),Kfo=r(Fwe," \u2014 "),pI=n(Fwe,"A",{href:!0});var aKr=s(pI);Zfo=r(aKr,"ViTFeatureExtractor"),aKr.forEach(t),emo=r(Fwe," (ViTMAE model)"),Fwe.forEach(t),omo=i(ee),Nh=n(ee,"LI",{});var Twe=s(Nh);Gne=n(Twe,"STRONG",{});var nKr=s(Gne);rmo=r(nKr,"wav2vec2"),nKr.forEach(t),tmo=r(Twe," \u2014 "),uI=n(Twe,"A",{href:!0});var sKr=s(uI);amo=r(sKr,"Wav2Vec2FeatureExtractor"),sKr.forEach(t),nmo=r(Twe," (Wav2Vec2 model)"),Twe.forEach(t),smo=i(ee),jh=n(ee,"LI",{});var Mwe=s(jh);One=n(Mwe,"STRONG",{});var lKr=s(One);lmo=r(lKr,"wav2vec2-conformer"),lKr.forEach(t),imo=r(Mwe," \u2014 "),_I=n(Mwe,"A",{href:!0});var iKr=s(_I);dmo=r(iKr,"Wav2Vec2FeatureExtractor"),iKr.forEach(t),cmo=r(Mwe," (Wav2Vec2-Conformer model)"),Mwe.forEach(t),fmo=i(ee),Dh=n(ee,"LI",{});var Ewe=s(Dh);Vne=n(Ewe,"STRONG",{});var dKr=s(Vne);mmo=r(dKr,"yolos"),dKr.forEach(t),gmo=r(Ewe," \u2014 "),bI=n(Ewe,"A",{href:!0});var cKr=s(bI);hmo=r(cKr,"YolosFeatureExtractor"),cKr.forEach(t),pmo=r(Ewe," (YOLOS model)"),Ewe.forEach(t),ee.forEach(t),umo=i(ra),T(Gh.$$.fragment,ra),_mo=i(ra),T(Oh.$$.fragment,ra),ra.forEach(t),bmo=i(Xs),Vh=n(Xs,"DIV",{class:!0});var fDe=s(Vh);T(K0.$$.fragment,fDe),vmo=i(fDe),Xne=n(fDe,"P",{});var fKr=s(Xne);Fmo=r(fKr,"Register a new feature extractor for this class."),fKr.forEach(t),fDe.forEach(t),Xs.forEach(t),iNe=i(f),xi=n(f,"H2",{class:!0});var mDe=s(xi);Xh=n(mDe,"A",{id:!0,class:!0,href:!0});var mKr=s(Xh);zne=n(mKr,"SPAN",{});var gKr=s(zne);T(Z0.$$.fragment,gKr),gKr.forEach(t),mKr.forEach(t),Tmo=i(mDe),Wne=n(mDe,"SPAN",{});var hKr=s(Wne);Mmo=r(hKr,"AutoProcessor"),hKr.forEach(t),mDe.forEach(t),dNe=i(f),Lo=n(f,"DIV",{class:!0});var zs=s(Lo);T(eA.$$.fragment,zs),Emo=i(zs),oA=n(zs,"P",{});var gDe=s(oA);Cmo=r(gDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=n(gDe,"A",{href:!0});var pKr=s(vI);wmo=r(pKr,"AutoProcessor.from_pretrained()"),pKr.forEach(t),Amo=r(gDe," class method."),gDe.forEach(t),ymo=i(zs),rA=n(zs,"P",{});var hDe=s(rA);Lmo=r(hDe,"This class cannot be instantiated directly using "),Qne=n(hDe,"CODE",{});var uKr=s(Qne);xmo=r(uKr,"__init__()"),uKr.forEach(t),$mo=r(hDe," (throws an error)."),hDe.forEach(t),kmo=i(zs),Ue=n(zs,"DIV",{class:!0});var ta=s(Ue);T(tA.$$.fragment,ta),Smo=i(ta),Hne=n(ta,"P",{});var _Kr=s(Hne);Rmo=r(_Kr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_Kr.forEach(t),Pmo=i(ta),$i=n(ta,"P",{});var bZ=s($i);Bmo=r(bZ,"The processor class to instantiate is selected based on the "),Une=n(bZ,"CODE",{});var bKr=s(Une);Imo=r(bKr,"model_type"),bKr.forEach(t),qmo=r(bZ,` property of the config object (either
passed as an argument or loaded from `),Jne=n(bZ,"CODE",{});var vKr=s(Jne);Nmo=r(vKr,"pretrained_model_name_or_path"),vKr.forEach(t),jmo=r(bZ," if possible):"),bZ.forEach(t),Dmo=i(ta),pe=n(ta,"UL",{});var be=s(pe);zh=n(be,"LI",{});var Cwe=s(zh);Yne=n(Cwe,"STRONG",{});var FKr=s(Yne);Gmo=r(FKr,"clip"),FKr.forEach(t),Omo=r(Cwe," \u2014 "),FI=n(Cwe,"A",{href:!0});var TKr=s(FI);Vmo=r(TKr,"CLIPProcessor"),TKr.forEach(t),Xmo=r(Cwe," (CLIP model)"),Cwe.forEach(t),zmo=i(be),Wh=n(be,"LI",{});var wwe=s(Wh);Kne=n(wwe,"STRONG",{});var MKr=s(Kne);Wmo=r(MKr,"flava"),MKr.forEach(t),Qmo=r(wwe," \u2014 "),Zne=n(wwe,"CODE",{});var EKr=s(Zne);Hmo=r(EKr,"FLAVAProcessor"),EKr.forEach(t),Umo=r(wwe," (Flava model)"),wwe.forEach(t),Jmo=i(be),Qh=n(be,"LI",{});var Awe=s(Qh);ese=n(Awe,"STRONG",{});var CKr=s(ese);Ymo=r(CKr,"layoutlmv2"),CKr.forEach(t),Kmo=r(Awe," \u2014 "),TI=n(Awe,"A",{href:!0});var wKr=s(TI);Zmo=r(wKr,"LayoutLMv2Processor"),wKr.forEach(t),ego=r(Awe," (LayoutLMv2 model)"),Awe.forEach(t),ogo=i(be),Hh=n(be,"LI",{});var ywe=s(Hh);ose=n(ywe,"STRONG",{});var AKr=s(ose);rgo=r(AKr,"layoutxlm"),AKr.forEach(t),tgo=r(ywe," \u2014 "),MI=n(ywe,"A",{href:!0});var yKr=s(MI);ago=r(yKr,"LayoutXLMProcessor"),yKr.forEach(t),ngo=r(ywe," (LayoutXLM model)"),ywe.forEach(t),sgo=i(be),Uh=n(be,"LI",{});var Lwe=s(Uh);rse=n(Lwe,"STRONG",{});var LKr=s(rse);lgo=r(LKr,"sew"),LKr.forEach(t),igo=r(Lwe," \u2014 "),EI=n(Lwe,"A",{href:!0});var xKr=s(EI);dgo=r(xKr,"Wav2Vec2Processor"),xKr.forEach(t),cgo=r(Lwe," (SEW model)"),Lwe.forEach(t),fgo=i(be),Jh=n(be,"LI",{});var xwe=s(Jh);tse=n(xwe,"STRONG",{});var $Kr=s(tse);mgo=r($Kr,"sew-d"),$Kr.forEach(t),ggo=r(xwe," \u2014 "),CI=n(xwe,"A",{href:!0});var kKr=s(CI);hgo=r(kKr,"Wav2Vec2Processor"),kKr.forEach(t),pgo=r(xwe," (SEW-D model)"),xwe.forEach(t),ugo=i(be),Yh=n(be,"LI",{});var $we=s(Yh);ase=n($we,"STRONG",{});var SKr=s(ase);_go=r(SKr,"speech_to_text"),SKr.forEach(t),bgo=r($we," \u2014 "),wI=n($we,"A",{href:!0});var RKr=s(wI);vgo=r(RKr,"Speech2TextProcessor"),RKr.forEach(t),Fgo=r($we," (Speech2Text model)"),$we.forEach(t),Tgo=i(be),Kh=n(be,"LI",{});var kwe=s(Kh);nse=n(kwe,"STRONG",{});var PKr=s(nse);Mgo=r(PKr,"speech_to_text_2"),PKr.forEach(t),Ego=r(kwe," \u2014 "),AI=n(kwe,"A",{href:!0});var BKr=s(AI);Cgo=r(BKr,"Speech2Text2Processor"),BKr.forEach(t),wgo=r(kwe," (Speech2Text2 model)"),kwe.forEach(t),Ago=i(be),Zh=n(be,"LI",{});var Swe=s(Zh);sse=n(Swe,"STRONG",{});var IKr=s(sse);ygo=r(IKr,"trocr"),IKr.forEach(t),Lgo=r(Swe," \u2014 "),yI=n(Swe,"A",{href:!0});var qKr=s(yI);xgo=r(qKr,"TrOCRProcessor"),qKr.forEach(t),$go=r(Swe," (TrOCR model)"),Swe.forEach(t),kgo=i(be),ep=n(be,"LI",{});var Rwe=s(ep);lse=n(Rwe,"STRONG",{});var NKr=s(lse);Sgo=r(NKr,"unispeech"),NKr.forEach(t),Rgo=r(Rwe," \u2014 "),LI=n(Rwe,"A",{href:!0});var jKr=s(LI);Pgo=r(jKr,"Wav2Vec2Processor"),jKr.forEach(t),Bgo=r(Rwe," (UniSpeech model)"),Rwe.forEach(t),Igo=i(be),op=n(be,"LI",{});var Pwe=s(op);ise=n(Pwe,"STRONG",{});var DKr=s(ise);qgo=r(DKr,"unispeech-sat"),DKr.forEach(t),Ngo=r(Pwe," \u2014 "),xI=n(Pwe,"A",{href:!0});var GKr=s(xI);jgo=r(GKr,"Wav2Vec2Processor"),GKr.forEach(t),Dgo=r(Pwe," (UniSpeechSat model)"),Pwe.forEach(t),Ggo=i(be),rp=n(be,"LI",{});var Bwe=s(rp);dse=n(Bwe,"STRONG",{});var OKr=s(dse);Ogo=r(OKr,"vilt"),OKr.forEach(t),Vgo=r(Bwe," \u2014 "),$I=n(Bwe,"A",{href:!0});var VKr=s($I);Xgo=r(VKr,"ViltProcessor"),VKr.forEach(t),zgo=r(Bwe," (ViLT model)"),Bwe.forEach(t),Wgo=i(be),tp=n(be,"LI",{});var Iwe=s(tp);cse=n(Iwe,"STRONG",{});var XKr=s(cse);Qgo=r(XKr,"vision-text-dual-encoder"),XKr.forEach(t),Hgo=r(Iwe," \u2014 "),kI=n(Iwe,"A",{href:!0});var zKr=s(kI);Ugo=r(zKr,"VisionTextDualEncoderProcessor"),zKr.forEach(t),Jgo=r(Iwe," (VisionTextDualEncoder model)"),Iwe.forEach(t),Ygo=i(be),ap=n(be,"LI",{});var qwe=s(ap);fse=n(qwe,"STRONG",{});var WKr=s(fse);Kgo=r(WKr,"wav2vec2"),WKr.forEach(t),Zgo=r(qwe," \u2014 "),SI=n(qwe,"A",{href:!0});var QKr=s(SI);eho=r(QKr,"Wav2Vec2Processor"),QKr.forEach(t),oho=r(qwe," (Wav2Vec2 model)"),qwe.forEach(t),rho=i(be),np=n(be,"LI",{});var Nwe=s(np);mse=n(Nwe,"STRONG",{});var HKr=s(mse);tho=r(HKr,"wav2vec2-conformer"),HKr.forEach(t),aho=r(Nwe," \u2014 "),RI=n(Nwe,"A",{href:!0});var UKr=s(RI);nho=r(UKr,"Wav2Vec2Processor"),UKr.forEach(t),sho=r(Nwe," (Wav2Vec2-Conformer model)"),Nwe.forEach(t),lho=i(be),sp=n(be,"LI",{});var jwe=s(sp);gse=n(jwe,"STRONG",{});var JKr=s(gse);iho=r(JKr,"wavlm"),JKr.forEach(t),dho=r(jwe," \u2014 "),PI=n(jwe,"A",{href:!0});var YKr=s(PI);cho=r(YKr,"Wav2Vec2Processor"),YKr.forEach(t),fho=r(jwe," (WavLM model)"),jwe.forEach(t),be.forEach(t),mho=i(ta),T(lp.$$.fragment,ta),gho=i(ta),T(ip.$$.fragment,ta),ta.forEach(t),hho=i(zs),dp=n(zs,"DIV",{class:!0});var pDe=s(dp);T(aA.$$.fragment,pDe),pho=i(pDe),hse=n(pDe,"P",{});var KKr=s(hse);uho=r(KKr,"Register a new processor for this class."),KKr.forEach(t),pDe.forEach(t),zs.forEach(t),cNe=i(f),ki=n(f,"H2",{class:!0});var uDe=s(ki);cp=n(uDe,"A",{id:!0,class:!0,href:!0});var ZKr=s(cp);pse=n(ZKr,"SPAN",{});var eZr=s(pse);T(nA.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),_ho=i(uDe),use=n(uDe,"SPAN",{});var oZr=s(use);bho=r(oZr,"AutoModel"),oZr.forEach(t),uDe.forEach(t),fNe=i(f),xo=n(f,"DIV",{class:!0});var Ws=s(xo);T(sA.$$.fragment,Ws),vho=i(Ws),Si=n(Ws,"P",{});var vZ=s(Si);Fho=r(vZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BI=n(vZ,"A",{href:!0});var rZr=s(BI);Tho=r(rZr,"from_pretrained()"),rZr.forEach(t),Mho=r(vZ," class method or the "),II=n(vZ,"A",{href:!0});var tZr=s(II);Eho=r(tZr,"from_config()"),tZr.forEach(t),Cho=r(vZ,` class
method.`),vZ.forEach(t),who=i(Ws),lA=n(Ws,"P",{});var _De=s(lA);Aho=r(_De,"This class cannot be instantiated directly using "),_se=n(_De,"CODE",{});var aZr=s(_se);yho=r(aZr,"__init__()"),aZr.forEach(t),Lho=r(_De," (throws an error)."),_De.forEach(t),xho=i(Ws),nt=n(Ws,"DIV",{class:!0});var B3=s(nt);T(iA.$$.fragment,B3),$ho=i(B3),bse=n(B3,"P",{});var nZr=s(bse);kho=r(nZr,"Instantiates one of the base model classes of the library from a configuration."),nZr.forEach(t),Sho=i(B3),Ri=n(B3,"P",{});var FZ=s(Ri);Rho=r(FZ,`Note:
Loading a model from its configuration file does `),vse=n(FZ,"STRONG",{});var sZr=s(vse);Pho=r(sZr,"not"),sZr.forEach(t),Bho=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(FZ,"A",{href:!0});var lZr=s(qI);Iho=r(lZr,"from_pretrained()"),lZr.forEach(t),qho=r(FZ," to load the model weights."),FZ.forEach(t),Nho=i(B3),T(fp.$$.fragment,B3),B3.forEach(t),jho=i(Ws),Je=n(Ws,"DIV",{class:!0});var aa=s(Je);T(dA.$$.fragment,aa),Dho=i(aa),Fse=n(aa,"P",{});var iZr=s(Fse);Gho=r(iZr,"Instantiate one of the base model classes of the library from a pretrained model."),iZr.forEach(t),Oho=i(aa),Sa=n(aa,"P",{});var I3=s(Sa);Vho=r(I3,"The model class to instantiate is selected based on the "),Tse=n(I3,"CODE",{});var dZr=s(Tse);Xho=r(dZr,"model_type"),dZr.forEach(t),zho=r(I3,` property of the config object (either
passed as an argument or loaded from `),Mse=n(I3,"CODE",{});var cZr=s(Mse);Who=r(cZr,"pretrained_model_name_or_path"),cZr.forEach(t),Qho=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(I3,"CODE",{});var fZr=s(Ese);Hho=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),Uho=r(I3,":"),I3.forEach(t),Jho=i(aa),x=n(aa,"UL",{});var $=s(x);mp=n($,"LI",{});var Dwe=s(mp);Cse=n(Dwe,"STRONG",{});var mZr=s(Cse);Yho=r(mZr,"albert"),mZr.forEach(t),Kho=r(Dwe," \u2014 "),NI=n(Dwe,"A",{href:!0});var gZr=s(NI);Zho=r(gZr,"AlbertModel"),gZr.forEach(t),epo=r(Dwe," (ALBERT model)"),Dwe.forEach(t),opo=i($),gp=n($,"LI",{});var Gwe=s(gp);wse=n(Gwe,"STRONG",{});var hZr=s(wse);rpo=r(hZr,"bart"),hZr.forEach(t),tpo=r(Gwe," \u2014 "),jI=n(Gwe,"A",{href:!0});var pZr=s(jI);apo=r(pZr,"BartModel"),pZr.forEach(t),npo=r(Gwe," (BART model)"),Gwe.forEach(t),spo=i($),hp=n($,"LI",{});var Owe=s(hp);Ase=n(Owe,"STRONG",{});var uZr=s(Ase);lpo=r(uZr,"beit"),uZr.forEach(t),ipo=r(Owe," \u2014 "),DI=n(Owe,"A",{href:!0});var _Zr=s(DI);dpo=r(_Zr,"BeitModel"),_Zr.forEach(t),cpo=r(Owe," (BEiT model)"),Owe.forEach(t),fpo=i($),pp=n($,"LI",{});var Vwe=s(pp);yse=n(Vwe,"STRONG",{});var bZr=s(yse);mpo=r(bZr,"bert"),bZr.forEach(t),gpo=r(Vwe," \u2014 "),GI=n(Vwe,"A",{href:!0});var vZr=s(GI);hpo=r(vZr,"BertModel"),vZr.forEach(t),ppo=r(Vwe," (BERT model)"),Vwe.forEach(t),upo=i($),up=n($,"LI",{});var Xwe=s(up);Lse=n(Xwe,"STRONG",{});var FZr=s(Lse);_po=r(FZr,"bert-generation"),FZr.forEach(t),bpo=r(Xwe," \u2014 "),OI=n(Xwe,"A",{href:!0});var TZr=s(OI);vpo=r(TZr,"BertGenerationEncoder"),TZr.forEach(t),Fpo=r(Xwe," (Bert Generation model)"),Xwe.forEach(t),Tpo=i($),_p=n($,"LI",{});var zwe=s(_p);xse=n(zwe,"STRONG",{});var MZr=s(xse);Mpo=r(MZr,"big_bird"),MZr.forEach(t),Epo=r(zwe," \u2014 "),VI=n(zwe,"A",{href:!0});var EZr=s(VI);Cpo=r(EZr,"BigBirdModel"),EZr.forEach(t),wpo=r(zwe," (BigBird model)"),zwe.forEach(t),Apo=i($),bp=n($,"LI",{});var Wwe=s(bp);$se=n(Wwe,"STRONG",{});var CZr=s($se);ypo=r(CZr,"bigbird_pegasus"),CZr.forEach(t),Lpo=r(Wwe," \u2014 "),XI=n(Wwe,"A",{href:!0});var wZr=s(XI);xpo=r(wZr,"BigBirdPegasusModel"),wZr.forEach(t),$po=r(Wwe," (BigBirdPegasus model)"),Wwe.forEach(t),kpo=i($),vp=n($,"LI",{});var Qwe=s(vp);kse=n(Qwe,"STRONG",{});var AZr=s(kse);Spo=r(AZr,"blenderbot"),AZr.forEach(t),Rpo=r(Qwe," \u2014 "),zI=n(Qwe,"A",{href:!0});var yZr=s(zI);Ppo=r(yZr,"BlenderbotModel"),yZr.forEach(t),Bpo=r(Qwe," (Blenderbot model)"),Qwe.forEach(t),Ipo=i($),Fp=n($,"LI",{});var Hwe=s(Fp);Sse=n(Hwe,"STRONG",{});var LZr=s(Sse);qpo=r(LZr,"blenderbot-small"),LZr.forEach(t),Npo=r(Hwe," \u2014 "),WI=n(Hwe,"A",{href:!0});var xZr=s(WI);jpo=r(xZr,"BlenderbotSmallModel"),xZr.forEach(t),Dpo=r(Hwe," (BlenderbotSmall model)"),Hwe.forEach(t),Gpo=i($),Tp=n($,"LI",{});var Uwe=s(Tp);Rse=n(Uwe,"STRONG",{});var $Zr=s(Rse);Opo=r($Zr,"camembert"),$Zr.forEach(t),Vpo=r(Uwe," \u2014 "),QI=n(Uwe,"A",{href:!0});var kZr=s(QI);Xpo=r(kZr,"CamembertModel"),kZr.forEach(t),zpo=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),Wpo=i($),Mp=n($,"LI",{});var Jwe=s(Mp);Pse=n(Jwe,"STRONG",{});var SZr=s(Pse);Qpo=r(SZr,"canine"),SZr.forEach(t),Hpo=r(Jwe," \u2014 "),HI=n(Jwe,"A",{href:!0});var RZr=s(HI);Upo=r(RZr,"CanineModel"),RZr.forEach(t),Jpo=r(Jwe," (Canine model)"),Jwe.forEach(t),Ypo=i($),Ep=n($,"LI",{});var Ywe=s(Ep);Bse=n(Ywe,"STRONG",{});var PZr=s(Bse);Kpo=r(PZr,"clip"),PZr.forEach(t),Zpo=r(Ywe," \u2014 "),UI=n(Ywe,"A",{href:!0});var BZr=s(UI);euo=r(BZr,"CLIPModel"),BZr.forEach(t),ouo=r(Ywe," (CLIP model)"),Ywe.forEach(t),ruo=i($),Cp=n($,"LI",{});var Kwe=s(Cp);Ise=n(Kwe,"STRONG",{});var IZr=s(Ise);tuo=r(IZr,"convbert"),IZr.forEach(t),auo=r(Kwe," \u2014 "),JI=n(Kwe,"A",{href:!0});var qZr=s(JI);nuo=r(qZr,"ConvBertModel"),qZr.forEach(t),suo=r(Kwe," (ConvBERT model)"),Kwe.forEach(t),luo=i($),wp=n($,"LI",{});var Zwe=s(wp);qse=n(Zwe,"STRONG",{});var NZr=s(qse);iuo=r(NZr,"convnext"),NZr.forEach(t),duo=r(Zwe," \u2014 "),YI=n(Zwe,"A",{href:!0});var jZr=s(YI);cuo=r(jZr,"ConvNextModel"),jZr.forEach(t),fuo=r(Zwe," (ConvNext model)"),Zwe.forEach(t),muo=i($),Ap=n($,"LI",{});var e0e=s(Ap);Nse=n(e0e,"STRONG",{});var DZr=s(Nse);guo=r(DZr,"ctrl"),DZr.forEach(t),huo=r(e0e," \u2014 "),KI=n(e0e,"A",{href:!0});var GZr=s(KI);puo=r(GZr,"CTRLModel"),GZr.forEach(t),uuo=r(e0e," (CTRL model)"),e0e.forEach(t),_uo=i($),yp=n($,"LI",{});var o0e=s(yp);jse=n(o0e,"STRONG",{});var OZr=s(jse);buo=r(OZr,"cvt"),OZr.forEach(t),vuo=r(o0e," \u2014 "),ZI=n(o0e,"A",{href:!0});var VZr=s(ZI);Fuo=r(VZr,"CvtModel"),VZr.forEach(t),Tuo=r(o0e," (CvT model)"),o0e.forEach(t),Muo=i($),Lp=n($,"LI",{});var r0e=s(Lp);Dse=n(r0e,"STRONG",{});var XZr=s(Dse);Euo=r(XZr,"data2vec-audio"),XZr.forEach(t),Cuo=r(r0e," \u2014 "),eq=n(r0e,"A",{href:!0});var zZr=s(eq);wuo=r(zZr,"Data2VecAudioModel"),zZr.forEach(t),Auo=r(r0e," (Data2VecAudio model)"),r0e.forEach(t),yuo=i($),xp=n($,"LI",{});var t0e=s(xp);Gse=n(t0e,"STRONG",{});var WZr=s(Gse);Luo=r(WZr,"data2vec-text"),WZr.forEach(t),xuo=r(t0e," \u2014 "),oq=n(t0e,"A",{href:!0});var QZr=s(oq);$uo=r(QZr,"Data2VecTextModel"),QZr.forEach(t),kuo=r(t0e," (Data2VecText model)"),t0e.forEach(t),Suo=i($),$p=n($,"LI",{});var a0e=s($p);Ose=n(a0e,"STRONG",{});var HZr=s(Ose);Ruo=r(HZr,"data2vec-vision"),HZr.forEach(t),Puo=r(a0e," \u2014 "),rq=n(a0e,"A",{href:!0});var UZr=s(rq);Buo=r(UZr,"Data2VecVisionModel"),UZr.forEach(t),Iuo=r(a0e," (Data2VecVision model)"),a0e.forEach(t),quo=i($),kp=n($,"LI",{});var n0e=s(kp);Vse=n(n0e,"STRONG",{});var JZr=s(Vse);Nuo=r(JZr,"deberta"),JZr.forEach(t),juo=r(n0e," \u2014 "),tq=n(n0e,"A",{href:!0});var YZr=s(tq);Duo=r(YZr,"DebertaModel"),YZr.forEach(t),Guo=r(n0e," (DeBERTa model)"),n0e.forEach(t),Ouo=i($),Sp=n($,"LI",{});var s0e=s(Sp);Xse=n(s0e,"STRONG",{});var KZr=s(Xse);Vuo=r(KZr,"deberta-v2"),KZr.forEach(t),Xuo=r(s0e," \u2014 "),aq=n(s0e,"A",{href:!0});var ZZr=s(aq);zuo=r(ZZr,"DebertaV2Model"),ZZr.forEach(t),Wuo=r(s0e," (DeBERTa-v2 model)"),s0e.forEach(t),Quo=i($),Rp=n($,"LI",{});var l0e=s(Rp);zse=n(l0e,"STRONG",{});var eet=s(zse);Huo=r(eet,"decision_transformer"),eet.forEach(t),Uuo=r(l0e," \u2014 "),nq=n(l0e,"A",{href:!0});var oet=s(nq);Juo=r(oet,"DecisionTransformerModel"),oet.forEach(t),Yuo=r(l0e," (Decision Transformer model)"),l0e.forEach(t),Kuo=i($),Pp=n($,"LI",{});var i0e=s(Pp);Wse=n(i0e,"STRONG",{});var ret=s(Wse);Zuo=r(ret,"deit"),ret.forEach(t),e_o=r(i0e," \u2014 "),sq=n(i0e,"A",{href:!0});var tet=s(sq);o_o=r(tet,"DeiTModel"),tet.forEach(t),r_o=r(i0e," (DeiT model)"),i0e.forEach(t),t_o=i($),Bp=n($,"LI",{});var d0e=s(Bp);Qse=n(d0e,"STRONG",{});var aet=s(Qse);a_o=r(aet,"detr"),aet.forEach(t),n_o=r(d0e," \u2014 "),lq=n(d0e,"A",{href:!0});var net=s(lq);s_o=r(net,"DetrModel"),net.forEach(t),l_o=r(d0e," (DETR model)"),d0e.forEach(t),i_o=i($),Ip=n($,"LI",{});var c0e=s(Ip);Hse=n(c0e,"STRONG",{});var set=s(Hse);d_o=r(set,"distilbert"),set.forEach(t),c_o=r(c0e," \u2014 "),iq=n(c0e,"A",{href:!0});var iet=s(iq);f_o=r(iet,"DistilBertModel"),iet.forEach(t),m_o=r(c0e," (DistilBERT model)"),c0e.forEach(t),g_o=i($),qp=n($,"LI",{});var f0e=s(qp);Use=n(f0e,"STRONG",{});var det=s(Use);h_o=r(det,"dpr"),det.forEach(t),p_o=r(f0e," \u2014 "),dq=n(f0e,"A",{href:!0});var cet=s(dq);u_o=r(cet,"DPRQuestionEncoder"),cet.forEach(t),__o=r(f0e," (DPR model)"),f0e.forEach(t),b_o=i($),Np=n($,"LI",{});var m0e=s(Np);Jse=n(m0e,"STRONG",{});var fet=s(Jse);v_o=r(fet,"dpt"),fet.forEach(t),F_o=r(m0e," \u2014 "),cq=n(m0e,"A",{href:!0});var met=s(cq);T_o=r(met,"DPTModel"),met.forEach(t),M_o=r(m0e," (DPT model)"),m0e.forEach(t),E_o=i($),jp=n($,"LI",{});var g0e=s(jp);Yse=n(g0e,"STRONG",{});var get=s(Yse);C_o=r(get,"electra"),get.forEach(t),w_o=r(g0e," \u2014 "),fq=n(g0e,"A",{href:!0});var het=s(fq);A_o=r(het,"ElectraModel"),het.forEach(t),y_o=r(g0e," (ELECTRA model)"),g0e.forEach(t),L_o=i($),Dp=n($,"LI",{});var h0e=s(Dp);Kse=n(h0e,"STRONG",{});var pet=s(Kse);x_o=r(pet,"flaubert"),pet.forEach(t),$_o=r(h0e," \u2014 "),mq=n(h0e,"A",{href:!0});var uet=s(mq);k_o=r(uet,"FlaubertModel"),uet.forEach(t),S_o=r(h0e," (FlauBERT model)"),h0e.forEach(t),R_o=i($),Gp=n($,"LI",{});var p0e=s(Gp);Zse=n(p0e,"STRONG",{});var _et=s(Zse);P_o=r(_et,"flava"),_et.forEach(t),B_o=r(p0e," \u2014 "),gq=n(p0e,"A",{href:!0});var bet=s(gq);I_o=r(bet,"FlavaModel"),bet.forEach(t),q_o=r(p0e," (Flava model)"),p0e.forEach(t),N_o=i($),Op=n($,"LI",{});var u0e=s(Op);ele=n(u0e,"STRONG",{});var vet=s(ele);j_o=r(vet,"fnet"),vet.forEach(t),D_o=r(u0e," \u2014 "),hq=n(u0e,"A",{href:!0});var Fet=s(hq);G_o=r(Fet,"FNetModel"),Fet.forEach(t),O_o=r(u0e," (FNet model)"),u0e.forEach(t),V_o=i($),Vp=n($,"LI",{});var _0e=s(Vp);ole=n(_0e,"STRONG",{});var Tet=s(ole);X_o=r(Tet,"fsmt"),Tet.forEach(t),z_o=r(_0e," \u2014 "),pq=n(_0e,"A",{href:!0});var Met=s(pq);W_o=r(Met,"FSMTModel"),Met.forEach(t),Q_o=r(_0e," (FairSeq Machine-Translation model)"),_0e.forEach(t),H_o=i($),js=n($,"LI",{});var Z$=s(js);rle=n(Z$,"STRONG",{});var Eet=s(rle);U_o=r(Eet,"funnel"),Eet.forEach(t),J_o=r(Z$," \u2014 "),uq=n(Z$,"A",{href:!0});var Cet=s(uq);Y_o=r(Cet,"FunnelModel"),Cet.forEach(t),K_o=r(Z$," or "),_q=n(Z$,"A",{href:!0});var wet=s(_q);Z_o=r(wet,"FunnelBaseModel"),wet.forEach(t),e2o=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),o2o=i($),Xp=n($,"LI",{});var b0e=s(Xp);tle=n(b0e,"STRONG",{});var Aet=s(tle);r2o=r(Aet,"glpn"),Aet.forEach(t),t2o=r(b0e," \u2014 "),bq=n(b0e,"A",{href:!0});var yet=s(bq);a2o=r(yet,"GLPNModel"),yet.forEach(t),n2o=r(b0e," (GLPN model)"),b0e.forEach(t),s2o=i($),zp=n($,"LI",{});var v0e=s(zp);ale=n(v0e,"STRONG",{});var Let=s(ale);l2o=r(Let,"gpt2"),Let.forEach(t),i2o=r(v0e," \u2014 "),vq=n(v0e,"A",{href:!0});var xet=s(vq);d2o=r(xet,"GPT2Model"),xet.forEach(t),c2o=r(v0e," (OpenAI GPT-2 model)"),v0e.forEach(t),f2o=i($),Wp=n($,"LI",{});var F0e=s(Wp);nle=n(F0e,"STRONG",{});var $et=s(nle);m2o=r($et,"gpt_neo"),$et.forEach(t),g2o=r(F0e," \u2014 "),Fq=n(F0e,"A",{href:!0});var ket=s(Fq);h2o=r(ket,"GPTNeoModel"),ket.forEach(t),p2o=r(F0e," (GPT Neo model)"),F0e.forEach(t),u2o=i($),Qp=n($,"LI",{});var T0e=s(Qp);sle=n(T0e,"STRONG",{});var Set=s(sle);_2o=r(Set,"gptj"),Set.forEach(t),b2o=r(T0e," \u2014 "),Tq=n(T0e,"A",{href:!0});var Ret=s(Tq);v2o=r(Ret,"GPTJModel"),Ret.forEach(t),F2o=r(T0e," (GPT-J model)"),T0e.forEach(t),T2o=i($),Hp=n($,"LI",{});var M0e=s(Hp);lle=n(M0e,"STRONG",{});var Pet=s(lle);M2o=r(Pet,"hubert"),Pet.forEach(t),E2o=r(M0e," \u2014 "),Mq=n(M0e,"A",{href:!0});var Bet=s(Mq);C2o=r(Bet,"HubertModel"),Bet.forEach(t),w2o=r(M0e," (Hubert model)"),M0e.forEach(t),A2o=i($),Up=n($,"LI",{});var E0e=s(Up);ile=n(E0e,"STRONG",{});var Iet=s(ile);y2o=r(Iet,"ibert"),Iet.forEach(t),L2o=r(E0e," \u2014 "),Eq=n(E0e,"A",{href:!0});var qet=s(Eq);x2o=r(qet,"IBertModel"),qet.forEach(t),$2o=r(E0e," (I-BERT model)"),E0e.forEach(t),k2o=i($),Jp=n($,"LI",{});var C0e=s(Jp);dle=n(C0e,"STRONG",{});var Net=s(dle);S2o=r(Net,"imagegpt"),Net.forEach(t),R2o=r(C0e," \u2014 "),Cq=n(C0e,"A",{href:!0});var jet=s(Cq);P2o=r(jet,"ImageGPTModel"),jet.forEach(t),B2o=r(C0e," (ImageGPT model)"),C0e.forEach(t),I2o=i($),Yp=n($,"LI",{});var w0e=s(Yp);cle=n(w0e,"STRONG",{});var Det=s(cle);q2o=r(Det,"layoutlm"),Det.forEach(t),N2o=r(w0e," \u2014 "),wq=n(w0e,"A",{href:!0});var Get=s(wq);j2o=r(Get,"LayoutLMModel"),Get.forEach(t),D2o=r(w0e," (LayoutLM model)"),w0e.forEach(t),G2o=i($),Kp=n($,"LI",{});var A0e=s(Kp);fle=n(A0e,"STRONG",{});var Oet=s(fle);O2o=r(Oet,"layoutlmv2"),Oet.forEach(t),V2o=r(A0e," \u2014 "),Aq=n(A0e,"A",{href:!0});var Vet=s(Aq);X2o=r(Vet,"LayoutLMv2Model"),Vet.forEach(t),z2o=r(A0e," (LayoutLMv2 model)"),A0e.forEach(t),W2o=i($),Zp=n($,"LI",{});var y0e=s(Zp);mle=n(y0e,"STRONG",{});var Xet=s(mle);Q2o=r(Xet,"led"),Xet.forEach(t),H2o=r(y0e," \u2014 "),yq=n(y0e,"A",{href:!0});var zet=s(yq);U2o=r(zet,"LEDModel"),zet.forEach(t),J2o=r(y0e," (LED model)"),y0e.forEach(t),Y2o=i($),eu=n($,"LI",{});var L0e=s(eu);gle=n(L0e,"STRONG",{});var Wet=s(gle);K2o=r(Wet,"longformer"),Wet.forEach(t),Z2o=r(L0e," \u2014 "),Lq=n(L0e,"A",{href:!0});var Qet=s(Lq);e1o=r(Qet,"LongformerModel"),Qet.forEach(t),o1o=r(L0e," (Longformer model)"),L0e.forEach(t),r1o=i($),ou=n($,"LI",{});var x0e=s(ou);hle=n(x0e,"STRONG",{});var Het=s(hle);t1o=r(Het,"luke"),Het.forEach(t),a1o=r(x0e," \u2014 "),xq=n(x0e,"A",{href:!0});var Uet=s(xq);n1o=r(Uet,"LukeModel"),Uet.forEach(t),s1o=r(x0e," (LUKE model)"),x0e.forEach(t),l1o=i($),ru=n($,"LI",{});var $0e=s(ru);ple=n($0e,"STRONG",{});var Jet=s(ple);i1o=r(Jet,"lxmert"),Jet.forEach(t),d1o=r($0e," \u2014 "),$q=n($0e,"A",{href:!0});var Yet=s($q);c1o=r(Yet,"LxmertModel"),Yet.forEach(t),f1o=r($0e," (LXMERT model)"),$0e.forEach(t),m1o=i($),tu=n($,"LI",{});var k0e=s(tu);ule=n(k0e,"STRONG",{});var Ket=s(ule);g1o=r(Ket,"m2m_100"),Ket.forEach(t),h1o=r(k0e," \u2014 "),kq=n(k0e,"A",{href:!0});var Zet=s(kq);p1o=r(Zet,"M2M100Model"),Zet.forEach(t),u1o=r(k0e," (M2M100 model)"),k0e.forEach(t),_1o=i($),au=n($,"LI",{});var S0e=s(au);_le=n(S0e,"STRONG",{});var eot=s(_le);b1o=r(eot,"marian"),eot.forEach(t),v1o=r(S0e," \u2014 "),Sq=n(S0e,"A",{href:!0});var oot=s(Sq);F1o=r(oot,"MarianModel"),oot.forEach(t),T1o=r(S0e," (Marian model)"),S0e.forEach(t),M1o=i($),nu=n($,"LI",{});var R0e=s(nu);ble=n(R0e,"STRONG",{});var rot=s(ble);E1o=r(rot,"maskformer"),rot.forEach(t),C1o=r(R0e," \u2014 "),Rq=n(R0e,"A",{href:!0});var tot=s(Rq);w1o=r(tot,"MaskFormerModel"),tot.forEach(t),A1o=r(R0e," (MaskFormer model)"),R0e.forEach(t),y1o=i($),su=n($,"LI",{});var P0e=s(su);vle=n(P0e,"STRONG",{});var aot=s(vle);L1o=r(aot,"mbart"),aot.forEach(t),x1o=r(P0e," \u2014 "),Pq=n(P0e,"A",{href:!0});var not=s(Pq);$1o=r(not,"MBartModel"),not.forEach(t),k1o=r(P0e," (mBART model)"),P0e.forEach(t),S1o=i($),lu=n($,"LI",{});var B0e=s(lu);Fle=n(B0e,"STRONG",{});var sot=s(Fle);R1o=r(sot,"megatron-bert"),sot.forEach(t),P1o=r(B0e," \u2014 "),Bq=n(B0e,"A",{href:!0});var lot=s(Bq);B1o=r(lot,"MegatronBertModel"),lot.forEach(t),I1o=r(B0e," (MegatronBert model)"),B0e.forEach(t),q1o=i($),iu=n($,"LI",{});var I0e=s(iu);Tle=n(I0e,"STRONG",{});var iot=s(Tle);N1o=r(iot,"mobilebert"),iot.forEach(t),j1o=r(I0e," \u2014 "),Iq=n(I0e,"A",{href:!0});var dot=s(Iq);D1o=r(dot,"MobileBertModel"),dot.forEach(t),G1o=r(I0e," (MobileBERT model)"),I0e.forEach(t),O1o=i($),du=n($,"LI",{});var q0e=s(du);Mle=n(q0e,"STRONG",{});var cot=s(Mle);V1o=r(cot,"mpnet"),cot.forEach(t),X1o=r(q0e," \u2014 "),qq=n(q0e,"A",{href:!0});var fot=s(qq);z1o=r(fot,"MPNetModel"),fot.forEach(t),W1o=r(q0e," (MPNet model)"),q0e.forEach(t),Q1o=i($),cu=n($,"LI",{});var N0e=s(cu);Ele=n(N0e,"STRONG",{});var mot=s(Ele);H1o=r(mot,"mt5"),mot.forEach(t),U1o=r(N0e," \u2014 "),Nq=n(N0e,"A",{href:!0});var got=s(Nq);J1o=r(got,"MT5Model"),got.forEach(t),Y1o=r(N0e," (mT5 model)"),N0e.forEach(t),K1o=i($),fu=n($,"LI",{});var j0e=s(fu);Cle=n(j0e,"STRONG",{});var hot=s(Cle);Z1o=r(hot,"nystromformer"),hot.forEach(t),ebo=r(j0e," \u2014 "),jq=n(j0e,"A",{href:!0});var pot=s(jq);obo=r(pot,"NystromformerModel"),pot.forEach(t),rbo=r(j0e," (Nystromformer model)"),j0e.forEach(t),tbo=i($),mu=n($,"LI",{});var D0e=s(mu);wle=n(D0e,"STRONG",{});var uot=s(wle);abo=r(uot,"openai-gpt"),uot.forEach(t),nbo=r(D0e," \u2014 "),Dq=n(D0e,"A",{href:!0});var _ot=s(Dq);sbo=r(_ot,"OpenAIGPTModel"),_ot.forEach(t),lbo=r(D0e," (OpenAI GPT model)"),D0e.forEach(t),ibo=i($),gu=n($,"LI",{});var G0e=s(gu);Ale=n(G0e,"STRONG",{});var bot=s(Ale);dbo=r(bot,"opt"),bot.forEach(t),cbo=r(G0e," \u2014 "),Gq=n(G0e,"A",{href:!0});var vot=s(Gq);fbo=r(vot,"OPTModel"),vot.forEach(t),mbo=r(G0e," (OPT model)"),G0e.forEach(t),gbo=i($),hu=n($,"LI",{});var O0e=s(hu);yle=n(O0e,"STRONG",{});var Fot=s(yle);hbo=r(Fot,"pegasus"),Fot.forEach(t),pbo=r(O0e," \u2014 "),Oq=n(O0e,"A",{href:!0});var Tot=s(Oq);ubo=r(Tot,"PegasusModel"),Tot.forEach(t),_bo=r(O0e," (Pegasus model)"),O0e.forEach(t),bbo=i($),pu=n($,"LI",{});var V0e=s(pu);Lle=n(V0e,"STRONG",{});var Mot=s(Lle);vbo=r(Mot,"perceiver"),Mot.forEach(t),Fbo=r(V0e," \u2014 "),Vq=n(V0e,"A",{href:!0});var Eot=s(Vq);Tbo=r(Eot,"PerceiverModel"),Eot.forEach(t),Mbo=r(V0e," (Perceiver model)"),V0e.forEach(t),Ebo=i($),uu=n($,"LI",{});var X0e=s(uu);xle=n(X0e,"STRONG",{});var Cot=s(xle);Cbo=r(Cot,"plbart"),Cot.forEach(t),wbo=r(X0e," \u2014 "),Xq=n(X0e,"A",{href:!0});var wot=s(Xq);Abo=r(wot,"PLBartModel"),wot.forEach(t),ybo=r(X0e," (PLBart model)"),X0e.forEach(t),Lbo=i($),_u=n($,"LI",{});var z0e=s(_u);$le=n(z0e,"STRONG",{});var Aot=s($le);xbo=r(Aot,"poolformer"),Aot.forEach(t),$bo=r(z0e," \u2014 "),zq=n(z0e,"A",{href:!0});var yot=s(zq);kbo=r(yot,"PoolFormerModel"),yot.forEach(t),Sbo=r(z0e," (PoolFormer model)"),z0e.forEach(t),Rbo=i($),bu=n($,"LI",{});var W0e=s(bu);kle=n(W0e,"STRONG",{});var Lot=s(kle);Pbo=r(Lot,"prophetnet"),Lot.forEach(t),Bbo=r(W0e," \u2014 "),Wq=n(W0e,"A",{href:!0});var xot=s(Wq);Ibo=r(xot,"ProphetNetModel"),xot.forEach(t),qbo=r(W0e," (ProphetNet model)"),W0e.forEach(t),Nbo=i($),vu=n($,"LI",{});var Q0e=s(vu);Sle=n(Q0e,"STRONG",{});var $ot=s(Sle);jbo=r($ot,"qdqbert"),$ot.forEach(t),Dbo=r(Q0e," \u2014 "),Qq=n(Q0e,"A",{href:!0});var kot=s(Qq);Gbo=r(kot,"QDQBertModel"),kot.forEach(t),Obo=r(Q0e," (QDQBert model)"),Q0e.forEach(t),Vbo=i($),Fu=n($,"LI",{});var H0e=s(Fu);Rle=n(H0e,"STRONG",{});var Sot=s(Rle);Xbo=r(Sot,"reformer"),Sot.forEach(t),zbo=r(H0e," \u2014 "),Hq=n(H0e,"A",{href:!0});var Rot=s(Hq);Wbo=r(Rot,"ReformerModel"),Rot.forEach(t),Qbo=r(H0e," (Reformer model)"),H0e.forEach(t),Hbo=i($),Tu=n($,"LI",{});var U0e=s(Tu);Ple=n(U0e,"STRONG",{});var Pot=s(Ple);Ubo=r(Pot,"regnet"),Pot.forEach(t),Jbo=r(U0e," \u2014 "),Uq=n(U0e,"A",{href:!0});var Bot=s(Uq);Ybo=r(Bot,"RegNetModel"),Bot.forEach(t),Kbo=r(U0e," (RegNet model)"),U0e.forEach(t),Zbo=i($),Mu=n($,"LI",{});var J0e=s(Mu);Ble=n(J0e,"STRONG",{});var Iot=s(Ble);evo=r(Iot,"rembert"),Iot.forEach(t),ovo=r(J0e," \u2014 "),Jq=n(J0e,"A",{href:!0});var qot=s(Jq);rvo=r(qot,"RemBertModel"),qot.forEach(t),tvo=r(J0e," (RemBERT model)"),J0e.forEach(t),avo=i($),Eu=n($,"LI",{});var Y0e=s(Eu);Ile=n(Y0e,"STRONG",{});var Not=s(Ile);nvo=r(Not,"resnet"),Not.forEach(t),svo=r(Y0e," \u2014 "),Yq=n(Y0e,"A",{href:!0});var jot=s(Yq);lvo=r(jot,"ResNetModel"),jot.forEach(t),ivo=r(Y0e," (ResNet model)"),Y0e.forEach(t),dvo=i($),Cu=n($,"LI",{});var K0e=s(Cu);qle=n(K0e,"STRONG",{});var Dot=s(qle);cvo=r(Dot,"retribert"),Dot.forEach(t),fvo=r(K0e," \u2014 "),Kq=n(K0e,"A",{href:!0});var Got=s(Kq);mvo=r(Got,"RetriBertModel"),Got.forEach(t),gvo=r(K0e," (RetriBERT model)"),K0e.forEach(t),hvo=i($),wu=n($,"LI",{});var Z0e=s(wu);Nle=n(Z0e,"STRONG",{});var Oot=s(Nle);pvo=r(Oot,"roberta"),Oot.forEach(t),uvo=r(Z0e," \u2014 "),Zq=n(Z0e,"A",{href:!0});var Vot=s(Zq);_vo=r(Vot,"RobertaModel"),Vot.forEach(t),bvo=r(Z0e," (RoBERTa model)"),Z0e.forEach(t),vvo=i($),Au=n($,"LI",{});var eAe=s(Au);jle=n(eAe,"STRONG",{});var Xot=s(jle);Fvo=r(Xot,"roformer"),Xot.forEach(t),Tvo=r(eAe," \u2014 "),eN=n(eAe,"A",{href:!0});var zot=s(eN);Mvo=r(zot,"RoFormerModel"),zot.forEach(t),Evo=r(eAe," (RoFormer model)"),eAe.forEach(t),Cvo=i($),yu=n($,"LI",{});var oAe=s(yu);Dle=n(oAe,"STRONG",{});var Wot=s(Dle);wvo=r(Wot,"segformer"),Wot.forEach(t),Avo=r(oAe," \u2014 "),oN=n(oAe,"A",{href:!0});var Qot=s(oN);yvo=r(Qot,"SegformerModel"),Qot.forEach(t),Lvo=r(oAe," (SegFormer model)"),oAe.forEach(t),xvo=i($),Lu=n($,"LI",{});var rAe=s(Lu);Gle=n(rAe,"STRONG",{});var Hot=s(Gle);$vo=r(Hot,"sew"),Hot.forEach(t),kvo=r(rAe," \u2014 "),rN=n(rAe,"A",{href:!0});var Uot=s(rN);Svo=r(Uot,"SEWModel"),Uot.forEach(t),Rvo=r(rAe," (SEW model)"),rAe.forEach(t),Pvo=i($),xu=n($,"LI",{});var tAe=s(xu);Ole=n(tAe,"STRONG",{});var Jot=s(Ole);Bvo=r(Jot,"sew-d"),Jot.forEach(t),Ivo=r(tAe," \u2014 "),tN=n(tAe,"A",{href:!0});var Yot=s(tN);qvo=r(Yot,"SEWDModel"),Yot.forEach(t),Nvo=r(tAe," (SEW-D model)"),tAe.forEach(t),jvo=i($),$u=n($,"LI",{});var aAe=s($u);Vle=n(aAe,"STRONG",{});var Kot=s(Vle);Dvo=r(Kot,"speech_to_text"),Kot.forEach(t),Gvo=r(aAe," \u2014 "),aN=n(aAe,"A",{href:!0});var Zot=s(aN);Ovo=r(Zot,"Speech2TextModel"),Zot.forEach(t),Vvo=r(aAe," (Speech2Text model)"),aAe.forEach(t),Xvo=i($),ku=n($,"LI",{});var nAe=s(ku);Xle=n(nAe,"STRONG",{});var ert=s(Xle);zvo=r(ert,"splinter"),ert.forEach(t),Wvo=r(nAe," \u2014 "),nN=n(nAe,"A",{href:!0});var ort=s(nN);Qvo=r(ort,"SplinterModel"),ort.forEach(t),Hvo=r(nAe," (Splinter model)"),nAe.forEach(t),Uvo=i($),Su=n($,"LI",{});var sAe=s(Su);zle=n(sAe,"STRONG",{});var rrt=s(zle);Jvo=r(rrt,"squeezebert"),rrt.forEach(t),Yvo=r(sAe," \u2014 "),sN=n(sAe,"A",{href:!0});var trt=s(sN);Kvo=r(trt,"SqueezeBertModel"),trt.forEach(t),Zvo=r(sAe," (SqueezeBERT model)"),sAe.forEach(t),eFo=i($),Ru=n($,"LI",{});var lAe=s(Ru);Wle=n(lAe,"STRONG",{});var art=s(Wle);oFo=r(art,"swin"),art.forEach(t),rFo=r(lAe," \u2014 "),lN=n(lAe,"A",{href:!0});var nrt=s(lN);tFo=r(nrt,"SwinModel"),nrt.forEach(t),aFo=r(lAe," (Swin model)"),lAe.forEach(t),nFo=i($),Pu=n($,"LI",{});var iAe=s(Pu);Qle=n(iAe,"STRONG",{});var srt=s(Qle);sFo=r(srt,"t5"),srt.forEach(t),lFo=r(iAe," \u2014 "),iN=n(iAe,"A",{href:!0});var lrt=s(iN);iFo=r(lrt,"T5Model"),lrt.forEach(t),dFo=r(iAe," (T5 model)"),iAe.forEach(t),cFo=i($),Bu=n($,"LI",{});var dAe=s(Bu);Hle=n(dAe,"STRONG",{});var irt=s(Hle);fFo=r(irt,"tapas"),irt.forEach(t),mFo=r(dAe," \u2014 "),dN=n(dAe,"A",{href:!0});var drt=s(dN);gFo=r(drt,"TapasModel"),drt.forEach(t),hFo=r(dAe," (TAPAS model)"),dAe.forEach(t),pFo=i($),Iu=n($,"LI",{});var cAe=s(Iu);Ule=n(cAe,"STRONG",{});var crt=s(Ule);uFo=r(crt,"trajectory_transformer"),crt.forEach(t),_Fo=r(cAe," \u2014 "),cN=n(cAe,"A",{href:!0});var frt=s(cN);bFo=r(frt,"TrajectoryTransformerModel"),frt.forEach(t),vFo=r(cAe," (Trajectory Transformer model)"),cAe.forEach(t),FFo=i($),qu=n($,"LI",{});var fAe=s(qu);Jle=n(fAe,"STRONG",{});var mrt=s(Jle);TFo=r(mrt,"transfo-xl"),mrt.forEach(t),MFo=r(fAe," \u2014 "),fN=n(fAe,"A",{href:!0});var grt=s(fN);EFo=r(grt,"TransfoXLModel"),grt.forEach(t),CFo=r(fAe," (Transformer-XL model)"),fAe.forEach(t),wFo=i($),Nu=n($,"LI",{});var mAe=s(Nu);Yle=n(mAe,"STRONG",{});var hrt=s(Yle);AFo=r(hrt,"unispeech"),hrt.forEach(t),yFo=r(mAe," \u2014 "),mN=n(mAe,"A",{href:!0});var prt=s(mN);LFo=r(prt,"UniSpeechModel"),prt.forEach(t),xFo=r(mAe," (UniSpeech model)"),mAe.forEach(t),$Fo=i($),ju=n($,"LI",{});var gAe=s(ju);Kle=n(gAe,"STRONG",{});var urt=s(Kle);kFo=r(urt,"unispeech-sat"),urt.forEach(t),SFo=r(gAe," \u2014 "),gN=n(gAe,"A",{href:!0});var _rt=s(gN);RFo=r(_rt,"UniSpeechSatModel"),_rt.forEach(t),PFo=r(gAe," (UniSpeechSat model)"),gAe.forEach(t),BFo=i($),Du=n($,"LI",{});var hAe=s(Du);Zle=n(hAe,"STRONG",{});var brt=s(Zle);IFo=r(brt,"van"),brt.forEach(t),qFo=r(hAe," \u2014 "),hN=n(hAe,"A",{href:!0});var vrt=s(hN);NFo=r(vrt,"VanModel"),vrt.forEach(t),jFo=r(hAe," (VAN model)"),hAe.forEach(t),DFo=i($),Gu=n($,"LI",{});var pAe=s(Gu);eie=n(pAe,"STRONG",{});var Frt=s(eie);GFo=r(Frt,"vilt"),Frt.forEach(t),OFo=r(pAe," \u2014 "),pN=n(pAe,"A",{href:!0});var Trt=s(pN);VFo=r(Trt,"ViltModel"),Trt.forEach(t),XFo=r(pAe," (ViLT model)"),pAe.forEach(t),zFo=i($),Ou=n($,"LI",{});var uAe=s(Ou);oie=n(uAe,"STRONG",{});var Mrt=s(oie);WFo=r(Mrt,"vision-text-dual-encoder"),Mrt.forEach(t),QFo=r(uAe," \u2014 "),uN=n(uAe,"A",{href:!0});var Ert=s(uN);HFo=r(Ert,"VisionTextDualEncoderModel"),Ert.forEach(t),UFo=r(uAe," (VisionTextDualEncoder model)"),uAe.forEach(t),JFo=i($),Vu=n($,"LI",{});var _Ae=s(Vu);rie=n(_Ae,"STRONG",{});var Crt=s(rie);YFo=r(Crt,"visual_bert"),Crt.forEach(t),KFo=r(_Ae," \u2014 "),_N=n(_Ae,"A",{href:!0});var wrt=s(_N);ZFo=r(wrt,"VisualBertModel"),wrt.forEach(t),e6o=r(_Ae," (VisualBert model)"),_Ae.forEach(t),o6o=i($),Xu=n($,"LI",{});var bAe=s(Xu);tie=n(bAe,"STRONG",{});var Art=s(tie);r6o=r(Art,"vit"),Art.forEach(t),t6o=r(bAe," \u2014 "),bN=n(bAe,"A",{href:!0});var yrt=s(bN);a6o=r(yrt,"ViTModel"),yrt.forEach(t),n6o=r(bAe," (ViT model)"),bAe.forEach(t),s6o=i($),zu=n($,"LI",{});var vAe=s(zu);aie=n(vAe,"STRONG",{});var Lrt=s(aie);l6o=r(Lrt,"vit_mae"),Lrt.forEach(t),i6o=r(vAe," \u2014 "),vN=n(vAe,"A",{href:!0});var xrt=s(vN);d6o=r(xrt,"ViTMAEModel"),xrt.forEach(t),c6o=r(vAe," (ViTMAE model)"),vAe.forEach(t),f6o=i($),Wu=n($,"LI",{});var FAe=s(Wu);nie=n(FAe,"STRONG",{});var $rt=s(nie);m6o=r($rt,"wav2vec2"),$rt.forEach(t),g6o=r(FAe," \u2014 "),FN=n(FAe,"A",{href:!0});var krt=s(FN);h6o=r(krt,"Wav2Vec2Model"),krt.forEach(t),p6o=r(FAe," (Wav2Vec2 model)"),FAe.forEach(t),u6o=i($),Qu=n($,"LI",{});var TAe=s(Qu);sie=n(TAe,"STRONG",{});var Srt=s(sie);_6o=r(Srt,"wav2vec2-conformer"),Srt.forEach(t),b6o=r(TAe," \u2014 "),TN=n(TAe,"A",{href:!0});var Rrt=s(TN);v6o=r(Rrt,"Wav2Vec2ConformerModel"),Rrt.forEach(t),F6o=r(TAe," (Wav2Vec2-Conformer model)"),TAe.forEach(t),T6o=i($),Hu=n($,"LI",{});var MAe=s(Hu);lie=n(MAe,"STRONG",{});var Prt=s(lie);M6o=r(Prt,"wavlm"),Prt.forEach(t),E6o=r(MAe," \u2014 "),MN=n(MAe,"A",{href:!0});var Brt=s(MN);C6o=r(Brt,"WavLMModel"),Brt.forEach(t),w6o=r(MAe," (WavLM model)"),MAe.forEach(t),A6o=i($),Uu=n($,"LI",{});var EAe=s(Uu);iie=n(EAe,"STRONG",{});var Irt=s(iie);y6o=r(Irt,"xglm"),Irt.forEach(t),L6o=r(EAe," \u2014 "),EN=n(EAe,"A",{href:!0});var qrt=s(EN);x6o=r(qrt,"XGLMModel"),qrt.forEach(t),$6o=r(EAe," (XGLM model)"),EAe.forEach(t),k6o=i($),Ju=n($,"LI",{});var CAe=s(Ju);die=n(CAe,"STRONG",{});var Nrt=s(die);S6o=r(Nrt,"xlm"),Nrt.forEach(t),R6o=r(CAe," \u2014 "),CN=n(CAe,"A",{href:!0});var jrt=s(CN);P6o=r(jrt,"XLMModel"),jrt.forEach(t),B6o=r(CAe," (XLM model)"),CAe.forEach(t),I6o=i($),Yu=n($,"LI",{});var wAe=s(Yu);cie=n(wAe,"STRONG",{});var Drt=s(cie);q6o=r(Drt,"xlm-prophetnet"),Drt.forEach(t),N6o=r(wAe," \u2014 "),wN=n(wAe,"A",{href:!0});var Grt=s(wN);j6o=r(Grt,"XLMProphetNetModel"),Grt.forEach(t),D6o=r(wAe," (XLMProphetNet model)"),wAe.forEach(t),G6o=i($),Ku=n($,"LI",{});var AAe=s(Ku);fie=n(AAe,"STRONG",{});var Ort=s(fie);O6o=r(Ort,"xlm-roberta"),Ort.forEach(t),V6o=r(AAe," \u2014 "),AN=n(AAe,"A",{href:!0});var Vrt=s(AN);X6o=r(Vrt,"XLMRobertaModel"),Vrt.forEach(t),z6o=r(AAe," (XLM-RoBERTa model)"),AAe.forEach(t),W6o=i($),Zu=n($,"LI",{});var yAe=s(Zu);mie=n(yAe,"STRONG",{});var Xrt=s(mie);Q6o=r(Xrt,"xlm-roberta-xl"),Xrt.forEach(t),H6o=r(yAe," \u2014 "),yN=n(yAe,"A",{href:!0});var zrt=s(yN);U6o=r(zrt,"XLMRobertaXLModel"),zrt.forEach(t),J6o=r(yAe," (XLM-RoBERTa-XL model)"),yAe.forEach(t),Y6o=i($),e_=n($,"LI",{});var LAe=s(e_);gie=n(LAe,"STRONG",{});var Wrt=s(gie);K6o=r(Wrt,"xlnet"),Wrt.forEach(t),Z6o=r(LAe," \u2014 "),LN=n(LAe,"A",{href:!0});var Qrt=s(LN);eTo=r(Qrt,"XLNetModel"),Qrt.forEach(t),oTo=r(LAe," (XLNet model)"),LAe.forEach(t),rTo=i($),o_=n($,"LI",{});var xAe=s(o_);hie=n(xAe,"STRONG",{});var Hrt=s(hie);tTo=r(Hrt,"yolos"),Hrt.forEach(t),aTo=r(xAe," \u2014 "),xN=n(xAe,"A",{href:!0});var Urt=s(xN);nTo=r(Urt,"YolosModel"),Urt.forEach(t),sTo=r(xAe," (YOLOS model)"),xAe.forEach(t),lTo=i($),r_=n($,"LI",{});var $Ae=s(r_);pie=n($Ae,"STRONG",{});var Jrt=s(pie);iTo=r(Jrt,"yoso"),Jrt.forEach(t),dTo=r($Ae," \u2014 "),$N=n($Ae,"A",{href:!0});var Yrt=s($N);cTo=r(Yrt,"YosoModel"),Yrt.forEach(t),fTo=r($Ae," (YOSO model)"),$Ae.forEach(t),$.forEach(t),mTo=i(aa),t_=n(aa,"P",{});var kAe=s(t_);gTo=r(kAe,"The model is set in evaluation mode by default using "),uie=n(kAe,"CODE",{});var Krt=s(uie);hTo=r(Krt,"model.eval()"),Krt.forEach(t),pTo=r(kAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(kAe,"CODE",{});var Zrt=s(_ie);uTo=r(Zrt,"model.train()"),Zrt.forEach(t),kAe.forEach(t),_To=i(aa),T(a_.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),mNe=i(f),Pi=n(f,"H2",{class:!0});var bDe=s(Pi);n_=n(bDe,"A",{id:!0,class:!0,href:!0});var ett=s(n_);bie=n(ett,"SPAN",{});var ott=s(bie);T(cA.$$.fragment,ott),ott.forEach(t),ett.forEach(t),bTo=i(bDe),vie=n(bDe,"SPAN",{});var rtt=s(vie);vTo=r(rtt,"AutoModelForPreTraining"),rtt.forEach(t),bDe.forEach(t),gNe=i(f),$o=n(f,"DIV",{class:!0});var Qs=s($o);T(fA.$$.fragment,Qs),FTo=i(Qs),Bi=n(Qs,"P",{});var TZ=s(Bi);TTo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kN=n(TZ,"A",{href:!0});var ttt=s(kN);MTo=r(ttt,"from_pretrained()"),ttt.forEach(t),ETo=r(TZ," class method or the "),SN=n(TZ,"A",{href:!0});var att=s(SN);CTo=r(att,"from_config()"),att.forEach(t),wTo=r(TZ,` class
method.`),TZ.forEach(t),ATo=i(Qs),mA=n(Qs,"P",{});var vDe=s(mA);yTo=r(vDe,"This class cannot be instantiated directly using "),Fie=n(vDe,"CODE",{});var ntt=s(Fie);LTo=r(ntt,"__init__()"),ntt.forEach(t),xTo=r(vDe," (throws an error)."),vDe.forEach(t),$To=i(Qs),st=n(Qs,"DIV",{class:!0});var q3=s(st);T(gA.$$.fragment,q3),kTo=i(q3),Tie=n(q3,"P",{});var stt=s(Tie);STo=r(stt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),stt.forEach(t),RTo=i(q3),Ii=n(q3,"P",{});var MZ=s(Ii);PTo=r(MZ,`Note:
Loading a model from its configuration file does `),Mie=n(MZ,"STRONG",{});var ltt=s(Mie);BTo=r(ltt,"not"),ltt.forEach(t),ITo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=n(MZ,"A",{href:!0});var itt=s(RN);qTo=r(itt,"from_pretrained()"),itt.forEach(t),NTo=r(MZ," to load the model weights."),MZ.forEach(t),jTo=i(q3),T(s_.$$.fragment,q3),q3.forEach(t),DTo=i(Qs),Ye=n(Qs,"DIV",{class:!0});var na=s(Ye);T(hA.$$.fragment,na),GTo=i(na),Eie=n(na,"P",{});var dtt=s(Eie);OTo=r(dtt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dtt.forEach(t),VTo=i(na),Ra=n(na,"P",{});var N3=s(Ra);XTo=r(N3,"The model class to instantiate is selected based on the "),Cie=n(N3,"CODE",{});var ctt=s(Cie);zTo=r(ctt,"model_type"),ctt.forEach(t),WTo=r(N3,` property of the config object (either
passed as an argument or loaded from `),wie=n(N3,"CODE",{});var ftt=s(wie);QTo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),HTo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(N3,"CODE",{});var mtt=s(Aie);UTo=r(mtt,"pretrained_model_name_or_path"),mtt.forEach(t),JTo=r(N3,":"),N3.forEach(t),YTo=i(na),G=n(na,"UL",{});var O=s(G);l_=n(O,"LI",{});var SAe=s(l_);yie=n(SAe,"STRONG",{});var gtt=s(yie);KTo=r(gtt,"albert"),gtt.forEach(t),ZTo=r(SAe," \u2014 "),PN=n(SAe,"A",{href:!0});var htt=s(PN);e8o=r(htt,"AlbertForPreTraining"),htt.forEach(t),o8o=r(SAe," (ALBERT model)"),SAe.forEach(t),r8o=i(O),i_=n(O,"LI",{});var RAe=s(i_);Lie=n(RAe,"STRONG",{});var ptt=s(Lie);t8o=r(ptt,"bart"),ptt.forEach(t),a8o=r(RAe," \u2014 "),BN=n(RAe,"A",{href:!0});var utt=s(BN);n8o=r(utt,"BartForConditionalGeneration"),utt.forEach(t),s8o=r(RAe," (BART model)"),RAe.forEach(t),l8o=i(O),d_=n(O,"LI",{});var PAe=s(d_);xie=n(PAe,"STRONG",{});var _tt=s(xie);i8o=r(_tt,"bert"),_tt.forEach(t),d8o=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var btt=s(IN);c8o=r(btt,"BertForPreTraining"),btt.forEach(t),f8o=r(PAe," (BERT model)"),PAe.forEach(t),m8o=i(O),c_=n(O,"LI",{});var BAe=s(c_);$ie=n(BAe,"STRONG",{});var vtt=s($ie);g8o=r(vtt,"big_bird"),vtt.forEach(t),h8o=r(BAe," \u2014 "),qN=n(BAe,"A",{href:!0});var Ftt=s(qN);p8o=r(Ftt,"BigBirdForPreTraining"),Ftt.forEach(t),u8o=r(BAe," (BigBird model)"),BAe.forEach(t),_8o=i(O),f_=n(O,"LI",{});var IAe=s(f_);kie=n(IAe,"STRONG",{});var Ttt=s(kie);b8o=r(Ttt,"camembert"),Ttt.forEach(t),v8o=r(IAe," \u2014 "),NN=n(IAe,"A",{href:!0});var Mtt=s(NN);F8o=r(Mtt,"CamembertForMaskedLM"),Mtt.forEach(t),T8o=r(IAe," (CamemBERT model)"),IAe.forEach(t),M8o=i(O),m_=n(O,"LI",{});var qAe=s(m_);Sie=n(qAe,"STRONG",{});var Ett=s(Sie);E8o=r(Ett,"ctrl"),Ett.forEach(t),C8o=r(qAe," \u2014 "),jN=n(qAe,"A",{href:!0});var Ctt=s(jN);w8o=r(Ctt,"CTRLLMHeadModel"),Ctt.forEach(t),A8o=r(qAe," (CTRL model)"),qAe.forEach(t),y8o=i(O),g_=n(O,"LI",{});var NAe=s(g_);Rie=n(NAe,"STRONG",{});var wtt=s(Rie);L8o=r(wtt,"data2vec-text"),wtt.forEach(t),x8o=r(NAe," \u2014 "),DN=n(NAe,"A",{href:!0});var Att=s(DN);$8o=r(Att,"Data2VecTextForMaskedLM"),Att.forEach(t),k8o=r(NAe," (Data2VecText model)"),NAe.forEach(t),S8o=i(O),h_=n(O,"LI",{});var jAe=s(h_);Pie=n(jAe,"STRONG",{});var ytt=s(Pie);R8o=r(ytt,"deberta"),ytt.forEach(t),P8o=r(jAe," \u2014 "),GN=n(jAe,"A",{href:!0});var Ltt=s(GN);B8o=r(Ltt,"DebertaForMaskedLM"),Ltt.forEach(t),I8o=r(jAe," (DeBERTa model)"),jAe.forEach(t),q8o=i(O),p_=n(O,"LI",{});var DAe=s(p_);Bie=n(DAe,"STRONG",{});var xtt=s(Bie);N8o=r(xtt,"deberta-v2"),xtt.forEach(t),j8o=r(DAe," \u2014 "),ON=n(DAe,"A",{href:!0});var $tt=s(ON);D8o=r($tt,"DebertaV2ForMaskedLM"),$tt.forEach(t),G8o=r(DAe," (DeBERTa-v2 model)"),DAe.forEach(t),O8o=i(O),u_=n(O,"LI",{});var GAe=s(u_);Iie=n(GAe,"STRONG",{});var ktt=s(Iie);V8o=r(ktt,"distilbert"),ktt.forEach(t),X8o=r(GAe," \u2014 "),VN=n(GAe,"A",{href:!0});var Stt=s(VN);z8o=r(Stt,"DistilBertForMaskedLM"),Stt.forEach(t),W8o=r(GAe," (DistilBERT model)"),GAe.forEach(t),Q8o=i(O),__=n(O,"LI",{});var OAe=s(__);qie=n(OAe,"STRONG",{});var Rtt=s(qie);H8o=r(Rtt,"electra"),Rtt.forEach(t),U8o=r(OAe," \u2014 "),XN=n(OAe,"A",{href:!0});var Ptt=s(XN);J8o=r(Ptt,"ElectraForPreTraining"),Ptt.forEach(t),Y8o=r(OAe," (ELECTRA model)"),OAe.forEach(t),K8o=i(O),b_=n(O,"LI",{});var VAe=s(b_);Nie=n(VAe,"STRONG",{});var Btt=s(Nie);Z8o=r(Btt,"flaubert"),Btt.forEach(t),e7o=r(VAe," \u2014 "),zN=n(VAe,"A",{href:!0});var Itt=s(zN);o7o=r(Itt,"FlaubertWithLMHeadModel"),Itt.forEach(t),r7o=r(VAe," (FlauBERT model)"),VAe.forEach(t),t7o=i(O),v_=n(O,"LI",{});var XAe=s(v_);jie=n(XAe,"STRONG",{});var qtt=s(jie);a7o=r(qtt,"flava"),qtt.forEach(t),n7o=r(XAe," \u2014 "),WN=n(XAe,"A",{href:!0});var Ntt=s(WN);s7o=r(Ntt,"FlavaForPreTraining"),Ntt.forEach(t),l7o=r(XAe," (Flava model)"),XAe.forEach(t),i7o=i(O),F_=n(O,"LI",{});var zAe=s(F_);Die=n(zAe,"STRONG",{});var jtt=s(Die);d7o=r(jtt,"fnet"),jtt.forEach(t),c7o=r(zAe," \u2014 "),QN=n(zAe,"A",{href:!0});var Dtt=s(QN);f7o=r(Dtt,"FNetForPreTraining"),Dtt.forEach(t),m7o=r(zAe," (FNet model)"),zAe.forEach(t),g7o=i(O),T_=n(O,"LI",{});var WAe=s(T_);Gie=n(WAe,"STRONG",{});var Gtt=s(Gie);h7o=r(Gtt,"fsmt"),Gtt.forEach(t),p7o=r(WAe," \u2014 "),HN=n(WAe,"A",{href:!0});var Ott=s(HN);u7o=r(Ott,"FSMTForConditionalGeneration"),Ott.forEach(t),_7o=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),b7o=i(O),M_=n(O,"LI",{});var QAe=s(M_);Oie=n(QAe,"STRONG",{});var Vtt=s(Oie);v7o=r(Vtt,"funnel"),Vtt.forEach(t),F7o=r(QAe," \u2014 "),UN=n(QAe,"A",{href:!0});var Xtt=s(UN);T7o=r(Xtt,"FunnelForPreTraining"),Xtt.forEach(t),M7o=r(QAe," (Funnel Transformer model)"),QAe.forEach(t),E7o=i(O),E_=n(O,"LI",{});var HAe=s(E_);Vie=n(HAe,"STRONG",{});var ztt=s(Vie);C7o=r(ztt,"gpt2"),ztt.forEach(t),w7o=r(HAe," \u2014 "),JN=n(HAe,"A",{href:!0});var Wtt=s(JN);A7o=r(Wtt,"GPT2LMHeadModel"),Wtt.forEach(t),y7o=r(HAe," (OpenAI GPT-2 model)"),HAe.forEach(t),L7o=i(O),C_=n(O,"LI",{});var UAe=s(C_);Xie=n(UAe,"STRONG",{});var Qtt=s(Xie);x7o=r(Qtt,"ibert"),Qtt.forEach(t),$7o=r(UAe," \u2014 "),YN=n(UAe,"A",{href:!0});var Htt=s(YN);k7o=r(Htt,"IBertForMaskedLM"),Htt.forEach(t),S7o=r(UAe," (I-BERT model)"),UAe.forEach(t),R7o=i(O),w_=n(O,"LI",{});var JAe=s(w_);zie=n(JAe,"STRONG",{});var Utt=s(zie);P7o=r(Utt,"layoutlm"),Utt.forEach(t),B7o=r(JAe," \u2014 "),KN=n(JAe,"A",{href:!0});var Jtt=s(KN);I7o=r(Jtt,"LayoutLMForMaskedLM"),Jtt.forEach(t),q7o=r(JAe," (LayoutLM model)"),JAe.forEach(t),N7o=i(O),A_=n(O,"LI",{});var YAe=s(A_);Wie=n(YAe,"STRONG",{});var Ytt=s(Wie);j7o=r(Ytt,"longformer"),Ytt.forEach(t),D7o=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var Ktt=s(ZN);G7o=r(Ktt,"LongformerForMaskedLM"),Ktt.forEach(t),O7o=r(YAe," (Longformer model)"),YAe.forEach(t),V7o=i(O),y_=n(O,"LI",{});var KAe=s(y_);Qie=n(KAe,"STRONG",{});var Ztt=s(Qie);X7o=r(Ztt,"lxmert"),Ztt.forEach(t),z7o=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var eat=s(ej);W7o=r(eat,"LxmertForPreTraining"),eat.forEach(t),Q7o=r(KAe," (LXMERT model)"),KAe.forEach(t),H7o=i(O),L_=n(O,"LI",{});var ZAe=s(L_);Hie=n(ZAe,"STRONG",{});var oat=s(Hie);U7o=r(oat,"megatron-bert"),oat.forEach(t),J7o=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var rat=s(oj);Y7o=r(rat,"MegatronBertForPreTraining"),rat.forEach(t),K7o=r(ZAe," (MegatronBert model)"),ZAe.forEach(t),Z7o=i(O),x_=n(O,"LI",{});var eye=s(x_);Uie=n(eye,"STRONG",{});var tat=s(Uie);eMo=r(tat,"mobilebert"),tat.forEach(t),oMo=r(eye," \u2014 "),rj=n(eye,"A",{href:!0});var aat=s(rj);rMo=r(aat,"MobileBertForPreTraining"),aat.forEach(t),tMo=r(eye," (MobileBERT model)"),eye.forEach(t),aMo=i(O),$_=n(O,"LI",{});var oye=s($_);Jie=n(oye,"STRONG",{});var nat=s(Jie);nMo=r(nat,"mpnet"),nat.forEach(t),sMo=r(oye," \u2014 "),tj=n(oye,"A",{href:!0});var sat=s(tj);lMo=r(sat,"MPNetForMaskedLM"),sat.forEach(t),iMo=r(oye," (MPNet model)"),oye.forEach(t),dMo=i(O),k_=n(O,"LI",{});var rye=s(k_);Yie=n(rye,"STRONG",{});var lat=s(Yie);cMo=r(lat,"openai-gpt"),lat.forEach(t),fMo=r(rye," \u2014 "),aj=n(rye,"A",{href:!0});var iat=s(aj);mMo=r(iat,"OpenAIGPTLMHeadModel"),iat.forEach(t),gMo=r(rye," (OpenAI GPT model)"),rye.forEach(t),hMo=i(O),S_=n(O,"LI",{});var tye=s(S_);Kie=n(tye,"STRONG",{});var dat=s(Kie);pMo=r(dat,"retribert"),dat.forEach(t),uMo=r(tye," \u2014 "),nj=n(tye,"A",{href:!0});var cat=s(nj);_Mo=r(cat,"RetriBertModel"),cat.forEach(t),bMo=r(tye," (RetriBERT model)"),tye.forEach(t),vMo=i(O),R_=n(O,"LI",{});var aye=s(R_);Zie=n(aye,"STRONG",{});var fat=s(Zie);FMo=r(fat,"roberta"),fat.forEach(t),TMo=r(aye," \u2014 "),sj=n(aye,"A",{href:!0});var mat=s(sj);MMo=r(mat,"RobertaForMaskedLM"),mat.forEach(t),EMo=r(aye," (RoBERTa model)"),aye.forEach(t),CMo=i(O),P_=n(O,"LI",{});var nye=s(P_);ede=n(nye,"STRONG",{});var gat=s(ede);wMo=r(gat,"splinter"),gat.forEach(t),AMo=r(nye," \u2014 "),lj=n(nye,"A",{href:!0});var hat=s(lj);yMo=r(hat,"SplinterForPreTraining"),hat.forEach(t),LMo=r(nye," (Splinter model)"),nye.forEach(t),xMo=i(O),B_=n(O,"LI",{});var sye=s(B_);ode=n(sye,"STRONG",{});var pat=s(ode);$Mo=r(pat,"squeezebert"),pat.forEach(t),kMo=r(sye," \u2014 "),ij=n(sye,"A",{href:!0});var uat=s(ij);SMo=r(uat,"SqueezeBertForMaskedLM"),uat.forEach(t),RMo=r(sye," (SqueezeBERT model)"),sye.forEach(t),PMo=i(O),I_=n(O,"LI",{});var lye=s(I_);rde=n(lye,"STRONG",{});var _at=s(rde);BMo=r(_at,"t5"),_at.forEach(t),IMo=r(lye," \u2014 "),dj=n(lye,"A",{href:!0});var bat=s(dj);qMo=r(bat,"T5ForConditionalGeneration"),bat.forEach(t),NMo=r(lye," (T5 model)"),lye.forEach(t),jMo=i(O),q_=n(O,"LI",{});var iye=s(q_);tde=n(iye,"STRONG",{});var vat=s(tde);DMo=r(vat,"tapas"),vat.forEach(t),GMo=r(iye," \u2014 "),cj=n(iye,"A",{href:!0});var Fat=s(cj);OMo=r(Fat,"TapasForMaskedLM"),Fat.forEach(t),VMo=r(iye," (TAPAS model)"),iye.forEach(t),XMo=i(O),N_=n(O,"LI",{});var dye=s(N_);ade=n(dye,"STRONG",{});var Tat=s(ade);zMo=r(Tat,"transfo-xl"),Tat.forEach(t),WMo=r(dye," \u2014 "),fj=n(dye,"A",{href:!0});var Mat=s(fj);QMo=r(Mat,"TransfoXLLMHeadModel"),Mat.forEach(t),HMo=r(dye," (Transformer-XL model)"),dye.forEach(t),UMo=i(O),j_=n(O,"LI",{});var cye=s(j_);nde=n(cye,"STRONG",{});var Eat=s(nde);JMo=r(Eat,"unispeech"),Eat.forEach(t),YMo=r(cye," \u2014 "),mj=n(cye,"A",{href:!0});var Cat=s(mj);KMo=r(Cat,"UniSpeechForPreTraining"),Cat.forEach(t),ZMo=r(cye," (UniSpeech model)"),cye.forEach(t),e4o=i(O),D_=n(O,"LI",{});var fye=s(D_);sde=n(fye,"STRONG",{});var wat=s(sde);o4o=r(wat,"unispeech-sat"),wat.forEach(t),r4o=r(fye," \u2014 "),gj=n(fye,"A",{href:!0});var Aat=s(gj);t4o=r(Aat,"UniSpeechSatForPreTraining"),Aat.forEach(t),a4o=r(fye," (UniSpeechSat model)"),fye.forEach(t),n4o=i(O),G_=n(O,"LI",{});var mye=s(G_);lde=n(mye,"STRONG",{});var yat=s(lde);s4o=r(yat,"visual_bert"),yat.forEach(t),l4o=r(mye," \u2014 "),hj=n(mye,"A",{href:!0});var Lat=s(hj);i4o=r(Lat,"VisualBertForPreTraining"),Lat.forEach(t),d4o=r(mye," (VisualBert model)"),mye.forEach(t),c4o=i(O),O_=n(O,"LI",{});var gye=s(O_);ide=n(gye,"STRONG",{});var xat=s(ide);f4o=r(xat,"vit_mae"),xat.forEach(t),m4o=r(gye," \u2014 "),pj=n(gye,"A",{href:!0});var $at=s(pj);g4o=r($at,"ViTMAEForPreTraining"),$at.forEach(t),h4o=r(gye," (ViTMAE model)"),gye.forEach(t),p4o=i(O),V_=n(O,"LI",{});var hye=s(V_);dde=n(hye,"STRONG",{});var kat=s(dde);u4o=r(kat,"wav2vec2"),kat.forEach(t),_4o=r(hye," \u2014 "),uj=n(hye,"A",{href:!0});var Sat=s(uj);b4o=r(Sat,"Wav2Vec2ForPreTraining"),Sat.forEach(t),v4o=r(hye," (Wav2Vec2 model)"),hye.forEach(t),F4o=i(O),X_=n(O,"LI",{});var pye=s(X_);cde=n(pye,"STRONG",{});var Rat=s(cde);T4o=r(Rat,"wav2vec2-conformer"),Rat.forEach(t),M4o=r(pye," \u2014 "),_j=n(pye,"A",{href:!0});var Pat=s(_j);E4o=r(Pat,"Wav2Vec2ConformerForPreTraining"),Pat.forEach(t),C4o=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),w4o=i(O),z_=n(O,"LI",{});var uye=s(z_);fde=n(uye,"STRONG",{});var Bat=s(fde);A4o=r(Bat,"xlm"),Bat.forEach(t),y4o=r(uye," \u2014 "),bj=n(uye,"A",{href:!0});var Iat=s(bj);L4o=r(Iat,"XLMWithLMHeadModel"),Iat.forEach(t),x4o=r(uye," (XLM model)"),uye.forEach(t),$4o=i(O),W_=n(O,"LI",{});var _ye=s(W_);mde=n(_ye,"STRONG",{});var qat=s(mde);k4o=r(qat,"xlm-roberta"),qat.forEach(t),S4o=r(_ye," \u2014 "),vj=n(_ye,"A",{href:!0});var Nat=s(vj);R4o=r(Nat,"XLMRobertaForMaskedLM"),Nat.forEach(t),P4o=r(_ye," (XLM-RoBERTa model)"),_ye.forEach(t),B4o=i(O),Q_=n(O,"LI",{});var bye=s(Q_);gde=n(bye,"STRONG",{});var jat=s(gde);I4o=r(jat,"xlm-roberta-xl"),jat.forEach(t),q4o=r(bye," \u2014 "),Fj=n(bye,"A",{href:!0});var Dat=s(Fj);N4o=r(Dat,"XLMRobertaXLForMaskedLM"),Dat.forEach(t),j4o=r(bye," (XLM-RoBERTa-XL model)"),bye.forEach(t),D4o=i(O),H_=n(O,"LI",{});var vye=s(H_);hde=n(vye,"STRONG",{});var Gat=s(hde);G4o=r(Gat,"xlnet"),Gat.forEach(t),O4o=r(vye," \u2014 "),Tj=n(vye,"A",{href:!0});var Oat=s(Tj);V4o=r(Oat,"XLNetLMHeadModel"),Oat.forEach(t),X4o=r(vye," (XLNet model)"),vye.forEach(t),O.forEach(t),z4o=i(na),U_=n(na,"P",{});var Fye=s(U_);W4o=r(Fye,"The model is set in evaluation mode by default using "),pde=n(Fye,"CODE",{});var Vat=s(pde);Q4o=r(Vat,"model.eval()"),Vat.forEach(t),H4o=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=n(Fye,"CODE",{});var Xat=s(ude);U4o=r(Xat,"model.train()"),Xat.forEach(t),Fye.forEach(t),J4o=i(na),T(J_.$$.fragment,na),na.forEach(t),Qs.forEach(t),hNe=i(f),qi=n(f,"H2",{class:!0});var FDe=s(qi);Y_=n(FDe,"A",{id:!0,class:!0,href:!0});var zat=s(Y_);_de=n(zat,"SPAN",{});var Wat=s(_de);T(pA.$$.fragment,Wat),Wat.forEach(t),zat.forEach(t),Y4o=i(FDe),bde=n(FDe,"SPAN",{});var Qat=s(bde);K4o=r(Qat,"AutoModelForCausalLM"),Qat.forEach(t),FDe.forEach(t),pNe=i(f),ko=n(f,"DIV",{class:!0});var Hs=s(ko);T(uA.$$.fragment,Hs),Z4o=i(Hs),Ni=n(Hs,"P",{});var EZ=s(Ni);eEo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=n(EZ,"A",{href:!0});var Hat=s(Mj);oEo=r(Hat,"from_pretrained()"),Hat.forEach(t),rEo=r(EZ," class method or the "),Ej=n(EZ,"A",{href:!0});var Uat=s(Ej);tEo=r(Uat,"from_config()"),Uat.forEach(t),aEo=r(EZ,` class
method.`),EZ.forEach(t),nEo=i(Hs),_A=n(Hs,"P",{});var TDe=s(_A);sEo=r(TDe,"This class cannot be instantiated directly using "),vde=n(TDe,"CODE",{});var Jat=s(vde);lEo=r(Jat,"__init__()"),Jat.forEach(t),iEo=r(TDe," (throws an error)."),TDe.forEach(t),dEo=i(Hs),lt=n(Hs,"DIV",{class:!0});var j3=s(lt);T(bA.$$.fragment,j3),cEo=i(j3),Fde=n(j3,"P",{});var Yat=s(Fde);fEo=r(Yat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Yat.forEach(t),mEo=i(j3),ji=n(j3,"P",{});var CZ=s(ji);gEo=r(CZ,`Note:
Loading a model from its configuration file does `),Tde=n(CZ,"STRONG",{});var Kat=s(Tde);hEo=r(Kat,"not"),Kat.forEach(t),pEo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(CZ,"A",{href:!0});var Zat=s(Cj);uEo=r(Zat,"from_pretrained()"),Zat.forEach(t),_Eo=r(CZ," to load the model weights."),CZ.forEach(t),bEo=i(j3),T(K_.$$.fragment,j3),j3.forEach(t),vEo=i(Hs),Ke=n(Hs,"DIV",{class:!0});var sa=s(Ke);T(vA.$$.fragment,sa),FEo=i(sa),Mde=n(sa,"P",{});var ent=s(Mde);TEo=r(ent,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ent.forEach(t),MEo=i(sa),Pa=n(sa,"P",{});var D3=s(Pa);EEo=r(D3,"The model class to instantiate is selected based on the "),Ede=n(D3,"CODE",{});var ont=s(Ede);CEo=r(ont,"model_type"),ont.forEach(t),wEo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Cde=n(D3,"CODE",{});var rnt=s(Cde);AEo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),yEo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(D3,"CODE",{});var tnt=s(wde);LEo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),xEo=r(D3,":"),D3.forEach(t),$Eo=i(sa),z=n(sa,"UL",{});var Q=s(z);Z_=n(Q,"LI",{});var Tye=s(Z_);Ade=n(Tye,"STRONG",{});var ant=s(Ade);kEo=r(ant,"bart"),ant.forEach(t),SEo=r(Tye," \u2014 "),wj=n(Tye,"A",{href:!0});var nnt=s(wj);REo=r(nnt,"BartForCausalLM"),nnt.forEach(t),PEo=r(Tye," (BART model)"),Tye.forEach(t),BEo=i(Q),e2=n(Q,"LI",{});var Mye=s(e2);yde=n(Mye,"STRONG",{});var snt=s(yde);IEo=r(snt,"bert"),snt.forEach(t),qEo=r(Mye," \u2014 "),Aj=n(Mye,"A",{href:!0});var lnt=s(Aj);NEo=r(lnt,"BertLMHeadModel"),lnt.forEach(t),jEo=r(Mye," (BERT model)"),Mye.forEach(t),DEo=i(Q),o2=n(Q,"LI",{});var Eye=s(o2);Lde=n(Eye,"STRONG",{});var int=s(Lde);GEo=r(int,"bert-generation"),int.forEach(t),OEo=r(Eye," \u2014 "),yj=n(Eye,"A",{href:!0});var dnt=s(yj);VEo=r(dnt,"BertGenerationDecoder"),dnt.forEach(t),XEo=r(Eye," (Bert Generation model)"),Eye.forEach(t),zEo=i(Q),r2=n(Q,"LI",{});var Cye=s(r2);xde=n(Cye,"STRONG",{});var cnt=s(xde);WEo=r(cnt,"big_bird"),cnt.forEach(t),QEo=r(Cye," \u2014 "),Lj=n(Cye,"A",{href:!0});var fnt=s(Lj);HEo=r(fnt,"BigBirdForCausalLM"),fnt.forEach(t),UEo=r(Cye," (BigBird model)"),Cye.forEach(t),JEo=i(Q),t2=n(Q,"LI",{});var wye=s(t2);$de=n(wye,"STRONG",{});var mnt=s($de);YEo=r(mnt,"bigbird_pegasus"),mnt.forEach(t),KEo=r(wye," \u2014 "),xj=n(wye,"A",{href:!0});var gnt=s(xj);ZEo=r(gnt,"BigBirdPegasusForCausalLM"),gnt.forEach(t),eCo=r(wye," (BigBirdPegasus model)"),wye.forEach(t),oCo=i(Q),a2=n(Q,"LI",{});var Aye=s(a2);kde=n(Aye,"STRONG",{});var hnt=s(kde);rCo=r(hnt,"blenderbot"),hnt.forEach(t),tCo=r(Aye," \u2014 "),$j=n(Aye,"A",{href:!0});var pnt=s($j);aCo=r(pnt,"BlenderbotForCausalLM"),pnt.forEach(t),nCo=r(Aye," (Blenderbot model)"),Aye.forEach(t),sCo=i(Q),n2=n(Q,"LI",{});var yye=s(n2);Sde=n(yye,"STRONG",{});var unt=s(Sde);lCo=r(unt,"blenderbot-small"),unt.forEach(t),iCo=r(yye," \u2014 "),kj=n(yye,"A",{href:!0});var _nt=s(kj);dCo=r(_nt,"BlenderbotSmallForCausalLM"),_nt.forEach(t),cCo=r(yye," (BlenderbotSmall model)"),yye.forEach(t),fCo=i(Q),s2=n(Q,"LI",{});var Lye=s(s2);Rde=n(Lye,"STRONG",{});var bnt=s(Rde);mCo=r(bnt,"camembert"),bnt.forEach(t),gCo=r(Lye," \u2014 "),Sj=n(Lye,"A",{href:!0});var vnt=s(Sj);hCo=r(vnt,"CamembertForCausalLM"),vnt.forEach(t),pCo=r(Lye," (CamemBERT model)"),Lye.forEach(t),uCo=i(Q),l2=n(Q,"LI",{});var xye=s(l2);Pde=n(xye,"STRONG",{});var Fnt=s(Pde);_Co=r(Fnt,"ctrl"),Fnt.forEach(t),bCo=r(xye," \u2014 "),Rj=n(xye,"A",{href:!0});var Tnt=s(Rj);vCo=r(Tnt,"CTRLLMHeadModel"),Tnt.forEach(t),FCo=r(xye," (CTRL model)"),xye.forEach(t),TCo=i(Q),i2=n(Q,"LI",{});var $ye=s(i2);Bde=n($ye,"STRONG",{});var Mnt=s(Bde);MCo=r(Mnt,"data2vec-text"),Mnt.forEach(t),ECo=r($ye," \u2014 "),Pj=n($ye,"A",{href:!0});var Ent=s(Pj);CCo=r(Ent,"Data2VecTextForCausalLM"),Ent.forEach(t),wCo=r($ye," (Data2VecText model)"),$ye.forEach(t),ACo=i(Q),d2=n(Q,"LI",{});var kye=s(d2);Ide=n(kye,"STRONG",{});var Cnt=s(Ide);yCo=r(Cnt,"electra"),Cnt.forEach(t),LCo=r(kye," \u2014 "),Bj=n(kye,"A",{href:!0});var wnt=s(Bj);xCo=r(wnt,"ElectraForCausalLM"),wnt.forEach(t),$Co=r(kye," (ELECTRA model)"),kye.forEach(t),kCo=i(Q),c2=n(Q,"LI",{});var Sye=s(c2);qde=n(Sye,"STRONG",{});var Ant=s(qde);SCo=r(Ant,"gpt2"),Ant.forEach(t),RCo=r(Sye," \u2014 "),Ij=n(Sye,"A",{href:!0});var ynt=s(Ij);PCo=r(ynt,"GPT2LMHeadModel"),ynt.forEach(t),BCo=r(Sye," (OpenAI GPT-2 model)"),Sye.forEach(t),ICo=i(Q),f2=n(Q,"LI",{});var Rye=s(f2);Nde=n(Rye,"STRONG",{});var Lnt=s(Nde);qCo=r(Lnt,"gpt_neo"),Lnt.forEach(t),NCo=r(Rye," \u2014 "),qj=n(Rye,"A",{href:!0});var xnt=s(qj);jCo=r(xnt,"GPTNeoForCausalLM"),xnt.forEach(t),DCo=r(Rye," (GPT Neo model)"),Rye.forEach(t),GCo=i(Q),m2=n(Q,"LI",{});var Pye=s(m2);jde=n(Pye,"STRONG",{});var $nt=s(jde);OCo=r($nt,"gptj"),$nt.forEach(t),VCo=r(Pye," \u2014 "),Nj=n(Pye,"A",{href:!0});var knt=s(Nj);XCo=r(knt,"GPTJForCausalLM"),knt.forEach(t),zCo=r(Pye," (GPT-J model)"),Pye.forEach(t),WCo=i(Q),g2=n(Q,"LI",{});var Bye=s(g2);Dde=n(Bye,"STRONG",{});var Snt=s(Dde);QCo=r(Snt,"marian"),Snt.forEach(t),HCo=r(Bye," \u2014 "),jj=n(Bye,"A",{href:!0});var Rnt=s(jj);UCo=r(Rnt,"MarianForCausalLM"),Rnt.forEach(t),JCo=r(Bye," (Marian model)"),Bye.forEach(t),YCo=i(Q),h2=n(Q,"LI",{});var Iye=s(h2);Gde=n(Iye,"STRONG",{});var Pnt=s(Gde);KCo=r(Pnt,"mbart"),Pnt.forEach(t),ZCo=r(Iye," \u2014 "),Dj=n(Iye,"A",{href:!0});var Bnt=s(Dj);e5o=r(Bnt,"MBartForCausalLM"),Bnt.forEach(t),o5o=r(Iye," (mBART model)"),Iye.forEach(t),r5o=i(Q),p2=n(Q,"LI",{});var qye=s(p2);Ode=n(qye,"STRONG",{});var Int=s(Ode);t5o=r(Int,"megatron-bert"),Int.forEach(t),a5o=r(qye," \u2014 "),Gj=n(qye,"A",{href:!0});var qnt=s(Gj);n5o=r(qnt,"MegatronBertForCausalLM"),qnt.forEach(t),s5o=r(qye," (MegatronBert model)"),qye.forEach(t),l5o=i(Q),u2=n(Q,"LI",{});var Nye=s(u2);Vde=n(Nye,"STRONG",{});var Nnt=s(Vde);i5o=r(Nnt,"openai-gpt"),Nnt.forEach(t),d5o=r(Nye," \u2014 "),Oj=n(Nye,"A",{href:!0});var jnt=s(Oj);c5o=r(jnt,"OpenAIGPTLMHeadModel"),jnt.forEach(t),f5o=r(Nye," (OpenAI GPT model)"),Nye.forEach(t),m5o=i(Q),_2=n(Q,"LI",{});var jye=s(_2);Xde=n(jye,"STRONG",{});var Dnt=s(Xde);g5o=r(Dnt,"opt"),Dnt.forEach(t),h5o=r(jye," \u2014 "),Vj=n(jye,"A",{href:!0});var Gnt=s(Vj);p5o=r(Gnt,"OPTForCausalLM"),Gnt.forEach(t),u5o=r(jye," (OPT model)"),jye.forEach(t),_5o=i(Q),b2=n(Q,"LI",{});var Dye=s(b2);zde=n(Dye,"STRONG",{});var Ont=s(zde);b5o=r(Ont,"pegasus"),Ont.forEach(t),v5o=r(Dye," \u2014 "),Xj=n(Dye,"A",{href:!0});var Vnt=s(Xj);F5o=r(Vnt,"PegasusForCausalLM"),Vnt.forEach(t),T5o=r(Dye," (Pegasus model)"),Dye.forEach(t),M5o=i(Q),v2=n(Q,"LI",{});var Gye=s(v2);Wde=n(Gye,"STRONG",{});var Xnt=s(Wde);E5o=r(Xnt,"plbart"),Xnt.forEach(t),C5o=r(Gye," \u2014 "),zj=n(Gye,"A",{href:!0});var znt=s(zj);w5o=r(znt,"PLBartForCausalLM"),znt.forEach(t),A5o=r(Gye," (PLBart model)"),Gye.forEach(t),y5o=i(Q),F2=n(Q,"LI",{});var Oye=s(F2);Qde=n(Oye,"STRONG",{});var Wnt=s(Qde);L5o=r(Wnt,"prophetnet"),Wnt.forEach(t),x5o=r(Oye," \u2014 "),Wj=n(Oye,"A",{href:!0});var Qnt=s(Wj);$5o=r(Qnt,"ProphetNetForCausalLM"),Qnt.forEach(t),k5o=r(Oye," (ProphetNet model)"),Oye.forEach(t),S5o=i(Q),T2=n(Q,"LI",{});var Vye=s(T2);Hde=n(Vye,"STRONG",{});var Hnt=s(Hde);R5o=r(Hnt,"qdqbert"),Hnt.forEach(t),P5o=r(Vye," \u2014 "),Qj=n(Vye,"A",{href:!0});var Unt=s(Qj);B5o=r(Unt,"QDQBertLMHeadModel"),Unt.forEach(t),I5o=r(Vye," (QDQBert model)"),Vye.forEach(t),q5o=i(Q),M2=n(Q,"LI",{});var Xye=s(M2);Ude=n(Xye,"STRONG",{});var Jnt=s(Ude);N5o=r(Jnt,"reformer"),Jnt.forEach(t),j5o=r(Xye," \u2014 "),Hj=n(Xye,"A",{href:!0});var Ynt=s(Hj);D5o=r(Ynt,"ReformerModelWithLMHead"),Ynt.forEach(t),G5o=r(Xye," (Reformer model)"),Xye.forEach(t),O5o=i(Q),E2=n(Q,"LI",{});var zye=s(E2);Jde=n(zye,"STRONG",{});var Knt=s(Jde);V5o=r(Knt,"rembert"),Knt.forEach(t),X5o=r(zye," \u2014 "),Uj=n(zye,"A",{href:!0});var Znt=s(Uj);z5o=r(Znt,"RemBertForCausalLM"),Znt.forEach(t),W5o=r(zye," (RemBERT model)"),zye.forEach(t),Q5o=i(Q),C2=n(Q,"LI",{});var Wye=s(C2);Yde=n(Wye,"STRONG",{});var est=s(Yde);H5o=r(est,"roberta"),est.forEach(t),U5o=r(Wye," \u2014 "),Jj=n(Wye,"A",{href:!0});var ost=s(Jj);J5o=r(ost,"RobertaForCausalLM"),ost.forEach(t),Y5o=r(Wye," (RoBERTa model)"),Wye.forEach(t),K5o=i(Q),w2=n(Q,"LI",{});var Qye=s(w2);Kde=n(Qye,"STRONG",{});var rst=s(Kde);Z5o=r(rst,"roformer"),rst.forEach(t),e3o=r(Qye," \u2014 "),Yj=n(Qye,"A",{href:!0});var tst=s(Yj);o3o=r(tst,"RoFormerForCausalLM"),tst.forEach(t),r3o=r(Qye," (RoFormer model)"),Qye.forEach(t),t3o=i(Q),A2=n(Q,"LI",{});var Hye=s(A2);Zde=n(Hye,"STRONG",{});var ast=s(Zde);a3o=r(ast,"speech_to_text_2"),ast.forEach(t),n3o=r(Hye," \u2014 "),Kj=n(Hye,"A",{href:!0});var nst=s(Kj);s3o=r(nst,"Speech2Text2ForCausalLM"),nst.forEach(t),l3o=r(Hye," (Speech2Text2 model)"),Hye.forEach(t),i3o=i(Q),y2=n(Q,"LI",{});var Uye=s(y2);ece=n(Uye,"STRONG",{});var sst=s(ece);d3o=r(sst,"transfo-xl"),sst.forEach(t),c3o=r(Uye," \u2014 "),Zj=n(Uye,"A",{href:!0});var lst=s(Zj);f3o=r(lst,"TransfoXLLMHeadModel"),lst.forEach(t),m3o=r(Uye," (Transformer-XL model)"),Uye.forEach(t),g3o=i(Q),L2=n(Q,"LI",{});var Jye=s(L2);oce=n(Jye,"STRONG",{});var ist=s(oce);h3o=r(ist,"trocr"),ist.forEach(t),p3o=r(Jye," \u2014 "),eD=n(Jye,"A",{href:!0});var dst=s(eD);u3o=r(dst,"TrOCRForCausalLM"),dst.forEach(t),_3o=r(Jye," (TrOCR model)"),Jye.forEach(t),b3o=i(Q),x2=n(Q,"LI",{});var Yye=s(x2);rce=n(Yye,"STRONG",{});var cst=s(rce);v3o=r(cst,"xglm"),cst.forEach(t),F3o=r(Yye," \u2014 "),oD=n(Yye,"A",{href:!0});var fst=s(oD);T3o=r(fst,"XGLMForCausalLM"),fst.forEach(t),M3o=r(Yye," (XGLM model)"),Yye.forEach(t),E3o=i(Q),$2=n(Q,"LI",{});var Kye=s($2);tce=n(Kye,"STRONG",{});var mst=s(tce);C3o=r(mst,"xlm"),mst.forEach(t),w3o=r(Kye," \u2014 "),rD=n(Kye,"A",{href:!0});var gst=s(rD);A3o=r(gst,"XLMWithLMHeadModel"),gst.forEach(t),y3o=r(Kye," (XLM model)"),Kye.forEach(t),L3o=i(Q),k2=n(Q,"LI",{});var Zye=s(k2);ace=n(Zye,"STRONG",{});var hst=s(ace);x3o=r(hst,"xlm-prophetnet"),hst.forEach(t),$3o=r(Zye," \u2014 "),tD=n(Zye,"A",{href:!0});var pst=s(tD);k3o=r(pst,"XLMProphetNetForCausalLM"),pst.forEach(t),S3o=r(Zye," (XLMProphetNet model)"),Zye.forEach(t),R3o=i(Q),S2=n(Q,"LI",{});var eLe=s(S2);nce=n(eLe,"STRONG",{});var ust=s(nce);P3o=r(ust,"xlm-roberta"),ust.forEach(t),B3o=r(eLe," \u2014 "),aD=n(eLe,"A",{href:!0});var _st=s(aD);I3o=r(_st,"XLMRobertaForCausalLM"),_st.forEach(t),q3o=r(eLe," (XLM-RoBERTa model)"),eLe.forEach(t),N3o=i(Q),R2=n(Q,"LI",{});var oLe=s(R2);sce=n(oLe,"STRONG",{});var bst=s(sce);j3o=r(bst,"xlm-roberta-xl"),bst.forEach(t),D3o=r(oLe," \u2014 "),nD=n(oLe,"A",{href:!0});var vst=s(nD);G3o=r(vst,"XLMRobertaXLForCausalLM"),vst.forEach(t),O3o=r(oLe," (XLM-RoBERTa-XL model)"),oLe.forEach(t),V3o=i(Q),P2=n(Q,"LI",{});var rLe=s(P2);lce=n(rLe,"STRONG",{});var Fst=s(lce);X3o=r(Fst,"xlnet"),Fst.forEach(t),z3o=r(rLe," \u2014 "),sD=n(rLe,"A",{href:!0});var Tst=s(sD);W3o=r(Tst,"XLNetLMHeadModel"),Tst.forEach(t),Q3o=r(rLe," (XLNet model)"),rLe.forEach(t),Q.forEach(t),H3o=i(sa),B2=n(sa,"P",{});var tLe=s(B2);U3o=r(tLe,"The model is set in evaluation mode by default using "),ice=n(tLe,"CODE",{});var Mst=s(ice);J3o=r(Mst,"model.eval()"),Mst.forEach(t),Y3o=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(tLe,"CODE",{});var Est=s(dce);K3o=r(Est,"model.train()"),Est.forEach(t),tLe.forEach(t),Z3o=i(sa),T(I2.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),uNe=i(f),Di=n(f,"H2",{class:!0});var MDe=s(Di);q2=n(MDe,"A",{id:!0,class:!0,href:!0});var Cst=s(q2);cce=n(Cst,"SPAN",{});var wst=s(cce);T(FA.$$.fragment,wst),wst.forEach(t),Cst.forEach(t),ewo=i(MDe),fce=n(MDe,"SPAN",{});var Ast=s(fce);owo=r(Ast,"AutoModelForMaskedLM"),Ast.forEach(t),MDe.forEach(t),_Ne=i(f),So=n(f,"DIV",{class:!0});var Us=s(So);T(TA.$$.fragment,Us),rwo=i(Us),Gi=n(Us,"P",{});var wZ=s(Gi);two=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lD=n(wZ,"A",{href:!0});var yst=s(lD);awo=r(yst,"from_pretrained()"),yst.forEach(t),nwo=r(wZ," class method or the "),iD=n(wZ,"A",{href:!0});var Lst=s(iD);swo=r(Lst,"from_config()"),Lst.forEach(t),lwo=r(wZ,` class
method.`),wZ.forEach(t),iwo=i(Us),MA=n(Us,"P",{});var EDe=s(MA);dwo=r(EDe,"This class cannot be instantiated directly using "),mce=n(EDe,"CODE",{});var xst=s(mce);cwo=r(xst,"__init__()"),xst.forEach(t),fwo=r(EDe," (throws an error)."),EDe.forEach(t),mwo=i(Us),it=n(Us,"DIV",{class:!0});var G3=s(it);T(EA.$$.fragment,G3),gwo=i(G3),gce=n(G3,"P",{});var $st=s(gce);hwo=r($st,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$st.forEach(t),pwo=i(G3),Oi=n(G3,"P",{});var AZ=s(Oi);uwo=r(AZ,`Note:
Loading a model from its configuration file does `),hce=n(AZ,"STRONG",{});var kst=s(hce);_wo=r(kst,"not"),kst.forEach(t),bwo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dD=n(AZ,"A",{href:!0});var Sst=s(dD);vwo=r(Sst,"from_pretrained()"),Sst.forEach(t),Fwo=r(AZ," to load the model weights."),AZ.forEach(t),Two=i(G3),T(N2.$$.fragment,G3),G3.forEach(t),Mwo=i(Us),Ze=n(Us,"DIV",{class:!0});var la=s(Ze);T(CA.$$.fragment,la),Ewo=i(la),pce=n(la,"P",{});var Rst=s(pce);Cwo=r(Rst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rst.forEach(t),wwo=i(la),Ba=n(la,"P",{});var O3=s(Ba);Awo=r(O3,"The model class to instantiate is selected based on the "),uce=n(O3,"CODE",{});var Pst=s(uce);ywo=r(Pst,"model_type"),Pst.forEach(t),Lwo=r(O3,` property of the config object (either
passed as an argument or loaded from `),_ce=n(O3,"CODE",{});var Bst=s(_ce);xwo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),$wo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(O3,"CODE",{});var Ist=s(bce);kwo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),Swo=r(O3,":"),O3.forEach(t),Rwo=i(la),W=n(la,"UL",{});var H=s(W);j2=n(H,"LI",{});var aLe=s(j2);vce=n(aLe,"STRONG",{});var qst=s(vce);Pwo=r(qst,"albert"),qst.forEach(t),Bwo=r(aLe," \u2014 "),cD=n(aLe,"A",{href:!0});var Nst=s(cD);Iwo=r(Nst,"AlbertForMaskedLM"),Nst.forEach(t),qwo=r(aLe," (ALBERT model)"),aLe.forEach(t),Nwo=i(H),D2=n(H,"LI",{});var nLe=s(D2);Fce=n(nLe,"STRONG",{});var jst=s(Fce);jwo=r(jst,"bart"),jst.forEach(t),Dwo=r(nLe," \u2014 "),fD=n(nLe,"A",{href:!0});var Dst=s(fD);Gwo=r(Dst,"BartForConditionalGeneration"),Dst.forEach(t),Owo=r(nLe," (BART model)"),nLe.forEach(t),Vwo=i(H),G2=n(H,"LI",{});var sLe=s(G2);Tce=n(sLe,"STRONG",{});var Gst=s(Tce);Xwo=r(Gst,"bert"),Gst.forEach(t),zwo=r(sLe," \u2014 "),mD=n(sLe,"A",{href:!0});var Ost=s(mD);Wwo=r(Ost,"BertForMaskedLM"),Ost.forEach(t),Qwo=r(sLe," (BERT model)"),sLe.forEach(t),Hwo=i(H),O2=n(H,"LI",{});var lLe=s(O2);Mce=n(lLe,"STRONG",{});var Vst=s(Mce);Uwo=r(Vst,"big_bird"),Vst.forEach(t),Jwo=r(lLe," \u2014 "),gD=n(lLe,"A",{href:!0});var Xst=s(gD);Ywo=r(Xst,"BigBirdForMaskedLM"),Xst.forEach(t),Kwo=r(lLe," (BigBird model)"),lLe.forEach(t),Zwo=i(H),V2=n(H,"LI",{});var iLe=s(V2);Ece=n(iLe,"STRONG",{});var zst=s(Ece);e0o=r(zst,"camembert"),zst.forEach(t),o0o=r(iLe," \u2014 "),hD=n(iLe,"A",{href:!0});var Wst=s(hD);r0o=r(Wst,"CamembertForMaskedLM"),Wst.forEach(t),t0o=r(iLe," (CamemBERT model)"),iLe.forEach(t),a0o=i(H),X2=n(H,"LI",{});var dLe=s(X2);Cce=n(dLe,"STRONG",{});var Qst=s(Cce);n0o=r(Qst,"convbert"),Qst.forEach(t),s0o=r(dLe," \u2014 "),pD=n(dLe,"A",{href:!0});var Hst=s(pD);l0o=r(Hst,"ConvBertForMaskedLM"),Hst.forEach(t),i0o=r(dLe," (ConvBERT model)"),dLe.forEach(t),d0o=i(H),z2=n(H,"LI",{});var cLe=s(z2);wce=n(cLe,"STRONG",{});var Ust=s(wce);c0o=r(Ust,"data2vec-text"),Ust.forEach(t),f0o=r(cLe," \u2014 "),uD=n(cLe,"A",{href:!0});var Jst=s(uD);m0o=r(Jst,"Data2VecTextForMaskedLM"),Jst.forEach(t),g0o=r(cLe," (Data2VecText model)"),cLe.forEach(t),h0o=i(H),W2=n(H,"LI",{});var fLe=s(W2);Ace=n(fLe,"STRONG",{});var Yst=s(Ace);p0o=r(Yst,"deberta"),Yst.forEach(t),u0o=r(fLe," \u2014 "),_D=n(fLe,"A",{href:!0});var Kst=s(_D);_0o=r(Kst,"DebertaForMaskedLM"),Kst.forEach(t),b0o=r(fLe," (DeBERTa model)"),fLe.forEach(t),v0o=i(H),Q2=n(H,"LI",{});var mLe=s(Q2);yce=n(mLe,"STRONG",{});var Zst=s(yce);F0o=r(Zst,"deberta-v2"),Zst.forEach(t),T0o=r(mLe," \u2014 "),bD=n(mLe,"A",{href:!0});var elt=s(bD);M0o=r(elt,"DebertaV2ForMaskedLM"),elt.forEach(t),E0o=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),C0o=i(H),H2=n(H,"LI",{});var gLe=s(H2);Lce=n(gLe,"STRONG",{});var olt=s(Lce);w0o=r(olt,"distilbert"),olt.forEach(t),A0o=r(gLe," \u2014 "),vD=n(gLe,"A",{href:!0});var rlt=s(vD);y0o=r(rlt,"DistilBertForMaskedLM"),rlt.forEach(t),L0o=r(gLe," (DistilBERT model)"),gLe.forEach(t),x0o=i(H),U2=n(H,"LI",{});var hLe=s(U2);xce=n(hLe,"STRONG",{});var tlt=s(xce);$0o=r(tlt,"electra"),tlt.forEach(t),k0o=r(hLe," \u2014 "),FD=n(hLe,"A",{href:!0});var alt=s(FD);S0o=r(alt,"ElectraForMaskedLM"),alt.forEach(t),R0o=r(hLe," (ELECTRA model)"),hLe.forEach(t),P0o=i(H),J2=n(H,"LI",{});var pLe=s(J2);$ce=n(pLe,"STRONG",{});var nlt=s($ce);B0o=r(nlt,"flaubert"),nlt.forEach(t),I0o=r(pLe," \u2014 "),TD=n(pLe,"A",{href:!0});var slt=s(TD);q0o=r(slt,"FlaubertWithLMHeadModel"),slt.forEach(t),N0o=r(pLe," (FlauBERT model)"),pLe.forEach(t),j0o=i(H),Y2=n(H,"LI",{});var uLe=s(Y2);kce=n(uLe,"STRONG",{});var llt=s(kce);D0o=r(llt,"fnet"),llt.forEach(t),G0o=r(uLe," \u2014 "),MD=n(uLe,"A",{href:!0});var ilt=s(MD);O0o=r(ilt,"FNetForMaskedLM"),ilt.forEach(t),V0o=r(uLe," (FNet model)"),uLe.forEach(t),X0o=i(H),K2=n(H,"LI",{});var _Le=s(K2);Sce=n(_Le,"STRONG",{});var dlt=s(Sce);z0o=r(dlt,"funnel"),dlt.forEach(t),W0o=r(_Le," \u2014 "),ED=n(_Le,"A",{href:!0});var clt=s(ED);Q0o=r(clt,"FunnelForMaskedLM"),clt.forEach(t),H0o=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),U0o=i(H),Z2=n(H,"LI",{});var bLe=s(Z2);Rce=n(bLe,"STRONG",{});var flt=s(Rce);J0o=r(flt,"ibert"),flt.forEach(t),Y0o=r(bLe," \u2014 "),CD=n(bLe,"A",{href:!0});var mlt=s(CD);K0o=r(mlt,"IBertForMaskedLM"),mlt.forEach(t),Z0o=r(bLe," (I-BERT model)"),bLe.forEach(t),eAo=i(H),e1=n(H,"LI",{});var vLe=s(e1);Pce=n(vLe,"STRONG",{});var glt=s(Pce);oAo=r(glt,"layoutlm"),glt.forEach(t),rAo=r(vLe," \u2014 "),wD=n(vLe,"A",{href:!0});var hlt=s(wD);tAo=r(hlt,"LayoutLMForMaskedLM"),hlt.forEach(t),aAo=r(vLe," (LayoutLM model)"),vLe.forEach(t),nAo=i(H),o1=n(H,"LI",{});var FLe=s(o1);Bce=n(FLe,"STRONG",{});var plt=s(Bce);sAo=r(plt,"longformer"),plt.forEach(t),lAo=r(FLe," \u2014 "),AD=n(FLe,"A",{href:!0});var ult=s(AD);iAo=r(ult,"LongformerForMaskedLM"),ult.forEach(t),dAo=r(FLe," (Longformer model)"),FLe.forEach(t),cAo=i(H),r1=n(H,"LI",{});var TLe=s(r1);Ice=n(TLe,"STRONG",{});var _lt=s(Ice);fAo=r(_lt,"mbart"),_lt.forEach(t),mAo=r(TLe," \u2014 "),yD=n(TLe,"A",{href:!0});var blt=s(yD);gAo=r(blt,"MBartForConditionalGeneration"),blt.forEach(t),hAo=r(TLe," (mBART model)"),TLe.forEach(t),pAo=i(H),t1=n(H,"LI",{});var MLe=s(t1);qce=n(MLe,"STRONG",{});var vlt=s(qce);uAo=r(vlt,"megatron-bert"),vlt.forEach(t),_Ao=r(MLe," \u2014 "),LD=n(MLe,"A",{href:!0});var Flt=s(LD);bAo=r(Flt,"MegatronBertForMaskedLM"),Flt.forEach(t),vAo=r(MLe," (MegatronBert model)"),MLe.forEach(t),FAo=i(H),a1=n(H,"LI",{});var ELe=s(a1);Nce=n(ELe,"STRONG",{});var Tlt=s(Nce);TAo=r(Tlt,"mobilebert"),Tlt.forEach(t),MAo=r(ELe," \u2014 "),xD=n(ELe,"A",{href:!0});var Mlt=s(xD);EAo=r(Mlt,"MobileBertForMaskedLM"),Mlt.forEach(t),CAo=r(ELe," (MobileBERT model)"),ELe.forEach(t),wAo=i(H),n1=n(H,"LI",{});var CLe=s(n1);jce=n(CLe,"STRONG",{});var Elt=s(jce);AAo=r(Elt,"mpnet"),Elt.forEach(t),yAo=r(CLe," \u2014 "),$D=n(CLe,"A",{href:!0});var Clt=s($D);LAo=r(Clt,"MPNetForMaskedLM"),Clt.forEach(t),xAo=r(CLe," (MPNet model)"),CLe.forEach(t),$Ao=i(H),s1=n(H,"LI",{});var wLe=s(s1);Dce=n(wLe,"STRONG",{});var wlt=s(Dce);kAo=r(wlt,"nystromformer"),wlt.forEach(t),SAo=r(wLe," \u2014 "),kD=n(wLe,"A",{href:!0});var Alt=s(kD);RAo=r(Alt,"NystromformerForMaskedLM"),Alt.forEach(t),PAo=r(wLe," (Nystromformer model)"),wLe.forEach(t),BAo=i(H),l1=n(H,"LI",{});var ALe=s(l1);Gce=n(ALe,"STRONG",{});var ylt=s(Gce);IAo=r(ylt,"perceiver"),ylt.forEach(t),qAo=r(ALe," \u2014 "),SD=n(ALe,"A",{href:!0});var Llt=s(SD);NAo=r(Llt,"PerceiverForMaskedLM"),Llt.forEach(t),jAo=r(ALe," (Perceiver model)"),ALe.forEach(t),DAo=i(H),i1=n(H,"LI",{});var yLe=s(i1);Oce=n(yLe,"STRONG",{});var xlt=s(Oce);GAo=r(xlt,"qdqbert"),xlt.forEach(t),OAo=r(yLe," \u2014 "),RD=n(yLe,"A",{href:!0});var $lt=s(RD);VAo=r($lt,"QDQBertForMaskedLM"),$lt.forEach(t),XAo=r(yLe," (QDQBert model)"),yLe.forEach(t),zAo=i(H),d1=n(H,"LI",{});var LLe=s(d1);Vce=n(LLe,"STRONG",{});var klt=s(Vce);WAo=r(klt,"reformer"),klt.forEach(t),QAo=r(LLe," \u2014 "),PD=n(LLe,"A",{href:!0});var Slt=s(PD);HAo=r(Slt,"ReformerForMaskedLM"),Slt.forEach(t),UAo=r(LLe," (Reformer model)"),LLe.forEach(t),JAo=i(H),c1=n(H,"LI",{});var xLe=s(c1);Xce=n(xLe,"STRONG",{});var Rlt=s(Xce);YAo=r(Rlt,"rembert"),Rlt.forEach(t),KAo=r(xLe," \u2014 "),BD=n(xLe,"A",{href:!0});var Plt=s(BD);ZAo=r(Plt,"RemBertForMaskedLM"),Plt.forEach(t),eyo=r(xLe," (RemBERT model)"),xLe.forEach(t),oyo=i(H),f1=n(H,"LI",{});var $Le=s(f1);zce=n($Le,"STRONG",{});var Blt=s(zce);ryo=r(Blt,"roberta"),Blt.forEach(t),tyo=r($Le," \u2014 "),ID=n($Le,"A",{href:!0});var Ilt=s(ID);ayo=r(Ilt,"RobertaForMaskedLM"),Ilt.forEach(t),nyo=r($Le," (RoBERTa model)"),$Le.forEach(t),syo=i(H),m1=n(H,"LI",{});var kLe=s(m1);Wce=n(kLe,"STRONG",{});var qlt=s(Wce);lyo=r(qlt,"roformer"),qlt.forEach(t),iyo=r(kLe," \u2014 "),qD=n(kLe,"A",{href:!0});var Nlt=s(qD);dyo=r(Nlt,"RoFormerForMaskedLM"),Nlt.forEach(t),cyo=r(kLe," (RoFormer model)"),kLe.forEach(t),fyo=i(H),g1=n(H,"LI",{});var SLe=s(g1);Qce=n(SLe,"STRONG",{});var jlt=s(Qce);myo=r(jlt,"squeezebert"),jlt.forEach(t),gyo=r(SLe," \u2014 "),ND=n(SLe,"A",{href:!0});var Dlt=s(ND);hyo=r(Dlt,"SqueezeBertForMaskedLM"),Dlt.forEach(t),pyo=r(SLe," (SqueezeBERT model)"),SLe.forEach(t),uyo=i(H),h1=n(H,"LI",{});var RLe=s(h1);Hce=n(RLe,"STRONG",{});var Glt=s(Hce);_yo=r(Glt,"tapas"),Glt.forEach(t),byo=r(RLe," \u2014 "),jD=n(RLe,"A",{href:!0});var Olt=s(jD);vyo=r(Olt,"TapasForMaskedLM"),Olt.forEach(t),Fyo=r(RLe," (TAPAS model)"),RLe.forEach(t),Tyo=i(H),p1=n(H,"LI",{});var PLe=s(p1);Uce=n(PLe,"STRONG",{});var Vlt=s(Uce);Myo=r(Vlt,"wav2vec2"),Vlt.forEach(t),Eyo=r(PLe," \u2014 "),Jce=n(PLe,"CODE",{});var Xlt=s(Jce);Cyo=r(Xlt,"Wav2Vec2ForMaskedLM"),Xlt.forEach(t),wyo=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),Ayo=i(H),u1=n(H,"LI",{});var BLe=s(u1);Yce=n(BLe,"STRONG",{});var zlt=s(Yce);yyo=r(zlt,"xlm"),zlt.forEach(t),Lyo=r(BLe," \u2014 "),DD=n(BLe,"A",{href:!0});var Wlt=s(DD);xyo=r(Wlt,"XLMWithLMHeadModel"),Wlt.forEach(t),$yo=r(BLe," (XLM model)"),BLe.forEach(t),kyo=i(H),_1=n(H,"LI",{});var ILe=s(_1);Kce=n(ILe,"STRONG",{});var Qlt=s(Kce);Syo=r(Qlt,"xlm-roberta"),Qlt.forEach(t),Ryo=r(ILe," \u2014 "),GD=n(ILe,"A",{href:!0});var Hlt=s(GD);Pyo=r(Hlt,"XLMRobertaForMaskedLM"),Hlt.forEach(t),Byo=r(ILe," (XLM-RoBERTa model)"),ILe.forEach(t),Iyo=i(H),b1=n(H,"LI",{});var qLe=s(b1);Zce=n(qLe,"STRONG",{});var Ult=s(Zce);qyo=r(Ult,"xlm-roberta-xl"),Ult.forEach(t),Nyo=r(qLe," \u2014 "),OD=n(qLe,"A",{href:!0});var Jlt=s(OD);jyo=r(Jlt,"XLMRobertaXLForMaskedLM"),Jlt.forEach(t),Dyo=r(qLe," (XLM-RoBERTa-XL model)"),qLe.forEach(t),Gyo=i(H),v1=n(H,"LI",{});var NLe=s(v1);efe=n(NLe,"STRONG",{});var Ylt=s(efe);Oyo=r(Ylt,"yoso"),Ylt.forEach(t),Vyo=r(NLe," \u2014 "),VD=n(NLe,"A",{href:!0});var Klt=s(VD);Xyo=r(Klt,"YosoForMaskedLM"),Klt.forEach(t),zyo=r(NLe," (YOSO model)"),NLe.forEach(t),H.forEach(t),Wyo=i(la),F1=n(la,"P",{});var jLe=s(F1);Qyo=r(jLe,"The model is set in evaluation mode by default using "),ofe=n(jLe,"CODE",{});var Zlt=s(ofe);Hyo=r(Zlt,"model.eval()"),Zlt.forEach(t),Uyo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=n(jLe,"CODE",{});var eit=s(rfe);Jyo=r(eit,"model.train()"),eit.forEach(t),jLe.forEach(t),Yyo=i(la),T(T1.$$.fragment,la),la.forEach(t),Us.forEach(t),bNe=i(f),Vi=n(f,"H2",{class:!0});var CDe=s(Vi);M1=n(CDe,"A",{id:!0,class:!0,href:!0});var oit=s(M1);tfe=n(oit,"SPAN",{});var rit=s(tfe);T(wA.$$.fragment,rit),rit.forEach(t),oit.forEach(t),Kyo=i(CDe),afe=n(CDe,"SPAN",{});var tit=s(afe);Zyo=r(tit,"AutoModelForSeq2SeqLM"),tit.forEach(t),CDe.forEach(t),vNe=i(f),Ro=n(f,"DIV",{class:!0});var Js=s(Ro);T(AA.$$.fragment,Js),eLo=i(Js),Xi=n(Js,"P",{});var yZ=s(Xi);oLo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XD=n(yZ,"A",{href:!0});var ait=s(XD);rLo=r(ait,"from_pretrained()"),ait.forEach(t),tLo=r(yZ," class method or the "),zD=n(yZ,"A",{href:!0});var nit=s(zD);aLo=r(nit,"from_config()"),nit.forEach(t),nLo=r(yZ,` class
method.`),yZ.forEach(t),sLo=i(Js),yA=n(Js,"P",{});var wDe=s(yA);lLo=r(wDe,"This class cannot be instantiated directly using "),nfe=n(wDe,"CODE",{});var sit=s(nfe);iLo=r(sit,"__init__()"),sit.forEach(t),dLo=r(wDe," (throws an error)."),wDe.forEach(t),cLo=i(Js),dt=n(Js,"DIV",{class:!0});var V3=s(dt);T(LA.$$.fragment,V3),fLo=i(V3),sfe=n(V3,"P",{});var lit=s(sfe);mLo=r(lit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lit.forEach(t),gLo=i(V3),zi=n(V3,"P",{});var LZ=s(zi);hLo=r(LZ,`Note:
Loading a model from its configuration file does `),lfe=n(LZ,"STRONG",{});var iit=s(lfe);pLo=r(iit,"not"),iit.forEach(t),uLo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=n(LZ,"A",{href:!0});var dit=s(WD);_Lo=r(dit,"from_pretrained()"),dit.forEach(t),bLo=r(LZ," to load the model weights."),LZ.forEach(t),vLo=i(V3),T(E1.$$.fragment,V3),V3.forEach(t),FLo=i(Js),eo=n(Js,"DIV",{class:!0});var ia=s(eo);T(xA.$$.fragment,ia),TLo=i(ia),ife=n(ia,"P",{});var cit=s(ife);MLo=r(cit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cit.forEach(t),ELo=i(ia),Ia=n(ia,"P",{});var X3=s(Ia);CLo=r(X3,"The model class to instantiate is selected based on the "),dfe=n(X3,"CODE",{});var fit=s(dfe);wLo=r(fit,"model_type"),fit.forEach(t),ALo=r(X3,` property of the config object (either
passed as an argument or loaded from `),cfe=n(X3,"CODE",{});var mit=s(cfe);yLo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),LLo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(X3,"CODE",{});var git=s(ffe);xLo=r(git,"pretrained_model_name_or_path"),git.forEach(t),$Lo=r(X3,":"),X3.forEach(t),kLo=i(ia),ue=n(ia,"UL",{});var ve=s(ue);C1=n(ve,"LI",{});var DLe=s(C1);mfe=n(DLe,"STRONG",{});var hit=s(mfe);SLo=r(hit,"bart"),hit.forEach(t),RLo=r(DLe," \u2014 "),QD=n(DLe,"A",{href:!0});var pit=s(QD);PLo=r(pit,"BartForConditionalGeneration"),pit.forEach(t),BLo=r(DLe," (BART model)"),DLe.forEach(t),ILo=i(ve),w1=n(ve,"LI",{});var GLe=s(w1);gfe=n(GLe,"STRONG",{});var uit=s(gfe);qLo=r(uit,"bigbird_pegasus"),uit.forEach(t),NLo=r(GLe," \u2014 "),HD=n(GLe,"A",{href:!0});var _it=s(HD);jLo=r(_it,"BigBirdPegasusForConditionalGeneration"),_it.forEach(t),DLo=r(GLe," (BigBirdPegasus model)"),GLe.forEach(t),GLo=i(ve),A1=n(ve,"LI",{});var OLe=s(A1);hfe=n(OLe,"STRONG",{});var bit=s(hfe);OLo=r(bit,"blenderbot"),bit.forEach(t),VLo=r(OLe," \u2014 "),UD=n(OLe,"A",{href:!0});var vit=s(UD);XLo=r(vit,"BlenderbotForConditionalGeneration"),vit.forEach(t),zLo=r(OLe," (Blenderbot model)"),OLe.forEach(t),WLo=i(ve),y1=n(ve,"LI",{});var VLe=s(y1);pfe=n(VLe,"STRONG",{});var Fit=s(pfe);QLo=r(Fit,"blenderbot-small"),Fit.forEach(t),HLo=r(VLe," \u2014 "),JD=n(VLe,"A",{href:!0});var Tit=s(JD);ULo=r(Tit,"BlenderbotSmallForConditionalGeneration"),Tit.forEach(t),JLo=r(VLe," (BlenderbotSmall model)"),VLe.forEach(t),YLo=i(ve),L1=n(ve,"LI",{});var XLe=s(L1);ufe=n(XLe,"STRONG",{});var Mit=s(ufe);KLo=r(Mit,"encoder-decoder"),Mit.forEach(t),ZLo=r(XLe," \u2014 "),YD=n(XLe,"A",{href:!0});var Eit=s(YD);exo=r(Eit,"EncoderDecoderModel"),Eit.forEach(t),oxo=r(XLe," (Encoder decoder model)"),XLe.forEach(t),rxo=i(ve),x1=n(ve,"LI",{});var zLe=s(x1);_fe=n(zLe,"STRONG",{});var Cit=s(_fe);txo=r(Cit,"fsmt"),Cit.forEach(t),axo=r(zLe," \u2014 "),KD=n(zLe,"A",{href:!0});var wit=s(KD);nxo=r(wit,"FSMTForConditionalGeneration"),wit.forEach(t),sxo=r(zLe," (FairSeq Machine-Translation model)"),zLe.forEach(t),lxo=i(ve),$1=n(ve,"LI",{});var WLe=s($1);bfe=n(WLe,"STRONG",{});var Ait=s(bfe);ixo=r(Ait,"led"),Ait.forEach(t),dxo=r(WLe," \u2014 "),ZD=n(WLe,"A",{href:!0});var yit=s(ZD);cxo=r(yit,"LEDForConditionalGeneration"),yit.forEach(t),fxo=r(WLe," (LED model)"),WLe.forEach(t),mxo=i(ve),k1=n(ve,"LI",{});var QLe=s(k1);vfe=n(QLe,"STRONG",{});var Lit=s(vfe);gxo=r(Lit,"m2m_100"),Lit.forEach(t),hxo=r(QLe," \u2014 "),eG=n(QLe,"A",{href:!0});var xit=s(eG);pxo=r(xit,"M2M100ForConditionalGeneration"),xit.forEach(t),uxo=r(QLe," (M2M100 model)"),QLe.forEach(t),_xo=i(ve),S1=n(ve,"LI",{});var HLe=s(S1);Ffe=n(HLe,"STRONG",{});var $it=s(Ffe);bxo=r($it,"marian"),$it.forEach(t),vxo=r(HLe," \u2014 "),oG=n(HLe,"A",{href:!0});var kit=s(oG);Fxo=r(kit,"MarianMTModel"),kit.forEach(t),Txo=r(HLe," (Marian model)"),HLe.forEach(t),Mxo=i(ve),R1=n(ve,"LI",{});var ULe=s(R1);Tfe=n(ULe,"STRONG",{});var Sit=s(Tfe);Exo=r(Sit,"mbart"),Sit.forEach(t),Cxo=r(ULe," \u2014 "),rG=n(ULe,"A",{href:!0});var Rit=s(rG);wxo=r(Rit,"MBartForConditionalGeneration"),Rit.forEach(t),Axo=r(ULe," (mBART model)"),ULe.forEach(t),yxo=i(ve),P1=n(ve,"LI",{});var JLe=s(P1);Mfe=n(JLe,"STRONG",{});var Pit=s(Mfe);Lxo=r(Pit,"mt5"),Pit.forEach(t),xxo=r(JLe," \u2014 "),tG=n(JLe,"A",{href:!0});var Bit=s(tG);$xo=r(Bit,"MT5ForConditionalGeneration"),Bit.forEach(t),kxo=r(JLe," (mT5 model)"),JLe.forEach(t),Sxo=i(ve),B1=n(ve,"LI",{});var YLe=s(B1);Efe=n(YLe,"STRONG",{});var Iit=s(Efe);Rxo=r(Iit,"pegasus"),Iit.forEach(t),Pxo=r(YLe," \u2014 "),aG=n(YLe,"A",{href:!0});var qit=s(aG);Bxo=r(qit,"PegasusForConditionalGeneration"),qit.forEach(t),Ixo=r(YLe," (Pegasus model)"),YLe.forEach(t),qxo=i(ve),I1=n(ve,"LI",{});var KLe=s(I1);Cfe=n(KLe,"STRONG",{});var Nit=s(Cfe);Nxo=r(Nit,"plbart"),Nit.forEach(t),jxo=r(KLe," \u2014 "),nG=n(KLe,"A",{href:!0});var jit=s(nG);Dxo=r(jit,"PLBartForConditionalGeneration"),jit.forEach(t),Gxo=r(KLe," (PLBart model)"),KLe.forEach(t),Oxo=i(ve),q1=n(ve,"LI",{});var ZLe=s(q1);wfe=n(ZLe,"STRONG",{});var Dit=s(wfe);Vxo=r(Dit,"prophetnet"),Dit.forEach(t),Xxo=r(ZLe," \u2014 "),sG=n(ZLe,"A",{href:!0});var Git=s(sG);zxo=r(Git,"ProphetNetForConditionalGeneration"),Git.forEach(t),Wxo=r(ZLe," (ProphetNet model)"),ZLe.forEach(t),Qxo=i(ve),N1=n(ve,"LI",{});var exe=s(N1);Afe=n(exe,"STRONG",{});var Oit=s(Afe);Hxo=r(Oit,"t5"),Oit.forEach(t),Uxo=r(exe," \u2014 "),lG=n(exe,"A",{href:!0});var Vit=s(lG);Jxo=r(Vit,"T5ForConditionalGeneration"),Vit.forEach(t),Yxo=r(exe," (T5 model)"),exe.forEach(t),Kxo=i(ve),j1=n(ve,"LI",{});var oxe=s(j1);yfe=n(oxe,"STRONG",{});var Xit=s(yfe);Zxo=r(Xit,"xlm-prophetnet"),Xit.forEach(t),e9o=r(oxe," \u2014 "),iG=n(oxe,"A",{href:!0});var zit=s(iG);o9o=r(zit,"XLMProphetNetForConditionalGeneration"),zit.forEach(t),r9o=r(oxe," (XLMProphetNet model)"),oxe.forEach(t),ve.forEach(t),t9o=i(ia),D1=n(ia,"P",{});var rxe=s(D1);a9o=r(rxe,"The model is set in evaluation mode by default using "),Lfe=n(rxe,"CODE",{});var Wit=s(Lfe);n9o=r(Wit,"model.eval()"),Wit.forEach(t),s9o=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(rxe,"CODE",{});var Qit=s(xfe);l9o=r(Qit,"model.train()"),Qit.forEach(t),rxe.forEach(t),i9o=i(ia),T(G1.$$.fragment,ia),ia.forEach(t),Js.forEach(t),FNe=i(f),Wi=n(f,"H2",{class:!0});var ADe=s(Wi);O1=n(ADe,"A",{id:!0,class:!0,href:!0});var Hit=s(O1);$fe=n(Hit,"SPAN",{});var Uit=s($fe);T($A.$$.fragment,Uit),Uit.forEach(t),Hit.forEach(t),d9o=i(ADe),kfe=n(ADe,"SPAN",{});var Jit=s(kfe);c9o=r(Jit,"AutoModelForSequenceClassification"),Jit.forEach(t),ADe.forEach(t),TNe=i(f),Po=n(f,"DIV",{class:!0});var Ys=s(Po);T(kA.$$.fragment,Ys),f9o=i(Ys),Qi=n(Ys,"P",{});var xZ=s(Qi);m9o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dG=n(xZ,"A",{href:!0});var Yit=s(dG);g9o=r(Yit,"from_pretrained()"),Yit.forEach(t),h9o=r(xZ," class method or the "),cG=n(xZ,"A",{href:!0});var Kit=s(cG);p9o=r(Kit,"from_config()"),Kit.forEach(t),u9o=r(xZ,` class
method.`),xZ.forEach(t),_9o=i(Ys),SA=n(Ys,"P",{});var yDe=s(SA);b9o=r(yDe,"This class cannot be instantiated directly using "),Sfe=n(yDe,"CODE",{});var Zit=s(Sfe);v9o=r(Zit,"__init__()"),Zit.forEach(t),F9o=r(yDe," (throws an error)."),yDe.forEach(t),T9o=i(Ys),ct=n(Ys,"DIV",{class:!0});var z3=s(ct);T(RA.$$.fragment,z3),M9o=i(z3),Rfe=n(z3,"P",{});var edt=s(Rfe);E9o=r(edt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),edt.forEach(t),C9o=i(z3),Hi=n(z3,"P",{});var $Z=s(Hi);w9o=r($Z,`Note:
Loading a model from its configuration file does `),Pfe=n($Z,"STRONG",{});var odt=s(Pfe);A9o=r(odt,"not"),odt.forEach(t),y9o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n($Z,"A",{href:!0});var rdt=s(fG);L9o=r(rdt,"from_pretrained()"),rdt.forEach(t),x9o=r($Z," to load the model weights."),$Z.forEach(t),$9o=i(z3),T(V1.$$.fragment,z3),z3.forEach(t),k9o=i(Ys),oo=n(Ys,"DIV",{class:!0});var da=s(oo);T(PA.$$.fragment,da),S9o=i(da),Bfe=n(da,"P",{});var tdt=s(Bfe);R9o=r(tdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tdt.forEach(t),P9o=i(da),qa=n(da,"P",{});var W3=s(qa);B9o=r(W3,"The model class to instantiate is selected based on the "),Ife=n(W3,"CODE",{});var adt=s(Ife);I9o=r(adt,"model_type"),adt.forEach(t),q9o=r(W3,` property of the config object (either
passed as an argument or loaded from `),qfe=n(W3,"CODE",{});var ndt=s(qfe);N9o=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),j9o=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(W3,"CODE",{});var sdt=s(Nfe);D9o=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),G9o=r(W3,":"),W3.forEach(t),O9o=i(da),q=n(da,"UL",{});var j=s(q);X1=n(j,"LI",{});var txe=s(X1);jfe=n(txe,"STRONG",{});var ldt=s(jfe);V9o=r(ldt,"albert"),ldt.forEach(t),X9o=r(txe," \u2014 "),mG=n(txe,"A",{href:!0});var idt=s(mG);z9o=r(idt,"AlbertForSequenceClassification"),idt.forEach(t),W9o=r(txe," (ALBERT model)"),txe.forEach(t),Q9o=i(j),z1=n(j,"LI",{});var axe=s(z1);Dfe=n(axe,"STRONG",{});var ddt=s(Dfe);H9o=r(ddt,"bart"),ddt.forEach(t),U9o=r(axe," \u2014 "),gG=n(axe,"A",{href:!0});var cdt=s(gG);J9o=r(cdt,"BartForSequenceClassification"),cdt.forEach(t),Y9o=r(axe," (BART model)"),axe.forEach(t),K9o=i(j),W1=n(j,"LI",{});var nxe=s(W1);Gfe=n(nxe,"STRONG",{});var fdt=s(Gfe);Z9o=r(fdt,"bert"),fdt.forEach(t),e$o=r(nxe," \u2014 "),hG=n(nxe,"A",{href:!0});var mdt=s(hG);o$o=r(mdt,"BertForSequenceClassification"),mdt.forEach(t),r$o=r(nxe," (BERT model)"),nxe.forEach(t),t$o=i(j),Q1=n(j,"LI",{});var sxe=s(Q1);Ofe=n(sxe,"STRONG",{});var gdt=s(Ofe);a$o=r(gdt,"big_bird"),gdt.forEach(t),n$o=r(sxe," \u2014 "),pG=n(sxe,"A",{href:!0});var hdt=s(pG);s$o=r(hdt,"BigBirdForSequenceClassification"),hdt.forEach(t),l$o=r(sxe," (BigBird model)"),sxe.forEach(t),i$o=i(j),H1=n(j,"LI",{});var lxe=s(H1);Vfe=n(lxe,"STRONG",{});var pdt=s(Vfe);d$o=r(pdt,"bigbird_pegasus"),pdt.forEach(t),c$o=r(lxe," \u2014 "),uG=n(lxe,"A",{href:!0});var udt=s(uG);f$o=r(udt,"BigBirdPegasusForSequenceClassification"),udt.forEach(t),m$o=r(lxe," (BigBirdPegasus model)"),lxe.forEach(t),g$o=i(j),U1=n(j,"LI",{});var ixe=s(U1);Xfe=n(ixe,"STRONG",{});var _dt=s(Xfe);h$o=r(_dt,"camembert"),_dt.forEach(t),p$o=r(ixe," \u2014 "),_G=n(ixe,"A",{href:!0});var bdt=s(_G);u$o=r(bdt,"CamembertForSequenceClassification"),bdt.forEach(t),_$o=r(ixe," (CamemBERT model)"),ixe.forEach(t),b$o=i(j),J1=n(j,"LI",{});var dxe=s(J1);zfe=n(dxe,"STRONG",{});var vdt=s(zfe);v$o=r(vdt,"canine"),vdt.forEach(t),F$o=r(dxe," \u2014 "),bG=n(dxe,"A",{href:!0});var Fdt=s(bG);T$o=r(Fdt,"CanineForSequenceClassification"),Fdt.forEach(t),M$o=r(dxe," (Canine model)"),dxe.forEach(t),E$o=i(j),Y1=n(j,"LI",{});var cxe=s(Y1);Wfe=n(cxe,"STRONG",{});var Tdt=s(Wfe);C$o=r(Tdt,"convbert"),Tdt.forEach(t),w$o=r(cxe," \u2014 "),vG=n(cxe,"A",{href:!0});var Mdt=s(vG);A$o=r(Mdt,"ConvBertForSequenceClassification"),Mdt.forEach(t),y$o=r(cxe," (ConvBERT model)"),cxe.forEach(t),L$o=i(j),K1=n(j,"LI",{});var fxe=s(K1);Qfe=n(fxe,"STRONG",{});var Edt=s(Qfe);x$o=r(Edt,"ctrl"),Edt.forEach(t),$$o=r(fxe," \u2014 "),FG=n(fxe,"A",{href:!0});var Cdt=s(FG);k$o=r(Cdt,"CTRLForSequenceClassification"),Cdt.forEach(t),S$o=r(fxe," (CTRL model)"),fxe.forEach(t),R$o=i(j),Z1=n(j,"LI",{});var mxe=s(Z1);Hfe=n(mxe,"STRONG",{});var wdt=s(Hfe);P$o=r(wdt,"data2vec-text"),wdt.forEach(t),B$o=r(mxe," \u2014 "),TG=n(mxe,"A",{href:!0});var Adt=s(TG);I$o=r(Adt,"Data2VecTextForSequenceClassification"),Adt.forEach(t),q$o=r(mxe," (Data2VecText model)"),mxe.forEach(t),N$o=i(j),eb=n(j,"LI",{});var gxe=s(eb);Ufe=n(gxe,"STRONG",{});var ydt=s(Ufe);j$o=r(ydt,"deberta"),ydt.forEach(t),D$o=r(gxe," \u2014 "),MG=n(gxe,"A",{href:!0});var Ldt=s(MG);G$o=r(Ldt,"DebertaForSequenceClassification"),Ldt.forEach(t),O$o=r(gxe," (DeBERTa model)"),gxe.forEach(t),V$o=i(j),ob=n(j,"LI",{});var hxe=s(ob);Jfe=n(hxe,"STRONG",{});var xdt=s(Jfe);X$o=r(xdt,"deberta-v2"),xdt.forEach(t),z$o=r(hxe," \u2014 "),EG=n(hxe,"A",{href:!0});var $dt=s(EG);W$o=r($dt,"DebertaV2ForSequenceClassification"),$dt.forEach(t),Q$o=r(hxe," (DeBERTa-v2 model)"),hxe.forEach(t),H$o=i(j),rb=n(j,"LI",{});var pxe=s(rb);Yfe=n(pxe,"STRONG",{});var kdt=s(Yfe);U$o=r(kdt,"distilbert"),kdt.forEach(t),J$o=r(pxe," \u2014 "),CG=n(pxe,"A",{href:!0});var Sdt=s(CG);Y$o=r(Sdt,"DistilBertForSequenceClassification"),Sdt.forEach(t),K$o=r(pxe," (DistilBERT model)"),pxe.forEach(t),Z$o=i(j),tb=n(j,"LI",{});var uxe=s(tb);Kfe=n(uxe,"STRONG",{});var Rdt=s(Kfe);eko=r(Rdt,"electra"),Rdt.forEach(t),oko=r(uxe," \u2014 "),wG=n(uxe,"A",{href:!0});var Pdt=s(wG);rko=r(Pdt,"ElectraForSequenceClassification"),Pdt.forEach(t),tko=r(uxe," (ELECTRA model)"),uxe.forEach(t),ako=i(j),ab=n(j,"LI",{});var _xe=s(ab);Zfe=n(_xe,"STRONG",{});var Bdt=s(Zfe);nko=r(Bdt,"flaubert"),Bdt.forEach(t),sko=r(_xe," \u2014 "),AG=n(_xe,"A",{href:!0});var Idt=s(AG);lko=r(Idt,"FlaubertForSequenceClassification"),Idt.forEach(t),iko=r(_xe," (FlauBERT model)"),_xe.forEach(t),dko=i(j),nb=n(j,"LI",{});var bxe=s(nb);eme=n(bxe,"STRONG",{});var qdt=s(eme);cko=r(qdt,"fnet"),qdt.forEach(t),fko=r(bxe," \u2014 "),yG=n(bxe,"A",{href:!0});var Ndt=s(yG);mko=r(Ndt,"FNetForSequenceClassification"),Ndt.forEach(t),gko=r(bxe," (FNet model)"),bxe.forEach(t),hko=i(j),sb=n(j,"LI",{});var vxe=s(sb);ome=n(vxe,"STRONG",{});var jdt=s(ome);pko=r(jdt,"funnel"),jdt.forEach(t),uko=r(vxe," \u2014 "),LG=n(vxe,"A",{href:!0});var Ddt=s(LG);_ko=r(Ddt,"FunnelForSequenceClassification"),Ddt.forEach(t),bko=r(vxe," (Funnel Transformer model)"),vxe.forEach(t),vko=i(j),lb=n(j,"LI",{});var Fxe=s(lb);rme=n(Fxe,"STRONG",{});var Gdt=s(rme);Fko=r(Gdt,"gpt2"),Gdt.forEach(t),Tko=r(Fxe," \u2014 "),xG=n(Fxe,"A",{href:!0});var Odt=s(xG);Mko=r(Odt,"GPT2ForSequenceClassification"),Odt.forEach(t),Eko=r(Fxe," (OpenAI GPT-2 model)"),Fxe.forEach(t),Cko=i(j),ib=n(j,"LI",{});var Txe=s(ib);tme=n(Txe,"STRONG",{});var Vdt=s(tme);wko=r(Vdt,"gpt_neo"),Vdt.forEach(t),Ako=r(Txe," \u2014 "),$G=n(Txe,"A",{href:!0});var Xdt=s($G);yko=r(Xdt,"GPTNeoForSequenceClassification"),Xdt.forEach(t),Lko=r(Txe," (GPT Neo model)"),Txe.forEach(t),xko=i(j),db=n(j,"LI",{});var Mxe=s(db);ame=n(Mxe,"STRONG",{});var zdt=s(ame);$ko=r(zdt,"gptj"),zdt.forEach(t),kko=r(Mxe," \u2014 "),kG=n(Mxe,"A",{href:!0});var Wdt=s(kG);Sko=r(Wdt,"GPTJForSequenceClassification"),Wdt.forEach(t),Rko=r(Mxe," (GPT-J model)"),Mxe.forEach(t),Pko=i(j),cb=n(j,"LI",{});var Exe=s(cb);nme=n(Exe,"STRONG",{});var Qdt=s(nme);Bko=r(Qdt,"ibert"),Qdt.forEach(t),Iko=r(Exe," \u2014 "),SG=n(Exe,"A",{href:!0});var Hdt=s(SG);qko=r(Hdt,"IBertForSequenceClassification"),Hdt.forEach(t),Nko=r(Exe," (I-BERT model)"),Exe.forEach(t),jko=i(j),fb=n(j,"LI",{});var Cxe=s(fb);sme=n(Cxe,"STRONG",{});var Udt=s(sme);Dko=r(Udt,"layoutlm"),Udt.forEach(t),Gko=r(Cxe," \u2014 "),RG=n(Cxe,"A",{href:!0});var Jdt=s(RG);Oko=r(Jdt,"LayoutLMForSequenceClassification"),Jdt.forEach(t),Vko=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),Xko=i(j),mb=n(j,"LI",{});var wxe=s(mb);lme=n(wxe,"STRONG",{});var Ydt=s(lme);zko=r(Ydt,"layoutlmv2"),Ydt.forEach(t),Wko=r(wxe," \u2014 "),PG=n(wxe,"A",{href:!0});var Kdt=s(PG);Qko=r(Kdt,"LayoutLMv2ForSequenceClassification"),Kdt.forEach(t),Hko=r(wxe," (LayoutLMv2 model)"),wxe.forEach(t),Uko=i(j),gb=n(j,"LI",{});var Axe=s(gb);ime=n(Axe,"STRONG",{});var Zdt=s(ime);Jko=r(Zdt,"led"),Zdt.forEach(t),Yko=r(Axe," \u2014 "),BG=n(Axe,"A",{href:!0});var ect=s(BG);Kko=r(ect,"LEDForSequenceClassification"),ect.forEach(t),Zko=r(Axe," (LED model)"),Axe.forEach(t),eSo=i(j),hb=n(j,"LI",{});var yxe=s(hb);dme=n(yxe,"STRONG",{});var oct=s(dme);oSo=r(oct,"longformer"),oct.forEach(t),rSo=r(yxe," \u2014 "),IG=n(yxe,"A",{href:!0});var rct=s(IG);tSo=r(rct,"LongformerForSequenceClassification"),rct.forEach(t),aSo=r(yxe," (Longformer model)"),yxe.forEach(t),nSo=i(j),pb=n(j,"LI",{});var Lxe=s(pb);cme=n(Lxe,"STRONG",{});var tct=s(cme);sSo=r(tct,"mbart"),tct.forEach(t),lSo=r(Lxe," \u2014 "),qG=n(Lxe,"A",{href:!0});var act=s(qG);iSo=r(act,"MBartForSequenceClassification"),act.forEach(t),dSo=r(Lxe," (mBART model)"),Lxe.forEach(t),cSo=i(j),ub=n(j,"LI",{});var xxe=s(ub);fme=n(xxe,"STRONG",{});var nct=s(fme);fSo=r(nct,"megatron-bert"),nct.forEach(t),mSo=r(xxe," \u2014 "),NG=n(xxe,"A",{href:!0});var sct=s(NG);gSo=r(sct,"MegatronBertForSequenceClassification"),sct.forEach(t),hSo=r(xxe," (MegatronBert model)"),xxe.forEach(t),pSo=i(j),_b=n(j,"LI",{});var $xe=s(_b);mme=n($xe,"STRONG",{});var lct=s(mme);uSo=r(lct,"mobilebert"),lct.forEach(t),_So=r($xe," \u2014 "),jG=n($xe,"A",{href:!0});var ict=s(jG);bSo=r(ict,"MobileBertForSequenceClassification"),ict.forEach(t),vSo=r($xe," (MobileBERT model)"),$xe.forEach(t),FSo=i(j),bb=n(j,"LI",{});var kxe=s(bb);gme=n(kxe,"STRONG",{});var dct=s(gme);TSo=r(dct,"mpnet"),dct.forEach(t),MSo=r(kxe," \u2014 "),DG=n(kxe,"A",{href:!0});var cct=s(DG);ESo=r(cct,"MPNetForSequenceClassification"),cct.forEach(t),CSo=r(kxe," (MPNet model)"),kxe.forEach(t),wSo=i(j),vb=n(j,"LI",{});var Sxe=s(vb);hme=n(Sxe,"STRONG",{});var fct=s(hme);ASo=r(fct,"nystromformer"),fct.forEach(t),ySo=r(Sxe," \u2014 "),GG=n(Sxe,"A",{href:!0});var mct=s(GG);LSo=r(mct,"NystromformerForSequenceClassification"),mct.forEach(t),xSo=r(Sxe," (Nystromformer model)"),Sxe.forEach(t),$So=i(j),Fb=n(j,"LI",{});var Rxe=s(Fb);pme=n(Rxe,"STRONG",{});var gct=s(pme);kSo=r(gct,"openai-gpt"),gct.forEach(t),SSo=r(Rxe," \u2014 "),OG=n(Rxe,"A",{href:!0});var hct=s(OG);RSo=r(hct,"OpenAIGPTForSequenceClassification"),hct.forEach(t),PSo=r(Rxe," (OpenAI GPT model)"),Rxe.forEach(t),BSo=i(j),Tb=n(j,"LI",{});var Pxe=s(Tb);ume=n(Pxe,"STRONG",{});var pct=s(ume);ISo=r(pct,"perceiver"),pct.forEach(t),qSo=r(Pxe," \u2014 "),VG=n(Pxe,"A",{href:!0});var uct=s(VG);NSo=r(uct,"PerceiverForSequenceClassification"),uct.forEach(t),jSo=r(Pxe," (Perceiver model)"),Pxe.forEach(t),DSo=i(j),Mb=n(j,"LI",{});var Bxe=s(Mb);_me=n(Bxe,"STRONG",{});var _ct=s(_me);GSo=r(_ct,"plbart"),_ct.forEach(t),OSo=r(Bxe," \u2014 "),XG=n(Bxe,"A",{href:!0});var bct=s(XG);VSo=r(bct,"PLBartForSequenceClassification"),bct.forEach(t),XSo=r(Bxe," (PLBart model)"),Bxe.forEach(t),zSo=i(j),Eb=n(j,"LI",{});var Ixe=s(Eb);bme=n(Ixe,"STRONG",{});var vct=s(bme);WSo=r(vct,"qdqbert"),vct.forEach(t),QSo=r(Ixe," \u2014 "),zG=n(Ixe,"A",{href:!0});var Fct=s(zG);HSo=r(Fct,"QDQBertForSequenceClassification"),Fct.forEach(t),USo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),JSo=i(j),Cb=n(j,"LI",{});var qxe=s(Cb);vme=n(qxe,"STRONG",{});var Tct=s(vme);YSo=r(Tct,"reformer"),Tct.forEach(t),KSo=r(qxe," \u2014 "),WG=n(qxe,"A",{href:!0});var Mct=s(WG);ZSo=r(Mct,"ReformerForSequenceClassification"),Mct.forEach(t),eRo=r(qxe," (Reformer model)"),qxe.forEach(t),oRo=i(j),wb=n(j,"LI",{});var Nxe=s(wb);Fme=n(Nxe,"STRONG",{});var Ect=s(Fme);rRo=r(Ect,"rembert"),Ect.forEach(t),tRo=r(Nxe," \u2014 "),QG=n(Nxe,"A",{href:!0});var Cct=s(QG);aRo=r(Cct,"RemBertForSequenceClassification"),Cct.forEach(t),nRo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),sRo=i(j),Ab=n(j,"LI",{});var jxe=s(Ab);Tme=n(jxe,"STRONG",{});var wct=s(Tme);lRo=r(wct,"roberta"),wct.forEach(t),iRo=r(jxe," \u2014 "),HG=n(jxe,"A",{href:!0});var Act=s(HG);dRo=r(Act,"RobertaForSequenceClassification"),Act.forEach(t),cRo=r(jxe," (RoBERTa model)"),jxe.forEach(t),fRo=i(j),yb=n(j,"LI",{});var Dxe=s(yb);Mme=n(Dxe,"STRONG",{});var yct=s(Mme);mRo=r(yct,"roformer"),yct.forEach(t),gRo=r(Dxe," \u2014 "),UG=n(Dxe,"A",{href:!0});var Lct=s(UG);hRo=r(Lct,"RoFormerForSequenceClassification"),Lct.forEach(t),pRo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),uRo=i(j),Lb=n(j,"LI",{});var Gxe=s(Lb);Eme=n(Gxe,"STRONG",{});var xct=s(Eme);_Ro=r(xct,"squeezebert"),xct.forEach(t),bRo=r(Gxe," \u2014 "),JG=n(Gxe,"A",{href:!0});var $ct=s(JG);vRo=r($ct,"SqueezeBertForSequenceClassification"),$ct.forEach(t),FRo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),TRo=i(j),xb=n(j,"LI",{});var Oxe=s(xb);Cme=n(Oxe,"STRONG",{});var kct=s(Cme);MRo=r(kct,"tapas"),kct.forEach(t),ERo=r(Oxe," \u2014 "),YG=n(Oxe,"A",{href:!0});var Sct=s(YG);CRo=r(Sct,"TapasForSequenceClassification"),Sct.forEach(t),wRo=r(Oxe," (TAPAS model)"),Oxe.forEach(t),ARo=i(j),$b=n(j,"LI",{});var Vxe=s($b);wme=n(Vxe,"STRONG",{});var Rct=s(wme);yRo=r(Rct,"transfo-xl"),Rct.forEach(t),LRo=r(Vxe," \u2014 "),KG=n(Vxe,"A",{href:!0});var Pct=s(KG);xRo=r(Pct,"TransfoXLForSequenceClassification"),Pct.forEach(t),$Ro=r(Vxe," (Transformer-XL model)"),Vxe.forEach(t),kRo=i(j),kb=n(j,"LI",{});var Xxe=s(kb);Ame=n(Xxe,"STRONG",{});var Bct=s(Ame);SRo=r(Bct,"xlm"),Bct.forEach(t),RRo=r(Xxe," \u2014 "),ZG=n(Xxe,"A",{href:!0});var Ict=s(ZG);PRo=r(Ict,"XLMForSequenceClassification"),Ict.forEach(t),BRo=r(Xxe," (XLM model)"),Xxe.forEach(t),IRo=i(j),Sb=n(j,"LI",{});var zxe=s(Sb);yme=n(zxe,"STRONG",{});var qct=s(yme);qRo=r(qct,"xlm-roberta"),qct.forEach(t),NRo=r(zxe," \u2014 "),eO=n(zxe,"A",{href:!0});var Nct=s(eO);jRo=r(Nct,"XLMRobertaForSequenceClassification"),Nct.forEach(t),DRo=r(zxe," (XLM-RoBERTa model)"),zxe.forEach(t),GRo=i(j),Rb=n(j,"LI",{});var Wxe=s(Rb);Lme=n(Wxe,"STRONG",{});var jct=s(Lme);ORo=r(jct,"xlm-roberta-xl"),jct.forEach(t),VRo=r(Wxe," \u2014 "),oO=n(Wxe,"A",{href:!0});var Dct=s(oO);XRo=r(Dct,"XLMRobertaXLForSequenceClassification"),Dct.forEach(t),zRo=r(Wxe," (XLM-RoBERTa-XL model)"),Wxe.forEach(t),WRo=i(j),Pb=n(j,"LI",{});var Qxe=s(Pb);xme=n(Qxe,"STRONG",{});var Gct=s(xme);QRo=r(Gct,"xlnet"),Gct.forEach(t),HRo=r(Qxe," \u2014 "),rO=n(Qxe,"A",{href:!0});var Oct=s(rO);URo=r(Oct,"XLNetForSequenceClassification"),Oct.forEach(t),JRo=r(Qxe," (XLNet model)"),Qxe.forEach(t),YRo=i(j),Bb=n(j,"LI",{});var Hxe=s(Bb);$me=n(Hxe,"STRONG",{});var Vct=s($me);KRo=r(Vct,"yoso"),Vct.forEach(t),ZRo=r(Hxe," \u2014 "),tO=n(Hxe,"A",{href:!0});var Xct=s(tO);ePo=r(Xct,"YosoForSequenceClassification"),Xct.forEach(t),oPo=r(Hxe," (YOSO model)"),Hxe.forEach(t),j.forEach(t),rPo=i(da),Ib=n(da,"P",{});var Uxe=s(Ib);tPo=r(Uxe,"The model is set in evaluation mode by default using "),kme=n(Uxe,"CODE",{});var zct=s(kme);aPo=r(zct,"model.eval()"),zct.forEach(t),nPo=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(Uxe,"CODE",{});var Wct=s(Sme);sPo=r(Wct,"model.train()"),Wct.forEach(t),Uxe.forEach(t),lPo=i(da),T(qb.$$.fragment,da),da.forEach(t),Ys.forEach(t),MNe=i(f),Ui=n(f,"H2",{class:!0});var LDe=s(Ui);Nb=n(LDe,"A",{id:!0,class:!0,href:!0});var Qct=s(Nb);Rme=n(Qct,"SPAN",{});var Hct=s(Rme);T(BA.$$.fragment,Hct),Hct.forEach(t),Qct.forEach(t),iPo=i(LDe),Pme=n(LDe,"SPAN",{});var Uct=s(Pme);dPo=r(Uct,"AutoModelForMultipleChoice"),Uct.forEach(t),LDe.forEach(t),ENe=i(f),Bo=n(f,"DIV",{class:!0});var Ks=s(Bo);T(IA.$$.fragment,Ks),cPo=i(Ks),Ji=n(Ks,"P",{});var kZ=s(Ji);fPo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=n(kZ,"A",{href:!0});var Jct=s(aO);mPo=r(Jct,"from_pretrained()"),Jct.forEach(t),gPo=r(kZ," class method or the "),nO=n(kZ,"A",{href:!0});var Yct=s(nO);hPo=r(Yct,"from_config()"),Yct.forEach(t),pPo=r(kZ,` class
method.`),kZ.forEach(t),uPo=i(Ks),qA=n(Ks,"P",{});var xDe=s(qA);_Po=r(xDe,"This class cannot be instantiated directly using "),Bme=n(xDe,"CODE",{});var Kct=s(Bme);bPo=r(Kct,"__init__()"),Kct.forEach(t),vPo=r(xDe," (throws an error)."),xDe.forEach(t),FPo=i(Ks),ft=n(Ks,"DIV",{class:!0});var Q3=s(ft);T(NA.$$.fragment,Q3),TPo=i(Q3),Ime=n(Q3,"P",{});var Zct=s(Ime);MPo=r(Zct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zct.forEach(t),EPo=i(Q3),Yi=n(Q3,"P",{});var SZ=s(Yi);CPo=r(SZ,`Note:
Loading a model from its configuration file does `),qme=n(SZ,"STRONG",{});var eft=s(qme);wPo=r(eft,"not"),eft.forEach(t),APo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(SZ,"A",{href:!0});var oft=s(sO);yPo=r(oft,"from_pretrained()"),oft.forEach(t),LPo=r(SZ," to load the model weights."),SZ.forEach(t),xPo=i(Q3),T(jb.$$.fragment,Q3),Q3.forEach(t),$Po=i(Ks),ro=n(Ks,"DIV",{class:!0});var ca=s(ro);T(jA.$$.fragment,ca),kPo=i(ca),Nme=n(ca,"P",{});var rft=s(Nme);SPo=r(rft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rft.forEach(t),RPo=i(ca),Na=n(ca,"P",{});var H3=s(Na);PPo=r(H3,"The model class to instantiate is selected based on the "),jme=n(H3,"CODE",{});var tft=s(jme);BPo=r(tft,"model_type"),tft.forEach(t),IPo=r(H3,` property of the config object (either
passed as an argument or loaded from `),Dme=n(H3,"CODE",{});var aft=s(Dme);qPo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),NPo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(H3,"CODE",{});var nft=s(Gme);jPo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),DPo=r(H3,":"),H3.forEach(t),GPo=i(ca),Y=n(ca,"UL",{});var Z=s(Y);Db=n(Z,"LI",{});var Jxe=s(Db);Ome=n(Jxe,"STRONG",{});var sft=s(Ome);OPo=r(sft,"albert"),sft.forEach(t),VPo=r(Jxe," \u2014 "),lO=n(Jxe,"A",{href:!0});var lft=s(lO);XPo=r(lft,"AlbertForMultipleChoice"),lft.forEach(t),zPo=r(Jxe," (ALBERT model)"),Jxe.forEach(t),WPo=i(Z),Gb=n(Z,"LI",{});var Yxe=s(Gb);Vme=n(Yxe,"STRONG",{});var ift=s(Vme);QPo=r(ift,"bert"),ift.forEach(t),HPo=r(Yxe," \u2014 "),iO=n(Yxe,"A",{href:!0});var dft=s(iO);UPo=r(dft,"BertForMultipleChoice"),dft.forEach(t),JPo=r(Yxe," (BERT model)"),Yxe.forEach(t),YPo=i(Z),Ob=n(Z,"LI",{});var Kxe=s(Ob);Xme=n(Kxe,"STRONG",{});var cft=s(Xme);KPo=r(cft,"big_bird"),cft.forEach(t),ZPo=r(Kxe," \u2014 "),dO=n(Kxe,"A",{href:!0});var fft=s(dO);eBo=r(fft,"BigBirdForMultipleChoice"),fft.forEach(t),oBo=r(Kxe," (BigBird model)"),Kxe.forEach(t),rBo=i(Z),Vb=n(Z,"LI",{});var Zxe=s(Vb);zme=n(Zxe,"STRONG",{});var mft=s(zme);tBo=r(mft,"camembert"),mft.forEach(t),aBo=r(Zxe," \u2014 "),cO=n(Zxe,"A",{href:!0});var gft=s(cO);nBo=r(gft,"CamembertForMultipleChoice"),gft.forEach(t),sBo=r(Zxe," (CamemBERT model)"),Zxe.forEach(t),lBo=i(Z),Xb=n(Z,"LI",{});var e9e=s(Xb);Wme=n(e9e,"STRONG",{});var hft=s(Wme);iBo=r(hft,"canine"),hft.forEach(t),dBo=r(e9e," \u2014 "),fO=n(e9e,"A",{href:!0});var pft=s(fO);cBo=r(pft,"CanineForMultipleChoice"),pft.forEach(t),fBo=r(e9e," (Canine model)"),e9e.forEach(t),mBo=i(Z),zb=n(Z,"LI",{});var o9e=s(zb);Qme=n(o9e,"STRONG",{});var uft=s(Qme);gBo=r(uft,"convbert"),uft.forEach(t),hBo=r(o9e," \u2014 "),mO=n(o9e,"A",{href:!0});var _ft=s(mO);pBo=r(_ft,"ConvBertForMultipleChoice"),_ft.forEach(t),uBo=r(o9e," (ConvBERT model)"),o9e.forEach(t),_Bo=i(Z),Wb=n(Z,"LI",{});var r9e=s(Wb);Hme=n(r9e,"STRONG",{});var bft=s(Hme);bBo=r(bft,"data2vec-text"),bft.forEach(t),vBo=r(r9e," \u2014 "),gO=n(r9e,"A",{href:!0});var vft=s(gO);FBo=r(vft,"Data2VecTextForMultipleChoice"),vft.forEach(t),TBo=r(r9e," (Data2VecText model)"),r9e.forEach(t),MBo=i(Z),Qb=n(Z,"LI",{});var t9e=s(Qb);Ume=n(t9e,"STRONG",{});var Fft=s(Ume);EBo=r(Fft,"deberta-v2"),Fft.forEach(t),CBo=r(t9e," \u2014 "),hO=n(t9e,"A",{href:!0});var Tft=s(hO);wBo=r(Tft,"DebertaV2ForMultipleChoice"),Tft.forEach(t),ABo=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),yBo=i(Z),Hb=n(Z,"LI",{});var a9e=s(Hb);Jme=n(a9e,"STRONG",{});var Mft=s(Jme);LBo=r(Mft,"distilbert"),Mft.forEach(t),xBo=r(a9e," \u2014 "),pO=n(a9e,"A",{href:!0});var Eft=s(pO);$Bo=r(Eft,"DistilBertForMultipleChoice"),Eft.forEach(t),kBo=r(a9e," (DistilBERT model)"),a9e.forEach(t),SBo=i(Z),Ub=n(Z,"LI",{});var n9e=s(Ub);Yme=n(n9e,"STRONG",{});var Cft=s(Yme);RBo=r(Cft,"electra"),Cft.forEach(t),PBo=r(n9e," \u2014 "),uO=n(n9e,"A",{href:!0});var wft=s(uO);BBo=r(wft,"ElectraForMultipleChoice"),wft.forEach(t),IBo=r(n9e," (ELECTRA model)"),n9e.forEach(t),qBo=i(Z),Jb=n(Z,"LI",{});var s9e=s(Jb);Kme=n(s9e,"STRONG",{});var Aft=s(Kme);NBo=r(Aft,"flaubert"),Aft.forEach(t),jBo=r(s9e," \u2014 "),_O=n(s9e,"A",{href:!0});var yft=s(_O);DBo=r(yft,"FlaubertForMultipleChoice"),yft.forEach(t),GBo=r(s9e," (FlauBERT model)"),s9e.forEach(t),OBo=i(Z),Yb=n(Z,"LI",{});var l9e=s(Yb);Zme=n(l9e,"STRONG",{});var Lft=s(Zme);VBo=r(Lft,"fnet"),Lft.forEach(t),XBo=r(l9e," \u2014 "),bO=n(l9e,"A",{href:!0});var xft=s(bO);zBo=r(xft,"FNetForMultipleChoice"),xft.forEach(t),WBo=r(l9e," (FNet model)"),l9e.forEach(t),QBo=i(Z),Kb=n(Z,"LI",{});var i9e=s(Kb);ege=n(i9e,"STRONG",{});var $ft=s(ege);HBo=r($ft,"funnel"),$ft.forEach(t),UBo=r(i9e," \u2014 "),vO=n(i9e,"A",{href:!0});var kft=s(vO);JBo=r(kft,"FunnelForMultipleChoice"),kft.forEach(t),YBo=r(i9e," (Funnel Transformer model)"),i9e.forEach(t),KBo=i(Z),Zb=n(Z,"LI",{});var d9e=s(Zb);oge=n(d9e,"STRONG",{});var Sft=s(oge);ZBo=r(Sft,"ibert"),Sft.forEach(t),eIo=r(d9e," \u2014 "),FO=n(d9e,"A",{href:!0});var Rft=s(FO);oIo=r(Rft,"IBertForMultipleChoice"),Rft.forEach(t),rIo=r(d9e," (I-BERT model)"),d9e.forEach(t),tIo=i(Z),ev=n(Z,"LI",{});var c9e=s(ev);rge=n(c9e,"STRONG",{});var Pft=s(rge);aIo=r(Pft,"longformer"),Pft.forEach(t),nIo=r(c9e," \u2014 "),TO=n(c9e,"A",{href:!0});var Bft=s(TO);sIo=r(Bft,"LongformerForMultipleChoice"),Bft.forEach(t),lIo=r(c9e," (Longformer model)"),c9e.forEach(t),iIo=i(Z),ov=n(Z,"LI",{});var f9e=s(ov);tge=n(f9e,"STRONG",{});var Ift=s(tge);dIo=r(Ift,"megatron-bert"),Ift.forEach(t),cIo=r(f9e," \u2014 "),MO=n(f9e,"A",{href:!0});var qft=s(MO);fIo=r(qft,"MegatronBertForMultipleChoice"),qft.forEach(t),mIo=r(f9e," (MegatronBert model)"),f9e.forEach(t),gIo=i(Z),rv=n(Z,"LI",{});var m9e=s(rv);age=n(m9e,"STRONG",{});var Nft=s(age);hIo=r(Nft,"mobilebert"),Nft.forEach(t),pIo=r(m9e," \u2014 "),EO=n(m9e,"A",{href:!0});var jft=s(EO);uIo=r(jft,"MobileBertForMultipleChoice"),jft.forEach(t),_Io=r(m9e," (MobileBERT model)"),m9e.forEach(t),bIo=i(Z),tv=n(Z,"LI",{});var g9e=s(tv);nge=n(g9e,"STRONG",{});var Dft=s(nge);vIo=r(Dft,"mpnet"),Dft.forEach(t),FIo=r(g9e," \u2014 "),CO=n(g9e,"A",{href:!0});var Gft=s(CO);TIo=r(Gft,"MPNetForMultipleChoice"),Gft.forEach(t),MIo=r(g9e," (MPNet model)"),g9e.forEach(t),EIo=i(Z),av=n(Z,"LI",{});var h9e=s(av);sge=n(h9e,"STRONG",{});var Oft=s(sge);CIo=r(Oft,"nystromformer"),Oft.forEach(t),wIo=r(h9e," \u2014 "),wO=n(h9e,"A",{href:!0});var Vft=s(wO);AIo=r(Vft,"NystromformerForMultipleChoice"),Vft.forEach(t),yIo=r(h9e," (Nystromformer model)"),h9e.forEach(t),LIo=i(Z),nv=n(Z,"LI",{});var p9e=s(nv);lge=n(p9e,"STRONG",{});var Xft=s(lge);xIo=r(Xft,"qdqbert"),Xft.forEach(t),$Io=r(p9e," \u2014 "),AO=n(p9e,"A",{href:!0});var zft=s(AO);kIo=r(zft,"QDQBertForMultipleChoice"),zft.forEach(t),SIo=r(p9e," (QDQBert model)"),p9e.forEach(t),RIo=i(Z),sv=n(Z,"LI",{});var u9e=s(sv);ige=n(u9e,"STRONG",{});var Wft=s(ige);PIo=r(Wft,"rembert"),Wft.forEach(t),BIo=r(u9e," \u2014 "),yO=n(u9e,"A",{href:!0});var Qft=s(yO);IIo=r(Qft,"RemBertForMultipleChoice"),Qft.forEach(t),qIo=r(u9e," (RemBERT model)"),u9e.forEach(t),NIo=i(Z),lv=n(Z,"LI",{});var _9e=s(lv);dge=n(_9e,"STRONG",{});var Hft=s(dge);jIo=r(Hft,"roberta"),Hft.forEach(t),DIo=r(_9e," \u2014 "),LO=n(_9e,"A",{href:!0});var Uft=s(LO);GIo=r(Uft,"RobertaForMultipleChoice"),Uft.forEach(t),OIo=r(_9e," (RoBERTa model)"),_9e.forEach(t),VIo=i(Z),iv=n(Z,"LI",{});var b9e=s(iv);cge=n(b9e,"STRONG",{});var Jft=s(cge);XIo=r(Jft,"roformer"),Jft.forEach(t),zIo=r(b9e," \u2014 "),xO=n(b9e,"A",{href:!0});var Yft=s(xO);WIo=r(Yft,"RoFormerForMultipleChoice"),Yft.forEach(t),QIo=r(b9e," (RoFormer model)"),b9e.forEach(t),HIo=i(Z),dv=n(Z,"LI",{});var v9e=s(dv);fge=n(v9e,"STRONG",{});var Kft=s(fge);UIo=r(Kft,"squeezebert"),Kft.forEach(t),JIo=r(v9e," \u2014 "),$O=n(v9e,"A",{href:!0});var Zft=s($O);YIo=r(Zft,"SqueezeBertForMultipleChoice"),Zft.forEach(t),KIo=r(v9e," (SqueezeBERT model)"),v9e.forEach(t),ZIo=i(Z),cv=n(Z,"LI",{});var F9e=s(cv);mge=n(F9e,"STRONG",{});var emt=s(mge);eqo=r(emt,"xlm"),emt.forEach(t),oqo=r(F9e," \u2014 "),kO=n(F9e,"A",{href:!0});var omt=s(kO);rqo=r(omt,"XLMForMultipleChoice"),omt.forEach(t),tqo=r(F9e," (XLM model)"),F9e.forEach(t),aqo=i(Z),fv=n(Z,"LI",{});var T9e=s(fv);gge=n(T9e,"STRONG",{});var rmt=s(gge);nqo=r(rmt,"xlm-roberta"),rmt.forEach(t),sqo=r(T9e," \u2014 "),SO=n(T9e,"A",{href:!0});var tmt=s(SO);lqo=r(tmt,"XLMRobertaForMultipleChoice"),tmt.forEach(t),iqo=r(T9e," (XLM-RoBERTa model)"),T9e.forEach(t),dqo=i(Z),mv=n(Z,"LI",{});var M9e=s(mv);hge=n(M9e,"STRONG",{});var amt=s(hge);cqo=r(amt,"xlm-roberta-xl"),amt.forEach(t),fqo=r(M9e," \u2014 "),RO=n(M9e,"A",{href:!0});var nmt=s(RO);mqo=r(nmt,"XLMRobertaXLForMultipleChoice"),nmt.forEach(t),gqo=r(M9e," (XLM-RoBERTa-XL model)"),M9e.forEach(t),hqo=i(Z),gv=n(Z,"LI",{});var E9e=s(gv);pge=n(E9e,"STRONG",{});var smt=s(pge);pqo=r(smt,"xlnet"),smt.forEach(t),uqo=r(E9e," \u2014 "),PO=n(E9e,"A",{href:!0});var lmt=s(PO);_qo=r(lmt,"XLNetForMultipleChoice"),lmt.forEach(t),bqo=r(E9e," (XLNet model)"),E9e.forEach(t),vqo=i(Z),hv=n(Z,"LI",{});var C9e=s(hv);uge=n(C9e,"STRONG",{});var imt=s(uge);Fqo=r(imt,"yoso"),imt.forEach(t),Tqo=r(C9e," \u2014 "),BO=n(C9e,"A",{href:!0});var dmt=s(BO);Mqo=r(dmt,"YosoForMultipleChoice"),dmt.forEach(t),Eqo=r(C9e," (YOSO model)"),C9e.forEach(t),Z.forEach(t),Cqo=i(ca),pv=n(ca,"P",{});var w9e=s(pv);wqo=r(w9e,"The model is set in evaluation mode by default using "),_ge=n(w9e,"CODE",{});var cmt=s(_ge);Aqo=r(cmt,"model.eval()"),cmt.forEach(t),yqo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(w9e,"CODE",{});var fmt=s(bge);Lqo=r(fmt,"model.train()"),fmt.forEach(t),w9e.forEach(t),xqo=i(ca),T(uv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),CNe=i(f),Ki=n(f,"H2",{class:!0});var $De=s(Ki);_v=n($De,"A",{id:!0,class:!0,href:!0});var mmt=s(_v);vge=n(mmt,"SPAN",{});var gmt=s(vge);T(DA.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),$qo=i($De),Fge=n($De,"SPAN",{});var hmt=s(Fge);kqo=r(hmt,"AutoModelForNextSentencePrediction"),hmt.forEach(t),$De.forEach(t),wNe=i(f),Io=n(f,"DIV",{class:!0});var Zs=s(Io);T(GA.$$.fragment,Zs),Sqo=i(Zs),Zi=n(Zs,"P",{});var RZ=s(Zi);Rqo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=n(RZ,"A",{href:!0});var pmt=s(IO);Pqo=r(pmt,"from_pretrained()"),pmt.forEach(t),Bqo=r(RZ," class method or the "),qO=n(RZ,"A",{href:!0});var umt=s(qO);Iqo=r(umt,"from_config()"),umt.forEach(t),qqo=r(RZ,` class
method.`),RZ.forEach(t),Nqo=i(Zs),OA=n(Zs,"P",{});var kDe=s(OA);jqo=r(kDe,"This class cannot be instantiated directly using "),Tge=n(kDe,"CODE",{});var _mt=s(Tge);Dqo=r(_mt,"__init__()"),_mt.forEach(t),Gqo=r(kDe," (throws an error)."),kDe.forEach(t),Oqo=i(Zs),mt=n(Zs,"DIV",{class:!0});var U3=s(mt);T(VA.$$.fragment,U3),Vqo=i(U3),Mge=n(U3,"P",{});var bmt=s(Mge);Xqo=r(bmt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bmt.forEach(t),zqo=i(U3),ed=n(U3,"P",{});var PZ=s(ed);Wqo=r(PZ,`Note:
Loading a model from its configuration file does `),Ege=n(PZ,"STRONG",{});var vmt=s(Ege);Qqo=r(vmt,"not"),vmt.forEach(t),Hqo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(PZ,"A",{href:!0});var Fmt=s(NO);Uqo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),Jqo=r(PZ," to load the model weights."),PZ.forEach(t),Yqo=i(U3),T(bv.$$.fragment,U3),U3.forEach(t),Kqo=i(Zs),to=n(Zs,"DIV",{class:!0});var fa=s(to);T(XA.$$.fragment,fa),Zqo=i(fa),Cge=n(fa,"P",{});var Tmt=s(Cge);eNo=r(Tmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tmt.forEach(t),oNo=i(fa),ja=n(fa,"P",{});var J3=s(ja);rNo=r(J3,"The model class to instantiate is selected based on the "),wge=n(J3,"CODE",{});var Mmt=s(wge);tNo=r(Mmt,"model_type"),Mmt.forEach(t),aNo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Age=n(J3,"CODE",{});var Emt=s(Age);nNo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),sNo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(J3,"CODE",{});var Cmt=s(yge);lNo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),iNo=r(J3,":"),J3.forEach(t),dNo=i(fa),Zr=n(fa,"UL",{});var el=s(Zr);vv=n(el,"LI",{});var A9e=s(vv);Lge=n(A9e,"STRONG",{});var wmt=s(Lge);cNo=r(wmt,"bert"),wmt.forEach(t),fNo=r(A9e," \u2014 "),jO=n(A9e,"A",{href:!0});var Amt=s(jO);mNo=r(Amt,"BertForNextSentencePrediction"),Amt.forEach(t),gNo=r(A9e," (BERT model)"),A9e.forEach(t),hNo=i(el),Fv=n(el,"LI",{});var y9e=s(Fv);xge=n(y9e,"STRONG",{});var ymt=s(xge);pNo=r(ymt,"fnet"),ymt.forEach(t),uNo=r(y9e," \u2014 "),DO=n(y9e,"A",{href:!0});var Lmt=s(DO);_No=r(Lmt,"FNetForNextSentencePrediction"),Lmt.forEach(t),bNo=r(y9e," (FNet model)"),y9e.forEach(t),vNo=i(el),Tv=n(el,"LI",{});var L9e=s(Tv);$ge=n(L9e,"STRONG",{});var xmt=s($ge);FNo=r(xmt,"megatron-bert"),xmt.forEach(t),TNo=r(L9e," \u2014 "),GO=n(L9e,"A",{href:!0});var $mt=s(GO);MNo=r($mt,"MegatronBertForNextSentencePrediction"),$mt.forEach(t),ENo=r(L9e," (MegatronBert model)"),L9e.forEach(t),CNo=i(el),Mv=n(el,"LI",{});var x9e=s(Mv);kge=n(x9e,"STRONG",{});var kmt=s(kge);wNo=r(kmt,"mobilebert"),kmt.forEach(t),ANo=r(x9e," \u2014 "),OO=n(x9e,"A",{href:!0});var Smt=s(OO);yNo=r(Smt,"MobileBertForNextSentencePrediction"),Smt.forEach(t),LNo=r(x9e," (MobileBERT model)"),x9e.forEach(t),xNo=i(el),Ev=n(el,"LI",{});var $9e=s(Ev);Sge=n($9e,"STRONG",{});var Rmt=s(Sge);$No=r(Rmt,"qdqbert"),Rmt.forEach(t),kNo=r($9e," \u2014 "),VO=n($9e,"A",{href:!0});var Pmt=s(VO);SNo=r(Pmt,"QDQBertForNextSentencePrediction"),Pmt.forEach(t),RNo=r($9e," (QDQBert model)"),$9e.forEach(t),el.forEach(t),PNo=i(fa),Cv=n(fa,"P",{});var k9e=s(Cv);BNo=r(k9e,"The model is set in evaluation mode by default using "),Rge=n(k9e,"CODE",{});var Bmt=s(Rge);INo=r(Bmt,"model.eval()"),Bmt.forEach(t),qNo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(k9e,"CODE",{});var Imt=s(Pge);NNo=r(Imt,"model.train()"),Imt.forEach(t),k9e.forEach(t),jNo=i(fa),T(wv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),ANe=i(f),od=n(f,"H2",{class:!0});var SDe=s(od);Av=n(SDe,"A",{id:!0,class:!0,href:!0});var qmt=s(Av);Bge=n(qmt,"SPAN",{});var Nmt=s(Bge);T(zA.$$.fragment,Nmt),Nmt.forEach(t),qmt.forEach(t),DNo=i(SDe),Ige=n(SDe,"SPAN",{});var jmt=s(Ige);GNo=r(jmt,"AutoModelForTokenClassification"),jmt.forEach(t),SDe.forEach(t),yNe=i(f),qo=n(f,"DIV",{class:!0});var ol=s(qo);T(WA.$$.fragment,ol),ONo=i(ol),rd=n(ol,"P",{});var BZ=s(rd);VNo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=n(BZ,"A",{href:!0});var Dmt=s(XO);XNo=r(Dmt,"from_pretrained()"),Dmt.forEach(t),zNo=r(BZ," class method or the "),zO=n(BZ,"A",{href:!0});var Gmt=s(zO);WNo=r(Gmt,"from_config()"),Gmt.forEach(t),QNo=r(BZ,` class
method.`),BZ.forEach(t),HNo=i(ol),QA=n(ol,"P",{});var RDe=s(QA);UNo=r(RDe,"This class cannot be instantiated directly using "),qge=n(RDe,"CODE",{});var Omt=s(qge);JNo=r(Omt,"__init__()"),Omt.forEach(t),YNo=r(RDe," (throws an error)."),RDe.forEach(t),KNo=i(ol),gt=n(ol,"DIV",{class:!0});var Y3=s(gt);T(HA.$$.fragment,Y3),ZNo=i(Y3),Nge=n(Y3,"P",{});var Vmt=s(Nge);ejo=r(Vmt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vmt.forEach(t),ojo=i(Y3),td=n(Y3,"P",{});var IZ=s(td);rjo=r(IZ,`Note:
Loading a model from its configuration file does `),jge=n(IZ,"STRONG",{});var Xmt=s(jge);tjo=r(Xmt,"not"),Xmt.forEach(t),ajo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(IZ,"A",{href:!0});var zmt=s(WO);njo=r(zmt,"from_pretrained()"),zmt.forEach(t),sjo=r(IZ," to load the model weights."),IZ.forEach(t),ljo=i(Y3),T(yv.$$.fragment,Y3),Y3.forEach(t),ijo=i(ol),ao=n(ol,"DIV",{class:!0});var ma=s(ao);T(UA.$$.fragment,ma),djo=i(ma),Dge=n(ma,"P",{});var Wmt=s(Dge);cjo=r(Wmt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wmt.forEach(t),fjo=i(ma),Da=n(ma,"P",{});var K3=s(Da);mjo=r(K3,"The model class to instantiate is selected based on the "),Gge=n(K3,"CODE",{});var Qmt=s(Gge);gjo=r(Qmt,"model_type"),Qmt.forEach(t),hjo=r(K3,` property of the config object (either
passed as an argument or loaded from `),Oge=n(K3,"CODE",{});var Hmt=s(Oge);pjo=r(Hmt,"pretrained_model_name_or_path"),Hmt.forEach(t),ujo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(K3,"CODE",{});var Umt=s(Vge);_jo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),bjo=r(K3,":"),K3.forEach(t),vjo=i(ma),U=n(ma,"UL",{});var J=s(U);Lv=n(J,"LI",{});var S9e=s(Lv);Xge=n(S9e,"STRONG",{});var Jmt=s(Xge);Fjo=r(Jmt,"albert"),Jmt.forEach(t),Tjo=r(S9e," \u2014 "),QO=n(S9e,"A",{href:!0});var Ymt=s(QO);Mjo=r(Ymt,"AlbertForTokenClassification"),Ymt.forEach(t),Ejo=r(S9e," (ALBERT model)"),S9e.forEach(t),Cjo=i(J),xv=n(J,"LI",{});var R9e=s(xv);zge=n(R9e,"STRONG",{});var Kmt=s(zge);wjo=r(Kmt,"bert"),Kmt.forEach(t),Ajo=r(R9e," \u2014 "),HO=n(R9e,"A",{href:!0});var Zmt=s(HO);yjo=r(Zmt,"BertForTokenClassification"),Zmt.forEach(t),Ljo=r(R9e," (BERT model)"),R9e.forEach(t),xjo=i(J),$v=n(J,"LI",{});var P9e=s($v);Wge=n(P9e,"STRONG",{});var egt=s(Wge);$jo=r(egt,"big_bird"),egt.forEach(t),kjo=r(P9e," \u2014 "),UO=n(P9e,"A",{href:!0});var ogt=s(UO);Sjo=r(ogt,"BigBirdForTokenClassification"),ogt.forEach(t),Rjo=r(P9e," (BigBird model)"),P9e.forEach(t),Pjo=i(J),kv=n(J,"LI",{});var B9e=s(kv);Qge=n(B9e,"STRONG",{});var rgt=s(Qge);Bjo=r(rgt,"camembert"),rgt.forEach(t),Ijo=r(B9e," \u2014 "),JO=n(B9e,"A",{href:!0});var tgt=s(JO);qjo=r(tgt,"CamembertForTokenClassification"),tgt.forEach(t),Njo=r(B9e," (CamemBERT model)"),B9e.forEach(t),jjo=i(J),Sv=n(J,"LI",{});var I9e=s(Sv);Hge=n(I9e,"STRONG",{});var agt=s(Hge);Djo=r(agt,"canine"),agt.forEach(t),Gjo=r(I9e," \u2014 "),YO=n(I9e,"A",{href:!0});var ngt=s(YO);Ojo=r(ngt,"CanineForTokenClassification"),ngt.forEach(t),Vjo=r(I9e," (Canine model)"),I9e.forEach(t),Xjo=i(J),Rv=n(J,"LI",{});var q9e=s(Rv);Uge=n(q9e,"STRONG",{});var sgt=s(Uge);zjo=r(sgt,"convbert"),sgt.forEach(t),Wjo=r(q9e," \u2014 "),KO=n(q9e,"A",{href:!0});var lgt=s(KO);Qjo=r(lgt,"ConvBertForTokenClassification"),lgt.forEach(t),Hjo=r(q9e," (ConvBERT model)"),q9e.forEach(t),Ujo=i(J),Pv=n(J,"LI",{});var N9e=s(Pv);Jge=n(N9e,"STRONG",{});var igt=s(Jge);Jjo=r(igt,"data2vec-text"),igt.forEach(t),Yjo=r(N9e," \u2014 "),ZO=n(N9e,"A",{href:!0});var dgt=s(ZO);Kjo=r(dgt,"Data2VecTextForTokenClassification"),dgt.forEach(t),Zjo=r(N9e," (Data2VecText model)"),N9e.forEach(t),eDo=i(J),Bv=n(J,"LI",{});var j9e=s(Bv);Yge=n(j9e,"STRONG",{});var cgt=s(Yge);oDo=r(cgt,"deberta"),cgt.forEach(t),rDo=r(j9e," \u2014 "),eV=n(j9e,"A",{href:!0});var fgt=s(eV);tDo=r(fgt,"DebertaForTokenClassification"),fgt.forEach(t),aDo=r(j9e," (DeBERTa model)"),j9e.forEach(t),nDo=i(J),Iv=n(J,"LI",{});var D9e=s(Iv);Kge=n(D9e,"STRONG",{});var mgt=s(Kge);sDo=r(mgt,"deberta-v2"),mgt.forEach(t),lDo=r(D9e," \u2014 "),oV=n(D9e,"A",{href:!0});var ggt=s(oV);iDo=r(ggt,"DebertaV2ForTokenClassification"),ggt.forEach(t),dDo=r(D9e," (DeBERTa-v2 model)"),D9e.forEach(t),cDo=i(J),qv=n(J,"LI",{});var G9e=s(qv);Zge=n(G9e,"STRONG",{});var hgt=s(Zge);fDo=r(hgt,"distilbert"),hgt.forEach(t),mDo=r(G9e," \u2014 "),rV=n(G9e,"A",{href:!0});var pgt=s(rV);gDo=r(pgt,"DistilBertForTokenClassification"),pgt.forEach(t),hDo=r(G9e," (DistilBERT model)"),G9e.forEach(t),pDo=i(J),Nv=n(J,"LI",{});var O9e=s(Nv);ehe=n(O9e,"STRONG",{});var ugt=s(ehe);uDo=r(ugt,"electra"),ugt.forEach(t),_Do=r(O9e," \u2014 "),tV=n(O9e,"A",{href:!0});var _gt=s(tV);bDo=r(_gt,"ElectraForTokenClassification"),_gt.forEach(t),vDo=r(O9e," (ELECTRA model)"),O9e.forEach(t),FDo=i(J),jv=n(J,"LI",{});var V9e=s(jv);ohe=n(V9e,"STRONG",{});var bgt=s(ohe);TDo=r(bgt,"flaubert"),bgt.forEach(t),MDo=r(V9e," \u2014 "),aV=n(V9e,"A",{href:!0});var vgt=s(aV);EDo=r(vgt,"FlaubertForTokenClassification"),vgt.forEach(t),CDo=r(V9e," (FlauBERT model)"),V9e.forEach(t),wDo=i(J),Dv=n(J,"LI",{});var X9e=s(Dv);rhe=n(X9e,"STRONG",{});var Fgt=s(rhe);ADo=r(Fgt,"fnet"),Fgt.forEach(t),yDo=r(X9e," \u2014 "),nV=n(X9e,"A",{href:!0});var Tgt=s(nV);LDo=r(Tgt,"FNetForTokenClassification"),Tgt.forEach(t),xDo=r(X9e," (FNet model)"),X9e.forEach(t),$Do=i(J),Gv=n(J,"LI",{});var z9e=s(Gv);the=n(z9e,"STRONG",{});var Mgt=s(the);kDo=r(Mgt,"funnel"),Mgt.forEach(t),SDo=r(z9e," \u2014 "),sV=n(z9e,"A",{href:!0});var Egt=s(sV);RDo=r(Egt,"FunnelForTokenClassification"),Egt.forEach(t),PDo=r(z9e," (Funnel Transformer model)"),z9e.forEach(t),BDo=i(J),Ov=n(J,"LI",{});var W9e=s(Ov);ahe=n(W9e,"STRONG",{});var Cgt=s(ahe);IDo=r(Cgt,"gpt2"),Cgt.forEach(t),qDo=r(W9e," \u2014 "),lV=n(W9e,"A",{href:!0});var wgt=s(lV);NDo=r(wgt,"GPT2ForTokenClassification"),wgt.forEach(t),jDo=r(W9e," (OpenAI GPT-2 model)"),W9e.forEach(t),DDo=i(J),Vv=n(J,"LI",{});var Q9e=s(Vv);nhe=n(Q9e,"STRONG",{});var Agt=s(nhe);GDo=r(Agt,"ibert"),Agt.forEach(t),ODo=r(Q9e," \u2014 "),iV=n(Q9e,"A",{href:!0});var ygt=s(iV);VDo=r(ygt,"IBertForTokenClassification"),ygt.forEach(t),XDo=r(Q9e," (I-BERT model)"),Q9e.forEach(t),zDo=i(J),Xv=n(J,"LI",{});var H9e=s(Xv);she=n(H9e,"STRONG",{});var Lgt=s(she);WDo=r(Lgt,"layoutlm"),Lgt.forEach(t),QDo=r(H9e," \u2014 "),dV=n(H9e,"A",{href:!0});var xgt=s(dV);HDo=r(xgt,"LayoutLMForTokenClassification"),xgt.forEach(t),UDo=r(H9e," (LayoutLM model)"),H9e.forEach(t),JDo=i(J),zv=n(J,"LI",{});var U9e=s(zv);lhe=n(U9e,"STRONG",{});var $gt=s(lhe);YDo=r($gt,"layoutlmv2"),$gt.forEach(t),KDo=r(U9e," \u2014 "),cV=n(U9e,"A",{href:!0});var kgt=s(cV);ZDo=r(kgt,"LayoutLMv2ForTokenClassification"),kgt.forEach(t),eGo=r(U9e," (LayoutLMv2 model)"),U9e.forEach(t),oGo=i(J),Wv=n(J,"LI",{});var J9e=s(Wv);ihe=n(J9e,"STRONG",{});var Sgt=s(ihe);rGo=r(Sgt,"longformer"),Sgt.forEach(t),tGo=r(J9e," \u2014 "),fV=n(J9e,"A",{href:!0});var Rgt=s(fV);aGo=r(Rgt,"LongformerForTokenClassification"),Rgt.forEach(t),nGo=r(J9e," (Longformer model)"),J9e.forEach(t),sGo=i(J),Qv=n(J,"LI",{});var Y9e=s(Qv);dhe=n(Y9e,"STRONG",{});var Pgt=s(dhe);lGo=r(Pgt,"megatron-bert"),Pgt.forEach(t),iGo=r(Y9e," \u2014 "),mV=n(Y9e,"A",{href:!0});var Bgt=s(mV);dGo=r(Bgt,"MegatronBertForTokenClassification"),Bgt.forEach(t),cGo=r(Y9e," (MegatronBert model)"),Y9e.forEach(t),fGo=i(J),Hv=n(J,"LI",{});var K9e=s(Hv);che=n(K9e,"STRONG",{});var Igt=s(che);mGo=r(Igt,"mobilebert"),Igt.forEach(t),gGo=r(K9e," \u2014 "),gV=n(K9e,"A",{href:!0});var qgt=s(gV);hGo=r(qgt,"MobileBertForTokenClassification"),qgt.forEach(t),pGo=r(K9e," (MobileBERT model)"),K9e.forEach(t),uGo=i(J),Uv=n(J,"LI",{});var Z9e=s(Uv);fhe=n(Z9e,"STRONG",{});var Ngt=s(fhe);_Go=r(Ngt,"mpnet"),Ngt.forEach(t),bGo=r(Z9e," \u2014 "),hV=n(Z9e,"A",{href:!0});var jgt=s(hV);vGo=r(jgt,"MPNetForTokenClassification"),jgt.forEach(t),FGo=r(Z9e," (MPNet model)"),Z9e.forEach(t),TGo=i(J),Jv=n(J,"LI",{});var e$e=s(Jv);mhe=n(e$e,"STRONG",{});var Dgt=s(mhe);MGo=r(Dgt,"nystromformer"),Dgt.forEach(t),EGo=r(e$e," \u2014 "),pV=n(e$e,"A",{href:!0});var Ggt=s(pV);CGo=r(Ggt,"NystromformerForTokenClassification"),Ggt.forEach(t),wGo=r(e$e," (Nystromformer model)"),e$e.forEach(t),AGo=i(J),Yv=n(J,"LI",{});var o$e=s(Yv);ghe=n(o$e,"STRONG",{});var Ogt=s(ghe);yGo=r(Ogt,"qdqbert"),Ogt.forEach(t),LGo=r(o$e," \u2014 "),uV=n(o$e,"A",{href:!0});var Vgt=s(uV);xGo=r(Vgt,"QDQBertForTokenClassification"),Vgt.forEach(t),$Go=r(o$e," (QDQBert model)"),o$e.forEach(t),kGo=i(J),Kv=n(J,"LI",{});var r$e=s(Kv);hhe=n(r$e,"STRONG",{});var Xgt=s(hhe);SGo=r(Xgt,"rembert"),Xgt.forEach(t),RGo=r(r$e," \u2014 "),_V=n(r$e,"A",{href:!0});var zgt=s(_V);PGo=r(zgt,"RemBertForTokenClassification"),zgt.forEach(t),BGo=r(r$e," (RemBERT model)"),r$e.forEach(t),IGo=i(J),Zv=n(J,"LI",{});var t$e=s(Zv);phe=n(t$e,"STRONG",{});var Wgt=s(phe);qGo=r(Wgt,"roberta"),Wgt.forEach(t),NGo=r(t$e," \u2014 "),bV=n(t$e,"A",{href:!0});var Qgt=s(bV);jGo=r(Qgt,"RobertaForTokenClassification"),Qgt.forEach(t),DGo=r(t$e," (RoBERTa model)"),t$e.forEach(t),GGo=i(J),eF=n(J,"LI",{});var a$e=s(eF);uhe=n(a$e,"STRONG",{});var Hgt=s(uhe);OGo=r(Hgt,"roformer"),Hgt.forEach(t),VGo=r(a$e," \u2014 "),vV=n(a$e,"A",{href:!0});var Ugt=s(vV);XGo=r(Ugt,"RoFormerForTokenClassification"),Ugt.forEach(t),zGo=r(a$e," (RoFormer model)"),a$e.forEach(t),WGo=i(J),oF=n(J,"LI",{});var n$e=s(oF);_he=n(n$e,"STRONG",{});var Jgt=s(_he);QGo=r(Jgt,"squeezebert"),Jgt.forEach(t),HGo=r(n$e," \u2014 "),FV=n(n$e,"A",{href:!0});var Ygt=s(FV);UGo=r(Ygt,"SqueezeBertForTokenClassification"),Ygt.forEach(t),JGo=r(n$e," (SqueezeBERT model)"),n$e.forEach(t),YGo=i(J),rF=n(J,"LI",{});var s$e=s(rF);bhe=n(s$e,"STRONG",{});var Kgt=s(bhe);KGo=r(Kgt,"xlm"),Kgt.forEach(t),ZGo=r(s$e," \u2014 "),TV=n(s$e,"A",{href:!0});var Zgt=s(TV);eOo=r(Zgt,"XLMForTokenClassification"),Zgt.forEach(t),oOo=r(s$e," (XLM model)"),s$e.forEach(t),rOo=i(J),tF=n(J,"LI",{});var l$e=s(tF);vhe=n(l$e,"STRONG",{});var eht=s(vhe);tOo=r(eht,"xlm-roberta"),eht.forEach(t),aOo=r(l$e," \u2014 "),MV=n(l$e,"A",{href:!0});var oht=s(MV);nOo=r(oht,"XLMRobertaForTokenClassification"),oht.forEach(t),sOo=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),lOo=i(J),aF=n(J,"LI",{});var i$e=s(aF);Fhe=n(i$e,"STRONG",{});var rht=s(Fhe);iOo=r(rht,"xlm-roberta-xl"),rht.forEach(t),dOo=r(i$e," \u2014 "),EV=n(i$e,"A",{href:!0});var tht=s(EV);cOo=r(tht,"XLMRobertaXLForTokenClassification"),tht.forEach(t),fOo=r(i$e," (XLM-RoBERTa-XL model)"),i$e.forEach(t),mOo=i(J),nF=n(J,"LI",{});var d$e=s(nF);The=n(d$e,"STRONG",{});var aht=s(The);gOo=r(aht,"xlnet"),aht.forEach(t),hOo=r(d$e," \u2014 "),CV=n(d$e,"A",{href:!0});var nht=s(CV);pOo=r(nht,"XLNetForTokenClassification"),nht.forEach(t),uOo=r(d$e," (XLNet model)"),d$e.forEach(t),_Oo=i(J),sF=n(J,"LI",{});var c$e=s(sF);Mhe=n(c$e,"STRONG",{});var sht=s(Mhe);bOo=r(sht,"yoso"),sht.forEach(t),vOo=r(c$e," \u2014 "),wV=n(c$e,"A",{href:!0});var lht=s(wV);FOo=r(lht,"YosoForTokenClassification"),lht.forEach(t),TOo=r(c$e," (YOSO model)"),c$e.forEach(t),J.forEach(t),MOo=i(ma),lF=n(ma,"P",{});var f$e=s(lF);EOo=r(f$e,"The model is set in evaluation mode by default using "),Ehe=n(f$e,"CODE",{});var iht=s(Ehe);COo=r(iht,"model.eval()"),iht.forEach(t),wOo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(f$e,"CODE",{});var dht=s(Che);AOo=r(dht,"model.train()"),dht.forEach(t),f$e.forEach(t),yOo=i(ma),T(iF.$$.fragment,ma),ma.forEach(t),ol.forEach(t),LNe=i(f),ad=n(f,"H2",{class:!0});var PDe=s(ad);dF=n(PDe,"A",{id:!0,class:!0,href:!0});var cht=s(dF);whe=n(cht,"SPAN",{});var fht=s(whe);T(JA.$$.fragment,fht),fht.forEach(t),cht.forEach(t),LOo=i(PDe),Ahe=n(PDe,"SPAN",{});var mht=s(Ahe);xOo=r(mht,"AutoModelForQuestionAnswering"),mht.forEach(t),PDe.forEach(t),xNe=i(f),No=n(f,"DIV",{class:!0});var rl=s(No);T(YA.$$.fragment,rl),$Oo=i(rl),nd=n(rl,"P",{});var qZ=s(nd);kOo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AV=n(qZ,"A",{href:!0});var ght=s(AV);SOo=r(ght,"from_pretrained()"),ght.forEach(t),ROo=r(qZ," class method or the "),yV=n(qZ,"A",{href:!0});var hht=s(yV);POo=r(hht,"from_config()"),hht.forEach(t),BOo=r(qZ,` class
method.`),qZ.forEach(t),IOo=i(rl),KA=n(rl,"P",{});var BDe=s(KA);qOo=r(BDe,"This class cannot be instantiated directly using "),yhe=n(BDe,"CODE",{});var pht=s(yhe);NOo=r(pht,"__init__()"),pht.forEach(t),jOo=r(BDe," (throws an error)."),BDe.forEach(t),DOo=i(rl),ht=n(rl,"DIV",{class:!0});var Z3=s(ht);T(ZA.$$.fragment,Z3),GOo=i(Z3),Lhe=n(Z3,"P",{});var uht=s(Lhe);OOo=r(uht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uht.forEach(t),VOo=i(Z3),sd=n(Z3,"P",{});var NZ=s(sd);XOo=r(NZ,`Note:
Loading a model from its configuration file does `),xhe=n(NZ,"STRONG",{});var _ht=s(xhe);zOo=r(_ht,"not"),_ht.forEach(t),WOo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(NZ,"A",{href:!0});var bht=s(LV);QOo=r(bht,"from_pretrained()"),bht.forEach(t),HOo=r(NZ," to load the model weights."),NZ.forEach(t),UOo=i(Z3),T(cF.$$.fragment,Z3),Z3.forEach(t),JOo=i(rl),no=n(rl,"DIV",{class:!0});var ga=s(no);T(ey.$$.fragment,ga),YOo=i(ga),$he=n(ga,"P",{});var vht=s($he);KOo=r(vht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vht.forEach(t),ZOo=i(ga),Ga=n(ga,"P",{});var ew=s(Ga);eVo=r(ew,"The model class to instantiate is selected based on the "),khe=n(ew,"CODE",{});var Fht=s(khe);oVo=r(Fht,"model_type"),Fht.forEach(t),rVo=r(ew,` property of the config object (either
passed as an argument or loaded from `),She=n(ew,"CODE",{});var Tht=s(She);tVo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),aVo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(ew,"CODE",{});var Mht=s(Rhe);nVo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),sVo=r(ew,":"),ew.forEach(t),lVo=i(ga),V=n(ga,"UL",{});var X=s(V);fF=n(X,"LI",{});var m$e=s(fF);Phe=n(m$e,"STRONG",{});var Eht=s(Phe);iVo=r(Eht,"albert"),Eht.forEach(t),dVo=r(m$e," \u2014 "),xV=n(m$e,"A",{href:!0});var Cht=s(xV);cVo=r(Cht,"AlbertForQuestionAnswering"),Cht.forEach(t),fVo=r(m$e," (ALBERT model)"),m$e.forEach(t),mVo=i(X),mF=n(X,"LI",{});var g$e=s(mF);Bhe=n(g$e,"STRONG",{});var wht=s(Bhe);gVo=r(wht,"bart"),wht.forEach(t),hVo=r(g$e," \u2014 "),$V=n(g$e,"A",{href:!0});var Aht=s($V);pVo=r(Aht,"BartForQuestionAnswering"),Aht.forEach(t),uVo=r(g$e," (BART model)"),g$e.forEach(t),_Vo=i(X),gF=n(X,"LI",{});var h$e=s(gF);Ihe=n(h$e,"STRONG",{});var yht=s(Ihe);bVo=r(yht,"bert"),yht.forEach(t),vVo=r(h$e," \u2014 "),kV=n(h$e,"A",{href:!0});var Lht=s(kV);FVo=r(Lht,"BertForQuestionAnswering"),Lht.forEach(t),TVo=r(h$e," (BERT model)"),h$e.forEach(t),MVo=i(X),hF=n(X,"LI",{});var p$e=s(hF);qhe=n(p$e,"STRONG",{});var xht=s(qhe);EVo=r(xht,"big_bird"),xht.forEach(t),CVo=r(p$e," \u2014 "),SV=n(p$e,"A",{href:!0});var $ht=s(SV);wVo=r($ht,"BigBirdForQuestionAnswering"),$ht.forEach(t),AVo=r(p$e," (BigBird model)"),p$e.forEach(t),yVo=i(X),pF=n(X,"LI",{});var u$e=s(pF);Nhe=n(u$e,"STRONG",{});var kht=s(Nhe);LVo=r(kht,"bigbird_pegasus"),kht.forEach(t),xVo=r(u$e," \u2014 "),RV=n(u$e,"A",{href:!0});var Sht=s(RV);$Vo=r(Sht,"BigBirdPegasusForQuestionAnswering"),Sht.forEach(t),kVo=r(u$e," (BigBirdPegasus model)"),u$e.forEach(t),SVo=i(X),uF=n(X,"LI",{});var _$e=s(uF);jhe=n(_$e,"STRONG",{});var Rht=s(jhe);RVo=r(Rht,"camembert"),Rht.forEach(t),PVo=r(_$e," \u2014 "),PV=n(_$e,"A",{href:!0});var Pht=s(PV);BVo=r(Pht,"CamembertForQuestionAnswering"),Pht.forEach(t),IVo=r(_$e," (CamemBERT model)"),_$e.forEach(t),qVo=i(X),_F=n(X,"LI",{});var b$e=s(_F);Dhe=n(b$e,"STRONG",{});var Bht=s(Dhe);NVo=r(Bht,"canine"),Bht.forEach(t),jVo=r(b$e," \u2014 "),BV=n(b$e,"A",{href:!0});var Iht=s(BV);DVo=r(Iht,"CanineForQuestionAnswering"),Iht.forEach(t),GVo=r(b$e," (Canine model)"),b$e.forEach(t),OVo=i(X),bF=n(X,"LI",{});var v$e=s(bF);Ghe=n(v$e,"STRONG",{});var qht=s(Ghe);VVo=r(qht,"convbert"),qht.forEach(t),XVo=r(v$e," \u2014 "),IV=n(v$e,"A",{href:!0});var Nht=s(IV);zVo=r(Nht,"ConvBertForQuestionAnswering"),Nht.forEach(t),WVo=r(v$e," (ConvBERT model)"),v$e.forEach(t),QVo=i(X),vF=n(X,"LI",{});var F$e=s(vF);Ohe=n(F$e,"STRONG",{});var jht=s(Ohe);HVo=r(jht,"data2vec-text"),jht.forEach(t),UVo=r(F$e," \u2014 "),qV=n(F$e,"A",{href:!0});var Dht=s(qV);JVo=r(Dht,"Data2VecTextForQuestionAnswering"),Dht.forEach(t),YVo=r(F$e," (Data2VecText model)"),F$e.forEach(t),KVo=i(X),FF=n(X,"LI",{});var T$e=s(FF);Vhe=n(T$e,"STRONG",{});var Ght=s(Vhe);ZVo=r(Ght,"deberta"),Ght.forEach(t),eXo=r(T$e," \u2014 "),NV=n(T$e,"A",{href:!0});var Oht=s(NV);oXo=r(Oht,"DebertaForQuestionAnswering"),Oht.forEach(t),rXo=r(T$e," (DeBERTa model)"),T$e.forEach(t),tXo=i(X),TF=n(X,"LI",{});var M$e=s(TF);Xhe=n(M$e,"STRONG",{});var Vht=s(Xhe);aXo=r(Vht,"deberta-v2"),Vht.forEach(t),nXo=r(M$e," \u2014 "),jV=n(M$e,"A",{href:!0});var Xht=s(jV);sXo=r(Xht,"DebertaV2ForQuestionAnswering"),Xht.forEach(t),lXo=r(M$e," (DeBERTa-v2 model)"),M$e.forEach(t),iXo=i(X),MF=n(X,"LI",{});var E$e=s(MF);zhe=n(E$e,"STRONG",{});var zht=s(zhe);dXo=r(zht,"distilbert"),zht.forEach(t),cXo=r(E$e," \u2014 "),DV=n(E$e,"A",{href:!0});var Wht=s(DV);fXo=r(Wht,"DistilBertForQuestionAnswering"),Wht.forEach(t),mXo=r(E$e," (DistilBERT model)"),E$e.forEach(t),gXo=i(X),EF=n(X,"LI",{});var C$e=s(EF);Whe=n(C$e,"STRONG",{});var Qht=s(Whe);hXo=r(Qht,"electra"),Qht.forEach(t),pXo=r(C$e," \u2014 "),GV=n(C$e,"A",{href:!0});var Hht=s(GV);uXo=r(Hht,"ElectraForQuestionAnswering"),Hht.forEach(t),_Xo=r(C$e," (ELECTRA model)"),C$e.forEach(t),bXo=i(X),CF=n(X,"LI",{});var w$e=s(CF);Qhe=n(w$e,"STRONG",{});var Uht=s(Qhe);vXo=r(Uht,"flaubert"),Uht.forEach(t),FXo=r(w$e," \u2014 "),OV=n(w$e,"A",{href:!0});var Jht=s(OV);TXo=r(Jht,"FlaubertForQuestionAnsweringSimple"),Jht.forEach(t),MXo=r(w$e," (FlauBERT model)"),w$e.forEach(t),EXo=i(X),wF=n(X,"LI",{});var A$e=s(wF);Hhe=n(A$e,"STRONG",{});var Yht=s(Hhe);CXo=r(Yht,"fnet"),Yht.forEach(t),wXo=r(A$e," \u2014 "),VV=n(A$e,"A",{href:!0});var Kht=s(VV);AXo=r(Kht,"FNetForQuestionAnswering"),Kht.forEach(t),yXo=r(A$e," (FNet model)"),A$e.forEach(t),LXo=i(X),AF=n(X,"LI",{});var y$e=s(AF);Uhe=n(y$e,"STRONG",{});var Zht=s(Uhe);xXo=r(Zht,"funnel"),Zht.forEach(t),$Xo=r(y$e," \u2014 "),XV=n(y$e,"A",{href:!0});var ept=s(XV);kXo=r(ept,"FunnelForQuestionAnswering"),ept.forEach(t),SXo=r(y$e," (Funnel Transformer model)"),y$e.forEach(t),RXo=i(X),yF=n(X,"LI",{});var L$e=s(yF);Jhe=n(L$e,"STRONG",{});var opt=s(Jhe);PXo=r(opt,"gptj"),opt.forEach(t),BXo=r(L$e," \u2014 "),zV=n(L$e,"A",{href:!0});var rpt=s(zV);IXo=r(rpt,"GPTJForQuestionAnswering"),rpt.forEach(t),qXo=r(L$e," (GPT-J model)"),L$e.forEach(t),NXo=i(X),LF=n(X,"LI",{});var x$e=s(LF);Yhe=n(x$e,"STRONG",{});var tpt=s(Yhe);jXo=r(tpt,"ibert"),tpt.forEach(t),DXo=r(x$e," \u2014 "),WV=n(x$e,"A",{href:!0});var apt=s(WV);GXo=r(apt,"IBertForQuestionAnswering"),apt.forEach(t),OXo=r(x$e," (I-BERT model)"),x$e.forEach(t),VXo=i(X),xF=n(X,"LI",{});var $$e=s(xF);Khe=n($$e,"STRONG",{});var npt=s(Khe);XXo=r(npt,"layoutlmv2"),npt.forEach(t),zXo=r($$e," \u2014 "),QV=n($$e,"A",{href:!0});var spt=s(QV);WXo=r(spt,"LayoutLMv2ForQuestionAnswering"),spt.forEach(t),QXo=r($$e," (LayoutLMv2 model)"),$$e.forEach(t),HXo=i(X),$F=n(X,"LI",{});var k$e=s($F);Zhe=n(k$e,"STRONG",{});var lpt=s(Zhe);UXo=r(lpt,"led"),lpt.forEach(t),JXo=r(k$e," \u2014 "),HV=n(k$e,"A",{href:!0});var ipt=s(HV);YXo=r(ipt,"LEDForQuestionAnswering"),ipt.forEach(t),KXo=r(k$e," (LED model)"),k$e.forEach(t),ZXo=i(X),kF=n(X,"LI",{});var S$e=s(kF);epe=n(S$e,"STRONG",{});var dpt=s(epe);ezo=r(dpt,"longformer"),dpt.forEach(t),ozo=r(S$e," \u2014 "),UV=n(S$e,"A",{href:!0});var cpt=s(UV);rzo=r(cpt,"LongformerForQuestionAnswering"),cpt.forEach(t),tzo=r(S$e," (Longformer model)"),S$e.forEach(t),azo=i(X),SF=n(X,"LI",{});var R$e=s(SF);ope=n(R$e,"STRONG",{});var fpt=s(ope);nzo=r(fpt,"lxmert"),fpt.forEach(t),szo=r(R$e," \u2014 "),JV=n(R$e,"A",{href:!0});var mpt=s(JV);lzo=r(mpt,"LxmertForQuestionAnswering"),mpt.forEach(t),izo=r(R$e," (LXMERT model)"),R$e.forEach(t),dzo=i(X),RF=n(X,"LI",{});var P$e=s(RF);rpe=n(P$e,"STRONG",{});var gpt=s(rpe);czo=r(gpt,"mbart"),gpt.forEach(t),fzo=r(P$e," \u2014 "),YV=n(P$e,"A",{href:!0});var hpt=s(YV);mzo=r(hpt,"MBartForQuestionAnswering"),hpt.forEach(t),gzo=r(P$e," (mBART model)"),P$e.forEach(t),hzo=i(X),PF=n(X,"LI",{});var B$e=s(PF);tpe=n(B$e,"STRONG",{});var ppt=s(tpe);pzo=r(ppt,"megatron-bert"),ppt.forEach(t),uzo=r(B$e," \u2014 "),KV=n(B$e,"A",{href:!0});var upt=s(KV);_zo=r(upt,"MegatronBertForQuestionAnswering"),upt.forEach(t),bzo=r(B$e," (MegatronBert model)"),B$e.forEach(t),vzo=i(X),BF=n(X,"LI",{});var I$e=s(BF);ape=n(I$e,"STRONG",{});var _pt=s(ape);Fzo=r(_pt,"mobilebert"),_pt.forEach(t),Tzo=r(I$e," \u2014 "),ZV=n(I$e,"A",{href:!0});var bpt=s(ZV);Mzo=r(bpt,"MobileBertForQuestionAnswering"),bpt.forEach(t),Ezo=r(I$e," (MobileBERT model)"),I$e.forEach(t),Czo=i(X),IF=n(X,"LI",{});var q$e=s(IF);npe=n(q$e,"STRONG",{});var vpt=s(npe);wzo=r(vpt,"mpnet"),vpt.forEach(t),Azo=r(q$e," \u2014 "),eX=n(q$e,"A",{href:!0});var Fpt=s(eX);yzo=r(Fpt,"MPNetForQuestionAnswering"),Fpt.forEach(t),Lzo=r(q$e," (MPNet model)"),q$e.forEach(t),xzo=i(X),qF=n(X,"LI",{});var N$e=s(qF);spe=n(N$e,"STRONG",{});var Tpt=s(spe);$zo=r(Tpt,"nystromformer"),Tpt.forEach(t),kzo=r(N$e," \u2014 "),oX=n(N$e,"A",{href:!0});var Mpt=s(oX);Szo=r(Mpt,"NystromformerForQuestionAnswering"),Mpt.forEach(t),Rzo=r(N$e," (Nystromformer model)"),N$e.forEach(t),Pzo=i(X),NF=n(X,"LI",{});var j$e=s(NF);lpe=n(j$e,"STRONG",{});var Ept=s(lpe);Bzo=r(Ept,"qdqbert"),Ept.forEach(t),Izo=r(j$e," \u2014 "),rX=n(j$e,"A",{href:!0});var Cpt=s(rX);qzo=r(Cpt,"QDQBertForQuestionAnswering"),Cpt.forEach(t),Nzo=r(j$e," (QDQBert model)"),j$e.forEach(t),jzo=i(X),jF=n(X,"LI",{});var D$e=s(jF);ipe=n(D$e,"STRONG",{});var wpt=s(ipe);Dzo=r(wpt,"reformer"),wpt.forEach(t),Gzo=r(D$e," \u2014 "),tX=n(D$e,"A",{href:!0});var Apt=s(tX);Ozo=r(Apt,"ReformerForQuestionAnswering"),Apt.forEach(t),Vzo=r(D$e," (Reformer model)"),D$e.forEach(t),Xzo=i(X),DF=n(X,"LI",{});var G$e=s(DF);dpe=n(G$e,"STRONG",{});var ypt=s(dpe);zzo=r(ypt,"rembert"),ypt.forEach(t),Wzo=r(G$e," \u2014 "),aX=n(G$e,"A",{href:!0});var Lpt=s(aX);Qzo=r(Lpt,"RemBertForQuestionAnswering"),Lpt.forEach(t),Hzo=r(G$e," (RemBERT model)"),G$e.forEach(t),Uzo=i(X),GF=n(X,"LI",{});var O$e=s(GF);cpe=n(O$e,"STRONG",{});var xpt=s(cpe);Jzo=r(xpt,"roberta"),xpt.forEach(t),Yzo=r(O$e," \u2014 "),nX=n(O$e,"A",{href:!0});var $pt=s(nX);Kzo=r($pt,"RobertaForQuestionAnswering"),$pt.forEach(t),Zzo=r(O$e," (RoBERTa model)"),O$e.forEach(t),eWo=i(X),OF=n(X,"LI",{});var V$e=s(OF);fpe=n(V$e,"STRONG",{});var kpt=s(fpe);oWo=r(kpt,"roformer"),kpt.forEach(t),rWo=r(V$e," \u2014 "),sX=n(V$e,"A",{href:!0});var Spt=s(sX);tWo=r(Spt,"RoFormerForQuestionAnswering"),Spt.forEach(t),aWo=r(V$e," (RoFormer model)"),V$e.forEach(t),nWo=i(X),VF=n(X,"LI",{});var X$e=s(VF);mpe=n(X$e,"STRONG",{});var Rpt=s(mpe);sWo=r(Rpt,"splinter"),Rpt.forEach(t),lWo=r(X$e," \u2014 "),lX=n(X$e,"A",{href:!0});var Ppt=s(lX);iWo=r(Ppt,"SplinterForQuestionAnswering"),Ppt.forEach(t),dWo=r(X$e," (Splinter model)"),X$e.forEach(t),cWo=i(X),XF=n(X,"LI",{});var z$e=s(XF);gpe=n(z$e,"STRONG",{});var Bpt=s(gpe);fWo=r(Bpt,"squeezebert"),Bpt.forEach(t),mWo=r(z$e," \u2014 "),iX=n(z$e,"A",{href:!0});var Ipt=s(iX);gWo=r(Ipt,"SqueezeBertForQuestionAnswering"),Ipt.forEach(t),hWo=r(z$e," (SqueezeBERT model)"),z$e.forEach(t),pWo=i(X),zF=n(X,"LI",{});var W$e=s(zF);hpe=n(W$e,"STRONG",{});var qpt=s(hpe);uWo=r(qpt,"xlm"),qpt.forEach(t),_Wo=r(W$e," \u2014 "),dX=n(W$e,"A",{href:!0});var Npt=s(dX);bWo=r(Npt,"XLMForQuestionAnsweringSimple"),Npt.forEach(t),vWo=r(W$e," (XLM model)"),W$e.forEach(t),FWo=i(X),WF=n(X,"LI",{});var Q$e=s(WF);ppe=n(Q$e,"STRONG",{});var jpt=s(ppe);TWo=r(jpt,"xlm-roberta"),jpt.forEach(t),MWo=r(Q$e," \u2014 "),cX=n(Q$e,"A",{href:!0});var Dpt=s(cX);EWo=r(Dpt,"XLMRobertaForQuestionAnswering"),Dpt.forEach(t),CWo=r(Q$e," (XLM-RoBERTa model)"),Q$e.forEach(t),wWo=i(X),QF=n(X,"LI",{});var H$e=s(QF);upe=n(H$e,"STRONG",{});var Gpt=s(upe);AWo=r(Gpt,"xlm-roberta-xl"),Gpt.forEach(t),yWo=r(H$e," \u2014 "),fX=n(H$e,"A",{href:!0});var Opt=s(fX);LWo=r(Opt,"XLMRobertaXLForQuestionAnswering"),Opt.forEach(t),xWo=r(H$e," (XLM-RoBERTa-XL model)"),H$e.forEach(t),$Wo=i(X),HF=n(X,"LI",{});var U$e=s(HF);_pe=n(U$e,"STRONG",{});var Vpt=s(_pe);kWo=r(Vpt,"xlnet"),Vpt.forEach(t),SWo=r(U$e," \u2014 "),mX=n(U$e,"A",{href:!0});var Xpt=s(mX);RWo=r(Xpt,"XLNetForQuestionAnsweringSimple"),Xpt.forEach(t),PWo=r(U$e," (XLNet model)"),U$e.forEach(t),BWo=i(X),UF=n(X,"LI",{});var J$e=s(UF);bpe=n(J$e,"STRONG",{});var zpt=s(bpe);IWo=r(zpt,"yoso"),zpt.forEach(t),qWo=r(J$e," \u2014 "),gX=n(J$e,"A",{href:!0});var Wpt=s(gX);NWo=r(Wpt,"YosoForQuestionAnswering"),Wpt.forEach(t),jWo=r(J$e," (YOSO model)"),J$e.forEach(t),X.forEach(t),DWo=i(ga),JF=n(ga,"P",{});var Y$e=s(JF);GWo=r(Y$e,"The model is set in evaluation mode by default using "),vpe=n(Y$e,"CODE",{});var Qpt=s(vpe);OWo=r(Qpt,"model.eval()"),Qpt.forEach(t),VWo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(Y$e,"CODE",{});var Hpt=s(Fpe);XWo=r(Hpt,"model.train()"),Hpt.forEach(t),Y$e.forEach(t),zWo=i(ga),T(YF.$$.fragment,ga),ga.forEach(t),rl.forEach(t),$Ne=i(f),ld=n(f,"H2",{class:!0});var IDe=s(ld);KF=n(IDe,"A",{id:!0,class:!0,href:!0});var Upt=s(KF);Tpe=n(Upt,"SPAN",{});var Jpt=s(Tpe);T(oy.$$.fragment,Jpt),Jpt.forEach(t),Upt.forEach(t),WWo=i(IDe),Mpe=n(IDe,"SPAN",{});var Ypt=s(Mpe);QWo=r(Ypt,"AutoModelForTableQuestionAnswering"),Ypt.forEach(t),IDe.forEach(t),kNe=i(f),jo=n(f,"DIV",{class:!0});var tl=s(jo);T(ry.$$.fragment,tl),HWo=i(tl),id=n(tl,"P",{});var jZ=s(id);UWo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=n(jZ,"A",{href:!0});var Kpt=s(hX);JWo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),YWo=r(jZ," class method or the "),pX=n(jZ,"A",{href:!0});var Zpt=s(pX);KWo=r(Zpt,"from_config()"),Zpt.forEach(t),ZWo=r(jZ,` class
method.`),jZ.forEach(t),eQo=i(tl),ty=n(tl,"P",{});var qDe=s(ty);oQo=r(qDe,"This class cannot be instantiated directly using "),Epe=n(qDe,"CODE",{});var eut=s(Epe);rQo=r(eut,"__init__()"),eut.forEach(t),tQo=r(qDe," (throws an error)."),qDe.forEach(t),aQo=i(tl),pt=n(tl,"DIV",{class:!0});var ow=s(pt);T(ay.$$.fragment,ow),nQo=i(ow),Cpe=n(ow,"P",{});var out=s(Cpe);sQo=r(out,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),out.forEach(t),lQo=i(ow),dd=n(ow,"P",{});var DZ=s(dd);iQo=r(DZ,`Note:
Loading a model from its configuration file does `),wpe=n(DZ,"STRONG",{});var rut=s(wpe);dQo=r(rut,"not"),rut.forEach(t),cQo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(DZ,"A",{href:!0});var tut=s(uX);fQo=r(tut,"from_pretrained()"),tut.forEach(t),mQo=r(DZ," to load the model weights."),DZ.forEach(t),gQo=i(ow),T(ZF.$$.fragment,ow),ow.forEach(t),hQo=i(tl),so=n(tl,"DIV",{class:!0});var ha=s(so);T(ny.$$.fragment,ha),pQo=i(ha),Ape=n(ha,"P",{});var aut=s(Ape);uQo=r(aut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aut.forEach(t),_Qo=i(ha),Oa=n(ha,"P",{});var rw=s(Oa);bQo=r(rw,"The model class to instantiate is selected based on the "),ype=n(rw,"CODE",{});var nut=s(ype);vQo=r(nut,"model_type"),nut.forEach(t),FQo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(rw,"CODE",{});var sut=s(Lpe);TQo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),MQo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(rw,"CODE",{});var lut=s(xpe);EQo=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),CQo=r(rw,":"),rw.forEach(t),wQo=i(ha),$pe=n(ha,"UL",{});var iut=s($pe);e6=n(iut,"LI",{});var K$e=s(e6);kpe=n(K$e,"STRONG",{});var dut=s(kpe);AQo=r(dut,"tapas"),dut.forEach(t),yQo=r(K$e," \u2014 "),_X=n(K$e,"A",{href:!0});var cut=s(_X);LQo=r(cut,"TapasForQuestionAnswering"),cut.forEach(t),xQo=r(K$e," (TAPAS model)"),K$e.forEach(t),iut.forEach(t),$Qo=i(ha),o6=n(ha,"P",{});var Z$e=s(o6);kQo=r(Z$e,"The model is set in evaluation mode by default using "),Spe=n(Z$e,"CODE",{});var fut=s(Spe);SQo=r(fut,"model.eval()"),fut.forEach(t),RQo=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(Z$e,"CODE",{});var mut=s(Rpe);PQo=r(mut,"model.train()"),mut.forEach(t),Z$e.forEach(t),BQo=i(ha),T(r6.$$.fragment,ha),ha.forEach(t),tl.forEach(t),SNe=i(f),cd=n(f,"H2",{class:!0});var NDe=s(cd);t6=n(NDe,"A",{id:!0,class:!0,href:!0});var gut=s(t6);Ppe=n(gut,"SPAN",{});var hut=s(Ppe);T(sy.$$.fragment,hut),hut.forEach(t),gut.forEach(t),IQo=i(NDe),Bpe=n(NDe,"SPAN",{});var put=s(Bpe);qQo=r(put,"AutoModelForImageClassification"),put.forEach(t),NDe.forEach(t),RNe=i(f),Do=n(f,"DIV",{class:!0});var al=s(Do);T(ly.$$.fragment,al),NQo=i(al),fd=n(al,"P",{});var GZ=s(fd);jQo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n(GZ,"A",{href:!0});var uut=s(bX);DQo=r(uut,"from_pretrained()"),uut.forEach(t),GQo=r(GZ," class method or the "),vX=n(GZ,"A",{href:!0});var _ut=s(vX);OQo=r(_ut,"from_config()"),_ut.forEach(t),VQo=r(GZ,` class
method.`),GZ.forEach(t),XQo=i(al),iy=n(al,"P",{});var jDe=s(iy);zQo=r(jDe,"This class cannot be instantiated directly using "),Ipe=n(jDe,"CODE",{});var but=s(Ipe);WQo=r(but,"__init__()"),but.forEach(t),QQo=r(jDe," (throws an error)."),jDe.forEach(t),HQo=i(al),ut=n(al,"DIV",{class:!0});var tw=s(ut);T(dy.$$.fragment,tw),UQo=i(tw),qpe=n(tw,"P",{});var vut=s(qpe);JQo=r(vut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vut.forEach(t),YQo=i(tw),md=n(tw,"P",{});var OZ=s(md);KQo=r(OZ,`Note:
Loading a model from its configuration file does `),Npe=n(OZ,"STRONG",{});var Fut=s(Npe);ZQo=r(Fut,"not"),Fut.forEach(t),eHo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(OZ,"A",{href:!0});var Tut=s(FX);oHo=r(Tut,"from_pretrained()"),Tut.forEach(t),rHo=r(OZ," to load the model weights."),OZ.forEach(t),tHo=i(tw),T(a6.$$.fragment,tw),tw.forEach(t),aHo=i(al),lo=n(al,"DIV",{class:!0});var pa=s(lo);T(cy.$$.fragment,pa),nHo=i(pa),jpe=n(pa,"P",{});var Mut=s(jpe);sHo=r(Mut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mut.forEach(t),lHo=i(pa),Va=n(pa,"P",{});var aw=s(Va);iHo=r(aw,"The model class to instantiate is selected based on the "),Dpe=n(aw,"CODE",{});var Eut=s(Dpe);dHo=r(Eut,"model_type"),Eut.forEach(t),cHo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(aw,"CODE",{});var Cut=s(Gpe);fHo=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),mHo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(aw,"CODE",{});var wut=s(Ope);gHo=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),hHo=r(aw,":"),aw.forEach(t),pHo=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);n6=n(Te,"LI",{});var eke=s(n6);Vpe=n(eke,"STRONG",{});var Aut=s(Vpe);uHo=r(Aut,"beit"),Aut.forEach(t),_Ho=r(eke," \u2014 "),TX=n(eke,"A",{href:!0});var yut=s(TX);bHo=r(yut,"BeitForImageClassification"),yut.forEach(t),vHo=r(eke," (BEiT model)"),eke.forEach(t),FHo=i(Te),s6=n(Te,"LI",{});var oke=s(s6);Xpe=n(oke,"STRONG",{});var Lut=s(Xpe);THo=r(Lut,"convnext"),Lut.forEach(t),MHo=r(oke," \u2014 "),MX=n(oke,"A",{href:!0});var xut=s(MX);EHo=r(xut,"ConvNextForImageClassification"),xut.forEach(t),CHo=r(oke," (ConvNext model)"),oke.forEach(t),wHo=i(Te),l6=n(Te,"LI",{});var rke=s(l6);zpe=n(rke,"STRONG",{});var $ut=s(zpe);AHo=r($ut,"cvt"),$ut.forEach(t),yHo=r(rke," \u2014 "),EX=n(rke,"A",{href:!0});var kut=s(EX);LHo=r(kut,"CvtForImageClassification"),kut.forEach(t),xHo=r(rke," (CvT model)"),rke.forEach(t),$Ho=i(Te),i6=n(Te,"LI",{});var tke=s(i6);Wpe=n(tke,"STRONG",{});var Sut=s(Wpe);kHo=r(Sut,"data2vec-vision"),Sut.forEach(t),SHo=r(tke," \u2014 "),CX=n(tke,"A",{href:!0});var Rut=s(CX);RHo=r(Rut,"Data2VecVisionForImageClassification"),Rut.forEach(t),PHo=r(tke," (Data2VecVision model)"),tke.forEach(t),BHo=i(Te),Ds=n(Te,"LI",{});var ek=s(Ds);Qpe=n(ek,"STRONG",{});var Put=s(Qpe);IHo=r(Put,"deit"),Put.forEach(t),qHo=r(ek," \u2014 "),wX=n(ek,"A",{href:!0});var But=s(wX);NHo=r(But,"DeiTForImageClassification"),But.forEach(t),jHo=r(ek," or "),AX=n(ek,"A",{href:!0});var Iut=s(AX);DHo=r(Iut,"DeiTForImageClassificationWithTeacher"),Iut.forEach(t),GHo=r(ek," (DeiT model)"),ek.forEach(t),OHo=i(Te),d6=n(Te,"LI",{});var ake=s(d6);Hpe=n(ake,"STRONG",{});var qut=s(Hpe);VHo=r(qut,"imagegpt"),qut.forEach(t),XHo=r(ake," \u2014 "),yX=n(ake,"A",{href:!0});var Nut=s(yX);zHo=r(Nut,"ImageGPTForImageClassification"),Nut.forEach(t),WHo=r(ake," (ImageGPT model)"),ake.forEach(t),QHo=i(Te),_t=n(Te,"LI",{});var Ef=s(_t);Upe=n(Ef,"STRONG",{});var jut=s(Upe);HHo=r(jut,"perceiver"),jut.forEach(t),UHo=r(Ef," \u2014 "),LX=n(Ef,"A",{href:!0});var Dut=s(LX);JHo=r(Dut,"PerceiverForImageClassificationLearned"),Dut.forEach(t),YHo=r(Ef," or "),xX=n(Ef,"A",{href:!0});var Gut=s(xX);KHo=r(Gut,"PerceiverForImageClassificationFourier"),Gut.forEach(t),ZHo=r(Ef," or "),$X=n(Ef,"A",{href:!0});var Out=s($X);eUo=r(Out,"PerceiverForImageClassificationConvProcessing"),Out.forEach(t),oUo=r(Ef," (Perceiver model)"),Ef.forEach(t),rUo=i(Te),c6=n(Te,"LI",{});var nke=s(c6);Jpe=n(nke,"STRONG",{});var Vut=s(Jpe);tUo=r(Vut,"poolformer"),Vut.forEach(t),aUo=r(nke," \u2014 "),kX=n(nke,"A",{href:!0});var Xut=s(kX);nUo=r(Xut,"PoolFormerForImageClassification"),Xut.forEach(t),sUo=r(nke," (PoolFormer model)"),nke.forEach(t),lUo=i(Te),f6=n(Te,"LI",{});var ske=s(f6);Ype=n(ske,"STRONG",{});var zut=s(Ype);iUo=r(zut,"regnet"),zut.forEach(t),dUo=r(ske," \u2014 "),SX=n(ske,"A",{href:!0});var Wut=s(SX);cUo=r(Wut,"RegNetForImageClassification"),Wut.forEach(t),fUo=r(ske," (RegNet model)"),ske.forEach(t),mUo=i(Te),m6=n(Te,"LI",{});var lke=s(m6);Kpe=n(lke,"STRONG",{});var Qut=s(Kpe);gUo=r(Qut,"resnet"),Qut.forEach(t),hUo=r(lke," \u2014 "),RX=n(lke,"A",{href:!0});var Hut=s(RX);pUo=r(Hut,"ResNetForImageClassification"),Hut.forEach(t),uUo=r(lke," (ResNet model)"),lke.forEach(t),_Uo=i(Te),g6=n(Te,"LI",{});var ike=s(g6);Zpe=n(ike,"STRONG",{});var Uut=s(Zpe);bUo=r(Uut,"segformer"),Uut.forEach(t),vUo=r(ike," \u2014 "),PX=n(ike,"A",{href:!0});var Jut=s(PX);FUo=r(Jut,"SegformerForImageClassification"),Jut.forEach(t),TUo=r(ike," (SegFormer model)"),ike.forEach(t),MUo=i(Te),h6=n(Te,"LI",{});var dke=s(h6);eue=n(dke,"STRONG",{});var Yut=s(eue);EUo=r(Yut,"swin"),Yut.forEach(t),CUo=r(dke," \u2014 "),BX=n(dke,"A",{href:!0});var Kut=s(BX);wUo=r(Kut,"SwinForImageClassification"),Kut.forEach(t),AUo=r(dke," (Swin model)"),dke.forEach(t),yUo=i(Te),p6=n(Te,"LI",{});var cke=s(p6);oue=n(cke,"STRONG",{});var Zut=s(oue);LUo=r(Zut,"van"),Zut.forEach(t),xUo=r(cke," \u2014 "),IX=n(cke,"A",{href:!0});var e_t=s(IX);$Uo=r(e_t,"VanForImageClassification"),e_t.forEach(t),kUo=r(cke," (VAN model)"),cke.forEach(t),SUo=i(Te),u6=n(Te,"LI",{});var fke=s(u6);rue=n(fke,"STRONG",{});var o_t=s(rue);RUo=r(o_t,"vit"),o_t.forEach(t),PUo=r(fke," \u2014 "),qX=n(fke,"A",{href:!0});var r_t=s(qX);BUo=r(r_t,"ViTForImageClassification"),r_t.forEach(t),IUo=r(fke," (ViT model)"),fke.forEach(t),Te.forEach(t),qUo=i(pa),_6=n(pa,"P",{});var mke=s(_6);NUo=r(mke,"The model is set in evaluation mode by default using "),tue=n(mke,"CODE",{});var t_t=s(tue);jUo=r(t_t,"model.eval()"),t_t.forEach(t),DUo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(mke,"CODE",{});var a_t=s(aue);GUo=r(a_t,"model.train()"),a_t.forEach(t),mke.forEach(t),OUo=i(pa),T(b6.$$.fragment,pa),pa.forEach(t),al.forEach(t),PNe=i(f),gd=n(f,"H2",{class:!0});var DDe=s(gd);v6=n(DDe,"A",{id:!0,class:!0,href:!0});var n_t=s(v6);nue=n(n_t,"SPAN",{});var s_t=s(nue);T(fy.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),VUo=i(DDe),sue=n(DDe,"SPAN",{});var l_t=s(sue);XUo=r(l_t,"AutoModelForVision2Seq"),l_t.forEach(t),DDe.forEach(t),BNe=i(f),Go=n(f,"DIV",{class:!0});var nl=s(Go);T(my.$$.fragment,nl),zUo=i(nl),hd=n(nl,"P",{});var VZ=s(hd);WUo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=n(VZ,"A",{href:!0});var i_t=s(NX);QUo=r(i_t,"from_pretrained()"),i_t.forEach(t),HUo=r(VZ," class method or the "),jX=n(VZ,"A",{href:!0});var d_t=s(jX);UUo=r(d_t,"from_config()"),d_t.forEach(t),JUo=r(VZ,` class
method.`),VZ.forEach(t),YUo=i(nl),gy=n(nl,"P",{});var GDe=s(gy);KUo=r(GDe,"This class cannot be instantiated directly using "),lue=n(GDe,"CODE",{});var c_t=s(lue);ZUo=r(c_t,"__init__()"),c_t.forEach(t),eJo=r(GDe," (throws an error)."),GDe.forEach(t),oJo=i(nl),bt=n(nl,"DIV",{class:!0});var nw=s(bt);T(hy.$$.fragment,nw),rJo=i(nw),iue=n(nw,"P",{});var f_t=s(iue);tJo=r(f_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f_t.forEach(t),aJo=i(nw),pd=n(nw,"P",{});var XZ=s(pd);nJo=r(XZ,`Note:
Loading a model from its configuration file does `),due=n(XZ,"STRONG",{});var m_t=s(due);sJo=r(m_t,"not"),m_t.forEach(t),lJo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(XZ,"A",{href:!0});var g_t=s(DX);iJo=r(g_t,"from_pretrained()"),g_t.forEach(t),dJo=r(XZ," to load the model weights."),XZ.forEach(t),cJo=i(nw),T(F6.$$.fragment,nw),nw.forEach(t),fJo=i(nl),io=n(nl,"DIV",{class:!0});var ua=s(io);T(py.$$.fragment,ua),mJo=i(ua),cue=n(ua,"P",{});var h_t=s(cue);gJo=r(h_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h_t.forEach(t),hJo=i(ua),Xa=n(ua,"P",{});var sw=s(Xa);pJo=r(sw,"The model class to instantiate is selected based on the "),fue=n(sw,"CODE",{});var p_t=s(fue);uJo=r(p_t,"model_type"),p_t.forEach(t),_Jo=r(sw,` property of the config object (either
passed as an argument or loaded from `),mue=n(sw,"CODE",{});var u_t=s(mue);bJo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),vJo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(sw,"CODE",{});var __t=s(gue);FJo=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),TJo=r(sw,":"),sw.forEach(t),MJo=i(ua),hue=n(ua,"UL",{});var b_t=s(hue);T6=n(b_t,"LI",{});var gke=s(T6);pue=n(gke,"STRONG",{});var v_t=s(pue);EJo=r(v_t,"vision-encoder-decoder"),v_t.forEach(t),CJo=r(gke," \u2014 "),GX=n(gke,"A",{href:!0});var F_t=s(GX);wJo=r(F_t,"VisionEncoderDecoderModel"),F_t.forEach(t),AJo=r(gke," (Vision Encoder decoder model)"),gke.forEach(t),b_t.forEach(t),yJo=i(ua),M6=n(ua,"P",{});var hke=s(M6);LJo=r(hke,"The model is set in evaluation mode by default using "),uue=n(hke,"CODE",{});var T_t=s(uue);xJo=r(T_t,"model.eval()"),T_t.forEach(t),$Jo=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=n(hke,"CODE",{});var M_t=s(_ue);kJo=r(M_t,"model.train()"),M_t.forEach(t),hke.forEach(t),SJo=i(ua),T(E6.$$.fragment,ua),ua.forEach(t),nl.forEach(t),INe=i(f),ud=n(f,"H2",{class:!0});var ODe=s(ud);C6=n(ODe,"A",{id:!0,class:!0,href:!0});var E_t=s(C6);bue=n(E_t,"SPAN",{});var C_t=s(bue);T(uy.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),RJo=i(ODe),vue=n(ODe,"SPAN",{});var w_t=s(vue);PJo=r(w_t,"AutoModelForVisualQuestionAnswering"),w_t.forEach(t),ODe.forEach(t),qNe=i(f),Oo=n(f,"DIV",{class:!0});var sl=s(Oo);T(_y.$$.fragment,sl),BJo=i(sl),_d=n(sl,"P",{});var zZ=s(_d);IJo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OX=n(zZ,"A",{href:!0});var A_t=s(OX);qJo=r(A_t,"from_pretrained()"),A_t.forEach(t),NJo=r(zZ," class method or the "),VX=n(zZ,"A",{href:!0});var y_t=s(VX);jJo=r(y_t,"from_config()"),y_t.forEach(t),DJo=r(zZ,` class
method.`),zZ.forEach(t),GJo=i(sl),by=n(sl,"P",{});var VDe=s(by);OJo=r(VDe,"This class cannot be instantiated directly using "),Fue=n(VDe,"CODE",{});var L_t=s(Fue);VJo=r(L_t,"__init__()"),L_t.forEach(t),XJo=r(VDe," (throws an error)."),VDe.forEach(t),zJo=i(sl),vt=n(sl,"DIV",{class:!0});var lw=s(vt);T(vy.$$.fragment,lw),WJo=i(lw),Tue=n(lw,"P",{});var x_t=s(Tue);QJo=r(x_t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x_t.forEach(t),HJo=i(lw),bd=n(lw,"P",{});var WZ=s(bd);UJo=r(WZ,`Note:
Loading a model from its configuration file does `),Mue=n(WZ,"STRONG",{});var $_t=s(Mue);JJo=r($_t,"not"),$_t.forEach(t),YJo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(WZ,"A",{href:!0});var k_t=s(XX);KJo=r(k_t,"from_pretrained()"),k_t.forEach(t),ZJo=r(WZ," to load the model weights."),WZ.forEach(t),eYo=i(lw),T(w6.$$.fragment,lw),lw.forEach(t),oYo=i(sl),co=n(sl,"DIV",{class:!0});var _a=s(co);T(Fy.$$.fragment,_a),rYo=i(_a),Eue=n(_a,"P",{});var S_t=s(Eue);tYo=r(S_t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),S_t.forEach(t),aYo=i(_a),za=n(_a,"P",{});var iw=s(za);nYo=r(iw,"The model class to instantiate is selected based on the "),Cue=n(iw,"CODE",{});var R_t=s(Cue);sYo=r(R_t,"model_type"),R_t.forEach(t),lYo=r(iw,` property of the config object (either
passed as an argument or loaded from `),wue=n(iw,"CODE",{});var P_t=s(wue);iYo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),dYo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(iw,"CODE",{});var B_t=s(Aue);cYo=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),fYo=r(iw,":"),iw.forEach(t),mYo=i(_a),yue=n(_a,"UL",{});var I_t=s(yue);A6=n(I_t,"LI",{});var pke=s(A6);Lue=n(pke,"STRONG",{});var q_t=s(Lue);gYo=r(q_t,"vilt"),q_t.forEach(t),hYo=r(pke," \u2014 "),zX=n(pke,"A",{href:!0});var N_t=s(zX);pYo=r(N_t,"ViltForQuestionAnswering"),N_t.forEach(t),uYo=r(pke," (ViLT model)"),pke.forEach(t),I_t.forEach(t),_Yo=i(_a),y6=n(_a,"P",{});var uke=s(y6);bYo=r(uke,"The model is set in evaluation mode by default using "),xue=n(uke,"CODE",{});var j_t=s(xue);vYo=r(j_t,"model.eval()"),j_t.forEach(t),FYo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(uke,"CODE",{});var D_t=s($ue);TYo=r(D_t,"model.train()"),D_t.forEach(t),uke.forEach(t),MYo=i(_a),T(L6.$$.fragment,_a),_a.forEach(t),sl.forEach(t),NNe=i(f),vd=n(f,"H2",{class:!0});var XDe=s(vd);x6=n(XDe,"A",{id:!0,class:!0,href:!0});var G_t=s(x6);kue=n(G_t,"SPAN",{});var O_t=s(kue);T(Ty.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),EYo=i(XDe),Sue=n(XDe,"SPAN",{});var V_t=s(Sue);CYo=r(V_t,"AutoModelForAudioClassification"),V_t.forEach(t),XDe.forEach(t),jNe=i(f),Vo=n(f,"DIV",{class:!0});var ll=s(Vo);T(My.$$.fragment,ll),wYo=i(ll),Fd=n(ll,"P",{});var QZ=s(Fd);AYo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=n(QZ,"A",{href:!0});var X_t=s(WX);yYo=r(X_t,"from_pretrained()"),X_t.forEach(t),LYo=r(QZ," class method or the "),QX=n(QZ,"A",{href:!0});var z_t=s(QX);xYo=r(z_t,"from_config()"),z_t.forEach(t),$Yo=r(QZ,` class
method.`),QZ.forEach(t),kYo=i(ll),Ey=n(ll,"P",{});var zDe=s(Ey);SYo=r(zDe,"This class cannot be instantiated directly using "),Rue=n(zDe,"CODE",{});var W_t=s(Rue);RYo=r(W_t,"__init__()"),W_t.forEach(t),PYo=r(zDe," (throws an error)."),zDe.forEach(t),BYo=i(ll),Ft=n(ll,"DIV",{class:!0});var dw=s(Ft);T(Cy.$$.fragment,dw),IYo=i(dw),Pue=n(dw,"P",{});var Q_t=s(Pue);qYo=r(Q_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Q_t.forEach(t),NYo=i(dw),Td=n(dw,"P",{});var HZ=s(Td);jYo=r(HZ,`Note:
Loading a model from its configuration file does `),Bue=n(HZ,"STRONG",{});var H_t=s(Bue);DYo=r(H_t,"not"),H_t.forEach(t),GYo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(HZ,"A",{href:!0});var U_t=s(HX);OYo=r(U_t,"from_pretrained()"),U_t.forEach(t),VYo=r(HZ," to load the model weights."),HZ.forEach(t),XYo=i(dw),T($6.$$.fragment,dw),dw.forEach(t),zYo=i(ll),fo=n(ll,"DIV",{class:!0});var ba=s(fo);T(wy.$$.fragment,ba),WYo=i(ba),Iue=n(ba,"P",{});var J_t=s(Iue);QYo=r(J_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),J_t.forEach(t),HYo=i(ba),Wa=n(ba,"P",{});var cw=s(Wa);UYo=r(cw,"The model class to instantiate is selected based on the "),que=n(cw,"CODE",{});var Y_t=s(que);JYo=r(Y_t,"model_type"),Y_t.forEach(t),YYo=r(cw,` property of the config object (either
passed as an argument or loaded from `),Nue=n(cw,"CODE",{});var K_t=s(Nue);KYo=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),ZYo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(cw,"CODE",{});var Z_t=s(jue);eKo=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),oKo=r(cw,":"),cw.forEach(t),rKo=i(ba),ke=n(ba,"UL",{});var Oe=s(ke);k6=n(Oe,"LI",{});var _ke=s(k6);Due=n(_ke,"STRONG",{});var e2t=s(Due);tKo=r(e2t,"data2vec-audio"),e2t.forEach(t),aKo=r(_ke," \u2014 "),UX=n(_ke,"A",{href:!0});var o2t=s(UX);nKo=r(o2t,"Data2VecAudioForSequenceClassification"),o2t.forEach(t),sKo=r(_ke," (Data2VecAudio model)"),_ke.forEach(t),lKo=i(Oe),S6=n(Oe,"LI",{});var bke=s(S6);Gue=n(bke,"STRONG",{});var r2t=s(Gue);iKo=r(r2t,"hubert"),r2t.forEach(t),dKo=r(bke," \u2014 "),JX=n(bke,"A",{href:!0});var t2t=s(JX);cKo=r(t2t,"HubertForSequenceClassification"),t2t.forEach(t),fKo=r(bke," (Hubert model)"),bke.forEach(t),mKo=i(Oe),R6=n(Oe,"LI",{});var vke=s(R6);Oue=n(vke,"STRONG",{});var a2t=s(Oue);gKo=r(a2t,"sew"),a2t.forEach(t),hKo=r(vke," \u2014 "),YX=n(vke,"A",{href:!0});var n2t=s(YX);pKo=r(n2t,"SEWForSequenceClassification"),n2t.forEach(t),uKo=r(vke," (SEW model)"),vke.forEach(t),_Ko=i(Oe),P6=n(Oe,"LI",{});var Fke=s(P6);Vue=n(Fke,"STRONG",{});var s2t=s(Vue);bKo=r(s2t,"sew-d"),s2t.forEach(t),vKo=r(Fke," \u2014 "),KX=n(Fke,"A",{href:!0});var l2t=s(KX);FKo=r(l2t,"SEWDForSequenceClassification"),l2t.forEach(t),TKo=r(Fke," (SEW-D model)"),Fke.forEach(t),MKo=i(Oe),B6=n(Oe,"LI",{});var Tke=s(B6);Xue=n(Tke,"STRONG",{});var i2t=s(Xue);EKo=r(i2t,"unispeech"),i2t.forEach(t),CKo=r(Tke," \u2014 "),ZX=n(Tke,"A",{href:!0});var d2t=s(ZX);wKo=r(d2t,"UniSpeechForSequenceClassification"),d2t.forEach(t),AKo=r(Tke," (UniSpeech model)"),Tke.forEach(t),yKo=i(Oe),I6=n(Oe,"LI",{});var Mke=s(I6);zue=n(Mke,"STRONG",{});var c2t=s(zue);LKo=r(c2t,"unispeech-sat"),c2t.forEach(t),xKo=r(Mke," \u2014 "),ez=n(Mke,"A",{href:!0});var f2t=s(ez);$Ko=r(f2t,"UniSpeechSatForSequenceClassification"),f2t.forEach(t),kKo=r(Mke," (UniSpeechSat model)"),Mke.forEach(t),SKo=i(Oe),q6=n(Oe,"LI",{});var Eke=s(q6);Wue=n(Eke,"STRONG",{});var m2t=s(Wue);RKo=r(m2t,"wav2vec2"),m2t.forEach(t),PKo=r(Eke," \u2014 "),oz=n(Eke,"A",{href:!0});var g2t=s(oz);BKo=r(g2t,"Wav2Vec2ForSequenceClassification"),g2t.forEach(t),IKo=r(Eke," (Wav2Vec2 model)"),Eke.forEach(t),qKo=i(Oe),N6=n(Oe,"LI",{});var Cke=s(N6);Que=n(Cke,"STRONG",{});var h2t=s(Que);NKo=r(h2t,"wav2vec2-conformer"),h2t.forEach(t),jKo=r(Cke," \u2014 "),rz=n(Cke,"A",{href:!0});var p2t=s(rz);DKo=r(p2t,"Wav2Vec2ConformerForSequenceClassification"),p2t.forEach(t),GKo=r(Cke," (Wav2Vec2-Conformer model)"),Cke.forEach(t),OKo=i(Oe),j6=n(Oe,"LI",{});var wke=s(j6);Hue=n(wke,"STRONG",{});var u2t=s(Hue);VKo=r(u2t,"wavlm"),u2t.forEach(t),XKo=r(wke," \u2014 "),tz=n(wke,"A",{href:!0});var _2t=s(tz);zKo=r(_2t,"WavLMForSequenceClassification"),_2t.forEach(t),WKo=r(wke," (WavLM model)"),wke.forEach(t),Oe.forEach(t),QKo=i(ba),D6=n(ba,"P",{});var Ake=s(D6);HKo=r(Ake,"The model is set in evaluation mode by default using "),Uue=n(Ake,"CODE",{});var b2t=s(Uue);UKo=r(b2t,"model.eval()"),b2t.forEach(t),JKo=r(Ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(Ake,"CODE",{});var v2t=s(Jue);YKo=r(v2t,"model.train()"),v2t.forEach(t),Ake.forEach(t),KKo=i(ba),T(G6.$$.fragment,ba),ba.forEach(t),ll.forEach(t),DNe=i(f),Md=n(f,"H2",{class:!0});var WDe=s(Md);O6=n(WDe,"A",{id:!0,class:!0,href:!0});var F2t=s(O6);Yue=n(F2t,"SPAN",{});var T2t=s(Yue);T(Ay.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),ZKo=i(WDe),Kue=n(WDe,"SPAN",{});var M2t=s(Kue);eZo=r(M2t,"AutoModelForAudioFrameClassification"),M2t.forEach(t),WDe.forEach(t),GNe=i(f),Xo=n(f,"DIV",{class:!0});var il=s(Xo);T(yy.$$.fragment,il),oZo=i(il),Ed=n(il,"P",{});var UZ=s(Ed);rZo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=n(UZ,"A",{href:!0});var E2t=s(az);tZo=r(E2t,"from_pretrained()"),E2t.forEach(t),aZo=r(UZ," class method or the "),nz=n(UZ,"A",{href:!0});var C2t=s(nz);nZo=r(C2t,"from_config()"),C2t.forEach(t),sZo=r(UZ,` class
method.`),UZ.forEach(t),lZo=i(il),Ly=n(il,"P",{});var QDe=s(Ly);iZo=r(QDe,"This class cannot be instantiated directly using "),Zue=n(QDe,"CODE",{});var w2t=s(Zue);dZo=r(w2t,"__init__()"),w2t.forEach(t),cZo=r(QDe," (throws an error)."),QDe.forEach(t),fZo=i(il),Tt=n(il,"DIV",{class:!0});var fw=s(Tt);T(xy.$$.fragment,fw),mZo=i(fw),e_e=n(fw,"P",{});var A2t=s(e_e);gZo=r(A2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),A2t.forEach(t),hZo=i(fw),Cd=n(fw,"P",{});var JZ=s(Cd);pZo=r(JZ,`Note:
Loading a model from its configuration file does `),o_e=n(JZ,"STRONG",{});var y2t=s(o_e);uZo=r(y2t,"not"),y2t.forEach(t),_Zo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(JZ,"A",{href:!0});var L2t=s(sz);bZo=r(L2t,"from_pretrained()"),L2t.forEach(t),vZo=r(JZ," to load the model weights."),JZ.forEach(t),FZo=i(fw),T(V6.$$.fragment,fw),fw.forEach(t),TZo=i(il),mo=n(il,"DIV",{class:!0});var va=s(mo);T($y.$$.fragment,va),MZo=i(va),r_e=n(va,"P",{});var x2t=s(r_e);EZo=r(x2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),x2t.forEach(t),CZo=i(va),Qa=n(va,"P",{});var mw=s(Qa);wZo=r(mw,"The model class to instantiate is selected based on the "),t_e=n(mw,"CODE",{});var $2t=s(t_e);AZo=r($2t,"model_type"),$2t.forEach(t),yZo=r(mw,` property of the config object (either
passed as an argument or loaded from `),a_e=n(mw,"CODE",{});var k2t=s(a_e);LZo=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),xZo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(mw,"CODE",{});var S2t=s(n_e);$Zo=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),kZo=r(mw,":"),mw.forEach(t),SZo=i(va),et=n(va,"UL",{});var dl=s(et);X6=n(dl,"LI",{});var yke=s(X6);s_e=n(yke,"STRONG",{});var R2t=s(s_e);RZo=r(R2t,"data2vec-audio"),R2t.forEach(t),PZo=r(yke," \u2014 "),lz=n(yke,"A",{href:!0});var P2t=s(lz);BZo=r(P2t,"Data2VecAudioForAudioFrameClassification"),P2t.forEach(t),IZo=r(yke," (Data2VecAudio model)"),yke.forEach(t),qZo=i(dl),z6=n(dl,"LI",{});var Lke=s(z6);l_e=n(Lke,"STRONG",{});var B2t=s(l_e);NZo=r(B2t,"unispeech-sat"),B2t.forEach(t),jZo=r(Lke," \u2014 "),iz=n(Lke,"A",{href:!0});var I2t=s(iz);DZo=r(I2t,"UniSpeechSatForAudioFrameClassification"),I2t.forEach(t),GZo=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),OZo=i(dl),W6=n(dl,"LI",{});var xke=s(W6);i_e=n(xke,"STRONG",{});var q2t=s(i_e);VZo=r(q2t,"wav2vec2"),q2t.forEach(t),XZo=r(xke," \u2014 "),dz=n(xke,"A",{href:!0});var N2t=s(dz);zZo=r(N2t,"Wav2Vec2ForAudioFrameClassification"),N2t.forEach(t),WZo=r(xke," (Wav2Vec2 model)"),xke.forEach(t),QZo=i(dl),Q6=n(dl,"LI",{});var $ke=s(Q6);d_e=n($ke,"STRONG",{});var j2t=s(d_e);HZo=r(j2t,"wav2vec2-conformer"),j2t.forEach(t),UZo=r($ke," \u2014 "),cz=n($ke,"A",{href:!0});var D2t=s(cz);JZo=r(D2t,"Wav2Vec2ConformerForAudioFrameClassification"),D2t.forEach(t),YZo=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),KZo=i(dl),H6=n(dl,"LI",{});var kke=s(H6);c_e=n(kke,"STRONG",{});var G2t=s(c_e);ZZo=r(G2t,"wavlm"),G2t.forEach(t),eer=r(kke," \u2014 "),fz=n(kke,"A",{href:!0});var O2t=s(fz);oer=r(O2t,"WavLMForAudioFrameClassification"),O2t.forEach(t),rer=r(kke," (WavLM model)"),kke.forEach(t),dl.forEach(t),ter=i(va),U6=n(va,"P",{});var Ske=s(U6);aer=r(Ske,"The model is set in evaluation mode by default using "),f_e=n(Ske,"CODE",{});var V2t=s(f_e);ner=r(V2t,"model.eval()"),V2t.forEach(t),ser=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(Ske,"CODE",{});var X2t=s(m_e);ler=r(X2t,"model.train()"),X2t.forEach(t),Ske.forEach(t),ier=i(va),T(J6.$$.fragment,va),va.forEach(t),il.forEach(t),ONe=i(f),wd=n(f,"H2",{class:!0});var HDe=s(wd);Y6=n(HDe,"A",{id:!0,class:!0,href:!0});var z2t=s(Y6);g_e=n(z2t,"SPAN",{});var W2t=s(g_e);T(ky.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),der=i(HDe),h_e=n(HDe,"SPAN",{});var Q2t=s(h_e);cer=r(Q2t,"AutoModelForCTC"),Q2t.forEach(t),HDe.forEach(t),VNe=i(f),zo=n(f,"DIV",{class:!0});var cl=s(zo);T(Sy.$$.fragment,cl),fer=i(cl),Ad=n(cl,"P",{});var YZ=s(Ad);mer=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=n(YZ,"A",{href:!0});var H2t=s(mz);ger=r(H2t,"from_pretrained()"),H2t.forEach(t),her=r(YZ," class method or the "),gz=n(YZ,"A",{href:!0});var U2t=s(gz);per=r(U2t,"from_config()"),U2t.forEach(t),uer=r(YZ,` class
method.`),YZ.forEach(t),_er=i(cl),Ry=n(cl,"P",{});var UDe=s(Ry);ber=r(UDe,"This class cannot be instantiated directly using "),p_e=n(UDe,"CODE",{});var J2t=s(p_e);ver=r(J2t,"__init__()"),J2t.forEach(t),Fer=r(UDe," (throws an error)."),UDe.forEach(t),Ter=i(cl),Mt=n(cl,"DIV",{class:!0});var gw=s(Mt);T(Py.$$.fragment,gw),Mer=i(gw),u_e=n(gw,"P",{});var Y2t=s(u_e);Eer=r(Y2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Y2t.forEach(t),Cer=i(gw),yd=n(gw,"P",{});var KZ=s(yd);wer=r(KZ,`Note:
Loading a model from its configuration file does `),__e=n(KZ,"STRONG",{});var K2t=s(__e);Aer=r(K2t,"not"),K2t.forEach(t),yer=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(KZ,"A",{href:!0});var Z2t=s(hz);Ler=r(Z2t,"from_pretrained()"),Z2t.forEach(t),xer=r(KZ," to load the model weights."),KZ.forEach(t),$er=i(gw),T(K6.$$.fragment,gw),gw.forEach(t),ker=i(cl),go=n(cl,"DIV",{class:!0});var Fa=s(go);T(By.$$.fragment,Fa),Ser=i(Fa),b_e=n(Fa,"P",{});var e1t=s(b_e);Rer=r(e1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),e1t.forEach(t),Per=i(Fa),Ha=n(Fa,"P",{});var hw=s(Ha);Ber=r(hw,"The model class to instantiate is selected based on the "),v_e=n(hw,"CODE",{});var o1t=s(v_e);Ier=r(o1t,"model_type"),o1t.forEach(t),qer=r(hw,` property of the config object (either
passed as an argument or loaded from `),F_e=n(hw,"CODE",{});var r1t=s(F_e);Ner=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),jer=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(hw,"CODE",{});var t1t=s(T_e);Der=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),Ger=r(hw,":"),hw.forEach(t),Oer=i(Fa),Se=n(Fa,"UL",{});var Ve=s(Se);Z6=n(Ve,"LI",{});var Rke=s(Z6);M_e=n(Rke,"STRONG",{});var a1t=s(M_e);Ver=r(a1t,"data2vec-audio"),a1t.forEach(t),Xer=r(Rke," \u2014 "),pz=n(Rke,"A",{href:!0});var n1t=s(pz);zer=r(n1t,"Data2VecAudioForCTC"),n1t.forEach(t),Wer=r(Rke," (Data2VecAudio model)"),Rke.forEach(t),Qer=i(Ve),eT=n(Ve,"LI",{});var Pke=s(eT);E_e=n(Pke,"STRONG",{});var s1t=s(E_e);Her=r(s1t,"hubert"),s1t.forEach(t),Uer=r(Pke," \u2014 "),uz=n(Pke,"A",{href:!0});var l1t=s(uz);Jer=r(l1t,"HubertForCTC"),l1t.forEach(t),Yer=r(Pke," (Hubert model)"),Pke.forEach(t),Ker=i(Ve),oT=n(Ve,"LI",{});var Bke=s(oT);C_e=n(Bke,"STRONG",{});var i1t=s(C_e);Zer=r(i1t,"sew"),i1t.forEach(t),eor=r(Bke," \u2014 "),_z=n(Bke,"A",{href:!0});var d1t=s(_z);oor=r(d1t,"SEWForCTC"),d1t.forEach(t),ror=r(Bke," (SEW model)"),Bke.forEach(t),tor=i(Ve),rT=n(Ve,"LI",{});var Ike=s(rT);w_e=n(Ike,"STRONG",{});var c1t=s(w_e);aor=r(c1t,"sew-d"),c1t.forEach(t),nor=r(Ike," \u2014 "),bz=n(Ike,"A",{href:!0});var f1t=s(bz);sor=r(f1t,"SEWDForCTC"),f1t.forEach(t),lor=r(Ike," (SEW-D model)"),Ike.forEach(t),ior=i(Ve),tT=n(Ve,"LI",{});var qke=s(tT);A_e=n(qke,"STRONG",{});var m1t=s(A_e);dor=r(m1t,"unispeech"),m1t.forEach(t),cor=r(qke," \u2014 "),vz=n(qke,"A",{href:!0});var g1t=s(vz);mor=r(g1t,"UniSpeechForCTC"),g1t.forEach(t),gor=r(qke," (UniSpeech model)"),qke.forEach(t),hor=i(Ve),aT=n(Ve,"LI",{});var Nke=s(aT);y_e=n(Nke,"STRONG",{});var h1t=s(y_e);por=r(h1t,"unispeech-sat"),h1t.forEach(t),uor=r(Nke," \u2014 "),Fz=n(Nke,"A",{href:!0});var p1t=s(Fz);_or=r(p1t,"UniSpeechSatForCTC"),p1t.forEach(t),bor=r(Nke," (UniSpeechSat model)"),Nke.forEach(t),vor=i(Ve),nT=n(Ve,"LI",{});var jke=s(nT);L_e=n(jke,"STRONG",{});var u1t=s(L_e);For=r(u1t,"wav2vec2"),u1t.forEach(t),Tor=r(jke," \u2014 "),Tz=n(jke,"A",{href:!0});var _1t=s(Tz);Mor=r(_1t,"Wav2Vec2ForCTC"),_1t.forEach(t),Eor=r(jke," (Wav2Vec2 model)"),jke.forEach(t),Cor=i(Ve),sT=n(Ve,"LI",{});var Dke=s(sT);x_e=n(Dke,"STRONG",{});var b1t=s(x_e);wor=r(b1t,"wav2vec2-conformer"),b1t.forEach(t),Aor=r(Dke," \u2014 "),Mz=n(Dke,"A",{href:!0});var v1t=s(Mz);yor=r(v1t,"Wav2Vec2ConformerForCTC"),v1t.forEach(t),Lor=r(Dke," (Wav2Vec2-Conformer model)"),Dke.forEach(t),xor=i(Ve),lT=n(Ve,"LI",{});var Gke=s(lT);$_e=n(Gke,"STRONG",{});var F1t=s($_e);$or=r(F1t,"wavlm"),F1t.forEach(t),kor=r(Gke," \u2014 "),Ez=n(Gke,"A",{href:!0});var T1t=s(Ez);Sor=r(T1t,"WavLMForCTC"),T1t.forEach(t),Ror=r(Gke," (WavLM model)"),Gke.forEach(t),Ve.forEach(t),Por=i(Fa),iT=n(Fa,"P",{});var Oke=s(iT);Bor=r(Oke,"The model is set in evaluation mode by default using "),k_e=n(Oke,"CODE",{});var M1t=s(k_e);Ior=r(M1t,"model.eval()"),M1t.forEach(t),qor=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(Oke,"CODE",{});var E1t=s(S_e);Nor=r(E1t,"model.train()"),E1t.forEach(t),Oke.forEach(t),jor=i(Fa),T(dT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),XNe=i(f),Ld=n(f,"H2",{class:!0});var JDe=s(Ld);cT=n(JDe,"A",{id:!0,class:!0,href:!0});var C1t=s(cT);R_e=n(C1t,"SPAN",{});var w1t=s(R_e);T(Iy.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),Dor=i(JDe),P_e=n(JDe,"SPAN",{});var A1t=s(P_e);Gor=r(A1t,"AutoModelForSpeechSeq2Seq"),A1t.forEach(t),JDe.forEach(t),zNe=i(f),Wo=n(f,"DIV",{class:!0});var fl=s(Wo);T(qy.$$.fragment,fl),Oor=i(fl),xd=n(fl,"P",{});var ZZ=s(xd);Vor=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=n(ZZ,"A",{href:!0});var y1t=s(Cz);Xor=r(y1t,"from_pretrained()"),y1t.forEach(t),zor=r(ZZ," class method or the "),wz=n(ZZ,"A",{href:!0});var L1t=s(wz);Wor=r(L1t,"from_config()"),L1t.forEach(t),Qor=r(ZZ,` class
method.`),ZZ.forEach(t),Hor=i(fl),Ny=n(fl,"P",{});var YDe=s(Ny);Uor=r(YDe,"This class cannot be instantiated directly using "),B_e=n(YDe,"CODE",{});var x1t=s(B_e);Jor=r(x1t,"__init__()"),x1t.forEach(t),Yor=r(YDe," (throws an error)."),YDe.forEach(t),Kor=i(fl),Et=n(fl,"DIV",{class:!0});var pw=s(Et);T(jy.$$.fragment,pw),Zor=i(pw),I_e=n(pw,"P",{});var $1t=s(I_e);err=r($1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$1t.forEach(t),orr=i(pw),$d=n(pw,"P",{});var eee=s($d);rrr=r(eee,`Note:
Loading a model from its configuration file does `),q_e=n(eee,"STRONG",{});var k1t=s(q_e);trr=r(k1t,"not"),k1t.forEach(t),arr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(eee,"A",{href:!0});var S1t=s(Az);nrr=r(S1t,"from_pretrained()"),S1t.forEach(t),srr=r(eee," to load the model weights."),eee.forEach(t),lrr=i(pw),T(fT.$$.fragment,pw),pw.forEach(t),irr=i(fl),ho=n(fl,"DIV",{class:!0});var Ta=s(ho);T(Dy.$$.fragment,Ta),drr=i(Ta),N_e=n(Ta,"P",{});var R1t=s(N_e);crr=r(R1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),R1t.forEach(t),frr=i(Ta),Ua=n(Ta,"P",{});var uw=s(Ua);mrr=r(uw,"The model class to instantiate is selected based on the "),j_e=n(uw,"CODE",{});var P1t=s(j_e);grr=r(P1t,"model_type"),P1t.forEach(t),hrr=r(uw,` property of the config object (either
passed as an argument or loaded from `),D_e=n(uw,"CODE",{});var B1t=s(D_e);prr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),urr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(uw,"CODE",{});var I1t=s(G_e);_rr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),brr=r(uw,":"),uw.forEach(t),vrr=i(Ta),Gy=n(Ta,"UL",{});var KDe=s(Gy);mT=n(KDe,"LI",{});var Vke=s(mT);O_e=n(Vke,"STRONG",{});var q1t=s(O_e);Frr=r(q1t,"speech-encoder-decoder"),q1t.forEach(t),Trr=r(Vke," \u2014 "),yz=n(Vke,"A",{href:!0});var N1t=s(yz);Mrr=r(N1t,"SpeechEncoderDecoderModel"),N1t.forEach(t),Err=r(Vke," (Speech Encoder decoder model)"),Vke.forEach(t),Crr=i(KDe),gT=n(KDe,"LI",{});var Xke=s(gT);V_e=n(Xke,"STRONG",{});var j1t=s(V_e);wrr=r(j1t,"speech_to_text"),j1t.forEach(t),Arr=r(Xke," \u2014 "),Lz=n(Xke,"A",{href:!0});var D1t=s(Lz);yrr=r(D1t,"Speech2TextForConditionalGeneration"),D1t.forEach(t),Lrr=r(Xke," (Speech2Text model)"),Xke.forEach(t),KDe.forEach(t),xrr=i(Ta),hT=n(Ta,"P",{});var zke=s(hT);$rr=r(zke,"The model is set in evaluation mode by default using "),X_e=n(zke,"CODE",{});var G1t=s(X_e);krr=r(G1t,"model.eval()"),G1t.forEach(t),Srr=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(zke,"CODE",{});var O1t=s(z_e);Rrr=r(O1t,"model.train()"),O1t.forEach(t),zke.forEach(t),Prr=i(Ta),T(pT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),WNe=i(f),kd=n(f,"H2",{class:!0});var ZDe=s(kd);uT=n(ZDe,"A",{id:!0,class:!0,href:!0});var V1t=s(uT);W_e=n(V1t,"SPAN",{});var X1t=s(W_e);T(Oy.$$.fragment,X1t),X1t.forEach(t),V1t.forEach(t),Brr=i(ZDe),Q_e=n(ZDe,"SPAN",{});var z1t=s(Q_e);Irr=r(z1t,"AutoModelForAudioXVector"),z1t.forEach(t),ZDe.forEach(t),QNe=i(f),Qo=n(f,"DIV",{class:!0});var ml=s(Qo);T(Vy.$$.fragment,ml),qrr=i(ml),Sd=n(ml,"P",{});var oee=s(Sd);Nrr=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=n(oee,"A",{href:!0});var W1t=s(xz);jrr=r(W1t,"from_pretrained()"),W1t.forEach(t),Drr=r(oee," class method or the "),$z=n(oee,"A",{href:!0});var Q1t=s($z);Grr=r(Q1t,"from_config()"),Q1t.forEach(t),Orr=r(oee,` class
method.`),oee.forEach(t),Vrr=i(ml),Xy=n(ml,"P",{});var eGe=s(Xy);Xrr=r(eGe,"This class cannot be instantiated directly using "),H_e=n(eGe,"CODE",{});var H1t=s(H_e);zrr=r(H1t,"__init__()"),H1t.forEach(t),Wrr=r(eGe," (throws an error)."),eGe.forEach(t),Qrr=i(ml),Ct=n(ml,"DIV",{class:!0});var _w=s(Ct);T(zy.$$.fragment,_w),Hrr=i(_w),U_e=n(_w,"P",{});var U1t=s(U_e);Urr=r(U1t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),U1t.forEach(t),Jrr=i(_w),Rd=n(_w,"P",{});var ree=s(Rd);Yrr=r(ree,`Note:
Loading a model from its configuration file does `),J_e=n(ree,"STRONG",{});var J1t=s(J_e);Krr=r(J1t,"not"),J1t.forEach(t),Zrr=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(ree,"A",{href:!0});var Y1t=s(kz);etr=r(Y1t,"from_pretrained()"),Y1t.forEach(t),otr=r(ree," to load the model weights."),ree.forEach(t),rtr=i(_w),T(_T.$$.fragment,_w),_w.forEach(t),ttr=i(ml),po=n(ml,"DIV",{class:!0});var Ma=s(po);T(Wy.$$.fragment,Ma),atr=i(Ma),Y_e=n(Ma,"P",{});var K1t=s(Y_e);ntr=r(K1t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),K1t.forEach(t),str=i(Ma),Ja=n(Ma,"P",{});var bw=s(Ja);ltr=r(bw,"The model class to instantiate is selected based on the "),K_e=n(bw,"CODE",{});var Z1t=s(K_e);itr=r(Z1t,"model_type"),Z1t.forEach(t),dtr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(bw,"CODE",{});var ebt=s(Z_e);ctr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),ftr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(bw,"CODE",{});var obt=s(e2e);mtr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),gtr=r(bw,":"),bw.forEach(t),htr=i(Ma),ot=n(Ma,"UL",{});var gl=s(ot);bT=n(gl,"LI",{});var Wke=s(bT);o2e=n(Wke,"STRONG",{});var rbt=s(o2e);ptr=r(rbt,"data2vec-audio"),rbt.forEach(t),utr=r(Wke," \u2014 "),Sz=n(Wke,"A",{href:!0});var tbt=s(Sz);_tr=r(tbt,"Data2VecAudioForXVector"),tbt.forEach(t),btr=r(Wke," (Data2VecAudio model)"),Wke.forEach(t),vtr=i(gl),vT=n(gl,"LI",{});var Qke=s(vT);r2e=n(Qke,"STRONG",{});var abt=s(r2e);Ftr=r(abt,"unispeech-sat"),abt.forEach(t),Ttr=r(Qke," \u2014 "),Rz=n(Qke,"A",{href:!0});var nbt=s(Rz);Mtr=r(nbt,"UniSpeechSatForXVector"),nbt.forEach(t),Etr=r(Qke," (UniSpeechSat model)"),Qke.forEach(t),Ctr=i(gl),FT=n(gl,"LI",{});var Hke=s(FT);t2e=n(Hke,"STRONG",{});var sbt=s(t2e);wtr=r(sbt,"wav2vec2"),sbt.forEach(t),Atr=r(Hke," \u2014 "),Pz=n(Hke,"A",{href:!0});var lbt=s(Pz);ytr=r(lbt,"Wav2Vec2ForXVector"),lbt.forEach(t),Ltr=r(Hke," (Wav2Vec2 model)"),Hke.forEach(t),xtr=i(gl),TT=n(gl,"LI",{});var Uke=s(TT);a2e=n(Uke,"STRONG",{});var ibt=s(a2e);$tr=r(ibt,"wav2vec2-conformer"),ibt.forEach(t),ktr=r(Uke," \u2014 "),Bz=n(Uke,"A",{href:!0});var dbt=s(Bz);Str=r(dbt,"Wav2Vec2ConformerForXVector"),dbt.forEach(t),Rtr=r(Uke," (Wav2Vec2-Conformer model)"),Uke.forEach(t),Ptr=i(gl),MT=n(gl,"LI",{});var Jke=s(MT);n2e=n(Jke,"STRONG",{});var cbt=s(n2e);Btr=r(cbt,"wavlm"),cbt.forEach(t),Itr=r(Jke," \u2014 "),Iz=n(Jke,"A",{href:!0});var fbt=s(Iz);qtr=r(fbt,"WavLMForXVector"),fbt.forEach(t),Ntr=r(Jke," (WavLM model)"),Jke.forEach(t),gl.forEach(t),jtr=i(Ma),ET=n(Ma,"P",{});var Yke=s(ET);Dtr=r(Yke,"The model is set in evaluation mode by default using "),s2e=n(Yke,"CODE",{});var mbt=s(s2e);Gtr=r(mbt,"model.eval()"),mbt.forEach(t),Otr=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=n(Yke,"CODE",{});var gbt=s(l2e);Vtr=r(gbt,"model.train()"),gbt.forEach(t),Yke.forEach(t),Xtr=i(Ma),T(CT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),HNe=i(f),Pd=n(f,"H2",{class:!0});var oGe=s(Pd);wT=n(oGe,"A",{id:!0,class:!0,href:!0});var hbt=s(wT);i2e=n(hbt,"SPAN",{});var pbt=s(i2e);T(Qy.$$.fragment,pbt),pbt.forEach(t),hbt.forEach(t),ztr=i(oGe),d2e=n(oGe,"SPAN",{});var ubt=s(d2e);Wtr=r(ubt,"AutoModelForMaskedImageModeling"),ubt.forEach(t),oGe.forEach(t),UNe=i(f),Ho=n(f,"DIV",{class:!0});var hl=s(Ho);T(Hy.$$.fragment,hl),Qtr=i(hl),Bd=n(hl,"P",{});var tee=s(Bd);Htr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qz=n(tee,"A",{href:!0});var _bt=s(qz);Utr=r(_bt,"from_pretrained()"),_bt.forEach(t),Jtr=r(tee," class method or the "),Nz=n(tee,"A",{href:!0});var bbt=s(Nz);Ytr=r(bbt,"from_config()"),bbt.forEach(t),Ktr=r(tee,` class
method.`),tee.forEach(t),Ztr=i(hl),Uy=n(hl,"P",{});var rGe=s(Uy);ear=r(rGe,"This class cannot be instantiated directly using "),c2e=n(rGe,"CODE",{});var vbt=s(c2e);oar=r(vbt,"__init__()"),vbt.forEach(t),rar=r(rGe," (throws an error)."),rGe.forEach(t),tar=i(hl),wt=n(hl,"DIV",{class:!0});var vw=s(wt);T(Jy.$$.fragment,vw),aar=i(vw),f2e=n(vw,"P",{});var Fbt=s(f2e);nar=r(Fbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Fbt.forEach(t),sar=i(vw),Id=n(vw,"P",{});var aee=s(Id);lar=r(aee,`Note:
Loading a model from its configuration file does `),m2e=n(aee,"STRONG",{});var Tbt=s(m2e);iar=r(Tbt,"not"),Tbt.forEach(t),dar=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(aee,"A",{href:!0});var Mbt=s(jz);car=r(Mbt,"from_pretrained()"),Mbt.forEach(t),far=r(aee," to load the model weights."),aee.forEach(t),mar=i(vw),T(AT.$$.fragment,vw),vw.forEach(t),gar=i(hl),uo=n(hl,"DIV",{class:!0});var Ea=s(uo);T(Yy.$$.fragment,Ea),har=i(Ea),g2e=n(Ea,"P",{});var Ebt=s(g2e);par=r(Ebt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ebt.forEach(t),uar=i(Ea),Ya=n(Ea,"P",{});var Fw=s(Ya);_ar=r(Fw,"The model class to instantiate is selected based on the "),h2e=n(Fw,"CODE",{});var Cbt=s(h2e);bar=r(Cbt,"model_type"),Cbt.forEach(t),Far=r(Fw,` property of the config object (either
passed as an argument or loaded from `),p2e=n(Fw,"CODE",{});var wbt=s(p2e);Tar=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Mar=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(Fw,"CODE",{});var Abt=s(u2e);Ear=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),Car=r(Fw,":"),Fw.forEach(t),war=i(Ea),qd=n(Ea,"UL",{});var nee=s(qd);yT=n(nee,"LI",{});var Kke=s(yT);_2e=n(Kke,"STRONG",{});var ybt=s(_2e);Aar=r(ybt,"deit"),ybt.forEach(t),yar=r(Kke," \u2014 "),Dz=n(Kke,"A",{href:!0});var Lbt=s(Dz);Lar=r(Lbt,"DeiTForMaskedImageModeling"),Lbt.forEach(t),xar=r(Kke," (DeiT model)"),Kke.forEach(t),$ar=i(nee),LT=n(nee,"LI",{});var Zke=s(LT);b2e=n(Zke,"STRONG",{});var xbt=s(b2e);kar=r(xbt,"swin"),xbt.forEach(t),Sar=r(Zke," \u2014 "),Gz=n(Zke,"A",{href:!0});var $bt=s(Gz);Rar=r($bt,"SwinForMaskedImageModeling"),$bt.forEach(t),Par=r(Zke," (Swin model)"),Zke.forEach(t),Bar=i(nee),xT=n(nee,"LI",{});var eSe=s(xT);v2e=n(eSe,"STRONG",{});var kbt=s(v2e);Iar=r(kbt,"vit"),kbt.forEach(t),qar=r(eSe," \u2014 "),Oz=n(eSe,"A",{href:!0});var Sbt=s(Oz);Nar=r(Sbt,"ViTForMaskedImageModeling"),Sbt.forEach(t),jar=r(eSe," (ViT model)"),eSe.forEach(t),nee.forEach(t),Dar=i(Ea),$T=n(Ea,"P",{});var oSe=s($T);Gar=r(oSe,"The model is set in evaluation mode by default using "),F2e=n(oSe,"CODE",{});var Rbt=s(F2e);Oar=r(Rbt,"model.eval()"),Rbt.forEach(t),Var=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(oSe,"CODE",{});var Pbt=s(T2e);Xar=r(Pbt,"model.train()"),Pbt.forEach(t),oSe.forEach(t),zar=i(Ea),T(kT.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),JNe=i(f),Nd=n(f,"H2",{class:!0});var tGe=s(Nd);ST=n(tGe,"A",{id:!0,class:!0,href:!0});var Bbt=s(ST);M2e=n(Bbt,"SPAN",{});var Ibt=s(M2e);T(Ky.$$.fragment,Ibt),Ibt.forEach(t),Bbt.forEach(t),War=i(tGe),E2e=n(tGe,"SPAN",{});var qbt=s(E2e);Qar=r(qbt,"AutoModelForObjectDetection"),qbt.forEach(t),tGe.forEach(t),YNe=i(f),Uo=n(f,"DIV",{class:!0});var pl=s(Uo);T(Zy.$$.fragment,pl),Har=i(pl),jd=n(pl,"P",{});var see=s(jd);Uar=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=n(see,"A",{href:!0});var Nbt=s(Vz);Jar=r(Nbt,"from_pretrained()"),Nbt.forEach(t),Yar=r(see," class method or the "),Xz=n(see,"A",{href:!0});var jbt=s(Xz);Kar=r(jbt,"from_config()"),jbt.forEach(t),Zar=r(see,` class
method.`),see.forEach(t),enr=i(pl),eL=n(pl,"P",{});var aGe=s(eL);onr=r(aGe,"This class cannot be instantiated directly using "),C2e=n(aGe,"CODE",{});var Dbt=s(C2e);rnr=r(Dbt,"__init__()"),Dbt.forEach(t),tnr=r(aGe," (throws an error)."),aGe.forEach(t),anr=i(pl),At=n(pl,"DIV",{class:!0});var Tw=s(At);T(oL.$$.fragment,Tw),nnr=i(Tw),w2e=n(Tw,"P",{});var Gbt=s(w2e);snr=r(Gbt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Gbt.forEach(t),lnr=i(Tw),Dd=n(Tw,"P",{});var lee=s(Dd);inr=r(lee,`Note:
Loading a model from its configuration file does `),A2e=n(lee,"STRONG",{});var Obt=s(A2e);dnr=r(Obt,"not"),Obt.forEach(t),cnr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(lee,"A",{href:!0});var Vbt=s(zz);fnr=r(Vbt,"from_pretrained()"),Vbt.forEach(t),mnr=r(lee," to load the model weights."),lee.forEach(t),gnr=i(Tw),T(RT.$$.fragment,Tw),Tw.forEach(t),hnr=i(pl),_o=n(pl,"DIV",{class:!0});var Ca=s(_o);T(rL.$$.fragment,Ca),pnr=i(Ca),y2e=n(Ca,"P",{});var Xbt=s(y2e);unr=r(Xbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Xbt.forEach(t),_nr=i(Ca),Ka=n(Ca,"P",{});var Mw=s(Ka);bnr=r(Mw,"The model class to instantiate is selected based on the "),L2e=n(Mw,"CODE",{});var zbt=s(L2e);vnr=r(zbt,"model_type"),zbt.forEach(t),Fnr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),x2e=n(Mw,"CODE",{});var Wbt=s(x2e);Tnr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),Mnr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(Mw,"CODE",{});var Qbt=s($2e);Enr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),Cnr=r(Mw,":"),Mw.forEach(t),wnr=i(Ca),tL=n(Ca,"UL",{});var nGe=s(tL);PT=n(nGe,"LI",{});var rSe=s(PT);k2e=n(rSe,"STRONG",{});var Hbt=s(k2e);Anr=r(Hbt,"detr"),Hbt.forEach(t),ynr=r(rSe," \u2014 "),Wz=n(rSe,"A",{href:!0});var Ubt=s(Wz);Lnr=r(Ubt,"DetrForObjectDetection"),Ubt.forEach(t),xnr=r(rSe," (DETR model)"),rSe.forEach(t),$nr=i(nGe),BT=n(nGe,"LI",{});var tSe=s(BT);S2e=n(tSe,"STRONG",{});var Jbt=s(S2e);knr=r(Jbt,"yolos"),Jbt.forEach(t),Snr=r(tSe," \u2014 "),Qz=n(tSe,"A",{href:!0});var Ybt=s(Qz);Rnr=r(Ybt,"YolosForObjectDetection"),Ybt.forEach(t),Pnr=r(tSe," (YOLOS model)"),tSe.forEach(t),nGe.forEach(t),Bnr=i(Ca),IT=n(Ca,"P",{});var aSe=s(IT);Inr=r(aSe,"The model is set in evaluation mode by default using "),R2e=n(aSe,"CODE",{});var Kbt=s(R2e);qnr=r(Kbt,"model.eval()"),Kbt.forEach(t),Nnr=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(aSe,"CODE",{});var Zbt=s(P2e);jnr=r(Zbt,"model.train()"),Zbt.forEach(t),aSe.forEach(t),Dnr=i(Ca),T(qT.$$.fragment,Ca),Ca.forEach(t),pl.forEach(t),KNe=i(f),Gd=n(f,"H2",{class:!0});var sGe=s(Gd);NT=n(sGe,"A",{id:!0,class:!0,href:!0});var evt=s(NT);B2e=n(evt,"SPAN",{});var ovt=s(B2e);T(aL.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),Gnr=i(sGe),I2e=n(sGe,"SPAN",{});var rvt=s(I2e);Onr=r(rvt,"AutoModelForImageSegmentation"),rvt.forEach(t),sGe.forEach(t),ZNe=i(f),Jo=n(f,"DIV",{class:!0});var ul=s(Jo);T(nL.$$.fragment,ul),Vnr=i(ul),Od=n(ul,"P",{});var iee=s(Od);Xnr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=n(iee,"A",{href:!0});var tvt=s(Hz);znr=r(tvt,"from_pretrained()"),tvt.forEach(t),Wnr=r(iee," class method or the "),Uz=n(iee,"A",{href:!0});var avt=s(Uz);Qnr=r(avt,"from_config()"),avt.forEach(t),Hnr=r(iee,` class
method.`),iee.forEach(t),Unr=i(ul),sL=n(ul,"P",{});var lGe=s(sL);Jnr=r(lGe,"This class cannot be instantiated directly using "),q2e=n(lGe,"CODE",{});var nvt=s(q2e);Ynr=r(nvt,"__init__()"),nvt.forEach(t),Knr=r(lGe," (throws an error)."),lGe.forEach(t),Znr=i(ul),yt=n(ul,"DIV",{class:!0});var Ew=s(yt);T(lL.$$.fragment,Ew),esr=i(Ew),N2e=n(Ew,"P",{});var svt=s(N2e);osr=r(svt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),svt.forEach(t),rsr=i(Ew),Vd=n(Ew,"P",{});var dee=s(Vd);tsr=r(dee,`Note:
Loading a model from its configuration file does `),j2e=n(dee,"STRONG",{});var lvt=s(j2e);asr=r(lvt,"not"),lvt.forEach(t),nsr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(dee,"A",{href:!0});var ivt=s(Jz);ssr=r(ivt,"from_pretrained()"),ivt.forEach(t),lsr=r(dee," to load the model weights."),dee.forEach(t),isr=i(Ew),T(jT.$$.fragment,Ew),Ew.forEach(t),dsr=i(ul),bo=n(ul,"DIV",{class:!0});var wa=s(bo);T(iL.$$.fragment,wa),csr=i(wa),D2e=n(wa,"P",{});var dvt=s(D2e);fsr=r(dvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dvt.forEach(t),msr=i(wa),Za=n(wa,"P",{});var Cw=s(Za);gsr=r(Cw,"The model class to instantiate is selected based on the "),G2e=n(Cw,"CODE",{});var cvt=s(G2e);hsr=r(cvt,"model_type"),cvt.forEach(t),psr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),O2e=n(Cw,"CODE",{});var fvt=s(O2e);usr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),_sr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(Cw,"CODE",{});var mvt=s(V2e);bsr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),vsr=r(Cw,":"),Cw.forEach(t),Fsr=i(wa),X2e=n(wa,"UL",{});var gvt=s(X2e);DT=n(gvt,"LI",{});var nSe=s(DT);z2e=n(nSe,"STRONG",{});var hvt=s(z2e);Tsr=r(hvt,"detr"),hvt.forEach(t),Msr=r(nSe," \u2014 "),Yz=n(nSe,"A",{href:!0});var pvt=s(Yz);Esr=r(pvt,"DetrForSegmentation"),pvt.forEach(t),Csr=r(nSe," (DETR model)"),nSe.forEach(t),gvt.forEach(t),wsr=i(wa),GT=n(wa,"P",{});var sSe=s(GT);Asr=r(sSe,"The model is set in evaluation mode by default using "),W2e=n(sSe,"CODE",{});var uvt=s(W2e);ysr=r(uvt,"model.eval()"),uvt.forEach(t),Lsr=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(sSe,"CODE",{});var _vt=s(Q2e);xsr=r(_vt,"model.train()"),_vt.forEach(t),sSe.forEach(t),$sr=i(wa),T(OT.$$.fragment,wa),wa.forEach(t),ul.forEach(t),eje=i(f),Xd=n(f,"H2",{class:!0});var iGe=s(Xd);VT=n(iGe,"A",{id:!0,class:!0,href:!0});var bvt=s(VT);H2e=n(bvt,"SPAN",{});var vvt=s(H2e);T(dL.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),ksr=i(iGe),U2e=n(iGe,"SPAN",{});var Fvt=s(U2e);Ssr=r(Fvt,"AutoModelForSemanticSegmentation"),Fvt.forEach(t),iGe.forEach(t),oje=i(f),Yo=n(f,"DIV",{class:!0});var _l=s(Yo);T(cL.$$.fragment,_l),Rsr=i(_l),zd=n(_l,"P",{});var cee=s(zd);Psr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=n(cee,"A",{href:!0});var Tvt=s(Kz);Bsr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),Isr=r(cee," class method or the "),Zz=n(cee,"A",{href:!0});var Mvt=s(Zz);qsr=r(Mvt,"from_config()"),Mvt.forEach(t),Nsr=r(cee,` class
method.`),cee.forEach(t),jsr=i(_l),fL=n(_l,"P",{});var dGe=s(fL);Dsr=r(dGe,"This class cannot be instantiated directly using "),J2e=n(dGe,"CODE",{});var Evt=s(J2e);Gsr=r(Evt,"__init__()"),Evt.forEach(t),Osr=r(dGe," (throws an error)."),dGe.forEach(t),Vsr=i(_l),Lt=n(_l,"DIV",{class:!0});var ww=s(Lt);T(mL.$$.fragment,ww),Xsr=i(ww),Y2e=n(ww,"P",{});var Cvt=s(Y2e);zsr=r(Cvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cvt.forEach(t),Wsr=i(ww),Wd=n(ww,"P",{});var fee=s(Wd);Qsr=r(fee,`Note:
Loading a model from its configuration file does `),K2e=n(fee,"STRONG",{});var wvt=s(K2e);Hsr=r(wvt,"not"),wvt.forEach(t),Usr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(fee,"A",{href:!0});var Avt=s(eW);Jsr=r(Avt,"from_pretrained()"),Avt.forEach(t),Ysr=r(fee," to load the model weights."),fee.forEach(t),Ksr=i(ww),T(XT.$$.fragment,ww),ww.forEach(t),Zsr=i(_l),vo=n(_l,"DIV",{class:!0});var Aa=s(vo);T(gL.$$.fragment,Aa),elr=i(Aa),Z2e=n(Aa,"P",{});var yvt=s(Z2e);olr=r(yvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yvt.forEach(t),rlr=i(Aa),en=n(Aa,"P",{});var Aw=s(en);tlr=r(Aw,"The model class to instantiate is selected based on the "),e1e=n(Aw,"CODE",{});var Lvt=s(e1e);alr=r(Lvt,"model_type"),Lvt.forEach(t),nlr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),o1e=n(Aw,"CODE",{});var xvt=s(o1e);slr=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),llr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(Aw,"CODE",{});var $vt=s(r1e);ilr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),dlr=r(Aw,":"),Aw.forEach(t),clr=i(Aa),on=n(Aa,"UL",{});var yw=s(on);zT=n(yw,"LI",{});var lSe=s(zT);t1e=n(lSe,"STRONG",{});var kvt=s(t1e);flr=r(kvt,"beit"),kvt.forEach(t),mlr=r(lSe," \u2014 "),oW=n(lSe,"A",{href:!0});var Svt=s(oW);glr=r(Svt,"BeitForSemanticSegmentation"),Svt.forEach(t),hlr=r(lSe," (BEiT model)"),lSe.forEach(t),plr=i(yw),WT=n(yw,"LI",{});var iSe=s(WT);a1e=n(iSe,"STRONG",{});var Rvt=s(a1e);ulr=r(Rvt,"data2vec-vision"),Rvt.forEach(t),_lr=r(iSe," \u2014 "),rW=n(iSe,"A",{href:!0});var Pvt=s(rW);blr=r(Pvt,"Data2VecVisionForSemanticSegmentation"),Pvt.forEach(t),vlr=r(iSe," (Data2VecVision model)"),iSe.forEach(t),Flr=i(yw),QT=n(yw,"LI",{});var dSe=s(QT);n1e=n(dSe,"STRONG",{});var Bvt=s(n1e);Tlr=r(Bvt,"dpt"),Bvt.forEach(t),Mlr=r(dSe," \u2014 "),tW=n(dSe,"A",{href:!0});var Ivt=s(tW);Elr=r(Ivt,"DPTForSemanticSegmentation"),Ivt.forEach(t),Clr=r(dSe," (DPT model)"),dSe.forEach(t),wlr=i(yw),HT=n(yw,"LI",{});var cSe=s(HT);s1e=n(cSe,"STRONG",{});var qvt=s(s1e);Alr=r(qvt,"segformer"),qvt.forEach(t),ylr=r(cSe," \u2014 "),aW=n(cSe,"A",{href:!0});var Nvt=s(aW);Llr=r(Nvt,"SegformerForSemanticSegmentation"),Nvt.forEach(t),xlr=r(cSe," (SegFormer model)"),cSe.forEach(t),yw.forEach(t),$lr=i(Aa),UT=n(Aa,"P",{});var fSe=s(UT);klr=r(fSe,"The model is set in evaluation mode by default using "),l1e=n(fSe,"CODE",{});var jvt=s(l1e);Slr=r(jvt,"model.eval()"),jvt.forEach(t),Rlr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(fSe,"CODE",{});var Dvt=s(i1e);Plr=r(Dvt,"model.train()"),Dvt.forEach(t),fSe.forEach(t),Blr=i(Aa),T(JT.$$.fragment,Aa),Aa.forEach(t),_l.forEach(t),rje=i(f),Qd=n(f,"H2",{class:!0});var cGe=s(Qd);YT=n(cGe,"A",{id:!0,class:!0,href:!0});var Gvt=s(YT);d1e=n(Gvt,"SPAN",{});var Ovt=s(d1e);T(hL.$$.fragment,Ovt),Ovt.forEach(t),Gvt.forEach(t),Ilr=i(cGe),c1e=n(cGe,"SPAN",{});var Vvt=s(c1e);qlr=r(Vvt,"AutoModelForInstanceSegmentation"),Vvt.forEach(t),cGe.forEach(t),tje=i(f),Ko=n(f,"DIV",{class:!0});var bl=s(Ko);T(pL.$$.fragment,bl),Nlr=i(bl),Hd=n(bl,"P",{});var mee=s(Hd);jlr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=n(mee,"A",{href:!0});var Xvt=s(nW);Dlr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Glr=r(mee," class method or the "),sW=n(mee,"A",{href:!0});var zvt=s(sW);Olr=r(zvt,"from_config()"),zvt.forEach(t),Vlr=r(mee,` class
method.`),mee.forEach(t),Xlr=i(bl),uL=n(bl,"P",{});var fGe=s(uL);zlr=r(fGe,"This class cannot be instantiated directly using "),f1e=n(fGe,"CODE",{});var Wvt=s(f1e);Wlr=r(Wvt,"__init__()"),Wvt.forEach(t),Qlr=r(fGe," (throws an error)."),fGe.forEach(t),Hlr=i(bl),xt=n(bl,"DIV",{class:!0});var Lw=s(xt);T(_L.$$.fragment,Lw),Ulr=i(Lw),m1e=n(Lw,"P",{});var Qvt=s(m1e);Jlr=r(Qvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qvt.forEach(t),Ylr=i(Lw),Ud=n(Lw,"P",{});var gee=s(Ud);Klr=r(gee,`Note:
Loading a model from its configuration file does `),g1e=n(gee,"STRONG",{});var Hvt=s(g1e);Zlr=r(Hvt,"not"),Hvt.forEach(t),eir=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(gee,"A",{href:!0});var Uvt=s(lW);oir=r(Uvt,"from_pretrained()"),Uvt.forEach(t),rir=r(gee," to load the model weights."),gee.forEach(t),tir=i(Lw),T(KT.$$.fragment,Lw),Lw.forEach(t),air=i(bl),Fo=n(bl,"DIV",{class:!0});var ya=s(Fo);T(bL.$$.fragment,ya),nir=i(ya),h1e=n(ya,"P",{});var Jvt=s(h1e);sir=r(Jvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Jvt.forEach(t),lir=i(ya),rn=n(ya,"P",{});var xw=s(rn);iir=r(xw,"The model class to instantiate is selected based on the "),p1e=n(xw,"CODE",{});var Yvt=s(p1e);dir=r(Yvt,"model_type"),Yvt.forEach(t),cir=r(xw,` property of the config object (either
passed as an argument or loaded from `),u1e=n(xw,"CODE",{});var Kvt=s(u1e);fir=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),mir=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(xw,"CODE",{});var Zvt=s(_1e);gir=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),hir=r(xw,":"),xw.forEach(t),pir=i(ya),b1e=n(ya,"UL",{});var eFt=s(b1e);ZT=n(eFt,"LI",{});var mSe=s(ZT);v1e=n(mSe,"STRONG",{});var oFt=s(v1e);uir=r(oFt,"maskformer"),oFt.forEach(t),_ir=r(mSe," \u2014 "),iW=n(mSe,"A",{href:!0});var rFt=s(iW);bir=r(rFt,"MaskFormerForInstanceSegmentation"),rFt.forEach(t),vir=r(mSe," (MaskFormer model)"),mSe.forEach(t),eFt.forEach(t),Fir=i(ya),e8=n(ya,"P",{});var gSe=s(e8);Tir=r(gSe,"The model is set in evaluation mode by default using "),F1e=n(gSe,"CODE",{});var tFt=s(F1e);Mir=r(tFt,"model.eval()"),tFt.forEach(t),Eir=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(gSe,"CODE",{});var aFt=s(T1e);Cir=r(aFt,"model.train()"),aFt.forEach(t),gSe.forEach(t),wir=i(ya),T(o8.$$.fragment,ya),ya.forEach(t),bl.forEach(t),aje=i(f),Jd=n(f,"H2",{class:!0});var mGe=s(Jd);r8=n(mGe,"A",{id:!0,class:!0,href:!0});var nFt=s(r8);M1e=n(nFt,"SPAN",{});var sFt=s(M1e);T(vL.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),Air=i(mGe),E1e=n(mGe,"SPAN",{});var lFt=s(E1e);yir=r(lFt,"TFAutoModel"),lFt.forEach(t),mGe.forEach(t),nje=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(FL.$$.fragment,vl),Lir=i(vl),Yd=n(vl,"P",{});var hee=s(Yd);xir=r(hee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=n(hee,"A",{href:!0});var iFt=s(dW);$ir=r(iFt,"from_pretrained()"),iFt.forEach(t),kir=r(hee," class method or the "),cW=n(hee,"A",{href:!0});var dFt=s(cW);Sir=r(dFt,"from_config()"),dFt.forEach(t),Rir=r(hee,` class
method.`),hee.forEach(t),Pir=i(vl),TL=n(vl,"P",{});var gGe=s(TL);Bir=r(gGe,"This class cannot be instantiated directly using "),C1e=n(gGe,"CODE",{});var cFt=s(C1e);Iir=r(cFt,"__init__()"),cFt.forEach(t),qir=r(gGe," (throws an error)."),gGe.forEach(t),Nir=i(vl),$t=n(vl,"DIV",{class:!0});var $w=s($t);T(ML.$$.fragment,$w),jir=i($w),w1e=n($w,"P",{});var fFt=s(w1e);Dir=r(fFt,"Instantiates one of the base model classes of the library from a configuration."),fFt.forEach(t),Gir=i($w),Kd=n($w,"P",{});var pee=s(Kd);Oir=r(pee,`Note:
Loading a model from its configuration file does `),A1e=n(pee,"STRONG",{});var mFt=s(A1e);Vir=r(mFt,"not"),mFt.forEach(t),Xir=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(pee,"A",{href:!0});var gFt=s(fW);zir=r(gFt,"from_pretrained()"),gFt.forEach(t),Wir=r(pee," to load the model weights."),pee.forEach(t),Qir=i($w),T(t8.$$.fragment,$w),$w.forEach(t),Hir=i(vl),yr=n(vl,"DIV",{class:!0});var Fl=s(yr);T(EL.$$.fragment,Fl),Uir=i(Fl),y1e=n(Fl,"P",{});var hFt=s(y1e);Jir=r(hFt,"Instantiate one of the base model classes of the library from a pretrained model."),hFt.forEach(t),Yir=i(Fl),tn=n(Fl,"P",{});var kw=s(tn);Kir=r(kw,"The model class to instantiate is selected based on the "),L1e=n(kw,"CODE",{});var pFt=s(L1e);Zir=r(pFt,"model_type"),pFt.forEach(t),edr=r(kw,` property of the config object (either
passed as an argument or loaded from `),x1e=n(kw,"CODE",{});var uFt=s(x1e);odr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),rdr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(kw,"CODE",{});var _Ft=s($1e);tdr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),adr=r(kw,":"),kw.forEach(t),ndr=i(Fl),N=n(Fl,"UL",{});var D=s(N);a8=n(D,"LI",{});var hSe=s(a8);k1e=n(hSe,"STRONG",{});var bFt=s(k1e);sdr=r(bFt,"albert"),bFt.forEach(t),ldr=r(hSe," \u2014 "),mW=n(hSe,"A",{href:!0});var vFt=s(mW);idr=r(vFt,"TFAlbertModel"),vFt.forEach(t),ddr=r(hSe," (ALBERT model)"),hSe.forEach(t),cdr=i(D),n8=n(D,"LI",{});var pSe=s(n8);S1e=n(pSe,"STRONG",{});var FFt=s(S1e);fdr=r(FFt,"bart"),FFt.forEach(t),mdr=r(pSe," \u2014 "),gW=n(pSe,"A",{href:!0});var TFt=s(gW);gdr=r(TFt,"TFBartModel"),TFt.forEach(t),hdr=r(pSe," (BART model)"),pSe.forEach(t),pdr=i(D),s8=n(D,"LI",{});var uSe=s(s8);R1e=n(uSe,"STRONG",{});var MFt=s(R1e);udr=r(MFt,"bert"),MFt.forEach(t),_dr=r(uSe," \u2014 "),hW=n(uSe,"A",{href:!0});var EFt=s(hW);bdr=r(EFt,"TFBertModel"),EFt.forEach(t),vdr=r(uSe," (BERT model)"),uSe.forEach(t),Fdr=i(D),l8=n(D,"LI",{});var _Se=s(l8);P1e=n(_Se,"STRONG",{});var CFt=s(P1e);Tdr=r(CFt,"blenderbot"),CFt.forEach(t),Mdr=r(_Se," \u2014 "),pW=n(_Se,"A",{href:!0});var wFt=s(pW);Edr=r(wFt,"TFBlenderbotModel"),wFt.forEach(t),Cdr=r(_Se," (Blenderbot model)"),_Se.forEach(t),wdr=i(D),i8=n(D,"LI",{});var bSe=s(i8);B1e=n(bSe,"STRONG",{});var AFt=s(B1e);Adr=r(AFt,"blenderbot-small"),AFt.forEach(t),ydr=r(bSe," \u2014 "),uW=n(bSe,"A",{href:!0});var yFt=s(uW);Ldr=r(yFt,"TFBlenderbotSmallModel"),yFt.forEach(t),xdr=r(bSe," (BlenderbotSmall model)"),bSe.forEach(t),$dr=i(D),d8=n(D,"LI",{});var vSe=s(d8);I1e=n(vSe,"STRONG",{});var LFt=s(I1e);kdr=r(LFt,"camembert"),LFt.forEach(t),Sdr=r(vSe," \u2014 "),_W=n(vSe,"A",{href:!0});var xFt=s(_W);Rdr=r(xFt,"TFCamembertModel"),xFt.forEach(t),Pdr=r(vSe," (CamemBERT model)"),vSe.forEach(t),Bdr=i(D),c8=n(D,"LI",{});var FSe=s(c8);q1e=n(FSe,"STRONG",{});var $Ft=s(q1e);Idr=r($Ft,"clip"),$Ft.forEach(t),qdr=r(FSe," \u2014 "),bW=n(FSe,"A",{href:!0});var kFt=s(bW);Ndr=r(kFt,"TFCLIPModel"),kFt.forEach(t),jdr=r(FSe," (CLIP model)"),FSe.forEach(t),Ddr=i(D),f8=n(D,"LI",{});var TSe=s(f8);N1e=n(TSe,"STRONG",{});var SFt=s(N1e);Gdr=r(SFt,"convbert"),SFt.forEach(t),Odr=r(TSe," \u2014 "),vW=n(TSe,"A",{href:!0});var RFt=s(vW);Vdr=r(RFt,"TFConvBertModel"),RFt.forEach(t),Xdr=r(TSe," (ConvBERT model)"),TSe.forEach(t),zdr=i(D),m8=n(D,"LI",{});var MSe=s(m8);j1e=n(MSe,"STRONG",{});var PFt=s(j1e);Wdr=r(PFt,"convnext"),PFt.forEach(t),Qdr=r(MSe," \u2014 "),FW=n(MSe,"A",{href:!0});var BFt=s(FW);Hdr=r(BFt,"TFConvNextModel"),BFt.forEach(t),Udr=r(MSe," (ConvNext model)"),MSe.forEach(t),Jdr=i(D),g8=n(D,"LI",{});var ESe=s(g8);D1e=n(ESe,"STRONG",{});var IFt=s(D1e);Ydr=r(IFt,"ctrl"),IFt.forEach(t),Kdr=r(ESe," \u2014 "),TW=n(ESe,"A",{href:!0});var qFt=s(TW);Zdr=r(qFt,"TFCTRLModel"),qFt.forEach(t),ecr=r(ESe," (CTRL model)"),ESe.forEach(t),ocr=i(D),h8=n(D,"LI",{});var CSe=s(h8);G1e=n(CSe,"STRONG",{});var NFt=s(G1e);rcr=r(NFt,"data2vec-vision"),NFt.forEach(t),tcr=r(CSe," \u2014 "),MW=n(CSe,"A",{href:!0});var jFt=s(MW);acr=r(jFt,"TFData2VecVisionModel"),jFt.forEach(t),ncr=r(CSe," (Data2VecVision model)"),CSe.forEach(t),scr=i(D),p8=n(D,"LI",{});var wSe=s(p8);O1e=n(wSe,"STRONG",{});var DFt=s(O1e);lcr=r(DFt,"deberta"),DFt.forEach(t),icr=r(wSe," \u2014 "),EW=n(wSe,"A",{href:!0});var GFt=s(EW);dcr=r(GFt,"TFDebertaModel"),GFt.forEach(t),ccr=r(wSe," (DeBERTa model)"),wSe.forEach(t),fcr=i(D),u8=n(D,"LI",{});var ASe=s(u8);V1e=n(ASe,"STRONG",{});var OFt=s(V1e);mcr=r(OFt,"deberta-v2"),OFt.forEach(t),gcr=r(ASe," \u2014 "),CW=n(ASe,"A",{href:!0});var VFt=s(CW);hcr=r(VFt,"TFDebertaV2Model"),VFt.forEach(t),pcr=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),ucr=i(D),_8=n(D,"LI",{});var ySe=s(_8);X1e=n(ySe,"STRONG",{});var XFt=s(X1e);_cr=r(XFt,"distilbert"),XFt.forEach(t),bcr=r(ySe," \u2014 "),wW=n(ySe,"A",{href:!0});var zFt=s(wW);vcr=r(zFt,"TFDistilBertModel"),zFt.forEach(t),Fcr=r(ySe," (DistilBERT model)"),ySe.forEach(t),Tcr=i(D),b8=n(D,"LI",{});var LSe=s(b8);z1e=n(LSe,"STRONG",{});var WFt=s(z1e);Mcr=r(WFt,"dpr"),WFt.forEach(t),Ecr=r(LSe," \u2014 "),AW=n(LSe,"A",{href:!0});var QFt=s(AW);Ccr=r(QFt,"TFDPRQuestionEncoder"),QFt.forEach(t),wcr=r(LSe," (DPR model)"),LSe.forEach(t),Acr=i(D),v8=n(D,"LI",{});var xSe=s(v8);W1e=n(xSe,"STRONG",{});var HFt=s(W1e);ycr=r(HFt,"electra"),HFt.forEach(t),Lcr=r(xSe," \u2014 "),yW=n(xSe,"A",{href:!0});var UFt=s(yW);xcr=r(UFt,"TFElectraModel"),UFt.forEach(t),$cr=r(xSe," (ELECTRA model)"),xSe.forEach(t),kcr=i(D),F8=n(D,"LI",{});var $Se=s(F8);Q1e=n($Se,"STRONG",{});var JFt=s(Q1e);Scr=r(JFt,"flaubert"),JFt.forEach(t),Rcr=r($Se," \u2014 "),LW=n($Se,"A",{href:!0});var YFt=s(LW);Pcr=r(YFt,"TFFlaubertModel"),YFt.forEach(t),Bcr=r($Se," (FlauBERT model)"),$Se.forEach(t),Icr=i(D),Gs=n(D,"LI",{});var ok=s(Gs);H1e=n(ok,"STRONG",{});var KFt=s(H1e);qcr=r(KFt,"funnel"),KFt.forEach(t),Ncr=r(ok," \u2014 "),xW=n(ok,"A",{href:!0});var ZFt=s(xW);jcr=r(ZFt,"TFFunnelModel"),ZFt.forEach(t),Dcr=r(ok," or "),$W=n(ok,"A",{href:!0});var e6t=s($W);Gcr=r(e6t,"TFFunnelBaseModel"),e6t.forEach(t),Ocr=r(ok," (Funnel Transformer model)"),ok.forEach(t),Vcr=i(D),T8=n(D,"LI",{});var kSe=s(T8);U1e=n(kSe,"STRONG",{});var o6t=s(U1e);Xcr=r(o6t,"gpt2"),o6t.forEach(t),zcr=r(kSe," \u2014 "),kW=n(kSe,"A",{href:!0});var r6t=s(kW);Wcr=r(r6t,"TFGPT2Model"),r6t.forEach(t),Qcr=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),Hcr=i(D),M8=n(D,"LI",{});var SSe=s(M8);J1e=n(SSe,"STRONG",{});var t6t=s(J1e);Ucr=r(t6t,"gptj"),t6t.forEach(t),Jcr=r(SSe," \u2014 "),SW=n(SSe,"A",{href:!0});var a6t=s(SW);Ycr=r(a6t,"TFGPTJModel"),a6t.forEach(t),Kcr=r(SSe," (GPT-J model)"),SSe.forEach(t),Zcr=i(D),E8=n(D,"LI",{});var RSe=s(E8);Y1e=n(RSe,"STRONG",{});var n6t=s(Y1e);efr=r(n6t,"hubert"),n6t.forEach(t),ofr=r(RSe," \u2014 "),RW=n(RSe,"A",{href:!0});var s6t=s(RW);rfr=r(s6t,"TFHubertModel"),s6t.forEach(t),tfr=r(RSe," (Hubert model)"),RSe.forEach(t),afr=i(D),C8=n(D,"LI",{});var PSe=s(C8);K1e=n(PSe,"STRONG",{});var l6t=s(K1e);nfr=r(l6t,"layoutlm"),l6t.forEach(t),sfr=r(PSe," \u2014 "),PW=n(PSe,"A",{href:!0});var i6t=s(PW);lfr=r(i6t,"TFLayoutLMModel"),i6t.forEach(t),ifr=r(PSe," (LayoutLM model)"),PSe.forEach(t),dfr=i(D),w8=n(D,"LI",{});var BSe=s(w8);Z1e=n(BSe,"STRONG",{});var d6t=s(Z1e);cfr=r(d6t,"led"),d6t.forEach(t),ffr=r(BSe," \u2014 "),BW=n(BSe,"A",{href:!0});var c6t=s(BW);mfr=r(c6t,"TFLEDModel"),c6t.forEach(t),gfr=r(BSe," (LED model)"),BSe.forEach(t),hfr=i(D),A8=n(D,"LI",{});var ISe=s(A8);ebe=n(ISe,"STRONG",{});var f6t=s(ebe);pfr=r(f6t,"longformer"),f6t.forEach(t),ufr=r(ISe," \u2014 "),IW=n(ISe,"A",{href:!0});var m6t=s(IW);_fr=r(m6t,"TFLongformerModel"),m6t.forEach(t),bfr=r(ISe," (Longformer model)"),ISe.forEach(t),vfr=i(D),y8=n(D,"LI",{});var qSe=s(y8);obe=n(qSe,"STRONG",{});var g6t=s(obe);Ffr=r(g6t,"lxmert"),g6t.forEach(t),Tfr=r(qSe," \u2014 "),qW=n(qSe,"A",{href:!0});var h6t=s(qW);Mfr=r(h6t,"TFLxmertModel"),h6t.forEach(t),Efr=r(qSe," (LXMERT model)"),qSe.forEach(t),Cfr=i(D),L8=n(D,"LI",{});var NSe=s(L8);rbe=n(NSe,"STRONG",{});var p6t=s(rbe);wfr=r(p6t,"marian"),p6t.forEach(t),Afr=r(NSe," \u2014 "),NW=n(NSe,"A",{href:!0});var u6t=s(NW);yfr=r(u6t,"TFMarianModel"),u6t.forEach(t),Lfr=r(NSe," (Marian model)"),NSe.forEach(t),xfr=i(D),x8=n(D,"LI",{});var jSe=s(x8);tbe=n(jSe,"STRONG",{});var _6t=s(tbe);$fr=r(_6t,"mbart"),_6t.forEach(t),kfr=r(jSe," \u2014 "),jW=n(jSe,"A",{href:!0});var b6t=s(jW);Sfr=r(b6t,"TFMBartModel"),b6t.forEach(t),Rfr=r(jSe," (mBART model)"),jSe.forEach(t),Pfr=i(D),$8=n(D,"LI",{});var DSe=s($8);abe=n(DSe,"STRONG",{});var v6t=s(abe);Bfr=r(v6t,"mobilebert"),v6t.forEach(t),Ifr=r(DSe," \u2014 "),DW=n(DSe,"A",{href:!0});var F6t=s(DW);qfr=r(F6t,"TFMobileBertModel"),F6t.forEach(t),Nfr=r(DSe," (MobileBERT model)"),DSe.forEach(t),jfr=i(D),k8=n(D,"LI",{});var GSe=s(k8);nbe=n(GSe,"STRONG",{});var T6t=s(nbe);Dfr=r(T6t,"mpnet"),T6t.forEach(t),Gfr=r(GSe," \u2014 "),GW=n(GSe,"A",{href:!0});var M6t=s(GW);Ofr=r(M6t,"TFMPNetModel"),M6t.forEach(t),Vfr=r(GSe," (MPNet model)"),GSe.forEach(t),Xfr=i(D),S8=n(D,"LI",{});var OSe=s(S8);sbe=n(OSe,"STRONG",{});var E6t=s(sbe);zfr=r(E6t,"mt5"),E6t.forEach(t),Wfr=r(OSe," \u2014 "),OW=n(OSe,"A",{href:!0});var C6t=s(OW);Qfr=r(C6t,"TFMT5Model"),C6t.forEach(t),Hfr=r(OSe," (mT5 model)"),OSe.forEach(t),Ufr=i(D),R8=n(D,"LI",{});var VSe=s(R8);lbe=n(VSe,"STRONG",{});var w6t=s(lbe);Jfr=r(w6t,"openai-gpt"),w6t.forEach(t),Yfr=r(VSe," \u2014 "),VW=n(VSe,"A",{href:!0});var A6t=s(VW);Kfr=r(A6t,"TFOpenAIGPTModel"),A6t.forEach(t),Zfr=r(VSe," (OpenAI GPT model)"),VSe.forEach(t),emr=i(D),P8=n(D,"LI",{});var XSe=s(P8);ibe=n(XSe,"STRONG",{});var y6t=s(ibe);omr=r(y6t,"pegasus"),y6t.forEach(t),rmr=r(XSe," \u2014 "),XW=n(XSe,"A",{href:!0});var L6t=s(XW);tmr=r(L6t,"TFPegasusModel"),L6t.forEach(t),amr=r(XSe," (Pegasus model)"),XSe.forEach(t),nmr=i(D),B8=n(D,"LI",{});var zSe=s(B8);dbe=n(zSe,"STRONG",{});var x6t=s(dbe);smr=r(x6t,"rembert"),x6t.forEach(t),lmr=r(zSe," \u2014 "),zW=n(zSe,"A",{href:!0});var $6t=s(zW);imr=r($6t,"TFRemBertModel"),$6t.forEach(t),dmr=r(zSe," (RemBERT model)"),zSe.forEach(t),cmr=i(D),I8=n(D,"LI",{});var WSe=s(I8);cbe=n(WSe,"STRONG",{});var k6t=s(cbe);fmr=r(k6t,"roberta"),k6t.forEach(t),mmr=r(WSe," \u2014 "),WW=n(WSe,"A",{href:!0});var S6t=s(WW);gmr=r(S6t,"TFRobertaModel"),S6t.forEach(t),hmr=r(WSe," (RoBERTa model)"),WSe.forEach(t),pmr=i(D),q8=n(D,"LI",{});var QSe=s(q8);fbe=n(QSe,"STRONG",{});var R6t=s(fbe);umr=r(R6t,"roformer"),R6t.forEach(t),_mr=r(QSe," \u2014 "),QW=n(QSe,"A",{href:!0});var P6t=s(QW);bmr=r(P6t,"TFRoFormerModel"),P6t.forEach(t),vmr=r(QSe," (RoFormer model)"),QSe.forEach(t),Fmr=i(D),N8=n(D,"LI",{});var HSe=s(N8);mbe=n(HSe,"STRONG",{});var B6t=s(mbe);Tmr=r(B6t,"speech_to_text"),B6t.forEach(t),Mmr=r(HSe," \u2014 "),HW=n(HSe,"A",{href:!0});var I6t=s(HW);Emr=r(I6t,"TFSpeech2TextModel"),I6t.forEach(t),Cmr=r(HSe," (Speech2Text model)"),HSe.forEach(t),wmr=i(D),j8=n(D,"LI",{});var USe=s(j8);gbe=n(USe,"STRONG",{});var q6t=s(gbe);Amr=r(q6t,"swin"),q6t.forEach(t),ymr=r(USe," \u2014 "),UW=n(USe,"A",{href:!0});var N6t=s(UW);Lmr=r(N6t,"TFSwinModel"),N6t.forEach(t),xmr=r(USe," (Swin model)"),USe.forEach(t),$mr=i(D),D8=n(D,"LI",{});var JSe=s(D8);hbe=n(JSe,"STRONG",{});var j6t=s(hbe);kmr=r(j6t,"t5"),j6t.forEach(t),Smr=r(JSe," \u2014 "),JW=n(JSe,"A",{href:!0});var D6t=s(JW);Rmr=r(D6t,"TFT5Model"),D6t.forEach(t),Pmr=r(JSe," (T5 model)"),JSe.forEach(t),Bmr=i(D),G8=n(D,"LI",{});var YSe=s(G8);pbe=n(YSe,"STRONG",{});var G6t=s(pbe);Imr=r(G6t,"tapas"),G6t.forEach(t),qmr=r(YSe," \u2014 "),YW=n(YSe,"A",{href:!0});var O6t=s(YW);Nmr=r(O6t,"TFTapasModel"),O6t.forEach(t),jmr=r(YSe," (TAPAS model)"),YSe.forEach(t),Dmr=i(D),O8=n(D,"LI",{});var KSe=s(O8);ube=n(KSe,"STRONG",{});var V6t=s(ube);Gmr=r(V6t,"transfo-xl"),V6t.forEach(t),Omr=r(KSe," \u2014 "),KW=n(KSe,"A",{href:!0});var X6t=s(KW);Vmr=r(X6t,"TFTransfoXLModel"),X6t.forEach(t),Xmr=r(KSe," (Transformer-XL model)"),KSe.forEach(t),zmr=i(D),V8=n(D,"LI",{});var ZSe=s(V8);_be=n(ZSe,"STRONG",{});var z6t=s(_be);Wmr=r(z6t,"vit"),z6t.forEach(t),Qmr=r(ZSe," \u2014 "),ZW=n(ZSe,"A",{href:!0});var W6t=s(ZW);Hmr=r(W6t,"TFViTModel"),W6t.forEach(t),Umr=r(ZSe," (ViT model)"),ZSe.forEach(t),Jmr=i(D),X8=n(D,"LI",{});var eRe=s(X8);bbe=n(eRe,"STRONG",{});var Q6t=s(bbe);Ymr=r(Q6t,"vit_mae"),Q6t.forEach(t),Kmr=r(eRe," \u2014 "),eQ=n(eRe,"A",{href:!0});var H6t=s(eQ);Zmr=r(H6t,"TFViTMAEModel"),H6t.forEach(t),egr=r(eRe," (ViTMAE model)"),eRe.forEach(t),ogr=i(D),z8=n(D,"LI",{});var oRe=s(z8);vbe=n(oRe,"STRONG",{});var U6t=s(vbe);rgr=r(U6t,"wav2vec2"),U6t.forEach(t),tgr=r(oRe," \u2014 "),oQ=n(oRe,"A",{href:!0});var J6t=s(oQ);agr=r(J6t,"TFWav2Vec2Model"),J6t.forEach(t),ngr=r(oRe," (Wav2Vec2 model)"),oRe.forEach(t),sgr=i(D),W8=n(D,"LI",{});var rRe=s(W8);Fbe=n(rRe,"STRONG",{});var Y6t=s(Fbe);lgr=r(Y6t,"xlm"),Y6t.forEach(t),igr=r(rRe," \u2014 "),rQ=n(rRe,"A",{href:!0});var K6t=s(rQ);dgr=r(K6t,"TFXLMModel"),K6t.forEach(t),cgr=r(rRe," (XLM model)"),rRe.forEach(t),fgr=i(D),Q8=n(D,"LI",{});var tRe=s(Q8);Tbe=n(tRe,"STRONG",{});var Z6t=s(Tbe);mgr=r(Z6t,"xlm-roberta"),Z6t.forEach(t),ggr=r(tRe," \u2014 "),tQ=n(tRe,"A",{href:!0});var eTt=s(tQ);hgr=r(eTt,"TFXLMRobertaModel"),eTt.forEach(t),pgr=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),ugr=i(D),H8=n(D,"LI",{});var aRe=s(H8);Mbe=n(aRe,"STRONG",{});var oTt=s(Mbe);_gr=r(oTt,"xlnet"),oTt.forEach(t),bgr=r(aRe," \u2014 "),aQ=n(aRe,"A",{href:!0});var rTt=s(aQ);vgr=r(rTt,"TFXLNetModel"),rTt.forEach(t),Fgr=r(aRe," (XLNet model)"),aRe.forEach(t),D.forEach(t),Tgr=i(Fl),T(U8.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),sje=i(f),Zd=n(f,"H2",{class:!0});var hGe=s(Zd);J8=n(hGe,"A",{id:!0,class:!0,href:!0});var tTt=s(J8);Ebe=n(tTt,"SPAN",{});var aTt=s(Ebe);T(CL.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),Mgr=i(hGe),Cbe=n(hGe,"SPAN",{});var nTt=s(Cbe);Egr=r(nTt,"TFAutoModelForPreTraining"),nTt.forEach(t),hGe.forEach(t),lje=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(wL.$$.fragment,Tl),Cgr=i(Tl),ec=n(Tl,"P",{});var uee=s(ec);wgr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=n(uee,"A",{href:!0});var sTt=s(nQ);Agr=r(sTt,"from_pretrained()"),sTt.forEach(t),ygr=r(uee," class method or the "),sQ=n(uee,"A",{href:!0});var lTt=s(sQ);Lgr=r(lTt,"from_config()"),lTt.forEach(t),xgr=r(uee,` class
method.`),uee.forEach(t),$gr=i(Tl),AL=n(Tl,"P",{});var pGe=s(AL);kgr=r(pGe,"This class cannot be instantiated directly using "),wbe=n(pGe,"CODE",{});var iTt=s(wbe);Sgr=r(iTt,"__init__()"),iTt.forEach(t),Rgr=r(pGe," (throws an error)."),pGe.forEach(t),Pgr=i(Tl),kt=n(Tl,"DIV",{class:!0});var Sw=s(kt);T(yL.$$.fragment,Sw),Bgr=i(Sw),Abe=n(Sw,"P",{});var dTt=s(Abe);Igr=r(dTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dTt.forEach(t),qgr=i(Sw),oc=n(Sw,"P",{});var _ee=s(oc);Ngr=r(_ee,`Note:
Loading a model from its configuration file does `),ybe=n(_ee,"STRONG",{});var cTt=s(ybe);jgr=r(cTt,"not"),cTt.forEach(t),Dgr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(_ee,"A",{href:!0});var fTt=s(lQ);Ggr=r(fTt,"from_pretrained()"),fTt.forEach(t),Ogr=r(_ee," to load the model weights."),_ee.forEach(t),Vgr=i(Sw),T(Y8.$$.fragment,Sw),Sw.forEach(t),Xgr=i(Tl),Lr=n(Tl,"DIV",{class:!0});var Ml=s(Lr);T(LL.$$.fragment,Ml),zgr=i(Ml),Lbe=n(Ml,"P",{});var mTt=s(Lbe);Wgr=r(mTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mTt.forEach(t),Qgr=i(Ml),an=n(Ml,"P",{});var Rw=s(an);Hgr=r(Rw,"The model class to instantiate is selected based on the "),xbe=n(Rw,"CODE",{});var gTt=s(xbe);Ugr=r(gTt,"model_type"),gTt.forEach(t),Jgr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),$be=n(Rw,"CODE",{});var hTt=s($be);Ygr=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),Kgr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(Rw,"CODE",{});var pTt=s(kbe);Zgr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),ehr=r(Rw,":"),Rw.forEach(t),ohr=i(Ml),se=n(Ml,"UL",{});var le=s(se);K8=n(le,"LI",{});var nRe=s(K8);Sbe=n(nRe,"STRONG",{});var uTt=s(Sbe);rhr=r(uTt,"albert"),uTt.forEach(t),thr=r(nRe," \u2014 "),iQ=n(nRe,"A",{href:!0});var _Tt=s(iQ);ahr=r(_Tt,"TFAlbertForPreTraining"),_Tt.forEach(t),nhr=r(nRe," (ALBERT model)"),nRe.forEach(t),shr=i(le),Z8=n(le,"LI",{});var sRe=s(Z8);Rbe=n(sRe,"STRONG",{});var bTt=s(Rbe);lhr=r(bTt,"bart"),bTt.forEach(t),ihr=r(sRe," \u2014 "),dQ=n(sRe,"A",{href:!0});var vTt=s(dQ);dhr=r(vTt,"TFBartForConditionalGeneration"),vTt.forEach(t),chr=r(sRe," (BART model)"),sRe.forEach(t),fhr=i(le),e7=n(le,"LI",{});var lRe=s(e7);Pbe=n(lRe,"STRONG",{});var FTt=s(Pbe);mhr=r(FTt,"bert"),FTt.forEach(t),ghr=r(lRe," \u2014 "),cQ=n(lRe,"A",{href:!0});var TTt=s(cQ);hhr=r(TTt,"TFBertForPreTraining"),TTt.forEach(t),phr=r(lRe," (BERT model)"),lRe.forEach(t),uhr=i(le),o7=n(le,"LI",{});var iRe=s(o7);Bbe=n(iRe,"STRONG",{});var MTt=s(Bbe);_hr=r(MTt,"camembert"),MTt.forEach(t),bhr=r(iRe," \u2014 "),fQ=n(iRe,"A",{href:!0});var ETt=s(fQ);vhr=r(ETt,"TFCamembertForMaskedLM"),ETt.forEach(t),Fhr=r(iRe," (CamemBERT model)"),iRe.forEach(t),Thr=i(le),r7=n(le,"LI",{});var dRe=s(r7);Ibe=n(dRe,"STRONG",{});var CTt=s(Ibe);Mhr=r(CTt,"ctrl"),CTt.forEach(t),Ehr=r(dRe," \u2014 "),mQ=n(dRe,"A",{href:!0});var wTt=s(mQ);Chr=r(wTt,"TFCTRLLMHeadModel"),wTt.forEach(t),whr=r(dRe," (CTRL model)"),dRe.forEach(t),Ahr=i(le),t7=n(le,"LI",{});var cRe=s(t7);qbe=n(cRe,"STRONG",{});var ATt=s(qbe);yhr=r(ATt,"distilbert"),ATt.forEach(t),Lhr=r(cRe," \u2014 "),gQ=n(cRe,"A",{href:!0});var yTt=s(gQ);xhr=r(yTt,"TFDistilBertForMaskedLM"),yTt.forEach(t),$hr=r(cRe," (DistilBERT model)"),cRe.forEach(t),khr=i(le),a7=n(le,"LI",{});var fRe=s(a7);Nbe=n(fRe,"STRONG",{});var LTt=s(Nbe);Shr=r(LTt,"electra"),LTt.forEach(t),Rhr=r(fRe," \u2014 "),hQ=n(fRe,"A",{href:!0});var xTt=s(hQ);Phr=r(xTt,"TFElectraForPreTraining"),xTt.forEach(t),Bhr=r(fRe," (ELECTRA model)"),fRe.forEach(t),Ihr=i(le),n7=n(le,"LI",{});var mRe=s(n7);jbe=n(mRe,"STRONG",{});var $Tt=s(jbe);qhr=r($Tt,"flaubert"),$Tt.forEach(t),Nhr=r(mRe," \u2014 "),pQ=n(mRe,"A",{href:!0});var kTt=s(pQ);jhr=r(kTt,"TFFlaubertWithLMHeadModel"),kTt.forEach(t),Dhr=r(mRe," (FlauBERT model)"),mRe.forEach(t),Ghr=i(le),s7=n(le,"LI",{});var gRe=s(s7);Dbe=n(gRe,"STRONG",{});var STt=s(Dbe);Ohr=r(STt,"funnel"),STt.forEach(t),Vhr=r(gRe," \u2014 "),uQ=n(gRe,"A",{href:!0});var RTt=s(uQ);Xhr=r(RTt,"TFFunnelForPreTraining"),RTt.forEach(t),zhr=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),Whr=i(le),l7=n(le,"LI",{});var hRe=s(l7);Gbe=n(hRe,"STRONG",{});var PTt=s(Gbe);Qhr=r(PTt,"gpt2"),PTt.forEach(t),Hhr=r(hRe," \u2014 "),_Q=n(hRe,"A",{href:!0});var BTt=s(_Q);Uhr=r(BTt,"TFGPT2LMHeadModel"),BTt.forEach(t),Jhr=r(hRe," (OpenAI GPT-2 model)"),hRe.forEach(t),Yhr=i(le),i7=n(le,"LI",{});var pRe=s(i7);Obe=n(pRe,"STRONG",{});var ITt=s(Obe);Khr=r(ITt,"layoutlm"),ITt.forEach(t),Zhr=r(pRe," \u2014 "),bQ=n(pRe,"A",{href:!0});var qTt=s(bQ);epr=r(qTt,"TFLayoutLMForMaskedLM"),qTt.forEach(t),opr=r(pRe," (LayoutLM model)"),pRe.forEach(t),rpr=i(le),d7=n(le,"LI",{});var uRe=s(d7);Vbe=n(uRe,"STRONG",{});var NTt=s(Vbe);tpr=r(NTt,"lxmert"),NTt.forEach(t),apr=r(uRe," \u2014 "),vQ=n(uRe,"A",{href:!0});var jTt=s(vQ);npr=r(jTt,"TFLxmertForPreTraining"),jTt.forEach(t),spr=r(uRe," (LXMERT model)"),uRe.forEach(t),lpr=i(le),c7=n(le,"LI",{});var _Re=s(c7);Xbe=n(_Re,"STRONG",{});var DTt=s(Xbe);ipr=r(DTt,"mobilebert"),DTt.forEach(t),dpr=r(_Re," \u2014 "),FQ=n(_Re,"A",{href:!0});var GTt=s(FQ);cpr=r(GTt,"TFMobileBertForPreTraining"),GTt.forEach(t),fpr=r(_Re," (MobileBERT model)"),_Re.forEach(t),mpr=i(le),f7=n(le,"LI",{});var bRe=s(f7);zbe=n(bRe,"STRONG",{});var OTt=s(zbe);gpr=r(OTt,"mpnet"),OTt.forEach(t),hpr=r(bRe," \u2014 "),TQ=n(bRe,"A",{href:!0});var VTt=s(TQ);ppr=r(VTt,"TFMPNetForMaskedLM"),VTt.forEach(t),upr=r(bRe," (MPNet model)"),bRe.forEach(t),_pr=i(le),m7=n(le,"LI",{});var vRe=s(m7);Wbe=n(vRe,"STRONG",{});var XTt=s(Wbe);bpr=r(XTt,"openai-gpt"),XTt.forEach(t),vpr=r(vRe," \u2014 "),MQ=n(vRe,"A",{href:!0});var zTt=s(MQ);Fpr=r(zTt,"TFOpenAIGPTLMHeadModel"),zTt.forEach(t),Tpr=r(vRe," (OpenAI GPT model)"),vRe.forEach(t),Mpr=i(le),g7=n(le,"LI",{});var FRe=s(g7);Qbe=n(FRe,"STRONG",{});var WTt=s(Qbe);Epr=r(WTt,"roberta"),WTt.forEach(t),Cpr=r(FRe," \u2014 "),EQ=n(FRe,"A",{href:!0});var QTt=s(EQ);wpr=r(QTt,"TFRobertaForMaskedLM"),QTt.forEach(t),Apr=r(FRe," (RoBERTa model)"),FRe.forEach(t),ypr=i(le),h7=n(le,"LI",{});var TRe=s(h7);Hbe=n(TRe,"STRONG",{});var HTt=s(Hbe);Lpr=r(HTt,"t5"),HTt.forEach(t),xpr=r(TRe," \u2014 "),CQ=n(TRe,"A",{href:!0});var UTt=s(CQ);$pr=r(UTt,"TFT5ForConditionalGeneration"),UTt.forEach(t),kpr=r(TRe," (T5 model)"),TRe.forEach(t),Spr=i(le),p7=n(le,"LI",{});var MRe=s(p7);Ube=n(MRe,"STRONG",{});var JTt=s(Ube);Rpr=r(JTt,"tapas"),JTt.forEach(t),Ppr=r(MRe," \u2014 "),wQ=n(MRe,"A",{href:!0});var YTt=s(wQ);Bpr=r(YTt,"TFTapasForMaskedLM"),YTt.forEach(t),Ipr=r(MRe," (TAPAS model)"),MRe.forEach(t),qpr=i(le),u7=n(le,"LI",{});var ERe=s(u7);Jbe=n(ERe,"STRONG",{});var KTt=s(Jbe);Npr=r(KTt,"transfo-xl"),KTt.forEach(t),jpr=r(ERe," \u2014 "),AQ=n(ERe,"A",{href:!0});var ZTt=s(AQ);Dpr=r(ZTt,"TFTransfoXLLMHeadModel"),ZTt.forEach(t),Gpr=r(ERe," (Transformer-XL model)"),ERe.forEach(t),Opr=i(le),_7=n(le,"LI",{});var CRe=s(_7);Ybe=n(CRe,"STRONG",{});var e8t=s(Ybe);Vpr=r(e8t,"vit_mae"),e8t.forEach(t),Xpr=r(CRe," \u2014 "),yQ=n(CRe,"A",{href:!0});var o8t=s(yQ);zpr=r(o8t,"TFViTMAEForPreTraining"),o8t.forEach(t),Wpr=r(CRe," (ViTMAE model)"),CRe.forEach(t),Qpr=i(le),b7=n(le,"LI",{});var wRe=s(b7);Kbe=n(wRe,"STRONG",{});var r8t=s(Kbe);Hpr=r(r8t,"xlm"),r8t.forEach(t),Upr=r(wRe," \u2014 "),LQ=n(wRe,"A",{href:!0});var t8t=s(LQ);Jpr=r(t8t,"TFXLMWithLMHeadModel"),t8t.forEach(t),Ypr=r(wRe," (XLM model)"),wRe.forEach(t),Kpr=i(le),v7=n(le,"LI",{});var ARe=s(v7);Zbe=n(ARe,"STRONG",{});var a8t=s(Zbe);Zpr=r(a8t,"xlm-roberta"),a8t.forEach(t),eur=r(ARe," \u2014 "),xQ=n(ARe,"A",{href:!0});var n8t=s(xQ);our=r(n8t,"TFXLMRobertaForMaskedLM"),n8t.forEach(t),rur=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),tur=i(le),F7=n(le,"LI",{});var yRe=s(F7);eve=n(yRe,"STRONG",{});var s8t=s(eve);aur=r(s8t,"xlnet"),s8t.forEach(t),nur=r(yRe," \u2014 "),$Q=n(yRe,"A",{href:!0});var l8t=s($Q);sur=r(l8t,"TFXLNetLMHeadModel"),l8t.forEach(t),lur=r(yRe," (XLNet model)"),yRe.forEach(t),le.forEach(t),iur=i(Ml),T(T7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),ije=i(f),rc=n(f,"H2",{class:!0});var uGe=s(rc);M7=n(uGe,"A",{id:!0,class:!0,href:!0});var i8t=s(M7);ove=n(i8t,"SPAN",{});var d8t=s(ove);T(xL.$$.fragment,d8t),d8t.forEach(t),i8t.forEach(t),dur=i(uGe),rve=n(uGe,"SPAN",{});var c8t=s(rve);cur=r(c8t,"TFAutoModelForCausalLM"),c8t.forEach(t),uGe.forEach(t),dje=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T($L.$$.fragment,El),fur=i(El),tc=n(El,"P",{});var bee=s(tc);mur=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=n(bee,"A",{href:!0});var f8t=s(kQ);gur=r(f8t,"from_pretrained()"),f8t.forEach(t),hur=r(bee," class method or the "),SQ=n(bee,"A",{href:!0});var m8t=s(SQ);pur=r(m8t,"from_config()"),m8t.forEach(t),uur=r(bee,` class
method.`),bee.forEach(t),_ur=i(El),kL=n(El,"P",{});var _Ge=s(kL);bur=r(_Ge,"This class cannot be instantiated directly using "),tve=n(_Ge,"CODE",{});var g8t=s(tve);vur=r(g8t,"__init__()"),g8t.forEach(t),Fur=r(_Ge," (throws an error)."),_Ge.forEach(t),Tur=i(El),St=n(El,"DIV",{class:!0});var Pw=s(St);T(SL.$$.fragment,Pw),Mur=i(Pw),ave=n(Pw,"P",{});var h8t=s(ave);Eur=r(h8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h8t.forEach(t),Cur=i(Pw),ac=n(Pw,"P",{});var vee=s(ac);wur=r(vee,`Note:
Loading a model from its configuration file does `),nve=n(vee,"STRONG",{});var p8t=s(nve);Aur=r(p8t,"not"),p8t.forEach(t),yur=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(vee,"A",{href:!0});var u8t=s(RQ);Lur=r(u8t,"from_pretrained()"),u8t.forEach(t),xur=r(vee," to load the model weights."),vee.forEach(t),$ur=i(Pw),T(E7.$$.fragment,Pw),Pw.forEach(t),kur=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(RL.$$.fragment,Cl),Sur=i(Cl),sve=n(Cl,"P",{});var _8t=s(sve);Rur=r(_8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_8t.forEach(t),Pur=i(Cl),nn=n(Cl,"P",{});var Bw=s(nn);Bur=r(Bw,"The model class to instantiate is selected based on the "),lve=n(Bw,"CODE",{});var b8t=s(lve);Iur=r(b8t,"model_type"),b8t.forEach(t),qur=r(Bw,` property of the config object (either
passed as an argument or loaded from `),ive=n(Bw,"CODE",{});var v8t=s(ive);Nur=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),jur=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(Bw,"CODE",{});var F8t=s(dve);Dur=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),Gur=r(Bw,":"),Bw.forEach(t),Our=i(Cl),Me=n(Cl,"UL",{});var Ce=s(Me);C7=n(Ce,"LI",{});var LRe=s(C7);cve=n(LRe,"STRONG",{});var T8t=s(cve);Vur=r(T8t,"bert"),T8t.forEach(t),Xur=r(LRe," \u2014 "),PQ=n(LRe,"A",{href:!0});var M8t=s(PQ);zur=r(M8t,"TFBertLMHeadModel"),M8t.forEach(t),Wur=r(LRe," (BERT model)"),LRe.forEach(t),Qur=i(Ce),w7=n(Ce,"LI",{});var xRe=s(w7);fve=n(xRe,"STRONG",{});var E8t=s(fve);Hur=r(E8t,"camembert"),E8t.forEach(t),Uur=r(xRe," \u2014 "),BQ=n(xRe,"A",{href:!0});var C8t=s(BQ);Jur=r(C8t,"TFCamembertForCausalLM"),C8t.forEach(t),Yur=r(xRe," (CamemBERT model)"),xRe.forEach(t),Kur=i(Ce),A7=n(Ce,"LI",{});var $Re=s(A7);mve=n($Re,"STRONG",{});var w8t=s(mve);Zur=r(w8t,"ctrl"),w8t.forEach(t),e_r=r($Re," \u2014 "),IQ=n($Re,"A",{href:!0});var A8t=s(IQ);o_r=r(A8t,"TFCTRLLMHeadModel"),A8t.forEach(t),r_r=r($Re," (CTRL model)"),$Re.forEach(t),t_r=i(Ce),y7=n(Ce,"LI",{});var kRe=s(y7);gve=n(kRe,"STRONG",{});var y8t=s(gve);a_r=r(y8t,"gpt2"),y8t.forEach(t),n_r=r(kRe," \u2014 "),qQ=n(kRe,"A",{href:!0});var L8t=s(qQ);s_r=r(L8t,"TFGPT2LMHeadModel"),L8t.forEach(t),l_r=r(kRe," (OpenAI GPT-2 model)"),kRe.forEach(t),i_r=i(Ce),L7=n(Ce,"LI",{});var SRe=s(L7);hve=n(SRe,"STRONG",{});var x8t=s(hve);d_r=r(x8t,"gptj"),x8t.forEach(t),c_r=r(SRe," \u2014 "),NQ=n(SRe,"A",{href:!0});var $8t=s(NQ);f_r=r($8t,"TFGPTJForCausalLM"),$8t.forEach(t),m_r=r(SRe," (GPT-J model)"),SRe.forEach(t),g_r=i(Ce),x7=n(Ce,"LI",{});var RRe=s(x7);pve=n(RRe,"STRONG",{});var k8t=s(pve);h_r=r(k8t,"openai-gpt"),k8t.forEach(t),p_r=r(RRe," \u2014 "),jQ=n(RRe,"A",{href:!0});var S8t=s(jQ);u_r=r(S8t,"TFOpenAIGPTLMHeadModel"),S8t.forEach(t),__r=r(RRe," (OpenAI GPT model)"),RRe.forEach(t),b_r=i(Ce),$7=n(Ce,"LI",{});var PRe=s($7);uve=n(PRe,"STRONG",{});var R8t=s(uve);v_r=r(R8t,"rembert"),R8t.forEach(t),F_r=r(PRe," \u2014 "),DQ=n(PRe,"A",{href:!0});var P8t=s(DQ);T_r=r(P8t,"TFRemBertForCausalLM"),P8t.forEach(t),M_r=r(PRe," (RemBERT model)"),PRe.forEach(t),E_r=i(Ce),k7=n(Ce,"LI",{});var BRe=s(k7);_ve=n(BRe,"STRONG",{});var B8t=s(_ve);C_r=r(B8t,"roberta"),B8t.forEach(t),w_r=r(BRe," \u2014 "),GQ=n(BRe,"A",{href:!0});var I8t=s(GQ);A_r=r(I8t,"TFRobertaForCausalLM"),I8t.forEach(t),y_r=r(BRe," (RoBERTa model)"),BRe.forEach(t),L_r=i(Ce),S7=n(Ce,"LI",{});var IRe=s(S7);bve=n(IRe,"STRONG",{});var q8t=s(bve);x_r=r(q8t,"roformer"),q8t.forEach(t),$_r=r(IRe," \u2014 "),OQ=n(IRe,"A",{href:!0});var N8t=s(OQ);k_r=r(N8t,"TFRoFormerForCausalLM"),N8t.forEach(t),S_r=r(IRe," (RoFormer model)"),IRe.forEach(t),R_r=i(Ce),R7=n(Ce,"LI",{});var qRe=s(R7);vve=n(qRe,"STRONG",{});var j8t=s(vve);P_r=r(j8t,"transfo-xl"),j8t.forEach(t),B_r=r(qRe," \u2014 "),VQ=n(qRe,"A",{href:!0});var D8t=s(VQ);I_r=r(D8t,"TFTransfoXLLMHeadModel"),D8t.forEach(t),q_r=r(qRe," (Transformer-XL model)"),qRe.forEach(t),N_r=i(Ce),P7=n(Ce,"LI",{});var NRe=s(P7);Fve=n(NRe,"STRONG",{});var G8t=s(Fve);j_r=r(G8t,"xlm"),G8t.forEach(t),D_r=r(NRe," \u2014 "),XQ=n(NRe,"A",{href:!0});var O8t=s(XQ);G_r=r(O8t,"TFXLMWithLMHeadModel"),O8t.forEach(t),O_r=r(NRe," (XLM model)"),NRe.forEach(t),V_r=i(Ce),B7=n(Ce,"LI",{});var jRe=s(B7);Tve=n(jRe,"STRONG",{});var V8t=s(Tve);X_r=r(V8t,"xlnet"),V8t.forEach(t),z_r=r(jRe," \u2014 "),zQ=n(jRe,"A",{href:!0});var X8t=s(zQ);W_r=r(X8t,"TFXLNetLMHeadModel"),X8t.forEach(t),Q_r=r(jRe," (XLNet model)"),jRe.forEach(t),Ce.forEach(t),H_r=i(Cl),T(I7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),cje=i(f),nc=n(f,"H2",{class:!0});var bGe=s(nc);q7=n(bGe,"A",{id:!0,class:!0,href:!0});var z8t=s(q7);Mve=n(z8t,"SPAN",{});var W8t=s(Mve);T(PL.$$.fragment,W8t),W8t.forEach(t),z8t.forEach(t),U_r=i(bGe),Eve=n(bGe,"SPAN",{});var Q8t=s(Eve);J_r=r(Q8t,"TFAutoModelForImageClassification"),Q8t.forEach(t),bGe.forEach(t),fje=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(BL.$$.fragment,wl),Y_r=i(wl),sc=n(wl,"P",{});var Fee=s(sc);K_r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=n(Fee,"A",{href:!0});var H8t=s(WQ);Z_r=r(H8t,"from_pretrained()"),H8t.forEach(t),e2r=r(Fee," class method or the "),QQ=n(Fee,"A",{href:!0});var U8t=s(QQ);o2r=r(U8t,"from_config()"),U8t.forEach(t),r2r=r(Fee,` class
method.`),Fee.forEach(t),t2r=i(wl),IL=n(wl,"P",{});var vGe=s(IL);a2r=r(vGe,"This class cannot be instantiated directly using "),Cve=n(vGe,"CODE",{});var J8t=s(Cve);n2r=r(J8t,"__init__()"),J8t.forEach(t),s2r=r(vGe," (throws an error)."),vGe.forEach(t),l2r=i(wl),Rt=n(wl,"DIV",{class:!0});var Iw=s(Rt);T(qL.$$.fragment,Iw),i2r=i(Iw),wve=n(Iw,"P",{});var Y8t=s(wve);d2r=r(Y8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y8t.forEach(t),c2r=i(Iw),lc=n(Iw,"P",{});var Tee=s(lc);f2r=r(Tee,`Note:
Loading a model from its configuration file does `),Ave=n(Tee,"STRONG",{});var K8t=s(Ave);m2r=r(K8t,"not"),K8t.forEach(t),g2r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(Tee,"A",{href:!0});var Z8t=s(HQ);h2r=r(Z8t,"from_pretrained()"),Z8t.forEach(t),p2r=r(Tee," to load the model weights."),Tee.forEach(t),u2r=i(Iw),T(N7.$$.fragment,Iw),Iw.forEach(t),_2r=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(NL.$$.fragment,Al),b2r=i(Al),yve=n(Al,"P",{});var e7t=s(yve);v2r=r(e7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e7t.forEach(t),F2r=i(Al),sn=n(Al,"P",{});var qw=s(sn);T2r=r(qw,"The model class to instantiate is selected based on the "),Lve=n(qw,"CODE",{});var o7t=s(Lve);M2r=r(o7t,"model_type"),o7t.forEach(t),E2r=r(qw,` property of the config object (either
passed as an argument or loaded from `),xve=n(qw,"CODE",{});var r7t=s(xve);C2r=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),w2r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(qw,"CODE",{});var t7t=s($ve);A2r=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),y2r=r(qw,":"),qw.forEach(t),L2r=i(Al),ln=n(Al,"UL",{});var Nw=s(ln);j7=n(Nw,"LI",{});var DRe=s(j7);kve=n(DRe,"STRONG",{});var a7t=s(kve);x2r=r(a7t,"convnext"),a7t.forEach(t),$2r=r(DRe," \u2014 "),UQ=n(DRe,"A",{href:!0});var n7t=s(UQ);k2r=r(n7t,"TFConvNextForImageClassification"),n7t.forEach(t),S2r=r(DRe," (ConvNext model)"),DRe.forEach(t),R2r=i(Nw),D7=n(Nw,"LI",{});var GRe=s(D7);Sve=n(GRe,"STRONG",{});var s7t=s(Sve);P2r=r(s7t,"data2vec-vision"),s7t.forEach(t),B2r=r(GRe," \u2014 "),JQ=n(GRe,"A",{href:!0});var l7t=s(JQ);I2r=r(l7t,"TFData2VecVisionForImageClassification"),l7t.forEach(t),q2r=r(GRe," (Data2VecVision model)"),GRe.forEach(t),N2r=i(Nw),G7=n(Nw,"LI",{});var ORe=s(G7);Rve=n(ORe,"STRONG",{});var i7t=s(Rve);j2r=r(i7t,"swin"),i7t.forEach(t),D2r=r(ORe," \u2014 "),YQ=n(ORe,"A",{href:!0});var d7t=s(YQ);G2r=r(d7t,"TFSwinForImageClassification"),d7t.forEach(t),O2r=r(ORe," (Swin model)"),ORe.forEach(t),V2r=i(Nw),O7=n(Nw,"LI",{});var VRe=s(O7);Pve=n(VRe,"STRONG",{});var c7t=s(Pve);X2r=r(c7t,"vit"),c7t.forEach(t),z2r=r(VRe," \u2014 "),KQ=n(VRe,"A",{href:!0});var f7t=s(KQ);W2r=r(f7t,"TFViTForImageClassification"),f7t.forEach(t),Q2r=r(VRe," (ViT model)"),VRe.forEach(t),Nw.forEach(t),H2r=i(Al),T(V7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),mje=i(f),ic=n(f,"H2",{class:!0});var FGe=s(ic);X7=n(FGe,"A",{id:!0,class:!0,href:!0});var m7t=s(X7);Bve=n(m7t,"SPAN",{});var g7t=s(Bve);T(jL.$$.fragment,g7t),g7t.forEach(t),m7t.forEach(t),U2r=i(FGe),Ive=n(FGe,"SPAN",{});var h7t=s(Ive);J2r=r(h7t,"TFAutoModelForMaskedLM"),h7t.forEach(t),FGe.forEach(t),gje=i(f),tr=n(f,"DIV",{class:!0});var yl=s(tr);T(DL.$$.fragment,yl),Y2r=i(yl),dc=n(yl,"P",{});var Mee=s(dc);K2r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=n(Mee,"A",{href:!0});var p7t=s(ZQ);Z2r=r(p7t,"from_pretrained()"),p7t.forEach(t),e1r=r(Mee," class method or the "),eH=n(Mee,"A",{href:!0});var u7t=s(eH);o1r=r(u7t,"from_config()"),u7t.forEach(t),r1r=r(Mee,` class
method.`),Mee.forEach(t),t1r=i(yl),GL=n(yl,"P",{});var TGe=s(GL);a1r=r(TGe,"This class cannot be instantiated directly using "),qve=n(TGe,"CODE",{});var _7t=s(qve);n1r=r(_7t,"__init__()"),_7t.forEach(t),s1r=r(TGe," (throws an error)."),TGe.forEach(t),l1r=i(yl),Pt=n(yl,"DIV",{class:!0});var jw=s(Pt);T(OL.$$.fragment,jw),i1r=i(jw),Nve=n(jw,"P",{});var b7t=s(Nve);d1r=r(b7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b7t.forEach(t),c1r=i(jw),cc=n(jw,"P",{});var Eee=s(cc);f1r=r(Eee,`Note:
Loading a model from its configuration file does `),jve=n(Eee,"STRONG",{});var v7t=s(jve);m1r=r(v7t,"not"),v7t.forEach(t),g1r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Eee,"A",{href:!0});var F7t=s(oH);h1r=r(F7t,"from_pretrained()"),F7t.forEach(t),p1r=r(Eee," to load the model weights."),Eee.forEach(t),u1r=i(jw),T(z7.$$.fragment,jw),jw.forEach(t),_1r=i(yl),kr=n(yl,"DIV",{class:!0});var Ll=s(kr);T(VL.$$.fragment,Ll),b1r=i(Ll),Dve=n(Ll,"P",{});var T7t=s(Dve);v1r=r(T7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T7t.forEach(t),F1r=i(Ll),dn=n(Ll,"P",{});var Dw=s(dn);T1r=r(Dw,"The model class to instantiate is selected based on the "),Gve=n(Dw,"CODE",{});var M7t=s(Gve);M1r=r(M7t,"model_type"),M7t.forEach(t),E1r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Ove=n(Dw,"CODE",{});var E7t=s(Ove);C1r=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),w1r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(Dw,"CODE",{});var C7t=s(Vve);A1r=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),y1r=r(Dw,":"),Dw.forEach(t),L1r=i(Ll),ie=n(Ll,"UL",{});var fe=s(ie);W7=n(fe,"LI",{});var XRe=s(W7);Xve=n(XRe,"STRONG",{});var w7t=s(Xve);x1r=r(w7t,"albert"),w7t.forEach(t),$1r=r(XRe," \u2014 "),rH=n(XRe,"A",{href:!0});var A7t=s(rH);k1r=r(A7t,"TFAlbertForMaskedLM"),A7t.forEach(t),S1r=r(XRe," (ALBERT model)"),XRe.forEach(t),R1r=i(fe),Q7=n(fe,"LI",{});var zRe=s(Q7);zve=n(zRe,"STRONG",{});var y7t=s(zve);P1r=r(y7t,"bert"),y7t.forEach(t),B1r=r(zRe," \u2014 "),tH=n(zRe,"A",{href:!0});var L7t=s(tH);I1r=r(L7t,"TFBertForMaskedLM"),L7t.forEach(t),q1r=r(zRe," (BERT model)"),zRe.forEach(t),N1r=i(fe),H7=n(fe,"LI",{});var WRe=s(H7);Wve=n(WRe,"STRONG",{});var x7t=s(Wve);j1r=r(x7t,"camembert"),x7t.forEach(t),D1r=r(WRe," \u2014 "),aH=n(WRe,"A",{href:!0});var $7t=s(aH);G1r=r($7t,"TFCamembertForMaskedLM"),$7t.forEach(t),O1r=r(WRe," (CamemBERT model)"),WRe.forEach(t),V1r=i(fe),U7=n(fe,"LI",{});var QRe=s(U7);Qve=n(QRe,"STRONG",{});var k7t=s(Qve);X1r=r(k7t,"convbert"),k7t.forEach(t),z1r=r(QRe," \u2014 "),nH=n(QRe,"A",{href:!0});var S7t=s(nH);W1r=r(S7t,"TFConvBertForMaskedLM"),S7t.forEach(t),Q1r=r(QRe," (ConvBERT model)"),QRe.forEach(t),H1r=i(fe),J7=n(fe,"LI",{});var HRe=s(J7);Hve=n(HRe,"STRONG",{});var R7t=s(Hve);U1r=r(R7t,"deberta"),R7t.forEach(t),J1r=r(HRe," \u2014 "),sH=n(HRe,"A",{href:!0});var P7t=s(sH);Y1r=r(P7t,"TFDebertaForMaskedLM"),P7t.forEach(t),K1r=r(HRe," (DeBERTa model)"),HRe.forEach(t),Z1r=i(fe),Y7=n(fe,"LI",{});var URe=s(Y7);Uve=n(URe,"STRONG",{});var B7t=s(Uve);ebr=r(B7t,"deberta-v2"),B7t.forEach(t),obr=r(URe," \u2014 "),lH=n(URe,"A",{href:!0});var I7t=s(lH);rbr=r(I7t,"TFDebertaV2ForMaskedLM"),I7t.forEach(t),tbr=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),abr=i(fe),K7=n(fe,"LI",{});var JRe=s(K7);Jve=n(JRe,"STRONG",{});var q7t=s(Jve);nbr=r(q7t,"distilbert"),q7t.forEach(t),sbr=r(JRe," \u2014 "),iH=n(JRe,"A",{href:!0});var N7t=s(iH);lbr=r(N7t,"TFDistilBertForMaskedLM"),N7t.forEach(t),ibr=r(JRe," (DistilBERT model)"),JRe.forEach(t),dbr=i(fe),Z7=n(fe,"LI",{});var YRe=s(Z7);Yve=n(YRe,"STRONG",{});var j7t=s(Yve);cbr=r(j7t,"electra"),j7t.forEach(t),fbr=r(YRe," \u2014 "),dH=n(YRe,"A",{href:!0});var D7t=s(dH);mbr=r(D7t,"TFElectraForMaskedLM"),D7t.forEach(t),gbr=r(YRe," (ELECTRA model)"),YRe.forEach(t),hbr=i(fe),eM=n(fe,"LI",{});var KRe=s(eM);Kve=n(KRe,"STRONG",{});var G7t=s(Kve);pbr=r(G7t,"flaubert"),G7t.forEach(t),ubr=r(KRe," \u2014 "),cH=n(KRe,"A",{href:!0});var O7t=s(cH);_br=r(O7t,"TFFlaubertWithLMHeadModel"),O7t.forEach(t),bbr=r(KRe," (FlauBERT model)"),KRe.forEach(t),vbr=i(fe),oM=n(fe,"LI",{});var ZRe=s(oM);Zve=n(ZRe,"STRONG",{});var V7t=s(Zve);Fbr=r(V7t,"funnel"),V7t.forEach(t),Tbr=r(ZRe," \u2014 "),fH=n(ZRe,"A",{href:!0});var X7t=s(fH);Mbr=r(X7t,"TFFunnelForMaskedLM"),X7t.forEach(t),Ebr=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),Cbr=i(fe),rM=n(fe,"LI",{});var ePe=s(rM);eFe=n(ePe,"STRONG",{});var z7t=s(eFe);wbr=r(z7t,"layoutlm"),z7t.forEach(t),Abr=r(ePe," \u2014 "),mH=n(ePe,"A",{href:!0});var W7t=s(mH);ybr=r(W7t,"TFLayoutLMForMaskedLM"),W7t.forEach(t),Lbr=r(ePe," (LayoutLM model)"),ePe.forEach(t),xbr=i(fe),tM=n(fe,"LI",{});var oPe=s(tM);oFe=n(oPe,"STRONG",{});var Q7t=s(oFe);$br=r(Q7t,"longformer"),Q7t.forEach(t),kbr=r(oPe," \u2014 "),gH=n(oPe,"A",{href:!0});var H7t=s(gH);Sbr=r(H7t,"TFLongformerForMaskedLM"),H7t.forEach(t),Rbr=r(oPe," (Longformer model)"),oPe.forEach(t),Pbr=i(fe),aM=n(fe,"LI",{});var rPe=s(aM);rFe=n(rPe,"STRONG",{});var U7t=s(rFe);Bbr=r(U7t,"mobilebert"),U7t.forEach(t),Ibr=r(rPe," \u2014 "),hH=n(rPe,"A",{href:!0});var J7t=s(hH);qbr=r(J7t,"TFMobileBertForMaskedLM"),J7t.forEach(t),Nbr=r(rPe," (MobileBERT model)"),rPe.forEach(t),jbr=i(fe),nM=n(fe,"LI",{});var tPe=s(nM);tFe=n(tPe,"STRONG",{});var Y7t=s(tFe);Dbr=r(Y7t,"mpnet"),Y7t.forEach(t),Gbr=r(tPe," \u2014 "),pH=n(tPe,"A",{href:!0});var K7t=s(pH);Obr=r(K7t,"TFMPNetForMaskedLM"),K7t.forEach(t),Vbr=r(tPe," (MPNet model)"),tPe.forEach(t),Xbr=i(fe),sM=n(fe,"LI",{});var aPe=s(sM);aFe=n(aPe,"STRONG",{});var Z7t=s(aFe);zbr=r(Z7t,"rembert"),Z7t.forEach(t),Wbr=r(aPe," \u2014 "),uH=n(aPe,"A",{href:!0});var eMt=s(uH);Qbr=r(eMt,"TFRemBertForMaskedLM"),eMt.forEach(t),Hbr=r(aPe," (RemBERT model)"),aPe.forEach(t),Ubr=i(fe),lM=n(fe,"LI",{});var nPe=s(lM);nFe=n(nPe,"STRONG",{});var oMt=s(nFe);Jbr=r(oMt,"roberta"),oMt.forEach(t),Ybr=r(nPe," \u2014 "),_H=n(nPe,"A",{href:!0});var rMt=s(_H);Kbr=r(rMt,"TFRobertaForMaskedLM"),rMt.forEach(t),Zbr=r(nPe," (RoBERTa model)"),nPe.forEach(t),evr=i(fe),iM=n(fe,"LI",{});var sPe=s(iM);sFe=n(sPe,"STRONG",{});var tMt=s(sFe);ovr=r(tMt,"roformer"),tMt.forEach(t),rvr=r(sPe," \u2014 "),bH=n(sPe,"A",{href:!0});var aMt=s(bH);tvr=r(aMt,"TFRoFormerForMaskedLM"),aMt.forEach(t),avr=r(sPe," (RoFormer model)"),sPe.forEach(t),nvr=i(fe),dM=n(fe,"LI",{});var lPe=s(dM);lFe=n(lPe,"STRONG",{});var nMt=s(lFe);svr=r(nMt,"tapas"),nMt.forEach(t),lvr=r(lPe," \u2014 "),vH=n(lPe,"A",{href:!0});var sMt=s(vH);ivr=r(sMt,"TFTapasForMaskedLM"),sMt.forEach(t),dvr=r(lPe," (TAPAS model)"),lPe.forEach(t),cvr=i(fe),cM=n(fe,"LI",{});var iPe=s(cM);iFe=n(iPe,"STRONG",{});var lMt=s(iFe);fvr=r(lMt,"xlm"),lMt.forEach(t),mvr=r(iPe," \u2014 "),FH=n(iPe,"A",{href:!0});var iMt=s(FH);gvr=r(iMt,"TFXLMWithLMHeadModel"),iMt.forEach(t),hvr=r(iPe," (XLM model)"),iPe.forEach(t),pvr=i(fe),fM=n(fe,"LI",{});var dPe=s(fM);dFe=n(dPe,"STRONG",{});var dMt=s(dFe);uvr=r(dMt,"xlm-roberta"),dMt.forEach(t),_vr=r(dPe," \u2014 "),TH=n(dPe,"A",{href:!0});var cMt=s(TH);bvr=r(cMt,"TFXLMRobertaForMaskedLM"),cMt.forEach(t),vvr=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),fe.forEach(t),Fvr=i(Ll),T(mM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),hje=i(f),fc=n(f,"H2",{class:!0});var MGe=s(fc);gM=n(MGe,"A",{id:!0,class:!0,href:!0});var fMt=s(gM);cFe=n(fMt,"SPAN",{});var mMt=s(cFe);T(XL.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),Tvr=i(MGe),fFe=n(MGe,"SPAN",{});var gMt=s(fFe);Mvr=r(gMt,"TFAutoModelForSeq2SeqLM"),gMt.forEach(t),MGe.forEach(t),pje=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(zL.$$.fragment,xl),Evr=i(xl),mc=n(xl,"P",{});var Cee=s(mc);Cvr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=n(Cee,"A",{href:!0});var hMt=s(MH);wvr=r(hMt,"from_pretrained()"),hMt.forEach(t),Avr=r(Cee," class method or the "),EH=n(Cee,"A",{href:!0});var pMt=s(EH);yvr=r(pMt,"from_config()"),pMt.forEach(t),Lvr=r(Cee,` class
method.`),Cee.forEach(t),xvr=i(xl),WL=n(xl,"P",{});var EGe=s(WL);$vr=r(EGe,"This class cannot be instantiated directly using "),mFe=n(EGe,"CODE",{});var uMt=s(mFe);kvr=r(uMt,"__init__()"),uMt.forEach(t),Svr=r(EGe," (throws an error)."),EGe.forEach(t),Rvr=i(xl),Bt=n(xl,"DIV",{class:!0});var Gw=s(Bt);T(QL.$$.fragment,Gw),Pvr=i(Gw),gFe=n(Gw,"P",{});var _Mt=s(gFe);Bvr=r(_Mt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Mt.forEach(t),Ivr=i(Gw),gc=n(Gw,"P",{});var wee=s(gc);qvr=r(wee,`Note:
Loading a model from its configuration file does `),hFe=n(wee,"STRONG",{});var bMt=s(hFe);Nvr=r(bMt,"not"),bMt.forEach(t),jvr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(wee,"A",{href:!0});var vMt=s(CH);Dvr=r(vMt,"from_pretrained()"),vMt.forEach(t),Gvr=r(wee," to load the model weights."),wee.forEach(t),Ovr=i(Gw),T(hM.$$.fragment,Gw),Gw.forEach(t),Vvr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(HL.$$.fragment,$l),Xvr=i($l),pFe=n($l,"P",{});var FMt=s(pFe);zvr=r(FMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FMt.forEach(t),Wvr=i($l),cn=n($l,"P",{});var Ow=s(cn);Qvr=r(Ow,"The model class to instantiate is selected based on the "),uFe=n(Ow,"CODE",{});var TMt=s(uFe);Hvr=r(TMt,"model_type"),TMt.forEach(t),Uvr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(Ow,"CODE",{});var MMt=s(_Fe);Jvr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),Yvr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(Ow,"CODE",{});var EMt=s(bFe);Kvr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),Zvr=r(Ow,":"),Ow.forEach(t),eFr=i($l),ye=n($l,"UL",{});var Be=s(ye);pM=n(Be,"LI",{});var cPe=s(pM);vFe=n(cPe,"STRONG",{});var CMt=s(vFe);oFr=r(CMt,"bart"),CMt.forEach(t),rFr=r(cPe," \u2014 "),wH=n(cPe,"A",{href:!0});var wMt=s(wH);tFr=r(wMt,"TFBartForConditionalGeneration"),wMt.forEach(t),aFr=r(cPe," (BART model)"),cPe.forEach(t),nFr=i(Be),uM=n(Be,"LI",{});var fPe=s(uM);FFe=n(fPe,"STRONG",{});var AMt=s(FFe);sFr=r(AMt,"blenderbot"),AMt.forEach(t),lFr=r(fPe," \u2014 "),AH=n(fPe,"A",{href:!0});var yMt=s(AH);iFr=r(yMt,"TFBlenderbotForConditionalGeneration"),yMt.forEach(t),dFr=r(fPe," (Blenderbot model)"),fPe.forEach(t),cFr=i(Be),_M=n(Be,"LI",{});var mPe=s(_M);TFe=n(mPe,"STRONG",{});var LMt=s(TFe);fFr=r(LMt,"blenderbot-small"),LMt.forEach(t),mFr=r(mPe," \u2014 "),yH=n(mPe,"A",{href:!0});var xMt=s(yH);gFr=r(xMt,"TFBlenderbotSmallForConditionalGeneration"),xMt.forEach(t),hFr=r(mPe," (BlenderbotSmall model)"),mPe.forEach(t),pFr=i(Be),bM=n(Be,"LI",{});var gPe=s(bM);MFe=n(gPe,"STRONG",{});var $Mt=s(MFe);uFr=r($Mt,"encoder-decoder"),$Mt.forEach(t),_Fr=r(gPe," \u2014 "),LH=n(gPe,"A",{href:!0});var kMt=s(LH);bFr=r(kMt,"TFEncoderDecoderModel"),kMt.forEach(t),vFr=r(gPe," (Encoder decoder model)"),gPe.forEach(t),FFr=i(Be),vM=n(Be,"LI",{});var hPe=s(vM);EFe=n(hPe,"STRONG",{});var SMt=s(EFe);TFr=r(SMt,"led"),SMt.forEach(t),MFr=r(hPe," \u2014 "),xH=n(hPe,"A",{href:!0});var RMt=s(xH);EFr=r(RMt,"TFLEDForConditionalGeneration"),RMt.forEach(t),CFr=r(hPe," (LED model)"),hPe.forEach(t),wFr=i(Be),FM=n(Be,"LI",{});var pPe=s(FM);CFe=n(pPe,"STRONG",{});var PMt=s(CFe);AFr=r(PMt,"marian"),PMt.forEach(t),yFr=r(pPe," \u2014 "),$H=n(pPe,"A",{href:!0});var BMt=s($H);LFr=r(BMt,"TFMarianMTModel"),BMt.forEach(t),xFr=r(pPe," (Marian model)"),pPe.forEach(t),$Fr=i(Be),TM=n(Be,"LI",{});var uPe=s(TM);wFe=n(uPe,"STRONG",{});var IMt=s(wFe);kFr=r(IMt,"mbart"),IMt.forEach(t),SFr=r(uPe," \u2014 "),kH=n(uPe,"A",{href:!0});var qMt=s(kH);RFr=r(qMt,"TFMBartForConditionalGeneration"),qMt.forEach(t),PFr=r(uPe," (mBART model)"),uPe.forEach(t),BFr=i(Be),MM=n(Be,"LI",{});var _Pe=s(MM);AFe=n(_Pe,"STRONG",{});var NMt=s(AFe);IFr=r(NMt,"mt5"),NMt.forEach(t),qFr=r(_Pe," \u2014 "),SH=n(_Pe,"A",{href:!0});var jMt=s(SH);NFr=r(jMt,"TFMT5ForConditionalGeneration"),jMt.forEach(t),jFr=r(_Pe," (mT5 model)"),_Pe.forEach(t),DFr=i(Be),EM=n(Be,"LI",{});var bPe=s(EM);yFe=n(bPe,"STRONG",{});var DMt=s(yFe);GFr=r(DMt,"pegasus"),DMt.forEach(t),OFr=r(bPe," \u2014 "),RH=n(bPe,"A",{href:!0});var GMt=s(RH);VFr=r(GMt,"TFPegasusForConditionalGeneration"),GMt.forEach(t),XFr=r(bPe," (Pegasus model)"),bPe.forEach(t),zFr=i(Be),CM=n(Be,"LI",{});var vPe=s(CM);LFe=n(vPe,"STRONG",{});var OMt=s(LFe);WFr=r(OMt,"t5"),OMt.forEach(t),QFr=r(vPe," \u2014 "),PH=n(vPe,"A",{href:!0});var VMt=s(PH);HFr=r(VMt,"TFT5ForConditionalGeneration"),VMt.forEach(t),UFr=r(vPe," (T5 model)"),vPe.forEach(t),Be.forEach(t),JFr=i($l),T(wM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),uje=i(f),hc=n(f,"H2",{class:!0});var CGe=s(hc);AM=n(CGe,"A",{id:!0,class:!0,href:!0});var XMt=s(AM);xFe=n(XMt,"SPAN",{});var zMt=s(xFe);T(UL.$$.fragment,zMt),zMt.forEach(t),XMt.forEach(t),YFr=i(CGe),$Fe=n(CGe,"SPAN",{});var WMt=s($Fe);KFr=r(WMt,"TFAutoModelForSequenceClassification"),WMt.forEach(t),CGe.forEach(t),_je=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(JL.$$.fragment,kl),ZFr=i(kl),pc=n(kl,"P",{});var Aee=s(pc);e6r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=n(Aee,"A",{href:!0});var QMt=s(BH);o6r=r(QMt,"from_pretrained()"),QMt.forEach(t),r6r=r(Aee," class method or the "),IH=n(Aee,"A",{href:!0});var HMt=s(IH);t6r=r(HMt,"from_config()"),HMt.forEach(t),a6r=r(Aee,` class
method.`),Aee.forEach(t),n6r=i(kl),YL=n(kl,"P",{});var wGe=s(YL);s6r=r(wGe,"This class cannot be instantiated directly using "),kFe=n(wGe,"CODE",{});var UMt=s(kFe);l6r=r(UMt,"__init__()"),UMt.forEach(t),i6r=r(wGe," (throws an error)."),wGe.forEach(t),d6r=i(kl),It=n(kl,"DIV",{class:!0});var Vw=s(It);T(KL.$$.fragment,Vw),c6r=i(Vw),SFe=n(Vw,"P",{});var JMt=s(SFe);f6r=r(JMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JMt.forEach(t),m6r=i(Vw),uc=n(Vw,"P",{});var yee=s(uc);g6r=r(yee,`Note:
Loading a model from its configuration file does `),RFe=n(yee,"STRONG",{});var YMt=s(RFe);h6r=r(YMt,"not"),YMt.forEach(t),p6r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(yee,"A",{href:!0});var KMt=s(qH);u6r=r(KMt,"from_pretrained()"),KMt.forEach(t),_6r=r(yee," to load the model weights."),yee.forEach(t),b6r=i(Vw),T(yM.$$.fragment,Vw),Vw.forEach(t),v6r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(ZL.$$.fragment,Sl),F6r=i(Sl),PFe=n(Sl,"P",{});var ZMt=s(PFe);T6r=r(ZMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZMt.forEach(t),M6r=i(Sl),fn=n(Sl,"P",{});var Xw=s(fn);E6r=r(Xw,"The model class to instantiate is selected based on the "),BFe=n(Xw,"CODE",{});var e4t=s(BFe);C6r=r(e4t,"model_type"),e4t.forEach(t),w6r=r(Xw,` property of the config object (either
passed as an argument or loaded from `),IFe=n(Xw,"CODE",{});var o4t=s(IFe);A6r=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),y6r=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(Xw,"CODE",{});var r4t=s(qFe);L6r=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),x6r=r(Xw,":"),Xw.forEach(t),$6r=i(Sl),re=n(Sl,"UL",{});var ae=s(re);LM=n(ae,"LI",{});var FPe=s(LM);NFe=n(FPe,"STRONG",{});var t4t=s(NFe);k6r=r(t4t,"albert"),t4t.forEach(t),S6r=r(FPe," \u2014 "),NH=n(FPe,"A",{href:!0});var a4t=s(NH);R6r=r(a4t,"TFAlbertForSequenceClassification"),a4t.forEach(t),P6r=r(FPe," (ALBERT model)"),FPe.forEach(t),B6r=i(ae),xM=n(ae,"LI",{});var TPe=s(xM);jFe=n(TPe,"STRONG",{});var n4t=s(jFe);I6r=r(n4t,"bert"),n4t.forEach(t),q6r=r(TPe," \u2014 "),jH=n(TPe,"A",{href:!0});var s4t=s(jH);N6r=r(s4t,"TFBertForSequenceClassification"),s4t.forEach(t),j6r=r(TPe," (BERT model)"),TPe.forEach(t),D6r=i(ae),$M=n(ae,"LI",{});var MPe=s($M);DFe=n(MPe,"STRONG",{});var l4t=s(DFe);G6r=r(l4t,"camembert"),l4t.forEach(t),O6r=r(MPe," \u2014 "),DH=n(MPe,"A",{href:!0});var i4t=s(DH);V6r=r(i4t,"TFCamembertForSequenceClassification"),i4t.forEach(t),X6r=r(MPe," (CamemBERT model)"),MPe.forEach(t),z6r=i(ae),kM=n(ae,"LI",{});var EPe=s(kM);GFe=n(EPe,"STRONG",{});var d4t=s(GFe);W6r=r(d4t,"convbert"),d4t.forEach(t),Q6r=r(EPe," \u2014 "),GH=n(EPe,"A",{href:!0});var c4t=s(GH);H6r=r(c4t,"TFConvBertForSequenceClassification"),c4t.forEach(t),U6r=r(EPe," (ConvBERT model)"),EPe.forEach(t),J6r=i(ae),SM=n(ae,"LI",{});var CPe=s(SM);OFe=n(CPe,"STRONG",{});var f4t=s(OFe);Y6r=r(f4t,"ctrl"),f4t.forEach(t),K6r=r(CPe," \u2014 "),OH=n(CPe,"A",{href:!0});var m4t=s(OH);Z6r=r(m4t,"TFCTRLForSequenceClassification"),m4t.forEach(t),eTr=r(CPe," (CTRL model)"),CPe.forEach(t),oTr=i(ae),RM=n(ae,"LI",{});var wPe=s(RM);VFe=n(wPe,"STRONG",{});var g4t=s(VFe);rTr=r(g4t,"deberta"),g4t.forEach(t),tTr=r(wPe," \u2014 "),VH=n(wPe,"A",{href:!0});var h4t=s(VH);aTr=r(h4t,"TFDebertaForSequenceClassification"),h4t.forEach(t),nTr=r(wPe," (DeBERTa model)"),wPe.forEach(t),sTr=i(ae),PM=n(ae,"LI",{});var APe=s(PM);XFe=n(APe,"STRONG",{});var p4t=s(XFe);lTr=r(p4t,"deberta-v2"),p4t.forEach(t),iTr=r(APe," \u2014 "),XH=n(APe,"A",{href:!0});var u4t=s(XH);dTr=r(u4t,"TFDebertaV2ForSequenceClassification"),u4t.forEach(t),cTr=r(APe," (DeBERTa-v2 model)"),APe.forEach(t),fTr=i(ae),BM=n(ae,"LI",{});var yPe=s(BM);zFe=n(yPe,"STRONG",{});var _4t=s(zFe);mTr=r(_4t,"distilbert"),_4t.forEach(t),gTr=r(yPe," \u2014 "),zH=n(yPe,"A",{href:!0});var b4t=s(zH);hTr=r(b4t,"TFDistilBertForSequenceClassification"),b4t.forEach(t),pTr=r(yPe," (DistilBERT model)"),yPe.forEach(t),uTr=i(ae),IM=n(ae,"LI",{});var LPe=s(IM);WFe=n(LPe,"STRONG",{});var v4t=s(WFe);_Tr=r(v4t,"electra"),v4t.forEach(t),bTr=r(LPe," \u2014 "),WH=n(LPe,"A",{href:!0});var F4t=s(WH);vTr=r(F4t,"TFElectraForSequenceClassification"),F4t.forEach(t),FTr=r(LPe," (ELECTRA model)"),LPe.forEach(t),TTr=i(ae),qM=n(ae,"LI",{});var xPe=s(qM);QFe=n(xPe,"STRONG",{});var T4t=s(QFe);MTr=r(T4t,"flaubert"),T4t.forEach(t),ETr=r(xPe," \u2014 "),QH=n(xPe,"A",{href:!0});var M4t=s(QH);CTr=r(M4t,"TFFlaubertForSequenceClassification"),M4t.forEach(t),wTr=r(xPe," (FlauBERT model)"),xPe.forEach(t),ATr=i(ae),NM=n(ae,"LI",{});var $Pe=s(NM);HFe=n($Pe,"STRONG",{});var E4t=s(HFe);yTr=r(E4t,"funnel"),E4t.forEach(t),LTr=r($Pe," \u2014 "),HH=n($Pe,"A",{href:!0});var C4t=s(HH);xTr=r(C4t,"TFFunnelForSequenceClassification"),C4t.forEach(t),$Tr=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),kTr=i(ae),jM=n(ae,"LI",{});var kPe=s(jM);UFe=n(kPe,"STRONG",{});var w4t=s(UFe);STr=r(w4t,"gpt2"),w4t.forEach(t),RTr=r(kPe," \u2014 "),UH=n(kPe,"A",{href:!0});var A4t=s(UH);PTr=r(A4t,"TFGPT2ForSequenceClassification"),A4t.forEach(t),BTr=r(kPe," (OpenAI GPT-2 model)"),kPe.forEach(t),ITr=i(ae),DM=n(ae,"LI",{});var SPe=s(DM);JFe=n(SPe,"STRONG",{});var y4t=s(JFe);qTr=r(y4t,"gptj"),y4t.forEach(t),NTr=r(SPe," \u2014 "),JH=n(SPe,"A",{href:!0});var L4t=s(JH);jTr=r(L4t,"TFGPTJForSequenceClassification"),L4t.forEach(t),DTr=r(SPe," (GPT-J model)"),SPe.forEach(t),GTr=i(ae),GM=n(ae,"LI",{});var RPe=s(GM);YFe=n(RPe,"STRONG",{});var x4t=s(YFe);OTr=r(x4t,"layoutlm"),x4t.forEach(t),VTr=r(RPe," \u2014 "),YH=n(RPe,"A",{href:!0});var $4t=s(YH);XTr=r($4t,"TFLayoutLMForSequenceClassification"),$4t.forEach(t),zTr=r(RPe," (LayoutLM model)"),RPe.forEach(t),WTr=i(ae),OM=n(ae,"LI",{});var PPe=s(OM);KFe=n(PPe,"STRONG",{});var k4t=s(KFe);QTr=r(k4t,"longformer"),k4t.forEach(t),HTr=r(PPe," \u2014 "),KH=n(PPe,"A",{href:!0});var S4t=s(KH);UTr=r(S4t,"TFLongformerForSequenceClassification"),S4t.forEach(t),JTr=r(PPe," (Longformer model)"),PPe.forEach(t),YTr=i(ae),VM=n(ae,"LI",{});var BPe=s(VM);ZFe=n(BPe,"STRONG",{});var R4t=s(ZFe);KTr=r(R4t,"mobilebert"),R4t.forEach(t),ZTr=r(BPe," \u2014 "),ZH=n(BPe,"A",{href:!0});var P4t=s(ZH);e8r=r(P4t,"TFMobileBertForSequenceClassification"),P4t.forEach(t),o8r=r(BPe," (MobileBERT model)"),BPe.forEach(t),r8r=i(ae),XM=n(ae,"LI",{});var IPe=s(XM);e6e=n(IPe,"STRONG",{});var B4t=s(e6e);t8r=r(B4t,"mpnet"),B4t.forEach(t),a8r=r(IPe," \u2014 "),eU=n(IPe,"A",{href:!0});var I4t=s(eU);n8r=r(I4t,"TFMPNetForSequenceClassification"),I4t.forEach(t),s8r=r(IPe," (MPNet model)"),IPe.forEach(t),l8r=i(ae),zM=n(ae,"LI",{});var qPe=s(zM);o6e=n(qPe,"STRONG",{});var q4t=s(o6e);i8r=r(q4t,"openai-gpt"),q4t.forEach(t),d8r=r(qPe," \u2014 "),oU=n(qPe,"A",{href:!0});var N4t=s(oU);c8r=r(N4t,"TFOpenAIGPTForSequenceClassification"),N4t.forEach(t),f8r=r(qPe," (OpenAI GPT model)"),qPe.forEach(t),m8r=i(ae),WM=n(ae,"LI",{});var NPe=s(WM);r6e=n(NPe,"STRONG",{});var j4t=s(r6e);g8r=r(j4t,"rembert"),j4t.forEach(t),h8r=r(NPe," \u2014 "),rU=n(NPe,"A",{href:!0});var D4t=s(rU);p8r=r(D4t,"TFRemBertForSequenceClassification"),D4t.forEach(t),u8r=r(NPe," (RemBERT model)"),NPe.forEach(t),_8r=i(ae),QM=n(ae,"LI",{});var jPe=s(QM);t6e=n(jPe,"STRONG",{});var G4t=s(t6e);b8r=r(G4t,"roberta"),G4t.forEach(t),v8r=r(jPe," \u2014 "),tU=n(jPe,"A",{href:!0});var O4t=s(tU);F8r=r(O4t,"TFRobertaForSequenceClassification"),O4t.forEach(t),T8r=r(jPe," (RoBERTa model)"),jPe.forEach(t),M8r=i(ae),HM=n(ae,"LI",{});var DPe=s(HM);a6e=n(DPe,"STRONG",{});var V4t=s(a6e);E8r=r(V4t,"roformer"),V4t.forEach(t),C8r=r(DPe," \u2014 "),aU=n(DPe,"A",{href:!0});var X4t=s(aU);w8r=r(X4t,"TFRoFormerForSequenceClassification"),X4t.forEach(t),A8r=r(DPe," (RoFormer model)"),DPe.forEach(t),y8r=i(ae),UM=n(ae,"LI",{});var GPe=s(UM);n6e=n(GPe,"STRONG",{});var z4t=s(n6e);L8r=r(z4t,"tapas"),z4t.forEach(t),x8r=r(GPe," \u2014 "),nU=n(GPe,"A",{href:!0});var W4t=s(nU);$8r=r(W4t,"TFTapasForSequenceClassification"),W4t.forEach(t),k8r=r(GPe," (TAPAS model)"),GPe.forEach(t),S8r=i(ae),JM=n(ae,"LI",{});var OPe=s(JM);s6e=n(OPe,"STRONG",{});var Q4t=s(s6e);R8r=r(Q4t,"transfo-xl"),Q4t.forEach(t),P8r=r(OPe," \u2014 "),sU=n(OPe,"A",{href:!0});var H4t=s(sU);B8r=r(H4t,"TFTransfoXLForSequenceClassification"),H4t.forEach(t),I8r=r(OPe," (Transformer-XL model)"),OPe.forEach(t),q8r=i(ae),YM=n(ae,"LI",{});var VPe=s(YM);l6e=n(VPe,"STRONG",{});var U4t=s(l6e);N8r=r(U4t,"xlm"),U4t.forEach(t),j8r=r(VPe," \u2014 "),lU=n(VPe,"A",{href:!0});var J4t=s(lU);D8r=r(J4t,"TFXLMForSequenceClassification"),J4t.forEach(t),G8r=r(VPe," (XLM model)"),VPe.forEach(t),O8r=i(ae),KM=n(ae,"LI",{});var XPe=s(KM);i6e=n(XPe,"STRONG",{});var Y4t=s(i6e);V8r=r(Y4t,"xlm-roberta"),Y4t.forEach(t),X8r=r(XPe," \u2014 "),iU=n(XPe,"A",{href:!0});var K4t=s(iU);z8r=r(K4t,"TFXLMRobertaForSequenceClassification"),K4t.forEach(t),W8r=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),Q8r=i(ae),ZM=n(ae,"LI",{});var zPe=s(ZM);d6e=n(zPe,"STRONG",{});var Z4t=s(d6e);H8r=r(Z4t,"xlnet"),Z4t.forEach(t),U8r=r(zPe," \u2014 "),dU=n(zPe,"A",{href:!0});var eEt=s(dU);J8r=r(eEt,"TFXLNetForSequenceClassification"),eEt.forEach(t),Y8r=r(zPe," (XLNet model)"),zPe.forEach(t),ae.forEach(t),K8r=i(Sl),T(e4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),bje=i(f),_c=n(f,"H2",{class:!0});var AGe=s(_c);o4=n(AGe,"A",{id:!0,class:!0,href:!0});var oEt=s(o4);c6e=n(oEt,"SPAN",{});var rEt=s(c6e);T(ex.$$.fragment,rEt),rEt.forEach(t),oEt.forEach(t),Z8r=i(AGe),f6e=n(AGe,"SPAN",{});var tEt=s(f6e);e7r=r(tEt,"TFAutoModelForMultipleChoice"),tEt.forEach(t),AGe.forEach(t),vje=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(ox.$$.fragment,Rl),o7r=i(Rl),bc=n(Rl,"P",{});var Lee=s(bc);r7r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=n(Lee,"A",{href:!0});var aEt=s(cU);t7r=r(aEt,"from_pretrained()"),aEt.forEach(t),a7r=r(Lee," class method or the "),fU=n(Lee,"A",{href:!0});var nEt=s(fU);n7r=r(nEt,"from_config()"),nEt.forEach(t),s7r=r(Lee,` class
method.`),Lee.forEach(t),l7r=i(Rl),rx=n(Rl,"P",{});var yGe=s(rx);i7r=r(yGe,"This class cannot be instantiated directly using "),m6e=n(yGe,"CODE",{});var sEt=s(m6e);d7r=r(sEt,"__init__()"),sEt.forEach(t),c7r=r(yGe," (throws an error)."),yGe.forEach(t),f7r=i(Rl),qt=n(Rl,"DIV",{class:!0});var zw=s(qt);T(tx.$$.fragment,zw),m7r=i(zw),g6e=n(zw,"P",{});var lEt=s(g6e);g7r=r(lEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lEt.forEach(t),h7r=i(zw),vc=n(zw,"P",{});var xee=s(vc);p7r=r(xee,`Note:
Loading a model from its configuration file does `),h6e=n(xee,"STRONG",{});var iEt=s(h6e);u7r=r(iEt,"not"),iEt.forEach(t),_7r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(xee,"A",{href:!0});var dEt=s(mU);b7r=r(dEt,"from_pretrained()"),dEt.forEach(t),v7r=r(xee," to load the model weights."),xee.forEach(t),F7r=i(zw),T(r4.$$.fragment,zw),zw.forEach(t),T7r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(ax.$$.fragment,Pl),M7r=i(Pl),p6e=n(Pl,"P",{});var cEt=s(p6e);E7r=r(cEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cEt.forEach(t),C7r=i(Pl),mn=n(Pl,"P",{});var Ww=s(mn);w7r=r(Ww,"The model class to instantiate is selected based on the "),u6e=n(Ww,"CODE",{});var fEt=s(u6e);A7r=r(fEt,"model_type"),fEt.forEach(t),y7r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),_6e=n(Ww,"CODE",{});var mEt=s(_6e);L7r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),x7r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(Ww,"CODE",{});var gEt=s(b6e);$7r=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),k7r=r(Ww,":"),Ww.forEach(t),S7r=i(Pl),he=n(Pl,"UL",{});var _e=s(he);t4=n(_e,"LI",{});var WPe=s(t4);v6e=n(WPe,"STRONG",{});var hEt=s(v6e);R7r=r(hEt,"albert"),hEt.forEach(t),P7r=r(WPe," \u2014 "),gU=n(WPe,"A",{href:!0});var pEt=s(gU);B7r=r(pEt,"TFAlbertForMultipleChoice"),pEt.forEach(t),I7r=r(WPe," (ALBERT model)"),WPe.forEach(t),q7r=i(_e),a4=n(_e,"LI",{});var QPe=s(a4);F6e=n(QPe,"STRONG",{});var uEt=s(F6e);N7r=r(uEt,"bert"),uEt.forEach(t),j7r=r(QPe," \u2014 "),hU=n(QPe,"A",{href:!0});var _Et=s(hU);D7r=r(_Et,"TFBertForMultipleChoice"),_Et.forEach(t),G7r=r(QPe," (BERT model)"),QPe.forEach(t),O7r=i(_e),n4=n(_e,"LI",{});var HPe=s(n4);T6e=n(HPe,"STRONG",{});var bEt=s(T6e);V7r=r(bEt,"camembert"),bEt.forEach(t),X7r=r(HPe," \u2014 "),pU=n(HPe,"A",{href:!0});var vEt=s(pU);z7r=r(vEt,"TFCamembertForMultipleChoice"),vEt.forEach(t),W7r=r(HPe," (CamemBERT model)"),HPe.forEach(t),Q7r=i(_e),s4=n(_e,"LI",{});var UPe=s(s4);M6e=n(UPe,"STRONG",{});var FEt=s(M6e);H7r=r(FEt,"convbert"),FEt.forEach(t),U7r=r(UPe," \u2014 "),uU=n(UPe,"A",{href:!0});var TEt=s(uU);J7r=r(TEt,"TFConvBertForMultipleChoice"),TEt.forEach(t),Y7r=r(UPe," (ConvBERT model)"),UPe.forEach(t),K7r=i(_e),l4=n(_e,"LI",{});var JPe=s(l4);E6e=n(JPe,"STRONG",{});var MEt=s(E6e);Z7r=r(MEt,"distilbert"),MEt.forEach(t),eMr=r(JPe," \u2014 "),_U=n(JPe,"A",{href:!0});var EEt=s(_U);oMr=r(EEt,"TFDistilBertForMultipleChoice"),EEt.forEach(t),rMr=r(JPe," (DistilBERT model)"),JPe.forEach(t),tMr=i(_e),i4=n(_e,"LI",{});var YPe=s(i4);C6e=n(YPe,"STRONG",{});var CEt=s(C6e);aMr=r(CEt,"electra"),CEt.forEach(t),nMr=r(YPe," \u2014 "),bU=n(YPe,"A",{href:!0});var wEt=s(bU);sMr=r(wEt,"TFElectraForMultipleChoice"),wEt.forEach(t),lMr=r(YPe," (ELECTRA model)"),YPe.forEach(t),iMr=i(_e),d4=n(_e,"LI",{});var KPe=s(d4);w6e=n(KPe,"STRONG",{});var AEt=s(w6e);dMr=r(AEt,"flaubert"),AEt.forEach(t),cMr=r(KPe," \u2014 "),vU=n(KPe,"A",{href:!0});var yEt=s(vU);fMr=r(yEt,"TFFlaubertForMultipleChoice"),yEt.forEach(t),mMr=r(KPe," (FlauBERT model)"),KPe.forEach(t),gMr=i(_e),c4=n(_e,"LI",{});var ZPe=s(c4);A6e=n(ZPe,"STRONG",{});var LEt=s(A6e);hMr=r(LEt,"funnel"),LEt.forEach(t),pMr=r(ZPe," \u2014 "),FU=n(ZPe,"A",{href:!0});var xEt=s(FU);uMr=r(xEt,"TFFunnelForMultipleChoice"),xEt.forEach(t),_Mr=r(ZPe," (Funnel Transformer model)"),ZPe.forEach(t),bMr=i(_e),f4=n(_e,"LI",{});var eBe=s(f4);y6e=n(eBe,"STRONG",{});var $Et=s(y6e);vMr=r($Et,"longformer"),$Et.forEach(t),FMr=r(eBe," \u2014 "),TU=n(eBe,"A",{href:!0});var kEt=s(TU);TMr=r(kEt,"TFLongformerForMultipleChoice"),kEt.forEach(t),MMr=r(eBe," (Longformer model)"),eBe.forEach(t),EMr=i(_e),m4=n(_e,"LI",{});var oBe=s(m4);L6e=n(oBe,"STRONG",{});var SEt=s(L6e);CMr=r(SEt,"mobilebert"),SEt.forEach(t),wMr=r(oBe," \u2014 "),MU=n(oBe,"A",{href:!0});var REt=s(MU);AMr=r(REt,"TFMobileBertForMultipleChoice"),REt.forEach(t),yMr=r(oBe," (MobileBERT model)"),oBe.forEach(t),LMr=i(_e),g4=n(_e,"LI",{});var rBe=s(g4);x6e=n(rBe,"STRONG",{});var PEt=s(x6e);xMr=r(PEt,"mpnet"),PEt.forEach(t),$Mr=r(rBe," \u2014 "),EU=n(rBe,"A",{href:!0});var BEt=s(EU);kMr=r(BEt,"TFMPNetForMultipleChoice"),BEt.forEach(t),SMr=r(rBe," (MPNet model)"),rBe.forEach(t),RMr=i(_e),h4=n(_e,"LI",{});var tBe=s(h4);$6e=n(tBe,"STRONG",{});var IEt=s($6e);PMr=r(IEt,"rembert"),IEt.forEach(t),BMr=r(tBe," \u2014 "),CU=n(tBe,"A",{href:!0});var qEt=s(CU);IMr=r(qEt,"TFRemBertForMultipleChoice"),qEt.forEach(t),qMr=r(tBe," (RemBERT model)"),tBe.forEach(t),NMr=i(_e),p4=n(_e,"LI",{});var aBe=s(p4);k6e=n(aBe,"STRONG",{});var NEt=s(k6e);jMr=r(NEt,"roberta"),NEt.forEach(t),DMr=r(aBe," \u2014 "),wU=n(aBe,"A",{href:!0});var jEt=s(wU);GMr=r(jEt,"TFRobertaForMultipleChoice"),jEt.forEach(t),OMr=r(aBe," (RoBERTa model)"),aBe.forEach(t),VMr=i(_e),u4=n(_e,"LI",{});var nBe=s(u4);S6e=n(nBe,"STRONG",{});var DEt=s(S6e);XMr=r(DEt,"roformer"),DEt.forEach(t),zMr=r(nBe," \u2014 "),AU=n(nBe,"A",{href:!0});var GEt=s(AU);WMr=r(GEt,"TFRoFormerForMultipleChoice"),GEt.forEach(t),QMr=r(nBe," (RoFormer model)"),nBe.forEach(t),HMr=i(_e),_4=n(_e,"LI",{});var sBe=s(_4);R6e=n(sBe,"STRONG",{});var OEt=s(R6e);UMr=r(OEt,"xlm"),OEt.forEach(t),JMr=r(sBe," \u2014 "),yU=n(sBe,"A",{href:!0});var VEt=s(yU);YMr=r(VEt,"TFXLMForMultipleChoice"),VEt.forEach(t),KMr=r(sBe," (XLM model)"),sBe.forEach(t),ZMr=i(_e),b4=n(_e,"LI",{});var lBe=s(b4);P6e=n(lBe,"STRONG",{});var XEt=s(P6e);e4r=r(XEt,"xlm-roberta"),XEt.forEach(t),o4r=r(lBe," \u2014 "),LU=n(lBe,"A",{href:!0});var zEt=s(LU);r4r=r(zEt,"TFXLMRobertaForMultipleChoice"),zEt.forEach(t),t4r=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),a4r=i(_e),v4=n(_e,"LI",{});var iBe=s(v4);B6e=n(iBe,"STRONG",{});var WEt=s(B6e);n4r=r(WEt,"xlnet"),WEt.forEach(t),s4r=r(iBe," \u2014 "),xU=n(iBe,"A",{href:!0});var QEt=s(xU);l4r=r(QEt,"TFXLNetForMultipleChoice"),QEt.forEach(t),i4r=r(iBe," (XLNet model)"),iBe.forEach(t),_e.forEach(t),d4r=i(Pl),T(F4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Fje=i(f),Fc=n(f,"H2",{class:!0});var LGe=s(Fc);T4=n(LGe,"A",{id:!0,class:!0,href:!0});var HEt=s(T4);I6e=n(HEt,"SPAN",{});var UEt=s(I6e);T(nx.$$.fragment,UEt),UEt.forEach(t),HEt.forEach(t),c4r=i(LGe),q6e=n(LGe,"SPAN",{});var JEt=s(q6e);f4r=r(JEt,"TFAutoModelForNextSentencePrediction"),JEt.forEach(t),LGe.forEach(t),Tje=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(sx.$$.fragment,Bl),m4r=i(Bl),Tc=n(Bl,"P",{});var $ee=s(Tc);g4r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=n($ee,"A",{href:!0});var YEt=s($U);h4r=r(YEt,"from_pretrained()"),YEt.forEach(t),p4r=r($ee," class method or the "),kU=n($ee,"A",{href:!0});var KEt=s(kU);u4r=r(KEt,"from_config()"),KEt.forEach(t),_4r=r($ee,` class
method.`),$ee.forEach(t),b4r=i(Bl),lx=n(Bl,"P",{});var xGe=s(lx);v4r=r(xGe,"This class cannot be instantiated directly using "),N6e=n(xGe,"CODE",{});var ZEt=s(N6e);F4r=r(ZEt,"__init__()"),ZEt.forEach(t),T4r=r(xGe," (throws an error)."),xGe.forEach(t),M4r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Qw=s(Nt);T(ix.$$.fragment,Qw),E4r=i(Qw),j6e=n(Qw,"P",{});var eCt=s(j6e);C4r=r(eCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eCt.forEach(t),w4r=i(Qw),Mc=n(Qw,"P",{});var kee=s(Mc);A4r=r(kee,`Note:
Loading a model from its configuration file does `),D6e=n(kee,"STRONG",{});var oCt=s(D6e);y4r=r(oCt,"not"),oCt.forEach(t),L4r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(kee,"A",{href:!0});var rCt=s(SU);x4r=r(rCt,"from_pretrained()"),rCt.forEach(t),$4r=r(kee," to load the model weights."),kee.forEach(t),k4r=i(Qw),T(M4.$$.fragment,Qw),Qw.forEach(t),S4r=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(dx.$$.fragment,Il),R4r=i(Il),G6e=n(Il,"P",{});var tCt=s(G6e);P4r=r(tCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tCt.forEach(t),B4r=i(Il),gn=n(Il,"P",{});var Hw=s(gn);I4r=r(Hw,"The model class to instantiate is selected based on the "),O6e=n(Hw,"CODE",{});var aCt=s(O6e);q4r=r(aCt,"model_type"),aCt.forEach(t),N4r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),V6e=n(Hw,"CODE",{});var nCt=s(V6e);j4r=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),D4r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(Hw,"CODE",{});var sCt=s(X6e);G4r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),O4r=r(Hw,":"),Hw.forEach(t),V4r=i(Il),cx=n(Il,"UL",{});var $Ge=s(cx);E4=n($Ge,"LI",{});var dBe=s(E4);z6e=n(dBe,"STRONG",{});var lCt=s(z6e);X4r=r(lCt,"bert"),lCt.forEach(t),z4r=r(dBe," \u2014 "),RU=n(dBe,"A",{href:!0});var iCt=s(RU);W4r=r(iCt,"TFBertForNextSentencePrediction"),iCt.forEach(t),Q4r=r(dBe," (BERT model)"),dBe.forEach(t),H4r=i($Ge),C4=n($Ge,"LI",{});var cBe=s(C4);W6e=n(cBe,"STRONG",{});var dCt=s(W6e);U4r=r(dCt,"mobilebert"),dCt.forEach(t),J4r=r(cBe," \u2014 "),PU=n(cBe,"A",{href:!0});var cCt=s(PU);Y4r=r(cCt,"TFMobileBertForNextSentencePrediction"),cCt.forEach(t),K4r=r(cBe," (MobileBERT model)"),cBe.forEach(t),$Ge.forEach(t),Z4r=i(Il),T(w4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Mje=i(f),Ec=n(f,"H2",{class:!0});var kGe=s(Ec);A4=n(kGe,"A",{id:!0,class:!0,href:!0});var fCt=s(A4);Q6e=n(fCt,"SPAN",{});var mCt=s(Q6e);T(fx.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),eEr=i(kGe),H6e=n(kGe,"SPAN",{});var gCt=s(H6e);oEr=r(gCt,"TFAutoModelForTableQuestionAnswering"),gCt.forEach(t),kGe.forEach(t),Eje=i(f),ir=n(f,"DIV",{class:!0});var ql=s(ir);T(mx.$$.fragment,ql),rEr=i(ql),Cc=n(ql,"P",{});var See=s(Cc);tEr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=n(See,"A",{href:!0});var hCt=s(BU);aEr=r(hCt,"from_pretrained()"),hCt.forEach(t),nEr=r(See," class method or the "),IU=n(See,"A",{href:!0});var pCt=s(IU);sEr=r(pCt,"from_config()"),pCt.forEach(t),lEr=r(See,` class
method.`),See.forEach(t),iEr=i(ql),gx=n(ql,"P",{});var SGe=s(gx);dEr=r(SGe,"This class cannot be instantiated directly using "),U6e=n(SGe,"CODE",{});var uCt=s(U6e);cEr=r(uCt,"__init__()"),uCt.forEach(t),fEr=r(SGe," (throws an error)."),SGe.forEach(t),mEr=i(ql),jt=n(ql,"DIV",{class:!0});var Uw=s(jt);T(hx.$$.fragment,Uw),gEr=i(Uw),J6e=n(Uw,"P",{});var _Ct=s(J6e);hEr=r(_Ct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Ct.forEach(t),pEr=i(Uw),wc=n(Uw,"P",{});var Ree=s(wc);uEr=r(Ree,`Note:
Loading a model from its configuration file does `),Y6e=n(Ree,"STRONG",{});var bCt=s(Y6e);_Er=r(bCt,"not"),bCt.forEach(t),bEr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Ree,"A",{href:!0});var vCt=s(qU);vEr=r(vCt,"from_pretrained()"),vCt.forEach(t),FEr=r(Ree," to load the model weights."),Ree.forEach(t),TEr=i(Uw),T(y4.$$.fragment,Uw),Uw.forEach(t),MEr=i(ql),Ir=n(ql,"DIV",{class:!0});var Nl=s(Ir);T(px.$$.fragment,Nl),EEr=i(Nl),K6e=n(Nl,"P",{});var FCt=s(K6e);CEr=r(FCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FCt.forEach(t),wEr=i(Nl),hn=n(Nl,"P",{});var Jw=s(hn);AEr=r(Jw,"The model class to instantiate is selected based on the "),Z6e=n(Jw,"CODE",{});var TCt=s(Z6e);yEr=r(TCt,"model_type"),TCt.forEach(t),LEr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),eTe=n(Jw,"CODE",{});var MCt=s(eTe);xEr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),$Er=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(Jw,"CODE",{});var ECt=s(oTe);kEr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),SEr=r(Jw,":"),Jw.forEach(t),REr=i(Nl),rTe=n(Nl,"UL",{});var CCt=s(rTe);L4=n(CCt,"LI",{});var fBe=s(L4);tTe=n(fBe,"STRONG",{});var wCt=s(tTe);PEr=r(wCt,"tapas"),wCt.forEach(t),BEr=r(fBe," \u2014 "),NU=n(fBe,"A",{href:!0});var ACt=s(NU);IEr=r(ACt,"TFTapasForQuestionAnswering"),ACt.forEach(t),qEr=r(fBe," (TAPAS model)"),fBe.forEach(t),CCt.forEach(t),NEr=i(Nl),T(x4.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Cje=i(f),Ac=n(f,"H2",{class:!0});var RGe=s(Ac);$4=n(RGe,"A",{id:!0,class:!0,href:!0});var yCt=s($4);aTe=n(yCt,"SPAN",{});var LCt=s(aTe);T(ux.$$.fragment,LCt),LCt.forEach(t),yCt.forEach(t),jEr=i(RGe),nTe=n(RGe,"SPAN",{});var xCt=s(nTe);DEr=r(xCt,"TFAutoModelForTokenClassification"),xCt.forEach(t),RGe.forEach(t),wje=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(_x.$$.fragment,jl),GEr=i(jl),yc=n(jl,"P",{});var Pee=s(yc);OEr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=n(Pee,"A",{href:!0});var $Ct=s(jU);VEr=r($Ct,"from_pretrained()"),$Ct.forEach(t),XEr=r(Pee," class method or the "),DU=n(Pee,"A",{href:!0});var kCt=s(DU);zEr=r(kCt,"from_config()"),kCt.forEach(t),WEr=r(Pee,` class
method.`),Pee.forEach(t),QEr=i(jl),bx=n(jl,"P",{});var PGe=s(bx);HEr=r(PGe,"This class cannot be instantiated directly using "),sTe=n(PGe,"CODE",{});var SCt=s(sTe);UEr=r(SCt,"__init__()"),SCt.forEach(t),JEr=r(PGe," (throws an error)."),PGe.forEach(t),YEr=i(jl),Dt=n(jl,"DIV",{class:!0});var Yw=s(Dt);T(vx.$$.fragment,Yw),KEr=i(Yw),lTe=n(Yw,"P",{});var RCt=s(lTe);ZEr=r(RCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RCt.forEach(t),eCr=i(Yw),Lc=n(Yw,"P",{});var Bee=s(Lc);oCr=r(Bee,`Note:
Loading a model from its configuration file does `),iTe=n(Bee,"STRONG",{});var PCt=s(iTe);rCr=r(PCt,"not"),PCt.forEach(t),tCr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Bee,"A",{href:!0});var BCt=s(GU);aCr=r(BCt,"from_pretrained()"),BCt.forEach(t),nCr=r(Bee," to load the model weights."),Bee.forEach(t),sCr=i(Yw),T(k4.$$.fragment,Yw),Yw.forEach(t),lCr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(Fx.$$.fragment,Dl),iCr=i(Dl),dTe=n(Dl,"P",{});var ICt=s(dTe);dCr=r(ICt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ICt.forEach(t),cCr=i(Dl),pn=n(Dl,"P",{});var Kw=s(pn);fCr=r(Kw,"The model class to instantiate is selected based on the "),cTe=n(Kw,"CODE",{});var qCt=s(cTe);mCr=r(qCt,"model_type"),qCt.forEach(t),gCr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),fTe=n(Kw,"CODE",{});var NCt=s(fTe);hCr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),pCr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(Kw,"CODE",{});var jCt=s(mTe);uCr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),_Cr=r(Kw,":"),Kw.forEach(t),bCr=i(Dl),de=n(Dl,"UL",{});var me=s(de);S4=n(me,"LI",{});var mBe=s(S4);gTe=n(mBe,"STRONG",{});var DCt=s(gTe);vCr=r(DCt,"albert"),DCt.forEach(t),FCr=r(mBe," \u2014 "),OU=n(mBe,"A",{href:!0});var GCt=s(OU);TCr=r(GCt,"TFAlbertForTokenClassification"),GCt.forEach(t),MCr=r(mBe," (ALBERT model)"),mBe.forEach(t),ECr=i(me),R4=n(me,"LI",{});var gBe=s(R4);hTe=n(gBe,"STRONG",{});var OCt=s(hTe);CCr=r(OCt,"bert"),OCt.forEach(t),wCr=r(gBe," \u2014 "),VU=n(gBe,"A",{href:!0});var VCt=s(VU);ACr=r(VCt,"TFBertForTokenClassification"),VCt.forEach(t),yCr=r(gBe," (BERT model)"),gBe.forEach(t),LCr=i(me),P4=n(me,"LI",{});var hBe=s(P4);pTe=n(hBe,"STRONG",{});var XCt=s(pTe);xCr=r(XCt,"camembert"),XCt.forEach(t),$Cr=r(hBe," \u2014 "),XU=n(hBe,"A",{href:!0});var zCt=s(XU);kCr=r(zCt,"TFCamembertForTokenClassification"),zCt.forEach(t),SCr=r(hBe," (CamemBERT model)"),hBe.forEach(t),RCr=i(me),B4=n(me,"LI",{});var pBe=s(B4);uTe=n(pBe,"STRONG",{});var WCt=s(uTe);PCr=r(WCt,"convbert"),WCt.forEach(t),BCr=r(pBe," \u2014 "),zU=n(pBe,"A",{href:!0});var QCt=s(zU);ICr=r(QCt,"TFConvBertForTokenClassification"),QCt.forEach(t),qCr=r(pBe," (ConvBERT model)"),pBe.forEach(t),NCr=i(me),I4=n(me,"LI",{});var uBe=s(I4);_Te=n(uBe,"STRONG",{});var HCt=s(_Te);jCr=r(HCt,"deberta"),HCt.forEach(t),DCr=r(uBe," \u2014 "),WU=n(uBe,"A",{href:!0});var UCt=s(WU);GCr=r(UCt,"TFDebertaForTokenClassification"),UCt.forEach(t),OCr=r(uBe," (DeBERTa model)"),uBe.forEach(t),VCr=i(me),q4=n(me,"LI",{});var _Be=s(q4);bTe=n(_Be,"STRONG",{});var JCt=s(bTe);XCr=r(JCt,"deberta-v2"),JCt.forEach(t),zCr=r(_Be," \u2014 "),QU=n(_Be,"A",{href:!0});var YCt=s(QU);WCr=r(YCt,"TFDebertaV2ForTokenClassification"),YCt.forEach(t),QCr=r(_Be," (DeBERTa-v2 model)"),_Be.forEach(t),HCr=i(me),N4=n(me,"LI",{});var bBe=s(N4);vTe=n(bBe,"STRONG",{});var KCt=s(vTe);UCr=r(KCt,"distilbert"),KCt.forEach(t),JCr=r(bBe," \u2014 "),HU=n(bBe,"A",{href:!0});var ZCt=s(HU);YCr=r(ZCt,"TFDistilBertForTokenClassification"),ZCt.forEach(t),KCr=r(bBe," (DistilBERT model)"),bBe.forEach(t),ZCr=i(me),j4=n(me,"LI",{});var vBe=s(j4);FTe=n(vBe,"STRONG",{});var e5t=s(FTe);e5r=r(e5t,"electra"),e5t.forEach(t),o5r=r(vBe," \u2014 "),UU=n(vBe,"A",{href:!0});var o5t=s(UU);r5r=r(o5t,"TFElectraForTokenClassification"),o5t.forEach(t),t5r=r(vBe," (ELECTRA model)"),vBe.forEach(t),a5r=i(me),D4=n(me,"LI",{});var FBe=s(D4);TTe=n(FBe,"STRONG",{});var r5t=s(TTe);n5r=r(r5t,"flaubert"),r5t.forEach(t),s5r=r(FBe," \u2014 "),JU=n(FBe,"A",{href:!0});var t5t=s(JU);l5r=r(t5t,"TFFlaubertForTokenClassification"),t5t.forEach(t),i5r=r(FBe," (FlauBERT model)"),FBe.forEach(t),d5r=i(me),G4=n(me,"LI",{});var TBe=s(G4);MTe=n(TBe,"STRONG",{});var a5t=s(MTe);c5r=r(a5t,"funnel"),a5t.forEach(t),f5r=r(TBe," \u2014 "),YU=n(TBe,"A",{href:!0});var n5t=s(YU);m5r=r(n5t,"TFFunnelForTokenClassification"),n5t.forEach(t),g5r=r(TBe," (Funnel Transformer model)"),TBe.forEach(t),h5r=i(me),O4=n(me,"LI",{});var MBe=s(O4);ETe=n(MBe,"STRONG",{});var s5t=s(ETe);p5r=r(s5t,"layoutlm"),s5t.forEach(t),u5r=r(MBe," \u2014 "),KU=n(MBe,"A",{href:!0});var l5t=s(KU);_5r=r(l5t,"TFLayoutLMForTokenClassification"),l5t.forEach(t),b5r=r(MBe," (LayoutLM model)"),MBe.forEach(t),v5r=i(me),V4=n(me,"LI",{});var EBe=s(V4);CTe=n(EBe,"STRONG",{});var i5t=s(CTe);F5r=r(i5t,"longformer"),i5t.forEach(t),T5r=r(EBe," \u2014 "),ZU=n(EBe,"A",{href:!0});var d5t=s(ZU);M5r=r(d5t,"TFLongformerForTokenClassification"),d5t.forEach(t),E5r=r(EBe," (Longformer model)"),EBe.forEach(t),C5r=i(me),X4=n(me,"LI",{});var CBe=s(X4);wTe=n(CBe,"STRONG",{});var c5t=s(wTe);w5r=r(c5t,"mobilebert"),c5t.forEach(t),A5r=r(CBe," \u2014 "),eJ=n(CBe,"A",{href:!0});var f5t=s(eJ);y5r=r(f5t,"TFMobileBertForTokenClassification"),f5t.forEach(t),L5r=r(CBe," (MobileBERT model)"),CBe.forEach(t),x5r=i(me),z4=n(me,"LI",{});var wBe=s(z4);ATe=n(wBe,"STRONG",{});var m5t=s(ATe);$5r=r(m5t,"mpnet"),m5t.forEach(t),k5r=r(wBe," \u2014 "),oJ=n(wBe,"A",{href:!0});var g5t=s(oJ);S5r=r(g5t,"TFMPNetForTokenClassification"),g5t.forEach(t),R5r=r(wBe," (MPNet model)"),wBe.forEach(t),P5r=i(me),W4=n(me,"LI",{});var ABe=s(W4);yTe=n(ABe,"STRONG",{});var h5t=s(yTe);B5r=r(h5t,"rembert"),h5t.forEach(t),I5r=r(ABe," \u2014 "),rJ=n(ABe,"A",{href:!0});var p5t=s(rJ);q5r=r(p5t,"TFRemBertForTokenClassification"),p5t.forEach(t),N5r=r(ABe," (RemBERT model)"),ABe.forEach(t),j5r=i(me),Q4=n(me,"LI",{});var yBe=s(Q4);LTe=n(yBe,"STRONG",{});var u5t=s(LTe);D5r=r(u5t,"roberta"),u5t.forEach(t),G5r=r(yBe," \u2014 "),tJ=n(yBe,"A",{href:!0});var _5t=s(tJ);O5r=r(_5t,"TFRobertaForTokenClassification"),_5t.forEach(t),V5r=r(yBe," (RoBERTa model)"),yBe.forEach(t),X5r=i(me),H4=n(me,"LI",{});var LBe=s(H4);xTe=n(LBe,"STRONG",{});var b5t=s(xTe);z5r=r(b5t,"roformer"),b5t.forEach(t),W5r=r(LBe," \u2014 "),aJ=n(LBe,"A",{href:!0});var v5t=s(aJ);Q5r=r(v5t,"TFRoFormerForTokenClassification"),v5t.forEach(t),H5r=r(LBe," (RoFormer model)"),LBe.forEach(t),U5r=i(me),U4=n(me,"LI",{});var xBe=s(U4);$Te=n(xBe,"STRONG",{});var F5t=s($Te);J5r=r(F5t,"xlm"),F5t.forEach(t),Y5r=r(xBe," \u2014 "),nJ=n(xBe,"A",{href:!0});var T5t=s(nJ);K5r=r(T5t,"TFXLMForTokenClassification"),T5t.forEach(t),Z5r=r(xBe," (XLM model)"),xBe.forEach(t),e3r=i(me),J4=n(me,"LI",{});var $Be=s(J4);kTe=n($Be,"STRONG",{});var M5t=s(kTe);o3r=r(M5t,"xlm-roberta"),M5t.forEach(t),r3r=r($Be," \u2014 "),sJ=n($Be,"A",{href:!0});var E5t=s(sJ);t3r=r(E5t,"TFXLMRobertaForTokenClassification"),E5t.forEach(t),a3r=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),n3r=i(me),Y4=n(me,"LI",{});var kBe=s(Y4);STe=n(kBe,"STRONG",{});var C5t=s(STe);s3r=r(C5t,"xlnet"),C5t.forEach(t),l3r=r(kBe," \u2014 "),lJ=n(kBe,"A",{href:!0});var w5t=s(lJ);i3r=r(w5t,"TFXLNetForTokenClassification"),w5t.forEach(t),d3r=r(kBe," (XLNet model)"),kBe.forEach(t),me.forEach(t),c3r=i(Dl),T(K4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Aje=i(f),xc=n(f,"H2",{class:!0});var BGe=s(xc);Z4=n(BGe,"A",{id:!0,class:!0,href:!0});var A5t=s(Z4);RTe=n(A5t,"SPAN",{});var y5t=s(RTe);T(Tx.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),f3r=i(BGe),PTe=n(BGe,"SPAN",{});var L5t=s(PTe);m3r=r(L5t,"TFAutoModelForQuestionAnswering"),L5t.forEach(t),BGe.forEach(t),yje=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(Mx.$$.fragment,Gl),g3r=i(Gl),$c=n(Gl,"P",{});var Iee=s($c);h3r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(Iee,"A",{href:!0});var x5t=s(iJ);p3r=r(x5t,"from_pretrained()"),x5t.forEach(t),u3r=r(Iee," class method or the "),dJ=n(Iee,"A",{href:!0});var $5t=s(dJ);_3r=r($5t,"from_config()"),$5t.forEach(t),b3r=r(Iee,` class
method.`),Iee.forEach(t),v3r=i(Gl),Ex=n(Gl,"P",{});var IGe=s(Ex);F3r=r(IGe,"This class cannot be instantiated directly using "),BTe=n(IGe,"CODE",{});var k5t=s(BTe);T3r=r(k5t,"__init__()"),k5t.forEach(t),M3r=r(IGe," (throws an error)."),IGe.forEach(t),E3r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Zw=s(Gt);T(Cx.$$.fragment,Zw),C3r=i(Zw),ITe=n(Zw,"P",{});var S5t=s(ITe);w3r=r(S5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S5t.forEach(t),A3r=i(Zw),kc=n(Zw,"P",{});var qee=s(kc);y3r=r(qee,`Note:
Loading a model from its configuration file does `),qTe=n(qee,"STRONG",{});var R5t=s(qTe);L3r=r(R5t,"not"),R5t.forEach(t),x3r=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(qee,"A",{href:!0});var P5t=s(cJ);$3r=r(P5t,"from_pretrained()"),P5t.forEach(t),k3r=r(qee," to load the model weights."),qee.forEach(t),S3r=i(Zw),T(eE.$$.fragment,Zw),Zw.forEach(t),R3r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(wx.$$.fragment,Ol),P3r=i(Ol),NTe=n(Ol,"P",{});var B5t=s(NTe);B3r=r(B5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B5t.forEach(t),I3r=i(Ol),un=n(Ol,"P",{});var e0=s(un);q3r=r(e0,"The model class to instantiate is selected based on the "),jTe=n(e0,"CODE",{});var I5t=s(jTe);N3r=r(I5t,"model_type"),I5t.forEach(t),j3r=r(e0,` property of the config object (either
passed as an argument or loaded from `),DTe=n(e0,"CODE",{});var q5t=s(DTe);D3r=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),G3r=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(e0,"CODE",{});var N5t=s(GTe);O3r=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),V3r=r(e0,":"),e0.forEach(t),X3r=i(Ol),ce=n(Ol,"UL",{});var ge=s(ce);oE=n(ge,"LI",{});var SBe=s(oE);OTe=n(SBe,"STRONG",{});var j5t=s(OTe);z3r=r(j5t,"albert"),j5t.forEach(t),W3r=r(SBe," \u2014 "),fJ=n(SBe,"A",{href:!0});var D5t=s(fJ);Q3r=r(D5t,"TFAlbertForQuestionAnswering"),D5t.forEach(t),H3r=r(SBe," (ALBERT model)"),SBe.forEach(t),U3r=i(ge),rE=n(ge,"LI",{});var RBe=s(rE);VTe=n(RBe,"STRONG",{});var G5t=s(VTe);J3r=r(G5t,"bert"),G5t.forEach(t),Y3r=r(RBe," \u2014 "),mJ=n(RBe,"A",{href:!0});var O5t=s(mJ);K3r=r(O5t,"TFBertForQuestionAnswering"),O5t.forEach(t),Z3r=r(RBe," (BERT model)"),RBe.forEach(t),ewr=i(ge),tE=n(ge,"LI",{});var PBe=s(tE);XTe=n(PBe,"STRONG",{});var V5t=s(XTe);owr=r(V5t,"camembert"),V5t.forEach(t),rwr=r(PBe," \u2014 "),gJ=n(PBe,"A",{href:!0});var X5t=s(gJ);twr=r(X5t,"TFCamembertForQuestionAnswering"),X5t.forEach(t),awr=r(PBe," (CamemBERT model)"),PBe.forEach(t),nwr=i(ge),aE=n(ge,"LI",{});var BBe=s(aE);zTe=n(BBe,"STRONG",{});var z5t=s(zTe);swr=r(z5t,"convbert"),z5t.forEach(t),lwr=r(BBe," \u2014 "),hJ=n(BBe,"A",{href:!0});var W5t=s(hJ);iwr=r(W5t,"TFConvBertForQuestionAnswering"),W5t.forEach(t),dwr=r(BBe," (ConvBERT model)"),BBe.forEach(t),cwr=i(ge),nE=n(ge,"LI",{});var IBe=s(nE);WTe=n(IBe,"STRONG",{});var Q5t=s(WTe);fwr=r(Q5t,"deberta"),Q5t.forEach(t),mwr=r(IBe," \u2014 "),pJ=n(IBe,"A",{href:!0});var H5t=s(pJ);gwr=r(H5t,"TFDebertaForQuestionAnswering"),H5t.forEach(t),hwr=r(IBe," (DeBERTa model)"),IBe.forEach(t),pwr=i(ge),sE=n(ge,"LI",{});var qBe=s(sE);QTe=n(qBe,"STRONG",{});var U5t=s(QTe);uwr=r(U5t,"deberta-v2"),U5t.forEach(t),_wr=r(qBe," \u2014 "),uJ=n(qBe,"A",{href:!0});var J5t=s(uJ);bwr=r(J5t,"TFDebertaV2ForQuestionAnswering"),J5t.forEach(t),vwr=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),Fwr=i(ge),lE=n(ge,"LI",{});var NBe=s(lE);HTe=n(NBe,"STRONG",{});var Y5t=s(HTe);Twr=r(Y5t,"distilbert"),Y5t.forEach(t),Mwr=r(NBe," \u2014 "),_J=n(NBe,"A",{href:!0});var K5t=s(_J);Ewr=r(K5t,"TFDistilBertForQuestionAnswering"),K5t.forEach(t),Cwr=r(NBe," (DistilBERT model)"),NBe.forEach(t),wwr=i(ge),iE=n(ge,"LI",{});var jBe=s(iE);UTe=n(jBe,"STRONG",{});var Z5t=s(UTe);Awr=r(Z5t,"electra"),Z5t.forEach(t),ywr=r(jBe," \u2014 "),bJ=n(jBe,"A",{href:!0});var e3t=s(bJ);Lwr=r(e3t,"TFElectraForQuestionAnswering"),e3t.forEach(t),xwr=r(jBe," (ELECTRA model)"),jBe.forEach(t),$wr=i(ge),dE=n(ge,"LI",{});var DBe=s(dE);JTe=n(DBe,"STRONG",{});var o3t=s(JTe);kwr=r(o3t,"flaubert"),o3t.forEach(t),Swr=r(DBe," \u2014 "),vJ=n(DBe,"A",{href:!0});var r3t=s(vJ);Rwr=r(r3t,"TFFlaubertForQuestionAnsweringSimple"),r3t.forEach(t),Pwr=r(DBe," (FlauBERT model)"),DBe.forEach(t),Bwr=i(ge),cE=n(ge,"LI",{});var GBe=s(cE);YTe=n(GBe,"STRONG",{});var t3t=s(YTe);Iwr=r(t3t,"funnel"),t3t.forEach(t),qwr=r(GBe," \u2014 "),FJ=n(GBe,"A",{href:!0});var a3t=s(FJ);Nwr=r(a3t,"TFFunnelForQuestionAnswering"),a3t.forEach(t),jwr=r(GBe," (Funnel Transformer model)"),GBe.forEach(t),Dwr=i(ge),fE=n(ge,"LI",{});var OBe=s(fE);KTe=n(OBe,"STRONG",{});var n3t=s(KTe);Gwr=r(n3t,"gptj"),n3t.forEach(t),Owr=r(OBe," \u2014 "),TJ=n(OBe,"A",{href:!0});var s3t=s(TJ);Vwr=r(s3t,"TFGPTJForQuestionAnswering"),s3t.forEach(t),Xwr=r(OBe," (GPT-J model)"),OBe.forEach(t),zwr=i(ge),mE=n(ge,"LI",{});var VBe=s(mE);ZTe=n(VBe,"STRONG",{});var l3t=s(ZTe);Wwr=r(l3t,"longformer"),l3t.forEach(t),Qwr=r(VBe," \u2014 "),MJ=n(VBe,"A",{href:!0});var i3t=s(MJ);Hwr=r(i3t,"TFLongformerForQuestionAnswering"),i3t.forEach(t),Uwr=r(VBe," (Longformer model)"),VBe.forEach(t),Jwr=i(ge),gE=n(ge,"LI",{});var XBe=s(gE);e8e=n(XBe,"STRONG",{});var d3t=s(e8e);Ywr=r(d3t,"mobilebert"),d3t.forEach(t),Kwr=r(XBe," \u2014 "),EJ=n(XBe,"A",{href:!0});var c3t=s(EJ);Zwr=r(c3t,"TFMobileBertForQuestionAnswering"),c3t.forEach(t),e0r=r(XBe," (MobileBERT model)"),XBe.forEach(t),o0r=i(ge),hE=n(ge,"LI",{});var zBe=s(hE);o8e=n(zBe,"STRONG",{});var f3t=s(o8e);r0r=r(f3t,"mpnet"),f3t.forEach(t),t0r=r(zBe," \u2014 "),CJ=n(zBe,"A",{href:!0});var m3t=s(CJ);a0r=r(m3t,"TFMPNetForQuestionAnswering"),m3t.forEach(t),n0r=r(zBe," (MPNet model)"),zBe.forEach(t),s0r=i(ge),pE=n(ge,"LI",{});var WBe=s(pE);r8e=n(WBe,"STRONG",{});var g3t=s(r8e);l0r=r(g3t,"rembert"),g3t.forEach(t),i0r=r(WBe," \u2014 "),wJ=n(WBe,"A",{href:!0});var h3t=s(wJ);d0r=r(h3t,"TFRemBertForQuestionAnswering"),h3t.forEach(t),c0r=r(WBe," (RemBERT model)"),WBe.forEach(t),f0r=i(ge),uE=n(ge,"LI",{});var QBe=s(uE);t8e=n(QBe,"STRONG",{});var p3t=s(t8e);m0r=r(p3t,"roberta"),p3t.forEach(t),g0r=r(QBe," \u2014 "),AJ=n(QBe,"A",{href:!0});var u3t=s(AJ);h0r=r(u3t,"TFRobertaForQuestionAnswering"),u3t.forEach(t),p0r=r(QBe," (RoBERTa model)"),QBe.forEach(t),u0r=i(ge),_E=n(ge,"LI",{});var HBe=s(_E);a8e=n(HBe,"STRONG",{});var _3t=s(a8e);_0r=r(_3t,"roformer"),_3t.forEach(t),b0r=r(HBe," \u2014 "),yJ=n(HBe,"A",{href:!0});var b3t=s(yJ);v0r=r(b3t,"TFRoFormerForQuestionAnswering"),b3t.forEach(t),F0r=r(HBe," (RoFormer model)"),HBe.forEach(t),T0r=i(ge),bE=n(ge,"LI",{});var UBe=s(bE);n8e=n(UBe,"STRONG",{});var v3t=s(n8e);M0r=r(v3t,"xlm"),v3t.forEach(t),E0r=r(UBe," \u2014 "),LJ=n(UBe,"A",{href:!0});var F3t=s(LJ);C0r=r(F3t,"TFXLMForQuestionAnsweringSimple"),F3t.forEach(t),w0r=r(UBe," (XLM model)"),UBe.forEach(t),A0r=i(ge),vE=n(ge,"LI",{});var JBe=s(vE);s8e=n(JBe,"STRONG",{});var T3t=s(s8e);y0r=r(T3t,"xlm-roberta"),T3t.forEach(t),L0r=r(JBe," \u2014 "),xJ=n(JBe,"A",{href:!0});var M3t=s(xJ);x0r=r(M3t,"TFXLMRobertaForQuestionAnswering"),M3t.forEach(t),$0r=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),k0r=i(ge),FE=n(ge,"LI",{});var YBe=s(FE);l8e=n(YBe,"STRONG",{});var E3t=s(l8e);S0r=r(E3t,"xlnet"),E3t.forEach(t),R0r=r(YBe," \u2014 "),$J=n(YBe,"A",{href:!0});var C3t=s($J);P0r=r(C3t,"TFXLNetForQuestionAnsweringSimple"),C3t.forEach(t),B0r=r(YBe," (XLNet model)"),YBe.forEach(t),ge.forEach(t),I0r=i(Ol),T(TE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Lje=i(f),Sc=n(f,"H2",{class:!0});var qGe=s(Sc);ME=n(qGe,"A",{id:!0,class:!0,href:!0});var w3t=s(ME);i8e=n(w3t,"SPAN",{});var A3t=s(i8e);T(Ax.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),q0r=i(qGe),d8e=n(qGe,"SPAN",{});var y3t=s(d8e);N0r=r(y3t,"TFAutoModelForVision2Seq"),y3t.forEach(t),qGe.forEach(t),xje=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(yx.$$.fragment,Vl),j0r=i(Vl),Rc=n(Vl,"P",{});var Nee=s(Rc);D0r=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=n(Nee,"A",{href:!0});var L3t=s(kJ);G0r=r(L3t,"from_pretrained()"),L3t.forEach(t),O0r=r(Nee," class method or the "),SJ=n(Nee,"A",{href:!0});var x3t=s(SJ);V0r=r(x3t,"from_config()"),x3t.forEach(t),X0r=r(Nee,` class
method.`),Nee.forEach(t),z0r=i(Vl),Lx=n(Vl,"P",{});var NGe=s(Lx);W0r=r(NGe,"This class cannot be instantiated directly using "),c8e=n(NGe,"CODE",{});var $3t=s(c8e);Q0r=r($3t,"__init__()"),$3t.forEach(t),H0r=r(NGe," (throws an error)."),NGe.forEach(t),U0r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var o0=s(Ot);T(xx.$$.fragment,o0),J0r=i(o0),f8e=n(o0,"P",{});var k3t=s(f8e);Y0r=r(k3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),k3t.forEach(t),K0r=i(o0),Pc=n(o0,"P",{});var jee=s(Pc);Z0r=r(jee,`Note:
Loading a model from its configuration file does `),m8e=n(jee,"STRONG",{});var S3t=s(m8e);eAr=r(S3t,"not"),S3t.forEach(t),oAr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(jee,"A",{href:!0});var R3t=s(RJ);rAr=r(R3t,"from_pretrained()"),R3t.forEach(t),tAr=r(jee," to load the model weights."),jee.forEach(t),aAr=i(o0),T(EE.$$.fragment,o0),o0.forEach(t),nAr=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T($x.$$.fragment,Xl),sAr=i(Xl),g8e=n(Xl,"P",{});var P3t=s(g8e);lAr=r(P3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),P3t.forEach(t),iAr=i(Xl),_n=n(Xl,"P",{});var r0=s(_n);dAr=r(r0,"The model class to instantiate is selected based on the "),h8e=n(r0,"CODE",{});var B3t=s(h8e);cAr=r(B3t,"model_type"),B3t.forEach(t),fAr=r(r0,` property of the config object (either
passed as an argument or loaded from `),p8e=n(r0,"CODE",{});var I3t=s(p8e);mAr=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),gAr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=n(r0,"CODE",{});var q3t=s(u8e);hAr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),pAr=r(r0,":"),r0.forEach(t),uAr=i(Xl),_8e=n(Xl,"UL",{});var N3t=s(_8e);CE=n(N3t,"LI",{});var KBe=s(CE);b8e=n(KBe,"STRONG",{});var j3t=s(b8e);_Ar=r(j3t,"vision-encoder-decoder"),j3t.forEach(t),bAr=r(KBe," \u2014 "),PJ=n(KBe,"A",{href:!0});var D3t=s(PJ);vAr=r(D3t,"TFVisionEncoderDecoderModel"),D3t.forEach(t),FAr=r(KBe," (Vision Encoder decoder model)"),KBe.forEach(t),N3t.forEach(t),TAr=i(Xl),T(wE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),$je=i(f),Bc=n(f,"H2",{class:!0});var jGe=s(Bc);AE=n(jGe,"A",{id:!0,class:!0,href:!0});var G3t=s(AE);v8e=n(G3t,"SPAN",{});var O3t=s(v8e);T(kx.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),MAr=i(jGe),F8e=n(jGe,"SPAN",{});var V3t=s(F8e);EAr=r(V3t,"TFAutoModelForSpeechSeq2Seq"),V3t.forEach(t),jGe.forEach(t),kje=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(Sx.$$.fragment,zl),CAr=i(zl),Ic=n(zl,"P",{});var Dee=s(Ic);wAr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=n(Dee,"A",{href:!0});var X3t=s(BJ);AAr=r(X3t,"from_pretrained()"),X3t.forEach(t),yAr=r(Dee," class method or the "),IJ=n(Dee,"A",{href:!0});var z3t=s(IJ);LAr=r(z3t,"from_config()"),z3t.forEach(t),xAr=r(Dee,` class
method.`),Dee.forEach(t),$Ar=i(zl),Rx=n(zl,"P",{});var DGe=s(Rx);kAr=r(DGe,"This class cannot be instantiated directly using "),T8e=n(DGe,"CODE",{});var W3t=s(T8e);SAr=r(W3t,"__init__()"),W3t.forEach(t),RAr=r(DGe," (throws an error)."),DGe.forEach(t),PAr=i(zl),Vt=n(zl,"DIV",{class:!0});var t0=s(Vt);T(Px.$$.fragment,t0),BAr=i(t0),M8e=n(t0,"P",{});var Q3t=s(M8e);IAr=r(Q3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q3t.forEach(t),qAr=i(t0),qc=n(t0,"P",{});var Gee=s(qc);NAr=r(Gee,`Note:
Loading a model from its configuration file does `),E8e=n(Gee,"STRONG",{});var H3t=s(E8e);jAr=r(H3t,"not"),H3t.forEach(t),DAr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(Gee,"A",{href:!0});var U3t=s(qJ);GAr=r(U3t,"from_pretrained()"),U3t.forEach(t),OAr=r(Gee," to load the model weights."),Gee.forEach(t),VAr=i(t0),T(yE.$$.fragment,t0),t0.forEach(t),XAr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(Bx.$$.fragment,Wl),zAr=i(Wl),C8e=n(Wl,"P",{});var J3t=s(C8e);WAr=r(J3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J3t.forEach(t),QAr=i(Wl),bn=n(Wl,"P",{});var a0=s(bn);HAr=r(a0,"The model class to instantiate is selected based on the "),w8e=n(a0,"CODE",{});var Y3t=s(w8e);UAr=r(Y3t,"model_type"),Y3t.forEach(t),JAr=r(a0,` property of the config object (either
passed as an argument or loaded from `),A8e=n(a0,"CODE",{});var K3t=s(A8e);YAr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),KAr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(a0,"CODE",{});var Z3t=s(y8e);ZAr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),eyr=r(a0,":"),a0.forEach(t),oyr=i(Wl),L8e=n(Wl,"UL",{});var ewt=s(L8e);LE=n(ewt,"LI",{});var ZBe=s(LE);x8e=n(ZBe,"STRONG",{});var owt=s(x8e);ryr=r(owt,"speech_to_text"),owt.forEach(t),tyr=r(ZBe," \u2014 "),NJ=n(ZBe,"A",{href:!0});var rwt=s(NJ);ayr=r(rwt,"TFSpeech2TextForConditionalGeneration"),rwt.forEach(t),nyr=r(ZBe," (Speech2Text model)"),ZBe.forEach(t),ewt.forEach(t),syr=i(Wl),T(xE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Sje=i(f),Nc=n(f,"H2",{class:!0});var GGe=s(Nc);$E=n(GGe,"A",{id:!0,class:!0,href:!0});var twt=s($E);$8e=n(twt,"SPAN",{});var awt=s($8e);T(Ix.$$.fragment,awt),awt.forEach(t),twt.forEach(t),lyr=i(GGe),k8e=n(GGe,"SPAN",{});var nwt=s(k8e);iyr=r(nwt,"FlaxAutoModel"),nwt.forEach(t),GGe.forEach(t),Rje=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(qx.$$.fragment,Ql),dyr=i(Ql),jc=n(Ql,"P",{});var Oee=s(jc);cyr=r(Oee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=n(Oee,"A",{href:!0});var swt=s(jJ);fyr=r(swt,"from_pretrained()"),swt.forEach(t),myr=r(Oee," class method or the "),DJ=n(Oee,"A",{href:!0});var lwt=s(DJ);gyr=r(lwt,"from_config()"),lwt.forEach(t),hyr=r(Oee,` class
method.`),Oee.forEach(t),pyr=i(Ql),Nx=n(Ql,"P",{});var OGe=s(Nx);uyr=r(OGe,"This class cannot be instantiated directly using "),S8e=n(OGe,"CODE",{});var iwt=s(S8e);_yr=r(iwt,"__init__()"),iwt.forEach(t),byr=r(OGe," (throws an error)."),OGe.forEach(t),vyr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var n0=s(Xt);T(jx.$$.fragment,n0),Fyr=i(n0),R8e=n(n0,"P",{});var dwt=s(R8e);Tyr=r(dwt,"Instantiates one of the base model classes of the library from a configuration."),dwt.forEach(t),Myr=i(n0),Dc=n(n0,"P",{});var Vee=s(Dc);Eyr=r(Vee,`Note:
Loading a model from its configuration file does `),P8e=n(Vee,"STRONG",{});var cwt=s(P8e);Cyr=r(cwt,"not"),cwt.forEach(t),wyr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Vee,"A",{href:!0});var fwt=s(GJ);Ayr=r(fwt,"from_pretrained()"),fwt.forEach(t),yyr=r(Vee," to load the model weights."),Vee.forEach(t),Lyr=i(n0),T(kE.$$.fragment,n0),n0.forEach(t),xyr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(Dx.$$.fragment,Hl),$yr=i(Hl),B8e=n(Hl,"P",{});var mwt=s(B8e);kyr=r(mwt,"Instantiate one of the base model classes of the library from a pretrained model."),mwt.forEach(t),Syr=i(Hl),vn=n(Hl,"P",{});var s0=s(vn);Ryr=r(s0,"The model class to instantiate is selected based on the "),I8e=n(s0,"CODE",{});var gwt=s(I8e);Pyr=r(gwt,"model_type"),gwt.forEach(t),Byr=r(s0,` property of the config object (either
passed as an argument or loaded from `),q8e=n(s0,"CODE",{});var hwt=s(q8e);Iyr=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),qyr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(s0,"CODE",{});var pwt=s(N8e);Nyr=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),jyr=r(s0,":"),s0.forEach(t),Dyr=i(Hl),te=n(Hl,"UL",{});var ne=s(te);SE=n(ne,"LI",{});var eIe=s(SE);j8e=n(eIe,"STRONG",{});var uwt=s(j8e);Gyr=r(uwt,"albert"),uwt.forEach(t),Oyr=r(eIe," \u2014 "),OJ=n(eIe,"A",{href:!0});var _wt=s(OJ);Vyr=r(_wt,"FlaxAlbertModel"),_wt.forEach(t),Xyr=r(eIe," (ALBERT model)"),eIe.forEach(t),zyr=i(ne),RE=n(ne,"LI",{});var oIe=s(RE);D8e=n(oIe,"STRONG",{});var bwt=s(D8e);Wyr=r(bwt,"bart"),bwt.forEach(t),Qyr=r(oIe," \u2014 "),VJ=n(oIe,"A",{href:!0});var vwt=s(VJ);Hyr=r(vwt,"FlaxBartModel"),vwt.forEach(t),Uyr=r(oIe," (BART model)"),oIe.forEach(t),Jyr=i(ne),PE=n(ne,"LI",{});var rIe=s(PE);G8e=n(rIe,"STRONG",{});var Fwt=s(G8e);Yyr=r(Fwt,"beit"),Fwt.forEach(t),Kyr=r(rIe," \u2014 "),XJ=n(rIe,"A",{href:!0});var Twt=s(XJ);Zyr=r(Twt,"FlaxBeitModel"),Twt.forEach(t),eLr=r(rIe," (BEiT model)"),rIe.forEach(t),oLr=i(ne),BE=n(ne,"LI",{});var tIe=s(BE);O8e=n(tIe,"STRONG",{});var Mwt=s(O8e);rLr=r(Mwt,"bert"),Mwt.forEach(t),tLr=r(tIe," \u2014 "),zJ=n(tIe,"A",{href:!0});var Ewt=s(zJ);aLr=r(Ewt,"FlaxBertModel"),Ewt.forEach(t),nLr=r(tIe," (BERT model)"),tIe.forEach(t),sLr=i(ne),IE=n(ne,"LI",{});var aIe=s(IE);V8e=n(aIe,"STRONG",{});var Cwt=s(V8e);lLr=r(Cwt,"big_bird"),Cwt.forEach(t),iLr=r(aIe," \u2014 "),WJ=n(aIe,"A",{href:!0});var wwt=s(WJ);dLr=r(wwt,"FlaxBigBirdModel"),wwt.forEach(t),cLr=r(aIe," (BigBird model)"),aIe.forEach(t),fLr=i(ne),qE=n(ne,"LI",{});var nIe=s(qE);X8e=n(nIe,"STRONG",{});var Awt=s(X8e);mLr=r(Awt,"blenderbot"),Awt.forEach(t),gLr=r(nIe," \u2014 "),QJ=n(nIe,"A",{href:!0});var ywt=s(QJ);hLr=r(ywt,"FlaxBlenderbotModel"),ywt.forEach(t),pLr=r(nIe," (Blenderbot model)"),nIe.forEach(t),uLr=i(ne),NE=n(ne,"LI",{});var sIe=s(NE);z8e=n(sIe,"STRONG",{});var Lwt=s(z8e);_Lr=r(Lwt,"blenderbot-small"),Lwt.forEach(t),bLr=r(sIe," \u2014 "),HJ=n(sIe,"A",{href:!0});var xwt=s(HJ);vLr=r(xwt,"FlaxBlenderbotSmallModel"),xwt.forEach(t),FLr=r(sIe," (BlenderbotSmall model)"),sIe.forEach(t),TLr=i(ne),jE=n(ne,"LI",{});var lIe=s(jE);W8e=n(lIe,"STRONG",{});var $wt=s(W8e);MLr=r($wt,"clip"),$wt.forEach(t),ELr=r(lIe," \u2014 "),UJ=n(lIe,"A",{href:!0});var kwt=s(UJ);CLr=r(kwt,"FlaxCLIPModel"),kwt.forEach(t),wLr=r(lIe," (CLIP model)"),lIe.forEach(t),ALr=i(ne),DE=n(ne,"LI",{});var iIe=s(DE);Q8e=n(iIe,"STRONG",{});var Swt=s(Q8e);yLr=r(Swt,"distilbert"),Swt.forEach(t),LLr=r(iIe," \u2014 "),JJ=n(iIe,"A",{href:!0});var Rwt=s(JJ);xLr=r(Rwt,"FlaxDistilBertModel"),Rwt.forEach(t),$Lr=r(iIe," (DistilBERT model)"),iIe.forEach(t),kLr=i(ne),GE=n(ne,"LI",{});var dIe=s(GE);H8e=n(dIe,"STRONG",{});var Pwt=s(H8e);SLr=r(Pwt,"electra"),Pwt.forEach(t),RLr=r(dIe," \u2014 "),YJ=n(dIe,"A",{href:!0});var Bwt=s(YJ);PLr=r(Bwt,"FlaxElectraModel"),Bwt.forEach(t),BLr=r(dIe," (ELECTRA model)"),dIe.forEach(t),ILr=i(ne),OE=n(ne,"LI",{});var cIe=s(OE);U8e=n(cIe,"STRONG",{});var Iwt=s(U8e);qLr=r(Iwt,"gpt2"),Iwt.forEach(t),NLr=r(cIe," \u2014 "),KJ=n(cIe,"A",{href:!0});var qwt=s(KJ);jLr=r(qwt,"FlaxGPT2Model"),qwt.forEach(t),DLr=r(cIe," (OpenAI GPT-2 model)"),cIe.forEach(t),GLr=i(ne),VE=n(ne,"LI",{});var fIe=s(VE);J8e=n(fIe,"STRONG",{});var Nwt=s(J8e);OLr=r(Nwt,"gpt_neo"),Nwt.forEach(t),VLr=r(fIe," \u2014 "),ZJ=n(fIe,"A",{href:!0});var jwt=s(ZJ);XLr=r(jwt,"FlaxGPTNeoModel"),jwt.forEach(t),zLr=r(fIe," (GPT Neo model)"),fIe.forEach(t),WLr=i(ne),XE=n(ne,"LI",{});var mIe=s(XE);Y8e=n(mIe,"STRONG",{});var Dwt=s(Y8e);QLr=r(Dwt,"gptj"),Dwt.forEach(t),HLr=r(mIe," \u2014 "),eY=n(mIe,"A",{href:!0});var Gwt=s(eY);ULr=r(Gwt,"FlaxGPTJModel"),Gwt.forEach(t),JLr=r(mIe," (GPT-J model)"),mIe.forEach(t),YLr=i(ne),zE=n(ne,"LI",{});var gIe=s(zE);K8e=n(gIe,"STRONG",{});var Owt=s(K8e);KLr=r(Owt,"marian"),Owt.forEach(t),ZLr=r(gIe," \u2014 "),oY=n(gIe,"A",{href:!0});var Vwt=s(oY);exr=r(Vwt,"FlaxMarianModel"),Vwt.forEach(t),oxr=r(gIe," (Marian model)"),gIe.forEach(t),rxr=i(ne),WE=n(ne,"LI",{});var hIe=s(WE);Z8e=n(hIe,"STRONG",{});var Xwt=s(Z8e);txr=r(Xwt,"mbart"),Xwt.forEach(t),axr=r(hIe," \u2014 "),rY=n(hIe,"A",{href:!0});var zwt=s(rY);nxr=r(zwt,"FlaxMBartModel"),zwt.forEach(t),sxr=r(hIe," (mBART model)"),hIe.forEach(t),lxr=i(ne),QE=n(ne,"LI",{});var pIe=s(QE);e7e=n(pIe,"STRONG",{});var Wwt=s(e7e);ixr=r(Wwt,"mt5"),Wwt.forEach(t),dxr=r(pIe," \u2014 "),tY=n(pIe,"A",{href:!0});var Qwt=s(tY);cxr=r(Qwt,"FlaxMT5Model"),Qwt.forEach(t),fxr=r(pIe," (mT5 model)"),pIe.forEach(t),mxr=i(ne),HE=n(ne,"LI",{});var uIe=s(HE);o7e=n(uIe,"STRONG",{});var Hwt=s(o7e);gxr=r(Hwt,"pegasus"),Hwt.forEach(t),hxr=r(uIe," \u2014 "),aY=n(uIe,"A",{href:!0});var Uwt=s(aY);pxr=r(Uwt,"FlaxPegasusModel"),Uwt.forEach(t),uxr=r(uIe," (Pegasus model)"),uIe.forEach(t),_xr=i(ne),UE=n(ne,"LI",{});var _Ie=s(UE);r7e=n(_Ie,"STRONG",{});var Jwt=s(r7e);bxr=r(Jwt,"roberta"),Jwt.forEach(t),vxr=r(_Ie," \u2014 "),nY=n(_Ie,"A",{href:!0});var Ywt=s(nY);Fxr=r(Ywt,"FlaxRobertaModel"),Ywt.forEach(t),Txr=r(_Ie," (RoBERTa model)"),_Ie.forEach(t),Mxr=i(ne),JE=n(ne,"LI",{});var bIe=s(JE);t7e=n(bIe,"STRONG",{});var Kwt=s(t7e);Exr=r(Kwt,"roformer"),Kwt.forEach(t),Cxr=r(bIe," \u2014 "),sY=n(bIe,"A",{href:!0});var Zwt=s(sY);wxr=r(Zwt,"FlaxRoFormerModel"),Zwt.forEach(t),Axr=r(bIe," (RoFormer model)"),bIe.forEach(t),yxr=i(ne),YE=n(ne,"LI",{});var vIe=s(YE);a7e=n(vIe,"STRONG",{});var e0t=s(a7e);Lxr=r(e0t,"t5"),e0t.forEach(t),xxr=r(vIe," \u2014 "),lY=n(vIe,"A",{href:!0});var o0t=s(lY);$xr=r(o0t,"FlaxT5Model"),o0t.forEach(t),kxr=r(vIe," (T5 model)"),vIe.forEach(t),Sxr=i(ne),KE=n(ne,"LI",{});var FIe=s(KE);n7e=n(FIe,"STRONG",{});var r0t=s(n7e);Rxr=r(r0t,"vision-text-dual-encoder"),r0t.forEach(t),Pxr=r(FIe," \u2014 "),iY=n(FIe,"A",{href:!0});var t0t=s(iY);Bxr=r(t0t,"FlaxVisionTextDualEncoderModel"),t0t.forEach(t),Ixr=r(FIe," (VisionTextDualEncoder model)"),FIe.forEach(t),qxr=i(ne),ZE=n(ne,"LI",{});var TIe=s(ZE);s7e=n(TIe,"STRONG",{});var a0t=s(s7e);Nxr=r(a0t,"vit"),a0t.forEach(t),jxr=r(TIe," \u2014 "),dY=n(TIe,"A",{href:!0});var n0t=s(dY);Dxr=r(n0t,"FlaxViTModel"),n0t.forEach(t),Gxr=r(TIe," (ViT model)"),TIe.forEach(t),Oxr=i(ne),eC=n(ne,"LI",{});var MIe=s(eC);l7e=n(MIe,"STRONG",{});var s0t=s(l7e);Vxr=r(s0t,"wav2vec2"),s0t.forEach(t),Xxr=r(MIe," \u2014 "),cY=n(MIe,"A",{href:!0});var l0t=s(cY);zxr=r(l0t,"FlaxWav2Vec2Model"),l0t.forEach(t),Wxr=r(MIe," (Wav2Vec2 model)"),MIe.forEach(t),Qxr=i(ne),oC=n(ne,"LI",{});var EIe=s(oC);i7e=n(EIe,"STRONG",{});var i0t=s(i7e);Hxr=r(i0t,"xglm"),i0t.forEach(t),Uxr=r(EIe," \u2014 "),fY=n(EIe,"A",{href:!0});var d0t=s(fY);Jxr=r(d0t,"FlaxXGLMModel"),d0t.forEach(t),Yxr=r(EIe," (XGLM model)"),EIe.forEach(t),Kxr=i(ne),rC=n(ne,"LI",{});var CIe=s(rC);d7e=n(CIe,"STRONG",{});var c0t=s(d7e);Zxr=r(c0t,"xlm-roberta"),c0t.forEach(t),e9r=r(CIe," \u2014 "),mY=n(CIe,"A",{href:!0});var f0t=s(mY);o9r=r(f0t,"FlaxXLMRobertaModel"),f0t.forEach(t),r9r=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),ne.forEach(t),t9r=i(Hl),T(tC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Pje=i(f),Gc=n(f,"H2",{class:!0});var VGe=s(Gc);aC=n(VGe,"A",{id:!0,class:!0,href:!0});var m0t=s(aC);c7e=n(m0t,"SPAN",{});var g0t=s(c7e);T(Gx.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),a9r=i(VGe),f7e=n(VGe,"SPAN",{});var h0t=s(f7e);n9r=r(h0t,"FlaxAutoModelForCausalLM"),h0t.forEach(t),VGe.forEach(t),Bje=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(Ox.$$.fragment,Ul),s9r=i(Ul),Oc=n(Ul,"P",{});var Xee=s(Oc);l9r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=n(Xee,"A",{href:!0});var p0t=s(gY);i9r=r(p0t,"from_pretrained()"),p0t.forEach(t),d9r=r(Xee," class method or the "),hY=n(Xee,"A",{href:!0});var u0t=s(hY);c9r=r(u0t,"from_config()"),u0t.forEach(t),f9r=r(Xee,` class
method.`),Xee.forEach(t),m9r=i(Ul),Vx=n(Ul,"P",{});var XGe=s(Vx);g9r=r(XGe,"This class cannot be instantiated directly using "),m7e=n(XGe,"CODE",{});var _0t=s(m7e);h9r=r(_0t,"__init__()"),_0t.forEach(t),p9r=r(XGe," (throws an error)."),XGe.forEach(t),u9r=i(Ul),zt=n(Ul,"DIV",{class:!0});var l0=s(zt);T(Xx.$$.fragment,l0),_9r=i(l0),g7e=n(l0,"P",{});var b0t=s(g7e);b9r=r(b0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b0t.forEach(t),v9r=i(l0),Vc=n(l0,"P",{});var zee=s(Vc);F9r=r(zee,`Note:
Loading a model from its configuration file does `),h7e=n(zee,"STRONG",{});var v0t=s(h7e);T9r=r(v0t,"not"),v0t.forEach(t),M9r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(zee,"A",{href:!0});var F0t=s(pY);E9r=r(F0t,"from_pretrained()"),F0t.forEach(t),C9r=r(zee," to load the model weights."),zee.forEach(t),w9r=i(l0),T(nC.$$.fragment,l0),l0.forEach(t),A9r=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(zx.$$.fragment,Jl),y9r=i(Jl),p7e=n(Jl,"P",{});var T0t=s(p7e);L9r=r(T0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T0t.forEach(t),x9r=i(Jl),Fn=n(Jl,"P",{});var i0=s(Fn);$9r=r(i0,"The model class to instantiate is selected based on the "),u7e=n(i0,"CODE",{});var M0t=s(u7e);k9r=r(M0t,"model_type"),M0t.forEach(t),S9r=r(i0,` property of the config object (either
passed as an argument or loaded from `),_7e=n(i0,"CODE",{});var E0t=s(_7e);R9r=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),P9r=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(i0,"CODE",{});var C0t=s(b7e);B9r=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),I9r=r(i0,":"),i0.forEach(t),q9r=i(Jl),Re=n(Jl,"UL",{});var Xe=s(Re);sC=n(Xe,"LI",{});var wIe=s(sC);v7e=n(wIe,"STRONG",{});var w0t=s(v7e);N9r=r(w0t,"bart"),w0t.forEach(t),j9r=r(wIe," \u2014 "),uY=n(wIe,"A",{href:!0});var A0t=s(uY);D9r=r(A0t,"FlaxBartForCausalLM"),A0t.forEach(t),G9r=r(wIe," (BART model)"),wIe.forEach(t),O9r=i(Xe),lC=n(Xe,"LI",{});var AIe=s(lC);F7e=n(AIe,"STRONG",{});var y0t=s(F7e);V9r=r(y0t,"bert"),y0t.forEach(t),X9r=r(AIe," \u2014 "),_Y=n(AIe,"A",{href:!0});var L0t=s(_Y);z9r=r(L0t,"FlaxBertForCausalLM"),L0t.forEach(t),W9r=r(AIe," (BERT model)"),AIe.forEach(t),Q9r=i(Xe),iC=n(Xe,"LI",{});var yIe=s(iC);T7e=n(yIe,"STRONG",{});var x0t=s(T7e);H9r=r(x0t,"big_bird"),x0t.forEach(t),U9r=r(yIe," \u2014 "),bY=n(yIe,"A",{href:!0});var $0t=s(bY);J9r=r($0t,"FlaxBigBirdForCausalLM"),$0t.forEach(t),Y9r=r(yIe," (BigBird model)"),yIe.forEach(t),K9r=i(Xe),dC=n(Xe,"LI",{});var LIe=s(dC);M7e=n(LIe,"STRONG",{});var k0t=s(M7e);Z9r=r(k0t,"electra"),k0t.forEach(t),e$r=r(LIe," \u2014 "),vY=n(LIe,"A",{href:!0});var S0t=s(vY);o$r=r(S0t,"FlaxElectraForCausalLM"),S0t.forEach(t),r$r=r(LIe," (ELECTRA model)"),LIe.forEach(t),t$r=i(Xe),cC=n(Xe,"LI",{});var xIe=s(cC);E7e=n(xIe,"STRONG",{});var R0t=s(E7e);a$r=r(R0t,"gpt2"),R0t.forEach(t),n$r=r(xIe," \u2014 "),FY=n(xIe,"A",{href:!0});var P0t=s(FY);s$r=r(P0t,"FlaxGPT2LMHeadModel"),P0t.forEach(t),l$r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),i$r=i(Xe),fC=n(Xe,"LI",{});var $Ie=s(fC);C7e=n($Ie,"STRONG",{});var B0t=s(C7e);d$r=r(B0t,"gpt_neo"),B0t.forEach(t),c$r=r($Ie," \u2014 "),TY=n($Ie,"A",{href:!0});var I0t=s(TY);f$r=r(I0t,"FlaxGPTNeoForCausalLM"),I0t.forEach(t),m$r=r($Ie," (GPT Neo model)"),$Ie.forEach(t),g$r=i(Xe),mC=n(Xe,"LI",{});var kIe=s(mC);w7e=n(kIe,"STRONG",{});var q0t=s(w7e);h$r=r(q0t,"gptj"),q0t.forEach(t),p$r=r(kIe," \u2014 "),MY=n(kIe,"A",{href:!0});var N0t=s(MY);u$r=r(N0t,"FlaxGPTJForCausalLM"),N0t.forEach(t),_$r=r(kIe," (GPT-J model)"),kIe.forEach(t),b$r=i(Xe),gC=n(Xe,"LI",{});var SIe=s(gC);A7e=n(SIe,"STRONG",{});var j0t=s(A7e);v$r=r(j0t,"roberta"),j0t.forEach(t),F$r=r(SIe," \u2014 "),EY=n(SIe,"A",{href:!0});var D0t=s(EY);T$r=r(D0t,"FlaxRobertaForCausalLM"),D0t.forEach(t),M$r=r(SIe," (RoBERTa model)"),SIe.forEach(t),E$r=i(Xe),hC=n(Xe,"LI",{});var RIe=s(hC);y7e=n(RIe,"STRONG",{});var G0t=s(y7e);C$r=r(G0t,"xglm"),G0t.forEach(t),w$r=r(RIe," \u2014 "),CY=n(RIe,"A",{href:!0});var O0t=s(CY);A$r=r(O0t,"FlaxXGLMForCausalLM"),O0t.forEach(t),y$r=r(RIe," (XGLM model)"),RIe.forEach(t),Xe.forEach(t),L$r=i(Jl),T(pC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Ije=i(f),Xc=n(f,"H2",{class:!0});var zGe=s(Xc);uC=n(zGe,"A",{id:!0,class:!0,href:!0});var V0t=s(uC);L7e=n(V0t,"SPAN",{});var X0t=s(L7e);T(Wx.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),x$r=i(zGe),x7e=n(zGe,"SPAN",{});var z0t=s(x7e);$$r=r(z0t,"FlaxAutoModelForPreTraining"),z0t.forEach(t),zGe.forEach(t),qje=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(Qx.$$.fragment,Yl),k$r=i(Yl),zc=n(Yl,"P",{});var Wee=s(zc);S$r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=n(Wee,"A",{href:!0});var W0t=s(wY);R$r=r(W0t,"from_pretrained()"),W0t.forEach(t),P$r=r(Wee," class method or the "),AY=n(Wee,"A",{href:!0});var Q0t=s(AY);B$r=r(Q0t,"from_config()"),Q0t.forEach(t),I$r=r(Wee,` class
method.`),Wee.forEach(t),q$r=i(Yl),Hx=n(Yl,"P",{});var WGe=s(Hx);N$r=r(WGe,"This class cannot be instantiated directly using "),$7e=n(WGe,"CODE",{});var H0t=s($7e);j$r=r(H0t,"__init__()"),H0t.forEach(t),D$r=r(WGe," (throws an error)."),WGe.forEach(t),G$r=i(Yl),Wt=n(Yl,"DIV",{class:!0});var d0=s(Wt);T(Ux.$$.fragment,d0),O$r=i(d0),k7e=n(d0,"P",{});var U0t=s(k7e);V$r=r(U0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U0t.forEach(t),X$r=i(d0),Wc=n(d0,"P",{});var Qee=s(Wc);z$r=r(Qee,`Note:
Loading a model from its configuration file does `),S7e=n(Qee,"STRONG",{});var J0t=s(S7e);W$r=r(J0t,"not"),J0t.forEach(t),Q$r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Qee,"A",{href:!0});var Y0t=s(yY);H$r=r(Y0t,"from_pretrained()"),Y0t.forEach(t),U$r=r(Qee," to load the model weights."),Qee.forEach(t),J$r=i(d0),T(_C.$$.fragment,d0),d0.forEach(t),Y$r=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(Jx.$$.fragment,Kl),K$r=i(Kl),R7e=n(Kl,"P",{});var K0t=s(R7e);Z$r=r(K0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K0t.forEach(t),ekr=i(Kl),Tn=n(Kl,"P",{});var c0=s(Tn);okr=r(c0,"The model class to instantiate is selected based on the "),P7e=n(c0,"CODE",{});var Z0t=s(P7e);rkr=r(Z0t,"model_type"),Z0t.forEach(t),tkr=r(c0,` property of the config object (either
passed as an argument or loaded from `),B7e=n(c0,"CODE",{});var eAt=s(B7e);akr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),nkr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(c0,"CODE",{});var oAt=s(I7e);skr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),lkr=r(c0,":"),c0.forEach(t),ikr=i(Kl),Ee=n(Kl,"UL",{});var we=s(Ee);bC=n(we,"LI",{});var PIe=s(bC);q7e=n(PIe,"STRONG",{});var rAt=s(q7e);dkr=r(rAt,"albert"),rAt.forEach(t),ckr=r(PIe," \u2014 "),LY=n(PIe,"A",{href:!0});var tAt=s(LY);fkr=r(tAt,"FlaxAlbertForPreTraining"),tAt.forEach(t),mkr=r(PIe," (ALBERT model)"),PIe.forEach(t),gkr=i(we),vC=n(we,"LI",{});var BIe=s(vC);N7e=n(BIe,"STRONG",{});var aAt=s(N7e);hkr=r(aAt,"bart"),aAt.forEach(t),pkr=r(BIe," \u2014 "),xY=n(BIe,"A",{href:!0});var nAt=s(xY);ukr=r(nAt,"FlaxBartForConditionalGeneration"),nAt.forEach(t),_kr=r(BIe," (BART model)"),BIe.forEach(t),bkr=i(we),FC=n(we,"LI",{});var IIe=s(FC);j7e=n(IIe,"STRONG",{});var sAt=s(j7e);vkr=r(sAt,"bert"),sAt.forEach(t),Fkr=r(IIe," \u2014 "),$Y=n(IIe,"A",{href:!0});var lAt=s($Y);Tkr=r(lAt,"FlaxBertForPreTraining"),lAt.forEach(t),Mkr=r(IIe," (BERT model)"),IIe.forEach(t),Ekr=i(we),TC=n(we,"LI",{});var qIe=s(TC);D7e=n(qIe,"STRONG",{});var iAt=s(D7e);Ckr=r(iAt,"big_bird"),iAt.forEach(t),wkr=r(qIe," \u2014 "),kY=n(qIe,"A",{href:!0});var dAt=s(kY);Akr=r(dAt,"FlaxBigBirdForPreTraining"),dAt.forEach(t),ykr=r(qIe," (BigBird model)"),qIe.forEach(t),Lkr=i(we),MC=n(we,"LI",{});var NIe=s(MC);G7e=n(NIe,"STRONG",{});var cAt=s(G7e);xkr=r(cAt,"electra"),cAt.forEach(t),$kr=r(NIe," \u2014 "),SY=n(NIe,"A",{href:!0});var fAt=s(SY);kkr=r(fAt,"FlaxElectraForPreTraining"),fAt.forEach(t),Skr=r(NIe," (ELECTRA model)"),NIe.forEach(t),Rkr=i(we),EC=n(we,"LI",{});var jIe=s(EC);O7e=n(jIe,"STRONG",{});var mAt=s(O7e);Pkr=r(mAt,"mbart"),mAt.forEach(t),Bkr=r(jIe," \u2014 "),RY=n(jIe,"A",{href:!0});var gAt=s(RY);Ikr=r(gAt,"FlaxMBartForConditionalGeneration"),gAt.forEach(t),qkr=r(jIe," (mBART model)"),jIe.forEach(t),Nkr=i(we),CC=n(we,"LI",{});var DIe=s(CC);V7e=n(DIe,"STRONG",{});var hAt=s(V7e);jkr=r(hAt,"mt5"),hAt.forEach(t),Dkr=r(DIe," \u2014 "),PY=n(DIe,"A",{href:!0});var pAt=s(PY);Gkr=r(pAt,"FlaxMT5ForConditionalGeneration"),pAt.forEach(t),Okr=r(DIe," (mT5 model)"),DIe.forEach(t),Vkr=i(we),wC=n(we,"LI",{});var GIe=s(wC);X7e=n(GIe,"STRONG",{});var uAt=s(X7e);Xkr=r(uAt,"roberta"),uAt.forEach(t),zkr=r(GIe," \u2014 "),BY=n(GIe,"A",{href:!0});var _At=s(BY);Wkr=r(_At,"FlaxRobertaForMaskedLM"),_At.forEach(t),Qkr=r(GIe," (RoBERTa model)"),GIe.forEach(t),Hkr=i(we),AC=n(we,"LI",{});var OIe=s(AC);z7e=n(OIe,"STRONG",{});var bAt=s(z7e);Ukr=r(bAt,"roformer"),bAt.forEach(t),Jkr=r(OIe," \u2014 "),IY=n(OIe,"A",{href:!0});var vAt=s(IY);Ykr=r(vAt,"FlaxRoFormerForMaskedLM"),vAt.forEach(t),Kkr=r(OIe," (RoFormer model)"),OIe.forEach(t),Zkr=i(we),yC=n(we,"LI",{});var VIe=s(yC);W7e=n(VIe,"STRONG",{});var FAt=s(W7e);eSr=r(FAt,"t5"),FAt.forEach(t),oSr=r(VIe," \u2014 "),qY=n(VIe,"A",{href:!0});var TAt=s(qY);rSr=r(TAt,"FlaxT5ForConditionalGeneration"),TAt.forEach(t),tSr=r(VIe," (T5 model)"),VIe.forEach(t),aSr=i(we),LC=n(we,"LI",{});var XIe=s(LC);Q7e=n(XIe,"STRONG",{});var MAt=s(Q7e);nSr=r(MAt,"wav2vec2"),MAt.forEach(t),sSr=r(XIe," \u2014 "),NY=n(XIe,"A",{href:!0});var EAt=s(NY);lSr=r(EAt,"FlaxWav2Vec2ForPreTraining"),EAt.forEach(t),iSr=r(XIe," (Wav2Vec2 model)"),XIe.forEach(t),dSr=i(we),xC=n(we,"LI",{});var zIe=s(xC);H7e=n(zIe,"STRONG",{});var CAt=s(H7e);cSr=r(CAt,"xlm-roberta"),CAt.forEach(t),fSr=r(zIe," \u2014 "),jY=n(zIe,"A",{href:!0});var wAt=s(jY);mSr=r(wAt,"FlaxXLMRobertaForMaskedLM"),wAt.forEach(t),gSr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),we.forEach(t),hSr=i(Kl),T($C.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Nje=i(f),Qc=n(f,"H2",{class:!0});var QGe=s(Qc);kC=n(QGe,"A",{id:!0,class:!0,href:!0});var AAt=s(kC);U7e=n(AAt,"SPAN",{});var yAt=s(U7e);T(Yx.$$.fragment,yAt),yAt.forEach(t),AAt.forEach(t),pSr=i(QGe),J7e=n(QGe,"SPAN",{});var LAt=s(J7e);uSr=r(LAt,"FlaxAutoModelForMaskedLM"),LAt.forEach(t),QGe.forEach(t),jje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(Kx.$$.fragment,Zl),_Sr=i(Zl),Hc=n(Zl,"P",{});var Hee=s(Hc);bSr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=n(Hee,"A",{href:!0});var xAt=s(DY);vSr=r(xAt,"from_pretrained()"),xAt.forEach(t),FSr=r(Hee," class method or the "),GY=n(Hee,"A",{href:!0});var $At=s(GY);TSr=r($At,"from_config()"),$At.forEach(t),MSr=r(Hee,` class
method.`),Hee.forEach(t),ESr=i(Zl),Zx=n(Zl,"P",{});var HGe=s(Zx);CSr=r(HGe,"This class cannot be instantiated directly using "),Y7e=n(HGe,"CODE",{});var kAt=s(Y7e);wSr=r(kAt,"__init__()"),kAt.forEach(t),ASr=r(HGe," (throws an error)."),HGe.forEach(t),ySr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var f0=s(Qt);T(e9.$$.fragment,f0),LSr=i(f0),K7e=n(f0,"P",{});var SAt=s(K7e);xSr=r(SAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SAt.forEach(t),$Sr=i(f0),Uc=n(f0,"P",{});var Uee=s(Uc);kSr=r(Uee,`Note:
Loading a model from its configuration file does `),Z7e=n(Uee,"STRONG",{});var RAt=s(Z7e);SSr=r(RAt,"not"),RAt.forEach(t),RSr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Uee,"A",{href:!0});var PAt=s(OY);PSr=r(PAt,"from_pretrained()"),PAt.forEach(t),BSr=r(Uee," to load the model weights."),Uee.forEach(t),ISr=i(f0),T(SC.$$.fragment,f0),f0.forEach(t),qSr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(o9.$$.fragment,ei),NSr=i(ei),eMe=n(ei,"P",{});var BAt=s(eMe);jSr=r(BAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BAt.forEach(t),DSr=i(ei),Mn=n(ei,"P",{});var m0=s(Mn);GSr=r(m0,"The model class to instantiate is selected based on the "),oMe=n(m0,"CODE",{});var IAt=s(oMe);OSr=r(IAt,"model_type"),IAt.forEach(t),VSr=r(m0,` property of the config object (either
passed as an argument or loaded from `),rMe=n(m0,"CODE",{});var qAt=s(rMe);XSr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),zSr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(m0,"CODE",{});var NAt=s(tMe);WSr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),QSr=r(m0,":"),m0.forEach(t),HSr=i(ei),Le=n(ei,"UL",{});var Ie=s(Le);RC=n(Ie,"LI",{});var WIe=s(RC);aMe=n(WIe,"STRONG",{});var jAt=s(aMe);USr=r(jAt,"albert"),jAt.forEach(t),JSr=r(WIe," \u2014 "),VY=n(WIe,"A",{href:!0});var DAt=s(VY);YSr=r(DAt,"FlaxAlbertForMaskedLM"),DAt.forEach(t),KSr=r(WIe," (ALBERT model)"),WIe.forEach(t),ZSr=i(Ie),PC=n(Ie,"LI",{});var QIe=s(PC);nMe=n(QIe,"STRONG",{});var GAt=s(nMe);eRr=r(GAt,"bart"),GAt.forEach(t),oRr=r(QIe," \u2014 "),XY=n(QIe,"A",{href:!0});var OAt=s(XY);rRr=r(OAt,"FlaxBartForConditionalGeneration"),OAt.forEach(t),tRr=r(QIe," (BART model)"),QIe.forEach(t),aRr=i(Ie),BC=n(Ie,"LI",{});var HIe=s(BC);sMe=n(HIe,"STRONG",{});var VAt=s(sMe);nRr=r(VAt,"bert"),VAt.forEach(t),sRr=r(HIe," \u2014 "),zY=n(HIe,"A",{href:!0});var XAt=s(zY);lRr=r(XAt,"FlaxBertForMaskedLM"),XAt.forEach(t),iRr=r(HIe," (BERT model)"),HIe.forEach(t),dRr=i(Ie),IC=n(Ie,"LI",{});var UIe=s(IC);lMe=n(UIe,"STRONG",{});var zAt=s(lMe);cRr=r(zAt,"big_bird"),zAt.forEach(t),fRr=r(UIe," \u2014 "),WY=n(UIe,"A",{href:!0});var WAt=s(WY);mRr=r(WAt,"FlaxBigBirdForMaskedLM"),WAt.forEach(t),gRr=r(UIe," (BigBird model)"),UIe.forEach(t),hRr=i(Ie),qC=n(Ie,"LI",{});var JIe=s(qC);iMe=n(JIe,"STRONG",{});var QAt=s(iMe);pRr=r(QAt,"distilbert"),QAt.forEach(t),uRr=r(JIe," \u2014 "),QY=n(JIe,"A",{href:!0});var HAt=s(QY);_Rr=r(HAt,"FlaxDistilBertForMaskedLM"),HAt.forEach(t),bRr=r(JIe," (DistilBERT model)"),JIe.forEach(t),vRr=i(Ie),NC=n(Ie,"LI",{});var YIe=s(NC);dMe=n(YIe,"STRONG",{});var UAt=s(dMe);FRr=r(UAt,"electra"),UAt.forEach(t),TRr=r(YIe," \u2014 "),HY=n(YIe,"A",{href:!0});var JAt=s(HY);MRr=r(JAt,"FlaxElectraForMaskedLM"),JAt.forEach(t),ERr=r(YIe," (ELECTRA model)"),YIe.forEach(t),CRr=i(Ie),jC=n(Ie,"LI",{});var KIe=s(jC);cMe=n(KIe,"STRONG",{});var YAt=s(cMe);wRr=r(YAt,"mbart"),YAt.forEach(t),ARr=r(KIe," \u2014 "),UY=n(KIe,"A",{href:!0});var KAt=s(UY);yRr=r(KAt,"FlaxMBartForConditionalGeneration"),KAt.forEach(t),LRr=r(KIe," (mBART model)"),KIe.forEach(t),xRr=i(Ie),DC=n(Ie,"LI",{});var ZIe=s(DC);fMe=n(ZIe,"STRONG",{});var ZAt=s(fMe);$Rr=r(ZAt,"roberta"),ZAt.forEach(t),kRr=r(ZIe," \u2014 "),JY=n(ZIe,"A",{href:!0});var eyt=s(JY);SRr=r(eyt,"FlaxRobertaForMaskedLM"),eyt.forEach(t),RRr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),PRr=i(Ie),GC=n(Ie,"LI",{});var eqe=s(GC);mMe=n(eqe,"STRONG",{});var oyt=s(mMe);BRr=r(oyt,"roformer"),oyt.forEach(t),IRr=r(eqe," \u2014 "),YY=n(eqe,"A",{href:!0});var ryt=s(YY);qRr=r(ryt,"FlaxRoFormerForMaskedLM"),ryt.forEach(t),NRr=r(eqe," (RoFormer model)"),eqe.forEach(t),jRr=i(Ie),OC=n(Ie,"LI",{});var oqe=s(OC);gMe=n(oqe,"STRONG",{});var tyt=s(gMe);DRr=r(tyt,"xlm-roberta"),tyt.forEach(t),GRr=r(oqe," \u2014 "),KY=n(oqe,"A",{href:!0});var ayt=s(KY);ORr=r(ayt,"FlaxXLMRobertaForMaskedLM"),ayt.forEach(t),VRr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),Ie.forEach(t),XRr=i(ei),T(VC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Dje=i(f),Jc=n(f,"H2",{class:!0});var UGe=s(Jc);XC=n(UGe,"A",{id:!0,class:!0,href:!0});var nyt=s(XC);hMe=n(nyt,"SPAN",{});var syt=s(hMe);T(r9.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),zRr=i(UGe),pMe=n(UGe,"SPAN",{});var lyt=s(pMe);WRr=r(lyt,"FlaxAutoModelForSeq2SeqLM"),lyt.forEach(t),UGe.forEach(t),Gje=i(f),_r=n(f,"DIV",{class:!0});var oi=s(_r);T(t9.$$.fragment,oi),QRr=i(oi),Yc=n(oi,"P",{});var Jee=s(Yc);HRr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=n(Jee,"A",{href:!0});var iyt=s(ZY);URr=r(iyt,"from_pretrained()"),iyt.forEach(t),JRr=r(Jee," class method or the "),eK=n(Jee,"A",{href:!0});var dyt=s(eK);YRr=r(dyt,"from_config()"),dyt.forEach(t),KRr=r(Jee,` class
method.`),Jee.forEach(t),ZRr=i(oi),a9=n(oi,"P",{});var JGe=s(a9);ePr=r(JGe,"This class cannot be instantiated directly using "),uMe=n(JGe,"CODE",{});var cyt=s(uMe);oPr=r(cyt,"__init__()"),cyt.forEach(t),rPr=r(JGe," (throws an error)."),JGe.forEach(t),tPr=i(oi),Ht=n(oi,"DIV",{class:!0});var g0=s(Ht);T(n9.$$.fragment,g0),aPr=i(g0),_Me=n(g0,"P",{});var fyt=s(_Me);nPr=r(fyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fyt.forEach(t),sPr=i(g0),Kc=n(g0,"P",{});var Yee=s(Kc);lPr=r(Yee,`Note:
Loading a model from its configuration file does `),bMe=n(Yee,"STRONG",{});var myt=s(bMe);iPr=r(myt,"not"),myt.forEach(t),dPr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(Yee,"A",{href:!0});var gyt=s(oK);cPr=r(gyt,"from_pretrained()"),gyt.forEach(t),fPr=r(Yee," to load the model weights."),Yee.forEach(t),mPr=i(g0),T(zC.$$.fragment,g0),g0.forEach(t),gPr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(s9.$$.fragment,ri),hPr=i(ri),vMe=n(ri,"P",{});var hyt=s(vMe);pPr=r(hyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hyt.forEach(t),uPr=i(ri),En=n(ri,"P",{});var h0=s(En);_Pr=r(h0,"The model class to instantiate is selected based on the "),FMe=n(h0,"CODE",{});var pyt=s(FMe);bPr=r(pyt,"model_type"),pyt.forEach(t),vPr=r(h0,` property of the config object (either
passed as an argument or loaded from `),TMe=n(h0,"CODE",{});var uyt=s(TMe);FPr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),TPr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(h0,"CODE",{});var _yt=s(MMe);MPr=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),EPr=r(h0,":"),h0.forEach(t),CPr=i(ri),Pe=n(ri,"UL",{});var ze=s(Pe);WC=n(ze,"LI",{});var rqe=s(WC);EMe=n(rqe,"STRONG",{});var byt=s(EMe);wPr=r(byt,"bart"),byt.forEach(t),APr=r(rqe," \u2014 "),rK=n(rqe,"A",{href:!0});var vyt=s(rK);yPr=r(vyt,"FlaxBartForConditionalGeneration"),vyt.forEach(t),LPr=r(rqe," (BART model)"),rqe.forEach(t),xPr=i(ze),QC=n(ze,"LI",{});var tqe=s(QC);CMe=n(tqe,"STRONG",{});var Fyt=s(CMe);$Pr=r(Fyt,"blenderbot"),Fyt.forEach(t),kPr=r(tqe," \u2014 "),tK=n(tqe,"A",{href:!0});var Tyt=s(tK);SPr=r(Tyt,"FlaxBlenderbotForConditionalGeneration"),Tyt.forEach(t),RPr=r(tqe," (Blenderbot model)"),tqe.forEach(t),PPr=i(ze),HC=n(ze,"LI",{});var aqe=s(HC);wMe=n(aqe,"STRONG",{});var Myt=s(wMe);BPr=r(Myt,"blenderbot-small"),Myt.forEach(t),IPr=r(aqe," \u2014 "),aK=n(aqe,"A",{href:!0});var Eyt=s(aK);qPr=r(Eyt,"FlaxBlenderbotSmallForConditionalGeneration"),Eyt.forEach(t),NPr=r(aqe," (BlenderbotSmall model)"),aqe.forEach(t),jPr=i(ze),UC=n(ze,"LI",{});var nqe=s(UC);AMe=n(nqe,"STRONG",{});var Cyt=s(AMe);DPr=r(Cyt,"encoder-decoder"),Cyt.forEach(t),GPr=r(nqe," \u2014 "),nK=n(nqe,"A",{href:!0});var wyt=s(nK);OPr=r(wyt,"FlaxEncoderDecoderModel"),wyt.forEach(t),VPr=r(nqe," (Encoder decoder model)"),nqe.forEach(t),XPr=i(ze),JC=n(ze,"LI",{});var sqe=s(JC);yMe=n(sqe,"STRONG",{});var Ayt=s(yMe);zPr=r(Ayt,"marian"),Ayt.forEach(t),WPr=r(sqe," \u2014 "),sK=n(sqe,"A",{href:!0});var yyt=s(sK);QPr=r(yyt,"FlaxMarianMTModel"),yyt.forEach(t),HPr=r(sqe," (Marian model)"),sqe.forEach(t),UPr=i(ze),YC=n(ze,"LI",{});var lqe=s(YC);LMe=n(lqe,"STRONG",{});var Lyt=s(LMe);JPr=r(Lyt,"mbart"),Lyt.forEach(t),YPr=r(lqe," \u2014 "),lK=n(lqe,"A",{href:!0});var xyt=s(lK);KPr=r(xyt,"FlaxMBartForConditionalGeneration"),xyt.forEach(t),ZPr=r(lqe," (mBART model)"),lqe.forEach(t),eBr=i(ze),KC=n(ze,"LI",{});var iqe=s(KC);xMe=n(iqe,"STRONG",{});var $yt=s(xMe);oBr=r($yt,"mt5"),$yt.forEach(t),rBr=r(iqe," \u2014 "),iK=n(iqe,"A",{href:!0});var kyt=s(iK);tBr=r(kyt,"FlaxMT5ForConditionalGeneration"),kyt.forEach(t),aBr=r(iqe," (mT5 model)"),iqe.forEach(t),nBr=i(ze),ZC=n(ze,"LI",{});var dqe=s(ZC);$Me=n(dqe,"STRONG",{});var Syt=s($Me);sBr=r(Syt,"pegasus"),Syt.forEach(t),lBr=r(dqe," \u2014 "),dK=n(dqe,"A",{href:!0});var Ryt=s(dK);iBr=r(Ryt,"FlaxPegasusForConditionalGeneration"),Ryt.forEach(t),dBr=r(dqe," (Pegasus model)"),dqe.forEach(t),cBr=i(ze),e5=n(ze,"LI",{});var cqe=s(e5);kMe=n(cqe,"STRONG",{});var Pyt=s(kMe);fBr=r(Pyt,"t5"),Pyt.forEach(t),mBr=r(cqe," \u2014 "),cK=n(cqe,"A",{href:!0});var Byt=s(cK);gBr=r(Byt,"FlaxT5ForConditionalGeneration"),Byt.forEach(t),hBr=r(cqe," (T5 model)"),cqe.forEach(t),ze.forEach(t),pBr=i(ri),T(o5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Oje=i(f),Zc=n(f,"H2",{class:!0});var YGe=s(Zc);r5=n(YGe,"A",{id:!0,class:!0,href:!0});var Iyt=s(r5);SMe=n(Iyt,"SPAN",{});var qyt=s(SMe);T(l9.$$.fragment,qyt),qyt.forEach(t),Iyt.forEach(t),uBr=i(YGe),RMe=n(YGe,"SPAN",{});var Nyt=s(RMe);_Br=r(Nyt,"FlaxAutoModelForSequenceClassification"),Nyt.forEach(t),YGe.forEach(t),Vje=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(i9.$$.fragment,ti),bBr=i(ti),ef=n(ti,"P",{});var Kee=s(ef);vBr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=n(Kee,"A",{href:!0});var jyt=s(fK);FBr=r(jyt,"from_pretrained()"),jyt.forEach(t),TBr=r(Kee," class method or the "),mK=n(Kee,"A",{href:!0});var Dyt=s(mK);MBr=r(Dyt,"from_config()"),Dyt.forEach(t),EBr=r(Kee,` class
method.`),Kee.forEach(t),CBr=i(ti),d9=n(ti,"P",{});var KGe=s(d9);wBr=r(KGe,"This class cannot be instantiated directly using "),PMe=n(KGe,"CODE",{});var Gyt=s(PMe);ABr=r(Gyt,"__init__()"),Gyt.forEach(t),yBr=r(KGe," (throws an error)."),KGe.forEach(t),LBr=i(ti),Ut=n(ti,"DIV",{class:!0});var p0=s(Ut);T(c9.$$.fragment,p0),xBr=i(p0),BMe=n(p0,"P",{});var Oyt=s(BMe);$Br=r(Oyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oyt.forEach(t),kBr=i(p0),of=n(p0,"P",{});var Zee=s(of);SBr=r(Zee,`Note:
Loading a model from its configuration file does `),IMe=n(Zee,"STRONG",{});var Vyt=s(IMe);RBr=r(Vyt,"not"),Vyt.forEach(t),PBr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Zee,"A",{href:!0});var Xyt=s(gK);BBr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),IBr=r(Zee," to load the model weights."),Zee.forEach(t),qBr=i(p0),T(t5.$$.fragment,p0),p0.forEach(t),NBr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(f9.$$.fragment,ai),jBr=i(ai),qMe=n(ai,"P",{});var zyt=s(qMe);DBr=r(zyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zyt.forEach(t),GBr=i(ai),Cn=n(ai,"P",{});var u0=s(Cn);OBr=r(u0,"The model class to instantiate is selected based on the "),NMe=n(u0,"CODE",{});var Wyt=s(NMe);VBr=r(Wyt,"model_type"),Wyt.forEach(t),XBr=r(u0,` property of the config object (either
passed as an argument or loaded from `),jMe=n(u0,"CODE",{});var Qyt=s(jMe);zBr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),WBr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(u0,"CODE",{});var Hyt=s(DMe);QBr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),HBr=r(u0,":"),u0.forEach(t),UBr=i(ai),xe=n(ai,"UL",{});var qe=s(xe);a5=n(qe,"LI",{});var fqe=s(a5);GMe=n(fqe,"STRONG",{});var Uyt=s(GMe);JBr=r(Uyt,"albert"),Uyt.forEach(t),YBr=r(fqe," \u2014 "),hK=n(fqe,"A",{href:!0});var Jyt=s(hK);KBr=r(Jyt,"FlaxAlbertForSequenceClassification"),Jyt.forEach(t),ZBr=r(fqe," (ALBERT model)"),fqe.forEach(t),eIr=i(qe),n5=n(qe,"LI",{});var mqe=s(n5);OMe=n(mqe,"STRONG",{});var Yyt=s(OMe);oIr=r(Yyt,"bart"),Yyt.forEach(t),rIr=r(mqe," \u2014 "),pK=n(mqe,"A",{href:!0});var Kyt=s(pK);tIr=r(Kyt,"FlaxBartForSequenceClassification"),Kyt.forEach(t),aIr=r(mqe," (BART model)"),mqe.forEach(t),nIr=i(qe),s5=n(qe,"LI",{});var gqe=s(s5);VMe=n(gqe,"STRONG",{});var Zyt=s(VMe);sIr=r(Zyt,"bert"),Zyt.forEach(t),lIr=r(gqe," \u2014 "),uK=n(gqe,"A",{href:!0});var eLt=s(uK);iIr=r(eLt,"FlaxBertForSequenceClassification"),eLt.forEach(t),dIr=r(gqe," (BERT model)"),gqe.forEach(t),cIr=i(qe),l5=n(qe,"LI",{});var hqe=s(l5);XMe=n(hqe,"STRONG",{});var oLt=s(XMe);fIr=r(oLt,"big_bird"),oLt.forEach(t),mIr=r(hqe," \u2014 "),_K=n(hqe,"A",{href:!0});var rLt=s(_K);gIr=r(rLt,"FlaxBigBirdForSequenceClassification"),rLt.forEach(t),hIr=r(hqe," (BigBird model)"),hqe.forEach(t),pIr=i(qe),i5=n(qe,"LI",{});var pqe=s(i5);zMe=n(pqe,"STRONG",{});var tLt=s(zMe);uIr=r(tLt,"distilbert"),tLt.forEach(t),_Ir=r(pqe," \u2014 "),bK=n(pqe,"A",{href:!0});var aLt=s(bK);bIr=r(aLt,"FlaxDistilBertForSequenceClassification"),aLt.forEach(t),vIr=r(pqe," (DistilBERT model)"),pqe.forEach(t),FIr=i(qe),d5=n(qe,"LI",{});var uqe=s(d5);WMe=n(uqe,"STRONG",{});var nLt=s(WMe);TIr=r(nLt,"electra"),nLt.forEach(t),MIr=r(uqe," \u2014 "),vK=n(uqe,"A",{href:!0});var sLt=s(vK);EIr=r(sLt,"FlaxElectraForSequenceClassification"),sLt.forEach(t),CIr=r(uqe," (ELECTRA model)"),uqe.forEach(t),wIr=i(qe),c5=n(qe,"LI",{});var _qe=s(c5);QMe=n(_qe,"STRONG",{});var lLt=s(QMe);AIr=r(lLt,"mbart"),lLt.forEach(t),yIr=r(_qe," \u2014 "),FK=n(_qe,"A",{href:!0});var iLt=s(FK);LIr=r(iLt,"FlaxMBartForSequenceClassification"),iLt.forEach(t),xIr=r(_qe," (mBART model)"),_qe.forEach(t),$Ir=i(qe),f5=n(qe,"LI",{});var bqe=s(f5);HMe=n(bqe,"STRONG",{});var dLt=s(HMe);kIr=r(dLt,"roberta"),dLt.forEach(t),SIr=r(bqe," \u2014 "),TK=n(bqe,"A",{href:!0});var cLt=s(TK);RIr=r(cLt,"FlaxRobertaForSequenceClassification"),cLt.forEach(t),PIr=r(bqe," (RoBERTa model)"),bqe.forEach(t),BIr=i(qe),m5=n(qe,"LI",{});var vqe=s(m5);UMe=n(vqe,"STRONG",{});var fLt=s(UMe);IIr=r(fLt,"roformer"),fLt.forEach(t),qIr=r(vqe," \u2014 "),MK=n(vqe,"A",{href:!0});var mLt=s(MK);NIr=r(mLt,"FlaxRoFormerForSequenceClassification"),mLt.forEach(t),jIr=r(vqe," (RoFormer model)"),vqe.forEach(t),DIr=i(qe),g5=n(qe,"LI",{});var Fqe=s(g5);JMe=n(Fqe,"STRONG",{});var gLt=s(JMe);GIr=r(gLt,"xlm-roberta"),gLt.forEach(t),OIr=r(Fqe," \u2014 "),EK=n(Fqe,"A",{href:!0});var hLt=s(EK);VIr=r(hLt,"FlaxXLMRobertaForSequenceClassification"),hLt.forEach(t),XIr=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),qe.forEach(t),zIr=i(ai),T(h5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Xje=i(f),rf=n(f,"H2",{class:!0});var ZGe=s(rf);p5=n(ZGe,"A",{id:!0,class:!0,href:!0});var pLt=s(p5);YMe=n(pLt,"SPAN",{});var uLt=s(YMe);T(m9.$$.fragment,uLt),uLt.forEach(t),pLt.forEach(t),WIr=i(ZGe),KMe=n(ZGe,"SPAN",{});var _Lt=s(KMe);QIr=r(_Lt,"FlaxAutoModelForQuestionAnswering"),_Lt.forEach(t),ZGe.forEach(t),zje=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(g9.$$.fragment,ni),HIr=i(ni),tf=n(ni,"P",{});var eoe=s(tf);UIr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=n(eoe,"A",{href:!0});var bLt=s(CK);JIr=r(bLt,"from_pretrained()"),bLt.forEach(t),YIr=r(eoe," class method or the "),wK=n(eoe,"A",{href:!0});var vLt=s(wK);KIr=r(vLt,"from_config()"),vLt.forEach(t),ZIr=r(eoe,` class
method.`),eoe.forEach(t),eqr=i(ni),h9=n(ni,"P",{});var eOe=s(h9);oqr=r(eOe,"This class cannot be instantiated directly using "),ZMe=n(eOe,"CODE",{});var FLt=s(ZMe);rqr=r(FLt,"__init__()"),FLt.forEach(t),tqr=r(eOe," (throws an error)."),eOe.forEach(t),aqr=i(ni),Jt=n(ni,"DIV",{class:!0});var _0=s(Jt);T(p9.$$.fragment,_0),nqr=i(_0),e4e=n(_0,"P",{});var TLt=s(e4e);sqr=r(TLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TLt.forEach(t),lqr=i(_0),af=n(_0,"P",{});var ooe=s(af);iqr=r(ooe,`Note:
Loading a model from its configuration file does `),o4e=n(ooe,"STRONG",{});var MLt=s(o4e);dqr=r(MLt,"not"),MLt.forEach(t),cqr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(ooe,"A",{href:!0});var ELt=s(AK);fqr=r(ELt,"from_pretrained()"),ELt.forEach(t),mqr=r(ooe," to load the model weights."),ooe.forEach(t),gqr=i(_0),T(u5.$$.fragment,_0),_0.forEach(t),hqr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(u9.$$.fragment,si),pqr=i(si),r4e=n(si,"P",{});var CLt=s(r4e);uqr=r(CLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CLt.forEach(t),_qr=i(si),wn=n(si,"P",{});var b0=s(wn);bqr=r(b0,"The model class to instantiate is selected based on the "),t4e=n(b0,"CODE",{});var wLt=s(t4e);vqr=r(wLt,"model_type"),wLt.forEach(t),Fqr=r(b0,` property of the config object (either
passed as an argument or loaded from `),a4e=n(b0,"CODE",{});var ALt=s(a4e);Tqr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),Mqr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(b0,"CODE",{});var yLt=s(n4e);Eqr=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),Cqr=r(b0,":"),b0.forEach(t),wqr=i(si),$e=n(si,"UL",{});var Ne=s($e);_5=n(Ne,"LI",{});var Tqe=s(_5);s4e=n(Tqe,"STRONG",{});var LLt=s(s4e);Aqr=r(LLt,"albert"),LLt.forEach(t),yqr=r(Tqe," \u2014 "),yK=n(Tqe,"A",{href:!0});var xLt=s(yK);Lqr=r(xLt,"FlaxAlbertForQuestionAnswering"),xLt.forEach(t),xqr=r(Tqe," (ALBERT model)"),Tqe.forEach(t),$qr=i(Ne),b5=n(Ne,"LI",{});var Mqe=s(b5);l4e=n(Mqe,"STRONG",{});var $Lt=s(l4e);kqr=r($Lt,"bart"),$Lt.forEach(t),Sqr=r(Mqe," \u2014 "),LK=n(Mqe,"A",{href:!0});var kLt=s(LK);Rqr=r(kLt,"FlaxBartForQuestionAnswering"),kLt.forEach(t),Pqr=r(Mqe," (BART model)"),Mqe.forEach(t),Bqr=i(Ne),v5=n(Ne,"LI",{});var Eqe=s(v5);i4e=n(Eqe,"STRONG",{});var SLt=s(i4e);Iqr=r(SLt,"bert"),SLt.forEach(t),qqr=r(Eqe," \u2014 "),xK=n(Eqe,"A",{href:!0});var RLt=s(xK);Nqr=r(RLt,"FlaxBertForQuestionAnswering"),RLt.forEach(t),jqr=r(Eqe," (BERT model)"),Eqe.forEach(t),Dqr=i(Ne),F5=n(Ne,"LI",{});var Cqe=s(F5);d4e=n(Cqe,"STRONG",{});var PLt=s(d4e);Gqr=r(PLt,"big_bird"),PLt.forEach(t),Oqr=r(Cqe," \u2014 "),$K=n(Cqe,"A",{href:!0});var BLt=s($K);Vqr=r(BLt,"FlaxBigBirdForQuestionAnswering"),BLt.forEach(t),Xqr=r(Cqe," (BigBird model)"),Cqe.forEach(t),zqr=i(Ne),T5=n(Ne,"LI",{});var wqe=s(T5);c4e=n(wqe,"STRONG",{});var ILt=s(c4e);Wqr=r(ILt,"distilbert"),ILt.forEach(t),Qqr=r(wqe," \u2014 "),kK=n(wqe,"A",{href:!0});var qLt=s(kK);Hqr=r(qLt,"FlaxDistilBertForQuestionAnswering"),qLt.forEach(t),Uqr=r(wqe," (DistilBERT model)"),wqe.forEach(t),Jqr=i(Ne),M5=n(Ne,"LI",{});var Aqe=s(M5);f4e=n(Aqe,"STRONG",{});var NLt=s(f4e);Yqr=r(NLt,"electra"),NLt.forEach(t),Kqr=r(Aqe," \u2014 "),SK=n(Aqe,"A",{href:!0});var jLt=s(SK);Zqr=r(jLt,"FlaxElectraForQuestionAnswering"),jLt.forEach(t),eNr=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),oNr=i(Ne),E5=n(Ne,"LI",{});var yqe=s(E5);m4e=n(yqe,"STRONG",{});var DLt=s(m4e);rNr=r(DLt,"mbart"),DLt.forEach(t),tNr=r(yqe," \u2014 "),RK=n(yqe,"A",{href:!0});var GLt=s(RK);aNr=r(GLt,"FlaxMBartForQuestionAnswering"),GLt.forEach(t),nNr=r(yqe," (mBART model)"),yqe.forEach(t),sNr=i(Ne),C5=n(Ne,"LI",{});var Lqe=s(C5);g4e=n(Lqe,"STRONG",{});var OLt=s(g4e);lNr=r(OLt,"roberta"),OLt.forEach(t),iNr=r(Lqe," \u2014 "),PK=n(Lqe,"A",{href:!0});var VLt=s(PK);dNr=r(VLt,"FlaxRobertaForQuestionAnswering"),VLt.forEach(t),cNr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),fNr=i(Ne),w5=n(Ne,"LI",{});var xqe=s(w5);h4e=n(xqe,"STRONG",{});var XLt=s(h4e);mNr=r(XLt,"roformer"),XLt.forEach(t),gNr=r(xqe," \u2014 "),BK=n(xqe,"A",{href:!0});var zLt=s(BK);hNr=r(zLt,"FlaxRoFormerForQuestionAnswering"),zLt.forEach(t),pNr=r(xqe," (RoFormer model)"),xqe.forEach(t),uNr=i(Ne),A5=n(Ne,"LI",{});var $qe=s(A5);p4e=n($qe,"STRONG",{});var WLt=s(p4e);_Nr=r(WLt,"xlm-roberta"),WLt.forEach(t),bNr=r($qe," \u2014 "),IK=n($qe,"A",{href:!0});var QLt=s(IK);vNr=r(QLt,"FlaxXLMRobertaForQuestionAnswering"),QLt.forEach(t),FNr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),Ne.forEach(t),TNr=i(si),T(y5.$$.fragment,si),si.forEach(t),ni.forEach(t),Wje=i(f),nf=n(f,"H2",{class:!0});var oOe=s(nf);L5=n(oOe,"A",{id:!0,class:!0,href:!0});var HLt=s(L5);u4e=n(HLt,"SPAN",{});var ULt=s(u4e);T(_9.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),MNr=i(oOe),_4e=n(oOe,"SPAN",{});var JLt=s(_4e);ENr=r(JLt,"FlaxAutoModelForTokenClassification"),JLt.forEach(t),oOe.forEach(t),Qje=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(b9.$$.fragment,li),CNr=i(li),sf=n(li,"P",{});var roe=s(sf);wNr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qK=n(roe,"A",{href:!0});var YLt=s(qK);ANr=r(YLt,"from_pretrained()"),YLt.forEach(t),yNr=r(roe," class method or the "),NK=n(roe,"A",{href:!0});var KLt=s(NK);LNr=r(KLt,"from_config()"),KLt.forEach(t),xNr=r(roe,` class
method.`),roe.forEach(t),$Nr=i(li),v9=n(li,"P",{});var rOe=s(v9);kNr=r(rOe,"This class cannot be instantiated directly using "),b4e=n(rOe,"CODE",{});var ZLt=s(b4e);SNr=r(ZLt,"__init__()"),ZLt.forEach(t),RNr=r(rOe," (throws an error)."),rOe.forEach(t),PNr=i(li),Yt=n(li,"DIV",{class:!0});var v0=s(Yt);T(F9.$$.fragment,v0),BNr=i(v0),v4e=n(v0,"P",{});var ext=s(v4e);INr=r(ext,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ext.forEach(t),qNr=i(v0),lf=n(v0,"P",{});var toe=s(lf);NNr=r(toe,`Note:
Loading a model from its configuration file does `),F4e=n(toe,"STRONG",{});var oxt=s(F4e);jNr=r(oxt,"not"),oxt.forEach(t),DNr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(toe,"A",{href:!0});var rxt=s(jK);GNr=r(rxt,"from_pretrained()"),rxt.forEach(t),ONr=r(toe," to load the model weights."),toe.forEach(t),VNr=i(v0),T(x5.$$.fragment,v0),v0.forEach(t),XNr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(T9.$$.fragment,ii),zNr=i(ii),T4e=n(ii,"P",{});var txt=s(T4e);WNr=r(txt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),txt.forEach(t),QNr=i(ii),An=n(ii,"P",{});var F0=s(An);HNr=r(F0,"The model class to instantiate is selected based on the "),M4e=n(F0,"CODE",{});var axt=s(M4e);UNr=r(axt,"model_type"),axt.forEach(t),JNr=r(F0,` property of the config object (either
passed as an argument or loaded from `),E4e=n(F0,"CODE",{});var nxt=s(E4e);YNr=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),KNr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(F0,"CODE",{});var sxt=s(C4e);ZNr=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),ejr=r(F0,":"),F0.forEach(t),ojr=i(ii),De=n(ii,"UL",{});var To=s(De);$5=n(To,"LI",{});var kqe=s($5);w4e=n(kqe,"STRONG",{});var lxt=s(w4e);rjr=r(lxt,"albert"),lxt.forEach(t),tjr=r(kqe," \u2014 "),DK=n(kqe,"A",{href:!0});var ixt=s(DK);ajr=r(ixt,"FlaxAlbertForTokenClassification"),ixt.forEach(t),njr=r(kqe," (ALBERT model)"),kqe.forEach(t),sjr=i(To),k5=n(To,"LI",{});var Sqe=s(k5);A4e=n(Sqe,"STRONG",{});var dxt=s(A4e);ljr=r(dxt,"bert"),dxt.forEach(t),ijr=r(Sqe," \u2014 "),GK=n(Sqe,"A",{href:!0});var cxt=s(GK);djr=r(cxt,"FlaxBertForTokenClassification"),cxt.forEach(t),cjr=r(Sqe," (BERT model)"),Sqe.forEach(t),fjr=i(To),S5=n(To,"LI",{});var Rqe=s(S5);y4e=n(Rqe,"STRONG",{});var fxt=s(y4e);mjr=r(fxt,"big_bird"),fxt.forEach(t),gjr=r(Rqe," \u2014 "),OK=n(Rqe,"A",{href:!0});var mxt=s(OK);hjr=r(mxt,"FlaxBigBirdForTokenClassification"),mxt.forEach(t),pjr=r(Rqe," (BigBird model)"),Rqe.forEach(t),ujr=i(To),R5=n(To,"LI",{});var Pqe=s(R5);L4e=n(Pqe,"STRONG",{});var gxt=s(L4e);_jr=r(gxt,"distilbert"),gxt.forEach(t),bjr=r(Pqe," \u2014 "),VK=n(Pqe,"A",{href:!0});var hxt=s(VK);vjr=r(hxt,"FlaxDistilBertForTokenClassification"),hxt.forEach(t),Fjr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),Tjr=i(To),P5=n(To,"LI",{});var Bqe=s(P5);x4e=n(Bqe,"STRONG",{});var pxt=s(x4e);Mjr=r(pxt,"electra"),pxt.forEach(t),Ejr=r(Bqe," \u2014 "),XK=n(Bqe,"A",{href:!0});var uxt=s(XK);Cjr=r(uxt,"FlaxElectraForTokenClassification"),uxt.forEach(t),wjr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),Ajr=i(To),B5=n(To,"LI",{});var Iqe=s(B5);$4e=n(Iqe,"STRONG",{});var _xt=s($4e);yjr=r(_xt,"roberta"),_xt.forEach(t),Ljr=r(Iqe," \u2014 "),zK=n(Iqe,"A",{href:!0});var bxt=s(zK);xjr=r(bxt,"FlaxRobertaForTokenClassification"),bxt.forEach(t),$jr=r(Iqe," (RoBERTa model)"),Iqe.forEach(t),kjr=i(To),I5=n(To,"LI",{});var qqe=s(I5);k4e=n(qqe,"STRONG",{});var vxt=s(k4e);Sjr=r(vxt,"roformer"),vxt.forEach(t),Rjr=r(qqe," \u2014 "),WK=n(qqe,"A",{href:!0});var Fxt=s(WK);Pjr=r(Fxt,"FlaxRoFormerForTokenClassification"),Fxt.forEach(t),Bjr=r(qqe," (RoFormer model)"),qqe.forEach(t),Ijr=i(To),q5=n(To,"LI",{});var Nqe=s(q5);S4e=n(Nqe,"STRONG",{});var Txt=s(S4e);qjr=r(Txt,"xlm-roberta"),Txt.forEach(t),Njr=r(Nqe," \u2014 "),QK=n(Nqe,"A",{href:!0});var Mxt=s(QK);jjr=r(Mxt,"FlaxXLMRobertaForTokenClassification"),Mxt.forEach(t),Djr=r(Nqe," (XLM-RoBERTa model)"),Nqe.forEach(t),To.forEach(t),Gjr=i(ii),T(N5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Hje=i(f),df=n(f,"H2",{class:!0});var tOe=s(df);j5=n(tOe,"A",{id:!0,class:!0,href:!0});var Ext=s(j5);R4e=n(Ext,"SPAN",{});var Cxt=s(R4e);T(M9.$$.fragment,Cxt),Cxt.forEach(t),Ext.forEach(t),Ojr=i(tOe),P4e=n(tOe,"SPAN",{});var wxt=s(P4e);Vjr=r(wxt,"FlaxAutoModelForMultipleChoice"),wxt.forEach(t),tOe.forEach(t),Uje=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(E9.$$.fragment,di),Xjr=i(di),cf=n(di,"P",{});var aoe=s(cf);zjr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(aoe,"A",{href:!0});var Axt=s(HK);Wjr=r(Axt,"from_pretrained()"),Axt.forEach(t),Qjr=r(aoe," class method or the "),UK=n(aoe,"A",{href:!0});var yxt=s(UK);Hjr=r(yxt,"from_config()"),yxt.forEach(t),Ujr=r(aoe,` class
method.`),aoe.forEach(t),Jjr=i(di),C9=n(di,"P",{});var aOe=s(C9);Yjr=r(aOe,"This class cannot be instantiated directly using "),B4e=n(aOe,"CODE",{});var Lxt=s(B4e);Kjr=r(Lxt,"__init__()"),Lxt.forEach(t),Zjr=r(aOe," (throws an error)."),aOe.forEach(t),eDr=i(di),Kt=n(di,"DIV",{class:!0});var T0=s(Kt);T(w9.$$.fragment,T0),oDr=i(T0),I4e=n(T0,"P",{});var xxt=s(I4e);rDr=r(xxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xxt.forEach(t),tDr=i(T0),ff=n(T0,"P",{});var noe=s(ff);aDr=r(noe,`Note:
Loading a model from its configuration file does `),q4e=n(noe,"STRONG",{});var $xt=s(q4e);nDr=r($xt,"not"),$xt.forEach(t),sDr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(noe,"A",{href:!0});var kxt=s(JK);lDr=r(kxt,"from_pretrained()"),kxt.forEach(t),iDr=r(noe," to load the model weights."),noe.forEach(t),dDr=i(T0),T(D5.$$.fragment,T0),T0.forEach(t),cDr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(A9.$$.fragment,ci),fDr=i(ci),N4e=n(ci,"P",{});var Sxt=s(N4e);mDr=r(Sxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sxt.forEach(t),gDr=i(ci),yn=n(ci,"P",{});var M0=s(yn);hDr=r(M0,"The model class to instantiate is selected based on the "),j4e=n(M0,"CODE",{});var Rxt=s(j4e);pDr=r(Rxt,"model_type"),Rxt.forEach(t),uDr=r(M0,` property of the config object (either
passed as an argument or loaded from `),D4e=n(M0,"CODE",{});var Pxt=s(D4e);_Dr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),bDr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(M0,"CODE",{});var Bxt=s(G4e);vDr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),FDr=r(M0,":"),M0.forEach(t),TDr=i(ci),Ge=n(ci,"UL",{});var Mo=s(Ge);G5=n(Mo,"LI",{});var jqe=s(G5);O4e=n(jqe,"STRONG",{});var Ixt=s(O4e);MDr=r(Ixt,"albert"),Ixt.forEach(t),EDr=r(jqe," \u2014 "),YK=n(jqe,"A",{href:!0});var qxt=s(YK);CDr=r(qxt,"FlaxAlbertForMultipleChoice"),qxt.forEach(t),wDr=r(jqe," (ALBERT model)"),jqe.forEach(t),ADr=i(Mo),O5=n(Mo,"LI",{});var Dqe=s(O5);V4e=n(Dqe,"STRONG",{});var Nxt=s(V4e);yDr=r(Nxt,"bert"),Nxt.forEach(t),LDr=r(Dqe," \u2014 "),KK=n(Dqe,"A",{href:!0});var jxt=s(KK);xDr=r(jxt,"FlaxBertForMultipleChoice"),jxt.forEach(t),$Dr=r(Dqe," (BERT model)"),Dqe.forEach(t),kDr=i(Mo),V5=n(Mo,"LI",{});var Gqe=s(V5);X4e=n(Gqe,"STRONG",{});var Dxt=s(X4e);SDr=r(Dxt,"big_bird"),Dxt.forEach(t),RDr=r(Gqe," \u2014 "),ZK=n(Gqe,"A",{href:!0});var Gxt=s(ZK);PDr=r(Gxt,"FlaxBigBirdForMultipleChoice"),Gxt.forEach(t),BDr=r(Gqe," (BigBird model)"),Gqe.forEach(t),IDr=i(Mo),X5=n(Mo,"LI",{});var Oqe=s(X5);z4e=n(Oqe,"STRONG",{});var Oxt=s(z4e);qDr=r(Oxt,"distilbert"),Oxt.forEach(t),NDr=r(Oqe," \u2014 "),eZ=n(Oqe,"A",{href:!0});var Vxt=s(eZ);jDr=r(Vxt,"FlaxDistilBertForMultipleChoice"),Vxt.forEach(t),DDr=r(Oqe," (DistilBERT model)"),Oqe.forEach(t),GDr=i(Mo),z5=n(Mo,"LI",{});var Vqe=s(z5);W4e=n(Vqe,"STRONG",{});var Xxt=s(W4e);ODr=r(Xxt,"electra"),Xxt.forEach(t),VDr=r(Vqe," \u2014 "),oZ=n(Vqe,"A",{href:!0});var zxt=s(oZ);XDr=r(zxt,"FlaxElectraForMultipleChoice"),zxt.forEach(t),zDr=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),WDr=i(Mo),W5=n(Mo,"LI",{});var Xqe=s(W5);Q4e=n(Xqe,"STRONG",{});var Wxt=s(Q4e);QDr=r(Wxt,"roberta"),Wxt.forEach(t),HDr=r(Xqe," \u2014 "),rZ=n(Xqe,"A",{href:!0});var Qxt=s(rZ);UDr=r(Qxt,"FlaxRobertaForMultipleChoice"),Qxt.forEach(t),JDr=r(Xqe," (RoBERTa model)"),Xqe.forEach(t),YDr=i(Mo),Q5=n(Mo,"LI",{});var zqe=s(Q5);H4e=n(zqe,"STRONG",{});var Hxt=s(H4e);KDr=r(Hxt,"roformer"),Hxt.forEach(t),ZDr=r(zqe," \u2014 "),tZ=n(zqe,"A",{href:!0});var Uxt=s(tZ);eGr=r(Uxt,"FlaxRoFormerForMultipleChoice"),Uxt.forEach(t),oGr=r(zqe," (RoFormer model)"),zqe.forEach(t),rGr=i(Mo),H5=n(Mo,"LI",{});var Wqe=s(H5);U4e=n(Wqe,"STRONG",{});var Jxt=s(U4e);tGr=r(Jxt,"xlm-roberta"),Jxt.forEach(t),aGr=r(Wqe," \u2014 "),aZ=n(Wqe,"A",{href:!0});var Yxt=s(aZ);nGr=r(Yxt,"FlaxXLMRobertaForMultipleChoice"),Yxt.forEach(t),sGr=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),Mo.forEach(t),lGr=i(ci),T(U5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Jje=i(f),mf=n(f,"H2",{class:!0});var nOe=s(mf);J5=n(nOe,"A",{id:!0,class:!0,href:!0});var Kxt=s(J5);J4e=n(Kxt,"SPAN",{});var Zxt=s(J4e);T(y9.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),iGr=i(nOe),Y4e=n(nOe,"SPAN",{});var e9t=s(Y4e);dGr=r(e9t,"FlaxAutoModelForNextSentencePrediction"),e9t.forEach(t),nOe.forEach(t),Yje=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(L9.$$.fragment,fi),cGr=i(fi),gf=n(fi,"P",{});var soe=s(gf);fGr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=n(soe,"A",{href:!0});var o9t=s(nZ);mGr=r(o9t,"from_pretrained()"),o9t.forEach(t),gGr=r(soe," class method or the "),sZ=n(soe,"A",{href:!0});var r9t=s(sZ);hGr=r(r9t,"from_config()"),r9t.forEach(t),pGr=r(soe,` class
method.`),soe.forEach(t),uGr=i(fi),x9=n(fi,"P",{});var sOe=s(x9);_Gr=r(sOe,"This class cannot be instantiated directly using "),K4e=n(sOe,"CODE",{});var t9t=s(K4e);bGr=r(t9t,"__init__()"),t9t.forEach(t),vGr=r(sOe," (throws an error)."),sOe.forEach(t),FGr=i(fi),Zt=n(fi,"DIV",{class:!0});var E0=s(Zt);T($9.$$.fragment,E0),TGr=i(E0),Z4e=n(E0,"P",{});var a9t=s(Z4e);MGr=r(a9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),a9t.forEach(t),EGr=i(E0),hf=n(E0,"P",{});var loe=s(hf);CGr=r(loe,`Note:
Loading a model from its configuration file does `),eEe=n(loe,"STRONG",{});var n9t=s(eEe);wGr=r(n9t,"not"),n9t.forEach(t),AGr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(loe,"A",{href:!0});var s9t=s(lZ);yGr=r(s9t,"from_pretrained()"),s9t.forEach(t),LGr=r(loe," to load the model weights."),loe.forEach(t),xGr=i(E0),T(Y5.$$.fragment,E0),E0.forEach(t),$Gr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(k9.$$.fragment,mi),kGr=i(mi),oEe=n(mi,"P",{});var l9t=s(oEe);SGr=r(l9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l9t.forEach(t),RGr=i(mi),Ln=n(mi,"P",{});var C0=s(Ln);PGr=r(C0,"The model class to instantiate is selected based on the "),rEe=n(C0,"CODE",{});var i9t=s(rEe);BGr=r(i9t,"model_type"),i9t.forEach(t),IGr=r(C0,` property of the config object (either
passed as an argument or loaded from `),tEe=n(C0,"CODE",{});var d9t=s(tEe);qGr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),NGr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(C0,"CODE",{});var c9t=s(aEe);jGr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),DGr=r(C0,":"),C0.forEach(t),GGr=i(mi),nEe=n(mi,"UL",{});var f9t=s(nEe);K5=n(f9t,"LI",{});var Qqe=s(K5);sEe=n(Qqe,"STRONG",{});var m9t=s(sEe);OGr=r(m9t,"bert"),m9t.forEach(t),VGr=r(Qqe," \u2014 "),iZ=n(Qqe,"A",{href:!0});var g9t=s(iZ);XGr=r(g9t,"FlaxBertForNextSentencePrediction"),g9t.forEach(t),zGr=r(Qqe," (BERT model)"),Qqe.forEach(t),f9t.forEach(t),WGr=i(mi),T(Z5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Kje=i(f),pf=n(f,"H2",{class:!0});var lOe=s(pf);e3=n(lOe,"A",{id:!0,class:!0,href:!0});var h9t=s(e3);lEe=n(h9t,"SPAN",{});var p9t=s(lEe);T(S9.$$.fragment,p9t),p9t.forEach(t),h9t.forEach(t),QGr=i(lOe),iEe=n(lOe,"SPAN",{});var u9t=s(iEe);HGr=r(u9t,"FlaxAutoModelForImageClassification"),u9t.forEach(t),lOe.forEach(t),Zje=i(f),Er=n(f,"DIV",{class:!0});var gi=s(Er);T(R9.$$.fragment,gi),UGr=i(gi),uf=n(gi,"P",{});var ioe=s(uf);JGr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=n(ioe,"A",{href:!0});var _9t=s(dZ);YGr=r(_9t,"from_pretrained()"),_9t.forEach(t),KGr=r(ioe," class method or the "),cZ=n(ioe,"A",{href:!0});var b9t=s(cZ);ZGr=r(b9t,"from_config()"),b9t.forEach(t),eOr=r(ioe,` class
method.`),ioe.forEach(t),oOr=i(gi),P9=n(gi,"P",{});var iOe=s(P9);rOr=r(iOe,"This class cannot be instantiated directly using "),dEe=n(iOe,"CODE",{});var v9t=s(dEe);tOr=r(v9t,"__init__()"),v9t.forEach(t),aOr=r(iOe," (throws an error)."),iOe.forEach(t),nOr=i(gi),ea=n(gi,"DIV",{class:!0});var w0=s(ea);T(B9.$$.fragment,w0),sOr=i(w0),cEe=n(w0,"P",{});var F9t=s(cEe);lOr=r(F9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F9t.forEach(t),iOr=i(w0),_f=n(w0,"P",{});var doe=s(_f);dOr=r(doe,`Note:
Loading a model from its configuration file does `),fEe=n(doe,"STRONG",{});var T9t=s(fEe);cOr=r(T9t,"not"),T9t.forEach(t),fOr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(doe,"A",{href:!0});var M9t=s(fZ);mOr=r(M9t,"from_pretrained()"),M9t.forEach(t),gOr=r(doe," to load the model weights."),doe.forEach(t),hOr=i(w0),T(o3.$$.fragment,w0),w0.forEach(t),pOr=i(gi),Yr=n(gi,"DIV",{class:!0});var hi=s(Yr);T(I9.$$.fragment,hi),uOr=i(hi),mEe=n(hi,"P",{});var E9t=s(mEe);_Or=r(E9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E9t.forEach(t),bOr=i(hi),xn=n(hi,"P",{});var A0=s(xn);vOr=r(A0,"The model class to instantiate is selected based on the "),gEe=n(A0,"CODE",{});var C9t=s(gEe);FOr=r(C9t,"model_type"),C9t.forEach(t),TOr=r(A0,` property of the config object (either
passed as an argument or loaded from `),hEe=n(A0,"CODE",{});var w9t=s(hEe);MOr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),EOr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(A0,"CODE",{});var A9t=s(pEe);COr=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),wOr=r(A0,":"),A0.forEach(t),AOr=i(hi),q9=n(hi,"UL",{});var dOe=s(q9);r3=n(dOe,"LI",{});var Hqe=s(r3);uEe=n(Hqe,"STRONG",{});var y9t=s(uEe);yOr=r(y9t,"beit"),y9t.forEach(t),LOr=r(Hqe," \u2014 "),mZ=n(Hqe,"A",{href:!0});var L9t=s(mZ);xOr=r(L9t,"FlaxBeitForImageClassification"),L9t.forEach(t),$Or=r(Hqe," (BEiT model)"),Hqe.forEach(t),kOr=i(dOe),t3=n(dOe,"LI",{});var Uqe=s(t3);_Ee=n(Uqe,"STRONG",{});var x9t=s(_Ee);SOr=r(x9t,"vit"),x9t.forEach(t),ROr=r(Uqe," \u2014 "),gZ=n(Uqe,"A",{href:!0});var $9t=s(gZ);POr=r($9t,"FlaxViTForImageClassification"),$9t.forEach(t),BOr=r(Uqe," (ViT model)"),Uqe.forEach(t),dOe.forEach(t),IOr=i(hi),T(a3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),eDe=i(f),bf=n(f,"H2",{class:!0});var cOe=s(bf);n3=n(cOe,"A",{id:!0,class:!0,href:!0});var k9t=s(n3);bEe=n(k9t,"SPAN",{});var S9t=s(bEe);T(N9.$$.fragment,S9t),S9t.forEach(t),k9t.forEach(t),qOr=i(cOe),vEe=n(cOe,"SPAN",{});var R9t=s(vEe);NOr=r(R9t,"FlaxAutoModelForVision2Seq"),R9t.forEach(t),cOe.forEach(t),oDe=i(f),Cr=n(f,"DIV",{class:!0});var pi=s(Cr);T(j9.$$.fragment,pi),jOr=i(pi),vf=n(pi,"P",{});var coe=s(vf);DOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=n(coe,"A",{href:!0});var P9t=s(hZ);GOr=r(P9t,"from_pretrained()"),P9t.forEach(t),OOr=r(coe," class method or the "),pZ=n(coe,"A",{href:!0});var B9t=s(pZ);VOr=r(B9t,"from_config()"),B9t.forEach(t),XOr=r(coe,` class
method.`),coe.forEach(t),zOr=i(pi),D9=n(pi,"P",{});var fOe=s(D9);WOr=r(fOe,"This class cannot be instantiated directly using "),FEe=n(fOe,"CODE",{});var I9t=s(FEe);QOr=r(I9t,"__init__()"),I9t.forEach(t),HOr=r(fOe," (throws an error)."),fOe.forEach(t),UOr=i(pi),oa=n(pi,"DIV",{class:!0});var y0=s(oa);T(G9.$$.fragment,y0),JOr=i(y0),TEe=n(y0,"P",{});var q9t=s(TEe);YOr=r(q9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),q9t.forEach(t),KOr=i(y0),Ff=n(y0,"P",{});var foe=s(Ff);ZOr=r(foe,`Note:
Loading a model from its configuration file does `),MEe=n(foe,"STRONG",{});var N9t=s(MEe);eVr=r(N9t,"not"),N9t.forEach(t),oVr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(foe,"A",{href:!0});var j9t=s(uZ);rVr=r(j9t,"from_pretrained()"),j9t.forEach(t),tVr=r(foe," to load the model weights."),foe.forEach(t),aVr=i(y0),T(s3.$$.fragment,y0),y0.forEach(t),nVr=i(pi),Kr=n(pi,"DIV",{class:!0});var ui=s(Kr);T(O9.$$.fragment,ui),sVr=i(ui),EEe=n(ui,"P",{});var D9t=s(EEe);lVr=r(D9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D9t.forEach(t),iVr=i(ui),$n=n(ui,"P",{});var L0=s($n);dVr=r(L0,"The model class to instantiate is selected based on the "),CEe=n(L0,"CODE",{});var G9t=s(CEe);cVr=r(G9t,"model_type"),G9t.forEach(t),fVr=r(L0,` property of the config object (either
passed as an argument or loaded from `),wEe=n(L0,"CODE",{});var O9t=s(wEe);mVr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),gVr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(L0,"CODE",{});var V9t=s(AEe);hVr=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),pVr=r(L0,":"),L0.forEach(t),uVr=i(ui),yEe=n(ui,"UL",{});var X9t=s(yEe);l3=n(X9t,"LI",{});var Jqe=s(l3);LEe=n(Jqe,"STRONG",{});var z9t=s(LEe);_Vr=r(z9t,"vision-encoder-decoder"),z9t.forEach(t),bVr=r(Jqe," \u2014 "),_Z=n(Jqe,"A",{href:!0});var W9t=s(_Z);vVr=r(W9t,"FlaxVisionEncoderDecoderModel"),W9t.forEach(t),FVr=r(Jqe," (Vision Encoder decoder model)"),Jqe.forEach(t),X9t.forEach(t),TVr=i(ui),T(i3.$$.fragment,ui),ui.forEach(t),pi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Kkt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer"),c(Ei,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Ci,"class","relative group"),c($f,"id","transformers.AutoConfig"),c($f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($f,"href","#transformers.AutoConfig"),c(wi,"class","relative group"),c(ik,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(dk,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig"),c(ck,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig"),c(fk,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig"),c(mk,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig"),c(gk,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(hk,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig"),c(pk,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(uk,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_k,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(bk,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig"),c(vk,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig"),c(Fk,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig"),c(Tk,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig"),c(Mk,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig"),c(Ek,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ck,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtConfig"),c(wk,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ak,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(yk,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Lk,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig"),c(xk,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c($k,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(kk,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig"),c(Sk,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig"),c(Rk,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Pk,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig"),c(Bk,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig"),c(Ik,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig"),c(qk,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig"),c(jk,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig"),c(Dk,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig"),c(Gk,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ok,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig"),c(Vk,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig"),c(Xk,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config"),c(zk,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Wk,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig"),c(Zk,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig"),c(eS,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig"),c(oS,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig"),c(rS,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config"),c(tS,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig"),c(aS,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nS,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig"),c(sS,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lS,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(iS,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig"),c(dS,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config"),c(cS,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fS,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mS,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig"),c(gS,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig"),c(hS,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pS,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig"),c(uS,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_S,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bS,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vS,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagConfig"),c(FS,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmConfig"),c(TS,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig"),c(MS,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig"),c(ES,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig"),c(CS,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig"),c(wS,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig"),c(AS,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig"),c(yS,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig"),c(LS,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig"),c(xS,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig"),c($S,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig"),c(kS,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(RS,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(PS,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig"),c(BS,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(IS,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig"),c(qS,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config"),c(NS,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig"),c(jS,"href","/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(DS,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(GS,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig"),c(OS,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(VS,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(XS,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig"),c(zS,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig"),c(WS,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(QS,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(HS,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(US,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig"),c(JS,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(YS,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(KS,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ZS,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig"),c(eR,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig"),c(oR,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig"),c(rR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(tR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(aR,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(nR,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig"),c(sR,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig"),c(lR,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sg,"id","transformers.AutoTokenizer"),c(Sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sg,"href","#transformers.AutoTokenizer"),c(yi,"class","relative group"),c(iR,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(dR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(cR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizer"),c(mR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizerFast"),c(gR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizer"),c(hR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(pR,"href","/docs/transformers/pr_17286/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uR,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(_R,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(vR,"href","/docs/transformers/pr_17286/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(FR,"href","/docs/transformers/pr_17286/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(TR,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(MR,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ER,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(CR,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wR,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(AR,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(yR,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(LR,"href","/docs/transformers/pr_17286/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xR,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizer"),c($R,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineTokenizer"),c(SR,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizer"),c(RR,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PR,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BR,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizer"),c(qR,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NR,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jR,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DR,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OR,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XR,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zR,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WR,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HR,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UR,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizer"),c(JR,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YR,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KR,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZR,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eP,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oP,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rP,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fP,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_P,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bP,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vP,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FP,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizer"),c(TP,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizerFast"),c(MP,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EP,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CP,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeTokenizer"),c(wP,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(AP,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LP,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianTokenizer"),c(xP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizer"),c($P,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(kP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(SP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(RP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(PP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17286/en/model_doc/mluke#transformers.MLukeTokenizer"),c(IP,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qP,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(jP,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(DP,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Tokenizer"),c(GP,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5TokenizerFast"),c(OP,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(VP,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(zP,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UP,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(JP,"href","/docs/transformers/pr_17286/en/model_doc/phobert#transformers.PhobertTokenizer"),c(YP,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartTokenizer"),c(KP,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(ZP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(eB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagTokenizer"),c(rB,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizer"),c(tB,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizerFast"),c(aB,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizer"),c(nB,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(sB,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizer"),c(lB,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(dB,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(gB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(hB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(pB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uB,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizer"),c(_B,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(bB,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(vB,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Tokenizer"),c(TB,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5TokenizerFast"),c(MB,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasTokenizer"),c(EB,"href","/docs/transformers/pr_17286/en/model_doc/tapex#transformers.TapexTokenizer"),c(CB,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(wB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(AB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(LB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(SB,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizer"),c(RB,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMTokenizer"),c(BB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(IB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(GB,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(OB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(VB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoFeatureExtractor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoFeatureExtractor"),c(Li,"class","relative group"),c(XB,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(zB,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tI,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_I,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoProcessor"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoProcessor"),c(xi,"class","relative group"),c(vI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FI,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPProcessor"),c(TI,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MI,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(EI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(AI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yI,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRProcessor"),c(LI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltProcessor"),c(kI,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(SI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"id","transformers.AutoModel"),c(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cp,"href","#transformers.AutoModel"),c(ki,"class","relative group"),c(BI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(II,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NI,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel"),c(jI,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel"),c(DI,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel"),c(GI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c(OI,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(VI,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel"),c(XI,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zI,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(WI,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(QI,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel"),c(HI,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel"),c(UI,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel"),c(JI,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel"),c(YI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel"),c(KI,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel"),c(ZI,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtModel"),c(eq,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oq,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rq,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tq,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel"),c(aq,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nq,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sq,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel"),c(lq,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel"),c(iq,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel"),c(dq,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cq,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel"),c(fq,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel"),c(mq,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel"),c(gq,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel"),c(hq,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel"),c(pq,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel"),c(uq,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel"),c(_q,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel"),c(bq,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel"),c(vq,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model"),c(Fq,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Tq,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel"),c(Mq,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel"),c(Eq,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel"),c(Cq,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(wq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Aq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(yq,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel"),c(Lq,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel"),c(xq,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel"),c($q,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel"),c(kq,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model"),c(Sq,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel"),c(Rq,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Pq,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel"),c(Bq,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Iq,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel"),c(qq,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel"),c(Nq,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model"),c(jq,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Dq,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Gq,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel"),c(Oq,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel"),c(Vq,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel"),c(Xq,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel"),c(zq,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Wq,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Qq,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Hq,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel"),c(Uq,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel"),c(Jq,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel"),c(Yq,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel"),c(Kq,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(Zq,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel"),c(eN,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel"),c(oN,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel"),c(rN,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel"),c(tN,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel"),c(aN,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nN,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel"),c(sN,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lN,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel"),c(iN,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model"),c(dN,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel"),c(cN,"href","/docs/transformers/pr_17286/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(fN,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mN,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gN,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hN,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel"),c(pN,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel"),c(uN,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_N,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bN,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel"),c(vN,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(FN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(TN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(MN,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel"),c(EN,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel"),c(CN,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel"),c(wN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(AN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(LN,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel"),c(xN,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel"),c($N,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n_,"id","transformers.AutoModelForPreTraining"),c(n_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n_,"href","#transformers.AutoModelForPreTraining"),c(Pi,"class","relative group"),c(kN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PN,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining"),c(BN,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IN,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining"),c(qN,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(NN,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(DN,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GN,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VN,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zN,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WN,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining"),c(QN,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining"),c(HN,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(JN,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YN,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KN,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ej,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oj,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rj,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tj,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aj,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nj,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(sj,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ij,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fj,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mj,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gj,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hj,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pj,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uj,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_j,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(bj,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y_,"id","transformers.AutoModelForCausalLM"),c(Y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y_,"href","#transformers.AutoModelForCausalLM"),c(qi,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM"),c(Aj,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel"),c(yj,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Lj,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xj,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($j,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kj,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Sj,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Rj,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bj,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ij,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qj,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Nj,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(jj,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM"),c(Dj,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Gj,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Oj,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM"),c(Xj,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(zj,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Wj,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Qj,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Hj,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Uj,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Jj,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Yj,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Kj,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Zj,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(eD,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(oD,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(rD,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(aD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(nD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(sD,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForMaskedLM"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForMaskedLM"),c(Di,"class","relative group"),c(lD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cD,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(hD,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_D,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bD,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vD,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(TD,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(MD,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(ED,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(CD,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(AD,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yD,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kD,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(SD,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(RD,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(BD,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(DD,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VD,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSeq2SeqLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Vi,"class","relative group"),c(XD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QD,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(KD,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel"),c(rG,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForSequenceClassification"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForSequenceClassification"),c(Wi,"class","relative group"),c(dG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c($G,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForMultipleChoice"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForMultipleChoice"),c(Ui,"class","relative group"),c(aO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_v,"id","transformers.AutoModelForNextSentencePrediction"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ki,"class","relative group"),c(IO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForTokenClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForTokenClassification"),c(od,"class","relative group"),c(XO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JO,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KO,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eV,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aV,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lV,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cV,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fV,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mV,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pV,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uV,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vV,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FV,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CV,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wV,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForQuestionAnswering"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForQuestionAnswering"),c(ad,"class","relative group"),c(AV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VV,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gX,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForTableQuestionAnswering"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ld,"class","relative group"),c(hX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.AutoModelForImageClassification"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.AutoModelForImageClassification"),c(cd,"class","relative group"),c(bX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification"),c(MX,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EX,"href","/docs/transformers/pr_17286/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wX,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AX,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yX,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LX,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xX,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($X,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kX,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SX,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RX,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PX,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BX,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification"),c(IX,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification"),c(qX,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForVision2Seq"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForVision2Seq"),c(gd,"class","relative group"),c(NX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(ud,"class","relative group"),c(OX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForAudioClassification"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForAudioClassification"),c(vd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O6,"id","transformers.AutoModelForAudioFrameClassification"),c(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O6,"href","#transformers.AutoModelForAudioFrameClassification"),c(Md,"class","relative group"),c(az,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fz,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y6,"id","transformers.AutoModelForCTC"),c(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y6,"href","#transformers.AutoModelForCTC"),c(wd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(uz,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC"),c(_z,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC"),c(bz,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Fz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Tz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Mz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Ez,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Ld,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lz,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForAudioXVector"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForAudioXVector"),c(kd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Rz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Pz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Bz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Iz,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForMaskedImageModeling"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Pd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Gz,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Oz,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForObjectDetection"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForObjectDetection"),c(Nd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Qz,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForImageSegmentation"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForImageSegmentation"),c(Gd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForSemanticSegmentation"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Xd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tW,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aW,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForInstanceSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Qd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r8,"id","transformers.TFAutoModel"),c(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r8,"href","#transformers.TFAutoModel"),c(Jd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel"),c(gW,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel"),c(hW,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel"),c(pW,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(uW,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(_W,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel"),c(bW,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel"),c(vW,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel"),c(FW,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel"),c(TW,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MW,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EW,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel"),c(CW,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wW,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AW,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yW,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel"),c(LW,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xW,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel"),c($W,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kW,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SW,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel"),c(RW,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel"),c(PW,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(BW,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel"),c(IW,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel"),c(qW,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NW,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel"),c(jW,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel"),c(DW,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GW,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OW,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model"),c(VW,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XW,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zW,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel"),c(WW,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel"),c(QW,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HW,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UW,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel"),c(JW,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model"),c(YW,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel"),c(KW,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(ZW,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel"),c(eQ,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oQ,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel"),c(tQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(aQ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.TFAutoModelForPreTraining"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForPreTraining"),c(Zd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pQ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_Q,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(LQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForCausalLM"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForCausalLM"),c(rc,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(IQ,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NQ,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(jQ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GQ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OQ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VQ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForImageClassification"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForImageClassification"),c(nc,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JQ,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YQ,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.TFAutoModelForMaskedLM"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.TFAutoModelForMaskedLM"),c(ic,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(sH,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(lH,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iH,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(cH,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fH,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(mH,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gH,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(hH,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uH,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bH,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(vH,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TH,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(fc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yH,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel"),c(kH,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForSequenceClassification"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForSequenceClassification"),c(hc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForMultipleChoice"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForMultipleChoice"),c(_c,"class","relative group"),c(cU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Fc,"class","relative group"),c($U,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ec,"class","relative group"),c(BU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForTokenClassification"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForTokenClassification"),c(Ac,"class","relative group"),c(jU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WU,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HU,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KU,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForQuestionAnswering"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(xc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(FJ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(xJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForVision2Seq"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForVision2Seq"),c(Sc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Bc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.FlaxAutoModel"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.FlaxAutoModel"),c(Nc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel"),c(VJ,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel"),c(XJ,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel"),c(zJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel"),c(WJ,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QJ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(HJ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(UJ,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel"),c(JJ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(YJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel"),c(KJ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ZJ,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(eY,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(oY,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel"),c(rY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tY,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aY,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(nY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(sY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(lY,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model"),c(iY,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(dY,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel"),c(cY,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(fY,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(mY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForCausalLM"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Gc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(_Y,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(bY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(vY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(FY,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(TY,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(MY,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(EY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(CY,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Xc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(xY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(kY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(SY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(RY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(qY,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(jY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForMaskedLM"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QY,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(HY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(UY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(KY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Jc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(sK,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(lK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Zc,"class","relative group"),c(fK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(rf,"class","relative group"),c(CK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForTokenClassification"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(nf,"class","relative group"),c(qK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(GK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(VK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(zK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(df,"class","relative group"),c(HK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForImageClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForImageClassification"),c(pf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(gZ,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForVision2Seq"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(bf,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,_i),b(f,Cf,_),b(f,at,_),e(at,bi),e(at,vi),e(vi,x0),e(at,wf),b(f,je,_),b(f,We,_),e(We,Fi),e(We,Sn),e(Sn,$0),e(We,Rn),e(We,Pn),e(Pn,k0),e(We,Ti),e(We,Bn),e(Bn,S0),e(We,Mi),b(f,Af,_),M(La,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,rk),e(Ae,Ei),e(Ei,tk),e(Ae,ak),b(f,Co,_),b(f,xa,_),e(xa,nk),e(xa,yf),e(yf,sk),e(xa,mOe),b(f,Yqe,_),b(f,Ci,_),e(Ci,Lf),e(Lf,moe),M(R0,moe,null),e(Ci,gOe),e(Ci,goe),e(goe,hOe),b(f,Kqe,_),b(f,In,_),e(In,pOe),e(In,hoe),e(hoe,uOe),e(In,_Oe),e(In,poe),e(poe,bOe),e(In,vOe),b(f,Zqe,_),M(P0,f,_),b(f,eNe,_),b(f,lk,_),e(lk,FOe),b(f,oNe,_),M(xf,f,_),b(f,rNe,_),b(f,wi,_),e(wi,$f),e($f,uoe),M(B0,uoe,null),e(wi,TOe),e(wi,_oe),e(_oe,MOe),b(f,tNe,_),b(f,wo,_),M(I0,wo,null),e(wo,EOe),e(wo,q0),e(q0,COe),e(q0,ik),e(ik,wOe),e(q0,AOe),e(wo,yOe),e(wo,N0),e(N0,LOe),e(N0,boe),e(boe,xOe),e(N0,$Oe),e(wo,kOe),e(wo,wr),M(j0,wr,null),e(wr,SOe),e(wr,voe),e(voe,ROe),e(wr,POe),e(wr,Ai),e(Ai,BOe),e(Ai,Foe),e(Foe,IOe),e(Ai,qOe),e(Ai,Toe),e(Toe,NOe),e(Ai,jOe),e(wr,DOe),e(wr,A),e(A,kf),e(kf,Moe),e(Moe,GOe),e(kf,OOe),e(kf,dk),e(dk,VOe),e(kf,XOe),e(A,zOe),e(A,Sf),e(Sf,Eoe),e(Eoe,WOe),e(Sf,QOe),e(Sf,ck),e(ck,HOe),e(Sf,UOe),e(A,JOe),e(A,Rf),e(Rf,Coe),e(Coe,YOe),e(Rf,KOe),e(Rf,fk),e(fk,ZOe),e(Rf,eVe),e(A,oVe),e(A,Pf),e(Pf,woe),e(woe,rVe),e(Pf,tVe),e(Pf,mk),e(mk,aVe),e(Pf,nVe),e(A,sVe),e(A,Bf),e(Bf,Aoe),e(Aoe,lVe),e(Bf,iVe),e(Bf,gk),e(gk,dVe),e(Bf,cVe),e(A,fVe),e(A,If),e(If,yoe),e(yoe,mVe),e(If,gVe),e(If,hk),e(hk,hVe),e(If,pVe),e(A,uVe),e(A,qf),e(qf,Loe),e(Loe,_Ve),e(qf,bVe),e(qf,pk),e(pk,vVe),e(qf,FVe),e(A,TVe),e(A,Nf),e(Nf,xoe),e(xoe,MVe),e(Nf,EVe),e(Nf,uk),e(uk,CVe),e(Nf,wVe),e(A,AVe),e(A,jf),e(jf,$oe),e($oe,yVe),e(jf,LVe),e(jf,_k),e(_k,xVe),e(jf,$Ve),e(A,kVe),e(A,Df),e(Df,koe),e(koe,SVe),e(Df,RVe),e(Df,bk),e(bk,PVe),e(Df,BVe),e(A,IVe),e(A,Gf),e(Gf,Soe),e(Soe,qVe),e(Gf,NVe),e(Gf,vk),e(vk,jVe),e(Gf,DVe),e(A,GVe),e(A,Of),e(Of,Roe),e(Roe,OVe),e(Of,VVe),e(Of,Fk),e(Fk,XVe),e(Of,zVe),e(A,WVe),e(A,Vf),e(Vf,Poe),e(Poe,QVe),e(Vf,HVe),e(Vf,Tk),e(Tk,UVe),e(Vf,JVe),e(A,YVe),e(A,Xf),e(Xf,Boe),e(Boe,KVe),e(Xf,ZVe),e(Xf,Mk),e(Mk,eXe),e(Xf,oXe),e(A,rXe),e(A,zf),e(zf,Ioe),e(Ioe,tXe),e(zf,aXe),e(zf,Ek),e(Ek,nXe),e(zf,sXe),e(A,lXe),e(A,Wf),e(Wf,qoe),e(qoe,iXe),e(Wf,dXe),e(Wf,Ck),e(Ck,cXe),e(Wf,fXe),e(A,mXe),e(A,Qf),e(Qf,Noe),e(Noe,gXe),e(Qf,hXe),e(Qf,wk),e(wk,pXe),e(Qf,uXe),e(A,_Xe),e(A,Hf),e(Hf,joe),e(joe,bXe),e(Hf,vXe),e(Hf,Ak),e(Ak,FXe),e(Hf,TXe),e(A,MXe),e(A,Uf),e(Uf,Doe),e(Doe,EXe),e(Uf,CXe),e(Uf,yk),e(yk,wXe),e(Uf,AXe),e(A,yXe),e(A,Jf),e(Jf,Goe),e(Goe,LXe),e(Jf,xXe),e(Jf,Lk),e(Lk,$Xe),e(Jf,kXe),e(A,SXe),e(A,Yf),e(Yf,Ooe),e(Ooe,RXe),e(Yf,PXe),e(Yf,xk),e(xk,BXe),e(Yf,IXe),e(A,qXe),e(A,Kf),e(Kf,Voe),e(Voe,NXe),e(Kf,jXe),e(Kf,$k),e($k,DXe),e(Kf,GXe),e(A,OXe),e(A,Zf),e(Zf,Xoe),e(Xoe,VXe),e(Zf,XXe),e(Zf,kk),e(kk,zXe),e(Zf,WXe),e(A,QXe),e(A,em),e(em,zoe),e(zoe,HXe),e(em,UXe),e(em,Sk),e(Sk,JXe),e(em,YXe),e(A,KXe),e(A,om),e(om,Woe),e(Woe,ZXe),e(om,eze),e(om,Rk),e(Rk,oze),e(om,rze),e(A,tze),e(A,rm),e(rm,Qoe),e(Qoe,aze),e(rm,nze),e(rm,Pk),e(Pk,sze),e(rm,lze),e(A,ize),e(A,tm),e(tm,Hoe),e(Hoe,dze),e(tm,cze),e(tm,Bk),e(Bk,fze),e(tm,mze),e(A,gze),e(A,am),e(am,Uoe),e(Uoe,hze),e(am,pze),e(am,Ik),e(Ik,uze),e(am,_ze),e(A,bze),e(A,nm),e(nm,Joe),e(Joe,vze),e(nm,Fze),e(nm,qk),e(qk,Tze),e(nm,Mze),e(A,Eze),e(A,sm),e(sm,Yoe),e(Yoe,Cze),e(sm,wze),e(sm,Nk),e(Nk,Aze),e(sm,yze),e(A,Lze),e(A,lm),e(lm,Koe),e(Koe,xze),e(lm,$ze),e(lm,jk),e(jk,kze),e(lm,Sze),e(A,Rze),e(A,im),e(im,Zoe),e(Zoe,Pze),e(im,Bze),e(im,Dk),e(Dk,Ize),e(im,qze),e(A,Nze),e(A,dm),e(dm,ere),e(ere,jze),e(dm,Dze),e(dm,Gk),e(Gk,Gze),e(dm,Oze),e(A,Vze),e(A,cm),e(cm,ore),e(ore,Xze),e(cm,zze),e(cm,Ok),e(Ok,Wze),e(cm,Qze),e(A,Hze),e(A,fm),e(fm,rre),e(rre,Uze),e(fm,Jze),e(fm,Vk),e(Vk,Yze),e(fm,Kze),e(A,Zze),e(A,mm),e(mm,tre),e(tre,eWe),e(mm,oWe),e(mm,Xk),e(Xk,rWe),e(mm,tWe),e(A,aWe),e(A,gm),e(gm,are),e(are,nWe),e(gm,sWe),e(gm,zk),e(zk,lWe),e(gm,iWe),e(A,dWe),e(A,hm),e(hm,nre),e(nre,cWe),e(hm,fWe),e(hm,Wk),e(Wk,mWe),e(hm,gWe),e(A,hWe),e(A,pm),e(pm,sre),e(sre,pWe),e(pm,uWe),e(pm,Qk),e(Qk,_We),e(pm,bWe),e(A,vWe),e(A,um),e(um,lre),e(lre,FWe),e(um,TWe),e(um,Hk),e(Hk,MWe),e(um,EWe),e(A,CWe),e(A,_m),e(_m,ire),e(ire,wWe),e(_m,AWe),e(_m,Uk),e(Uk,yWe),e(_m,LWe),e(A,xWe),e(A,bm),e(bm,dre),e(dre,$We),e(bm,kWe),e(bm,Jk),e(Jk,SWe),e(bm,RWe),e(A,PWe),e(A,vm),e(vm,cre),e(cre,BWe),e(vm,IWe),e(vm,Yk),e(Yk,qWe),e(vm,NWe),e(A,jWe),e(A,Fm),e(Fm,fre),e(fre,DWe),e(Fm,GWe),e(Fm,Kk),e(Kk,OWe),e(Fm,VWe),e(A,XWe),e(A,Tm),e(Tm,mre),e(mre,zWe),e(Tm,WWe),e(Tm,Zk),e(Zk,QWe),e(Tm,HWe),e(A,UWe),e(A,Mm),e(Mm,gre),e(gre,JWe),e(Mm,YWe),e(Mm,eS),e(eS,KWe),e(Mm,ZWe),e(A,eQe),e(A,Em),e(Em,hre),e(hre,oQe),e(Em,rQe),e(Em,oS),e(oS,tQe),e(Em,aQe),e(A,nQe),e(A,Cm),e(Cm,pre),e(pre,sQe),e(Cm,lQe),e(Cm,rS),e(rS,iQe),e(Cm,dQe),e(A,cQe),e(A,wm),e(wm,ure),e(ure,fQe),e(wm,mQe),e(wm,tS),e(tS,gQe),e(wm,hQe),e(A,pQe),e(A,Am),e(Am,_re),e(_re,uQe),e(Am,_Qe),e(Am,aS),e(aS,bQe),e(Am,vQe),e(A,FQe),e(A,ym),e(ym,bre),e(bre,TQe),e(ym,MQe),e(ym,nS),e(nS,EQe),e(ym,CQe),e(A,wQe),e(A,Lm),e(Lm,vre),e(vre,AQe),e(Lm,yQe),e(Lm,sS),e(sS,LQe),e(Lm,xQe),e(A,$Qe),e(A,xm),e(xm,Fre),e(Fre,kQe),e(xm,SQe),e(xm,lS),e(lS,RQe),e(xm,PQe),e(A,BQe),e(A,$m),e($m,Tre),e(Tre,IQe),e($m,qQe),e($m,iS),e(iS,NQe),e($m,jQe),e(A,DQe),e(A,km),e(km,Mre),e(Mre,GQe),e(km,OQe),e(km,dS),e(dS,VQe),e(km,XQe),e(A,zQe),e(A,Sm),e(Sm,Ere),e(Ere,WQe),e(Sm,QQe),e(Sm,cS),e(cS,HQe),e(Sm,UQe),e(A,JQe),e(A,Rm),e(Rm,Cre),e(Cre,YQe),e(Rm,KQe),e(Rm,fS),e(fS,ZQe),e(Rm,eHe),e(A,oHe),e(A,Pm),e(Pm,wre),e(wre,rHe),e(Pm,tHe),e(Pm,mS),e(mS,aHe),e(Pm,nHe),e(A,sHe),e(A,Bm),e(Bm,Are),e(Are,lHe),e(Bm,iHe),e(Bm,gS),e(gS,dHe),e(Bm,cHe),e(A,fHe),e(A,Im),e(Im,yre),e(yre,mHe),e(Im,gHe),e(Im,hS),e(hS,hHe),e(Im,pHe),e(A,uHe),e(A,qm),e(qm,Lre),e(Lre,_He),e(qm,bHe),e(qm,pS),e(pS,vHe),e(qm,FHe),e(A,THe),e(A,Nm),e(Nm,xre),e(xre,MHe),e(Nm,EHe),e(Nm,uS),e(uS,CHe),e(Nm,wHe),e(A,AHe),e(A,jm),e(jm,$re),e($re,yHe),e(jm,LHe),e(jm,_S),e(_S,xHe),e(jm,$He),e(A,kHe),e(A,Dm),e(Dm,kre),e(kre,SHe),e(Dm,RHe),e(Dm,bS),e(bS,PHe),e(Dm,BHe),e(A,IHe),e(A,Gm),e(Gm,Sre),e(Sre,qHe),e(Gm,NHe),e(Gm,vS),e(vS,jHe),e(Gm,DHe),e(A,GHe),e(A,Om),e(Om,Rre),e(Rre,OHe),e(Om,VHe),e(Om,FS),e(FS,XHe),e(Om,zHe),e(A,WHe),e(A,Vm),e(Vm,Pre),e(Pre,QHe),e(Vm,HHe),e(Vm,TS),e(TS,UHe),e(Vm,JHe),e(A,YHe),e(A,Xm),e(Xm,Bre),e(Bre,KHe),e(Xm,ZHe),e(Xm,MS),e(MS,eUe),e(Xm,oUe),e(A,rUe),e(A,zm),e(zm,Ire),e(Ire,tUe),e(zm,aUe),e(zm,ES),e(ES,nUe),e(zm,sUe),e(A,lUe),e(A,Wm),e(Wm,qre),e(qre,iUe),e(Wm,dUe),e(Wm,CS),e(CS,cUe),e(Wm,fUe),e(A,mUe),e(A,Qm),e(Qm,Nre),e(Nre,gUe),e(Qm,hUe),e(Qm,wS),e(wS,pUe),e(Qm,uUe),e(A,_Ue),e(A,Hm),e(Hm,jre),e(jre,bUe),e(Hm,vUe),e(Hm,AS),e(AS,FUe),e(Hm,TUe),e(A,MUe),e(A,Um),e(Um,Dre),e(Dre,EUe),e(Um,CUe),e(Um,yS),e(yS,wUe),e(Um,AUe),e(A,yUe),e(A,Jm),e(Jm,Gre),e(Gre,LUe),e(Jm,xUe),e(Jm,LS),e(LS,$Ue),e(Jm,kUe),e(A,SUe),e(A,Ym),e(Ym,Ore),e(Ore,RUe),e(Ym,PUe),e(Ym,xS),e(xS,BUe),e(Ym,IUe),e(A,qUe),e(A,Km),e(Km,Vre),e(Vre,NUe),e(Km,jUe),e(Km,$S),e($S,DUe),e(Km,GUe),e(A,OUe),e(A,Zm),e(Zm,Xre),e(Xre,VUe),e(Zm,XUe),e(Zm,kS),e(kS,zUe),e(Zm,WUe),e(A,QUe),e(A,eg),e(eg,zre),e(zre,HUe),e(eg,UUe),e(eg,SS),e(SS,JUe),e(eg,YUe),e(A,KUe),e(A,og),e(og,Wre),e(Wre,ZUe),e(og,eJe),e(og,RS),e(RS,oJe),e(og,rJe),e(A,tJe),e(A,rg),e(rg,Qre),e(Qre,aJe),e(rg,nJe),e(rg,PS),e(PS,sJe),e(rg,lJe),e(A,iJe),e(A,tg),e(tg,Hre),e(Hre,dJe),e(tg,cJe),e(tg,BS),e(BS,fJe),e(tg,mJe),e(A,gJe),e(A,ag),e(ag,Ure),e(Ure,hJe),e(ag,pJe),e(ag,IS),e(IS,uJe),e(ag,_Je),e(A,bJe),e(A,ng),e(ng,Jre),e(Jre,vJe),e(ng,FJe),e(ng,qS),e(qS,TJe),e(ng,MJe),e(A,EJe),e(A,sg),e(sg,Yre),e(Yre,CJe),e(sg,wJe),e(sg,NS),e(NS,AJe),e(sg,yJe),e(A,LJe),e(A,lg),e(lg,Kre),e(Kre,xJe),e(lg,$Je),e(lg,jS),e(jS,kJe),e(lg,SJe),e(A,RJe),e(A,ig),e(ig,Zre),e(Zre,PJe),e(ig,BJe),e(ig,DS),e(DS,IJe),e(ig,qJe),e(A,NJe),e(A,dg),e(dg,ete),e(ete,jJe),e(dg,DJe),e(dg,GS),e(GS,GJe),e(dg,OJe),e(A,VJe),e(A,cg),e(cg,ote),e(ote,XJe),e(cg,zJe),e(cg,OS),e(OS,WJe),e(cg,QJe),e(A,HJe),e(A,fg),e(fg,rte),e(rte,UJe),e(fg,JJe),e(fg,VS),e(VS,YJe),e(fg,KJe),e(A,ZJe),e(A,mg),e(mg,tte),e(tte,eYe),e(mg,oYe),e(mg,XS),e(XS,rYe),e(mg,tYe),e(A,aYe),e(A,gg),e(gg,ate),e(ate,nYe),e(gg,sYe),e(gg,zS),e(zS,lYe),e(gg,iYe),e(A,dYe),e(A,hg),e(hg,nte),e(nte,cYe),e(hg,fYe),e(hg,WS),e(WS,mYe),e(hg,gYe),e(A,hYe),e(A,pg),e(pg,ste),e(ste,pYe),e(pg,uYe),e(pg,QS),e(QS,_Ye),e(pg,bYe),e(A,vYe),e(A,ug),e(ug,lte),e(lte,FYe),e(ug,TYe),e(ug,HS),e(HS,MYe),e(ug,EYe),e(A,CYe),e(A,_g),e(_g,ite),e(ite,wYe),e(_g,AYe),e(_g,US),e(US,yYe),e(_g,LYe),e(A,xYe),e(A,bg),e(bg,dte),e(dte,$Ye),e(bg,kYe),e(bg,JS),e(JS,SYe),e(bg,RYe),e(A,PYe),e(A,vg),e(vg,cte),e(cte,BYe),e(vg,IYe),e(vg,YS),e(YS,qYe),e(vg,NYe),e(A,jYe),e(A,Fg),e(Fg,fte),e(fte,DYe),e(Fg,GYe),e(Fg,KS),e(KS,OYe),e(Fg,VYe),e(A,XYe),e(A,Tg),e(Tg,mte),e(mte,zYe),e(Tg,WYe),e(Tg,ZS),e(ZS,QYe),e(Tg,HYe),e(A,UYe),e(A,Mg),e(Mg,gte),e(gte,JYe),e(Mg,YYe),e(Mg,eR),e(eR,KYe),e(Mg,ZYe),e(A,eKe),e(A,Eg),e(Eg,hte),e(hte,oKe),e(Eg,rKe),e(Eg,oR),e(oR,tKe),e(Eg,aKe),e(A,nKe),e(A,Cg),e(Cg,pte),e(pte,sKe),e(Cg,lKe),e(Cg,rR),e(rR,iKe),e(Cg,dKe),e(A,cKe),e(A,wg),e(wg,ute),e(ute,fKe),e(wg,mKe),e(wg,tR),e(tR,gKe),e(wg,hKe),e(A,pKe),e(A,Ag),e(Ag,_te),e(_te,uKe),e(Ag,_Ke),e(Ag,aR),e(aR,bKe),e(Ag,vKe),e(A,FKe),e(A,yg),e(yg,bte),e(bte,TKe),e(yg,MKe),e(yg,nR),e(nR,EKe),e(yg,CKe),e(A,wKe),e(A,Lg),e(Lg,vte),e(vte,AKe),e(Lg,yKe),e(Lg,sR),e(sR,LKe),e(Lg,xKe),e(A,$Ke),e(A,xg),e(xg,Fte),e(Fte,kKe),e(xg,SKe),e(xg,lR),e(lR,RKe),e(xg,PKe),e(wr,BKe),M($g,wr,null),e(wo,IKe),e(wo,kg),M(D0,kg,null),e(kg,qKe),e(kg,Tte),e(Tte,NKe),b(f,aNe,_),b(f,yi,_),e(yi,Sg),e(Sg,Mte),M(G0,Mte,null),e(yi,jKe),e(yi,Ete),e(Ete,DKe),b(f,nNe,_),b(f,Ao,_),M(O0,Ao,null),e(Ao,GKe),e(Ao,V0),e(V0,OKe),e(V0,iR),e(iR,VKe),e(V0,XKe),e(Ao,zKe),e(Ao,X0),e(X0,WKe),e(X0,Cte),e(Cte,QKe),e(X0,HKe),e(Ao,UKe),e(Ao,Ar),M(z0,Ar,null),e(Ar,JKe),e(Ar,wte),e(wte,YKe),e(Ar,KKe),e(Ar,$a),e($a,ZKe),e($a,Ate),e(Ate,eZe),e($a,oZe),e($a,yte),e(yte,rZe),e($a,tZe),e($a,Lte),e(Lte,aZe),e($a,nZe),e(Ar,sZe),e(Ar,k),e(k,qn),e(qn,xte),e(xte,lZe),e(qn,iZe),e(qn,dR),e(dR,dZe),e(qn,cZe),e(qn,cR),e(cR,fZe),e(qn,mZe),e(k,gZe),e(k,Nn),e(Nn,$te),e($te,hZe),e(Nn,pZe),e(Nn,fR),e(fR,uZe),e(Nn,_Ze),e(Nn,mR),e(mR,bZe),e(Nn,vZe),e(k,FZe),e(k,jn),e(jn,kte),e(kte,TZe),e(jn,MZe),e(jn,gR),e(gR,EZe),e(jn,CZe),e(jn,hR),e(hR,wZe),e(jn,AZe),e(k,yZe),e(k,Rg),e(Rg,Ste),e(Ste,LZe),e(Rg,xZe),e(Rg,pR),e(pR,$Ze),e(Rg,kZe),e(k,SZe),e(k,Dn),e(Dn,Rte),e(Rte,RZe),e(Dn,PZe),e(Dn,uR),e(uR,BZe),e(Dn,IZe),e(Dn,_R),e(_R,qZe),e(Dn,NZe),e(k,jZe),e(k,Pg),e(Pg,Pte),e(Pte,DZe),e(Pg,GZe),e(Pg,bR),e(bR,OZe),e(Pg,VZe),e(k,XZe),e(k,Bg),e(Bg,Bte),e(Bte,zZe),e(Bg,WZe),e(Bg,vR),e(vR,QZe),e(Bg,HZe),e(k,UZe),e(k,Ig),e(Ig,Ite),e(Ite,JZe),e(Ig,YZe),e(Ig,FR),e(FR,KZe),e(Ig,ZZe),e(k,eeo),e(k,Gn),e(Gn,qte),e(qte,oeo),e(Gn,reo),e(Gn,TR),e(TR,teo),e(Gn,aeo),e(Gn,MR),e(MR,neo),e(Gn,seo),e(k,leo),e(k,On),e(On,Nte),e(Nte,ieo),e(On,deo),e(On,ER),e(ER,ceo),e(On,feo),e(On,CR),e(CR,meo),e(On,geo),e(k,heo),e(k,Vn),e(Vn,jte),e(jte,peo),e(Vn,ueo),e(Vn,wR),e(wR,_eo),e(Vn,beo),e(Vn,AR),e(AR,veo),e(Vn,Feo),e(k,Teo),e(k,qg),e(qg,Dte),e(Dte,Meo),e(qg,Eeo),e(qg,yR),e(yR,Ceo),e(qg,weo),e(k,Aeo),e(k,Ng),e(Ng,Gte),e(Gte,yeo),e(Ng,Leo),e(Ng,LR),e(LR,xeo),e(Ng,$eo),e(k,keo),e(k,Xn),e(Xn,Ote),e(Ote,Seo),e(Xn,Reo),e(Xn,xR),e(xR,Peo),e(Xn,Beo),e(Xn,$R),e($R,Ieo),e(Xn,qeo),e(k,Neo),e(k,jg),e(jg,Vte),e(Vte,jeo),e(jg,Deo),e(jg,kR),e(kR,Geo),e(jg,Oeo),e(k,Veo),e(k,zn),e(zn,Xte),e(Xte,Xeo),e(zn,zeo),e(zn,SR),e(SR,Weo),e(zn,Qeo),e(zn,RR),e(RR,Heo),e(zn,Ueo),e(k,Jeo),e(k,Wn),e(Wn,zte),e(zte,Yeo),e(Wn,Keo),e(Wn,PR),e(PR,Zeo),e(Wn,eoo),e(Wn,BR),e(BR,ooo),e(Wn,roo),e(k,too),e(k,Qn),e(Qn,Wte),e(Wte,aoo),e(Qn,noo),e(Qn,IR),e(IR,soo),e(Qn,loo),e(Qn,qR),e(qR,ioo),e(Qn,doo),e(k,coo),e(k,Dg),e(Dg,Qte),e(Qte,foo),e(Dg,moo),e(Dg,NR),e(NR,goo),e(Dg,hoo),e(k,poo),e(k,Hn),e(Hn,Hte),e(Hte,uoo),e(Hn,_oo),e(Hn,jR),e(jR,boo),e(Hn,voo),e(Hn,DR),e(DR,Foo),e(Hn,Too),e(k,Moo),e(k,Un),e(Un,Ute),e(Ute,Eoo),e(Un,Coo),e(Un,GR),e(GR,woo),e(Un,Aoo),e(Un,OR),e(OR,yoo),e(Un,Loo),e(k,xoo),e(k,Jn),e(Jn,Jte),e(Jte,$oo),e(Jn,koo),e(Jn,VR),e(VR,Soo),e(Jn,Roo),e(Jn,XR),e(XR,Poo),e(Jn,Boo),e(k,Ioo),e(k,Yn),e(Yn,Yte),e(Yte,qoo),e(Yn,Noo),e(Yn,zR),e(zR,joo),e(Yn,Doo),e(Yn,WR),e(WR,Goo),e(Yn,Ooo),e(k,Voo),e(k,Kn),e(Kn,Kte),e(Kte,Xoo),e(Kn,zoo),e(Kn,QR),e(QR,Woo),e(Kn,Qoo),e(Kn,HR),e(HR,Hoo),e(Kn,Uoo),e(k,Joo),e(k,Zn),e(Zn,Zte),e(Zte,Yoo),e(Zn,Koo),e(Zn,UR),e(UR,Zoo),e(Zn,ero),e(Zn,JR),e(JR,oro),e(Zn,rro),e(k,tro),e(k,Gg),e(Gg,eae),e(eae,aro),e(Gg,nro),e(Gg,YR),e(YR,sro),e(Gg,lro),e(k,iro),e(k,es),e(es,oae),e(oae,dro),e(es,cro),e(es,KR),e(KR,fro),e(es,mro),e(es,ZR),e(ZR,gro),e(es,hro),e(k,pro),e(k,Og),e(Og,rae),e(rae,uro),e(Og,_ro),e(Og,eP),e(eP,bro),e(Og,vro),e(k,Fro),e(k,os),e(os,tae),e(tae,Tro),e(os,Mro),e(os,oP),e(oP,Ero),e(os,Cro),e(os,rP),e(rP,wro),e(os,Aro),e(k,yro),e(k,rs),e(rs,aae),e(aae,Lro),e(rs,xro),e(rs,tP),e(tP,$ro),e(rs,kro),e(rs,aP),e(aP,Sro),e(rs,Rro),e(k,Pro),e(k,ts),e(ts,nae),e(nae,Bro),e(ts,Iro),e(ts,nP),e(nP,qro),e(ts,Nro),e(ts,sP),e(sP,jro),e(ts,Dro),e(k,Gro),e(k,as),e(as,sae),e(sae,Oro),e(as,Vro),e(as,lP),e(lP,Xro),e(as,zro),e(as,iP),e(iP,Wro),e(as,Qro),e(k,Hro),e(k,ns),e(ns,lae),e(lae,Uro),e(ns,Jro),e(ns,dP),e(dP,Yro),e(ns,Kro),e(ns,cP),e(cP,Zro),e(ns,eto),e(k,oto),e(k,Vg),e(Vg,iae),e(iae,rto),e(Vg,tto),e(Vg,fP),e(fP,ato),e(Vg,nto),e(k,sto),e(k,ss),e(ss,dae),e(dae,lto),e(ss,ito),e(ss,mP),e(mP,dto),e(ss,cto),e(ss,gP),e(gP,fto),e(ss,mto),e(k,gto),e(k,ls),e(ls,cae),e(cae,hto),e(ls,pto),e(ls,hP),e(hP,uto),e(ls,_to),e(ls,pP),e(pP,bto),e(ls,vto),e(k,Fto),e(k,is),e(is,fae),e(fae,Tto),e(is,Mto),e(is,uP),e(uP,Eto),e(is,Cto),e(is,_P),e(_P,wto),e(is,Ato),e(k,yto),e(k,ds),e(ds,mae),e(mae,Lto),e(ds,xto),e(ds,bP),e(bP,$to),e(ds,kto),e(ds,vP),e(vP,Sto),e(ds,Rto),e(k,Pto),e(k,cs),e(cs,gae),e(gae,Bto),e(cs,Ito),e(cs,FP),e(FP,qto),e(cs,Nto),e(cs,TP),e(TP,jto),e(cs,Dto),e(k,Gto),e(k,fs),e(fs,hae),e(hae,Oto),e(fs,Vto),e(fs,MP),e(MP,Xto),e(fs,zto),e(fs,EP),e(EP,Wto),e(fs,Qto),e(k,Hto),e(k,Xg),e(Xg,pae),e(pae,Uto),e(Xg,Jto),e(Xg,CP),e(CP,Yto),e(Xg,Kto),e(k,Zto),e(k,ms),e(ms,uae),e(uae,eao),e(ms,oao),e(ms,wP),e(wP,rao),e(ms,tao),e(ms,AP),e(AP,aao),e(ms,nao),e(k,sao),e(k,zg),e(zg,_ae),e(_ae,lao),e(zg,iao),e(zg,yP),e(yP,dao),e(zg,cao),e(k,fao),e(k,Wg),e(Wg,bae),e(bae,mao),e(Wg,gao),e(Wg,LP),e(LP,hao),e(Wg,pao),e(k,uao),e(k,gs),e(gs,vae),e(vae,_ao),e(gs,bao),e(gs,xP),e(xP,vao),e(gs,Fao),e(gs,$P),e($P,Tao),e(gs,Mao),e(k,Eao),e(k,hs),e(hs,Fae),e(Fae,Cao),e(hs,wao),e(hs,kP),e(kP,Aao),e(hs,yao),e(hs,SP),e(SP,Lao),e(hs,xao),e(k,$ao),e(k,ps),e(ps,Tae),e(Tae,kao),e(ps,Sao),e(ps,RP),e(RP,Rao),e(ps,Pao),e(ps,PP),e(PP,Bao),e(ps,Iao),e(k,qao),e(k,Qg),e(Qg,Mae),e(Mae,Nao),e(Qg,jao),e(Qg,BP),e(BP,Dao),e(Qg,Gao),e(k,Oao),e(k,us),e(us,Eae),e(Eae,Vao),e(us,Xao),e(us,IP),e(IP,zao),e(us,Wao),e(us,qP),e(qP,Qao),e(us,Hao),e(k,Uao),e(k,_s),e(_s,Cae),e(Cae,Jao),e(_s,Yao),e(_s,NP),e(NP,Kao),e(_s,Zao),e(_s,jP),e(jP,eno),e(_s,ono),e(k,rno),e(k,bs),e(bs,wae),e(wae,tno),e(bs,ano),e(bs,DP),e(DP,nno),e(bs,sno),e(bs,GP),e(GP,lno),e(bs,ino),e(k,dno),e(k,vs),e(vs,Aae),e(Aae,cno),e(vs,fno),e(vs,OP),e(OP,mno),e(vs,gno),e(vs,VP),e(VP,hno),e(vs,pno),e(k,uno),e(k,Fs),e(Fs,yae),e(yae,_no),e(Fs,bno),e(Fs,XP),e(XP,vno),e(Fs,Fno),e(Fs,zP),e(zP,Tno),e(Fs,Mno),e(k,Eno),e(k,Hg),e(Hg,Lae),e(Lae,Cno),e(Hg,wno),e(Hg,WP),e(WP,Ano),e(Hg,yno),e(k,Lno),e(k,Ts),e(Ts,xae),e(xae,xno),e(Ts,$no),e(Ts,QP),e(QP,kno),e(Ts,Sno),e(Ts,HP),e(HP,Rno),e(Ts,Pno),e(k,Bno),e(k,Ug),e(Ug,$ae),e($ae,Ino),e(Ug,qno),e(Ug,UP),e(UP,Nno),e(Ug,jno),e(k,Dno),e(k,Jg),e(Jg,kae),e(kae,Gno),e(Jg,Ono),e(Jg,JP),e(JP,Vno),e(Jg,Xno),e(k,zno),e(k,Yg),e(Yg,Sae),e(Sae,Wno),e(Yg,Qno),e(Yg,YP),e(YP,Hno),e(Yg,Uno),e(k,Jno),e(k,Kg),e(Kg,Rae),e(Rae,Yno),e(Kg,Kno),e(Kg,KP),e(KP,Zno),e(Kg,eso),e(k,oso),e(k,Ms),e(Ms,Pae),e(Pae,rso),e(Ms,tso),e(Ms,ZP),e(ZP,aso),e(Ms,nso),e(Ms,eB),e(eB,sso),e(Ms,lso),e(k,iso),e(k,Zg),e(Zg,Bae),e(Bae,dso),e(Zg,cso),e(Zg,oB),e(oB,fso),e(Zg,mso),e(k,gso),e(k,Es),e(Es,Iae),e(Iae,hso),e(Es,pso),e(Es,rB),e(rB,uso),e(Es,_so),e(Es,tB),e(tB,bso),e(Es,vso),e(k,Fso),e(k,Cs),e(Cs,qae),e(qae,Tso),e(Cs,Mso),e(Cs,aB),e(aB,Eso),e(Cs,Cso),e(Cs,nB),e(nB,wso),e(Cs,Aso),e(k,yso),e(k,ws),e(ws,Nae),e(Nae,Lso),e(ws,xso),e(ws,sB),e(sB,$so),e(ws,kso),e(ws,lB),e(lB,Sso),e(ws,Rso),e(k,Pso),e(k,As),e(As,jae),e(jae,Bso),e(As,Iso),e(As,iB),e(iB,qso),e(As,Nso),e(As,dB),e(dB,jso),e(As,Dso),e(k,Gso),e(k,ys),e(ys,Dae),e(Dae,Oso),e(ys,Vso),e(ys,cB),e(cB,Xso),e(ys,zso),e(ys,fB),e(fB,Wso),e(ys,Qso),e(k,Hso),e(k,Ls),e(Ls,Gae),e(Gae,Uso),e(Ls,Jso),e(Ls,mB),e(mB,Yso),e(Ls,Kso),e(Ls,gB),e(gB,Zso),e(Ls,elo),e(k,olo),e(k,eh),e(eh,Oae),e(Oae,rlo),e(eh,tlo),e(eh,hB),e(hB,alo),e(eh,nlo),e(k,slo),e(k,oh),e(oh,Vae),e(Vae,llo),e(oh,ilo),e(oh,pB),e(pB,dlo),e(oh,clo),e(k,flo),e(k,xs),e(xs,Xae),e(Xae,mlo),e(xs,glo),e(xs,uB),e(uB,hlo),e(xs,plo),e(xs,_B),e(_B,ulo),e(xs,_lo),e(k,blo),e(k,$s),e($s,zae),e(zae,vlo),e($s,Flo),e($s,bB),e(bB,Tlo),e($s,Mlo),e($s,vB),e(vB,Elo),e($s,Clo),e(k,wlo),e(k,ks),e(ks,Wae),e(Wae,Alo),e(ks,ylo),e(ks,FB),e(FB,Llo),e(ks,xlo),e(ks,TB),e(TB,$lo),e(ks,klo),e(k,Slo),e(k,rh),e(rh,Qae),e(Qae,Rlo),e(rh,Plo),e(rh,MB),e(MB,Blo),e(rh,Ilo),e(k,qlo),e(k,th),e(th,Hae),e(Hae,Nlo),e(th,jlo),e(th,EB),e(EB,Dlo),e(th,Glo),e(k,Olo),e(k,ah),e(ah,Uae),e(Uae,Vlo),e(ah,Xlo),e(ah,CB),e(CB,zlo),e(ah,Wlo),e(k,Qlo),e(k,Ss),e(Ss,Jae),e(Jae,Hlo),e(Ss,Ulo),e(Ss,wB),e(wB,Jlo),e(Ss,Ylo),e(Ss,AB),e(AB,Klo),e(Ss,Zlo),e(k,eio),e(k,Rs),e(Rs,Yae),e(Yae,oio),e(Rs,rio),e(Rs,yB),e(yB,tio),e(Rs,aio),e(Rs,LB),e(LB,nio),e(Rs,sio),e(k,lio),e(k,nh),e(nh,Kae),e(Kae,iio),e(nh,dio),e(nh,xB),e(xB,cio),e(nh,fio),e(k,mio),e(k,sh),e(sh,Zae),e(Zae,gio),e(sh,hio),e(sh,$B),e($B,pio),e(sh,uio),e(k,_io),e(k,lh),e(lh,ene),e(ene,bio),e(lh,vio),e(lh,kB),e(kB,Fio),e(lh,Tio),e(k,Mio),e(k,Ps),e(Ps,one),e(one,Eio),e(Ps,Cio),e(Ps,SB),e(SB,wio),e(Ps,Aio),e(Ps,RB),e(RB,yio),e(Ps,Lio),e(k,xio),e(k,ih),e(ih,rne),e(rne,$io),e(ih,kio),e(ih,PB),e(PB,Sio),e(ih,Rio),e(k,Pio),e(k,dh),e(dh,tne),e(tne,Bio),e(dh,Iio),e(dh,BB),e(BB,qio),e(dh,Nio),e(k,jio),e(k,Bs),e(Bs,ane),e(ane,Dio),e(Bs,Gio),e(Bs,IB),e(IB,Oio),e(Bs,Vio),e(Bs,qB),e(qB,Xio),e(Bs,zio),e(k,Wio),e(k,Is),e(Is,nne),e(nne,Qio),e(Is,Hio),e(Is,NB),e(NB,Uio),e(Is,Jio),e(Is,jB),e(jB,Yio),e(Is,Kio),e(k,Zio),e(k,qs),e(qs,sne),e(sne,edo),e(qs,odo),e(qs,DB),e(DB,rdo),e(qs,tdo),e(qs,GB),e(GB,ado),e(qs,ndo),e(k,sdo),e(k,Ns),e(Ns,lne),e(lne,ldo),e(Ns,ido),e(Ns,OB),e(OB,ddo),e(Ns,cdo),e(Ns,VB),e(VB,fdo),e(Ns,mdo),e(Ar,gdo),M(ch,Ar,null),e(Ao,hdo),e(Ao,fh),M(W0,fh,null),e(fh,pdo),e(fh,ine),e(ine,udo),b(f,sNe,_),b(f,Li,_),e(Li,mh),e(mh,dne),M(Q0,dne,null),e(Li,_do),e(Li,cne),e(cne,bdo),b(f,lNe,_),b(f,yo,_),M(H0,yo,null),e(yo,vdo),e(yo,U0),e(U0,Fdo),e(U0,XB),e(XB,Tdo),e(U0,Mdo),e(yo,Edo),e(yo,J0),e(J0,Cdo),e(J0,fne),e(fne,wdo),e(J0,Ado),e(yo,ydo),e(yo,He),M(Y0,He,null),e(He,Ldo),e(He,mne),e(mne,xdo),e(He,$do),e(He,ka),e(ka,kdo),e(ka,gne),e(gne,Sdo),e(ka,Rdo),e(ka,hne),e(hne,Pdo),e(ka,Bdo),e(ka,pne),e(pne,Ido),e(ka,qdo),e(He,Ndo),e(He,K),e(K,gh),e(gh,une),e(une,jdo),e(gh,Ddo),e(gh,zB),e(zB,Gdo),e(gh,Odo),e(K,Vdo),e(K,hh),e(hh,_ne),e(_ne,Xdo),e(hh,zdo),e(hh,WB),e(WB,Wdo),e(hh,Qdo),e(K,Hdo),e(K,ph),e(ph,bne),e(bne,Udo),e(ph,Jdo),e(ph,QB),e(QB,Ydo),e(ph,Kdo),e(K,Zdo),e(K,uh),e(uh,vne),e(vne,eco),e(uh,oco),e(uh,HB),e(HB,rco),e(uh,tco),e(K,aco),e(K,_h),e(_h,Fne),e(Fne,nco),e(_h,sco),e(_h,UB),e(UB,lco),e(_h,ico),e(K,dco),e(K,bh),e(bh,Tne),e(Tne,cco),e(bh,fco),e(bh,JB),e(JB,mco),e(bh,gco),e(K,hco),e(K,vh),e(vh,Mne),e(Mne,pco),e(vh,uco),e(vh,YB),e(YB,_co),e(vh,bco),e(K,vco),e(K,Fh),e(Fh,Ene),e(Ene,Fco),e(Fh,Tco),e(Fh,KB),e(KB,Mco),e(Fh,Eco),e(K,Cco),e(K,Th),e(Th,Cne),e(Cne,wco),e(Th,Aco),e(Th,ZB),e(ZB,yco),e(Th,Lco),e(K,xco),e(K,Mh),e(Mh,wne),e(wne,$co),e(Mh,kco),e(Mh,eI),e(eI,Sco),e(Mh,Rco),e(K,Pco),e(K,Eh),e(Eh,Ane),e(Ane,Bco),e(Eh,Ico),e(Eh,oI),e(oI,qco),e(Eh,Nco),e(K,jco),e(K,Ch),e(Ch,yne),e(yne,Dco),e(Ch,Gco),e(Ch,rI),e(rI,Oco),e(Ch,Vco),e(K,Xco),e(K,wh),e(wh,Lne),e(Lne,zco),e(wh,Wco),e(wh,tI),e(tI,Qco),e(wh,Hco),e(K,Uco),e(K,Ah),e(Ah,xne),e(xne,Jco),e(Ah,Yco),e(Ah,aI),e(aI,Kco),e(Ah,Zco),e(K,efo),e(K,yh),e(yh,$ne),e($ne,ofo),e(yh,rfo),e(yh,nI),e(nI,tfo),e(yh,afo),e(K,nfo),e(K,Lh),e(Lh,kne),e(kne,sfo),e(Lh,lfo),e(Lh,sI),e(sI,ifo),e(Lh,dfo),e(K,cfo),e(K,xh),e(xh,Sne),e(Sne,ffo),e(xh,mfo),e(xh,lI),e(lI,gfo),e(xh,hfo),e(K,pfo),e(K,$h),e($h,Rne),e(Rne,ufo),e($h,_fo),e($h,iI),e(iI,bfo),e($h,vfo),e(K,Ffo),e(K,kh),e(kh,Pne),e(Pne,Tfo),e(kh,Mfo),e(kh,dI),e(dI,Efo),e(kh,Cfo),e(K,wfo),e(K,Sh),e(Sh,Bne),e(Bne,Afo),e(Sh,yfo),e(Sh,cI),e(cI,Lfo),e(Sh,xfo),e(K,$fo),e(K,Rh),e(Rh,Ine),e(Ine,kfo),e(Rh,Sfo),e(Rh,fI),e(fI,Rfo),e(Rh,Pfo),e(K,Bfo),e(K,Ph),e(Ph,qne),e(qne,Ifo),e(Ph,qfo),e(Ph,mI),e(mI,Nfo),e(Ph,jfo),e(K,Dfo),e(K,Bh),e(Bh,Nne),e(Nne,Gfo),e(Bh,Ofo),e(Bh,gI),e(gI,Vfo),e(Bh,Xfo),e(K,zfo),e(K,Ih),e(Ih,jne),e(jne,Wfo),e(Ih,Qfo),e(Ih,hI),e(hI,Hfo),e(Ih,Ufo),e(K,Jfo),e(K,qh),e(qh,Dne),e(Dne,Yfo),e(qh,Kfo),e(qh,pI),e(pI,Zfo),e(qh,emo),e(K,omo),e(K,Nh),e(Nh,Gne),e(Gne,rmo),e(Nh,tmo),e(Nh,uI),e(uI,amo),e(Nh,nmo),e(K,smo),e(K,jh),e(jh,One),e(One,lmo),e(jh,imo),e(jh,_I),e(_I,dmo),e(jh,cmo),e(K,fmo),e(K,Dh),e(Dh,Vne),e(Vne,mmo),e(Dh,gmo),e(Dh,bI),e(bI,hmo),e(Dh,pmo),e(He,umo),M(Gh,He,null),e(He,_mo),M(Oh,He,null),e(yo,bmo),e(yo,Vh),M(K0,Vh,null),e(Vh,vmo),e(Vh,Xne),e(Xne,Fmo),b(f,iNe,_),b(f,xi,_),e(xi,Xh),e(Xh,zne),M(Z0,zne,null),e(xi,Tmo),e(xi,Wne),e(Wne,Mmo),b(f,dNe,_),b(f,Lo,_),M(eA,Lo,null),e(Lo,Emo),e(Lo,oA),e(oA,Cmo),e(oA,vI),e(vI,wmo),e(oA,Amo),e(Lo,ymo),e(Lo,rA),e(rA,Lmo),e(rA,Qne),e(Qne,xmo),e(rA,$mo),e(Lo,kmo),e(Lo,Ue),M(tA,Ue,null),e(Ue,Smo),e(Ue,Hne),e(Hne,Rmo),e(Ue,Pmo),e(Ue,$i),e($i,Bmo),e($i,Une),e(Une,Imo),e($i,qmo),e($i,Jne),e(Jne,Nmo),e($i,jmo),e(Ue,Dmo),e(Ue,pe),e(pe,zh),e(zh,Yne),e(Yne,Gmo),e(zh,Omo),e(zh,FI),e(FI,Vmo),e(zh,Xmo),e(pe,zmo),e(pe,Wh),e(Wh,Kne),e(Kne,Wmo),e(Wh,Qmo),e(Wh,Zne),e(Zne,Hmo),e(Wh,Umo),e(pe,Jmo),e(pe,Qh),e(Qh,ese),e(ese,Ymo),e(Qh,Kmo),e(Qh,TI),e(TI,Zmo),e(Qh,ego),e(pe,ogo),e(pe,Hh),e(Hh,ose),e(ose,rgo),e(Hh,tgo),e(Hh,MI),e(MI,ago),e(Hh,ngo),e(pe,sgo),e(pe,Uh),e(Uh,rse),e(rse,lgo),e(Uh,igo),e(Uh,EI),e(EI,dgo),e(Uh,cgo),e(pe,fgo),e(pe,Jh),e(Jh,tse),e(tse,mgo),e(Jh,ggo),e(Jh,CI),e(CI,hgo),e(Jh,pgo),e(pe,ugo),e(pe,Yh),e(Yh,ase),e(ase,_go),e(Yh,bgo),e(Yh,wI),e(wI,vgo),e(Yh,Fgo),e(pe,Tgo),e(pe,Kh),e(Kh,nse),e(nse,Mgo),e(Kh,Ego),e(Kh,AI),e(AI,Cgo),e(Kh,wgo),e(pe,Ago),e(pe,Zh),e(Zh,sse),e(sse,ygo),e(Zh,Lgo),e(Zh,yI),e(yI,xgo),e(Zh,$go),e(pe,kgo),e(pe,ep),e(ep,lse),e(lse,Sgo),e(ep,Rgo),e(ep,LI),e(LI,Pgo),e(ep,Bgo),e(pe,Igo),e(pe,op),e(op,ise),e(ise,qgo),e(op,Ngo),e(op,xI),e(xI,jgo),e(op,Dgo),e(pe,Ggo),e(pe,rp),e(rp,dse),e(dse,Ogo),e(rp,Vgo),e(rp,$I),e($I,Xgo),e(rp,zgo),e(pe,Wgo),e(pe,tp),e(tp,cse),e(cse,Qgo),e(tp,Hgo),e(tp,kI),e(kI,Ugo),e(tp,Jgo),e(pe,Ygo),e(pe,ap),e(ap,fse),e(fse,Kgo),e(ap,Zgo),e(ap,SI),e(SI,eho),e(ap,oho),e(pe,rho),e(pe,np),e(np,mse),e(mse,tho),e(np,aho),e(np,RI),e(RI,nho),e(np,sho),e(pe,lho),e(pe,sp),e(sp,gse),e(gse,iho),e(sp,dho),e(sp,PI),e(PI,cho),e(sp,fho),e(Ue,mho),M(lp,Ue,null),e(Ue,gho),M(ip,Ue,null),e(Lo,hho),e(Lo,dp),M(aA,dp,null),e(dp,pho),e(dp,hse),e(hse,uho),b(f,cNe,_),b(f,ki,_),e(ki,cp),e(cp,pse),M(nA,pse,null),e(ki,_ho),e(ki,use),e(use,bho),b(f,fNe,_),b(f,xo,_),M(sA,xo,null),e(xo,vho),e(xo,Si),e(Si,Fho),e(Si,BI),e(BI,Tho),e(Si,Mho),e(Si,II),e(II,Eho),e(Si,Cho),e(xo,who),e(xo,lA),e(lA,Aho),e(lA,_se),e(_se,yho),e(lA,Lho),e(xo,xho),e(xo,nt),M(iA,nt,null),e(nt,$ho),e(nt,bse),e(bse,kho),e(nt,Sho),e(nt,Ri),e(Ri,Rho),e(Ri,vse),e(vse,Pho),e(Ri,Bho),e(Ri,qI),e(qI,Iho),e(Ri,qho),e(nt,Nho),M(fp,nt,null),e(xo,jho),e(xo,Je),M(dA,Je,null),e(Je,Dho),e(Je,Fse),e(Fse,Gho),e(Je,Oho),e(Je,Sa),e(Sa,Vho),e(Sa,Tse),e(Tse,Xho),e(Sa,zho),e(Sa,Mse),e(Mse,Who),e(Sa,Qho),e(Sa,Ese),e(Ese,Hho),e(Sa,Uho),e(Je,Jho),e(Je,x),e(x,mp),e(mp,Cse),e(Cse,Yho),e(mp,Kho),e(mp,NI),e(NI,Zho),e(mp,epo),e(x,opo),e(x,gp),e(gp,wse),e(wse,rpo),e(gp,tpo),e(gp,jI),e(jI,apo),e(gp,npo),e(x,spo),e(x,hp),e(hp,Ase),e(Ase,lpo),e(hp,ipo),e(hp,DI),e(DI,dpo),e(hp,cpo),e(x,fpo),e(x,pp),e(pp,yse),e(yse,mpo),e(pp,gpo),e(pp,GI),e(GI,hpo),e(pp,ppo),e(x,upo),e(x,up),e(up,Lse),e(Lse,_po),e(up,bpo),e(up,OI),e(OI,vpo),e(up,Fpo),e(x,Tpo),e(x,_p),e(_p,xse),e(xse,Mpo),e(_p,Epo),e(_p,VI),e(VI,Cpo),e(_p,wpo),e(x,Apo),e(x,bp),e(bp,$se),e($se,ypo),e(bp,Lpo),e(bp,XI),e(XI,xpo),e(bp,$po),e(x,kpo),e(x,vp),e(vp,kse),e(kse,Spo),e(vp,Rpo),e(vp,zI),e(zI,Ppo),e(vp,Bpo),e(x,Ipo),e(x,Fp),e(Fp,Sse),e(Sse,qpo),e(Fp,Npo),e(Fp,WI),e(WI,jpo),e(Fp,Dpo),e(x,Gpo),e(x,Tp),e(Tp,Rse),e(Rse,Opo),e(Tp,Vpo),e(Tp,QI),e(QI,Xpo),e(Tp,zpo),e(x,Wpo),e(x,Mp),e(Mp,Pse),e(Pse,Qpo),e(Mp,Hpo),e(Mp,HI),e(HI,Upo),e(Mp,Jpo),e(x,Ypo),e(x,Ep),e(Ep,Bse),e(Bse,Kpo),e(Ep,Zpo),e(Ep,UI),e(UI,euo),e(Ep,ouo),e(x,ruo),e(x,Cp),e(Cp,Ise),e(Ise,tuo),e(Cp,auo),e(Cp,JI),e(JI,nuo),e(Cp,suo),e(x,luo),e(x,wp),e(wp,qse),e(qse,iuo),e(wp,duo),e(wp,YI),e(YI,cuo),e(wp,fuo),e(x,muo),e(x,Ap),e(Ap,Nse),e(Nse,guo),e(Ap,huo),e(Ap,KI),e(KI,puo),e(Ap,uuo),e(x,_uo),e(x,yp),e(yp,jse),e(jse,buo),e(yp,vuo),e(yp,ZI),e(ZI,Fuo),e(yp,Tuo),e(x,Muo),e(x,Lp),e(Lp,Dse),e(Dse,Euo),e(Lp,Cuo),e(Lp,eq),e(eq,wuo),e(Lp,Auo),e(x,yuo),e(x,xp),e(xp,Gse),e(Gse,Luo),e(xp,xuo),e(xp,oq),e(oq,$uo),e(xp,kuo),e(x,Suo),e(x,$p),e($p,Ose),e(Ose,Ruo),e($p,Puo),e($p,rq),e(rq,Buo),e($p,Iuo),e(x,quo),e(x,kp),e(kp,Vse),e(Vse,Nuo),e(kp,juo),e(kp,tq),e(tq,Duo),e(kp,Guo),e(x,Ouo),e(x,Sp),e(Sp,Xse),e(Xse,Vuo),e(Sp,Xuo),e(Sp,aq),e(aq,zuo),e(Sp,Wuo),e(x,Quo),e(x,Rp),e(Rp,zse),e(zse,Huo),e(Rp,Uuo),e(Rp,nq),e(nq,Juo),e(Rp,Yuo),e(x,Kuo),e(x,Pp),e(Pp,Wse),e(Wse,Zuo),e(Pp,e_o),e(Pp,sq),e(sq,o_o),e(Pp,r_o),e(x,t_o),e(x,Bp),e(Bp,Qse),e(Qse,a_o),e(Bp,n_o),e(Bp,lq),e(lq,s_o),e(Bp,l_o),e(x,i_o),e(x,Ip),e(Ip,Hse),e(Hse,d_o),e(Ip,c_o),e(Ip,iq),e(iq,f_o),e(Ip,m_o),e(x,g_o),e(x,qp),e(qp,Use),e(Use,h_o),e(qp,p_o),e(qp,dq),e(dq,u_o),e(qp,__o),e(x,b_o),e(x,Np),e(Np,Jse),e(Jse,v_o),e(Np,F_o),e(Np,cq),e(cq,T_o),e(Np,M_o),e(x,E_o),e(x,jp),e(jp,Yse),e(Yse,C_o),e(jp,w_o),e(jp,fq),e(fq,A_o),e(jp,y_o),e(x,L_o),e(x,Dp),e(Dp,Kse),e(Kse,x_o),e(Dp,$_o),e(Dp,mq),e(mq,k_o),e(Dp,S_o),e(x,R_o),e(x,Gp),e(Gp,Zse),e(Zse,P_o),e(Gp,B_o),e(Gp,gq),e(gq,I_o),e(Gp,q_o),e(x,N_o),e(x,Op),e(Op,ele),e(ele,j_o),e(Op,D_o),e(Op,hq),e(hq,G_o),e(Op,O_o),e(x,V_o),e(x,Vp),e(Vp,ole),e(ole,X_o),e(Vp,z_o),e(Vp,pq),e(pq,W_o),e(Vp,Q_o),e(x,H_o),e(x,js),e(js,rle),e(rle,U_o),e(js,J_o),e(js,uq),e(uq,Y_o),e(js,K_o),e(js,_q),e(_q,Z_o),e(js,e2o),e(x,o2o),e(x,Xp),e(Xp,tle),e(tle,r2o),e(Xp,t2o),e(Xp,bq),e(bq,a2o),e(Xp,n2o),e(x,s2o),e(x,zp),e(zp,ale),e(ale,l2o),e(zp,i2o),e(zp,vq),e(vq,d2o),e(zp,c2o),e(x,f2o),e(x,Wp),e(Wp,nle),e(nle,m2o),e(Wp,g2o),e(Wp,Fq),e(Fq,h2o),e(Wp,p2o),e(x,u2o),e(x,Qp),e(Qp,sle),e(sle,_2o),e(Qp,b2o),e(Qp,Tq),e(Tq,v2o),e(Qp,F2o),e(x,T2o),e(x,Hp),e(Hp,lle),e(lle,M2o),e(Hp,E2o),e(Hp,Mq),e(Mq,C2o),e(Hp,w2o),e(x,A2o),e(x,Up),e(Up,ile),e(ile,y2o),e(Up,L2o),e(Up,Eq),e(Eq,x2o),e(Up,$2o),e(x,k2o),e(x,Jp),e(Jp,dle),e(dle,S2o),e(Jp,R2o),e(Jp,Cq),e(Cq,P2o),e(Jp,B2o),e(x,I2o),e(x,Yp),e(Yp,cle),e(cle,q2o),e(Yp,N2o),e(Yp,wq),e(wq,j2o),e(Yp,D2o),e(x,G2o),e(x,Kp),e(Kp,fle),e(fle,O2o),e(Kp,V2o),e(Kp,Aq),e(Aq,X2o),e(Kp,z2o),e(x,W2o),e(x,Zp),e(Zp,mle),e(mle,Q2o),e(Zp,H2o),e(Zp,yq),e(yq,U2o),e(Zp,J2o),e(x,Y2o),e(x,eu),e(eu,gle),e(gle,K2o),e(eu,Z2o),e(eu,Lq),e(Lq,e1o),e(eu,o1o),e(x,r1o),e(x,ou),e(ou,hle),e(hle,t1o),e(ou,a1o),e(ou,xq),e(xq,n1o),e(ou,s1o),e(x,l1o),e(x,ru),e(ru,ple),e(ple,i1o),e(ru,d1o),e(ru,$q),e($q,c1o),e(ru,f1o),e(x,m1o),e(x,tu),e(tu,ule),e(ule,g1o),e(tu,h1o),e(tu,kq),e(kq,p1o),e(tu,u1o),e(x,_1o),e(x,au),e(au,_le),e(_le,b1o),e(au,v1o),e(au,Sq),e(Sq,F1o),e(au,T1o),e(x,M1o),e(x,nu),e(nu,ble),e(ble,E1o),e(nu,C1o),e(nu,Rq),e(Rq,w1o),e(nu,A1o),e(x,y1o),e(x,su),e(su,vle),e(vle,L1o),e(su,x1o),e(su,Pq),e(Pq,$1o),e(su,k1o),e(x,S1o),e(x,lu),e(lu,Fle),e(Fle,R1o),e(lu,P1o),e(lu,Bq),e(Bq,B1o),e(lu,I1o),e(x,q1o),e(x,iu),e(iu,Tle),e(Tle,N1o),e(iu,j1o),e(iu,Iq),e(Iq,D1o),e(iu,G1o),e(x,O1o),e(x,du),e(du,Mle),e(Mle,V1o),e(du,X1o),e(du,qq),e(qq,z1o),e(du,W1o),e(x,Q1o),e(x,cu),e(cu,Ele),e(Ele,H1o),e(cu,U1o),e(cu,Nq),e(Nq,J1o),e(cu,Y1o),e(x,K1o),e(x,fu),e(fu,Cle),e(Cle,Z1o),e(fu,ebo),e(fu,jq),e(jq,obo),e(fu,rbo),e(x,tbo),e(x,mu),e(mu,wle),e(wle,abo),e(mu,nbo),e(mu,Dq),e(Dq,sbo),e(mu,lbo),e(x,ibo),e(x,gu),e(gu,Ale),e(Ale,dbo),e(gu,cbo),e(gu,Gq),e(Gq,fbo),e(gu,mbo),e(x,gbo),e(x,hu),e(hu,yle),e(yle,hbo),e(hu,pbo),e(hu,Oq),e(Oq,ubo),e(hu,_bo),e(x,bbo),e(x,pu),e(pu,Lle),e(Lle,vbo),e(pu,Fbo),e(pu,Vq),e(Vq,Tbo),e(pu,Mbo),e(x,Ebo),e(x,uu),e(uu,xle),e(xle,Cbo),e(uu,wbo),e(uu,Xq),e(Xq,Abo),e(uu,ybo),e(x,Lbo),e(x,_u),e(_u,$le),e($le,xbo),e(_u,$bo),e(_u,zq),e(zq,kbo),e(_u,Sbo),e(x,Rbo),e(x,bu),e(bu,kle),e(kle,Pbo),e(bu,Bbo),e(bu,Wq),e(Wq,Ibo),e(bu,qbo),e(x,Nbo),e(x,vu),e(vu,Sle),e(Sle,jbo),e(vu,Dbo),e(vu,Qq),e(Qq,Gbo),e(vu,Obo),e(x,Vbo),e(x,Fu),e(Fu,Rle),e(Rle,Xbo),e(Fu,zbo),e(Fu,Hq),e(Hq,Wbo),e(Fu,Qbo),e(x,Hbo),e(x,Tu),e(Tu,Ple),e(Ple,Ubo),e(Tu,Jbo),e(Tu,Uq),e(Uq,Ybo),e(Tu,Kbo),e(x,Zbo),e(x,Mu),e(Mu,Ble),e(Ble,evo),e(Mu,ovo),e(Mu,Jq),e(Jq,rvo),e(Mu,tvo),e(x,avo),e(x,Eu),e(Eu,Ile),e(Ile,nvo),e(Eu,svo),e(Eu,Yq),e(Yq,lvo),e(Eu,ivo),e(x,dvo),e(x,Cu),e(Cu,qle),e(qle,cvo),e(Cu,fvo),e(Cu,Kq),e(Kq,mvo),e(Cu,gvo),e(x,hvo),e(x,wu),e(wu,Nle),e(Nle,pvo),e(wu,uvo),e(wu,Zq),e(Zq,_vo),e(wu,bvo),e(x,vvo),e(x,Au),e(Au,jle),e(jle,Fvo),e(Au,Tvo),e(Au,eN),e(eN,Mvo),e(Au,Evo),e(x,Cvo),e(x,yu),e(yu,Dle),e(Dle,wvo),e(yu,Avo),e(yu,oN),e(oN,yvo),e(yu,Lvo),e(x,xvo),e(x,Lu),e(Lu,Gle),e(Gle,$vo),e(Lu,kvo),e(Lu,rN),e(rN,Svo),e(Lu,Rvo),e(x,Pvo),e(x,xu),e(xu,Ole),e(Ole,Bvo),e(xu,Ivo),e(xu,tN),e(tN,qvo),e(xu,Nvo),e(x,jvo),e(x,$u),e($u,Vle),e(Vle,Dvo),e($u,Gvo),e($u,aN),e(aN,Ovo),e($u,Vvo),e(x,Xvo),e(x,ku),e(ku,Xle),e(Xle,zvo),e(ku,Wvo),e(ku,nN),e(nN,Qvo),e(ku,Hvo),e(x,Uvo),e(x,Su),e(Su,zle),e(zle,Jvo),e(Su,Yvo),e(Su,sN),e(sN,Kvo),e(Su,Zvo),e(x,eFo),e(x,Ru),e(Ru,Wle),e(Wle,oFo),e(Ru,rFo),e(Ru,lN),e(lN,tFo),e(Ru,aFo),e(x,nFo),e(x,Pu),e(Pu,Qle),e(Qle,sFo),e(Pu,lFo),e(Pu,iN),e(iN,iFo),e(Pu,dFo),e(x,cFo),e(x,Bu),e(Bu,Hle),e(Hle,fFo),e(Bu,mFo),e(Bu,dN),e(dN,gFo),e(Bu,hFo),e(x,pFo),e(x,Iu),e(Iu,Ule),e(Ule,uFo),e(Iu,_Fo),e(Iu,cN),e(cN,bFo),e(Iu,vFo),e(x,FFo),e(x,qu),e(qu,Jle),e(Jle,TFo),e(qu,MFo),e(qu,fN),e(fN,EFo),e(qu,CFo),e(x,wFo),e(x,Nu),e(Nu,Yle),e(Yle,AFo),e(Nu,yFo),e(Nu,mN),e(mN,LFo),e(Nu,xFo),e(x,$Fo),e(x,ju),e(ju,Kle),e(Kle,kFo),e(ju,SFo),e(ju,gN),e(gN,RFo),e(ju,PFo),e(x,BFo),e(x,Du),e(Du,Zle),e(Zle,IFo),e(Du,qFo),e(Du,hN),e(hN,NFo),e(Du,jFo),e(x,DFo),e(x,Gu),e(Gu,eie),e(eie,GFo),e(Gu,OFo),e(Gu,pN),e(pN,VFo),e(Gu,XFo),e(x,zFo),e(x,Ou),e(Ou,oie),e(oie,WFo),e(Ou,QFo),e(Ou,uN),e(uN,HFo),e(Ou,UFo),e(x,JFo),e(x,Vu),e(Vu,rie),e(rie,YFo),e(Vu,KFo),e(Vu,_N),e(_N,ZFo),e(Vu,e6o),e(x,o6o),e(x,Xu),e(Xu,tie),e(tie,r6o),e(Xu,t6o),e(Xu,bN),e(bN,a6o),e(Xu,n6o),e(x,s6o),e(x,zu),e(zu,aie),e(aie,l6o),e(zu,i6o),e(zu,vN),e(vN,d6o),e(zu,c6o),e(x,f6o),e(x,Wu),e(Wu,nie),e(nie,m6o),e(Wu,g6o),e(Wu,FN),e(FN,h6o),e(Wu,p6o),e(x,u6o),e(x,Qu),e(Qu,sie),e(sie,_6o),e(Qu,b6o),e(Qu,TN),e(TN,v6o),e(Qu,F6o),e(x,T6o),e(x,Hu),e(Hu,lie),e(lie,M6o),e(Hu,E6o),e(Hu,MN),e(MN,C6o),e(Hu,w6o),e(x,A6o),e(x,Uu),e(Uu,iie),e(iie,y6o),e(Uu,L6o),e(Uu,EN),e(EN,x6o),e(Uu,$6o),e(x,k6o),e(x,Ju),e(Ju,die),e(die,S6o),e(Ju,R6o),e(Ju,CN),e(CN,P6o),e(Ju,B6o),e(x,I6o),e(x,Yu),e(Yu,cie),e(cie,q6o),e(Yu,N6o),e(Yu,wN),e(wN,j6o),e(Yu,D6o),e(x,G6o),e(x,Ku),e(Ku,fie),e(fie,O6o),e(Ku,V6o),e(Ku,AN),e(AN,X6o),e(Ku,z6o),e(x,W6o),e(x,Zu),e(Zu,mie),e(mie,Q6o),e(Zu,H6o),e(Zu,yN),e(yN,U6o),e(Zu,J6o),e(x,Y6o),e(x,e_),e(e_,gie),e(gie,K6o),e(e_,Z6o),e(e_,LN),e(LN,eTo),e(e_,oTo),e(x,rTo),e(x,o_),e(o_,hie),e(hie,tTo),e(o_,aTo),e(o_,xN),e(xN,nTo),e(o_,sTo),e(x,lTo),e(x,r_),e(r_,pie),e(pie,iTo),e(r_,dTo),e(r_,$N),e($N,cTo),e(r_,fTo),e(Je,mTo),e(Je,t_),e(t_,gTo),e(t_,uie),e(uie,hTo),e(t_,pTo),e(t_,_ie),e(_ie,uTo),e(Je,_To),M(a_,Je,null),b(f,mNe,_),b(f,Pi,_),e(Pi,n_),e(n_,bie),M(cA,bie,null),e(Pi,bTo),e(Pi,vie),e(vie,vTo),b(f,gNe,_),b(f,$o,_),M(fA,$o,null),e($o,FTo),e($o,Bi),e(Bi,TTo),e(Bi,kN),e(kN,MTo),e(Bi,ETo),e(Bi,SN),e(SN,CTo),e(Bi,wTo),e($o,ATo),e($o,mA),e(mA,yTo),e(mA,Fie),e(Fie,LTo),e(mA,xTo),e($o,$To),e($o,st),M(gA,st,null),e(st,kTo),e(st,Tie),e(Tie,STo),e(st,RTo),e(st,Ii),e(Ii,PTo),e(Ii,Mie),e(Mie,BTo),e(Ii,ITo),e(Ii,RN),e(RN,qTo),e(Ii,NTo),e(st,jTo),M(s_,st,null),e($o,DTo),e($o,Ye),M(hA,Ye,null),e(Ye,GTo),e(Ye,Eie),e(Eie,OTo),e(Ye,VTo),e(Ye,Ra),e(Ra,XTo),e(Ra,Cie),e(Cie,zTo),e(Ra,WTo),e(Ra,wie),e(wie,QTo),e(Ra,HTo),e(Ra,Aie),e(Aie,UTo),e(Ra,JTo),e(Ye,YTo),e(Ye,G),e(G,l_),e(l_,yie),e(yie,KTo),e(l_,ZTo),e(l_,PN),e(PN,e8o),e(l_,o8o),e(G,r8o),e(G,i_),e(i_,Lie),e(Lie,t8o),e(i_,a8o),e(i_,BN),e(BN,n8o),e(i_,s8o),e(G,l8o),e(G,d_),e(d_,xie),e(xie,i8o),e(d_,d8o),e(d_,IN),e(IN,c8o),e(d_,f8o),e(G,m8o),e(G,c_),e(c_,$ie),e($ie,g8o),e(c_,h8o),e(c_,qN),e(qN,p8o),e(c_,u8o),e(G,_8o),e(G,f_),e(f_,kie),e(kie,b8o),e(f_,v8o),e(f_,NN),e(NN,F8o),e(f_,T8o),e(G,M8o),e(G,m_),e(m_,Sie),e(Sie,E8o),e(m_,C8o),e(m_,jN),e(jN,w8o),e(m_,A8o),e(G,y8o),e(G,g_),e(g_,Rie),e(Rie,L8o),e(g_,x8o),e(g_,DN),e(DN,$8o),e(g_,k8o),e(G,S8o),e(G,h_),e(h_,Pie),e(Pie,R8o),e(h_,P8o),e(h_,GN),e(GN,B8o),e(h_,I8o),e(G,q8o),e(G,p_),e(p_,Bie),e(Bie,N8o),e(p_,j8o),e(p_,ON),e(ON,D8o),e(p_,G8o),e(G,O8o),e(G,u_),e(u_,Iie),e(Iie,V8o),e(u_,X8o),e(u_,VN),e(VN,z8o),e(u_,W8o),e(G,Q8o),e(G,__),e(__,qie),e(qie,H8o),e(__,U8o),e(__,XN),e(XN,J8o),e(__,Y8o),e(G,K8o),e(G,b_),e(b_,Nie),e(Nie,Z8o),e(b_,e7o),e(b_,zN),e(zN,o7o),e(b_,r7o),e(G,t7o),e(G,v_),e(v_,jie),e(jie,a7o),e(v_,n7o),e(v_,WN),e(WN,s7o),e(v_,l7o),e(G,i7o),e(G,F_),e(F_,Die),e(Die,d7o),e(F_,c7o),e(F_,QN),e(QN,f7o),e(F_,m7o),e(G,g7o),e(G,T_),e(T_,Gie),e(Gie,h7o),e(T_,p7o),e(T_,HN),e(HN,u7o),e(T_,_7o),e(G,b7o),e(G,M_),e(M_,Oie),e(Oie,v7o),e(M_,F7o),e(M_,UN),e(UN,T7o),e(M_,M7o),e(G,E7o),e(G,E_),e(E_,Vie),e(Vie,C7o),e(E_,w7o),e(E_,JN),e(JN,A7o),e(E_,y7o),e(G,L7o),e(G,C_),e(C_,Xie),e(Xie,x7o),e(C_,$7o),e(C_,YN),e(YN,k7o),e(C_,S7o),e(G,R7o),e(G,w_),e(w_,zie),e(zie,P7o),e(w_,B7o),e(w_,KN),e(KN,I7o),e(w_,q7o),e(G,N7o),e(G,A_),e(A_,Wie),e(Wie,j7o),e(A_,D7o),e(A_,ZN),e(ZN,G7o),e(A_,O7o),e(G,V7o),e(G,y_),e(y_,Qie),e(Qie,X7o),e(y_,z7o),e(y_,ej),e(ej,W7o),e(y_,Q7o),e(G,H7o),e(G,L_),e(L_,Hie),e(Hie,U7o),e(L_,J7o),e(L_,oj),e(oj,Y7o),e(L_,K7o),e(G,Z7o),e(G,x_),e(x_,Uie),e(Uie,eMo),e(x_,oMo),e(x_,rj),e(rj,rMo),e(x_,tMo),e(G,aMo),e(G,$_),e($_,Jie),e(Jie,nMo),e($_,sMo),e($_,tj),e(tj,lMo),e($_,iMo),e(G,dMo),e(G,k_),e(k_,Yie),e(Yie,cMo),e(k_,fMo),e(k_,aj),e(aj,mMo),e(k_,gMo),e(G,hMo),e(G,S_),e(S_,Kie),e(Kie,pMo),e(S_,uMo),e(S_,nj),e(nj,_Mo),e(S_,bMo),e(G,vMo),e(G,R_),e(R_,Zie),e(Zie,FMo),e(R_,TMo),e(R_,sj),e(sj,MMo),e(R_,EMo),e(G,CMo),e(G,P_),e(P_,ede),e(ede,wMo),e(P_,AMo),e(P_,lj),e(lj,yMo),e(P_,LMo),e(G,xMo),e(G,B_),e(B_,ode),e(ode,$Mo),e(B_,kMo),e(B_,ij),e(ij,SMo),e(B_,RMo),e(G,PMo),e(G,I_),e(I_,rde),e(rde,BMo),e(I_,IMo),e(I_,dj),e(dj,qMo),e(I_,NMo),e(G,jMo),e(G,q_),e(q_,tde),e(tde,DMo),e(q_,GMo),e(q_,cj),e(cj,OMo),e(q_,VMo),e(G,XMo),e(G,N_),e(N_,ade),e(ade,zMo),e(N_,WMo),e(N_,fj),e(fj,QMo),e(N_,HMo),e(G,UMo),e(G,j_),e(j_,nde),e(nde,JMo),e(j_,YMo),e(j_,mj),e(mj,KMo),e(j_,ZMo),e(G,e4o),e(G,D_),e(D_,sde),e(sde,o4o),e(D_,r4o),e(D_,gj),e(gj,t4o),e(D_,a4o),e(G,n4o),e(G,G_),e(G_,lde),e(lde,s4o),e(G_,l4o),e(G_,hj),e(hj,i4o),e(G_,d4o),e(G,c4o),e(G,O_),e(O_,ide),e(ide,f4o),e(O_,m4o),e(O_,pj),e(pj,g4o),e(O_,h4o),e(G,p4o),e(G,V_),e(V_,dde),e(dde,u4o),e(V_,_4o),e(V_,uj),e(uj,b4o),e(V_,v4o),e(G,F4o),e(G,X_),e(X_,cde),e(cde,T4o),e(X_,M4o),e(X_,_j),e(_j,E4o),e(X_,C4o),e(G,w4o),e(G,z_),e(z_,fde),e(fde,A4o),e(z_,y4o),e(z_,bj),e(bj,L4o),e(z_,x4o),e(G,$4o),e(G,W_),e(W_,mde),e(mde,k4o),e(W_,S4o),e(W_,vj),e(vj,R4o),e(W_,P4o),e(G,B4o),e(G,Q_),e(Q_,gde),e(gde,I4o),e(Q_,q4o),e(Q_,Fj),e(Fj,N4o),e(Q_,j4o),e(G,D4o),e(G,H_),e(H_,hde),e(hde,G4o),e(H_,O4o),e(H_,Tj),e(Tj,V4o),e(H_,X4o),e(Ye,z4o),e(Ye,U_),e(U_,W4o),e(U_,pde),e(pde,Q4o),e(U_,H4o),e(U_,ude),e(ude,U4o),e(Ye,J4o),M(J_,Ye,null),b(f,hNe,_),b(f,qi,_),e(qi,Y_),e(Y_,_de),M(pA,_de,null),e(qi,Y4o),e(qi,bde),e(bde,K4o),b(f,pNe,_),b(f,ko,_),M(uA,ko,null),e(ko,Z4o),e(ko,Ni),e(Ni,eEo),e(Ni,Mj),e(Mj,oEo),e(Ni,rEo),e(Ni,Ej),e(Ej,tEo),e(Ni,aEo),e(ko,nEo),e(ko,_A),e(_A,sEo),e(_A,vde),e(vde,lEo),e(_A,iEo),e(ko,dEo),e(ko,lt),M(bA,lt,null),e(lt,cEo),e(lt,Fde),e(Fde,fEo),e(lt,mEo),e(lt,ji),e(ji,gEo),e(ji,Tde),e(Tde,hEo),e(ji,pEo),e(ji,Cj),e(Cj,uEo),e(ji,_Eo),e(lt,bEo),M(K_,lt,null),e(ko,vEo),e(ko,Ke),M(vA,Ke,null),e(Ke,FEo),e(Ke,Mde),e(Mde,TEo),e(Ke,MEo),e(Ke,Pa),e(Pa,EEo),e(Pa,Ede),e(Ede,CEo),e(Pa,wEo),e(Pa,Cde),e(Cde,AEo),e(Pa,yEo),e(Pa,wde),e(wde,LEo),e(Pa,xEo),e(Ke,$Eo),e(Ke,z),e(z,Z_),e(Z_,Ade),e(Ade,kEo),e(Z_,SEo),e(Z_,wj),e(wj,REo),e(Z_,PEo),e(z,BEo),e(z,e2),e(e2,yde),e(yde,IEo),e(e2,qEo),e(e2,Aj),e(Aj,NEo),e(e2,jEo),e(z,DEo),e(z,o2),e(o2,Lde),e(Lde,GEo),e(o2,OEo),e(o2,yj),e(yj,VEo),e(o2,XEo),e(z,zEo),e(z,r2),e(r2,xde),e(xde,WEo),e(r2,QEo),e(r2,Lj),e(Lj,HEo),e(r2,UEo),e(z,JEo),e(z,t2),e(t2,$de),e($de,YEo),e(t2,KEo),e(t2,xj),e(xj,ZEo),e(t2,eCo),e(z,oCo),e(z,a2),e(a2,kde),e(kde,rCo),e(a2,tCo),e(a2,$j),e($j,aCo),e(a2,nCo),e(z,sCo),e(z,n2),e(n2,Sde),e(Sde,lCo),e(n2,iCo),e(n2,kj),e(kj,dCo),e(n2,cCo),e(z,fCo),e(z,s2),e(s2,Rde),e(Rde,mCo),e(s2,gCo),e(s2,Sj),e(Sj,hCo),e(s2,pCo),e(z,uCo),e(z,l2),e(l2,Pde),e(Pde,_Co),e(l2,bCo),e(l2,Rj),e(Rj,vCo),e(l2,FCo),e(z,TCo),e(z,i2),e(i2,Bde),e(Bde,MCo),e(i2,ECo),e(i2,Pj),e(Pj,CCo),e(i2,wCo),e(z,ACo),e(z,d2),e(d2,Ide),e(Ide,yCo),e(d2,LCo),e(d2,Bj),e(Bj,xCo),e(d2,$Co),e(z,kCo),e(z,c2),e(c2,qde),e(qde,SCo),e(c2,RCo),e(c2,Ij),e(Ij,PCo),e(c2,BCo),e(z,ICo),e(z,f2),e(f2,Nde),e(Nde,qCo),e(f2,NCo),e(f2,qj),e(qj,jCo),e(f2,DCo),e(z,GCo),e(z,m2),e(m2,jde),e(jde,OCo),e(m2,VCo),e(m2,Nj),e(Nj,XCo),e(m2,zCo),e(z,WCo),e(z,g2),e(g2,Dde),e(Dde,QCo),e(g2,HCo),e(g2,jj),e(jj,UCo),e(g2,JCo),e(z,YCo),e(z,h2),e(h2,Gde),e(Gde,KCo),e(h2,ZCo),e(h2,Dj),e(Dj,e5o),e(h2,o5o),e(z,r5o),e(z,p2),e(p2,Ode),e(Ode,t5o),e(p2,a5o),e(p2,Gj),e(Gj,n5o),e(p2,s5o),e(z,l5o),e(z,u2),e(u2,Vde),e(Vde,i5o),e(u2,d5o),e(u2,Oj),e(Oj,c5o),e(u2,f5o),e(z,m5o),e(z,_2),e(_2,Xde),e(Xde,g5o),e(_2,h5o),e(_2,Vj),e(Vj,p5o),e(_2,u5o),e(z,_5o),e(z,b2),e(b2,zde),e(zde,b5o),e(b2,v5o),e(b2,Xj),e(Xj,F5o),e(b2,T5o),e(z,M5o),e(z,v2),e(v2,Wde),e(Wde,E5o),e(v2,C5o),e(v2,zj),e(zj,w5o),e(v2,A5o),e(z,y5o),e(z,F2),e(F2,Qde),e(Qde,L5o),e(F2,x5o),e(F2,Wj),e(Wj,$5o),e(F2,k5o),e(z,S5o),e(z,T2),e(T2,Hde),e(Hde,R5o),e(T2,P5o),e(T2,Qj),e(Qj,B5o),e(T2,I5o),e(z,q5o),e(z,M2),e(M2,Ude),e(Ude,N5o),e(M2,j5o),e(M2,Hj),e(Hj,D5o),e(M2,G5o),e(z,O5o),e(z,E2),e(E2,Jde),e(Jde,V5o),e(E2,X5o),e(E2,Uj),e(Uj,z5o),e(E2,W5o),e(z,Q5o),e(z,C2),e(C2,Yde),e(Yde,H5o),e(C2,U5o),e(C2,Jj),e(Jj,J5o),e(C2,Y5o),e(z,K5o),e(z,w2),e(w2,Kde),e(Kde,Z5o),e(w2,e3o),e(w2,Yj),e(Yj,o3o),e(w2,r3o),e(z,t3o),e(z,A2),e(A2,Zde),e(Zde,a3o),e(A2,n3o),e(A2,Kj),e(Kj,s3o),e(A2,l3o),e(z,i3o),e(z,y2),e(y2,ece),e(ece,d3o),e(y2,c3o),e(y2,Zj),e(Zj,f3o),e(y2,m3o),e(z,g3o),e(z,L2),e(L2,oce),e(oce,h3o),e(L2,p3o),e(L2,eD),e(eD,u3o),e(L2,_3o),e(z,b3o),e(z,x2),e(x2,rce),e(rce,v3o),e(x2,F3o),e(x2,oD),e(oD,T3o),e(x2,M3o),e(z,E3o),e(z,$2),e($2,tce),e(tce,C3o),e($2,w3o),e($2,rD),e(rD,A3o),e($2,y3o),e(z,L3o),e(z,k2),e(k2,ace),e(ace,x3o),e(k2,$3o),e(k2,tD),e(tD,k3o),e(k2,S3o),e(z,R3o),e(z,S2),e(S2,nce),e(nce,P3o),e(S2,B3o),e(S2,aD),e(aD,I3o),e(S2,q3o),e(z,N3o),e(z,R2),e(R2,sce),e(sce,j3o),e(R2,D3o),e(R2,nD),e(nD,G3o),e(R2,O3o),e(z,V3o),e(z,P2),e(P2,lce),e(lce,X3o),e(P2,z3o),e(P2,sD),e(sD,W3o),e(P2,Q3o),e(Ke,H3o),e(Ke,B2),e(B2,U3o),e(B2,ice),e(ice,J3o),e(B2,Y3o),e(B2,dce),e(dce,K3o),e(Ke,Z3o),M(I2,Ke,null),b(f,uNe,_),b(f,Di,_),e(Di,q2),e(q2,cce),M(FA,cce,null),e(Di,ewo),e(Di,fce),e(fce,owo),b(f,_Ne,_),b(f,So,_),M(TA,So,null),e(So,rwo),e(So,Gi),e(Gi,two),e(Gi,lD),e(lD,awo),e(Gi,nwo),e(Gi,iD),e(iD,swo),e(Gi,lwo),e(So,iwo),e(So,MA),e(MA,dwo),e(MA,mce),e(mce,cwo),e(MA,fwo),e(So,mwo),e(So,it),M(EA,it,null),e(it,gwo),e(it,gce),e(gce,hwo),e(it,pwo),e(it,Oi),e(Oi,uwo),e(Oi,hce),e(hce,_wo),e(Oi,bwo),e(Oi,dD),e(dD,vwo),e(Oi,Fwo),e(it,Two),M(N2,it,null),e(So,Mwo),e(So,Ze),M(CA,Ze,null),e(Ze,Ewo),e(Ze,pce),e(pce,Cwo),e(Ze,wwo),e(Ze,Ba),e(Ba,Awo),e(Ba,uce),e(uce,ywo),e(Ba,Lwo),e(Ba,_ce),e(_ce,xwo),e(Ba,$wo),e(Ba,bce),e(bce,kwo),e(Ba,Swo),e(Ze,Rwo),e(Ze,W),e(W,j2),e(j2,vce),e(vce,Pwo),e(j2,Bwo),e(j2,cD),e(cD,Iwo),e(j2,qwo),e(W,Nwo),e(W,D2),e(D2,Fce),e(Fce,jwo),e(D2,Dwo),e(D2,fD),e(fD,Gwo),e(D2,Owo),e(W,Vwo),e(W,G2),e(G2,Tce),e(Tce,Xwo),e(G2,zwo),e(G2,mD),e(mD,Wwo),e(G2,Qwo),e(W,Hwo),e(W,O2),e(O2,Mce),e(Mce,Uwo),e(O2,Jwo),e(O2,gD),e(gD,Ywo),e(O2,Kwo),e(W,Zwo),e(W,V2),e(V2,Ece),e(Ece,e0o),e(V2,o0o),e(V2,hD),e(hD,r0o),e(V2,t0o),e(W,a0o),e(W,X2),e(X2,Cce),e(Cce,n0o),e(X2,s0o),e(X2,pD),e(pD,l0o),e(X2,i0o),e(W,d0o),e(W,z2),e(z2,wce),e(wce,c0o),e(z2,f0o),e(z2,uD),e(uD,m0o),e(z2,g0o),e(W,h0o),e(W,W2),e(W2,Ace),e(Ace,p0o),e(W2,u0o),e(W2,_D),e(_D,_0o),e(W2,b0o),e(W,v0o),e(W,Q2),e(Q2,yce),e(yce,F0o),e(Q2,T0o),e(Q2,bD),e(bD,M0o),e(Q2,E0o),e(W,C0o),e(W,H2),e(H2,Lce),e(Lce,w0o),e(H2,A0o),e(H2,vD),e(vD,y0o),e(H2,L0o),e(W,x0o),e(W,U2),e(U2,xce),e(xce,$0o),e(U2,k0o),e(U2,FD),e(FD,S0o),e(U2,R0o),e(W,P0o),e(W,J2),e(J2,$ce),e($ce,B0o),e(J2,I0o),e(J2,TD),e(TD,q0o),e(J2,N0o),e(W,j0o),e(W,Y2),e(Y2,kce),e(kce,D0o),e(Y2,G0o),e(Y2,MD),e(MD,O0o),e(Y2,V0o),e(W,X0o),e(W,K2),e(K2,Sce),e(Sce,z0o),e(K2,W0o),e(K2,ED),e(ED,Q0o),e(K2,H0o),e(W,U0o),e(W,Z2),e(Z2,Rce),e(Rce,J0o),e(Z2,Y0o),e(Z2,CD),e(CD,K0o),e(Z2,Z0o),e(W,eAo),e(W,e1),e(e1,Pce),e(Pce,oAo),e(e1,rAo),e(e1,wD),e(wD,tAo),e(e1,aAo),e(W,nAo),e(W,o1),e(o1,Bce),e(Bce,sAo),e(o1,lAo),e(o1,AD),e(AD,iAo),e(o1,dAo),e(W,cAo),e(W,r1),e(r1,Ice),e(Ice,fAo),e(r1,mAo),e(r1,yD),e(yD,gAo),e(r1,hAo),e(W,pAo),e(W,t1),e(t1,qce),e(qce,uAo),e(t1,_Ao),e(t1,LD),e(LD,bAo),e(t1,vAo),e(W,FAo),e(W,a1),e(a1,Nce),e(Nce,TAo),e(a1,MAo),e(a1,xD),e(xD,EAo),e(a1,CAo),e(W,wAo),e(W,n1),e(n1,jce),e(jce,AAo),e(n1,yAo),e(n1,$D),e($D,LAo),e(n1,xAo),e(W,$Ao),e(W,s1),e(s1,Dce),e(Dce,kAo),e(s1,SAo),e(s1,kD),e(kD,RAo),e(s1,PAo),e(W,BAo),e(W,l1),e(l1,Gce),e(Gce,IAo),e(l1,qAo),e(l1,SD),e(SD,NAo),e(l1,jAo),e(W,DAo),e(W,i1),e(i1,Oce),e(Oce,GAo),e(i1,OAo),e(i1,RD),e(RD,VAo),e(i1,XAo),e(W,zAo),e(W,d1),e(d1,Vce),e(Vce,WAo),e(d1,QAo),e(d1,PD),e(PD,HAo),e(d1,UAo),e(W,JAo),e(W,c1),e(c1,Xce),e(Xce,YAo),e(c1,KAo),e(c1,BD),e(BD,ZAo),e(c1,eyo),e(W,oyo),e(W,f1),e(f1,zce),e(zce,ryo),e(f1,tyo),e(f1,ID),e(ID,ayo),e(f1,nyo),e(W,syo),e(W,m1),e(m1,Wce),e(Wce,lyo),e(m1,iyo),e(m1,qD),e(qD,dyo),e(m1,cyo),e(W,fyo),e(W,g1),e(g1,Qce),e(Qce,myo),e(g1,gyo),e(g1,ND),e(ND,hyo),e(g1,pyo),e(W,uyo),e(W,h1),e(h1,Hce),e(Hce,_yo),e(h1,byo),e(h1,jD),e(jD,vyo),e(h1,Fyo),e(W,Tyo),e(W,p1),e(p1,Uce),e(Uce,Myo),e(p1,Eyo),e(p1,Jce),e(Jce,Cyo),e(p1,wyo),e(W,Ayo),e(W,u1),e(u1,Yce),e(Yce,yyo),e(u1,Lyo),e(u1,DD),e(DD,xyo),e(u1,$yo),e(W,kyo),e(W,_1),e(_1,Kce),e(Kce,Syo),e(_1,Ryo),e(_1,GD),e(GD,Pyo),e(_1,Byo),e(W,Iyo),e(W,b1),e(b1,Zce),e(Zce,qyo),e(b1,Nyo),e(b1,OD),e(OD,jyo),e(b1,Dyo),e(W,Gyo),e(W,v1),e(v1,efe),e(efe,Oyo),e(v1,Vyo),e(v1,VD),e(VD,Xyo),e(v1,zyo),e(Ze,Wyo),e(Ze,F1),e(F1,Qyo),e(F1,ofe),e(ofe,Hyo),e(F1,Uyo),e(F1,rfe),e(rfe,Jyo),e(Ze,Yyo),M(T1,Ze,null),b(f,bNe,_),b(f,Vi,_),e(Vi,M1),e(M1,tfe),M(wA,tfe,null),e(Vi,Kyo),e(Vi,afe),e(afe,Zyo),b(f,vNe,_),b(f,Ro,_),M(AA,Ro,null),e(Ro,eLo),e(Ro,Xi),e(Xi,oLo),e(Xi,XD),e(XD,rLo),e(Xi,tLo),e(Xi,zD),e(zD,aLo),e(Xi,nLo),e(Ro,sLo),e(Ro,yA),e(yA,lLo),e(yA,nfe),e(nfe,iLo),e(yA,dLo),e(Ro,cLo),e(Ro,dt),M(LA,dt,null),e(dt,fLo),e(dt,sfe),e(sfe,mLo),e(dt,gLo),e(dt,zi),e(zi,hLo),e(zi,lfe),e(lfe,pLo),e(zi,uLo),e(zi,WD),e(WD,_Lo),e(zi,bLo),e(dt,vLo),M(E1,dt,null),e(Ro,FLo),e(Ro,eo),M(xA,eo,null),e(eo,TLo),e(eo,ife),e(ife,MLo),e(eo,ELo),e(eo,Ia),e(Ia,CLo),e(Ia,dfe),e(dfe,wLo),e(Ia,ALo),e(Ia,cfe),e(cfe,yLo),e(Ia,LLo),e(Ia,ffe),e(ffe,xLo),e(Ia,$Lo),e(eo,kLo),e(eo,ue),e(ue,C1),e(C1,mfe),e(mfe,SLo),e(C1,RLo),e(C1,QD),e(QD,PLo),e(C1,BLo),e(ue,ILo),e(ue,w1),e(w1,gfe),e(gfe,qLo),e(w1,NLo),e(w1,HD),e(HD,jLo),e(w1,DLo),e(ue,GLo),e(ue,A1),e(A1,hfe),e(hfe,OLo),e(A1,VLo),e(A1,UD),e(UD,XLo),e(A1,zLo),e(ue,WLo),e(ue,y1),e(y1,pfe),e(pfe,QLo),e(y1,HLo),e(y1,JD),e(JD,ULo),e(y1,JLo),e(ue,YLo),e(ue,L1),e(L1,ufe),e(ufe,KLo),e(L1,ZLo),e(L1,YD),e(YD,exo),e(L1,oxo),e(ue,rxo),e(ue,x1),e(x1,_fe),e(_fe,txo),e(x1,axo),e(x1,KD),e(KD,nxo),e(x1,sxo),e(ue,lxo),e(ue,$1),e($1,bfe),e(bfe,ixo),e($1,dxo),e($1,ZD),e(ZD,cxo),e($1,fxo),e(ue,mxo),e(ue,k1),e(k1,vfe),e(vfe,gxo),e(k1,hxo),e(k1,eG),e(eG,pxo),e(k1,uxo),e(ue,_xo),e(ue,S1),e(S1,Ffe),e(Ffe,bxo),e(S1,vxo),e(S1,oG),e(oG,Fxo),e(S1,Txo),e(ue,Mxo),e(ue,R1),e(R1,Tfe),e(Tfe,Exo),e(R1,Cxo),e(R1,rG),e(rG,wxo),e(R1,Axo),e(ue,yxo),e(ue,P1),e(P1,Mfe),e(Mfe,Lxo),e(P1,xxo),e(P1,tG),e(tG,$xo),e(P1,kxo),e(ue,Sxo),e(ue,B1),e(B1,Efe),e(Efe,Rxo),e(B1,Pxo),e(B1,aG),e(aG,Bxo),e(B1,Ixo),e(ue,qxo),e(ue,I1),e(I1,Cfe),e(Cfe,Nxo),e(I1,jxo),e(I1,nG),e(nG,Dxo),e(I1,Gxo),e(ue,Oxo),e(ue,q1),e(q1,wfe),e(wfe,Vxo),e(q1,Xxo),e(q1,sG),e(sG,zxo),e(q1,Wxo),e(ue,Qxo),e(ue,N1),e(N1,Afe),e(Afe,Hxo),e(N1,Uxo),e(N1,lG),e(lG,Jxo),e(N1,Yxo),e(ue,Kxo),e(ue,j1),e(j1,yfe),e(yfe,Zxo),e(j1,e9o),e(j1,iG),e(iG,o9o),e(j1,r9o),e(eo,t9o),e(eo,D1),e(D1,a9o),e(D1,Lfe),e(Lfe,n9o),e(D1,s9o),e(D1,xfe),e(xfe,l9o),e(eo,i9o),M(G1,eo,null),b(f,FNe,_),b(f,Wi,_),e(Wi,O1),e(O1,$fe),M($A,$fe,null),e(Wi,d9o),e(Wi,kfe),e(kfe,c9o),b(f,TNe,_),b(f,Po,_),M(kA,Po,null),e(Po,f9o),e(Po,Qi),e(Qi,m9o),e(Qi,dG),e(dG,g9o),e(Qi,h9o),e(Qi,cG),e(cG,p9o),e(Qi,u9o),e(Po,_9o),e(Po,SA),e(SA,b9o),e(SA,Sfe),e(Sfe,v9o),e(SA,F9o),e(Po,T9o),e(Po,ct),M(RA,ct,null),e(ct,M9o),e(ct,Rfe),e(Rfe,E9o),e(ct,C9o),e(ct,Hi),e(Hi,w9o),e(Hi,Pfe),e(Pfe,A9o),e(Hi,y9o),e(Hi,fG),e(fG,L9o),e(Hi,x9o),e(ct,$9o),M(V1,ct,null),e(Po,k9o),e(Po,oo),M(PA,oo,null),e(oo,S9o),e(oo,Bfe),e(Bfe,R9o),e(oo,P9o),e(oo,qa),e(qa,B9o),e(qa,Ife),e(Ife,I9o),e(qa,q9o),e(qa,qfe),e(qfe,N9o),e(qa,j9o),e(qa,Nfe),e(Nfe,D9o),e(qa,G9o),e(oo,O9o),e(oo,q),e(q,X1),e(X1,jfe),e(jfe,V9o),e(X1,X9o),e(X1,mG),e(mG,z9o),e(X1,W9o),e(q,Q9o),e(q,z1),e(z1,Dfe),e(Dfe,H9o),e(z1,U9o),e(z1,gG),e(gG,J9o),e(z1,Y9o),e(q,K9o),e(q,W1),e(W1,Gfe),e(Gfe,Z9o),e(W1,e$o),e(W1,hG),e(hG,o$o),e(W1,r$o),e(q,t$o),e(q,Q1),e(Q1,Ofe),e(Ofe,a$o),e(Q1,n$o),e(Q1,pG),e(pG,s$o),e(Q1,l$o),e(q,i$o),e(q,H1),e(H1,Vfe),e(Vfe,d$o),e(H1,c$o),e(H1,uG),e(uG,f$o),e(H1,m$o),e(q,g$o),e(q,U1),e(U1,Xfe),e(Xfe,h$o),e(U1,p$o),e(U1,_G),e(_G,u$o),e(U1,_$o),e(q,b$o),e(q,J1),e(J1,zfe),e(zfe,v$o),e(J1,F$o),e(J1,bG),e(bG,T$o),e(J1,M$o),e(q,E$o),e(q,Y1),e(Y1,Wfe),e(Wfe,C$o),e(Y1,w$o),e(Y1,vG),e(vG,A$o),e(Y1,y$o),e(q,L$o),e(q,K1),e(K1,Qfe),e(Qfe,x$o),e(K1,$$o),e(K1,FG),e(FG,k$o),e(K1,S$o),e(q,R$o),e(q,Z1),e(Z1,Hfe),e(Hfe,P$o),e(Z1,B$o),e(Z1,TG),e(TG,I$o),e(Z1,q$o),e(q,N$o),e(q,eb),e(eb,Ufe),e(Ufe,j$o),e(eb,D$o),e(eb,MG),e(MG,G$o),e(eb,O$o),e(q,V$o),e(q,ob),e(ob,Jfe),e(Jfe,X$o),e(ob,z$o),e(ob,EG),e(EG,W$o),e(ob,Q$o),e(q,H$o),e(q,rb),e(rb,Yfe),e(Yfe,U$o),e(rb,J$o),e(rb,CG),e(CG,Y$o),e(rb,K$o),e(q,Z$o),e(q,tb),e(tb,Kfe),e(Kfe,eko),e(tb,oko),e(tb,wG),e(wG,rko),e(tb,tko),e(q,ako),e(q,ab),e(ab,Zfe),e(Zfe,nko),e(ab,sko),e(ab,AG),e(AG,lko),e(ab,iko),e(q,dko),e(q,nb),e(nb,eme),e(eme,cko),e(nb,fko),e(nb,yG),e(yG,mko),e(nb,gko),e(q,hko),e(q,sb),e(sb,ome),e(ome,pko),e(sb,uko),e(sb,LG),e(LG,_ko),e(sb,bko),e(q,vko),e(q,lb),e(lb,rme),e(rme,Fko),e(lb,Tko),e(lb,xG),e(xG,Mko),e(lb,Eko),e(q,Cko),e(q,ib),e(ib,tme),e(tme,wko),e(ib,Ako),e(ib,$G),e($G,yko),e(ib,Lko),e(q,xko),e(q,db),e(db,ame),e(ame,$ko),e(db,kko),e(db,kG),e(kG,Sko),e(db,Rko),e(q,Pko),e(q,cb),e(cb,nme),e(nme,Bko),e(cb,Iko),e(cb,SG),e(SG,qko),e(cb,Nko),e(q,jko),e(q,fb),e(fb,sme),e(sme,Dko),e(fb,Gko),e(fb,RG),e(RG,Oko),e(fb,Vko),e(q,Xko),e(q,mb),e(mb,lme),e(lme,zko),e(mb,Wko),e(mb,PG),e(PG,Qko),e(mb,Hko),e(q,Uko),e(q,gb),e(gb,ime),e(ime,Jko),e(gb,Yko),e(gb,BG),e(BG,Kko),e(gb,Zko),e(q,eSo),e(q,hb),e(hb,dme),e(dme,oSo),e(hb,rSo),e(hb,IG),e(IG,tSo),e(hb,aSo),e(q,nSo),e(q,pb),e(pb,cme),e(cme,sSo),e(pb,lSo),e(pb,qG),e(qG,iSo),e(pb,dSo),e(q,cSo),e(q,ub),e(ub,fme),e(fme,fSo),e(ub,mSo),e(ub,NG),e(NG,gSo),e(ub,hSo),e(q,pSo),e(q,_b),e(_b,mme),e(mme,uSo),e(_b,_So),e(_b,jG),e(jG,bSo),e(_b,vSo),e(q,FSo),e(q,bb),e(bb,gme),e(gme,TSo),e(bb,MSo),e(bb,DG),e(DG,ESo),e(bb,CSo),e(q,wSo),e(q,vb),e(vb,hme),e(hme,ASo),e(vb,ySo),e(vb,GG),e(GG,LSo),e(vb,xSo),e(q,$So),e(q,Fb),e(Fb,pme),e(pme,kSo),e(Fb,SSo),e(Fb,OG),e(OG,RSo),e(Fb,PSo),e(q,BSo),e(q,Tb),e(Tb,ume),e(ume,ISo),e(Tb,qSo),e(Tb,VG),e(VG,NSo),e(Tb,jSo),e(q,DSo),e(q,Mb),e(Mb,_me),e(_me,GSo),e(Mb,OSo),e(Mb,XG),e(XG,VSo),e(Mb,XSo),e(q,zSo),e(q,Eb),e(Eb,bme),e(bme,WSo),e(Eb,QSo),e(Eb,zG),e(zG,HSo),e(Eb,USo),e(q,JSo),e(q,Cb),e(Cb,vme),e(vme,YSo),e(Cb,KSo),e(Cb,WG),e(WG,ZSo),e(Cb,eRo),e(q,oRo),e(q,wb),e(wb,Fme),e(Fme,rRo),e(wb,tRo),e(wb,QG),e(QG,aRo),e(wb,nRo),e(q,sRo),e(q,Ab),e(Ab,Tme),e(Tme,lRo),e(Ab,iRo),e(Ab,HG),e(HG,dRo),e(Ab,cRo),e(q,fRo),e(q,yb),e(yb,Mme),e(Mme,mRo),e(yb,gRo),e(yb,UG),e(UG,hRo),e(yb,pRo),e(q,uRo),e(q,Lb),e(Lb,Eme),e(Eme,_Ro),e(Lb,bRo),e(Lb,JG),e(JG,vRo),e(Lb,FRo),e(q,TRo),e(q,xb),e(xb,Cme),e(Cme,MRo),e(xb,ERo),e(xb,YG),e(YG,CRo),e(xb,wRo),e(q,ARo),e(q,$b),e($b,wme),e(wme,yRo),e($b,LRo),e($b,KG),e(KG,xRo),e($b,$Ro),e(q,kRo),e(q,kb),e(kb,Ame),e(Ame,SRo),e(kb,RRo),e(kb,ZG),e(ZG,PRo),e(kb,BRo),e(q,IRo),e(q,Sb),e(Sb,yme),e(yme,qRo),e(Sb,NRo),e(Sb,eO),e(eO,jRo),e(Sb,DRo),e(q,GRo),e(q,Rb),e(Rb,Lme),e(Lme,ORo),e(Rb,VRo),e(Rb,oO),e(oO,XRo),e(Rb,zRo),e(q,WRo),e(q,Pb),e(Pb,xme),e(xme,QRo),e(Pb,HRo),e(Pb,rO),e(rO,URo),e(Pb,JRo),e(q,YRo),e(q,Bb),e(Bb,$me),e($me,KRo),e(Bb,ZRo),e(Bb,tO),e(tO,ePo),e(Bb,oPo),e(oo,rPo),e(oo,Ib),e(Ib,tPo),e(Ib,kme),e(kme,aPo),e(Ib,nPo),e(Ib,Sme),e(Sme,sPo),e(oo,lPo),M(qb,oo,null),b(f,MNe,_),b(f,Ui,_),e(Ui,Nb),e(Nb,Rme),M(BA,Rme,null),e(Ui,iPo),e(Ui,Pme),e(Pme,dPo),b(f,ENe,_),b(f,Bo,_),M(IA,Bo,null),e(Bo,cPo),e(Bo,Ji),e(Ji,fPo),e(Ji,aO),e(aO,mPo),e(Ji,gPo),e(Ji,nO),e(nO,hPo),e(Ji,pPo),e(Bo,uPo),e(Bo,qA),e(qA,_Po),e(qA,Bme),e(Bme,bPo),e(qA,vPo),e(Bo,FPo),e(Bo,ft),M(NA,ft,null),e(ft,TPo),e(ft,Ime),e(Ime,MPo),e(ft,EPo),e(ft,Yi),e(Yi,CPo),e(Yi,qme),e(qme,wPo),e(Yi,APo),e(Yi,sO),e(sO,yPo),e(Yi,LPo),e(ft,xPo),M(jb,ft,null),e(Bo,$Po),e(Bo,ro),M(jA,ro,null),e(ro,kPo),e(ro,Nme),e(Nme,SPo),e(ro,RPo),e(ro,Na),e(Na,PPo),e(Na,jme),e(jme,BPo),e(Na,IPo),e(Na,Dme),e(Dme,qPo),e(Na,NPo),e(Na,Gme),e(Gme,jPo),e(Na,DPo),e(ro,GPo),e(ro,Y),e(Y,Db),e(Db,Ome),e(Ome,OPo),e(Db,VPo),e(Db,lO),e(lO,XPo),e(Db,zPo),e(Y,WPo),e(Y,Gb),e(Gb,Vme),e(Vme,QPo),e(Gb,HPo),e(Gb,iO),e(iO,UPo),e(Gb,JPo),e(Y,YPo),e(Y,Ob),e(Ob,Xme),e(Xme,KPo),e(Ob,ZPo),e(Ob,dO),e(dO,eBo),e(Ob,oBo),e(Y,rBo),e(Y,Vb),e(Vb,zme),e(zme,tBo),e(Vb,aBo),e(Vb,cO),e(cO,nBo),e(Vb,sBo),e(Y,lBo),e(Y,Xb),e(Xb,Wme),e(Wme,iBo),e(Xb,dBo),e(Xb,fO),e(fO,cBo),e(Xb,fBo),e(Y,mBo),e(Y,zb),e(zb,Qme),e(Qme,gBo),e(zb,hBo),e(zb,mO),e(mO,pBo),e(zb,uBo),e(Y,_Bo),e(Y,Wb),e(Wb,Hme),e(Hme,bBo),e(Wb,vBo),e(Wb,gO),e(gO,FBo),e(Wb,TBo),e(Y,MBo),e(Y,Qb),e(Qb,Ume),e(Ume,EBo),e(Qb,CBo),e(Qb,hO),e(hO,wBo),e(Qb,ABo),e(Y,yBo),e(Y,Hb),e(Hb,Jme),e(Jme,LBo),e(Hb,xBo),e(Hb,pO),e(pO,$Bo),e(Hb,kBo),e(Y,SBo),e(Y,Ub),e(Ub,Yme),e(Yme,RBo),e(Ub,PBo),e(Ub,uO),e(uO,BBo),e(Ub,IBo),e(Y,qBo),e(Y,Jb),e(Jb,Kme),e(Kme,NBo),e(Jb,jBo),e(Jb,_O),e(_O,DBo),e(Jb,GBo),e(Y,OBo),e(Y,Yb),e(Yb,Zme),e(Zme,VBo),e(Yb,XBo),e(Yb,bO),e(bO,zBo),e(Yb,WBo),e(Y,QBo),e(Y,Kb),e(Kb,ege),e(ege,HBo),e(Kb,UBo),e(Kb,vO),e(vO,JBo),e(Kb,YBo),e(Y,KBo),e(Y,Zb),e(Zb,oge),e(oge,ZBo),e(Zb,eIo),e(Zb,FO),e(FO,oIo),e(Zb,rIo),e(Y,tIo),e(Y,ev),e(ev,rge),e(rge,aIo),e(ev,nIo),e(ev,TO),e(TO,sIo),e(ev,lIo),e(Y,iIo),e(Y,ov),e(ov,tge),e(tge,dIo),e(ov,cIo),e(ov,MO),e(MO,fIo),e(ov,mIo),e(Y,gIo),e(Y,rv),e(rv,age),e(age,hIo),e(rv,pIo),e(rv,EO),e(EO,uIo),e(rv,_Io),e(Y,bIo),e(Y,tv),e(tv,nge),e(nge,vIo),e(tv,FIo),e(tv,CO),e(CO,TIo),e(tv,MIo),e(Y,EIo),e(Y,av),e(av,sge),e(sge,CIo),e(av,wIo),e(av,wO),e(wO,AIo),e(av,yIo),e(Y,LIo),e(Y,nv),e(nv,lge),e(lge,xIo),e(nv,$Io),e(nv,AO),e(AO,kIo),e(nv,SIo),e(Y,RIo),e(Y,sv),e(sv,ige),e(ige,PIo),e(sv,BIo),e(sv,yO),e(yO,IIo),e(sv,qIo),e(Y,NIo),e(Y,lv),e(lv,dge),e(dge,jIo),e(lv,DIo),e(lv,LO),e(LO,GIo),e(lv,OIo),e(Y,VIo),e(Y,iv),e(iv,cge),e(cge,XIo),e(iv,zIo),e(iv,xO),e(xO,WIo),e(iv,QIo),e(Y,HIo),e(Y,dv),e(dv,fge),e(fge,UIo),e(dv,JIo),e(dv,$O),e($O,YIo),e(dv,KIo),e(Y,ZIo),e(Y,cv),e(cv,mge),e(mge,eqo),e(cv,oqo),e(cv,kO),e(kO,rqo),e(cv,tqo),e(Y,aqo),e(Y,fv),e(fv,gge),e(gge,nqo),e(fv,sqo),e(fv,SO),e(SO,lqo),e(fv,iqo),e(Y,dqo),e(Y,mv),e(mv,hge),e(hge,cqo),e(mv,fqo),e(mv,RO),e(RO,mqo),e(mv,gqo),e(Y,hqo),e(Y,gv),e(gv,pge),e(pge,pqo),e(gv,uqo),e(gv,PO),e(PO,_qo),e(gv,bqo),e(Y,vqo),e(Y,hv),e(hv,uge),e(uge,Fqo),e(hv,Tqo),e(hv,BO),e(BO,Mqo),e(hv,Eqo),e(ro,Cqo),e(ro,pv),e(pv,wqo),e(pv,_ge),e(_ge,Aqo),e(pv,yqo),e(pv,bge),e(bge,Lqo),e(ro,xqo),M(uv,ro,null),b(f,CNe,_),b(f,Ki,_),e(Ki,_v),e(_v,vge),M(DA,vge,null),e(Ki,$qo),e(Ki,Fge),e(Fge,kqo),b(f,wNe,_),b(f,Io,_),M(GA,Io,null),e(Io,Sqo),e(Io,Zi),e(Zi,Rqo),e(Zi,IO),e(IO,Pqo),e(Zi,Bqo),e(Zi,qO),e(qO,Iqo),e(Zi,qqo),e(Io,Nqo),e(Io,OA),e(OA,jqo),e(OA,Tge),e(Tge,Dqo),e(OA,Gqo),e(Io,Oqo),e(Io,mt),M(VA,mt,null),e(mt,Vqo),e(mt,Mge),e(Mge,Xqo),e(mt,zqo),e(mt,ed),e(ed,Wqo),e(ed,Ege),e(Ege,Qqo),e(ed,Hqo),e(ed,NO),e(NO,Uqo),e(ed,Jqo),e(mt,Yqo),M(bv,mt,null),e(Io,Kqo),e(Io,to),M(XA,to,null),e(to,Zqo),e(to,Cge),e(Cge,eNo),e(to,oNo),e(to,ja),e(ja,rNo),e(ja,wge),e(wge,tNo),e(ja,aNo),e(ja,Age),e(Age,nNo),e(ja,sNo),e(ja,yge),e(yge,lNo),e(ja,iNo),e(to,dNo),e(to,Zr),e(Zr,vv),e(vv,Lge),e(Lge,cNo),e(vv,fNo),e(vv,jO),e(jO,mNo),e(vv,gNo),e(Zr,hNo),e(Zr,Fv),e(Fv,xge),e(xge,pNo),e(Fv,uNo),e(Fv,DO),e(DO,_No),e(Fv,bNo),e(Zr,vNo),e(Zr,Tv),e(Tv,$ge),e($ge,FNo),e(Tv,TNo),e(Tv,GO),e(GO,MNo),e(Tv,ENo),e(Zr,CNo),e(Zr,Mv),e(Mv,kge),e(kge,wNo),e(Mv,ANo),e(Mv,OO),e(OO,yNo),e(Mv,LNo),e(Zr,xNo),e(Zr,Ev),e(Ev,Sge),e(Sge,$No),e(Ev,kNo),e(Ev,VO),e(VO,SNo),e(Ev,RNo),e(to,PNo),e(to,Cv),e(Cv,BNo),e(Cv,Rge),e(Rge,INo),e(Cv,qNo),e(Cv,Pge),e(Pge,NNo),e(to,jNo),M(wv,to,null),b(f,ANe,_),b(f,od,_),e(od,Av),e(Av,Bge),M(zA,Bge,null),e(od,DNo),e(od,Ige),e(Ige,GNo),b(f,yNe,_),b(f,qo,_),M(WA,qo,null),e(qo,ONo),e(qo,rd),e(rd,VNo),e(rd,XO),e(XO,XNo),e(rd,zNo),e(rd,zO),e(zO,WNo),e(rd,QNo),e(qo,HNo),e(qo,QA),e(QA,UNo),e(QA,qge),e(qge,JNo),e(QA,YNo),e(qo,KNo),e(qo,gt),M(HA,gt,null),e(gt,ZNo),e(gt,Nge),e(Nge,ejo),e(gt,ojo),e(gt,td),e(td,rjo),e(td,jge),e(jge,tjo),e(td,ajo),e(td,WO),e(WO,njo),e(td,sjo),e(gt,ljo),M(yv,gt,null),e(qo,ijo),e(qo,ao),M(UA,ao,null),e(ao,djo),e(ao,Dge),e(Dge,cjo),e(ao,fjo),e(ao,Da),e(Da,mjo),e(Da,Gge),e(Gge,gjo),e(Da,hjo),e(Da,Oge),e(Oge,pjo),e(Da,ujo),e(Da,Vge),e(Vge,_jo),e(Da,bjo),e(ao,vjo),e(ao,U),e(U,Lv),e(Lv,Xge),e(Xge,Fjo),e(Lv,Tjo),e(Lv,QO),e(QO,Mjo),e(Lv,Ejo),e(U,Cjo),e(U,xv),e(xv,zge),e(zge,wjo),e(xv,Ajo),e(xv,HO),e(HO,yjo),e(xv,Ljo),e(U,xjo),e(U,$v),e($v,Wge),e(Wge,$jo),e($v,kjo),e($v,UO),e(UO,Sjo),e($v,Rjo),e(U,Pjo),e(U,kv),e(kv,Qge),e(Qge,Bjo),e(kv,Ijo),e(kv,JO),e(JO,qjo),e(kv,Njo),e(U,jjo),e(U,Sv),e(Sv,Hge),e(Hge,Djo),e(Sv,Gjo),e(Sv,YO),e(YO,Ojo),e(Sv,Vjo),e(U,Xjo),e(U,Rv),e(Rv,Uge),e(Uge,zjo),e(Rv,Wjo),e(Rv,KO),e(KO,Qjo),e(Rv,Hjo),e(U,Ujo),e(U,Pv),e(Pv,Jge),e(Jge,Jjo),e(Pv,Yjo),e(Pv,ZO),e(ZO,Kjo),e(Pv,Zjo),e(U,eDo),e(U,Bv),e(Bv,Yge),e(Yge,oDo),e(Bv,rDo),e(Bv,eV),e(eV,tDo),e(Bv,aDo),e(U,nDo),e(U,Iv),e(Iv,Kge),e(Kge,sDo),e(Iv,lDo),e(Iv,oV),e(oV,iDo),e(Iv,dDo),e(U,cDo),e(U,qv),e(qv,Zge),e(Zge,fDo),e(qv,mDo),e(qv,rV),e(rV,gDo),e(qv,hDo),e(U,pDo),e(U,Nv),e(Nv,ehe),e(ehe,uDo),e(Nv,_Do),e(Nv,tV),e(tV,bDo),e(Nv,vDo),e(U,FDo),e(U,jv),e(jv,ohe),e(ohe,TDo),e(jv,MDo),e(jv,aV),e(aV,EDo),e(jv,CDo),e(U,wDo),e(U,Dv),e(Dv,rhe),e(rhe,ADo),e(Dv,yDo),e(Dv,nV),e(nV,LDo),e(Dv,xDo),e(U,$Do),e(U,Gv),e(Gv,the),e(the,kDo),e(Gv,SDo),e(Gv,sV),e(sV,RDo),e(Gv,PDo),e(U,BDo),e(U,Ov),e(Ov,ahe),e(ahe,IDo),e(Ov,qDo),e(Ov,lV),e(lV,NDo),e(Ov,jDo),e(U,DDo),e(U,Vv),e(Vv,nhe),e(nhe,GDo),e(Vv,ODo),e(Vv,iV),e(iV,VDo),e(Vv,XDo),e(U,zDo),e(U,Xv),e(Xv,she),e(she,WDo),e(Xv,QDo),e(Xv,dV),e(dV,HDo),e(Xv,UDo),e(U,JDo),e(U,zv),e(zv,lhe),e(lhe,YDo),e(zv,KDo),e(zv,cV),e(cV,ZDo),e(zv,eGo),e(U,oGo),e(U,Wv),e(Wv,ihe),e(ihe,rGo),e(Wv,tGo),e(Wv,fV),e(fV,aGo),e(Wv,nGo),e(U,sGo),e(U,Qv),e(Qv,dhe),e(dhe,lGo),e(Qv,iGo),e(Qv,mV),e(mV,dGo),e(Qv,cGo),e(U,fGo),e(U,Hv),e(Hv,che),e(che,mGo),e(Hv,gGo),e(Hv,gV),e(gV,hGo),e(Hv,pGo),e(U,uGo),e(U,Uv),e(Uv,fhe),e(fhe,_Go),e(Uv,bGo),e(Uv,hV),e(hV,vGo),e(Uv,FGo),e(U,TGo),e(U,Jv),e(Jv,mhe),e(mhe,MGo),e(Jv,EGo),e(Jv,pV),e(pV,CGo),e(Jv,wGo),e(U,AGo),e(U,Yv),e(Yv,ghe),e(ghe,yGo),e(Yv,LGo),e(Yv,uV),e(uV,xGo),e(Yv,$Go),e(U,kGo),e(U,Kv),e(Kv,hhe),e(hhe,SGo),e(Kv,RGo),e(Kv,_V),e(_V,PGo),e(Kv,BGo),e(U,IGo),e(U,Zv),e(Zv,phe),e(phe,qGo),e(Zv,NGo),e(Zv,bV),e(bV,jGo),e(Zv,DGo),e(U,GGo),e(U,eF),e(eF,uhe),e(uhe,OGo),e(eF,VGo),e(eF,vV),e(vV,XGo),e(eF,zGo),e(U,WGo),e(U,oF),e(oF,_he),e(_he,QGo),e(oF,HGo),e(oF,FV),e(FV,UGo),e(oF,JGo),e(U,YGo),e(U,rF),e(rF,bhe),e(bhe,KGo),e(rF,ZGo),e(rF,TV),e(TV,eOo),e(rF,oOo),e(U,rOo),e(U,tF),e(tF,vhe),e(vhe,tOo),e(tF,aOo),e(tF,MV),e(MV,nOo),e(tF,sOo),e(U,lOo),e(U,aF),e(aF,Fhe),e(Fhe,iOo),e(aF,dOo),e(aF,EV),e(EV,cOo),e(aF,fOo),e(U,mOo),e(U,nF),e(nF,The),e(The,gOo),e(nF,hOo),e(nF,CV),e(CV,pOo),e(nF,uOo),e(U,_Oo),e(U,sF),e(sF,Mhe),e(Mhe,bOo),e(sF,vOo),e(sF,wV),e(wV,FOo),e(sF,TOo),e(ao,MOo),e(ao,lF),e(lF,EOo),e(lF,Ehe),e(Ehe,COo),e(lF,wOo),e(lF,Che),e(Che,AOo),e(ao,yOo),M(iF,ao,null),b(f,LNe,_),b(f,ad,_),e(ad,dF),e(dF,whe),M(JA,whe,null),e(ad,LOo),e(ad,Ahe),e(Ahe,xOo),b(f,xNe,_),b(f,No,_),M(YA,No,null),e(No,$Oo),e(No,nd),e(nd,kOo),e(nd,AV),e(AV,SOo),e(nd,ROo),e(nd,yV),e(yV,POo),e(nd,BOo),e(No,IOo),e(No,KA),e(KA,qOo),e(KA,yhe),e(yhe,NOo),e(KA,jOo),e(No,DOo),e(No,ht),M(ZA,ht,null),e(ht,GOo),e(ht,Lhe),e(Lhe,OOo),e(ht,VOo),e(ht,sd),e(sd,XOo),e(sd,xhe),e(xhe,zOo),e(sd,WOo),e(sd,LV),e(LV,QOo),e(sd,HOo),e(ht,UOo),M(cF,ht,null),e(No,JOo),e(No,no),M(ey,no,null),e(no,YOo),e(no,$he),e($he,KOo),e(no,ZOo),e(no,Ga),e(Ga,eVo),e(Ga,khe),e(khe,oVo),e(Ga,rVo),e(Ga,She),e(She,tVo),e(Ga,aVo),e(Ga,Rhe),e(Rhe,nVo),e(Ga,sVo),e(no,lVo),e(no,V),e(V,fF),e(fF,Phe),e(Phe,iVo),e(fF,dVo),e(fF,xV),e(xV,cVo),e(fF,fVo),e(V,mVo),e(V,mF),e(mF,Bhe),e(Bhe,gVo),e(mF,hVo),e(mF,$V),e($V,pVo),e(mF,uVo),e(V,_Vo),e(V,gF),e(gF,Ihe),e(Ihe,bVo),e(gF,vVo),e(gF,kV),e(kV,FVo),e(gF,TVo),e(V,MVo),e(V,hF),e(hF,qhe),e(qhe,EVo),e(hF,CVo),e(hF,SV),e(SV,wVo),e(hF,AVo),e(V,yVo),e(V,pF),e(pF,Nhe),e(Nhe,LVo),e(pF,xVo),e(pF,RV),e(RV,$Vo),e(pF,kVo),e(V,SVo),e(V,uF),e(uF,jhe),e(jhe,RVo),e(uF,PVo),e(uF,PV),e(PV,BVo),e(uF,IVo),e(V,qVo),e(V,_F),e(_F,Dhe),e(Dhe,NVo),e(_F,jVo),e(_F,BV),e(BV,DVo),e(_F,GVo),e(V,OVo),e(V,bF),e(bF,Ghe),e(Ghe,VVo),e(bF,XVo),e(bF,IV),e(IV,zVo),e(bF,WVo),e(V,QVo),e(V,vF),e(vF,Ohe),e(Ohe,HVo),e(vF,UVo),e(vF,qV),e(qV,JVo),e(vF,YVo),e(V,KVo),e(V,FF),e(FF,Vhe),e(Vhe,ZVo),e(FF,eXo),e(FF,NV),e(NV,oXo),e(FF,rXo),e(V,tXo),e(V,TF),e(TF,Xhe),e(Xhe,aXo),e(TF,nXo),e(TF,jV),e(jV,sXo),e(TF,lXo),e(V,iXo),e(V,MF),e(MF,zhe),e(zhe,dXo),e(MF,cXo),e(MF,DV),e(DV,fXo),e(MF,mXo),e(V,gXo),e(V,EF),e(EF,Whe),e(Whe,hXo),e(EF,pXo),e(EF,GV),e(GV,uXo),e(EF,_Xo),e(V,bXo),e(V,CF),e(CF,Qhe),e(Qhe,vXo),e(CF,FXo),e(CF,OV),e(OV,TXo),e(CF,MXo),e(V,EXo),e(V,wF),e(wF,Hhe),e(Hhe,CXo),e(wF,wXo),e(wF,VV),e(VV,AXo),e(wF,yXo),e(V,LXo),e(V,AF),e(AF,Uhe),e(Uhe,xXo),e(AF,$Xo),e(AF,XV),e(XV,kXo),e(AF,SXo),e(V,RXo),e(V,yF),e(yF,Jhe),e(Jhe,PXo),e(yF,BXo),e(yF,zV),e(zV,IXo),e(yF,qXo),e(V,NXo),e(V,LF),e(LF,Yhe),e(Yhe,jXo),e(LF,DXo),e(LF,WV),e(WV,GXo),e(LF,OXo),e(V,VXo),e(V,xF),e(xF,Khe),e(Khe,XXo),e(xF,zXo),e(xF,QV),e(QV,WXo),e(xF,QXo),e(V,HXo),e(V,$F),e($F,Zhe),e(Zhe,UXo),e($F,JXo),e($F,HV),e(HV,YXo),e($F,KXo),e(V,ZXo),e(V,kF),e(kF,epe),e(epe,ezo),e(kF,ozo),e(kF,UV),e(UV,rzo),e(kF,tzo),e(V,azo),e(V,SF),e(SF,ope),e(ope,nzo),e(SF,szo),e(SF,JV),e(JV,lzo),e(SF,izo),e(V,dzo),e(V,RF),e(RF,rpe),e(rpe,czo),e(RF,fzo),e(RF,YV),e(YV,mzo),e(RF,gzo),e(V,hzo),e(V,PF),e(PF,tpe),e(tpe,pzo),e(PF,uzo),e(PF,KV),e(KV,_zo),e(PF,bzo),e(V,vzo),e(V,BF),e(BF,ape),e(ape,Fzo),e(BF,Tzo),e(BF,ZV),e(ZV,Mzo),e(BF,Ezo),e(V,Czo),e(V,IF),e(IF,npe),e(npe,wzo),e(IF,Azo),e(IF,eX),e(eX,yzo),e(IF,Lzo),e(V,xzo),e(V,qF),e(qF,spe),e(spe,$zo),e(qF,kzo),e(qF,oX),e(oX,Szo),e(qF,Rzo),e(V,Pzo),e(V,NF),e(NF,lpe),e(lpe,Bzo),e(NF,Izo),e(NF,rX),e(rX,qzo),e(NF,Nzo),e(V,jzo),e(V,jF),e(jF,ipe),e(ipe,Dzo),e(jF,Gzo),e(jF,tX),e(tX,Ozo),e(jF,Vzo),e(V,Xzo),e(V,DF),e(DF,dpe),e(dpe,zzo),e(DF,Wzo),e(DF,aX),e(aX,Qzo),e(DF,Hzo),e(V,Uzo),e(V,GF),e(GF,cpe),e(cpe,Jzo),e(GF,Yzo),e(GF,nX),e(nX,Kzo),e(GF,Zzo),e(V,eWo),e(V,OF),e(OF,fpe),e(fpe,oWo),e(OF,rWo),e(OF,sX),e(sX,tWo),e(OF,aWo),e(V,nWo),e(V,VF),e(VF,mpe),e(mpe,sWo),e(VF,lWo),e(VF,lX),e(lX,iWo),e(VF,dWo),e(V,cWo),e(V,XF),e(XF,gpe),e(gpe,fWo),e(XF,mWo),e(XF,iX),e(iX,gWo),e(XF,hWo),e(V,pWo),e(V,zF),e(zF,hpe),e(hpe,uWo),e(zF,_Wo),e(zF,dX),e(dX,bWo),e(zF,vWo),e(V,FWo),e(V,WF),e(WF,ppe),e(ppe,TWo),e(WF,MWo),e(WF,cX),e(cX,EWo),e(WF,CWo),e(V,wWo),e(V,QF),e(QF,upe),e(upe,AWo),e(QF,yWo),e(QF,fX),e(fX,LWo),e(QF,xWo),e(V,$Wo),e(V,HF),e(HF,_pe),e(_pe,kWo),e(HF,SWo),e(HF,mX),e(mX,RWo),e(HF,PWo),e(V,BWo),e(V,UF),e(UF,bpe),e(bpe,IWo),e(UF,qWo),e(UF,gX),e(gX,NWo),e(UF,jWo),e(no,DWo),e(no,JF),e(JF,GWo),e(JF,vpe),e(vpe,OWo),e(JF,VWo),e(JF,Fpe),e(Fpe,XWo),e(no,zWo),M(YF,no,null),b(f,$Ne,_),b(f,ld,_),e(ld,KF),e(KF,Tpe),M(oy,Tpe,null),e(ld,WWo),e(ld,Mpe),e(Mpe,QWo),b(f,kNe,_),b(f,jo,_),M(ry,jo,null),e(jo,HWo),e(jo,id),e(id,UWo),e(id,hX),e(hX,JWo),e(id,YWo),e(id,pX),e(pX,KWo),e(id,ZWo),e(jo,eQo),e(jo,ty),e(ty,oQo),e(ty,Epe),e(Epe,rQo),e(ty,tQo),e(jo,aQo),e(jo,pt),M(ay,pt,null),e(pt,nQo),e(pt,Cpe),e(Cpe,sQo),e(pt,lQo),e(pt,dd),e(dd,iQo),e(dd,wpe),e(wpe,dQo),e(dd,cQo),e(dd,uX),e(uX,fQo),e(dd,mQo),e(pt,gQo),M(ZF,pt,null),e(jo,hQo),e(jo,so),M(ny,so,null),e(so,pQo),e(so,Ape),e(Ape,uQo),e(so,_Qo),e(so,Oa),e(Oa,bQo),e(Oa,ype),e(ype,vQo),e(Oa,FQo),e(Oa,Lpe),e(Lpe,TQo),e(Oa,MQo),e(Oa,xpe),e(xpe,EQo),e(Oa,CQo),e(so,wQo),e(so,$pe),e($pe,e6),e(e6,kpe),e(kpe,AQo),e(e6,yQo),e(e6,_X),e(_X,LQo),e(e6,xQo),e(so,$Qo),e(so,o6),e(o6,kQo),e(o6,Spe),e(Spe,SQo),e(o6,RQo),e(o6,Rpe),e(Rpe,PQo),e(so,BQo),M(r6,so,null),b(f,SNe,_),b(f,cd,_),e(cd,t6),e(t6,Ppe),M(sy,Ppe,null),e(cd,IQo),e(cd,Bpe),e(Bpe,qQo),b(f,RNe,_),b(f,Do,_),M(ly,Do,null),e(Do,NQo),e(Do,fd),e(fd,jQo),e(fd,bX),e(bX,DQo),e(fd,GQo),e(fd,vX),e(vX,OQo),e(fd,VQo),e(Do,XQo),e(Do,iy),e(iy,zQo),e(iy,Ipe),e(Ipe,WQo),e(iy,QQo),e(Do,HQo),e(Do,ut),M(dy,ut,null),e(ut,UQo),e(ut,qpe),e(qpe,JQo),e(ut,YQo),e(ut,md),e(md,KQo),e(md,Npe),e(Npe,ZQo),e(md,eHo),e(md,FX),e(FX,oHo),e(md,rHo),e(ut,tHo),M(a6,ut,null),e(Do,aHo),e(Do,lo),M(cy,lo,null),e(lo,nHo),e(lo,jpe),e(jpe,sHo),e(lo,lHo),e(lo,Va),e(Va,iHo),e(Va,Dpe),e(Dpe,dHo),e(Va,cHo),e(Va,Gpe),e(Gpe,fHo),e(Va,mHo),e(Va,Ope),e(Ope,gHo),e(Va,hHo),e(lo,pHo),e(lo,Fe),e(Fe,n6),e(n6,Vpe),e(Vpe,uHo),e(n6,_Ho),e(n6,TX),e(TX,bHo),e(n6,vHo),e(Fe,FHo),e(Fe,s6),e(s6,Xpe),e(Xpe,THo),e(s6,MHo),e(s6,MX),e(MX,EHo),e(s6,CHo),e(Fe,wHo),e(Fe,l6),e(l6,zpe),e(zpe,AHo),e(l6,yHo),e(l6,EX),e(EX,LHo),e(l6,xHo),e(Fe,$Ho),e(Fe,i6),e(i6,Wpe),e(Wpe,kHo),e(i6,SHo),e(i6,CX),e(CX,RHo),e(i6,PHo),e(Fe,BHo),e(Fe,Ds),e(Ds,Qpe),e(Qpe,IHo),e(Ds,qHo),e(Ds,wX),e(wX,NHo),e(Ds,jHo),e(Ds,AX),e(AX,DHo),e(Ds,GHo),e(Fe,OHo),e(Fe,d6),e(d6,Hpe),e(Hpe,VHo),e(d6,XHo),e(d6,yX),e(yX,zHo),e(d6,WHo),e(Fe,QHo),e(Fe,_t),e(_t,Upe),e(Upe,HHo),e(_t,UHo),e(_t,LX),e(LX,JHo),e(_t,YHo),e(_t,xX),e(xX,KHo),e(_t,ZHo),e(_t,$X),e($X,eUo),e(_t,oUo),e(Fe,rUo),e(Fe,c6),e(c6,Jpe),e(Jpe,tUo),e(c6,aUo),e(c6,kX),e(kX,nUo),e(c6,sUo),e(Fe,lUo),e(Fe,f6),e(f6,Ype),e(Ype,iUo),e(f6,dUo),e(f6,SX),e(SX,cUo),e(f6,fUo),e(Fe,mUo),e(Fe,m6),e(m6,Kpe),e(Kpe,gUo),e(m6,hUo),e(m6,RX),e(RX,pUo),e(m6,uUo),e(Fe,_Uo),e(Fe,g6),e(g6,Zpe),e(Zpe,bUo),e(g6,vUo),e(g6,PX),e(PX,FUo),e(g6,TUo),e(Fe,MUo),e(Fe,h6),e(h6,eue),e(eue,EUo),e(h6,CUo),e(h6,BX),e(BX,wUo),e(h6,AUo),e(Fe,yUo),e(Fe,p6),e(p6,oue),e(oue,LUo),e(p6,xUo),e(p6,IX),e(IX,$Uo),e(p6,kUo),e(Fe,SUo),e(Fe,u6),e(u6,rue),e(rue,RUo),e(u6,PUo),e(u6,qX),e(qX,BUo),e(u6,IUo),e(lo,qUo),e(lo,_6),e(_6,NUo),e(_6,tue),e(tue,jUo),e(_6,DUo),e(_6,aue),e(aue,GUo),e(lo,OUo),M(b6,lo,null),b(f,PNe,_),b(f,gd,_),e(gd,v6),e(v6,nue),M(fy,nue,null),e(gd,VUo),e(gd,sue),e(sue,XUo),b(f,BNe,_),b(f,Go,_),M(my,Go,null),e(Go,zUo),e(Go,hd),e(hd,WUo),e(hd,NX),e(NX,QUo),e(hd,HUo),e(hd,jX),e(jX,UUo),e(hd,JUo),e(Go,YUo),e(Go,gy),e(gy,KUo),e(gy,lue),e(lue,ZUo),e(gy,eJo),e(Go,oJo),e(Go,bt),M(hy,bt,null),e(bt,rJo),e(bt,iue),e(iue,tJo),e(bt,aJo),e(bt,pd),e(pd,nJo),e(pd,due),e(due,sJo),e(pd,lJo),e(pd,DX),e(DX,iJo),e(pd,dJo),e(bt,cJo),M(F6,bt,null),e(Go,fJo),e(Go,io),M(py,io,null),e(io,mJo),e(io,cue),e(cue,gJo),e(io,hJo),e(io,Xa),e(Xa,pJo),e(Xa,fue),e(fue,uJo),e(Xa,_Jo),e(Xa,mue),e(mue,bJo),e(Xa,vJo),e(Xa,gue),e(gue,FJo),e(Xa,TJo),e(io,MJo),e(io,hue),e(hue,T6),e(T6,pue),e(pue,EJo),e(T6,CJo),e(T6,GX),e(GX,wJo),e(T6,AJo),e(io,yJo),e(io,M6),e(M6,LJo),e(M6,uue),e(uue,xJo),e(M6,$Jo),e(M6,_ue),e(_ue,kJo),e(io,SJo),M(E6,io,null),b(f,INe,_),b(f,ud,_),e(ud,C6),e(C6,bue),M(uy,bue,null),e(ud,RJo),e(ud,vue),e(vue,PJo),b(f,qNe,_),b(f,Oo,_),M(_y,Oo,null),e(Oo,BJo),e(Oo,_d),e(_d,IJo),e(_d,OX),e(OX,qJo),e(_d,NJo),e(_d,VX),e(VX,jJo),e(_d,DJo),e(Oo,GJo),e(Oo,by),e(by,OJo),e(by,Fue),e(Fue,VJo),e(by,XJo),e(Oo,zJo),e(Oo,vt),M(vy,vt,null),e(vt,WJo),e(vt,Tue),e(Tue,QJo),e(vt,HJo),e(vt,bd),e(bd,UJo),e(bd,Mue),e(Mue,JJo),e(bd,YJo),e(bd,XX),e(XX,KJo),e(bd,ZJo),e(vt,eYo),M(w6,vt,null),e(Oo,oYo),e(Oo,co),M(Fy,co,null),e(co,rYo),e(co,Eue),e(Eue,tYo),e(co,aYo),e(co,za),e(za,nYo),e(za,Cue),e(Cue,sYo),e(za,lYo),e(za,wue),e(wue,iYo),e(za,dYo),e(za,Aue),e(Aue,cYo),e(za,fYo),e(co,mYo),e(co,yue),e(yue,A6),e(A6,Lue),e(Lue,gYo),e(A6,hYo),e(A6,zX),e(zX,pYo),e(A6,uYo),e(co,_Yo),e(co,y6),e(y6,bYo),e(y6,xue),e(xue,vYo),e(y6,FYo),e(y6,$ue),e($ue,TYo),e(co,MYo),M(L6,co,null),b(f,NNe,_),b(f,vd,_),e(vd,x6),e(x6,kue),M(Ty,kue,null),e(vd,EYo),e(vd,Sue),e(Sue,CYo),b(f,jNe,_),b(f,Vo,_),M(My,Vo,null),e(Vo,wYo),e(Vo,Fd),e(Fd,AYo),e(Fd,WX),e(WX,yYo),e(Fd,LYo),e(Fd,QX),e(QX,xYo),e(Fd,$Yo),e(Vo,kYo),e(Vo,Ey),e(Ey,SYo),e(Ey,Rue),e(Rue,RYo),e(Ey,PYo),e(Vo,BYo),e(Vo,Ft),M(Cy,Ft,null),e(Ft,IYo),e(Ft,Pue),e(Pue,qYo),e(Ft,NYo),e(Ft,Td),e(Td,jYo),e(Td,Bue),e(Bue,DYo),e(Td,GYo),e(Td,HX),e(HX,OYo),e(Td,VYo),e(Ft,XYo),M($6,Ft,null),e(Vo,zYo),e(Vo,fo),M(wy,fo,null),e(fo,WYo),e(fo,Iue),e(Iue,QYo),e(fo,HYo),e(fo,Wa),e(Wa,UYo),e(Wa,que),e(que,JYo),e(Wa,YYo),e(Wa,Nue),e(Nue,KYo),e(Wa,ZYo),e(Wa,jue),e(jue,eKo),e(Wa,oKo),e(fo,rKo),e(fo,ke),e(ke,k6),e(k6,Due),e(Due,tKo),e(k6,aKo),e(k6,UX),e(UX,nKo),e(k6,sKo),e(ke,lKo),e(ke,S6),e(S6,Gue),e(Gue,iKo),e(S6,dKo),e(S6,JX),e(JX,cKo),e(S6,fKo),e(ke,mKo),e(ke,R6),e(R6,Oue),e(Oue,gKo),e(R6,hKo),e(R6,YX),e(YX,pKo),e(R6,uKo),e(ke,_Ko),e(ke,P6),e(P6,Vue),e(Vue,bKo),e(P6,vKo),e(P6,KX),e(KX,FKo),e(P6,TKo),e(ke,MKo),e(ke,B6),e(B6,Xue),e(Xue,EKo),e(B6,CKo),e(B6,ZX),e(ZX,wKo),e(B6,AKo),e(ke,yKo),e(ke,I6),e(I6,zue),e(zue,LKo),e(I6,xKo),e(I6,ez),e(ez,$Ko),e(I6,kKo),e(ke,SKo),e(ke,q6),e(q6,Wue),e(Wue,RKo),e(q6,PKo),e(q6,oz),e(oz,BKo),e(q6,IKo),e(ke,qKo),e(ke,N6),e(N6,Que),e(Que,NKo),e(N6,jKo),e(N6,rz),e(rz,DKo),e(N6,GKo),e(ke,OKo),e(ke,j6),e(j6,Hue),e(Hue,VKo),e(j6,XKo),e(j6,tz),e(tz,zKo),e(j6,WKo),e(fo,QKo),e(fo,D6),e(D6,HKo),e(D6,Uue),e(Uue,UKo),e(D6,JKo),e(D6,Jue),e(Jue,YKo),e(fo,KKo),M(G6,fo,null),b(f,DNe,_),b(f,Md,_),e(Md,O6),e(O6,Yue),M(Ay,Yue,null),e(Md,ZKo),e(Md,Kue),e(Kue,eZo),b(f,GNe,_),b(f,Xo,_),M(yy,Xo,null),e(Xo,oZo),e(Xo,Ed),e(Ed,rZo),e(Ed,az),e(az,tZo),e(Ed,aZo),e(Ed,nz),e(nz,nZo),e(Ed,sZo),e(Xo,lZo),e(Xo,Ly),e(Ly,iZo),e(Ly,Zue),e(Zue,dZo),e(Ly,cZo),e(Xo,fZo),e(Xo,Tt),M(xy,Tt,null),e(Tt,mZo),e(Tt,e_e),e(e_e,gZo),e(Tt,hZo),e(Tt,Cd),e(Cd,pZo),e(Cd,o_e),e(o_e,uZo),e(Cd,_Zo),e(Cd,sz),e(sz,bZo),e(Cd,vZo),e(Tt,FZo),M(V6,Tt,null),e(Xo,TZo),e(Xo,mo),M($y,mo,null),e(mo,MZo),e(mo,r_e),e(r_e,EZo),e(mo,CZo),e(mo,Qa),e(Qa,wZo),e(Qa,t_e),e(t_e,AZo),e(Qa,yZo),e(Qa,a_e),e(a_e,LZo),e(Qa,xZo),e(Qa,n_e),e(n_e,$Zo),e(Qa,kZo),e(mo,SZo),e(mo,et),e(et,X6),e(X6,s_e),e(s_e,RZo),e(X6,PZo),e(X6,lz),e(lz,BZo),e(X6,IZo),e(et,qZo),e(et,z6),e(z6,l_e),e(l_e,NZo),e(z6,jZo),e(z6,iz),e(iz,DZo),e(z6,GZo),e(et,OZo),e(et,W6),e(W6,i_e),e(i_e,VZo),e(W6,XZo),e(W6,dz),e(dz,zZo),e(W6,WZo),e(et,QZo),e(et,Q6),e(Q6,d_e),e(d_e,HZo),e(Q6,UZo),e(Q6,cz),e(cz,JZo),e(Q6,YZo),e(et,KZo),e(et,H6),e(H6,c_e),e(c_e,ZZo),e(H6,eer),e(H6,fz),e(fz,oer),e(H6,rer),e(mo,ter),e(mo,U6),e(U6,aer),e(U6,f_e),e(f_e,ner),e(U6,ser),e(U6,m_e),e(m_e,ler),e(mo,ier),M(J6,mo,null),b(f,ONe,_),b(f,wd,_),e(wd,Y6),e(Y6,g_e),M(ky,g_e,null),e(wd,der),e(wd,h_e),e(h_e,cer),b(f,VNe,_),b(f,zo,_),M(Sy,zo,null),e(zo,fer),e(zo,Ad),e(Ad,mer),e(Ad,mz),e(mz,ger),e(Ad,her),e(Ad,gz),e(gz,per),e(Ad,uer),e(zo,_er),e(zo,Ry),e(Ry,ber),e(Ry,p_e),e(p_e,ver),e(Ry,Fer),e(zo,Ter),e(zo,Mt),M(Py,Mt,null),e(Mt,Mer),e(Mt,u_e),e(u_e,Eer),e(Mt,Cer),e(Mt,yd),e(yd,wer),e(yd,__e),e(__e,Aer),e(yd,yer),e(yd,hz),e(hz,Ler),e(yd,xer),e(Mt,$er),M(K6,Mt,null),e(zo,ker),e(zo,go),M(By,go,null),e(go,Ser),e(go,b_e),e(b_e,Rer),e(go,Per),e(go,Ha),e(Ha,Ber),e(Ha,v_e),e(v_e,Ier),e(Ha,qer),e(Ha,F_e),e(F_e,Ner),e(Ha,jer),e(Ha,T_e),e(T_e,Der),e(Ha,Ger),e(go,Oer),e(go,Se),e(Se,Z6),e(Z6,M_e),e(M_e,Ver),e(Z6,Xer),e(Z6,pz),e(pz,zer),e(Z6,Wer),e(Se,Qer),e(Se,eT),e(eT,E_e),e(E_e,Her),e(eT,Uer),e(eT,uz),e(uz,Jer),e(eT,Yer),e(Se,Ker),e(Se,oT),e(oT,C_e),e(C_e,Zer),e(oT,eor),e(oT,_z),e(_z,oor),e(oT,ror),e(Se,tor),e(Se,rT),e(rT,w_e),e(w_e,aor),e(rT,nor),e(rT,bz),e(bz,sor),e(rT,lor),e(Se,ior),e(Se,tT),e(tT,A_e),e(A_e,dor),e(tT,cor),e(tT,vz),e(vz,mor),e(tT,gor),e(Se,hor),e(Se,aT),e(aT,y_e),e(y_e,por),e(aT,uor),e(aT,Fz),e(Fz,_or),e(aT,bor),e(Se,vor),e(Se,nT),e(nT,L_e),e(L_e,For),e(nT,Tor),e(nT,Tz),e(Tz,Mor),e(nT,Eor),e(Se,Cor),e(Se,sT),e(sT,x_e),e(x_e,wor),e(sT,Aor),e(sT,Mz),e(Mz,yor),e(sT,Lor),e(Se,xor),e(Se,lT),e(lT,$_e),e($_e,$or),e(lT,kor),e(lT,Ez),e(Ez,Sor),e(lT,Ror),e(go,Por),e(go,iT),e(iT,Bor),e(iT,k_e),e(k_e,Ior),e(iT,qor),e(iT,S_e),e(S_e,Nor),e(go,jor),M(dT,go,null),b(f,XNe,_),b(f,Ld,_),e(Ld,cT),e(cT,R_e),M(Iy,R_e,null),e(Ld,Dor),e(Ld,P_e),e(P_e,Gor),b(f,zNe,_),b(f,Wo,_),M(qy,Wo,null),e(Wo,Oor),e(Wo,xd),e(xd,Vor),e(xd,Cz),e(Cz,Xor),e(xd,zor),e(xd,wz),e(wz,Wor),e(xd,Qor),e(Wo,Hor),e(Wo,Ny),e(Ny,Uor),e(Ny,B_e),e(B_e,Jor),e(Ny,Yor),e(Wo,Kor),e(Wo,Et),M(jy,Et,null),e(Et,Zor),e(Et,I_e),e(I_e,err),e(Et,orr),e(Et,$d),e($d,rrr),e($d,q_e),e(q_e,trr),e($d,arr),e($d,Az),e(Az,nrr),e($d,srr),e(Et,lrr),M(fT,Et,null),e(Wo,irr),e(Wo,ho),M(Dy,ho,null),e(ho,drr),e(ho,N_e),e(N_e,crr),e(ho,frr),e(ho,Ua),e(Ua,mrr),e(Ua,j_e),e(j_e,grr),e(Ua,hrr),e(Ua,D_e),e(D_e,prr),e(Ua,urr),e(Ua,G_e),e(G_e,_rr),e(Ua,brr),e(ho,vrr),e(ho,Gy),e(Gy,mT),e(mT,O_e),e(O_e,Frr),e(mT,Trr),e(mT,yz),e(yz,Mrr),e(mT,Err),e(Gy,Crr),e(Gy,gT),e(gT,V_e),e(V_e,wrr),e(gT,Arr),e(gT,Lz),e(Lz,yrr),e(gT,Lrr),e(ho,xrr),e(ho,hT),e(hT,$rr),e(hT,X_e),e(X_e,krr),e(hT,Srr),e(hT,z_e),e(z_e,Rrr),e(ho,Prr),M(pT,ho,null),b(f,WNe,_),b(f,kd,_),e(kd,uT),e(uT,W_e),M(Oy,W_e,null),e(kd,Brr),e(kd,Q_e),e(Q_e,Irr),b(f,QNe,_),b(f,Qo,_),M(Vy,Qo,null),e(Qo,qrr),e(Qo,Sd),e(Sd,Nrr),e(Sd,xz),e(xz,jrr),e(Sd,Drr),e(Sd,$z),e($z,Grr),e(Sd,Orr),e(Qo,Vrr),e(Qo,Xy),e(Xy,Xrr),e(Xy,H_e),e(H_e,zrr),e(Xy,Wrr),e(Qo,Qrr),e(Qo,Ct),M(zy,Ct,null),e(Ct,Hrr),e(Ct,U_e),e(U_e,Urr),e(Ct,Jrr),e(Ct,Rd),e(Rd,Yrr),e(Rd,J_e),e(J_e,Krr),e(Rd,Zrr),e(Rd,kz),e(kz,etr),e(Rd,otr),e(Ct,rtr),M(_T,Ct,null),e(Qo,ttr),e(Qo,po),M(Wy,po,null),e(po,atr),e(po,Y_e),e(Y_e,ntr),e(po,str),e(po,Ja),e(Ja,ltr),e(Ja,K_e),e(K_e,itr),e(Ja,dtr),e(Ja,Z_e),e(Z_e,ctr),e(Ja,ftr),e(Ja,e2e),e(e2e,mtr),e(Ja,gtr),e(po,htr),e(po,ot),e(ot,bT),e(bT,o2e),e(o2e,ptr),e(bT,utr),e(bT,Sz),e(Sz,_tr),e(bT,btr),e(ot,vtr),e(ot,vT),e(vT,r2e),e(r2e,Ftr),e(vT,Ttr),e(vT,Rz),e(Rz,Mtr),e(vT,Etr),e(ot,Ctr),e(ot,FT),e(FT,t2e),e(t2e,wtr),e(FT,Atr),e(FT,Pz),e(Pz,ytr),e(FT,Ltr),e(ot,xtr),e(ot,TT),e(TT,a2e),e(a2e,$tr),e(TT,ktr),e(TT,Bz),e(Bz,Str),e(TT,Rtr),e(ot,Ptr),e(ot,MT),e(MT,n2e),e(n2e,Btr),e(MT,Itr),e(MT,Iz),e(Iz,qtr),e(MT,Ntr),e(po,jtr),e(po,ET),e(ET,Dtr),e(ET,s2e),e(s2e,Gtr),e(ET,Otr),e(ET,l2e),e(l2e,Vtr),e(po,Xtr),M(CT,po,null),b(f,HNe,_),b(f,Pd,_),e(Pd,wT),e(wT,i2e),M(Qy,i2e,null),e(Pd,ztr),e(Pd,d2e),e(d2e,Wtr),b(f,UNe,_),b(f,Ho,_),M(Hy,Ho,null),e(Ho,Qtr),e(Ho,Bd),e(Bd,Htr),e(Bd,qz),e(qz,Utr),e(Bd,Jtr),e(Bd,Nz),e(Nz,Ytr),e(Bd,Ktr),e(Ho,Ztr),e(Ho,Uy),e(Uy,ear),e(Uy,c2e),e(c2e,oar),e(Uy,rar),e(Ho,tar),e(Ho,wt),M(Jy,wt,null),e(wt,aar),e(wt,f2e),e(f2e,nar),e(wt,sar),e(wt,Id),e(Id,lar),e(Id,m2e),e(m2e,iar),e(Id,dar),e(Id,jz),e(jz,car),e(Id,far),e(wt,mar),M(AT,wt,null),e(Ho,gar),e(Ho,uo),M(Yy,uo,null),e(uo,har),e(uo,g2e),e(g2e,par),e(uo,uar),e(uo,Ya),e(Ya,_ar),e(Ya,h2e),e(h2e,bar),e(Ya,Far),e(Ya,p2e),e(p2e,Tar),e(Ya,Mar),e(Ya,u2e),e(u2e,Ear),e(Ya,Car),e(uo,war),e(uo,qd),e(qd,yT),e(yT,_2e),e(_2e,Aar),e(yT,yar),e(yT,Dz),e(Dz,Lar),e(yT,xar),e(qd,$ar),e(qd,LT),e(LT,b2e),e(b2e,kar),e(LT,Sar),e(LT,Gz),e(Gz,Rar),e(LT,Par),e(qd,Bar),e(qd,xT),e(xT,v2e),e(v2e,Iar),e(xT,qar),e(xT,Oz),e(Oz,Nar),e(xT,jar),e(uo,Dar),e(uo,$T),e($T,Gar),e($T,F2e),e(F2e,Oar),e($T,Var),e($T,T2e),e(T2e,Xar),e(uo,zar),M(kT,uo,null),b(f,JNe,_),b(f,Nd,_),e(Nd,ST),e(ST,M2e),M(Ky,M2e,null),e(Nd,War),e(Nd,E2e),e(E2e,Qar),b(f,YNe,_),b(f,Uo,_),M(Zy,Uo,null),e(Uo,Har),e(Uo,jd),e(jd,Uar),e(jd,Vz),e(Vz,Jar),e(jd,Yar),e(jd,Xz),e(Xz,Kar),e(jd,Zar),e(Uo,enr),e(Uo,eL),e(eL,onr),e(eL,C2e),e(C2e,rnr),e(eL,tnr),e(Uo,anr),e(Uo,At),M(oL,At,null),e(At,nnr),e(At,w2e),e(w2e,snr),e(At,lnr),e(At,Dd),e(Dd,inr),e(Dd,A2e),e(A2e,dnr),e(Dd,cnr),e(Dd,zz),e(zz,fnr),e(Dd,mnr),e(At,gnr),M(RT,At,null),e(Uo,hnr),e(Uo,_o),M(rL,_o,null),e(_o,pnr),e(_o,y2e),e(y2e,unr),e(_o,_nr),e(_o,Ka),e(Ka,bnr),e(Ka,L2e),e(L2e,vnr),e(Ka,Fnr),e(Ka,x2e),e(x2e,Tnr),e(Ka,Mnr),e(Ka,$2e),e($2e,Enr),e(Ka,Cnr),e(_o,wnr),e(_o,tL),e(tL,PT),e(PT,k2e),e(k2e,Anr),e(PT,ynr),e(PT,Wz),e(Wz,Lnr),e(PT,xnr),e(tL,$nr),e(tL,BT),e(BT,S2e),e(S2e,knr),e(BT,Snr),e(BT,Qz),e(Qz,Rnr),e(BT,Pnr),e(_o,Bnr),e(_o,IT),e(IT,Inr),e(IT,R2e),e(R2e,qnr),e(IT,Nnr),e(IT,P2e),e(P2e,jnr),e(_o,Dnr),M(qT,_o,null),b(f,KNe,_),b(f,Gd,_),e(Gd,NT),e(NT,B2e),M(aL,B2e,null),e(Gd,Gnr),e(Gd,I2e),e(I2e,Onr),b(f,ZNe,_),b(f,Jo,_),M(nL,Jo,null),e(Jo,Vnr),e(Jo,Od),e(Od,Xnr),e(Od,Hz),e(Hz,znr),e(Od,Wnr),e(Od,Uz),e(Uz,Qnr),e(Od,Hnr),e(Jo,Unr),e(Jo,sL),e(sL,Jnr),e(sL,q2e),e(q2e,Ynr),e(sL,Knr),e(Jo,Znr),e(Jo,yt),M(lL,yt,null),e(yt,esr),e(yt,N2e),e(N2e,osr),e(yt,rsr),e(yt,Vd),e(Vd,tsr),e(Vd,j2e),e(j2e,asr),e(Vd,nsr),e(Vd,Jz),e(Jz,ssr),e(Vd,lsr),e(yt,isr),M(jT,yt,null),e(Jo,dsr),e(Jo,bo),M(iL,bo,null),e(bo,csr),e(bo,D2e),e(D2e,fsr),e(bo,msr),e(bo,Za),e(Za,gsr),e(Za,G2e),e(G2e,hsr),e(Za,psr),e(Za,O2e),e(O2e,usr),e(Za,_sr),e(Za,V2e),e(V2e,bsr),e(Za,vsr),e(bo,Fsr),e(bo,X2e),e(X2e,DT),e(DT,z2e),e(z2e,Tsr),e(DT,Msr),e(DT,Yz),e(Yz,Esr),e(DT,Csr),e(bo,wsr),e(bo,GT),e(GT,Asr),e(GT,W2e),e(W2e,ysr),e(GT,Lsr),e(GT,Q2e),e(Q2e,xsr),e(bo,$sr),M(OT,bo,null),b(f,eje,_),b(f,Xd,_),e(Xd,VT),e(VT,H2e),M(dL,H2e,null),e(Xd,ksr),e(Xd,U2e),e(U2e,Ssr),b(f,oje,_),b(f,Yo,_),M(cL,Yo,null),e(Yo,Rsr),e(Yo,zd),e(zd,Psr),e(zd,Kz),e(Kz,Bsr),e(zd,Isr),e(zd,Zz),e(Zz,qsr),e(zd,Nsr),e(Yo,jsr),e(Yo,fL),e(fL,Dsr),e(fL,J2e),e(J2e,Gsr),e(fL,Osr),e(Yo,Vsr),e(Yo,Lt),M(mL,Lt,null),e(Lt,Xsr),e(Lt,Y2e),e(Y2e,zsr),e(Lt,Wsr),e(Lt,Wd),e(Wd,Qsr),e(Wd,K2e),e(K2e,Hsr),e(Wd,Usr),e(Wd,eW),e(eW,Jsr),e(Wd,Ysr),e(Lt,Ksr),M(XT,Lt,null),e(Yo,Zsr),e(Yo,vo),M(gL,vo,null),e(vo,elr),e(vo,Z2e),e(Z2e,olr),e(vo,rlr),e(vo,en),e(en,tlr),e(en,e1e),e(e1e,alr),e(en,nlr),e(en,o1e),e(o1e,slr),e(en,llr),e(en,r1e),e(r1e,ilr),e(en,dlr),e(vo,clr),e(vo,on),e(on,zT),e(zT,t1e),e(t1e,flr),e(zT,mlr),e(zT,oW),e(oW,glr),e(zT,hlr),e(on,plr),e(on,WT),e(WT,a1e),e(a1e,ulr),e(WT,_lr),e(WT,rW),e(rW,blr),e(WT,vlr),e(on,Flr),e(on,QT),e(QT,n1e),e(n1e,Tlr),e(QT,Mlr),e(QT,tW),e(tW,Elr),e(QT,Clr),e(on,wlr),e(on,HT),e(HT,s1e),e(s1e,Alr),e(HT,ylr),e(HT,aW),e(aW,Llr),e(HT,xlr),e(vo,$lr),e(vo,UT),e(UT,klr),e(UT,l1e),e(l1e,Slr),e(UT,Rlr),e(UT,i1e),e(i1e,Plr),e(vo,Blr),M(JT,vo,null),b(f,rje,_),b(f,Qd,_),e(Qd,YT),e(YT,d1e),M(hL,d1e,null),e(Qd,Ilr),e(Qd,c1e),e(c1e,qlr),b(f,tje,_),b(f,Ko,_),M(pL,Ko,null),e(Ko,Nlr),e(Ko,Hd),e(Hd,jlr),e(Hd,nW),e(nW,Dlr),e(Hd,Glr),e(Hd,sW),e(sW,Olr),e(Hd,Vlr),e(Ko,Xlr),e(Ko,uL),e(uL,zlr),e(uL,f1e),e(f1e,Wlr),e(uL,Qlr),e(Ko,Hlr),e(Ko,xt),M(_L,xt,null),e(xt,Ulr),e(xt,m1e),e(m1e,Jlr),e(xt,Ylr),e(xt,Ud),e(Ud,Klr),e(Ud,g1e),e(g1e,Zlr),e(Ud,eir),e(Ud,lW),e(lW,oir),e(Ud,rir),e(xt,tir),M(KT,xt,null),e(Ko,air),e(Ko,Fo),M(bL,Fo,null),e(Fo,nir),e(Fo,h1e),e(h1e,sir),e(Fo,lir),e(Fo,rn),e(rn,iir),e(rn,p1e),e(p1e,dir),e(rn,cir),e(rn,u1e),e(u1e,fir),e(rn,mir),e(rn,_1e),e(_1e,gir),e(rn,hir),e(Fo,pir),e(Fo,b1e),e(b1e,ZT),e(ZT,v1e),e(v1e,uir),e(ZT,_ir),e(ZT,iW),e(iW,bir),e(ZT,vir),e(Fo,Fir),e(Fo,e8),e(e8,Tir),e(e8,F1e),e(F1e,Mir),e(e8,Eir),e(e8,T1e),e(T1e,Cir),e(Fo,wir),M(o8,Fo,null),b(f,aje,_),b(f,Jd,_),e(Jd,r8),e(r8,M1e),M(vL,M1e,null),e(Jd,Air),e(Jd,E1e),e(E1e,yir),b(f,nje,_),b(f,Zo,_),M(FL,Zo,null),e(Zo,Lir),e(Zo,Yd),e(Yd,xir),e(Yd,dW),e(dW,$ir),e(Yd,kir),e(Yd,cW),e(cW,Sir),e(Yd,Rir),e(Zo,Pir),e(Zo,TL),e(TL,Bir),e(TL,C1e),e(C1e,Iir),e(TL,qir),e(Zo,Nir),e(Zo,$t),M(ML,$t,null),e($t,jir),e($t,w1e),e(w1e,Dir),e($t,Gir),e($t,Kd),e(Kd,Oir),e(Kd,A1e),e(A1e,Vir),e(Kd,Xir),e(Kd,fW),e(fW,zir),e(Kd,Wir),e($t,Qir),M(t8,$t,null),e(Zo,Hir),e(Zo,yr),M(EL,yr,null),e(yr,Uir),e(yr,y1e),e(y1e,Jir),e(yr,Yir),e(yr,tn),e(tn,Kir),e(tn,L1e),e(L1e,Zir),e(tn,edr),e(tn,x1e),e(x1e,odr),e(tn,rdr),e(tn,$1e),e($1e,tdr),e(tn,adr),e(yr,ndr),e(yr,N),e(N,a8),e(a8,k1e),e(k1e,sdr),e(a8,ldr),e(a8,mW),e(mW,idr),e(a8,ddr),e(N,cdr),e(N,n8),e(n8,S1e),e(S1e,fdr),e(n8,mdr),e(n8,gW),e(gW,gdr),e(n8,hdr),e(N,pdr),e(N,s8),e(s8,R1e),e(R1e,udr),e(s8,_dr),e(s8,hW),e(hW,bdr),e(s8,vdr),e(N,Fdr),e(N,l8),e(l8,P1e),e(P1e,Tdr),e(l8,Mdr),e(l8,pW),e(pW,Edr),e(l8,Cdr),e(N,wdr),e(N,i8),e(i8,B1e),e(B1e,Adr),e(i8,ydr),e(i8,uW),e(uW,Ldr),e(i8,xdr),e(N,$dr),e(N,d8),e(d8,I1e),e(I1e,kdr),e(d8,Sdr),e(d8,_W),e(_W,Rdr),e(d8,Pdr),e(N,Bdr),e(N,c8),e(c8,q1e),e(q1e,Idr),e(c8,qdr),e(c8,bW),e(bW,Ndr),e(c8,jdr),e(N,Ddr),e(N,f8),e(f8,N1e),e(N1e,Gdr),e(f8,Odr),e(f8,vW),e(vW,Vdr),e(f8,Xdr),e(N,zdr),e(N,m8),e(m8,j1e),e(j1e,Wdr),e(m8,Qdr),e(m8,FW),e(FW,Hdr),e(m8,Udr),e(N,Jdr),e(N,g8),e(g8,D1e),e(D1e,Ydr),e(g8,Kdr),e(g8,TW),e(TW,Zdr),e(g8,ecr),e(N,ocr),e(N,h8),e(h8,G1e),e(G1e,rcr),e(h8,tcr),e(h8,MW),e(MW,acr),e(h8,ncr),e(N,scr),e(N,p8),e(p8,O1e),e(O1e,lcr),e(p8,icr),e(p8,EW),e(EW,dcr),e(p8,ccr),e(N,fcr),e(N,u8),e(u8,V1e),e(V1e,mcr),e(u8,gcr),e(u8,CW),e(CW,hcr),e(u8,pcr),e(N,ucr),e(N,_8),e(_8,X1e),e(X1e,_cr),e(_8,bcr),e(_8,wW),e(wW,vcr),e(_8,Fcr),e(N,Tcr),e(N,b8),e(b8,z1e),e(z1e,Mcr),e(b8,Ecr),e(b8,AW),e(AW,Ccr),e(b8,wcr),e(N,Acr),e(N,v8),e(v8,W1e),e(W1e,ycr),e(v8,Lcr),e(v8,yW),e(yW,xcr),e(v8,$cr),e(N,kcr),e(N,F8),e(F8,Q1e),e(Q1e,Scr),e(F8,Rcr),e(F8,LW),e(LW,Pcr),e(F8,Bcr),e(N,Icr),e(N,Gs),e(Gs,H1e),e(H1e,qcr),e(Gs,Ncr),e(Gs,xW),e(xW,jcr),e(Gs,Dcr),e(Gs,$W),e($W,Gcr),e(Gs,Ocr),e(N,Vcr),e(N,T8),e(T8,U1e),e(U1e,Xcr),e(T8,zcr),e(T8,kW),e(kW,Wcr),e(T8,Qcr),e(N,Hcr),e(N,M8),e(M8,J1e),e(J1e,Ucr),e(M8,Jcr),e(M8,SW),e(SW,Ycr),e(M8,Kcr),e(N,Zcr),e(N,E8),e(E8,Y1e),e(Y1e,efr),e(E8,ofr),e(E8,RW),e(RW,rfr),e(E8,tfr),e(N,afr),e(N,C8),e(C8,K1e),e(K1e,nfr),e(C8,sfr),e(C8,PW),e(PW,lfr),e(C8,ifr),e(N,dfr),e(N,w8),e(w8,Z1e),e(Z1e,cfr),e(w8,ffr),e(w8,BW),e(BW,mfr),e(w8,gfr),e(N,hfr),e(N,A8),e(A8,ebe),e(ebe,pfr),e(A8,ufr),e(A8,IW),e(IW,_fr),e(A8,bfr),e(N,vfr),e(N,y8),e(y8,obe),e(obe,Ffr),e(y8,Tfr),e(y8,qW),e(qW,Mfr),e(y8,Efr),e(N,Cfr),e(N,L8),e(L8,rbe),e(rbe,wfr),e(L8,Afr),e(L8,NW),e(NW,yfr),e(L8,Lfr),e(N,xfr),e(N,x8),e(x8,tbe),e(tbe,$fr),e(x8,kfr),e(x8,jW),e(jW,Sfr),e(x8,Rfr),e(N,Pfr),e(N,$8),e($8,abe),e(abe,Bfr),e($8,Ifr),e($8,DW),e(DW,qfr),e($8,Nfr),e(N,jfr),e(N,k8),e(k8,nbe),e(nbe,Dfr),e(k8,Gfr),e(k8,GW),e(GW,Ofr),e(k8,Vfr),e(N,Xfr),e(N,S8),e(S8,sbe),e(sbe,zfr),e(S8,Wfr),e(S8,OW),e(OW,Qfr),e(S8,Hfr),e(N,Ufr),e(N,R8),e(R8,lbe),e(lbe,Jfr),e(R8,Yfr),e(R8,VW),e(VW,Kfr),e(R8,Zfr),e(N,emr),e(N,P8),e(P8,ibe),e(ibe,omr),e(P8,rmr),e(P8,XW),e(XW,tmr),e(P8,amr),e(N,nmr),e(N,B8),e(B8,dbe),e(dbe,smr),e(B8,lmr),e(B8,zW),e(zW,imr),e(B8,dmr),e(N,cmr),e(N,I8),e(I8,cbe),e(cbe,fmr),e(I8,mmr),e(I8,WW),e(WW,gmr),e(I8,hmr),e(N,pmr),e(N,q8),e(q8,fbe),e(fbe,umr),e(q8,_mr),e(q8,QW),e(QW,bmr),e(q8,vmr),e(N,Fmr),e(N,N8),e(N8,mbe),e(mbe,Tmr),e(N8,Mmr),e(N8,HW),e(HW,Emr),e(N8,Cmr),e(N,wmr),e(N,j8),e(j8,gbe),e(gbe,Amr),e(j8,ymr),e(j8,UW),e(UW,Lmr),e(j8,xmr),e(N,$mr),e(N,D8),e(D8,hbe),e(hbe,kmr),e(D8,Smr),e(D8,JW),e(JW,Rmr),e(D8,Pmr),e(N,Bmr),e(N,G8),e(G8,pbe),e(pbe,Imr),e(G8,qmr),e(G8,YW),e(YW,Nmr),e(G8,jmr),e(N,Dmr),e(N,O8),e(O8,ube),e(ube,Gmr),e(O8,Omr),e(O8,KW),e(KW,Vmr),e(O8,Xmr),e(N,zmr),e(N,V8),e(V8,_be),e(_be,Wmr),e(V8,Qmr),e(V8,ZW),e(ZW,Hmr),e(V8,Umr),e(N,Jmr),e(N,X8),e(X8,bbe),e(bbe,Ymr),e(X8,Kmr),e(X8,eQ),e(eQ,Zmr),e(X8,egr),e(N,ogr),e(N,z8),e(z8,vbe),e(vbe,rgr),e(z8,tgr),e(z8,oQ),e(oQ,agr),e(z8,ngr),e(N,sgr),e(N,W8),e(W8,Fbe),e(Fbe,lgr),e(W8,igr),e(W8,rQ),e(rQ,dgr),e(W8,cgr),e(N,fgr),e(N,Q8),e(Q8,Tbe),e(Tbe,mgr),e(Q8,ggr),e(Q8,tQ),e(tQ,hgr),e(Q8,pgr),e(N,ugr),e(N,H8),e(H8,Mbe),e(Mbe,_gr),e(H8,bgr),e(H8,aQ),e(aQ,vgr),e(H8,Fgr),e(yr,Tgr),M(U8,yr,null),b(f,sje,_),b(f,Zd,_),e(Zd,J8),e(J8,Ebe),M(CL,Ebe,null),e(Zd,Mgr),e(Zd,Cbe),e(Cbe,Egr),b(f,lje,_),b(f,er,_),M(wL,er,null),e(er,Cgr),e(er,ec),e(ec,wgr),e(ec,nQ),e(nQ,Agr),e(ec,ygr),e(ec,sQ),e(sQ,Lgr),e(ec,xgr),e(er,$gr),e(er,AL),e(AL,kgr),e(AL,wbe),e(wbe,Sgr),e(AL,Rgr),e(er,Pgr),e(er,kt),M(yL,kt,null),e(kt,Bgr),e(kt,Abe),e(Abe,Igr),e(kt,qgr),e(kt,oc),e(oc,Ngr),e(oc,ybe),e(ybe,jgr),e(oc,Dgr),e(oc,lQ),e(lQ,Ggr),e(oc,Ogr),e(kt,Vgr),M(Y8,kt,null),e(er,Xgr),e(er,Lr),M(LL,Lr,null),e(Lr,zgr),e(Lr,Lbe),e(Lbe,Wgr),e(Lr,Qgr),e(Lr,an),e(an,Hgr),e(an,xbe),e(xbe,Ugr),e(an,Jgr),e(an,$be),e($be,Ygr),e(an,Kgr),e(an,kbe),e(kbe,Zgr),e(an,ehr),e(Lr,ohr),e(Lr,se),e(se,K8),e(K8,Sbe),e(Sbe,rhr),e(K8,thr),e(K8,iQ),e(iQ,ahr),e(K8,nhr),e(se,shr),e(se,Z8),e(Z8,Rbe),e(Rbe,lhr),e(Z8,ihr),e(Z8,dQ),e(dQ,dhr),e(Z8,chr),e(se,fhr),e(se,e7),e(e7,Pbe),e(Pbe,mhr),e(e7,ghr),e(e7,cQ),e(cQ,hhr),e(e7,phr),e(se,uhr),e(se,o7),e(o7,Bbe),e(Bbe,_hr),e(o7,bhr),e(o7,fQ),e(fQ,vhr),e(o7,Fhr),e(se,Thr),e(se,r7),e(r7,Ibe),e(Ibe,Mhr),e(r7,Ehr),e(r7,mQ),e(mQ,Chr),e(r7,whr),e(se,Ahr),e(se,t7),e(t7,qbe),e(qbe,yhr),e(t7,Lhr),e(t7,gQ),e(gQ,xhr),e(t7,$hr),e(se,khr),e(se,a7),e(a7,Nbe),e(Nbe,Shr),e(a7,Rhr),e(a7,hQ),e(hQ,Phr),e(a7,Bhr),e(se,Ihr),e(se,n7),e(n7,jbe),e(jbe,qhr),e(n7,Nhr),e(n7,pQ),e(pQ,jhr),e(n7,Dhr),e(se,Ghr),e(se,s7),e(s7,Dbe),e(Dbe,Ohr),e(s7,Vhr),e(s7,uQ),e(uQ,Xhr),e(s7,zhr),e(se,Whr),e(se,l7),e(l7,Gbe),e(Gbe,Qhr),e(l7,Hhr),e(l7,_Q),e(_Q,Uhr),e(l7,Jhr),e(se,Yhr),e(se,i7),e(i7,Obe),e(Obe,Khr),e(i7,Zhr),e(i7,bQ),e(bQ,epr),e(i7,opr),e(se,rpr),e(se,d7),e(d7,Vbe),e(Vbe,tpr),e(d7,apr),e(d7,vQ),e(vQ,npr),e(d7,spr),e(se,lpr),e(se,c7),e(c7,Xbe),e(Xbe,ipr),e(c7,dpr),e(c7,FQ),e(FQ,cpr),e(c7,fpr),e(se,mpr),e(se,f7),e(f7,zbe),e(zbe,gpr),e(f7,hpr),e(f7,TQ),e(TQ,ppr),e(f7,upr),e(se,_pr),e(se,m7),e(m7,Wbe),e(Wbe,bpr),e(m7,vpr),e(m7,MQ),e(MQ,Fpr),e(m7,Tpr),e(se,Mpr),e(se,g7),e(g7,Qbe),e(Qbe,Epr),e(g7,Cpr),e(g7,EQ),e(EQ,wpr),e(g7,Apr),e(se,ypr),e(se,h7),e(h7,Hbe),e(Hbe,Lpr),e(h7,xpr),e(h7,CQ),e(CQ,$pr),e(h7,kpr),e(se,Spr),e(se,p7),e(p7,Ube),e(Ube,Rpr),e(p7,Ppr),e(p7,wQ),e(wQ,Bpr),e(p7,Ipr),e(se,qpr),e(se,u7),e(u7,Jbe),e(Jbe,Npr),e(u7,jpr),e(u7,AQ),e(AQ,Dpr),e(u7,Gpr),e(se,Opr),e(se,_7),e(_7,Ybe),e(Ybe,Vpr),e(_7,Xpr),e(_7,yQ),e(yQ,zpr),e(_7,Wpr),e(se,Qpr),e(se,b7),e(b7,Kbe),e(Kbe,Hpr),e(b7,Upr),e(b7,LQ),e(LQ,Jpr),e(b7,Ypr),e(se,Kpr),e(se,v7),e(v7,Zbe),e(Zbe,Zpr),e(v7,eur),e(v7,xQ),e(xQ,our),e(v7,rur),e(se,tur),e(se,F7),e(F7,eve),e(eve,aur),e(F7,nur),e(F7,$Q),e($Q,sur),e(F7,lur),e(Lr,iur),M(T7,Lr,null),b(f,ije,_),b(f,rc,_),e(rc,M7),e(M7,ove),M(xL,ove,null),e(rc,dur),e(rc,rve),e(rve,cur),b(f,dje,_),b(f,or,_),M($L,or,null),e(or,fur),e(or,tc),e(tc,mur),e(tc,kQ),e(kQ,gur),e(tc,hur),e(tc,SQ),e(SQ,pur),e(tc,uur),e(or,_ur),e(or,kL),e(kL,bur),e(kL,tve),e(tve,vur),e(kL,Fur),e(or,Tur),e(or,St),M(SL,St,null),e(St,Mur),e(St,ave),e(ave,Eur),e(St,Cur),e(St,ac),e(ac,wur),e(ac,nve),e(nve,Aur),e(ac,yur),e(ac,RQ),e(RQ,Lur),e(ac,xur),e(St,$ur),M(E7,St,null),e(or,kur),e(or,xr),M(RL,xr,null),e(xr,Sur),e(xr,sve),e(sve,Rur),e(xr,Pur),e(xr,nn),e(nn,Bur),e(nn,lve),e(lve,Iur),e(nn,qur),e(nn,ive),e(ive,Nur),e(nn,jur),e(nn,dve),e(dve,Dur),e(nn,Gur),e(xr,Our),e(xr,Me),e(Me,C7),e(C7,cve),e(cve,Vur),e(C7,Xur),e(C7,PQ),e(PQ,zur),e(C7,Wur),e(Me,Qur),e(Me,w7),e(w7,fve),e(fve,Hur),e(w7,Uur),e(w7,BQ),e(BQ,Jur),e(w7,Yur),e(Me,Kur),e(Me,A7),e(A7,mve),e(mve,Zur),e(A7,e_r),e(A7,IQ),e(IQ,o_r),e(A7,r_r),e(Me,t_r),e(Me,y7),e(y7,gve),e(gve,a_r),e(y7,n_r),e(y7,qQ),e(qQ,s_r),e(y7,l_r),e(Me,i_r),e(Me,L7),e(L7,hve),e(hve,d_r),e(L7,c_r),e(L7,NQ),e(NQ,f_r),e(L7,m_r),e(Me,g_r),e(Me,x7),e(x7,pve),e(pve,h_r),e(x7,p_r),e(x7,jQ),e(jQ,u_r),e(x7,__r),e(Me,b_r),e(Me,$7),e($7,uve),e(uve,v_r),e($7,F_r),e($7,DQ),e(DQ,T_r),e($7,M_r),e(Me,E_r),e(Me,k7),e(k7,_ve),e(_ve,C_r),e(k7,w_r),e(k7,GQ),e(GQ,A_r),e(k7,y_r),e(Me,L_r),e(Me,S7),e(S7,bve),e(bve,x_r),e(S7,$_r),e(S7,OQ),e(OQ,k_r),e(S7,S_r),e(Me,R_r),e(Me,R7),e(R7,vve),e(vve,P_r),e(R7,B_r),e(R7,VQ),e(VQ,I_r),e(R7,q_r),e(Me,N_r),e(Me,P7),e(P7,Fve),e(Fve,j_r),e(P7,D_r),e(P7,XQ),e(XQ,G_r),e(P7,O_r),e(Me,V_r),e(Me,B7),e(B7,Tve),e(Tve,X_r),e(B7,z_r),e(B7,zQ),e(zQ,W_r),e(B7,Q_r),e(xr,H_r),M(I7,xr,null),b(f,cje,_),b(f,nc,_),e(nc,q7),e(q7,Mve),M(PL,Mve,null),e(nc,U_r),e(nc,Eve),e(Eve,J_r),b(f,fje,_),b(f,rr,_),M(BL,rr,null),e(rr,Y_r),e(rr,sc),e(sc,K_r),e(sc,WQ),e(WQ,Z_r),e(sc,e2r),e(sc,QQ),e(QQ,o2r),e(sc,r2r),e(rr,t2r),e(rr,IL),e(IL,a2r),e(IL,Cve),e(Cve,n2r),e(IL,s2r),e(rr,l2r),e(rr,Rt),M(qL,Rt,null),e(Rt,i2r),e(Rt,wve),e(wve,d2r),e(Rt,c2r),e(Rt,lc),e(lc,f2r),e(lc,Ave),e(Ave,m2r),e(lc,g2r),e(lc,HQ),e(HQ,h2r),e(lc,p2r),e(Rt,u2r),M(N7,Rt,null),e(rr,_2r),e(rr,$r),M(NL,$r,null),e($r,b2r),e($r,yve),e(yve,v2r),e($r,F2r),e($r,sn),e(sn,T2r),e(sn,Lve),e(Lve,M2r),e(sn,E2r),e(sn,xve),e(xve,C2r),e(sn,w2r),e(sn,$ve),e($ve,A2r),e(sn,y2r),e($r,L2r),e($r,ln),e(ln,j7),e(j7,kve),e(kve,x2r),e(j7,$2r),e(j7,UQ),e(UQ,k2r),e(j7,S2r),e(ln,R2r),e(ln,D7),e(D7,Sve),e(Sve,P2r),e(D7,B2r),e(D7,JQ),e(JQ,I2r),e(D7,q2r),e(ln,N2r),e(ln,G7),e(G7,Rve),e(Rve,j2r),e(G7,D2r),e(G7,YQ),e(YQ,G2r),e(G7,O2r),e(ln,V2r),e(ln,O7),e(O7,Pve),e(Pve,X2r),e(O7,z2r),e(O7,KQ),e(KQ,W2r),e(O7,Q2r),e($r,H2r),M(V7,$r,null),b(f,mje,_),b(f,ic,_),e(ic,X7),e(X7,Bve),M(jL,Bve,null),e(ic,U2r),e(ic,Ive),e(Ive,J2r),b(f,gje,_),b(f,tr,_),M(DL,tr,null),e(tr,Y2r),e(tr,dc),e(dc,K2r),e(dc,ZQ),e(ZQ,Z2r),e(dc,e1r),e(dc,eH),e(eH,o1r),e(dc,r1r),e(tr,t1r),e(tr,GL),e(GL,a1r),e(GL,qve),e(qve,n1r),e(GL,s1r),e(tr,l1r),e(tr,Pt),M(OL,Pt,null),e(Pt,i1r),e(Pt,Nve),e(Nve,d1r),e(Pt,c1r),e(Pt,cc),e(cc,f1r),e(cc,jve),e(jve,m1r),e(cc,g1r),e(cc,oH),e(oH,h1r),e(cc,p1r),e(Pt,u1r),M(z7,Pt,null),e(tr,_1r),e(tr,kr),M(VL,kr,null),e(kr,b1r),e(kr,Dve),e(Dve,v1r),e(kr,F1r),e(kr,dn),e(dn,T1r),e(dn,Gve),e(Gve,M1r),e(dn,E1r),e(dn,Ove),e(Ove,C1r),e(dn,w1r),e(dn,Vve),e(Vve,A1r),e(dn,y1r),e(kr,L1r),e(kr,ie),e(ie,W7),e(W7,Xve),e(Xve,x1r),e(W7,$1r),e(W7,rH),e(rH,k1r),e(W7,S1r),e(ie,R1r),e(ie,Q7),e(Q7,zve),e(zve,P1r),e(Q7,B1r),e(Q7,tH),e(tH,I1r),e(Q7,q1r),e(ie,N1r),e(ie,H7),e(H7,Wve),e(Wve,j1r),e(H7,D1r),e(H7,aH),e(aH,G1r),e(H7,O1r),e(ie,V1r),e(ie,U7),e(U7,Qve),e(Qve,X1r),e(U7,z1r),e(U7,nH),e(nH,W1r),e(U7,Q1r),e(ie,H1r),e(ie,J7),e(J7,Hve),e(Hve,U1r),e(J7,J1r),e(J7,sH),e(sH,Y1r),e(J7,K1r),e(ie,Z1r),e(ie,Y7),e(Y7,Uve),e(Uve,ebr),e(Y7,obr),e(Y7,lH),e(lH,rbr),e(Y7,tbr),e(ie,abr),e(ie,K7),e(K7,Jve),e(Jve,nbr),e(K7,sbr),e(K7,iH),e(iH,lbr),e(K7,ibr),e(ie,dbr),e(ie,Z7),e(Z7,Yve),e(Yve,cbr),e(Z7,fbr),e(Z7,dH),e(dH,mbr),e(Z7,gbr),e(ie,hbr),e(ie,eM),e(eM,Kve),e(Kve,pbr),e(eM,ubr),e(eM,cH),e(cH,_br),e(eM,bbr),e(ie,vbr),e(ie,oM),e(oM,Zve),e(Zve,Fbr),e(oM,Tbr),e(oM,fH),e(fH,Mbr),e(oM,Ebr),e(ie,Cbr),e(ie,rM),e(rM,eFe),e(eFe,wbr),e(rM,Abr),e(rM,mH),e(mH,ybr),e(rM,Lbr),e(ie,xbr),e(ie,tM),e(tM,oFe),e(oFe,$br),e(tM,kbr),e(tM,gH),e(gH,Sbr),e(tM,Rbr),e(ie,Pbr),e(ie,aM),e(aM,rFe),e(rFe,Bbr),e(aM,Ibr),e(aM,hH),e(hH,qbr),e(aM,Nbr),e(ie,jbr),e(ie,nM),e(nM,tFe),e(tFe,Dbr),e(nM,Gbr),e(nM,pH),e(pH,Obr),e(nM,Vbr),e(ie,Xbr),e(ie,sM),e(sM,aFe),e(aFe,zbr),e(sM,Wbr),e(sM,uH),e(uH,Qbr),e(sM,Hbr),e(ie,Ubr),e(ie,lM),e(lM,nFe),e(nFe,Jbr),e(lM,Ybr),e(lM,_H),e(_H,Kbr),e(lM,Zbr),e(ie,evr),e(ie,iM),e(iM,sFe),e(sFe,ovr),e(iM,rvr),e(iM,bH),e(bH,tvr),e(iM,avr),e(ie,nvr),e(ie,dM),e(dM,lFe),e(lFe,svr),e(dM,lvr),e(dM,vH),e(vH,ivr),e(dM,dvr),e(ie,cvr),e(ie,cM),e(cM,iFe),e(iFe,fvr),e(cM,mvr),e(cM,FH),e(FH,gvr),e(cM,hvr),e(ie,pvr),e(ie,fM),e(fM,dFe),e(dFe,uvr),e(fM,_vr),e(fM,TH),e(TH,bvr),e(fM,vvr),e(kr,Fvr),M(mM,kr,null),b(f,hje,_),b(f,fc,_),e(fc,gM),e(gM,cFe),M(XL,cFe,null),e(fc,Tvr),e(fc,fFe),e(fFe,Mvr),b(f,pje,_),b(f,ar,_),M(zL,ar,null),e(ar,Evr),e(ar,mc),e(mc,Cvr),e(mc,MH),e(MH,wvr),e(mc,Avr),e(mc,EH),e(EH,yvr),e(mc,Lvr),e(ar,xvr),e(ar,WL),e(WL,$vr),e(WL,mFe),e(mFe,kvr),e(WL,Svr),e(ar,Rvr),e(ar,Bt),M(QL,Bt,null),e(Bt,Pvr),e(Bt,gFe),e(gFe,Bvr),e(Bt,Ivr),e(Bt,gc),e(gc,qvr),e(gc,hFe),e(hFe,Nvr),e(gc,jvr),e(gc,CH),e(CH,Dvr),e(gc,Gvr),e(Bt,Ovr),M(hM,Bt,null),e(ar,Vvr),e(ar,Sr),M(HL,Sr,null),e(Sr,Xvr),e(Sr,pFe),e(pFe,zvr),e(Sr,Wvr),e(Sr,cn),e(cn,Qvr),e(cn,uFe),e(uFe,Hvr),e(cn,Uvr),e(cn,_Fe),e(_Fe,Jvr),e(cn,Yvr),e(cn,bFe),e(bFe,Kvr),e(cn,Zvr),e(Sr,eFr),e(Sr,ye),e(ye,pM),e(pM,vFe),e(vFe,oFr),e(pM,rFr),e(pM,wH),e(wH,tFr),e(pM,aFr),e(ye,nFr),e(ye,uM),e(uM,FFe),e(FFe,sFr),e(uM,lFr),e(uM,AH),e(AH,iFr),e(uM,dFr),e(ye,cFr),e(ye,_M),e(_M,TFe),e(TFe,fFr),e(_M,mFr),e(_M,yH),e(yH,gFr),e(_M,hFr),e(ye,pFr),e(ye,bM),e(bM,MFe),e(MFe,uFr),e(bM,_Fr),e(bM,LH),e(LH,bFr),e(bM,vFr),e(ye,FFr),e(ye,vM),e(vM,EFe),e(EFe,TFr),e(vM,MFr),e(vM,xH),e(xH,EFr),e(vM,CFr),e(ye,wFr),e(ye,FM),e(FM,CFe),e(CFe,AFr),e(FM,yFr),e(FM,$H),e($H,LFr),e(FM,xFr),e(ye,$Fr),e(ye,TM),e(TM,wFe),e(wFe,kFr),e(TM,SFr),e(TM,kH),e(kH,RFr),e(TM,PFr),e(ye,BFr),e(ye,MM),e(MM,AFe),e(AFe,IFr),e(MM,qFr),e(MM,SH),e(SH,NFr),e(MM,jFr),e(ye,DFr),e(ye,EM),e(EM,yFe),e(yFe,GFr),e(EM,OFr),e(EM,RH),e(RH,VFr),e(EM,XFr),e(ye,zFr),e(ye,CM),e(CM,LFe),e(LFe,WFr),e(CM,QFr),e(CM,PH),e(PH,HFr),e(CM,UFr),e(Sr,JFr),M(wM,Sr,null),b(f,uje,_),b(f,hc,_),e(hc,AM),e(AM,xFe),M(UL,xFe,null),e(hc,YFr),e(hc,$Fe),e($Fe,KFr),b(f,_je,_),b(f,nr,_),M(JL,nr,null),e(nr,ZFr),e(nr,pc),e(pc,e6r),e(pc,BH),e(BH,o6r),e(pc,r6r),e(pc,IH),e(IH,t6r),e(pc,a6r),e(nr,n6r),e(nr,YL),e(YL,s6r),e(YL,kFe),e(kFe,l6r),e(YL,i6r),e(nr,d6r),e(nr,It),M(KL,It,null),e(It,c6r),e(It,SFe),e(SFe,f6r),e(It,m6r),e(It,uc),e(uc,g6r),e(uc,RFe),e(RFe,h6r),e(uc,p6r),e(uc,qH),e(qH,u6r),e(uc,_6r),e(It,b6r),M(yM,It,null),e(nr,v6r),e(nr,Rr),M(ZL,Rr,null),e(Rr,F6r),e(Rr,PFe),e(PFe,T6r),e(Rr,M6r),e(Rr,fn),e(fn,E6r),e(fn,BFe),e(BFe,C6r),e(fn,w6r),e(fn,IFe),e(IFe,A6r),e(fn,y6r),e(fn,qFe),e(qFe,L6r),e(fn,x6r),e(Rr,$6r),e(Rr,re),e(re,LM),e(LM,NFe),e(NFe,k6r),e(LM,S6r),e(LM,NH),e(NH,R6r),e(LM,P6r),e(re,B6r),e(re,xM),e(xM,jFe),e(jFe,I6r),e(xM,q6r),e(xM,jH),e(jH,N6r),e(xM,j6r),e(re,D6r),e(re,$M),e($M,DFe),e(DFe,G6r),e($M,O6r),e($M,DH),e(DH,V6r),e($M,X6r),e(re,z6r),e(re,kM),e(kM,GFe),e(GFe,W6r),e(kM,Q6r),e(kM,GH),e(GH,H6r),e(kM,U6r),e(re,J6r),e(re,SM),e(SM,OFe),e(OFe,Y6r),e(SM,K6r),e(SM,OH),e(OH,Z6r),e(SM,eTr),e(re,oTr),e(re,RM),e(RM,VFe),e(VFe,rTr),e(RM,tTr),e(RM,VH),e(VH,aTr),e(RM,nTr),e(re,sTr),e(re,PM),e(PM,XFe),e(XFe,lTr),e(PM,iTr),e(PM,XH),e(XH,dTr),e(PM,cTr),e(re,fTr),e(re,BM),e(BM,zFe),e(zFe,mTr),e(BM,gTr),e(BM,zH),e(zH,hTr),e(BM,pTr),e(re,uTr),e(re,IM),e(IM,WFe),e(WFe,_Tr),e(IM,bTr),e(IM,WH),e(WH,vTr),e(IM,FTr),e(re,TTr),e(re,qM),e(qM,QFe),e(QFe,MTr),e(qM,ETr),e(qM,QH),e(QH,CTr),e(qM,wTr),e(re,ATr),e(re,NM),e(NM,HFe),e(HFe,yTr),e(NM,LTr),e(NM,HH),e(HH,xTr),e(NM,$Tr),e(re,kTr),e(re,jM),e(jM,UFe),e(UFe,STr),e(jM,RTr),e(jM,UH),e(UH,PTr),e(jM,BTr),e(re,ITr),e(re,DM),e(DM,JFe),e(JFe,qTr),e(DM,NTr),e(DM,JH),e(JH,jTr),e(DM,DTr),e(re,GTr),e(re,GM),e(GM,YFe),e(YFe,OTr),e(GM,VTr),e(GM,YH),e(YH,XTr),e(GM,zTr),e(re,WTr),e(re,OM),e(OM,KFe),e(KFe,QTr),e(OM,HTr),e(OM,KH),e(KH,UTr),e(OM,JTr),e(re,YTr),e(re,VM),e(VM,ZFe),e(ZFe,KTr),e(VM,ZTr),e(VM,ZH),e(ZH,e8r),e(VM,o8r),e(re,r8r),e(re,XM),e(XM,e6e),e(e6e,t8r),e(XM,a8r),e(XM,eU),e(eU,n8r),e(XM,s8r),e(re,l8r),e(re,zM),e(zM,o6e),e(o6e,i8r),e(zM,d8r),e(zM,oU),e(oU,c8r),e(zM,f8r),e(re,m8r),e(re,WM),e(WM,r6e),e(r6e,g8r),e(WM,h8r),e(WM,rU),e(rU,p8r),e(WM,u8r),e(re,_8r),e(re,QM),e(QM,t6e),e(t6e,b8r),e(QM,v8r),e(QM,tU),e(tU,F8r),e(QM,T8r),e(re,M8r),e(re,HM),e(HM,a6e),e(a6e,E8r),e(HM,C8r),e(HM,aU),e(aU,w8r),e(HM,A8r),e(re,y8r),e(re,UM),e(UM,n6e),e(n6e,L8r),e(UM,x8r),e(UM,nU),e(nU,$8r),e(UM,k8r),e(re,S8r),e(re,JM),e(JM,s6e),e(s6e,R8r),e(JM,P8r),e(JM,sU),e(sU,B8r),e(JM,I8r),e(re,q8r),e(re,YM),e(YM,l6e),e(l6e,N8r),e(YM,j8r),e(YM,lU),e(lU,D8r),e(YM,G8r),e(re,O8r),e(re,KM),e(KM,i6e),e(i6e,V8r),e(KM,X8r),e(KM,iU),e(iU,z8r),e(KM,W8r),e(re,Q8r),e(re,ZM),e(ZM,d6e),e(d6e,H8r),e(ZM,U8r),e(ZM,dU),e(dU,J8r),e(ZM,Y8r),e(Rr,K8r),M(e4,Rr,null),b(f,bje,_),b(f,_c,_),e(_c,o4),e(o4,c6e),M(ex,c6e,null),e(_c,Z8r),e(_c,f6e),e(f6e,e7r),b(f,vje,_),b(f,sr,_),M(ox,sr,null),e(sr,o7r),e(sr,bc),e(bc,r7r),e(bc,cU),e(cU,t7r),e(bc,a7r),e(bc,fU),e(fU,n7r),e(bc,s7r),e(sr,l7r),e(sr,rx),e(rx,i7r),e(rx,m6e),e(m6e,d7r),e(rx,c7r),e(sr,f7r),e(sr,qt),M(tx,qt,null),e(qt,m7r),e(qt,g6e),e(g6e,g7r),e(qt,h7r),e(qt,vc),e(vc,p7r),e(vc,h6e),e(h6e,u7r),e(vc,_7r),e(vc,mU),e(mU,b7r),e(vc,v7r),e(qt,F7r),M(r4,qt,null),e(sr,T7r),e(sr,Pr),M(ax,Pr,null),e(Pr,M7r),e(Pr,p6e),e(p6e,E7r),e(Pr,C7r),e(Pr,mn),e(mn,w7r),e(mn,u6e),e(u6e,A7r),e(mn,y7r),e(mn,_6e),e(_6e,L7r),e(mn,x7r),e(mn,b6e),e(b6e,$7r),e(mn,k7r),e(Pr,S7r),e(Pr,he),e(he,t4),e(t4,v6e),e(v6e,R7r),e(t4,P7r),e(t4,gU),e(gU,B7r),e(t4,I7r),e(he,q7r),e(he,a4),e(a4,F6e),e(F6e,N7r),e(a4,j7r),e(a4,hU),e(hU,D7r),e(a4,G7r),e(he,O7r),e(he,n4),e(n4,T6e),e(T6e,V7r),e(n4,X7r),e(n4,pU),e(pU,z7r),e(n4,W7r),e(he,Q7r),e(he,s4),e(s4,M6e),e(M6e,H7r),e(s4,U7r),e(s4,uU),e(uU,J7r),e(s4,Y7r),e(he,K7r),e(he,l4),e(l4,E6e),e(E6e,Z7r),e(l4,eMr),e(l4,_U),e(_U,oMr),e(l4,rMr),e(he,tMr),e(he,i4),e(i4,C6e),e(C6e,aMr),e(i4,nMr),e(i4,bU),e(bU,sMr),e(i4,lMr),e(he,iMr),e(he,d4),e(d4,w6e),e(w6e,dMr),e(d4,cMr),e(d4,vU),e(vU,fMr),e(d4,mMr),e(he,gMr),e(he,c4),e(c4,A6e),e(A6e,hMr),e(c4,pMr),e(c4,FU),e(FU,uMr),e(c4,_Mr),e(he,bMr),e(he,f4),e(f4,y6e),e(y6e,vMr),e(f4,FMr),e(f4,TU),e(TU,TMr),e(f4,MMr),e(he,EMr),e(he,m4),e(m4,L6e),e(L6e,CMr),e(m4,wMr),e(m4,MU),e(MU,AMr),e(m4,yMr),e(he,LMr),e(he,g4),e(g4,x6e),e(x6e,xMr),e(g4,$Mr),e(g4,EU),e(EU,kMr),e(g4,SMr),e(he,RMr),e(he,h4),e(h4,$6e),e($6e,PMr),e(h4,BMr),e(h4,CU),e(CU,IMr),e(h4,qMr),e(he,NMr),e(he,p4),e(p4,k6e),e(k6e,jMr),e(p4,DMr),e(p4,wU),e(wU,GMr),e(p4,OMr),e(he,VMr),e(he,u4),e(u4,S6e),e(S6e,XMr),e(u4,zMr),e(u4,AU),e(AU,WMr),e(u4,QMr),e(he,HMr),e(he,_4),e(_4,R6e),e(R6e,UMr),e(_4,JMr),e(_4,yU),e(yU,YMr),e(_4,KMr),e(he,ZMr),e(he,b4),e(b4,P6e),e(P6e,e4r),e(b4,o4r),e(b4,LU),e(LU,r4r),e(b4,t4r),e(he,a4r),e(he,v4),e(v4,B6e),e(B6e,n4r),e(v4,s4r),e(v4,xU),e(xU,l4r),e(v4,i4r),e(Pr,d4r),M(F4,Pr,null),b(f,Fje,_),b(f,Fc,_),e(Fc,T4),e(T4,I6e),M(nx,I6e,null),e(Fc,c4r),e(Fc,q6e),e(q6e,f4r),b(f,Tje,_),b(f,lr,_),M(sx,lr,null),e(lr,m4r),e(lr,Tc),e(Tc,g4r),e(Tc,$U),e($U,h4r),e(Tc,p4r),e(Tc,kU),e(kU,u4r),e(Tc,_4r),e(lr,b4r),e(lr,lx),e(lx,v4r),e(lx,N6e),e(N6e,F4r),e(lx,T4r),e(lr,M4r),e(lr,Nt),M(ix,Nt,null),e(Nt,E4r),e(Nt,j6e),e(j6e,C4r),e(Nt,w4r),e(Nt,Mc),e(Mc,A4r),e(Mc,D6e),e(D6e,y4r),e(Mc,L4r),e(Mc,SU),e(SU,x4r),e(Mc,$4r),e(Nt,k4r),M(M4,Nt,null),e(lr,S4r),e(lr,Br),M(dx,Br,null),e(Br,R4r),e(Br,G6e),e(G6e,P4r),e(Br,B4r),e(Br,gn),e(gn,I4r),e(gn,O6e),e(O6e,q4r),e(gn,N4r),e(gn,V6e),e(V6e,j4r),e(gn,D4r),e(gn,X6e),e(X6e,G4r),e(gn,O4r),e(Br,V4r),e(Br,cx),e(cx,E4),e(E4,z6e),e(z6e,X4r),e(E4,z4r),e(E4,RU),e(RU,W4r),e(E4,Q4r),e(cx,H4r),e(cx,C4),e(C4,W6e),e(W6e,U4r),e(C4,J4r),e(C4,PU),e(PU,Y4r),e(C4,K4r),e(Br,Z4r),M(w4,Br,null),b(f,Mje,_),b(f,Ec,_),e(Ec,A4),e(A4,Q6e),M(fx,Q6e,null),e(Ec,eEr),e(Ec,H6e),e(H6e,oEr),b(f,Eje,_),b(f,ir,_),M(mx,ir,null),e(ir,rEr),e(ir,Cc),e(Cc,tEr),e(Cc,BU),e(BU,aEr),e(Cc,nEr),e(Cc,IU),e(IU,sEr),e(Cc,lEr),e(ir,iEr),e(ir,gx),e(gx,dEr),e(gx,U6e),e(U6e,cEr),e(gx,fEr),e(ir,mEr),e(ir,jt),M(hx,jt,null),e(jt,gEr),e(jt,J6e),e(J6e,hEr),e(jt,pEr),e(jt,wc),e(wc,uEr),e(wc,Y6e),e(Y6e,_Er),e(wc,bEr),e(wc,qU),e(qU,vEr),e(wc,FEr),e(jt,TEr),M(y4,jt,null),e(ir,MEr),e(ir,Ir),M(px,Ir,null),e(Ir,EEr),e(Ir,K6e),e(K6e,CEr),e(Ir,wEr),e(Ir,hn),e(hn,AEr),e(hn,Z6e),e(Z6e,yEr),e(hn,LEr),e(hn,eTe),e(eTe,xEr),e(hn,$Er),e(hn,oTe),e(oTe,kEr),e(hn,SEr),e(Ir,REr),e(Ir,rTe),e(rTe,L4),e(L4,tTe),e(tTe,PEr),e(L4,BEr),e(L4,NU),e(NU,IEr),e(L4,qEr),e(Ir,NEr),M(x4,Ir,null),b(f,Cje,_),b(f,Ac,_),e(Ac,$4),e($4,aTe),M(ux,aTe,null),e(Ac,jEr),e(Ac,nTe),e(nTe,DEr),b(f,wje,_),b(f,dr,_),M(_x,dr,null),e(dr,GEr),e(dr,yc),e(yc,OEr),e(yc,jU),e(jU,VEr),e(yc,XEr),e(yc,DU),e(DU,zEr),e(yc,WEr),e(dr,QEr),e(dr,bx),e(bx,HEr),e(bx,sTe),e(sTe,UEr),e(bx,JEr),e(dr,YEr),e(dr,Dt),M(vx,Dt,null),e(Dt,KEr),e(Dt,lTe),e(lTe,ZEr),e(Dt,eCr),e(Dt,Lc),e(Lc,oCr),e(Lc,iTe),e(iTe,rCr),e(Lc,tCr),e(Lc,GU),e(GU,aCr),e(Lc,nCr),e(Dt,sCr),M(k4,Dt,null),e(dr,lCr),e(dr,qr),M(Fx,qr,null),e(qr,iCr),e(qr,dTe),e(dTe,dCr),e(qr,cCr),e(qr,pn),e(pn,fCr),e(pn,cTe),e(cTe,mCr),e(pn,gCr),e(pn,fTe),e(fTe,hCr),e(pn,pCr),e(pn,mTe),e(mTe,uCr),e(pn,_Cr),e(qr,bCr),e(qr,de),e(de,S4),e(S4,gTe),e(gTe,vCr),e(S4,FCr),e(S4,OU),e(OU,TCr),e(S4,MCr),e(de,ECr),e(de,R4),e(R4,hTe),e(hTe,CCr),e(R4,wCr),e(R4,VU),e(VU,ACr),e(R4,yCr),e(de,LCr),e(de,P4),e(P4,pTe),e(pTe,xCr),e(P4,$Cr),e(P4,XU),e(XU,kCr),e(P4,SCr),e(de,RCr),e(de,B4),e(B4,uTe),e(uTe,PCr),e(B4,BCr),e(B4,zU),e(zU,ICr),e(B4,qCr),e(de,NCr),e(de,I4),e(I4,_Te),e(_Te,jCr),e(I4,DCr),e(I4,WU),e(WU,GCr),e(I4,OCr),e(de,VCr),e(de,q4),e(q4,bTe),e(bTe,XCr),e(q4,zCr),e(q4,QU),e(QU,WCr),e(q4,QCr),e(de,HCr),e(de,N4),e(N4,vTe),e(vTe,UCr),e(N4,JCr),e(N4,HU),e(HU,YCr),e(N4,KCr),e(de,ZCr),e(de,j4),e(j4,FTe),e(FTe,e5r),e(j4,o5r),e(j4,UU),e(UU,r5r),e(j4,t5r),e(de,a5r),e(de,D4),e(D4,TTe),e(TTe,n5r),e(D4,s5r),e(D4,JU),e(JU,l5r),e(D4,i5r),e(de,d5r),e(de,G4),e(G4,MTe),e(MTe,c5r),e(G4,f5r),e(G4,YU),e(YU,m5r),e(G4,g5r),e(de,h5r),e(de,O4),e(O4,ETe),e(ETe,p5r),e(O4,u5r),e(O4,KU),e(KU,_5r),e(O4,b5r),e(de,v5r),e(de,V4),e(V4,CTe),e(CTe,F5r),e(V4,T5r),e(V4,ZU),e(ZU,M5r),e(V4,E5r),e(de,C5r),e(de,X4),e(X4,wTe),e(wTe,w5r),e(X4,A5r),e(X4,eJ),e(eJ,y5r),e(X4,L5r),e(de,x5r),e(de,z4),e(z4,ATe),e(ATe,$5r),e(z4,k5r),e(z4,oJ),e(oJ,S5r),e(z4,R5r),e(de,P5r),e(de,W4),e(W4,yTe),e(yTe,B5r),e(W4,I5r),e(W4,rJ),e(rJ,q5r),e(W4,N5r),e(de,j5r),e(de,Q4),e(Q4,LTe),e(LTe,D5r),e(Q4,G5r),e(Q4,tJ),e(tJ,O5r),e(Q4,V5r),e(de,X5r),e(de,H4),e(H4,xTe),e(xTe,z5r),e(H4,W5r),e(H4,aJ),e(aJ,Q5r),e(H4,H5r),e(de,U5r),e(de,U4),e(U4,$Te),e($Te,J5r),e(U4,Y5r),e(U4,nJ),e(nJ,K5r),e(U4,Z5r),e(de,e3r),e(de,J4),e(J4,kTe),e(kTe,o3r),e(J4,r3r),e(J4,sJ),e(sJ,t3r),e(J4,a3r),e(de,n3r),e(de,Y4),e(Y4,STe),e(STe,s3r),e(Y4,l3r),e(Y4,lJ),e(lJ,i3r),e(Y4,d3r),e(qr,c3r),M(K4,qr,null),b(f,Aje,_),b(f,xc,_),e(xc,Z4),e(Z4,RTe),M(Tx,RTe,null),e(xc,f3r),e(xc,PTe),e(PTe,m3r),b(f,yje,_),b(f,cr,_),M(Mx,cr,null),e(cr,g3r),e(cr,$c),e($c,h3r),e($c,iJ),e(iJ,p3r),e($c,u3r),e($c,dJ),e(dJ,_3r),e($c,b3r),e(cr,v3r),e(cr,Ex),e(Ex,F3r),e(Ex,BTe),e(BTe,T3r),e(Ex,M3r),e(cr,E3r),e(cr,Gt),M(Cx,Gt,null),e(Gt,C3r),e(Gt,ITe),e(ITe,w3r),e(Gt,A3r),e(Gt,kc),e(kc,y3r),e(kc,qTe),e(qTe,L3r),e(kc,x3r),e(kc,cJ),e(cJ,$3r),e(kc,k3r),e(Gt,S3r),M(eE,Gt,null),e(cr,R3r),e(cr,Nr),M(wx,Nr,null),e(Nr,P3r),e(Nr,NTe),e(NTe,B3r),e(Nr,I3r),e(Nr,un),e(un,q3r),e(un,jTe),e(jTe,N3r),e(un,j3r),e(un,DTe),e(DTe,D3r),e(un,G3r),e(un,GTe),e(GTe,O3r),e(un,V3r),e(Nr,X3r),e(Nr,ce),e(ce,oE),e(oE,OTe),e(OTe,z3r),e(oE,W3r),e(oE,fJ),e(fJ,Q3r),e(oE,H3r),e(ce,U3r),e(ce,rE),e(rE,VTe),e(VTe,J3r),e(rE,Y3r),e(rE,mJ),e(mJ,K3r),e(rE,Z3r),e(ce,ewr),e(ce,tE),e(tE,XTe),e(XTe,owr),e(tE,rwr),e(tE,gJ),e(gJ,twr),e(tE,awr),e(ce,nwr),e(ce,aE),e(aE,zTe),e(zTe,swr),e(aE,lwr),e(aE,hJ),e(hJ,iwr),e(aE,dwr),e(ce,cwr),e(ce,nE),e(nE,WTe),e(WTe,fwr),e(nE,mwr),e(nE,pJ),e(pJ,gwr),e(nE,hwr),e(ce,pwr),e(ce,sE),e(sE,QTe),e(QTe,uwr),e(sE,_wr),e(sE,uJ),e(uJ,bwr),e(sE,vwr),e(ce,Fwr),e(ce,lE),e(lE,HTe),e(HTe,Twr),e(lE,Mwr),e(lE,_J),e(_J,Ewr),e(lE,Cwr),e(ce,wwr),e(ce,iE),e(iE,UTe),e(UTe,Awr),e(iE,ywr),e(iE,bJ),e(bJ,Lwr),e(iE,xwr),e(ce,$wr),e(ce,dE),e(dE,JTe),e(JTe,kwr),e(dE,Swr),e(dE,vJ),e(vJ,Rwr),e(dE,Pwr),e(ce,Bwr),e(ce,cE),e(cE,YTe),e(YTe,Iwr),e(cE,qwr),e(cE,FJ),e(FJ,Nwr),e(cE,jwr),e(ce,Dwr),e(ce,fE),e(fE,KTe),e(KTe,Gwr),e(fE,Owr),e(fE,TJ),e(TJ,Vwr),e(fE,Xwr),e(ce,zwr),e(ce,mE),e(mE,ZTe),e(ZTe,Wwr),e(mE,Qwr),e(mE,MJ),e(MJ,Hwr),e(mE,Uwr),e(ce,Jwr),e(ce,gE),e(gE,e8e),e(e8e,Ywr),e(gE,Kwr),e(gE,EJ),e(EJ,Zwr),e(gE,e0r),e(ce,o0r),e(ce,hE),e(hE,o8e),e(o8e,r0r),e(hE,t0r),e(hE,CJ),e(CJ,a0r),e(hE,n0r),e(ce,s0r),e(ce,pE),e(pE,r8e),e(r8e,l0r),e(pE,i0r),e(pE,wJ),e(wJ,d0r),e(pE,c0r),e(ce,f0r),e(ce,uE),e(uE,t8e),e(t8e,m0r),e(uE,g0r),e(uE,AJ),e(AJ,h0r),e(uE,p0r),e(ce,u0r),e(ce,_E),e(_E,a8e),e(a8e,_0r),e(_E,b0r),e(_E,yJ),e(yJ,v0r),e(_E,F0r),e(ce,T0r),e(ce,bE),e(bE,n8e),e(n8e,M0r),e(bE,E0r),e(bE,LJ),e(LJ,C0r),e(bE,w0r),e(ce,A0r),e(ce,vE),e(vE,s8e),e(s8e,y0r),e(vE,L0r),e(vE,xJ),e(xJ,x0r),e(vE,$0r),e(ce,k0r),e(ce,FE),e(FE,l8e),e(l8e,S0r),e(FE,R0r),e(FE,$J),e($J,P0r),e(FE,B0r),e(Nr,I0r),M(TE,Nr,null),b(f,Lje,_),b(f,Sc,_),e(Sc,ME),e(ME,i8e),M(Ax,i8e,null),e(Sc,q0r),e(Sc,d8e),e(d8e,N0r),b(f,xje,_),b(f,fr,_),M(yx,fr,null),e(fr,j0r),e(fr,Rc),e(Rc,D0r),e(Rc,kJ),e(kJ,G0r),e(Rc,O0r),e(Rc,SJ),e(SJ,V0r),e(Rc,X0r),e(fr,z0r),e(fr,Lx),e(Lx,W0r),e(Lx,c8e),e(c8e,Q0r),e(Lx,H0r),e(fr,U0r),e(fr,Ot),M(xx,Ot,null),e(Ot,J0r),e(Ot,f8e),e(f8e,Y0r),e(Ot,K0r),e(Ot,Pc),e(Pc,Z0r),e(Pc,m8e),e(m8e,eAr),e(Pc,oAr),e(Pc,RJ),e(RJ,rAr),e(Pc,tAr),e(Ot,aAr),M(EE,Ot,null),e(fr,nAr),e(fr,jr),M($x,jr,null),e(jr,sAr),e(jr,g8e),e(g8e,lAr),e(jr,iAr),e(jr,_n),e(_n,dAr),e(_n,h8e),e(h8e,cAr),e(_n,fAr),e(_n,p8e),e(p8e,mAr),e(_n,gAr),e(_n,u8e),e(u8e,hAr),e(_n,pAr),e(jr,uAr),e(jr,_8e),e(_8e,CE),e(CE,b8e),e(b8e,_Ar),e(CE,bAr),e(CE,PJ),e(PJ,vAr),e(CE,FAr),e(jr,TAr),M(wE,jr,null),b(f,$je,_),b(f,Bc,_),e(Bc,AE),e(AE,v8e),M(kx,v8e,null),e(Bc,MAr),e(Bc,F8e),e(F8e,EAr),b(f,kje,_),b(f,mr,_),M(Sx,mr,null),e(mr,CAr),e(mr,Ic),e(Ic,wAr),e(Ic,BJ),e(BJ,AAr),e(Ic,yAr),e(Ic,IJ),e(IJ,LAr),e(Ic,xAr),e(mr,$Ar),e(mr,Rx),e(Rx,kAr),e(Rx,T8e),e(T8e,SAr),e(Rx,RAr),e(mr,PAr),e(mr,Vt),M(Px,Vt,null),e(Vt,BAr),e(Vt,M8e),e(M8e,IAr),e(Vt,qAr),e(Vt,qc),e(qc,NAr),e(qc,E8e),e(E8e,jAr),e(qc,DAr),e(qc,qJ),e(qJ,GAr),e(qc,OAr),e(Vt,VAr),M(yE,Vt,null),e(mr,XAr),e(mr,Dr),M(Bx,Dr,null),e(Dr,zAr),e(Dr,C8e),e(C8e,WAr),e(Dr,QAr),e(Dr,bn),e(bn,HAr),e(bn,w8e),e(w8e,UAr),e(bn,JAr),e(bn,A8e),e(A8e,YAr),e(bn,KAr),e(bn,y8e),e(y8e,ZAr),e(bn,eyr),e(Dr,oyr),e(Dr,L8e),e(L8e,LE),e(LE,x8e),e(x8e,ryr),e(LE,tyr),e(LE,NJ),e(NJ,ayr),e(LE,nyr),e(Dr,syr),M(xE,Dr,null),b(f,Sje,_),b(f,Nc,_),e(Nc,$E),e($E,$8e),M(Ix,$8e,null),e(Nc,lyr),e(Nc,k8e),e(k8e,iyr),b(f,Rje,_),b(f,gr,_),M(qx,gr,null),e(gr,dyr),e(gr,jc),e(jc,cyr),e(jc,jJ),e(jJ,fyr),e(jc,myr),e(jc,DJ),e(DJ,gyr),e(jc,hyr),e(gr,pyr),e(gr,Nx),e(Nx,uyr),e(Nx,S8e),e(S8e,_yr),e(Nx,byr),e(gr,vyr),e(gr,Xt),M(jx,Xt,null),e(Xt,Fyr),e(Xt,R8e),e(R8e,Tyr),e(Xt,Myr),e(Xt,Dc),e(Dc,Eyr),e(Dc,P8e),e(P8e,Cyr),e(Dc,wyr),e(Dc,GJ),e(GJ,Ayr),e(Dc,yyr),e(Xt,Lyr),M(kE,Xt,null),e(gr,xyr),e(gr,Gr),M(Dx,Gr,null),e(Gr,$yr),e(Gr,B8e),e(B8e,kyr),e(Gr,Syr),e(Gr,vn),e(vn,Ryr),e(vn,I8e),e(I8e,Pyr),e(vn,Byr),e(vn,q8e),e(q8e,Iyr),e(vn,qyr),e(vn,N8e),e(N8e,Nyr),e(vn,jyr),e(Gr,Dyr),e(Gr,te),e(te,SE),e(SE,j8e),e(j8e,Gyr),e(SE,Oyr),e(SE,OJ),e(OJ,Vyr),e(SE,Xyr),e(te,zyr),e(te,RE),e(RE,D8e),e(D8e,Wyr),e(RE,Qyr),e(RE,VJ),e(VJ,Hyr),e(RE,Uyr),e(te,Jyr),e(te,PE),e(PE,G8e),e(G8e,Yyr),e(PE,Kyr),e(PE,XJ),e(XJ,Zyr),e(PE,eLr),e(te,oLr),e(te,BE),e(BE,O8e),e(O8e,rLr),e(BE,tLr),e(BE,zJ),e(zJ,aLr),e(BE,nLr),e(te,sLr),e(te,IE),e(IE,V8e),e(V8e,lLr),e(IE,iLr),e(IE,WJ),e(WJ,dLr),e(IE,cLr),e(te,fLr),e(te,qE),e(qE,X8e),e(X8e,mLr),e(qE,gLr),e(qE,QJ),e(QJ,hLr),e(qE,pLr),e(te,uLr),e(te,NE),e(NE,z8e),e(z8e,_Lr),e(NE,bLr),e(NE,HJ),e(HJ,vLr),e(NE,FLr),e(te,TLr),e(te,jE),e(jE,W8e),e(W8e,MLr),e(jE,ELr),e(jE,UJ),e(UJ,CLr),e(jE,wLr),e(te,ALr),e(te,DE),e(DE,Q8e),e(Q8e,yLr),e(DE,LLr),e(DE,JJ),e(JJ,xLr),e(DE,$Lr),e(te,kLr),e(te,GE),e(GE,H8e),e(H8e,SLr),e(GE,RLr),e(GE,YJ),e(YJ,PLr),e(GE,BLr),e(te,ILr),e(te,OE),e(OE,U8e),e(U8e,qLr),e(OE,NLr),e(OE,KJ),e(KJ,jLr),e(OE,DLr),e(te,GLr),e(te,VE),e(VE,J8e),e(J8e,OLr),e(VE,VLr),e(VE,ZJ),e(ZJ,XLr),e(VE,zLr),e(te,WLr),e(te,XE),e(XE,Y8e),e(Y8e,QLr),e(XE,HLr),e(XE,eY),e(eY,ULr),e(XE,JLr),e(te,YLr),e(te,zE),e(zE,K8e),e(K8e,KLr),e(zE,ZLr),e(zE,oY),e(oY,exr),e(zE,oxr),e(te,rxr),e(te,WE),e(WE,Z8e),e(Z8e,txr),e(WE,axr),e(WE,rY),e(rY,nxr),e(WE,sxr),e(te,lxr),e(te,QE),e(QE,e7e),e(e7e,ixr),e(QE,dxr),e(QE,tY),e(tY,cxr),e(QE,fxr),e(te,mxr),e(te,HE),e(HE,o7e),e(o7e,gxr),e(HE,hxr),e(HE,aY),e(aY,pxr),e(HE,uxr),e(te,_xr),e(te,UE),e(UE,r7e),e(r7e,bxr),e(UE,vxr),e(UE,nY),e(nY,Fxr),e(UE,Txr),e(te,Mxr),e(te,JE),e(JE,t7e),e(t7e,Exr),e(JE,Cxr),e(JE,sY),e(sY,wxr),e(JE,Axr),e(te,yxr),e(te,YE),e(YE,a7e),e(a7e,Lxr),e(YE,xxr),e(YE,lY),e(lY,$xr),e(YE,kxr),e(te,Sxr),e(te,KE),e(KE,n7e),e(n7e,Rxr),e(KE,Pxr),e(KE,iY),e(iY,Bxr),e(KE,Ixr),e(te,qxr),e(te,ZE),e(ZE,s7e),e(s7e,Nxr),e(ZE,jxr),e(ZE,dY),e(dY,Dxr),e(ZE,Gxr),e(te,Oxr),e(te,eC),e(eC,l7e),e(l7e,Vxr),e(eC,Xxr),e(eC,cY),e(cY,zxr),e(eC,Wxr),e(te,Qxr),e(te,oC),e(oC,i7e),e(i7e,Hxr),e(oC,Uxr),e(oC,fY),e(fY,Jxr),e(oC,Yxr),e(te,Kxr),e(te,rC),e(rC,d7e),e(d7e,Zxr),e(rC,e9r),e(rC,mY),e(mY,o9r),e(rC,r9r),e(Gr,t9r),M(tC,Gr,null),b(f,Pje,_),b(f,Gc,_),e(Gc,aC),e(aC,c7e),M(Gx,c7e,null),e(Gc,a9r),e(Gc,f7e),e(f7e,n9r),b(f,Bje,_),b(f,hr,_),M(Ox,hr,null),e(hr,s9r),e(hr,Oc),e(Oc,l9r),e(Oc,gY),e(gY,i9r),e(Oc,d9r),e(Oc,hY),e(hY,c9r),e(Oc,f9r),e(hr,m9r),e(hr,Vx),e(Vx,g9r),e(Vx,m7e),e(m7e,h9r),e(Vx,p9r),e(hr,u9r),e(hr,zt),M(Xx,zt,null),e(zt,_9r),e(zt,g7e),e(g7e,b9r),e(zt,v9r),e(zt,Vc),e(Vc,F9r),e(Vc,h7e),e(h7e,T9r),e(Vc,M9r),e(Vc,pY),e(pY,E9r),e(Vc,C9r),e(zt,w9r),M(nC,zt,null),e(hr,A9r),e(hr,Or),M(zx,Or,null),e(Or,y9r),e(Or,p7e),e(p7e,L9r),e(Or,x9r),e(Or,Fn),e(Fn,$9r),e(Fn,u7e),e(u7e,k9r),e(Fn,S9r),e(Fn,_7e),e(_7e,R9r),e(Fn,P9r),e(Fn,b7e),e(b7e,B9r),e(Fn,I9r),e(Or,q9r),e(Or,Re),e(Re,sC),e(sC,v7e),e(v7e,N9r),e(sC,j9r),e(sC,uY),e(uY,D9r),e(sC,G9r),e(Re,O9r),e(Re,lC),e(lC,F7e),e(F7e,V9r),e(lC,X9r),e(lC,_Y),e(_Y,z9r),e(lC,W9r),e(Re,Q9r),e(Re,iC),e(iC,T7e),e(T7e,H9r),e(iC,U9r),e(iC,bY),e(bY,J9r),e(iC,Y9r),e(Re,K9r),e(Re,dC),e(dC,M7e),e(M7e,Z9r),e(dC,e$r),e(dC,vY),e(vY,o$r),e(dC,r$r),e(Re,t$r),e(Re,cC),e(cC,E7e),e(E7e,a$r),e(cC,n$r),e(cC,FY),e(FY,s$r),e(cC,l$r),e(Re,i$r),e(Re,fC),e(fC,C7e),e(C7e,d$r),e(fC,c$r),e(fC,TY),e(TY,f$r),e(fC,m$r),e(Re,g$r),e(Re,mC),e(mC,w7e),e(w7e,h$r),e(mC,p$r),e(mC,MY),e(MY,u$r),e(mC,_$r),e(Re,b$r),e(Re,gC),e(gC,A7e),e(A7e,v$r),e(gC,F$r),e(gC,EY),e(EY,T$r),e(gC,M$r),e(Re,E$r),e(Re,hC),e(hC,y7e),e(y7e,C$r),e(hC,w$r),e(hC,CY),e(CY,A$r),e(hC,y$r),e(Or,L$r),M(pC,Or,null),b(f,Ije,_),b(f,Xc,_),e(Xc,uC),e(uC,L7e),M(Wx,L7e,null),e(Xc,x$r),e(Xc,x7e),e(x7e,$$r),b(f,qje,_),b(f,pr,_),M(Qx,pr,null),e(pr,k$r),e(pr,zc),e(zc,S$r),e(zc,wY),e(wY,R$r),e(zc,P$r),e(zc,AY),e(AY,B$r),e(zc,I$r),e(pr,q$r),e(pr,Hx),e(Hx,N$r),e(Hx,$7e),e($7e,j$r),e(Hx,D$r),e(pr,G$r),e(pr,Wt),M(Ux,Wt,null),e(Wt,O$r),e(Wt,k7e),e(k7e,V$r),e(Wt,X$r),e(Wt,Wc),e(Wc,z$r),e(Wc,S7e),e(S7e,W$r),e(Wc,Q$r),e(Wc,yY),e(yY,H$r),e(Wc,U$r),e(Wt,J$r),M(_C,Wt,null),e(pr,Y$r),e(pr,Vr),M(Jx,Vr,null),e(Vr,K$r),e(Vr,R7e),e(R7e,Z$r),e(Vr,ekr),e(Vr,Tn),e(Tn,okr),e(Tn,P7e),e(P7e,rkr),e(Tn,tkr),e(Tn,B7e),e(B7e,akr),e(Tn,nkr),e(Tn,I7e),e(I7e,skr),e(Tn,lkr),e(Vr,ikr),e(Vr,Ee),e(Ee,bC),e(bC,q7e),e(q7e,dkr),e(bC,ckr),e(bC,LY),e(LY,fkr),e(bC,mkr),e(Ee,gkr),e(Ee,vC),e(vC,N7e),e(N7e,hkr),e(vC,pkr),e(vC,xY),e(xY,ukr),e(vC,_kr),e(Ee,bkr),e(Ee,FC),e(FC,j7e),e(j7e,vkr),e(FC,Fkr),e(FC,$Y),e($Y,Tkr),e(FC,Mkr),e(Ee,Ekr),e(Ee,TC),e(TC,D7e),e(D7e,Ckr),e(TC,wkr),e(TC,kY),e(kY,Akr),e(TC,ykr),e(Ee,Lkr),e(Ee,MC),e(MC,G7e),e(G7e,xkr),e(MC,$kr),e(MC,SY),e(SY,kkr),e(MC,Skr),e(Ee,Rkr),e(Ee,EC),e(EC,O7e),e(O7e,Pkr),e(EC,Bkr),e(EC,RY),e(RY,Ikr),e(EC,qkr),e(Ee,Nkr),e(Ee,CC),e(CC,V7e),e(V7e,jkr),e(CC,Dkr),e(CC,PY),e(PY,Gkr),e(CC,Okr),e(Ee,Vkr),e(Ee,wC),e(wC,X7e),e(X7e,Xkr),e(wC,zkr),e(wC,BY),e(BY,Wkr),e(wC,Qkr),e(Ee,Hkr),e(Ee,AC),e(AC,z7e),e(z7e,Ukr),e(AC,Jkr),e(AC,IY),e(IY,Ykr),e(AC,Kkr),e(Ee,Zkr),e(Ee,yC),e(yC,W7e),e(W7e,eSr),e(yC,oSr),e(yC,qY),e(qY,rSr),e(yC,tSr),e(Ee,aSr),e(Ee,LC),e(LC,Q7e),e(Q7e,nSr),e(LC,sSr),e(LC,NY),e(NY,lSr),e(LC,iSr),e(Ee,dSr),e(Ee,xC),e(xC,H7e),e(H7e,cSr),e(xC,fSr),e(xC,jY),e(jY,mSr),e(xC,gSr),e(Vr,hSr),M($C,Vr,null),b(f,Nje,_),b(f,Qc,_),e(Qc,kC),e(kC,U7e),M(Yx,U7e,null),e(Qc,pSr),e(Qc,J7e),e(J7e,uSr),b(f,jje,_),b(f,ur,_),M(Kx,ur,null),e(ur,_Sr),e(ur,Hc),e(Hc,bSr),e(Hc,DY),e(DY,vSr),e(Hc,FSr),e(Hc,GY),e(GY,TSr),e(Hc,MSr),e(ur,ESr),e(ur,Zx),e(Zx,CSr),e(Zx,Y7e),e(Y7e,wSr),e(Zx,ASr),e(ur,ySr),e(ur,Qt),M(e9,Qt,null),e(Qt,LSr),e(Qt,K7e),e(K7e,xSr),e(Qt,$Sr),e(Qt,Uc),e(Uc,kSr),e(Uc,Z7e),e(Z7e,SSr),e(Uc,RSr),e(Uc,OY),e(OY,PSr),e(Uc,BSr),e(Qt,ISr),M(SC,Qt,null),e(ur,qSr),e(ur,Xr),M(o9,Xr,null),e(Xr,NSr),e(Xr,eMe),e(eMe,jSr),e(Xr,DSr),e(Xr,Mn),e(Mn,GSr),e(Mn,oMe),e(oMe,OSr),e(Mn,VSr),e(Mn,rMe),e(rMe,XSr),e(Mn,zSr),e(Mn,tMe),e(tMe,WSr),e(Mn,QSr),e(Xr,HSr),e(Xr,Le),e(Le,RC),e(RC,aMe),e(aMe,USr),e(RC,JSr),e(RC,VY),e(VY,YSr),e(RC,KSr),e(Le,ZSr),e(Le,PC),e(PC,nMe),e(nMe,eRr),e(PC,oRr),e(PC,XY),e(XY,rRr),e(PC,tRr),e(Le,aRr),e(Le,BC),e(BC,sMe),e(sMe,nRr),e(BC,sRr),e(BC,zY),e(zY,lRr),e(BC,iRr),e(Le,dRr),e(Le,IC),e(IC,lMe),e(lMe,cRr),e(IC,fRr),e(IC,WY),e(WY,mRr),e(IC,gRr),e(Le,hRr),e(Le,qC),e(qC,iMe),e(iMe,pRr),e(qC,uRr),e(qC,QY),e(QY,_Rr),e(qC,bRr),e(Le,vRr),e(Le,NC),e(NC,dMe),e(dMe,FRr),e(NC,TRr),e(NC,HY),e(HY,MRr),e(NC,ERr),e(Le,CRr),e(Le,jC),e(jC,cMe),e(cMe,wRr),e(jC,ARr),e(jC,UY),e(UY,yRr),e(jC,LRr),e(Le,xRr),e(Le,DC),e(DC,fMe),e(fMe,$Rr),e(DC,kRr),e(DC,JY),e(JY,SRr),e(DC,RRr),e(Le,PRr),e(Le,GC),e(GC,mMe),e(mMe,BRr),e(GC,IRr),e(GC,YY),e(YY,qRr),e(GC,NRr),e(Le,jRr),e(Le,OC),e(OC,gMe),e(gMe,DRr),e(OC,GRr),e(OC,KY),e(KY,ORr),e(OC,VRr),e(Xr,XRr),M(VC,Xr,null),b(f,Dje,_),b(f,Jc,_),e(Jc,XC),e(XC,hMe),M(r9,hMe,null),e(Jc,zRr),e(Jc,pMe),e(pMe,WRr),b(f,Gje,_),b(f,_r,_),M(t9,_r,null),e(_r,QRr),e(_r,Yc),e(Yc,HRr),e(Yc,ZY),e(ZY,URr),e(Yc,JRr),e(Yc,eK),e(eK,YRr),e(Yc,KRr),e(_r,ZRr),e(_r,a9),e(a9,ePr),e(a9,uMe),e(uMe,oPr),e(a9,rPr),e(_r,tPr),e(_r,Ht),M(n9,Ht,null),e(Ht,aPr),e(Ht,_Me),e(_Me,nPr),e(Ht,sPr),e(Ht,Kc),e(Kc,lPr),e(Kc,bMe),e(bMe,iPr),e(Kc,dPr),e(Kc,oK),e(oK,cPr),e(Kc,fPr),e(Ht,mPr),M(zC,Ht,null),e(_r,gPr),e(_r,zr),M(s9,zr,null),e(zr,hPr),e(zr,vMe),e(vMe,pPr),e(zr,uPr),e(zr,En),e(En,_Pr),e(En,FMe),e(FMe,bPr),e(En,vPr),e(En,TMe),e(TMe,FPr),e(En,TPr),e(En,MMe),e(MMe,MPr),e(En,EPr),e(zr,CPr),e(zr,Pe),e(Pe,WC),e(WC,EMe),e(EMe,wPr),e(WC,APr),e(WC,rK),e(rK,yPr),e(WC,LPr),e(Pe,xPr),e(Pe,QC),e(QC,CMe),e(CMe,$Pr),e(QC,kPr),e(QC,tK),e(tK,SPr),e(QC,RPr),e(Pe,PPr),e(Pe,HC),e(HC,wMe),e(wMe,BPr),e(HC,IPr),e(HC,aK),e(aK,qPr),e(HC,NPr),e(Pe,jPr),e(Pe,UC),e(UC,AMe),e(AMe,DPr),e(UC,GPr),e(UC,nK),e(nK,OPr),e(UC,VPr),e(Pe,XPr),e(Pe,JC),e(JC,yMe),e(yMe,zPr),e(JC,WPr),e(JC,sK),e(sK,QPr),e(JC,HPr),e(Pe,UPr),e(Pe,YC),e(YC,LMe),e(LMe,JPr),e(YC,YPr),e(YC,lK),e(lK,KPr),e(YC,ZPr),e(Pe,eBr),e(Pe,KC),e(KC,xMe),e(xMe,oBr),e(KC,rBr),e(KC,iK),e(iK,tBr),e(KC,aBr),e(Pe,nBr),e(Pe,ZC),e(ZC,$Me),e($Me,sBr),e(ZC,lBr),e(ZC,dK),e(dK,iBr),e(ZC,dBr),e(Pe,cBr),e(Pe,e5),e(e5,kMe),e(kMe,fBr),e(e5,mBr),e(e5,cK),e(cK,gBr),e(e5,hBr),e(zr,pBr),M(o5,zr,null),b(f,Oje,_),b(f,Zc,_),e(Zc,r5),e(r5,SMe),M(l9,SMe,null),e(Zc,uBr),e(Zc,RMe),e(RMe,_Br),b(f,Vje,_),b(f,br,_),M(i9,br,null),e(br,bBr),e(br,ef),e(ef,vBr),e(ef,fK),e(fK,FBr),e(ef,TBr),e(ef,mK),e(mK,MBr),e(ef,EBr),e(br,CBr),e(br,d9),e(d9,wBr),e(d9,PMe),e(PMe,ABr),e(d9,yBr),e(br,LBr),e(br,Ut),M(c9,Ut,null),e(Ut,xBr),e(Ut,BMe),e(BMe,$Br),e(Ut,kBr),e(Ut,of),e(of,SBr),e(of,IMe),e(IMe,RBr),e(of,PBr),e(of,gK),e(gK,BBr),e(of,IBr),e(Ut,qBr),M(t5,Ut,null),e(br,NBr),e(br,Wr),M(f9,Wr,null),e(Wr,jBr),e(Wr,qMe),e(qMe,DBr),e(Wr,GBr),e(Wr,Cn),e(Cn,OBr),e(Cn,NMe),e(NMe,VBr),e(Cn,XBr),e(Cn,jMe),e(jMe,zBr),e(Cn,WBr),e(Cn,DMe),e(DMe,QBr),e(Cn,HBr),e(Wr,UBr),e(Wr,xe),e(xe,a5),e(a5,GMe),e(GMe,JBr),e(a5,YBr),e(a5,hK),e(hK,KBr),e(a5,ZBr),e(xe,eIr),e(xe,n5),e(n5,OMe),e(OMe,oIr),e(n5,rIr),e(n5,pK),e(pK,tIr),e(n5,aIr),e(xe,nIr),e(xe,s5),e(s5,VMe),e(VMe,sIr),e(s5,lIr),e(s5,uK),e(uK,iIr),e(s5,dIr),e(xe,cIr),e(xe,l5),e(l5,XMe),e(XMe,fIr),e(l5,mIr),e(l5,_K),e(_K,gIr),e(l5,hIr),e(xe,pIr),e(xe,i5),e(i5,zMe),e(zMe,uIr),e(i5,_Ir),e(i5,bK),e(bK,bIr),e(i5,vIr),e(xe,FIr),e(xe,d5),e(d5,WMe),e(WMe,TIr),e(d5,MIr),e(d5,vK),e(vK,EIr),e(d5,CIr),e(xe,wIr),e(xe,c5),e(c5,QMe),e(QMe,AIr),e(c5,yIr),e(c5,FK),e(FK,LIr),e(c5,xIr),e(xe,$Ir),e(xe,f5),e(f5,HMe),e(HMe,kIr),e(f5,SIr),e(f5,TK),e(TK,RIr),e(f5,PIr),e(xe,BIr),e(xe,m5),e(m5,UMe),e(UMe,IIr),e(m5,qIr),e(m5,MK),e(MK,NIr),e(m5,jIr),e(xe,DIr),e(xe,g5),e(g5,JMe),e(JMe,GIr),e(g5,OIr),e(g5,EK),e(EK,VIr),e(g5,XIr),e(Wr,zIr),M(h5,Wr,null),b(f,Xje,_),b(f,rf,_),e(rf,p5),e(p5,YMe),M(m9,YMe,null),e(rf,WIr),e(rf,KMe),e(KMe,QIr),b(f,zje,_),b(f,vr,_),M(g9,vr,null),e(vr,HIr),e(vr,tf),e(tf,UIr),e(tf,CK),e(CK,JIr),e(tf,YIr),e(tf,wK),e(wK,KIr),e(tf,ZIr),e(vr,eqr),e(vr,h9),e(h9,oqr),e(h9,ZMe),e(ZMe,rqr),e(h9,tqr),e(vr,aqr),e(vr,Jt),M(p9,Jt,null),e(Jt,nqr),e(Jt,e4e),e(e4e,sqr),e(Jt,lqr),e(Jt,af),e(af,iqr),e(af,o4e),e(o4e,dqr),e(af,cqr),e(af,AK),e(AK,fqr),e(af,mqr),e(Jt,gqr),M(u5,Jt,null),e(vr,hqr),e(vr,Qr),M(u9,Qr,null),e(Qr,pqr),e(Qr,r4e),e(r4e,uqr),e(Qr,_qr),e(Qr,wn),e(wn,bqr),e(wn,t4e),e(t4e,vqr),e(wn,Fqr),e(wn,a4e),e(a4e,Tqr),e(wn,Mqr),e(wn,n4e),e(n4e,Eqr),e(wn,Cqr),e(Qr,wqr),e(Qr,$e),e($e,_5),e(_5,s4e),e(s4e,Aqr),e(_5,yqr),e(_5,yK),e(yK,Lqr),e(_5,xqr),e($e,$qr),e($e,b5),e(b5,l4e),e(l4e,kqr),e(b5,Sqr),e(b5,LK),e(LK,Rqr),e(b5,Pqr),e($e,Bqr),e($e,v5),e(v5,i4e),e(i4e,Iqr),e(v5,qqr),e(v5,xK),e(xK,Nqr),e(v5,jqr),e($e,Dqr),e($e,F5),e(F5,d4e),e(d4e,Gqr),e(F5,Oqr),e(F5,$K),e($K,Vqr),e(F5,Xqr),e($e,zqr),e($e,T5),e(T5,c4e),e(c4e,Wqr),e(T5,Qqr),e(T5,kK),e(kK,Hqr),e(T5,Uqr),e($e,Jqr),e($e,M5),e(M5,f4e),e(f4e,Yqr),e(M5,Kqr),e(M5,SK),e(SK,Zqr),e(M5,eNr),e($e,oNr),e($e,E5),e(E5,m4e),e(m4e,rNr),e(E5,tNr),e(E5,RK),e(RK,aNr),e(E5,nNr),e($e,sNr),e($e,C5),e(C5,g4e),e(g4e,lNr),e(C5,iNr),e(C5,PK),e(PK,dNr),e(C5,cNr),e($e,fNr),e($e,w5),e(w5,h4e),e(h4e,mNr),e(w5,gNr),e(w5,BK),e(BK,hNr),e(w5,pNr),e($e,uNr),e($e,A5),e(A5,p4e),e(p4e,_Nr),e(A5,bNr),e(A5,IK),e(IK,vNr),e(A5,FNr),e(Qr,TNr),M(y5,Qr,null),b(f,Wje,_),b(f,nf,_),e(nf,L5),e(L5,u4e),M(_9,u4e,null),e(nf,MNr),e(nf,_4e),e(_4e,ENr),b(f,Qje,_),b(f,Fr,_),M(b9,Fr,null),e(Fr,CNr),e(Fr,sf),e(sf,wNr),e(sf,qK),e(qK,ANr),e(sf,yNr),e(sf,NK),e(NK,LNr),e(sf,xNr),e(Fr,$Nr),e(Fr,v9),e(v9,kNr),e(v9,b4e),e(b4e,SNr),e(v9,RNr),e(Fr,PNr),e(Fr,Yt),M(F9,Yt,null),e(Yt,BNr),e(Yt,v4e),e(v4e,INr),e(Yt,qNr),e(Yt,lf),e(lf,NNr),e(lf,F4e),e(F4e,jNr),e(lf,DNr),e(lf,jK),e(jK,GNr),e(lf,ONr),e(Yt,VNr),M(x5,Yt,null),e(Fr,XNr),e(Fr,Hr),M(T9,Hr,null),e(Hr,zNr),e(Hr,T4e),e(T4e,WNr),e(Hr,QNr),e(Hr,An),e(An,HNr),e(An,M4e),e(M4e,UNr),e(An,JNr),e(An,E4e),e(E4e,YNr),e(An,KNr),e(An,C4e),e(C4e,ZNr),e(An,ejr),e(Hr,ojr),e(Hr,De),e(De,$5),e($5,w4e),e(w4e,rjr),e($5,tjr),e($5,DK),e(DK,ajr),e($5,njr),e(De,sjr),e(De,k5),e(k5,A4e),e(A4e,ljr),e(k5,ijr),e(k5,GK),e(GK,djr),e(k5,cjr),e(De,fjr),e(De,S5),e(S5,y4e),e(y4e,mjr),e(S5,gjr),e(S5,OK),e(OK,hjr),e(S5,pjr),e(De,ujr),e(De,R5),e(R5,L4e),e(L4e,_jr),e(R5,bjr),e(R5,VK),e(VK,vjr),e(R5,Fjr),e(De,Tjr),e(De,P5),e(P5,x4e),e(x4e,Mjr),e(P5,Ejr),e(P5,XK),e(XK,Cjr),e(P5,wjr),e(De,Ajr),e(De,B5),e(B5,$4e),e($4e,yjr),e(B5,Ljr),e(B5,zK),e(zK,xjr),e(B5,$jr),e(De,kjr),e(De,I5),e(I5,k4e),e(k4e,Sjr),e(I5,Rjr),e(I5,WK),e(WK,Pjr),e(I5,Bjr),e(De,Ijr),e(De,q5),e(q5,S4e),e(S4e,qjr),e(q5,Njr),e(q5,QK),e(QK,jjr),e(q5,Djr),e(Hr,Gjr),M(N5,Hr,null),b(f,Hje,_),b(f,df,_),e(df,j5),e(j5,R4e),M(M9,R4e,null),e(df,Ojr),e(df,P4e),e(P4e,Vjr),b(f,Uje,_),b(f,Tr,_),M(E9,Tr,null),e(Tr,Xjr),e(Tr,cf),e(cf,zjr),e(cf,HK),e(HK,Wjr),e(cf,Qjr),e(cf,UK),e(UK,Hjr),e(cf,Ujr),e(Tr,Jjr),e(Tr,C9),e(C9,Yjr),e(C9,B4e),e(B4e,Kjr),e(C9,Zjr),e(Tr,eDr),e(Tr,Kt),M(w9,Kt,null),e(Kt,oDr),e(Kt,I4e),e(I4e,rDr),e(Kt,tDr),e(Kt,ff),e(ff,aDr),e(ff,q4e),e(q4e,nDr),e(ff,sDr),e(ff,JK),e(JK,lDr),e(ff,iDr),e(Kt,dDr),M(D5,Kt,null),e(Tr,cDr),e(Tr,Ur),M(A9,Ur,null),e(Ur,fDr),e(Ur,N4e),e(N4e,mDr),e(Ur,gDr),e(Ur,yn),e(yn,hDr),e(yn,j4e),e(j4e,pDr),e(yn,uDr),e(yn,D4e),e(D4e,_Dr),e(yn,bDr),e(yn,G4e),e(G4e,vDr),e(yn,FDr),e(Ur,TDr),e(Ur,Ge),e(Ge,G5),e(G5,O4e),e(O4e,MDr),e(G5,EDr),e(G5,YK),e(YK,CDr),e(G5,wDr),e(Ge,ADr),e(Ge,O5),e(O5,V4e),e(V4e,yDr),e(O5,LDr),e(O5,KK),e(KK,xDr),e(O5,$Dr),e(Ge,kDr),e(Ge,V5),e(V5,X4e),e(X4e,SDr),e(V5,RDr),e(V5,ZK),e(ZK,PDr),e(V5,BDr),e(Ge,IDr),e(Ge,X5),e(X5,z4e),e(z4e,qDr),e(X5,NDr),e(X5,eZ),e(eZ,jDr),e(X5,DDr),e(Ge,GDr),e(Ge,z5),e(z5,W4e),e(W4e,ODr),e(z5,VDr),e(z5,oZ),e(oZ,XDr),e(z5,zDr),e(Ge,WDr),e(Ge,W5),e(W5,Q4e),e(Q4e,QDr),e(W5,HDr),e(W5,rZ),e(rZ,UDr),e(W5,JDr),e(Ge,YDr),e(Ge,Q5),e(Q5,H4e),e(H4e,KDr),e(Q5,ZDr),e(Q5,tZ),e(tZ,eGr),e(Q5,oGr),e(Ge,rGr),e(Ge,H5),e(H5,U4e),e(U4e,tGr),e(H5,aGr),e(H5,aZ),e(aZ,nGr),e(H5,sGr),e(Ur,lGr),M(U5,Ur,null),b(f,Jje,_),b(f,mf,_),e(mf,J5),e(J5,J4e),M(y9,J4e,null),e(mf,iGr),e(mf,Y4e),e(Y4e,dGr),b(f,Yje,_),b(f,Mr,_),M(L9,Mr,null),e(Mr,cGr),e(Mr,gf),e(gf,fGr),e(gf,nZ),e(nZ,mGr),e(gf,gGr),e(gf,sZ),e(sZ,hGr),e(gf,pGr),e(Mr,uGr),e(Mr,x9),e(x9,_Gr),e(x9,K4e),e(K4e,bGr),e(x9,vGr),e(Mr,FGr),e(Mr,Zt),M($9,Zt,null),e(Zt,TGr),e(Zt,Z4e),e(Z4e,MGr),e(Zt,EGr),e(Zt,hf),e(hf,CGr),e(hf,eEe),e(eEe,wGr),e(hf,AGr),e(hf,lZ),e(lZ,yGr),e(hf,LGr),e(Zt,xGr),M(Y5,Zt,null),e(Mr,$Gr),e(Mr,Jr),M(k9,Jr,null),e(Jr,kGr),e(Jr,oEe),e(oEe,SGr),e(Jr,RGr),e(Jr,Ln),e(Ln,PGr),e(Ln,rEe),e(rEe,BGr),e(Ln,IGr),e(Ln,tEe),e(tEe,qGr),e(Ln,NGr),e(Ln,aEe),e(aEe,jGr),e(Ln,DGr),e(Jr,GGr),e(Jr,nEe),e(nEe,K5),e(K5,sEe),e(sEe,OGr),e(K5,VGr),e(K5,iZ),e(iZ,XGr),e(K5,zGr),e(Jr,WGr),M(Z5,Jr,null),b(f,Kje,_),b(f,pf,_),e(pf,e3),e(e3,lEe),M(S9,lEe,null),e(pf,QGr),e(pf,iEe),e(iEe,HGr),b(f,Zje,_),b(f,Er,_),M(R9,Er,null),e(Er,UGr),e(Er,uf),e(uf,JGr),e(uf,dZ),e(dZ,YGr),e(uf,KGr),e(uf,cZ),e(cZ,ZGr),e(uf,eOr),e(Er,oOr),e(Er,P9),e(P9,rOr),e(P9,dEe),e(dEe,tOr),e(P9,aOr),e(Er,nOr),e(Er,ea),M(B9,ea,null),e(ea,sOr),e(ea,cEe),e(cEe,lOr),e(ea,iOr),e(ea,_f),e(_f,dOr),e(_f,fEe),e(fEe,cOr),e(_f,fOr),e(_f,fZ),e(fZ,mOr),e(_f,gOr),e(ea,hOr),M(o3,ea,null),e(Er,pOr),e(Er,Yr),M(I9,Yr,null),e(Yr,uOr),e(Yr,mEe),e(mEe,_Or),e(Yr,bOr),e(Yr,xn),e(xn,vOr),e(xn,gEe),e(gEe,FOr),e(xn,TOr),e(xn,hEe),e(hEe,MOr),e(xn,EOr),e(xn,pEe),e(pEe,COr),e(xn,wOr),e(Yr,AOr),e(Yr,q9),e(q9,r3),e(r3,uEe),e(uEe,yOr),e(r3,LOr),e(r3,mZ),e(mZ,xOr),e(r3,$Or),e(q9,kOr),e(q9,t3),e(t3,_Ee),e(_Ee,SOr),e(t3,ROr),e(t3,gZ),e(gZ,POr),e(t3,BOr),e(Yr,IOr),M(a3,Yr,null),b(f,eDe,_),b(f,bf,_),e(bf,n3),e(n3,bEe),M(N9,bEe,null),e(bf,qOr),e(bf,vEe),e(vEe,NOr),b(f,oDe,_),b(f,Cr,_),M(j9,Cr,null),e(Cr,jOr),e(Cr,vf),e(vf,DOr),e(vf,hZ),e(hZ,GOr),e(vf,OOr),e(vf,pZ),e(pZ,VOr),e(vf,XOr),e(Cr,zOr),e(Cr,D9),e(D9,WOr),e(D9,FEe),e(FEe,QOr),e(D9,HOr),e(Cr,UOr),e(Cr,oa),M(G9,oa,null),e(oa,JOr),e(oa,TEe),e(TEe,YOr),e(oa,KOr),e(oa,Ff),e(Ff,ZOr),e(Ff,MEe),e(MEe,eVr),e(Ff,oVr),e(Ff,uZ),e(uZ,rVr),e(Ff,tVr),e(oa,aVr),M(s3,oa,null),e(Cr,nVr),e(Cr,Kr),M(O9,Kr,null),e(Kr,sVr),e(Kr,EEe),e(EEe,lVr),e(Kr,iVr),e(Kr,$n),e($n,dVr),e($n,CEe),e(CEe,cVr),e($n,fVr),e($n,wEe),e(wEe,mVr),e($n,gVr),e($n,AEe),e(AEe,hVr),e($n,pVr),e(Kr,uVr),e(Kr,yEe),e(yEe,l3),e(l3,LEe),e(LEe,_Vr),e(l3,bVr),e(l3,_Z),e(_Z,vVr),e(l3,FVr),e(Kr,TVr),M(i3,Kr,null),rDe=!0},p(f,[_]){const V9={};_&2&&(V9.$$scope={dirty:_,ctx:f}),xf.$set(V9);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),$g.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),ch.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),Gh.$set(kEe);const X9={};_&2&&(X9.$$scope={dirty:_,ctx:f}),Oh.$set(X9);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),lp.$set(SEe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),ip.$set(kn);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),fp.$set(REe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),a_.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),s_.$set(BEe);const z9={};_&2&&(z9.$$scope={dirty:_,ctx:f}),J_.$set(z9);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),K_.$set(IEe);const W9={};_&2&&(W9.$$scope={dirty:_,ctx:f}),I2.$set(W9);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),N2.$set(qEe);const Q9={};_&2&&(Q9.$$scope={dirty:_,ctx:f}),T1.$set(Q9);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),E1.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),G1.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),V1.$set(DEe);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:f}),qb.$set(Tf);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),jb.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),uv.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),bv.$set(VEe);const H9={};_&2&&(H9.$$scope={dirty:_,ctx:f}),wv.$set(H9);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),yv.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),iF.$set(zEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),cF.$set(WEe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),YF.$set(rt);const U9={};_&2&&(U9.$$scope={dirty:_,ctx:f}),ZF.$set(U9);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),r6.$set(QEe);const J9={};_&2&&(J9.$$scope={dirty:_,ctx:f}),a6.$set(J9);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),b6.$set(HEe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),F6.$set(tt);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),E6.$set(UEe);const Mf={};_&2&&(Mf.$$scope={dirty:_,ctx:f}),w6.$set(Mf);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),L6.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),$6.$set(YEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),G6.$set(y);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),V6.$set(d3);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),J6.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),K6.$set(ZEe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),dT.$set(c3);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),fT.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),pT.$set(oCe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),_T.$set(f3);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),CT.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),AT.$set(tCe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),kT.$set(m3);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),RT.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),qT.$set(nCe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),jT.$set(g3);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),OT.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),XT.$set(lCe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),JT.$set(h3);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),KT.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),o8.$set(dCe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),t8.$set(p3);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),U8.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),Y8.$set(fCe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),T7.$set(u3);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),E7.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),I7.$set(gCe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),N7.$set(_3);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),V7.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),z7.$set(pCe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),mM.$set(b3);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),hM.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),wM.$set(_Ce);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),yM.$set(v3);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),e4.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),r4.$set(vCe);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),F4.$set(F3);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),M4.$set(FCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),w4.$set(TCe);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),y4.$set(T3);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),x4.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),k4.$set(ECe);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),K4.$set(M3);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),eE.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),TE.$set(wCe);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),EE.$set(E3);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),wE.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),yE.$set(yCe);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),xE.$set(C3);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),kE.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),tC.$set(xCe);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),nC.$set(w3);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),pC.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),_C.$set(kCe);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),$C.$set(A3);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),SC.$set(SCe);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),VC.$set(RCe);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),zC.$set(y3);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),o5.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),t5.$set(BCe);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),h5.$set(L3);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),u5.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),y5.$set(qCe);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),x5.$set(x3);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),N5.$set(NCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),D5.$set(jCe);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),U5.$set($3);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),Y5.$set(DCe);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),Z5.$set(GCe);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),o3.$set(k3);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),a3.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),s3.$set(VCe);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),i3.$set(S3)},i(f){rDe||(E(d.$$.fragment,f),E(La.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(xf.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(j0.$$.fragment,f),E($g.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(z0.$$.fragment,f),E(ch.$$.fragment,f),E(W0.$$.fragment,f),E(Q0.$$.fragment,f),E(H0.$$.fragment,f),E(Y0.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(eA.$$.fragment,f),E(tA.$$.fragment,f),E(lp.$$.fragment,f),E(ip.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(iA.$$.fragment,f),E(fp.$$.fragment,f),E(dA.$$.fragment,f),E(a_.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(gA.$$.fragment,f),E(s_.$$.fragment,f),E(hA.$$.fragment,f),E(J_.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(K_.$$.fragment,f),E(vA.$$.fragment,f),E(I2.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(N2.$$.fragment,f),E(CA.$$.fragment,f),E(T1.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(E1.$$.fragment,f),E(xA.$$.fragment,f),E(G1.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(V1.$$.fragment,f),E(PA.$$.fragment,f),E(qb.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(jb.$$.fragment,f),E(jA.$$.fragment,f),E(uv.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(bv.$$.fragment,f),E(XA.$$.fragment,f),E(wv.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(yv.$$.fragment,f),E(UA.$$.fragment,f),E(iF.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(cF.$$.fragment,f),E(ey.$$.fragment,f),E(YF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(ZF.$$.fragment,f),E(ny.$$.fragment,f),E(r6.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(a6.$$.fragment,f),E(cy.$$.fragment,f),E(b6.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(F6.$$.fragment,f),E(py.$$.fragment,f),E(E6.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(w6.$$.fragment,f),E(Fy.$$.fragment,f),E(L6.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E($6.$$.fragment,f),E(wy.$$.fragment,f),E(G6.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(V6.$$.fragment,f),E($y.$$.fragment,f),E(J6.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(K6.$$.fragment,f),E(By.$$.fragment,f),E(dT.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(fT.$$.fragment,f),E(Dy.$$.fragment,f),E(pT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(_T.$$.fragment,f),E(Wy.$$.fragment,f),E(CT.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(AT.$$.fragment,f),E(Yy.$$.fragment,f),E(kT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(RT.$$.fragment,f),E(rL.$$.fragment,f),E(qT.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(jT.$$.fragment,f),E(iL.$$.fragment,f),E(OT.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(XT.$$.fragment,f),E(gL.$$.fragment,f),E(JT.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(KT.$$.fragment,f),E(bL.$$.fragment,f),E(o8.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(t8.$$.fragment,f),E(EL.$$.fragment,f),E(U8.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(Y8.$$.fragment,f),E(LL.$$.fragment,f),E(T7.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(E7.$$.fragment,f),E(RL.$$.fragment,f),E(I7.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(N7.$$.fragment,f),E(NL.$$.fragment,f),E(V7.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(z7.$$.fragment,f),E(VL.$$.fragment,f),E(mM.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(hM.$$.fragment,f),E(HL.$$.fragment,f),E(wM.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(yM.$$.fragment,f),E(ZL.$$.fragment,f),E(e4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(r4.$$.fragment,f),E(ax.$$.fragment,f),E(F4.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(M4.$$.fragment,f),E(dx.$$.fragment,f),E(w4.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(y4.$$.fragment,f),E(px.$$.fragment,f),E(x4.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(k4.$$.fragment,f),E(Fx.$$.fragment,f),E(K4.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(eE.$$.fragment,f),E(wx.$$.fragment,f),E(TE.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(EE.$$.fragment,f),E($x.$$.fragment,f),E(wE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(yE.$$.fragment,f),E(Bx.$$.fragment,f),E(xE.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(kE.$$.fragment,f),E(Dx.$$.fragment,f),E(tC.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(nC.$$.fragment,f),E(zx.$$.fragment,f),E(pC.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(_C.$$.fragment,f),E(Jx.$$.fragment,f),E($C.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e9.$$.fragment,f),E(SC.$$.fragment,f),E(o9.$$.fragment,f),E(VC.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(zC.$$.fragment,f),E(s9.$$.fragment,f),E(o5.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(t5.$$.fragment,f),E(f9.$$.fragment,f),E(h5.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(u5.$$.fragment,f),E(u9.$$.fragment,f),E(y5.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(x5.$$.fragment,f),E(T9.$$.fragment,f),E(N5.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(D5.$$.fragment,f),E(A9.$$.fragment,f),E(U5.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(Y5.$$.fragment,f),E(k9.$$.fragment,f),E(Z5.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(o3.$$.fragment,f),E(I9.$$.fragment,f),E(a3.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(s3.$$.fragment,f),E(O9.$$.fragment,f),E(i3.$$.fragment,f),rDe=!0)},o(f){C(d.$$.fragment,f),C(La.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(xf.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(j0.$$.fragment,f),C($g.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(z0.$$.fragment,f),C(ch.$$.fragment,f),C(W0.$$.fragment,f),C(Q0.$$.fragment,f),C(H0.$$.fragment,f),C(Y0.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(eA.$$.fragment,f),C(tA.$$.fragment,f),C(lp.$$.fragment,f),C(ip.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(iA.$$.fragment,f),C(fp.$$.fragment,f),C(dA.$$.fragment,f),C(a_.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(gA.$$.fragment,f),C(s_.$$.fragment,f),C(hA.$$.fragment,f),C(J_.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(K_.$$.fragment,f),C(vA.$$.fragment,f),C(I2.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(N2.$$.fragment,f),C(CA.$$.fragment,f),C(T1.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(E1.$$.fragment,f),C(xA.$$.fragment,f),C(G1.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(V1.$$.fragment,f),C(PA.$$.fragment,f),C(qb.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(jb.$$.fragment,f),C(jA.$$.fragment,f),C(uv.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(bv.$$.fragment,f),C(XA.$$.fragment,f),C(wv.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(yv.$$.fragment,f),C(UA.$$.fragment,f),C(iF.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(cF.$$.fragment,f),C(ey.$$.fragment,f),C(YF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(ZF.$$.fragment,f),C(ny.$$.fragment,f),C(r6.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(a6.$$.fragment,f),C(cy.$$.fragment,f),C(b6.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(F6.$$.fragment,f),C(py.$$.fragment,f),C(E6.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(w6.$$.fragment,f),C(Fy.$$.fragment,f),C(L6.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C($6.$$.fragment,f),C(wy.$$.fragment,f),C(G6.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(V6.$$.fragment,f),C($y.$$.fragment,f),C(J6.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(K6.$$.fragment,f),C(By.$$.fragment,f),C(dT.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(fT.$$.fragment,f),C(Dy.$$.fragment,f),C(pT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(_T.$$.fragment,f),C(Wy.$$.fragment,f),C(CT.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(AT.$$.fragment,f),C(Yy.$$.fragment,f),C(kT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(RT.$$.fragment,f),C(rL.$$.fragment,f),C(qT.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(jT.$$.fragment,f),C(iL.$$.fragment,f),C(OT.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(XT.$$.fragment,f),C(gL.$$.fragment,f),C(JT.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(KT.$$.fragment,f),C(bL.$$.fragment,f),C(o8.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(t8.$$.fragment,f),C(EL.$$.fragment,f),C(U8.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(Y8.$$.fragment,f),C(LL.$$.fragment,f),C(T7.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(E7.$$.fragment,f),C(RL.$$.fragment,f),C(I7.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(N7.$$.fragment,f),C(NL.$$.fragment,f),C(V7.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(z7.$$.fragment,f),C(VL.$$.fragment,f),C(mM.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(hM.$$.fragment,f),C(HL.$$.fragment,f),C(wM.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(yM.$$.fragment,f),C(ZL.$$.fragment,f),C(e4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(r4.$$.fragment,f),C(ax.$$.fragment,f),C(F4.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(M4.$$.fragment,f),C(dx.$$.fragment,f),C(w4.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(y4.$$.fragment,f),C(px.$$.fragment,f),C(x4.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(k4.$$.fragment,f),C(Fx.$$.fragment,f),C(K4.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(eE.$$.fragment,f),C(wx.$$.fragment,f),C(TE.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(EE.$$.fragment,f),C($x.$$.fragment,f),C(wE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(yE.$$.fragment,f),C(Bx.$$.fragment,f),C(xE.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(kE.$$.fragment,f),C(Dx.$$.fragment,f),C(tC.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(nC.$$.fragment,f),C(zx.$$.fragment,f),C(pC.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(_C.$$.fragment,f),C(Jx.$$.fragment,f),C($C.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e9.$$.fragment,f),C(SC.$$.fragment,f),C(o9.$$.fragment,f),C(VC.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(zC.$$.fragment,f),C(s9.$$.fragment,f),C(o5.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(t5.$$.fragment,f),C(f9.$$.fragment,f),C(h5.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(u5.$$.fragment,f),C(u9.$$.fragment,f),C(y5.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(x5.$$.fragment,f),C(T9.$$.fragment,f),C(N5.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(D5.$$.fragment,f),C(A9.$$.fragment,f),C(U5.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(Y5.$$.fragment,f),C(k9.$$.fragment,f),C(Z5.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(o3.$$.fragment,f),C(I9.$$.fragment,f),C(a3.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(s3.$$.fragment,f),C(O9.$$.fragment,f),C(i3.$$.fragment,f),rDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Cf),f&&t(at),f&&t(je),f&&t(We),f&&t(Af),w(La,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(Yqe),f&&t(Ci),w(R0),f&&t(Kqe),f&&t(In),f&&t(Zqe),w(P0,f),f&&t(eNe),f&&t(lk),f&&t(oNe),w(xf,f),f&&t(rNe),f&&t(wi),w(B0),f&&t(tNe),f&&t(wo),w(I0),w(j0),w($g),w(D0),f&&t(aNe),f&&t(yi),w(G0),f&&t(nNe),f&&t(Ao),w(O0),w(z0),w(ch),w(W0),f&&t(sNe),f&&t(Li),w(Q0),f&&t(lNe),f&&t(yo),w(H0),w(Y0),w(Gh),w(Oh),w(K0),f&&t(iNe),f&&t(xi),w(Z0),f&&t(dNe),f&&t(Lo),w(eA),w(tA),w(lp),w(ip),w(aA),f&&t(cNe),f&&t(ki),w(nA),f&&t(fNe),f&&t(xo),w(sA),w(iA),w(fp),w(dA),w(a_),f&&t(mNe),f&&t(Pi),w(cA),f&&t(gNe),f&&t($o),w(fA),w(gA),w(s_),w(hA),w(J_),f&&t(hNe),f&&t(qi),w(pA),f&&t(pNe),f&&t(ko),w(uA),w(bA),w(K_),w(vA),w(I2),f&&t(uNe),f&&t(Di),w(FA),f&&t(_Ne),f&&t(So),w(TA),w(EA),w(N2),w(CA),w(T1),f&&t(bNe),f&&t(Vi),w(wA),f&&t(vNe),f&&t(Ro),w(AA),w(LA),w(E1),w(xA),w(G1),f&&t(FNe),f&&t(Wi),w($A),f&&t(TNe),f&&t(Po),w(kA),w(RA),w(V1),w(PA),w(qb),f&&t(MNe),f&&t(Ui),w(BA),f&&t(ENe),f&&t(Bo),w(IA),w(NA),w(jb),w(jA),w(uv),f&&t(CNe),f&&t(Ki),w(DA),f&&t(wNe),f&&t(Io),w(GA),w(VA),w(bv),w(XA),w(wv),f&&t(ANe),f&&t(od),w(zA),f&&t(yNe),f&&t(qo),w(WA),w(HA),w(yv),w(UA),w(iF),f&&t(LNe),f&&t(ad),w(JA),f&&t(xNe),f&&t(No),w(YA),w(ZA),w(cF),w(ey),w(YF),f&&t($Ne),f&&t(ld),w(oy),f&&t(kNe),f&&t(jo),w(ry),w(ay),w(ZF),w(ny),w(r6),f&&t(SNe),f&&t(cd),w(sy),f&&t(RNe),f&&t(Do),w(ly),w(dy),w(a6),w(cy),w(b6),f&&t(PNe),f&&t(gd),w(fy),f&&t(BNe),f&&t(Go),w(my),w(hy),w(F6),w(py),w(E6),f&&t(INe),f&&t(ud),w(uy),f&&t(qNe),f&&t(Oo),w(_y),w(vy),w(w6),w(Fy),w(L6),f&&t(NNe),f&&t(vd),w(Ty),f&&t(jNe),f&&t(Vo),w(My),w(Cy),w($6),w(wy),w(G6),f&&t(DNe),f&&t(Md),w(Ay),f&&t(GNe),f&&t(Xo),w(yy),w(xy),w(V6),w($y),w(J6),f&&t(ONe),f&&t(wd),w(ky),f&&t(VNe),f&&t(zo),w(Sy),w(Py),w(K6),w(By),w(dT),f&&t(XNe),f&&t(Ld),w(Iy),f&&t(zNe),f&&t(Wo),w(qy),w(jy),w(fT),w(Dy),w(pT),f&&t(WNe),f&&t(kd),w(Oy),f&&t(QNe),f&&t(Qo),w(Vy),w(zy),w(_T),w(Wy),w(CT),f&&t(HNe),f&&t(Pd),w(Qy),f&&t(UNe),f&&t(Ho),w(Hy),w(Jy),w(AT),w(Yy),w(kT),f&&t(JNe),f&&t(Nd),w(Ky),f&&t(YNe),f&&t(Uo),w(Zy),w(oL),w(RT),w(rL),w(qT),f&&t(KNe),f&&t(Gd),w(aL),f&&t(ZNe),f&&t(Jo),w(nL),w(lL),w(jT),w(iL),w(OT),f&&t(eje),f&&t(Xd),w(dL),f&&t(oje),f&&t(Yo),w(cL),w(mL),w(XT),w(gL),w(JT),f&&t(rje),f&&t(Qd),w(hL),f&&t(tje),f&&t(Ko),w(pL),w(_L),w(KT),w(bL),w(o8),f&&t(aje),f&&t(Jd),w(vL),f&&t(nje),f&&t(Zo),w(FL),w(ML),w(t8),w(EL),w(U8),f&&t(sje),f&&t(Zd),w(CL),f&&t(lje),f&&t(er),w(wL),w(yL),w(Y8),w(LL),w(T7),f&&t(ije),f&&t(rc),w(xL),f&&t(dje),f&&t(or),w($L),w(SL),w(E7),w(RL),w(I7),f&&t(cje),f&&t(nc),w(PL),f&&t(fje),f&&t(rr),w(BL),w(qL),w(N7),w(NL),w(V7),f&&t(mje),f&&t(ic),w(jL),f&&t(gje),f&&t(tr),w(DL),w(OL),w(z7),w(VL),w(mM),f&&t(hje),f&&t(fc),w(XL),f&&t(pje),f&&t(ar),w(zL),w(QL),w(hM),w(HL),w(wM),f&&t(uje),f&&t(hc),w(UL),f&&t(_je),f&&t(nr),w(JL),w(KL),w(yM),w(ZL),w(e4),f&&t(bje),f&&t(_c),w(ex),f&&t(vje),f&&t(sr),w(ox),w(tx),w(r4),w(ax),w(F4),f&&t(Fje),f&&t(Fc),w(nx),f&&t(Tje),f&&t(lr),w(sx),w(ix),w(M4),w(dx),w(w4),f&&t(Mje),f&&t(Ec),w(fx),f&&t(Eje),f&&t(ir),w(mx),w(hx),w(y4),w(px),w(x4),f&&t(Cje),f&&t(Ac),w(ux),f&&t(wje),f&&t(dr),w(_x),w(vx),w(k4),w(Fx),w(K4),f&&t(Aje),f&&t(xc),w(Tx),f&&t(yje),f&&t(cr),w(Mx),w(Cx),w(eE),w(wx),w(TE),f&&t(Lje),f&&t(Sc),w(Ax),f&&t(xje),f&&t(fr),w(yx),w(xx),w(EE),w($x),w(wE),f&&t($je),f&&t(Bc),w(kx),f&&t(kje),f&&t(mr),w(Sx),w(Px),w(yE),w(Bx),w(xE),f&&t(Sje),f&&t(Nc),w(Ix),f&&t(Rje),f&&t(gr),w(qx),w(jx),w(kE),w(Dx),w(tC),f&&t(Pje),f&&t(Gc),w(Gx),f&&t(Bje),f&&t(hr),w(Ox),w(Xx),w(nC),w(zx),w(pC),f&&t(Ije),f&&t(Xc),w(Wx),f&&t(qje),f&&t(pr),w(Qx),w(Ux),w(_C),w(Jx),w($C),f&&t(Nje),f&&t(Qc),w(Yx),f&&t(jje),f&&t(ur),w(Kx),w(e9),w(SC),w(o9),w(VC),f&&t(Dje),f&&t(Jc),w(r9),f&&t(Gje),f&&t(_r),w(t9),w(n9),w(zC),w(s9),w(o5),f&&t(Oje),f&&t(Zc),w(l9),f&&t(Vje),f&&t(br),w(i9),w(c9),w(t5),w(f9),w(h5),f&&t(Xje),f&&t(rf),w(m9),f&&t(zje),f&&t(vr),w(g9),w(p9),w(u5),w(u9),w(y5),f&&t(Wje),f&&t(nf),w(_9),f&&t(Qje),f&&t(Fr),w(b9),w(F9),w(x5),w(T9),w(N5),f&&t(Hje),f&&t(df),w(M9),f&&t(Uje),f&&t(Tr),w(E9),w(w9),w(D5),w(A9),w(U5),f&&t(Jje),f&&t(mf),w(y9),f&&t(Yje),f&&t(Mr),w(L9),w($9),w(Y5),w(k9),w(Z5),f&&t(Kje),f&&t(pf),w(S9),f&&t(Zje),f&&t(Er),w(R9),w(B9),w(o3),w(I9),w(a3),f&&t(eDe),f&&t(bf),w(N9),f&&t(oDe),f&&t(Cr),w(j9),w(G9),w(s3),w(O9),w(i3)}}}const Kkt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Zkt(L){return Y9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sSt extends Q9t{constructor(g){super();H9t(this,g,Zkt,Ykt,U9t,{})}}export{sSt as default,Kkt as metadata};
